{
  "HypertyConnector": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "HypertyConnector",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 10001,
    "type": "Hyperties",
    "version": "0.1",
    "description": "Description of HypertyConnector",
    "objectName": "HypertyConnector",
    "configuration": {},
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "HelloWorldObserver": {
    "sourcePackage": {
      "sourceCode": "KGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09Im9iamVjdCImJnR5cGVvZiBtb2R1bGUhPT0idW5kZWZpbmVkIil7bW9kdWxlLmV4cG9ydHM9ZigpfWVsc2UgaWYodHlwZW9mIGRlZmluZT09PSJmdW5jdGlvbiImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT0idW5kZWZpbmVkIil7Zz13aW5kb3d9ZWxzZSBpZih0eXBlb2YgZ2xvYmFsIT09InVuZGVmaW5lZCIpe2c9Z2xvYmFsfWVsc2UgaWYodHlwZW9mIHNlbGYhPT0idW5kZWZpbmVkIil7Zz1zZWxmfWVsc2V7Zz10aGlzfWcuYWN0aXZhdGUgPSBmKCl9fSkoZnVuY3Rpb24oKXt2YXIgZGVmaW5lLG1vZHVsZSxleHBvcnRzO3JldHVybiAoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PSJmdW5jdGlvbiImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoIkNhbm5vdCBmaW5kIG1vZHVsZSAnIitvKyInIik7dGhyb3cgZi5jb2RlPSJNT0RVTEVfTk9UX0ZPVU5EIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PSJmdW5jdGlvbiImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCJfX2VzTW9kdWxlIix7dmFsdWU6dHJ1ZX0pO3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCxwcm9wcyl7Zm9yKHZhciBpPTA7aTxwcm9wcy5sZW5ndGg7aSsrKXt2YXIgZGVzY3JpcHRvcj1wcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGU9ZGVzY3JpcHRvci5lbnVtZXJhYmxlfHxmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZT10cnVlO2lmKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fXJldHVybiBmdW5jdGlvbihDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9O30oKTtleHBvcnRzLmRlZmF1bHQ9YWN0aXZhdGU7dmFyIF9TeW5jaGVyPXJlcXVpcmUoJ3NlcnZpY2UtZnJhbWV3b3JrL2Rpc3QvU3luY2hlcicpO3ZhciBfdXRpbHM9cmVxdWlyZSgnLi4vdXRpbHMvdXRpbHMnKTt2YXIgX0V2ZW50RW1pdHRlcjI9cmVxdWlyZSgnLi4vdXRpbHMvRXZlbnRFbWl0dGVyJyk7dmFyIF9FdmVudEVtaXR0ZXIzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0V2ZW50RW1pdHRlcjIpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e2RlZmF1bHQ6b2JqfTt9ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLENvbnN0cnVjdG9yKXtpZighKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKXt0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTt9fWZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsY2FsbCl7aWYoIXNlbGYpe3Rocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7fXJldHVybiBjYWxsJiYodHlwZW9mIGNhbGw9PT0ib2JqZWN0Inx8dHlwZW9mIGNhbGw9PT0iZnVuY3Rpb24iKT9jYWxsOnNlbGY7fWZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcyxzdXBlckNsYXNzKXtpZih0eXBlb2Ygc3VwZXJDbGFzcyE9PSJmdW5jdGlvbiImJnN1cGVyQ2xhc3MhPT1udWxsKXt0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICIrdHlwZW9mIHN1cGVyQ2xhc3MpO31zdWJDbGFzcy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzJiZzdXBlckNsYXNzLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnN1YkNsYXNzLGVudW1lcmFibGU6ZmFsc2Usd3JpdGFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZX19KTtpZihzdXBlckNsYXNzKU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3Msc3VwZXJDbGFzcyk6c3ViQ2xhc3MuX19wcm90b19fPXN1cGVyQ2xhc3M7fSAvKiBqc2hpbnQgdW5kZWY6IHRydWUgKi8gLyoqCiogSGVsbG8gV29ybGQgT2JzZXJ2ZXIKKiBAYXV0aG9yIFBhdWxvIENoYWluaG8gW3BhdWxvLWctY2hhaW5ob0B0ZWxlY29tLnB0XQoqIEB2ZXJzaW9uIDAuMS4wCiovdmFyIEhlbGxvV29ybGRPYnNlcnZlcj1mdW5jdGlvbihfRXZlbnRFbWl0dGVyKXtfaW5oZXJpdHMoSGVsbG9Xb3JsZE9ic2VydmVyLF9FdmVudEVtaXR0ZXIpOyAvKioKICAqIENyZWF0ZSBhIG5ldyBIZWxsb1dvcmxkT2JzZXJ2ZXIKICAqIEBwYXJhbSAge1N5bmNoZXJ9IHN5bmNoZXIgLSBTeW5jaGVyIHByb3ZpZGVkIGZyb20gdGhlIHJ1bnRpbWUgY29yZQogICovZnVuY3Rpb24gSGVsbG9Xb3JsZE9ic2VydmVyKGh5cGVydHlVUkwsYnVzLGNvbmZpZ3VyYXRpb24pe19jbGFzc0NhbGxDaGVjayh0aGlzLEhlbGxvV29ybGRPYnNlcnZlcik7aWYoIWh5cGVydHlVUkwpdGhyb3cgbmV3IEVycm9yKCdUaGUgaHlwZXJ0eVVSTCBpcyBhIG5lZWRlZCBwYXJhbWV0ZXInKTtpZighYnVzKXRocm93IG5ldyBFcnJvcignVGhlIE1pbmlCdXMgaXMgYSBuZWVkZWQgcGFyYW1ldGVyJyk7aWYoIWNvbmZpZ3VyYXRpb24pdGhyb3cgbmV3IEVycm9yKCdUaGUgY29uZmlndXJhdGlvbiBpcyBhIG5lZWRlZCBwYXJhbWV0ZXInKTt2YXIgX3RoaXMyPV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsT2JqZWN0LmdldFByb3RvdHlwZU9mKEhlbGxvV29ybGRPYnNlcnZlcikuY2FsbCh0aGlzKSk7dmFyIF90aGlzPV90aGlzMjtfdGhpcy5fZG9tYWluPSgwLF91dGlscy5kaXZpZGVVUkwpKGh5cGVydHlVUkwpLmRvbWFpbjtfdGhpcy5fb2JqZWN0RGVzY1VSTD0naHlwZXJ0eS1jYXRhbG9ndWU6Ly8nK190aGlzLl9kb21haW4rJy8ud2VsbC1rbm93bi9kYXRhc2NoZW1hcy9IZWxsb1dvcmxkRGF0YVNjaGVtYSc7dmFyIGRvbWFpbj0oMCxfdXRpbHMuZGl2aWRlVVJMKShoeXBlcnR5VVJMKS5kb21haW47dmFyIHN5bmNoZXI9bmV3IF9TeW5jaGVyLlN5bmNoZXIoaHlwZXJ0eVVSTCxidXMsY29uZmlndXJhdGlvbik7c3luY2hlci5vbk5vdGlmaWNhdGlvbihmdW5jdGlvbihldmVudCl7X3RoaXMuX29uTm90aWZpY2F0aW9uKGV2ZW50KTt9KTtfdGhpcy5fc3luY2hlcj1zeW5jaGVyO3JldHVybiBfdGhpczI7fV9jcmVhdGVDbGFzcyhIZWxsb1dvcmxkT2JzZXJ2ZXIsW3trZXk6J19vbk5vdGlmaWNhdGlvbicsdmFsdWU6ZnVuY3Rpb24gX29uTm90aWZpY2F0aW9uKGV2ZW50KXt2YXIgX3RoaXM9dGhpcztjb25zb2xlLmluZm8oJ0V2ZW50IFJlY2VpdmVkOiAnLGV2ZW50KTtfdGhpcy50cmlnZ2VyKCdpbnZpdGF0aW9uJyxldmVudC5pZGVudGl0eSk7IC8vIEFja25vd2xlZGdlIHJlcG9ydGVyIGFib3V0IHRoZSBJbnZpdGF0aW9uIHdhcyByZWNlaXZlZApldmVudC5hY2soKTsgLy8gU3Vic2NyaWJlIEhlbGxvIFdvcmxkIE9iamVjdApfdGhpcy5fc3luY2hlci5zdWJzY3JpYmUoX3RoaXMuX29iamVjdERlc2NVUkwsZXZlbnQudXJsKS50aGVuKGZ1bmN0aW9uKGhlbGxvT2JqdE9ic2VydmVyKXsgLy8gSGVsbG8gV29ybGQgT2JqZWN0IHdhcyBzdWJzY3JpYmVkCmNvbnNvbGUuaW5mbyhoZWxsb09ianRPYnNlcnZlcik7IC8vIGxldHMgbm90aWZ5IHRoZSBBcHAgdGhlIHN1YnNjcmlwdGlvbiB3YXMgYWNjZXB0ZWQgd2l0aCB0aGUgbW5vc3QgdXBkYXRlZCB2ZXJzaW9uIG9mIEhlbGxvIFdvcmxkIE9iamVjdApfdGhpcy50cmlnZ2VyKCdoZWxsbycsaGVsbG9PYmp0T2JzZXJ2ZXIuZGF0YSk7IC8vIGxldHMgbm93IG9ic2VydmUgYW55IGNoYW5nZXMgZG9uZSBpbiBIZWxsbyBXb3JsZCBPYmplY3QKaGVsbG9PYmp0T2JzZXJ2ZXIub25DaGFuZ2UoJyonLGZ1bmN0aW9uKGV2ZW50KXsgLy8gSGVsbG8gV29ybGQgT2JqZWN0IHdhcyBjaGFuZ2VkCmNvbnNvbGUuaW5mbygnbWVzc2FnZSByZWNlaXZlZDonLGV2ZW50KTsgLy8gbGV0cyBub3RpZnkgdGhlIEFwcCBhYm91dCB0aGUgY2hhbmdlCl90aGlzLnRyaWdnZXIoJ2hlbGxvJyxoZWxsb09ianRPYnNlcnZlci5kYXRhKTt9KTt9KS5jYXRjaChmdW5jdGlvbihyZWFzb24pe2NvbnNvbGUuZXJyb3IocmVhc29uKTt9KTt9fV0pO3JldHVybiBIZWxsb1dvcmxkT2JzZXJ2ZXI7fShfRXZlbnRFbWl0dGVyMy5kZWZhdWx0KTtmdW5jdGlvbiBhY3RpdmF0ZShoeXBlcnR5VVJMLGJ1cyxjb25maWd1cmF0aW9uKXtyZXR1cm4ge25hbWU6J0hlbGxvV29ybGRPYnNlcnZlcicsaW5zdGFuY2U6bmV3IEhlbGxvV29ybGRPYnNlcnZlcihoeXBlcnR5VVJMLGJ1cyxjb25maWd1cmF0aW9uKX07fW1vZHVsZS5leHBvcnRzPWV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuLi91dGlscy9FdmVudEVtaXR0ZXIiOjIsIi4uL3V0aWxzL3V0aWxzIjozLCJzZXJ2aWNlLWZyYW1ld29yay9kaXN0L1N5bmNoZXIiOjR9XSwyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCJfX2VzTW9kdWxlIix7dmFsdWU6dHJ1ZX0pO3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCxwcm9wcyl7Zm9yKHZhciBpPTA7aTxwcm9wcy5sZW5ndGg7aSsrKXt2YXIgZGVzY3JpcHRvcj1wcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGU9ZGVzY3JpcHRvci5lbnVtZXJhYmxlfHxmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZT10cnVlO2lmKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fXJldHVybiBmdW5jdGlvbihDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9O30oKTtmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsQ29uc3RydWN0b3Ipe2lmKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3Rvcikpe3Rocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpO319IC8qKgoqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQoqIENvcHlyaWdodCAyMDE2IElORVNDLUlECiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMCiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYKKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0EKKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHCiogQ29weXJpZ2h0IDIwMTYgQXBpemVlCiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4KKgoqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwoqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKKgoqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCioKKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCioqLyAvKioKICogRXZlbnRFbWl0dGVyCiAqIEFsbCBjbGFzc2VzIHdoaWNoIGV4dGVuZHMgdGhpcywgY2FuIGhhdmUgYWRkRXZlbnRMaXN0ZW5lciBhbmQgdHJpZ2dlciBldmVudHM7CiAqL3ZhciBFdmVudEVtaXR0ZXI9ZnVuY3Rpb24oKXtmdW5jdGlvbiBFdmVudEVtaXR0ZXIoKXtfY2xhc3NDYWxsQ2hlY2sodGhpcyxFdmVudEVtaXR0ZXIpO31fY3JlYXRlQ2xhc3MoRXZlbnRFbWl0dGVyLFt7a2V5OiJhZGRFdmVudExpc3RlbmVyIiwgLyoqCiAgICogYWRkRXZlbnRMaXN0ZW5lciBsaXN0ZW4gZm9yIGFuIGV2ZW50VHlwZQogICAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICBldmVudFR5cGUgLSBsaXN0ZW5pbmcgZm9yIHRoaXMgdHlwZSBvZiBldmVudAogICAqIEBwYXJhbSAge0Z1bmN0aW9ufSAgICAgICBjYiAgICAgICAgLSBjYWxsYmFjayBmdW5jdGlvbiB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gdGhlIGV2ZW50IGl0IGlzIGludm9rZWQKICAgKi92YWx1ZTpmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSxjYil7dmFyIF90aGlzPXRoaXM7X3RoaXNbZXZlbnRUeXBlXT1jYjt9IC8qKgogICAqIEludm9rZSB0aGUgZXZlbnRUeXBlCiAgICogQHBhcmFtICB7c3RyaW5nfSBldmVudFR5cGUgLSBldmVudCB3aWxsIGJlIGludm9rZWQKICAgKiBAcGFyYW0gIHtvYmplY3R9IHBhcmFtcyAtIHBhcmFtZXRlcnMgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGFkZEV2ZW50TGlzdGVuZXIKICAgKi99LHtrZXk6InRyaWdnZXIiLHZhbHVlOmZ1bmN0aW9uIHRyaWdnZXIoZXZlbnRUeXBlLHBhcmFtcyl7dmFyIF90aGlzPXRoaXM7aWYoX3RoaXNbZXZlbnRUeXBlXSl7X3RoaXNbZXZlbnRUeXBlXShwYXJhbXMpO319fV0pO3JldHVybiBFdmVudEVtaXR0ZXI7fSgpO2V4cG9ydHMuZGVmYXVsdD1FdmVudEVtaXR0ZXI7bW9kdWxlLmV4cG9ydHM9ZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7fV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywiX19lc01vZHVsZSIse3ZhbHVlOnRydWV9KTtleHBvcnRzLmRpdmlkZVVSTD1kaXZpZGVVUkw7ZXhwb3J0cy5kZWVwQ2xvbmU9ZGVlcENsb25lO2V4cG9ydHMuZ2V0Q29uZmlnPWdldENvbmZpZztleHBvcnRzLmdldFVzZXJNZWRpYT1nZXRVc2VyTWVkaWE7ZXhwb3J0cy5zZXJpYWxpemU9c2VyaWFsaXplO2V4cG9ydHMuZ2V0VGVtcGxhdGU9Z2V0VGVtcGxhdGU7IC8qKgogKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0EKICogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQKICogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMCiAqIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WCiAqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQogKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHCiAqIENvcHlyaWdodCAyMDE2IEFwaXplZQogKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTgogKgogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICoKICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICoKICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQogKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAogKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAogKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KICoqLyAvLyBqc2hpbnQgYnJvd3Nlcjp0cnVlLCBqcXVlcnk6IHRydWUKLy8ganNoaW50IHZhcnN0bXQ6IHRydWUKLyogZ2xvYmFsIEhhbmRsZWJhcnMgKi8gLyoqCiAqIFN1cHBvcnQgbW9kdWxlIHdpdGggc29tZSBmdW5jdGlvbnMgd2lsbCBiZSB1c2VmdWwKICogQG1vZHVsZSB1dGlscwogKi8gLyoqCiAqIEB0eXBlZGVmIGRpdmlkZVVSTAogKiBAdHlwZSBPYmplY3QKICogQHByb3BlcnR5IHtzdHJpbmd9IHR5cGUgVGhlIHR5cGUgb2YgVVJMCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkb21haW4gVGhlIGRvbWFpbiBvZiBVUkwKICogQHByb3BlcnR5IHtzdHJpbmd9IGlkZW50aXR5IFRoZSBpZGVudGl0eSBvZiBVUkwKICovIC8qKgogKiBEaXZpZGUgYW4gdXJsIGluIHR5cGUsIGRvbWFpbiBhbmQgaWRlbnRpdHkKICogQHBhcmFtICB7VVJMLlVSTH0gdXJsIC0gdXJsIGFkZHJlc3MKICogQHJldHVybiB7ZGl2aWRlVVJMfSB0aGUgcmVzdWx0IG9mIGRpdmlkZVVSTAogKi9mdW5jdGlvbiBkaXZpZGVVUkwodXJsKXsgLy8gbGV0IHJlID0gLyhbYS16QS1aLV0qKT86XC9cLyg/OlwuKT8oWy1hLXpBLVowLTlAOiUuX1wrfiM9XXsyLDI1Nn1cLlthLXpdezIsNn1cYikqKFwvW1wvXGRcd1wuLV0qKSooPzpbXD9dKSooLispKi9naTsKdmFyIHJlPS8oW2EtekEtWi1dKik6XC9cLyg/OlwuKT8oWy1hLXpBLVowLTlAOiUuX1wrfiM9XXsyLDI1Nn0pKFstYS16QS1aMC05QDolLl9cK34jPVwvXSopL2dpO3ZhciBzdWJzdD0nJDEsJDIsJDMnO3ZhciBwYXJ0cz11cmwucmVwbGFjZShyZSxzdWJzdCkuc3BsaXQoJywnKTsgLy8gSWYgdGhlIHVybCBoYXMgbm8gcHJvdG9jb2wsIHRoZSBkZWZhdWx0IHByb3RvY29sIHNldCBpcyBodHRwcwppZihwYXJ0c1swXT09PXVybCl7cGFydHNbMF09J2h0dHBzJztwYXJ0c1sxXT11cmw7fXZhciByZXN1bHQ9e3R5cGU6cGFydHNbMF0sZG9tYWluOnBhcnRzWzFdLGlkZW50aXR5OnBhcnRzWzJdfTtyZXR1cm4gcmVzdWx0O30gLyoqCiAqIE1ha2UgYSBDT1BZIG9mIHRoZSBvcmlnaW5hbCBkYXRhCiAqIEBwYXJhbSAge09iamVjdH0gIG9iaiAtIG9iamVjdCB0byBiZSBjbG9uZWQKICogQHJldHVybiB7T2JqZWN0fQogKi9mdW5jdGlvbiBkZWVwQ2xvbmUob2JqKXsgLy9UT0RPOiBzaW1wbGUgYnV0IGluZWZmaWNpZW50IEpTT04gZGVlcCBjbG9uZS4uLgppZihvYmopcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqKSk7fSAvKioKICogR2V0IHRoZSBjb25maWd1cmF0aW9uIGZyb20gYW4ganNvbiBmaWxlOwogKiBAcGFyYW0gIHtKU09OT2JqZWN0fSBqc29uRmlsZQogKiBAcmV0dXJuIHtvYmplY3R9CiAqL2Z1bmN0aW9uIGdldENvbmZpZyhKU09OT2JqZWN0KXtjb25zb2xlLmxvZygnZGV2ZWxvcG1lbnQnKTtyZXR1cm4gSlNPTk9iamVjdFsnZGV2ZWxvcG1lbnQnXTt9IC8qKgogKiBHZXQgV2ViUlRDIEFQSSByZXNvdXJjZXMKICogQHBhcmFtICB7T2JqZWN0fSAgICAgb3B0aW9ucyBPYmplY3QgY29udGFpbmluZyB0aGUgaW5mb3JtYXRpb24gdGhhdCByZXNvdXJjZXMgd2lsbCBiZSB1c2VkIChjYW1lcmEsIG1pYywgcmVzb2x1dGlvbiwgZXRjKTsKICogQHJldHVybiB7UHJvbWlzZX0KICovZnVuY3Rpb24gZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe25hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzKS50aGVuKGZ1bmN0aW9uKG1lZGlhU3RyZWFtKXtyZXNvbHZlKG1lZGlhU3RyZWFtKTt9KS5jYXRjaChmdW5jdGlvbihyZWFzb24pe3JlamVjdChyZWFzb24pO30pO30pO31mdW5jdGlvbiBzZXJpYWxpemUoKXskLmZuLnNlcmlhbGl6ZU9iamVjdD1mdW5jdGlvbigpe3ZhciBvPXt9O3ZhciBhPXRoaXMuc2VyaWFsaXplQXJyYXkoKTskLmVhY2goYSxmdW5jdGlvbigpe2lmKG9bdGhpcy5uYW1lXSE9PXVuZGVmaW5lZCl7aWYoIW9bdGhpcy5uYW1lXS5wdXNoKXtvW3RoaXMubmFtZV09W29bdGhpcy5uYW1lXV07fW9bdGhpcy5uYW1lXS5wdXNoKHRoaXMudmFsdWV8fCcnKTt9ZWxzZSB7b1t0aGlzLm5hbWVdPXRoaXMudmFsdWV8fCcnO319KTtyZXR1cm4gbzt9OyQuZm4uc2VyaWFsaXplT2JqZWN0QXJyYXk9ZnVuY3Rpb24oKXt2YXIgbz17fTt2YXIgYT10aGlzLnNlcmlhbGl6ZUFycmF5KCk7JC5lYWNoKGEsZnVuY3Rpb24oKXtpZihvW3RoaXMubmFtZV0hPT11bmRlZmluZWQpe2lmKCFvW3RoaXMubmFtZV0ucHVzaCl7b1t0aGlzLm5hbWVdPVtvW3RoaXMubmFtZV1dO31vW3RoaXMubmFtZV0ucHVzaCh0aGlzLnZhbHVlfHwnJyk7fWVsc2Uge2lmKCFvW3RoaXMubmFtZV0pb1t0aGlzLm5hbWVdPVtdO29bdGhpcy5uYW1lXS5wdXNoKHRoaXMudmFsdWV8fCcnKTt9fSk7cmV0dXJuIG87fTt9ZnVuY3Rpb24gZ2V0VGVtcGxhdGUocGF0aCxzY3JpcHQpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7aWYoSGFuZGxlYmFycy50ZW1wbGF0ZXM9PT11bmRlZmluZWR8fEhhbmRsZWJhcnMudGVtcGxhdGVzW25hbWVdPT09dW5kZWZpbmVkKXtIYW5kbGViYXJzLnRlbXBsYXRlcz17fTt9ZWxzZSB7cmVzb2x2ZShIYW5kbGViYXJzLnRlbXBsYXRlc1tuYW1lXSk7fXZhciB0ZW1wbGF0ZUZpbGU9JC5hamF4KHt1cmw6cGF0aCsnLmhicycsc3VjY2VzczpmdW5jdGlvbiBzdWNjZXNzKGRhdGEpe0hhbmRsZWJhcnMudGVtcGxhdGVzW25hbWVdPUhhbmRsZWJhcnMuY29tcGlsZShkYXRhKTt9LGZhaWw6ZnVuY3Rpb24gZmFpbChyZWFzb24pe3JldHVybiByZWFzb247fX0pO3ZhciBzY3JpcHRGaWxlPSQuZ2V0U2NyaXB0KHNjcmlwdCk7dmFyIHJlcXVlc3RzPVtdO2lmKHBhdGgpcmVxdWVzdHMucHVzaCh0ZW1wbGF0ZUZpbGUpO2lmKHNjcmlwdClyZXF1ZXN0cy5wdXNoKHNjcmlwdEZpbGUpO1Byb21pc2UuYWxsKHJlcXVlc3RzKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7cmVzb2x2ZShIYW5kbGViYXJzLnRlbXBsYXRlc1tuYW1lXSk7fSkuY2F0Y2goZnVuY3Rpb24ocmVhc29uKXtyZWplY3QocmVhc29uKTt9KTt9KTt9Cgp9LHt9XSw0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChnbG9iYWwpewovKioKKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0EKKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRAoqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTAoqIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WCiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBCiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBRwoqIENvcHlyaWdodCAyMDE2IEFwaXplZQoqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOCioKKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CioKKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAoqCiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQoqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAoqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoqKi8KCi8vIERpc3RyaWJ1dGlvbiBmaWxlIGZvciBTeW5jaGVyLmpzIAovLyB2ZXJzaW9uOiAwLjIuMAoKIWZ1bmN0aW9uKGUpe2lmKCJvYmplY3QiPT10eXBlb2YgZXhwb3J0cyYmInVuZGVmaW5lZCIhPXR5cGVvZiBtb2R1bGUpbW9kdWxlLmV4cG9ydHM9ZSgpO2Vsc2UgaWYoImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZClkZWZpbmUoW10sZSk7ZWxzZXt2YXIgdDt0PSJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93P3dpbmRvdzoidW5kZWZpbmVkIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6InVuZGVmaW5lZCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcyx0LlN5bmNoZXI9ZSgpfX0oZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gbyhzLGEpe2lmKCFuW3NdKXtpZighdFtzXSl7dmFyIHU9ImZ1bmN0aW9uIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWEmJnUpcmV0dXJuIHUocywhMCk7aWYoaSlyZXR1cm4gaShzLCEwKTt2YXIgYz1uZXcgRXJyb3IoIkNhbm5vdCBmaW5kIG1vZHVsZSAnIitzKyInIik7dGhyb3cgYy5jb2RlPSJNT0RVTEVfTk9UX0ZPVU5EIixjfXZhciBsPW5bc109e2V4cG9ydHM6e319O3Rbc11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtzXVsxXVtlXTtyZXR1cm4gbyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW3NdLmV4cG9ydHN9Zm9yKHZhciBpPSJmdW5jdGlvbiI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLHM9MDtzPHIubGVuZ3RoO3MrKylvKHJbc10pO3JldHVybiBvfSh7MTpbZnVuY3Rpb24oZSx0LG4pe09iamVjdC5vYnNlcnZlJiYhQXJyYXkub2JzZXJ2ZSYmZnVuY3Rpb24oZSx0KXsidXNlIHN0cmljdCI7dmFyIG49ZS5nZXROb3RpZmllcixyPSJwZXJmb3JtQ2hhbmdlIixvPSJfb3JpZ2luYWwiLGk9InNwbGljZSIscz17cHVzaDpmdW5jdGlvbiB1KGUpe3ZhciB0PWFyZ3VtZW50cyxzPXVbb10uYXBwbHkodGhpcyx0KTtyZXR1cm4gbih0aGlzKVtyXShpLGZ1bmN0aW9uKCl7cmV0dXJue2luZGV4OnMtdC5sZW5ndGgsYWRkZWRDb3VudDp0Lmxlbmd0aCxyZW1vdmVkOltdfX0pLHN9LHVuc2hpZnQ6ZnVuY3Rpb24gYyhlKXt2YXIgdD1hcmd1bWVudHMscz1jW29dLmFwcGx5KHRoaXMsdCk7cmV0dXJuIG4odGhpcylbcl0oaSxmdW5jdGlvbigpe3JldHVybntpbmRleDowLGFkZGVkQ291bnQ6dC5sZW5ndGgscmVtb3ZlZDpbXX19KSxzfSxwb3A6ZnVuY3Rpb24gbCgpe3ZhciBlPXRoaXMubGVuZ3RoLHQ9bFtvXS5jYWxsKHRoaXMpO3JldHVybiB0aGlzLmxlbmd0aCE9PWUmJm4odGhpcylbcl0oaSxmdW5jdGlvbigpe3JldHVybntpbmRleDp0aGlzLmxlbmd0aCxhZGRlZENvdW50OjAscmVtb3ZlZDpbdF19fSx0aGlzKSx0fSxzaGlmdDpmdW5jdGlvbiBmKCl7dmFyIGU9dGhpcy5sZW5ndGgsdD1mW29dLmNhbGwodGhpcyk7cmV0dXJuIHRoaXMubGVuZ3RoIT09ZSYmbih0aGlzKVtyXShpLGZ1bmN0aW9uKCl7cmV0dXJue2luZGV4OjAsYWRkZWRDb3VudDowLHJlbW92ZWQ6W3RdfX0sdGhpcyksdH0sc3BsaWNlOmZ1bmN0aW9uIGQoZSx0KXt2YXIgcz1hcmd1bWVudHMsYT1kW29dLmFwcGx5KHRoaXMscyk7cmV0dXJuKGEubGVuZ3RofHxzLmxlbmd0aD4yKSYmbih0aGlzKVtyXShpLGZ1bmN0aW9uKCl7cmV0dXJue2luZGV4OmUsYWRkZWRDb3VudDpzLmxlbmd0aC0yLHJlbW92ZWQ6YX19LHRoaXMpLGF9fTtmb3IodmFyIGEgaW4gcylzW2FdW29dPXQucHJvdG90eXBlW2FdLHQucHJvdG90eXBlW2FdPXNbYV07dC5vYnNlcnZlPWZ1bmN0aW9uKHQsbil7cmV0dXJuIGUub2JzZXJ2ZSh0LG4sWyJhZGQiLCJ1cGRhdGUiLCJkZWxldGUiLGldKX0sdC51bm9ic2VydmU9ZS51bm9ic2VydmV9KE9iamVjdCxBcnJheSl9LHt9XSwyOltmdW5jdGlvbihlLHQsbil7d2luZG93Lk11dGF0aW9uT2JzZXJ2ZXI9d2luZG93Lk11dGF0aW9uT2JzZXJ2ZXJ8fHdpbmRvdy5XZWJLaXRNdXRhdGlvbk9ic2VydmVyfHxmdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUpe3RoaXMuZz1bXSx0aGlzLms9ZX1mdW5jdGlvbiBuKGUpeyFmdW5jdGlvbiBuKCl7dmFyIHI9ZS50YWtlUmVjb3JkcygpO3IubGVuZ3RoJiZlLmsocixlKSxlLmY9c2V0VGltZW91dChuLHQuX3BlcmlvZCl9KCl9ZnVuY3Rpb24gcih0KXt2YXIgbixyPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsYWRkZWROb2RlczpbXSxyZW1vdmVkTm9kZXM6W10scHJldmlvdXNTaWJsaW5nOm51bGwsbmV4dFNpYmxpbmc6bnVsbCxhdHRyaWJ1dGVOYW1lOm51bGwsYXR0cmlidXRlTmFtZXNwYWNlOm51bGwsb2xkVmFsdWU6bnVsbH07Zm9yKG4gaW4gdClyW25dIT09ZSYmdFtuXSE9PWUmJihyW25dPXRbbl0pO3JldHVybiByfWZ1bmN0aW9uIG8oZSx0KXt2YXIgbj1hKGUsdCk7cmV0dXJuIGZ1bmN0aW9uKHIpe3ZhciBvLHU9ci5sZW5ndGg7dC5hJiZuLmEmJmkocixlLG4uYSx0LmQpLCh0LmJ8fHQuZSkmJihvPXMocixlLG4sdCkpLChvfHxyLmxlbmd0aCE9PXUpJiYobj1hKGUsdCkpfX1mdW5jdGlvbiBpKHQsbixvLGkpe2Zvcih2YXIgcyxhLHU9e30sYz1uLmF0dHJpYnV0ZXMsbD1jLmxlbmd0aDtsLS07KXM9Y1tsXSxhPXMubmFtZSxpJiZpW2FdPT09ZXx8KHMudmFsdWUhPT1vW2FdJiZ0LnB1c2gocih7dHlwZToiYXR0cmlidXRlcyIsdGFyZ2V0Om4sYXR0cmlidXRlTmFtZTphLG9sZFZhbHVlOm9bYV0sYXR0cmlidXRlTmFtZXNwYWNlOnMubmFtZXNwYWNlVVJJfSkpLHVbYV09ITApO2ZvcihhIGluIG8pdVthXXx8dC5wdXNoKHIoe3RhcmdldDpuLHR5cGU6ImF0dHJpYnV0ZXMiLGF0dHJpYnV0ZU5hbWU6YSxvbGRWYWx1ZTpvW2FdfSkpfWZ1bmN0aW9uIHModCxuLG8scyl7ZnVuY3Rpb24gYShlLG4sbyxhLHUpe3ZhciBsPWUubGVuZ3RoLTE7dT0tfigobC11KS8yKTtmb3IodmFyIGYsZCxwO3A9ZS5wb3AoKTspZj1vW3AuaF0sZD1hW3AuaV0scy5iJiZ1JiZNYXRoLmFicyhwLmgtcC5pKT49bCYmKHQucHVzaChyKHt0eXBlOiJjaGlsZExpc3QiLHRhcmdldDpuLGFkZGVkTm9kZXM6W2ZdLHJlbW92ZWROb2RlczpbZl0sbmV4dFNpYmxpbmc6Zi5uZXh0U2libGluZyxwcmV2aW91c1NpYmxpbmc6Zi5wcmV2aW91c1NpYmxpbmd9KSksdS0tKSxzLmEmJmQuYSYmaSh0LGYsZC5hLHMuZCkscy5jJiYzPT09Zi5ub2RlVHlwZSYmZi5ub2RlVmFsdWUhPT1kLmMmJnQucHVzaChyKHt0eXBlOiJjaGFyYWN0ZXJEYXRhIix0YXJnZXQ6Zn0pKSxzLmUmJmMoZixkKX1mdW5jdGlvbiBjKG4sbyl7Zm9yKHZhciBkLHAsYixoLHYseT1uLmNoaWxkTm9kZXMsXz1vLmIsZz15Lmxlbmd0aCxPPV8/Xy5sZW5ndGg6MCxqPTAsbT0wLHc9MDtnPm18fE8+dzspaD15W21dLHY9KGI9X1t3XSkmJmIuaixoPT09dj8ocy5hJiZiLmEmJmkodCxoLGIuYSxzLmQpLHMuYyYmYi5jIT09ZSYmaC5ub2RlVmFsdWUhPT1iLmMmJnQucHVzaChyKHt0eXBlOiJjaGFyYWN0ZXJEYXRhIix0YXJnZXQ6aH0pKSxwJiZhKHAsbix5LF8saikscy5lJiYoaC5jaGlsZE5vZGVzLmxlbmd0aHx8Yi5iJiZiLmIubGVuZ3RoKSYmYyhoLGIpLG0rKyx3KyspOihsPSEwLGR8fChkPXt9LHA9W10pLGgmJihkW2I9dShoKV18fChkW2JdPSEwLC0xPT09KGI9ZihfLGgsdywiaiIpKT9zLmImJih0LnB1c2gocih7dHlwZToiY2hpbGRMaXN0Iix0YXJnZXQ6bixhZGRlZE5vZGVzOltoXSxuZXh0U2libGluZzpoLm5leHRTaWJsaW5nLHByZXZpb3VzU2libGluZzpoLnByZXZpb3VzU2libGluZ30pKSxqKyspOnAucHVzaCh7aDptLGk6Yn0pKSxtKyspLHYmJnYhPT15W21dJiYoZFtiPXUodildfHwoZFtiXT0hMCwtMT09PShiPWYoeSx2LG0pKT9zLmImJih0LnB1c2gocih7dHlwZToiY2hpbGRMaXN0Iix0YXJnZXQ6by5qLHJlbW92ZWROb2Rlczpbdl0sbmV4dFNpYmxpbmc6X1t3KzFdLHByZXZpb3VzU2libGluZzpfW3ctMV19KSksai0tKTpwLnB1c2goe2g6YixpOnd9KSksdysrKSk7cCYmYShwLG4seSxfLGopfXZhciBsO3JldHVybiBjKG4sbyksbH1mdW5jdGlvbiBhKGUsdCl7dmFyIG49ITA7cmV0dXJuIGZ1bmN0aW9uIHIoZSl7dmFyIG89e2o6ZX07cmV0dXJuIXQuY3x8MyE9PWUubm9kZVR5cGUmJjghPT1lLm5vZGVUeXBlPyh0LmEmJm4mJjE9PT1lLm5vZGVUeXBlJiYoby5hPWwoZS5hdHRyaWJ1dGVzLGZ1bmN0aW9uKGUsbil7cmV0dXJuIHQuZCYmIXQuZFtuLm5hbWVdfHwoZVtuLm5hbWVdPW4udmFsdWUpLGV9KSksbiYmKHQuYnx8dC5jfHx0LmEmJnQuZSkmJihvLmI9YyhlLmNoaWxkTm9kZXMscikpLG49dC5lKTpvLmM9ZS5ub2RlVmFsdWUsb30oZSl9ZnVuY3Rpb24gdShlKXt0cnl7cmV0dXJuIGUuaWR8fChlLm1vX2lkPWUubW9faWR8fGQrKyl9Y2F0Y2godCl7dHJ5e3JldHVybiBlLm5vZGVWYWx1ZX1jYXRjaChuKXtyZXR1cm4gZCsrfX19ZnVuY3Rpb24gYyhlLHQpe2Zvcih2YXIgbj1bXSxyPTA7cjxlLmxlbmd0aDtyKyspbltyXT10KGVbcl0scixlKTtyZXR1cm4gbn1mdW5jdGlvbiBsKGUsdCl7Zm9yKHZhciBuPXt9LHI9MDtyPGUubGVuZ3RoO3IrKyluPXQobixlW3JdLHIsZSk7cmV0dXJuIG59ZnVuY3Rpb24gZihlLHQsbixyKXtmb3IoO248ZS5sZW5ndGg7bisrKWlmKChyP2Vbbl1bcl06ZVtuXSk9PT10KXJldHVybiBuO3JldHVybi0xfXQuX3BlcmlvZD0zMCx0LnByb3RvdHlwZT17b2JzZXJ2ZTpmdW5jdGlvbihlLHQpe2Zvcih2YXIgcj17YTohISh0LmF0dHJpYnV0ZXN8fHQuYXR0cmlidXRlRmlsdGVyfHx0LmF0dHJpYnV0ZU9sZFZhbHVlKSxiOiEhdC5jaGlsZExpc3QsZTohIXQuc3VidHJlZSxjOiEoIXQuY2hhcmFjdGVyRGF0YSYmIXQuY2hhcmFjdGVyRGF0YU9sZFZhbHVlKX0saT10aGlzLmcscz0wO3M8aS5sZW5ndGg7cysrKWlbc10ubT09PWUmJmkuc3BsaWNlKHMsMSk7dC5hdHRyaWJ1dGVGaWx0ZXImJihyLmQ9bCh0LmF0dHJpYnV0ZUZpbHRlcixmdW5jdGlvbihlLHQpe3JldHVybiBlW3RdPSEwLGV9KSksaS5wdXNoKHttOmUsbDpvKGUscil9KSx0aGlzLmZ8fG4odGhpcyl9LHRha2VSZWNvcmRzOmZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9dGhpcy5nLG49MDtuPHQubGVuZ3RoO24rKyl0W25dLmwoZSk7cmV0dXJuIGV9LGRpc2Nvbm5lY3Q6ZnVuY3Rpb24oKXt0aGlzLmc9W10sY2xlYXJUaW1lb3V0KHRoaXMuZiksdGhpcy5mPW51bGx9fTt2YXIgZD0xO3JldHVybiB0fSh2b2lkIDApfSx7fV0sMzpbZnVuY3Rpb24oZSx0LG4pe09iamVjdC5vYnNlcnZlfHxmdW5jdGlvbihlLHQsbixyKXsidXNlIHN0cmljdCI7dmFyIG8saSxzPVsiYWRkIiwidXBkYXRlIiwiZGVsZXRlIiwicmVjb25maWd1cmUiLCJzZXRQcm90b3R5cGUiLCJwcmV2ZW50RXh0ZW5zaW9ucyJdLGE9dC5pc0FycmF5fHxmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIltvYmplY3QgQXJyYXldIj09PWUuY2FsbCh0KX19KGUucHJvdG90eXBlLnRvU3RyaW5nKSx1PXQucHJvdG90eXBlLmluZGV4T2Y/dC5pbmRleE9mfHxmdW5jdGlvbihlLG4scil7cmV0dXJuIHQucHJvdG90eXBlLmluZGV4T2YuY2FsbChlLG4scil9OmZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIHI9bnx8MDtyPGUubGVuZ3RoO3IrKylpZihlW3JdPT09dClyZXR1cm4gcjtyZXR1cm4tMX0sYz1uLk1hcCE9PXImJk1hcC5wcm90b3R5cGUuZm9yRWFjaD9mdW5jdGlvbigpe3JldHVybiBuZXcgTWFwfTpmdW5jdGlvbigpe3ZhciBlPVtdLHQ9W107cmV0dXJue3NpemU6MCxoYXM6ZnVuY3Rpb24odCl7cmV0dXJuIHUoZSx0KT4tMX0sZ2V0OmZ1bmN0aW9uKG4pe3JldHVybiB0W3UoZSxuKV19LHNldDpmdW5jdGlvbihuLHIpe3ZhciBvPXUoZSxuKTstMT09PW8/KGUucHVzaChuKSx0LnB1c2gociksdGhpcy5zaXplKyspOnRbb109cn0sImRlbGV0ZSI6ZnVuY3Rpb24obil7dmFyIHI9dShlLG4pO3I+LTEmJihlLnNwbGljZShyLDEpLHQuc3BsaWNlKHIsMSksdGhpcy5zaXplLS0pfSxmb3JFYWNoOmZ1bmN0aW9uKG4pe2Zvcih2YXIgcj0wO3I8ZS5sZW5ndGg7cisrKW4uY2FsbChhcmd1bWVudHNbMV0sdFtyXSxlW3JdLHRoaXMpfX19LGw9ZS5nZXRPd25Qcm9wZXJ0eU5hbWVzP2Z1bmN0aW9uKCl7dmFyIHQ9ZS5nZXRPd25Qcm9wZXJ0eU5hbWVzO3RyeXthcmd1bWVudHMuY2FsbGVlfWNhdGNoKG4pe3ZhciByPSh0KHUpLmpvaW4oIiAiKSsiICIpLnJlcGxhY2UoL3Byb3RvdHlwZSB8bGVuZ3RoIHxuYW1lIC9nLCIiKS5zbGljZSgwLC0xKS5zcGxpdCgiICIpO3IubGVuZ3RoJiYodD1mdW5jdGlvbih0KXt2YXIgbj1lLmdldE93blByb3BlcnR5TmFtZXModCk7aWYoImZ1bmN0aW9uIj09dHlwZW9mIHQpZm9yKHZhciBvLGk9MDtpPHIubGVuZ3RoOykobz11KG4scltpKytdKSk+LTEmJm4uc3BsaWNlKG8sMSk7cmV0dXJuIG59KX1yZXR1cm4gdH0oKTpmdW5jdGlvbih0KXt2YXIgbixyLG89W107aWYoImhhc093blByb3BlcnR5ImluIHQpZm9yKG4gaW4gdCl0Lmhhc093blByb3BlcnR5KG4pJiZvLnB1c2gobik7ZWxzZXtyPWUuaGFzT3duUHJvcGVydHk7Zm9yKG4gaW4gdClyLmNhbGwodCxuKSYmby5wdXNoKG4pfXJldHVybiBhKHQpJiZvLnB1c2goImxlbmd0aCIpLG99LGY9ZS5nZXRQcm90b3R5cGVPZixkPWUuZGVmaW5lUHJvcGVydGllcyYmZS5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IscD1uLnJlcXVlc3RBbmltYXRpb25GcmFtZXx8bi53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fGZ1bmN0aW9uKCl7dmFyIGU9K25ldyBEYXRlLHQ9ZTtyZXR1cm4gZnVuY3Rpb24obil7cmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtuKCh0PStuZXcgRGF0ZSktZSl9LDE3KX19KCksYj1mdW5jdGlvbihlLHQsbil7dmFyIHI9by5nZXQoZSk7cj8odihyLGUpLE8oZSxyLHQsbikpOihyPWgoZSksTyhlLHIsdCxuKSwxPT09by5zaXplJiZwKHkpKX0saD1mdW5jdGlvbih0LG4pe3ZhciByLGk9bCh0KSxzPVtdLGE9MCxuPXtoYW5kbGVyczpjKCksZnJvemVuOmUuaXNGcm96ZW4/ZS5pc0Zyb3plbih0KTohMSxleHRlbnNpYmxlOmUuaXNFeHRlbnNpYmxlP2UuaXNFeHRlbnNpYmxlKHQpOiEwLHByb3RvOmYmJmYodCkscHJvcGVydGllczppLHZhbHVlczpzLG5vdGlmaWVyOmcodCxuKX07aWYoZClmb3Iocj1uLmRlc2NyaXB0b3JzPVtdO2E8aS5sZW5ndGg7KXJbYV09ZCh0LGlbYV0pLHNbYV09dFtpW2ErK11dO2Vsc2UgZm9yKDthPGkubGVuZ3RoOylzW2FdPXRbaVthKytdXTtyZXR1cm4gby5zZXQodCxuKSxufSx2PWZ1bmN0aW9uKCl7dmFyIHQ9ZD9mdW5jdGlvbihlLHQsbixyLG8pe3ZhciBpPXQucHJvcGVydGllc1tuXSxzPWVbaV0sYT10LnZhbHVlc1tuXSx1PXQuZGVzY3JpcHRvcnNbbl07InZhbHVlImluIG8mJihhPT09cz8wPT09YSYmMS9hIT09MS9zOmE9PT1hfHxzPT09cykmJihqKGUsdCx7bmFtZTppLHR5cGU6InVwZGF0ZSIsb2JqZWN0OmUsb2xkVmFsdWU6YX0sciksdC52YWx1ZXNbbl09cyksIXUuY29uZmlndXJhYmxlfHxvLmNvbmZpZ3VyYWJsZSYmby53cml0YWJsZT09PXUud3JpdGFibGUmJm8uZW51bWVyYWJsZT09PXUuZW51bWVyYWJsZSYmby5nZXQ9PT11LmdldCYmby5zZXQ9PT11LnNldHx8KGooZSx0LHtuYW1lOmksdHlwZToicmVjb25maWd1cmUiLG9iamVjdDplLG9sZFZhbHVlOmF9LHIpLHQuZGVzY3JpcHRvcnNbbl09byl9OmZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBvPXQucHJvcGVydGllc1tuXSxpPWVbb10scz10LnZhbHVlc1tuXTsocz09PWk/MD09PXMmJjEvcyE9PTEvaTpzPT09c3x8aT09PWkpJiYoaihlLHQse25hbWU6byx0eXBlOiJ1cGRhdGUiLG9iamVjdDplLG9sZFZhbHVlOnN9LHIpLHQudmFsdWVzW25dPWkpfSxuPWQ/ZnVuY3Rpb24oZSxuLHIsbyxpKXtmb3IodmFyIHMsYT1uLmxlbmd0aDtyJiZhLS07KW51bGwhPT1uW2FdJiYocz1kKGUsblthXSksci0tLHM/dChlLG8sYSxpLHMpOihqKGUsbyx7bmFtZTpuW2FdLHR5cGU6ImRlbGV0ZSIsb2JqZWN0OmUsb2xkVmFsdWU6by52YWx1ZXNbYV19LGkpLG8ucHJvcGVydGllcy5zcGxpY2UoYSwxKSxvLnZhbHVlcy5zcGxpY2UoYSwxKSxvLmRlc2NyaXB0b3JzLnNwbGljZShhLDEpKSl9OmZ1bmN0aW9uKGUsdCxuLHIsbyl7Zm9yKHZhciBpPXQubGVuZ3RoO24mJmktLTspbnVsbCE9PXRbaV0mJihqKGUscix7bmFtZTp0W2ldLHR5cGU6ImRlbGV0ZSIsb2JqZWN0OmUsb2xkVmFsdWU6ci52YWx1ZXNbaV19LG8pLHIucHJvcGVydGllcy5zcGxpY2UoaSwxKSxyLnZhbHVlcy5zcGxpY2UoaSwxKSxuLS0pfTtyZXR1cm4gZnVuY3Rpb24ocixvLGkpe2lmKHIuaGFuZGxlcnMuc2l6ZSYmIXIuZnJvemVuKXt2YXIgcyxhLGMscCxiLGgsdix5LF89ci52YWx1ZXMsZz1yLmRlc2NyaXB0b3JzLE89MDtpZihyLmV4dGVuc2libGUpaWYocz1yLnByb3BlcnRpZXMuc2xpY2UoKSxhPXMubGVuZ3RoLGM9bChvKSxnKXtmb3IoO088Yy5sZW5ndGg7KWI9Y1tPKytdLHA9dShzLGIpLHk9ZChvLGIpLC0xPT09cD8oaihvLHIse25hbWU6Yix0eXBlOiJhZGQiLG9iamVjdDpvfSxpKSxyLnByb3BlcnRpZXMucHVzaChiKSxfLnB1c2gob1tiXSksZy5wdXNoKHkpKTooc1twXT1udWxsLGEtLSx0KG8scixwLGkseSkpO24obyxzLGEscixpKSxlLmlzRXh0ZW5zaWJsZShvKXx8KHIuZXh0ZW5zaWJsZT0hMSxqKG8scix7dHlwZToicHJldmVudEV4dGVuc2lvbnMiLG9iamVjdDpvfSxpKSxyLmZyb3plbj1lLmlzRnJvemVuKG8pKX1lbHNle2Zvcig7TzxjLmxlbmd0aDspYj1jW08rK10scD11KHMsYiksaD1vW2JdLC0xPT09cD8oaihvLHIse25hbWU6Yix0eXBlOiJhZGQiLG9iamVjdDpvfSxpKSxyLnByb3BlcnRpZXMucHVzaChiKSxfLnB1c2goaCkpOihzW3BdPW51bGwsYS0tLHQobyxyLHAsaSkpO24obyxzLGEscixpKX1lbHNlIGlmKCFyLmZyb3plbil7Zm9yKDtPPHMubGVuZ3RoO08rKyliPXNbT10sdChvLHIsTyxpLGQobyxiKSk7ZS5pc0Zyb3plbihvKSYmKHIuZnJvemVuPSEwKX1mJiYodj1mKG8pLHYhPT1yLnByb3RvJiYoaihvLHIse3R5cGU6InNldFByb3RvdHlwZSIsbmFtZToiX19wcm90b19fIixvYmplY3Q6byxvbGRWYWx1ZTpyLnByb3RvfSksci5wcm90bz12KSl9fX0oKSx5PWZ1bmN0aW9uKCl7by5zaXplJiYoby5mb3JFYWNoKHYpLGkuZm9yRWFjaChfKSxwKHkpKX0sXz1mdW5jdGlvbihlLHQpe3ZhciBuPWUuY2hhbmdlUmVjb3JkcztuLmxlbmd0aCYmKGUuY2hhbmdlUmVjb3Jkcz1bXSx0KG4pKX0sZz1mdW5jdGlvbihlLHQpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPDImJih0PW8uZ2V0KGUpKSx0JiZ0Lm5vdGlmaWVyfHx7bm90aWZ5OmZ1bmN0aW9uKHQpe3QudHlwZTt2YXIgbj1vLmdldChlKTtpZihuKXt2YXIgcixpPXtvYmplY3Q6ZX07Zm9yKHIgaW4gdCkib2JqZWN0IiE9PXImJihpW3JdPXRbcl0pO2ooZSxuLGkpfX0scGVyZm9ybUNoYW5nZTpmdW5jdGlvbih0LG4pe2lmKCJzdHJpbmciIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIG5vbi1zdHJpbmcgY2hhbmdlVHlwZSIpO2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBuKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBwZXJmb3JtIG5vbi1mdW5jdGlvbiIpO3ZhciBpLHMsYT1vLmdldChlKSx1PWFyZ3VtZW50c1syXSxjPXU9PT1yP24oKTpuLmNhbGwodSk7aWYoYSYmdihhLGUsdCksYSYmYyYmIm9iamVjdCI9PXR5cGVvZiBjKXtzPXtvYmplY3Q6ZSx0eXBlOnR9O2ZvcihpIGluIGMpIm9iamVjdCIhPT1pJiYidHlwZSIhPT1pJiYoc1tpXT1jW2ldKTtqKGUsYSxzKX19fX0sTz1mdW5jdGlvbihlLHQsbixyKXt2YXIgbz1pLmdldChuKTtvfHxpLnNldChuLG89e29ic2VydmVkOmMoKSxjaGFuZ2VSZWNvcmRzOltdfSksby5vYnNlcnZlZC5zZXQoZSx7YWNjZXB0TGlzdDpyLnNsaWNlKCksZGF0YTp0fSksdC5oYW5kbGVycy5zZXQobixvKX0saj1mdW5jdGlvbihlLHQsbixyKXt0LmhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIG89dC5vYnNlcnZlZC5nZXQoZSkuYWNjZXB0TGlzdDsoInN0cmluZyIhPXR5cGVvZiByfHwtMT09PXUobyxyKSkmJnUobyxuLnR5cGUpPi0xJiZ0LmNoYW5nZVJlY29yZHMucHVzaChuKX0pfTtvPWMoKSxpPWMoKSxlLm9ic2VydmU9ZnVuY3Rpb24odCxuLG8pe2lmKCF0fHwib2JqZWN0IiE9dHlwZW9mIHQmJiJmdW5jdGlvbiIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoIk9iamVjdC5vYnNlcnZlIGNhbm5vdCBvYnNlcnZlIG5vbi1vYmplY3QiKTtpZigiZnVuY3Rpb24iIT10eXBlb2Ygbil0aHJvdyBuZXcgVHlwZUVycm9yKCJPYmplY3Qub2JzZXJ2ZSBjYW5ub3QgZGVsaXZlciB0byBub24tZnVuY3Rpb24iKTtpZihlLmlzRnJvemVuJiZlLmlzRnJvemVuKG4pKXRocm93IG5ldyBUeXBlRXJyb3IoIk9iamVjdC5vYnNlcnZlIGNhbm5vdCBkZWxpdmVyIHRvIGEgZnJvemVuIGZ1bmN0aW9uIG9iamVjdCIpO2lmKG89PT1yKW89cztlbHNlIGlmKCFvfHwib2JqZWN0IiE9dHlwZW9mIG8pdGhyb3cgbmV3IFR5cGVFcnJvcigiVGhpcmQgYXJndW1lbnQgdG8gT2JqZWN0Lm9ic2VydmUgbXVzdCBiZSBhbiBhcnJheSBvZiBzdHJpbmdzLiIpO3JldHVybiBiKHQsbixvKSx0fSxlLnVub2JzZXJ2ZT1mdW5jdGlvbihlLHQpe2lmKG51bGw9PT1lfHwib2JqZWN0IiE9dHlwZW9mIGUmJiJmdW5jdGlvbiIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoIk9iamVjdC51bm9ic2VydmUgY2Fubm90IHVub2JzZXJ2ZSBub24tb2JqZWN0Iik7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcigiT2JqZWN0LnVub2JzZXJ2ZSBjYW5ub3QgZGVsaXZlciB0byBub24tZnVuY3Rpb24iKTt2YXIgbixyPWkuZ2V0KHQpO3JldHVybiByJiYobj1yLm9ic2VydmVkLmdldChlKSkmJihyLm9ic2VydmVkLmZvckVhY2goZnVuY3Rpb24oZSx0KXt2KGUuZGF0YSx0KX0pLHAoZnVuY3Rpb24oKXtfKHIsdCl9KSwxPT09ci5vYnNlcnZlZC5zaXplJiZyLm9ic2VydmVkLmhhcyhlKT9pWyJkZWxldGUiXSh0KTpyLm9ic2VydmVkWyJkZWxldGUiXShlKSwxPT09bi5kYXRhLmhhbmRsZXJzLnNpemU/b1siZGVsZXRlIl0oZSk6bi5kYXRhLmhhbmRsZXJzWyJkZWxldGUiXSh0KSksZX0sZS5nZXROb3RpZmllcj1mdW5jdGlvbih0KXtpZihudWxsPT09dHx8Im9iamVjdCIhPXR5cGVvZiB0JiYiZnVuY3Rpb24iIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKCJPYmplY3QuZ2V0Tm90aWZpZXIgY2Fubm90IGdldE5vdGlmaWVyIG5vbi1vYmplY3QiKTtyZXR1cm4gZS5pc0Zyb3plbiYmZS5pc0Zyb3plbih0KT9udWxsOmcodCl9LGUuZGVsaXZlckNoYW5nZVJlY29yZHM9ZnVuY3Rpb24oZSl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcigiT2JqZWN0LmRlbGl2ZXJDaGFuZ2VSZWNvcmRzIGNhbm5vdCBkZWxpdmVyIHRvIG5vbi1mdW5jdGlvbiIpO3ZhciB0PWkuZ2V0KGUpO3QmJih0Lm9ic2VydmVkLmZvckVhY2goZnVuY3Rpb24oZSx0KXt2KGUuZGF0YSx0KX0pLF8odCxlKSl9fShPYmplY3QsQXJyYXksdGhpcyl9LHt9XSw0OltmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOnsiZGVmYXVsdCI6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLG4uRGF0YU9iamVjdE9ic2VydmVyPW4uRGF0YU9iamVjdFJlcG9ydGVyPW4uU3luY2hlcj12b2lkIDAsZSgibXV0YXRpb25vYnNlcnZlci1zaGltIiksZSgib2JqZWN0Lm9ic2VydmUiKSxlKCJhcnJheS5vYnNlcnZlIik7dmFyIG89ZSgiLi9zeW5jaGVyL1N5bmNoZXIiKSxpPXIobykscz1lKCIuL3N5bmNoZXIvRGF0YU9iamVjdFJlcG9ydGVyIiksYT1yKHMpLHU9ZSgiLi9zeW5jaGVyL0RhdGFPYmplY3RPYnNlcnZlciIpLGM9cih1KTtuLlN5bmNoZXI9aVsiZGVmYXVsdCJdLG4uRGF0YU9iamVjdFJlcG9ydGVyPWFbImRlZmF1bHQiXSxuLkRhdGFPYmplY3RPYnNlcnZlcj1jWyJkZWZhdWx0Il19LHsiLi9zeW5jaGVyL0RhdGFPYmplY3RPYnNlcnZlciI6NywiLi9zeW5jaGVyL0RhdGFPYmplY3RSZXBvcnRlciI6OCwiLi9zeW5jaGVyL1N5bmNoZXIiOjExLCJhcnJheS5vYnNlcnZlIjoxLCJtdXRhdGlvbm9ic2VydmVyLXNoaW0iOjIsIm9iamVjdC5vYnNlcnZlIjozfV0sNTpbZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ImRlZmF1bHQiOmV9fWZ1bmN0aW9uIG8oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1PYmplY3QuZGVmaW5lUHJvcGVydHkobiwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIGk9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciByPXRbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsInZhbHVlImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLmtleSxyKX19cmV0dXJuIGZ1bmN0aW9uKHQsbixyKXtyZXR1cm4gbiYmZSh0LnByb3RvdHlwZSxuKSxyJiZlKHQsciksdH19KCkscz1lKCIuL1N5bmNPYmplY3QiKSxhPXIocyksdT1lKCIuL0RhdGFPYmplY3RDaGlsZCIpLGM9cih1KSxsPWUoIi4uL3V0aWxzL3V0aWxzLmpzIiksZj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxuLHIsaSxzLHUpe28odGhpcyxlKTt2YXIgYz10aGlzO2MuX3N5bmNoZXI9dCxjLl91cmw9bixjLl9zY2hlbWE9cixjLl9zdGF0dXM9aSxjLl9zeW5jT2JqPW5ldyBhWyJkZWZhdWx0Il0ocyksYy5fY2hpbGRyZW5zPXUsYy5fdmVyc2lvbj0wLGMuX2NoaWxkSWQ9MCxjLl9jaGlsZHJlbk9iamVjdHM9e30sYy5fY2hpbGRyZW5MaXN0ZW5lcnM9W10sYy5fb3duZXI9dC5fb3duZXIsYy5fYnVzPXQuX2J1c31yZXR1cm4gaShlLFt7a2V5OiJfYWxsb2NhdGVMaXN0ZW5lcnMiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PXRoaXMsbj10Ll91cmwrIi9jaGlsZHJlbi8iO3QuX2NoaWxkcmVucyYmdC5fY2hpbGRyZW5zLmZvckVhY2goZnVuY3Rpb24ocil7dmFyIG89bityLGk9dC5fYnVzLmFkZExpc3RlbmVyKG8sZnVuY3Rpb24obil7aWYobi5mcm9tIT09ZS5fb3duZXIpc3dpdGNoKGNvbnNvbGUubG9nKCJEYXRhT2JqZWN0LUNoaWxkcmVuLVJDVjogIixuKSxuLnR5cGUpe2Nhc2UiY3JlYXRlIjp0Ll9vbkNoaWxkcmVuQ3JlYXRlKG4pO2JyZWFrO2Nhc2UiZGVsZXRlIjpjb25zb2xlLmxvZyhuKTticmVhaztkZWZhdWx0OnQuX2NoYW5nZUNoaWxkcmVuKG4pfX0pO3QuX2NoaWxkcmVuTGlzdGVuZXJzLnB1c2goaSl9KX19LHtrZXk6Il9yZWxlYXNlTGlzdGVuZXJzIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5fY2hpbGRyZW5MaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbihlKXtlLnJlbW92ZSgpfSksT2JqZWN0LmtleXMoZS5fY2hpbGRyZW5PYmplY3RzKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2UuX2NoaWxkcmVuT2JqZWN0c1t0XS5fcmVsZWFzZUxpc3RlbmVycygpfSl9fSx7a2V5OiJwYXVzZSIsdmFsdWU6ZnVuY3Rpb24oKXt0aHJvdyJOb3QgaW1wbGVtZW50ZWQifX0se2tleToicmVzdW1lIix2YWx1ZTpmdW5jdGlvbigpe3Rocm93Ik5vdCBpbXBsZW1lbnRlZCJ9fSx7a2V5OiJzdG9wIix2YWx1ZTpmdW5jdGlvbigpe3Rocm93Ik5vdCBpbXBsZW1lbnRlZCJ9fSx7a2V5OiJhZGRDaGlsZHJlbiIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzO24uX2NoaWxkSWQrKzt2YXIgcj1uLl9vd25lcisiIyIrbi5fY2hpbGRJZCxvPW4uX3VybCsiL2NoaWxkcmVuLyIrZSxpPXt0eXBlOiJjcmVhdGUiLGZyb206bi5fb3duZXIsdG86byxib2R5OntyZXNvdXJjZTpyLHZhbHVlOnR9fTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oZSl7dmFyIHM9bi5fYnVzLnBvc3RNZXNzYWdlKGkpO2NvbnNvbGUubG9nKCJjcmVhdGUtcmVwb3J0ZXItY2hpbGQoICIrbi5fb3duZXIrIiApOiAiLGkpO3ZhciBhPW5ldyBjWyJkZWZhdWx0Il0obixyLHQsbi5fb3duZXIscyk7YS5vbkNoYW5nZShmdW5jdGlvbihlKXtuLl9vbkNoYW5nZShlLHtwYXRoOm8sY2hpbGRJZDpyfSl9KSxuLl9jaGlsZHJlbk9iamVjdHNbcl09YSxlKGEpfSl9fSx7a2V5OiJvbkFkZENoaWxkcmVuIix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLl9vbkFkZENoaWxkcmVuSGFuZGxlcj1lfX0se2tleToiX29uQ2hpbGRyZW5DcmVhdGUiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj1lLmJvZHkucmVzb3VyY2U7Y29uc29sZS5sb2coImNyZWF0ZS1vYnNlcnZlci1jaGlsZCggIit0Ll9vd25lcisiICk6ICIsZSk7dmFyIHI9bmV3IGNbImRlZmF1bHQiXSh0LG4sZS5ib2R5LnZhbHVlKTt0Ll9jaGlsZHJlbk9iamVjdHNbbl09cixzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dC5fYnVzLnBvc3RNZXNzYWdlKHtpZDplLmlkLHR5cGU6InJlc3BvbnNlIixmcm9tOmUudG8sdG86ZS5mcm9tLGJvZHk6e2NvZGU6MjAwLHNvdXJjZTp0Ll9vd25lcn19KX0pO3ZhciBvPXt0eXBlOmUudHlwZSxmcm9tOmUuZnJvbSx1cmw6ZS50byx2YWx1ZTplLmJvZHkudmFsdWUsY2hpbGRJZDpuLGlkZW50aXR5OmUuYm9keS5pZFRva2VufTt0Ll9vbkFkZENoaWxkcmVuSGFuZGxlciYmKGNvbnNvbGUubG9nKCJBREQtQ0hJTERSRU4tRVZFTlQ6ICIsbyksdC5fb25BZGRDaGlsZHJlbkhhbmRsZXIobykpfX0se2tleToiX29uQ2hhbmdlIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7aWYobi5fdmVyc2lvbisrLCJvbiI9PT1uLl9zdGF0dXMpe3ZhciByPXt0eXBlOiJ1cGRhdGUiLGZyb206bi5fdXJsLHRvOm4uX3VybCsiL2NoYW5nZXMiLGJvZHk6e3ZlcnNpb246bi5fdmVyc2lvbixzb3VyY2U6bi5fb3duZXIsYXR0cmlidXRlOmUuZmllbGR9fTtlLm9UeXBlPT09cy5PYmplY3RUeXBlLk9CSkVDVD9lLmNUeXBlIT09cy5DaGFuZ2VUeXBlLlJFTU9WRSYmKHIuYm9keS52YWx1ZT1lLmRhdGEpOihyLmJvZHkuYXR0cmlidXRlVHlwZT1lLm9UeXBlLHIuYm9keS52YWx1ZT1lLmRhdGEsZS5jVHlwZSE9PXMuQ2hhbmdlVHlwZS5VUERBVEUmJihyLmJvZHkub3BlcmF0aW9uPWUuY1R5cGUpKSx0JiYoci50bz10LnBhdGgsci5ib2R5LnJlc291cmNlPXQuY2hpbGRJZCksbi5fYnVzLnBvc3RNZXNzYWdlKHIpfX19LHtrZXk6Il9jaGFuZ2VPYmplY3QiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcztpZihuLl92ZXJzaW9uKzE9PT10LmJvZHkudmVyc2lvbil7bi5fdmVyc2lvbisrO3ZhciByPXQuYm9keS5hdHRyaWJ1dGUsbz0oMCxsLmRlZXBDbG9uZSkodC5ib2R5LnZhbHVlKSxpPWUuZmluZEJlZm9yZShyKTtpZih0LmJvZHkuYXR0cmlidXRlVHlwZT09PXMuT2JqZWN0VHlwZS5BUlJBWSlpZih0LmJvZHkub3BlcmF0aW9uPT09cy5DaGFuZ2VUeXBlLkFERCl7dmFyIGE9aS5vYmosdT1pLmxhc3Q7QXJyYXkucHJvdG90eXBlLnNwbGljZS5hcHBseShhLFt1LDBdLmNvbmNhdChvKSl9ZWxzZSBpZih0LmJvZHkub3BlcmF0aW9uPT09cy5DaGFuZ2VUeXBlLlJFTU9WRSl7dmFyIGM9aS5vYmosZj1pLmxhc3Q7Yy5zcGxpY2UoZixvKX1lbHNlIGkub2JqW2kubGFzdF09bztlbHNlIHQuYm9keS52YWx1ZT9pLm9ialtpLmxhc3RdPW86ZGVsZXRlIGkub2JqW2kubGFzdF19ZWxzZSBjb25zb2xlLmxvZygiVU5TWU5DSFJPTklaRUQgVkVSU0lPTjogKGRhdGEgPT4gIituLl92ZXJzaW9uKyIsIG1zZyA9PiAiK3QuYm9keS52ZXJzaW9uKyIpIil9fSx7a2V5OiJfY2hhbmdlQ2hpbGRyZW4iLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7Y29uc29sZS5sb2coIkNoYW5nZSBjaGlsZHJlbjogIix0Ll9vd25lcixlKTt2YXIgbj1lLmJvZHkucmVzb3VyY2Uscj10Ll9jaGlsZHJlbk9iamVjdHNbbl07cj90Ll9jaGFuZ2VPYmplY3Qoci5fc3luY09iaixlKTpjb25zb2xlLmxvZygiTm8gY2hpbGRyZW4gZm91bmQgZm9yOiAiLG4pfX0se2tleToidXJsIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdXJsfX0se2tleToic2NoZW1hIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc2NoZW1hfX0se2tleToic3RhdHVzIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc3RhdHVzfX0se2tleToiZGF0YSIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3N5bmNPYmouZGF0YX19LHtrZXk6ImNoaWxkcmVucyIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2NoaWxkcmVuT2JqZWN0c319XSksZX0oKTtuWyJkZWZhdWx0Il09Zix0LmV4cG9ydHM9blsiZGVmYXVsdCJdfSx7Ii4uL3V0aWxzL3V0aWxzLmpzIjoxMiwiLi9EYXRhT2JqZWN0Q2hpbGQiOjYsIi4vU3luY09iamVjdCI6MTB9XSw2OltmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOnsiZGVmYXVsdCI6ZX19ZnVuY3Rpb24gbyhlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgaT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIua2V5LHIpfX1yZXR1cm4gZnVuY3Rpb24odCxuLHIpe3JldHVybiBuJiZlKHQucHJvdG90eXBlLG4pLHImJmUodCxyKSx0fX0oKSxzPWUoIi4vU3luY09iamVjdCIpLGE9cihzKSx1PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LG4scixpLHMpe28odGhpcyxlKTt2YXIgdT10aGlzO3UuX3BhcmVudD10LHUuX2NoaWxkSWQ9bix1Ll9vd25lcj1pLHUuX21zZ0lkPXMsdS5fc3luY09iaj1uZXcgYVsiZGVmYXVsdCJdKHIpLHUuX2J1cz10Ll9idXMsdS5fYWxsb2NhdGVMaXN0ZW5lcnMoKX1yZXR1cm4gaShlLFt7a2V5OiJfYWxsb2NhdGVMaXN0ZW5lcnMiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLl9vd25lciYmKGUuX2xpc3RlbmVyPWUuX2J1cy5hZGRMaXN0ZW5lcihlLl9vd25lcixmdW5jdGlvbih0KXsicmVzcG9uc2UiPT09dC50eXBlJiZ0LmlkPT09ZS5fbXNnSWQmJihjb25zb2xlLmxvZygiRGF0YU9iamVjdENoaWxkLm9uUmVzcG9uc2U6Iix0KSxlLl9vblJlc3BvbnNlKHQpKX0pKX19LHtrZXk6Il9yZWxlYXNlTGlzdGVuZXJzIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5fbGlzdGVuZXImJmUuX2xpc3RlbmVyLnJlbW92ZSgpfX0se2tleToiZGVsZXRlIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7ZGVsZXRlIGUuX3BhcmVudC5fY2hpbGRyZW5bZS5fY2hpbGRJZF0sZS5fcmVsZWFzZUxpc3RlbmVycygpfX0se2tleToib25DaGFuZ2UiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuX3N5bmNPYmoub2JzZXJ2ZShmdW5jdGlvbih0KXtlKHQpfSl9fSx7a2V5OiJvblJlc3BvbnNlIix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLl9vblJlc3BvbnNlSGFuZGxlcj1lfX0se2tleToiX29uUmVzcG9uc2UiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj17dHlwZTplLnR5cGUsdXJsOmUuYm9keS5zb3VyY2UsY29kZTplLmJvZHkuY29kZX07dC5fb25SZXNwb25zZUhhbmRsZXImJnQuX29uUmVzcG9uc2VIYW5kbGVyKG4pfX0se2tleToiY2hpbGRJZCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2NoaWxkSWR9fSx7a2V5OiJkYXRhIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc3luY09iai5kYXRhfX1dKSxlfSgpO25bImRlZmF1bHQiXT11LHQuZXhwb3J0cz1uWyJkZWZhdWx0Il19LHsiLi9TeW5jT2JqZWN0IjoxMH1dLDc6W2Z1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6eyJkZWZhdWx0IjplfX1mdW5jdGlvbiBvKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9ZnVuY3Rpb24gaShlLHQpe2lmKCFlKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7cmV0dXJuIXR8fCJvYmplY3QiIT10eXBlb2YgdCYmImZ1bmN0aW9uIiE9dHlwZW9mIHQ/ZTp0fWZ1bmN0aW9uIHMoZSx0KXtpZigiZnVuY3Rpb24iIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAiK3R5cGVvZiB0KTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpOmUuX19wcm90b19fPXQpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgYT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIua2V5LHIpfX1yZXR1cm4gZnVuY3Rpb24odCxuLHIpe3JldHVybiBuJiZlKHQucHJvdG90eXBlLG4pLHImJmUodCxyKSx0fX0oKSx1PWZ1bmN0aW9uIGgoZSx0LG4pe251bGw9PT1lJiYoZT1GdW5jdGlvbi5wcm90b3R5cGUpO3ZhciByPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSx0KTtpZih2b2lkIDA9PT1yKXt2YXIgbz1PYmplY3QuZ2V0UHJvdG90eXBlT2YoZSk7cmV0dXJuIG51bGw9PT1vP3ZvaWQgMDpoKG8sdCxuKX1pZigidmFsdWUiaW4gcilyZXR1cm4gci52YWx1ZTt2YXIgaT1yLmdldDtpZih2b2lkIDAhPT1pKXJldHVybiBpLmNhbGwobil9LGM9ZSgiLi9EYXRhT2JqZWN0IiksbD1yKGMpLGY9ZSgiLi9EYXRhT2JqZWN0Q2hpbGQiKSxkPXIoZikscD17QU5ZOiJhbnkiLFNUQVJUOiJzdGFydCIsRVhBQ1Q6ImV4YWN0In0sYj1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUsbixyLHMsYSx1LGMpe28odGhpcyx0KTt2YXIgbD1pKHRoaXMsT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpLmNhbGwodGhpcyxlLG4scixzLGEuZGF0YSx1KSksZj1sO3JldHVybiBmLl92ZXJzaW9uPWMsZi5fZmlsdGVycz17fSxmLl9zeW5jT2JqLm9ic2VydmUoZnVuY3Rpb24oZSl7Zi5fb25GaWx0ZXIoZSl9KSxPYmplY3Qua2V5cyhhLmNoaWxkcmVucykuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1hLmNoaWxkcmVuc1tlXTtmLl9jaGlsZHJlbk9iamVjdHNbZV09bmV3IGRbImRlZmF1bHQiXShmLGUsdCl9KSxmLl9hbGxvY2F0ZUxpc3RlbmVycygpLGx9cmV0dXJuIHModCxlKSxhKHQsW3trZXk6Il9hbGxvY2F0ZUxpc3RlbmVycyIsdmFsdWU6ZnVuY3Rpb24oKXt1KE9iamVjdC5nZXRQcm90b3R5cGVPZih0LnByb3RvdHlwZSksIl9hbGxvY2F0ZUxpc3RlbmVycyIsdGhpcykuY2FsbCh0aGlzKTt2YXIgZT10aGlzO2UuX2NoYW5nZUxpc3RlbmVyPWUuX2J1cy5hZGRMaXN0ZW5lcihlLl91cmwrIi9jaGFuZ2VzIixmdW5jdGlvbih0KXsidXBkYXRlIj09PXQudHlwZSYmKGNvbnNvbGUubG9nKCJEYXRhT2JqZWN0T2JzZXJ2ZXItIitlLl91cmwrIi1SQ1Y6ICIsdCksZS5fY2hhbmdlT2JqZWN0KGUuX3N5bmNPYmosdCkpfSl9fSx7a2V5OiJfcmVsZWFzZUxpc3RlbmVycyIsdmFsdWU6ZnVuY3Rpb24oKXt1KE9iamVjdC5nZXRQcm90b3R5cGVPZih0LnByb3RvdHlwZSksIl9yZWxlYXNlTGlzdGVuZXJzIix0aGlzKS5jYWxsKHRoaXMpO3ZhciBlPXRoaXM7ZS5fY2hhbmdlTGlzdGVuZXIucmVtb3ZlKCl9fSx7a2V5OiJkZWxldGUiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLl9yZWxlYXNlTGlzdGVuZXJzKCksZGVsZXRlIGUuX3N5bmNoZXIuX29ic2VydmVyc1tlLl91cmxdfX0se2tleToidW5zdWJzY3JpYmUiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PXt0eXBlOiJ1bnN1YnNjcmliZSIsZnJvbTplLl9vd25lcix0bzplLl9zeW5jaGVyLl9zdWJVUkwsYm9keTp7cmVzb3VyY2U6ZS5fdXJsfX07ZS5fYnVzLnBvc3RNZXNzYWdlKHQsZnVuY3Rpb24odCl7Y29uc29sZS5sb2coIkRhdGFPYmplY3RPYnNlcnZlci1VTlNVQlNDUklCRTogIix0KSwyMDA9PT10LmJvZHkuY29kZSYmKGUuX3JlbGVhc2VMaXN0ZW5lcnMoKSxkZWxldGUgZS5fc3luY2hlci5fb2JzZXJ2ZXJzW2UuX3VybF0pfSl9fSx7a2V5OiJvbkNoYW5nZSIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLHI9e3R5cGU6cC5FWEFDVCxjYWxsYmFjazp0fSxvPWUuaW5kZXhPZigiKiIpO289PT1lLmxlbmd0aC0xJiYoMD09PW8/ci50eXBlPXAuQU5ZOihyLnR5cGU9cC5TVEFSVCxuPWUuc3Vic3RyKDAsZS5sZW5ndGgtMSkpKSx0aGlzLl9maWx0ZXJzW25dPXJ9fSx7a2V5OiJfb25GaWx0ZXIiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7T2JqZWN0LmtleXModC5fZmlsdGVycykuZm9yRWFjaChmdW5jdGlvbihuKXt2YXIgcj10Ll9maWx0ZXJzW25dO3IudHlwZT09PXAuQU5ZP3IuY2FsbGJhY2soZSk6ci50eXBlPT09cC5TVEFSVD8wPT09ZS5maWVsZC5pbmRleE9mKG4pJiZyLmNhbGxiYWNrKGUpOnIudHlwZT09PXAuRVhBQ1QmJmUuZmllbGQ9PT1uJiZyLmNhbGxiYWNrKGUpfSl9fV0pLHR9KGxbImRlZmF1bHQiXSk7blsiZGVmYXVsdCJdPWIsdC5leHBvcnRzPW5bImRlZmF1bHQiXX0seyIuL0RhdGFPYmplY3QiOjUsIi4vRGF0YU9iamVjdENoaWxkIjo2fV0sODpbZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ImRlZmF1bHQiOmV9fWZ1bmN0aW9uIG8oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1mdW5jdGlvbiBpKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTtyZXR1cm4hdHx8Im9iamVjdCIhPXR5cGVvZiB0JiYiZnVuY3Rpb24iIT10eXBlb2YgdD9lOnR9ZnVuY3Rpb24gcyhlLHQpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICIrdHlwZW9mIHQpO2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKGUsdCk6ZS5fX3Byb3RvX189dCl9T2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgcj10W25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLCJ2YWx1ZSJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsci5rZXkscil9fXJldHVybiBmdW5jdGlvbih0LG4scil7cmV0dXJuIG4mJmUodC5wcm90b3R5cGUsbiksciYmZSh0LHIpLHR9fSgpLHU9ZnVuY3Rpb24gcChlLHQsbil7bnVsbD09PWUmJihlPUZ1bmN0aW9uLnByb3RvdHlwZSk7dmFyIHI9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLHQpO2lmKHZvaWQgMD09PXIpe3ZhciBvPU9iamVjdC5nZXRQcm90b3R5cGVPZihlKTtyZXR1cm4gbnVsbD09PW8/dm9pZCAwOnAobyx0LG4pfWlmKCJ2YWx1ZSJpbiByKXJldHVybiByLnZhbHVlO3ZhciBpPXIuZ2V0O2lmKHZvaWQgMCE9PWkpcmV0dXJuIGkuY2FsbChuKX0sYz1lKCIuL0RhdGFPYmplY3QiKSxsPXIoYyksZj1lKCIuLi91dGlscy91dGlscy5qcyIpLGQ9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLG4scixzLGEsdSl7byh0aGlzLHQpO3ZhciBjPWkodGhpcyxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCkuY2FsbCh0aGlzLGUsbixyLHMsYSx1KSksbD1jO3JldHVybiBsLl9zdWJzY3JpcHRpb25zPXt9LGwuX3N5bmNPYmoub2JzZXJ2ZShmdW5jdGlvbihlKXtjb25zb2xlLmxvZygiRGF0YU9iamVjdFJlcG9ydGVyLSIrbisiLVNFTkQ6ICIsZSksbC5fb25DaGFuZ2UoZSl9KSxsLl9hbGxvY2F0ZUxpc3RlbmVycygpLGN9cmV0dXJuIHModCxlKSxhKHQsW3trZXk6Il9hbGxvY2F0ZUxpc3RlbmVycyIsdmFsdWU6ZnVuY3Rpb24oKXt1KE9iamVjdC5nZXRQcm90b3R5cGVPZih0LnByb3RvdHlwZSksIl9hbGxvY2F0ZUxpc3RlbmVycyIsdGhpcykuY2FsbCh0aGlzKTt2YXIgZT10aGlzO2UuX3Jlc3BvbnNlTGlzdGVuZXI9ZS5fYnVzLmFkZExpc3RlbmVyKGUuX3VybCxmdW5jdGlvbih0KXsicmVzcG9uc2UiPT09dC50eXBlJiZlLl9vblJlc3BvbnNlKHQpfSl9fSx7a2V5OiJfcmVsZWFzZUxpc3RlbmVycyIsdmFsdWU6ZnVuY3Rpb24oKXt1KE9iamVjdC5nZXRQcm90b3R5cGVPZih0LnByb3RvdHlwZSksIl9yZWxlYXNlTGlzdGVuZXJzIix0aGlzKS5jYWxsKHRoaXMpO3ZhciBlPXRoaXM7ZS5fcmVzcG9uc2VMaXN0ZW5lci5yZW1vdmUoKX19LHtrZXk6Imludml0ZU9ic2VydmVycyIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPXt0eXBlOiJjcmVhdGUiLGZyb206dC5fc3luY2hlci5fb3duZXIsdG86dC5fc3luY2hlci5fc3ViVVJMLGJvZHk6e3Jlc291cmNlOnQuX3VybCxzY2hlbWE6dC5fc2NoZW1hLHZhbHVlOnQuX3N5bmNPYmouZGF0YSxhdXRob3Jpc2U6ZX19O3QuX2J1cy5wb3N0TWVzc2FnZShuKX19LHtrZXk6ImRlbGV0ZSIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9e3R5cGU6ImRlbGV0ZSIsZnJvbTplLl9vd25lcix0bzplLl9zeW5jaGVyLl9zdWJVUkwsYm9keTp7cmVzb3VyY2U6ZS5fdXJsfX07ZS5fYnVzLnBvc3RNZXNzYWdlKHQsZnVuY3Rpb24odCl7Y29uc29sZS5sb2coIkRhdGFPYmplY3RSZXBvcnRlci1ERUxFVEU6ICIsdCksMjAwPT09dC5ib2R5LmNvZGUmJihlLl9yZWxlYXNlTGlzdGVuZXJzKCksZGVsZXRlIGUuX3N5bmNoZXIuX3JlcG9ydGVyc1tlLl91cmxdKX0pfX0se2tleToib25TdWJzY3JpcHRpb24iLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuX29uU3Vic2NyaXB0aW9uSGFuZGxlcj1lfX0se2tleToib25SZXNwb25zZSIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fb25SZXNwb25zZUhhbmRsZXI9ZX19LHtrZXk6Il9vbkZvcndhcmQiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7c3dpdGNoKGNvbnNvbGUubG9nKCJEYXRhT2JqZWN0UmVwb3J0ZXItUkNWOiAiLGUpLGUuYm9keS50eXBlKXtjYXNlInN1YnNjcmliZSI6dC5fb25TdWJzY3JpYmUoZSk7YnJlYWs7Y2FzZSJ1bnN1YnNjcmliZSI6dC5fb25VblN1YnNjcmliZShlKX19fSx7a2V5OiJfb25TdWJzY3JpYmUiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj1lLmJvZHkuZnJvbSxyPXt0eXBlOmUuYm9keS50eXBlLHVybDpuLGFjY2VwdDpmdW5jdGlvbigpe3ZhciByPXt1cmw6bixzdGF0dXM6Im9uIn07dC5fc3Vic2NyaXB0aW9uc1tuXT1yO3ZhciBvPXt9O3JldHVybiBPYmplY3Qua2V5cyh0Ll9jaGlsZHJlbk9iamVjdHMpLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIG49dC5fY2hpbGRyZW5PYmplY3RzW2VdLmRhdGE7b1tlXT0oMCxmLmRlZXBDbG9uZSkobil9KSx0Ll9idXMucG9zdE1lc3NhZ2Uoe2lkOmUuaWQsdHlwZToicmVzcG9uc2UiLGZyb206ZS50byx0bzplLmZyb20sYm9keTp7Y29kZToyMDAsc2NoZW1hOnQuX3NjaGVtYSx2ZXJzaW9uOnQuX3ZlcnNpb24sdmFsdWU6e2RhdGE6KDAsZi5kZWVwQ2xvbmUpKHQuZGF0YSksY2hpbGRyZW5zOm99fX0pLHJ9LHJlamVjdDpmdW5jdGlvbihuKXt0Ll9idXMucG9zdE1lc3NhZ2Uoe2lkOmUuaWQsdHlwZToicmVzcG9uc2UiLGZyb206ZS50byx0bzplLmZyb20sYm9keTp7Y29kZTo0MDMsZGVzYzpufX0pfX07dC5fb25TdWJzY3JpcHRpb25IYW5kbGVyJiYoY29uc29sZS5sb2coIlNVQlNDUklQVElPTi1FVkVOVDogIixyKSx0Ll9vblN1YnNjcmlwdGlvbkhhbmRsZXIocikpfX0se2tleToiX29uVW5TdWJzY3JpYmUiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj1lLmJvZHkuZnJvbSxyPXQuX3N1YnNjcmlwdGlvbnNbbl07ZGVsZXRlIHQuX3N1YnNjcmlwdGlvbnNbbl07dmFyIG89e3R5cGU6ZS5ib2R5LnR5cGUsdXJsOm4sb2JqZWN0OnJ9O3QuX29uU3Vic2NyaXB0aW9uSGFuZGxlciYmKGNvbnNvbGUubG9nKCJVTi1TVUJTQ1JJUFRJT04tRVZFTlQ6ICIsbyksdC5fb25TdWJzY3JpcHRpb25IYW5kbGVyKG8pKX19LHtrZXk6Il9vblJlc3BvbnNlIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLG49e3R5cGU6ZS50eXBlLHVybDplLmZyb20sY29kZTplLmJvZHkuY29kZX07dC5fb25SZXNwb25zZUhhbmRsZXImJihjb25zb2xlLmxvZygiUkVTUE9OU0UtRVZFTlQ6ICIsbiksdC5fb25SZXNwb25zZUhhbmRsZXIobikpfX0se2tleToic3Vic2NyaXB0aW9ucyIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3N1YnNjcmlwdGlvbnN9fV0pLHR9KGxbImRlZmF1bHQiXSk7blsiZGVmYXVsdCJdPWQsdC5leHBvcnRzPW5bImRlZmF1bHQiXX0seyIuLi91dGlscy91dGlscy5qcyI6MTIsIi4vRGF0YU9iamVjdCI6NX1dLDk6W2Z1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIua2V5LHIpfX1yZXR1cm4gZnVuY3Rpb24odCxuLHIpe3JldHVybiBuJiZlKHQucHJvdG90eXBlLG4pLHImJmUodCxyKSx0fX0oKSxpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LG4sbyxpKXtyKHRoaXMsZSk7dmFyIHM9dGhpcztzLl9vd25lcj10LHMuX3VybD1uLHMuX2J1cz1vLHMuX2NoaWxkcmVuPWkscy5fY2hhbmdlcz1bXSxzLl9hbGxvY2F0ZUxpc3RlbmVycygpfXJldHVybiBvKGUsW3trZXk6Il9hbGxvY2F0ZUxpc3RlbmVycyIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuX2xpc3RlbmVyPWUuX2J1cy5hZGRMaXN0ZW5lcihlLl91cmwsZnVuY3Rpb24odCl7Y29uc29sZS5sb2coIkRhdGFQcm92aXNpb25hbC0iK2UuX3VybCsiLVJDVjogIix0KSxlLl9jaGFuZ2VzLnB1c2godCl9KX19LHtrZXk6Il9yZWxlYXNlTGlzdGVuZXJzIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5fbGlzdGVuZXIucmVtb3ZlKCl9fSx7a2V5OiJhcHBseSIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0Ll9jaGFuZ2VzLmZvckVhY2goZnVuY3Rpb24odCl7ZS5fY2hhbmdlT2JqZWN0KGUuX3N5bmNPYmosdCl9KX19LHtrZXk6ImNoaWxkcmVuIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY2hpbGRyZW59fV0pLGV9KCk7blsiZGVmYXVsdCJdPWksdC5leHBvcnRzPW5bImRlZmF1bHQiXX0se31dLDEwOltmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIoZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1PYmplY3QuZGVmaW5lUHJvcGVydHkobiwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksbi5PYmplY3RUeXBlPW4uQ2hhbmdlVHlwZT12b2lkIDA7dmFyIG89ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciByPXRbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsInZhbHVlImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLmtleSxyKX19cmV0dXJuIGZ1bmN0aW9uKHQsbixyKXtyZXR1cm4gbiYmZSh0LnByb3RvdHlwZSxuKSxyJiZlKHQsciksdH19KCksaT1lKCIuLi91dGlscy91dGlscy5qcyIpLHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpe3IodGhpcyxlKTt2YXIgbj10aGlzO24uX29ic2VydmVycz1bXSxuLl9maWx0ZXJzPXt9LHQ/bi5fZGF0YT0oMCxpLmRlZXBDbG9uZSkodCk6bi5fZGF0YT17fSxuLl9pbnRlcm5hbE9ic2VydmUobmV3IGEsbi5fZGF0YSl9cmV0dXJuIG8oZSxbe2tleToib2JzZXJ2ZSIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fb2JzZXJ2ZXJzLnB1c2goZSl9fSx7a2V5OiJmaW5kIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1lLnNwbGl0KCIuIik7cmV0dXJuIHRoaXMuX2ZpbmRXaXRoU3BsaXQodCl9fSx7a2V5OiJmaW5kQmVmb3JlIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD17fSxuPWUuc3BsaXQoIi4iKTtyZXR1cm4gdC5sYXN0PW4ucG9wKCksdC5vYmo9dGhpcy5fZmluZFdpdGhTcGxpdChuKSx0fX0se2tleToiX2ZpbmRXaXRoU3BsaXQiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuX2RhdGE7cmV0dXJuIGUuZm9yRWFjaChmdW5jdGlvbihlKXt0PXRbZV19KSx0fX0se2tleToiX2ZpcmVFdmVudCIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fb2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24odCl7dChlKX0pfX0se2tleToiX2lzT2JzZXJ2YWJsZSIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuY29uc3RydWN0b3I9PT1PYmplY3R8fGUuY29uc3RydWN0b3I9PT1BcnJheX19LHtrZXk6Il9pbnRlcm5hbE9ic2VydmUiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcztpZihuLl9pc09ic2VydmFibGUodCkpe3ZhciByPWZ1bmN0aW9uKHQpe24uX29uQ2hhbmdlcyhlLHQpfTtpZih0LmNvbnN0cnVjdG9yPT09T2JqZWN0KXtPYmplY3Qub2JzZXJ2ZSh0LHIpO2Zvcih2YXIgbyBpbiB0KW4uX2lzT2JzZXJ2YWJsZSh0W29dKSYmbi5faW50ZXJuYWxPYnNlcnZlKGVbIm5ldyJdKG8pLHRbb10pfWVsc2UgaWYodC5jb25zdHJ1Y3Rvcj09PUFycmF5KXtBcnJheS5vYnNlcnZlKHQscik7Zm9yKHZhciBpIGluIHQpaWYobi5faXNPYnNlcnZhYmxlKHRbaV0pKXt2YXIgcz1lWyJuZXciXShuZXcgdSh0W2ldLGkpKTtuLl9pbnRlcm5hbE9ic2VydmUocyx0W2ldKX19fX19LHtrZXk6Il9vbkNoYW5nZXMiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcztmb3IodmFyIHIgaW4gdCl7dmFyIG89dFtyXS5vYmplY3Qscz12b2lkIDA7aWYoby5jb25zdHJ1Y3Rvcj09PU9iamVjdCYmKHM9bC5PQkpFQ1QpLG8uY29uc3RydWN0b3I9PT1BcnJheSYmKHM9bC5BUlJBWSksInNwbGljZSI9PT10W3JdLnR5cGUpIWZ1bmN0aW9uKCl7dmFyIGE9dFtyXS5pbmRleCxsPWVbIm5ldyJdKCIiK2EpLGY9bC50b1N0cmluZygpLGQ9dFtyXS5yZW1vdmVkLmxlbmd0aDtpZigwIT09ZCl7dmFyIHA9dFtyXS5yZW1vdmVkO3AuZm9yRWFjaChmdW5jdGlvbih0LHIpe24uX2lzT2JzZXJ2YWJsZSh0KSYmZS5yZW1vdmVJbmRleChhK3IpfSksbi5fZmlyZUV2ZW50KHtjVHlwZTpjLlJFTU9WRSxvVHlwZTpzLGZpZWxkOmYsZGF0YTpkfSl9dmFyIGI9dFtyXS5hZGRlZENvdW50O2lmKDAhPT1iKXt2YXIgaD1vLnNsaWNlKGEsYStiKTtoLmZvckVhY2goZnVuY3Rpb24odCxyKXtpZihuLl9pc09ic2VydmFibGUodCkpe3ZhciBvPWVbIm5ldyJdKG5ldyB1KHQsYStyKSk7bi5faW50ZXJuYWxPYnNlcnZlKG8sdCl9fSksbi5fZmlyZUV2ZW50KHtjVHlwZTpjLkFERCxvVHlwZTpzLGZpZWxkOmYsZGF0YTooMCxpLmRlZXBDbG9uZSkoaCl9KX1hIT09by5sZW5ndGgtMSYmZS5yZUluZGV4RnJvbShvKX0oKTtlbHNle3ZhciBhPWVbIm5ldyJdKHRbcl0ubmFtZSksZj1hLnRvU3RyaW5nKCk7aWYoLTEhPT1mLmluZGV4T2YoIlN5bWJvbCIpKWNvbnRpbnVlO3ZhciBkPW9bdFtyXS5uYW1lXTsidXBkYXRlIj09PXRbcl0udHlwZSYmdGhpcy5fZmlyZUV2ZW50KHtjVHlwZTpjLlVQREFURSxvVHlwZTpzLGZpZWxkOmYsZGF0YTooMCxpLmRlZXBDbG9uZSkoZCl9KSwiYWRkIj09PXRbcl0udHlwZSYmKHRoaXMuX2ludGVybmFsT2JzZXJ2ZShhLGQpLHRoaXMuX2ZpcmVFdmVudCh7Y1R5cGU6Yy5BREQsb1R5cGU6cyxmaWVsZDpmLGRhdGE6KDAsaS5kZWVwQ2xvbmUpKGQpfSkpLCJkZWxldGUiPT09dFtyXS50eXBlJiZ0aGlzLl9maXJlRXZlbnQoe2NUeXBlOmMuUkVNT1ZFLG9UeXBlOnMsZmllbGQ6Zn0pfX19fSx7a2V5OiJkYXRhIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZGF0YX19XSksZX0oKSxhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe3IodGhpcyxlKSx0aGlzLl9wYXRoPVtdLHRoaXMuX29ic2VydmFibGVzPXt9fXJldHVybiBvKGUsW3trZXk6InJlbW92ZUluZGV4Iix2YWx1ZTpmdW5jdGlvbihlKXtkZWxldGUgdGhpcy5fb2JzZXJ2YWJsZXNbZV19fSx7a2V5OiJyZUluZGV4RnJvbSIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztPYmplY3Qua2V5cyh0aGlzLl9vYnNlcnZhYmxlcykuZm9yRWFjaChmdW5jdGlvbihuKXt2YXIgcj10Ll9vYnNlcnZhYmxlc1tuXSxvPWUuaW5kZXhPZihyLm9iaik7ci5pZHghPW8mJihyLmlkeD1vLGRlbGV0ZSB0Ll9vYnNlcnZhYmxlc1tuXSx0Ll9vYnNlcnZhYmxlc1tvXT1yKX0pfX0se2tleToibmV3Iix2YWx1ZTpmdW5jdGlvbihlKXtlLmNvbnN0cnVjdG9yPT11JiYodGhpcy5fb2JzZXJ2YWJsZXNbZS5pZHhdPWUpO3ZhciB0PXRoaXMuY2xvbmUoKTtyZXR1cm4gdC5fcGF0aC5wdXNoKGUpLHR9fSx7a2V5OiJjbG9uZSIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD1uZXcgZTtyZXR1cm4gdGhpcy5fcGF0aC5mb3JFYWNoKGZ1bmN0aW9uKGUpe3QuX3BhdGgucHVzaChlKX0pLHR9fSx7a2V5OiJ0b1N0cmluZyIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT0iIjtyZXR1cm4gdGhpcy5fcGF0aC5mb3JFYWNoKGZ1bmN0aW9uKHQsbil7MD09PW4/ZT10LnRvU3RyaW5nKCk6ZSs9Ii4iK3QudG9TdHJpbmcoKX0pLGV9fV0pLGV9KCksdT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxuKXtyKHRoaXMsZSksdGhpcy5vYmo9dCx0aGlzLmlkeD1ufXJldHVybiBvKGUsW3trZXk6InRvU3RyaW5nIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmlkeC50b1N0cmluZygpfX1dKSxlfSgpLGM9bi5DaGFuZ2VUeXBlPXtVUERBVEU6InVwZGF0ZSIsQUREOiJhZGQiLFJFTU9WRToicmVtb3ZlIn0sbD1uLk9iamVjdFR5cGU9e09CSkVDVDoib2JqZWN0IixBUlJBWToiYXJyYXkifTtuWyJkZWZhdWx0Il09c30seyIuLi91dGlscy91dGlscy5qcyI6MTJ9XSwxMTpbZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ImRlZmF1bHQiOmV9fWZ1bmN0aW9uIG8oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1PYmplY3QuZGVmaW5lUHJvcGVydHkobiwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIGk9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciByPXRbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsInZhbHVlImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLmtleSxyKX19cmV0dXJuIGZ1bmN0aW9uKHQsbixyKXtyZXR1cm4gbiYmZSh0LnByb3RvdHlwZSxuKSxyJiZlKHQsciksdH19KCkscz1lKCIuL0RhdGFPYmplY3RSZXBvcnRlciIpLGE9cihzKSx1PWUoIi4vRGF0YU9iamVjdE9ic2VydmVyIiksYz1yKHUpLGw9ZSgiLi9EYXRhUHJvdmlzaW9uYWwiKSxmPXIobCksZD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxuLHIpe28odGhpcyxlKTt2YXIgaT10aGlzO2kuX293bmVyPXQsaS5fYnVzPW4saS5fc3ViVVJMPXIucnVudGltZVVSTCsiL3NtIixpLl9yZXBvcnRlcnM9e30saS5fb2JzZXJ2ZXJzPXt9LGkuX3Byb3Zpc2lvbmFscz17fSxuLmFkZExpc3RlbmVyKHQsZnVuY3Rpb24oZSl7aWYoZS5mcm9tIT09dClzd2l0Y2goY29uc29sZS5sb2coIlN5bmNoZXItUkNWOiAiLGUpLGUudHlwZSl7Y2FzZSJmb3J3YXJkIjppLl9vbkZvcndhcmQoZSk7YnJlYWs7Y2FzZSJjcmVhdGUiOmkuX29uUmVtb3RlQ3JlYXRlKGUpO2JyZWFrO2Nhc2UiZGVsZXRlIjppLl9vblJlbW90ZURlbGV0ZShlKX19KX1yZXR1cm4gaShlLFt7a2V5OiJjcmVhdGUiLHZhbHVlOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10aGlzLG89e3R5cGU6ImNyZWF0ZSIsZnJvbTpyLl9vd25lcix0bzpyLl9zdWJVUkwsYm9keTp7c2NoZW1hOmUsdmFsdWU6bixhdXRob3Jpc2U6dH19O3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbih0LGkpe3IuX2J1cy5wb3N0TWVzc2FnZShvLGZ1bmN0aW9uKG8pe2lmKGNvbnNvbGUubG9nKCJjcmVhdGUtcmVzcG9uc2U6ICIsbyksMjAwPT09by5ib2R5LmNvZGUpe3ZhciBzPW8uYm9keS5yZXNvdXJjZSx1PW5ldyBhWyJkZWZhdWx0Il0ocixzLGUsIm9uIixuLG8uYm9keS5jaGlsZHJlblJlc291cmNlcyk7ci5fcmVwb3J0ZXJzW3NdPXUsdCh1KX1lbHNlIGkoby5ib2R5LmRlc2MpfSl9KX19LHtrZXk6InN1YnNjcmliZSIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLHI9e3R5cGU6InN1YnNjcmliZSIsZnJvbTpuLl9vd25lcix0bzpuLl9zdWJVUkwsYm9keTp7c2NoZW1hOmUscmVzb3VyY2U6dH19O3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihvLGkpe24uX2J1cy5wb3N0TWVzc2FnZShyLGZ1bmN0aW9uKHIpe2NvbnNvbGUubG9nKCJzdWJzY3JpYmUtcmVzcG9uc2U6ICIscik7dmFyIHM9bi5fcHJvdmlzaW9uYWxzW3RdO2lmKGRlbGV0ZSBuLl9wcm92aXNpb25hbHNbdF0scyYmcy5fcmVsZWFzZUxpc3RlbmVycygpLHIuYm9keS5jb2RlPDIwMClzPW5ldyBmWyJkZWZhdWx0Il0obi5fb3duZXIsdCxuLl9idXMsci5ib2R5LmNoaWxkcmVuUmVzb3VyY2VzKSxuLl9wcm92aXNpb25hbHNbdF09cztlbHNlIGlmKDIwMD09PXIuYm9keS5jb2RlKXt2YXIgYT1uZXcgY1siZGVmYXVsdCJdKG4sdCxlLCJvbiIsci5ib2R5LnZhbHVlLHMuY2hpbGRyZW4sci5ib2R5LnZlcnNpb24pO24uX29ic2VydmVyc1t0XT1hLG8oYSkscy5hcHBseShhKX1lbHNlIGkoci5ib2R5LmRlc2MpfSl9KX19LHtrZXk6Im9uTm90aWZpY2F0aW9uIix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLl9vbk5vdGlmaWNhdGlvbkhhbmRsZXI9ZX19LHtrZXk6Il9vbkZvcndhcmQiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj10Ll9yZXBvcnRlcnNbZS5ib2R5LnRvXTtuLl9vbkZvcndhcmQoZSl9fSx7a2V5OiJfb25SZW1vdGVDcmVhdGUiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj1lLmZyb20uc2xpY2UoMCwtMTMpLHI9e3R5cGU6ZS50eXBlLGZyb206ZS5ib2R5LnNvdXJjZSx1cmw6bixzY2hlbWE6ZS5ib2R5LnNjaGVtYSx2YWx1ZTplLmJvZHkudmFsdWUsaWRlbnRpdHk6ZS5ib2R5LmlkVG9rZW4sYWNrOmZ1bmN0aW9uKG4pe3ZhciByPTIwMDtuJiYocj1uKSx0Ll9idXMucG9zdE1lc3NhZ2Uoe2lkOmUuaWQsdHlwZToicmVzcG9uc2UiLGZyb206ZS50byx0bzplLmZyb20sYm9keTp7Y29kZTpyfX0pfX07dC5fb25Ob3RpZmljYXRpb25IYW5kbGVyJiYoY29uc29sZS5sb2coIk5PVElGSUNBVElPTi1FVkVOVDogIixyKSwKdC5fb25Ob3RpZmljYXRpb25IYW5kbGVyKHIpKX19LHtrZXk6Il9vblJlbW90ZURlbGV0ZSIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPWUuYm9keS5yZXNvdXJjZSxyPXQuX29ic2VydmVyc1tuXTtpZihyKXt2YXIgbz17dHlwZTplLnR5cGUsdXJsOm4saWRlbnRpdHk6ZS5ib2R5LmlkVG9rZW4sYWNrOmZ1bmN0aW9uKG4pe3ZhciBvPTIwMDtuJiYobz1uKSwyMDA9PT1vJiZyWyJkZWxldGUiXSgpLHQuX2J1cy5wb3N0TWVzc2FnZSh7aWQ6ZS5pZCx0eXBlOiJyZXNwb25zZSIsZnJvbTplLnRvLHRvOmUuZnJvbSxib2R5Ontjb2RlOm8sc291cmNlOnQuX293bmVyfX0pfX07dC5fb25Ob3RpZmljYXRpb25IYW5kbGVyJiYoY29uc29sZS5sb2coIk5PVElGSUNBVElPTi1FVkVOVDogIixvKSx0Ll9vbk5vdGlmaWNhdGlvbkhhbmRsZXIobykpfWVsc2UgdC5fYnVzLnBvc3RNZXNzYWdlKHtpZDplLmlkLHR5cGU6InJlc3BvbnNlIixmcm9tOmUudG8sdG86ZS5mcm9tLGJvZHk6e2NvZGU6NDA0LHNvdXJjZTp0Ll9vd25lcn19KX19LHtrZXk6Im93bmVyIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fb3duZXJ9fSx7a2V5OiJyZXBvcnRlcnMiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9yZXBvcnRlcnN9fSx7a2V5OiJvYnNlcnZlcnMiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9vYnNlcnZlcnN9fV0pLGV9KCk7blsiZGVmYXVsdCJdPWQsdC5leHBvcnRzPW5bImRlZmF1bHQiXX0seyIuL0RhdGFPYmplY3RPYnNlcnZlciI6NywiLi9EYXRhT2JqZWN0UmVwb3J0ZXIiOjgsIi4vRGF0YVByb3Zpc2lvbmFsIjo5fV0sMTI6W2Z1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcihlKXt2YXIgdD0vKFthLXpBLVotXSopOlwvXC8oPzpcLik/KFstYS16QS1aMC05QDolLl9cK34jPV17MiwyNTZ9KShbLWEtekEtWjAtOUA6JS5fXCt+Iz1cL10qKS9naSxuPSIkMSwkMiwkMyIscj1lLnJlcGxhY2UodCxuKS5zcGxpdCgiLCIpO3JbMF09PT1lJiYoclswXT0iaHR0cHMiLHJbMV09ZSk7dmFyIG89e3R5cGU6clswXSxkb21haW46clsxXSxpZGVudGl0eTpyWzJdfTtyZXR1cm4gb31mdW5jdGlvbiBvKGUpe3JldHVybiBlP0pTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZSkpOnZvaWQgMH1PYmplY3QuZGVmaW5lUHJvcGVydHkobiwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksbi5kaXZpZGVVUkw9cixuLmRlZXBDbG9uZT1vfSx7fV19LHt9LFs0XSkoNCl9KTsKfSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09ICJ1bmRlZmluZWQiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pCn0se31dfSx7fSxbMV0pKDEpCn0pOw==",
      "sourceCodeClassname": "HelloWorldObserver",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 10002,
    "type": "Hyperties",
    "version": "0.1",
    "description": "Description of HelloWorldObserver",
    "objectName": "HelloWorldObserver",
    "configuration": {},
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "HelloWorldReporter": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "HelloWorldReporter",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 10003,
    "type": "Hyperties",
    "version": "0.1",
    "description": "Description of HelloWorldReporter",
    "objectName": "HelloWorldReporter",
    "configuration": {},
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "HypertyChat": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "HypertyChat",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 10004,
    "type": "Hyperties",
    "version": "0.1",
    "description": "Description of HypertyChat",
    "objectName": "HypertyChat",
    "configuration": {},
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  }
}