{
  "Runtime": {
    "sourcePackage": {
      "sourceCode": "LyoqCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBCiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQKKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wKKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVgoqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcKKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUKKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTgoqCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAoqCiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKKgoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KKiovCgovLyBEaXN0cmlidXRpb24gZmlsZSBmb3IgUnVudGltZS5qcyAKLy8gdmVyc2lvbjogMC41LjEKLy8gTGFzdCBidWlsZDogV2VkIEF1ZyAxMCAyMDE2IDE1OjQzOjAzIEdNVCswMTAwIChXRVNUKQoKKGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09Im9iamVjdCImJnR5cGVvZiBtb2R1bGUhPT0idW5kZWZpbmVkIil7bW9kdWxlLmV4cG9ydHM9ZigpfWVsc2UgaWYodHlwZW9mIGRlZmluZT09PSJmdW5jdGlvbiImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT0idW5kZWZpbmVkIil7Zz13aW5kb3d9ZWxzZSBpZih0eXBlb2YgZ2xvYmFsIT09InVuZGVmaW5lZCIpe2c9Z2xvYmFsfWVsc2UgaWYodHlwZW9mIHNlbGYhPT0idW5kZWZpbmVkIil7Zz1zZWxmfWVsc2V7Zz10aGlzfWcuUnVudGltZSA9IGYoKX19KShmdW5jdGlvbigpe3ZhciBkZWZpbmUsbW9kdWxlLGV4cG9ydHM7cmV0dXJuIChmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09ImZ1bmN0aW9uIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcigiQ2Fubm90IGZpbmQgbW9kdWxlICciK28rIiciKTt0aHJvdyBmLmNvZGU9Ik1PRFVMRV9OT1RfRk9VTkQiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09ImZ1bmN0aW9uIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkoezE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKGdsb2JhbCl7CiJ1c2Ugc3RyaWN0IjsKCnJlcXVpcmUoImNvcmUtanMvc2hpbSIpOwoKcmVxdWlyZSgicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIik7CgpyZXF1aXJlKCJjb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGUiKTsKCi8qIGVzbGludCBtYXgtbGVuOiAwICovCgppZiAoZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKSB7CiAgdGhyb3cgbmV3IEVycm9yKCJvbmx5IG9uZSBpbnN0YW5jZSBvZiBiYWJlbC1wb2x5ZmlsbCBpcyBhbGxvd2VkIik7Cn0KZ2xvYmFsLl9iYWJlbFBvbHlmaWxsID0gdHJ1ZTsKCi8vIFNob3VsZCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2U6Cgp2YXIgREVGSU5FX1BST1BFUlRZID0gImRlZmluZVByb3BlcnR5IjsKZnVuY3Rpb24gZGVmaW5lKE8sIGtleSwgdmFsdWUpIHsKICBPW2tleV0gfHwgT2JqZWN0W0RFRklORV9QUk9QRVJUWV0oTywga2V5LCB7CiAgICB3cml0YWJsZTogdHJ1ZSwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIHZhbHVlOiB2YWx1ZQogIH0pOwp9CgpkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgInBhZExlZnQiLCAiIi5wYWRTdGFydCk7CmRlZmluZShTdHJpbmcucHJvdG90eXBlLCAicGFkUmlnaHQiLCAiIi5wYWRFbmQpOwoKInBvcCxyZXZlcnNlLHNoaWZ0LGtleXMsdmFsdWVzLGVudHJpZXMsaW5kZXhPZixldmVyeSxzb21lLGZvckVhY2gsbWFwLGZpbHRlcixmaW5kLGZpbmRJbmRleCxpbmNsdWRlcyxqb2luLHNsaWNlLGNvbmNhdCxwdXNoLHNwbGljZSx1bnNoaWZ0LHNvcnQsbGFzdEluZGV4T2YscmVkdWNlLHJlZHVjZVJpZ2h0LGNvcHlXaXRoaW4sZmlsbCIuc3BsaXQoIiwiKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICBbXVtrZXldICYmIGRlZmluZShBcnJheSwga2V5LCBGdW5jdGlvbi5jYWxsLmJpbmQoW11ba2V5XSkpOwp9KTsKfSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09ICJ1bmRlZmluZWQiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pCgp9LHsiY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlIjoxOCwiY29yZS1qcy9zaGltIjo0MDksInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI6NDExfV0sMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0geyAiZGVmYXVsdCI6IHJlcXVpcmUoImNvcmUtanMvbGlicmFyeS9mbi9qc29uL3N0cmluZ2lmeSIpLCBfX2VzTW9kdWxlOiB0cnVlIH07Cn0seyJjb3JlLWpzL2xpYnJhcnkvZm4vanNvbi9zdHJpbmdpZnkiOjE5fV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0geyAiZGVmYXVsdCI6IHJlcXVpcmUoImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvYXNzaWduIiksIF9fZXNNb2R1bGU6IHRydWUgfTsKfSx7ImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvYXNzaWduIjoyMH1dLDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IHsgImRlZmF1bHQiOiByZXF1aXJlKCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZSIpLCBfX2VzTW9kdWxlOiB0cnVlIH07Cn0seyJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZSI6MjF9XSw1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogcmVxdWlyZSgiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHkiKSwgX19lc01vZHVsZTogdHJ1ZSB9Owp9LHsiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHkiOjIyfV0sNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0geyAiZGVmYXVsdCI6IHJlcXVpcmUoImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZiIpLCBfX2VzTW9kdWxlOiB0cnVlIH07Cn0seyJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1wcm90b3R5cGUtb2YiOjIzfV0sNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0geyAiZGVmYXVsdCI6IHJlcXVpcmUoImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvaXMtZnJvemVuIiksIF9fZXNNb2R1bGU6IHRydWUgfTsKfSx7ImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvaXMtZnJvemVuIjoyNH1dLDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IHsgImRlZmF1bHQiOiByZXF1aXJlKCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2tleXMiKSwgX19lc01vZHVsZTogdHJ1ZSB9Owp9LHsiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzIjoyNX1dLDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IHsgImRlZmF1bHQiOiByZXF1aXJlKCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2YiKSwgX19lc01vZHVsZTogdHJ1ZSB9Owp9LHsiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9zZXQtcHJvdG90eXBlLW9mIjoyNn1dLDEwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogcmVxdWlyZSgiY29yZS1qcy9saWJyYXJ5L2ZuL3Byb21pc2UiKSwgX19lc01vZHVsZTogdHJ1ZSB9Owp9LHsiY29yZS1qcy9saWJyYXJ5L2ZuL3Byb21pc2UiOjI3fV0sMTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IHsgImRlZmF1bHQiOiByZXF1aXJlKCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sIiksIF9fZXNNb2R1bGU6IHRydWUgfTsKfSx7ImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wiOjI4fV0sMTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IHsgImRlZmF1bHQiOiByZXF1aXJlKCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yIiksIF9fZXNNb2R1bGU6IHRydWUgfTsKfSx7ImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3IiOjI5fV0sMTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOwoKZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgewogIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsKICB9Cn07Cn0se31dLDE0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsKCnZhciBfZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCIuLi9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHkiKTsKCnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVmaW5lUHJvcGVydHkpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOwogICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7CiAgICAgIGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOwogICAgICAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsKICAgIH0KICB9CgogIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwogICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7CiAgICByZXR1cm4gQ29uc3RydWN0b3I7CiAgfTsKfSgpOwp9LHsiLi4vY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5Ijo1fV0sMTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOwoKdmFyIF9zZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoIi4uL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2YiKTsKCnZhciBfc2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2V0UHJvdG90eXBlT2YpOwoKdmFyIF9jcmVhdGUgPSByZXF1aXJlKCIuLi9jb3JlLWpzL29iamVjdC9jcmVhdGUiKTsKCnZhciBfY3JlYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZSk7Cgp2YXIgX3R5cGVvZjIgPSByZXF1aXJlKCIuLi9oZWxwZXJzL3R5cGVvZiIpOwoKdmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7CiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgIiArICh0eXBlb2Ygc3VwZXJDbGFzcyA9PT0gInVuZGVmaW5lZCIgPyAidW5kZWZpbmVkIiA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShzdXBlckNsYXNzKSkpOwogIH0KCiAgc3ViQ2xhc3MucHJvdG90eXBlID0gKDAsIF9jcmVhdGUyLmRlZmF1bHQpKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsKICAgIGNvbnN0cnVjdG9yOiB7CiAgICAgIHZhbHVlOiBzdWJDbGFzcywKICAgICAgZW51bWVyYWJsZTogZmFsc2UsCiAgICAgIHdyaXRhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUKICAgIH0KICB9KTsKICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mMi5kZWZhdWx0ID8gKDAsIF9zZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsKfTsKfSx7Ii4uL2NvcmUtanMvb2JqZWN0L2NyZWF0ZSI6NCwiLi4vY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZiI6OSwiLi4vaGVscGVycy90eXBlb2YiOjE3fV0sMTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOwoKdmFyIF90eXBlb2YyID0gcmVxdWlyZSgiLi4vaGVscGVycy90eXBlb2YiKTsKCnZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7CiAgaWYgKCFzZWxmKSB7CiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOwogIH0KCiAgcmV0dXJuIGNhbGwgJiYgKCh0eXBlb2YgY2FsbCA9PT0gInVuZGVmaW5lZCIgPyAidW5kZWZpbmVkIiA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShjYWxsKSkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSA/IGNhbGwgOiBzZWxmOwp9Owp9LHsiLi4vaGVscGVycy90eXBlb2YiOjE3fV0sMTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOwoKdmFyIF9pdGVyYXRvciA9IHJlcXVpcmUoIi4uL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yIik7Cgp2YXIgX2l0ZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2l0ZXJhdG9yKTsKCnZhciBfc3ltYm9sID0gcmVxdWlyZSgiLi4vY29yZS1qcy9zeW1ib2wiKTsKCnZhciBfc3ltYm9sMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N5bWJvbCk7Cgp2YXIgX3R5cGVvZiA9IHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBfaXRlcmF0b3IyLmRlZmF1bHQgPT09ICJzeW1ib2wiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9zeW1ib2wyLmRlZmF1bHQgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKZXhwb3J0cy5kZWZhdWx0ID0gdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09ICJmdW5jdGlvbiIgJiYgX3R5cGVvZihfaXRlcmF0b3IyLmRlZmF1bHQpID09PSAic3ltYm9sIiA/IGZ1bmN0aW9uIChvYmopIHsKICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gInVuZGVmaW5lZCIgPyAidW5kZWZpbmVkIiA6IF90eXBlb2Yob2JqKTsKfSA6IGZ1bmN0aW9uIChvYmopIHsKICByZXR1cm4gb2JqICYmIHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gX3N5bWJvbDIuZGVmYXVsdCA/ICJzeW1ib2wiIDogdHlwZW9mIG9iaiA9PT0gInVuZGVmaW5lZCIgPyAidW5kZWZpbmVkIiA6IF90eXBlb2Yob2JqKTsKfTsKfSx7Ii4uL2NvcmUtanMvc3ltYm9sIjoxMSwiLi4vY29yZS1qcy9zeW1ib2wvaXRlcmF0b3IiOjEyfV0sMTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZScpOwptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5SZWdFeHAuZXNjYXBlOwp9LHsiLi4vLi4vbW9kdWxlcy9fY29yZSI6MTM3LCIuLi8uLi9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZSI6MjMzfV0sMTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgY29yZSAgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykKICAsICRKU09OID0gY29yZS5KU09OIHx8IChjb3JlLkpTT04gPSB7c3RyaW5naWZ5OiBKU09OLnN0cmluZ2lmeX0pOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMKICByZXR1cm4gJEpTT04uc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmd1bWVudHMpOwp9Owp9LHsiLi4vLi4vbW9kdWxlcy9fY29yZSI6Mzd9XSwyMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmFzc2lnbjsKfSx7Ii4uLy4uL21vZHVsZXMvX2NvcmUiOjM3LCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduIjoxMDN9XSwyMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTsKdmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0Owptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZShQLCBEKXsKICByZXR1cm4gJE9iamVjdC5jcmVhdGUoUCwgRCk7Cn07Cn0seyIuLi8uLi9tb2R1bGVzL19jb3JlIjozNywiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZSI6MTA0fV0sMjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7CnZhciAkT2JqZWN0ID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdDsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKXsKICByZXR1cm4gJE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKTsKfTsKfSx7Ii4uLy4uL21vZHVsZXMvX2NvcmUiOjM3LCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5IjoxMDV9XSwyMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7Cm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5nZXRQcm90b3R5cGVPZjsKfSx7Ii4uLy4uL21vZHVsZXMvX2NvcmUiOjM3LCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZiI6MTA2fV0sMjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuJyk7Cm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5pc0Zyb3plbjsKfSx7Ii4uLy4uL21vZHVsZXMvX2NvcmUiOjM3LCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuIjoxMDd9XSwyNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzJyk7Cm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5rZXlzOwp9LHsiLi4vLi4vbW9kdWxlcy9fY29yZSI6MzcsIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzIjoxMDh9XSwyNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7Cm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5zZXRQcm90b3R5cGVPZjsKfSx7Ii4uLy4uL21vZHVsZXMvX2NvcmUiOjM3LCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZiI6MTA5fV0sMjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7CnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpOwpyZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTsKcmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucHJvbWlzZScpOwptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvX2NvcmUnKS5Qcm9taXNlOwp9LHsiLi4vbW9kdWxlcy9fY29yZSI6MzcsIi4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmciOjExMCwiLi4vbW9kdWxlcy9lczYucHJvbWlzZSI6MTExLCIuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IiOjExMiwiLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlIjoxMTZ9XSwyODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN5bWJvbCcpOwpyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7CnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpOwpyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZScpOwptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TeW1ib2w7Cn0seyIuLi8uLi9tb2R1bGVzL19jb3JlIjozNywiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZyI6MTEwLCIuLi8uLi9tb2R1bGVzL2VzNi5zeW1ib2wiOjExMywiLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yIjoxMTQsIi4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlIjoxMTV9XSwyOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpOwpyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL193a3MtZXh0JykuZignaXRlcmF0b3InKTsKfSx7Ii4uLy4uL21vZHVsZXMvX3drcy1leHQiOjk5LCIuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IiOjExMiwiLi4vLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlIjoxMTZ9XSwzMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewogIGlmKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7CiAgcmV0dXJuIGl0Owp9Owp9LHt9XSwzMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKXsgLyogZW1wdHkgKi8gfTsKfSx7fV0sMzI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpewogIGlmKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKXsKICAgIHRocm93IFR5cGVFcnJvcihuYW1lICsgJzogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7CiAgfSByZXR1cm4gaXQ7Cn07Cn0se31dLDMzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewogIGlmKCFpc09iamVjdChpdCkpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpOwogIHJldHVybiBpdDsKfTsKfSx7Ii4vX2lzLW9iamVjdCI6NTZ9XSwzNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2YKLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXMKdmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKQogICwgdG9MZW5ndGggID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJykKICAsIHRvSW5kZXggICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oSVNfSU5DTFVERVMpewogIHJldHVybiBmdW5jdGlvbigkdGhpcywgZWwsIGZyb21JbmRleCl7CiAgICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KCR0aGlzKQogICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKQogICAgICAsIGluZGV4ICA9IHRvSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpCiAgICAgICwgdmFsdWU7CiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtCiAgICBpZihJU19JTkNMVURFUyAmJiBlbCAhPSBlbCl3aGlsZShsZW5ndGggPiBpbmRleCl7CiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTsKICAgICAgaWYodmFsdWUgIT0gdmFsdWUpcmV0dXJuIHRydWU7CiAgICAvLyBBcnJheSN0b0luZGV4IGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90CiAgICB9IGVsc2UgZm9yKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKylpZihJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKXsKICAgICAgaWYoT1tpbmRleF0gPT09IGVsKXJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwOwogICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xOwogIH07Cn07Cn0seyIuL190by1pbmRleCI6OTEsIi4vX3RvLWlvYmplY3QiOjkzLCIuL190by1sZW5ndGgiOjk0fV0sMzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKQp2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJykKICAsIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpCiAgLy8gRVMzIHdyb25nIGhlcmUKICAsIEFSRyA9IGNvZihmdW5jdGlvbigpeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnOwoKLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3IKdmFyIHRyeUdldCA9IGZ1bmN0aW9uKGl0LCBrZXkpewogIHRyeSB7CiAgICByZXR1cm4gaXRba2V5XTsKICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9Cn07Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXsKICB2YXIgTywgVCwgQjsKICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCcKICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZQogICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVAogICAgLy8gYnVpbHRpblRhZyBjYXNlCiAgICA6IEFSRyA/IGNvZihPKQogICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFjawogICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7Cn07Cn0seyIuL19jb2YiOjM2LCIuL193a3MiOjEwMH1dLDM2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXsKICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpOwp9Owp9LHt9XSwzNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7dmVyc2lvbjogJzIuNC4wJ307CmlmKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZgp9LHt9XSwzODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZwp2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCB0aGF0LCBsZW5ndGgpewogIGFGdW5jdGlvbihmbik7CiAgaWYodGhhdCA9PT0gdW5kZWZpbmVkKXJldHVybiBmbjsKICBzd2l0Y2gobGVuZ3RoKXsKICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uKGEpewogICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTsKICAgIH07CiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbihhLCBiKXsKICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7CiAgICB9OwogICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24oYSwgYiwgYyl7CiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpOwogICAgfTsKICB9CiAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pewogICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7CiAgfTsKfTsKfSx7Ii4vX2EtZnVuY3Rpb24iOjMwfV0sMzk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KQptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXsKICBpZihpdCA9PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgIiArIGl0KTsKICByZXR1cm4gaXQ7Cn07Cn0se31dLDQwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eQptb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7CiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gNzsgfX0pLmEgIT0gNzsKfSk7Cn0seyIuL19mYWlscyI6NDV9XSw0MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50CiAgLy8gaW4gb2xkIElFIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnCiAgLCBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7CiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTsKfTsKfSx7Ii4vX2dsb2JhbCI6NDcsIi4vX2lzLW9iamVjdCI6NTZ9XSw0MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXMKbW9kdWxlLmV4cG9ydHMgPSAoCiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZicKKS5zcGxpdCgnLCcpOwp9LHt9XSw0MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzCnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKQogICwgZ09QUyAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykKICAsIHBJRSAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewogIHZhciByZXN1bHQgICAgID0gZ2V0S2V5cyhpdCkKICAgICwgZ2V0U3ltYm9scyA9IGdPUFMuZjsKICBpZihnZXRTeW1ib2xzKXsKICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCkKICAgICAgLCBpc0VudW0gID0gcElFLmYKICAgICAgLCBpICAgICAgID0gMAogICAgICAsIGtleTsKICAgIHdoaWxlKHN5bWJvbHMubGVuZ3RoID4gaSlpZihpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSlyZXN1bHQucHVzaChrZXkpOwogIH0gcmV0dXJuIHJlc3VsdDsKfTsKfSx7Ii4vX29iamVjdC1nb3BzIjo3NCwiLi9fb2JqZWN0LWtleXMiOjc3LCIuL19vYmplY3QtcGllIjo3OH1dLDQ0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGdsb2JhbCAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgLCBjb3JlICAgICAgPSByZXF1aXJlKCcuL19jb3JlJykKICAsIGN0eCAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpCiAgLCBoaWRlICAgICAgPSByZXF1aXJlKCcuL19oaWRlJykKICAsIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnOwoKdmFyICRleHBvcnQgPSBmdW5jdGlvbih0eXBlLCBuYW1lLCBzb3VyY2UpewogIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GCiAgICAsIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0LkcKICAgICwgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUwogICAgLCBJU19QUk9UTyAgPSB0eXBlICYgJGV4cG9ydC5QCiAgICAsIElTX0JJTkQgICA9IHR5cGUgJiAkZXhwb3J0LkIKICAgICwgSVNfV1JBUCAgID0gdHlwZSAmICRleHBvcnQuVwogICAgLCBleHBvcnRzICAgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KQogICAgLCBleHBQcm90byAgPSBleHBvcnRzW1BST1RPVFlQRV0KICAgICwgdGFyZ2V0ICAgID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXQogICAgLCBrZXksIG93biwgb3V0OwogIGlmKElTX0dMT0JBTClzb3VyY2UgPSBuYW1lOwogIGZvcihrZXkgaW4gc291cmNlKXsKICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZQogICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDsKICAgIGlmKG93biAmJiBrZXkgaW4gZXhwb3J0cyljb250aW51ZTsKICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkCiAgICBvdXQgPSBvd24gPyB0YXJnZXRba2V5XSA6IHNvdXJjZVtrZXldOwogICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzCiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XQogICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHQKICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpCiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeQogICAgOiBJU19XUkFQICYmIHRhcmdldFtrZXldID09IG91dCA/IChmdW5jdGlvbihDKXsKICAgICAgdmFyIEYgPSBmdW5jdGlvbihhLCBiLCBjKXsKICAgICAgICBpZih0aGlzIGluc3RhbmNlb2YgQyl7CiAgICAgICAgICBzd2l0Y2goYXJndW1lbnRzLmxlbmd0aCl7CiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDOwogICAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQyhhKTsKICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEMoYSwgYik7CiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTsKICAgICAgICB9IHJldHVybiBDLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH07CiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTsKICAgICAgcmV0dXJuIEY7CiAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHMKICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDsKICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5tZXRob2RzLiVOQU1FJQogICAgaWYoSVNfUFJPVE8pewogICAgICAoZXhwb3J0cy52aXJ0dWFsIHx8IChleHBvcnRzLnZpcnR1YWwgPSB7fSkpW2tleV0gPSBvdXQ7CiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlCiAgICAgIGlmKHR5cGUgJiAkZXhwb3J0LlIgJiYgZXhwUHJvdG8gJiYgIWV4cFByb3RvW2tleV0paGlkZShleHBQcm90bywga2V5LCBvdXQpOwogICAgfQogIH0KfTsKLy8gdHlwZSBiaXRtYXAKJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWQKJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWwKJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWMKJGV4cG9ydC5QID0gODsgICAvLyBwcm90bwokZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmQKJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwCiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZQokZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWAgCm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDsKfSx7Ii4vX2NvcmUiOjM3LCIuL19jdHgiOjM4LCIuL19nbG9iYWwiOjQ3LCIuL19oaWRlIjo0OX1dLDQ1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjKXsKICB0cnkgewogICAgcmV0dXJuICEhZXhlYygpOwogIH0gY2F0Y2goZSl7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cn07Cn0se31dLDQ2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGN0eCAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JykKICAsIGNhbGwgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJykKICAsIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpCiAgLCBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCB0b0xlbmd0aCAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpCiAgLCBnZXRJdGVyRm4gICA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJykKICAsIEJSRUFLICAgICAgID0ge30KICAsIFJFVFVSTiAgICAgID0ge307CnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKXsKICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbigpeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpCiAgICAsIGYgICAgICA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKQogICAgLCBpbmRleCAgPSAwCiAgICAsIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDsKICBpZih0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7CiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yCiAgaWYoaXNBcnJheUl0ZXIoaXRlckZuKSlmb3IobGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspewogICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pOwogICAgaWYocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTilyZXR1cm4gcmVzdWx0OwogIH0gZWxzZSBmb3IoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgKXsKICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpOwogICAgaWYocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTilyZXR1cm4gcmVzdWx0OwogIH0KfTsKZXhwb3J0cy5CUkVBSyAgPSBCUkVBSzsKZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47Cn0seyIuL19hbi1vYmplY3QiOjMzLCIuL19jdHgiOjM4LCIuL19pcy1hcnJheS1pdGVyIjo1NCwiLi9faXRlci1jYWxsIjo1NywiLi9fdG8tbGVuZ3RoIjo5NCwiLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QiOjEwMX1dLDQ3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjgKdmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoCiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpOwppZih0eXBlb2YgX19nID09ICdudW1iZXInKV9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZgp9LHt9XSw0ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5Owptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBrZXkpewogIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpOwp9Owp9LHt9XSw0OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBkUCAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykKICAsIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7Cm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7CiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTsKfSA6IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7CiAgb2JqZWN0W2tleV0gPSB2YWx1ZTsKICByZXR1cm4gb2JqZWN0Owp9Owp9LHsiLi9fZGVzY3JpcHRvcnMiOjQwLCIuL19vYmplY3QtZHAiOjY5LCIuL19wcm9wZXJ0eS1kZXNjIjo4MH1dLDUwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7Cn0seyIuL19nbG9iYWwiOjQ3fV0sNTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7CiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiA3OyB9fSkuYSAhPSA3Owp9KTsKfSx7Ii4vX2Rlc2NyaXB0b3JzIjo0MCwiLi9fZG9tLWNyZWF0ZSI6NDEsIi4vX2ZhaWxzIjo0NX1dLDUyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4sIGFyZ3MsIHRoYXQpewogIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDsKICBzd2l0Y2goYXJncy5sZW5ndGgpewogICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpCiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7CiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pCiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7CiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pCiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7CiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pCiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7CiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pCiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7CiAgfSByZXR1cm4gICAgICAgICAgICAgIGZuLmFwcGx5KHRoYXQsIGFyZ3MpOwp9Owp9LHt9XSw1MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzCnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTsKbW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uKGl0KXsKICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7Cn07Cn0seyIuL19jb2YiOjM2fV0sNTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yCnZhciBJdGVyYXRvcnMgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJykKICAsIElURVJBVE9SICAgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKQogICwgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewogIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7Cn07Cn0seyIuL19pdGVyYXRvcnMiOjYyLCIuL193a3MiOjEwMH1dLDU1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudCkKdmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpOwptb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpewogIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknOwp9Owp9LHsiLi9fY29mIjozNn1dLDU2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7CiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJzsKfTsKfSx7fV0sNTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yCnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpewogIHRyeSB7CiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpOwogIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pCiAgfSBjYXRjaChlKXsKICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107CiAgICBpZihyZXQgIT09IHVuZGVmaW5lZClhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpOwogICAgdGhyb3cgZTsKICB9Cn07Cn0seyIuL19hbi1vYmplY3QiOjMzfV0sNTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBjcmVhdGUgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKQogICwgZGVzY3JpcHRvciAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJykKICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKQogICwgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTsKCi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpCnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9KTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpewogIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwge25leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCl9KTsKICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTsKfTsKfSx7Ii4vX2hpZGUiOjQ5LCIuL19vYmplY3QtY3JlYXRlIjo2OCwiLi9fcHJvcGVydHktZGVzYyI6ODAsIi4vX3NldC10by1zdHJpbmctdGFnIjo4NSwiLi9fd2tzIjoxMDB9XSw1OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIExJQlJBUlkgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpCiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCByZWRlZmluZSAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJykKICAsIGhpZGUgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpCiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpCiAgLCBJdGVyYXRvcnMgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpCiAgLCAkaXRlckNyZWF0ZSAgICA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykKICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKQogICwgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJykKICAsIElURVJBVE9SICAgICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJykKICAsIEJVR0dZICAgICAgICAgID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpIC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGAKICAsIEZGX0lURVJBVE9SICAgID0gJ0BAaXRlcmF0b3InCiAgLCBLRVlTICAgICAgICAgICA9ICdrZXlzJwogICwgVkFMVUVTICAgICAgICAgPSAndmFsdWVzJzsKCnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH07Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCl7CiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpOwogIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbihraW5kKXsKICAgIGlmKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKXJldHVybiBwcm90b1traW5kXTsKICAgIHN3aXRjaChraW5kKXsKICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9OwogICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9OwogICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9OwogIH07CiAgdmFyIFRBRyAgICAgICAgPSBOQU1FICsgJyBJdGVyYXRvcicKICAgICwgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTCiAgICAsIFZBTFVFU19CVUcgPSBmYWxzZQogICAgLCBwcm90byAgICAgID0gQmFzZS5wcm90b3R5cGUKICAgICwgJG5hdGl2ZSAgICA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXQogICAgLCAkZGVmYXVsdCAgID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCkKICAgICwgJGVudHJpZXMgICA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQKICAgICwgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmUKICAgICwgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTsKICAvLyBGaXggbmF0aXZlCiAgaWYoJGFueU5hdGl2ZSl7CiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSkpOwogICAgaWYoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpewogICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzCiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpOwogICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXMKICAgICAgaWYoIUxJQlJBUlkgJiYgIWhhcyhJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IpKWhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTsKICAgIH0KICB9CiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRgogIGlmKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUyl7CiAgICBWQUxVRVNfQlVHID0gdHJ1ZTsKICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCl7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07CiAgfQogIC8vIERlZmluZSBpdGVyYXRvcgogIGlmKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKXsKICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7CiAgfQogIC8vIFBsdWcgZm9yIGxpYnJhcnkKICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDsKICBJdGVyYXRvcnNbVEFHXSAgPSByZXR1cm5UaGlzOwogIGlmKERFRkFVTFQpewogICAgbWV0aG9kcyA9IHsKICAgICAgdmFsdWVzOiAgREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksCiAgICAgIGtleXM6ICAgIElTX1NFVCAgICAgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSwKICAgICAgZW50cmllczogJGVudHJpZXMKICAgIH07CiAgICBpZihGT1JDRUQpZm9yKGtleSBpbiBtZXRob2RzKXsKICAgICAgaWYoIShrZXkgaW4gcHJvdG8pKXJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7CiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpOwogIH0KICByZXR1cm4gbWV0aG9kczsKfTsKfSx7Ii4vX2V4cG9ydCI6NDQsIi4vX2hhcyI6NDgsIi4vX2hpZGUiOjQ5LCIuL19pdGVyLWNyZWF0ZSI6NTgsIi4vX2l0ZXJhdG9ycyI6NjIsIi4vX2xpYnJhcnkiOjY0LCIuL19vYmplY3QtZ3BvIjo3NSwiLi9fcmVkZWZpbmUiOjgyLCIuL19zZXQtdG8tc3RyaW5nLXRhZyI6ODUsIi4vX3drcyI6MTAwfV0sNjA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgSVRFUkFUT1IgICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJykKICAsIFNBRkVfQ0xPU0lORyA9IGZhbHNlOwoKdHJ5IHsKICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7CiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24oKXsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTsKICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbigpeyB0aHJvdyAyOyB9KTsKfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfQoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjLCBza2lwQ2xvc2luZyl7CiAgaWYoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpcmV0dXJuIGZhbHNlOwogIHZhciBzYWZlID0gZmFsc2U7CiAgdHJ5IHsKICAgIHZhciBhcnIgID0gWzddCiAgICAgICwgaXRlciA9IGFycltJVEVSQVRPUl0oKTsKICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uKCl7IHJldHVybiB7ZG9uZTogc2FmZSA9IHRydWV9OyB9OwogICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uKCl7IHJldHVybiBpdGVyOyB9OwogICAgZXhlYyhhcnIpOwogIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH0KICByZXR1cm4gc2FmZTsKfTsKfSx7Ii4vX3drcyI6MTAwfV0sNjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGRvbmUsIHZhbHVlKXsKICByZXR1cm4ge3ZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lfTsKfTsKfSx7fV0sNjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IHt9Owp9LHt9XSw2MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBnZXRLZXlzICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpCiAgLCB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBlbCl7CiAgdmFyIE8gICAgICA9IHRvSU9iamVjdChvYmplY3QpCiAgICAsIGtleXMgICA9IGdldEtleXMoTykKICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGgKICAgICwgaW5kZXggID0gMAogICAgLCBrZXk7CiAgd2hpbGUobGVuZ3RoID4gaW5kZXgpaWYoT1trZXkgPSBrZXlzW2luZGV4KytdXSA9PT0gZWwpcmV0dXJuIGtleTsKfTsKfSx7Ii4vX29iamVjdC1rZXlzIjo3NywiLi9fdG8taW9iamVjdCI6OTN9XSw2NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gdHJ1ZTsKfSx7fV0sNjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgTUVUQSAgICAgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpCiAgLCBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBoYXMgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpCiAgLCBzZXREZXNjICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYKICAsIGlkICAgICAgID0gMDsKdmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24oKXsKICByZXR1cm4gdHJ1ZTsKfTsKdmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7CiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTsKfSk7CnZhciBzZXRNZXRhID0gZnVuY3Rpb24oaXQpewogIHNldERlc2MoaXQsIE1FVEEsIHt2YWx1ZTogewogICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElECiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEcwogIH19KTsKfTsKdmFyIGZhc3RLZXkgPSBmdW5jdGlvbihpdCwgY3JlYXRlKXsKICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4CiAgaWYoIWlzT2JqZWN0KGl0KSlyZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0OwogIGlmKCFoYXMoaXQsIE1FVEEpKXsKICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0CiAgICBpZighaXNFeHRlbnNpYmxlKGl0KSlyZXR1cm4gJ0YnOwogICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGEKICAgIGlmKCFjcmVhdGUpcmV0dXJuICdFJzsKICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhCiAgICBzZXRNZXRhKGl0KTsKICAvLyByZXR1cm4gb2JqZWN0IElECiAgfSByZXR1cm4gaXRbTUVUQV0uaTsKfTsKdmFyIGdldFdlYWsgPSBmdW5jdGlvbihpdCwgY3JlYXRlKXsKICBpZighaGFzKGl0LCBNRVRBKSl7CiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdAogICAgaWYoIWlzRXh0ZW5zaWJsZShpdCkpcmV0dXJuIHRydWU7CiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YQogICAgaWYoIWNyZWF0ZSlyZXR1cm4gZmFsc2U7CiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YQogICAgc2V0TWV0YShpdCk7CiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHMKICB9IHJldHVybiBpdFtNRVRBXS53Owp9OwovLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmcKdmFyIG9uRnJlZXplID0gZnVuY3Rpb24oaXQpewogIGlmKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSlzZXRNZXRhKGl0KTsKICByZXR1cm4gaXQ7Cn07CnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7CiAgS0VZOiAgICAgIE1FVEEsCiAgTkVFRDogICAgIGZhbHNlLAogIGZhc3RLZXk6ICBmYXN0S2V5LAogIGdldFdlYWs6ICBnZXRXZWFrLAogIG9uRnJlZXplOiBvbkZyZWV6ZQp9Owp9LHsiLi9fZmFpbHMiOjQ1LCIuL19oYXMiOjQ4LCIuL19pcy1vYmplY3QiOjU2LCIuL19vYmplY3QtZHAiOjY5LCIuL191aWQiOjk3fV0sNjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgZ2xvYmFsICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykKICAsIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQKICAsIE9ic2VydmVyICA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyCiAgLCBwcm9jZXNzICAgPSBnbG9iYWwucHJvY2VzcwogICwgUHJvbWlzZSAgID0gZ2xvYmFsLlByb21pc2UKICAsIGlzTm9kZSAgICA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJzsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKXsKICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5OwoKICB2YXIgZmx1c2ggPSBmdW5jdGlvbigpewogICAgdmFyIHBhcmVudCwgZm47CiAgICBpZihpc05vZGUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSlwYXJlbnQuZXhpdCgpOwogICAgd2hpbGUoaGVhZCl7CiAgICAgIGZuICAgPSBoZWFkLmZuOwogICAgICBoZWFkID0gaGVhZC5uZXh0OwogICAgICB0cnkgewogICAgICAgIGZuKCk7CiAgICAgIH0gY2F0Y2goZSl7CiAgICAgICAgaWYoaGVhZClub3RpZnkoKTsKICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7CiAgICAgICAgdGhyb3cgZTsKICAgICAgfQogICAgfSBsYXN0ID0gdW5kZWZpbmVkOwogICAgaWYocGFyZW50KXBhcmVudC5lbnRlcigpOwogIH07CgogIC8vIE5vZGUuanMKICBpZihpc05vZGUpewogICAgbm90aWZ5ID0gZnVuY3Rpb24oKXsKICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7CiAgICB9OwogIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlcgogIH0gZWxzZSBpZihPYnNlcnZlcil7CiAgICB2YXIgdG9nZ2xlID0gdHJ1ZQogICAgICAsIG5vZGUgICA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTsKICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7Y2hhcmFjdGVyRGF0YTogdHJ1ZX0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldwogICAgbm90aWZ5ID0gZnVuY3Rpb24oKXsKICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTsKICAgIH07CiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2UKICB9IGVsc2UgaWYoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpewogICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTsKICAgIG5vdGlmeSA9IGZ1bmN0aW9uKCl7CiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7CiAgICB9OwogIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246CiAgLy8gLSBzZXRJbW1lZGlhdGUKICAvLyAtIE1lc3NhZ2VDaGFubmVsCiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZwogIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlCiAgLy8gLSBzZXRUaW1lb3V0CiAgfSBlbHNlIHsKICAgIG5vdGlmeSA9IGZ1bmN0aW9uKCl7CiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbCkKICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7CiAgICB9OwogIH0KCiAgcmV0dXJuIGZ1bmN0aW9uKGZuKXsKICAgIHZhciB0YXNrID0ge2ZuOiBmbiwgbmV4dDogdW5kZWZpbmVkfTsKICAgIGlmKGxhc3QpbGFzdC5uZXh0ID0gdGFzazsKICAgIGlmKCFoZWFkKXsKICAgICAgaGVhZCA9IHRhc2s7CiAgICAgIG5vdGlmeSgpOwogICAgfSBsYXN0ID0gdGFzazsKICB9Owp9Owp9LHsiLi9fY29mIjozNiwiLi9fZ2xvYmFsIjo0NywiLi9fdGFzayI6OTB9XSw2NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKQp2YXIgZ2V0S2V5cyAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpCiAgLCBnT1BTICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykKICAsIHBJRSAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpCiAgLCB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpCiAgLCBJT2JqZWN0ICA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKQogICwgJGFzc2lnbiAgPSBPYmplY3QuYXNzaWduOwoKLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpCm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpewogIHZhciBBID0ge30KICAgICwgQiA9IHt9CiAgICAsIFMgPSBTeW1ib2woKQogICAgLCBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JzsKICBBW1NdID0gNzsKICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uKGspeyBCW2tdID0gazsgfSk7CiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7Cn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFycwogIHZhciBUICAgICA9IHRvT2JqZWN0KHRhcmdldCkKICAgICwgYUxlbiAgPSBhcmd1bWVudHMubGVuZ3RoCiAgICAsIGluZGV4ID0gMQogICAgLCBnZXRTeW1ib2xzID0gZ09QUy5mCiAgICAsIGlzRW51bSAgICAgPSBwSUUuZjsKICB3aGlsZShhTGVuID4gaW5kZXgpewogICAgdmFyIFMgICAgICA9IElPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKQogICAgICAsIGtleXMgICA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUykKICAgICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aAogICAgICAsIGogICAgICA9IDAKICAgICAgLCBrZXk7CiAgICB3aGlsZShsZW5ndGggPiBqKWlmKGlzRW51bS5jYWxsKFMsIGtleSA9IGtleXNbaisrXSkpVFtrZXldID0gU1trZXldOwogIH0gcmV0dXJuIFQ7Cn0gOiAkYXNzaWduOwp9LHsiLi9fZmFpbHMiOjQ1LCIuL19pb2JqZWN0Ijo1MywiLi9fb2JqZWN0LWdvcHMiOjc0LCIuL19vYmplY3Qta2V5cyI6NzcsIi4vX29iamVjdC1waWUiOjc4LCIuL190by1vYmplY3QiOjk1fV0sNjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSkKdmFyIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIGRQcyAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpCiAgLCBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKQogICwgSUVfUFJPVE8gICAgPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJykKICAsIEVtcHR5ICAgICAgID0gZnVuY3Rpb24oKXsgLyogZW1wdHkgKi8gfQogICwgUFJPVE9UWVBFICAgPSAncHJvdG90eXBlJzsKCi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGUKdmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbigpewogIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnCiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJykKICAgICwgaSAgICAgID0gZW51bUJ1Z0tleXMubGVuZ3RoCiAgICAsIGx0ICAgICA9ICc8JwogICAgLCBndCAgICAgPSAnPicKICAgICwgaWZyYW1lRG9jdW1lbnQ7CiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7CiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybAogIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7CiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpOwogIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7CiAgaWZyYW1lRG9jdW1lbnQub3BlbigpOwogIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTsKICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpOwogIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GOwogIHdoaWxlKGktLSlkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTsKICByZXR1cm4gY3JlYXRlRGljdCgpOwp9OwoKbW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKXsKICB2YXIgcmVzdWx0OwogIGlmKE8gIT09IG51bGwpewogICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pOwogICAgcmVzdWx0ID0gbmV3IEVtcHR5OwogICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7CiAgICAvLyBhZGQgIl9fcHJvdG9fXyIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbAogICAgcmVzdWx0W0lFX1BST1RPXSA9IE87CiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTsKICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7Cn07Cgp9LHsiLi9fYW4tb2JqZWN0IjozMywiLi9fZG9tLWNyZWF0ZSI6NDEsIi4vX2VudW0tYnVnLWtleXMiOjQyLCIuL19odG1sIjo1MCwiLi9fb2JqZWN0LWRwcyI6NzAsIi4vX3NoYXJlZC1rZXkiOjg2fV0sNjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgYW5PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpCiAgLCB0b1ByaW1pdGl2ZSAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpCiAgLCBkUCAgICAgICAgICAgICA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTsKCmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKXsKICBhbk9iamVjdChPKTsKICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7CiAgYW5PYmplY3QoQXR0cmlidXRlcyk7CiAgaWYoSUU4X0RPTV9ERUZJTkUpdHJ5IHsKICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTsKICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9CiAgaWYoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKXRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7CiAgaWYoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKU9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlOwogIHJldHVybiBPOwp9Owp9LHsiLi9fYW4tb2JqZWN0IjozMywiLi9fZGVzY3JpcHRvcnMiOjQwLCIuL19pZTgtZG9tLWRlZmluZSI6NTEsIi4vX3RvLXByaW1pdGl2ZSI6OTZ9XSw3MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBkUCAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpCiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCBnZXRLZXlzICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7Cgptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcyl7CiAgYW5PYmplY3QoTyk7CiAgdmFyIGtleXMgICA9IGdldEtleXMoUHJvcGVydGllcykKICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGgKICAgICwgaSA9IDAKICAgICwgUDsKICB3aGlsZShsZW5ndGggPiBpKWRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7CiAgcmV0dXJuIE87Cn07Cn0seyIuL19hbi1vYmplY3QiOjMzLCIuL19kZXNjcmlwdG9ycyI6NDAsIi4vX29iamVjdC1kcCI6NjksIi4vX29iamVjdC1rZXlzIjo3N31dLDcxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIHBJRSAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpCiAgLCBjcmVhdGVEZXNjICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKQogICwgdG9JT2JqZWN0ICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JykKICAsIHRvUHJpbWl0aXZlICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJykKICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJykKICAsIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKQogICwgZ09QRCAgICAgICAgICAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOwoKZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCl7CiAgTyA9IHRvSU9iamVjdChPKTsKICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7CiAgaWYoSUU4X0RPTV9ERUZJTkUpdHJ5IHsKICAgIHJldHVybiBnT1BEKE8sIFApOwogIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH0KICBpZihoYXMoTywgUCkpcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pOwp9Owp9LHsiLi9fZGVzY3JpcHRvcnMiOjQwLCIuL19oYXMiOjQ4LCIuL19pZTgtZG9tLWRlZmluZSI6NTEsIi4vX29iamVjdC1waWUiOjc4LCIuL19wcm9wZXJ0eS1kZXNjIjo4MCwiLi9fdG8taW9iamVjdCI6OTMsIi4vX3RvLXByaW1pdGl2ZSI6OTZ9XSw3MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3cKdmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKQogICwgZ09QTiAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mCiAgLCB0b1N0cmluZyAgPSB7fS50b1N0cmluZzsKCnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzCiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107Cgp2YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbihpdCl7CiAgdHJ5IHsKICAgIHJldHVybiBnT1BOKGl0KTsKICB9IGNhdGNoKGUpewogICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7CiAgfQp9OwoKbW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpewogIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7Cn07Cgp9LHsiLi9fb2JqZWN0LWdvcG4iOjczLCIuL190by1pb2JqZWN0Ijo5M31dLDczOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKQp2YXIgJGtleXMgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJykKICAsIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7CgpleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pewogIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTsKfTsKfSx7Ii4vX2VudW0tYnVnLWtleXMiOjQyLCIuL19vYmplY3Qta2V5cy1pbnRlcm5hbCI6NzZ9XSw3NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7Cn0se31dLDc1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTykKdmFyIGhhcyAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJykKICAsIHRvT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JykKICAsIElFX1BST1RPICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpCiAgLCBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7Cgptb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbihPKXsKICBPID0gdG9PYmplY3QoTyk7CiAgaWYoaGFzKE8sIElFX1BST1RPKSlyZXR1cm4gT1tJRV9QUk9UT107CiAgaWYodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcil7CiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7CiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDsKfTsKfSx7Ii4vX2hhcyI6NDgsIi4vX3NoYXJlZC1rZXkiOjg2LCIuL190by1vYmplY3QiOjk1fV0sNzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgaGFzICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJykKICAsIHRvSU9iamVjdCAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKQogICwgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSkKICAsIElFX1BST1RPICAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBuYW1lcyl7CiAgdmFyIE8gICAgICA9IHRvSU9iamVjdChvYmplY3QpCiAgICAsIGkgICAgICA9IDAKICAgICwgcmVzdWx0ID0gW10KICAgICwga2V5OwogIGZvcihrZXkgaW4gTylpZihrZXkgIT0gSUVfUFJPVE8paGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTsKICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzCiAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSlpZihoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpewogICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTsKICB9CiAgcmV0dXJuIHJlc3VsdDsKfTsKfSx7Ii4vX2FycmF5LWluY2x1ZGVzIjozNCwiLi9faGFzIjo0OCwiLi9fc2hhcmVkLWtleSI6ODYsIi4vX3RvLWlvYmplY3QiOjkzfV0sNzc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTykKdmFyICRrZXlzICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKQogICwgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7Cgptb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTyl7CiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTsKfTsKfSx7Ii4vX2VudW0tYnVnLWtleXMiOjQyLCIuL19vYmplY3Qta2V5cy1pbnRlcm5hbCI6NzZ9XSw3ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlOwp9LHt9XSw3OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlcwp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBjb3JlICAgID0gcmVxdWlyZSgnLi9fY29yZScpCiAgLCBmYWlscyAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVksIGV4ZWMpewogIHZhciBmbiAgPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV0KICAgICwgZXhwID0ge307CiAgZXhwW0tFWV0gPSBleGVjKGZuKTsKICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uKCl7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7Cn07Cn0seyIuL19jb3JlIjozNywiLi9fZXhwb3J0Ijo0NCwiLi9fZmFpbHMiOjQ1fV0sODA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGJpdG1hcCwgdmFsdWUpewogIHJldHVybiB7CiAgICBlbnVtZXJhYmxlICA6ICEoYml0bWFwICYgMSksCiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksCiAgICB3cml0YWJsZSAgICA6ICEoYml0bWFwICYgNCksCiAgICB2YWx1ZSAgICAgICA6IHZhbHVlCiAgfTsKfTsKfSx7fV0sODE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0YXJnZXQsIHNyYywgc2FmZSl7CiAgZm9yKHZhciBrZXkgaW4gc3JjKXsKICAgIGlmKHNhZmUgJiYgdGFyZ2V0W2tleV0pdGFyZ2V0W2tleV0gPSBzcmNba2V5XTsKICAgIGVsc2UgaGlkZSh0YXJnZXQsIGtleSwgc3JjW2tleV0pOwogIH0gcmV0dXJuIHRhcmdldDsKfTsKfSx7Ii4vX2hpZGUiOjQ5fV0sODI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2hpZGUnKTsKfSx7Ii4vX2hpZGUiOjQ5fV0sODM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy4KLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi8KdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JykKICAsIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7CnZhciBjaGVjayA9IGZ1bmN0aW9uKE8sIHByb3RvKXsKICBhbk9iamVjdChPKTsKICBpZighaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKXRocm93IFR5cGVFcnJvcihwcm90byArICI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhIik7Cn07Cm1vZHVsZS5leHBvcnRzID0gewogIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmUKICAgIGZ1bmN0aW9uKHRlc3QsIGJ1Z2d5LCBzZXQpewogICAgICB0cnkgewogICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTsKICAgICAgICBzZXQodGVzdCwgW10pOwogICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpOwogICAgICB9IGNhdGNoKGUpeyBidWdneSA9IHRydWU7IH0KICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKXsKICAgICAgICBjaGVjayhPLCBwcm90byk7CiAgICAgICAgaWYoYnVnZ3kpTy5fX3Byb3RvX18gPSBwcm90bzsKICAgICAgICBlbHNlIHNldChPLCBwcm90byk7CiAgICAgICAgcmV0dXJuIE87CiAgICAgIH07CiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLAogIGNoZWNrOiBjaGVjawp9Owp9LHsiLi9fYW4tb2JqZWN0IjozMywiLi9fY3R4IjozOCwiLi9faXMtb2JqZWN0Ijo1NiwiLi9fb2JqZWN0LWdvcGQiOjcxfV0sODQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBnbG9iYWwgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgLCBjb3JlICAgICAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKQogICwgZFAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKQogICwgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpCiAgLCBTUEVDSUVTICAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSl7CiAgdmFyIEMgPSB0eXBlb2YgY29yZVtLRVldID09ICdmdW5jdGlvbicgPyBjb3JlW0tFWV0gOiBnbG9iYWxbS0VZXTsKICBpZihERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKWRQLmYoQywgU1BFQ0lFUywgewogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfQogIH0pOwp9Owp9LHsiLi9fY29yZSI6MzcsIi4vX2Rlc2NyaXB0b3JzIjo0MCwiLi9fZ2xvYmFsIjo0NywiLi9fb2JqZWN0LWRwIjo2OSwiLi9fd2tzIjoxMDB9XSw4NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mCiAgLCBoYXMgPSByZXF1aXJlKCcuL19oYXMnKQogICwgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCB0YWcsIHN0YXQpewogIGlmKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpZGVmKGl0LCBUQUcsIHtjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWd9KTsKfTsKfSx7Ii4vX2hhcyI6NDgsIi4vX29iamVjdC1kcCI6NjksIi4vX3drcyI6MTAwfV0sODY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKQogICwgdWlkICAgID0gcmVxdWlyZSgnLi9fdWlkJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXsKICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpOwp9Owp9LHsiLi9fc2hhcmVkIjo4NywiLi9fdWlkIjo5N31dLDg3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgLCBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJwogICwgc3RvcmUgID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7CiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB7fSk7Cn07Cn0seyIuL19nbG9iYWwiOjQ3fV0sODg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcikKdmFyIGFuT2JqZWN0ICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJykKICAsIFNQRUNJRVMgICA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTywgRCl7CiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvciwgUzsKICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7Cn07Cn0seyIuL19hLWZ1bmN0aW9uIjozMCwiLi9fYW4tb2JqZWN0IjozMywiLi9fd2tzIjoxMDB9XSw4OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJykKICAsIGRlZmluZWQgICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTsKLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0Ci8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdAptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFRPX1NUUklORyl7CiAgcmV0dXJuIGZ1bmN0aW9uKHRoYXQsIHBvcyl7CiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKQogICAgICAsIGkgPSB0b0ludGVnZXIocG9zKQogICAgICAsIGwgPSBzLmxlbmd0aAogICAgICAsIGEsIGI7CiAgICBpZihpIDwgMCB8fCBpID49IGwpcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkOwogICAgYSA9IHMuY2hhckNvZGVBdChpKTsKICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmCiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhCiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwOwogIH07Cn07Cn0seyIuL19kZWZpbmVkIjozOSwiLi9fdG8taW50ZWdlciI6OTJ9XSw5MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBjdHggICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKQogICwgaW52b2tlICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faW52b2tlJykKICAsIGh0bWwgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2h0bWwnKQogICwgY2VsICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpCiAgLCBnbG9iYWwgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgcHJvY2VzcyAgICAgICAgICAgID0gZ2xvYmFsLnByb2Nlc3MKICAsIHNldFRhc2sgICAgICAgICAgICA9IGdsb2JhbC5zZXRJbW1lZGlhdGUKICAsIGNsZWFyVGFzayAgICAgICAgICA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZQogICwgTWVzc2FnZUNoYW5uZWwgICAgID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsCiAgLCBjb3VudGVyICAgICAgICAgICAgPSAwCiAgLCBxdWV1ZSAgICAgICAgICAgICAgPSB7fQogICwgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZScKICAsIGRlZmVyLCBjaGFubmVsLCBwb3J0Owp2YXIgcnVuID0gZnVuY3Rpb24oKXsKICB2YXIgaWQgPSArdGhpczsKICBpZihxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpewogICAgdmFyIGZuID0gcXVldWVbaWRdOwogICAgZGVsZXRlIHF1ZXVlW2lkXTsKICAgIGZuKCk7CiAgfQp9Owp2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCl7CiAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7Cn07Ci8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZToKaWYoIXNldFRhc2sgfHwgIWNsZWFyVGFzayl7CiAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbil7CiAgICB2YXIgYXJncyA9IFtdLCBpID0gMTsKICAgIHdoaWxlKGFyZ3VtZW50cy5sZW5ndGggPiBpKWFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7CiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24oKXsKICAgICAgaW52b2tlKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpOwogICAgfTsKICAgIGRlZmVyKGNvdW50ZXIpOwogICAgcmV0dXJuIGNvdW50ZXI7CiAgfTsKICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCl7CiAgICBkZWxldGUgcXVldWVbaWRdOwogIH07CiAgLy8gTm9kZS5qcyAwLjgtCiAgaWYocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKXsKICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpewogICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7CiAgICB9OwogIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnMKICB9IGVsc2UgaWYoTWVzc2FnZUNoYW5uZWwpewogICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbDsKICAgIHBvcnQgICAgPSBjaGFubmVsLnBvcnQyOwogICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjsKICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpOwogIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2VycwogIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnCiAgfSBlbHNlIGlmKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cyl7CiAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXsKICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsICcqJyk7CiAgICB9OwogICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpOwogIC8vIElFOC0KICB9IGVsc2UgaWYoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpewogICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7CiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uKCl7CiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTsKICAgICAgICBydW4uY2FsbChpZCk7CiAgICAgIH07CiAgICB9OwogIC8vIFJlc3Qgb2xkIGJyb3dzZXJzCiAgfSBlbHNlIHsKICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpewogICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7CiAgICB9OwogIH0KfQptb2R1bGUuZXhwb3J0cyA9IHsKICBzZXQ6ICAgc2V0VGFzaywKICBjbGVhcjogY2xlYXJUYXNrCn07Cn0seyIuL19jb2YiOjM2LCIuL19jdHgiOjM4LCIuL19kb20tY3JlYXRlIjo0MSwiLi9fZ2xvYmFsIjo0NywiLi9faHRtbCI6NTAsIi4vX2ludm9rZSI6NTJ9XSw5MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJykKICAsIG1heCAgICAgICA9IE1hdGgubWF4CiAgLCBtaW4gICAgICAgPSBNYXRoLm1pbjsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpbmRleCwgbGVuZ3RoKXsKICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7CiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7Cn07Cn0seyIuL190by1pbnRlZ2VyIjo5Mn1dLDkyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gNy4xLjQgVG9JbnRlZ2VyCnZhciBjZWlsICA9IE1hdGguY2VpbAogICwgZmxvb3IgPSBNYXRoLmZsb29yOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXsKICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTsKfTsKfSx7fV0sOTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3MKdmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0JykKICAsIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewogIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTsKfTsKfSx7Ii4vX2RlZmluZWQiOjM5LCIuL19pb2JqZWN0Ijo1M31dLDk0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gNy4xLjE1IFRvTGVuZ3RoCnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJykKICAsIG1pbiAgICAgICA9IE1hdGgubWluOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXsKICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MQp9Owp9LHsiLi9fdG8taW50ZWdlciI6OTJ9XSw5NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudCkKdmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewogIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpOwp9Owp9LHsiLi9fZGVmaW5lZCI6Mzl9XSw5NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKQp2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTsKLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2UKLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmcKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgUyl7CiAgaWYoIWlzT2JqZWN0KGl0KSlyZXR1cm4gaXQ7CiAgdmFyIGZuLCB2YWw7CiAgaWYoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsOwogIGlmKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDsKICBpZighUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsOwogIHRocm93IFR5cGVFcnJvcigiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlIik7Cn07Cn0seyIuL19pcy1vYmplY3QiOjU2fV0sOTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgaWQgPSAwCiAgLCBweCA9IE1hdGgucmFuZG9tKCk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXsKICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpOwp9Owp9LHt9XSw5ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBnbG9iYWwgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgLCBjb3JlICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKQogICwgTElCUkFSWSAgICAgICAgPSByZXF1aXJlKCcuL19saWJyYXJ5JykKICAsIHdrc0V4dCAgICAgICAgID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpCiAgLCBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obmFtZSl7CiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTsKICBpZihuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKWRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHt2YWx1ZTogd2tzRXh0LmYobmFtZSl9KTsKfTsKfSx7Ii4vX2NvcmUiOjM3LCIuL19nbG9iYWwiOjQ3LCIuL19saWJyYXJ5Ijo2NCwiLi9fb2JqZWN0LWRwIjo2OSwiLi9fd2tzLWV4dCI6OTl9XSw5OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpOwp9LHsiLi9fd2tzIjoxMDB9XSwxMDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgc3RvcmUgICAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKQogICwgdWlkICAgICAgICA9IHJlcXVpcmUoJy4vX3VpZCcpCiAgLCBTeW1ib2wgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sCiAgLCBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nOwoKdmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihuYW1lKXsKICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID0KICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7Cn07CgokZXhwb3J0cy5zdG9yZSA9IHN0b3JlOwp9LHsiLi9fZ2xvYmFsIjo0NywiLi9fc2hhcmVkIjo4NywiLi9fdWlkIjo5N31dLDEwMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBjbGFzc29mICAgPSByZXF1aXJlKCcuL19jbGFzc29mJykKICAsIElURVJBVE9SICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpCiAgLCBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbihpdCl7CiAgaWYoaXQgIT0gdW5kZWZpbmVkKXJldHVybiBpdFtJVEVSQVRPUl0KICAgIHx8IGl0WydAQGl0ZXJhdG9yJ10KICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07Cn07Cn0seyIuL19jbGFzc29mIjozNSwiLi9fY29yZSI6MzcsIi4vX2l0ZXJhdG9ycyI6NjIsIi4vX3drcyI6MTAwfV0sMTAyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpCiAgLCBzdGVwICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJykKICAsIEl0ZXJhdG9ycyAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKQogICwgdG9JT2JqZWN0ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTsKCi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKCkKLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKCkKLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKQovLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKCkKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbihpdGVyYXRlZCwga2luZCl7CiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldAogIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4CiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmQKLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpCn0sIGZ1bmN0aW9uKCl7CiAgdmFyIE8gICAgID0gdGhpcy5fdAogICAgLCBraW5kICA9IHRoaXMuX2sKICAgICwgaW5kZXggPSB0aGlzLl9pKys7CiAgaWYoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpewogICAgdGhpcy5fdCA9IHVuZGVmaW5lZDsKICAgIHJldHVybiBzdGVwKDEpOwogIH0KICBpZihraW5kID09ICdrZXlzJyAgKXJldHVybiBzdGVwKDAsIGluZGV4KTsKICBpZihraW5kID09ICd2YWx1ZXMnKXJldHVybiBzdGVwKDAsIE9baW5kZXhdKTsKICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7Cn0sICd2YWx1ZXMnKTsKCi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNykKSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTsKCmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTsKYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7CmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTsKfSx7Ii4vX2FkZC10by11bnNjb3BhYmxlcyI6MzEsIi4vX2l0ZXItZGVmaW5lIjo1OSwiLi9faXRlci1zdGVwIjo2MSwiLi9faXRlcmF0b3JzIjo2MiwiLi9fdG8taW9iamVjdCI6OTN9XSwxMDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7YXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJyl9KTsKfSx7Ii4vX2V4cG9ydCI6NDQsIi4vX29iamVjdC1hc3NpZ24iOjY3fV0sMTA0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQovLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSkKJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7Y3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyl9KTsKfSx7Ii4vX2V4cG9ydCI6NDQsIi4vX29iamVjdC1jcmVhdGUiOjY4fV0sMTA1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHtkZWZpbmVQcm9wZXJ0eTogcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZn0pOwp9LHsiLi9fZGVzY3JpcHRvcnMiOjQwLCIuL19leHBvcnQiOjQ0LCIuL19vYmplY3QtZHAiOjY5fV0sMTA2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pCnZhciB0b09iamVjdCAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKQogICwgJGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpOwoKcmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uKCl7CiAgcmV0dXJuIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KXsKICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTsKICB9Owp9KTsKfSx7Ii4vX29iamVjdC1ncG8iOjc1LCIuL19vYmplY3Qtc2FwIjo3OSwiLi9fdG8tb2JqZWN0Ijo5NX1dLDEwNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjEuMi4xMiBPYmplY3QuaXNGcm96ZW4oTykKdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7CgpyZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRnJvemVuJywgZnVuY3Rpb24oJGlzRnJvemVuKXsKICByZXR1cm4gZnVuY3Rpb24gaXNGcm96ZW4oaXQpewogICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0Zyb3plbiA/ICRpc0Zyb3plbihpdCkgOiBmYWxzZSA6IHRydWU7CiAgfTsKfSk7Cn0seyIuL19pcy1vYmplY3QiOjU2LCIuL19vYmplY3Qtc2FwIjo3OX1dLDEwODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKQp2YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKQogICwgJGtleXMgICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpOwoKcmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdrZXlzJywgZnVuY3Rpb24oKXsKICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCl7CiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTsKICB9Owp9KTsKfSx7Ii4vX29iamVjdC1rZXlzIjo3NywiLi9fb2JqZWN0LXNhcCI6NzksIi4vX3RvLW9iamVjdCI6OTV9XSwxMDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwokZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0fSk7Cn0seyIuL19leHBvcnQiOjQ0LCIuL19zZXQtcHJvdG8iOjgzfV0sMTEwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKCn0se31dLDExMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIExJQlJBUlkgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKQogICwgZ2xvYmFsICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykKICAsIGN0eCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpCiAgLCBjbGFzc29mICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jbGFzc29mJykKICAsICRleHBvcnQgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBpc09iamVjdCAgICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICwgYUZ1bmN0aW9uICAgICAgICAgID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpCiAgLCBhbkluc3RhbmNlICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpCiAgLCBmb3JPZiAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKQogICwgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpCiAgLCB0YXNrICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190YXNrJykuc2V0CiAgLCBtaWNyb3Rhc2sgICAgICAgICAgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpCiAgLCBQUk9NSVNFICAgICAgICAgICAgPSAnUHJvbWlzZScKICAsIFR5cGVFcnJvciAgICAgICAgICA9IGdsb2JhbC5UeXBlRXJyb3IKICAsIHByb2Nlc3MgICAgICAgICAgICA9IGdsb2JhbC5wcm9jZXNzCiAgLCAkUHJvbWlzZSAgICAgICAgICAgPSBnbG9iYWxbUFJPTUlTRV0KICAsIHByb2Nlc3MgICAgICAgICAgICA9IGdsb2JhbC5wcm9jZXNzCiAgLCBpc05vZGUgICAgICAgICAgICAgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJwogICwgZW1wdHkgICAgICAgICAgICAgID0gZnVuY3Rpb24oKXsgLyogZW1wdHkgKi8gfQogICwgSW50ZXJuYWwsIEdlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjsKCnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbigpewogIHRyeSB7CiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnQKICAgIHZhciBwcm9taXNlICAgICA9ICRQcm9taXNlLnJlc29sdmUoMSkKICAgICAgLCBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyldID0gZnVuY3Rpb24oZXhlYyl7IGV4ZWMoZW1wdHksIGVtcHR5KTsgfTsKICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3QKICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJykgJiYgcHJvbWlzZS50aGVuKGVtcHR5KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlOwogIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH0KfSgpOwoKLy8gaGVscGVycwp2YXIgc2FtZUNvbnN0cnVjdG9yID0gZnVuY3Rpb24oYSwgYil7CiAgLy8gd2l0aCBsaWJyYXJ5IHdyYXBwZXIgc3BlY2lhbCBjYXNlCiAgcmV0dXJuIGEgPT09IGIgfHwgYSA9PT0gJFByb21pc2UgJiYgYiA9PT0gV3JhcHBlcjsKfTsKdmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbihpdCl7CiAgdmFyIHRoZW47CiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlOwp9Owp2YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbihDKXsKICByZXR1cm4gc2FtZUNvbnN0cnVjdG9yKCRQcm9taXNlLCBDKQogICAgPyBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQykKICAgIDogbmV3IEdlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTsKfTsKdmFyIFByb21pc2VDYXBhYmlsaXR5ID0gR2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24oQyl7CiAgdmFyIHJlc29sdmUsIHJlamVjdDsKICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbigkJHJlc29sdmUsICQkcmVqZWN0KXsKICAgIGlmKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCl0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7CiAgICByZXNvbHZlID0gJCRyZXNvbHZlOwogICAgcmVqZWN0ICA9ICQkcmVqZWN0OwogIH0pOwogIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTsKICB0aGlzLnJlamVjdCAgPSBhRnVuY3Rpb24ocmVqZWN0KTsKfTsKdmFyIHBlcmZvcm0gPSBmdW5jdGlvbihleGVjKXsKICB0cnkgewogICAgZXhlYygpOwogIH0gY2F0Y2goZSl7CiAgICByZXR1cm4ge2Vycm9yOiBlfTsKICB9Cn07CnZhciBub3RpZnkgPSBmdW5jdGlvbihwcm9taXNlLCBpc1JlamVjdCl7CiAgaWYocHJvbWlzZS5fbilyZXR1cm47CiAgcHJvbWlzZS5fbiA9IHRydWU7CiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYzsKICBtaWNyb3Rhc2soZnVuY3Rpb24oKXsKICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3YKICAgICAgLCBvayAgICA9IHByb21pc2UuX3MgPT0gMQogICAgICAsIGkgICAgID0gMDsKICAgIHZhciBydW4gPSBmdW5jdGlvbihyZWFjdGlvbil7CiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWwKICAgICAgICAsIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlCiAgICAgICAgLCByZWplY3QgID0gcmVhY3Rpb24ucmVqZWN0CiAgICAgICAgLCBkb21haW4gID0gcmVhY3Rpb24uZG9tYWluCiAgICAgICAgLCByZXN1bHQsIHRoZW47CiAgICAgIHRyeSB7CiAgICAgICAgaWYoaGFuZGxlcil7CiAgICAgICAgICBpZighb2spewogICAgICAgICAgICBpZihwcm9taXNlLl9oID09IDIpb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7CiAgICAgICAgICAgIHByb21pc2UuX2ggPSAxOwogICAgICAgICAgfQogICAgICAgICAgaWYoaGFuZGxlciA9PT0gdHJ1ZSlyZXN1bHQgPSB2YWx1ZTsKICAgICAgICAgIGVsc2UgewogICAgICAgICAgICBpZihkb21haW4pZG9tYWluLmVudGVyKCk7CiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOwogICAgICAgICAgICBpZihkb21haW4pZG9tYWluLmV4aXQoKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSl7CiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7CiAgICAgICAgICB9IGVsc2UgaWYodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSl7CiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7CiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpOwogICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpOwogICAgICB9IGNhdGNoKGUpewogICAgICAgIHJlamVjdChlKTsKICAgICAgfQogICAgfTsKICAgIHdoaWxlKGNoYWluLmxlbmd0aCA+IGkpcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaAogICAgcHJvbWlzZS5fYyA9IFtdOwogICAgcHJvbWlzZS5fbiA9IGZhbHNlOwogICAgaWYoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpb25VbmhhbmRsZWQocHJvbWlzZSk7CiAgfSk7Cn07CnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uKHByb21pc2UpewogIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uKCl7CiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92CiAgICAgICwgYWJydXB0LCBoYW5kbGVyLCBjb25zb2xlOwogICAgaWYoaXNVbmhhbmRsZWQocHJvbWlzZSkpewogICAgICBhYnJ1cHQgPSBwZXJmb3JtKGZ1bmN0aW9uKCl7CiAgICAgICAgaWYoaXNOb2RlKXsKICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpOwogICAgICAgIH0gZWxzZSBpZihoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKXsKICAgICAgICAgIGhhbmRsZXIoe3Byb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWV9KTsKICAgICAgICB9IGVsc2UgaWYoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcil7CiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGQKICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxOwogICAgfSBwcm9taXNlLl9hID0gdW5kZWZpbmVkOwogICAgaWYoYWJydXB0KXRocm93IGFicnVwdC5lcnJvcjsKICB9KTsKfTsKdmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24ocHJvbWlzZSl7CiAgaWYocHJvbWlzZS5faCA9PSAxKXJldHVybiBmYWxzZTsKICB2YXIgY2hhaW4gPSBwcm9taXNlLl9hIHx8IHByb21pc2UuX2MKICAgICwgaSAgICAgPSAwCiAgICAsIHJlYWN0aW9uOwogIHdoaWxlKGNoYWluLmxlbmd0aCA+IGkpewogICAgcmVhY3Rpb24gPSBjaGFpbltpKytdOwogICAgaWYocmVhY3Rpb24uZmFpbCB8fCAhaXNVbmhhbmRsZWQocmVhY3Rpb24ucHJvbWlzZSkpcmV0dXJuIGZhbHNlOwogIH0gcmV0dXJuIHRydWU7Cn07CnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uKHByb21pc2UpewogIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uKCl7CiAgICB2YXIgaGFuZGxlcjsKICAgIGlmKGlzTm9kZSl7CiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpOwogICAgfSBlbHNlIGlmKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKXsKICAgICAgaGFuZGxlcih7cHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92fSk7CiAgICB9CiAgfSk7Cn07CnZhciAkcmVqZWN0ID0gZnVuY3Rpb24odmFsdWUpewogIHZhciBwcm9taXNlID0gdGhpczsKICBpZihwcm9taXNlLl9kKXJldHVybjsKICBwcm9taXNlLl9kID0gdHJ1ZTsKICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXAKICBwcm9taXNlLl92ID0gdmFsdWU7CiAgcHJvbWlzZS5fcyA9IDI7CiAgaWYoIXByb21pc2UuX2EpcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTsKICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7Cn07CnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uKHZhbHVlKXsKICB2YXIgcHJvbWlzZSA9IHRoaXMKICAgICwgdGhlbjsKICBpZihwcm9taXNlLl9kKXJldHVybjsKICBwcm9taXNlLl9kID0gdHJ1ZTsKICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXAKICB0cnkgewogICAgaWYocHJvbWlzZSA9PT0gdmFsdWUpdGhyb3cgVHlwZUVycm9yKCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZiIpOwogICAgaWYodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKXsKICAgICAgbWljcm90YXNrKGZ1bmN0aW9uKCl7CiAgICAgICAgdmFyIHdyYXBwZXIgPSB7X3c6IHByb21pc2UsIF9kOiBmYWxzZX07IC8vIHdyYXAKICAgICAgICB0cnkgewogICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpOwogICAgICAgIH0gY2F0Y2goZSl7CiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIHByb21pc2UuX3YgPSB2YWx1ZTsKICAgICAgcHJvbWlzZS5fcyA9IDE7CiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7CiAgICB9CiAgfSBjYXRjaChlKXsKICAgICRyZWplY3QuY2FsbCh7X3c6IHByb21pc2UsIF9kOiBmYWxzZX0sIGUpOyAvLyB3cmFwCiAgfQp9OwoKLy8gY29uc3RydWN0b3IgcG9seWZpbGwKaWYoIVVTRV9OQVRJVkUpewogIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpCiAgJFByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKXsKICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpOwogICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTsKICAgIEludGVybmFsLmNhbGwodGhpcyk7CiAgICB0cnkgewogICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHRoaXMsIDEpLCBjdHgoJHJlamVjdCwgdGhpcywgMSkpOwogICAgfSBjYXRjaChlcnIpewogICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTsKICAgIH0KICB9OwogIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcil7CiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9ucwogICAgdGhpcy5fYSA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9ucwogICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZQogICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lCiAgICB0aGlzLl92ID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIHZhbHVlCiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkCiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeQogIH07CiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykoJFByb21pc2UucHJvdG90eXBlLCB7CiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKQogICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCl7CiAgICAgIHZhciByZWFjdGlvbiAgICA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpOwogICAgICByZWFjdGlvbi5vayAgICAgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTsKICAgICAgcmVhY3Rpb24uZmFpbCAgID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkOwogICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDsKICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTsKICAgICAgaWYodGhpcy5fYSl0aGlzLl9hLnB1c2gocmVhY3Rpb24pOwogICAgICBpZih0aGlzLl9zKW5vdGlmeSh0aGlzLCBmYWxzZSk7CiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlOwogICAgfSwKICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpCiAgICAnY2F0Y2gnOiBmdW5jdGlvbihvblJlamVjdGVkKXsKICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpOwogICAgfQogIH0pOwogIFByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24oKXsKICAgIHZhciBwcm9taXNlICA9IG5ldyBJbnRlcm5hbDsKICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7CiAgICB0aGlzLnJlc29sdmUgPSBjdHgoJHJlc29sdmUsIHByb21pc2UsIDEpOwogICAgdGhpcy5yZWplY3QgID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpOwogIH07Cn0KCiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHtQcm9taXNlOiAkUHJvbWlzZX0pOwpyZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpKCRQcm9taXNlLCBQUk9NSVNFKTsKcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTsKV3JhcHBlciA9IHJlcXVpcmUoJy4vX2NvcmUnKVtQUk9NSVNFXTsKCi8vIHN0YXRpY3MKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwgewogIC8vIDI1LjQuNC41IFByb21pc2UucmVqZWN0KHIpCiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocil7CiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpCiAgICAgICwgJCRyZWplY3QgICA9IGNhcGFiaWxpdHkucmVqZWN0OwogICAgJCRyZWplY3Qocik7CiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlOwogIH0KfSk7CiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7CiAgLy8gMjUuNC40LjYgUHJvbWlzZS5yZXNvbHZlKHgpCiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KXsKICAgIC8vIGluc3RhbmNlb2YgaW5zdGVhZCBvZiBpbnRlcm5hbCBzbG90IGNoZWNrIGJlY2F1c2Ugd2Ugc2hvdWxkIGZpeCBpdCB3aXRob3V0IHJlcGxhY2VtZW50IG5hdGl2ZSBQcm9taXNlIGNvcmUKICAgIGlmKHggaW5zdGFuY2VvZiAkUHJvbWlzZSAmJiBzYW1lQ29uc3RydWN0b3IoeC5jb25zdHJ1Y3RvciwgdGhpcykpcmV0dXJuIHg7CiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpCiAgICAgICwgJCRyZXNvbHZlICA9IGNhcGFiaWxpdHkucmVzb2x2ZTsKICAgICQkcmVzb2x2ZSh4KTsKICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7CiAgfQp9KTsKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbihpdGVyKXsKICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpOwp9KSksIFBST01JU0UsIHsKICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbChpdGVyYWJsZSkKICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSl7CiAgICB2YXIgQyAgICAgICAgICA9IHRoaXMKICAgICAgLCBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQykKICAgICAgLCByZXNvbHZlICAgID0gY2FwYWJpbGl0eS5yZXNvbHZlCiAgICAgICwgcmVqZWN0ICAgICA9IGNhcGFiaWxpdHkucmVqZWN0OwogICAgdmFyIGFicnVwdCA9IHBlcmZvcm0oZnVuY3Rpb24oKXsKICAgICAgdmFyIHZhbHVlcyAgICA9IFtdCiAgICAgICAgLCBpbmRleCAgICAgPSAwCiAgICAgICAgLCByZW1haW5pbmcgPSAxOwogICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uKHByb21pc2UpewogICAgICAgIHZhciAkaW5kZXggICAgICAgID0gaW5kZXgrKwogICAgICAgICAgLCBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7CiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTsKICAgICAgICByZW1haW5pbmcrKzsKICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbih2YWx1ZSl7CiAgICAgICAgICBpZihhbHJlYWR5Q2FsbGVkKXJldHVybjsKICAgICAgICAgIGFscmVhZHlDYWxsZWQgID0gdHJ1ZTsKICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7CiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7CiAgICAgICAgfSwgcmVqZWN0KTsKICAgICAgfSk7CiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTsKICAgIH0pOwogICAgaWYoYWJydXB0KXJlamVjdChhYnJ1cHQuZXJyb3IpOwogICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTsKICB9LAogIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSkKICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKXsKICAgIHZhciBDICAgICAgICAgID0gdGhpcwogICAgICAsIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKQogICAgICAsIHJlamVjdCAgICAgPSBjYXBhYmlsaXR5LnJlamVjdDsKICAgIHZhciBhYnJ1cHQgPSBwZXJmb3JtKGZ1bmN0aW9uKCl7CiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24ocHJvbWlzZSl7CiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpOwogICAgICB9KTsKICAgIH0pOwogICAgaWYoYWJydXB0KXJlamVjdChhYnJ1cHQuZXJyb3IpOwogICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTsKICB9Cn0pOwp9LHsiLi9fYS1mdW5jdGlvbiI6MzAsIi4vX2FuLWluc3RhbmNlIjozMiwiLi9fY2xhc3NvZiI6MzUsIi4vX2NvcmUiOjM3LCIuL19jdHgiOjM4LCIuL19leHBvcnQiOjQ0LCIuL19mb3Itb2YiOjQ2LCIuL19nbG9iYWwiOjQ3LCIuL19pcy1vYmplY3QiOjU2LCIuL19pdGVyLWRldGVjdCI6NjAsIi4vX2xpYnJhcnkiOjY0LCIuL19taWNyb3Rhc2siOjY2LCIuL19yZWRlZmluZS1hbGwiOjgxLCIuL19zZXQtc3BlY2llcyI6ODQsIi4vX3NldC10by1zdHJpbmctdGFnIjo4NSwiLi9fc3BlY2llcy1jb25zdHJ1Y3RvciI6ODgsIi4vX3Rhc2siOjkwLCIuL193a3MiOjEwMH1dLDExMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRhdCAgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTsKCi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKCkKcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbihpdGVyYXRlZCl7CiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldAogIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4Ci8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KCkKfSwgZnVuY3Rpb24oKXsKICB2YXIgTyAgICAgPSB0aGlzLl90CiAgICAsIGluZGV4ID0gdGhpcy5faQogICAgLCBwb2ludDsKICBpZihpbmRleCA+PSBPLmxlbmd0aClyZXR1cm4ge3ZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWV9OwogIHBvaW50ID0gJGF0KE8sIGluZGV4KTsKICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDsKICByZXR1cm4ge3ZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2V9Owp9KTsKfSx7Ii4vX2l0ZXItZGVmaW5lIjo1OSwiLi9fc3RyaW5nLWF0Ijo4OX1dLDExMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbQp2YXIgZ2xvYmFsICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKQogICwgREVTQ1JJUFRPUlMgICAgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpCiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCByZWRlZmluZSAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJykKICAsIE1FVEEgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWQogICwgJGZhaWxzICAgICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpCiAgLCBzaGFyZWQgICAgICAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpCiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykKICAsIHVpZCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdWlkJykKICAsIHdrcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fd2tzJykKICAsIHdrc0V4dCAgICAgICAgID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpCiAgLCB3a3NEZWZpbmUgICAgICA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKQogICwga2V5T2YgICAgICAgICAgPSByZXF1aXJlKCcuL19rZXlvZicpCiAgLCBlbnVtS2V5cyAgICAgICA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpCiAgLCBpc0FycmF5ICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLWFycmF5JykKICAsIGFuT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIHRvSU9iamVjdCAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpCiAgLCB0b1ByaW1pdGl2ZSAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpCiAgLCBjcmVhdGVEZXNjICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKQogICwgX2NyZWF0ZSAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykKICAsIGdPUE5FeHQgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0JykKICAsICRHT1BEICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKQogICwgJERQICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKQogICwgJGtleXMgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpCiAgLCBnT1BEICAgICAgICAgICA9ICRHT1BELmYKICAsIGRQICAgICAgICAgICAgID0gJERQLmYKICAsIGdPUE4gICAgICAgICAgID0gZ09QTkV4dC5mCiAgLCAkU3ltYm9sICAgICAgICA9IGdsb2JhbC5TeW1ib2wKICAsICRKU09OICAgICAgICAgID0gZ2xvYmFsLkpTT04KICAsIF9zdHJpbmdpZnkgICAgID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5CiAgLCBQUk9UT1RZUEUgICAgICA9ICdwcm90b3R5cGUnCiAgLCBISURERU4gICAgICAgICA9IHdrcygnX2hpZGRlbicpCiAgLCBUT19QUklNSVRJVkUgICA9IHdrcygndG9QcmltaXRpdmUnKQogICwgaXNFbnVtICAgICAgICAgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZQogICwgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpCiAgLCBBbGxTeW1ib2xzICAgICA9IHNoYXJlZCgnc3ltYm9scycpCiAgLCBPUFN5bWJvbHMgICAgICA9IHNoYXJlZCgnb3Atc3ltYm9scycpCiAgLCBPYmplY3RQcm90byAgICA9IE9iamVjdFtQUk9UT1RZUEVdCiAgLCBVU0VfTkFUSVZFICAgICA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbicKICAsIFFPYmplY3QgICAgICAgID0gZ2xvYmFsLlFPYmplY3Q7Ci8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3Mwp2YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDsKCi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4Nwp2YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbigpewogIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHsKICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIGRQKHRoaXMsICdhJywge3ZhbHVlOiA3fSkuYTsgfQogIH0pKS5hICE9IDc7Cn0pID8gZnVuY3Rpb24oaXQsIGtleSwgRCl7CiAgdmFyIHByb3RvRGVzYyA9IGdPUEQoT2JqZWN0UHJvdG8sIGtleSk7CiAgaWYocHJvdG9EZXNjKWRlbGV0ZSBPYmplY3RQcm90b1trZXldOwogIGRQKGl0LCBrZXksIEQpOwogIGlmKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTsKfSA6IGRQOwoKdmFyIHdyYXAgPSBmdW5jdGlvbih0YWcpewogIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7CiAgc3ltLl9rID0gdGFnOwogIHJldHVybiBzeW07Cn07Cgp2YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24oaXQpewogIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7Cn0gOiBmdW5jdGlvbihpdCl7CiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDsKfTsKCnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKXsKICBpZihpdCA9PT0gT2JqZWN0UHJvdG8pJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTsKICBhbk9iamVjdChpdCk7CiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTsKICBhbk9iamVjdChEKTsKICBpZihoYXMoQWxsU3ltYm9scywga2V5KSl7CiAgICBpZighRC5lbnVtZXJhYmxlKXsKICAgICAgaWYoIWhhcyhpdCwgSElEREVOKSlkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7CiAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7CiAgICB9IGVsc2UgewogICAgICBpZihoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKWl0W0hJRERFTl1ba2V5XSA9IGZhbHNlOwogICAgICBEID0gX2NyZWF0ZShELCB7ZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSl9KTsKICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7CiAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7Cn07CnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApewogIGFuT2JqZWN0KGl0KTsKICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpCiAgICAsIGkgICAgPSAwCiAgICAsIGwgPSBrZXlzLmxlbmd0aAogICAgLCBrZXk7CiAgd2hpbGUobCA+IGkpJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7CiAgcmV0dXJuIGl0Owp9Owp2YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCl7CiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApOwp9Owp2YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KXsKICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpOwogIGlmKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKXJldHVybiBmYWxzZTsKICByZXR1cm4gRSB8fCAhaGFzKHRoaXMsIGtleSkgfHwgIWhhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtrZXldID8gRSA6IHRydWU7Cn07CnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpewogIGl0ICA9IHRvSU9iamVjdChpdCk7CiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTsKICBpZihpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpcmV0dXJuOwogIHZhciBEID0gZ09QRChpdCwga2V5KTsKICBpZihEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpRC5lbnVtZXJhYmxlID0gdHJ1ZTsKICByZXR1cm4gRDsKfTsKdmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCl7CiAgdmFyIG5hbWVzICA9IGdPUE4odG9JT2JqZWN0KGl0KSkKICAgICwgcmVzdWx0ID0gW10KICAgICwgaSAgICAgID0gMAogICAgLCBrZXk7CiAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSl7CiAgICBpZighaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpcmVzdWx0LnB1c2goa2V5KTsKICB9IHJldHVybiByZXN1bHQ7Cn07CnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KXsKICB2YXIgSVNfT1AgID0gaXQgPT09IE9iamVjdFByb3RvCiAgICAsIG5hbWVzICA9IGdPUE4oSVNfT1AgPyBPUFN5bWJvbHMgOiB0b0lPYmplY3QoaXQpKQogICAgLCByZXN1bHQgPSBbXQogICAgLCBpICAgICAgPSAwCiAgICAsIGtleTsKICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKXsKICAgIGlmKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSlyZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pOwogIH0gcmV0dXJuIHJlc3VsdDsKfTsKCi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKQppZighVVNFX05BVElWRSl7CiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpewogICAgaWYodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7CiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsKICAgIHZhciAkc2V0ID0gZnVuY3Rpb24odmFsdWUpewogICAgICBpZih0aGlzID09PSBPYmplY3RQcm90bykkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7CiAgICAgIGlmKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTsKICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTsKICAgIH07CiAgICBpZihERVNDUklQVE9SUyAmJiBzZXR0ZXIpc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7Y29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXR9KTsKICAgIHJldHVybiB3cmFwKHRhZyk7CiAgfTsKICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCl7CiAgICByZXR1cm4gdGhpcy5fazsKICB9KTsKCiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7CiAgJERQLmYgICA9ICRkZWZpbmVQcm9wZXJ0eTsKICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lczsKICByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZiAgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7CiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKS5mID0gJGdldE93blByb3BlcnR5U3ltYm9sczsKCiAgaWYoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSl7CiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTsKICB9CgogIHdrc0V4dC5mID0gZnVuY3Rpb24obmFtZSl7CiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpOwogIH0KfQoKJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwge1N5bWJvbDogJFN5bWJvbH0pOwoKZm9yKHZhciBzeW1ib2xzID0gKAogIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0CiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJwopLnNwbGl0KCcsJyksIGkgPSAwOyBzeW1ib2xzLmxlbmd0aCA+IGk7ICl3a3Moc3ltYm9sc1tpKytdKTsKCmZvcih2YXIgc3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGkgPSAwOyBzeW1ib2xzLmxlbmd0aCA+IGk7ICl3a3NEZWZpbmUoc3ltYm9sc1tpKytdKTsKCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7CiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpCiAgJ2Zvcic6IGZ1bmN0aW9uKGtleSl7CiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpCiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XQogICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7CiAgfSwKICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSkKICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihrZXkpewogICAgaWYoaXNTeW1ib2woa2V5KSlyZXR1cm4ga2V5T2YoU3ltYm9sUmVnaXN0cnksIGtleSk7CiAgICB0aHJvdyBUeXBlRXJyb3Ioa2V5ICsgJyBpcyBub3QgYSBzeW1ib2whJyk7CiAgfSwKICB1c2VTZXR0ZXI6IGZ1bmN0aW9uKCl7IHNldHRlciA9IHRydWU7IH0sCiAgdXNlU2ltcGxlOiBmdW5jdGlvbigpeyBzZXR0ZXIgPSBmYWxzZTsgfQp9KTsKCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7CiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKQogIGNyZWF0ZTogJGNyZWF0ZSwKICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykKICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LAogIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpCiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsCiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKQogIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvciwKICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKQogIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLAogIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTykKICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMKfSk7CgovLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSkKJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uKCl7CiAgdmFyIFMgPSAkU3ltYm9sKCk7CiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge30KICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGwKICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9scwogIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7YTogU30pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7Cn0pKSwgJ0pTT04nLCB7CiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpewogICAgaWYoaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkCiAgICB2YXIgYXJncyA9IFtpdF0KICAgICAgLCBpICAgID0gMQogICAgICAsIHJlcGxhY2VyLCAkcmVwbGFjZXI7CiAgICB3aGlsZShhcmd1bWVudHMubGVuZ3RoID4gaSlhcmdzLnB1c2goYXJndW1lbnRzW2krK10pOwogICAgcmVwbGFjZXIgPSBhcmdzWzFdOwogICAgaWYodHlwZW9mIHJlcGxhY2VyID09ICdmdW5jdGlvbicpJHJlcGxhY2VyID0gcmVwbGFjZXI7CiAgICBpZigkcmVwbGFjZXIgfHwgIWlzQXJyYXkocmVwbGFjZXIpKXJlcGxhY2VyID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSl7CiAgICAgIGlmKCRyZXBsYWNlcil2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpOwogICAgICBpZighaXNTeW1ib2wodmFsdWUpKXJldHVybiB2YWx1ZTsKICAgIH07CiAgICBhcmdzWzFdID0gcmVwbGFjZXI7CiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7CiAgfQp9KTsKCi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludCkKJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7Ci8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ10Kc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpOwovLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddCnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7Ci8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddCnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpOwp9LHsiLi9fYW4tb2JqZWN0IjozMywiLi9fZGVzY3JpcHRvcnMiOjQwLCIuL19lbnVtLWtleXMiOjQzLCIuL19leHBvcnQiOjQ0LCIuL19mYWlscyI6NDUsIi4vX2dsb2JhbCI6NDcsIi4vX2hhcyI6NDgsIi4vX2hpZGUiOjQ5LCIuL19pcy1hcnJheSI6NTUsIi4vX2tleW9mIjo2MywiLi9fbGlicmFyeSI6NjQsIi4vX21ldGEiOjY1LCIuL19vYmplY3QtY3JlYXRlIjo2OCwiLi9fb2JqZWN0LWRwIjo2OSwiLi9fb2JqZWN0LWdvcGQiOjcxLCIuL19vYmplY3QtZ29wbiI6NzMsIi4vX29iamVjdC1nb3BuLWV4dCI6NzIsIi4vX29iamVjdC1nb3BzIjo3NCwiLi9fb2JqZWN0LWtleXMiOjc3LCIuL19vYmplY3QtcGllIjo3OCwiLi9fcHJvcGVydHktZGVzYyI6ODAsIi4vX3JlZGVmaW5lIjo4MiwiLi9fc2V0LXRvLXN0cmluZy10YWciOjg1LCIuL19zaGFyZWQiOjg3LCIuL190by1pb2JqZWN0Ijo5MywiLi9fdG8tcHJpbWl0aXZlIjo5NiwiLi9fdWlkIjo5NywiLi9fd2tzIjoxMDAsIi4vX3drcy1kZWZpbmUiOjk4LCIuL193a3MtZXh0Ijo5OX1dLDExNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpOwp9LHsiLi9fd2tzLWRlZmluZSI6OTh9XSwxMTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ29ic2VydmFibGUnKTsKfSx7Ii4vX3drcy1kZWZpbmUiOjk4fV0sMTE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTsKdmFyIGdsb2JhbCAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgaGlkZSAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKQogICwgSXRlcmF0b3JzICAgICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpCiAgLCBUT19TVFJJTkdfVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7Cgpmb3IodmFyIGNvbGxlY3Rpb25zID0gWydOb2RlTGlzdCcsICdET01Ub2tlbkxpc3QnLCAnTWVkaWFMaXN0JywgJ1N0eWxlU2hlZXRMaXN0JywgJ0NTU1J1bGVMaXN0J10sIGkgPSAwOyBpIDwgNTsgaSsrKXsKICB2YXIgTkFNRSAgICAgICA9IGNvbGxlY3Rpb25zW2ldCiAgICAsIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV0KICAgICwgcHJvdG8gICAgICA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7CiAgaWYocHJvdG8gJiYgIXByb3RvW1RPX1NUUklOR19UQUddKWhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpOwogIEl0ZXJhdG9yc1tOQU1FXSA9IEl0ZXJhdG9ycy5BcnJheTsKfQp9LHsiLi9fZ2xvYmFsIjo0NywiLi9faGlkZSI6NDksIi4vX2l0ZXJhdG9ycyI6NjIsIi4vX3drcyI6MTAwLCIuL2VzNi5hcnJheS5pdGVyYXRvciI6MTAyfV0sMTE3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzMwXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7ImR1cCI6MzB9XSwxMTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIG1zZyl7CiAgaWYodHlwZW9mIGl0ICE9ICdudW1iZXInICYmIGNvZihpdCkgIT0gJ051bWJlcicpdGhyb3cgVHlwZUVycm9yKG1zZyk7CiAgcmV0dXJuICtpdDsKfTsKfSx7Ii4vX2NvZiI6MTMyfV0sMTE5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXQp2YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKQogICwgQXJyYXlQcm90byAgPSBBcnJheS5wcm90b3R5cGU7CmlmKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZClyZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpewogIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlOwp9Owp9LHsiLi9faGlkZSI6MTU0LCIuL193a3MiOjIzMX1dLDEyMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVszMl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyJkdXAiOjMyfV0sMTIxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzMzXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2lzLW9iamVjdCI6MTYzLCJkdXAiOjMzfV0sMTIyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpCid1c2Ugc3RyaWN0JzsKdmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JykKICAsIHRvSW5kZXggID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKQogICwgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTsKCm1vZHVsZS5leHBvcnRzID0gW10uY29weVdpdGhpbiB8fCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldC8qPSAwKi8sIHN0YXJ0Lyo9IDAsIGVuZCA9IEBsZW5ndGgqLyl7CiAgdmFyIE8gICAgID0gdG9PYmplY3QodGhpcykKICAgICwgbGVuICAgPSB0b0xlbmd0aChPLmxlbmd0aCkKICAgICwgdG8gICAgPSB0b0luZGV4KHRhcmdldCwgbGVuKQogICAgLCBmcm9tICA9IHRvSW5kZXgoc3RhcnQsIGxlbikKICAgICwgZW5kICAgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZAogICAgLCBjb3VudCA9IE1hdGgubWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvSW5kZXgoZW5kLCBsZW4pKSAtIGZyb20sIGxlbiAtIHRvKQogICAgLCBpbmMgICA9IDE7CiAgaWYoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KXsKICAgIGluYyAgPSAtMTsKICAgIGZyb20gKz0gY291bnQgLSAxOwogICAgdG8gICArPSBjb3VudCAtIDE7CiAgfQogIHdoaWxlKGNvdW50LS0gPiAwKXsKICAgIGlmKGZyb20gaW4gTylPW3RvXSA9IE9bZnJvbV07CiAgICBlbHNlIGRlbGV0ZSBPW3RvXTsKICAgIHRvICAgKz0gaW5jOwogICAgZnJvbSArPSBpbmM7CiAgfSByZXR1cm4gTzsKfTsKfSx7Ii4vX3RvLWluZGV4IjoyMTksIi4vX3RvLWxlbmd0aCI6MjIyLCIuL190by1vYmplY3QiOjIyM31dLDEyMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKQondXNlIHN0cmljdCc7CnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpCiAgLCB0b0luZGV4ICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4JykKICAsIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKXsKICB2YXIgTyAgICAgID0gdG9PYmplY3QodGhpcykKICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpCiAgICAsIGFMZW4gICA9IGFyZ3VtZW50cy5sZW5ndGgKICAgICwgaW5kZXggID0gdG9JbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKQogICAgLCBlbmQgICAgPSBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZAogICAgLCBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvSW5kZXgoZW5kLCBsZW5ndGgpOwogIHdoaWxlKGVuZFBvcyA+IGluZGV4KU9baW5kZXgrK10gPSB2YWx1ZTsKICByZXR1cm4gTzsKfTsKfSx7Ii4vX3RvLWluZGV4IjoyMTksIi4vX3RvLWxlbmd0aCI6MjIyLCIuL190by1vYmplY3QiOjIyM31dLDEyNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyLCBJVEVSQVRPUil7CiAgdmFyIHJlc3VsdCA9IFtdOwogIGZvck9mKGl0ZXIsIGZhbHNlLCByZXN1bHQucHVzaCwgcmVzdWx0LCBJVEVSQVRPUik7CiAgcmV0dXJuIHJlc3VsdDsKfTsKCn0seyIuL19mb3Itb2YiOjE1MX1dLDEyNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVszNF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL190by1pbmRleCI6MjE5LCIuL190by1pb2JqZWN0IjoyMjEsIi4vX3RvLWxlbmd0aCI6MjIyLCJkdXAiOjM0fV0sMTI2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMCAtPiBBcnJheSNmb3JFYWNoCi8vIDEgLT4gQXJyYXkjbWFwCi8vIDIgLT4gQXJyYXkjZmlsdGVyCi8vIDMgLT4gQXJyYXkjc29tZQovLyA0IC0+IEFycmF5I2V2ZXJ5Ci8vIDUgLT4gQXJyYXkjZmluZAovLyA2IC0+IEFycmF5I2ZpbmRJbmRleAp2YXIgY3R4ICAgICAgPSByZXF1aXJlKCcuL19jdHgnKQogICwgSU9iamVjdCAgPSByZXF1aXJlKCcuL19pb2JqZWN0JykKICAsIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JykKICAsIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJykKICAsIGFzYyAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUWVBFLCAkY3JlYXRlKXsKICB2YXIgSVNfTUFQICAgICAgICA9IFRZUEUgPT0gMQogICAgLCBJU19GSUxURVIgICAgID0gVFlQRSA9PSAyCiAgICAsIElTX1NPTUUgICAgICAgPSBUWVBFID09IDMKICAgICwgSVNfRVZFUlkgICAgICA9IFRZUEUgPT0gNAogICAgLCBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2CiAgICAsIE5PX0hPTEVTICAgICAgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWAogICAgLCBjcmVhdGUgICAgICAgID0gJGNyZWF0ZSB8fCBhc2M7CiAgcmV0dXJuIGZ1bmN0aW9uKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0KXsKICAgIHZhciBPICAgICAgPSB0b09iamVjdCgkdGhpcykKICAgICAgLCBzZWxmICAgPSBJT2JqZWN0KE8pCiAgICAgICwgZiAgICAgID0gY3R4KGNhbGxiYWNrZm4sIHRoYXQsIDMpCiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpCiAgICAgICwgaW5kZXggID0gMAogICAgICAsIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQKICAgICAgLCB2YWwsIHJlczsKICAgIGZvcig7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspaWYoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZil7CiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdOwogICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pOwogICAgICBpZihUWVBFKXsKICAgICAgICBpZihJU19NQVApcmVzdWx0W2luZGV4XSA9IHJlczsgICAgICAgICAgICAvLyBtYXAKICAgICAgICBlbHNlIGlmKHJlcylzd2l0Y2goVFlQRSl7CiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgICAgICAgLy8gc29tZQogICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgICAgICAgIC8vIGZpbmQKICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAgICAgICAvLyBmaW5kSW5kZXgKICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgICAgICAgICAvLyBmaWx0ZXIKICAgICAgICB9IGVsc2UgaWYoSVNfRVZFUlkpcmV0dXJuIGZhbHNlOyAgICAgICAgICAvLyBldmVyeQogICAgICB9CiAgICB9CiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0OwogIH07Cn07Cn0seyIuL19hcnJheS1zcGVjaWVzLWNyZWF0ZSI6MTI5LCIuL19jdHgiOjEzOSwiLi9faW9iamVjdCI6MTU5LCIuL190by1sZW5ndGgiOjIyMiwiLi9fdG8tb2JqZWN0IjoyMjN9XSwxMjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpCiAgLCB0b09iamVjdCAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKQogICwgSU9iamVjdCAgID0gcmVxdWlyZSgnLi9faW9iamVjdCcpCiAgLCB0b0xlbmd0aCAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgY2FsbGJhY2tmbiwgYUxlbiwgbWVtbywgaXNSaWdodCl7CiAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pOwogIHZhciBPICAgICAgPSB0b09iamVjdCh0aGF0KQogICAgLCBzZWxmICAgPSBJT2JqZWN0KE8pCiAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKQogICAgLCBpbmRleCAgPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDAKICAgICwgaSAgICAgID0gaXNSaWdodCA/IC0xIDogMTsKICBpZihhTGVuIDwgMilmb3IoOzspewogICAgaWYoaW5kZXggaW4gc2VsZil7CiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTsKICAgICAgaW5kZXggKz0gaTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBpbmRleCArPSBpOwogICAgaWYoaXNSaWdodCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCl7CiAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpOwogICAgfQogIH0KICBmb3IoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpaWYoaW5kZXggaW4gc2VsZil7CiAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pOwogIH0KICByZXR1cm4gbWVtbzsKfTsKfSx7Ii4vX2EtZnVuY3Rpb24iOjExNywiLi9faW9iamVjdCI6MTU5LCIuL190by1sZW5ndGgiOjIyMiwiLi9fdG8tb2JqZWN0IjoyMjN9XSwxMjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICwgaXNBcnJheSAgPSByZXF1aXJlKCcuL19pcy1hcnJheScpCiAgLCBTUEVDSUVTICA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsKXsKICB2YXIgQzsKICBpZihpc0FycmF5KG9yaWdpbmFsKSl7CiAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7CiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFjawogICAgaWYodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKUMgPSB1bmRlZmluZWQ7CiAgICBpZihpc09iamVjdChDKSl7CiAgICAgIEMgPSBDW1NQRUNJRVNdOwogICAgICBpZihDID09PSBudWxsKUMgPSB1bmRlZmluZWQ7CiAgICB9CiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDOwp9Owp9LHsiLi9faXMtYXJyYXkiOjE2MSwiLi9faXMtb2JqZWN0IjoxNjMsIi4vX3drcyI6MjMxfV0sMTI5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKQp2YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbCwgbGVuZ3RoKXsKICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpOwp9Owp9LHsiLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvciI6MTI4fV0sMTMwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgYUZ1bmN0aW9uICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKQogICwgaXNPYmplY3QgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBpbnZva2UgICAgID0gcmVxdWlyZSgnLi9faW52b2tlJykKICAsIGFycmF5U2xpY2UgPSBbXS5zbGljZQogICwgZmFjdG9yaWVzICA9IHt9OwoKdmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uKEYsIGxlbiwgYXJncyl7CiAgaWYoIShsZW4gaW4gZmFjdG9yaWVzKSl7CiAgICBmb3IodmFyIG4gPSBbXSwgaSA9IDA7IGkgPCBsZW47IGkrKyluW2ldID0gJ2FbJyArIGkgKyAnXSc7CiAgICBmYWN0b3JpZXNbbGVuXSA9IEZ1bmN0aW9uKCdGLGEnLCAncmV0dXJuIG5ldyBGKCcgKyBuLmpvaW4oJywnKSArICcpJyk7CiAgfSByZXR1cm4gZmFjdG9yaWVzW2xlbl0oRiwgYXJncyk7Cn07Cgptb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qLCBhcmdzLi4uICovKXsKICB2YXIgZm4gICAgICAgPSBhRnVuY3Rpb24odGhpcykKICAgICwgcGFydEFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsKICB2YXIgYm91bmQgPSBmdW5jdGlvbigvKiBhcmdzLi4uICovKXsKICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMpKTsKICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmQgPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGludm9rZShmbiwgYXJncywgdGhhdCk7CiAgfTsKICBpZihpc09iamVjdChmbi5wcm90b3R5cGUpKWJvdW5kLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTsKICByZXR1cm4gYm91bmQ7Cn07Cn0seyIuL19hLWZ1bmN0aW9uIjoxMTcsIi4vX2ludm9rZSI6MTU4LCIuL19pcy1vYmplY3QiOjE2M31dLDEzMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVszNV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19jb2YiOjEzMiwiLi9fd2tzIjoyMzEsImR1cCI6MzV9XSwxMzI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bMzZdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiZHVwIjozNn1dLDEzMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIGRQICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZgogICwgY3JlYXRlICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykKICAsIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykKICAsIGN0eCAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JykKICAsIGFuSW5zdGFuY2UgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKQogICwgZGVmaW5lZCAgICAgPSByZXF1aXJlKCcuL19kZWZpbmVkJykKICAsIGZvck9mICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJykKICAsICRpdGVyRGVmaW5lID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKQogICwgc3RlcCAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKQogICwgc2V0U3BlY2llcyAgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpCiAgLCBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykKICAsIGZhc3RLZXkgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpLmZhc3RLZXkKICAsIFNJWkUgICAgICAgID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnOwoKdmFyIGdldEVudHJ5ID0gZnVuY3Rpb24odGhhdCwga2V5KXsKICAvLyBmYXN0IGNhc2UKICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSksIGVudHJ5OwogIGlmKGluZGV4ICE9PSAnRicpcmV0dXJuIHRoYXQuX2lbaW5kZXhdOwogIC8vIGZyb3plbiBvYmplY3QgY2FzZQogIGZvcihlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pewogICAgaWYoZW50cnkuayA9PSBrZXkpcmV0dXJuIGVudHJ5OwogIH0KfTsKCm1vZHVsZS5leHBvcnRzID0gewogIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKXsKICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbih0aGF0LCBpdGVyYWJsZSl7CiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7CiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4CiAgICAgIHRoYXQuX2YgPSB1bmRlZmluZWQ7ICAgIC8vIGZpcnN0IGVudHJ5CiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7ICAgIC8vIGxhc3QgZW50cnkKICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZQogICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpOwogICAgfSk7CiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgewogICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKCkKICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpCiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpewogICAgICAgIGZvcih2YXIgdGhhdCA9IHRoaXMsIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pewogICAgICAgICAgZW50cnkuciA9IHRydWU7CiAgICAgICAgICBpZihlbnRyeS5wKWVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7CiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTsKICAgICAgICB9CiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7CiAgICAgICAgdGhhdFtTSVpFXSA9IDA7CiAgICAgIH0sCiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSkKICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpCiAgICAgICdkZWxldGUnOiBmdW5jdGlvbihrZXkpewogICAgICAgIHZhciB0aGF0ICA9IHRoaXMKICAgICAgICAgICwgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpOwogICAgICAgIGlmKGVudHJ5KXsKICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkubgogICAgICAgICAgICAsIHByZXYgPSBlbnRyeS5wOwogICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07CiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTsKICAgICAgICAgIGlmKHByZXYpcHJldi5uID0gbmV4dDsKICAgICAgICAgIGlmKG5leHQpbmV4dC5wID0gcHJldjsKICAgICAgICAgIGlmKHRoYXQuX2YgPT0gZW50cnkpdGhhdC5fZiA9IG5leHQ7CiAgICAgICAgICBpZih0aGF0Ll9sID09IGVudHJ5KXRoYXQuX2wgPSBwcmV2OwogICAgICAgICAgdGhhdFtTSVpFXS0tOwogICAgICAgIH0gcmV0dXJuICEhZW50cnk7CiAgICAgIH0sCiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKQogICAgICAvLyAyMy4xLjMuNSBNYXAucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZCkKICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qLCB0aGF0ID0gdW5kZWZpbmVkICovKXsKICAgICAgICBhbkluc3RhbmNlKHRoaXMsIEMsICdmb3JFYWNoJyk7CiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpCiAgICAgICAgICAsIGVudHJ5OwogICAgICAgIHdoaWxlKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZil7CiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpOwogICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5CiAgICAgICAgICB3aGlsZShlbnRyeSAmJiBlbnRyeS5yKWVudHJ5ID0gZW50cnkucDsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSkKICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpCiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSl7CiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodGhpcywga2V5KTsKICAgICAgfQogICAgfSk7CiAgICBpZihERVNDUklQVE9SUylkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7CiAgICAgIGdldDogZnVuY3Rpb24oKXsKICAgICAgICByZXR1cm4gZGVmaW5lZCh0aGlzW1NJWkVdKTsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gQzsKICB9LAogIGRlZjogZnVuY3Rpb24odGhhdCwga2V5LCB2YWx1ZSl7CiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpCiAgICAgICwgcHJldiwgaW5kZXg7CiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnkKICAgIGlmKGVudHJ5KXsKICAgICAgZW50cnkudiA9IHZhbHVlOwogICAgLy8gY3JlYXRlIG5ldyBlbnRyeQogICAgfSBlbHNlIHsKICAgICAgdGhhdC5fbCA9IGVudHJ5ID0gewogICAgICAgIGk6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLCAvLyA8LSBpbmRleAogICAgICAgIGs6IGtleSwgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBrZXkKICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWUKICAgICAgICBwOiBwcmV2ID0gdGhhdC5fbCwgICAgICAgICAgICAgLy8gPC0gcHJldmlvdXMgZW50cnkKICAgICAgICBuOiB1bmRlZmluZWQsICAgICAgICAgICAgICAgICAgLy8gPC0gbmV4dCBlbnRyeQogICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkCiAgICAgIH07CiAgICAgIGlmKCF0aGF0Ll9mKXRoYXQuX2YgPSBlbnRyeTsKICAgICAgaWYocHJldilwcmV2Lm4gPSBlbnRyeTsKICAgICAgdGhhdFtTSVpFXSsrOwogICAgICAvLyBhZGQgdG8gaW5kZXgKICAgICAgaWYoaW5kZXggIT09ICdGJyl0aGF0Ll9pW2luZGV4XSA9IGVudHJ5OwogICAgfSByZXR1cm4gdGhhdDsKICB9LAogIGdldEVudHJ5OiBnZXRFbnRyeSwKICBzZXRTdHJvbmc6IGZ1bmN0aW9uKEMsIE5BTUUsIElTX01BUCl7CiAgICAvLyBhZGQgLmtleXMsIC52YWx1ZXMsIC5lbnRyaWVzLCBbQEBpdGVyYXRvcl0KICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTEKICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uKGl0ZXJhdGVkLCBraW5kKXsKICAgICAgdGhpcy5fdCA9IGl0ZXJhdGVkOyAgLy8gdGFyZ2V0CiAgICAgIHRoaXMuX2sgPSBraW5kOyAgICAgIC8vIGtpbmQKICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgLy8gcHJldmlvdXMKICAgIH0sIGZ1bmN0aW9uKCl7CiAgICAgIHZhciB0aGF0ICA9IHRoaXMKICAgICAgICAsIGtpbmQgID0gdGhhdC5fawogICAgICAgICwgZW50cnkgPSB0aGF0Ll9sOwogICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnkKICAgICAgd2hpbGUoZW50cnkgJiYgZW50cnkucillbnRyeSA9IGVudHJ5LnA7CiAgICAgIC8vIGdldCBuZXh0IGVudHJ5CiAgICAgIGlmKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpewogICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uCiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDsKICAgICAgICByZXR1cm4gc3RlcCgxKTsKICAgICAgfQogICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kCiAgICAgIGlmKGtpbmQgPT0gJ2tleXMnICApcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7CiAgICAgIGlmKGtpbmQgPT0gJ3ZhbHVlcycpcmV0dXJuIHN0ZXAoMCwgZW50cnkudik7CiAgICAgIHJldHVybiBzdGVwKDAsIFtlbnRyeS5rLCBlbnRyeS52XSk7CiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJyAsICFJU19NQVAsIHRydWUpOwoKICAgIC8vIGFkZCBbQEBzcGVjaWVzXSwgMjMuMS4yLjIsIDIzLjIuMi4yCiAgICBzZXRTcGVjaWVzKE5BTUUpOwogIH0KfTsKfSx7Ii4vX2FuLWluc3RhbmNlIjoxMjAsIi4vX2N0eCI6MTM5LCIuL19kZWZpbmVkIjoxNDEsIi4vX2Rlc2NyaXB0b3JzIjoxNDIsIi4vX2Zvci1vZiI6MTUxLCIuL19pdGVyLWRlZmluZSI6MTY3LCIuL19pdGVyLXN0ZXAiOjE2OSwiLi9fbWV0YSI6MTc2LCIuL19vYmplY3QtY3JlYXRlIjoxODAsIi4vX29iamVjdC1kcCI6MTgxLCIuL19yZWRlZmluZS1hbGwiOjIwMCwiLi9fc2V0LXNwZWNpZXMiOjIwNX1dLDEzNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT04KdmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJykKICAsIGZyb20gICAgPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTkFNRSl7CiAgcmV0dXJuIGZ1bmN0aW9uIHRvSlNPTigpewogICAgaWYoY2xhc3NvZih0aGlzKSAhPSBOQU1FKXRocm93IFR5cGVFcnJvcihOQU1FICsgIiN0b0pTT04gaXNuJ3QgZ2VuZXJpYyIpOwogICAgcmV0dXJuIGZyb20odGhpcyk7CiAgfTsKfTsKfSx7Ii4vX2FycmF5LWZyb20taXRlcmFibGUiOjEyNCwiLi9fY2xhc3NvZiI6MTMxfV0sMTM1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgcmVkZWZpbmVBbGwgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKQogICwgZ2V0V2VhayAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhJykuZ2V0V2VhawogICwgYW5PYmplY3QgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgaXNPYmplY3QgICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICwgYW5JbnN0YW5jZSAgICAgICAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpCiAgLCBmb3JPZiAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2Zvci1vZicpCiAgLCBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKQogICwgJGhhcyAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKQogICwgYXJyYXlGaW5kICAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCg1KQogICwgYXJyYXlGaW5kSW5kZXggICAgPSBjcmVhdGVBcnJheU1ldGhvZCg2KQogICwgaWQgICAgICAgICAgICAgICAgPSAwOwoKLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzCnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24odGhhdCl7CiAgcmV0dXJuIHRoYXQuX2wgfHwgKHRoYXQuX2wgPSBuZXcgVW5jYXVnaHRGcm96ZW5TdG9yZSk7Cn07CnZhciBVbmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24oKXsKICB0aGlzLmEgPSBbXTsKfTsKdmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uKHN0b3JlLCBrZXkpewogIHJldHVybiBhcnJheUZpbmQoc3RvcmUuYSwgZnVuY3Rpb24oaXQpewogICAgcmV0dXJuIGl0WzBdID09PSBrZXk7CiAgfSk7Cn07ClVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0gewogIGdldDogZnVuY3Rpb24oa2V5KXsKICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpOwogICAgaWYoZW50cnkpcmV0dXJuIGVudHJ5WzFdOwogIH0sCiAgaGFzOiBmdW5jdGlvbihrZXkpewogICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7CiAgfSwKICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpewogICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7CiAgICBpZihlbnRyeSllbnRyeVsxXSA9IHZhbHVlOwogICAgZWxzZSB0aGlzLmEucHVzaChba2V5LCB2YWx1ZV0pOwogIH0sCiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uKGtleSl7CiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uKGl0KXsKICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7CiAgICB9KTsKICAgIGlmKH5pbmRleCl0aGlzLmEuc3BsaWNlKGluZGV4LCAxKTsKICAgIHJldHVybiAhIX5pbmRleDsKICB9Cn07Cgptb2R1bGUuZXhwb3J0cyA9IHsKICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24od3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUil7CiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgaXRlcmFibGUpewogICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpOwogICAgICB0aGF0Ll9pID0gaWQrKzsgICAgICAvLyBjb2xsZWN0aW9uIGlkCiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7IC8vIGxlYWsgc3RvcmUgZm9yIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RzCiAgICAgIGlmKGl0ZXJhYmxlICE9IHVuZGVmaW5lZClmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7CiAgICB9KTsKICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7CiAgICAgIC8vIDIzLjMuMy4yIFdlYWtNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpCiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSkKICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uKGtleSl7CiAgICAgICAgaWYoIWlzT2JqZWN0KGtleSkpcmV0dXJuIGZhbHNlOwogICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpOwogICAgICAgIGlmKGRhdGEgPT09IHRydWUpcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhpcylbJ2RlbGV0ZSddKGtleSk7CiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKSAmJiBkZWxldGUgZGF0YVt0aGlzLl9pXTsKICAgICAgfSwKICAgICAgLy8gMjMuMy4zLjQgV2Vha01hcC5wcm90b3R5cGUuaGFzKGtleSkKICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKQogICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpewogICAgICAgIGlmKCFpc09iamVjdChrZXkpKXJldHVybiBmYWxzZTsKICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTsKICAgICAgICBpZihkYXRhID09PSB0cnVlKXJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHRoaXMpLmhhcyhrZXkpOwogICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSk7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIEM7CiAgfSwKICBkZWY6IGZ1bmN0aW9uKHRoYXQsIGtleSwgdmFsdWUpewogICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpOwogICAgaWYoZGF0YSA9PT0gdHJ1ZSl1bmNhdWdodEZyb3plblN0b3JlKHRoYXQpLnNldChrZXksIHZhbHVlKTsKICAgIGVsc2UgZGF0YVt0aGF0Ll9pXSA9IHZhbHVlOwogICAgcmV0dXJuIHRoYXQ7CiAgfSwKICB1ZnN0b3JlOiB1bmNhdWdodEZyb3plblN0b3JlCn07Cn0seyIuL19hbi1pbnN0YW5jZSI6MTIwLCIuL19hbi1vYmplY3QiOjEyMSwiLi9fYXJyYXktbWV0aG9kcyI6MTI2LCIuL19mb3Itb2YiOjE1MSwiLi9faGFzIjoxNTMsIi4vX2lzLW9iamVjdCI6MTYzLCIuL19tZXRhIjoxNzYsIi4vX3JlZGVmaW5lLWFsbCI6MjAwfV0sMTM2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgZ2xvYmFsICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgJGV4cG9ydCAgICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgcmVkZWZpbmUgICAgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpCiAgLCByZWRlZmluZUFsbCAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpCiAgLCBtZXRhICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKQogICwgZm9yT2YgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKQogICwgYW5JbnN0YW5jZSAgICAgICAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpCiAgLCBpc09iamVjdCAgICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBmYWlscyAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJykKICAsICRpdGVyRGV0ZWN0ICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKQogICwgc2V0VG9TdHJpbmdUYWcgICAgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpCiAgLCBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspewogIHZhciBCYXNlICA9IGdsb2JhbFtOQU1FXQogICAgLCBDICAgICA9IEJhc2UKICAgICwgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnCiAgICAsIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZQogICAgLCBPICAgICA9IHt9OwogIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbihLRVkpewogICAgdmFyIGZuID0gcHJvdG9bS0VZXTsKICAgIHJlZGVmaW5lKHByb3RvLCBLRVksCiAgICAgIEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uKGEpewogICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOwogICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGEpewogICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOwogICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpewogICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IHVuZGVmaW5lZCA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsKICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKXsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyByZXR1cm4gdGhpczsgfQogICAgICAgIDogZnVuY3Rpb24gc2V0KGEsIGIpeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9CiAgICApOwogIH07CiAgaWYodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24oKXsKICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTsKICB9KSkpewogICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3IKICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7CiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7CiAgICBtZXRhLk5FRUQgPSB0cnVlOwogIH0gZWxzZSB7CiAgICB2YXIgaW5zdGFuY2UgICAgICAgICAgICAgPSBuZXcgQwogICAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nCiAgICAgICwgSEFTTlRfQ0hBSU5JTkcgICAgICAgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlCiAgICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZQogICAgICAsIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24oKXsgaW5zdGFuY2UuaGFzKDEpOyB9KQogICAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5CiAgICAgICwgQUNDRVBUX0lURVJBQkxFUyAgICAgPSAkaXRlckRldGVjdChmdW5jdGlvbihpdGVyKXsgbmV3IEMoaXRlcik7IH0pIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3CiAgICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZQogICAgICAsIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbigpewogICAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50cwogICAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpCiAgICAgICAgICAsIGluZGV4ICAgICA9IDU7CiAgICAgICAgd2hpbGUoaW5kZXgtLSkkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7CiAgICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTsKICAgICAgfSk7CiAgICBpZighQUNDRVBUX0lURVJBQkxFUyl7IAogICAgICBDID0gd3JhcHBlcihmdW5jdGlvbih0YXJnZXQsIGl0ZXJhYmxlKXsKICAgICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSk7CiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSwgdGFyZ2V0LCBDKTsKICAgICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpOwogICAgICAgIHJldHVybiB0aGF0OwogICAgICB9KTsKICAgICAgQy5wcm90b3R5cGUgPSBwcm90bzsKICAgICAgcHJvdG8uY29uc3RydWN0b3IgPSBDOwogICAgfQogICAgaWYoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTyl7CiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7CiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7CiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpOwogICAgfQogICAgaWYoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORylmaXhNZXRob2QoQURERVIpOwogICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2QKICAgIGlmKElTX1dFQUsgJiYgcHJvdG8uY2xlYXIpZGVsZXRlIHByb3RvLmNsZWFyOwogIH0KCiAgc2V0VG9TdHJpbmdUYWcoQywgTkFNRSk7CgogIE9bTkFNRV0gPSBDOwogICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEMgIT0gQmFzZSksIE8pOwoKICBpZighSVNfV0VBSyljb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7CgogIHJldHVybiBDOwp9Owp9LHsiLi9fYW4taW5zdGFuY2UiOjEyMCwiLi9fZXhwb3J0IjoxNDYsIi4vX2ZhaWxzIjoxNDgsIi4vX2Zvci1vZiI6MTUxLCIuL19nbG9iYWwiOjE1MiwiLi9faW5oZXJpdC1pZi1yZXF1aXJlZCI6MTU3LCIuL19pcy1vYmplY3QiOjE2MywiLi9faXRlci1kZXRlY3QiOjE2OCwiLi9fbWV0YSI6MTc2LCIuL19yZWRlZmluZSI6MjAxLCIuL19yZWRlZmluZS1hbGwiOjIwMCwiLi9fc2V0LXRvLXN0cmluZy10YWciOjIwNn1dLDEzNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVszN11bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyJkdXAiOjM3fV0sMTM4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykKICAsIGNyZWF0ZURlc2MgICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBpbmRleCwgdmFsdWUpewogIGlmKGluZGV4IGluIG9iamVjdCkkZGVmaW5lUHJvcGVydHkuZihvYmplY3QsIGluZGV4LCBjcmVhdGVEZXNjKDAsIHZhbHVlKSk7CiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7Cn07Cn0seyIuL19vYmplY3QtZHAiOjE4MSwiLi9fcHJvcGVydHktZGVzYyI6MTk5fV0sMTM5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzM4XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2EtZnVuY3Rpb24iOjExNywiZHVwIjozOH1dLDE0MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJykKICAsIE5VTUJFUiAgICAgID0gJ251bWJlcic7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGhpbnQpewogIGlmKGhpbnQgIT09ICdzdHJpbmcnICYmIGhpbnQgIT09IE5VTUJFUiAmJiBoaW50ICE9PSAnZGVmYXVsdCcpdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaGludCcpOwogIHJldHVybiB0b1ByaW1pdGl2ZShhbk9iamVjdCh0aGlzKSwgaGludCAhPSBOVU1CRVIpOwp9Owp9LHsiLi9fYW4tb2JqZWN0IjoxMjEsIi4vX3RvLXByaW1pdGl2ZSI6MjI0fV0sMTQxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzM5XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7ImR1cCI6Mzl9XSwxNDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNDBdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fZmFpbHMiOjE0OCwiZHVwIjo0MH1dLDE0MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs0MV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19nbG9iYWwiOjE1MiwiLi9faXMtb2JqZWN0IjoxNjMsImR1cCI6NDF9XSwxNDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNDJdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiZHVwIjo0Mn1dLDE0NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs0M11bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19vYmplY3QtZ29wcyI6MTg3LCIuL19vYmplY3Qta2V5cyI6MTkwLCIuL19vYmplY3QtcGllIjoxOTEsImR1cCI6NDN9XSwxNDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgZ2xvYmFsICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykKICAsIGNvcmUgICAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKQogICwgaGlkZSAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpCiAgLCByZWRlZmluZSAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpCiAgLCBjdHggICAgICAgPSByZXF1aXJlKCcuL19jdHgnKQogICwgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7Cgp2YXIgJGV4cG9ydCA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIHNvdXJjZSl7CiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkYKICAgICwgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRwogICAgLCBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TCiAgICAsIElTX1BST1RPICA9IHR5cGUgJiAkZXhwb3J0LlAKICAgICwgSVNfQklORCAgID0gdHlwZSAmICRleHBvcnQuQgogICAgLCB0YXJnZXQgICAgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV0KICAgICwgZXhwb3J0cyAgID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSkKICAgICwgZXhwUHJvdG8gID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSkKICAgICwga2V5LCBvd24sIG91dCwgZXhwOwogIGlmKElTX0dMT0JBTClzb3VyY2UgPSBuYW1lOwogIGZvcihrZXkgaW4gc291cmNlKXsKICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZQogICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDsKICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkCiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldOwogICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHQKICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0OwogICAgLy8gZXh0ZW5kIGdsb2JhbAogICAgaWYodGFyZ2V0KXJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpOwogICAgLy8gZXhwb3J0CiAgICBpZihleHBvcnRzW2tleV0gIT0gb3V0KWhpZGUoZXhwb3J0cywga2V5LCBleHApOwogICAgaWYoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpZXhwUHJvdG9ba2V5XSA9IG91dDsKICB9Cn07Cmdsb2JhbC5jb3JlID0gY29yZTsKLy8gdHlwZSBiaXRtYXAKJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWQKJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWwKJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWMKJGV4cG9ydC5QID0gODsgICAvLyBwcm90bwokZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmQKJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwCiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZQokZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWAgCm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDsKfSx7Ii4vX2NvcmUiOjEzNywiLi9fY3R4IjoxMzksIi4vX2dsb2JhbCI6MTUyLCIuL19oaWRlIjoxNTQsIi4vX3JlZGVmaW5lIjoyMDF9XSwxNDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVkpewogIHZhciByZSA9IC8uLzsKICB0cnkgewogICAgJy8uLydbS0VZXShyZSk7CiAgfSBjYXRjaChlKXsKICAgIHRyeSB7CiAgICAgIHJlW01BVENIXSA9IGZhbHNlOwogICAgICByZXR1cm4gIScvLi8nW0tFWV0ocmUpOwogICAgfSBjYXRjaChmKXsgLyogZW1wdHkgKi8gfQogIH0gcmV0dXJuIHRydWU7Cn07Cn0seyIuL193a3MiOjIzMX1dLDE0ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs0NV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyJkdXAiOjQ1fV0sMTQ5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgaGlkZSAgICAgPSByZXF1aXJlKCcuL19oaWRlJykKICAsIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKQogICwgZmFpbHMgICAgPSByZXF1aXJlKCcuL19mYWlscycpCiAgLCBkZWZpbmVkICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKQogICwgd2tzICAgICAgPSByZXF1aXJlKCcuL193a3MnKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZLCBsZW5ndGgsIGV4ZWMpewogIHZhciBTWU1CT0wgICA9IHdrcyhLRVkpCiAgICAsIGZucyAgICAgID0gZXhlYyhkZWZpbmVkLCBTWU1CT0wsICcnW0tFWV0pCiAgICAsIHN0cmZuICAgID0gZm5zWzBdCiAgICAsIHJ4Zm4gICAgID0gZm5zWzFdOwogIGlmKGZhaWxzKGZ1bmN0aW9uKCl7CiAgICB2YXIgTyA9IHt9OwogICAgT1tTWU1CT0xdID0gZnVuY3Rpb24oKXsgcmV0dXJuIDc7IH07CiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3OwogIH0pKXsKICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyZm4pOwogICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyCiAgICAgIC8vIDIxLjIuNS44IFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXShzdHJpbmcsIHJlcGxhY2VWYWx1ZSkKICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdCkKICAgICAgPyBmdW5jdGlvbihzdHJpbmcsIGFyZyl7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9CiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKQogICAgICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXShzdHJpbmcpCiAgICAgIDogZnVuY3Rpb24oc3RyaW5nKXsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMpOyB9CiAgICApOwogIH0KfTsKfSx7Ii4vX2RlZmluZWQiOjE0MSwiLi9fZmFpbHMiOjE0OCwiLi9faGlkZSI6MTU0LCIuL19yZWRlZmluZSI6MjAxLCIuL193a3MiOjIzMX1dLDE1MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MKdmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKXsKICB2YXIgdGhhdCAgID0gYW5PYmplY3QodGhpcykKICAgICwgcmVzdWx0ID0gJyc7CiAgaWYodGhhdC5nbG9iYWwpICAgICByZXN1bHQgKz0gJ2cnOwogIGlmKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJzsKICBpZih0aGF0Lm11bHRpbGluZSkgIHJlc3VsdCArPSAnbSc7CiAgaWYodGhhdC51bmljb2RlKSAgICByZXN1bHQgKz0gJ3UnOwogIGlmKHRoYXQuc3RpY2t5KSAgICAgcmVzdWx0ICs9ICd5JzsKICByZXR1cm4gcmVzdWx0Owp9Owp9LHsiLi9fYW4tb2JqZWN0IjoxMjF9XSwxNTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNDZdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fYW4tb2JqZWN0IjoxMjEsIi4vX2N0eCI6MTM5LCIuL19pcy1hcnJheS1pdGVyIjoxNjAsIi4vX2l0ZXItY2FsbCI6MTY1LCIuL190by1sZW5ndGgiOjIyMiwiLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QiOjIzMiwiZHVwIjo0Nn1dLDE1MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs0N11bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyJkdXAiOjQ3fV0sMTUzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzQ4XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7ImR1cCI6NDh9XSwxNTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNDldWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fZGVzY3JpcHRvcnMiOjE0MiwiLi9fb2JqZWN0LWRwIjoxODEsIi4vX3Byb3BlcnR5LWRlc2MiOjE5OSwiZHVwIjo0OX1dLDE1NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs1MF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19nbG9iYWwiOjE1MiwiZHVwIjo1MH1dLDE1NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs1MV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19kZXNjcmlwdG9ycyI6MTQyLCIuL19kb20tY3JlYXRlIjoxNDMsIi4vX2ZhaWxzIjoxNDgsImR1cCI6NTF9XSwxNTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgaXNPYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICwgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQ7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgdGFyZ2V0LCBDKXsKICB2YXIgUCwgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjsKICBpZihTICE9PSBDICYmIHR5cGVvZiBTID09ICdmdW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKXsKICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApOwogIH0gcmV0dXJuIHRoYXQ7Cn07Cn0seyIuL19pcy1vYmplY3QiOjE2MywiLi9fc2V0LXByb3RvIjoyMDR9XSwxNTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNTJdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiZHVwIjo1Mn1dLDE1OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs1M11bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19jb2YiOjEzMiwiZHVwIjo1M31dLDE2MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs1NF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19pdGVyYXRvcnMiOjE3MCwiLi9fd2tzIjoyMzEsImR1cCI6NTR9XSwxNjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNTVdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fY29mIjoxMzIsImR1cCI6NTV9XSwxNjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcikKdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JykKICAsIGZsb29yICAgID0gTWF0aC5mbG9vcjsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0ludGVnZXIoaXQpewogIHJldHVybiAhaXNPYmplY3QoaXQpICYmIGlzRmluaXRlKGl0KSAmJiBmbG9vcihpdCkgPT09IGl0Owp9Owp9LHsiLi9faXMtb2JqZWN0IjoxNjN9XSwxNjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNTZdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiZHVwIjo1Nn1dLDE2NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KQp2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICwgY29mICAgICAgPSByZXF1aXJlKCcuL19jb2YnKQogICwgTUFUQ0ggICAgPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7CiAgdmFyIGlzUmVnRXhwOwogIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTsKfTsKfSx7Ii4vX2NvZiI6MTMyLCIuL19pcy1vYmplY3QiOjE2MywiLi9fd2tzIjoyMzF9XSwxNjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNTddWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fYW4tb2JqZWN0IjoxMjEsImR1cCI6NTd9XSwxNjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNThdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9faGlkZSI6MTU0LCIuL19vYmplY3QtY3JlYXRlIjoxODAsIi4vX3Byb3BlcnR5LWRlc2MiOjE5OSwiLi9fc2V0LXRvLXN0cmluZy10YWciOjIwNiwiLi9fd2tzIjoyMzEsImR1cCI6NTh9XSwxNjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNTldWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fZXhwb3J0IjoxNDYsIi4vX2hhcyI6MTUzLCIuL19oaWRlIjoxNTQsIi4vX2l0ZXItY3JlYXRlIjoxNjYsIi4vX2l0ZXJhdG9ycyI6MTcwLCIuL19saWJyYXJ5IjoxNzIsIi4vX29iamVjdC1ncG8iOjE4OCwiLi9fcmVkZWZpbmUiOjIwMSwiLi9fc2V0LXRvLXN0cmluZy10YWciOjIwNiwiLi9fd2tzIjoyMzEsImR1cCI6NTl9XSwxNjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNjBdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fd2tzIjoyMzEsImR1cCI6NjB9XSwxNjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNjFdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiZHVwIjo2MX1dLDE3MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs2Ml1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyJkdXAiOjYyfV0sMTcxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzYzXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX29iamVjdC1rZXlzIjoxOTAsIi4vX3RvLWlvYmplY3QiOjIyMSwiZHVwIjo2M31dLDE3MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gZmFsc2U7Cn0se31dLDE3MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpCnZhciAkZXhwbTEgPSBNYXRoLmV4cG0xOwptb2R1bGUuZXhwb3J0cyA9ICghJGV4cG0xCiAgLy8gT2xkIEZGIGJ1ZwogIHx8ICRleHBtMSgxMCkgPiAyMjAyNS40NjU3OTQ4MDY3MTkgfHwgJGV4cG0xKDEwKSA8IDIyMDI1LjQ2NTc5NDgwNjcxNjUxNjgKICAvLyBUb3IgQnJvd3NlciBidWcKICB8fCAkZXhwbTEoLTJlLTE3KSAhPSAtMmUtMTcKKSA/IGZ1bmN0aW9uIGV4cG0xKHgpewogIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBNYXRoLmV4cCh4KSAtIDE7Cn0gOiAkZXhwbTE7Cn0se31dLDE3NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpCm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KXsKICByZXR1cm4gKHggPSAreCkgPiAtMWUtOCAmJiB4IDwgMWUtOCA/IHggLSB4ICogeCAvIDIgOiBNYXRoLmxvZygxICsgeCk7Cn07Cn0se31dLDE3NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeCkKbW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24gc2lnbih4KXsKICByZXR1cm4gKHggPSAreCkgPT0gMCB8fCB4ICE9IHggPyB4IDogeCA8IDAgPyAtMSA6IDE7Cn07Cn0se31dLDE3NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs2NV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19mYWlscyI6MTQ4LCIuL19oYXMiOjE1MywiLi9faXMtb2JqZWN0IjoxNjMsIi4vX29iamVjdC1kcCI6MTgxLCIuL191aWQiOjIyOCwiZHVwIjo2NX1dLDE3NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBNYXAgICAgID0gcmVxdWlyZSgnLi9lczYubWFwJykKICAsICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgc2hhcmVkICA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdtZXRhZGF0YScpCiAgLCBzdG9yZSAgID0gc2hhcmVkLnN0b3JlIHx8IChzaGFyZWQuc3RvcmUgPSBuZXcgKHJlcXVpcmUoJy4vZXM2LndlYWstbWFwJykpKTsKCnZhciBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwID0gZnVuY3Rpb24odGFyZ2V0LCB0YXJnZXRLZXksIGNyZWF0ZSl7CiAgdmFyIHRhcmdldE1ldGFkYXRhID0gc3RvcmUuZ2V0KHRhcmdldCk7CiAgaWYoIXRhcmdldE1ldGFkYXRhKXsKICAgIGlmKCFjcmVhdGUpcmV0dXJuIHVuZGVmaW5lZDsKICAgIHN0b3JlLnNldCh0YXJnZXQsIHRhcmdldE1ldGFkYXRhID0gbmV3IE1hcCk7CiAgfQogIHZhciBrZXlNZXRhZGF0YSA9IHRhcmdldE1ldGFkYXRhLmdldCh0YXJnZXRLZXkpOwogIGlmKCFrZXlNZXRhZGF0YSl7CiAgICBpZighY3JlYXRlKXJldHVybiB1bmRlZmluZWQ7CiAgICB0YXJnZXRNZXRhZGF0YS5zZXQodGFyZ2V0S2V5LCBrZXlNZXRhZGF0YSA9IG5ldyBNYXApOwogIH0gcmV0dXJuIGtleU1ldGFkYXRhOwp9Owp2YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBPLCBQKXsKICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTsKICByZXR1cm4gbWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogbWV0YWRhdGFNYXAuaGFzKE1ldGFkYXRhS2V5KTsKfTsKdmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBmdW5jdGlvbihNZXRhZGF0YUtleSwgTywgUCl7CiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7CiAgcmV0dXJuIG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBtZXRhZGF0YU1hcC5nZXQoTWV0YWRhdGFLZXkpOwp9Owp2YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlLCBPLCBQKXsKICBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIHRydWUpLnNldChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSk7Cn07CnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uKHRhcmdldCwgdGFyZ2V0S2V5KXsKICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKHRhcmdldCwgdGFyZ2V0S2V5LCBmYWxzZSkKICAgICwga2V5cyAgICAgICAgPSBbXTsKICBpZihtZXRhZGF0YU1hcCltZXRhZGF0YU1hcC5mb3JFYWNoKGZ1bmN0aW9uKF8sIGtleSl7IGtleXMucHVzaChrZXkpOyB9KTsKICByZXR1cm4ga2V5czsKfTsKdmFyIHRvTWV0YUtleSA9IGZ1bmN0aW9uKGl0KXsKICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6IFN0cmluZyhpdCk7Cn07CnZhciBleHAgPSBmdW5jdGlvbihPKXsKICAkZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCBPKTsKfTsKCm1vZHVsZS5leHBvcnRzID0gewogIHN0b3JlOiBzdG9yZSwKICBtYXA6IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAsCiAgaGFzOiBvcmRpbmFyeUhhc093bk1ldGFkYXRhLAogIGdldDogb3JkaW5hcnlHZXRPd25NZXRhZGF0YSwKICBzZXQ6IG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEsCiAga2V5czogb3JkaW5hcnlPd25NZXRhZGF0YUtleXMsCiAga2V5OiB0b01ldGFLZXksCiAgZXhwOiBleHAKfTsKfSx7Ii4vX2V4cG9ydCI6MTQ2LCIuL19zaGFyZWQiOjIwOCwiLi9lczYubWFwIjoyNjMsIi4vZXM2LndlYWstbWFwIjozNjl9XSwxNzg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNjZdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fY29mIjoxMzIsIi4vX2dsb2JhbCI6MTUyLCIuL190YXNrIjoyMTgsImR1cCI6NjZ9XSwxNzk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNjddWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fZmFpbHMiOjE0OCwiLi9faW9iamVjdCI6MTU5LCIuL19vYmplY3QtZ29wcyI6MTg3LCIuL19vYmplY3Qta2V5cyI6MTkwLCIuL19vYmplY3QtcGllIjoxOTEsIi4vX3RvLW9iamVjdCI6MjIzLCJkdXAiOjY3fV0sMTgwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzY4XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2FuLW9iamVjdCI6MTIxLCIuL19kb20tY3JlYXRlIjoxNDMsIi4vX2VudW0tYnVnLWtleXMiOjE0NCwiLi9faHRtbCI6MTU1LCIuL19vYmplY3QtZHBzIjoxODIsIi4vX3NoYXJlZC1rZXkiOjIwNywiZHVwIjo2OH1dLDE4MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs2OV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19hbi1vYmplY3QiOjEyMSwiLi9fZGVzY3JpcHRvcnMiOjE0MiwiLi9faWU4LWRvbS1kZWZpbmUiOjE1NiwiLi9fdG8tcHJpbWl0aXZlIjoyMjQsImR1cCI6Njl9XSwxODI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNzBdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fYW4tb2JqZWN0IjoxMjEsIi4vX2Rlc2NyaXB0b3JzIjoxNDIsIi4vX29iamVjdC1kcCI6MTgxLCIuL19vYmplY3Qta2V5cyI6MTkwLCJkdXAiOjcwfV0sMTgzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gRm9yY2VkIHJlcGxhY2VtZW50IHByb3RvdHlwZSBhY2Nlc3NvcnMgbWV0aG9kcwptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKXx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7CiAgdmFyIEsgPSBNYXRoLnJhbmRvbSgpOwogIC8vIEluIEZGIHRocm93cyBvbmx5IGRlZmluZSBtZXRob2RzCiAgX19kZWZpbmVTZXR0ZXJfXy5jYWxsKG51bGwsIEssIGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovfSk7CiAgZGVsZXRlIHJlcXVpcmUoJy4vX2dsb2JhbCcpW0tdOwp9KTsKfSx7Ii4vX2ZhaWxzIjoxNDgsIi4vX2dsb2JhbCI6MTUyLCIuL19saWJyYXJ5IjoxNzJ9XSwxODQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNzFdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fZGVzY3JpcHRvcnMiOjE0MiwiLi9faGFzIjoxNTMsIi4vX2llOC1kb20tZGVmaW5lIjoxNTYsIi4vX29iamVjdC1waWUiOjE5MSwiLi9fcHJvcGVydHktZGVzYyI6MTk5LCIuL190by1pb2JqZWN0IjoyMjEsIi4vX3RvLXByaW1pdGl2ZSI6MjI0LCJkdXAiOjcxfV0sMTg1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzcyXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX29iamVjdC1nb3BuIjoxODYsIi4vX3RvLWlvYmplY3QiOjIyMSwiZHVwIjo3Mn1dLDE4NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs3M11bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19lbnVtLWJ1Zy1rZXlzIjoxNDQsIi4vX29iamVjdC1rZXlzLWludGVybmFsIjoxODksImR1cCI6NzN9XSwxODc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNzRdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiZHVwIjo3NH1dLDE4ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs3NV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19oYXMiOjE1MywiLi9fc2hhcmVkLWtleSI6MjA3LCIuL190by1vYmplY3QiOjIyMywiZHVwIjo3NX1dLDE4OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs3Nl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19hcnJheS1pbmNsdWRlcyI6MTI1LCIuL19oYXMiOjE1MywiLi9fc2hhcmVkLWtleSI6MjA3LCIuL190by1pb2JqZWN0IjoyMjEsImR1cCI6NzZ9XSwxOTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNzddWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fZW51bS1idWcta2V5cyI6MTQ0LCIuL19vYmplY3Qta2V5cy1pbnRlcm5hbCI6MTg5LCJkdXAiOjc3fV0sMTkxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzc4XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7ImR1cCI6Nzh9XSwxOTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNzldWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fY29yZSI6MTM3LCIuL19leHBvcnQiOjE0NiwiLi9fZmFpbHMiOjE0OCwiZHVwIjo3OX1dLDE5MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBnZXRLZXlzICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpCiAgLCB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JykKICAsIGlzRW51bSAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGlzRW50cmllcyl7CiAgcmV0dXJuIGZ1bmN0aW9uKGl0KXsKICAgIHZhciBPICAgICAgPSB0b0lPYmplY3QoaXQpCiAgICAgICwga2V5cyAgID0gZ2V0S2V5cyhPKQogICAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoCiAgICAgICwgaSAgICAgID0gMAogICAgICAsIHJlc3VsdCA9IFtdCiAgICAgICwga2V5OwogICAgd2hpbGUobGVuZ3RoID4gaSlpZihpc0VudW0uY2FsbChPLCBrZXkgPSBrZXlzW2krK10pKXsKICAgICAgcmVzdWx0LnB1c2goaXNFbnRyaWVzID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7CiAgICB9IHJldHVybiByZXN1bHQ7CiAgfTsKfTsKfSx7Ii4vX29iamVjdC1rZXlzIjoxOTAsIi4vX29iamVjdC1waWUiOjE5MSwiLi9fdG8taW9iamVjdCI6MjIxfV0sMTk0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9scwp2YXIgZ09QTiAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpCiAgLCBnT1BTICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykKICAsIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIFJlZmxlY3QgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdDsKbW9kdWxlLmV4cG9ydHMgPSBSZWZsZWN0ICYmIFJlZmxlY3Qub3duS2V5cyB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KXsKICB2YXIga2V5cyAgICAgICA9IGdPUE4uZihhbk9iamVjdChpdCkpCiAgICAsIGdldFN5bWJvbHMgPSBnT1BTLmY7CiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzOwp9Owp9LHsiLi9fYW4tb2JqZWN0IjoxMjEsIi4vX2dsb2JhbCI6MTUyLCIuL19vYmplY3QtZ29wbiI6MTg2LCIuL19vYmplY3QtZ29wcyI6MTg3fV0sMTk1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VGbG9hdAogICwgJHRyaW0gICAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07Cgptb2R1bGUuZXhwb3J0cyA9IDEgLyAkcGFyc2VGbG9hdChyZXF1aXJlKCcuL19zdHJpbmctd3MnKSArICctMCcpICE9PSAtSW5maW5pdHkgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cil7CiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKQogICAgLCByZXN1bHQgPSAkcGFyc2VGbG9hdChzdHJpbmcpOwogIHJldHVybiByZXN1bHQgPT09IDAgJiYgc3RyaW5nLmNoYXJBdCgwKSA9PSAnLScgPyAtMCA6IHJlc3VsdDsKfSA6ICRwYXJzZUZsb2F0Owp9LHsiLi9fZ2xvYmFsIjoxNTIsIi4vX3N0cmluZy10cmltIjoyMTYsIi4vX3N0cmluZy13cyI6MjE3fV0sMTk2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlSW50CiAgLCAkdHJpbSAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW0KICAsIHdzICAgICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpCiAgLCBoZXggICAgICAgPSAvXltcLStdPzBbeFhdLzsKCm1vZHVsZS5leHBvcnRzID0gJHBhcnNlSW50KHdzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdzICsgJzB4MTYnKSAhPT0gMjIgPyBmdW5jdGlvbiBwYXJzZUludChzdHIsIHJhZGl4KXsKICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpOwogIHJldHVybiAkcGFyc2VJbnQoc3RyaW5nLCAocmFkaXggPj4+IDApIHx8IChoZXgudGVzdChzdHJpbmcpID8gMTYgOiAxMCkpOwp9IDogJHBhcnNlSW50Owp9LHsiLi9fZ2xvYmFsIjoxNTIsIi4vX3N0cmluZy10cmltIjoyMTYsIi4vX3N0cmluZy13cyI6MjE3fV0sMTk3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgcGF0aCAgICAgID0gcmVxdWlyZSgnLi9fcGF0aCcpCiAgLCBpbnZva2UgICAgPSByZXF1aXJlKCcuL19pbnZva2UnKQogICwgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKC8qIC4uLnBhcmdzICovKXsKICB2YXIgZm4gICAgID0gYUZ1bmN0aW9uKHRoaXMpCiAgICAsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgKICAgICwgcGFyZ3MgID0gQXJyYXkobGVuZ3RoKQogICAgLCBpICAgICAgPSAwCiAgICAsIF8gICAgICA9IHBhdGguXwogICAgLCBob2xkZXIgPSBmYWxzZTsKICB3aGlsZShsZW5ndGggPiBpKWlmKChwYXJnc1tpXSA9IGFyZ3VtZW50c1tpKytdKSA9PT0gXylob2xkZXIgPSB0cnVlOwogIHJldHVybiBmdW5jdGlvbigvKiAuLi5hcmdzICovKXsKICAgIHZhciB0aGF0ID0gdGhpcwogICAgICAsIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoCiAgICAgICwgaiA9IDAsIGsgPSAwLCBhcmdzOwogICAgaWYoIWhvbGRlciAmJiAhYUxlbilyZXR1cm4gaW52b2tlKGZuLCBwYXJncywgdGhhdCk7CiAgICBhcmdzID0gcGFyZ3Muc2xpY2UoKTsKICAgIGlmKGhvbGRlcilmb3IoO2xlbmd0aCA+IGo7IGorKylpZihhcmdzW2pdID09PSBfKWFyZ3Nbal0gPSBhcmd1bWVudHNbaysrXTsKICAgIHdoaWxlKGFMZW4gPiBrKWFyZ3MucHVzaChhcmd1bWVudHNbaysrXSk7CiAgICByZXR1cm4gaW52b2tlKGZuLCBhcmdzLCB0aGF0KTsKICB9Owp9Owp9LHsiLi9fYS1mdW5jdGlvbiI6MTE3LCIuL19pbnZva2UiOjE1OCwiLi9fcGF0aCI6MTk4fV0sMTk4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19nbG9iYWwnKTsKfSx7Ii4vX2dsb2JhbCI6MTUyfV0sMTk5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzgwXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7ImR1cCI6ODB9XSwyMDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRhcmdldCwgc3JjLCBzYWZlKXsKICBmb3IodmFyIGtleSBpbiBzcmMpcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTsKICByZXR1cm4gdGFyZ2V0Owp9Owp9LHsiLi9fcmVkZWZpbmUiOjIwMX1dLDIwMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBnbG9iYWwgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgaGlkZSAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpCiAgLCBoYXMgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKQogICwgU1JDICAgICAgID0gcmVxdWlyZSgnLi9fdWlkJykoJ3NyYycpCiAgLCBUT19TVFJJTkcgPSAndG9TdHJpbmcnCiAgLCAkdG9TdHJpbmcgPSBGdW5jdGlvbltUT19TVFJJTkddCiAgLCBUUEwgICAgICAgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7CgpyZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uKGl0KXsKICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpOwp9OwoKKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTywga2V5LCB2YWwsIHNhZmUpewogIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nOwogIGlmKGlzRnVuY3Rpb24paGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpOwogIGlmKE9ba2V5XSA9PT0gdmFsKXJldHVybjsKICBpZihpc0Z1bmN0aW9uKWhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpOwogIGlmKE8gPT09IGdsb2JhbCl7CiAgICBPW2tleV0gPSB2YWw7CiAgfSBlbHNlIHsKICAgIGlmKCFzYWZlKXsKICAgICAgZGVsZXRlIE9ba2V5XTsKICAgICAgaGlkZShPLCBrZXksIHZhbCk7CiAgICB9IGVsc2UgewogICAgICBpZihPW2tleV0pT1trZXldID0gdmFsOwogICAgICBlbHNlIGhpZGUoTywga2V5LCB2YWwpOwogICAgfQogIH0KLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlCn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpewogIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTsKfSk7Cn0seyIuL19jb3JlIjoxMzcsIi4vX2dsb2JhbCI6MTUyLCIuL19oYXMiOjE1MywiLi9faGlkZSI6MTU0LCIuL191aWQiOjIyOH1dLDIwMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocmVnRXhwLCByZXBsYWNlKXsKICB2YXIgcmVwbGFjZXIgPSByZXBsYWNlID09PSBPYmplY3QocmVwbGFjZSkgPyBmdW5jdGlvbihwYXJ0KXsKICAgIHJldHVybiByZXBsYWNlW3BhcnRdOwogIH0gOiByZXBsYWNlOwogIHJldHVybiBmdW5jdGlvbihpdCl7CiAgICByZXR1cm4gU3RyaW5nKGl0KS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZXIpOwogIH07Cn07Cn0se31dLDIwMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDcuMi45IFNhbWVWYWx1ZSh4LCB5KQptb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KXsKICByZXR1cm4geCA9PT0geSA/IHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5IDogeCAhPSB4ICYmIHkgIT0geTsKfTsKfSx7fV0sMjA0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzgzXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2FuLW9iamVjdCI6MTIxLCIuL19jdHgiOjEzOSwiLi9faXMtb2JqZWN0IjoxNjMsIi4vX29iamVjdC1nb3BkIjoxODQsImR1cCI6ODN9XSwyMDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBnbG9iYWwgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgLCBkUCAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpCiAgLCBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykKICAsIFNQRUNJRVMgICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZKXsKICB2YXIgQyA9IGdsb2JhbFtLRVldOwogIGlmKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pZFAuZihDLCBTUEVDSUVTLCB7CiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9CiAgfSk7Cn07Cn0seyIuL19kZXNjcmlwdG9ycyI6MTQyLCIuL19nbG9iYWwiOjE1MiwiLi9fb2JqZWN0LWRwIjoxODEsIi4vX3drcyI6MjMxfV0sMjA2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzg1XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2hhcyI6MTUzLCIuL19vYmplY3QtZHAiOjE4MSwiLi9fd2tzIjoyMzEsImR1cCI6ODV9XSwyMDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bODZdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fc2hhcmVkIjoyMDgsIi4vX3VpZCI6MjI4LCJkdXAiOjg2fV0sMjA4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzg3XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2dsb2JhbCI6MTUyLCJkdXAiOjg3fV0sMjA5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzg4XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2EtZnVuY3Rpb24iOjExNywiLi9fYW4tb2JqZWN0IjoxMjEsIi4vX3drcyI6MjMxLCJkdXAiOjg4fV0sMjEwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obWV0aG9kLCBhcmcpewogIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbigpewogICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24oKXt9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpOwogIH0pOwp9Owp9LHsiLi9fZmFpbHMiOjE0OH1dLDIxMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs4OV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19kZWZpbmVkIjoxNDEsIi4vX3RvLWludGVnZXIiOjIyMCwiZHVwIjo4OX1dLDIxMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGhlbHBlciBmb3IgU3RyaW5nI3tzdGFydHNXaXRoLCBlbmRzV2l0aCwgaW5jbHVkZXN9CnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpCiAgLCBkZWZpbmVkICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgc2VhcmNoU3RyaW5nLCBOQU1FKXsKICBpZihpc1JlZ0V4cChzZWFyY2hTdHJpbmcpKXRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgIiBkb2Vzbid0IGFjY2VwdCByZWdleCEiKTsKICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpOwp9Owp9LHsiLi9fZGVmaW5lZCI6MTQxLCIuL19pcy1yZWdleHAiOjE2NH1dLDIxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGZhaWxzICAgPSByZXF1aXJlKCcuL19mYWlscycpCiAgLCBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpCiAgLCBxdW90ICAgID0gLyIvZzsKLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpCnZhciBjcmVhdGVIVE1MID0gZnVuY3Rpb24oc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpIHsKICB2YXIgUyAgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKQogICAgLCBwMSA9ICc8JyArIHRhZzsKICBpZihhdHRyaWJ1dGUgIT09ICcnKXAxICs9ICcgJyArIGF0dHJpYnV0ZSArICc9IicgKyBTdHJpbmcodmFsdWUpLnJlcGxhY2UocXVvdCwgJyZxdW90OycpICsgJyInOwogIHJldHVybiBwMSArICc+JyArIFMgKyAnPC8nICsgdGFnICsgJz4nOwp9Owptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE5BTUUsIGV4ZWMpewogIHZhciBPID0ge307CiAgT1tOQU1FXSA9IGV4ZWMoY3JlYXRlSFRNTCk7CiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbigpewogICAgdmFyIHRlc3QgPSAnJ1tOQU1FXSgnIicpOwogICAgcmV0dXJuIHRlc3QgIT09IHRlc3QudG9Mb3dlckNhc2UoKSB8fCB0ZXN0LnNwbGl0KCciJykubGVuZ3RoID4gMzsKICB9KSwgJ1N0cmluZycsIE8pOwp9Owp9LHsiLi9fZGVmaW5lZCI6MTQxLCIuL19leHBvcnQiOjE0NiwiLi9fZmFpbHMiOjE0OH1dLDIxNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kCnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpCiAgLCByZXBlYXQgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKQogICwgZGVmaW5lZCAgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRoYXQsIG1heExlbmd0aCwgZmlsbFN0cmluZywgbGVmdCl7CiAgdmFyIFMgICAgICAgICAgICA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKQogICAgLCBzdHJpbmdMZW5ndGggPSBTLmxlbmd0aAogICAgLCBmaWxsU3RyICAgICAgPSBmaWxsU3RyaW5nID09PSB1bmRlZmluZWQgPyAnICcgOiBTdHJpbmcoZmlsbFN0cmluZykKICAgICwgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTsKICBpZihpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpcmV0dXJuIFM7CiAgdmFyIGZpbGxMZW4gPSBpbnRNYXhMZW5ndGggLSBzdHJpbmdMZW5ndGgKICAgICwgc3RyaW5nRmlsbGVyID0gcmVwZWF0LmNhbGwoZmlsbFN0ciwgTWF0aC5jZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpOwogIGlmKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKXN0cmluZ0ZpbGxlciA9IHN0cmluZ0ZpbGxlci5zbGljZSgwLCBmaWxsTGVuKTsKICByZXR1cm4gbGVmdCA/IHN0cmluZ0ZpbGxlciArIFMgOiBTICsgc3RyaW5nRmlsbGVyOwp9OwoKfSx7Ii4vX2RlZmluZWQiOjE0MSwiLi9fc3RyaW5nLXJlcGVhdCI6MjE1LCIuL190by1sZW5ndGgiOjIyMn1dLDIxNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKQogICwgZGVmaW5lZCAgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpewogIHZhciBzdHIgPSBTdHJpbmcoZGVmaW5lZCh0aGlzKSkKICAgICwgcmVzID0gJycKICAgICwgbiAgID0gdG9JbnRlZ2VyKGNvdW50KTsKICBpZihuIDwgMCB8fCBuID09IEluZmluaXR5KXRocm93IFJhbmdlRXJyb3IoIkNvdW50IGNhbid0IGJlIG5lZ2F0aXZlIik7CiAgZm9yKDtuID4gMDsgKG4gPj4+PSAxKSAmJiAoc3RyICs9IHN0cikpaWYobiAmIDEpcmVzICs9IHN0cjsKICByZXR1cm4gcmVzOwp9Owp9LHsiLi9fZGVmaW5lZCI6MTQxLCIuL190by1pbnRlZ2VyIjoyMjB9XSwyMTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpCiAgLCBmYWlscyAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKQogICwgc3BhY2VzICA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpCiAgLCBzcGFjZSAgID0gJ1snICsgc3BhY2VzICsgJ10nCiAgLCBub24gICAgID0gJ1x1MjAwYlx1MDA4NScKICAsIGx0cmltICAgPSBSZWdFeHAoJ14nICsgc3BhY2UgKyBzcGFjZSArICcqJykKICAsIHJ0cmltICAgPSBSZWdFeHAoc3BhY2UgKyBzcGFjZSArICcqJCcpOwoKdmFyIGV4cG9ydGVyID0gZnVuY3Rpb24oS0VZLCBleGVjLCBBTElBUyl7CiAgdmFyIGV4cCAgID0ge307CiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24oKXsKICAgIHJldHVybiAhIXNwYWNlc1tLRVldKCkgfHwgbm9uW0tFWV0oKSAhPSBub247CiAgfSk7CiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTsKICBpZihBTElBUylleHBbQUxJQVNdID0gZm47CiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRSwgJ1N0cmluZycsIGV4cCk7Cn07CgovLyAxIC0+IFN0cmluZyN0cmltTGVmdAovLyAyIC0+IFN0cmluZyN0cmltUmlnaHQKLy8gMyAtPiBTdHJpbmcjdHJpbQp2YXIgdHJpbSA9IGV4cG9ydGVyLnRyaW0gPSBmdW5jdGlvbihzdHJpbmcsIFRZUEUpewogIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpOwogIGlmKFRZUEUgJiAxKXN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGx0cmltLCAnJyk7CiAgaWYoVFlQRSAmIDIpc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTsKICByZXR1cm4gc3RyaW5nOwp9OwoKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlcjsKfSx7Ii4vX2RlZmluZWQiOjE0MSwiLi9fZXhwb3J0IjoxNDYsIi4vX2ZhaWxzIjoxNDgsIi4vX3N0cmluZy13cyI6MjE3fV0sMjE3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSAnXHgwOVx4MEFceDBCXHgwQ1x4MERceDIwXHhBMFx1MTY4MFx1MTgwRVx1MjAwMFx1MjAwMVx1MjAwMlx1MjAwMycgKwogICdcdTIwMDRcdTIwMDVcdTIwMDZcdTIwMDdcdTIwMDhcdTIwMDlcdTIwMEFcdTIwMkZcdTIwNUZcdTMwMDBcdTIwMjhcdTIwMjlcdUZFRkYnOwp9LHt9XSwyMTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bOTBdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fY29mIjoxMzIsIi4vX2N0eCI6MTM5LCIuL19kb20tY3JlYXRlIjoxNDMsIi4vX2dsb2JhbCI6MTUyLCIuL19odG1sIjoxNTUsIi4vX2ludm9rZSI6MTU4LCJkdXAiOjkwfV0sMjE5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzkxXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX3RvLWludGVnZXIiOjIyMCwiZHVwIjo5MX1dLDIyMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs5Ml1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyJkdXAiOjkyfV0sMjIxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzkzXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2RlZmluZWQiOjE0MSwiLi9faW9iamVjdCI6MTU5LCJkdXAiOjkzfV0sMjIyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzk0XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX3RvLWludGVnZXIiOjIyMCwiZHVwIjo5NH1dLDIyMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs5NV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19kZWZpbmVkIjoxNDEsImR1cCI6OTV9XSwyMjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bOTZdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9faXMtb2JqZWN0IjoxNjMsImR1cCI6OTZ9XSwyMjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CmlmKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykpewogIHZhciBMSUJSQVJZICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpCiAgICAsIGdsb2JhbCAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICAgLCBmYWlscyAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKQogICAgLCAkZXhwb3J0ICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAgICwgJHR5cGVkICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3R5cGVkJykKICAgICwgJGJ1ZmZlciAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpCiAgICAsIGN0eCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKQogICAgLCBhbkluc3RhbmNlICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKQogICAgLCBwcm9wZXJ0eURlc2MgICAgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpCiAgICAsIGhpZGUgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJykKICAgICwgcmVkZWZpbmVBbGwgICAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpCiAgICAsIHRvSW50ZWdlciAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJykKICAgICwgdG9MZW5ndGggICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpCiAgICAsIHRvSW5kZXggICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1pbmRleCcpCiAgICAsIHRvUHJpbWl0aXZlICAgICAgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKQogICAgLCBoYXMgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJykKICAgICwgc2FtZSAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKQogICAgLCBjbGFzc29mICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpCiAgICAsIGlzT2JqZWN0ICAgICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICAgLCB0b09iamVjdCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JykKICAgICwgaXNBcnJheUl0ZXIgICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKQogICAgLCBjcmVhdGUgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpCiAgICAsIGdldFByb3RvdHlwZU9mICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJykKICAgICwgZ09QTiAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZgogICAgLCBnZXRJdGVyRm4gICAgICAgICAgID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKQogICAgLCB1aWQgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdWlkJykKICAgICwgd2tzICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3drcycpCiAgICAsIGNyZWF0ZUFycmF5TWV0aG9kICAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykKICAgICwgY3JlYXRlQXJyYXlJbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykKICAgICwgc3BlY2llc0NvbnN0cnVjdG9yICA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKQogICAgLCBBcnJheUl0ZXJhdG9ycyAgICAgID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKQogICAgLCBJdGVyYXRvcnMgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJykKICAgICwgJGl0ZXJEZXRlY3QgICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykKICAgICwgc2V0U3BlY2llcyAgICAgICAgICA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykKICAgICwgYXJyYXlGaWxsICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKQogICAgLCBhcnJheUNvcHlXaXRoaW4gICAgID0gcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKQogICAgLCAkRFAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykKICAgICwgJEdPUEQgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykKICAgICwgZFAgICAgICAgICAgICAgICAgICA9ICREUC5mCiAgICAsIGdPUEQgICAgICAgICAgICAgICAgPSAkR09QRC5mCiAgICAsIFJhbmdlRXJyb3IgICAgICAgICAgPSBnbG9iYWwuUmFuZ2VFcnJvcgogICAgLCBUeXBlRXJyb3IgICAgICAgICAgID0gZ2xvYmFsLlR5cGVFcnJvcgogICAgLCBVaW50OEFycmF5ICAgICAgICAgID0gZ2xvYmFsLlVpbnQ4QXJyYXkKICAgICwgQVJSQVlfQlVGRkVSICAgICAgICA9ICdBcnJheUJ1ZmZlcicKICAgICwgU0hBUkVEX0JVRkZFUiAgICAgICA9ICdTaGFyZWQnICsgQVJSQVlfQlVGRkVSCiAgICAsIEJZVEVTX1BFUl9FTEVNRU5UICAgPSAnQllURVNfUEVSX0VMRU1FTlQnCiAgICAsIFBST1RPVFlQRSAgICAgICAgICAgPSAncHJvdG90eXBlJwogICAgLCBBcnJheVByb3RvICAgICAgICAgID0gQXJyYXlbUFJPVE9UWVBFXQogICAgLCAkQXJyYXlCdWZmZXIgICAgICAgID0gJGJ1ZmZlci5BcnJheUJ1ZmZlcgogICAgLCAkRGF0YVZpZXcgICAgICAgICAgID0gJGJ1ZmZlci5EYXRhVmlldwogICAgLCBhcnJheUZvckVhY2ggICAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoMCkKICAgICwgYXJyYXlGaWx0ZXIgICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDIpCiAgICAsIGFycmF5U29tZSAgICAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCgzKQogICAgLCBhcnJheUV2ZXJ5ICAgICAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoNCkKICAgICwgYXJyYXlGaW5kICAgICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpCiAgICAsIGFycmF5RmluZEluZGV4ICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCg2KQogICAgLCBhcnJheUluY2x1ZGVzICAgICAgID0gY3JlYXRlQXJyYXlJbmNsdWRlcyh0cnVlKQogICAgLCBhcnJheUluZGV4T2YgICAgICAgID0gY3JlYXRlQXJyYXlJbmNsdWRlcyhmYWxzZSkKICAgICwgYXJyYXlWYWx1ZXMgICAgICAgICA9IEFycmF5SXRlcmF0b3JzLnZhbHVlcwogICAgLCBhcnJheUtleXMgICAgICAgICAgID0gQXJyYXlJdGVyYXRvcnMua2V5cwogICAgLCBhcnJheUVudHJpZXMgICAgICAgID0gQXJyYXlJdGVyYXRvcnMuZW50cmllcwogICAgLCBhcnJheUxhc3RJbmRleE9mICAgID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZgogICAgLCBhcnJheVJlZHVjZSAgICAgICAgID0gQXJyYXlQcm90by5yZWR1Y2UKICAgICwgYXJyYXlSZWR1Y2VSaWdodCAgICA9IEFycmF5UHJvdG8ucmVkdWNlUmlnaHQKICAgICwgYXJyYXlKb2luICAgICAgICAgICA9IEFycmF5UHJvdG8uam9pbgogICAgLCBhcnJheVNvcnQgICAgICAgICAgID0gQXJyYXlQcm90by5zb3J0CiAgICAsIGFycmF5U2xpY2UgICAgICAgICAgPSBBcnJheVByb3RvLnNsaWNlCiAgICAsIGFycmF5VG9TdHJpbmcgICAgICAgPSBBcnJheVByb3RvLnRvU3RyaW5nCiAgICAsIGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBBcnJheVByb3RvLnRvTG9jYWxlU3RyaW5nCiAgICAsIElURVJBVE9SICAgICAgICAgICAgPSB3a3MoJ2l0ZXJhdG9yJykKICAgICwgVEFHICAgICAgICAgICAgICAgICA9IHdrcygndG9TdHJpbmdUYWcnKQogICAgLCBUWVBFRF9DT05TVFJVQ1RPUiAgID0gdWlkKCd0eXBlZF9jb25zdHJ1Y3RvcicpCiAgICAsIERFRl9DT05TVFJVQ1RPUiAgICAgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpCiAgICAsIEFMTF9DT05TVFJVQ1RPUlMgICAgPSAkdHlwZWQuQ09OU1RSCiAgICAsIFRZUEVEX0FSUkFZICAgICAgICAgPSAkdHlwZWQuVFlQRUQKICAgICwgVklFVyAgICAgICAgICAgICAgICA9ICR0eXBlZC5WSUVXCiAgICAsIFdST05HX0xFTkdUSCAgICAgICAgPSAnV3JvbmcgbGVuZ3RoISc7CgogIHZhciAkbWFwID0gY3JlYXRlQXJyYXlNZXRob2QoMSwgZnVuY3Rpb24oTywgbGVuZ3RoKXsKICAgIHJldHVybiBhbGxvY2F0ZShzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGVuZ3RoKTsKICB9KTsKCiAgdmFyIExJVFRMRV9FTkRJQU4gPSBmYWlscyhmdW5jdGlvbigpewogICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG5ldyBVaW50MTZBcnJheShbMV0pLmJ1ZmZlcilbMF0gPT09IDE7CiAgfSk7CgogIHZhciBGT1JDRURfU0VUID0gISFVaW50OEFycmF5ICYmICEhVWludDhBcnJheVtQUk9UT1RZUEVdLnNldCAmJiBmYWlscyhmdW5jdGlvbigpewogICAgbmV3IFVpbnQ4QXJyYXkoMSkuc2V0KHt9KTsKICB9KTsKCiAgdmFyIHN0cmljdFRvTGVuZ3RoID0gZnVuY3Rpb24oaXQsIFNBTUUpewogICAgaWYoaXQgPT09IHVuZGVmaW5lZCl0aHJvdyBUeXBlRXJyb3IoV1JPTkdfTEVOR1RIKTsKICAgIHZhciBudW1iZXIgPSAraXQKICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChpdCk7CiAgICBpZihTQU1FICYmICFzYW1lKG51bWJlciwgbGVuZ3RoKSl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7CiAgICByZXR1cm4gbGVuZ3RoOwogIH07CgogIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uKGl0LCBCWVRFUyl7CiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTsKICAgIGlmKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICUgQllURVMpdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpOwogICAgcmV0dXJuIG9mZnNldDsKICB9OwoKICB2YXIgdmFsaWRhdGUgPSBmdW5jdGlvbihpdCl7CiAgICBpZihpc09iamVjdChpdCkgJiYgVFlQRURfQVJSQVkgaW4gaXQpcmV0dXJuIGl0OwogICAgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSB0eXBlZCBhcnJheSEnKTsKICB9OwoKICB2YXIgYWxsb2NhdGUgPSBmdW5jdGlvbihDLCBsZW5ndGgpewogICAgaWYoIShpc09iamVjdChDKSAmJiBUWVBFRF9DT05TVFJVQ1RPUiBpbiBDKSl7CiAgICAgIHRocm93IFR5cGVFcnJvcignSXQgaXMgbm90IGEgdHlwZWQgYXJyYXkgY29uc3RydWN0b3IhJyk7CiAgICB9IHJldHVybiBuZXcgQyhsZW5ndGgpOwogIH07CgogIHZhciBzcGVjaWVzRnJvbUxpc3QgPSBmdW5jdGlvbihPLCBsaXN0KXsKICAgIHJldHVybiBmcm9tTGlzdChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGlzdCk7CiAgfTsKCiAgdmFyIGZyb21MaXN0ID0gZnVuY3Rpb24oQywgbGlzdCl7CiAgICB2YXIgaW5kZXggID0gMAogICAgICAsIGxlbmd0aCA9IGxpc3QubGVuZ3RoCiAgICAgICwgcmVzdWx0ID0gYWxsb2NhdGUoQywgbGVuZ3RoKTsKICAgIHdoaWxlKGxlbmd0aCA+IGluZGV4KXJlc3VsdFtpbmRleF0gPSBsaXN0W2luZGV4KytdOwogICAgcmV0dXJuIHJlc3VsdDsKICB9OwoKICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24oaXQsIGtleSwgaW50ZXJuYWwpewogICAgZFAoaXQsIGtleSwge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9fSk7CiAgfTsKCiAgdmFyICRmcm9tID0gZnVuY3Rpb24gZnJvbShzb3VyY2UgLyosIG1hcGZuLCB0aGlzQXJnICovKXsKICAgIHZhciBPICAgICAgID0gdG9PYmplY3Qoc291cmNlKQogICAgICAsIGFMZW4gICAgPSBhcmd1bWVudHMubGVuZ3RoCiAgICAgICwgbWFwZm4gICA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkCiAgICAgICwgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQKICAgICAgLCBpdGVyRm4gID0gZ2V0SXRlckZuKE8pCiAgICAgICwgaSwgbGVuZ3RoLCB2YWx1ZXMsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7CiAgICBpZihpdGVyRm4gIT0gdW5kZWZpbmVkICYmICFpc0FycmF5SXRlcihpdGVyRm4pKXsKICAgICAgZm9yKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHZhbHVlcyA9IFtdLCBpID0gMDsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpKyspewogICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpOwogICAgICB9IE8gPSB2YWx1ZXM7CiAgICB9CiAgICBpZihtYXBwaW5nICYmIGFMZW4gPiAyKW1hcGZuID0gY3R4KG1hcGZuLCBhcmd1bWVudHNbMl0sIDIpOwogICAgZm9yKGkgPSAwLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCksIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7IGxlbmd0aCA+IGk7IGkrKyl7CiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07CiAgICB9CiAgICByZXR1cm4gcmVzdWx0OwogIH07CgogIHZhciAkb2YgPSBmdW5jdGlvbiBvZigvKi4uLml0ZW1zKi8pewogICAgdmFyIGluZGV4ICA9IDAKICAgICAgLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoCiAgICAgICwgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTsKICAgIHdoaWxlKGxlbmd0aCA+IGluZGV4KXJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107CiAgICByZXR1cm4gcmVzdWx0OwogIH07CgogIC8vIGlPUyBTYWZhcmkgNi54IGZhaWxzIGhlcmUKICB2YXIgVE9fTE9DQUxFX0JVRyA9ICEhVWludDhBcnJheSAmJiBmYWlscyhmdW5jdGlvbigpeyBhcnJheVRvTG9jYWxlU3RyaW5nLmNhbGwobmV3IFVpbnQ4QXJyYXkoMSkpOyB9KTsKCiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCl7CiAgICByZXR1cm4gYXJyYXlUb0xvY2FsZVN0cmluZy5hcHBseShUT19MT0NBTEVfQlVHID8gYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpKSA6IHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpOwogIH07CgogIHZhciBwcm90byA9IHsKICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiwgZW5kICovKXsKICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7CiAgICB9LAogICAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyosIHRoaXNBcmcgKi8pewogICAgICByZXR1cm4gYXJyYXlFdmVyeSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpOwogICAgfSwKICAgIGZpbGw6IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyosIHN0YXJ0LCBlbmQgKi8peyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzCiAgICAgIHJldHVybiBhcnJheUZpbGwuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7CiAgICB9LAogICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiwgdGhpc0FyZyAqLyl7CiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sCiAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTsKICAgIH0sCiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiwgdGhpc0FyZyAqLyl7CiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpOwogICAgfSwKICAgIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSAvKiwgdGhpc0FyZyAqLyl7CiAgICAgIHJldHVybiBhcnJheUZpbmRJbmRleCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7CiAgICB9LAogICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qLCB0aGlzQXJnICovKXsKICAgICAgYXJyYXlGb3JFYWNoKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7CiAgICB9LAogICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXggKi8pewogICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7CiAgICB9LAogICAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCAqLyl7CiAgICAgIHJldHVybiBhcnJheUluY2x1ZGVzKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7CiAgICB9LAogICAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzCiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7CiAgICB9LAogICAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCAqLyl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMKICAgICAgcmV0dXJuIGFycmF5TGFzdEluZGV4T2YuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7CiAgICB9LAogICAgbWFwOiBmdW5jdGlvbiBtYXAobWFwZm4gLyosIHRoaXNBcmcgKi8pewogICAgICByZXR1cm4gJG1hcCh2YWxpZGF0ZSh0aGlzKSwgbWFwZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTsKICAgIH0sCiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qLCBpbml0aWFsVmFsdWUgKi8peyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzCiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTsKICAgIH0sCiAgICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiwgaW5pdGlhbFZhbHVlICovKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFycwogICAgICByZXR1cm4gYXJyYXlSZWR1Y2VSaWdodC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTsKICAgIH0sCiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCl7CiAgICAgIHZhciB0aGF0ICAgPSB0aGlzCiAgICAgICAgLCBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGgKICAgICAgICAsIG1pZGRsZSA9IE1hdGguZmxvb3IobGVuZ3RoIC8gMikKICAgICAgICAsIGluZGV4ICA9IDAKICAgICAgICAsIHZhbHVlOwogICAgICB3aGlsZShpbmRleCA8IG1pZGRsZSl7CiAgICAgICAgdmFsdWUgICAgICAgICA9IHRoYXRbaW5kZXhdOwogICAgICAgIHRoYXRbaW5kZXgrK10gPSB0aGF0Wy0tbGVuZ3RoXTsKICAgICAgICB0aGF0W2xlbmd0aF0gID0gdmFsdWU7CiAgICAgIH0gcmV0dXJuIHRoYXQ7CiAgICB9LAogICAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qLCB0aGlzQXJnICovKXsKICAgICAgcmV0dXJuIGFycmF5U29tZSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpOwogICAgfSwKICAgIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKXsKICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pOwogICAgfSwKICAgIHN1YmFycmF5OiBmdW5jdGlvbiBzdWJhcnJheShiZWdpbiwgZW5kKXsKICAgICAgdmFyIE8gICAgICA9IHZhbGlkYXRlKHRoaXMpCiAgICAgICAgLCBsZW5ndGggPSBPLmxlbmd0aAogICAgICAgICwgJGJlZ2luID0gdG9JbmRleChiZWdpbiwgbGVuZ3RoKTsKICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKAogICAgICAgIE8uYnVmZmVyLAogICAgICAgIE8uYnl0ZU9mZnNldCArICRiZWdpbiAqIE8uQllURVNfUEVSX0VMRU1FTlQsCiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9JbmRleChlbmQsIGxlbmd0aCkpIC0gJGJlZ2luKQogICAgICApOwogICAgfQogIH07CgogIHZhciAkc2xpY2UgPSBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKXsKICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7CiAgfTsKCiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qLCBvZmZzZXQgKi8pewogICAgdmFsaWRhdGUodGhpcyk7CiAgICB2YXIgb2Zmc2V0ID0gdG9PZmZzZXQoYXJndW1lbnRzWzFdLCAxKQogICAgICAsIGxlbmd0aCA9IHRoaXMubGVuZ3RoCiAgICAgICwgc3JjICAgID0gdG9PYmplY3QoYXJyYXlMaWtlKQogICAgICAsIGxlbiAgICA9IHRvTGVuZ3RoKHNyYy5sZW5ndGgpCiAgICAgICwgaW5kZXggID0gMDsKICAgIGlmKGxlbiArIG9mZnNldCA+IGxlbmd0aCl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7CiAgICB3aGlsZShpbmRleCA8IGxlbil0aGlzW29mZnNldCArIGluZGV4XSA9IHNyY1tpbmRleCsrXTsKICB9OwoKICB2YXIgJGl0ZXJhdG9ycyA9IHsKICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKXsKICAgICAgcmV0dXJuIGFycmF5RW50cmllcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTsKICAgIH0sCiAgICBrZXlzOiBmdW5jdGlvbiBrZXlzKCl7CiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7CiAgICB9LAogICAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKXsKICAgICAgcmV0dXJuIGFycmF5VmFsdWVzLmNhbGwodmFsaWRhdGUodGhpcykpOwogICAgfQogIH07CgogIHZhciBpc1RBSW5kZXggPSBmdW5jdGlvbih0YXJnZXQsIGtleSl7CiAgICByZXR1cm4gaXNPYmplY3QodGFyZ2V0KQogICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldCiAgICAgICYmIHR5cGVvZiBrZXkgIT0gJ3N5bWJvbCcKICAgICAgJiYga2V5IGluIHRhcmdldAogICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7CiAgfTsKICB2YXIgJGdldERlc2MgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpewogICAgcmV0dXJuIGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpCiAgICAgID8gcHJvcGVydHlEZXNjKDIsIHRhcmdldFtrZXldKQogICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpOwogIH07CiAgdmFyICRzZXREZXNjID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2MpewogICAgaWYoaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSkKICAgICAgJiYgaXNPYmplY3QoZGVzYykKICAgICAgJiYgaGFzKGRlc2MsICd2YWx1ZScpCiAgICAgICYmICFoYXMoZGVzYywgJ2dldCcpCiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpCiAgICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzCiAgICAgICYmICFkZXNjLmNvbmZpZ3VyYWJsZQogICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKQogICAgICAmJiAoIWhhcyhkZXNjLCAnZW51bWVyYWJsZScpIHx8IGRlc2MuZW51bWVyYWJsZSkKICAgICl7CiAgICAgIHRhcmdldFtrZXldID0gZGVzYy52YWx1ZTsKICAgICAgcmV0dXJuIHRhcmdldDsKICAgIH0gZWxzZSByZXR1cm4gZFAodGFyZ2V0LCBrZXksIGRlc2MpOwogIH07CgogIGlmKCFBTExfQ09OU1RSVUNUT1JTKXsKICAgICRHT1BELmYgPSAkZ2V0RGVzYzsKICAgICREUC5mICAgPSAkc2V0RGVzYzsKICB9CgogICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7CiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXREZXNjLAogICAgZGVmaW5lUHJvcGVydHk6ICAgICAgICAgICAkc2V0RGVzYwogIH0pOwoKICBpZihmYWlscyhmdW5jdGlvbigpeyBhcnJheVRvU3RyaW5nLmNhbGwoe30pOyB9KSl7CiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCl7CiAgICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0aGlzKTsKICAgIH0KICB9CgogIHZhciAkVHlwZWRBcnJheVByb3RvdHlwZSQgPSByZWRlZmluZUFsbCh7fSwgcHJvdG8pOwogIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJGl0ZXJhdG9ycyk7CiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7CiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCB7CiAgICBzbGljZTogICAgICAgICAgJHNsaWNlLAogICAgc2V0OiAgICAgICAgICAgICRzZXQsCiAgICBjb25zdHJ1Y3RvcjogICAgZnVuY3Rpb24oKXsgLyogbm9vcCAqLyB9LAogICAgdG9TdHJpbmc6ICAgICAgIGFycmF5VG9TdHJpbmcsCiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nCiAgfSk7CiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J1ZmZlcicsICdiJyk7CiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpOwogIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlTGVuZ3RoJywgJ2wnKTsKICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnbGVuZ3RoJywgJ2UnKTsKICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywgewogICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH0KICB9KTsKCiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVksIEJZVEVTLCB3cmFwcGVyLCBDTEFNUEVEKXsKICAgIENMQU1QRUQgPSAhIUNMQU1QRUQ7CiAgICB2YXIgTkFNRSAgICAgICA9IEtFWSArIChDTEFNUEVEID8gJ0NsYW1wZWQnIDogJycpICsgJ0FycmF5JwogICAgICAsIElTTlRfVUlOVDggPSBOQU1FICE9ICdVaW50OEFycmF5JwogICAgICAsIEdFVFRFUiAgICAgPSAnZ2V0JyArIEtFWQogICAgICAsIFNFVFRFUiAgICAgPSAnc2V0JyArIEtFWQogICAgICAsIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV0KICAgICAgLCBCYXNlICAgICAgID0gVHlwZWRBcnJheSB8fCB7fQogICAgICAsIFRBQyAgICAgICAgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpCiAgICAgICwgRk9SQ0VEICAgICA9ICFUeXBlZEFycmF5IHx8ICEkdHlwZWQuQUJWCiAgICAgICwgTyAgICAgICAgICA9IHt9CiAgICAgICwgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXkgJiYgVHlwZWRBcnJheVtQUk9UT1RZUEVdOwogICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uKHRoYXQsIGluZGV4KXsKICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kOwogICAgICByZXR1cm4gZGF0YS52W0dFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgTElUVExFX0VORElBTik7CiAgICB9OwogICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uKHRoYXQsIGluZGV4LCB2YWx1ZSl7CiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDsKICAgICAgaWYoQ0xBTVBFRCl2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjsKICAgICAgZGF0YS52W1NFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgdmFsdWUsIExJVFRMRV9FTkRJQU4pOwogICAgfTsKICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24odGhhdCwgaW5kZXgpewogICAgICBkUCh0aGF0LCBpbmRleCwgewogICAgICAgIGdldDogZnVuY3Rpb24oKXsKICAgICAgICAgIHJldHVybiBnZXR0ZXIodGhpcywgaW5kZXgpOwogICAgICAgIH0sCiAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSl7CiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7CiAgICAgICAgfSwKICAgICAgICBlbnVtZXJhYmxlOiB0cnVlCiAgICAgIH0pOwogICAgfTsKICAgIGlmKEZPUkNFRCl7CiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpewogICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSwgJ19kJyk7CiAgICAgICAgdmFyIGluZGV4ICA9IDAKICAgICAgICAgICwgb2Zmc2V0ID0gMAogICAgICAgICAgLCBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7CiAgICAgICAgaWYoIWlzT2JqZWN0KGRhdGEpKXsKICAgICAgICAgIGxlbmd0aCAgICAgPSBzdHJpY3RUb0xlbmd0aChkYXRhLCB0cnVlKQogICAgICAgICAgYnl0ZUxlbmd0aCA9IGxlbmd0aCAqIEJZVEVTOwogICAgICAgICAgYnVmZmVyICAgICA9IG5ldyAkQXJyYXlCdWZmZXIoYnl0ZUxlbmd0aCk7CiAgICAgICAgfSBlbHNlIGlmKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpewogICAgICAgICAgYnVmZmVyID0gZGF0YTsKICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTsKICAgICAgICAgIHZhciAkbGVuID0gZGF0YS5ieXRlTGVuZ3RoOwogICAgICAgICAgaWYoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKXsKICAgICAgICAgICAgaWYoJGxlbiAlIEJZVEVTKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTsKICAgICAgICAgICAgYnl0ZUxlbmd0aCA9ICRsZW4gLSBvZmZzZXQ7CiAgICAgICAgICAgIGlmKGJ5dGVMZW5ndGggPCAwKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0b0xlbmd0aCgkbGVuZ3RoKSAqIEJZVEVTOwogICAgICAgICAgICBpZihieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbil0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7CiAgICAgICAgICB9CiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7CiAgICAgICAgfSBlbHNlIGlmKFRZUEVEX0FSUkFZIGluIGRhdGEpewogICAgICAgICAgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTsKICAgICAgICB9CiAgICAgICAgaGlkZSh0aGF0LCAnX2QnLCB7CiAgICAgICAgICBiOiBidWZmZXIsCiAgICAgICAgICBvOiBvZmZzZXQsCiAgICAgICAgICBsOiBieXRlTGVuZ3RoLAogICAgICAgICAgZTogbGVuZ3RoLAogICAgICAgICAgdjogbmV3ICREYXRhVmlldyhidWZmZXIpCiAgICAgICAgfSk7CiAgICAgICAgd2hpbGUoaW5kZXggPCBsZW5ndGgpYWRkRWxlbWVudCh0aGF0LCBpbmRleCsrKTsKICAgICAgfSk7CiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBjcmVhdGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkKTsKICAgICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBUeXBlZEFycmF5KTsKICAgIH0gZWxzZSBpZighJGl0ZXJEZXRlY3QoZnVuY3Rpb24oaXRlcil7CiAgICAgIC8vIFY4IHdvcmtzIHdpdGggaXRlcmF0b3JzLCBidXQgZmFpbHMgaW4gbWFueSBvdGhlciBjYXNlcwogICAgICAvLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDU1MgogICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXcKICAgICAgbmV3IFR5cGVkQXJyYXkoaXRlcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3CiAgICB9LCB0cnVlKSl7CiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpewogICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSk7CiAgICAgICAgdmFyIGtsYXNzOwogICAgICAgIC8vIGB3c2AgbW9kdWxlIGJ1ZywgdGVtcG9yYXJpbHkgcmVtb3ZlIHZhbGlkYXRpb24gbGVuZ3RoIGZvciBVaW50OEFycmF5CiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYnNvY2tldHMvd3MvcHVsbC82NDUKICAgICAgICBpZighaXNPYmplY3QoZGF0YSkpcmV0dXJuIG5ldyBCYXNlKHN0cmljdFRvTGVuZ3RoKGRhdGEsIElTTlRfVUlOVDgpKTsKICAgICAgICBpZihkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKXsKICAgICAgICAgIHJldHVybiAkbGVuZ3RoICE9PSB1bmRlZmluZWQKICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpCiAgICAgICAgICAgIDogJG9mZnNldCAhPT0gdW5kZWZpbmVkCiAgICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUykpCiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTsKICAgICAgICB9CiAgICAgICAgaWYoVFlQRURfQVJSQVkgaW4gZGF0YSlyZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7CiAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7CiAgICAgIH0pOwogICAgICBhcnJheUZvckVhY2goVEFDICE9PSBGdW5jdGlvbi5wcm90b3R5cGUgPyBnT1BOKEJhc2UpLmNvbmNhdChnT1BOKFRBQykpIDogZ09QTihCYXNlKSwgZnVuY3Rpb24oa2V5KXsKICAgICAgICBpZighKGtleSBpbiBUeXBlZEFycmF5KSloaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTsKICAgICAgfSk7CiAgICAgIFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IFR5cGVkQXJyYXlQcm90b3R5cGU7CiAgICAgIGlmKCFMSUJSQVJZKVR5cGVkQXJyYXlQcm90b3R5cGUuY29uc3RydWN0b3IgPSBUeXBlZEFycmF5OwogICAgfQogICAgdmFyICRuYXRpdmVJdGVyYXRvciAgID0gVHlwZWRBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0KICAgICAgLCBDT1JSRUNUX0lURVJfTkFNRSA9ICEhJG5hdGl2ZUl0ZXJhdG9yICYmICgkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSAndmFsdWVzJyB8fCAkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSB1bmRlZmluZWQpCiAgICAgICwgJGl0ZXJhdG9yICAgICAgICAgPSAkaXRlcmF0b3JzLnZhbHVlczsKICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpOwogICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBUWVBFRF9BUlJBWSwgTkFNRSk7CiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFZJRVcsIHRydWUpOwogICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpOwoKICAgIGlmKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSl7CiAgICAgIGRQKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRBRywgewogICAgICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIE5BTUU7IH0KICAgICAgfSk7CiAgICB9CgogICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7CgogICAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoVHlwZWRBcnJheSAhPSBCYXNlKSwgTyk7CgogICAgJGV4cG9ydCgkZXhwb3J0LlMsIE5BTUUsIHsKICAgICAgQllURVNfUEVSX0VMRU1FTlQ6IEJZVEVTLAogICAgICBmcm9tOiAkZnJvbSwKICAgICAgb2Y6ICRvZgogICAgfSk7CgogICAgaWYoIShCWVRFU19QRVJfRUxFTUVOVCBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSloaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7CgogICAgJGV4cG9ydCgkZXhwb3J0LlAsIE5BTUUsIHByb3RvKTsKCiAgICBzZXRTcGVjaWVzKE5BTUUpOwoKICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwge3NldDogJHNldH0pOwoKICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIUNPUlJFQ1RfSVRFUl9OQU1FLCBOQU1FLCAkaXRlcmF0b3JzKTsKCiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nICE9IGFycmF5VG9TdHJpbmcpLCBOQU1FLCB7dG9TdHJpbmc6IGFycmF5VG9TdHJpbmd9KTsKCiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uKCl7CiAgICAgIG5ldyBUeXBlZEFycmF5KDEpLnNsaWNlKCk7CiAgICB9KSwgTkFNRSwge3NsaWNlOiAkc2xpY2V9KTsKCiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbigpewogICAgICByZXR1cm4gWzEsIDJdLnRvTG9jYWxlU3RyaW5nKCkgIT0gbmV3IFR5cGVkQXJyYXkoWzEsIDJdKS50b0xvY2FsZVN0cmluZygpCiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24oKXsKICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7CiAgICB9KSksIE5BTUUsIHt0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nfSk7CgogICAgSXRlcmF0b3JzW05BTUVdID0gQ09SUkVDVF9JVEVSX05BTUUgPyAkbmF0aXZlSXRlcmF0b3IgOiAkaXRlcmF0b3I7CiAgICBpZighTElCUkFSWSAmJiAhQ09SUkVDVF9JVEVSX05BTUUpaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBJVEVSQVRPUiwgJGl0ZXJhdG9yKTsKICB9Owp9IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9Owp9LHsiLi9fYW4taW5zdGFuY2UiOjEyMCwiLi9fYXJyYXktY29weS13aXRoaW4iOjEyMiwiLi9fYXJyYXktZmlsbCI6MTIzLCIuL19hcnJheS1pbmNsdWRlcyI6MTI1LCIuL19hcnJheS1tZXRob2RzIjoxMjYsIi4vX2NsYXNzb2YiOjEzMSwiLi9fY3R4IjoxMzksIi4vX2Rlc2NyaXB0b3JzIjoxNDIsIi4vX2V4cG9ydCI6MTQ2LCIuL19mYWlscyI6MTQ4LCIuL19nbG9iYWwiOjE1MiwiLi9faGFzIjoxNTMsIi4vX2hpZGUiOjE1NCwiLi9faXMtYXJyYXktaXRlciI6MTYwLCIuL19pcy1vYmplY3QiOjE2MywiLi9faXRlci1kZXRlY3QiOjE2OCwiLi9faXRlcmF0b3JzIjoxNzAsIi4vX2xpYnJhcnkiOjE3MiwiLi9fb2JqZWN0LWNyZWF0ZSI6MTgwLCIuL19vYmplY3QtZHAiOjE4MSwiLi9fb2JqZWN0LWdvcGQiOjE4NCwiLi9fb2JqZWN0LWdvcG4iOjE4NiwiLi9fb2JqZWN0LWdwbyI6MTg4LCIuL19wcm9wZXJ0eS1kZXNjIjoxOTksIi4vX3JlZGVmaW5lLWFsbCI6MjAwLCIuL19zYW1lLXZhbHVlIjoyMDMsIi4vX3NldC1zcGVjaWVzIjoyMDUsIi4vX3NwZWNpZXMtY29uc3RydWN0b3IiOjIwOSwiLi9fdG8taW5kZXgiOjIxOSwiLi9fdG8taW50ZWdlciI6MjIwLCIuL190by1sZW5ndGgiOjIyMiwiLi9fdG8tb2JqZWN0IjoyMjMsIi4vX3RvLXByaW1pdGl2ZSI6MjI0LCIuL190eXBlZCI6MjI3LCIuL190eXBlZC1idWZmZXIiOjIyNiwiLi9fdWlkIjoyMjgsIi4vX3drcyI6MjMxLCIuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCI6MjMyLCIuL2VzNi5hcnJheS5pdGVyYXRvciI6MjQ0fV0sMjI2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgZ2xvYmFsICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgREVTQ1JJUFRPUlMgICAgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpCiAgLCBMSUJSQVJZICAgICAgICA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKQogICwgJHR5cGVkICAgICAgICAgPSByZXF1aXJlKCcuL190eXBlZCcpCiAgLCBoaWRlICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKQogICwgcmVkZWZpbmVBbGwgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKQogICwgZmFpbHMgICAgICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpCiAgLCBhbkluc3RhbmNlICAgICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJykKICAsIHRvSW50ZWdlciAgICAgID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpCiAgLCB0b0xlbmd0aCAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpCiAgLCBnT1BOICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZgogICwgZFAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mCiAgLCBhcnJheUZpbGwgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKQogICwgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpCiAgLCBBUlJBWV9CVUZGRVIgICA9ICdBcnJheUJ1ZmZlcicKICAsIERBVEFfVklFVyAgICAgID0gJ0RhdGFWaWV3JwogICwgUFJPVE9UWVBFICAgICAgPSAncHJvdG90eXBlJwogICwgV1JPTkdfTEVOR1RIICAgPSAnV3JvbmcgbGVuZ3RoIScKICAsIFdST05HX0lOREVYICAgID0gJ1dyb25nIGluZGV4IScKICAsICRBcnJheUJ1ZmZlciAgID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl0KICAsICREYXRhVmlldyAgICAgID0gZ2xvYmFsW0RBVEFfVklFV10KICAsIE1hdGggICAgICAgICAgID0gZ2xvYmFsLk1hdGgKICAsIFJhbmdlRXJyb3IgICAgID0gZ2xvYmFsLlJhbmdlRXJyb3IKICAsIEluZmluaXR5ICAgICAgID0gZ2xvYmFsLkluZmluaXR5CiAgLCBCYXNlQnVmZmVyICAgICA9ICRBcnJheUJ1ZmZlcgogICwgYWJzICAgICAgICAgICAgPSBNYXRoLmFicwogICwgcG93ICAgICAgICAgICAgPSBNYXRoLnBvdwogICwgZmxvb3IgICAgICAgICAgPSBNYXRoLmZsb29yCiAgLCBsb2cgICAgICAgICAgICA9IE1hdGgubG9nCiAgLCBMTjIgICAgICAgICAgICA9IE1hdGguTE4yCiAgLCBCVUZGRVIgICAgICAgICA9ICdidWZmZXInCiAgLCBCWVRFX0xFTkdUSCAgICA9ICdieXRlTGVuZ3RoJwogICwgQllURV9PRkZTRVQgICAgPSAnYnl0ZU9mZnNldCcKICAsICRCVUZGRVIgICAgICAgID0gREVTQ1JJUFRPUlMgPyAnX2InIDogQlVGRkVSCiAgLCAkTEVOR1RIICAgICAgICA9IERFU0NSSVBUT1JTID8gJ19sJyA6IEJZVEVfTEVOR1RICiAgLCAkT0ZGU0VUICAgICAgICA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUOwoKLy8gSUVFRTc1NCBjb252ZXJzaW9ucyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2llZWU3NTQKdmFyIHBhY2tJRUVFNzU0ID0gZnVuY3Rpb24odmFsdWUsIG1MZW4sIG5CeXRlcyl7CiAgdmFyIGJ1ZmZlciA9IEFycmF5KG5CeXRlcykKICAgICwgZUxlbiAgID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxCiAgICAsIGVNYXggICA9ICgxIDw8IGVMZW4pIC0gMQogICAgLCBlQmlhcyAgPSBlTWF4ID4+IDEKICAgICwgcnQgICAgID0gbUxlbiA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMAogICAgLCBpICAgICAgPSAwCiAgICAsIHMgICAgICA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gMSA6IDAKICAgICwgZSwgbSwgYzsKICB2YWx1ZSA9IGFicyh2YWx1ZSkKICBpZih2YWx1ZSAhPSB2YWx1ZSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpewogICAgbSA9IHZhbHVlICE9IHZhbHVlID8gMSA6IDA7CiAgICBlID0gZU1heDsKICB9IGVsc2UgewogICAgZSA9IGZsb29yKGxvZyh2YWx1ZSkgLyBMTjIpOwogICAgaWYodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSl7CiAgICAgIGUtLTsKICAgICAgYyAqPSAyOwogICAgfQogICAgaWYoZSArIGVCaWFzID49IDEpewogICAgICB2YWx1ZSArPSBydCAvIGM7CiAgICB9IGVsc2UgewogICAgICB2YWx1ZSArPSBydCAqIHBvdygyLCAxIC0gZUJpYXMpOwogICAgfQogICAgaWYodmFsdWUgKiBjID49IDIpewogICAgICBlKys7CiAgICAgIGMgLz0gMjsKICAgIH0KICAgIGlmKGUgKyBlQmlhcyA+PSBlTWF4KXsKICAgICAgbSA9IDA7CiAgICAgIGUgPSBlTWF4OwogICAgfSBlbHNlIGlmKGUgKyBlQmlhcyA+PSAxKXsKICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIHBvdygyLCBtTGVuKTsKICAgICAgZSA9IGUgKyBlQmlhczsKICAgIH0gZWxzZSB7CiAgICAgIG0gPSB2YWx1ZSAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1MZW4pOwogICAgICBlID0gMDsKICAgIH0KICB9CiAgZm9yKDsgbUxlbiA+PSA4OyBidWZmZXJbaSsrXSA9IG0gJiAyNTUsIG0gLz0gMjU2LCBtTGVuIC09IDgpOwogIGUgPSBlIDw8IG1MZW4gfCBtOwogIGVMZW4gKz0gbUxlbjsKICBmb3IoOyBlTGVuID4gMDsgYnVmZmVyW2krK10gPSBlICYgMjU1LCBlIC89IDI1NiwgZUxlbiAtPSA4KTsKICBidWZmZXJbLS1pXSB8PSBzICogMTI4OwogIHJldHVybiBidWZmZXI7Cn07CnZhciB1bnBhY2tJRUVFNzU0ID0gZnVuY3Rpb24oYnVmZmVyLCBtTGVuLCBuQnl0ZXMpewogIHZhciBlTGVuICA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMQogICAgLCBlTWF4ICA9ICgxIDw8IGVMZW4pIC0gMQogICAgLCBlQmlhcyA9IGVNYXggPj4gMQogICAgLCBuQml0cyA9IGVMZW4gLSA3CiAgICAsIGkgICAgID0gbkJ5dGVzIC0gMQogICAgLCBzICAgICA9IGJ1ZmZlcltpLS1dCiAgICAsIGUgICAgID0gcyAmIDEyNwogICAgLCBtOwogIHMgPj49IDc7CiAgZm9yKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTsKICBtID0gZSAmICgxIDw8IC1uQml0cykgLSAxOwogIGUgPj49IC1uQml0czsKICBuQml0cyArPSBtTGVuOwogIGZvcig7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7CiAgaWYoZSA9PT0gMCl7CiAgICBlID0gMSAtIGVCaWFzOwogIH0gZWxzZSBpZihlID09PSBlTWF4KXsKICAgIHJldHVybiBtID8gTmFOIDogcyA/IC1JbmZpbml0eSA6IEluZmluaXR5OwogIH0gZWxzZSB7CiAgICBtID0gbSArIHBvdygyLCBtTGVuKTsKICAgIGUgPSBlIC0gZUJpYXM7CiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7Cn07Cgp2YXIgdW5wYWNrSTMyID0gZnVuY3Rpb24oYnl0ZXMpewogIHJldHVybiBieXRlc1szXSA8PCAyNCB8IGJ5dGVzWzJdIDw8IDE2IHwgYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdOwp9Owp2YXIgcGFja0k4ID0gZnVuY3Rpb24oaXQpewogIHJldHVybiBbaXQgJiAweGZmXTsKfTsKdmFyIHBhY2tJMTYgPSBmdW5jdGlvbihpdCl7CiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmXTsKfTsKdmFyIHBhY2tJMzIgPSBmdW5jdGlvbihpdCl7CiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmLCBpdCA+PiAxNiAmIDB4ZmYsIGl0ID4+IDI0ICYgMHhmZl07Cn07CnZhciBwYWNrRjY0ID0gZnVuY3Rpb24oaXQpewogIHJldHVybiBwYWNrSUVFRTc1NChpdCwgNTIsIDgpOwp9Owp2YXIgcGFja0YzMiA9IGZ1bmN0aW9uKGl0KXsKICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDIzLCA0KTsKfTsKCnZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbihDLCBrZXksIGludGVybmFsKXsKICBkUChDW1BST1RPVFlQRV0sIGtleSwge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXNbaW50ZXJuYWxdOyB9fSk7Cn07Cgp2YXIgZ2V0ID0gZnVuY3Rpb24odmlldywgYnl0ZXMsIGluZGV4LCBpc0xpdHRsZUVuZGlhbil7CiAgdmFyIG51bUluZGV4ID0gK2luZGV4CiAgICAsIGludEluZGV4ID0gdG9JbnRlZ2VyKG51bUluZGV4KTsKICBpZihudW1JbmRleCAhPSBpbnRJbmRleCB8fCBpbnRJbmRleCA8IDAgfHwgaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7CiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYgogICAgLCBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXQogICAgLCBwYWNrICA9IHN0b3JlLnNsaWNlKHN0YXJ0LCBzdGFydCArIGJ5dGVzKTsKICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcGFjay5yZXZlcnNlKCk7Cn07CnZhciBzZXQgPSBmdW5jdGlvbih2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbil7CiAgdmFyIG51bUluZGV4ID0gK2luZGV4CiAgICAsIGludEluZGV4ID0gdG9JbnRlZ2VyKG51bUluZGV4KTsKICBpZihudW1JbmRleCAhPSBpbnRJbmRleCB8fCBpbnRJbmRleCA8IDAgfHwgaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7CiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYgogICAgLCBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXQogICAgLCBwYWNrICA9IGNvbnZlcnNpb24oK3ZhbHVlKTsKICBmb3IodmFyIGkgPSAwOyBpIDwgYnl0ZXM7IGkrKylzdG9yZVtzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBieXRlcyAtIGkgLSAxXTsKfTsKCnZhciB2YWxpZGF0ZUFycmF5QnVmZmVyQXJndW1lbnRzID0gZnVuY3Rpb24odGhhdCwgbGVuZ3RoKXsKICBhbkluc3RhbmNlKHRoYXQsICRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTsKICB2YXIgbnVtYmVyTGVuZ3RoID0gK2xlbmd0aAogICAgLCBieXRlTGVuZ3RoICAgPSB0b0xlbmd0aChudW1iZXJMZW5ndGgpOwogIGlmKG51bWJlckxlbmd0aCAhPSBieXRlTGVuZ3RoKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTsKICByZXR1cm4gYnl0ZUxlbmd0aDsKfTsKCmlmKCEkdHlwZWQuQUJWKXsKICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpewogICAgdmFyIGJ5dGVMZW5ndGggPSB2YWxpZGF0ZUFycmF5QnVmZmVyQXJndW1lbnRzKHRoaXMsIGxlbmd0aCk7CiAgICB0aGlzLl9iICAgICAgID0gYXJyYXlGaWxsLmNhbGwoQXJyYXkoYnl0ZUxlbmd0aCksIDApOwogICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7CiAgfTsKCiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKXsKICAgIGFuSW5zdGFuY2UodGhpcywgJERhdGFWaWV3LCBEQVRBX1ZJRVcpOwogICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTsKICAgIHZhciBidWZmZXJMZW5ndGggPSBidWZmZXJbJExFTkdUSF0KICAgICAgLCBvZmZzZXQgICAgICAgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7CiAgICBpZihvZmZzZXQgPCAwIHx8IG9mZnNldCA+IGJ1ZmZlckxlbmd0aCl0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7CiAgICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gYnVmZmVyTGVuZ3RoIC0gb2Zmc2V0IDogdG9MZW5ndGgoYnl0ZUxlbmd0aCk7CiAgICBpZihvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTsKICAgIHRoaXNbJEJVRkZFUl0gPSBidWZmZXI7CiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0OwogICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7CiAgfTsKCiAgaWYoREVTQ1JJUFRPUlMpewogICAgYWRkR2V0dGVyKCRBcnJheUJ1ZmZlciwgQllURV9MRU5HVEgsICdfbCcpOwogICAgYWRkR2V0dGVyKCREYXRhVmlldywgQlVGRkVSLCAnX2InKTsKICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTsKICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfT0ZGU0VULCAnX28nKTsKICB9CgogIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7CiAgICBnZXRJbnQ4OiBmdW5jdGlvbiBnZXRJbnQ4KGJ5dGVPZmZzZXQpewogICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdIDw8IDI0ID4+IDI0OwogICAgfSwKICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KXsKICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXTsKICAgIH0sCiAgICBnZXRJbnQxNjogZnVuY3Rpb24gZ2V0SW50MTYoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXsKICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7CiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjsKICAgIH0sCiAgICBnZXRVaW50MTY6IGZ1bmN0aW9uIGdldFVpbnQxNihieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pewogICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTsKICAgICAgcmV0dXJuIGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTsKICAgIH0sCiAgICBnZXRJbnQzMjogZnVuY3Rpb24gZ2V0SW50MzIoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXsKICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSk7CiAgICB9LAogICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXsKICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7CiAgICB9LAogICAgZ2V0RmxvYXQzMjogZnVuY3Rpb24gZ2V0RmxvYXQzMihieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pewogICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgMjMsIDQpOwogICAgfSwKICAgIGdldEZsb2F0NjQ6IGZ1bmN0aW9uIGdldEZsb2F0NjQoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXsKICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDUyLCA4KTsKICAgIH0sCiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKXsKICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpOwogICAgfSwKICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSl7CiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTsKICAgIH0sCiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyosIGxpdHRsZUVuZGlhbiAqLyl7CiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTsKICAgIH0sCiAgICBzZXRVaW50MTY6IGZ1bmN0aW9uIHNldFVpbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXsKICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pOwogICAgfSwKICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXsKICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pOwogICAgfSwKICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qLCBsaXR0bGVFbmRpYW4gKi8pewogICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7CiAgICB9LAogICAgc2V0RmxvYXQzMjogZnVuY3Rpb24gc2V0RmxvYXQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXsKICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tGMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pOwogICAgfSwKICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyosIGxpdHRsZUVuZGlhbiAqLyl7CiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTsKICAgIH0KICB9KTsKfSBlbHNlIHsKICBpZighZmFpbHMoZnVuY3Rpb24oKXsKICAgIG5ldyAkQXJyYXlCdWZmZXI7ICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldwogIH0pIHx8ICFmYWlscyhmdW5jdGlvbigpewogICAgbmV3ICRBcnJheUJ1ZmZlciguNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3CiAgfSkpewogICAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKXsKICAgICAgcmV0dXJuIG5ldyBCYXNlQnVmZmVyKHZhbGlkYXRlQXJyYXlCdWZmZXJBcmd1bWVudHModGhpcywgbGVuZ3RoKSk7CiAgICB9OwogICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTsKICAgIGZvcih2YXIga2V5cyA9IGdPUE4oQmFzZUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgKXsKICAgICAgaWYoISgoa2V5ID0ga2V5c1tqKytdKSBpbiAkQXJyYXlCdWZmZXIpKWhpZGUoJEFycmF5QnVmZmVyLCBrZXksIEJhc2VCdWZmZXJba2V5XSk7CiAgICB9OwogICAgaWYoIUxJQlJBUlkpQXJyYXlCdWZmZXJQcm90by5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjsKICB9CiAgLy8gaU9TIFNhZmFyaSA3LnggYnVnCiAgdmFyIHZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpCiAgICAsICRzZXRJbnQ4ID0gJERhdGFWaWV3W1BST1RPVFlQRV0uc2V0SW50ODsKICB2aWV3LnNldEludDgoMCwgMjE0NzQ4MzY0OCk7CiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpOwogIGlmKHZpZXcuZ2V0SW50OCgwKSB8fCAhdmlldy5nZXRJbnQ4KDEpKXJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7CiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKXsKICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7CiAgICB9LAogICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKXsKICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7CiAgICB9CiAgfSwgdHJ1ZSk7Cn0Kc2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpOwpzZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7CmhpZGUoJERhdGFWaWV3W1BST1RPVFlQRV0sICR0eXBlZC5WSUVXLCB0cnVlKTsKZXhwb3J0c1tBUlJBWV9CVUZGRVJdID0gJEFycmF5QnVmZmVyOwpleHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7Cn0seyIuL19hbi1pbnN0YW5jZSI6MTIwLCIuL19hcnJheS1maWxsIjoxMjMsIi4vX2Rlc2NyaXB0b3JzIjoxNDIsIi4vX2ZhaWxzIjoxNDgsIi4vX2dsb2JhbCI6MTUyLCIuL19oaWRlIjoxNTQsIi4vX2xpYnJhcnkiOjE3MiwiLi9fb2JqZWN0LWRwIjoxODEsIi4vX29iamVjdC1nb3BuIjoxODYsIi4vX3JlZGVmaW5lLWFsbCI6MjAwLCIuL19zZXQtdG8tc3RyaW5nLXRhZyI6MjA2LCIuL190by1pbnRlZ2VyIjoyMjAsIi4vX3RvLWxlbmd0aCI6MjIyLCIuL190eXBlZCI6MjI3fV0sMjI3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgLCBoaWRlICAgPSByZXF1aXJlKCcuL19oaWRlJykKICAsIHVpZCAgICA9IHJlcXVpcmUoJy4vX3VpZCcpCiAgLCBUWVBFRCAgPSB1aWQoJ3R5cGVkX2FycmF5JykKICAsIFZJRVcgICA9IHVpZCgndmlldycpCiAgLCBBQlYgICAgPSAhIShnbG9iYWwuQXJyYXlCdWZmZXIgJiYgZ2xvYmFsLkRhdGFWaWV3KQogICwgQ09OU1RSID0gQUJWCiAgLCBpID0gMCwgbCA9IDksIFR5cGVkOwoKdmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMgPSAoCiAgJ0ludDhBcnJheSxVaW50OEFycmF5LFVpbnQ4Q2xhbXBlZEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5JwopLnNwbGl0KCcsJyk7Cgp3aGlsZShpIDwgbCl7CiAgaWYoVHlwZWQgPSBnbG9iYWxbVHlwZWRBcnJheUNvbnN0cnVjdG9yc1tpKytdXSl7CiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVFlQRUQsIHRydWUpOwogICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFZJRVcsIHRydWUpOwogIH0gZWxzZSBDT05TVFIgPSBmYWxzZTsKfQoKbW9kdWxlLmV4cG9ydHMgPSB7CiAgQUJWOiAgICBBQlYsCiAgQ09OU1RSOiBDT05TVFIsCiAgVFlQRUQ6ICBUWVBFRCwKICBWSUVXOiAgIFZJRVcKfTsKfSx7Ii4vX2dsb2JhbCI6MTUyLCIuL19oaWRlIjoxNTQsIi4vX3VpZCI6MjI4fV0sMjI4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzk3XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7ImR1cCI6OTd9XSwyMjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bOThdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fY29yZSI6MTM3LCIuL19nbG9iYWwiOjE1MiwiLi9fbGlicmFyeSI6MTcyLCIuL19vYmplY3QtZHAiOjE4MSwiLi9fd2tzLWV4dCI6MjMwLCJkdXAiOjk4fV0sMjMwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzk5XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX3drcyI6MjMxLCJkdXAiOjk5fV0sMjMxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzEwMF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19nbG9iYWwiOjE1MiwiLi9fc2hhcmVkIjoyMDgsIi4vX3VpZCI6MjI4LCJkdXAiOjEwMH1dLDIzMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVsxMDFdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fY2xhc3NvZiI6MTMxLCIuL19jb3JlIjoxMzcsIi4vX2l0ZXJhdG9ycyI6MTcwLCIuL193a3MiOjIzMSwiZHVwIjoxMDF9XSwyMzM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL2dpdGh1Yi5jb20vYmVuamFtaW5nci9SZXhFeHAuZXNjYXBlCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRyZSAgICAgPSByZXF1aXJlKCcuL19yZXBsYWNlcicpKC9bXFxeJCorPy4oKXxbXF17fV0vZywgJ1xcJCYnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnUmVnRXhwJywge2VzY2FwZTogZnVuY3Rpb24gZXNjYXBlKGl0KXsgcmV0dXJuICRyZShpdCk7IH19KTsKCn0seyIuL19leHBvcnQiOjE0NiwiLi9fcmVwbGFjZXIiOjIwMn1dLDIzNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtjb3B5V2l0aGluOiByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpfSk7CgpyZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnY29weVdpdGhpbicpOwp9LHsiLi9fYWRkLXRvLXVuc2NvcGFibGVzIjoxMTksIi4vX2FycmF5LWNvcHktd2l0aGluIjoxMjIsIi4vX2V4cG9ydCI6MTQ2fV0sMjM1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkZXZlcnkgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDQpOwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmV2ZXJ5LCB0cnVlKSwgJ0FycmF5JywgewogIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKQogIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLyl7CiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7CiAgfQp9KTsKfSx7Ii4vX2FycmF5LW1ldGhvZHMiOjEyNiwiLi9fZXhwb3J0IjoxNDYsIi4vX3N0cmljdC1tZXRob2QiOjIxMH1dLDIzNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtmaWxsOiByZXF1aXJlKCcuL19hcnJheS1maWxsJyl9KTsKCnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmaWxsJyk7Cn0seyIuL19hZGQtdG8tdW5zY29wYWJsZXMiOjExOSwiLi9fYXJyYXktZmlsbCI6MTIzLCIuL19leHBvcnQiOjE0Nn1dLDIzNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJGZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgyKTsKCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7CiAgLy8gMjIuMS4zLjcgLyAxNS40LjQuMjAgQXJyYXkucHJvdG90eXBlLmZpbHRlcihjYWxsYmFja2ZuIFssIHRoaXNBcmddKQogIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKXsKICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7CiAgfQp9KTsKfSx7Ii4vX2FycmF5LW1ldGhvZHMiOjEyNiwiLi9fZXhwb3J0IjoxNDYsIi4vX3N0cmljdC1tZXRob2QiOjIxMH1dLDIzODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gMjIuMS4zLjkgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRmaW5kICAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNikKICAsIEtFWSAgICAgPSAnZmluZEluZGV4JwogICwgZm9yY2VkICA9IHRydWU7Ci8vIFNob3VsZG4ndCBza2lwIGhvbGVzCmlmKEtFWSBpbiBbXSlBcnJheSgxKVtLRVldKGZ1bmN0aW9uKCl7IGZvcmNlZCA9IGZhbHNlOyB9KTsKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHsKICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuLyosIHRoYXQgPSB1bmRlZmluZWQgKi8pewogICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTsKICB9Cn0pOwpyZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpOwp9LHsiLi9fYWRkLXRvLXVuc2NvcGFibGVzIjoxMTksIi4vX2FycmF5LW1ldGhvZHMiOjEyNiwiLi9fZXhwb3J0IjoxNDZ9XSwyMzk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZCkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJGZpbmQgICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg1KQogICwgS0VZICAgICA9ICdmaW5kJwogICwgZm9yY2VkICA9IHRydWU7Ci8vIFNob3VsZG4ndCBza2lwIGhvbGVzCmlmKEtFWSBpbiBbXSlBcnJheSgxKVtLRVldKGZ1bmN0aW9uKCl7IGZvcmNlZCA9IGZhbHNlOyB9KTsKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHsKICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4vKiwgdGhhdCA9IHVuZGVmaW5lZCAqLyl7CiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpOwogIH0KfSk7CnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7Cn0seyIuL19hZGQtdG8tdW5zY29wYWJsZXMiOjExOSwiLi9fYXJyYXktbWV0aG9kcyI6MTI2LCIuL19leHBvcnQiOjE0Nn1dLDI0MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRmb3JFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApCiAgLCBTVFJJQ1QgICA9IHJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5mb3JFYWNoLCB0cnVlKTsKCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIVNUUklDVCwgJ0FycmF5JywgewogIC8vIDIyLjEuMy4xMCAvIDE1LjQuNC4xOCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuIFssIHRoaXNBcmddKQogIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pewogICAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7CiAgfQp9KTsKfSx7Ii4vX2FycmF5LW1ldGhvZHMiOjEyNiwiLi9fZXhwb3J0IjoxNDYsIi4vX3N0cmljdC1tZXRob2QiOjIxMH1dLDI0MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIGN0eCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JykKICAsICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIHRvT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JykKICAsIGNhbGwgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJykKICAsIGlzQXJyYXlJdGVyICAgID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpCiAgLCB0b0xlbmd0aCAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpCiAgLCBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpCiAgLCBnZXRJdGVyRm4gICAgICA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7CgokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uKGl0ZXIpeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5JywgewogIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCkKICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZS8qLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCovKXsKICAgIHZhciBPICAgICAgID0gdG9PYmplY3QoYXJyYXlMaWtlKQogICAgICAsIEMgICAgICAgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5CiAgICAgICwgYUxlbiAgICA9IGFyZ3VtZW50cy5sZW5ndGgKICAgICAgLCBtYXBmbiAgID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQKICAgICAgLCBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZAogICAgICAsIGluZGV4ICAgPSAwCiAgICAgICwgaXRlckZuICA9IGdldEl0ZXJGbihPKQogICAgICAsIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjsKICAgIGlmKG1hcHBpbmcpbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTsKICAgIC8vIGlmIG9iamVjdCBpc24ndCBpdGVyYWJsZSBvciBpdCdzIGFycmF5IHdpdGggZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBzaW1wbGUgY2FzZQogICAgaWYoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpewogICAgICBmb3IoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEM7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKyl7CiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IGNhbGwoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWUpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7CiAgICAgIGZvcihyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKyl7CiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7CiAgICAgIH0KICAgIH0KICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDsKICAgIHJldHVybiByZXN1bHQ7CiAgfQp9KTsKCn0seyIuL19jcmVhdGUtcHJvcGVydHkiOjEzOCwiLi9fY3R4IjoxMzksIi4vX2V4cG9ydCI6MTQ2LCIuL19pcy1hcnJheS1pdGVyIjoxNjAsIi4vX2l0ZXItY2FsbCI6MTY1LCIuL19pdGVyLWRldGVjdCI6MTY4LCIuL190by1sZW5ndGgiOjIyMiwiLi9fdG8tb2JqZWN0IjoyMjMsIi4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kIjoyMzJ9XSwyNDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRpbmRleE9mICAgICAgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKQogICwgJG5hdGl2ZSAgICAgICA9IFtdLmluZGV4T2YKICAsIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7CiAgLy8gMjIuMS4zLjExIC8gMTUuNC40LjE0IEFycmF5LnByb3RvdHlwZS5pbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSkKICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCA9IDAgKi8pewogICAgcmV0dXJuIE5FR0FUSVZFX1pFUk8KICAgICAgLy8gY29udmVydCAtMCB0byArMAogICAgICA/ICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwCiAgICAgIDogJGluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzWzFdKTsKICB9Cn0pOwp9LHsiLi9fYXJyYXktaW5jbHVkZXMiOjEyNSwiLi9fZXhwb3J0IjoxNDYsIi4vX3N0cmljdC1tZXRob2QiOjIxMH1dLDI0MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIyLjEuMi4yIC8gMTUuNC4zLjIgQXJyYXkuaXNBcnJheShhcmcpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ0FycmF5Jywge2lzQXJyYXk6IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyl9KTsKfSx7Ii4vX2V4cG9ydCI6MTQ2LCIuL19pcy1hcnJheSI6MTYxfV0sMjQ0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzEwMl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19hZGQtdG8tdW5zY29wYWJsZXMiOjExOSwiLi9faXRlci1kZWZpbmUiOjE2NywiLi9faXRlci1zdGVwIjoxNjksIi4vX2l0ZXJhdG9ycyI6MTcwLCIuL190by1pb2JqZWN0IjoyMjEsImR1cCI6MTAyfV0sMjQ1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmpvaW4oc2VwYXJhdG9yKQp2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKQogICwgYXJyYXlKb2luID0gW10uam9pbjsKCi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBzdHJpbmdzCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKHJlcXVpcmUoJy4vX2lvYmplY3QnKSAhPSBPYmplY3QgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShhcnJheUpvaW4pKSwgJ0FycmF5JywgewogIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKXsKICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0b0lPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNDYsIi4vX2lvYmplY3QiOjE1OSwiLi9fc3RyaWN0LW1ldGhvZCI6MjEwLCIuL190by1pb2JqZWN0IjoyMjF9XSwyNDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIHRvSU9iamVjdCAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JykKICAsIHRvSW50ZWdlciAgICAgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJykKICAsIHRvTGVuZ3RoICAgICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKQogICwgJG5hdGl2ZSAgICAgICA9IFtdLmxhc3RJbmRleE9mCiAgLCBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDsKCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHsKICAvLyAyMi4xLjMuMTQgLyAxNS40LjQuMTUgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSkKICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiwgZnJvbUluZGV4ID0gQFsqLTFdICovKXsKICAgIC8vIGNvbnZlcnQgLTAgdG8gKzAKICAgIGlmKE5FR0FUSVZFX1pFUk8pcmV0dXJuICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwOwogICAgdmFyIE8gICAgICA9IHRvSU9iamVjdCh0aGlzKQogICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKQogICAgICAsIGluZGV4ICA9IGxlbmd0aCAtIDE7CiAgICBpZihhcmd1bWVudHMubGVuZ3RoID4gMSlpbmRleCA9IE1hdGgubWluKGluZGV4LCB0b0ludGVnZXIoYXJndW1lbnRzWzFdKSk7CiAgICBpZihpbmRleCA8IDApaW5kZXggPSBsZW5ndGggKyBpbmRleDsKICAgIGZvcig7aW5kZXggPj0gMDsgaW5kZXgtLSlpZihpbmRleCBpbiBPKWlmKE9baW5kZXhdID09PSBzZWFyY2hFbGVtZW50KXJldHVybiBpbmRleCB8fCAwOwogICAgcmV0dXJuIC0xOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE0NiwiLi9fc3RyaWN0LW1ldGhvZCI6MjEwLCIuL190by1pbnRlZ2VyIjoyMjAsIi4vX3RvLWlvYmplY3QiOjIyMSwiLi9fdG8tbGVuZ3RoIjoyMjJ9XSwyNDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRtYXAgICAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMSk7CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ubWFwLCB0cnVlKSwgJ0FycmF5JywgewogIC8vIDIyLjEuMy4xNSAvIDE1LjQuNC4xOSBBcnJheS5wcm90b3R5cGUubWFwKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pCiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pewogICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTsKICB9Cn0pOwp9LHsiLi9fYXJyYXktbWV0aG9kcyI6MTI2LCIuL19leHBvcnQiOjE0NiwiLi9fc3RyaWN0LW1ldGhvZCI6MjEwfV0sMjQ4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTsKCi8vIFdlYktpdCBBcnJheS5vZiBpc24ndCBnZW5lcmljCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpewogIGZ1bmN0aW9uIEYoKXt9CiAgcmV0dXJuICEoQXJyYXkub2YuY2FsbChGKSBpbnN0YW5jZW9mIEYpOwp9KSwgJ0FycmF5JywgewogIC8vIDIyLjEuMi4zIEFycmF5Lm9mKCAuLi5pdGVtcykKICBvZjogZnVuY3Rpb24gb2YoLyogLi4uYXJncyAqLyl7CiAgICB2YXIgaW5kZXggID0gMAogICAgICAsIGFMZW4gICA9IGFyZ3VtZW50cy5sZW5ndGgKICAgICAgLCByZXN1bHQgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpKGFMZW4pOwogICAgd2hpbGUoYUxlbiA+IGluZGV4KWNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIGFyZ3VtZW50c1tpbmRleCsrXSk7CiAgICByZXN1bHQubGVuZ3RoID0gYUxlbjsKICAgIHJldHVybiByZXN1bHQ7CiAgfQp9KTsKfSx7Ii4vX2NyZWF0ZS1wcm9wZXJ0eSI6MTM4LCIuL19leHBvcnQiOjE0NiwiLi9fZmFpbHMiOjE0OH1dLDI0OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpOwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZVJpZ2h0LCB0cnVlKSwgJ0FycmF5JywgewogIC8vIDIyLjEuMy4xOSAvIDE1LjQuNC4yMiBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKQogIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKXsKICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgdHJ1ZSk7CiAgfQp9KTsKfSx7Ii4vX2FycmF5LXJlZHVjZSI6MTI3LCIuL19leHBvcnQiOjE0NiwiLi9fc3RyaWN0LW1ldGhvZCI6MjEwfV0sMjUwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlLCB0cnVlKSwgJ0FycmF5JywgewogIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSkKICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKXsKICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgZmFsc2UpOwogIH0KfSk7Cn0seyIuL19hcnJheS1yZWR1Y2UiOjEyNywiLi9fZXhwb3J0IjoxNDYsIi4vX3N0cmljdC1tZXRob2QiOjIxMH1dLDI1MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgaHRtbCAgICAgICA9IHJlcXVpcmUoJy4vX2h0bWwnKQogICwgY29mICAgICAgICA9IHJlcXVpcmUoJy4vX2NvZicpCiAgLCB0b0luZGV4ICAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKQogICwgdG9MZW5ndGggICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpCiAgLCBhcnJheVNsaWNlID0gW10uc2xpY2U7CgovLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpewogIGlmKGh0bWwpYXJyYXlTbGljZS5jYWxsKGh0bWwpOwp9KSwgJ0FycmF5JywgewogIHNsaWNlOiBmdW5jdGlvbiBzbGljZShiZWdpbiwgZW5kKXsKICAgIHZhciBsZW4gICA9IHRvTGVuZ3RoKHRoaXMubGVuZ3RoKQogICAgICAsIGtsYXNzID0gY29mKHRoaXMpOwogICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQ7CiAgICBpZihrbGFzcyA9PSAnQXJyYXknKXJldHVybiBhcnJheVNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7CiAgICB2YXIgc3RhcnQgID0gdG9JbmRleChiZWdpbiwgbGVuKQogICAgICAsIHVwVG8gICA9IHRvSW5kZXgoZW5kLCBsZW4pCiAgICAgICwgc2l6ZSAgID0gdG9MZW5ndGgodXBUbyAtIHN0YXJ0KQogICAgICAsIGNsb25lZCA9IEFycmF5KHNpemUpCiAgICAgICwgaSAgICAgID0gMDsKICAgIGZvcig7IGkgPCBzaXplOyBpKyspY2xvbmVkW2ldID0ga2xhc3MgPT0gJ1N0cmluZycKICAgICAgPyB0aGlzLmNoYXJBdChzdGFydCArIGkpCiAgICAgIDogdGhpc1tzdGFydCArIGldOwogICAgcmV0dXJuIGNsb25lZDsKICB9Cn0pOwp9LHsiLi9fY29mIjoxMzIsIi4vX2V4cG9ydCI6MTQ2LCIuL19mYWlscyI6MTQ4LCIuL19odG1sIjoxNTUsIi4vX3RvLWluZGV4IjoyMTksIi4vX3RvLWxlbmd0aCI6MjIyfV0sMjUyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkc29tZSAgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDMpOwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnNvbWUsIHRydWUpLCAnQXJyYXknLCB7CiAgLy8gMjIuMS4zLjIzIC8gMTUuNC40LjE3IEFycmF5LnByb3RvdHlwZS5zb21lKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pCiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLyl7CiAgICByZXR1cm4gJHNvbWUodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTsKICB9Cn0pOwp9LHsiLi9fYXJyYXktbWV0aG9kcyI6MTI2LCIuL19leHBvcnQiOjE0NiwiLi9fc3RyaWN0LW1ldGhvZCI6MjEwfV0sMjUzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKQogICwgdG9PYmplY3QgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JykKICAsIGZhaWxzICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJykKICAsICRzb3J0ICAgICA9IFtdLnNvcnQKICAsIHRlc3QgICAgICA9IFsxLCAyLCAzXTsKCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uKCl7CiAgLy8gSUU4LQogIHRlc3Quc29ydCh1bmRlZmluZWQpOwp9KSB8fCAhZmFpbHMoZnVuY3Rpb24oKXsKICAvLyBWOCBidWcKICB0ZXN0LnNvcnQobnVsbCk7CiAgLy8gT2xkIFdlYktpdAp9KSB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRzb3J0KSksICdBcnJheScsIHsKICAvLyAyMi4xLjMuMjUgQXJyYXkucHJvdG90eXBlLnNvcnQoY29tcGFyZWZuKQogIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKXsKICAgIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZAogICAgICA/ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcykpCiAgICAgIDogJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSwgYUZ1bmN0aW9uKGNvbXBhcmVmbikpOwogIH0KfSk7Cn0seyIuL19hLWZ1bmN0aW9uIjoxMTcsIi4vX2V4cG9ydCI6MTQ2LCIuL19mYWlscyI6MTQ4LCIuL19zdHJpY3QtbWV0aG9kIjoyMTAsIi4vX3RvLW9iamVjdCI6MjIzfV0sMjU0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnQXJyYXknKTsKfSx7Ii4vX3NldC1zcGVjaWVzIjoyMDV9XSwyNTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KCkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnRGF0ZScsIHtub3c6IGZ1bmN0aW9uKCl7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfX0pOwp9LHsiLi9fZXhwb3J0IjoxNDZ9XSwyNTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGZhaWxzICAgPSByZXF1aXJlKCcuL19mYWlscycpCiAgLCBnZXRUaW1lID0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZTsKCnZhciBseiA9IGZ1bmN0aW9uKG51bSl7CiAgcmV0dXJuIG51bSA+IDkgPyBudW0gOiAnMCcgKyBudW07Cn07CgovLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnMKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24oKXsKICByZXR1cm4gbmV3IERhdGUoLTVlMTMgLSAxKS50b0lTT1N0cmluZygpICE9ICcwMzg1LTA3LTI1VDA3OjA2OjM5Ljk5OVonOwp9KSB8fCAhZmFpbHMoZnVuY3Rpb24oKXsKICBuZXcgRGF0ZShOYU4pLnRvSVNPU3RyaW5nKCk7Cn0pKSwgJ0RhdGUnLCB7CiAgdG9JU09TdHJpbmc6IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCl7CiAgICBpZighaXNGaW5pdGUoZ2V0VGltZS5jYWxsKHRoaXMpKSl0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTsKICAgIHZhciBkID0gdGhpcwogICAgICAsIHkgPSBkLmdldFVUQ0Z1bGxZZWFyKCkKICAgICAgLCBtID0gZC5nZXRVVENNaWxsaXNlY29uZHMoKQogICAgICAsIHMgPSB5IDwgMCA/ICctJyA6IHkgPiA5OTk5ID8gJysnIDogJyc7CiAgICByZXR1cm4gcyArICgnMDAwMDAnICsgTWF0aC5hYnMoeSkpLnNsaWNlKHMgPyAtNiA6IC00KSArCiAgICAgICctJyArIGx6KGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsgbHooZC5nZXRVVENEYXRlKCkpICsKICAgICAgJ1QnICsgbHooZC5nZXRVVENIb3VycygpKSArICc6JyArIGx6KGQuZ2V0VVRDTWludXRlcygpKSArCiAgICAgICc6JyArIGx6KGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChtID4gOTkgPyBtIDogJzAnICsgbHoobSkpICsgJ1onOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE0NiwiLi9fZmFpbHMiOjE0OH1dLDI1NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIHRvT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JykKICAsIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXsKICByZXR1cm4gbmV3IERhdGUoTmFOKS50b0pTT04oKSAhPT0gbnVsbCB8fCBEYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7dG9JU09TdHJpbmc6IGZ1bmN0aW9uKCl7IHJldHVybiAxOyB9fSkgIT09IDE7Cn0pLCAnRGF0ZScsIHsKICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpewogICAgdmFyIE8gID0gdG9PYmplY3QodGhpcykKICAgICAgLCBwdiA9IHRvUHJpbWl0aXZlKE8pOwogICAgcmV0dXJuIHR5cGVvZiBwdiA9PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUocHYpID8gbnVsbCA6IE8udG9JU09TdHJpbmcoKTsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNDYsIi4vX2ZhaWxzIjoxNDgsIi4vX3RvLW9iamVjdCI6MjIzLCIuL190by1wcmltaXRpdmUiOjIyNH1dLDI1ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBUT19QUklNSVRJVkUgPSByZXF1aXJlKCcuL193a3MnKSgndG9QcmltaXRpdmUnKQogICwgcHJvdG8gICAgICAgID0gRGF0ZS5wcm90b3R5cGU7CgppZighKFRPX1BSSU1JVElWRSBpbiBwcm90bykpcmVxdWlyZSgnLi9faGlkZScpKHByb3RvLCBUT19QUklNSVRJVkUsIHJlcXVpcmUoJy4vX2RhdGUtdG8tcHJpbWl0aXZlJykpOwp9LHsiLi9fZGF0ZS10by1wcmltaXRpdmUiOjE0MCwiLi9faGlkZSI6MTU0LCIuL193a3MiOjIzMX1dLDI1OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBEYXRlUHJvdG8gICAgPSBEYXRlLnByb3RvdHlwZQogICwgSU5WQUxJRF9EQVRFID0gJ0ludmFsaWQgRGF0ZScKICAsIFRPX1NUUklORyAgICA9ICd0b1N0cmluZycKICAsICR0b1N0cmluZyAgICA9IERhdGVQcm90b1tUT19TVFJJTkddCiAgLCBnZXRUaW1lICAgICAgPSBEYXRlUHJvdG8uZ2V0VGltZTsKaWYobmV3IERhdGUoTmFOKSArICcnICE9IElOVkFMSURfREFURSl7CiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShEYXRlUHJvdG8sIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKXsKICAgIHZhciB2YWx1ZSA9IGdldFRpbWUuY2FsbCh0aGlzKTsKICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyAkdG9TdHJpbmcuY2FsbCh0aGlzKSA6IElOVkFMSURfREFURTsKICB9KTsKfQp9LHsiLi9fcmVkZWZpbmUiOjIwMX1dLDI2MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjIuMy4yIC8gMTUuMy40LjUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQodGhpc0FyZywgYXJncy4uLikKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5QLCAnRnVuY3Rpb24nLCB7YmluZDogcmVxdWlyZSgnLi9fYmluZCcpfSk7Cn0seyIuL19iaW5kIjoxMzAsIi4vX2V4cG9ydCI6MTQ2fV0sMjYxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgaXNPYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICwgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJykKICAsIEhBU19JTlNUQU5DRSAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2hhc0luc3RhbmNlJykKICAsIEZ1bmN0aW9uUHJvdG8gID0gRnVuY3Rpb24ucHJvdG90eXBlOwovLyAxOS4yLjMuNiBGdW5jdGlvbi5wcm90b3R5cGVbQEBoYXNJbnN0YW5jZV0oVikKaWYoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90bykpcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihGdW5jdGlvblByb3RvLCBIQVNfSU5TVEFOQ0UsIHt2YWx1ZTogZnVuY3Rpb24oTyl7CiAgaWYodHlwZW9mIHRoaXMgIT0gJ2Z1bmN0aW9uJyB8fCAhaXNPYmplY3QoTykpcmV0dXJuIGZhbHNlOwogIGlmKCFpc09iamVjdCh0aGlzLnByb3RvdHlwZSkpcmV0dXJuIE8gaW5zdGFuY2VvZiB0aGlzOwogIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6CiAgd2hpbGUoTyA9IGdldFByb3RvdHlwZU9mKE8pKWlmKHRoaXMucHJvdG90eXBlID09PSBPKXJldHVybiB0cnVlOwogIHJldHVybiBmYWxzZTsKfX0pOwp9LHsiLi9faXMtb2JqZWN0IjoxNjMsIi4vX29iamVjdC1kcCI6MTgxLCIuL19vYmplY3QtZ3BvIjoxODgsIi4vX3drcyI6MjMxfV0sMjYyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGRQICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mCiAgLCBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpCiAgLCBoYXMgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJykKICAsIEZQcm90byAgICAgPSBGdW5jdGlvbi5wcm90b3R5cGUKICAsIG5hbWVSRSAgICAgPSAvXlxzKmZ1bmN0aW9uIChbXiAoXSopLwogICwgTkFNRSAgICAgICA9ICduYW1lJzsKCnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uKCl7CiAgcmV0dXJuIHRydWU7Cn07CgovLyAxOS4yLjQuMiBuYW1lCk5BTUUgaW4gRlByb3RvIHx8IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgZFAoRlByb3RvLCBOQU1FLCB7CiAgY29uZmlndXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24oKXsKICAgIHRyeSB7CiAgICAgIHZhciB0aGF0ID0gdGhpcwogICAgICAgICwgbmFtZSA9ICgnJyArIHRoYXQpLm1hdGNoKG5hbWVSRSlbMV07CiAgICAgIGhhcyh0aGF0LCBOQU1FKSB8fCAhaXNFeHRlbnNpYmxlKHRoYXQpIHx8IGRQKHRoYXQsIE5BTUUsIGNyZWF0ZURlc2MoNSwgbmFtZSkpOwogICAgICByZXR1cm4gbmFtZTsKICAgIH0gY2F0Y2goZSl7CiAgICAgIHJldHVybiAnJzsKICAgIH0KICB9Cn0pOwp9LHsiLi9fZGVzY3JpcHRvcnMiOjE0MiwiLi9faGFzIjoxNTMsIi4vX29iamVjdC1kcCI6MTgxLCIuL19wcm9wZXJ0eS1kZXNjIjoxOTl9XSwyNjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpOwoKLy8gMjMuMSBNYXAgT2JqZWN0cwptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKSgnTWFwJywgZnVuY3Rpb24oZ2V0KXsKICByZXR1cm4gZnVuY3Rpb24gTWFwKCl7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9Owp9LCB7CiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KQogIGdldDogZnVuY3Rpb24gZ2V0KGtleSl7CiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodGhpcywga2V5KTsKICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52OwogIH0sCiAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSkKICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKXsKICAgIHJldHVybiBzdHJvbmcuZGVmKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTsKICB9Cn0sIHN0cm9uZywgdHJ1ZSk7Cn0seyIuL19jb2xsZWN0aW9uIjoxMzYsIi4vX2NvbGxlY3Rpb24tc3Ryb25nIjoxMzN9XSwyNjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4yLjIuMyBNYXRoLmFjb3NoKHgpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGxvZzFwICAgPSByZXF1aXJlKCcuL19tYXRoLWxvZzFwJykKICAsIHNxcnQgICAgPSBNYXRoLnNxcnQKICAsICRhY29zaCAgPSBNYXRoLmFjb3NoOwoKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhY29zaAogIC8vIFY4IGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM1MDkKICAmJiBNYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgPT0gNzEwCiAgLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFjb3NoKEluZmluaXR5KSAtPiBOYU4gCiAgJiYgJGFjb3NoKEluZmluaXR5KSA9PSBJbmZpbml0eQopLCAnTWF0aCcsIHsKICBhY29zaDogZnVuY3Rpb24gYWNvc2goeCl7CiAgICByZXR1cm4gKHggPSAreCkgPCAxID8gTmFOIDogeCA+IDk0OTA2MjY1LjYyNDI1MTU2CiAgICAgID8gTWF0aC5sb2coeCkgKyBNYXRoLkxOMgogICAgICA6IGxvZzFwKHggLSAxICsgc3FydCh4IC0gMSkgKiBzcXJ0KHggKyAxKSk7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTQ2LCIuL19tYXRoLWxvZzFwIjoxNzR9XSwyNjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRhc2luaCAgPSBNYXRoLmFzaW5oOwoKZnVuY3Rpb24gYXNpbmgoeCl7CiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBNYXRoLmxvZyh4ICsgTWF0aC5zcXJ0KHggKiB4ICsgMSkpOwp9CgovLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXNpbmgoMCkgLT4gLTAgCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXNpbmggJiYgMSAvICRhc2luaCgwKSA+IDApLCAnTWF0aCcsIHthc2luaDogYXNpbmh9KTsKfSx7Ii4vX2V4cG9ydCI6MTQ2fV0sMjY2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjcgTWF0aC5hdGFuaCh4KQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkYXRhbmggID0gTWF0aC5hdGFuaDsKCi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hdGFuaCgtMCkgLT4gMCAKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhdGFuaCAmJiAxIC8gJGF0YW5oKC0wKSA8IDApLCAnTWF0aCcsIHsKICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCl7CiAgICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiBNYXRoLmxvZygoMSArIHgpIC8gKDEgLSB4KSkgLyAyOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE0Nn1dLDI2NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi45IE1hdGguY2JydCh4KQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBzaWduICAgID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7CiAgY2JydDogZnVuY3Rpb24gY2JydCh4KXsKICAgIHJldHVybiBzaWduKHggPSAreCkgKiBNYXRoLnBvdyhNYXRoLmFicyh4KSwgMSAvIDMpOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE0NiwiLi9fbWF0aC1zaWduIjoxNzV9XSwyNjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4yLjIuMTEgTWF0aC5jbHozMih4KQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgewogIGNsejMyOiBmdW5jdGlvbiBjbHozMih4KXsKICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBNYXRoLmZsb29yKE1hdGgubG9nKHggKyAwLjUpICogTWF0aC5MT0cyRSkgOiAzMjsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNDZ9XSwyNjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4yLjIuMTIgTWF0aC5jb3NoKHgpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGV4cCAgICAgPSBNYXRoLmV4cDsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsKICBjb3NoOiBmdW5jdGlvbiBjb3NoKHgpewogICAgcmV0dXJuIChleHAoeCA9ICt4KSArIGV4cCgteCkpIC8gMjsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNDZ9XSwyNzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkZXhwbTEgID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpOwoKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoJGV4cG0xICE9IE1hdGguZXhwbTEpLCAnTWF0aCcsIHtleHBtMTogJGV4cG0xfSk7Cn0seyIuL19leHBvcnQiOjE0NiwiLi9fbWF0aC1leHBtMSI6MTczfV0sMjcxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpCnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgc2lnbiAgICAgID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJykKICAsIHBvdyAgICAgICA9IE1hdGgucG93CiAgLCBFUFNJTE9OICAgPSBwb3coMiwgLTUyKQogICwgRVBTSUxPTjMyID0gcG93KDIsIC0yMykKICAsIE1BWDMyICAgICA9IHBvdygyLCAxMjcpICogKDIgLSBFUFNJTE9OMzIpCiAgLCBNSU4zMiAgICAgPSBwb3coMiwgLTEyNik7Cgp2YXIgcm91bmRUaWVzVG9FdmVuID0gZnVuY3Rpb24obil7CiAgcmV0dXJuIG4gKyAxIC8gRVBTSUxPTiAtIDEgLyBFUFNJTE9OOwp9OwoKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsKICBmcm91bmQ6IGZ1bmN0aW9uIGZyb3VuZCh4KXsKICAgIHZhciAkYWJzICA9IE1hdGguYWJzKHgpCiAgICAgICwgJHNpZ24gPSBzaWduKHgpCiAgICAgICwgYSwgcmVzdWx0OwogICAgaWYoJGFicyA8IE1JTjMyKXJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7CiAgICBhID0gKDEgKyBFUFNJTE9OMzIgLyBFUFNJTE9OKSAqICRhYnM7CiAgICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTsKICAgIGlmKHJlc3VsdCA+IE1BWDMyIHx8IHJlc3VsdCAhPSByZXN1bHQpcmV0dXJuICRzaWduICogSW5maW5pdHk7CiAgICByZXR1cm4gJHNpZ24gKiByZXN1bHQ7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTQ2LCIuL19tYXRoLXNpZ24iOjE3NX1dLDI3MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi4xNyBNYXRoLmh5cG90KFt2YWx1ZTFbLCB2YWx1ZTJbLCDigKYgXV1dKQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBhYnMgICAgID0gTWF0aC5hYnM7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7CiAgaHlwb3Q6IGZ1bmN0aW9uIGh5cG90KHZhbHVlMSwgdmFsdWUyKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFycwogICAgdmFyIHN1bSAgPSAwCiAgICAgICwgaSAgICA9IDAKICAgICAgLCBhTGVuID0gYXJndW1lbnRzLmxlbmd0aAogICAgICAsIGxhcmcgPSAwCiAgICAgICwgYXJnLCBkaXY7CiAgICB3aGlsZShpIDwgYUxlbil7CiAgICAgIGFyZyA9IGFicyhhcmd1bWVudHNbaSsrXSk7CiAgICAgIGlmKGxhcmcgPCBhcmcpewogICAgICAgIGRpdiAgPSBsYXJnIC8gYXJnOwogICAgICAgIHN1bSAgPSBzdW0gKiBkaXYgKiBkaXYgKyAxOwogICAgICAgIGxhcmcgPSBhcmc7CiAgICAgIH0gZWxzZSBpZihhcmcgPiAwKXsKICAgICAgICBkaXYgID0gYXJnIC8gbGFyZzsKICAgICAgICBzdW0gKz0gZGl2ICogZGl2OwogICAgICB9IGVsc2Ugc3VtICs9IGFyZzsKICAgIH0KICAgIHJldHVybiBsYXJnID09PSBJbmZpbml0eSA/IEluZmluaXR5IDogbGFyZyAqIE1hdGguc3FydChzdW0pOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE0Nn1dLDI3MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi4xOCBNYXRoLmltdWwoeCwgeSkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJGltdWwgICA9IE1hdGguaW11bDsKCi8vIHNvbWUgV2ViS2l0IHZlcnNpb25zIGZhaWxzIHdpdGggYmlnIG51bWJlcnMsIHNvbWUgaGFzIHdyb25nIGFyaXR5CiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpewogIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjsKfSksICdNYXRoJywgewogIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSl7CiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmCiAgICAgICwgeG4gPSAreAogICAgICAsIHluID0gK3kKICAgICAgLCB4bCA9IFVJTlQxNiAmIHhuCiAgICAgICwgeWwgPSBVSU5UMTYgJiB5bjsKICAgIHJldHVybiAwIHwgeGwgKiB5bCArICgoVUlOVDE2ICYgeG4gPj4+IDE2KSAqIHlsICsgeGwgKiAoVUlOVDE2ICYgeW4gPj4+IDE2KSA8PCAxNiA+Pj4gMCk7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTQ2LCIuL19mYWlscyI6MTQ4fV0sMjc0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjIxIE1hdGgubG9nMTAoeCkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsKICBsb2cxMDogZnVuY3Rpb24gbG9nMTAoeCl7CiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMTA7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTQ2fV0sMjc1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeCkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtsb2cxcDogcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpfSk7Cn0seyIuL19leHBvcnQiOjE0NiwiLi9fbWF0aC1sb2cxcCI6MTc0fV0sMjc2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjIyIE1hdGgubG9nMih4KQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgewogIGxvZzI6IGZ1bmN0aW9uIGxvZzIoeCl7CiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMjsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNDZ9XSwyNzc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7c2lnbjogcmVxdWlyZSgnLi9fbWF0aC1zaWduJyl9KTsKfSx7Ii4vX2V4cG9ydCI6MTQ2LCIuL19tYXRoLXNpZ24iOjE3NX1dLDI3ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi4zMCBNYXRoLnNpbmgoeCkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgZXhwbTEgICA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKQogICwgZXhwICAgICA9IE1hdGguZXhwOwoKLy8gVjggbmVhciBDaHJvbWl1bSAzOCBoYXMgYSBwcm9ibGVtIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpewogIHJldHVybiAhTWF0aC5zaW5oKC0yZS0xNykgIT0gLTJlLTE3Owp9KSwgJ01hdGgnLCB7CiAgc2luaDogZnVuY3Rpb24gc2luaCh4KXsKICAgIHJldHVybiBNYXRoLmFicyh4ID0gK3gpIDwgMQogICAgICA/IChleHBtMSh4KSAtIGV4cG0xKC14KSkgLyAyCiAgICAgIDogKGV4cCh4IC0gMSkgLSBleHAoLXggLSAxKSkgKiAoTWF0aC5FIC8gMik7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTQ2LCIuL19mYWlscyI6MTQ4LCIuL19tYXRoLWV4cG0xIjoxNzN9XSwyNzk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4yLjIuMzMgTWF0aC50YW5oKHgpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGV4cG0xICAgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJykKICAsIGV4cCAgICAgPSBNYXRoLmV4cDsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsKICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpewogICAgdmFyIGEgPSBleHBtMSh4ID0gK3gpCiAgICAgICwgYiA9IGV4cG0xKC14KTsKICAgIHJldHVybiBhID09IEluZmluaXR5ID8gMSA6IGIgPT0gSW5maW5pdHkgPyAtMSA6IChhIC0gYikgLyAoZXhwKHgpICsgZXhwKC14KSk7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTQ2LCIuL19tYXRoLWV4cG0xIjoxNzN9XSwyODA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgewogIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCl7CiAgICByZXR1cm4gKGl0ID4gMCA/IE1hdGguZmxvb3IgOiBNYXRoLmNlaWwpKGl0KTsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNDZ9XSwyODE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBnbG9iYWwgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgLCBoYXMgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpCiAgLCBjb2YgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2NvZicpCiAgLCBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKQogICwgdG9QcmltaXRpdmUgICAgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKQogICwgZmFpbHMgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpCiAgLCBnT1BOICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZgogICwgZ09QRCAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYKICAsIGRQICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZgogICwgJHRyaW0gICAgICAgICAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW0KICAsIE5VTUJFUiAgICAgICAgICAgID0gJ051bWJlcicKICAsICROdW1iZXIgICAgICAgICAgID0gZ2xvYmFsW05VTUJFUl0KICAsIEJhc2UgICAgICAgICAgICAgID0gJE51bWJlcgogICwgcHJvdG8gICAgICAgICAgICAgPSAkTnVtYmVyLnByb3RvdHlwZQogIC8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZwogICwgQlJPS0VOX0NPRiAgICAgICAgPSBjb2YocmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpKHByb3RvKSkgPT0gTlVNQkVSCiAgLCBUUklNICAgICAgICAgICAgICA9ICd0cmltJyBpbiBTdHJpbmcucHJvdG90eXBlOwoKLy8gNy4xLjMgVG9OdW1iZXIoYXJndW1lbnQpCnZhciB0b051bWJlciA9IGZ1bmN0aW9uKGFyZ3VtZW50KXsKICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgZmFsc2UpOwogIGlmKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKXsKICAgIGl0ID0gVFJJTSA/IGl0LnRyaW0oKSA6ICR0cmltKGl0LCAzKTsKICAgIHZhciBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMCkKICAgICAgLCB0aGlyZCwgcmFkaXgsIG1heENvZGU7CiAgICBpZihmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KXsKICAgICAgdGhpcmQgPSBpdC5jaGFyQ29kZUF0KDIpOwogICAgICBpZih0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMClyZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4CiAgICB9IGVsc2UgaWYoZmlyc3QgPT09IDQ4KXsKICAgICAgc3dpdGNoKGl0LmNoYXJDb2RlQXQoMSkpewogICAgICAgIGNhc2UgNjYgOiBjYXNlIDk4ICA6IHJhZGl4ID0gMjsgbWF4Q29kZSA9IDQ5OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBiWzAxXSskL2kKICAgICAgICBjYXNlIDc5IDogY2FzZSAxMTEgOiByYWRpeCA9IDg7IG1heENvZGUgPSA1NTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wb1swLTddKyQvaQogICAgICAgIGRlZmF1bHQgOiByZXR1cm4gK2l0OwogICAgICB9CiAgICAgIGZvcih2YXIgZGlnaXRzID0gaXQuc2xpY2UoMiksIGkgPSAwLCBsID0gZGlnaXRzLmxlbmd0aCwgY29kZTsgaSA8IGw7IGkrKyl7CiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGkpOwogICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbAogICAgICAgIC8vIGJ1dCBUb051bWJlciBzaG91bGQgcmV0dXJuIE5hTiBpZiBhIHN0cmluZyBjb250YWlucyB1bmF2YWlsYWJsZSBzeW1ib2xzCiAgICAgICAgaWYoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKXJldHVybiBOYU47CiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpOwogICAgfQogIH0gcmV0dXJuICtpdDsKfTsKCmlmKCEkTnVtYmVyKCcgMG8xJykgfHwgISROdW1iZXIoJzBiMScpIHx8ICROdW1iZXIoJysweDEnKSl7CiAgJE51bWJlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSl7CiAgICB2YXIgaXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiB2YWx1ZQogICAgICAsIHRoYXQgPSB0aGlzOwogICAgcmV0dXJuIHRoYXQgaW5zdGFuY2VvZiAkTnVtYmVyCiAgICAgIC8vIGNoZWNrIG9uIDEuLmNvbnN0cnVjdG9yKGZvbykgY2FzZQogICAgICAmJiAoQlJPS0VOX0NPRiA/IGZhaWxzKGZ1bmN0aW9uKCl7IHByb3RvLnZhbHVlT2YuY2FsbCh0aGF0KTsgfSkgOiBjb2YodGhhdCkgIT0gTlVNQkVSKQogICAgICAgID8gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UodG9OdW1iZXIoaXQpKSwgdGhhdCwgJE51bWJlcikgOiB0b051bWJlcihpdCk7CiAgfTsKICBmb3IodmFyIGtleXMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QTihCYXNlKSA6ICgKICAgIC8vIEVTMzoKICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICsKICAgIC8vIEVTNiAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTNiBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOgogICAgJ0VQU0lMT04saXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIsTUFYX1NBRkVfSU5URUdFUiwnICsKICAgICdNSU5fU0FGRV9JTlRFR0VSLHBhcnNlRmxvYXQscGFyc2VJbnQsaXNJbnRlZ2VyJwogICkuc3BsaXQoJywnKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyBqKyspewogICAgaWYoaGFzKEJhc2UsIGtleSA9IGtleXNbal0pICYmICFoYXMoJE51bWJlciwga2V5KSl7CiAgICAgIGRQKCROdW1iZXIsIGtleSwgZ09QRChCYXNlLCBrZXkpKTsKICAgIH0KICB9CiAgJE51bWJlci5wcm90b3R5cGUgPSBwcm90bzsKICBwcm90by5jb25zdHJ1Y3RvciA9ICROdW1iZXI7CiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7Cn0KfSx7Ii4vX2NvZiI6MTMyLCIuL19kZXNjcmlwdG9ycyI6MTQyLCIuL19mYWlscyI6MTQ4LCIuL19nbG9iYWwiOjE1MiwiLi9faGFzIjoxNTMsIi4vX2luaGVyaXQtaWYtcmVxdWlyZWQiOjE1NywiLi9fb2JqZWN0LWNyZWF0ZSI6MTgwLCIuL19vYmplY3QtZHAiOjE4MSwiLi9fb2JqZWN0LWdvcGQiOjE4NCwiLi9fb2JqZWN0LWdvcG4iOjE4NiwiLi9fcmVkZWZpbmUiOjIwMSwiLi9fc3RyaW5nLXRyaW0iOjIxNiwiLi9fdG8tcHJpbWl0aXZlIjoyMjR9XSwyODI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4xLjIuMSBOdW1iZXIuRVBTSUxPTgp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7RVBTSUxPTjogTWF0aC5wb3coMiwgLTUyKX0pOwp9LHsiLi9fZXhwb3J0IjoxNDZ9XSwyODM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4xLjIuMiBOdW1iZXIuaXNGaW5pdGUobnVtYmVyKQp2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIF9pc0Zpbml0ZSA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmlzRmluaXRlOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7CiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KXsKICAgIHJldHVybiB0eXBlb2YgaXQgPT0gJ251bWJlcicgJiYgX2lzRmluaXRlKGl0KTsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNDYsIi4vX2dsb2JhbCI6MTUyfV0sMjg0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtpc0ludGVnZXI6IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKX0pOwp9LHsiLi9fZXhwb3J0IjoxNDYsIi4vX2lzLWludGVnZXIiOjE2Mn1dLDI4NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjEuMi40IE51bWJlci5pc05hTihudW1iZXIpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsKICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKXsKICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE0Nn1dLDI4NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcikKdmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBpc0ludGVnZXIgPSByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJykKICAsIGFicyAgICAgICA9IE1hdGguYWJzOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7CiAgaXNTYWZlSW50ZWdlcjogZnVuY3Rpb24gaXNTYWZlSW50ZWdlcihudW1iZXIpewogICAgcmV0dXJuIGlzSW50ZWdlcihudW1iZXIpICYmIGFicyhudW1iZXIpIDw9IDB4MWZmZmZmZmZmZmZmZmY7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTQ2LCIuL19pcy1pbnRlZ2VyIjoxNjJ9XSwyODc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUgp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7TUFYX1NBRkVfSU5URUdFUjogMHgxZmZmZmZmZmZmZmZmZn0pOwp9LHsiLi9fZXhwb3J0IjoxNDZ9XSwyODg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge01JTl9TQUZFX0lOVEVHRVI6IC0weDFmZmZmZmZmZmZmZmZmfSk7Cn0seyIuL19leHBvcnQiOjE0Nn1dLDI4OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkZXhwb3J0ICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7Ci8vIDIwLjEuMi4xMiBOdW1iZXIucGFyc2VGbG9hdChzdHJpbmcpCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgJ051bWJlcicsIHtwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdH0pOwp9LHsiLi9fZXhwb3J0IjoxNDYsIi4vX3BhcnNlLWZsb2F0IjoxOTV9XSwyOTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpOwovLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUludCAhPSAkcGFyc2VJbnQpLCAnTnVtYmVyJywge3BhcnNlSW50OiAkcGFyc2VJbnR9KTsKfSx7Ii4vX2V4cG9ydCI6MTQ2LCIuL19wYXJzZS1pbnQiOjE5Nn1dLDI5MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCB0b0ludGVnZXIgICAgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJykKICAsIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJykKICAsIHJlcGVhdCAgICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKQogICwgJHRvRml4ZWQgICAgID0gMS4udG9GaXhlZAogICwgZmxvb3IgICAgICAgID0gTWF0aC5mbG9vcgogICwgZGF0YSAgICAgICAgID0gWzAsIDAsIDAsIDAsIDAsIDBdCiAgLCBFUlJPUiAgICAgICAgPSAnTnVtYmVyLnRvRml4ZWQ6IGluY29ycmVjdCBpbnZvY2F0aW9uIScKICAsIFpFUk8gICAgICAgICA9ICcwJzsKCnZhciBtdWx0aXBseSA9IGZ1bmN0aW9uKG4sIGMpewogIHZhciBpICA9IC0xCiAgICAsIGMyID0gYzsKICB3aGlsZSgrK2kgPCA2KXsKICAgIGMyICs9IG4gKiBkYXRhW2ldOwogICAgZGF0YVtpXSA9IGMyICUgMWU3OwogICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7CiAgfQp9Owp2YXIgZGl2aWRlID0gZnVuY3Rpb24obil7CiAgdmFyIGkgPSA2CiAgICAsIGMgPSAwOwogIHdoaWxlKC0taSA+PSAwKXsKICAgIGMgKz0gZGF0YVtpXTsKICAgIGRhdGFbaV0gPSBmbG9vcihjIC8gbik7CiAgICBjID0gKGMgJSBuKSAqIDFlNzsKICB9Cn07CnZhciBudW1Ub1N0cmluZyA9IGZ1bmN0aW9uKCl7CiAgdmFyIGkgPSA2CiAgICAsIHMgPSAnJzsKICB3aGlsZSgtLWkgPj0gMCl7CiAgICBpZihzICE9PSAnJyB8fCBpID09PSAwIHx8IGRhdGFbaV0gIT09IDApewogICAgICB2YXIgdCA9IFN0cmluZyhkYXRhW2ldKTsKICAgICAgcyA9IHMgPT09ICcnID8gdCA6IHMgKyByZXBlYXQuY2FsbChaRVJPLCA3IC0gdC5sZW5ndGgpICsgdDsKICAgIH0KICB9IHJldHVybiBzOwp9Owp2YXIgcG93ID0gZnVuY3Rpb24oeCwgbiwgYWNjKXsKICByZXR1cm4gbiA9PT0gMCA/IGFjYyA6IG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYyk7Cn07CnZhciBsb2cgPSBmdW5jdGlvbih4KXsKICB2YXIgbiAgPSAwCiAgICAsIHgyID0geDsKICB3aGlsZSh4MiA+PSA0MDk2KXsKICAgIG4gKz0gMTI7CiAgICB4MiAvPSA0MDk2OwogIH0KICB3aGlsZSh4MiA+PSAyKXsKICAgIG4gICs9IDE7CiAgICB4MiAvPSAyOwogIH0gcmV0dXJuIG47Cn07CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICghISR0b0ZpeGVkICYmICgKICAwLjAwMDA4LnRvRml4ZWQoMykgIT09ICcwLjAwMCcgfHwKICAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8CiAgMS4yNTUudG9GaXhlZCgyKSAhPT0gJzEuMjUnIHx8CiAgMTAwMDAwMDAwMDAwMDAwMDEyOC4udG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnCikgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXsKICAvLyBWOCB+IEFuZHJvaWQgNC4zLQogICR0b0ZpeGVkLmNhbGwoe30pOwp9KSksICdOdW1iZXInLCB7CiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cyl7CiAgICB2YXIgeCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCBFUlJPUikKICAgICAgLCBmID0gdG9JbnRlZ2VyKGZyYWN0aW9uRGlnaXRzKQogICAgICAsIHMgPSAnJwogICAgICAsIG0gPSBaRVJPCiAgICAgICwgZSwgeiwgaiwgazsKICAgIGlmKGYgPCAwIHx8IGYgPiAyMCl0aHJvdyBSYW5nZUVycm9yKEVSUk9SKTsKICAgIGlmKHggIT0geClyZXR1cm4gJ05hTic7CiAgICBpZih4IDw9IC0xZTIxIHx8IHggPj0gMWUyMSlyZXR1cm4gU3RyaW5nKHgpOwogICAgaWYoeCA8IDApewogICAgICBzID0gJy0nOwogICAgICB4ID0gLXg7CiAgICB9CiAgICBpZih4ID4gMWUtMjEpewogICAgICBlID0gbG9nKHggKiBwb3coMiwgNjksIDEpKSAtIDY5OwogICAgICB6ID0gZSA8IDAgPyB4ICogcG93KDIsIC1lLCAxKSA6IHggLyBwb3coMiwgZSwgMSk7CiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDsKICAgICAgZSA9IDUyIC0gZTsKICAgICAgaWYoZSA+IDApewogICAgICAgIG11bHRpcGx5KDAsIHopOwogICAgICAgIGogPSBmOwogICAgICAgIHdoaWxlKGogPj0gNyl7CiAgICAgICAgICBtdWx0aXBseSgxZTcsIDApOwogICAgICAgICAgaiAtPSA3OwogICAgICAgIH0KICAgICAgICBtdWx0aXBseShwb3coMTAsIGosIDEpLCAwKTsKICAgICAgICBqID0gZSAtIDE7CiAgICAgICAgd2hpbGUoaiA+PSAyMyl7CiAgICAgICAgICBkaXZpZGUoMSA8PCAyMyk7CiAgICAgICAgICBqIC09IDIzOwogICAgICAgIH0KICAgICAgICBkaXZpZGUoMSA8PCBqKTsKICAgICAgICBtdWx0aXBseSgxLCAxKTsKICAgICAgICBkaXZpZGUoMik7CiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbXVsdGlwbHkoMCwgeik7CiAgICAgICAgbXVsdGlwbHkoMSA8PCAtZSwgMCk7CiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCkgKyByZXBlYXQuY2FsbChaRVJPLCBmKTsKICAgICAgfQogICAgfQogICAgaWYoZiA+IDApewogICAgICBrID0gbS5sZW5ndGg7CiAgICAgIG0gPSBzICsgKGsgPD0gZiA/ICcwLicgKyByZXBlYXQuY2FsbChaRVJPLCBmIC0gaykgKyBtIDogbS5zbGljZSgwLCBrIC0gZikgKyAnLicgKyBtLnNsaWNlKGsgLSBmKSk7CiAgICB9IGVsc2UgewogICAgICBtID0gcyArIG07CiAgICB9IHJldHVybiBtOwogIH0KfSk7Cn0seyIuL19hLW51bWJlci12YWx1ZSI6MTE4LCIuL19leHBvcnQiOjE0NiwiLi9fZmFpbHMiOjE0OCwiLi9fc3RyaW5nLXJlcGVhdCI6MjE1LCIuL190by1pbnRlZ2VyIjoyMjB9XSwyOTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJGZhaWxzICAgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKQogICwgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKQogICwgJHRvUHJlY2lzaW9uID0gMS4udG9QcmVjaXNpb247CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICgkZmFpbHMoZnVuY3Rpb24oKXsKICAvLyBJRTctCiAgcmV0dXJuICR0b1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJzsKfSkgfHwgISRmYWlscyhmdW5jdGlvbigpewogIC8vIFY4IH4gQW5kcm9pZCA0LjMtCiAgJHRvUHJlY2lzaW9uLmNhbGwoe30pOwp9KSksICdOdW1iZXInLCB7CiAgdG9QcmVjaXNpb246IGZ1bmN0aW9uIHRvUHJlY2lzaW9uKHByZWNpc2lvbil7CiAgICB2YXIgdGhhdCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCAnTnVtYmVyI3RvUHJlY2lzaW9uOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTsKICAgIHJldHVybiBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQpIDogJHRvUHJlY2lzaW9uLmNhbGwodGhhdCwgcHJlY2lzaW9uKTsgCiAgfQp9KTsKfSx7Ii4vX2EtbnVtYmVyLXZhbHVlIjoxMTgsIi4vX2V4cG9ydCI6MTQ2LCIuL19mYWlscyI6MTQ4fV0sMjkzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzEwM11bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19leHBvcnQiOjE0NiwiLi9fb2JqZWN0LWFzc2lnbiI6MTc5LCJkdXAiOjEwM31dLDI5NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVsxMDRdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fZXhwb3J0IjoxNDYsIi4vX29iamVjdC1jcmVhdGUiOjE4MCwiZHVwIjoxMDR9XSwyOTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwovLyAxOS4xLjIuMyAvIDE1LjIuMy43IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7ZGVmaW5lUHJvcGVydGllczogcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpfSk7Cn0seyIuL19kZXNjcmlwdG9ycyI6MTQyLCIuL19leHBvcnQiOjE0NiwiLi9fb2JqZWN0LWRwcyI6MTgyfV0sMjk2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzEwNV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19kZXNjcmlwdG9ycyI6MTQyLCIuL19leHBvcnQiOjE0NiwiLi9fb2JqZWN0LWRwIjoxODEsImR1cCI6MTA1fV0sMjk3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjUgT2JqZWN0LmZyZWV6ZShPKQp2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICwgbWV0YSAgICAgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7CgpyZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2ZyZWV6ZScsIGZ1bmN0aW9uKCRmcmVlemUpewogIHJldHVybiBmdW5jdGlvbiBmcmVlemUoaXQpewogICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShtZXRhKGl0KSkgOiBpdDsKICB9Owp9KTsKfSx7Ii4vX2lzLW9iamVjdCI6MTYzLCIuL19tZXRhIjoxNzYsIi4vX29iamVjdC1zYXAiOjE5Mn1dLDI5ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkKdmFyIHRvSU9iamVjdCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JykKICAsICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7CgpyZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uKCl7CiAgcmV0dXJuIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KXsKICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7CiAgfTsKfSk7Cn0seyIuL19vYmplY3QtZ29wZCI6MTg0LCIuL19vYmplY3Qtc2FwIjoxOTIsIi4vX3RvLWlvYmplY3QiOjIyMX1dLDI5OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pCnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlOYW1lcycsIGZ1bmN0aW9uKCl7CiAgcmV0dXJuIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpLmY7Cn0pOwp9LHsiLi9fb2JqZWN0LWdvcG4tZXh0IjoxODUsIi4vX29iamVjdC1zYXAiOjE5Mn1dLDMwMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVsxMDZdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fb2JqZWN0LWdwbyI6MTg4LCIuL19vYmplY3Qtc2FwIjoxOTIsIi4vX3RvLW9iamVjdCI6MjIzLCJkdXAiOjEwNn1dLDMwMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjEuMi4xMSBPYmplY3QuaXNFeHRlbnNpYmxlKE8pCnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpOwoKcmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0V4dGVuc2libGUnLCBmdW5jdGlvbigkaXNFeHRlbnNpYmxlKXsKICByZXR1cm4gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KXsKICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlIDogZmFsc2U7CiAgfTsKfSk7Cn0seyIuL19pcy1vYmplY3QiOjE2MywiLi9fb2JqZWN0LXNhcCI6MTkyfV0sMzAyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzEwN11bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19pcy1vYmplY3QiOjE2MywiLi9fb2JqZWN0LXNhcCI6MTkyLCJkdXAiOjEwN31dLDMwMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjEuMi4xMyBPYmplY3QuaXNTZWFsZWQoTykKdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7CgpyZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzU2VhbGVkJywgZnVuY3Rpb24oJGlzU2VhbGVkKXsKICByZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaXQpewogICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc1NlYWxlZCA/ICRpc1NlYWxlZChpdCkgOiBmYWxzZSA6IHRydWU7CiAgfTsKfSk7Cn0seyIuL19pcy1vYmplY3QiOjE2MywiLi9fb2JqZWN0LXNhcCI6MTkyfV0sMzA0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4zLjEwIE9iamVjdC5pcyh2YWx1ZTEsIHZhbHVlMikKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7aXM6IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKX0pOwp9LHsiLi9fZXhwb3J0IjoxNDYsIi4vX3NhbWUtdmFsdWUiOjIwM31dLDMwNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVsxMDhdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fb2JqZWN0LWtleXMiOjE5MCwiLi9fb2JqZWN0LXNhcCI6MTkyLCIuL190by1vYmplY3QiOjIyMywiZHVwIjoxMDh9XSwzMDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAxOS4xLjIuMTUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKE8pCnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBtZXRhICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTsKCnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgncHJldmVudEV4dGVuc2lvbnMnLCBmdW5jdGlvbigkcHJldmVudEV4dGVuc2lvbnMpewogIHJldHVybiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyhpdCl7CiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDsKICB9Owp9KTsKfSx7Ii4vX2lzLW9iamVjdCI6MTYzLCIuL19tZXRhIjoxNzYsIi4vX29iamVjdC1zYXAiOjE5Mn1dLDMwNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjEuMi4xNyBPYmplY3Quc2VhbChPKQp2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICwgbWV0YSAgICAgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7CgpyZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3NlYWwnLCBmdW5jdGlvbigkc2VhbCl7CiAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpewogICAgcmV0dXJuICRzZWFsICYmIGlzT2JqZWN0KGl0KSA/ICRzZWFsKG1ldGEoaXQpKSA6IGl0OwogIH07Cn0pOwp9LHsiLi9faXMtb2JqZWN0IjoxNjMsIi4vX21ldGEiOjE3NiwiLi9fb2JqZWN0LXNhcCI6MTkyfV0sMzA4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzEwOV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19leHBvcnQiOjE0NiwiLi9fc2V0LXByb3RvIjoyMDQsImR1cCI6MTA5fV0sMzA5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKCkKdmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJykKICAsIHRlc3QgICAgPSB7fTsKdGVzdFtyZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKV0gPSAneic7CmlmKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpewogIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKXsKICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJzsKICB9LCB0cnVlKTsKfQp9LHsiLi9fY2xhc3NvZiI6MTMxLCIuL19yZWRlZmluZSI6MjAxLCIuL193a3MiOjIzMX1dLDMxMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkZXhwb3J0ICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7Ci8vIDE4LjIuNCBwYXJzZUZsb2F0KHN0cmluZykKJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksIHtwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdH0pOwp9LHsiLi9fZXhwb3J0IjoxNDYsIi4vX3BhcnNlLWZsb2F0IjoxOTV9XSwzMTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpOwovLyAxOC4yLjUgcGFyc2VJbnQoc3RyaW5nLCByYWRpeCkKJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VJbnQgIT0gJHBhcnNlSW50KSwge3BhcnNlSW50OiAkcGFyc2VJbnR9KTsKfSx7Ii4vX2V4cG9ydCI6MTQ2LCIuL19wYXJzZS1pbnQiOjE5Nn1dLDMxMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVsxMTFdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fYS1mdW5jdGlvbiI6MTE3LCIuL19hbi1pbnN0YW5jZSI6MTIwLCIuL19jbGFzc29mIjoxMzEsIi4vX2NvcmUiOjEzNywiLi9fY3R4IjoxMzksIi4vX2V4cG9ydCI6MTQ2LCIuL19mb3Itb2YiOjE1MSwiLi9fZ2xvYmFsIjoxNTIsIi4vX2lzLW9iamVjdCI6MTYzLCIuL19pdGVyLWRldGVjdCI6MTY4LCIuL19saWJyYXJ5IjoxNzIsIi4vX21pY3JvdGFzayI6MTc4LCIuL19yZWRlZmluZS1hbGwiOjIwMCwiLi9fc2V0LXNwZWNpZXMiOjIwNSwiLi9fc2V0LXRvLXN0cmluZy10YWciOjIwNiwiLi9fc3BlY2llcy1jb25zdHJ1Y3RvciI6MjA5LCIuL190YXNrIjoyMTgsIi4vX3drcyI6MjMxLCJkdXAiOjExMX1dLDMxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDI2LjEuMSBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KQp2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKQogICwgYW5PYmplY3QgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIHJBcHBseSAgICA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5hcHBseQogICwgZkFwcGx5ICAgID0gRnVuY3Rpb24uYXBwbHk7Ci8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbAokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7CiAgckFwcGx5KGZ1bmN0aW9uKCl7fSk7Cn0pLCAnUmVmbGVjdCcsIHsKICBhcHBseTogZnVuY3Rpb24gYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpewogICAgdmFyIFQgPSBhRnVuY3Rpb24odGFyZ2V0KQogICAgICAsIEwgPSBhbk9iamVjdChhcmd1bWVudHNMaXN0KTsKICAgIHJldHVybiByQXBwbHkgPyByQXBwbHkoVCwgdGhpc0FyZ3VtZW50LCBMKSA6IGZBcHBseS5jYWxsKFQsIHRoaXNBcmd1bWVudCwgTCk7CiAgfQp9KTsKfSx7Ii4vX2EtZnVuY3Rpb24iOjExNywiLi9fYW4tb2JqZWN0IjoxMjEsIi4vX2V4cG9ydCI6MTQ2LCIuL19mYWlscyI6MTQ4LCIuL19nbG9iYWwiOjE1Mn1dLDMxNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgWywgbmV3VGFyZ2V0XSkKdmFyICRleHBvcnQgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgY3JlYXRlICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKQogICwgYUZ1bmN0aW9uICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKQogICwgYW5PYmplY3QgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCBpc09iamVjdCAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JykKICAsIGZhaWxzICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpCiAgLCBiaW5kICAgICAgID0gcmVxdWlyZSgnLi9fYmluZCcpCiAgLCByQ29uc3RydWN0ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmNvbnN0cnVjdDsKCi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbAovLyBGRiBOaWdodGx5IHNldHMgdGhpcmQgYXJndW1lbnQgYXMgYG5ldy50YXJnZXRgLCBidXQgZG9lcyBub3QgY3JlYXRlIGB0aGlzYCBmcm9tIGl0CnZhciBORVdfVEFSR0VUX0JVRyA9IGZhaWxzKGZ1bmN0aW9uKCl7CiAgZnVuY3Rpb24gRigpe30KICByZXR1cm4gIShyQ29uc3RydWN0KGZ1bmN0aW9uKCl7fSwgW10sIEYpIGluc3RhbmNlb2YgRik7Cn0pOwp2YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24oKXsKICByQ29uc3RydWN0KGZ1bmN0aW9uKCl7fSk7Cn0pOwoKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTkVXX1RBUkdFVF9CVUcgfHwgQVJHU19CVUcpLCAnUmVmbGVjdCcsIHsKICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyosIG5ld1RhcmdldCovKXsKICAgIGFGdW5jdGlvbihUYXJnZXQpOwogICAgYW5PYmplY3QoYXJncyk7CiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhRnVuY3Rpb24oYXJndW1lbnRzWzJdKTsKICAgIGlmKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRylyZXR1cm4gckNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7CiAgICBpZihUYXJnZXQgPT0gbmV3VGFyZ2V0KXsKICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHMKICAgICAgc3dpdGNoKGFyZ3MubGVuZ3RoKXsKICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgVGFyZ2V0OwogICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSk7CiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTsKICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pOwogICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7CiAgICAgIH0KICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2YgYXJndW1lbnRzIGNhc2UKICAgICAgdmFyICRhcmdzID0gW251bGxdOwogICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTsKICAgICAgcmV0dXJuIG5ldyAoYmluZC5hcHBseShUYXJnZXQsICRhcmdzKSk7CiAgICB9CiAgICAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnMKICAgIHZhciBwcm90byAgICA9IG5ld1RhcmdldC5wcm90b3R5cGUKICAgICAgLCBpbnN0YW5jZSA9IGNyZWF0ZShpc09iamVjdChwcm90bykgPyBwcm90byA6IE9iamVjdC5wcm90b3R5cGUpCiAgICAgICwgcmVzdWx0ICAgPSBGdW5jdGlvbi5hcHBseS5jYWxsKFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpOwogICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTsKICB9Cn0pOwp9LHsiLi9fYS1mdW5jdGlvbiI6MTE3LCIuL19hbi1vYmplY3QiOjEyMSwiLi9fYmluZCI6MTMwLCIuL19leHBvcnQiOjE0NiwiLi9fZmFpbHMiOjE0OCwiLi9fZ2xvYmFsIjoxNTIsIi4vX2lzLW9iamVjdCI6MTYzLCIuL19vYmplY3QtY3JlYXRlIjoxODB9XSwzMTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyNi4xLjMgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKQp2YXIgZFAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKQogICwgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTsKCi8vIE1TIEVkZ2UgaGFzIGJyb2tlbiBSZWZsZWN0LmRlZmluZVByb3BlcnR5IC0gdGhyb3dpbmcgaW5zdGVhZCBvZiByZXR1cm5pbmcgZmFsc2UKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7CiAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShkUC5mKHt9LCAxLCB7dmFsdWU6IDF9KSwgMSwge3ZhbHVlOiAyfSk7Cn0pLCAnUmVmbGVjdCcsIHsKICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyl7CiAgICBhbk9iamVjdCh0YXJnZXQpOwogICAgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShwcm9wZXJ0eUtleSwgdHJ1ZSk7CiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTsKICAgIHRyeSB7CiAgICAgIGRQLmYodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyk7CiAgICAgIHJldHVybiB0cnVlOwogICAgfSBjYXRjaChlKXsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0KfSk7Cn0seyIuL19hbi1vYmplY3QiOjEyMSwiLi9fZXhwb3J0IjoxNDYsIi4vX2ZhaWxzIjoxNDgsIi4vX29iamVjdC1kcCI6MTgxLCIuL190by1wcmltaXRpdmUiOjIyNH1dLDMxNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDI2LjEuNCBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpCnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBnT1BEICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZgogICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsKICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSl7CiAgICB2YXIgZGVzYyA9IGdPUEQoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpOwogICAgcmV0dXJuIGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTsKICB9Cn0pOwp9LHsiLi9fYW4tb2JqZWN0IjoxMjEsIi4vX2V4cG9ydCI6MTQ2LCIuL19vYmplY3QtZ29wZCI6MTg0fV0sMzE3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUodGFyZ2V0KQp2YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTsKdmFyIEVudW1lcmF0ZSA9IGZ1bmN0aW9uKGl0ZXJhdGVkKXsKICB0aGlzLl90ID0gYW5PYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXQKICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4CiAgdmFyIGtleXMgPSB0aGlzLl9rID0gW10gICAgICAgLy8ga2V5cwogICAgLCBrZXk7CiAgZm9yKGtleSBpbiBpdGVyYXRlZClrZXlzLnB1c2goa2V5KTsKfTsKcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKShFbnVtZXJhdGUsICdPYmplY3QnLCBmdW5jdGlvbigpewogIHZhciB0aGF0ID0gdGhpcwogICAgLCBrZXlzID0gdGhhdC5fawogICAgLCBrZXk7CiAgZG8gewogICAgaWYodGhhdC5faSA+PSBrZXlzLmxlbmd0aClyZXR1cm4ge3ZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWV9OwogIH0gd2hpbGUoISgoa2V5ID0ga2V5c1t0aGF0Ll9pKytdKSBpbiB0aGF0Ll90KSk7CiAgcmV0dXJuIHt2YWx1ZToga2V5LCBkb25lOiBmYWxzZX07Cn0pOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgewogIGVudW1lcmF0ZTogZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCl7CiAgICByZXR1cm4gbmV3IEVudW1lcmF0ZSh0YXJnZXQpOwogIH0KfSk7Cn0seyIuL19hbi1vYmplY3QiOjEyMSwiLi9fZXhwb3J0IjoxNDYsIi4vX2l0ZXItY3JlYXRlIjoxNjZ9XSwzMTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyNi4xLjcgUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkKdmFyIGdPUEQgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKQogICwgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsKICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KXsKICAgIHJldHVybiBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpOwogIH0KfSk7Cn0seyIuL19hbi1vYmplY3QiOjEyMSwiLi9fZXhwb3J0IjoxNDYsIi4vX29iamVjdC1nb3BkIjoxODR9XSwzMTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpCnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBnZXRQcm90byA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKQogICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsKICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KXsKICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTsKICB9Cn0pOwp9LHsiLi9fYW4tb2JqZWN0IjoxMjEsIi4vX2V4cG9ydCI6MTQ2LCIuL19vYmplY3QtZ3BvIjoxODh9XSwzMjA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyNi4xLjYgUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSBbLCByZWNlaXZlcl0pCnZhciBnT1BEICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykKICAsIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpCiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpCiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBpc09iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBhbk9iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpOwoKZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkvKiwgcmVjZWl2ZXIqLyl7CiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl0KICAgICwgZGVzYywgcHJvdG87CiAgaWYoYW5PYmplY3QodGFyZ2V0KSA9PT0gcmVjZWl2ZXIpcmV0dXJuIHRhcmdldFtwcm9wZXJ0eUtleV07CiAgaWYoZGVzYyA9IGdPUEQuZih0YXJnZXQsIHByb3BlcnR5S2V5KSlyZXR1cm4gaGFzKGRlc2MsICd2YWx1ZScpCiAgICA/IGRlc2MudmFsdWUKICAgIDogZGVzYy5nZXQgIT09IHVuZGVmaW5lZAogICAgICA/IGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpCiAgICAgIDogdW5kZWZpbmVkOwogIGlmKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpcmV0dXJuIGdldChwcm90bywgcHJvcGVydHlLZXksIHJlY2VpdmVyKTsKfQoKJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge2dldDogZ2V0fSk7Cn0seyIuL19hbi1vYmplY3QiOjEyMSwiLi9fZXhwb3J0IjoxNDYsIi4vX2hhcyI6MTUzLCIuL19pcy1vYmplY3QiOjE2MywiLi9fb2JqZWN0LWdvcGQiOjE4NCwiLi9fb2JqZWN0LWdwbyI6MTg4fV0sMzIxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjYuMS45IFJlZmxlY3QuaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7CiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSl7CiAgICByZXR1cm4gcHJvcGVydHlLZXkgaW4gdGFyZ2V0OwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE0Nn1dLDMyMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDI2LjEuMTAgUmVmbGVjdC5pc0V4dGVuc2libGUodGFyZ2V0KQp2YXIgJGV4cG9ydCAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBhbk9iamVjdCAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgewogIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCl7CiAgICBhbk9iamVjdCh0YXJnZXQpOwogICAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKHRhcmdldCkgOiB0cnVlOwogIH0KfSk7Cn0seyIuL19hbi1vYmplY3QiOjEyMSwiLi9fZXhwb3J0IjoxNDZ9XSwzMjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyNi4xLjExIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7b3duS2V5czogcmVxdWlyZSgnLi9fb3duLWtleXMnKX0pOwp9LHsiLi9fZXhwb3J0IjoxNDYsIi4vX293bi1rZXlzIjoxOTR9XSwzMjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KQp2YXIgJGV4cG9ydCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGFuT2JqZWN0ICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCAkcHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnM7CgokZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7CiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCl7CiAgICBhbk9iamVjdCh0YXJnZXQpOwogICAgdHJ5IHsKICAgICAgaWYoJHByZXZlbnRFeHRlbnNpb25zKSRwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gY2F0Y2goZSl7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9Cn0pOwp9LHsiLi9fYW4tb2JqZWN0IjoxMjEsIi4vX2V4cG9ydCI6MTQ2fV0sMzI1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pCnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBzZXRQcm90byA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpOwoKaWYoc2V0UHJvdG8pJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgewogIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKXsKICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pOwogICAgdHJ5IHsKICAgICAgc2V0UHJvdG8uc2V0KHRhcmdldCwgcHJvdG8pOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gY2F0Y2goZSl7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNDYsIi4vX3NldC1wcm90byI6MjA0fV0sMzI2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjYuMS4xMyBSZWZsZWN0LnNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIFssIHJlY2VpdmVyXSkKdmFyIGRQICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykKICAsIGdPUEQgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKQogICwgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJykKICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJykKICAsICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGNyZWF0ZURlc2MgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpCiAgLCBhbk9iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCBpc09iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpOwoKZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYvKiwgcmVjZWl2ZXIqLyl7CiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDQgPyB0YXJnZXQgOiBhcmd1bWVudHNbM10KICAgICwgb3duRGVzYyAgPSBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpCiAgICAsIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG87CiAgaWYoIW93bkRlc2MpewogICAgaWYoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSl7CiAgICAgIHJldHVybiBzZXQocHJvdG8sIHByb3BlcnR5S2V5LCBWLCByZWNlaXZlcik7CiAgICB9CiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTsKICB9CiAgaWYoaGFzKG93bkRlc2MsICd2YWx1ZScpKXsKICAgIGlmKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpcmV0dXJuIGZhbHNlOwogICAgZXhpc3RpbmdEZXNjcmlwdG9yID0gZ09QRC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkgfHwgY3JlYXRlRGVzYygwKTsKICAgIGV4aXN0aW5nRGVzY3JpcHRvci52YWx1ZSA9IFY7CiAgICBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTsKICAgIHJldHVybiB0cnVlOwogIH0KICByZXR1cm4gb3duRGVzYy5zZXQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogKG93bkRlc2Muc2V0LmNhbGwocmVjZWl2ZXIsIFYpLCB0cnVlKTsKfQoKJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge3NldDogc2V0fSk7Cn0seyIuL19hbi1vYmplY3QiOjEyMSwiLi9fZXhwb3J0IjoxNDYsIi4vX2hhcyI6MTUzLCIuL19pcy1vYmplY3QiOjE2MywiLi9fb2JqZWN0LWRwIjoxODEsIi4vX29iamVjdC1nb3BkIjoxODQsIi4vX29iamVjdC1ncG8iOjE4OCwiLi9fcHJvcGVydHktZGVzYyI6MTk5fV0sMzI3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGdsb2JhbCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykKICAsIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpCiAgLCBkUCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYKICAsIGdPUE4gICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mCiAgLCBpc1JlZ0V4cCAgICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpCiAgLCAkZmxhZ3MgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZsYWdzJykKICAsICRSZWdFeHAgICAgICAgICAgID0gZ2xvYmFsLlJlZ0V4cAogICwgQmFzZSAgICAgICAgICAgICAgPSAkUmVnRXhwCiAgLCBwcm90byAgICAgICAgICAgICA9ICRSZWdFeHAucHJvdG90eXBlCiAgLCByZTEgICAgICAgICAgICAgICA9IC9hL2cKICAsIHJlMiAgICAgICAgICAgICAgID0gL2EvZwogIC8vICJuZXciIGNyZWF0ZXMgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z2d5IGhlcmUKICAsIENPUlJFQ1RfTkVXICAgICAgID0gbmV3ICRSZWdFeHAocmUxKSAhPT0gcmUxOwoKaWYocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAoIUNPUlJFQ1RfTkVXIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXsKICByZTJbcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyldID0gZmFsc2U7CiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2gKICByZXR1cm4gJFJlZ0V4cChyZTEpICE9IHJlMSB8fCAkUmVnRXhwKHJlMikgPT0gcmUyIHx8ICRSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJzsKfSkpKXsKICAkUmVnRXhwID0gZnVuY3Rpb24gUmVnRXhwKHAsIGYpewogICAgdmFyIHRpUkUgPSB0aGlzIGluc3RhbmNlb2YgJFJlZ0V4cAogICAgICAsIHBpUkUgPSBpc1JlZ0V4cChwKQogICAgICAsIGZpVSAgPSBmID09PSB1bmRlZmluZWQ7CiAgICByZXR1cm4gIXRpUkUgJiYgcGlSRSAmJiBwLmNvbnN0cnVjdG9yID09PSAkUmVnRXhwICYmIGZpVSA/IHAKICAgICAgOiBpbmhlcml0SWZSZXF1aXJlZChDT1JSRUNUX05FVwogICAgICAgID8gbmV3IEJhc2UocGlSRSAmJiAhZmlVID8gcC5zb3VyY2UgOiBwLCBmKQogICAgICAgIDogQmFzZSgocGlSRSA9IHAgaW5zdGFuY2VvZiAkUmVnRXhwKSA/IHAuc291cmNlIDogcCwgcGlSRSAmJiBmaVUgPyAkZmxhZ3MuY2FsbChwKSA6IGYpCiAgICAgICwgdGlSRSA/IHRoaXMgOiBwcm90bywgJFJlZ0V4cCk7CiAgfTsKICB2YXIgcHJveHkgPSBmdW5jdGlvbihrZXkpewogICAga2V5IGluICRSZWdFeHAgfHwgZFAoJFJlZ0V4cCwga2V5LCB7CiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gQmFzZVtrZXldOyB9LAogICAgICBzZXQ6IGZ1bmN0aW9uKGl0KXsgQmFzZVtrZXldID0gaXQ7IH0KICAgIH0pOwogIH07CiAgZm9yKHZhciBrZXlzID0gZ09QTihCYXNlKSwgaSA9IDA7IGtleXMubGVuZ3RoID4gaTsgKXByb3h5KGtleXNbaSsrXSk7CiAgcHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwOwogICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87CiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsICdSZWdFeHAnLCAkUmVnRXhwKTsKfQoKcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnUmVnRXhwJyk7Cn0seyIuL19kZXNjcmlwdG9ycyI6MTQyLCIuL19mYWlscyI6MTQ4LCIuL19mbGFncyI6MTUwLCIuL19nbG9iYWwiOjE1MiwiLi9faW5oZXJpdC1pZi1yZXF1aXJlZCI6MTU3LCIuL19pcy1yZWdleHAiOjE2NCwiLi9fb2JqZWN0LWRwIjoxODEsIi4vX29iamVjdC1nb3BuIjoxODYsIi4vX3JlZGVmaW5lIjoyMDEsIi4vX3NldC1zcGVjaWVzIjoyMDUsIi4vX3drcyI6MjMxfV0sMzI4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKQppZihyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKXJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywgewogIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICBnZXQ6IHJlcXVpcmUoJy4vX2ZsYWdzJykKfSk7Cn0seyIuL19kZXNjcmlwdG9ycyI6MTQyLCIuL19mbGFncyI6MTUwLCIuL19vYmplY3QtZHAiOjE4MX1dLDMyOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIEBAbWF0Y2ggbG9naWMKcmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uKGRlZmluZWQsIE1BVENILCAkbWF0Y2gpewogIC8vIDIxLjEuMy4xMSBTdHJpbmcucHJvdG90eXBlLm1hdGNoKHJlZ2V4cCkKICByZXR1cm4gW2Z1bmN0aW9uIG1hdGNoKHJlZ2V4cCl7CiAgICAndXNlIHN0cmljdCc7CiAgICB2YXIgTyAgPSBkZWZpbmVkKHRoaXMpCiAgICAgICwgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW01BVENIXTsKICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpOwogIH0sICRtYXRjaF07Cn0pOwp9LHsiLi9fZml4LXJlLXdrcyI6MTQ5fV0sMzMwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gQEByZXBsYWNlIGxvZ2ljCnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uKGRlZmluZWQsIFJFUExBQ0UsICRyZXBsYWNlKXsKICAvLyAyMS4xLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpCiAgcmV0dXJuIFtmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpewogICAgJ3VzZSBzdHJpY3QnOwogICAgdmFyIE8gID0gZGVmaW5lZCh0aGlzKQogICAgICAsIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07CiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZAogICAgICA/IGZuLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSkKICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7CiAgfSwgJHJlcGxhY2VdOwp9KTsKfSx7Ii4vX2ZpeC1yZS13a3MiOjE0OX1dLDMzMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIEBAc2VhcmNoIGxvZ2ljCnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc2VhcmNoJywgMSwgZnVuY3Rpb24oZGVmaW5lZCwgU0VBUkNILCAkc2VhcmNoKXsKICAvLyAyMS4xLjMuMTUgU3RyaW5nLnByb3RvdHlwZS5zZWFyY2gocmVnZXhwKQogIHJldHVybiBbZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCl7CiAgICAndXNlIHN0cmljdCc7CiAgICB2YXIgTyAgPSBkZWZpbmVkKHRoaXMpCiAgICAgICwgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07CiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtTRUFSQ0hdKFN0cmluZyhPKSk7CiAgfSwgJHNlYXJjaF07Cn0pOwp9LHsiLi9fZml4LXJlLXdrcyI6MTQ5fV0sMzMyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gQEBzcGxpdCBsb2dpYwpyZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NwbGl0JywgMiwgZnVuY3Rpb24oZGVmaW5lZCwgU1BMSVQsICRzcGxpdCl7CiAgJ3VzZSBzdHJpY3QnOwogIHZhciBpc1JlZ0V4cCAgID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJykKICAgICwgX3NwbGl0ICAgICA9ICRzcGxpdAogICAgLCAkcHVzaCAgICAgID0gW10ucHVzaAogICAgLCAkU1BMSVQgICAgID0gJ3NwbGl0JwogICAgLCBMRU5HVEggICAgID0gJ2xlbmd0aCcKICAgICwgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnOwogIGlmKAogICAgJ2FiYmMnWyRTUExJVF0oLyhiKSovKVsxXSA9PSAnYycgfHwKICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fAogICAgJ2FiJ1skU1BMSVRdKC8oPzphYikqLylbTEVOR1RIXSAhPSAyIHx8CiAgICAnLidbJFNQTElUXSgvKC4/KSguPykvKVtMRU5HVEhdICE9IDQgfHwKICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHwKICAgICcnWyRTUExJVF0oLy4/LylbTEVOR1RIXQogICl7CiAgICB2YXIgTlBDRyA9IC8oKT8/Ly5leGVjKCcnKVsxXSA9PT0gdW5kZWZpbmVkOyAvLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cAogICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0CiAgICAkc3BsaXQgPSBmdW5jdGlvbihzZXBhcmF0b3IsIGxpbWl0KXsKICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTsKICAgICAgaWYoc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDApcmV0dXJuIFtdOwogICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdAogICAgICBpZighaXNSZWdFeHAoc2VwYXJhdG9yKSlyZXR1cm4gX3NwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KTsKICAgICAgdmFyIG91dHB1dCA9IFtdOwogICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgKwogICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArCiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArCiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpOwogICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7CiAgICAgIHZhciBzcGxpdExpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IDQyOTQ5NjcyOTUgOiBsaW1pdCA+Pj4gMDsKICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHkKICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTsKICAgICAgdmFyIHNlcGFyYXRvcjIsIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGgsIGk7CiAgICAgIC8vIERvZXNuJ3QgbmVlZCBmbGFncyBneSwgYnV0IHRoZXkgZG9uJ3QgaHVydAogICAgICBpZighTlBDRylzZXBhcmF0b3IyID0gbmV3IFJlZ0V4cCgnXicgKyBzZXBhcmF0b3JDb3B5LnNvdXJjZSArICckKD8hXFxzKScsIGZsYWdzKTsKICAgICAgd2hpbGUobWF0Y2ggPSBzZXBhcmF0b3JDb3B5LmV4ZWMoc3RyaW5nKSl7CiAgICAgICAgLy8gYHNlcGFyYXRvckNvcHkubGFzdEluZGV4YCBpcyBub3QgcmVsaWFibGUgY3Jvc3MtYnJvd3NlcgogICAgICAgIGxhc3RJbmRleCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF1bTEVOR1RIXTsKICAgICAgICBpZihsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KXsKICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpOwogICAgICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGAgZm9yIE5QQ0cKICAgICAgICAgIGlmKCFOUENHICYmIG1hdGNoW0xFTkdUSF0gPiAxKW1hdGNoWzBdLnJlcGxhY2Uoc2VwYXJhdG9yMiwgZnVuY3Rpb24oKXsKICAgICAgICAgICAgZm9yKGkgPSAxOyBpIDwgYXJndW1lbnRzW0xFTkdUSF0gLSAyOyBpKyspaWYoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpbWF0Y2hbaV0gPSB1bmRlZmluZWQ7CiAgICAgICAgICB9KTsKICAgICAgICAgIGlmKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7CiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF1bTEVOR1RIXTsKICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7CiAgICAgICAgICBpZihvdXRwdXRbTEVOR1RIXSA+PSBzcGxpdExpbWl0KWJyZWFrOwogICAgICAgIH0KICAgICAgICBpZihzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdID09PSBtYXRjaC5pbmRleClzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdKys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AKICAgICAgfQogICAgICBpZihsYXN0TGFzdEluZGV4ID09PSBzdHJpbmdbTEVOR1RIXSl7CiAgICAgICAgaWYobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSlvdXRwdXQucHVzaCgnJyk7CiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpOwogICAgICByZXR1cm4gb3V0cHV0W0xFTkdUSF0gPiBzcGxpdExpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIHNwbGl0TGltaXQpIDogb3V0cHV0OwogICAgfTsKICAvLyBDaGFrcmEsIFY4CiAgfSBlbHNlIGlmKCcwJ1skU1BMSVRdKHVuZGVmaW5lZCwgMClbTEVOR1RIXSl7CiAgICAkc3BsaXQgPSBmdW5jdGlvbihzZXBhcmF0b3IsIGxpbWl0KXsKICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiBfc3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTsKICAgIH07CiAgfQogIC8vIDIxLjEuMy4xNyBTdHJpbmcucHJvdG90eXBlLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpCiAgcmV0dXJuIFtmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KXsKICAgIHZhciBPICA9IGRlZmluZWQodGhpcykKICAgICAgLCBmbiA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdOwogICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpIDogJHNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTsKICB9LCAkc3BsaXRdOwp9KTsKfSx7Ii4vX2ZpeC1yZS13a3MiOjE0OSwiLi9faXMtcmVnZXhwIjoxNjR9XSwzMzM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpOwp2YXIgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgJGZsYWdzICAgICAgPSByZXF1aXJlKCcuL19mbGFncycpCiAgLCBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykKICAsIFRPX1NUUklORyAgID0gJ3RvU3RyaW5nJwogICwgJHRvU3RyaW5nICAgPSAvLi9bVE9fU1RSSU5HXTsKCnZhciBkZWZpbmUgPSBmdW5jdGlvbihmbil7CiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZuLCB0cnVlKTsKfTsKCi8vIDIxLjIuNS4xNCBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nKCkKaWYocmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoe3NvdXJjZTogJ2EnLCBmbGFnczogJ2InfSkgIT0gJy9hL2InOyB9KSl7CiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCl7CiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpOwogICAgcmV0dXJuICcvJy5jb25jYXQoUi5zb3VyY2UsICcvJywKICAgICAgJ2ZsYWdzJyBpbiBSID8gUi5mbGFncyA6ICFERVNDUklQVE9SUyAmJiBSIGluc3RhbmNlb2YgUmVnRXhwID8gJGZsYWdzLmNhbGwoUikgOiB1bmRlZmluZWQpOwogIH0pOwovLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZQp9IGVsc2UgaWYoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKXsKICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKXsKICAgIHJldHVybiAkdG9TdHJpbmcuY2FsbCh0aGlzKTsKICB9KTsKfQp9LHsiLi9fYW4tb2JqZWN0IjoxMjEsIi4vX2Rlc2NyaXB0b3JzIjoxNDIsIi4vX2ZhaWxzIjoxNDgsIi4vX2ZsYWdzIjoxNTAsIi4vX3JlZGVmaW5lIjoyMDEsIi4vZXM2LnJlZ2V4cC5mbGFncyI6MzI4fV0sMzM0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTsKCi8vIDIzLjIgU2V0IE9iamVjdHMKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoJ1NldCcsIGZ1bmN0aW9uKGdldCl7CiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTsKfSwgewogIC8vIDIzLjIuMy4xIFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKQogIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKXsKICAgIHJldHVybiBzdHJvbmcuZGVmKHRoaXMsIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTsKICB9Cn0sIHN0cm9uZyk7Cn0seyIuL19jb2xsZWN0aW9uIjoxMzYsIi4vX2NvbGxlY3Rpb24tc3Ryb25nIjoxMzN9XSwzMzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIEIuMi4zLjIgU3RyaW5nLnByb3RvdHlwZS5hbmNob3IobmFtZSkKcmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYW5jaG9yJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7CiAgcmV0dXJuIGZ1bmN0aW9uIGFuY2hvcihuYW1lKXsKICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ25hbWUnLCBuYW1lKTsKICB9Cn0pOwp9LHsiLi9fc3RyaW5nLWh0bWwiOjIxM31dLDMzNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gQi4yLjMuMyBTdHJpbmcucHJvdG90eXBlLmJpZygpCnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JpZycsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpewogIHJldHVybiBmdW5jdGlvbiBiaWcoKXsKICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiaWcnLCAnJywgJycpOwogIH0KfSk7Cn0seyIuL19zdHJpbmctaHRtbCI6MjEzfV0sMzM3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyBCLjIuMy40IFN0cmluZy5wcm90b3R5cGUuYmxpbmsoKQpyZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdibGluaycsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpewogIHJldHVybiBmdW5jdGlvbiBibGluaygpewogICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JsaW5rJywgJycsICcnKTsKICB9Cn0pOwp9LHsiLi9fc3RyaW5nLWh0bWwiOjIxM31dLDMzODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gQi4yLjMuNSBTdHJpbmcucHJvdG90eXBlLmJvbGQoKQpyZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdib2xkJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7CiAgcmV0dXJuIGZ1bmN0aW9uIGJvbGQoKXsKICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiJywgJycsICcnKTsKICB9Cn0pOwp9LHsiLi9fc3RyaW5nLWh0bWwiOjIxM31dLDMzOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJGF0ICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKGZhbHNlKTsKJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7CiAgLy8gMjEuMS4zLjMgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdChwb3MpCiAgY29kZVBvaW50QXQ6IGZ1bmN0aW9uIGNvZGVQb2ludEF0KHBvcyl7CiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTQ2LCIuL19zdHJpbmctYXQiOjIxMX1dLDM0MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIxLjEuMy42IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgoc2VhcmNoU3RyaW5nIFssIGVuZFBvc2l0aW9uXSkKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIHRvTGVuZ3RoICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpCiAgLCBjb250ZXh0ICAgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpCiAgLCBFTkRTX1dJVEggPSAnZW5kc1dpdGgnCiAgLCAkZW5kc1dpdGggPSAnJ1tFTkRTX1dJVEhdOwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShFTkRTX1dJVEgpLCAnU3RyaW5nJywgewogIGVuZHNXaXRoOiBmdW5jdGlvbiBlbmRzV2l0aChzZWFyY2hTdHJpbmcgLyosIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLyl7CiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBFTkRTX1dJVEgpCiAgICAgICwgZW5kUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZAogICAgICAsIGxlbiAgICA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKQogICAgICAsIGVuZCAgICA9IGVuZFBvc2l0aW9uID09PSB1bmRlZmluZWQgPyBsZW4gOiBNYXRoLm1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbikKICAgICAgLCBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTsKICAgIHJldHVybiAkZW5kc1dpdGgKICAgICAgPyAkZW5kc1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGVuZCkKICAgICAgOiB0aGF0LnNsaWNlKGVuZCAtIHNlYXJjaC5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaDsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNDYsIi4vX2ZhaWxzLWlzLXJlZ2V4cCI6MTQ3LCIuL19zdHJpbmctY29udGV4dCI6MjEyLCIuL190by1sZW5ndGgiOjIyMn1dLDM0MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKCkKcmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZml4ZWQnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXsKICByZXR1cm4gZnVuY3Rpb24gZml4ZWQoKXsKICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7CiAgfQp9KTsKfSx7Ii4vX3N0cmluZy1odG1sIjoyMTN9XSwzNDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIEIuMi4zLjcgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3IoY29sb3IpCnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRjb2xvcicsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpewogIHJldHVybiBmdW5jdGlvbiBmb250Y29sb3IoY29sb3IpewogICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7CiAgfQp9KTsKfSx7Ii4vX3N0cmluZy1odG1sIjoyMTN9XSwzNDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKQpyZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250c2l6ZScsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpewogIHJldHVybiBmdW5jdGlvbiBmb250c2l6ZShzaXplKXsKICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTsKICB9Cn0pOwp9LHsiLi9fc3RyaW5nLWh0bWwiOjIxM31dLDM0NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCB0b0luZGV4ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4JykKICAsIGZyb21DaGFyQ29kZSAgID0gU3RyaW5nLmZyb21DaGFyQ29kZQogICwgJGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludDsKCi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW0KJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoISEkZnJvbUNvZGVQb2ludCAmJiAkZnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMSksICdTdHJpbmcnLCB7CiAgLy8gMjEuMS4yLjIgU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uY29kZVBvaW50cykKICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzCiAgICB2YXIgcmVzICA9IFtdCiAgICAgICwgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGgKICAgICAgLCBpICAgID0gMAogICAgICAsIGNvZGU7CiAgICB3aGlsZShhTGVuID4gaSl7CiAgICAgIGNvZGUgPSArYXJndW1lbnRzW2krK107CiAgICAgIGlmKHRvSW5kZXgoY29kZSwgMHgxMGZmZmYpICE9PSBjb2RlKXRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpOwogICAgICByZXMucHVzaChjb2RlIDwgMHgxMDAwMAogICAgICAgID8gZnJvbUNoYXJDb2RlKGNvZGUpCiAgICAgICAgOiBmcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4ZDgwMCwgY29kZSAlIDB4NDAwICsgMHhkYzAwKQogICAgICApOwogICAgfSByZXR1cm4gcmVzLmpvaW4oJycpOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE0NiwiLi9fdG8taW5kZXgiOjIxOX1dLDM0NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIxLjEuMy43IFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiA9IDApCid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGNvbnRleHQgID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKQogICwgSU5DTFVERVMgPSAnaW5jbHVkZXMnOwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShJTkNMVURFUyksICdTdHJpbmcnLCB7CiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiwgcG9zaXRpb24gPSAwICovKXsKICAgIHJldHVybiAhIX5jb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgSU5DTFVERVMpCiAgICAgIC5pbmRleE9mKHNlYXJjaFN0cmluZywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE0NiwiLi9fZmFpbHMtaXMtcmVnZXhwIjoxNDcsIi4vX3N0cmluZy1jb250ZXh0IjoyMTJ9XSwzNDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIEIuMi4zLjkgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzKCkKcmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnaXRhbGljcycsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpewogIHJldHVybiBmdW5jdGlvbiBpdGFsaWNzKCl7CiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7CiAgfQp9KTsKfSx7Ii4vX3N0cmluZy1odG1sIjoyMTN9XSwzNDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bMTEyXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2l0ZXItZGVmaW5lIjoxNjcsIi4vX3N0cmluZy1hdCI6MjExLCJkdXAiOjExMn1dLDM0ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gQi4yLjMuMTAgU3RyaW5nLnByb3RvdHlwZS5saW5rKHVybCkKcmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnbGluaycsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpewogIHJldHVybiBmdW5jdGlvbiBsaW5rKHVybCl7CiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTsKICB9Cn0pOwp9LHsiLi9fc3RyaW5nLWh0bWwiOjIxM31dLDM0OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpCiAgLCB0b0xlbmd0aCAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnU3RyaW5nJywgewogIC8vIDIxLjEuMi40IFN0cmluZy5yYXcoY2FsbFNpdGUsIC4uLnN1YnN0aXR1dGlvbnMpCiAgcmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpewogICAgdmFyIHRwbCAgPSB0b0lPYmplY3QoY2FsbFNpdGUucmF3KQogICAgICAsIGxlbiAgPSB0b0xlbmd0aCh0cGwubGVuZ3RoKQogICAgICAsIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoCiAgICAgICwgcmVzICA9IFtdCiAgICAgICwgaSAgICA9IDA7CiAgICB3aGlsZShsZW4gPiBpKXsKICAgICAgcmVzLnB1c2goU3RyaW5nKHRwbFtpKytdKSk7CiAgICAgIGlmKGkgPCBhTGVuKXJlcy5wdXNoKFN0cmluZyhhcmd1bWVudHNbaV0pKTsKICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNDYsIi4vX3RvLWlvYmplY3QiOjIyMSwiLi9fdG8tbGVuZ3RoIjoyMjJ9XSwzNTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7CiAgLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KQogIHJlcGVhdDogcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpCn0pOwp9LHsiLi9fZXhwb3J0IjoxNDYsIi4vX3N0cmluZy1yZXBlYXQiOjIxNX1dLDM1MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpCnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3NtYWxsJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7CiAgcmV0dXJuIGZ1bmN0aW9uIHNtYWxsKCl7CiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc21hbGwnLCAnJywgJycpOwogIH0KfSk7Cn0seyIuL19zdHJpbmctaHRtbCI6MjEzfV0sMzUyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgWywgcG9zaXRpb24gXSkKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgdG9MZW5ndGggICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKQogICwgY29udGV4dCAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpCiAgLCBTVEFSVFNfV0lUSCA9ICdzdGFydHNXaXRoJwogICwgJHN0YXJ0c1dpdGggPSAnJ1tTVEFSVFNfV0lUSF07CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKFNUQVJUU19XSVRIKSwgJ1N0cmluZycsIHsKICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiwgcG9zaXRpb24gPSAwICovKXsKICAgIHZhciB0aGF0ICAgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpCiAgICAgICwgaW5kZXggID0gdG9MZW5ndGgoTWF0aC5taW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSkKICAgICAgLCBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTsKICAgIHJldHVybiAkc3RhcnRzV2l0aAogICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleCkKICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTQ2LCIuL19mYWlscy1pcy1yZWdleHAiOjE0NywiLi9fc3RyaW5nLWNvbnRleHQiOjIxMiwiLi9fdG8tbGVuZ3RoIjoyMjJ9XSwzNTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIEIuMi4zLjEyIFN0cmluZy5wcm90b3R5cGUuc3RyaWtlKCkKcmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3RyaWtlJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7CiAgcmV0dXJuIGZ1bmN0aW9uIHN0cmlrZSgpewogICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7CiAgfQp9KTsKfSx7Ii4vX3N0cmluZy1odG1sIjoyMTN9XSwzNTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIEIuMi4zLjEzIFN0cmluZy5wcm90b3R5cGUuc3ViKCkKcmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3ViJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7CiAgcmV0dXJuIGZ1bmN0aW9uIHN1YigpewogICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1YicsICcnLCAnJyk7CiAgfQp9KTsKfSx7Ii4vX3N0cmluZy1odG1sIjoyMTN9XSwzNTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIEIuMi4zLjE0IFN0cmluZy5wcm90b3R5cGUuc3VwKCkKcmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3VwJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7CiAgcmV0dXJuIGZ1bmN0aW9uIHN1cCgpewogICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1cCcsICcnLCAnJyk7CiAgfQp9KTsKfSx7Ii4vX3N0cmluZy1odG1sIjoyMTN9XSwzNTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIDIxLjEuMy4yNSBTdHJpbmcucHJvdG90eXBlLnRyaW0oKQpyZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltJywgZnVuY3Rpb24oJHRyaW0pewogIHJldHVybiBmdW5jdGlvbiB0cmltKCl7CiAgICByZXR1cm4gJHRyaW0odGhpcywgMyk7CiAgfTsKfSk7Cn0seyIuL19zdHJpbmctdHJpbSI6MjE2fV0sMzU3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzExM11bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19hbi1vYmplY3QiOjEyMSwiLi9fZGVzY3JpcHRvcnMiOjE0MiwiLi9fZW51bS1rZXlzIjoxNDUsIi4vX2V4cG9ydCI6MTQ2LCIuL19mYWlscyI6MTQ4LCIuL19nbG9iYWwiOjE1MiwiLi9faGFzIjoxNTMsIi4vX2hpZGUiOjE1NCwiLi9faXMtYXJyYXkiOjE2MSwiLi9fa2V5b2YiOjE3MSwiLi9fbGlicmFyeSI6MTcyLCIuL19tZXRhIjoxNzYsIi4vX29iamVjdC1jcmVhdGUiOjE4MCwiLi9fb2JqZWN0LWRwIjoxODEsIi4vX29iamVjdC1nb3BkIjoxODQsIi4vX29iamVjdC1nb3BuIjoxODYsIi4vX29iamVjdC1nb3BuLWV4dCI6MTg1LCIuL19vYmplY3QtZ29wcyI6MTg3LCIuL19vYmplY3Qta2V5cyI6MTkwLCIuL19vYmplY3QtcGllIjoxOTEsIi4vX3Byb3BlcnR5LWRlc2MiOjE5OSwiLi9fcmVkZWZpbmUiOjIwMSwiLi9fc2V0LXRvLXN0cmluZy10YWciOjIwNiwiLi9fc2hhcmVkIjoyMDgsIi4vX3RvLWlvYmplY3QiOjIyMSwiLi9fdG8tcHJpbWl0aXZlIjoyMjQsIi4vX3VpZCI6MjI4LCIuL193a3MiOjIzMSwiLi9fd2tzLWRlZmluZSI6MjI5LCIuL193a3MtZXh0IjoyMzAsImR1cCI6MTEzfV0sMzU4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICR0eXBlZCAgICAgICA9IHJlcXVpcmUoJy4vX3R5cGVkJykKICAsIGJ1ZmZlciAgICAgICA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpCiAgLCBhbk9iamVjdCAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgdG9JbmRleCAgICAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKQogICwgdG9MZW5ndGggICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJykKICAsIGlzT2JqZWN0ICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBBcnJheUJ1ZmZlciAgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5BcnJheUJ1ZmZlcgogICwgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpCiAgLCAkQXJyYXlCdWZmZXIgPSBidWZmZXIuQXJyYXlCdWZmZXIKICAsICREYXRhVmlldyAgICA9IGJ1ZmZlci5EYXRhVmlldwogICwgJGlzVmlldyAgICAgID0gJHR5cGVkLkFCViAmJiBBcnJheUJ1ZmZlci5pc1ZpZXcKICAsICRzbGljZSAgICAgICA9ICRBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2UKICAsIFZJRVcgICAgICAgICA9ICR0eXBlZC5WSUVXCiAgLCBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInOwoKJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQXJyYXlCdWZmZXIgIT09ICRBcnJheUJ1ZmZlciksIHtBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyfSk7CgokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEkdHlwZWQuQ09OU1RSLCBBUlJBWV9CVUZGRVIsIHsKICAvLyAyNC4xLjMuMSBBcnJheUJ1ZmZlci5pc1ZpZXcoYXJnKQogIGlzVmlldzogZnVuY3Rpb24gaXNWaWV3KGl0KXsKICAgIHJldHVybiAkaXNWaWV3ICYmICRpc1ZpZXcoaXQpIHx8IGlzT2JqZWN0KGl0KSAmJiBWSUVXIGluIGl0OwogIH0KfSk7CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuVSArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXsKICByZXR1cm4gIW5ldyAkQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoOwp9KSwgQVJSQVlfQlVGRkVSLCB7CiAgLy8gMjQuMS40LjMgQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlKHN0YXJ0LCBlbmQpCiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpewogICAgaWYoJHNsaWNlICE9PSB1bmRlZmluZWQgJiYgZW5kID09PSB1bmRlZmluZWQpcmV0dXJuICRzbGljZS5jYWxsKGFuT2JqZWN0KHRoaXMpLCBzdGFydCk7IC8vIEZGIGZpeAogICAgdmFyIGxlbiAgICA9IGFuT2JqZWN0KHRoaXMpLmJ5dGVMZW5ndGgKICAgICAgLCBmaXJzdCAgPSB0b0luZGV4KHN0YXJ0LCBsZW4pCiAgICAgICwgZmluYWwgID0gdG9JbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZCwgbGVuKQogICAgICAsIHJlc3VsdCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRBcnJheUJ1ZmZlcikpKHRvTGVuZ3RoKGZpbmFsIC0gZmlyc3QpKQogICAgICAsIHZpZXdTICA9IG5ldyAkRGF0YVZpZXcodGhpcykKICAgICAgLCB2aWV3VCAgPSBuZXcgJERhdGFWaWV3KHJlc3VsdCkKICAgICAgLCBpbmRleCAgPSAwOwogICAgd2hpbGUoZmlyc3QgPCBmaW5hbCl7CiAgICAgIHZpZXdULnNldFVpbnQ4KGluZGV4KyssIHZpZXdTLmdldFVpbnQ4KGZpcnN0KyspKTsKICAgIH0gcmV0dXJuIHJlc3VsdDsKICB9Cn0pOwoKcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShBUlJBWV9CVUZGRVIpOwp9LHsiLi9fYW4tb2JqZWN0IjoxMjEsIi4vX2V4cG9ydCI6MTQ2LCIuL19mYWlscyI6MTQ4LCIuL19nbG9iYWwiOjE1MiwiLi9faXMtb2JqZWN0IjoxNjMsIi4vX3NldC1zcGVjaWVzIjoyMDUsIi4vX3NwZWNpZXMtY29uc3RydWN0b3IiOjIwOSwiLi9fdG8taW5kZXgiOjIxOSwiLi9fdG8tbGVuZ3RoIjoyMjIsIi4vX3R5cGVkIjoyMjcsIi4vX3R5cGVkLWJ1ZmZlciI6MjI2fV0sMzU5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fdHlwZWQnKS5BQlYsIHsKICBEYXRhVmlldzogcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJykuRGF0YVZpZXcKfSk7Cn0seyIuL19leHBvcnQiOjE0NiwiLi9fdHlwZWQiOjIyNywiLi9fdHlwZWQtYnVmZmVyIjoyMjZ9XSwzNjA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24oaW5pdCl7CiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpewogICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTsKICB9Owp9KTsKfSx7Ii4vX3R5cGVkLWFycmF5IjoyMjV9XSwzNjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDY0JywgOCwgZnVuY3Rpb24oaW5pdCl7CiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpewogICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTsKICB9Owp9KTsKfSx7Ii4vX3R5cGVkLWFycmF5IjoyMjV9XSwzNjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQxNicsIDIsIGZ1bmN0aW9uKGluaXQpewogIHJldHVybiBmdW5jdGlvbiBJbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7CiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpOwogIH07Cn0pOwp9LHsiLi9fdHlwZWQtYXJyYXkiOjIyNX1dLDM2MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDMyJywgNCwgZnVuY3Rpb24oaW5pdCl7CiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXsKICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7CiAgfTsKfSk7Cn0seyIuL190eXBlZC1hcnJheSI6MjI1fV0sMzY0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50OCcsIDEsIGZ1bmN0aW9uKGluaXQpewogIHJldHVybiBmdW5jdGlvbiBJbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXsKICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7CiAgfTsKfSk7Cn0seyIuL190eXBlZC1hcnJheSI6MjI1fV0sMzY1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDE2JywgMiwgZnVuY3Rpb24oaW5pdCl7CiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7CiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpOwogIH07Cn0pOwp9LHsiLi9fdHlwZWQtYXJyYXkiOjIyNX1dLDM2NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQzMicsIDQsIGZ1bmN0aW9uKGluaXQpewogIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpewogICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTsKICB9Owp9KTsKfSx7Ii4vX3R5cGVkLWFycmF5IjoyMjV9XSwzNjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uKGluaXQpewogIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7CiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpOwogIH07Cn0pOwp9LHsiLi9fdHlwZWQtYXJyYXkiOjIyNX1dLDM2ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24oaW5pdCl7CiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7CiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpOwogIH07Cn0sIHRydWUpOwp9LHsiLi9fdHlwZWQtYXJyYXkiOjIyNX1dLDM2OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIGVhY2ggICAgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKQogICwgcmVkZWZpbmUgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKQogICwgbWV0YSAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpCiAgLCBhc3NpZ24gICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykKICAsIHdlYWsgICAgICAgICA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpCiAgLCBpc09iamVjdCAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICwgZ2V0V2VhayAgICAgID0gbWV0YS5nZXRXZWFrCiAgLCBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlCiAgLCB1bmNhdWdodEZyb3plblN0b3JlID0gd2Vhay51ZnN0b3JlCiAgLCB0bXAgICAgICAgICAgPSB7fQogICwgSW50ZXJuYWxNYXA7Cgp2YXIgd3JhcHBlciA9IGZ1bmN0aW9uKGdldCl7CiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKXsKICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOwogIH07Cn07Cgp2YXIgbWV0aG9kcyA9IHsKICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KQogIGdldDogZnVuY3Rpb24gZ2V0KGtleSl7CiAgICBpZihpc09iamVjdChrZXkpKXsKICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7CiAgICAgIGlmKGRhdGEgPT09IHRydWUpcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhpcykuZ2V0KGtleSk7CiAgICAgIHJldHVybiBkYXRhID8gZGF0YVt0aGlzLl9pXSA6IHVuZGVmaW5lZDsKICAgIH0KICB9LAogIC8vIDIzLjMuMy41IFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKQogIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpewogICAgcmV0dXJuIHdlYWsuZGVmKHRoaXMsIGtleSwgdmFsdWUpOwogIH0KfTsKCi8vIDIzLjMgV2Vha01hcCBPYmplY3RzCnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKCdXZWFrTWFwJywgd3JhcHBlciwgbWV0aG9kcywgd2VhaywgdHJ1ZSwgdHJ1ZSk7CgovLyBJRTExIFdlYWtNYXAgZnJvemVuIGtleXMgZml4CmlmKG5ldyAkV2Vha01hcCgpLnNldCgoT2JqZWN0LmZyZWV6ZSB8fCBPYmplY3QpKHRtcCksIDcpLmdldCh0bXApICE9IDcpewogIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyKTsKICBhc3NpZ24oSW50ZXJuYWxNYXAucHJvdG90eXBlLCBtZXRob2RzKTsKICBtZXRhLk5FRUQgPSB0cnVlOwogIGVhY2goWydkZWxldGUnLCAnaGFzJywgJ2dldCcsICdzZXQnXSwgZnVuY3Rpb24oa2V5KXsKICAgIHZhciBwcm90byAgPSAkV2Vha01hcC5wcm90b3R5cGUKICAgICAgLCBtZXRob2QgPSBwcm90b1trZXldOwogICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24oYSwgYil7CiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbQogICAgICBpZihpc09iamVjdChhKSAmJiAhaXNFeHRlbnNpYmxlKGEpKXsKICAgICAgICBpZighdGhpcy5fZil0aGlzLl9mID0gbmV3IEludGVybmFsTWFwOwogICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9mW2tleV0oYSwgYik7CiAgICAgICAgcmV0dXJuIGtleSA9PSAnc2V0JyA/IHRoaXMgOiByZXN1bHQ7CiAgICAgIC8vIHN0b3JlIGFsbCB0aGUgcmVzdCBvbiBuYXRpdmUgd2Vha21hcAogICAgICB9IHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCBhLCBiKTsKICAgIH0pOwogIH0pOwp9Cn0seyIuL19hcnJheS1tZXRob2RzIjoxMjYsIi4vX2NvbGxlY3Rpb24iOjEzNiwiLi9fY29sbGVjdGlvbi13ZWFrIjoxMzUsIi4vX2lzLW9iamVjdCI6MTYzLCIuL19tZXRhIjoxNzYsIi4vX29iamVjdC1hc3NpZ24iOjE3OSwiLi9fcmVkZWZpbmUiOjIwMX1dLDM3MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIHdlYWsgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKTsKCi8vIDIzLjQgV2Vha1NldCBPYmplY3RzCnJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKSgnV2Vha1NldCcsIGZ1bmN0aW9uKGdldCl7CiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtTZXQoKXsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07Cn0sIHsKICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpCiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpewogICAgcmV0dXJuIHdlYWsuZGVmKHRoaXMsIHZhbHVlLCB0cnVlKTsKICB9Cn0sIHdlYWssIGZhbHNlLCB0cnVlKTsKfSx7Ii4vX2NvbGxlY3Rpb24iOjEzNiwiLi9fY29sbGVjdGlvbi13ZWFrIjoxMzV9XSwzNzE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L0FycmF5LnByb3RvdHlwZS5pbmNsdWRlcwp2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykodHJ1ZSk7CgokZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgewogIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiwgZnJvbUluZGV4ID0gMCAqLyl7CiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7CiAgfQp9KTsKCnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdpbmNsdWRlcycpOwp9LHsiLi9fYWRkLXRvLXVuc2NvcGFibGVzIjoxMTksIi4vX2FycmF5LWluY2x1ZGVzIjoxMjUsIi4vX2V4cG9ydCI6MTQ2fV0sMzcyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3J3YWxkcm9uL3RjMzktbm90ZXMvYmxvYi9tYXN0ZXIvZXM2LzIwMTQtMDkvc2VwdC0yNS5tZCM1MTAtZ2xvYmFsYXNhcC1mb3ItZW5xdWV1aW5nLWEtbWljcm90YXNrCnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKQogICwgcHJvY2VzcyAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucHJvY2VzcwogICwgaXNOb2RlICAgID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnOwoKJGV4cG9ydCgkZXhwb3J0LkcsIHsKICBhc2FwOiBmdW5jdGlvbiBhc2FwKGZuKXsKICAgIHZhciBkb21haW4gPSBpc05vZGUgJiYgcHJvY2Vzcy5kb21haW47CiAgICBtaWNyb3Rhc2soZG9tYWluID8gZG9tYWluLmJpbmQoZm4pIDogZm4pOwogIH0KfSk7Cn0seyIuL19jb2YiOjEzMiwiLi9fZXhwb3J0IjoxNDYsIi4vX2dsb2JhbCI6MTUyLCIuL19taWNyb3Rhc2siOjE3OH1dLDM3MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvcHJvcG9zYWwtaXMtZXJyb3IKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgY29mICAgICA9IHJlcXVpcmUoJy4vX2NvZicpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdFcnJvcicsIHsKICBpc0Vycm9yOiBmdW5jdGlvbiBpc0Vycm9yKGl0KXsKICAgIHJldHVybiBjb2YoaXQpID09PSAnRXJyb3InOwogIH0KfSk7Cn0seyIuL19jb2YiOjEzMiwiLi9fZXhwb3J0IjoxNDZ9XSwzNzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OCnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdNYXAnLCB7dG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnTWFwJyl9KTsKfSx7Ii4vX2NvbGxlY3Rpb24tdG8tanNvbiI6MTM0LCIuL19leHBvcnQiOjE0Nn1dLDM3NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7CiAgaWFkZGg6IGZ1bmN0aW9uIGlhZGRoKHgwLCB4MSwgeTAsIHkxKXsKICAgIHZhciAkeDAgPSB4MCA+Pj4gMAogICAgICAsICR4MSA9IHgxID4+PiAwCiAgICAgICwgJHkwID0geTAgPj4+IDA7CiAgICByZXR1cm4gJHgxICsgKHkxID4+PiAwKSArICgoJHgwICYgJHkwIHwgKCR4MCB8ICR5MCkgJiB+KCR4MCArICR5MCA+Pj4gMCkpID4+PiAzMSkgfCAwOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE0Nn1dLDM3NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7CiAgaW11bGg6IGZ1bmN0aW9uIGltdWxoKHUsIHYpewogICAgdmFyIFVJTlQxNiA9IDB4ZmZmZgogICAgICAsICR1ID0gK3UKICAgICAgLCAkdiA9ICt2CiAgICAgICwgdTAgPSAkdSAmIFVJTlQxNgogICAgICAsIHYwID0gJHYgJiBVSU5UMTYKICAgICAgLCB1MSA9ICR1ID4+IDE2CiAgICAgICwgdjEgPSAkdiA+PiAxNgogICAgICAsIHQgID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTsKICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4gMTYpICsgKCh1MCAqIHYxID4+PiAwKSArICh0ICYgVUlOVDE2KSA+PiAxNik7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTQ2fV0sMzc3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDMKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsKICBpc3ViaDogZnVuY3Rpb24gaXN1YmgoeDAsIHgxLCB5MCwgeTEpewogICAgdmFyICR4MCA9IHgwID4+PiAwCiAgICAgICwgJHgxID0geDEgPj4+IDAKICAgICAgLCAkeTAgPSB5MCA+Pj4gMDsKICAgIHJldHVybiAkeDEgLSAoeTEgPj4+IDApIC0gKCh+JHgwICYgJHkwIHwgfigkeDAgXiAkeTApICYgJHgwIC0gJHkwID4+PiAwKSA+Pj4gMzEpIHwgMDsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNDZ9XSwzNzg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwMwp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgewogIHVtdWxoOiBmdW5jdGlvbiB1bXVsaCh1LCB2KXsKICAgIHZhciBVSU5UMTYgPSAweGZmZmYKICAgICAgLCAkdSA9ICt1CiAgICAgICwgJHYgPSArdgogICAgICAsIHUwID0gJHUgJiBVSU5UMTYKICAgICAgLCB2MCA9ICR2ICYgVUlOVDE2CiAgICAgICwgdTEgPSAkdSA+Pj4gMTYKICAgICAgLCB2MSA9ICR2ID4+PiAxNgogICAgICAsIHQgID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTsKICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4+IDE2KTsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNDZ9XSwzNzk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgdG9PYmplY3QgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JykKICAsIGFGdW5jdGlvbiAgICAgICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKQogICwgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7CgovLyBCLjIuMi4yIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVHZXR0ZXJfXyhQLCBnZXR0ZXIpCnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0JywgewogIF9fZGVmaW5lR2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKXsKICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7Z2V0OiBhRnVuY3Rpb24oZ2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSk7CiAgfQp9KTsKfSx7Ii4vX2EtZnVuY3Rpb24iOjExNywiLi9fZGVzY3JpcHRvcnMiOjE0MiwiLi9fZXhwb3J0IjoxNDYsIi4vX29iamVjdC1kcCI6MTgxLCIuL19vYmplY3QtZm9yY2VkLXBhbSI6MTgzLCIuL190by1vYmplY3QiOjIyM31dLDM4MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCB0b09iamVjdCAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKQogICwgYUZ1bmN0aW9uICAgICAgID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpCiAgLCAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTsKCi8vIEIuMi4yLjMgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcikKcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7CiAgX19kZWZpbmVTZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpewogICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHtzZXQ6IGFGdW5jdGlvbihzZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9KTsKICB9Cn0pOwp9LHsiLi9fYS1mdW5jdGlvbiI6MTE3LCIuL19kZXNjcmlwdG9ycyI6MTQyLCIuL19leHBvcnQiOjE0NiwiLi9fb2JqZWN0LWRwIjoxODEsIi4vX29iamVjdC1mb3JjZWQtcGFtIjoxODMsIi4vX3RvLW9iamVjdCI6MjIzfV0sMzgxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzCnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkZW50cmllcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKHRydWUpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7CiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCl7CiAgICByZXR1cm4gJGVudHJpZXMoaXQpOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE0NiwiLi9fb2JqZWN0LXRvLWFycmF5IjoxOTN9XSwzODI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9ycwp2YXIgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgb3duS2V5cyAgICAgICAgPSByZXF1aXJlKCcuL19vd24ta2V5cycpCiAgLCB0b0lPYmplY3QgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKQogICwgZ09QRCAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpCiAgLCBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7CiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpewogICAgdmFyIE8gICAgICAgPSB0b0lPYmplY3Qob2JqZWN0KQogICAgICAsIGdldERlc2MgPSBnT1BELmYKICAgICAgLCBrZXlzICAgID0gb3duS2V5cyhPKQogICAgICAsIHJlc3VsdCAgPSB7fQogICAgICAsIGkgICAgICAgPSAwCiAgICAgICwga2V5OwogICAgd2hpbGUoa2V5cy5sZW5ndGggPiBpKWNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5ID0ga2V5c1tpKytdLCBnZXREZXNjKE8sIGtleSkpOwogICAgcmV0dXJuIHJlc3VsdDsKICB9Cn0pOwp9LHsiLi9fY3JlYXRlLXByb3BlcnR5IjoxMzgsIi4vX2V4cG9ydCI6MTQ2LCIuL19vYmplY3QtZ29wZCI6MTg0LCIuL19vd24ta2V5cyI6MTk0LCIuL190by1pb2JqZWN0IjoyMjF9XSwzODM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgdG9PYmplY3QgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JykKICAsIHRvUHJpbWl0aXZlICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpCiAgLCBnZXRQcm90b3R5cGVPZiAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJykKICAsIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjsKCi8vIEIuMi4yLjQgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cEdldHRlcl9fKFApCnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0JywgewogIF9fbG9va3VwR2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwR2V0dGVyX18oUCl7CiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpCiAgICAgICwgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpCiAgICAgICwgRDsKICAgIGRvIHsKICAgICAgaWYoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSlyZXR1cm4gRC5nZXQ7CiAgICB9IHdoaWxlKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7CiAgfQp9KTsKfSx7Ii4vX2Rlc2NyaXB0b3JzIjoxNDIsIi4vX2V4cG9ydCI6MTQ2LCIuL19vYmplY3QtZm9yY2VkLXBhbSI6MTgzLCIuL19vYmplY3QtZ29wZCI6MTg0LCIuL19vYmplY3QtZ3BvIjoxODgsIi4vX3RvLW9iamVjdCI6MjIzLCIuL190by1wcmltaXRpdmUiOjIyNH1dLDM4NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCB0b09iamVjdCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKQogICwgdG9QcmltaXRpdmUgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJykKICAsIGdldFByb3RvdHlwZU9mICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKQogICwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mOwoKLy8gQi4yLjIuNSBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwU2V0dGVyX18oUCkKcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7CiAgX19sb29rdXBTZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBTZXR0ZXJfXyhQKXsKICAgIHZhciBPID0gdG9PYmplY3QodGhpcykKICAgICAgLCBLID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSkKICAgICAgLCBEOwogICAgZG8gewogICAgICBpZihEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKXJldHVybiBELnNldDsKICAgIH0gd2hpbGUoTyA9IGdldFByb3RvdHlwZU9mKE8pKTsKICB9Cn0pOwp9LHsiLi9fZGVzY3JpcHRvcnMiOjE0MiwiLi9fZXhwb3J0IjoxNDYsIi4vX29iamVjdC1mb3JjZWQtcGFtIjoxODMsIi4vX29iamVjdC1nb3BkIjoxODQsIi4vX29iamVjdC1ncG8iOjE4OCwiLi9fdG8tb2JqZWN0IjoyMjMsIi4vX3RvLXByaW1pdGl2ZSI6MjI0fV0sMzg1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7CgokZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsKICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCl7CiAgICByZXR1cm4gJHZhbHVlcyhpdCk7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTQ2LCIuL19vYmplY3QtdG8tYXJyYXkiOjE5M31dLDM4NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3plbnBhcnNpbmcvZXMtb2JzZXJ2YWJsZQp2YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgZ2xvYmFsICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgY29yZSAgICAgICAgPSByZXF1aXJlKCcuL19jb3JlJykKICAsIG1pY3JvdGFzayAgID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKQogICwgT0JTRVJWQUJMRSAgPSByZXF1aXJlKCcuL193a3MnKSgnb2JzZXJ2YWJsZScpCiAgLCBhRnVuY3Rpb24gICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKQogICwgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgYW5JbnN0YW5jZSAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpCiAgLCByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpCiAgLCBoaWRlICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKQogICwgZm9yT2YgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKQogICwgUkVUVVJOICAgICAgPSBmb3JPZi5SRVRVUk47Cgp2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24oZm4pewogIHJldHVybiBmbiA9PSBudWxsID8gdW5kZWZpbmVkIDogYUZ1bmN0aW9uKGZuKTsKfTsKCnZhciBjbGVhbnVwU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24oc3Vic2NyaXB0aW9uKXsKICB2YXIgY2xlYW51cCA9IHN1YnNjcmlwdGlvbi5fYzsKICBpZihjbGVhbnVwKXsKICAgIHN1YnNjcmlwdGlvbi5fYyA9IHVuZGVmaW5lZDsKICAgIGNsZWFudXAoKTsKICB9Cn07Cgp2YXIgc3Vic2NyaXB0aW9uQ2xvc2VkID0gZnVuY3Rpb24oc3Vic2NyaXB0aW9uKXsKICByZXR1cm4gc3Vic2NyaXB0aW9uLl9vID09PSB1bmRlZmluZWQ7Cn07Cgp2YXIgY2xvc2VTdWJzY3JpcHRpb24gPSBmdW5jdGlvbihzdWJzY3JpcHRpb24pewogIGlmKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSl7CiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7CiAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7CiAgfQp9OwoKdmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uKG9ic2VydmVyLCBzdWJzY3JpYmVyKXsKICBhbk9iamVjdChvYnNlcnZlcik7CiAgdGhpcy5fYyA9IHVuZGVmaW5lZDsKICB0aGlzLl9vID0gb2JzZXJ2ZXI7CiAgb2JzZXJ2ZXIgPSBuZXcgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIodGhpcyk7CiAgdHJ5IHsKICAgIHZhciBjbGVhbnVwICAgICAgPSBzdWJzY3JpYmVyKG9ic2VydmVyKQogICAgICAsIHN1YnNjcmlwdGlvbiA9IGNsZWFudXA7CiAgICBpZihjbGVhbnVwICE9IG51bGwpewogICAgICBpZih0eXBlb2YgY2xlYW51cC51bnN1YnNjcmliZSA9PT0gJ2Z1bmN0aW9uJyljbGVhbnVwID0gZnVuY3Rpb24oKXsgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7IH07CiAgICAgIGVsc2UgYUZ1bmN0aW9uKGNsZWFudXApOwogICAgICB0aGlzLl9jID0gY2xlYW51cDsKICAgIH0KICB9IGNhdGNoKGUpewogICAgb2JzZXJ2ZXIuZXJyb3IoZSk7CiAgICByZXR1cm47CiAgfSBpZihzdWJzY3JpcHRpb25DbG9zZWQodGhpcykpY2xlYW51cFN1YnNjcmlwdGlvbih0aGlzKTsKfTsKClN1YnNjcmlwdGlvbi5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwgewogIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpeyBjbG9zZVN1YnNjcmlwdGlvbih0aGlzKTsgfQp9KTsKCnZhciBTdWJzY3JpcHRpb25PYnNlcnZlciA9IGZ1bmN0aW9uKHN1YnNjcmlwdGlvbil7CiAgdGhpcy5fcyA9IHN1YnNjcmlwdGlvbjsKfTsKClN1YnNjcmlwdGlvbk9ic2VydmVyLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7CiAgbmV4dDogZnVuY3Rpb24gbmV4dCh2YWx1ZSl7CiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fczsKICAgIGlmKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSl7CiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbzsKICAgICAgdHJ5IHsKICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5uZXh0KTsKICAgICAgICBpZihtKXJldHVybiBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTsKICAgICAgfSBjYXRjaChlKXsKICAgICAgICB0cnkgewogICAgICAgICAgY2xvc2VTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTsKICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgdGhyb3cgZTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LAogIGVycm9yOiBmdW5jdGlvbiBlcnJvcih2YWx1ZSl7CiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fczsKICAgIGlmKHN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKXRocm93IHZhbHVlOwogICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vOwogICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkOwogICAgdHJ5IHsKICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuZXJyb3IpOwogICAgICBpZighbSl0aHJvdyB2YWx1ZTsKICAgICAgdmFsdWUgPSBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTsKICAgIH0gY2F0Y2goZSl7CiAgICAgIHRyeSB7CiAgICAgICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIHRocm93IGU7CiAgICAgIH0KICAgIH0gY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pOwogICAgcmV0dXJuIHZhbHVlOwogIH0sCiAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKHZhbHVlKXsKICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zOwogICAgaWYoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKXsKICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vOwogICAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7CiAgICAgIHRyeSB7CiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuY29tcGxldGUpOwogICAgICAgIHZhbHVlID0gbSA/IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpIDogdW5kZWZpbmVkOwogICAgICB9IGNhdGNoKGUpewogICAgICAgIHRyeSB7CiAgICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIHRocm93IGU7CiAgICAgICAgfQogICAgICB9IGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTsKICAgICAgcmV0dXJuIHZhbHVlOwogICAgfQogIH0KfSk7Cgp2YXIgJE9ic2VydmFibGUgPSBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZXIpewogIGFuSW5zdGFuY2UodGhpcywgJE9ic2VydmFibGUsICdPYnNlcnZhYmxlJywgJ19mJykuX2YgPSBhRnVuY3Rpb24oc3Vic2NyaWJlcik7Cn07CgpyZWRlZmluZUFsbCgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIHsKICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcil7CiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihvYnNlcnZlciwgdGhpcy5fZik7CiAgfSwKICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGZuKXsKICAgIHZhciB0aGF0ID0gdGhpczsKICAgIHJldHVybiBuZXcgKGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSkoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXsKICAgICAgYUZ1bmN0aW9uKGZuKTsKICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoYXQuc3Vic2NyaWJlKHsKICAgICAgICBuZXh0IDogZnVuY3Rpb24odmFsdWUpewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgcmV0dXJuIGZuKHZhbHVlKTsKICAgICAgICAgIH0gY2F0Y2goZSl7CiAgICAgICAgICAgIHJlamVjdChlKTsKICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBlcnJvcjogcmVqZWN0LAogICAgICAgIGNvbXBsZXRlOiByZXNvbHZlCiAgICAgIH0pOwogICAgfSk7CiAgfQp9KTsKCnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLCB7CiAgZnJvbTogZnVuY3Rpb24gZnJvbSh4KXsKICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGU7CiAgICB2YXIgbWV0aG9kID0gZ2V0TWV0aG9kKGFuT2JqZWN0KHgpW09CU0VSVkFCTEVdKTsKICAgIGlmKG1ldGhvZCl7CiAgICAgIHZhciBvYnNlcnZhYmxlID0gYW5PYmplY3QobWV0aG9kLmNhbGwoeCkpOwogICAgICByZXR1cm4gb2JzZXJ2YWJsZS5jb25zdHJ1Y3RvciA9PT0gQyA/IG9ic2VydmFibGUgOiBuZXcgQyhmdW5jdGlvbihvYnNlcnZlcil7CiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuc3Vic2NyaWJlKG9ic2VydmVyKTsKICAgICAgfSk7CiAgICB9CiAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24ob2JzZXJ2ZXIpewogICAgICB2YXIgZG9uZSA9IGZhbHNlOwogICAgICBtaWNyb3Rhc2soZnVuY3Rpb24oKXsKICAgICAgICBpZighZG9uZSl7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICBpZihmb3JPZih4LCBmYWxzZSwgZnVuY3Rpb24oaXQpewogICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXQpOwogICAgICAgICAgICAgIGlmKGRvbmUpcmV0dXJuIFJFVFVSTjsKICAgICAgICAgICAgfSkgPT09IFJFVFVSTilyZXR1cm47CiAgICAgICAgICB9IGNhdGNoKGUpewogICAgICAgICAgICBpZihkb25lKXRocm93IGU7CiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGUpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7IGRvbmUgPSB0cnVlOyB9OwogICAgfSk7CiAgfSwKICBvZjogZnVuY3Rpb24gb2YoKXsKICAgIGZvcih2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoLCBpdGVtcyA9IEFycmF5KGwpOyBpIDwgbDspaXRlbXNbaV0gPSBhcmd1bWVudHNbaSsrXTsKICAgIHJldHVybiBuZXcgKHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlKShmdW5jdGlvbihvYnNlcnZlcil7CiAgICAgIHZhciBkb25lID0gZmFsc2U7CiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbigpewogICAgICAgIGlmKCFkb25lKXsKICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7ICsraSl7CiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXRlbXNbaV0pOwogICAgICAgICAgICBpZihkb25lKXJldHVybjsKICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICByZXR1cm4gZnVuY3Rpb24oKXsgZG9uZSA9IHRydWU7IH07CiAgICB9KTsKICB9Cn0pOwoKaGlkZSgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIE9CU0VSVkFCTEUsIGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9KTsKCiRleHBvcnQoJGV4cG9ydC5HLCB7T2JzZXJ2YWJsZTogJE9ic2VydmFibGV9KTsKCnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ09ic2VydmFibGUnKTsKfSx7Ii4vX2EtZnVuY3Rpb24iOjExNywiLi9fYW4taW5zdGFuY2UiOjEyMCwiLi9fYW4tb2JqZWN0IjoxMjEsIi4vX2NvcmUiOjEzNywiLi9fZXhwb3J0IjoxNDYsIi4vX2Zvci1vZiI6MTUxLCIuL19nbG9iYWwiOjE1MiwiLi9faGlkZSI6MTU0LCIuL19taWNyb3Rhc2siOjE3OCwiLi9fcmVkZWZpbmUtYWxsIjoyMDAsIi4vX3NldC1zcGVjaWVzIjoyMDUsIi4vX3drcyI6MjMxfV0sMzg3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpCiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXkKICAsIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5zZXQ7CgptZXRhZGF0YS5leHAoe2RlZmluZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWZpbmVNZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCB0YXJnZXRLZXkpewogIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIGFuT2JqZWN0KHRhcmdldCksIHRvTWV0YUtleSh0YXJnZXRLZXkpKTsKfX0pOwp9LHsiLi9fYW4tb2JqZWN0IjoxMjEsIi4vX21ldGFkYXRhIjoxNzd9XSwzODg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJykKICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleQogICwgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IG1ldGFkYXRhLm1hcAogICwgc3RvcmUgICAgICAgICAgICAgICAgICA9IG1ldGFkYXRhLnN0b3JlOwoKbWV0YWRhdGEuZXhwKHtkZWxldGVNZXRhZGF0YTogZnVuY3Rpb24gZGVsZXRlTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXsKICB2YXIgdGFyZ2V0S2V5ICAgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pCiAgICAsIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChhbk9iamVjdCh0YXJnZXQpLCB0YXJnZXRLZXksIGZhbHNlKTsKICBpZihtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkIHx8ICFtZXRhZGF0YU1hcFsnZGVsZXRlJ10obWV0YWRhdGFLZXkpKXJldHVybiBmYWxzZTsKICBpZihtZXRhZGF0YU1hcC5zaXplKXJldHVybiB0cnVlOwogIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpOwogIHRhcmdldE1ldGFkYXRhWydkZWxldGUnXSh0YXJnZXRLZXkpOwogIHJldHVybiAhIXRhcmdldE1ldGFkYXRhLnNpemUgfHwgc3RvcmVbJ2RlbGV0ZSddKHRhcmdldCk7Cn19KTsKfSx7Ii4vX2FuLW9iamVjdCI6MTIxLCIuL19tZXRhZGF0YSI6MTc3fV0sMzg5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIFNldCAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9lczYuc2V0JykKICAsIGZyb20gICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktZnJvbS1pdGVyYWJsZScpCiAgLCBtZXRhZGF0YSAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJykKICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIGdldFByb3RvdHlwZU9mICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpCiAgLCBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IG1ldGFkYXRhLmtleXMKICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5OwoKdmFyIG9yZGluYXJ5TWV0YWRhdGFLZXlzID0gZnVuY3Rpb24oTywgUCl7CiAgdmFyIG9LZXlzICA9IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKE8sIFApCiAgICAsIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pOwogIGlmKHBhcmVudCA9PT0gbnVsbClyZXR1cm4gb0tleXM7CiAgdmFyIHBLZXlzICA9IG9yZGluYXJ5TWV0YWRhdGFLZXlzKHBhcmVudCwgUCk7CiAgcmV0dXJuIHBLZXlzLmxlbmd0aCA/IG9LZXlzLmxlbmd0aCA/IGZyb20obmV3IFNldChvS2V5cy5jb25jYXQocEtleXMpKSkgOiBwS2V5cyA6IG9LZXlzOwp9OwoKbWV0YWRhdGEuZXhwKHtnZXRNZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE1ldGFkYXRhS2V5cyh0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7CiAgcmV0dXJuIG9yZGluYXJ5TWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpOwp9fSk7Cn0seyIuL19hbi1vYmplY3QiOjEyMSwiLi9fYXJyYXktZnJvbS1pdGVyYWJsZSI6MTI0LCIuL19tZXRhZGF0YSI6MTc3LCIuL19vYmplY3QtZ3BvIjoxODgsIi4vZXM2LnNldCI6MzM0fV0sMzkwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpCiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIGdldFByb3RvdHlwZU9mICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJykKICAsIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXMKICAsIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQKICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7Cgp2YXIgb3JkaW5hcnlHZXRNZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBPLCBQKXsKICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7CiAgaWYoaGFzT3duKXJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTsKICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7CiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5R2V0TWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiB1bmRlZmluZWQ7Cn07CgptZXRhZGF0YS5leHAoe2dldE1ldGFkYXRhOiBmdW5jdGlvbiBnZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pewogIHJldHVybiBvcmRpbmFyeUdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTsKfX0pOwp9LHsiLi9fYW4tb2JqZWN0IjoxMjEsIi4vX21ldGFkYXRhIjoxNzcsIi4vX29iamVjdC1ncG8iOjE4OH1dLDM5MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBtZXRhZGF0YSAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJykKICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5cwogICwgdG9NZXRhS2V5ICAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7CgptZXRhZGF0YS5leHAoe2dldE93bk1ldGFkYXRhS2V5czogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGFLZXlzKHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXsKICByZXR1cm4gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzFdKSk7Cn19KTsKfSx7Ii4vX2FuLW9iamVjdCI6MTIxLCIuL19tZXRhZGF0YSI6MTc3fV0sMzkyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpCiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQKICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7CgptZXRhZGF0YS5leHAoe2dldE93bk1ldGFkYXRhOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pewogIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpCiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpOwp9fSk7Cn0seyIuL19hbi1vYmplY3QiOjEyMSwiLi9fbWV0YWRhdGEiOjE3N31dLDM5MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBtZXRhZGF0YSAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKQogICwgYW5PYmplY3QgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCBnZXRQcm90b3R5cGVPZiAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpCiAgLCBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzCiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5OwoKdmFyIG9yZGluYXJ5SGFzTWV0YWRhdGEgPSBmdW5jdGlvbihNZXRhZGF0YUtleSwgTywgUCl7CiAgdmFyIGhhc093biA9IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApOwogIGlmKGhhc093bilyZXR1cm4gdHJ1ZTsKICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7CiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiBmYWxzZTsKfTsKCm1ldGFkYXRhLmV4cCh7aGFzTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7CiAgcmV0dXJuIG9yZGluYXJ5SGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpOwp9fSk7Cn0seyIuL19hbi1vYmplY3QiOjEyMSwiLi9fbWV0YWRhdGEiOjE3NywiLi9fb2JqZWN0LWdwbyI6MTg4fV0sMzk0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpCiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXMKICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7CgptZXRhZGF0YS5leHAoe2hhc093bk1ldGFkYXRhOiBmdW5jdGlvbiBoYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pewogIHJldHVybiBvcmRpbmFyeUhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpCiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpOwp9fSk7Cn0seyIuL19hbi1vYmplY3QiOjEyMSwiLi9fbWV0YWRhdGEiOjE3N31dLDM5NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBtZXRhZGF0YSAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKQogICwgYW5PYmplY3QgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCBhRnVuY3Rpb24gICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpCiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5CiAgLCBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gbWV0YWRhdGEuc2V0OwoKbWV0YWRhdGEuZXhwKHttZXRhZGF0YTogZnVuY3Rpb24gbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpewogIHJldHVybiBmdW5jdGlvbiBkZWNvcmF0b3IodGFyZ2V0LCB0YXJnZXRLZXkpewogICAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSgKICAgICAgbWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsCiAgICAgICh0YXJnZXRLZXkgIT09IHVuZGVmaW5lZCA/IGFuT2JqZWN0IDogYUZ1bmN0aW9uKSh0YXJnZXQpLAogICAgICB0b01ldGFLZXkodGFyZ2V0S2V5KQogICAgKTsKICB9Owp9fSk7Cn0seyIuL19hLWZ1bmN0aW9uIjoxMTcsIi4vX2FuLW9iamVjdCI6MTIxLCIuL19tZXRhZGF0YSI6MTc3fV0sMzk2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTgp2YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnU2V0Jywge3RvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ1NldCcpfSk7Cn0seyIuL19jb2xsZWN0aW9uLXRvLWpzb24iOjEzNCwiLi9fZXhwb3J0IjoxNDZ9XSwzOTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXQKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJGF0ICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpOwoKJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7CiAgYXQ6IGZ1bmN0aW9uIGF0KHBvcyl7CiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTQ2LCIuL19zdHJpbmctYXQiOjIxMX1dLDM5ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9TdHJpbmcucHJvdG90eXBlLm1hdGNoQWxsLwp2YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgZGVmaW5lZCAgICAgPSByZXF1aXJlKCcuL19kZWZpbmVkJykKICAsIHRvTGVuZ3RoICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJykKICAsIGlzUmVnRXhwICAgID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJykKICAsIGdldEZsYWdzICAgID0gcmVxdWlyZSgnLi9fZmxhZ3MnKQogICwgUmVnRXhwUHJvdG8gPSBSZWdFeHAucHJvdG90eXBlOwoKdmFyICRSZWdFeHBTdHJpbmdJdGVyYXRvciA9IGZ1bmN0aW9uKHJlZ2V4cCwgc3RyaW5nKXsKICB0aGlzLl9yID0gcmVnZXhwOwogIHRoaXMuX3MgPSBzdHJpbmc7Cn07CgpyZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKCRSZWdFeHBTdHJpbmdJdGVyYXRvciwgJ1JlZ0V4cCBTdHJpbmcnLCBmdW5jdGlvbiBuZXh0KCl7CiAgdmFyIG1hdGNoID0gdGhpcy5fci5leGVjKHRoaXMuX3MpOwogIHJldHVybiB7dmFsdWU6IG1hdGNoLCBkb25lOiBtYXRjaCA9PT0gbnVsbH07Cn0pOwoKJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7CiAgbWF0Y2hBbGw6IGZ1bmN0aW9uIG1hdGNoQWxsKHJlZ2V4cCl7CiAgICBkZWZpbmVkKHRoaXMpOwogICAgaWYoIWlzUmVnRXhwKHJlZ2V4cCkpdGhyb3cgVHlwZUVycm9yKHJlZ2V4cCArICcgaXMgbm90IGEgcmVnZXhwIScpOwogICAgdmFyIFMgICAgID0gU3RyaW5nKHRoaXMpCiAgICAgICwgZmxhZ3MgPSAnZmxhZ3MnIGluIFJlZ0V4cFByb3RvID8gU3RyaW5nKHJlZ2V4cC5mbGFncykgOiBnZXRGbGFncy5jYWxsKHJlZ2V4cCkKICAgICAgLCByeCAgICA9IG5ldyBSZWdFeHAocmVnZXhwLnNvdXJjZSwgfmZsYWdzLmluZGV4T2YoJ2cnKSA/IGZsYWdzIDogJ2cnICsgZmxhZ3MpOwogICAgcngubGFzdEluZGV4ID0gdG9MZW5ndGgocmVnZXhwLmxhc3RJbmRleCk7CiAgICByZXR1cm4gbmV3ICRSZWdFeHBTdHJpbmdJdGVyYXRvcihyeCwgUyk7CiAgfQp9KTsKfSx7Ii4vX2RlZmluZWQiOjE0MSwiLi9fZXhwb3J0IjoxNDYsIi4vX2ZsYWdzIjoxNTAsIi4vX2lzLXJlZ2V4cCI6MTY0LCIuL19pdGVyLWNyZWF0ZSI6MTY2LCIuL190by1sZW5ndGgiOjIyMn1dLDM5OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmQKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJHBhZCAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTsKCiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywgewogIHBhZEVuZDogZnVuY3Rpb24gcGFkRW5kKG1heExlbmd0aCAvKiwgZmlsbFN0cmluZyA9ICcgJyAqLyl7CiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmYWxzZSk7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTQ2LCIuL19zdHJpbmctcGFkIjoyMTR9XSw0MDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRwYWQgICAgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7CgokZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHsKICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qLCBmaWxsU3RyaW5nID0gJyAnICovKXsKICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE0NiwiLi9fc3RyaW5nLXBhZCI6MjE0fV0sNDAxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltCnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1MZWZ0JywgZnVuY3Rpb24oJHRyaW0pewogIHJldHVybiBmdW5jdGlvbiB0cmltTGVmdCgpewogICAgcmV0dXJuICR0cmltKHRoaXMsIDEpOwogIH07Cn0sICd0cmltU3RhcnQnKTsKfSx7Ii4vX3N0cmluZy10cmltIjoyMTZ9XSw0MDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW0KcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbVJpZ2h0JywgZnVuY3Rpb24oJHRyaW0pewogIHJldHVybiBmdW5jdGlvbiB0cmltUmlnaHQoKXsKICAgIHJldHVybiAkdHJpbSh0aGlzLCAyKTsKICB9Owp9LCAndHJpbUVuZCcpOwp9LHsiLi9fc3RyaW5nLXRyaW0iOjIxNn1dLDQwMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVsxMTRdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fd2tzLWRlZmluZSI6MjI5LCJkdXAiOjExNH1dLDQwNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVsxMTVdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fd2tzLWRlZmluZSI6MjI5LCJkdXAiOjExNX1dLDQwNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvcHJvcG9zYWwtZ2xvYmFsCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ1N5c3RlbScsIHtnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpfSk7Cn0seyIuL19leHBvcnQiOjE0NiwiLi9fZ2xvYmFsIjoxNTJ9XSw0MDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgJGl0ZXJhdG9ycyAgICA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJykKICAsIHJlZGVmaW5lICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpCiAgLCBnbG9iYWwgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykKICAsIGhpZGUgICAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJykKICAsIEl0ZXJhdG9ycyAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKQogICwgd2tzICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3drcycpCiAgLCBJVEVSQVRPUiAgICAgID0gd2tzKCdpdGVyYXRvcicpCiAgLCBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpCiAgLCBBcnJheVZhbHVlcyAgID0gSXRlcmF0b3JzLkFycmF5OwoKZm9yKHZhciBjb2xsZWN0aW9ucyA9IFsnTm9kZUxpc3QnLCAnRE9NVG9rZW5MaXN0JywgJ01lZGlhTGlzdCcsICdTdHlsZVNoZWV0TGlzdCcsICdDU1NSdWxlTGlzdCddLCBpID0gMDsgaSA8IDU7IGkrKyl7CiAgdmFyIE5BTUUgICAgICAgPSBjb2xsZWN0aW9uc1tpXQogICAgLCBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdCiAgICAsIHByb3RvICAgICAgPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlCiAgICAsIGtleTsKICBpZihwcm90byl7CiAgICBpZighcHJvdG9bSVRFUkFUT1JdKWhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7CiAgICBpZighcHJvdG9bVE9fU1RSSU5HX1RBR10paGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7CiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlczsKICAgIGZvcihrZXkgaW4gJGl0ZXJhdG9ycylpZighcHJvdG9ba2V5XSlyZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpOwogIH0KfQp9LHsiLi9fZ2xvYmFsIjoxNTIsIi4vX2hpZGUiOjE1NCwiLi9faXRlcmF0b3JzIjoxNzAsIi4vX3JlZGVmaW5lIjoyMDEsIi4vX3drcyI6MjMxLCIuL2VzNi5hcnJheS5pdGVyYXRvciI6MjQ0fV0sNDA3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJHRhc2sgICA9IHJlcXVpcmUoJy4vX3Rhc2snKTsKJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIsIHsKICBzZXRJbW1lZGlhdGU6ICAgJHRhc2suc2V0LAogIGNsZWFySW1tZWRpYXRlOiAkdGFzay5jbGVhcgp9KTsKfSx7Ii4vX2V4cG9ydCI6MTQ2LCIuL190YXNrIjoyMTh9XSw0MDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBpZTktIHNldFRpbWVvdXQgJiBzZXRJbnRlcnZhbCBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZml4CnZhciBnbG9iYWwgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykKICAsICRleHBvcnQgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgaW52b2tlICAgICA9IHJlcXVpcmUoJy4vX2ludm9rZScpCiAgLCBwYXJ0aWFsICAgID0gcmVxdWlyZSgnLi9fcGFydGlhbCcpCiAgLCBuYXZpZ2F0b3IgID0gZ2xvYmFsLm5hdmlnYXRvcgogICwgTVNJRSAgICAgICA9ICEhbmF2aWdhdG9yICYmIC9NU0lFIC5cLi8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVjawp2YXIgd3JhcCA9IGZ1bmN0aW9uKHNldCl7CiAgcmV0dXJuIE1TSUUgPyBmdW5jdGlvbihmbiwgdGltZSAvKiwgLi4uYXJncyAqLyl7CiAgICByZXR1cm4gc2V0KGludm9rZSgKICAgICAgcGFydGlhbCwKICAgICAgW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpLAogICAgICB0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pCiAgICApLCB0aW1lKTsKICB9IDogc2V0Owp9OwokZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiArICRleHBvcnQuRiAqIE1TSUUsIHsKICBzZXRUaW1lb3V0OiAgd3JhcChnbG9iYWwuc2V0VGltZW91dCksCiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTQ2LCIuL19nbG9iYWwiOjE1MiwiLi9faW52b2tlIjoxNTgsIi4vX3BhcnRpYWwiOjE5N31dLDQwOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3ltYm9sJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHknKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4nKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1pbnQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3RvcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24nKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4nKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXInKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmFjb3NoJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hc2luaCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYXRhbmgnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNicnQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNsejMyJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jb3NoJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5leHBtMScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5oeXBvdCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguaW11bCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cyJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaWduJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaW5oJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC50YW5oJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC50cnVuYycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcucmF3Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0nKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGgnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5iaWcnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3InKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRhbGljcycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5saW5rJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdWInKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS5ub3cnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24nKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXknKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5mcm9tJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkub2YnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5qb2luJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb3J0Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2gnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5tYXAnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXInKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb21lJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZXZlcnknKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbGwnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3RvcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2gnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2gnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wcm9taXNlJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWFwJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc2V0Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYud2Vhay1tYXAnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLXNldCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXknKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXknKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXknKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5oYXMnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLmF0Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1zdGFydCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtc2V0dGVyJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXInKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC50by1qc29uJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0LnRvLWpzb24nKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeXN0ZW0uZ2xvYmFsJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuZXJyb3IuaXMtZXJyb3InKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pc3ViaCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaW11bGgnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnVtdWxoJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEta2V5cycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXNhcCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9ic2VydmFibGUnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL3dlYi50aW1lcnMnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL3dlYi5pbW1lZGlhdGUnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL21vZHVsZXMvX2NvcmUnKTsKfSx7Ii4vbW9kdWxlcy9fY29yZSI6MTM3LCIuL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluIjoyMzQsIi4vbW9kdWxlcy9lczYuYXJyYXkuZXZlcnkiOjIzNSwiLi9tb2R1bGVzL2VzNi5hcnJheS5maWxsIjoyMzYsIi4vbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyIjoyMzcsIi4vbW9kdWxlcy9lczYuYXJyYXkuZmluZCI6MjM5LCIuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXgiOjIzOCwiLi9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaCI6MjQwLCIuL21vZHVsZXMvZXM2LmFycmF5LmZyb20iOjI0MSwiLi9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZiI6MjQyLCIuL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5IjoyNDMsIi4vbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IiOjI0NCwiLi9tb2R1bGVzL2VzNi5hcnJheS5qb2luIjoyNDUsIi4vbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZiI6MjQ2LCIuL21vZHVsZXMvZXM2LmFycmF5Lm1hcCI6MjQ3LCIuL21vZHVsZXMvZXM2LmFycmF5Lm9mIjoyNDgsIi4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlIjoyNTAsIi4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0IjoyNDksIi4vbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UiOjI1MSwiLi9tb2R1bGVzL2VzNi5hcnJheS5zb21lIjoyNTIsIi4vbW9kdWxlcy9lczYuYXJyYXkuc29ydCI6MjUzLCIuL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMiOjI1NCwiLi9tb2R1bGVzL2VzNi5kYXRlLm5vdyI6MjU1LCIuL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZyI6MjU2LCIuL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbiI6MjU3LCIuL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlIjoyNTgsIi4vbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmciOjI1OSwiLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kIjoyNjAsIi4vbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlIjoyNjEsIi4vbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZSI6MjYyLCIuL21vZHVsZXMvZXM2Lm1hcCI6MjYzLCIuL21vZHVsZXMvZXM2Lm1hdGguYWNvc2giOjI2NCwiLi9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oIjoyNjUsIi4vbW9kdWxlcy9lczYubWF0aC5hdGFuaCI6MjY2LCIuL21vZHVsZXMvZXM2Lm1hdGguY2JydCI6MjY3LCIuL21vZHVsZXMvZXM2Lm1hdGguY2x6MzIiOjI2OCwiLi9tb2R1bGVzL2VzNi5tYXRoLmNvc2giOjI2OSwiLi9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xIjoyNzAsIi4vbW9kdWxlcy9lczYubWF0aC5mcm91bmQiOjI3MSwiLi9tb2R1bGVzL2VzNi5tYXRoLmh5cG90IjoyNzIsIi4vbW9kdWxlcy9lczYubWF0aC5pbXVsIjoyNzMsIi4vbW9kdWxlcy9lczYubWF0aC5sb2cxMCI6Mjc0LCIuL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAiOjI3NSwiLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzIiOjI3NiwiLi9tb2R1bGVzL2VzNi5tYXRoLnNpZ24iOjI3NywiLi9tb2R1bGVzL2VzNi5tYXRoLnNpbmgiOjI3OCwiLi9tb2R1bGVzL2VzNi5tYXRoLnRhbmgiOjI3OSwiLi9tb2R1bGVzL2VzNi5tYXRoLnRydW5jIjoyODAsIi4vbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yIjoyODEsIi4vbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24iOjI4MiwiLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlIjoyODMsIi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXIiOjI4NCwiLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuIjoyODUsIi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlciI6Mjg2LCIuL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyIjoyODcsIi4vbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXIiOjI4OCwiLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQiOjI4OSwiLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50IjoyOTAsIi4vbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkIjoyOTEsIi4vbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbiI6MjkyLCIuL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24iOjI5MywiLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlIjoyOTQsIi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzIjoyOTUsIi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eSI6Mjk2LCIuL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUiOjI5NywiLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yIjoyOTgsIi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMiOjI5OSwiLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZiI6MzAwLCIuL21vZHVsZXMvZXM2Lm9iamVjdC5pcyI6MzA0LCIuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlIjozMDEsIi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbiI6MzAyLCIuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQiOjMwMywiLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cyI6MzA1LCIuL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMiOjMwNiwiLi9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbCI6MzA3LCIuL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mIjozMDgsIi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZyI6MzA5LCIuL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0IjozMTAsIi4vbW9kdWxlcy9lczYucGFyc2UtaW50IjozMTEsIi4vbW9kdWxlcy9lczYucHJvbWlzZSI6MzEyLCIuL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHkiOjMxMywiLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdCI6MzE0LCIuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5IjozMTUsIi4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHkiOjMxNiwiLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZSI6MzE3LCIuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0IjozMjAsIi4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IiOjMxOCwiLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YiOjMxOSwiLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmhhcyI6MzIxLCIuL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZSI6MzIyLCIuL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMiOjMyMywiLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucyI6MzI0LCIuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0IjozMjYsIi4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mIjozMjUsIi4vbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yIjozMjcsIi4vbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzIjozMjgsIi4vbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoIjozMjksIi4vbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UiOjMzMCwiLi9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoIjozMzEsIi4vbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0IjozMzIsIi4vbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZyI6MzMzLCIuL21vZHVsZXMvZXM2LnNldCI6MzM0LCIuL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3IiOjMzNSwiLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnIjozMzYsIi4vbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rIjozMzcsIi4vbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQiOjMzOCwiLi9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdCI6MzM5LCIuL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGgiOjM0MCwiLi9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQiOjM0MSwiLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yIjozNDIsIi4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplIjozNDMsIi4vbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludCI6MzQ0LCIuL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcyI6MzQ1LCIuL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzIjozNDYsIi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yIjozNDcsIi4vbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsiOjM0OCwiLi9tb2R1bGVzL2VzNi5zdHJpbmcucmF3IjozNDksIi4vbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdCI6MzUwLCIuL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbCI6MzUxLCIuL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aCI6MzUyLCIuL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UiOjM1MywiLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViIjozNTQsIi4vbW9kdWxlcy9lczYuc3RyaW5nLnN1cCI6MzU1LCIuL21vZHVsZXMvZXM2LnN0cmluZy50cmltIjozNTYsIi4vbW9kdWxlcy9lczYuc3ltYm9sIjozNTcsIi4vbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyIjozNTgsIi4vbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3IjozNTksIi4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheSI6MzYwLCIuL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkiOjM2MSwiLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheSI6MzYyLCIuL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5IjozNjMsIi4vbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheSI6MzY0LCIuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheSI6MzY1LCIuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheSI6MzY2LCIuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5IjozNjcsIi4vbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheSI6MzY4LCIuL21vZHVsZXMvZXM2LndlYWstbWFwIjozNjksIi4vbW9kdWxlcy9lczYud2Vhay1zZXQiOjM3MCwiLi9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcyI6MzcxLCIuL21vZHVsZXMvZXM3LmFzYXAiOjM3MiwiLi9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvciI6MzczLCIuL21vZHVsZXMvZXM3Lm1hcC50by1qc29uIjozNzQsIi4vbW9kdWxlcy9lczcubWF0aC5pYWRkaCI6Mzc1LCIuL21vZHVsZXMvZXM3Lm1hdGguaW11bGgiOjM3NiwiLi9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoIjozNzcsIi4vbW9kdWxlcy9lczcubWF0aC51bXVsaCI6Mzc4LCIuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtZ2V0dGVyIjozNzksIi4vbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXIiOjM4MCwiLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcyI6MzgxLCIuL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzIjozODIsIi4vbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXIiOjM4MywiLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlciI6Mzg0LCIuL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMiOjM4NSwiLi9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlIjozODYsIi4vbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEiOjM4NywiLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YSI6Mzg4LCIuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhIjozOTAsIi4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEta2V5cyI6Mzg5LCIuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YSI6MzkyLCIuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzIjozOTEsIi4vbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEiOjM5MywiLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEiOjM5NCwiLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhIjozOTUsIi4vbW9kdWxlcy9lczcuc2V0LnRvLWpzb24iOjM5NiwiLi9tb2R1bGVzL2VzNy5zdHJpbmcuYXQiOjM5NywiLi9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsIjozOTgsIi4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQiOjM5OSwiLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0Ijo0MDAsIi4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdCI6NDAxLCIuL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0Ijo0MDIsIi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yIjo0MDMsIi4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUiOjQwNCwiLi9tb2R1bGVzL2VzNy5zeXN0ZW0uZ2xvYmFsIjo0MDUsIi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlIjo0MDYsIi4vbW9kdWxlcy93ZWIuaW1tZWRpYXRlIjo0MDcsIi4vbW9kdWxlcy93ZWIudGltZXJzIjo0MDh9XSw0MTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXIKdmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9OwoKLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0Ci8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpcwovLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhCi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuCgp2YXIgY2FjaGVkU2V0VGltZW91dDsKdmFyIGNhY2hlZENsZWFyVGltZW91dDsKCihmdW5jdGlvbiAoKSB7CiAgICB0cnkgewogICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0OwogICAgfSBjYXRjaCAoZSkgewogICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBpcyBub3QgZGVmaW5lZCcpOwogICAgICAgIH0KICAgIH0KICAgIHRyeSB7CiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0OwogICAgfSBjYXRjaCAoZSkgewogICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaXMgbm90IGRlZmluZWQnKTsKICAgICAgICB9CiAgICB9Cn0gKCkpCmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7CiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkgewogICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7CiAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTsKICAgIH0KfQpmdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7CiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHsKICAgICAgICBjbGVhclRpbWVvdXQobWFya2VyKTsKICAgIH0gZWxzZSB7CiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTsKICAgIH0KfQp2YXIgcXVldWUgPSBbXTsKdmFyIGRyYWluaW5nID0gZmFsc2U7CnZhciBjdXJyZW50UXVldWU7CnZhciBxdWV1ZUluZGV4ID0gLTE7CgpmdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7CiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHsKICAgICAgICByZXR1cm47CiAgICB9CiAgICBkcmFpbmluZyA9IGZhbHNlOwogICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHsKICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpOwogICAgfSBlbHNlIHsKICAgICAgICBxdWV1ZUluZGV4ID0gLTE7CiAgICB9CiAgICBpZiAocXVldWUubGVuZ3RoKSB7CiAgICAgICAgZHJhaW5RdWV1ZSgpOwogICAgfQp9CgpmdW5jdGlvbiBkcmFpblF1ZXVlKCkgewogICAgaWYgKGRyYWluaW5nKSB7CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7CiAgICBkcmFpbmluZyA9IHRydWU7CgogICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDsKICAgIHdoaWxlKGxlbikgewogICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlOwogICAgICAgIHF1ZXVlID0gW107CiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikgewogICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7CiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcXVldWVJbmRleCA9IC0xOwogICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDsKICAgIH0KICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7CiAgICBkcmFpbmluZyA9IGZhbHNlOwogICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpOwp9Cgpwcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikgewogICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpOwogICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7CiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07CiAgICAgICAgfQogICAgfQogICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTsKICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7CiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTsKICAgIH0KfTsKCi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHMKZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7CiAgICB0aGlzLmZ1biA9IGZ1bjsKICAgIHRoaXMuYXJyYXkgPSBhcnJheTsKfQpJdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTsKfTsKcHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJzsKcHJvY2Vzcy5icm93c2VyID0gdHJ1ZTsKcHJvY2Vzcy5lbnYgPSB7fTsKcHJvY2Vzcy5hcmd2ID0gW107CnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlcwpwcm9jZXNzLnZlcnNpb25zID0ge307CgpmdW5jdGlvbiBub29wKCkge30KCnByb2Nlc3Mub24gPSBub29wOwpwcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDsKcHJvY2Vzcy5vbmNlID0gbm9vcDsKcHJvY2Vzcy5vZmYgPSBub29wOwpwcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDsKcHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wOwpwcm9jZXNzLmVtaXQgPSBub29wOwoKcHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHsKICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTsKfTsKCnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07CnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpOwp9Owpwcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9OwoKfSx7fV0sNDExOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCl7Ci8qKgogKiBDb3B5cmlnaHQgKGMpIDIwMTQsIEZhY2Vib29rLCBJbmMuCiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqCiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZQogKiBodHRwczovL3Jhdy5naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL21hc3Rlci9MSUNFTlNFIGZpbGUuIEFuCiAqIGFkZGl0aW9uYWwgZ3JhbnQgb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbgogKiB0aGUgc2FtZSBkaXJlY3RvcnkuCiAqLwoKIShmdW5jdGlvbihnbG9iYWwpIHsKICAidXNlIHN0cmljdCI7CgogIHZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5OwogIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLgogIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiA/IFN5bWJvbCA6IHt9OwogIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgIkBAaXRlcmF0b3IiOwogIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgIkBAdG9TdHJpbmdUYWciOwoKICB2YXIgaW5Nb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09PSAib2JqZWN0IjsKICB2YXIgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWU7CiAgaWYgKHJ1bnRpbWUpIHsKICAgIGlmIChpbk1vZHVsZSkgewogICAgICAvLyBJZiByZWdlbmVyYXRvclJ1bnRpbWUgaXMgZGVmaW5lZCBnbG9iYWxseSBhbmQgd2UncmUgaW4gYSBtb2R1bGUsCiAgICAgIC8vIG1ha2UgdGhlIGV4cG9ydHMgb2JqZWN0IGlkZW50aWNhbCB0byByZWdlbmVyYXRvclJ1bnRpbWUuCiAgICAgIG1vZHVsZS5leHBvcnRzID0gcnVudGltZTsKICAgIH0KICAgIC8vIERvbid0IGJvdGhlciBldmFsdWF0aW5nIHRoZSByZXN0IG9mIHRoaXMgZmlsZSBpZiB0aGUgcnVudGltZSB3YXMKICAgIC8vIGFscmVhZHkgZGVmaW5lZCBnbG9iYWxseS4KICAgIHJldHVybjsKICB9CgogIC8vIERlZmluZSB0aGUgcnVudGltZSBnbG9iYWxseSAoYXMgZXhwZWN0ZWQgYnkgZ2VuZXJhdGVkIGNvZGUpIGFzIGVpdGhlcgogIC8vIG1vZHVsZS5leHBvcnRzIChpZiB3ZSdyZSBpbiBhIG1vZHVsZSkgb3IgYSBuZXcsIGVtcHR5IG9iamVjdC4KICBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZSA9IGluTW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgOiB7fTsKCiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkgewogICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci4KICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKChvdXRlckZuIHx8IEdlbmVyYXRvcikucHJvdG90eXBlKTsKICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pOwoKICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCwKICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy4KICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTsKCiAgICByZXR1cm4gZ2VuZXJhdG9yOwogIH0KICBydW50aW1lLndyYXAgPSB3cmFwOwoKICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb24KICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGQKICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmUKICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlCiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZAogIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmcKICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZQogIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZQogIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2gKICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuCiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7CiAgICB0cnkgewogICAgICByZXR1cm4geyB0eXBlOiAibm9ybWFsIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9OwogICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgIHJldHVybiB7IHR5cGU6ICJ0aHJvdyIsIGFyZzogZXJyIH07CiAgICB9CiAgfQoKICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9ICJzdXNwZW5kZWRTdGFydCI7CiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSAic3VzcGVuZGVkWWllbGQiOwogIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9ICJleGVjdXRpbmciOwogIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9ICJjb21wbGV0ZWQiOwoKICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzCiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LgogIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307CgogIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZAogIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvcgogIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyCiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy4KICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fQogIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge30KICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9CgogIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9IEdlbmVyYXRvci5wcm90b3R5cGU7CiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTsKICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uOwogIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9IEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gIkdlbmVyYXRvckZ1bmN0aW9uIjsKCiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGUKICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLgogIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHsKICAgIFsibmV4dCIsICJ0aHJvdyIsICJyZXR1cm4iXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkgewogICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykgewogICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpOwogICAgICB9OwogICAgfSk7CiAgfQoKICBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHsKICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gImZ1bmN0aW9uIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7CiAgICByZXR1cm4gY3RvcgogICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8CiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhbgogICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS4KICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSAiR2VuZXJhdG9yRnVuY3Rpb24iCiAgICAgIDogZmFsc2U7CiAgfTsKCiAgcnVudGltZS5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7CiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7CiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTsKICAgIH0gZWxzZSB7CiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTsKICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkgewogICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSAiR2VuZXJhdG9yRnVuY3Rpb24iOwogICAgICB9CiAgICB9CiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7CiAgICByZXR1cm4gZ2VuRnVuOwogIH07CgogIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0bwogIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0CiAgLy8gYHZhbHVlIGluc3RhbmNlb2YgQXdhaXRBcmd1bWVudGAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzCiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC4gU29tZSBtYXkgY29uc2lkZXIgdGhlIG5hbWUgb2YgdGhpcyBtZXRob2QgdG9vCiAgLy8gY3V0ZXN5LCBidXQgdGhleSBhcmUgY3VybXVkZ2VvbnMuCiAgcnVudGltZS5hd3JhcCA9IGZ1bmN0aW9uKGFyZykgewogICAgcmV0dXJuIG5ldyBBd2FpdEFyZ3VtZW50KGFyZyk7CiAgfTsKCiAgZnVuY3Rpb24gQXdhaXRBcmd1bWVudChhcmcpIHsKICAgIHRoaXMuYXJnID0gYXJnOwogIH0KCiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHsKICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpOwogICAgICBpZiAocmVjb3JkLnR5cGUgPT09ICJ0aHJvdyIpIHsKICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7CiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlOwogICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEF3YWl0QXJndW1lbnQpIHsKICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuYXJnKS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgIGludm9rZSgibmV4dCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpOwogICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7CiAgICAgICAgICAgIGludm9rZSgidGhyb3ciLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7CiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7CiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lcwogICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlCiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi4gSWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIGhvd2V2ZXIsIHRoZQogICAgICAgICAgLy8gcmVzdWx0IGZvciB0aGlzIGl0ZXJhdGlvbiB3aWxsIGJlIHJlamVjdGVkIHdpdGggdGhlIHNhbWUKICAgICAgICAgIC8vIHJlYXNvbi4gTm90ZSB0aGF0IHJlamVjdGlvbnMgb2YgeWllbGRlZCBQcm9taXNlcyBhcmUgbm90CiAgICAgICAgICAvLyB0aHJvd24gYmFjayBpbnRvIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIGFzIGlzIHRoZSBjYXNlCiAgICAgICAgICAvLyB3aGVuIGFuIGF3YWl0ZWQgUHJvbWlzZSBpcyByZWplY3RlZC4gVGhpcyBkaWZmZXJlbmNlIGluCiAgICAgICAgICAvLyBiZWhhdmlvciBiZXR3ZWVuIHlpZWxkIGFuZCBhd2FpdCBpcyBpbXBvcnRhbnQsIGJlY2F1c2UgaXQKICAgICAgICAgIC8vIGFsbG93cyB0aGUgY29uc3VtZXIgdG8gZGVjaWRlIHdoYXQgdG8gZG8gd2l0aCB0aGUgeWllbGRlZAogICAgICAgICAgLy8gcmVqZWN0aW9uIChzd2FsbG93IGl0IGFuZCBjb250aW51ZSwgbWFudWFsbHkgLnRocm93IGl0IGJhY2sKICAgICAgICAgIC8vIGludG8gdGhlIGdlbmVyYXRvciwgYWJhbmRvbiBpdGVyYXRpb24sIHdoYXRldmVyKS4gV2l0aAogICAgICAgICAgLy8gYXdhaXQsIGJ5IGNvbnRyYXN0LCB0aGVyZSBpcyBubyBvcHBvcnR1bml0eSB0byBleGFtaW5lIHRoZQogICAgICAgICAgLy8gcmVqZWN0aW9uIHJlYXNvbiBvdXRzaWRlIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIHNvIHRoZQogICAgICAgICAgLy8gb25seSBvcHRpb24gaXMgdG8gdGhyb3cgaXQgZnJvbSB0aGUgYXdhaXQgZXhwcmVzc2lvbiwgYW5kCiAgICAgICAgICAvLyBsZXQgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiBoYW5kbGUgdGhlIGV4Y2VwdGlvbi4KICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDsKICAgICAgICAgIHJlc29sdmUocmVzdWx0KTsKICAgICAgICB9LCByZWplY3QpOwogICAgICB9CiAgICB9CgogICAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSAib2JqZWN0IiAmJiBwcm9jZXNzLmRvbWFpbikgewogICAgICBpbnZva2UgPSBwcm9jZXNzLmRvbWFpbi5iaW5kKGludm9rZSk7CiAgICB9CgogICAgdmFyIHByZXZpb3VzUHJvbWlzZTsKCiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7CiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkgewogICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9CiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbAogICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLAogICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWYKICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0bwogICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLAogICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvCiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eQogICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzCiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHkKICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZQogICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5CiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLgogICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKAogICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsCiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlcgogICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLgogICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcKICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTsKICAgIH0KCiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LAogICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuCiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlOwogIH0KCiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTsKCiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZgogIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZgogIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLgogIHJ1bnRpbWUuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkgewogICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcigKICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkKICAgICk7CgogICAgcmV0dXJuIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKQogICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLgogICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7CiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTsKICAgICAgICB9KTsKICB9OwoKICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHsKICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7CgogICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykgewogICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nIik7CiAgICAgIH0KCiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHsKICAgICAgICBpZiAobWV0aG9kID09PSAidGhyb3ciKSB7CiAgICAgICAgICB0aHJvdyBhcmc7CiAgICAgICAgfQoKICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOgogICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWUKICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpOwogICAgICB9CgogICAgICB3aGlsZSAodHJ1ZSkgewogICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7CiAgICAgICAgaWYgKGRlbGVnYXRlKSB7CiAgICAgICAgICBpZiAobWV0aG9kID09PSAicmV0dXJuIiB8fAogICAgICAgICAgICAgIChtZXRob2QgPT09ICJ0aHJvdyIgJiYgZGVsZWdhdGUuaXRlcmF0b3JbbWV0aG9kXSA9PT0gdW5kZWZpbmVkKSkgewogICAgICAgICAgICAvLyBBIHJldHVybiBvciB0aHJvdyAod2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIHRocm93CiAgICAgICAgICAgIC8vIG1ldGhvZCkgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLgogICAgICAgICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDsKCiAgICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGEKICAgICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLgogICAgICAgICAgICB2YXIgcmV0dXJuTWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbInJldHVybiJdOwogICAgICAgICAgICBpZiAocmV0dXJuTWV0aG9kKSB7CiAgICAgICAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKHJldHVybk1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGFyZyk7CiAgICAgICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSAidGhyb3ciKSB7CiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgcmV0dXJuIG1ldGhvZCB0aHJldyBhbiBleGNlcHRpb24sIGxldCB0aGF0CiAgICAgICAgICAgICAgICAvLyBleGNlcHRpb24gcHJldmFpbCBvdmVyIHRoZSBvcmlnaW5hbCByZXR1cm4gb3IgdGhyb3cuCiAgICAgICAgICAgICAgICBtZXRob2QgPSAidGhyb3ciOwogICAgICAgICAgICAgICAgYXJnID0gcmVjb3JkLmFyZzsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKG1ldGhvZCA9PT0gInJldHVybiIpIHsKICAgICAgICAgICAgICAvLyBDb250aW51ZSB3aXRoIHRoZSBvdXRlciByZXR1cm4sIG5vdyB0aGF0IHRoZSBkZWxlZ2F0ZQogICAgICAgICAgICAgIC8vIGl0ZXJhdG9yIGhhcyBiZWVuIHRlcm1pbmF0ZWQuCiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goCiAgICAgICAgICAgIGRlbGVnYXRlLml0ZXJhdG9yW21ldGhvZF0sCiAgICAgICAgICAgIGRlbGVnYXRlLml0ZXJhdG9yLAogICAgICAgICAgICBhcmcKICAgICAgICAgICk7CgogICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSAidGhyb3ciKSB7CiAgICAgICAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsOwoKICAgICAgICAgICAgLy8gTGlrZSByZXR1cm5pbmcgZ2VuZXJhdG9yLnRocm93KHVuY2F1Z2h0KSwgYnV0IHdpdGhvdXQgdGhlCiAgICAgICAgICAgIC8vIG92ZXJoZWFkIG9mIGFuIGV4dHJhIGZ1bmN0aW9uIGNhbGwuCiAgICAgICAgICAgIG1ldGhvZCA9ICJ0aHJvdyI7CiAgICAgICAgICAgIGFyZyA9IHJlY29yZC5hcmc7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIERlbGVnYXRlIGdlbmVyYXRvciByYW4gYW5kIGhhbmRsZWQgaXRzIG93biBleGNlcHRpb25zIHNvCiAgICAgICAgICAvLyByZWdhcmRsZXNzIG9mIHdoYXQgdGhlIG1ldGhvZCB3YXMsIHdlIGNvbnRpbnVlIGFzIGlmIGl0IGlzCiAgICAgICAgICAvLyAibmV4dCIgd2l0aCBhbiB1bmRlZmluZWQgYXJnLgogICAgICAgICAgbWV0aG9kID0gIm5leHQiOwogICAgICAgICAgYXJnID0gdW5kZWZpbmVkOwoKICAgICAgICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZzsKICAgICAgICAgIGlmIChpbmZvLmRvbmUpIHsKICAgICAgICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7CiAgICAgICAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7CiAgICAgICAgICAgIHJldHVybiBpbmZvOwogICAgICAgICAgfQoKICAgICAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsOwogICAgICAgIH0KCiAgICAgICAgaWYgKG1ldGhvZCA9PT0gIm5leHQiKSB7CiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3MKICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uCiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gYXJnOwoKICAgICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gInRocm93IikgewogICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7CiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7CiAgICAgICAgICAgIHRocm93IGFyZzsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihhcmcpKSB7CiAgICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssCiAgICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuCiAgICAgICAgICAgIG1ldGhvZCA9ICJuZXh0IjsKICAgICAgICAgICAgYXJnID0gdW5kZWZpbmVkOwogICAgICAgICAgfQoKICAgICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gInJldHVybiIpIHsKICAgICAgICAgIGNvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBhcmcpOwogICAgICAgIH0KCiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZzsKCiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpOwogICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gIm5vcm1hbCIpIHsKICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT0KICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi4KICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lCiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWQKICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkOwoKICAgICAgICAgIHZhciBpbmZvID0gewogICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZywKICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lCiAgICAgICAgICB9OwoKICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7CiAgICAgICAgICAgIGlmIChjb250ZXh0LmRlbGVnYXRlICYmIG1ldGhvZCA9PT0gIm5leHQiKSB7CiAgICAgICAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3QKICAgICAgICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuCiAgICAgICAgICAgICAgYXJnID0gdW5kZWZpbmVkOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gaW5mbzsKICAgICAgICAgIH0KCiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gInRocm93IikgewogICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDsKICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGUKICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oYXJnKSBjYWxsIGFib3ZlLgogICAgICAgICAgbWV0aG9kID0gInRocm93IjsKICAgICAgICAgIGFyZyA9IHJlY29yZC5hcmc7CiAgICAgICAgfQogICAgICB9CiAgICB9OwogIH0KCiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGUKICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuCiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTsKCiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gdGhpczsKICB9OwoKICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSAiR2VuZXJhdG9yIjsKCiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiAiW29iamVjdCBHZW5lcmF0b3JdIjsKICB9OwoKICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykgewogICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTsKCiAgICBpZiAoMSBpbiBsb2NzKSB7CiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTsKICAgIH0KCiAgICBpZiAoMiBpbiBsb2NzKSB7CiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdOwogICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107CiAgICB9CgogICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpOwogIH0KCiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkgewogICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307CiAgICByZWNvcmQudHlwZSA9ICJub3JtYWwiOwogICAgZGVsZXRlIHJlY29yZC5hcmc7CiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkOwogIH0KCiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkgewogICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoCiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tCiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuCiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6ICJyb290IiB9XTsKICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTsKICAgIHRoaXMucmVzZXQodHJ1ZSk7CiAgfQoKICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHsKICAgIHZhciBrZXlzID0gW107CiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7CiAgICAgIGtleXMucHVzaChrZXkpOwogICAgfQogICAga2V5cy5yZXZlcnNlKCk7CgogICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXAKICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuCiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHsKICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7CiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7CiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHsKICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7CiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTsKICAgICAgICAgIHJldHVybiBuZXh0OwogICAgICAgIH0KICAgICAgfQoKICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlCiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzCiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLgogICAgICBuZXh0LmRvbmUgPSB0cnVlOwogICAgICByZXR1cm4gbmV4dDsKICAgIH07CiAgfTsKCiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7CiAgICBpZiAoaXRlcmFibGUpIHsKICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdOwogICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHsKICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7CiAgICAgIH0KCiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gImZ1bmN0aW9uIikgewogICAgICAgIHJldHVybiBpdGVyYWJsZTsKICAgICAgfQoKICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7CiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7CiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7CiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHsKICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07CiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7CiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkOwogICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTsKCiAgICAgICAgICByZXR1cm4gbmV4dDsKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDsKICAgICAgfQogICAgfQoKICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy4KICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTsKICB9CiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7CgogIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7CiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07CiAgfQoKICBDb250ZXh0LnByb3RvdHlwZSA9IHsKICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LAoKICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7CiAgICAgIHRoaXMucHJldiA9IDA7CiAgICAgIHRoaXMubmV4dCA9IDA7CiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzCiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uCiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7CiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlOwogICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDsKCiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpOwoKICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7CiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7CiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOgogICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSAidCIgJiYKICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJgogICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHsKICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCgogICAgc3RvcDogZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMuZG9uZSA9IHRydWU7CgogICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdOwogICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uOwogICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSAidGhyb3ciKSB7CiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzLnJ2YWw7CiAgICB9LAoKICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHsKICAgICAgaWYgKHRoaXMuZG9uZSkgewogICAgICAgIHRocm93IGV4Y2VwdGlvbjsKICAgICAgfQoKICAgICAgdmFyIGNvbnRleHQgPSB0aGlzOwogICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHsKICAgICAgICByZWNvcmQudHlwZSA9ICJ0aHJvdyI7CiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjsKICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7CiAgICAgICAgcmV0dXJuICEhY2F1Z2h0OwogICAgICB9CgogICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7CiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldOwogICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uOwoKICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSAicm9vdCIpIHsKICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlCiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG8KICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uCiAgICAgICAgICByZXR1cm4gaGFuZGxlKCJlbmQiKTsKICAgICAgICB9CgogICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7CiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgImNhdGNoTG9jIik7CiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCAiZmluYWxseUxvYyIpOwoKICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7CiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykgewogICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHsKICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpOwogICAgICAgICAgICB9CgogICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkgewogICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHsKICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTsKICAgICAgICAgICAgfQoKICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkgewogICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykgewogICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5Iik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAoKICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7CiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHsKICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07CiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiYKICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksICJmaW5hbGx5TG9jIikgJiYKICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykgewogICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5OwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAoZmluYWxseUVudHJ5ICYmCiAgICAgICAgICAodHlwZSA9PT0gImJyZWFrIiB8fAogICAgICAgICAgIHR5cGUgPT09ICJjb250aW51ZSIpICYmCiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJgogICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7CiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYQogICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay4KICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsOwogICAgICB9CgogICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTsKICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlOwogICAgICByZWNvcmQuYXJnID0gYXJnOwoKICAgICAgaWYgKGZpbmFsbHlFbnRyeSkgewogICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuY29tcGxldGUocmVjb3JkKTsKICAgICAgfQoKICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7CiAgICB9LAoKICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7CiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gInRocm93IikgewogICAgICAgIHRocm93IHJlY29yZC5hcmc7CiAgICAgIH0KCiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gImJyZWFrIiB8fAogICAgICAgICAgcmVjb3JkLnR5cGUgPT09ICJjb250aW51ZSIpIHsKICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnOwogICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSAicmV0dXJuIikgewogICAgICAgIHRoaXMucnZhbCA9IHJlY29yZC5hcmc7CiAgICAgICAgdGhpcy5uZXh0ID0gImVuZCI7CiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09ICJub3JtYWwiICYmIGFmdGVyTG9jKSB7CiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7CiAgICAgIH0KICAgIH0sCgogICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7CiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHsKICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07CiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHsKICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpOwogICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7CiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCgogICAgImNhdGNoIjogZnVuY3Rpb24odHJ5TG9jKSB7CiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHsKICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07CiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7CiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjsKICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gInRocm93IikgewogICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZzsKICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdGhyb3duOwogICAgICAgIH0KICAgICAgfQoKICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uCiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay4KICAgICAgdGhyb3cgbmV3IEVycm9yKCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHQiKTsKICAgIH0sCgogICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHsKICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHsKICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSwKICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLAogICAgICAgIG5leHRMb2M6IG5leHRMb2MKICAgICAgfTsKCiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsOwogICAgfQogIH07Cn0pKAogIC8vIEFtb25nIHRoZSB2YXJpb3VzIHRyaWNrcyBmb3Igb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwKICAvLyBvYmplY3QsIHRoaXMgc2VlbXMgdG8gYmUgdGhlIG1vc3QgcmVsaWFibGUgdGVjaG5pcXVlIHRoYXQgZG9lcyBub3QKICAvLyB1c2UgaW5kaXJlY3QgZXZhbCAod2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kpLgogIHR5cGVvZiBnbG9iYWwgPT09ICJvYmplY3QiID8gZ2xvYmFsIDoKICB0eXBlb2Ygd2luZG93ID09PSAib2JqZWN0IiA/IHdpbmRvdyA6CiAgdHlwZW9mIHNlbGYgPT09ICJvYmplY3QiID8gc2VsZiA6IHRoaXMKKTsKCn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpLHR5cGVvZiBnbG9iYWwgIT09ICJ1bmRlZmluZWQiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pCgp9LHsiX3Byb2Nlc3MiOjQxMH1dLDQxMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAoZ2xvYmFsKXsKLyoqCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBCiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQKKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wKKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVgoqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcKKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUKKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTgoqCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAoqCiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKKgoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KKiovCgovLyBEaXN0cmlidXRpb24gZmlsZSBmb3IgTWVzc2FnZUZhY3RvcnkuanMgCi8vIHZlcnNpb246IDAuMy4wCi8vIExhc3QgYnVpbGQ6IFRodSBKdWwgMjEgMjAxNiAxNTozMToyNCBHTVQrMDEwMCAoV0VTVCkKCiFmdW5jdGlvbihlKXtpZigib2JqZWN0Ij09dHlwZW9mIGV4cG9ydHMmJiJ1bmRlZmluZWQiIT10eXBlb2YgbW9kdWxlKW1vZHVsZS5leHBvcnRzPWUoKTtlbHNlIGlmKCJmdW5jdGlvbiI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQpZGVmaW5lKFtdLGUpO2Vsc2V7dmFyIHQ7dD0idW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6InVuZGVmaW5lZCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOiJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMsdC5NZXNzYWdlRmFjdG9yeT1lKCl9fShmdW5jdGlvbigpe3ZhciBlO3JldHVybiBmdW5jdGlvbiB0KGUscixuKXtmdW5jdGlvbiBvKGEscyl7aWYoIXJbYV0pe2lmKCFlW2FdKXt2YXIgdT0iZnVuY3Rpb24iPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighcyYmdSlyZXR1cm4gdShhLCEwKTtpZihpKXJldHVybiBpKGEsITApO3ZhciBsPW5ldyBFcnJvcigiQ2Fubm90IGZpbmQgbW9kdWxlICciK2ErIiciKTt0aHJvdyBsLmNvZGU9Ik1PRFVMRV9OT1RfRk9VTkQiLGx9dmFyIGM9clthXT17ZXhwb3J0czp7fX07ZVthXVswXS5jYWxsKGMuZXhwb3J0cyxmdW5jdGlvbih0KXt2YXIgcj1lW2FdWzFdW3RdO3JldHVybiBvKHI/cjp0KX0sYyxjLmV4cG9ydHMsdCxlLHIsbil9cmV0dXJuIHJbYV0uZXhwb3J0c31mb3IodmFyIGk9ImZ1bmN0aW9uIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsYT0wO2E8bi5sZW5ndGg7YSsrKW8oblthXSk7cmV0dXJuIG99KHsxOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXsiZGVmYXVsdCI6ZSgiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUiKSxfX2VzTW9kdWxlOiEwfX0seyJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZSI6MTd9XSwyOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXsiZGVmYXVsdCI6ZSgiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHkiKSxfX2VzTW9kdWxlOiEwfX0seyJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2RlZmluZS1wcm9wZXJ0eSI6MTh9XSwzOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXsiZGVmYXVsdCI6ZSgiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9mcmVlemUiKSxfX2VzTW9kdWxlOiEwfX0seyJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2ZyZWV6ZSI6MTl9XSw0OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXsiZGVmYXVsdCI6ZSgiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IiKSxfX2VzTW9kdWxlOiEwfX0seyJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvciI6MjB9XSw1OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXsiZGVmYXVsdCI6ZSgiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtcHJvdG90eXBlLW9mIiksX19lc01vZHVsZTohMH19LHsiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtcHJvdG90eXBlLW9mIjoyMX1dLDY6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9eyJkZWZhdWx0IjplKCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2tleXMiKSxfX2VzTW9kdWxlOiEwfX0seyJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2tleXMiOjIyfV0sNzpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17ImRlZmF1bHQiOmUoImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZiIpLF9fZXNNb2R1bGU6ITB9fSx7ImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZiI6MjN9XSw4OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXsiZGVmYXVsdCI6ZSgiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbCIpLF9fZXNNb2R1bGU6ITB9fSx7ImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wiOjI0fV0sOTpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17ImRlZmF1bHQiOmUoImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3IiKSxfX2VzTW9kdWxlOiEwfX0seyJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yIjoyNX1dLDEwOltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3IuX19lc01vZHVsZT0hMCxyWyJkZWZhdWx0Il09ZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX19LHt9XSwxMTpbZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ImRlZmF1bHQiOmV9fXIuX19lc01vZHVsZT0hMDt2YXIgbz1lKCIuLi9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHkiKSxpPW4obyk7clsiZGVmYXVsdCJdPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgbj10W3JdO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLCJ2YWx1ZSJpbiBuJiYobi53cml0YWJsZT0hMCksKDAsaVsiZGVmYXVsdCJdKShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiByJiZlKHQucHJvdG90eXBlLHIpLG4mJmUodCxuKSx0fX0oKX0seyIuLi9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHkiOjJ9XSwxMjpbZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ImRlZmF1bHQiOmV9fXIuX19lc01vZHVsZT0hMDt2YXIgbz1lKCIuLi9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mIiksaT1uKG8pLGE9ZSgiLi4vY29yZS1qcy9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yIikscz1uKGEpO3JbImRlZmF1bHQiXT1mdW5jdGlvbiB1KGUsdCxyKXtudWxsPT09ZSYmKGU9RnVuY3Rpb24ucHJvdG90eXBlKTt2YXIgbj0oMCxzWyJkZWZhdWx0Il0pKGUsdCk7aWYodm9pZCAwPT09bil7dmFyIG89KDAsaVsiZGVmYXVsdCJdKShlKTtyZXR1cm4gbnVsbD09PW8/dm9pZCAwOnUobyx0LHIpfWlmKCJ2YWx1ZSJpbiBuKXJldHVybiBuLnZhbHVlO3ZhciBhPW4uZ2V0O2lmKHZvaWQgMCE9PWEpcmV0dXJuIGEuY2FsbChyKX19LHsiLi4vY29yZS1qcy9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yIjo0LCIuLi9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mIjo1fV0sMTM6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6eyJkZWZhdWx0IjplfX1yLl9fZXNNb2R1bGU9ITA7dmFyIG89ZSgiLi4vY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZiIpLGk9bihvKSxhPWUoIi4uL2NvcmUtanMvb2JqZWN0L2NyZWF0ZSIpLHM9bihhKSx1PWUoIi4uL2hlbHBlcnMvdHlwZW9mIiksbD1uKHUpO3JbImRlZmF1bHQiXT1mdW5jdGlvbihlLHQpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICIrKCJ1bmRlZmluZWQiPT10eXBlb2YgdD8idW5kZWZpbmVkIjooMCxsWyJkZWZhdWx0Il0pKHQpKSk7ZS5wcm90b3R5cGU9KDAsc1siZGVmYXVsdCJdKSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKGlbImRlZmF1bHQiXT8oMCxpWyJkZWZhdWx0Il0pKGUsdCk6ZS5fX3Byb3RvX189dCl9fSx7Ii4uL2NvcmUtanMvb2JqZWN0L2NyZWF0ZSI6MSwiLi4vY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZiI6NywiLi4vaGVscGVycy90eXBlb2YiOjE1fV0sMTQ6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6eyJkZWZhdWx0IjplfX1yLl9fZXNNb2R1bGU9ITA7dmFyIG89ZSgiLi4vaGVscGVycy90eXBlb2YiKSxpPW4obyk7clsiZGVmYXVsdCJdPWZ1bmN0aW9uKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTtyZXR1cm4hdHx8Im9iamVjdCIhPT0oInVuZGVmaW5lZCI9PXR5cGVvZiB0PyJ1bmRlZmluZWQiOigwLGlbImRlZmF1bHQiXSkodCkpJiYiZnVuY3Rpb24iIT10eXBlb2YgdD9lOnR9fSx7Ii4uL2hlbHBlcnMvdHlwZW9mIjoxNX1dLDE1OltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOnsiZGVmYXVsdCI6ZX19ci5fX2VzTW9kdWxlPSEwO3ZhciBvPWUoIi4uL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yIiksaT1uKG8pLGE9ZSgiLi4vY29yZS1qcy9zeW1ib2wiKSxzPW4oYSksdT0iZnVuY3Rpb24iPT10eXBlb2Ygc1siZGVmYXVsdCJdJiYic3ltYm9sIj09dHlwZW9mIGlbImRlZmF1bHQiXT9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiYiZnVuY3Rpb24iPT10eXBlb2Ygc1siZGVmYXVsdCJdJiZlLmNvbnN0cnVjdG9yPT09c1siZGVmYXVsdCJdPyJzeW1ib2wiOnR5cGVvZiBlfTtyWyJkZWZhdWx0Il09ImZ1bmN0aW9uIj09dHlwZW9mIHNbImRlZmF1bHQiXSYmInN5bWJvbCI9PT11KGlbImRlZmF1bHQiXSk/ZnVuY3Rpb24oZSl7cmV0dXJuInVuZGVmaW5lZCI9PXR5cGVvZiBlPyJ1bmRlZmluZWQiOnUoZSl9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiYiZnVuY3Rpb24iPT10eXBlb2Ygc1siZGVmYXVsdCJdJiZlLmNvbnN0cnVjdG9yPT09c1siZGVmYXVsdCJdPyJzeW1ib2wiOiJ1bmRlZmluZWQiPT10eXBlb2YgZT8idW5kZWZpbmVkIjp1KGUpfX0seyIuLi9jb3JlLWpzL3N5bWJvbCI6OCwiLi4vY29yZS1qcy9zeW1ib2wvaXRlcmF0b3IiOjl9XSwxNjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1lKCJyZWdlbmVyYXRvci1ydW50aW1lIil9LHsicmVnZW5lcmF0b3ItcnVudGltZSI6OTl9XSwxNzpbZnVuY3Rpb24oZSx0LHIpe2UoIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUiKTt2YXIgbj1lKCIuLi8uLi9tb2R1bGVzL19jb3JlIikuT2JqZWN0O3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybiBuLmNyZWF0ZShlLHQpfX0seyIuLi8uLi9tb2R1bGVzL19jb3JlIjozMSwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZSI6ODV9XSwxODpbZnVuY3Rpb24oZSx0LHIpe2UoIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkiKTt2YXIgbj1lKCIuLi8uLi9tb2R1bGVzL19jb3JlIikuT2JqZWN0O3QuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7cmV0dXJuIG4uZGVmaW5lUHJvcGVydHkoZSx0LHIpfX0seyIuLi8uLi9tb2R1bGVzL19jb3JlIjozMSwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eSI6ODZ9XSwxOTpbZnVuY3Rpb24oZSx0LHIpe2UoIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUiKSx0LmV4cG9ydHM9ZSgiLi4vLi4vbW9kdWxlcy9fY29yZSIpLk9iamVjdC5mcmVlemV9LHsiLi4vLi4vbW9kdWxlcy9fY29yZSI6MzEsIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUiOjg3fV0sMjA6W2Z1bmN0aW9uKGUsdCxyKXtlKCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yIik7dmFyIG49ZSgiLi4vLi4vbW9kdWxlcy9fY29yZSIpLk9iamVjdDt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbi5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSx0KX19LHsiLi4vLi4vbW9kdWxlcy9fY29yZSI6MzEsIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IiOjg4fV0sMjE6W2Z1bmN0aW9uKGUsdCxyKXtlKCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZiIpLHQuZXhwb3J0cz1lKCIuLi8uLi9tb2R1bGVzL19jb3JlIikuT2JqZWN0LmdldFByb3RvdHlwZU9mfSx7Ii4uLy4uL21vZHVsZXMvX2NvcmUiOjMxLCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZiI6ODl9XSwyMjpbZnVuY3Rpb24oZSx0LHIpe2UoIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzIiksdC5leHBvcnRzPWUoIi4uLy4uL21vZHVsZXMvX2NvcmUiKS5PYmplY3Qua2V5c30seyIuLi8uLi9tb2R1bGVzL19jb3JlIjozMSwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMiOjkwfV0sMjM6W2Z1bmN0aW9uKGUsdCxyKXtlKCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZiIpLHQuZXhwb3J0cz1lKCIuLi8uLi9tb2R1bGVzL19jb3JlIikuT2JqZWN0LnNldFByb3RvdHlwZU9mfSx7Ii4uLy4uL21vZHVsZXMvX2NvcmUiOjMxLCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZiI6OTF9XSwyNDpbZnVuY3Rpb24oZSx0LHIpe2UoIi4uLy4uL21vZHVsZXMvZXM2LnN5bWJvbCIpLGUoIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmciKSxlKCIuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IiKSxlKCIuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZSIpLHQuZXhwb3J0cz1lKCIuLi8uLi9tb2R1bGVzL19jb3JlIikuU3ltYm9sfSx7Ii4uLy4uL21vZHVsZXMvX2NvcmUiOjMxLCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nIjo5MiwiLi4vLi4vbW9kdWxlcy9lczYuc3ltYm9sIjo5NCwiLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yIjo5NSwiLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUiOjk2fV0sMjU6W2Z1bmN0aW9uKGUsdCxyKXtlKCIuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IiKSxlKCIuLi8uLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUiKSx0LmV4cG9ydHM9ZSgiLi4vLi4vbW9kdWxlcy9fd2tzLWV4dCIpLmYoIml0ZXJhdG9yIil9LHsiLi4vLi4vbW9kdWxlcy9fd2tzLWV4dCI6ODIsIi4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvciI6OTMsIi4uLy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZSI6OTd9XSwyNjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1mdW5jdGlvbihlKXtpZigiZnVuY3Rpb24iIT10eXBlb2YgZSl0aHJvdyBUeXBlRXJyb3IoZSsiIGlzIG5vdCBhIGZ1bmN0aW9uISIpO3JldHVybiBlfX0se31dLDI3OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWZ1bmN0aW9uKCl7fX0se31dLDI4OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9faXMtb2JqZWN0Iik7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKCFuKGUpKXRocm93IFR5cGVFcnJvcihlKyIgaXMgbm90IGFuIG9iamVjdCEiKTtyZXR1cm4gZX19LHsiLi9faXMtb2JqZWN0Ijo0N31dLDI5OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fdG8taW9iamVjdCIpLG89ZSgiLi9fdG8tbGVuZ3RoIiksaT1lKCIuL190by1pbmRleCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxyLGEpe3ZhciBzLHU9bih0KSxsPW8odS5sZW5ndGgpLGM9aShhLGwpO2lmKGUmJnIhPXIpe2Zvcig7bD5jOylpZihzPXVbYysrXSxzIT1zKXJldHVybiEwfWVsc2UgZm9yKDtsPmM7YysrKWlmKChlfHxjIGluIHUpJiZ1W2NdPT09cilyZXR1cm4gZXx8Y3x8MDtyZXR1cm4hZSYmLTF9fX0seyIuL190by1pbmRleCI6NzQsIi4vX3RvLWlvYmplY3QiOjc2LCIuL190by1sZW5ndGgiOjc3fV0sMzA6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj17fS50b1N0cmluZzt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG4uY2FsbChlKS5zbGljZSg4LC0xKX19LHt9XSwzMTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXQuZXhwb3J0cz17dmVyc2lvbjoiMi40LjAifTsibnVtYmVyIj09dHlwZW9mIF9fZSYmKF9fZT1uKX0se31dLDMyOltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fYS1mdW5jdGlvbiIpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7aWYobihlKSx2b2lkIDA9PT10KXJldHVybiBlO3N3aXRjaChyKXtjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKHIpe3JldHVybiBlLmNhbGwodCxyKX07Y2FzZSAyOnJldHVybiBmdW5jdGlvbihyLG4pe3JldHVybiBlLmNhbGwodCxyLG4pfTtjYXNlIDM6cmV0dXJuIGZ1bmN0aW9uKHIsbixvKXtyZXR1cm4gZS5jYWxsKHQscixuLG8pfX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZS5hcHBseSh0LGFyZ3VtZW50cyl9fX0seyIuL19hLWZ1bmN0aW9uIjoyNn1dLDMzOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKHZvaWQgMD09ZSl0aHJvdyBUeXBlRXJyb3IoIkNhbid0IGNhbGwgbWV0aG9kIG9uICAiK2UpO3JldHVybiBlfX0se31dLDM0OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPSFlKCIuL19mYWlscyIpKGZ1bmN0aW9uKCl7cmV0dXJuIDchPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwiYSIse2dldDpmdW5jdGlvbigpe3JldHVybiA3fX0pLmF9KX0seyIuL19mYWlscyI6Mzl9XSwzNTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2lzLW9iamVjdCIpLG89ZSgiLi9fZ2xvYmFsIikuZG9jdW1lbnQsaT1uKG8pJiZuKG8uY3JlYXRlRWxlbWVudCk7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBpP28uY3JlYXRlRWxlbWVudChlKTp7fX19LHsiLi9fZ2xvYmFsIjo0MCwiLi9faXMtb2JqZWN0Ijo0N31dLDM2OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPSJjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YiLnNwbGl0KCIsIil9LHt9XSwzNzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX29iamVjdC1rZXlzIiksbz1lKCIuL19vYmplY3QtZ29wcyIpLGk9ZSgiLi9fb2JqZWN0LXBpZSIpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD1uKGUpLHI9by5mO2lmKHIpZm9yKHZhciBhLHM9cihlKSx1PWkuZixsPTA7cy5sZW5ndGg+bDspdS5jYWxsKGUsYT1zW2wrK10pJiZ0LnB1c2goYSk7cmV0dXJuIHR9fSx7Ii4vX29iamVjdC1nb3BzIjo2MSwiLi9fb2JqZWN0LWtleXMiOjY0LCIuL19vYmplY3QtcGllIjo2NX1dLDM4OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fZ2xvYmFsIiksbz1lKCIuL19jb3JlIiksaT1lKCIuL19jdHgiKSxhPWUoIi4vX2hpZGUiKSxzPSJwcm90b3R5cGUiLHU9ZnVuY3Rpb24oZSx0LHIpe3ZhciBsLGMsZixwPWUmdS5GLGQ9ZSZ1LkcsaD1lJnUuUyx5PWUmdS5QLG09ZSZ1LkIsdj1lJnUuVyxfPWQ/bzpvW3RdfHwob1t0XT17fSksYj1fW3NdLGc9ZD9uOmg/blt0XTooblt0XXx8e30pW3NdO2QmJihyPXQpO2ZvcihsIGluIHIpYz0hcCYmZyYmdm9pZCAwIT09Z1tsXSxjJiZsIGluIF98fChmPWM/Z1tsXTpyW2xdLF9bbF09ZCYmImZ1bmN0aW9uIiE9dHlwZW9mIGdbbF0/cltsXTptJiZjP2koZixuKTp2JiZnW2xdPT1mP2Z1bmN0aW9uKGUpe3ZhciB0PWZ1bmN0aW9uKHQscixuKXtpZih0aGlzIGluc3RhbmNlb2YgZSl7c3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpe2Nhc2UgMDpyZXR1cm4gbmV3IGU7Y2FzZSAxOnJldHVybiBuZXcgZSh0KTtjYXNlIDI6cmV0dXJuIG5ldyBlKHQscil9cmV0dXJuIG5ldyBlKHQscixuKX1yZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O3JldHVybiB0W3NdPWVbc10sdH0oZik6eSYmImZ1bmN0aW9uIj09dHlwZW9mIGY/aShGdW5jdGlvbi5jYWxsLGYpOmYseSYmKChfLnZpcnR1YWx8fChfLnZpcnR1YWw9e30pKVtsXT1mLGUmdS5SJiZiJiYhYltsXSYmYShiLGwsZikpKX07dS5GPTEsdS5HPTIsdS5TPTQsdS5QPTgsdS5CPTE2LHUuVz0zMix1LlU9NjQsdS5SPTEyOCx0LmV4cG9ydHM9dX0seyIuL19jb3JlIjozMSwiLi9fY3R4IjozMiwiLi9fZ2xvYmFsIjo0MCwiLi9faGlkZSI6NDJ9XSwzOTpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1mdW5jdGlvbihlKXt0cnl7cmV0dXJuISFlKCl9Y2F0Y2godCl7cmV0dXJuITB9fX0se31dLDQwOltmdW5jdGlvbihlLHQscil7dmFyIG49dC5leHBvcnRzPSJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3cuTWF0aD09TWF0aD93aW5kb3c6InVuZGVmaW5lZCIhPXR5cGVvZiBzZWxmJiZzZWxmLk1hdGg9PU1hdGg/c2VsZjpGdW5jdGlvbigicmV0dXJuIHRoaXMiKSgpOyJudW1iZXIiPT10eXBlb2YgX19nJiYoX19nPW4pfSx7fV0sNDE6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj17fS5oYXNPd25Qcm9wZXJ0eTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbi5jYWxsKGUsdCl9fSx7fV0sNDI6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19vYmplY3QtZHAiKSxvPWUoIi4vX3Byb3BlcnR5LWRlc2MiKTt0LmV4cG9ydHM9ZSgiLi9fZGVzY3JpcHRvcnMiKT9mdW5jdGlvbihlLHQscil7cmV0dXJuIG4uZihlLHQsbygxLHIpKX06ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlW3RdPXIsZX19LHsiLi9fZGVzY3JpcHRvcnMiOjM0LCIuL19vYmplY3QtZHAiOjU2LCIuL19wcm9wZXJ0eS1kZXNjIjo2N31dLDQzOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWUoIi4vX2dsb2JhbCIpLmRvY3VtZW50JiZkb2N1bWVudC5kb2N1bWVudEVsZW1lbnR9LHsiLi9fZ2xvYmFsIjo0MH1dLDQ0OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPSFlKCIuL19kZXNjcmlwdG9ycyIpJiYhZSgiLi9fZmFpbHMiKShmdW5jdGlvbigpe3JldHVybiA3IT1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSgiLi9fZG9tLWNyZWF0ZSIpKCJkaXYiKSwiYSIse2dldDpmdW5jdGlvbigpe3JldHVybiA3fX0pLmF9KX0seyIuL19kZXNjcmlwdG9ycyI6MzQsIi4vX2RvbS1jcmVhdGUiOjM1LCIuL19mYWlscyI6Mzl9XSw0NTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2NvZiIpO3QuZXhwb3J0cz1PYmplY3QoInoiKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKT9PYmplY3Q6ZnVuY3Rpb24oZSl7cmV0dXJuIlN0cmluZyI9PW4oZSk/ZS5zcGxpdCgiIik6T2JqZWN0KGUpfX0seyIuL19jb2YiOjMwfV0sNDY6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19jb2YiKTt0LmV4cG9ydHM9QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24oZSl7cmV0dXJuIkFycmF5Ij09bihlKX19LHsiLi9fY29mIjozMH1dLDQ3OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiJvYmplY3QiPT10eXBlb2YgZT9udWxsIT09ZToiZnVuY3Rpb24iPT10eXBlb2YgZX19LHt9XSw0ODpbZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj1lKCIuL19vYmplY3QtY3JlYXRlIiksbz1lKCIuL19wcm9wZXJ0eS1kZXNjIiksaT1lKCIuL19zZXQtdG8tc3RyaW5nLXRhZyIpLGE9e307ZSgiLi9faGlkZSIpKGEsZSgiLi9fd2tzIikoIml0ZXJhdG9yIiksZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30pLHQuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7ZS5wcm90b3R5cGU9bihhLHtuZXh0Om8oMSxyKX0pLGkoZSx0KyIgSXRlcmF0b3IiKX19LHsiLi9faGlkZSI6NDIsIi4vX29iamVjdC1jcmVhdGUiOjU1LCIuL19wcm9wZXJ0eS1kZXNjIjo2NywiLi9fc2V0LXRvLXN0cmluZy10YWciOjcwLCIuL193a3MiOjgzfV0sNDk6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49ZSgiLi9fbGlicmFyeSIpLG89ZSgiLi9fZXhwb3J0IiksaT1lKCIuL19yZWRlZmluZSIpLGE9ZSgiLi9faGlkZSIpLHM9ZSgiLi9faGFzIiksdT1lKCIuL19pdGVyYXRvcnMiKSxsPWUoIi4vX2l0ZXItY3JlYXRlIiksYz1lKCIuL19zZXQtdG8tc3RyaW5nLXRhZyIpLGY9ZSgiLi9fb2JqZWN0LWdwbyIpLHA9ZSgiLi9fd2tzIikoIml0ZXJhdG9yIiksZD0hKFtdLmtleXMmJiJuZXh0ImluW10ua2V5cygpKSxoPSJAQGl0ZXJhdG9yIix5PSJrZXlzIixtPSJ2YWx1ZXMiLHY9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc307dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyLF8sYixnLEUpe2wocix0LF8pO3ZhciBqLHcsTyxNPWZ1bmN0aW9uKGUpe2lmKCFkJiZlIGluIFIpcmV0dXJuIFJbZV07c3dpdGNoKGUpe2Nhc2UgeTpyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHIodGhpcyxlKX07Y2FzZSBtOnJldHVybiBmdW5jdGlvbigpe3JldHVybiBuZXcgcih0aGlzLGUpfX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHIodGhpcyxlKX19LHg9dCsiIEl0ZXJhdG9yIixQPWI9PW0saz0hMSxSPWUucHJvdG90eXBlLFM9UltwXXx8UltoXXx8YiYmUltiXSxBPVN8fE0oYiksVD1iP1A/TSgiZW50cmllcyIpOkE6dm9pZCAwLE49IkFycmF5Ij09dD9SLmVudHJpZXN8fFM6UztpZihOJiYoTz1mKE4uY2FsbChuZXcgZSkpLE8hPT1PYmplY3QucHJvdG90eXBlJiYoYyhPLHgsITApLG58fHMoTyxwKXx8YShPLHAsdikpKSxQJiZTJiZTLm5hbWUhPT1tJiYoaz0hMCxBPWZ1bmN0aW9uKCl7cmV0dXJuIFMuY2FsbCh0aGlzKX0pLG4mJiFFfHwhZCYmIWsmJlJbcF18fGEoUixwLEEpLHVbdF09QSx1W3hdPXYsYilpZihqPXt2YWx1ZXM6UD9BOk0obSksa2V5czpnP0E6TSh5KSxlbnRyaWVzOlR9LEUpZm9yKHcgaW4gail3IGluIFJ8fGkoUix3LGpbd10pO2Vsc2UgbyhvLlArby5GKihkfHxrKSx0LGopO3JldHVybiBqfX0seyIuL19leHBvcnQiOjM4LCIuL19oYXMiOjQxLCIuL19oaWRlIjo0MiwiLi9faXRlci1jcmVhdGUiOjQ4LCIuL19pdGVyYXRvcnMiOjUxLCIuL19saWJyYXJ5Ijo1MywiLi9fb2JqZWN0LWdwbyI6NjIsIi4vX3JlZGVmaW5lIjo2OCwiLi9fc2V0LXRvLXN0cmluZy10YWciOjcwLCIuL193a3MiOjgzfV0sNTA6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm57dmFsdWU6dCxkb25lOiEhZX19fSx7fV0sNTE6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9e319LHt9XSw1MjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX29iamVjdC1rZXlzIiksbz1lKCIuL190by1pb2JqZWN0Iik7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByLGk9byhlKSxhPW4oaSkscz1hLmxlbmd0aCx1PTA7cz51OylpZihpW3I9YVt1KytdXT09PXQpcmV0dXJuIHJ9fSx7Ii4vX29iamVjdC1rZXlzIjo2NCwiLi9fdG8taW9iamVjdCI6NzZ9XSw1MzpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz0hMH0se31dLDU0OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fdWlkIikoIm1ldGEiKSxvPWUoIi4vX2lzLW9iamVjdCIpLGk9ZSgiLi9faGFzIiksYT1lKCIuL19vYmplY3QtZHAiKS5mLHM9MCx1PU9iamVjdC5pc0V4dGVuc2libGV8fGZ1bmN0aW9uKCl7cmV0dXJuITB9LGw9IWUoIi4vX2ZhaWxzIikoZnVuY3Rpb24oKXtyZXR1cm4gdShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKX0pLGM9ZnVuY3Rpb24oZSl7YShlLG4se3ZhbHVlOntpOiJPIisgKytzLHc6e319fSl9LGY9ZnVuY3Rpb24oZSx0KXtpZighbyhlKSlyZXR1cm4ic3ltYm9sIj09dHlwZW9mIGU/ZTooInN0cmluZyI9PXR5cGVvZiBlPyJTIjoiUCIpK2U7aWYoIWkoZSxuKSl7aWYoIXUoZSkpcmV0dXJuIkYiO2lmKCF0KXJldHVybiJFIjtjKGUpfXJldHVybiBlW25dLml9LHA9ZnVuY3Rpb24oZSx0KXtpZighaShlLG4pKXtpZighdShlKSlyZXR1cm4hMDtpZighdClyZXR1cm4hMTtjKGUpfXJldHVybiBlW25dLnd9LGQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGwmJmguTkVFRCYmdShlKSYmIWkoZSxuKSYmYyhlKSxlfSxoPXQuZXhwb3J0cz17S0VZOm4sTkVFRDohMSxmYXN0S2V5OmYsZ2V0V2VhazpwLG9uRnJlZXplOmR9fSx7Ii4vX2ZhaWxzIjozOSwiLi9faGFzIjo0MSwiLi9faXMtb2JqZWN0Ijo0NywiLi9fb2JqZWN0LWRwIjo1NiwiLi9fdWlkIjo4MH1dLDU1OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fYW4tb2JqZWN0Iiksbz1lKCIuL19vYmplY3QtZHBzIiksaT1lKCIuL19lbnVtLWJ1Zy1rZXlzIiksYT1lKCIuL19zaGFyZWQta2V5IikoIklFX1BST1RPIikscz1mdW5jdGlvbigpe30sdT0icHJvdG90eXBlIixsPWZ1bmN0aW9uKCl7dmFyIHQscj1lKCIuL19kb20tY3JlYXRlIikoImlmcmFtZSIpLG49aS5sZW5ndGgsbz0iPiI7Zm9yKHIuc3R5bGUuZGlzcGxheT0ibm9uZSIsZSgiLi9faHRtbCIpLmFwcGVuZENoaWxkKHIpLHIuc3JjPSJqYXZhc2NyaXB0OiIsdD1yLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQsdC5vcGVuKCksdC53cml0ZSgiPHNjcmlwdD5kb2N1bWVudC5GPU9iamVjdDwvc2NyaXB0IitvKSx0LmNsb3NlKCksbD10LkY7bi0tOylkZWxldGUgbFt1XVtpW25dXTtyZXR1cm4gbCgpfTt0LmV4cG9ydHM9T2JqZWN0LmNyZWF0ZXx8ZnVuY3Rpb24oZSx0KXt2YXIgcjtyZXR1cm4gbnVsbCE9PWU/KHNbdV09bihlKSxyPW5ldyBzLHNbdV09bnVsbCxyW2FdPWUpOnI9bCgpLHZvaWQgMD09PXQ/cjpvKHIsdCl9fSx7Ii4vX2FuLW9iamVjdCI6MjgsIi4vX2RvbS1jcmVhdGUiOjM1LCIuL19lbnVtLWJ1Zy1rZXlzIjozNiwiLi9faHRtbCI6NDMsIi4vX29iamVjdC1kcHMiOjU3LCIuL19zaGFyZWQta2V5Ijo3MX1dLDU2OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fYW4tb2JqZWN0Iiksbz1lKCIuL19pZTgtZG9tLWRlZmluZSIpLGk9ZSgiLi9fdG8tcHJpbWl0aXZlIiksYT1PYmplY3QuZGVmaW5lUHJvcGVydHk7ci5mPWUoIi4vX2Rlc2NyaXB0b3JzIik/T2JqZWN0LmRlZmluZVByb3BlcnR5OmZ1bmN0aW9uKGUsdCxyKXtpZihuKGUpLHQ9aSh0LCEwKSxuKHIpLG8pdHJ5e3JldHVybiBhKGUsdCxyKX1jYXRjaChzKXt9aWYoImdldCJpbiByfHwic2V0ImluIHIpdGhyb3cgVHlwZUVycm9yKCJBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEiKTtyZXR1cm4idmFsdWUiaW4gciYmKGVbdF09ci52YWx1ZSksZX19LHsiLi9fYW4tb2JqZWN0IjoyOCwiLi9fZGVzY3JpcHRvcnMiOjM0LCIuL19pZTgtZG9tLWRlZmluZSI6NDQsIi4vX3RvLXByaW1pdGl2ZSI6Nzl9XSw1NzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX29iamVjdC1kcCIpLG89ZSgiLi9fYW4tb2JqZWN0IiksaT1lKCIuL19vYmplY3Qta2V5cyIpO3QuZXhwb3J0cz1lKCIuL19kZXNjcmlwdG9ycyIpP09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzOmZ1bmN0aW9uKGUsdCl7byhlKTtmb3IodmFyIHIsYT1pKHQpLHM9YS5sZW5ndGgsdT0wO3M+dTspbi5mKGUscj1hW3UrK10sdFtyXSk7cmV0dXJuIGV9fSx7Ii4vX2FuLW9iamVjdCI6MjgsIi4vX2Rlc2NyaXB0b3JzIjozNCwiLi9fb2JqZWN0LWRwIjo1NiwiLi9fb2JqZWN0LWtleXMiOjY0fV0sNTg6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19vYmplY3QtcGllIiksbz1lKCIuL19wcm9wZXJ0eS1kZXNjIiksaT1lKCIuL190by1pb2JqZWN0IiksYT1lKCIuL190by1wcmltaXRpdmUiKSxzPWUoIi4vX2hhcyIpLHU9ZSgiLi9faWU4LWRvbS1kZWZpbmUiKSxsPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7ci5mPWUoIi4vX2Rlc2NyaXB0b3JzIik/bDpmdW5jdGlvbihlLHQpe2lmKGU9aShlKSx0PWEodCwhMCksdSl0cnl7cmV0dXJuIGwoZSx0KX1jYXRjaChyKXt9aWYocyhlLHQpKXJldHVybiBvKCFuLmYuY2FsbChlLHQpLGVbdF0pfX0seyIuL19kZXNjcmlwdG9ycyI6MzQsIi4vX2hhcyI6NDEsIi4vX2llOC1kb20tZGVmaW5lIjo0NCwiLi9fb2JqZWN0LXBpZSI6NjUsIi4vX3Byb3BlcnR5LWRlc2MiOjY3LCIuL190by1pb2JqZWN0Ijo3NiwiLi9fdG8tcHJpbWl0aXZlIjo3OX1dLDU5OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fdG8taW9iamVjdCIpLG89ZSgiLi9fb2JqZWN0LWdvcG4iKS5mLGk9e30udG9TdHJpbmcsYT0ib2JqZWN0Ij09dHlwZW9mIHdpbmRvdyYmd2luZG93JiZPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcz9PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpOltdLHM9ZnVuY3Rpb24oZSl7dHJ5e3JldHVybiBvKGUpfWNhdGNoKHQpe3JldHVybiBhLnNsaWNlKCl9fTt0LmV4cG9ydHMuZj1mdW5jdGlvbihlKXtyZXR1cm4gYSYmIltvYmplY3QgV2luZG93XSI9PWkuY2FsbChlKT9zKGUpOm8obihlKSl9fSx7Ii4vX29iamVjdC1nb3BuIjo2MCwiLi9fdG8taW9iamVjdCI6NzZ9XSw2MDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX29iamVjdC1rZXlzLWludGVybmFsIiksbz1lKCIuL19lbnVtLWJ1Zy1rZXlzIikuY29uY2F0KCJsZW5ndGgiLCJwcm90b3R5cGUiKTtyLmY9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXN8fGZ1bmN0aW9uKGUpe3JldHVybiBuKGUsbyl9fSx7Ii4vX2VudW0tYnVnLWtleXMiOjM2LCIuL19vYmplY3Qta2V5cy1pbnRlcm5hbCI6NjN9XSw2MTpbZnVuY3Rpb24oZSx0LHIpe3IuZj1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzfSx7fV0sNjI6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19oYXMiKSxvPWUoIi4vX3RvLW9iamVjdCIpLGk9ZSgiLi9fc2hhcmVkLWtleSIpKCJJRV9QUk9UTyIpLGE9T2JqZWN0LnByb3RvdHlwZTt0LmV4cG9ydHM9T2JqZWN0LmdldFByb3RvdHlwZU9mfHxmdW5jdGlvbihlKXtyZXR1cm4gZT1vKGUpLG4oZSxpKT9lW2ldOiJmdW5jdGlvbiI9PXR5cGVvZiBlLmNvbnN0cnVjdG9yJiZlIGluc3RhbmNlb2YgZS5jb25zdHJ1Y3Rvcj9lLmNvbnN0cnVjdG9yLnByb3RvdHlwZTplIGluc3RhbmNlb2YgT2JqZWN0P2E6bnVsbH19LHsiLi9faGFzIjo0MSwiLi9fc2hhcmVkLWtleSI6NzEsIi4vX3RvLW9iamVjdCI6Nzh9XSw2MzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2hhcyIpLG89ZSgiLi9fdG8taW9iamVjdCIpLGk9ZSgiLi9fYXJyYXktaW5jbHVkZXMiKSghMSksYT1lKCIuL19zaGFyZWQta2V5IikoIklFX1BST1RPIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7dmFyIHIscz1vKGUpLHU9MCxsPVtdO2ZvcihyIGluIHMpciE9YSYmbihzLHIpJiZsLnB1c2gocik7Zm9yKDt0Lmxlbmd0aD51OyluKHMscj10W3UrK10pJiYofmkobCxyKXx8bC5wdXNoKHIpKTtyZXR1cm4gbH19LHsiLi9fYXJyYXktaW5jbHVkZXMiOjI5LCIuL19oYXMiOjQxLCIuL19zaGFyZWQta2V5Ijo3MSwiLi9fdG8taW9iamVjdCI6NzZ9XSw2NDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX29iamVjdC1rZXlzLWludGVybmFsIiksbz1lKCIuL19lbnVtLWJ1Zy1rZXlzIik7dC5leHBvcnRzPU9iamVjdC5rZXlzfHxmdW5jdGlvbihlKXtyZXR1cm4gbihlLG8pfX0seyIuL19lbnVtLWJ1Zy1rZXlzIjozNiwiLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwiOjYzfV0sNjU6W2Z1bmN0aW9uKGUsdCxyKXtyLmY9e30ucHJvcGVydHlJc0VudW1lcmFibGV9LHt9XSw2NjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2V4cG9ydCIpLG89ZSgiLi9fY29yZSIpLGk9ZSgiLi9fZmFpbHMiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt2YXIgcj0oby5PYmplY3R8fHt9KVtlXXx8T2JqZWN0W2VdLGE9e307YVtlXT10KHIpLG4obi5TK24uRippKGZ1bmN0aW9uKCl7cigxKX0pLCJPYmplY3QiLGEpfX0seyIuL19jb3JlIjozMSwiLi9fZXhwb3J0IjozOCwiLi9fZmFpbHMiOjM5fV0sNjc6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm57ZW51bWVyYWJsZTohKDEmZSksY29uZmlndXJhYmxlOiEoMiZlKSx3cml0YWJsZTohKDQmZSksdmFsdWU6dH19fSx7fV0sNjg6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZSgiLi9faGlkZSIpfSx7Ii4vX2hpZGUiOjQyfV0sNjk6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19pcy1vYmplY3QiKSxvPWUoIi4vX2FuLW9iamVjdCIpLGk9ZnVuY3Rpb24oZSx0KXtpZihvKGUpLCFuKHQpJiZudWxsIT09dCl0aHJvdyBUeXBlRXJyb3IodCsiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlISIpfTt0LmV4cG9ydHM9e3NldDpPYmplY3Quc2V0UHJvdG90eXBlT2Z8fCgiX19wcm90b19fImlue30/ZnVuY3Rpb24odCxyLG4pe3RyeXtuPWUoIi4vX2N0eCIpKEZ1bmN0aW9uLmNhbGwsZSgiLi9fb2JqZWN0LWdvcGQiKS5mKE9iamVjdC5wcm90b3R5cGUsIl9fcHJvdG9fXyIpLnNldCwyKSxuKHQsW10pLHI9ISh0IGluc3RhbmNlb2YgQXJyYXkpfWNhdGNoKG8pe3I9ITB9cmV0dXJuIGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGkoZSx0KSxyP2UuX19wcm90b19fPXQ6bihlLHQpLGV9fSh7fSwhMSk6dm9pZCAwKSxjaGVjazppfX0seyIuL19hbi1vYmplY3QiOjI4LCIuL19jdHgiOjMyLCIuL19pcy1vYmplY3QiOjQ3LCIuL19vYmplY3QtZ29wZCI6NTh9XSw3MDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX29iamVjdC1kcCIpLmYsbz1lKCIuL19oYXMiKSxpPWUoIi4vX3drcyIpKCJ0b1N0cmluZ1RhZyIpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7ZSYmIW8oZT1yP2U6ZS5wcm90b3R5cGUsaSkmJm4oZSxpLHtjb25maWd1cmFibGU6ITAsdmFsdWU6dH0pfX0seyIuL19oYXMiOjQxLCIuL19vYmplY3QtZHAiOjU2LCIuL193a3MiOjgzfV0sNzE6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19zaGFyZWQiKSgia2V5cyIpLG89ZSgiLi9fdWlkIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBuW2VdfHwobltlXT1vKGUpKX19LHsiLi9fc2hhcmVkIjo3MiwiLi9fdWlkIjo4MH1dLDcyOltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fZ2xvYmFsIiksbz0iX19jb3JlLWpzX3NoYXJlZF9fIixpPW5bb118fChuW29dPXt9KTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGlbZV18fChpW2VdPXt9KX19LHsiLi9fZ2xvYmFsIjo0MH1dLDczOltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fdG8taW50ZWdlciIpLG89ZSgiLi9fZGVmaW5lZCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxyKXt2YXIgaSxhLHM9U3RyaW5nKG8odCkpLHU9bihyKSxsPXMubGVuZ3RoO3JldHVybiB1PDB8fHU+PWw/ZT8iIjp2b2lkIDA6KGk9cy5jaGFyQ29kZUF0KHUpLGk8NTUyOTZ8fGk+NTYzMTl8fHUrMT09PWx8fChhPXMuY2hhckNvZGVBdCh1KzEpKTw1NjMyMHx8YT41NzM0Mz9lP3MuY2hhckF0KHUpOmk6ZT9zLnNsaWNlKHUsdSsyKTooaS01NTI5Njw8MTApKyhhLTU2MzIwKSs2NTUzNil9fX0seyIuL19kZWZpbmVkIjozMywiLi9fdG8taW50ZWdlciI6NzV9XSw3NDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX3RvLWludGVnZXIiKSxvPU1hdGgubWF4LGk9TWF0aC5taW47dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9bihlKSxlPDA/byhlK3QsMCk6aShlLHQpfX0seyIuL190by1pbnRlZ2VyIjo3NX1dLDc1OltmdW5jdGlvbihlLHQscil7dmFyIG49TWF0aC5jZWlsLG89TWF0aC5mbG9vcjt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGlzTmFOKGU9K2UpPzA6KGU+MD9vOm4pKGUpfX0se31dLDc2OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9faW9iamVjdCIpLG89ZSgiLi9fZGVmaW5lZCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gbihvKGUpKX19LHsiLi9fZGVmaW5lZCI6MzMsIi4vX2lvYmplY3QiOjQ1fV0sNzc6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL190by1pbnRlZ2VyIiksbz1NYXRoLm1pbjt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGU+MD9vKG4oZSksOTAwNzE5OTI1NDc0MDk5MSk6MH19LHsiLi9fdG8taW50ZWdlciI6NzV9XSw3ODpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2RlZmluZWQiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdChuKGUpKX19LHsiLi9fZGVmaW5lZCI6MzN9XSw3OTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2lzLW9iamVjdCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2lmKCFuKGUpKXJldHVybiBlO3ZhciByLG87aWYodCYmImZ1bmN0aW9uIj09dHlwZW9mKHI9ZS50b1N0cmluZykmJiFuKG89ci5jYWxsKGUpKSlyZXR1cm4gbztpZigiZnVuY3Rpb24iPT10eXBlb2Yocj1lLnZhbHVlT2YpJiYhbihvPXIuY2FsbChlKSkpcmV0dXJuIG87aWYoIXQmJiJmdW5jdGlvbiI9PXR5cGVvZihyPWUudG9TdHJpbmcpJiYhbihvPXIuY2FsbChlKSkpcmV0dXJuIG87dGhyb3cgVHlwZUVycm9yKCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWUiKX19LHsiLi9faXMtb2JqZWN0Ijo0N31dLDgwOltmdW5jdGlvbihlLHQscil7dmFyIG49MCxvPU1hdGgucmFuZG9tKCk7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiJTeW1ib2woIi5jb25jYXQodm9pZCAwPT09ZT8iIjplLCIpXyIsKCsrbitvKS50b1N0cmluZygzNikpfX0se31dLDgxOltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fZ2xvYmFsIiksbz1lKCIuL19jb3JlIiksaT1lKCIuL19saWJyYXJ5IiksYT1lKCIuL193a3MtZXh0Iikscz1lKCIuL19vYmplY3QtZHAiKS5mO3QuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD1vLlN5bWJvbHx8KG8uU3ltYm9sPWk/e306bi5TeW1ib2x8fHt9KTsiXyI9PWUuY2hhckF0KDApfHxlIGluIHR8fHModCxlLHt2YWx1ZTphLmYoZSl9KX19LHsiLi9fY29yZSI6MzEsIi4vX2dsb2JhbCI6NDAsIi4vX2xpYnJhcnkiOjUzLCIuL19vYmplY3QtZHAiOjU2LCIuL193a3MtZXh0Ijo4Mn1dLDgyOltmdW5jdGlvbihlLHQscil7ci5mPWUoIi4vX3drcyIpfSx7Ii4vX3drcyI6ODN9XSw4MzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX3NoYXJlZCIpKCJ3a3MiKSxvPWUoIi4vX3VpZCIpLGk9ZSgiLi9fZ2xvYmFsIikuU3ltYm9sLGE9ImZ1bmN0aW9uIj09dHlwZW9mIGkscz10LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG5bZV18fChuW2VdPWEmJmlbZV18fChhP2k6bykoIlN5bWJvbC4iK2UpKX07cy5zdG9yZT1ufSx7Ii4vX2dsb2JhbCI6NDAsIi4vX3NoYXJlZCI6NzIsIi4vX3VpZCI6ODB9XSw4NDpbZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj1lKCIuL19hZGQtdG8tdW5zY29wYWJsZXMiKSxvPWUoIi4vX2l0ZXItc3RlcCIpLGk9ZSgiLi9faXRlcmF0b3JzIiksYT1lKCIuL190by1pb2JqZWN0Iik7dC5leHBvcnRzPWUoIi4vX2l0ZXItZGVmaW5lIikoQXJyYXksIkFycmF5IixmdW5jdGlvbihlLHQpe3RoaXMuX3Q9YShlKSx0aGlzLl9pPTAsdGhpcy5faz10fSxmdW5jdGlvbigpe3ZhciBlPXRoaXMuX3QsdD10aGlzLl9rLHI9dGhpcy5faSsrO3JldHVybiFlfHxyPj1lLmxlbmd0aD8odGhpcy5fdD12b2lkIDAsbygxKSk6ImtleXMiPT10P28oMCxyKToidmFsdWVzIj09dD9vKDAsZVtyXSk6bygwLFtyLGVbcl1dKX0sInZhbHVlcyIpLGkuQXJndW1lbnRzPWkuQXJyYXksbigia2V5cyIpLG4oInZhbHVlcyIpLG4oImVudHJpZXMiKX0seyIuL19hZGQtdG8tdW5zY29wYWJsZXMiOjI3LCIuL19pdGVyLWRlZmluZSI6NDksIi4vX2l0ZXItc3RlcCI6NTAsIi4vX2l0ZXJhdG9ycyI6NTEsIi4vX3RvLWlvYmplY3QiOjc2fV0sODU6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19leHBvcnQiKTtuKG4uUywiT2JqZWN0Iix7Y3JlYXRlOmUoIi4vX29iamVjdC1jcmVhdGUiKX0pfSx7Ii4vX2V4cG9ydCI6MzgsIi4vX29iamVjdC1jcmVhdGUiOjU1fV0sODY6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19leHBvcnQiKTtuKG4uUytuLkYqIWUoIi4vX2Rlc2NyaXB0b3JzIiksIk9iamVjdCIse2RlZmluZVByb3BlcnR5OmUoIi4vX29iamVjdC1kcCIpLmZ9KX0seyIuL19kZXNjcmlwdG9ycyI6MzQsIi4vX2V4cG9ydCI6MzgsIi4vX29iamVjdC1kcCI6NTZ9XSw4NzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2lzLW9iamVjdCIpLG89ZSgiLi9fbWV0YSIpLm9uRnJlZXplO2UoIi4vX29iamVjdC1zYXAiKSgiZnJlZXplIixmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIGUmJm4odCk/ZShvKHQpKTp0fX0pfSx7Ii4vX2lzLW9iamVjdCI6NDcsIi4vX21ldGEiOjU0LCIuL19vYmplY3Qtc2FwIjo2Nn1dLDg4OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fdG8taW9iamVjdCIpLG89ZSgiLi9fb2JqZWN0LWdvcGQiKS5mO2UoIi4vX29iamVjdC1zYXAiKSgiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIixmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlLHQpe3JldHVybiBvKG4oZSksdCl9fSl9LHsiLi9fb2JqZWN0LWdvcGQiOjU4LCIuL19vYmplY3Qtc2FwIjo2NiwiLi9fdG8taW9iamVjdCI6NzZ9XSw4OTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX3RvLW9iamVjdCIpLG89ZSgiLi9fb2JqZWN0LWdwbyIpO2UoIi4vX29iamVjdC1zYXAiKSgiZ2V0UHJvdG90eXBlT2YiLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBvKG4oZSkpfX0pfSx7Ii4vX29iamVjdC1ncG8iOjYyLCIuL19vYmplY3Qtc2FwIjo2NiwiLi9fdG8tb2JqZWN0Ijo3OH1dLDkwOltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fdG8tb2JqZWN0Iiksbz1lKCIuL19vYmplY3Qta2V5cyIpO2UoIi4vX29iamVjdC1zYXAiKSgia2V5cyIsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIG8obihlKSl9fSl9LHsiLi9fb2JqZWN0LWtleXMiOjY0LCIuL19vYmplY3Qtc2FwIjo2NiwiLi9fdG8tb2JqZWN0Ijo3OH1dLDkxOltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fZXhwb3J0Iik7bihuLlMsIk9iamVjdCIse3NldFByb3RvdHlwZU9mOmUoIi4vX3NldC1wcm90byIpLnNldH0pfSx7Ii4vX2V4cG9ydCI6MzgsIi4vX3NldC1wcm90byI6Njl9XSw5MjpbZnVuY3Rpb24oZSx0LHIpe30se31dLDkzOltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3ZhciBuPWUoIi4vX3N0cmluZy1hdCIpKCEwKTtlKCIuL19pdGVyLWRlZmluZSIpKFN0cmluZywiU3RyaW5nIixmdW5jdGlvbihlKXt0aGlzLl90PVN0cmluZyhlKSx0aGlzLl9pPTB9LGZ1bmN0aW9uKCl7dmFyIGUsdD10aGlzLl90LHI9dGhpcy5faTtyZXR1cm4gcj49dC5sZW5ndGg/e3ZhbHVlOnZvaWQgMCxkb25lOiEwfTooZT1uKHQsciksdGhpcy5faSs9ZS5sZW5ndGgse3ZhbHVlOmUsZG9uZTohMX0pfSl9LHsiLi9faXRlci1kZWZpbmUiOjQ5LCIuL19zdHJpbmctYXQiOjczfV0sOTQ6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49ZSgiLi9fZ2xvYmFsIiksbz1lKCIuL19oYXMiKSxpPWUoIi4vX2Rlc2NyaXB0b3JzIiksYT1lKCIuL19leHBvcnQiKSxzPWUoIi4vX3JlZGVmaW5lIiksdT1lKCIuL19tZXRhIikuS0VZLGw9ZSgiLi9fZmFpbHMiKSxjPWUoIi4vX3NoYXJlZCIpLGY9ZSgiLi9fc2V0LXRvLXN0cmluZy10YWciKSxwPWUoIi4vX3VpZCIpLGQ9ZSgiLi9fd2tzIiksaD1lKCIuL193a3MtZXh0IikseT1lKCIuL193a3MtZGVmaW5lIiksbT1lKCIuL19rZXlvZiIpLHY9ZSgiLi9fZW51bS1rZXlzIiksXz1lKCIuL19pcy1hcnJheSIpLGI9ZSgiLi9fYW4tb2JqZWN0IiksZz1lKCIuL190by1pb2JqZWN0IiksRT1lKCIuL190by1wcmltaXRpdmUiKSxqPWUoIi4vX3Byb3BlcnR5LWRlc2MiKSx3PWUoIi4vX29iamVjdC1jcmVhdGUiKSxPPWUoIi4vX29iamVjdC1nb3BuLWV4dCIpLE09ZSgiLi9fb2JqZWN0LWdvcGQiKSx4PWUoIi4vX29iamVjdC1kcCIpLFA9ZSgiLi9fb2JqZWN0LWtleXMiKSxrPU0uZixSPXguZixTPU8uZixBPW4uU3ltYm9sLFQ9bi5KU09OLE49VCYmVC5zdHJpbmdpZnksST0icHJvdG90eXBlIixVPWQoIl9oaWRkZW4iKSxDPWQoInRvUHJpbWl0aXZlIiksTD17fS5wcm9wZXJ0eUlzRW51bWVyYWJsZSxGPWMoInN5bWJvbC1yZWdpc3RyeSIpLEI9Yygic3ltYm9scyIpLEQ9Yygib3Atc3ltYm9scyIpLEc9T2JqZWN0W0ldLEs9ImZ1bmN0aW9uIj09dHlwZW9mIEEsWT1uLlFPYmplY3QscT0hWXx8IVlbSV18fCFZW0ldLmZpbmRDaGlsZCx6PWkmJmwoZnVuY3Rpb24oKXtyZXR1cm4gNyE9dyhSKHt9LCJhIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFIodGhpcywiYSIse3ZhbHVlOjd9KS5hfX0pKS5hfSk/ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWsoRyx0KTtuJiZkZWxldGUgR1t0XSxSKGUsdCxyKSxuJiZlIT09RyYmUihHLHQsbil9OlIsVz1mdW5jdGlvbihlKXt2YXIgdD1CW2VdPXcoQVtJXSk7cmV0dXJuIHQuX2s9ZSx0fSxIPUsmJiJzeW1ib2wiPT10eXBlb2YgQS5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4ic3ltYm9sIj09dHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgQX0sVj1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9PT1HJiZWKEQsdCxyKSxiKGUpLHQ9RSh0LCEwKSxiKHIpLG8oQix0KT8oci5lbnVtZXJhYmxlPyhvKGUsVSkmJmVbVV1bdF0mJihlW1VdW3RdPSExKSxyPXcocix7ZW51bWVyYWJsZTpqKDAsITEpfSkpOihvKGUsVSl8fFIoZSxVLGooMSx7fSkpLGVbVV1bdF09ITApLHooZSx0LHIpKTpSKGUsdCxyKX0sSj1mdW5jdGlvbihlLHQpe2IoZSk7Zm9yKHZhciByLG49dih0PWcodCkpLG89MCxpPW4ubGVuZ3RoO2k+bzspVihlLHI9bltvKytdLHRbcl0pO3JldHVybiBlfSwkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHZvaWQgMD09PXQ/dyhlKTpKKHcoZSksdCl9LFg9ZnVuY3Rpb24oZSl7dmFyIHQ9TC5jYWxsKHRoaXMsZT1FKGUsITApKTtyZXR1cm4hKHRoaXM9PT1HJiZvKEIsZSkmJiFvKEQsZSkpJiYoISh0fHwhbyh0aGlzLGUpfHwhbyhCLGUpfHxvKHRoaXMsVSkmJnRoaXNbVV1bZV0pfHx0KX0sUT1mdW5jdGlvbihlLHQpe2lmKGU9ZyhlKSx0PUUodCwhMCksZSE9PUd8fCFvKEIsdCl8fG8oRCx0KSl7dmFyIHI9ayhlLHQpO3JldHVybiFyfHwhbyhCLHQpfHxvKGUsVSkmJmVbVV1bdF18fChyLmVudW1lcmFibGU9ITApLHJ9fSxaPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxyPVMoZyhlKSksbj1bXSxpPTA7ci5sZW5ndGg+aTspbyhCLHQ9cltpKytdKXx8dD09VXx8dD09dXx8bi5wdXNoKHQpO3JldHVybiBufSxlZT1mdW5jdGlvbihlKXtmb3IodmFyIHQscj1lPT09RyxuPVMocj9EOmcoZSkpLGk9W10sYT0wO24ubGVuZ3RoPmE7KSFvKEIsdD1uW2ErK10pfHxyJiYhbyhHLHQpfHxpLnB1c2goQlt0XSk7cmV0dXJuIGl9O0t8fChBPWZ1bmN0aW9uKCl7aWYodGhpcyBpbnN0YW5jZW9mIEEpdGhyb3cgVHlwZUVycm9yKCJTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhIik7dmFyIGU9cChhcmd1bWVudHMubGVuZ3RoPjA/YXJndW1lbnRzWzBdOnZvaWQgMCksdD1mdW5jdGlvbihyKXt0aGlzPT09RyYmdC5jYWxsKEQsciksbyh0aGlzLFUpJiZvKHRoaXNbVV0sZSkmJih0aGlzW1VdW2VdPSExKSx6KHRoaXMsZSxqKDEscikpfTtyZXR1cm4gaSYmcSYmeihHLGUse2NvbmZpZ3VyYWJsZTohMCxzZXQ6dH0pLFcoZSl9LHMoQVtJXSwidG9TdHJpbmciLGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2t9KSxNLmY9USx4LmY9VixlKCIuL19vYmplY3QtZ29wbiIpLmY9Ty5mPVosZSgiLi9fb2JqZWN0LXBpZSIpLmY9WCxlKCIuL19vYmplY3QtZ29wcyIpLmY9ZWUsaSYmIWUoIi4vX2xpYnJhcnkiKSYmcyhHLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsWCwhMCksaC5mPWZ1bmN0aW9uKGUpe3JldHVybiBXKGQoZSkpfSksYShhLkcrYS5XK2EuRiohSyx7U3ltYm9sOkF9KTtmb3IodmFyIHRlPSJoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcyIuc3BsaXQoIiwiKSxyZT0wO3RlLmxlbmd0aD5yZTspZCh0ZVtyZSsrXSk7Zm9yKHZhciB0ZT1QKGQuc3RvcmUpLHJlPTA7dGUubGVuZ3RoPnJlOyl5KHRlW3JlKytdKTthKGEuUythLkYqIUssIlN5bWJvbCIseyJmb3IiOmZ1bmN0aW9uKGUpe3JldHVybiBvKEYsZSs9IiIpP0ZbZV06RltlXT1BKGUpfSxrZXlGb3I6ZnVuY3Rpb24oZSl7aWYoSChlKSlyZXR1cm4gbShGLGUpO3Rocm93IFR5cGVFcnJvcihlKyIgaXMgbm90IGEgc3ltYm9sISIpfSx1c2VTZXR0ZXI6ZnVuY3Rpb24oKXtxPSEwfSx1c2VTaW1wbGU6ZnVuY3Rpb24oKXtxPSExfX0pLGEoYS5TK2EuRiohSywiT2JqZWN0Iix7Y3JlYXRlOiQsZGVmaW5lUHJvcGVydHk6VixkZWZpbmVQcm9wZXJ0aWVzOkosZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOlEsZ2V0T3duUHJvcGVydHlOYW1lczpaLGdldE93blByb3BlcnR5U3ltYm9sczplZX0pLFQmJmEoYS5TK2EuRiooIUt8fGwoZnVuY3Rpb24oKXt2YXIgZT1BKCk7cmV0dXJuIltudWxsXSIhPU4oW2VdKXx8Int9IiE9Tih7YTplfSl8fCJ7fSIhPU4oT2JqZWN0KGUpKX0pKSwiSlNPTiIse3N0cmluZ2lmeTpmdW5jdGlvbihlKXtpZih2b2lkIDAhPT1lJiYhSChlKSl7Zm9yKHZhciB0LHIsbj1bZV0sbz0xO2FyZ3VtZW50cy5sZW5ndGg+bzspbi5wdXNoKGFyZ3VtZW50c1tvKytdKTtyZXR1cm4gdD1uWzFdLCJmdW5jdGlvbiI9PXR5cGVvZiB0JiYocj10KSwhciYmXyh0KXx8KHQ9ZnVuY3Rpb24oZSx0KXtpZihyJiYodD1yLmNhbGwodGhpcyxlLHQpKSwhSCh0KSlyZXR1cm4gdH0pLG5bMV09dCxOLmFwcGx5KFQsbil9fX0pLEFbSV1bQ118fGUoIi4vX2hpZGUiKShBW0ldLEMsQVtJXS52YWx1ZU9mKSxmKEEsIlN5bWJvbCIpLGYoTWF0aCwiTWF0aCIsITApLGYobi5KU09OLCJKU09OIiwhMCl9LHsiLi9fYW4tb2JqZWN0IjoyOCwiLi9fZGVzY3JpcHRvcnMiOjM0LCIuL19lbnVtLWtleXMiOjM3LCIuL19leHBvcnQiOjM4LCIuL19mYWlscyI6MzksIi4vX2dsb2JhbCI6NDAsIi4vX2hhcyI6NDEsIi4vX2hpZGUiOjQyLCIuL19pcy1hcnJheSI6NDYsIi4vX2tleW9mIjo1MiwiLi9fbGlicmFyeSI6NTMsIi4vX21ldGEiOjU0LCIuL19vYmplY3QtY3JlYXRlIjo1NSwiLi9fb2JqZWN0LWRwIjo1NiwiLi9fb2JqZWN0LWdvcGQiOjU4LCIuL19vYmplY3QtZ29wbiI6NjAsIi4vX29iamVjdC1nb3BuLWV4dCI6NTksIi4vX29iamVjdC1nb3BzIjo2MSwiLi9fb2JqZWN0LWtleXMiOjY0LCIuL19vYmplY3QtcGllIjo2NSwiLi9fcHJvcGVydHktZGVzYyI6NjcsIi4vX3JlZGVmaW5lIjo2OCwiLi9fc2V0LXRvLXN0cmluZy10YWciOjcwLCIuL19zaGFyZWQiOjcyLCIuL190by1pb2JqZWN0Ijo3NiwiLi9fdG8tcHJpbWl0aXZlIjo3OSwiLi9fdWlkIjo4MCwiLi9fd2tzIjo4MywiLi9fd2tzLWRlZmluZSI6ODEsIi4vX3drcy1leHQiOjgyfV0sOTU6W2Z1bmN0aW9uKGUsdCxyKXtlKCIuL193a3MtZGVmaW5lIikoImFzeW5jSXRlcmF0b3IiKX0seyIuL193a3MtZGVmaW5lIjo4MX1dLDk2OltmdW5jdGlvbihlLHQscil7ZSgiLi9fd2tzLWRlZmluZSIpKCJvYnNlcnZhYmxlIil9LHsiLi9fd2tzLWRlZmluZSI6ODF9XSw5NzpbZnVuY3Rpb24oZSx0LHIpe2UoIi4vZXM2LmFycmF5Lml0ZXJhdG9yIik7Zm9yKHZhciBuPWUoIi4vX2dsb2JhbCIpLG89ZSgiLi9faGlkZSIpLGk9ZSgiLi9faXRlcmF0b3JzIiksYT1lKCIuL193a3MiKSgidG9TdHJpbmdUYWciKSxzPVsiTm9kZUxpc3QiLCJET01Ub2tlbkxpc3QiLCJNZWRpYUxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIkNTU1J1bGVMaXN0Il0sdT0wO3U8NTt1Kyspe3ZhciBsPXNbdV0sYz1uW2xdLGY9YyYmYy5wcm90b3R5cGU7ZiYmIWZbYV0mJm8oZixhLGwpLGlbbF09aS5BcnJheX19LHsiLi9fZ2xvYmFsIjo0MCwiLi9faGlkZSI6NDIsIi4vX2l0ZXJhdG9ycyI6NTEsIi4vX3drcyI6ODMsIi4vZXM2LmFycmF5Lml0ZXJhdG9yIjo4NH1dLDk4OltmdW5jdGlvbihlLHQscil7ZnVuY3Rpb24gbigpe3AmJmMmJihwPSExLGMubGVuZ3RoP2Y9Yy5jb25jYXQoZik6ZD0tMSxmLmxlbmd0aCYmbygpKX1mdW5jdGlvbiBvKCl7aWYoIXApe3ZhciBlPXMobik7cD0hMDtmb3IodmFyIHQ9Zi5sZW5ndGg7dDspe2ZvcihjPWYsZj1bXTsrK2Q8dDspYyYmY1tkXS5ydW4oKTtkPS0xLHQ9Zi5sZW5ndGh9Yz1udWxsLHA9ITEsdShlKX19ZnVuY3Rpb24gaShlLHQpe3RoaXMuZnVuPWUsdGhpcy5hcnJheT10fWZ1bmN0aW9uIGEoKXt9dmFyIHMsdSxsPXQuZXhwb3J0cz17fTshZnVuY3Rpb24oKXt0cnl7cz1zZXRUaW1lb3V0fWNhdGNoKGUpe3M9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoInNldFRpbWVvdXQgaXMgbm90IGRlZmluZWQiKX19dHJ5e3U9Y2xlYXJUaW1lb3V0fWNhdGNoKGUpe3U9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoImNsZWFyVGltZW91dCBpcyBub3QgZGVmaW5lZCIpfX19KCk7dmFyIGMsZj1bXSxwPSExLGQ9LTE7bC5uZXh0VGljaz1mdW5jdGlvbihlKXt2YXIgdD1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKTtpZihhcmd1bWVudHMubGVuZ3RoPjEpZm9yKHZhciByPTE7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyl0W3ItMV09YXJndW1lbnRzW3JdO2YucHVzaChuZXcgaShlLHQpKSwxIT09Zi5sZW5ndGh8fHB8fHMobywwKX0saS5wcm90b3R5cGUucnVuPWZ1bmN0aW9uKCl7dGhpcy5mdW4uYXBwbHkobnVsbCx0aGlzLmFycmF5KX0sbC50aXRsZT0iYnJvd3NlciIsbC5icm93c2VyPSEwLGwuZW52PXt9LGwuYXJndj1bXSxsLnZlcnNpb249IiIsbC52ZXJzaW9ucz17fSxsLm9uPWEsbC5hZGRMaXN0ZW5lcj1hLGwub25jZT1hLGwub2ZmPWEsbC5yZW1vdmVMaXN0ZW5lcj1hLGwucmVtb3ZlQWxsTGlzdGVuZXJzPWEsbC5lbWl0PWEsbC5iaW5kaW5nPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcigicHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQiKX0sbC5jd2Q9ZnVuY3Rpb24oKXtyZXR1cm4iLyJ9LGwuY2hkaXI9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKCJwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQiKX0sbC51bWFzaz1mdW5jdGlvbigpe3JldHVybiAwfX0se31dLDk5OltmdW5jdGlvbihlLHQscil7KGZ1bmN0aW9uKHIpe3ZhciBuPSJvYmplY3QiPT10eXBlb2Ygcj9yOiJvYmplY3QiPT10eXBlb2Ygd2luZG93P3dpbmRvdzoib2JqZWN0Ij09dHlwZW9mIHNlbGY/c2VsZjp0aGlzLG89bi5yZWdlbmVyYXRvclJ1bnRpbWUmJk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG4pLmluZGV4T2YoInJlZ2VuZXJhdG9yUnVudGltZSIpPj0wLGk9byYmbi5yZWdlbmVyYXRvclJ1bnRpbWU7aWYobi5yZWdlbmVyYXRvclJ1bnRpbWU9dm9pZCAwLHQuZXhwb3J0cz1lKCIuL3J1bnRpbWUiKSxvKW4ucmVnZW5lcmF0b3JSdW50aW1lPWk7ZWxzZSB0cnl7ZGVsZXRlIG4ucmVnZW5lcmF0b3JSdW50aW1lfWNhdGNoKGEpe24ucmVnZW5lcmF0b3JSdW50aW1lPXZvaWQgMH19KS5jYWxsKHRoaXMsInVuZGVmaW5lZCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOiJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZj9zZWxmOiJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHsiLi9ydW50aW1lIjoxMDB9XSwxMDA6W2Z1bmN0aW9uKGUsdCxyKXsoZnVuY3Rpb24oZSxyKXshZnVuY3Rpb24ocil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG4oZSx0LHIsbil7dmFyIG89T2JqZWN0LmNyZWF0ZSgodHx8aSkucHJvdG90eXBlKSxhPW5ldyBoKG58fFtdKTtyZXR1cm4gby5faW52b2tlPWYoZSxyLGEpLG99ZnVuY3Rpb24gbyhlLHQscil7dHJ5e3JldHVybnt0eXBlOiJub3JtYWwiLGFyZzplLmNhbGwodCxyKX19Y2F0Y2gobil7cmV0dXJue3R5cGU6InRocm93Iixhcmc6bn19fWZ1bmN0aW9uIGkoKXt9ZnVuY3Rpb24gYSgpe31mdW5jdGlvbiBzKCl7fWZ1bmN0aW9uIHUoZSl7WyJuZXh0IiwidGhyb3ciLCJyZXR1cm4iXS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2VbdF09ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2ludm9rZSh0LGUpfX0pfWZ1bmN0aW9uIGwoZSl7dGhpcy5hcmc9ZX1mdW5jdGlvbiBjKHQpe2Z1bmN0aW9uIHIoZSxuLGksYSl7dmFyIHM9byh0W2VdLHQsbik7aWYoInRocm93IiE9PXMudHlwZSl7dmFyIHU9cy5hcmcsYz11LnZhbHVlO3JldHVybiBjIGluc3RhbmNlb2YgbD9Qcm9taXNlLnJlc29sdmUoYy5hcmcpLnRoZW4oZnVuY3Rpb24oZSl7cigibmV4dCIsZSxpLGEpfSxmdW5jdGlvbihlKXtyKCJ0aHJvdyIsZSxpLGEpfSk6UHJvbWlzZS5yZXNvbHZlKGMpLnRoZW4oZnVuY3Rpb24oZSl7dS52YWx1ZT1lLGkodSl9LGEpfWEocy5hcmcpfWZ1bmN0aW9uIG4oZSx0KXtmdW5jdGlvbiBuKCl7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKG4sbyl7cihlLHQsbixvKX0pfXJldHVybiBpPWk/aS50aGVuKG4sbik6bigpfSJvYmplY3QiPT10eXBlb2YgZSYmZS5kb21haW4mJihyPWUuZG9tYWluLmJpbmQocikpO3ZhciBpO3RoaXMuX2ludm9rZT1ufWZ1bmN0aW9uIGYoZSx0LHIpe3ZhciBuPU87cmV0dXJuIGZ1bmN0aW9uKGksYSl7aWYobj09PXgpdGhyb3cgbmV3IEVycm9yKCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nIik7aWYobj09PVApe2lmKCJ0aHJvdyI9PT1pKXRocm93IGE7cmV0dXJuIG0oKX1mb3IoOzspe3ZhciBzPXIuZGVsZWdhdGU7aWYocyl7aWYoInJldHVybiI9PT1pfHwidGhyb3ciPT09aSYmcy5pdGVyYXRvcltpXT09PXYpe3IuZGVsZWdhdGU9bnVsbDt2YXIgdT1zLml0ZXJhdG9yWyJyZXR1cm4iXTtpZih1KXt2YXIgbD1vKHUscy5pdGVyYXRvcixhKTtpZigidGhyb3ciPT09bC50eXBlKXtpPSJ0aHJvdyIsYT1sLmFyZztjb250aW51ZX19aWYoInJldHVybiI9PT1pKWNvbnRpbnVlfXZhciBsPW8ocy5pdGVyYXRvcltpXSxzLml0ZXJhdG9yLGEpO2lmKCJ0aHJvdyI9PT1sLnR5cGUpe3IuZGVsZWdhdGU9bnVsbCxpPSJ0aHJvdyIsYT1sLmFyZztjb250aW51ZX1pPSJuZXh0IixhPXY7dmFyIGM9bC5hcmc7aWYoIWMuZG9uZSlyZXR1cm4gbj1NLGM7cltzLnJlc3VsdE5hbWVdPWMudmFsdWUsci5uZXh0PXMubmV4dExvYyxyLmRlbGVnYXRlPW51bGx9aWYoIm5leHQiPT09aSlyLnNlbnQ9ci5fc2VudD1hO2Vsc2UgaWYoInRocm93Ij09PWkpe2lmKG49PT1PKXRocm93IG49UCxhO3IuZGlzcGF0Y2hFeGNlcHRpb24oYSkmJihpPSJuZXh0IixhPXYpfWVsc2UicmV0dXJuIj09PWkmJnIuYWJydXB0KCJyZXR1cm4iLGEpO249eDt2YXIgbD1vKGUsdCxyKTtpZigibm9ybWFsIj09PWwudHlwZSl7bj1yLmRvbmU/UDpNO3ZhciBjPXt2YWx1ZTpsLmFyZyxkb25lOnIuZG9uZX07aWYobC5hcmchPT1rKXJldHVybiBjO3IuZGVsZWdhdGUmJiJuZXh0Ij09PWkmJihhPXYpfWVsc2UidGhyb3ciPT09bC50eXBlJiYobj1QLGk9InRocm93IixhPWwuYXJnKX19fWZ1bmN0aW9uIHAoZSl7dmFyIHQ9e3RyeUxvYzplWzBdfTsxIGluIGUmJih0LmNhdGNoTG9jPWVbMV0pLDIgaW4gZSYmKHQuZmluYWxseUxvYz1lWzJdLHQuYWZ0ZXJMb2M9ZVszXSksdGhpcy50cnlFbnRyaWVzLnB1c2godCl9ZnVuY3Rpb24gZChlKXt2YXIgdD1lLmNvbXBsZXRpb258fHt9O3QudHlwZT0ibm9ybWFsIixkZWxldGUgdC5hcmcsZS5jb21wbGV0aW9uPXR9ZnVuY3Rpb24gaChlKXt0aGlzLnRyeUVudHJpZXM9W3t0cnlMb2M6InJvb3QifV0sZS5mb3JFYWNoKHAsdGhpcyksdGhpcy5yZXNldCghMCl9ZnVuY3Rpb24geShlKXtpZihlKXt2YXIgdD1lW2ddO2lmKHQpcmV0dXJuIHQuY2FsbChlKTtpZigiZnVuY3Rpb24iPT10eXBlb2YgZS5uZXh0KXJldHVybiBlO2lmKCFpc05hTihlLmxlbmd0aCkpe3ZhciByPS0xLG49ZnVuY3Rpb24gbygpe2Zvcig7KytyPGUubGVuZ3RoOylpZihfLmNhbGwoZSxyKSlyZXR1cm4gby52YWx1ZT1lW3JdLG8uZG9uZT0hMSxvO3JldHVybiBvLnZhbHVlPXYsby5kb25lPSEwLG99O3JldHVybiBuLm5leHQ9bn19cmV0dXJue25leHQ6bX19ZnVuY3Rpb24gbSgpe3JldHVybnt2YWx1ZTp2LGRvbmU6ITB9fXZhciB2LF89T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxiPSJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2w/U3ltYm9sOnt9LGc9Yi5pdGVyYXRvcnx8IkBAaXRlcmF0b3IiLEU9Yi50b1N0cmluZ1RhZ3x8IkBAdG9TdHJpbmdUYWciLGo9Im9iamVjdCI9PXR5cGVvZiB0LHc9ci5yZWdlbmVyYXRvclJ1bnRpbWU7aWYodylyZXR1cm4gdm9pZChqJiYodC5leHBvcnRzPXcpKTt3PXIucmVnZW5lcmF0b3JSdW50aW1lPWo/dC5leHBvcnRzOnt9LHcud3JhcD1uO3ZhciBPPSJzdXNwZW5kZWRTdGFydCIsTT0ic3VzcGVuZGVkWWllbGQiLHg9ImV4ZWN1dGluZyIsUD0iY29tcGxldGVkIixrPXt9LFI9cy5wcm90b3R5cGU9aS5wcm90b3R5cGU7YS5wcm90b3R5cGU9Ui5jb25zdHJ1Y3Rvcj1zLApzLmNvbnN0cnVjdG9yPWEsc1tFXT1hLmRpc3BsYXlOYW1lPSJHZW5lcmF0b3JGdW5jdGlvbiIsdy5pc0dlbmVyYXRvckZ1bmN0aW9uPWZ1bmN0aW9uKGUpe3ZhciB0PSJmdW5jdGlvbiI9PXR5cGVvZiBlJiZlLmNvbnN0cnVjdG9yO3JldHVybiEhdCYmKHQ9PT1hfHwiR2VuZXJhdG9yRnVuY3Rpb24iPT09KHQuZGlzcGxheU5hbWV8fHQubmFtZSkpfSx3Lm1hcms9ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YoZSxzKTooZS5fX3Byb3RvX189cyxFIGluIGV8fChlW0VdPSJHZW5lcmF0b3JGdW5jdGlvbiIpKSxlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFIpLGV9LHcuYXdyYXA9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBsKGUpfSx1KGMucHJvdG90eXBlKSx3LmFzeW5jPWZ1bmN0aW9uKGUsdCxyLG8pe3ZhciBpPW5ldyBjKG4oZSx0LHIsbykpO3JldHVybiB3LmlzR2VuZXJhdG9yRnVuY3Rpb24odCk/aTppLm5leHQoKS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiBlLmRvbmU/ZS52YWx1ZTppLm5leHQoKX0pfSx1KFIpLFJbZ109ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sUltFXT0iR2VuZXJhdG9yIixSLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIltvYmplY3QgR2VuZXJhdG9yXSJ9LHcua2V5cz1mdW5jdGlvbihlKXt2YXIgdD1bXTtmb3IodmFyIHIgaW4gZSl0LnB1c2gocik7cmV0dXJuIHQucmV2ZXJzZSgpLGZ1bmN0aW9uIG4oKXtmb3IoO3QubGVuZ3RoOyl7dmFyIHI9dC5wb3AoKTtpZihyIGluIGUpcmV0dXJuIG4udmFsdWU9cixuLmRvbmU9ITEsbn1yZXR1cm4gbi5kb25lPSEwLG59fSx3LnZhbHVlcz15LGgucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpoLHJlc2V0OmZ1bmN0aW9uKGUpe2lmKHRoaXMucHJldj0wLHRoaXMubmV4dD0wLHRoaXMuc2VudD10aGlzLl9zZW50PXYsdGhpcy5kb25lPSExLHRoaXMuZGVsZWdhdGU9bnVsbCx0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChkKSwhZSlmb3IodmFyIHQgaW4gdGhpcykidCI9PT10LmNoYXJBdCgwKSYmXy5jYWxsKHRoaXMsdCkmJiFpc05hTigrdC5zbGljZSgxKSkmJih0aGlzW3RdPXYpfSxzdG9wOmZ1bmN0aW9uKCl7dGhpcy5kb25lPSEwO3ZhciBlPXRoaXMudHJ5RW50cmllc1swXSx0PWUuY29tcGxldGlvbjtpZigidGhyb3ciPT09dC50eXBlKXRocm93IHQuYXJnO3JldHVybiB0aGlzLnJ2YWx9LGRpc3BhdGNoRXhjZXB0aW9uOmZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCxuKXtyZXR1cm4gaS50eXBlPSJ0aHJvdyIsaS5hcmc9ZSxyLm5leHQ9dCwhIW59aWYodGhpcy5kb25lKXRocm93IGU7Zm9yKHZhciByPXRoaXMsbj10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7bj49MDstLW4pe3ZhciBvPXRoaXMudHJ5RW50cmllc1tuXSxpPW8uY29tcGxldGlvbjtpZigicm9vdCI9PT1vLnRyeUxvYylyZXR1cm4gdCgiZW5kIik7aWYoby50cnlMb2M8PXRoaXMucHJldil7dmFyIGE9Xy5jYWxsKG8sImNhdGNoTG9jIikscz1fLmNhbGwobywiZmluYWxseUxvYyIpO2lmKGEmJnMpe2lmKHRoaXMucHJldjxvLmNhdGNoTG9jKXJldHVybiB0KG8uY2F0Y2hMb2MsITApO2lmKHRoaXMucHJldjxvLmZpbmFsbHlMb2MpcmV0dXJuIHQoby5maW5hbGx5TG9jKX1lbHNlIGlmKGEpe2lmKHRoaXMucHJldjxvLmNhdGNoTG9jKXJldHVybiB0KG8uY2F0Y2hMb2MsITApfWVsc2V7aWYoIXMpdGhyb3cgbmV3IEVycm9yKCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseSIpO2lmKHRoaXMucHJldjxvLmZpbmFsbHlMb2MpcmV0dXJuIHQoby5maW5hbGx5TG9jKX19fX0sYWJydXB0OmZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTtyPj0wOy0tcil7dmFyIG49dGhpcy50cnlFbnRyaWVzW3JdO2lmKG4udHJ5TG9jPD10aGlzLnByZXYmJl8uY2FsbChuLCJmaW5hbGx5TG9jIikmJnRoaXMucHJldjxuLmZpbmFsbHlMb2Mpe3ZhciBvPW47YnJlYWt9fW8mJigiYnJlYWsiPT09ZXx8ImNvbnRpbnVlIj09PWUpJiZvLnRyeUxvYzw9dCYmdDw9by5maW5hbGx5TG9jJiYobz1udWxsKTt2YXIgaT1vP28uY29tcGxldGlvbjp7fTtyZXR1cm4gaS50eXBlPWUsaS5hcmc9dCxvP3RoaXMubmV4dD1vLmZpbmFsbHlMb2M6dGhpcy5jb21wbGV0ZShpKSxrfSxjb21wbGV0ZTpmdW5jdGlvbihlLHQpe2lmKCJ0aHJvdyI9PT1lLnR5cGUpdGhyb3cgZS5hcmc7ImJyZWFrIj09PWUudHlwZXx8ImNvbnRpbnVlIj09PWUudHlwZT90aGlzLm5leHQ9ZS5hcmc6InJldHVybiI9PT1lLnR5cGU/KHRoaXMucnZhbD1lLmFyZyx0aGlzLm5leHQ9ImVuZCIpOiJub3JtYWwiPT09ZS50eXBlJiZ0JiYodGhpcy5uZXh0PXQpfSxmaW5pc2g6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTt0Pj0wOy0tdCl7dmFyIHI9dGhpcy50cnlFbnRyaWVzW3RdO2lmKHIuZmluYWxseUxvYz09PWUpcmV0dXJuIHRoaXMuY29tcGxldGUoci5jb21wbGV0aW9uLHIuYWZ0ZXJMb2MpLGQociksa319LCJjYXRjaCI6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTt0Pj0wOy0tdCl7dmFyIHI9dGhpcy50cnlFbnRyaWVzW3RdO2lmKHIudHJ5TG9jPT09ZSl7dmFyIG49ci5jb21wbGV0aW9uO2lmKCJ0aHJvdyI9PT1uLnR5cGUpe3ZhciBvPW4uYXJnO2Qocil9cmV0dXJuIG99fXRocm93IG5ldyBFcnJvcigiaWxsZWdhbCBjYXRjaCBhdHRlbXB0Iil9LGRlbGVnYXRlWWllbGQ6ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0aGlzLmRlbGVnYXRlPXtpdGVyYXRvcjp5KGUpLHJlc3VsdE5hbWU6dCxuZXh0TG9jOnJ9LGt9fX0oIm9iamVjdCI9PXR5cGVvZiByP3I6Im9iamVjdCI9PXR5cGVvZiB3aW5kb3c/d2luZG93OiJvYmplY3QiPT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMpfSkuY2FsbCh0aGlzLGUoIl9wcm9jZXNzIiksInVuZGVmaW5lZCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOiJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZj9zZWxmOiJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHtfcHJvY2Vzczo5OH1dLDEwMTpbZnVuY3Rpb24odCxyLG4peyFmdW5jdGlvbih0LG4peyJmdW5jdGlvbiI9PXR5cGVvZiBlJiZlLmFtZD9lKFtdLG4pOiJ1bmRlZmluZWQiIT10eXBlb2YgciYmci5leHBvcnRzP3IuZXhwb3J0cz1uKCk6dC50djQ9bigpfSh0aGlzLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXtyZXR1cm4gZW5jb2RlVVJJKGUpLnJlcGxhY2UoLyUyNVswLTldWzAtOV0vZyxmdW5jdGlvbihlKXtyZXR1cm4iJSIrZS5zdWJzdHJpbmcoMyl9KX1mdW5jdGlvbiB0KHQpe3ZhciByPSIiO3BbdC5jaGFyQXQoMCldJiYocj10LmNoYXJBdCgwKSx0PXQuc3Vic3RyaW5nKDEpKTt2YXIgbj0iIixvPSIiLGk9ITAsYT0hMSxzPSExOyIrIj09PXI/aT0hMToiLiI9PT1yPyhvPSIuIixuPSIuIik6Ii8iPT09cj8obz0iLyIsbj0iLyIpOiIjIj09PXI/KG89IiMiLGk9ITEpOiI7Ij09PXI/KG89IjsiLG49IjsiLGE9ITAscz0hMCk6Ij8iPT09cj8obz0iPyIsbj0iJiIsYT0hMCk6IiYiPT09ciYmKG89IiYiLG49IiYiLGE9ITApO2Zvcih2YXIgdT1bXSxsPXQuc3BsaXQoIiwiKSxjPVtdLGY9e30saD0wO2g8bC5sZW5ndGg7aCsrKXt2YXIgeT1sW2hdLG09bnVsbDtpZih5LmluZGV4T2YoIjoiKSE9PS0xKXt2YXIgdj15LnNwbGl0KCI6Iik7eT12WzBdLG09cGFyc2VJbnQodlsxXSwxMCl9Zm9yKHZhciBfPXt9O2RbeS5jaGFyQXQoeS5sZW5ndGgtMSldOylfW3kuY2hhckF0KHkubGVuZ3RoLTEpXT0hMCx5PXkuc3Vic3RyaW5nKDAseS5sZW5ndGgtMSk7dmFyIGI9e3RydW5jYXRlOm0sbmFtZTp5LHN1ZmZpY2VzOl99O2MucHVzaChiKSxmW3ldPWIsdS5wdXNoKHkpfXZhciBnPWZ1bmN0aW9uKHQpe2Zvcih2YXIgcj0iIix1PTAsbD0wO2w8Yy5sZW5ndGg7bCsrKXt2YXIgZj1jW2xdLHA9dChmLm5hbWUpO2lmKG51bGw9PT1wfHx2b2lkIDA9PT1wfHxBcnJheS5pc0FycmF5KHApJiYwPT09cC5sZW5ndGh8fCJvYmplY3QiPT10eXBlb2YgcCYmMD09PU9iamVjdC5rZXlzKHApLmxlbmd0aCl1Kys7ZWxzZSBpZihyKz1sPT09dT9vOm58fCIsIixBcnJheS5pc0FycmF5KHApKXthJiYocis9Zi5uYW1lKyI9Iik7Zm9yKHZhciBkPTA7ZDxwLmxlbmd0aDtkKyspZD4wJiYocis9Zi5zdWZmaWNlc1siKiJdP258fCIsIjoiLCIsZi5zdWZmaWNlc1siKiJdJiZhJiYocis9Zi5uYW1lKyI9IikpLHIrPWk/ZW5jb2RlVVJJQ29tcG9uZW50KHBbZF0pLnJlcGxhY2UoLyEvZywiJTIxIik6ZShwW2RdKX1lbHNlIGlmKCJvYmplY3QiPT10eXBlb2YgcCl7YSYmIWYuc3VmZmljZXNbIioiXSYmKHIrPWYubmFtZSsiPSIpO3ZhciBoPSEwO2Zvcih2YXIgeSBpbiBwKWh8fChyKz1mLnN1ZmZpY2VzWyIqIl0/bnx8IiwiOiIsIiksaD0hMSxyKz1pP2VuY29kZVVSSUNvbXBvbmVudCh5KS5yZXBsYWNlKC8hL2csIiUyMSIpOmUoeSkscis9Zi5zdWZmaWNlc1siKiJdPyI9IjoiLCIscis9aT9lbmNvZGVVUklDb21wb25lbnQocFt5XSkucmVwbGFjZSgvIS9nLCIlMjEiKTplKHBbeV0pfWVsc2UgYSYmKHIrPWYubmFtZSxzJiYiIj09PXB8fChyKz0iPSIpKSxudWxsIT1mLnRydW5jYXRlJiYocD1wLnN1YnN0cmluZygwLGYudHJ1bmNhdGUpKSxyKz1pP2VuY29kZVVSSUNvbXBvbmVudChwKS5yZXBsYWNlKC8hL2csIiUyMSIpOmUocCl9cmV0dXJuIHJ9O3JldHVybiBnLnZhck5hbWVzPXUse3ByZWZpeDpvLHN1YnN0aXR1dGlvbjpnfX1mdW5jdGlvbiByKGUpe2lmKCEodGhpcyBpbnN0YW5jZW9mIHIpKXJldHVybiBuZXcgcihlKTtmb3IodmFyIG49ZS5zcGxpdCgieyIpLG89W24uc2hpZnQoKV0saT1bXSxhPVtdLHM9W107bi5sZW5ndGg+MDspe3ZhciB1PW4uc2hpZnQoKSxsPXUuc3BsaXQoIn0iKVswXSxjPXUuc3Vic3RyaW5nKGwubGVuZ3RoKzEpLGY9dChsKTthLnB1c2goZi5zdWJzdGl0dXRpb24pLGkucHVzaChmLnByZWZpeCksby5wdXNoKGMpLHM9cy5jb25jYXQoZi5zdWJzdGl0dXRpb24udmFyTmFtZXMpfXRoaXMuZmlsbD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9b1swXSxyPTA7cjxhLmxlbmd0aDtyKyspe3ZhciBuPWFbcl07dCs9bihlKSx0Kz1vW3IrMV19cmV0dXJuIHR9LHRoaXMudmFyTmFtZXM9cyx0aGlzLnRlbXBsYXRlPWV9ZnVuY3Rpb24gbihlLHQpe2lmKGU9PT10KXJldHVybiEwO2lmKGUmJnQmJiJvYmplY3QiPT10eXBlb2YgZSYmIm9iamVjdCI9PXR5cGVvZiB0KXtpZihBcnJheS5pc0FycmF5KGUpIT09QXJyYXkuaXNBcnJheSh0KSlyZXR1cm4hMTtpZihBcnJheS5pc0FycmF5KGUpKXtpZihlLmxlbmd0aCE9PXQubGVuZ3RoKXJldHVybiExO2Zvcih2YXIgcj0wO3I8ZS5sZW5ndGg7cisrKWlmKCFuKGVbcl0sdFtyXSkpcmV0dXJuITF9ZWxzZXt2YXIgbztmb3IobyBpbiBlKWlmKHZvaWQgMD09PXRbb10mJnZvaWQgMCE9PWVbb10pcmV0dXJuITE7Zm9yKG8gaW4gdClpZih2b2lkIDA9PT1lW29dJiZ2b2lkIDAhPT10W29dKXJldHVybiExO2ZvcihvIGluIGUpaWYoIW4oZVtvXSx0W29dKSlyZXR1cm4hMX1yZXR1cm4hMH1yZXR1cm4hMX1mdW5jdGlvbiBvKGUpe3ZhciB0PVN0cmluZyhlKS5yZXBsYWNlKC9eXHMrfFxzKyQvZywiIikubWF0Y2goL14oW146XC8/I10rOik/KFwvXC8oPzpbXjpAXSooPzo6W146QF0qKT9AKT8oKFteOlwvPyNdKikoPzo6KFxkKikpPykpPyhbXj8jXSopKFw/W14jXSopPygjW1xzXFNdKik/Lyk7cmV0dXJuIHQ/e2hyZWY6dFswXXx8IiIscHJvdG9jb2w6dFsxXXx8IiIsYXV0aG9yaXR5OnRbMl18fCIiLGhvc3Q6dFszXXx8IiIsaG9zdG5hbWU6dFs0XXx8IiIscG9ydDp0WzVdfHwiIixwYXRobmFtZTp0WzZdfHwiIixzZWFyY2g6dFs3XXx8IiIsaGFzaDp0WzhdfHwiIn06bnVsbH1mdW5jdGlvbiBpKGUsdCl7ZnVuY3Rpb24gcihlKXt2YXIgdD1bXTtyZXR1cm4gZS5yZXBsYWNlKC9eKFwuXC4/KFwvfCQpKSsvLCIiKS5yZXBsYWNlKC9cLyhcLihcL3wkKSkrL2csIi8iKS5yZXBsYWNlKC9cL1wuXC4kLywiLy4uLyIpLnJlcGxhY2UoL1wvP1teXC9dKi9nLGZ1bmN0aW9uKGUpeyIvLi4iPT09ZT90LnBvcCgpOnQucHVzaChlKX0pLHQuam9pbigiIikucmVwbGFjZSgvXlwvLywiLyI9PT1lLmNoYXJBdCgwKT8iLyI6IiIpfXJldHVybiB0PW8odHx8IiIpLGU9byhlfHwiIiksdCYmZT8odC5wcm90b2NvbHx8ZS5wcm90b2NvbCkrKHQucHJvdG9jb2x8fHQuYXV0aG9yaXR5P3QuYXV0aG9yaXR5OmUuYXV0aG9yaXR5KStyKHQucHJvdG9jb2x8fHQuYXV0aG9yaXR5fHwiLyI9PT10LnBhdGhuYW1lLmNoYXJBdCgwKT90LnBhdGhuYW1lOnQucGF0aG5hbWU/KGUuYXV0aG9yaXR5JiYhZS5wYXRobmFtZT8iLyI6IiIpK2UucGF0aG5hbWUuc2xpY2UoMCxlLnBhdGhuYW1lLmxhc3RJbmRleE9mKCIvIikrMSkrdC5wYXRobmFtZTplLnBhdGhuYW1lKSsodC5wcm90b2NvbHx8dC5hdXRob3JpdHl8fHQucGF0aG5hbWU/dC5zZWFyY2g6dC5zZWFyY2h8fGUuc2VhcmNoKSt0Lmhhc2g6bnVsbH1mdW5jdGlvbiBhKGUpe3JldHVybiBlLnNwbGl0KCIjIilbMF19ZnVuY3Rpb24gcyhlLHQpe2lmKGUmJiJvYmplY3QiPT10eXBlb2YgZSlpZih2b2lkIDA9PT10P3Q9ZS5pZDoic3RyaW5nIj09dHlwZW9mIGUuaWQmJih0PWkodCxlLmlkKSxlLmlkPXQpLEFycmF5LmlzQXJyYXkoZSkpZm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspcyhlW3JdLHQpO2Vsc2V7InN0cmluZyI9PXR5cGVvZiBlLiRyZWYmJihlLiRyZWY9aSh0LGUuJHJlZikpO2Zvcih2YXIgbiBpbiBlKSJlbnVtIiE9PW4mJnMoZVtuXSx0KX19ZnVuY3Rpb24gdShlKXtlPWV8fCJlbiI7dmFyIHQ9RVtlXTtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHI9dFtlLmNvZGVdfHxnW2UuY29kZV07aWYoInN0cmluZyIhPXR5cGVvZiByKXJldHVybiJVbmtub3duIGVycm9yIGNvZGUgIitlLmNvZGUrIjogIitKU09OLnN0cmluZ2lmeShlLm1lc3NhZ2VQYXJhbXMpO3ZhciBuPWUucGFyYW1zO3JldHVybiByLnJlcGxhY2UoL1x7KFtee31dKilcfS9nLGZ1bmN0aW9uKGUsdCl7dmFyIHI9blt0XTtyZXR1cm4ic3RyaW5nIj09dHlwZW9mIHJ8fCJudW1iZXIiPT10eXBlb2Ygcj9yOmV9KX19ZnVuY3Rpb24gbChlLHQscixuLG8pe2lmKEVycm9yLmNhbGwodGhpcyksdm9pZCAwPT09ZSl0aHJvdyBuZXcgRXJyb3IoIk5vIGVycm9yIGNvZGUgc3VwcGxpZWQ6ICIrbik7dGhpcy5tZXNzYWdlPSIiLHRoaXMucGFyYW1zPXQsdGhpcy5jb2RlPWUsdGhpcy5kYXRhUGF0aD1yfHwiIix0aGlzLnNjaGVtYVBhdGg9bnx8IiIsdGhpcy5zdWJFcnJvcnM9b3x8bnVsbDt2YXIgaT1uZXcgRXJyb3IodGhpcy5tZXNzYWdlKTtpZih0aGlzLnN0YWNrPWkuc3RhY2t8fGkuc3RhY2t0cmFjZSwhdGhpcy5zdGFjayl0cnl7dGhyb3cgaX1jYXRjaChpKXt0aGlzLnN0YWNrPWkuc3RhY2t8fGkuc3RhY2t0cmFjZX19ZnVuY3Rpb24gYyhlLHQpe2lmKHQuc3Vic3RyaW5nKDAsZS5sZW5ndGgpPT09ZSl7dmFyIHI9dC5zdWJzdHJpbmcoZS5sZW5ndGgpO2lmKHQubGVuZ3RoPjAmJiIvIj09PXQuY2hhckF0KGUubGVuZ3RoLTEpfHwiIyI9PT1yLmNoYXJBdCgwKXx8Ij8iPT09ci5jaGFyQXQoMCkpcmV0dXJuITB9cmV0dXJuITF9ZnVuY3Rpb24gZihlKXt2YXIgdCxyLG49bmV3IGgsbz17c2V0RXJyb3JSZXBvcnRlcjpmdW5jdGlvbihlKXtyZXR1cm4ic3RyaW5nIj09dHlwZW9mIGU/dGhpcy5sYW5ndWFnZShlKToocj1lLCEwKX0sYWRkRm9ybWF0OmZ1bmN0aW9uKCl7bi5hZGRGb3JtYXQuYXBwbHkobixhcmd1bWVudHMpfSxsYW5ndWFnZTpmdW5jdGlvbihlKXtyZXR1cm4gZT8oRVtlXXx8KGU9ZS5zcGxpdCgiLSIpWzBdKSwhIUVbZV0mJih0PWUsZSkpOnR9LGFkZExhbmd1YWdlOmZ1bmN0aW9uKGUsdCl7dmFyIHI7Zm9yKHIgaW4gdil0W3JdJiYhdFt2W3JdXSYmKHRbdltyXV09dFtyXSk7dmFyIG49ZS5zcGxpdCgiLSIpWzBdO2lmKEVbbl0pe0VbZV09T2JqZWN0LmNyZWF0ZShFW25dKTtmb3IociBpbiB0KSJ1bmRlZmluZWQiPT10eXBlb2YgRVtuXVtyXSYmKEVbbl1bcl09dFtyXSksRVtlXVtyXT10W3JdfWVsc2UgRVtlXT10LEVbbl09dDtyZXR1cm4gdGhpc30sZnJlc2hBcGk6ZnVuY3Rpb24oZSl7dmFyIHQ9ZigpO3JldHVybiBlJiZ0Lmxhbmd1YWdlKGUpLHR9LHZhbGlkYXRlOmZ1bmN0aW9uKGUsbyxpLGEpe3ZhciBzPXUodCksbD1yP2Z1bmN0aW9uKGUsdCxuKXtyZXR1cm4gcihlLHQsbil8fHMoZSx0LG4pfTpzLGM9bmV3IGgobiwoITEpLGwsaSxhKTsic3RyaW5nIj09dHlwZW9mIG8mJihvPXskcmVmOm99KSxjLmFkZFNjaGVtYSgiIixvKTt2YXIgZj1jLnZhbGlkYXRlQWxsKGUsbyxudWxsLG51bGwsIiIpO3JldHVybiFmJiZhJiYoZj1jLmJhblVua25vd25Qcm9wZXJ0aWVzKGUsbykpLHRoaXMuZXJyb3I9Zix0aGlzLm1pc3Npbmc9Yy5taXNzaW5nLHRoaXMudmFsaWQ9bnVsbD09PWYsdGhpcy52YWxpZH0sdmFsaWRhdGVSZXN1bHQ6ZnVuY3Rpb24oKXt2YXIgZT17fTtyZXR1cm4gdGhpcy52YWxpZGF0ZS5hcHBseShlLGFyZ3VtZW50cyksZX0sdmFsaWRhdGVNdWx0aXBsZTpmdW5jdGlvbihlLG8saSxhKXt2YXIgcz11KHQpLGw9cj9mdW5jdGlvbihlLHQsbil7cmV0dXJuIHIoZSx0LG4pfHxzKGUsdCxuKX06cyxjPW5ldyBoKG4sKCEwKSxsLGksYSk7InN0cmluZyI9PXR5cGVvZiBvJiYobz17JHJlZjpvfSksYy5hZGRTY2hlbWEoIiIsbyksYy52YWxpZGF0ZUFsbChlLG8sbnVsbCxudWxsLCIiKSxhJiZjLmJhblVua25vd25Qcm9wZXJ0aWVzKGUsbyk7dmFyIGY9e307cmV0dXJuIGYuZXJyb3JzPWMuZXJyb3JzLGYubWlzc2luZz1jLm1pc3NpbmcsZi52YWxpZD0wPT09Zi5lcnJvcnMubGVuZ3RoLGZ9LGFkZFNjaGVtYTpmdW5jdGlvbigpe3JldHVybiBuLmFkZFNjaGVtYS5hcHBseShuLGFyZ3VtZW50cyl9LGdldFNjaGVtYTpmdW5jdGlvbigpe3JldHVybiBuLmdldFNjaGVtYS5hcHBseShuLGFyZ3VtZW50cyl9LGdldFNjaGVtYU1hcDpmdW5jdGlvbigpe3JldHVybiBuLmdldFNjaGVtYU1hcC5hcHBseShuLGFyZ3VtZW50cyl9LGdldFNjaGVtYVVyaXM6ZnVuY3Rpb24oKXtyZXR1cm4gbi5nZXRTY2hlbWFVcmlzLmFwcGx5KG4sYXJndW1lbnRzKX0sZ2V0TWlzc2luZ1VyaXM6ZnVuY3Rpb24oKXtyZXR1cm4gbi5nZXRNaXNzaW5nVXJpcy5hcHBseShuLGFyZ3VtZW50cyl9LGRyb3BTY2hlbWFzOmZ1bmN0aW9uKCl7bi5kcm9wU2NoZW1hcy5hcHBseShuLGFyZ3VtZW50cyl9LGRlZmluZUtleXdvcmQ6ZnVuY3Rpb24oKXtuLmRlZmluZUtleXdvcmQuYXBwbHkobixhcmd1bWVudHMpfSxkZWZpbmVFcnJvcjpmdW5jdGlvbihlLHQscil7aWYoInN0cmluZyIhPXR5cGVvZiBlfHwhL15bQS1aXSsoX1tBLVpdKykqJC8udGVzdChlKSl0aHJvdyBuZXcgRXJyb3IoIkNvZGUgbmFtZSBtdXN0IGJlIGEgc3RyaW5nIGluIFVQUEVSX0NBU0VfV0lUSF9VTkRFUlNDT1JFUyIpO2lmKCJudW1iZXIiIT10eXBlb2YgdHx8dCUxIT09MHx8dDwxZTQpdGhyb3cgbmV3IEVycm9yKCJDb2RlIG51bWJlciBtdXN0IGJlIGFuIGludGVnZXIgPiAxMDAwMCIpO2lmKCJ1bmRlZmluZWQiIT10eXBlb2YgdltlXSl0aHJvdyBuZXcgRXJyb3IoIkVycm9yIGFscmVhZHkgZGVmaW5lZDogIitlKyIgYXMgIit2W2VdKTtpZigidW5kZWZpbmVkIiE9dHlwZW9mIF9bdF0pdGhyb3cgbmV3IEVycm9yKCJFcnJvciBjb2RlIGFscmVhZHkgdXNlZDogIitfW3RdKyIgYXMgIit0KTt2W2VdPXQsX1t0XT1lLGdbZV09Z1t0XT1yO2Zvcih2YXIgbiBpbiBFKXt2YXIgbz1FW25dO29bZV0mJihvW3RdPW9bdF18fG9bZV0pfX0scmVzZXQ6ZnVuY3Rpb24oKXtuLnJlc2V0KCksdGhpcy5lcnJvcj1udWxsLHRoaXMubWlzc2luZz1bXSx0aGlzLnZhbGlkPSEwfSxtaXNzaW5nOltdLGVycm9yOm51bGwsdmFsaWQ6ITAsbm9ybVNjaGVtYTpzLHJlc29sdmVVcmw6aSxnZXREb2N1bWVudFVyaTphLGVycm9yQ29kZXM6dn07cmV0dXJuIG8ubGFuZ3VhZ2UoZXx8ImVuIiksb31PYmplY3Qua2V5c3x8KE9iamVjdC5rZXlzPWZ1bmN0aW9uKCl7dmFyIGU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSx0PSF7dG9TdHJpbmc6bnVsbH0ucHJvcGVydHlJc0VudW1lcmFibGUoInRvU3RyaW5nIikscj1bInRvU3RyaW5nIiwidG9Mb2NhbGVTdHJpbmciLCJ2YWx1ZU9mIiwiaGFzT3duUHJvcGVydHkiLCJpc1Byb3RvdHlwZU9mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJjb25zdHJ1Y3RvciJdLG49ci5sZW5ndGg7cmV0dXJuIGZ1bmN0aW9uKG8pe2lmKCJvYmplY3QiIT10eXBlb2YgbyYmImZ1bmN0aW9uIiE9dHlwZW9mIG98fG51bGw9PT1vKXRocm93IG5ldyBUeXBlRXJyb3IoIk9iamVjdC5rZXlzIGNhbGxlZCBvbiBub24tb2JqZWN0Iik7dmFyIGk9W107Zm9yKHZhciBhIGluIG8pZS5jYWxsKG8sYSkmJmkucHVzaChhKTtpZih0KWZvcih2YXIgcz0wO3M8bjtzKyspZS5jYWxsKG8scltzXSkmJmkucHVzaChyW3NdKTtyZXR1cm4gaX19KCkpLE9iamVjdC5jcmVhdGV8fChPYmplY3QuY3JlYXRlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe31yZXR1cm4gZnVuY3Rpb24odCl7aWYoMSE9PWFyZ3VtZW50cy5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKCJPYmplY3QuY3JlYXRlIGltcGxlbWVudGF0aW9uIG9ubHkgYWNjZXB0cyBvbmUgcGFyYW1ldGVyLiIpO3JldHVybiBlLnByb3RvdHlwZT10LG5ldyBlfX0oKSksQXJyYXkuaXNBcnJheXx8KEFycmF5LmlzQXJyYXk9ZnVuY3Rpb24oZSl7cmV0dXJuIltvYmplY3QgQXJyYXldIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKX0pLEFycmF5LnByb3RvdHlwZS5pbmRleE9mfHwoQXJyYXkucHJvdG90eXBlLmluZGV4T2Y9ZnVuY3Rpb24oZSl7aWYobnVsbD09PXRoaXMpdGhyb3cgbmV3IFR5cGVFcnJvcjt2YXIgdD1PYmplY3QodGhpcykscj10Lmxlbmd0aD4+PjA7aWYoMD09PXIpcmV0dXJuLTE7dmFyIG49MDtpZihhcmd1bWVudHMubGVuZ3RoPjEmJihuPU51bWJlcihhcmd1bWVudHNbMV0pLG4hPT1uP249MDowIT09biYmbiE9PTEvMCYmbiE9PS0oMS8wKSYmKG49KG4+MHx8LTEpKk1hdGguZmxvb3IoTWF0aC5hYnMobikpKSksbj49cilyZXR1cm4tMTtmb3IodmFyIG89bj49MD9uOk1hdGgubWF4KHItTWF0aC5hYnMobiksMCk7bzxyO28rKylpZihvIGluIHQmJnRbb109PT1lKXJldHVybiBvO3JldHVybi0xfSksT2JqZWN0LmlzRnJvemVufHwoT2JqZWN0LmlzRnJvemVuPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0idHY0X3Rlc3RfZnJvemVuX2tleSI7ZS5oYXNPd25Qcm9wZXJ0eSh0KTspdCs9TWF0aC5yYW5kb20oKTt0cnl7cmV0dXJuIGVbdF09ITAsZGVsZXRlIGVbdF0sITF9Y2F0Y2gocil7cmV0dXJuITB9fSk7dmFyIHA9eyIrIjohMCwiIyI6ITAsIi4iOiEwLCIvIjohMCwiOyI6ITAsIj8iOiEwLCImIjohMH0sZD17IioiOiEwfTtyLnByb3RvdHlwZT17dG9TdHJpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50ZW1wbGF0ZX0sZmlsbEZyb21PYmplY3Q6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZmlsbChmdW5jdGlvbih0KXtyZXR1cm4gZVt0XX0pfX07dmFyIGg9ZnVuY3Rpb24oZSx0LHIsbixvKXtpZih0aGlzLm1pc3Npbmc9W10sdGhpcy5taXNzaW5nTWFwPXt9LHRoaXMuZm9ybWF0VmFsaWRhdG9ycz1lP09iamVjdC5jcmVhdGUoZS5mb3JtYXRWYWxpZGF0b3JzKTp7fSx0aGlzLnNjaGVtYXM9ZT9PYmplY3QuY3JlYXRlKGUuc2NoZW1hcyk6e30sdGhpcy5jb2xsZWN0TXVsdGlwbGU9dCx0aGlzLmVycm9ycz1bXSx0aGlzLmhhbmRsZUVycm9yPXQ/dGhpcy5jb2xsZWN0RXJyb3I6dGhpcy5yZXR1cm5FcnJvcixuJiYodGhpcy5jaGVja1JlY3Vyc2l2ZT0hMCx0aGlzLnNjYW5uZWQ9W10sdGhpcy5zY2FubmVkRnJvemVuPVtdLHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXM9W10sdGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9ycz1bXSx0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXk9InR2NF92YWxpZGF0aW9uX2lkIix0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXk9InR2NF92YWxpZGF0aW9uX2Vycm9yc19pZCIpLG8mJih0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXM9ITAsdGhpcy5rbm93blByb3BlcnR5UGF0aHM9e30sdGhpcy51bmtub3duUHJvcGVydHlQYXRocz17fSksdGhpcy5lcnJvclJlcG9ydGVyPXJ8fHUoImVuIiksInN0cmluZyI9PXR5cGVvZiB0aGlzLmVycm9yUmVwb3J0ZXIpdGhyb3cgbmV3IEVycm9yKCJkZWJ1ZyIpO2lmKHRoaXMuZGVmaW5lZEtleXdvcmRzPXt9LGUpZm9yKHZhciBpIGluIGUuZGVmaW5lZEtleXdvcmRzKXRoaXMuZGVmaW5lZEtleXdvcmRzW2ldPWUuZGVmaW5lZEtleXdvcmRzW2ldLnNsaWNlKDApfTtoLnByb3RvdHlwZS5kZWZpbmVLZXl3b3JkPWZ1bmN0aW9uKGUsdCl7dGhpcy5kZWZpbmVkS2V5d29yZHNbZV09dGhpcy5kZWZpbmVkS2V5d29yZHNbZV18fFtdLHRoaXMuZGVmaW5lZEtleXdvcmRzW2VdLnB1c2godCl9LGgucHJvdG90eXBlLmNyZWF0ZUVycm9yPWZ1bmN0aW9uKGUsdCxyLG4sbyxpLGEpe3ZhciBzPW5ldyBsKGUsdCxyLG4sbyk7cmV0dXJuIHMubWVzc2FnZT10aGlzLmVycm9yUmVwb3J0ZXIocyxpLGEpLHN9LGgucHJvdG90eXBlLnJldHVybkVycm9yPWZ1bmN0aW9uKGUpe3JldHVybiBlfSxoLnByb3RvdHlwZS5jb2xsZWN0RXJyb3I9ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJnRoaXMuZXJyb3JzLnB1c2goZSksbnVsbH0saC5wcm90b3R5cGUucHJlZml4RXJyb3JzPWZ1bmN0aW9uKGUsdCxyKXtmb3IodmFyIG49ZTtuPHRoaXMuZXJyb3JzLmxlbmd0aDtuKyspdGhpcy5lcnJvcnNbbl09dGhpcy5lcnJvcnNbbl0ucHJlZml4V2l0aCh0LHIpO3JldHVybiB0aGlzfSxoLnByb3RvdHlwZS5iYW5Vbmtub3duUHJvcGVydGllcz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzKXt2YXIgbj10aGlzLmNyZWF0ZUVycm9yKHYuVU5LTk9XTl9QUk9QRVJUWSx7cGF0aDpyfSxyLCIiLG51bGwsZSx0KSxvPXRoaXMuaGFuZGxlRXJyb3Iobik7aWYobylyZXR1cm4gb31yZXR1cm4gbnVsbH0saC5wcm90b3R5cGUuYWRkRm9ybWF0PWZ1bmN0aW9uKGUsdCl7aWYoIm9iamVjdCI9PXR5cGVvZiBlKXtmb3IodmFyIHIgaW4gZSl0aGlzLmFkZEZvcm1hdChyLGVbcl0pO3JldHVybiB0aGlzfXRoaXMuZm9ybWF0VmFsaWRhdG9yc1tlXT10fSxoLnByb3RvdHlwZS5yZXNvbHZlUmVmcz1mdW5jdGlvbihlLHQpe2lmKHZvaWQgMCE9PWUuJHJlZil7aWYodD10fHx7fSx0W2UuJHJlZl0pcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Iodi5DSVJDVUxBUl9SRUZFUkVOQ0Use3VybHM6T2JqZWN0LmtleXModCkuam9pbigiLCAiKX0sIiIsIiIsbnVsbCx2b2lkIDAsZSk7dFtlLiRyZWZdPSEwLGU9dGhpcy5nZXRTY2hlbWEoZS4kcmVmLHQpfXJldHVybiBlfSxoLnByb3RvdHlwZS5nZXRTY2hlbWE9ZnVuY3Rpb24oZSx0KXt2YXIgcjtpZih2b2lkIDAhPT10aGlzLnNjaGVtYXNbZV0pcmV0dXJuIHI9dGhpcy5zY2hlbWFzW2VdLHRoaXMucmVzb2x2ZVJlZnMocix0KTt2YXIgbj1lLG89IiI7aWYoZS5pbmRleE9mKCIjIikhPT0tMSYmKG89ZS5zdWJzdHJpbmcoZS5pbmRleE9mKCIjIikrMSksbj1lLnN1YnN0cmluZygwLGUuaW5kZXhPZigiIyIpKSksIm9iamVjdCI9PXR5cGVvZiB0aGlzLnNjaGVtYXNbbl0pe3I9dGhpcy5zY2hlbWFzW25dO3ZhciBpPWRlY29kZVVSSUNvbXBvbmVudChvKTtpZigiIj09PWkpcmV0dXJuIHRoaXMucmVzb2x2ZVJlZnMocix0KTtpZigiLyIhPT1pLmNoYXJBdCgwKSlyZXR1cm47Zm9yKHZhciBhPWkuc3BsaXQoIi8iKS5zbGljZSgxKSxzPTA7czxhLmxlbmd0aDtzKyspe3ZhciB1PWFbc10ucmVwbGFjZSgvfjEvZywiLyIpLnJlcGxhY2UoL34wL2csIn4iKTtpZih2b2lkIDA9PT1yW3VdKXtyPXZvaWQgMDticmVha31yPXJbdV19aWYodm9pZCAwIT09cilyZXR1cm4gdGhpcy5yZXNvbHZlUmVmcyhyLHQpfXZvaWQgMD09PXRoaXMubWlzc2luZ1tuXSYmKHRoaXMubWlzc2luZy5wdXNoKG4pLHRoaXMubWlzc2luZ1tuXT1uLHRoaXMubWlzc2luZ01hcFtuXT1uKX0saC5wcm90b3R5cGUuc2VhcmNoU2NoZW1hcz1mdW5jdGlvbihlLHQpe2lmKEFycmF5LmlzQXJyYXkoZSkpZm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspdGhpcy5zZWFyY2hTY2hlbWFzKGVbcl0sdCk7ZWxzZSBpZihlJiYib2JqZWN0Ij09dHlwZW9mIGUpeyJzdHJpbmciPT10eXBlb2YgZS5pZCYmYyh0LGUuaWQpJiZ2b2lkIDA9PT10aGlzLnNjaGVtYXNbZS5pZF0mJih0aGlzLnNjaGVtYXNbZS5pZF09ZSk7Zm9yKHZhciBuIGluIGUpaWYoImVudW0iIT09bilpZigib2JqZWN0Ij09dHlwZW9mIGVbbl0pdGhpcy5zZWFyY2hTY2hlbWFzKGVbbl0sdCk7ZWxzZSBpZigiJHJlZiI9PT1uKXt2YXIgbz1hKGVbbl0pO28mJnZvaWQgMD09PXRoaXMuc2NoZW1hc1tvXSYmdm9pZCAwPT09dGhpcy5taXNzaW5nTWFwW29dJiYodGhpcy5taXNzaW5nTWFwW29dPW8pfX19LGgucHJvdG90eXBlLmFkZFNjaGVtYT1mdW5jdGlvbihlLHQpe2lmKCJzdHJpbmciIT10eXBlb2YgZXx8InVuZGVmaW5lZCI9PXR5cGVvZiB0KXtpZigib2JqZWN0IiE9dHlwZW9mIGV8fCJzdHJpbmciIT10eXBlb2YgZS5pZClyZXR1cm47dD1lLGU9dC5pZH1lPT09YShlKSsiIyImJihlPWEoZSkpLHRoaXMuc2NoZW1hc1tlXT10LGRlbGV0ZSB0aGlzLm1pc3NpbmdNYXBbZV0scyh0LGUpLHRoaXMuc2VhcmNoU2NoZW1hcyh0LGUpfSxoLnByb3RvdHlwZS5nZXRTY2hlbWFNYXA9ZnVuY3Rpb24oKXt2YXIgZT17fTtmb3IodmFyIHQgaW4gdGhpcy5zY2hlbWFzKWVbdF09dGhpcy5zY2hlbWFzW3RdO3JldHVybiBlfSxoLnByb3RvdHlwZS5nZXRTY2hlbWFVcmlzPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO2Zvcih2YXIgciBpbiB0aGlzLnNjaGVtYXMpZSYmIWUudGVzdChyKXx8dC5wdXNoKHIpO3JldHVybiB0fSxoLnByb3RvdHlwZS5nZXRNaXNzaW5nVXJpcz1mdW5jdGlvbihlKXt2YXIgdD1bXTtmb3IodmFyIHIgaW4gdGhpcy5taXNzaW5nTWFwKWUmJiFlLnRlc3Qocil8fHQucHVzaChyKTtyZXR1cm4gdH0saC5wcm90b3R5cGUuZHJvcFNjaGVtYXM9ZnVuY3Rpb24oKXt0aGlzLnNjaGVtYXM9e30sdGhpcy5yZXNldCgpfSxoLnByb3RvdHlwZS5yZXNldD1mdW5jdGlvbigpe3RoaXMubWlzc2luZz1bXSx0aGlzLm1pc3NpbmdNYXA9e30sdGhpcy5lcnJvcnM9W119LGgucHJvdG90eXBlLnZhbGlkYXRlQWxsPWZ1bmN0aW9uKGUsdCxyLG4sbyl7dmFyIGk7aWYodD10aGlzLnJlc29sdmVSZWZzKHQpLCF0KXJldHVybiBudWxsO2lmKHQgaW5zdGFuY2VvZiBsKXJldHVybiB0aGlzLmVycm9ycy5wdXNoKHQpLHQ7dmFyIGEscz10aGlzLmVycm9ycy5sZW5ndGgsdT1udWxsLGM9bnVsbDtpZih0aGlzLmNoZWNrUmVjdXJzaXZlJiZlJiYib2JqZWN0Ij09dHlwZW9mIGUpe2lmKGk9IXRoaXMuc2Nhbm5lZC5sZW5ndGgsZVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldKXt2YXIgZj1lW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV0uaW5kZXhPZih0KTtpZihmIT09LTEpcmV0dXJuIHRoaXMuZXJyb3JzPXRoaXMuZXJyb3JzLmNvbmNhdChlW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV1bZl0pLG51bGx9aWYoT2JqZWN0LmlzRnJvemVuKGUpJiYoYT10aGlzLnNjYW5uZWRGcm96ZW4uaW5kZXhPZihlKSxhIT09LTEpKXt2YXIgcD10aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzW2FdLmluZGV4T2YodCk7aWYocCE9PS0xKXJldHVybiB0aGlzLmVycm9ycz10aGlzLmVycm9ycy5jb25jYXQodGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9yc1thXVtwXSksbnVsbH1pZih0aGlzLnNjYW5uZWQucHVzaChlKSxPYmplY3QuaXNGcm96ZW4oZSkpYT09PS0xJiYoYT10aGlzLnNjYW5uZWRGcm96ZW4ubGVuZ3RoLHRoaXMuc2Nhbm5lZEZyb3plbi5wdXNoKGUpLHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXMucHVzaChbXSkpLHU9dGhpcy5zY2FubmVkRnJvemVuU2NoZW1hc1thXS5sZW5ndGgsdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hc1thXVt1XT10LHRoaXMuc2Nhbm5lZEZyb3plblZhbGlkYXRpb25FcnJvcnNbYV1bdV09W107ZWxzZXtpZighZVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldKXRyeXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXkse3ZhbHVlOltdLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHRoaXMudmFsaWRhdGlvbkVycm9yc0tleSx7dmFsdWU6W10sY29uZmlndXJhYmxlOiEwfSl9Y2F0Y2goZCl7ZVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldPVtdLGVbdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5XT1bXX1jPWVbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XS5sZW5ndGgsZVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldW2NdPXQsZVt0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXldW2NdPVtdfX12YXIgaD10aGlzLmVycm9ycy5sZW5ndGgseT10aGlzLnZhbGlkYXRlQmFzaWMoZSx0LG8pfHx0aGlzLnZhbGlkYXRlTnVtZXJpYyhlLHQsbyl8fHRoaXMudmFsaWRhdGVTdHJpbmcoZSx0LG8pfHx0aGlzLnZhbGlkYXRlQXJyYXkoZSx0LG8pfHx0aGlzLnZhbGlkYXRlT2JqZWN0KGUsdCxvKXx8dGhpcy52YWxpZGF0ZUNvbWJpbmF0aW9ucyhlLHQsbyl8fHRoaXMudmFsaWRhdGVIeXBlcm1lZGlhKGUsdCxvKXx8dGhpcy52YWxpZGF0ZUZvcm1hdChlLHQsbyl8fHRoaXMudmFsaWRhdGVEZWZpbmVkS2V5d29yZHMoZSx0LG8pfHxudWxsO2lmKGkpe2Zvcig7dGhpcy5zY2FubmVkLmxlbmd0aDspe3ZhciBtPXRoaXMuc2Nhbm5lZC5wb3AoKTtkZWxldGUgbVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldfXRoaXMuc2Nhbm5lZEZyb3plbj1bXSx0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzPVtdfWlmKHl8fGghPT10aGlzLmVycm9ycy5sZW5ndGgpZm9yKDtyJiZyLmxlbmd0aHx8biYmbi5sZW5ndGg7KXt2YXIgdj1yJiZyLmxlbmd0aD8iIityLnBvcCgpOm51bGwsXz1uJiZuLmxlbmd0aD8iIituLnBvcCgpOm51bGw7eSYmKHk9eS5wcmVmaXhXaXRoKHYsXykpLHRoaXMucHJlZml4RXJyb3JzKGgsdixfKX1yZXR1cm4gbnVsbCE9PXU/dGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9yc1thXVt1XT10aGlzLmVycm9ycy5zbGljZShzKTpudWxsIT09YyYmKGVbdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5XVtjXT10aGlzLmVycm9ycy5zbGljZShzKSksdGhpcy5oYW5kbGVFcnJvcih5KX0saC5wcm90b3R5cGUudmFsaWRhdGVGb3JtYXQ9ZnVuY3Rpb24oZSx0KXtpZigic3RyaW5nIiE9dHlwZW9mIHQuZm9ybWF0fHwhdGhpcy5mb3JtYXRWYWxpZGF0b3JzW3QuZm9ybWF0XSlyZXR1cm4gbnVsbDt2YXIgcj10aGlzLmZvcm1hdFZhbGlkYXRvcnNbdC5mb3JtYXRdLmNhbGwobnVsbCxlLHQpO3JldHVybiJzdHJpbmciPT10eXBlb2Ygcnx8Im51bWJlciI9PXR5cGVvZiByP3RoaXMuY3JlYXRlRXJyb3Iodi5GT1JNQVRfQ1VTVE9NLHttZXNzYWdlOnJ9LCIiLCIvZm9ybWF0IixudWxsLGUsdCk6ciYmIm9iamVjdCI9PXR5cGVvZiByP3RoaXMuY3JlYXRlRXJyb3Iodi5GT1JNQVRfQ1VTVE9NLHttZXNzYWdlOnIubWVzc2FnZXx8Ij8ifSxyLmRhdGFQYXRofHwiIixyLnNjaGVtYVBhdGh8fCIvZm9ybWF0IixudWxsLGUsdCk6bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVEZWZpbmVkS2V5d29yZHM9ZnVuY3Rpb24oZSx0LHIpe2Zvcih2YXIgbiBpbiB0aGlzLmRlZmluZWRLZXl3b3JkcylpZigidW5kZWZpbmVkIiE9dHlwZW9mIHRbbl0pZm9yKHZhciBvPXRoaXMuZGVmaW5lZEtleXdvcmRzW25dLGk9MDtpPG8ubGVuZ3RoO2krKyl7dmFyIGE9b1tpXSxzPWEoZSx0W25dLHQscik7aWYoInN0cmluZyI9PXR5cGVvZiBzfHwibnVtYmVyIj09dHlwZW9mIHMpcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Iodi5LRVlXT1JEX0NVU1RPTSx7a2V5Om4sbWVzc2FnZTpzfSwiIiwiIixudWxsLGUsdCkucHJlZml4V2l0aChudWxsLG4pO2lmKHMmJiJvYmplY3QiPT10eXBlb2Ygcyl7dmFyIHU9cy5jb2RlO2lmKCJzdHJpbmciPT10eXBlb2YgdSl7aWYoIXZbdV0pdGhyb3cgbmV3IEVycm9yKCJVbmRlZmluZWQgZXJyb3IgY29kZSAodXNlIGRlZmluZUVycm9yKTogIit1KTt1PXZbdV19ZWxzZSJudW1iZXIiIT10eXBlb2YgdSYmKHU9di5LRVlXT1JEX0NVU1RPTSk7dmFyIGw9Im9iamVjdCI9PXR5cGVvZiBzLm1lc3NhZ2U/cy5tZXNzYWdlOntrZXk6bixtZXNzYWdlOnMubWVzc2FnZXx8Ij8ifSxjPXMuc2NoZW1hUGF0aHx8Ii8iK24ucmVwbGFjZSgvfi9nLCJ+MCIpLnJlcGxhY2UoL1wvL2csIn4xIik7cmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IodSxsLHMuZGF0YVBhdGh8fG51bGwsYyxudWxsLGUsdCl9fXJldHVybiBudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZUJhc2ljPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbjtyZXR1cm4obj10aGlzLnZhbGlkYXRlVHlwZShlLHQscikpP24ucHJlZml4V2l0aChudWxsLCJ0eXBlIik6KG49dGhpcy52YWxpZGF0ZUVudW0oZSx0LHIpKT9uLnByZWZpeFdpdGgobnVsbCwidHlwZSIpOm51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlVHlwZT1mdW5jdGlvbihlLHQpe2lmKHZvaWQgMD09PXQudHlwZSlyZXR1cm4gbnVsbDt2YXIgcj10eXBlb2YgZTtudWxsPT09ZT9yPSJudWxsIjpBcnJheS5pc0FycmF5KGUpJiYocj0iYXJyYXkiKTt2YXIgbj10LnR5cGU7QXJyYXkuaXNBcnJheShuKXx8KG49W25dKTtmb3IodmFyIG89MDtvPG4ubGVuZ3RoO28rKyl7dmFyIGk9bltvXTtpZihpPT09cnx8ImludGVnZXIiPT09aSYmIm51bWJlciI9PT1yJiZlJTE9PT0wKXJldHVybiBudWxsfXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHYuSU5WQUxJRF9UWVBFLHt0eXBlOnIsZXhwZWN0ZWQ6bi5qb2luKCIvIil9LCIiLCIiLG51bGwsZSx0KX0saC5wcm90b3R5cGUudmFsaWRhdGVFbnVtPWZ1bmN0aW9uKGUsdCl7aWYodm9pZCAwPT09dFsiZW51bSJdKXJldHVybiBudWxsO2Zvcih2YXIgcj0wO3I8dFsiZW51bSJdLmxlbmd0aDtyKyspe3ZhciBvPXRbImVudW0iXVtyXTtpZihuKGUsbykpcmV0dXJuIG51bGx9cmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Iodi5FTlVNX01JU01BVENILHt2YWx1ZToidW5kZWZpbmVkIiE9dHlwZW9mIEpTT04/SlNPTi5zdHJpbmdpZnkoZSk6ZX0sIiIsIiIsbnVsbCxlLHQpfSxoLnByb3RvdHlwZS52YWxpZGF0ZU51bWVyaWM9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0aGlzLnZhbGlkYXRlTXVsdGlwbGVPZihlLHQscil8fHRoaXMudmFsaWRhdGVNaW5NYXgoZSx0LHIpfHx0aGlzLnZhbGlkYXRlTmFOKGUsdCxyKXx8bnVsbH07dmFyIHk9TWF0aC5wb3coMiwtNTEpLG09MS15O2gucHJvdG90eXBlLnZhbGlkYXRlTXVsdGlwbGVPZj1mdW5jdGlvbihlLHQpe3ZhciByPXQubXVsdGlwbGVPZnx8dC5kaXZpc2libGVCeTtpZih2b2lkIDA9PT1yKXJldHVybiBudWxsO2lmKCJudW1iZXIiPT10eXBlb2YgZSl7dmFyIG49ZS9yJTE7aWYobj49eSYmbjxtKXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHYuTlVNQkVSX01VTFRJUExFX09GLHt2YWx1ZTplLG11bHRpcGxlT2Y6cn0sIiIsIiIsbnVsbCxlLHQpfXJldHVybiBudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZU1pbk1heD1mdW5jdGlvbihlLHQpe2lmKCJudW1iZXIiIT10eXBlb2YgZSlyZXR1cm4gbnVsbDtpZih2b2lkIDAhPT10Lm1pbmltdW0pe2lmKGU8dC5taW5pbXVtKXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHYuTlVNQkVSX01JTklNVU0se3ZhbHVlOmUsbWluaW11bTp0Lm1pbmltdW19LCIiLCIvbWluaW11bSIsbnVsbCxlLHQpO2lmKHQuZXhjbHVzaXZlTWluaW11bSYmZT09PXQubWluaW11bSlyZXR1cm4gdGhpcy5jcmVhdGVFcnJvcih2Lk5VTUJFUl9NSU5JTVVNX0VYQ0xVU0lWRSx7dmFsdWU6ZSxtaW5pbXVtOnQubWluaW11bX0sIiIsIi9leGNsdXNpdmVNaW5pbXVtIixudWxsLGUsdCl9aWYodm9pZCAwIT09dC5tYXhpbXVtKXtpZihlPnQubWF4aW11bSlyZXR1cm4gdGhpcy5jcmVhdGVFcnJvcih2Lk5VTUJFUl9NQVhJTVVNLHt2YWx1ZTplLG1heGltdW06dC5tYXhpbXVtfSwiIiwiL21heGltdW0iLG51bGwsZSx0KTtpZih0LmV4Y2x1c2l2ZU1heGltdW0mJmU9PT10Lm1heGltdW0pcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Iodi5OVU1CRVJfTUFYSU1VTV9FWENMVVNJVkUse3ZhbHVlOmUsbWF4aW11bTp0Lm1heGltdW19LCIiLCIvZXhjbHVzaXZlTWF4aW11bSIsbnVsbCxlLHQpfXJldHVybiBudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZU5hTj1mdW5jdGlvbihlLHQpe3JldHVybiJudW1iZXIiIT10eXBlb2YgZT9udWxsOmlzTmFOKGUpPT09ITB8fGU9PT0xLzB8fGU9PT0tKDEvMCk/dGhpcy5jcmVhdGVFcnJvcih2Lk5VTUJFUl9OT1RfQV9OVU1CRVIse3ZhbHVlOmV9LCIiLCIvdHlwZSIsbnVsbCxlLHQpOm51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlU3RyaW5nPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdGhpcy52YWxpZGF0ZVN0cmluZ0xlbmd0aChlLHQscil8fHRoaXMudmFsaWRhdGVTdHJpbmdQYXR0ZXJuKGUsdCxyKXx8bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVTdHJpbmdMZW5ndGg9ZnVuY3Rpb24oZSx0KXtyZXR1cm4ic3RyaW5nIiE9dHlwZW9mIGU/bnVsbDp2b2lkIDAhPT10Lm1pbkxlbmd0aCYmZS5sZW5ndGg8dC5taW5MZW5ndGg/dGhpcy5jcmVhdGVFcnJvcih2LlNUUklOR19MRU5HVEhfU0hPUlQse2xlbmd0aDplLmxlbmd0aCxtaW5pbXVtOnQubWluTGVuZ3RofSwiIiwiL21pbkxlbmd0aCIsbnVsbCxlLHQpOnZvaWQgMCE9PXQubWF4TGVuZ3RoJiZlLmxlbmd0aD50Lm1heExlbmd0aD90aGlzLmNyZWF0ZUVycm9yKHYuU1RSSU5HX0xFTkdUSF9MT05HLHtsZW5ndGg6ZS5sZW5ndGgsbWF4aW11bTp0Lm1heExlbmd0aH0sIiIsIi9tYXhMZW5ndGgiLG51bGwsZSx0KTpudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZVN0cmluZ1BhdHRlcm49ZnVuY3Rpb24oZSx0KXtpZigic3RyaW5nIiE9dHlwZW9mIGV8fCJzdHJpbmciIT10eXBlb2YgdC5wYXR0ZXJuJiYhKHQucGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkpcmV0dXJuIG51bGw7dmFyIHI7aWYodC5wYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwKXI9dC5wYXR0ZXJuO2Vsc2V7dmFyIG4sbz0iIixpPXQucGF0dGVybi5tYXRjaCgvXlwvKC4rKVwvKFtpbWddKikkLyk7aT8obj1pWzFdLG89aVsyXSk6bj10LnBhdHRlcm4scj1uZXcgUmVnRXhwKG4sbyl9cmV0dXJuIHIudGVzdChlKT9udWxsOnRoaXMuY3JlYXRlRXJyb3Iodi5TVFJJTkdfUEFUVEVSTix7cGF0dGVybjp0LnBhdHRlcm59LCIiLCIvcGF0dGVybiIsbnVsbCxlLHQpfSxoLnByb3RvdHlwZS52YWxpZGF0ZUFycmF5PWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gQXJyYXkuaXNBcnJheShlKT90aGlzLnZhbGlkYXRlQXJyYXlMZW5ndGgoZSx0LHIpfHx0aGlzLnZhbGlkYXRlQXJyYXlVbmlxdWVJdGVtcyhlLHQscil8fHRoaXMudmFsaWRhdGVBcnJheUl0ZW1zKGUsdCxyKXx8bnVsbDpudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZUFycmF5TGVuZ3RoPWZ1bmN0aW9uKGUsdCl7dmFyIHI7cmV0dXJuIHZvaWQgMCE9PXQubWluSXRlbXMmJmUubGVuZ3RoPHQubWluSXRlbXMmJihyPXRoaXMuY3JlYXRlRXJyb3Iodi5BUlJBWV9MRU5HVEhfU0hPUlQse2xlbmd0aDplLmxlbmd0aCxtaW5pbXVtOnQubWluSXRlbXN9LCIiLCIvbWluSXRlbXMiLG51bGwsZSx0KSx0aGlzLmhhbmRsZUVycm9yKHIpKT9yOnZvaWQgMCE9PXQubWF4SXRlbXMmJmUubGVuZ3RoPnQubWF4SXRlbXMmJihyPXRoaXMuY3JlYXRlRXJyb3Iodi5BUlJBWV9MRU5HVEhfTE9ORyx7bGVuZ3RoOmUubGVuZ3RoLG1heGltdW06dC5tYXhJdGVtc30sIiIsIi9tYXhJdGVtcyIsbnVsbCxlLHQpLHRoaXMuaGFuZGxlRXJyb3IocikpP3I6bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVBcnJheVVuaXF1ZUl0ZW1zPWZ1bmN0aW9uKGUsdCl7aWYodC51bmlxdWVJdGVtcylmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKylmb3IodmFyIG89cisxO288ZS5sZW5ndGg7bysrKWlmKG4oZVtyXSxlW29dKSl7dmFyIGk9dGhpcy5jcmVhdGVFcnJvcih2LkFSUkFZX1VOSVFVRSx7bWF0Y2gxOnIsbWF0Y2gyOm99LCIiLCIvdW5pcXVlSXRlbXMiLG51bGwsZSx0KTtpZih0aGlzLmhhbmRsZUVycm9yKGkpKXJldHVybiBpfXJldHVybiBudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZUFycmF5SXRlbXM9ZnVuY3Rpb24oZSx0LHIpe2lmKHZvaWQgMD09PXQuaXRlbXMpcmV0dXJuIG51bGw7dmFyIG4sbztpZihBcnJheS5pc0FycmF5KHQuaXRlbXMpKXtmb3Iobz0wO288ZS5sZW5ndGg7bysrKWlmKG88dC5pdGVtcy5sZW5ndGgpe2lmKG49dGhpcy52YWxpZGF0ZUFsbChlW29dLHQuaXRlbXNbb10sW29dLFsiaXRlbXMiLG9dLHIrIi8iK28pKXJldHVybiBufWVsc2UgaWYodm9pZCAwIT09dC5hZGRpdGlvbmFsSXRlbXMpaWYoImJvb2xlYW4iPT10eXBlb2YgdC5hZGRpdGlvbmFsSXRlbXMpe2lmKCF0LmFkZGl0aW9uYWxJdGVtcyYmKG49dGhpcy5jcmVhdGVFcnJvcih2LkFSUkFZX0FERElUSU9OQUxfSVRFTVMse30sIi8iK28sIi9hZGRpdGlvbmFsSXRlbXMiLG51bGwsZSx0KSx0aGlzLmhhbmRsZUVycm9yKG4pKSlyZXR1cm4gbn1lbHNlIGlmKG49dGhpcy52YWxpZGF0ZUFsbChlW29dLHQuYWRkaXRpb25hbEl0ZW1zLFtvXSxbImFkZGl0aW9uYWxJdGVtcyJdLHIrIi8iK28pKXJldHVybiBufWVsc2UgZm9yKG89MDtvPGUubGVuZ3RoO28rKylpZihuPXRoaXMudmFsaWRhdGVBbGwoZVtvXSx0Lml0ZW1zLFtvXSxbIml0ZW1zIl0scisiLyIrbykpcmV0dXJuIG47cmV0dXJuIG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0PWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4ib2JqZWN0IiE9dHlwZW9mIGV8fG51bGw9PT1lfHxBcnJheS5pc0FycmF5KGUpP251bGw6dGhpcy52YWxpZGF0ZU9iamVjdE1pbk1heFByb3BlcnRpZXMoZSx0LHIpfHx0aGlzLnZhbGlkYXRlT2JqZWN0UmVxdWlyZWRQcm9wZXJ0aWVzKGUsdCxyKXx8dGhpcy52YWxpZGF0ZU9iamVjdFByb3BlcnRpZXMoZSx0LHIpfHx0aGlzLnZhbGlkYXRlT2JqZWN0RGVwZW5kZW5jaWVzKGUsdCxyKXx8bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVPYmplY3RNaW5NYXhQcm9wZXJ0aWVzPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbj1PYmplY3Qua2V5cyhlKTtyZXR1cm4gdm9pZCAwIT09dC5taW5Qcm9wZXJ0aWVzJiZuLmxlbmd0aDx0Lm1pblByb3BlcnRpZXMmJihyPXRoaXMuY3JlYXRlRXJyb3Iodi5PQkpFQ1RfUFJPUEVSVElFU19NSU5JTVVNLHtwcm9wZXJ0eUNvdW50Om4ubGVuZ3RoLG1pbmltdW06dC5taW5Qcm9wZXJ0aWVzfSwiIiwiL21pblByb3BlcnRpZXMiLG51bGwsZSx0KSx0aGlzLmhhbmRsZUVycm9yKHIpKT9yOnZvaWQgMCE9PXQubWF4UHJvcGVydGllcyYmbi5sZW5ndGg+dC5tYXhQcm9wZXJ0aWVzJiYocj10aGlzLmNyZWF0ZUVycm9yKHYuT0JKRUNUX1BST1BFUlRJRVNfTUFYSU1VTSx7cHJvcGVydHlDb3VudDpuLmxlbmd0aCxtYXhpbXVtOnQubWF4UHJvcGVydGllc30sIiIsIi9tYXhQcm9wZXJ0aWVzIixudWxsLGUsdCksdGhpcy5oYW5kbGVFcnJvcihyKSk/cjpudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdFJlcXVpcmVkUHJvcGVydGllcz1mdW5jdGlvbihlLHQpe2lmKHZvaWQgMCE9PXQucmVxdWlyZWQpZm9yKHZhciByPTA7cjx0LnJlcXVpcmVkLmxlbmd0aDtyKyspe3ZhciBuPXQucmVxdWlyZWRbcl07aWYodm9pZCAwPT09ZVtuXSl7dmFyIG89dGhpcy5jcmVhdGVFcnJvcih2Lk9CSkVDVF9SRVFVSVJFRCx7a2V5Om59LCIiLCIvcmVxdWlyZWQvIityLG51bGwsZSx0KTtpZih0aGlzLmhhbmRsZUVycm9yKG8pKXJldHVybiBvfX1yZXR1cm4gbnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVPYmplY3RQcm9wZXJ0aWVzPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbjtmb3IodmFyIG8gaW4gZSl7dmFyIGk9cisiLyIrby5yZXBsYWNlKC9+L2csIn4wIikucmVwbGFjZSgvXC8vZywifjEiKSxhPSExO2lmKHZvaWQgMCE9PXQucHJvcGVydGllcyYmdm9pZCAwIT09dC5wcm9wZXJ0aWVzW29dJiYoYT0hMCxuPXRoaXMudmFsaWRhdGVBbGwoZVtvXSx0LnByb3BlcnRpZXNbb10sW29dLFsicHJvcGVydGllcyIsb10saSkpKXJldHVybiBuO2lmKHZvaWQgMCE9PXQucGF0dGVyblByb3BlcnRpZXMpZm9yKHZhciBzIGluIHQucGF0dGVyblByb3BlcnRpZXMpe3ZhciB1PW5ldyBSZWdFeHAocyk7aWYodS50ZXN0KG8pJiYoYT0hMCxuPXRoaXMudmFsaWRhdGVBbGwoZVtvXSx0LnBhdHRlcm5Qcm9wZXJ0aWVzW3NdLFtvXSxbInBhdHRlcm5Qcm9wZXJ0aWVzIixzXSxpKSkpcmV0dXJuIG59aWYoYSl0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJih0aGlzLmtub3duUHJvcGVydHlQYXRoc1tpXT0hMCxkZWxldGUgdGhpcy51bmtub3duUHJvcGVydHlQYXRoc1tpXSk7ZWxzZSBpZih2b2lkIDAhPT10LmFkZGl0aW9uYWxQcm9wZXJ0aWVzKXtpZih0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJih0aGlzLmtub3duUHJvcGVydHlQYXRoc1tpXT0hMCxkZWxldGUgdGhpcy51bmtub3duUHJvcGVydHlQYXRoc1tpXSksImJvb2xlYW4iPT10eXBlb2YgdC5hZGRpdGlvbmFsUHJvcGVydGllcyl7aWYoIXQuYWRkaXRpb25hbFByb3BlcnRpZXMmJihuPXRoaXMuY3JlYXRlRXJyb3Iodi5PQkpFQ1RfQURESVRJT05BTF9QUk9QRVJUSUVTLHtrZXk6b30sIiIsIi9hZGRpdGlvbmFsUHJvcGVydGllcyIsbnVsbCxlLHQpLnByZWZpeFdpdGgobyxudWxsKSx0aGlzLmhhbmRsZUVycm9yKG4pKSlyZXR1cm4gbn1lbHNlIGlmKG49dGhpcy52YWxpZGF0ZUFsbChlW29dLHQuYWRkaXRpb25hbFByb3BlcnRpZXMsW29dLFsiYWRkaXRpb25hbFByb3BlcnRpZXMiXSxpKSlyZXR1cm4gbn1lbHNlIHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmIXRoaXMua25vd25Qcm9wZXJ0eVBhdGhzW2ldJiYodGhpcy51bmtub3duUHJvcGVydHlQYXRoc1tpXT0hMCl9cmV0dXJuIG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0RGVwZW5kZW5jaWVzPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbjtpZih2b2lkIDAhPT10LmRlcGVuZGVuY2llcylmb3IodmFyIG8gaW4gdC5kZXBlbmRlbmNpZXMpaWYodm9pZCAwIT09ZVtvXSl7dmFyIGk9dC5kZXBlbmRlbmNpZXNbb107aWYoInN0cmluZyI9PXR5cGVvZiBpKXtpZih2b2lkIDA9PT1lW2ldJiYobj10aGlzLmNyZWF0ZUVycm9yKHYuT0JKRUNUX0RFUEVOREVOQ1lfS0VZLHtrZXk6byxtaXNzaW5nOml9LCIiLCIiLG51bGwsZSx0KS5wcmVmaXhXaXRoKG51bGwsbykucHJlZml4V2l0aChudWxsLCJkZXBlbmRlbmNpZXMiKSx0aGlzLmhhbmRsZUVycm9yKG4pKSlyZXR1cm4gbn1lbHNlIGlmKEFycmF5LmlzQXJyYXkoaSkpZm9yKHZhciBhPTA7YTxpLmxlbmd0aDthKyspe3ZhciBzPWlbYV07aWYodm9pZCAwPT09ZVtzXSYmKG49dGhpcy5jcmVhdGVFcnJvcih2Lk9CSkVDVF9ERVBFTkRFTkNZX0tFWSx7a2V5Om8sbWlzc2luZzpzfSwiIiwiLyIrYSxudWxsLGUsdCkucHJlZml4V2l0aChudWxsLG8pLnByZWZpeFdpdGgobnVsbCwiZGVwZW5kZW5jaWVzIiksdGhpcy5oYW5kbGVFcnJvcihuKSkpcmV0dXJuIG59ZWxzZSBpZihuPXRoaXMudmFsaWRhdGVBbGwoZSxpLFtdLFsiZGVwZW5kZW5jaWVzIixvXSxyKSlyZXR1cm4gbn1yZXR1cm4gbnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVDb21iaW5hdGlvbnM9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0aGlzLnZhbGlkYXRlQWxsT2YoZSx0LHIpfHx0aGlzLnZhbGlkYXRlQW55T2YoZSx0LHIpfHx0aGlzLnZhbGlkYXRlT25lT2YoZSx0LHIpfHx0aGlzLnZhbGlkYXRlTm90KGUsdCxyKXx8bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVBbGxPZj1mdW5jdGlvbihlLHQscil7aWYodm9pZCAwPT09dC5hbGxPZilyZXR1cm4gbnVsbDtmb3IodmFyIG4sbz0wO288dC5hbGxPZi5sZW5ndGg7bysrKXt2YXIgaT10LmFsbE9mW29dO2lmKG49dGhpcy52YWxpZGF0ZUFsbChlLGksW10sWyJhbGxPZiIsb10scikpcmV0dXJuIG59cmV0dXJuIG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlQW55T2Y9ZnVuY3Rpb24oZSx0LHIpe2lmKHZvaWQgMD09PXQuYW55T2YpcmV0dXJuIG51bGw7dmFyIG4sbyxpPVtdLGE9dGhpcy5lcnJvcnMubGVuZ3RoO3RoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmKG49dGhpcy51bmtub3duUHJvcGVydHlQYXRocyxvPXRoaXMua25vd25Qcm9wZXJ0eVBhdGhzKTtmb3IodmFyIHM9ITAsdT0wO3U8dC5hbnlPZi5sZW5ndGg7dSsrKXt0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJih0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzPXt9LHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzPXt9KTt2YXIgbD10LmFueU9mW3VdLGM9dGhpcy5lcnJvcnMubGVuZ3RoLGY9dGhpcy52YWxpZGF0ZUFsbChlLGwsW10sWyJhbnlPZiIsdV0scik7aWYobnVsbD09PWYmJmM9PT10aGlzLmVycm9ycy5sZW5ndGgpe2lmKHRoaXMuZXJyb3JzPXRoaXMuZXJyb3JzLnNsaWNlKDAsYSksdGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKXtmb3IodmFyIHAgaW4gdGhpcy5rbm93blByb3BlcnR5UGF0aHMpb1twXT0hMCxkZWxldGUgbltwXTtmb3IodmFyIGQgaW4gdGhpcy51bmtub3duUHJvcGVydHlQYXRocylvW2RdfHwobltkXT0hMCk7cz0hMTtjb250aW51ZX1yZXR1cm4gbnVsbH1mJiZpLnB1c2goZi5wcmVmaXhXaXRoKG51bGwsIiIrdSkucHJlZml4V2l0aChudWxsLCJhbnlPZiIpKX1yZXR1cm4gdGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYodGhpcy51bmtub3duUHJvcGVydHlQYXRocz1uLHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzPW8pLHM/KGk9aS5jb25jYXQodGhpcy5lcnJvcnMuc2xpY2UoYSkpLHRoaXMuZXJyb3JzPXRoaXMuZXJyb3JzLnNsaWNlKDAsYSksdGhpcy5jcmVhdGVFcnJvcih2LkFOWV9PRl9NSVNTSU5HLHt9LCIiLCIvYW55T2YiLGksZSx0KSk6dm9pZCAwfSxoLnByb3RvdHlwZS52YWxpZGF0ZU9uZU9mPWZ1bmN0aW9uKGUsdCxyKXtpZih2b2lkIDA9PT10Lm9uZU9mKXJldHVybiBudWxsO3ZhciBuLG8saT1udWxsLGE9W10scz10aGlzLmVycm9ycy5sZW5ndGg7dGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYobj10aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzLG89dGhpcy5rbm93blByb3BlcnR5UGF0aHMpO2Zvcih2YXIgdT0wO3U8dC5vbmVPZi5sZW5ndGg7dSsrKXt0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJih0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzPXt9LHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzPXt9KTt2YXIgbD10Lm9uZU9mW3VdLGM9dGhpcy5lcnJvcnMubGVuZ3RoLGY9dGhpcy52YWxpZGF0ZUFsbChlLGwsW10sWyJvbmVPZiIsdV0scik7aWYobnVsbD09PWYmJmM9PT10aGlzLmVycm9ycy5sZW5ndGgpe2lmKG51bGwhPT1pKXJldHVybiB0aGlzLmVycm9ycz10aGlzLmVycm9ycy5zbGljZSgwLHMpLHRoaXMuY3JlYXRlRXJyb3Iodi5PTkVfT0ZfTVVMVElQTEUse2luZGV4MTppLGluZGV4Mjp1fSwiIiwiL29uZU9mIixudWxsLGUsdCk7aWYoaT11LHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyl7Zm9yKHZhciBwIGluIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzKW9bcF09ITAsZGVsZXRlIG5bcF07Zm9yKHZhciBkIGluIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMpb1tkXXx8KG5bZF09ITApfX1lbHNlIGYmJmEucHVzaChmKX1yZXR1cm4gdGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYodGhpcy51bmtub3duUHJvcGVydHlQYXRocz1uLHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzPW8pLG51bGw9PT1pPyhhPWEuY29uY2F0KHRoaXMuZXJyb3JzLnNsaWNlKHMpKSx0aGlzLmVycm9ycz10aGlzLmVycm9ycy5zbGljZSgwLHMpLHRoaXMuY3JlYXRlRXJyb3Iodi5PTkVfT0ZfTUlTU0lORyx7fSwiIiwiL29uZU9mIixhLGUsdCkpOih0aGlzLmVycm9ycz10aGlzLmVycm9ycy5zbGljZSgwLHMpLG51bGwpfSxoLnByb3RvdHlwZS52YWxpZGF0ZU5vdD1mdW5jdGlvbihlLHQscil7aWYodm9pZCAwPT09dC5ub3QpcmV0dXJuIG51bGw7dmFyIG4sbyxpPXRoaXMuZXJyb3JzLmxlbmd0aDt0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJihuPXRoaXMudW5rbm93blByb3BlcnR5UGF0aHMsbz10aGlzLmtub3duUHJvcGVydHlQYXRocyx0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzPXt9LHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzPXt9KTt2YXIgYT10aGlzLnZhbGlkYXRlQWxsKGUsdC5ub3QsbnVsbCxudWxsLHIpLHM9dGhpcy5lcnJvcnMuc2xpY2UoaSk7cmV0dXJuIHRoaXMuZXJyb3JzPXRoaXMuZXJyb3JzLnNsaWNlKDAsaSksdGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYodGhpcy51bmtub3duUHJvcGVydHlQYXRocz1uLHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzPW8pLG51bGw9PT1hJiYwPT09cy5sZW5ndGg/dGhpcy5jcmVhdGVFcnJvcih2Lk5PVF9QQVNTRUQse30sIiIsIi9ub3QiLG51bGwsZSx0KTpudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZUh5cGVybWVkaWE9ZnVuY3Rpb24oZSx0LG4pe2lmKCF0LmxpbmtzKXJldHVybiBudWxsO2Zvcih2YXIgbyxpPTA7aTx0LmxpbmtzLmxlbmd0aDtpKyspe3ZhciBhPXQubGlua3NbaV07aWYoImRlc2NyaWJlZGJ5Ij09PWEucmVsKXtmb3IodmFyIHM9bmV3IHIoYS5ocmVmKSx1PSEwLGw9MDtsPHMudmFyTmFtZXMubGVuZ3RoO2wrKylpZighKHMudmFyTmFtZXNbbF1pbiBlKSl7dT0hMTticmVha31pZih1KXt2YXIgYz1zLmZpbGxGcm9tT2JqZWN0KGUpLGY9eyRyZWY6Y307aWYobz10aGlzLnZhbGlkYXRlQWxsKGUsZixbXSxbImxpbmtzIixpXSxuKSlyZXR1cm4gb319fX07dmFyIHY9e0lOVkFMSURfVFlQRTowLEVOVU1fTUlTTUFUQ0g6MSxBTllfT0ZfTUlTU0lORzoxMCxPTkVfT0ZfTUlTU0lORzoxMSxPTkVfT0ZfTVVMVElQTEU6MTIsTk9UX1BBU1NFRDoxMyxOVU1CRVJfTVVMVElQTEVfT0Y6MTAwLE5VTUJFUl9NSU5JTVVNOjEwMSxOVU1CRVJfTUlOSU1VTV9FWENMVVNJVkU6MTAyLE5VTUJFUl9NQVhJTVVNOjEwMyxOVU1CRVJfTUFYSU1VTV9FWENMVVNJVkU6MTA0LE5VTUJFUl9OT1RfQV9OVU1CRVI6MTA1LFNUUklOR19MRU5HVEhfU0hPUlQ6MjAwLFNUUklOR19MRU5HVEhfTE9ORzoyMDEsU1RSSU5HX1BBVFRFUk46MjAyLE9CSkVDVF9QUk9QRVJUSUVTX01JTklNVU06MzAwLE9CSkVDVF9QUk9QRVJUSUVTX01BWElNVU06MzAxLE9CSkVDVF9SRVFVSVJFRDozMDIsT0JKRUNUX0FERElUSU9OQUxfUFJPUEVSVElFUzozMDMsT0JKRUNUX0RFUEVOREVOQ1lfS0VZOjMwNCxBUlJBWV9MRU5HVEhfU0hPUlQ6NDAwLEFSUkFZX0xFTkdUSF9MT05HOjQwMSxBUlJBWV9VTklRVUU6NDAyLEFSUkFZX0FERElUSU9OQUxfSVRFTVM6NDAzLEZPUk1BVF9DVVNUT006NTAwLEtFWVdPUkRfQ1VTVE9NOjUwMSxDSVJDVUxBUl9SRUZFUkVOQ0U6NjAwLFVOS05PV05fUFJPUEVSVFk6MWUzfSxfPXt9O2Zvcih2YXIgYiBpbiB2KV9bdltiXV09Yjt2YXIgZz17SU5WQUxJRF9UWVBFOiJJbnZhbGlkIHR5cGU6IHt0eXBlfSAoZXhwZWN0ZWQge2V4cGVjdGVkfSkiLEVOVU1fTUlTTUFUQ0g6Ik5vIGVudW0gbWF0Y2ggZm9yOiB7dmFsdWV9IixBTllfT0ZfTUlTU0lORzonRGF0YSBkb2VzIG5vdCBtYXRjaCBhbnkgc2NoZW1hcyBmcm9tICJhbnlPZiInLE9ORV9PRl9NSVNTSU5HOidEYXRhIGRvZXMgbm90IG1hdGNoIGFueSBzY2hlbWFzIGZyb20gIm9uZU9mIicsT05FX09GX01VTFRJUExFOidEYXRhIGlzIHZhbGlkIGFnYWluc3QgbW9yZSB0aGFuIG9uZSBzY2hlbWEgZnJvbSAib25lT2YiOiBpbmRpY2VzIHtpbmRleDF9IGFuZCB7aW5kZXgyfScsTk9UX1BBU1NFRDonRGF0YSBtYXRjaGVzIHNjaGVtYSBmcm9tICJub3QiJyxOVU1CRVJfTVVMVElQTEVfT0Y6IlZhbHVlIHt2YWx1ZX0gaXMgbm90IGEgbXVsdGlwbGUgb2Yge211bHRpcGxlT2Z9IixOVU1CRVJfTUlOSU1VTToiVmFsdWUge3ZhbHVlfSBpcyBsZXNzIHRoYW4gbWluaW11bSB7bWluaW11bX0iLE5VTUJFUl9NSU5JTVVNX0VYQ0xVU0lWRToiVmFsdWUge3ZhbHVlfSBpcyBlcXVhbCB0byBleGNsdXNpdmUgbWluaW11bSB7bWluaW11bX0iLE5VTUJFUl9NQVhJTVVNOiJWYWx1ZSB7dmFsdWV9IGlzIGdyZWF0ZXIgdGhhbiBtYXhpbXVtIHttYXhpbXVtfSIsTlVNQkVSX01BWElNVU1fRVhDTFVTSVZFOiJWYWx1ZSB7dmFsdWV9IGlzIGVxdWFsIHRvIGV4Y2x1c2l2ZSBtYXhpbXVtIHttYXhpbXVtfSIsTlVNQkVSX05PVF9BX05VTUJFUjoiVmFsdWUge3ZhbHVlfSBpcyBub3QgYSB2YWxpZCBudW1iZXIiLFNUUklOR19MRU5HVEhfU0hPUlQ6IlN0cmluZyBpcyB0b28gc2hvcnQgKHtsZW5ndGh9IGNoYXJzKSwgbWluaW11bSB7bWluaW11bX0iLFNUUklOR19MRU5HVEhfTE9ORzoiU3RyaW5nIGlzIHRvbyBsb25nICh7bGVuZ3RofSBjaGFycyksIG1heGltdW0ge21heGltdW19IixTVFJJTkdfUEFUVEVSTjoiU3RyaW5nIGRvZXMgbm90IG1hdGNoIHBhdHRlcm46IHtwYXR0ZXJufSIsT0JKRUNUX1BST1BFUlRJRVNfTUlOSU1VTToiVG9vIGZldyBwcm9wZXJ0aWVzIGRlZmluZWQgKHtwcm9wZXJ0eUNvdW50fSksIG1pbmltdW0ge21pbmltdW19IixPQkpFQ1RfUFJPUEVSVElFU19NQVhJTVVNOiJUb28gbWFueSBwcm9wZXJ0aWVzIGRlZmluZWQgKHtwcm9wZXJ0eUNvdW50fSksIG1heGltdW0ge21heGltdW19IixPQkpFQ1RfUkVRVUlSRUQ6Ik1pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHk6IHtrZXl9IixPQkpFQ1RfQURESVRJT05BTF9QUk9QRVJUSUVTOiJBZGRpdGlvbmFsIHByb3BlcnRpZXMgbm90IGFsbG93ZWQiLE9CSkVDVF9ERVBFTkRFTkNZX0tFWToiRGVwZW5kZW5jeSBmYWlsZWQgLSBrZXkgbXVzdCBleGlzdDoge21pc3Npbmd9IChkdWUgdG8ga2V5OiB7a2V5fSkiLEFSUkFZX0xFTkdUSF9TSE9SVDoiQXJyYXkgaXMgdG9vIHNob3J0ICh7bGVuZ3RofSksIG1pbmltdW0ge21pbmltdW19IixBUlJBWV9MRU5HVEhfTE9ORzoiQXJyYXkgaXMgdG9vIGxvbmcgKHtsZW5ndGh9KSwgbWF4aW11bSB7bWF4aW11bX0iLEFSUkFZX1VOSVFVRToiQXJyYXkgaXRlbXMgYXJlIG5vdCB1bmlxdWUgKGluZGljZXMge21hdGNoMX0gYW5kIHttYXRjaDJ9KSIsQVJSQVlfQURESVRJT05BTF9JVEVNUzoiQWRkaXRpb25hbCBpdGVtcyBub3QgYWxsb3dlZCIsRk9STUFUX0NVU1RPTToiRm9ybWF0IHZhbGlkYXRpb24gZmFpbGVkICh7bWVzc2FnZX0pIixLRVlXT1JEX0NVU1RPTToiS2V5d29yZCBmYWlsZWQ6IHtrZXl9ICh7bWVzc2FnZX0pIixDSVJDVUxBUl9SRUZFUkVOQ0U6IkNpcmN1bGFyICRyZWZzOiB7dXJsc30iLFVOS05PV05fUFJPUEVSVFk6IlVua25vd24gcHJvcGVydHkgKG5vdCBpbiBzY2hlbWEpIn07bC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpLGwucHJvdG90eXBlLmNvbnN0cnVjdG9yPWwsbC5wcm90b3R5cGUubmFtZT0iVmFsaWRhdGlvbkVycm9yIixsLnByb3RvdHlwZS5wcmVmaXhXaXRoPWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9PWUmJihlPWUucmVwbGFjZSgvfi9nLCJ+MCIpLnJlcGxhY2UoL1wvL2csIn4xIiksdGhpcy5kYXRhUGF0aD0iLyIrZSt0aGlzLmRhdGFQYXRoKSxudWxsIT09dCYmKHQ9dC5yZXBsYWNlKC9+L2csIn4wIikucmVwbGFjZSgvXC8vZywifjEiKSx0aGlzLnNjaGVtYVBhdGg9Ii8iK3QrdGhpcy5zY2hlbWFQYXRoKSxudWxsIT09dGhpcy5zdWJFcnJvcnMpZm9yKHZhciByPTA7cjx0aGlzLnN1YkVycm9ycy5sZW5ndGg7cisrKXRoaXMuc3ViRXJyb3JzW3JdLnByZWZpeFdpdGgoZSx0KTtyZXR1cm4gdGhpc307dmFyIEU9e30saj1mKCk7cmV0dXJuIGouYWRkTGFuZ3VhZ2UoImVuLWdiIixnKSxqLnR2ND1qLGp9KX0se31dLDEwMjpbZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ImRlZmF1bHQiOmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxyLk1lc3NhZ2VGYWN0b3J5PXZvaWQgMDt2YXIgbz1lKCIuL21lc3NhZ2UtZmFjdG9yeS9NZXNzYWdlRmFjdG9yeSIpLGk9bihvKTtyLk1lc3NhZ2VGYWN0b3J5PWlbImRlZmF1bHQiXTsKfSx7Ii4vbWVzc2FnZS1mYWN0b3J5L01lc3NhZ2VGYWN0b3J5IjoxMDV9XSwxMDM6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6eyJkZWZhdWx0IjplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkociwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksci5NZXNzYWdlVHlwZT1yLk1lc3NhZ2U9dm9pZCAwO3ZhciBvPWUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayIpLGk9bihvKSxhPWUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyIpLHM9bihhKSx1PXIuTWVzc2FnZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxyLG4sbyxhKXsoMCxpWyJkZWZhdWx0Il0pKHRoaXMsZSksdGhpcy5pZD10LHRoaXMuZnJvbT1yLHRoaXMudG89bix0aGlzLnR5cGU9byx0aGlzLmJvZHk9YX1yZXR1cm4oMCxzWyJkZWZhdWx0Il0pKGUsW3trZXk6ImFzc2VydElkZW50aXR5Iix2YWx1ZTpmdW5jdGlvbihlLHQpe2lmKCFlfHwhdCl0aHJvdyBuZXcgRXJyb3IoIm1lc3NhZ2UsIHRva2VuIHRvIGJlIHJlbW92ZWQsIGFuZCBhc3NlcnRlZElkZW50aXR5IG11c3QgYmUgcHJvdmlkZWQiKTt2YXIgcj10aGlzLmJvZHk7cmV0dXJuIHIuaWRUb2tlbj1udWxsLHIuYXNzZXJ0ZWRJZGVudGl0eT10LHRoaXMuYm9keT1yLHRoaXN9fSx7a2V5OiJhZGRJZFRva2VuIix2YWx1ZTpmdW5jdGlvbihlKXtpZighZSl0aHJvdyBuZXcgRXJyb3IoIm1lc3NhZ2UsIHRva2VuIHRvIGJlIGFkZGVkLCBtdXN0IGJlIHByb3ZpZGVkIik7dmFyIHQ9dGhpcy5ib2R5O3JldHVybiB0LmlkVG9rZW49ZSx0aGlzLmJvZHk9dCx0aGlzfX0se2tleToiYWRkQWNjZXNzVG9rZW4iLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKCFlKXRocm93IG5ldyBFcnJvcigibWVzc2FnZSwgdG9rZW4gdG8gYmUgYWRkZWQsIG11c3QgYmUgcHJvdmlkZWQiKTt2YXIgdD10aGlzLmJvZHk7cmV0dXJuIHQuYWNjZXNzVG9rZW49ZSx0aGlzLmJvZHk9dCx0aGlzfX1dKSxlfSgpO3IuTWVzc2FnZVR5cGU9e0NSRUFURToiY3JlYXRlIixSRUFEOiJyZWFkIixVUERBVEU6InVwZGF0ZSIsREVMRVRFOiJkZWxldGUiLFNVQlNDUklCRToic3Vic2NyaWJlIixVTlNVQlNDUklCRToidW5zdWJzY3JpYmUiLFJFU1BPTlNFOiJyZXNwb25zZSIsRk9SV0FSRDoiZm9yd2FyZCIsRVhFQ1VURToiZXhlY3V0ZSJ9O3JbImRlZmF1bHQiXT11fSx7ImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTAsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTF9XSwxMDQ6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6eyJkZWZhdWx0IjplfX1mdW5jdGlvbiBvKGUpe3ZhciB0PSgwLHVbImRlZmF1bHQiXSkoZSkucmVkdWNlKGZ1bmN0aW9uKHQscil7cmV0dXJuIHRbZVtyXV09cix0fSx7fSk7cmV0dXJuKDAsYVsiZGVmYXVsdCJdKSgoMCx1WyJkZWZhdWx0Il0pKGUpLnJlZHVjZShmdW5jdGlvbih0LHIpe3JldHVybiB0W3JdPWVbcl0sdH0sZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19KSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLHIuVVBEQVRFX09QRVJBVElPTj1yLkFUVFJJQlVURV9UWVBFPXIuUkVBU09OX1BIUkFTRT1yLlJFU1BPTlNFX0NPREU9ci5FeGVjdXRlTWVzc2FnZUJvZHk9ci5SZXNwb25zZU1lc3NhZ2VCb2R5PXIuRm9yd2FyZE1lc3NhZ2VCb2R5PXIuVXBkYXRlTWVzc2FnZUJvZHk9ci5EZWxldGVNZXNzYWdlQm9keT1yLlJlYWRNZXNzYWdlQm9keT1yLkNyZWF0ZU1lc3NhZ2VCb2R5PXIuTWVzc2FnZUJvZHk9dm9pZCAwO3ZhciBpPWUoImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZnJlZXplIiksYT1uKGkpLHM9ZSgiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzIiksdT1uKHMpLGw9ZSgiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mIiksYz1uKGwpLGY9ZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iKSxwPW4oZiksZD1lKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMiKSxoPW4oZCkseT1lKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siKSxtPW4oeSksdj1lKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiKSxfPW4odik7ci5FbnVtPW87dmFyIGI9ci5NZXNzYWdlQm9keT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxyLG4sbyxpKXsoMCxtWyJkZWZhdWx0Il0pKHRoaXMsZSksdGhpcy5pZFRva2VuPXQsdGhpcy5hY2Nlc3NUb2tlbj1yLHRoaXMucmVzb3VyY2U9bix0aGlzLnNjaGVtYT1vLHRoaXMuYXNzZXJ0ZWRJZGVudGl0eT1pfXJldHVybigwLF9bImRlZmF1bHQiXSkoZSxbe2tleToiYWRkVmlhIix2YWx1ZTpmdW5jdGlvbihlKXtpZighZSl0aHJvdyBuZXcgRXJyb3IoInZpYSBVUkwgdG8gYmUgYWRkZWQsIG11c3QgYmUgcHJvdmlkZWQiKTtyZXR1cm4gdGhpcy52aWE9ZSx0aGlzfX1dKSxlfSgpLGc9KHIuQ3JlYXRlTWVzc2FnZUJvZHk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHIsbixvLGksYSxzKXtpZigoMCxtWyJkZWZhdWx0Il0pKHRoaXMsdCksIWUpdGhyb3cgbmV3IEVycm9yKCJUaGUgdmFsdWUgcGFyYW1ldGVyIGlzIG51bGwiKTt2YXIgdT0oMCxwWyJkZWZhdWx0Il0pKHRoaXMsKDAsY1siZGVmYXVsdCJdKSh0KS5jYWxsKHRoaXMsbixvLGksYSxzLGEscykpO3JldHVybiB1LnZhbHVlPWUsciYmKHUucG9saWN5PXIpLHV9cmV0dXJuKDAsaFsiZGVmYXVsdCJdKSh0LGUpLHR9KGIpLHIuUmVhZE1lc3NhZ2VCb2R5PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSxyLG4sbyxpLGEscyx1KXsoMCxtWyJkZWZhdWx0Il0pKHRoaXMsdCk7dmFyIGw9KDAscFsiZGVmYXVsdCJdKSh0aGlzLCgwLGNbImRlZmF1bHQiXSkodCkuY2FsbCh0aGlzLGUscixuLG8saSkpO3JldHVybiBhJiYobC5hdHRyaWJ1dGU9YSkscyYmKGwuY3JpdGVyaWFTeW50YXg9cyksdSYmKGwuY3JpdGVyaWE9dSksbH1yZXR1cm4oMCxoWyJkZWZhdWx0Il0pKHQsZSksdH0oYiksci5EZWxldGVNZXNzYWdlQm9keT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8saSxhKXtpZigoMCxtWyJkZWZhdWx0Il0pKHRoaXMsdCksbiBpbnN0YW5jZW9mIEFycmF5KXt2YXIgcz0oMCxwWyJkZWZhdWx0Il0pKHRoaXMsKDAsY1siZGVmYXVsdCJdKSh0KS5jYWxsKHRoaXMsZSxyLG51bGwsbyxpKSk7cy5jaGlsZHJlblJlc291cmNlcz1ufWVsc2UgdmFyIHM9KDAscFsiZGVmYXVsdCJdKSh0aGlzLCgwLGNbImRlZmF1bHQiXSkodCkuY2FsbCh0aGlzLGUscixuLG8saSkpO3JldHVybiBhJiYocy5hdHRyaWJ1dGU9YSksKDAscFsiZGVmYXVsdCJdKShzKX1yZXR1cm4oMCxoWyJkZWZhdWx0Il0pKHQsZSksdH0oYiksci5VcGRhdGVNZXNzYWdlQm9keT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8saSxhLHMpeygwLG1bImRlZmF1bHQiXSkodGhpcyx0KTt2YXIgdT0oMCxwWyJkZWZhdWx0Il0pKHRoaXMsKDAsY1siZGVmYXVsdCJdKSh0KS5jYWxsKHRoaXMsZSxyLG4sbyxpKSk7cmV0dXJuIHUuYXR0cmlidXRlPWEsdS52YWx1ZT1zLHV9cmV0dXJuKDAsaFsiZGVmYXVsdCJdKSh0LGUpLCgwLF9bImRlZmF1bHQiXSkodCxbe2tleToiYWRkQXR0cmlidXRlVHlwZSIsdmFsdWU6ZnVuY3Rpb24oZSl7ZSYmKHRoaXMuYXR0cmlidXRlVHlwZT1lKX19LHtrZXk6ImFkZE9wZXJhdGlvbiIsdmFsdWU6ZnVuY3Rpb24oZSl7ZSYmKHRoaXMub3BlcmF0aW9uPWUpfX1dKSx0fShiKSxyLkZvcndhcmRNZXNzYWdlQm9keT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8saSxhKXsoMCxtWyJkZWZhdWx0Il0pKHRoaXMsdCk7dmFyIHM9KDAscFsiZGVmYXVsdCJdKSh0aGlzLCgwLGNbImRlZmF1bHQiXSkodCkuY2FsbCh0aGlzLGUscixuLG8saSkpO3JldHVybiBzLm1lc3NhZ2U9YSxzfXJldHVybigwLGhbImRlZmF1bHQiXSkodCxlKSx0fShiKSxyLlJlc3BvbnNlTWVzc2FnZUJvZHk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHIsbixvLGkpeygwLG1bImRlZmF1bHQiXSkodGhpcyx0KTt2YXIgYT0oMCxwWyJkZWZhdWx0Il0pKHRoaXMsKDAsY1siZGVmYXVsdCJdKSh0KS5jYWxsKHRoaXMsZSxyLG4pKTtyZXR1cm4gbyYmKGEuY29kZT1vLGEuZGVzY3JpcHRpb249Z1tvXSksaSYmKGEudmFsdWU9aSksYX1yZXR1cm4oMCxoWyJkZWZhdWx0Il0pKHQsZSksdH0oYiksci5FeGVjdXRlTWVzc2FnZUJvZHk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHIsbixvLGksYSxzKXsoMCxtWyJkZWZhdWx0Il0pKHRoaXMsdCk7dmFyIHU9KDAscFsiZGVmYXVsdCJdKSh0aGlzLCgwLGNbImRlZmF1bHQiXSkodCkuY2FsbCh0aGlzLGUscixuLG8saSkpO3JldHVybiB1Lm1ldGhvZD1hLHMmJihzIGluc3RhbmNlb2YgQXJyYXk/dS5wYXJhbXM9czp1LnBhcmFtcz1bc10pLHV9cmV0dXJuKDAsaFsiZGVmYXVsdCJdKSh0LGUpLHR9KGIpLHIuUkVTUE9OU0VfQ09ERT1vKHsxMDA6IjEwMCIsMTAxOiIxMDEiLDIwMDoiMjAwIiwyMDE6IjIwMSIsMjAyOiIyMDIiLDIwMzoiMjAzIiwyMDQ6IjIwNCIsMjA1OiIyMDUiLDIwNjoiMjA2IiwzMDA6IjMwMCIsMzAxOiIzMDEiLDMwMjoiMzAyIiwzMDM6IjMwMyIsMzA0OiIzMDQiLDMwNToiMzA1IiwzMDc6IjMwNyIsNDAwOiI0MDAiLDQwMToiNDAxIiw0MDI6IjQwMiIsNDAzOiI0MDMiLDQwNDoiNDA0Iiw0MDU6IjQwNSIsNDA2OiI0MDYiLDQwNzoiNDA3Iiw0MDg6IjQwOCIsNDA5OiI0MDkiLDQxMDoiNDEwIiw0MTE6IjQxMSIsNDEyOiI0MTIiLDQxMzoiNDEzIiw0MTQ6IjQxNCIsNDE1OiI0MTUiLDQxNjoiNDE2Iiw0MTc6IjQxNyIsNDI2OiI0MjYiLDUwMDoiNTAwIiw1MDE6IjUwMSIsNTAyOiI1MDIiLDUwMzoiNTAzIiw1MDQ6IjUwNCIsNTA1OiI1MDUifSksci5SRUFTT05fUEhSQVNFPW8oezEwMDoiQ29udGludWUiLDEwMToiU3dpdGNoaW5nIFByb3RvY29scyIsMjAwOiJPSyIsMjAxOiJDcmVhdGVkIiwyMDI6IkFjY2VwdGVkIiwyMDM6Ik5vbi1BdXRob3JpdGF0aXZlIEluZm9ybWF0aW9uIiwyMDQ6Ik5vIENvbnRlbnQiLDIwNToiUmVzZXQgQ29udGVudCIsMjA2OiJQYXJ0aWFsIENvbnRlbnQiLDMwMDoiTXVsdGlwbGUgQ2hvaWNlcyIsMzAxOiJNb3ZlZCBQZXJtYW5lbnRseSIsMzAyOiJGb3VuZCIsMzAzOiJTZWUgT3RoZXIiLDMwNDoiTm90IE1vZGlmaWVkIiwzMDU6IlVzZSBQcm94eSIsMzA3OiJUZW1wb3JhcnkgUmVkaXJlY3QiLDQwMDoiQmFkIFJlcXVlc3QiLDQwMToiVW5hdXRob3JpemVkIiw0MDI6IlBheW1lbnQgUmVxdWlyZWQiLDQwMzoiRm9yYmlkZGVuIiw0MDQ6Ik5vdCBGb3VuZCIsNDA1OiJNZXRob2QgTm90IEFsbG93ZWQiLDQwNjoiTm90IEFjY2VwdGFibGUiLDQwNzoiUHJveHkgQXV0aGVudGljYXRpb24gUmVxdWlyZWQiLDQwODoiUmVxdWVzdCBUaW1lb3V0Iiw0MDk6IkNvbmZsaWN0Iiw0MTA6IkdvbmUiLDQxMToiTGVuZ3RoIFJlcXVpcmVkIiw0MTI6IlByZWNvbmRpdGlvbiBGYWlsZWQiLDQxMzoiUGF5bG9hZCBUb28gTGFyZ2UiLDQxNDoiUmVxdWVzdC1VUkkgVG9vIExvbmciLDQxNToiVW5zdXBwb3J0ZWQgTWVkaWEgVHlwZSIsNDE2OiJSYW5nZSBOb3QgU2F0aXNmaWFibGUiLDQxNzoiRXhwZWN0YXRpb24gRmFpbGVkIiw0MjY6IlVwZ3JhZGUgUmVxdWlyZWQiLDUwMDoiSW50ZXJuYWwgU2VydmVyIEVycm9yIiw1MDE6Ik5vdCBJbXBsZW1lbnRlZCIsNTAyOiJCYWQgR2F0ZXdheSIsNTAzOiJTZXJ2aWNlIFVuYXZhaWxhYmxlIiw1MDQ6IkdhdGV3YXkgVGltZS1vdXQiLDUwNToiSFRUUCBWZXJzaW9uIE5vdCBTdXBwb3J0ZWQifSkpO3IuQVRUUklCVVRFX1RZUEU9byh7T0JKRUNUOiJPQkpFQ1QiLEFSUkFZOiJBUlJBWSJ9KSxyLlVQREFURV9PUEVSQVRJT049byh7QUREOiJBREQiLFJFTU9WRToiUkVNT1ZFIn0pO3JbImRlZmF1bHQiXT1ifSx7ImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZnJlZXplIjozLCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YiOjUsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5cyI6NiwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxMCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxMSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzIjoxMywiYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iOjE0fV0sMTA1OltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOnsiZGVmYXVsdCI6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLHIuSWRHZW5lcmF0b3I9dm9pZCAwO3ZhciBvPWUoImJhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3IiKSxpPW4obyksYT1lKCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YiKSxzPW4oYSksdT1lKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siKSxsPW4odSksYz1lKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiKSxmPW4oYykscD1lKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIpLGQ9bihwKSxoPWUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9nZXQiKSx5PW4oaCksbT1lKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMiKSx2PW4obSksXz1lKCIuLi9yZVRISU5LT2JqZWN0L1JldGhpbmtPYmplY3QuanMiKSxiPW4oXyksZz1lKCIuL01lc3NhZ2UuanMiKSxFPW4oZyksaj1lKCIuL01lc3NhZ2VCb2R5LmpzIiksdz1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscil7KDAsbFsiZGVmYXVsdCJdKSh0aGlzLHQpO3ZhciBuPSgwLGRbImRlZmF1bHQiXSkodGhpcywoMCxzWyJkZWZhdWx0Il0pKHQpLmNhbGwodGhpcyxlLHIpKTtyZXR1cm4gbi5teUdlbmVyYXRvcj0obmV3IE8pLmlkTWFrZXIoKSxufXJldHVybigwLHZbImRlZmF1bHQiXSkodCxlKSwoMCxmWyJkZWZhdWx0Il0pKHQsW3trZXk6InZhbGlkYXRlIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4oMCx5WyJkZWZhdWx0Il0pKCgwLHNbImRlZmF1bHQiXSkodC5wcm90b3R5cGUpLCJ2YWxpZGF0ZSIsdGhpcykuY2FsbCh0aGlzLGUpfX0se2tleToiY3JlYXRlQ3JlYXRlTWVzc2FnZVJlcXVlc3QiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4pe2lmKCFlfHwhdHx8IXIpdGhyb3cgbmV3IEVycm9yKCJmcm9tLCB0bywgYW5kIHZhbHVlIG9mIG9iamVjdCB0byBiZSBjcmVhdGVkIE1VU1QgYmUgc3BlY2lmaWVkIik7dmFyIG89dGhpcy5teUdlbmVyYXRvci5uZXh0KCkudmFsdWUsaT1uZXcgai5DcmVhdGVNZXNzYWdlQm9keShyLG4sbnVsbCxudWxsLG51bGwsbnVsbCxudWxsKSxhPW5ldyBFWyJkZWZhdWx0Il0obyxlLHQsZy5NZXNzYWdlVHlwZS5DUkVBVEUsaSk7cmV0dXJuIGF9fSx7a2V5OiJjcmVhdGVGb3J3YXJkTWVzc2FnZVJlcXVlc3QiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyKXtpZighZXx8IXR8fCFyKXRocm93IG5ldyBFcnJvcigiZnJvbSwgdG8sIGFuZCBtZXNzYWdlIHRvIGZvcndhcmQgTVVTVCBiZSBzcGVjaWZpZWQiKTt2YXIgbj10aGlzLm15R2VuZXJhdG9yLm5leHQoKS52YWx1ZSxvPW5ldyBqLkZvcndhcmRNZXNzYWdlQm9keShudWxsLG51bGwsbnVsbCxudWxsLG51bGwsciksaT1uZXcgRVsiZGVmYXVsdCJdKG4sZSx0LGcuTWVzc2FnZVR5cGUuRk9SV0FSRCxvKTtyZXR1cm4gaX19LHtrZXk6ImNyZWF0ZURlbGV0ZU1lc3NhZ2VSZXF1ZXN0Iix2YWx1ZTpmdW5jdGlvbihlLHQscixuKXtpZighZXx8IXQpdGhyb3cgbmV3IEVycm9yKCJmcm9tIGFuZCB0byBwYXJhbWV0ZXJzIE1VU1QgYmUgc3BlY2lmaWVkIik7dmFyIG89dGhpcy5teUdlbmVyYXRvci5uZXh0KCkudmFsdWUsaT1uZXcgai5EZWxldGVNZXNzYWdlQm9keShudWxsLG51bGwscixuLG51bGwsbnVsbCksYT1uZXcgRVsiZGVmYXVsdCJdKG8sZSx0LGcuTWVzc2FnZVR5cGUuREVMRVRFLGkpO3JldHVybiBhfX0se2tleToiY3JlYXRlVXBkYXRlTWVzc2FnZVJlcXVlc3QiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4sbyl7aWYoIWV8fCF0fHwhcil0aHJvdyBuZXcgRXJyb3IoImZyb20sIGFuZCB0byBhbmQgdmFsdWUgTVVTVCBiZSBzcGVjaWZpZWQiKTt2YXIgaT10aGlzLm15R2VuZXJhdG9yLm5leHQoKS52YWx1ZSxhPW5ldyBqLlVwZGF0ZU1lc3NhZ2VCb2R5KG51bGwsbnVsbCxuLG51bGwsbnVsbCxvLHIpLHM9bmV3IEVbImRlZmF1bHQiXShpLGUsdCxnLk1lc3NhZ2VUeXBlLlVQREFURSxhKTtyZXR1cm4gc319LHtrZXk6ImNyZWF0ZVJlYWRNZXNzYWdlUmVxdWVzdCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIsbil7aWYoIWV8fCF0fHwhcil0aHJvdyBuZXcgRXJyb3IoImZyb20sIHRvIGFuZCB0aGUgcmVzb3VyY2UgdG8gcmVhZCBmcm9tIE1VU1QgYmUgc3BlY2lmaWVkIik7dmFyIG89dGhpcy5teUdlbmVyYXRvci5uZXh0KCkudmFsdWUsaT1uZXcgai5SZWFkTWVzc2FnZUJvZHkobnVsbCxudWxsLHIsbnVsbCxudWxsLG4sbnVsbCxudWxsKSxhPW5ldyBFWyJkZWZhdWx0Il0obyxlLHQsZy5NZXNzYWdlVHlwZS5SRUFELGkpO3JldHVybiBhfX0se2tleToiY3JlYXRlU3Vic2NyaWJlTWVzc2FnZVJlcXVlc3QiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyKXtpZighZXx8IXR8fCFyKXRocm93IG5ldyBFcnJvcigiZnJvbSwgdG8gYW5kIHRoZSByZXNvdXJjZSB0byBzdWJzY3JpYmUgdG8gTVVTVCBiZSBzcGVjaWZpZWQiKTt2YXIgbj10aGlzLm15R2VuZXJhdG9yLm5leHQoKS52YWx1ZSxvPW5ldyBqLk1lc3NhZ2VCb2R5KG51bGwsbnVsbCxyLG51bGwsbnVsbCksaT1uZXcgRVsiZGVmYXVsdCJdKG4sZSx0LGcuTWVzc2FnZVR5cGUuU1VCU0NSSUJFLG8pO3JldHVybiBpfX0se2tleToiY3JlYXRlVW5zdWJzY3JpYmVNZXNzYWdlUmVxdWVzdCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIpe2lmKCFlfHwhdHx8IXIpdGhyb3cgbmV3IEVycm9yKCJmcm9tLCB0byBhbmQgdGhlIHJlc291cmNlIHRvIHN1YnNjcmliZSB0byBNVVNUIGJlIHNwZWNpZmllZCIpO3ZhciBuPXRoaXMubXlHZW5lcmF0b3IubmV4dCgpLnZhbHVlLG89bmV3IGouTWVzc2FnZUJvZHkobnVsbCxudWxsLHIsbnVsbCxudWxsKSxpPW5ldyBFWyJkZWZhdWx0Il0obixlLHQsZy5NZXNzYWdlVHlwZS5VTlNVQlNDUklCRSxvKTtyZXR1cm4gaX19LHtrZXk6ImNyZWF0ZUV4ZWN1dGVNZXNzYWdlUmVxdWVzdCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIsbil7aWYoIWV8fCF0fHwhcil0aHJvdyBuZXcgRXJyb3IoImZyb20sIHRvIGFuZCB0aGUgbWV0aG9kIHRvIGV4ZWN1dGUgTVVTVCBiZSBzcGVjaWZpZWQiKTt2YXIgbz10aGlzLm15R2VuZXJhdG9yLm5leHQoKS52YWx1ZSxpPW5ldyBqLkV4ZWN1dGVNZXNzYWdlQm9keShudWxsLG51bGwsbnVsbCxudWxsLG51bGwscixuKSxhPW5ldyBFWyJkZWZhdWx0Il0obyxlLHQsZy5NZXNzYWdlVHlwZS5FWEVDVVRFLGkpO3JldHVybiBhfX0se2tleToiY3JlYXRlTWVzc2FnZVJlc3BvbnNlIix2YWx1ZTpmdW5jdGlvbihlLHQscixuKXtpZighdCl0aHJvdyBuZXcgRXJyb3IoInJlc3BvbnNlIENvZGUgTVVTVCBiZSBzcGVjaWZpZWQiKTt2YXIgbz1uZXcgai5SZXNwb25zZU1lc3NhZ2VCb2R5KG51bGwsbnVsbCxudWxsLHQscixuKTtyZXR1cm4gbmV3IEVbImRlZmF1bHQiXShlLmlkLGUudG8sZS5mcm9tLGcuTWVzc2FnZVR5cGUuUkVTUE9OU0Usbyl9fSx7a2V5OiJnZW5lcmF0ZU1lc3NhZ2VSZXNwb25zZSIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIpe2lmKCFlfHwhdCl0aHJvdyBuZXcgRXJyb3IoIm1lc3NhZ2UgYW5kIHJlc3BvbnNlIGNvZGUgTVVTVCBiZSBzcGVjaWZpZWQiKTt2YXIgbj1lLmJvZHksbz1uLmlkVG9rZW4saT1uLmFjY2Vzc1Rva2VuLGE9bi5yZXNvdXJjZSxzPW5ldyBqLlJlc3BvbnNlTWVzc2FnZUJvZHkobyxpLGEsdCxyKSx1PXRoaXMubXlHZW5lcmF0b3IubmV4dCgpLnZhbHVlO3JldHVybiBuZXcgRVsiZGVmYXVsdCJdKHUsZS50byxlLmZyb20sZy5NZXNzYWdlVHlwZS5SRVNQT05TRSxzKX19XSksdH0oYlsiZGVmYXVsdCJdKSxPPXIuSWRHZW5lcmF0b3I9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7KDAsbFsiZGVmYXVsdCJdKSh0aGlzLGUpfXJldHVybigwLGZbImRlZmF1bHQiXSkoZSxbe2tleToiaWRNYWtlciIsdmFsdWU6aVsiZGVmYXVsdCJdLm1hcmsoZnVuY3Rpb24gdCgpe3ZhciBlO3JldHVybiBpWyJkZWZhdWx0Il0ud3JhcChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDplPTE7Y2FzZSAxOmlmKCEoZTwxZTYpKXt0Lm5leHQ9NjticmVha31yZXR1cm4gdC5uZXh0PTQsZSsrO2Nhc2UgNDp0Lm5leHQ9MTticmVhaztjYXNlIDY6Y2FzZSJlbmQiOnJldHVybiB0LnN0b3AoKX19LHQsdGhpcyl9KX1dKSxlfSgpO3JbImRlZmF1bHQiXT13fSx7Ii4uL3JlVEhJTktPYmplY3QvUmV0aGlua09iamVjdC5qcyI6MTA2LCIuL01lc3NhZ2UuanMiOjEwMywiLi9NZXNzYWdlQm9keS5qcyI6MTA0LCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YiOjUsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTAsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTEsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9nZXQiOjEyLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMiOjEzLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiI6MTQsImJhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3IiOjE2fV0sMTA2OltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOnsiZGVmYXVsdCI6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLHIuUmV0aGlua09iamVjdD12b2lkIDA7dmFyIG89ZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIiksaT1uKG8pLGE9ZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIikscz1uKGEpLHU9ZSgidHY0IiksbD1uKHUpLGM9ci5SZXRoaW5rT2JqZWN0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LHIpeygwLGlbImRlZmF1bHQiXSkodGhpcyxlKTt0aGlzLnZhbGlkYXRpb249dCx0aGlzLnNjaGVtYT1yfXJldHVybigwLHNbImRlZmF1bHQiXSkoZSxbe2tleToidmFsaWRhdGUiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiEhdGhpcy5zY2hlbWEmJmxbImRlZmF1bHQiXS52YWxpZGF0ZShlLHRoaXMuc2NoZW1hKX19XSksZX0oKTtyWyJkZWZhdWx0Il09Y30seyJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjEwLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjExLHR2NDoxMDF9XX0se30sWzEwMl0pKDEwMil9KTsKCgp9KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gInVuZGVmaW5lZCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gInVuZGVmaW5lZCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIgPyB3aW5kb3cgOiB7fSkKCn0se31dLDQxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAoZ2xvYmFsKXsKLyoqCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBCiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQKKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wKKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVgoqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcKKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUKKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTgoqCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAoqCiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKKgoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KKiovCgovLyBEaXN0cmlidXRpb24gZmlsZSBmb3IgUGVyc2lzdGVuY2VNYW5hZ2VyLmpzIAovLyB2ZXJzaW9uOiAwLjMuMAovLyBMYXN0IGJ1aWxkOiBUaHUgSnVsIDIxIDIwMTYgMTU6MzE6MjMgR01UKzAxMDAgKFdFU1QpCgohZnVuY3Rpb24oZSl7aWYoIm9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYidW5kZWZpbmVkIiE9dHlwZW9mIG1vZHVsZSltb2R1bGUuZXhwb3J0cz1lKCk7ZWxzZSBpZigiZnVuY3Rpb24iPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShbXSxlKTtlbHNle3ZhciB0O3Q9InVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OiJ1bmRlZmluZWQiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDoidW5kZWZpbmVkIiE9dHlwZW9mIHNlbGY/c2VsZjp0aGlzLHQuUGVyc2lzdGVuY2VNYW5hZ2VyPWUoKX19KGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIGkocyxhKXtpZighbltzXSl7aWYoIXRbc10pe3ZhciB1PSJmdW5jdGlvbiI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFhJiZ1KXJldHVybiB1KHMsITApO2lmKG8pcmV0dXJuIG8ocywhMCk7dmFyIGY9bmV3IEVycm9yKCJDYW5ub3QgZmluZCBtb2R1bGUgJyIrcysiJyIpO3Rocm93IGYuY29kZT0iTU9EVUxFX05PVF9GT1VORCIsZn12YXIgYz1uW3NdPXtleHBvcnRzOnt9fTt0W3NdWzBdLmNhbGwoYy5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbc11bMV1bZV07cmV0dXJuIGkobj9uOmUpfSxjLGMuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltzXS5leHBvcnRzfWZvcih2YXIgbz0iZnVuY3Rpb24iPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxzPTA7czxyLmxlbmd0aDtzKyspaShyW3NdKTtyZXR1cm4gaX0oezE6W2Z1bmN0aW9uKGUsdCxuKXt0LmV4cG9ydHM9eyJkZWZhdWx0IjplKCJjb3JlLWpzL2xpYnJhcnkvZm4vanNvbi9zdHJpbmdpZnkiKSxfX2VzTW9kdWxlOiEwfX0seyJjb3JlLWpzL2xpYnJhcnkvZm4vanNvbi9zdHJpbmdpZnkiOjl9XSwyOltmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIoKXtmb3IodmFyIGU9IkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8iLHQ9MCxuPWUubGVuZ3RoO3Q8bjsrK3QpdVt0XT1lW3RdLGZbZS5jaGFyQ29kZUF0KHQpXT10O2ZbIi0iLmNoYXJDb2RlQXQoMCldPTYyLGZbIl8iLmNoYXJDb2RlQXQoMCldPTYzfWZ1bmN0aW9uIGkoZSl7dmFyIHQsbixyLGksbyxzLGE9ZS5sZW5ndGg7aWYoYSU0PjApdGhyb3cgbmV3IEVycm9yKCJJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0Iik7bz0iPSI9PT1lW2EtMl0/MjoiPSI9PT1lW2EtMV0/MTowLHM9bmV3IGMoMyphLzQtbykscj1vPjA/YS00OmE7dmFyIHU9MDtmb3IodD0wLG49MDt0PHI7dCs9NCxuKz0zKWk9ZltlLmNoYXJDb2RlQXQodCldPDwxOHxmW2UuY2hhckNvZGVBdCh0KzEpXTw8MTJ8ZltlLmNoYXJDb2RlQXQodCsyKV08PDZ8ZltlLmNoYXJDb2RlQXQodCszKV0sc1t1KytdPWk+PjE2JjI1NSxzW3UrK109aT4+OCYyNTUsc1t1KytdPTI1NSZpO3JldHVybiAyPT09bz8oaT1mW2UuY2hhckNvZGVBdCh0KV08PDJ8ZltlLmNoYXJDb2RlQXQodCsxKV0+PjQsc1t1KytdPTI1NSZpKToxPT09byYmKGk9ZltlLmNoYXJDb2RlQXQodCldPDwxMHxmW2UuY2hhckNvZGVBdCh0KzEpXTw8NHxmW2UuY2hhckNvZGVBdCh0KzIpXT4+MixzW3UrK109aT4+OCYyNTUsc1t1KytdPTI1NSZpKSxzfWZ1bmN0aW9uIG8oZSl7cmV0dXJuIHVbZT4+MTgmNjNdK3VbZT4+MTImNjNdK3VbZT4+NiY2M10rdVs2MyZlXX1mdW5jdGlvbiBzKGUsdCxuKXtmb3IodmFyIHIsaT1bXSxzPXQ7czxuO3MrPTMpcj0oZVtzXTw8MTYpKyhlW3MrMV08PDgpK2VbcysyXSxpLnB1c2gobyhyKSk7cmV0dXJuIGkuam9pbigiIil9ZnVuY3Rpb24gYShlKXtmb3IodmFyIHQsbj1lLmxlbmd0aCxyPW4lMyxpPSIiLG89W10sYT0xNjM4MyxmPTAsYz1uLXI7ZjxjO2YrPWEpby5wdXNoKHMoZSxmLGYrYT5jP2M6ZithKSk7cmV0dXJuIDE9PT1yPyh0PWVbbi0xXSxpKz11W3Q+PjJdLGkrPXVbdDw8NCY2M10saSs9Ij09Iik6Mj09PXImJih0PShlW24tMl08PDgpK2Vbbi0xXSxpKz11W3Q+PjEwXSxpKz11W3Q+PjQmNjNdLGkrPXVbdDw8MiY2M10saSs9Ij0iKSxvLnB1c2goaSksby5qb2luKCIiKX1uLnRvQnl0ZUFycmF5PWksbi5mcm9tQnl0ZUFycmF5PWE7dmFyIHU9W10sZj1bXSxjPSJ1bmRlZmluZWQiIT10eXBlb2YgVWludDhBcnJheT9VaW50OEFycmF5OkFycmF5O3IoKX0se31dLDM6W2Z1bmN0aW9uKGUsdCxuKXt9LHt9XSw0OltmdW5jdGlvbihlLHQsbil7YXJndW1lbnRzWzRdWzNdWzBdLmFwcGx5KG4sYXJndW1lbnRzKX0se2R1cDozfV0sNTpbZnVuY3Rpb24oZSx0LG4pe2Z1bmN0aW9uIHIoZSx0KXtyZXR1cm4gcC5pc1VuZGVmaW5lZCh0KT8iIit0OnAuaXNOdW1iZXIodCkmJiFpc0Zpbml0ZSh0KT90LnRvU3RyaW5nKCk6cC5pc0Z1bmN0aW9uKHQpfHxwLmlzUmVnRXhwKHQpP3QudG9TdHJpbmcoKTp0fWZ1bmN0aW9uIGkoZSx0KXtyZXR1cm4gcC5pc1N0cmluZyhlKT9lLmxlbmd0aDx0P2U6ZS5zbGljZSgwLHQpOmV9ZnVuY3Rpb24gbyhlKXtyZXR1cm4gaShKU09OLnN0cmluZ2lmeShlLmFjdHVhbCxyKSwxMjgpKyIgIitlLm9wZXJhdG9yKyIgIitpKEpTT04uc3RyaW5naWZ5KGUuZXhwZWN0ZWQsciksMTI4KX1mdW5jdGlvbiBzKGUsdCxuLHIsaSl7dGhyb3cgbmV3IHkuQXNzZXJ0aW9uRXJyb3Ioe21lc3NhZ2U6bixhY3R1YWw6ZSxleHBlY3RlZDp0LG9wZXJhdG9yOnIsc3RhY2tTdGFydEZ1bmN0aW9uOml9KX1mdW5jdGlvbiBhKGUsdCl7ZXx8cyhlLCEwLHQsIj09Iix5Lm9rKX1mdW5jdGlvbiB1KGUsdCl7aWYoZT09PXQpcmV0dXJuITA7aWYocC5pc0J1ZmZlcihlKSYmcC5pc0J1ZmZlcih0KSl7aWYoZS5sZW5ndGghPXQubGVuZ3RoKXJldHVybiExO2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKWlmKGVbbl0hPT10W25dKXJldHVybiExO3JldHVybiEwfXJldHVybiBwLmlzRGF0ZShlKSYmcC5pc0RhdGUodCk/ZS5nZXRUaW1lKCk9PT10LmdldFRpbWUoKTpwLmlzUmVnRXhwKGUpJiZwLmlzUmVnRXhwKHQpP2Uuc291cmNlPT09dC5zb3VyY2UmJmUuZ2xvYmFsPT09dC5nbG9iYWwmJmUubXVsdGlsaW5lPT09dC5tdWx0aWxpbmUmJmUubGFzdEluZGV4PT09dC5sYXN0SW5kZXgmJmUuaWdub3JlQ2FzZT09PXQuaWdub3JlQ2FzZTpwLmlzT2JqZWN0KGUpfHxwLmlzT2JqZWN0KHQpP2MoZSx0KTplPT10fWZ1bmN0aW9uIGYoZSl7cmV0dXJuIltvYmplY3QgQXJndW1lbnRzXSI9PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKX1mdW5jdGlvbiBjKGUsdCl7aWYocC5pc051bGxPclVuZGVmaW5lZChlKXx8cC5pc051bGxPclVuZGVmaW5lZCh0KSlyZXR1cm4hMTtpZihlLnByb3RvdHlwZSE9PXQucHJvdG90eXBlKXJldHVybiExO2lmKHAuaXNQcmltaXRpdmUoZSl8fHAuaXNQcmltaXRpdmUodCkpcmV0dXJuIGU9PT10O3ZhciBuPWYoZSkscj1mKHQpO2lmKG4mJiFyfHwhbiYmcilyZXR1cm4hMTtpZihuKXJldHVybiBlPWQuY2FsbChlKSx0PWQuY2FsbCh0KSx1KGUsdCk7dmFyIGksbyxzPV8oZSksYT1fKHQpO2lmKHMubGVuZ3RoIT1hLmxlbmd0aClyZXR1cm4hMTtmb3Iocy5zb3J0KCksYS5zb3J0KCksbz1zLmxlbmd0aC0xO28+PTA7by0tKWlmKHNbb10hPWFbb10pcmV0dXJuITE7Zm9yKG89cy5sZW5ndGgtMTtvPj0wO28tLSlpZihpPXNbb10sIXUoZVtpXSx0W2ldKSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBsKGUsdCl7cmV0dXJuISghZXx8IXQpJiYoIltvYmplY3QgUmVnRXhwXSI9PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KT90LnRlc3QoZSk6ZSBpbnN0YW5jZW9mIHR8fHQuY2FsbCh7fSxlKT09PSEwKX1mdW5jdGlvbiBoKGUsdCxuLHIpe3ZhciBpO3AuaXNTdHJpbmcobikmJihyPW4sbj1udWxsKTt0cnl7dCgpfWNhdGNoKG8pe2k9b31pZihyPShuJiZuLm5hbWU/IiAoIituLm5hbWUrIikuIjoiLiIpKyhyPyIgIityOiIuIiksZSYmIWkmJnMoaSxuLCJNaXNzaW5nIGV4cGVjdGVkIGV4Y2VwdGlvbiIrciksIWUmJmwoaSxuKSYmcyhpLG4sIkdvdCB1bndhbnRlZCBleGNlcHRpb24iK3IpLGUmJmkmJm4mJiFsKGksbil8fCFlJiZpKXRocm93IGl9dmFyIHA9ZSgidXRpbC8iKSxkPUFycmF5LnByb3RvdHlwZS5zbGljZSxnPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkseT10LmV4cG9ydHM9YTt5LkFzc2VydGlvbkVycm9yPWZ1bmN0aW9uKGUpe3RoaXMubmFtZT0iQXNzZXJ0aW9uRXJyb3IiLHRoaXMuYWN0dWFsPWUuYWN0dWFsLHRoaXMuZXhwZWN0ZWQ9ZS5leHBlY3RlZCx0aGlzLm9wZXJhdG9yPWUub3BlcmF0b3IsZS5tZXNzYWdlPyh0aGlzLm1lc3NhZ2U9ZS5tZXNzYWdlLHRoaXMuZ2VuZXJhdGVkTWVzc2FnZT0hMSk6KHRoaXMubWVzc2FnZT1vKHRoaXMpLHRoaXMuZ2VuZXJhdGVkTWVzc2FnZT0hMCk7dmFyIHQ9ZS5zdGFja1N0YXJ0RnVuY3Rpb258fHM7aWYoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcyx0KTtlbHNle3ZhciBuPW5ldyBFcnJvcjtpZihuLnN0YWNrKXt2YXIgcj1uLnN0YWNrLGk9dC5uYW1lLGE9ci5pbmRleE9mKCJcbiIraSk7aWYoYT49MCl7dmFyIHU9ci5pbmRleE9mKCJcbiIsYSsxKTtyPXIuc3Vic3RyaW5nKHUrMSl9dGhpcy5zdGFjaz1yfX19LHAuaW5oZXJpdHMoeS5Bc3NlcnRpb25FcnJvcixFcnJvcikseS5mYWlsPXMseS5vaz1hLHkuZXF1YWw9ZnVuY3Rpb24oZSx0LG4pe2UhPXQmJnMoZSx0LG4sIj09Iix5LmVxdWFsKX0seS5ub3RFcXVhbD1mdW5jdGlvbihlLHQsbil7ZT09dCYmcyhlLHQsbiwiIT0iLHkubm90RXF1YWwpfSx5LmRlZXBFcXVhbD1mdW5jdGlvbihlLHQsbil7dShlLHQpfHxzKGUsdCxuLCJkZWVwRXF1YWwiLHkuZGVlcEVxdWFsKX0seS5ub3REZWVwRXF1YWw9ZnVuY3Rpb24oZSx0LG4pe3UoZSx0KSYmcyhlLHQsbiwibm90RGVlcEVxdWFsIix5Lm5vdERlZXBFcXVhbCl9LHkuc3RyaWN0RXF1YWw9ZnVuY3Rpb24oZSx0LG4pe2UhPT10JiZzKGUsdCxuLCI9PT0iLHkuc3RyaWN0RXF1YWwpfSx5Lm5vdFN0cmljdEVxdWFsPWZ1bmN0aW9uKGUsdCxuKXtlPT09dCYmcyhlLHQsbiwiIT09Iix5Lm5vdFN0cmljdEVxdWFsKX0seVsidGhyb3dzIl09ZnVuY3Rpb24oZSx0LG4pe2guYXBwbHkodGhpcyxbITBdLmNvbmNhdChkLmNhbGwoYXJndW1lbnRzKSkpfSx5LmRvZXNOb3RUaHJvdz1mdW5jdGlvbihlLHQpe2guYXBwbHkodGhpcyxbITFdLmNvbmNhdChkLmNhbGwoYXJndW1lbnRzKSkpfSx5LmlmRXJyb3I9ZnVuY3Rpb24oZSl7aWYoZSl0aHJvdyBlfTt2YXIgXz1PYmplY3Qua2V5c3x8ZnVuY3Rpb24oZSl7dmFyIHQ9W107Zm9yKHZhciBuIGluIGUpZy5jYWxsKGUsbikmJnQucHVzaChuKTtyZXR1cm4gdH19LHsidXRpbC8iOjQ0fV0sNjpbZnVuY3Rpb24oZSx0LG4peyhmdW5jdGlvbih0KXsidXNlIHN0cmljdCI7dmFyIHI9ZSgiYnVmZmVyIiksaT1yLkJ1ZmZlcixvPXIuU2xvd0J1ZmZlcixzPXIua01heExlbmd0aHx8MjE0NzQ4MzY0NztuLmFsbG9jPWZ1bmN0aW9uKGUsdCxuKXtpZigiZnVuY3Rpb24iPT10eXBlb2YgaS5hbGxvYylyZXR1cm4gaS5hbGxvYyhlLHQsbik7aWYoIm51bWJlciI9PXR5cGVvZiBuKXRocm93IG5ldyBUeXBlRXJyb3IoImVuY29kaW5nIG11c3Qgbm90IGJlIG51bWJlciIpO2lmKCJudW1iZXIiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKCJzaXplIG11c3QgYmUgYSBudW1iZXIiKTtpZihlPnMpdGhyb3cgbmV3IFJhbmdlRXJyb3IoInNpemUgaXMgdG9vIGxhcmdlIik7dmFyIHI9bixvPXQ7dm9pZCAwPT09byYmKHI9dm9pZCAwLG89MCk7dmFyIGE9bmV3IGkoZSk7aWYoInN0cmluZyI9PXR5cGVvZiBvKWZvcih2YXIgdT1uZXcgaShvLHIpLGY9dS5sZW5ndGgsYz0tMTsrK2M8ZTspYVtjXT11W2MlZl07ZWxzZSBhLmZpbGwobyk7cmV0dXJuIGF9LG4uYWxsb2NVbnNhZmU9ZnVuY3Rpb24oZSl7aWYoImZ1bmN0aW9uIj09dHlwZW9mIGkuYWxsb2NVbnNhZmUpcmV0dXJuIGkuYWxsb2NVbnNhZmUoZSk7aWYoIm51bWJlciIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoInNpemUgbXVzdCBiZSBhIG51bWJlciIpO2lmKGU+cyl0aHJvdyBuZXcgUmFuZ2VFcnJvcigic2l6ZSBpcyB0b28gbGFyZ2UiKTtyZXR1cm4gbmV3IGkoZSl9LG4uZnJvbT1mdW5jdGlvbihlLG4scil7aWYoImZ1bmN0aW9uIj09dHlwZW9mIGkuZnJvbSYmKCF0LlVpbnQ4QXJyYXl8fFVpbnQ4QXJyYXkuZnJvbSE9PWkuZnJvbSkpcmV0dXJuIGkuZnJvbShlLG4scik7aWYoIm51bWJlciI9PXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoJyJ2YWx1ZSIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKTtpZigic3RyaW5nIj09dHlwZW9mIGUpcmV0dXJuIG5ldyBpKGUsbik7aWYoInVuZGVmaW5lZCIhPXR5cGVvZiBBcnJheUJ1ZmZlciYmZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKXt2YXIgbz1uO2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiBuZXcgaShlKTsidW5kZWZpbmVkIj09dHlwZW9mIG8mJihvPTApO3ZhciBzPXI7aWYoInVuZGVmaW5lZCI9PXR5cGVvZiBzJiYocz1lLmJ5dGVMZW5ndGgtbyksbz49ZS5ieXRlTGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKCInb2Zmc2V0JyBpcyBvdXQgb2YgYm91bmRzIik7aWYocz5lLmJ5dGVMZW5ndGgtbyl0aHJvdyBuZXcgUmFuZ2VFcnJvcigiJ2xlbmd0aCcgaXMgb3V0IG9mIGJvdW5kcyIpO3JldHVybiBuZXcgaShlLnNsaWNlKG8sbytzKSl9aWYoaS5pc0J1ZmZlcihlKSl7dmFyIGE9bmV3IGkoZS5sZW5ndGgpO3JldHVybiBlLmNvcHkoYSwwLDAsZS5sZW5ndGgpLGF9aWYoZSl7aWYoQXJyYXkuaXNBcnJheShlKXx8InVuZGVmaW5lZCIhPXR5cGVvZiBBcnJheUJ1ZmZlciYmZS5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcnx8Imxlbmd0aCJpbiBlKXJldHVybiBuZXcgaShlKTtpZigiQnVmZmVyIj09PWUudHlwZSYmQXJyYXkuaXNBcnJheShlLmRhdGEpKXJldHVybiBuZXcgaShlLmRhdGEpfXRocm93IG5ldyBUeXBlRXJyb3IoIkZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4iKX0sbi5hbGxvY1Vuc2FmZVNsb3c9ZnVuY3Rpb24oZSl7aWYoImZ1bmN0aW9uIj09dHlwZW9mIGkuYWxsb2NVbnNhZmVTbG93KXJldHVybiBpLmFsbG9jVW5zYWZlU2xvdyhlKTtpZigibnVtYmVyIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcigic2l6ZSBtdXN0IGJlIGEgbnVtYmVyIik7aWYoZT49cyl0aHJvdyBuZXcgUmFuZ2VFcnJvcigic2l6ZSBpcyB0b28gbGFyZ2UiKTtyZXR1cm4gbmV3IG8oZSl9fSkuY2FsbCh0aGlzLCJ1bmRlZmluZWQiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDoidW5kZWZpbmVkIiE9dHlwZW9mIHNlbGY/c2VsZjoidW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30pfSx7YnVmZmVyOjd9XSw3OltmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKCl7dHJ5e3ZhciBlPW5ldyBVaW50OEFycmF5KDEpO3JldHVybiBlLl9fcHJvdG9fXz17X19wcm90b19fOlVpbnQ4QXJyYXkucHJvdG90eXBlLGZvbzpmdW5jdGlvbigpe3JldHVybiA0Mn19LDQyPT09ZS5mb28oKSYmImZ1bmN0aW9uIj09dHlwZW9mIGUuc3ViYXJyYXkmJjA9PT1lLnN1YmFycmF5KDEsMSkuYnl0ZUxlbmd0aH1jYXRjaCh0KXtyZXR1cm4hMX19ZnVuY3Rpb24gaSgpe3JldHVybiBzLlRZUEVEX0FSUkFZX1NVUFBPUlQ/MjE0NzQ4MzY0NzoxMDczNzQxODIzfWZ1bmN0aW9uIG8oZSx0KXtpZihpKCk8dCl0aHJvdyBuZXcgUmFuZ2VFcnJvcigiSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgiKTtyZXR1cm4gcy5UWVBFRF9BUlJBWV9TVVBQT1JUPyhlPW5ldyBVaW50OEFycmF5KHQpLGUuX19wcm90b19fPXMucHJvdG90eXBlKToobnVsbD09PWUmJihlPW5ldyBzKHQpKSxlLmxlbmd0aD10KSxlfWZ1bmN0aW9uIHMoZSx0LG4pe2lmKCEocy5UWVBFRF9BUlJBWV9TVVBQT1JUfHx0aGlzIGluc3RhbmNlb2YgcykpcmV0dXJuIG5ldyBzKGUsdCxuKTtpZigibnVtYmVyIj09dHlwZW9mIGUpe2lmKCJzdHJpbmciPT10eXBlb2YgdCl0aHJvdyBuZXcgRXJyb3IoIklmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nIik7cmV0dXJuIGModGhpcyxlKX1yZXR1cm4gYSh0aGlzLGUsdCxuKX1mdW5jdGlvbiBhKGUsdCxuLHIpe2lmKCJudW1iZXIiPT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKCcidmFsdWUiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJyk7cmV0dXJuInVuZGVmaW5lZCIhPXR5cGVvZiBBcnJheUJ1ZmZlciYmdCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyP3AoZSx0LG4scik6InN0cmluZyI9PXR5cGVvZiB0P2woZSx0LG4pOmQoZSx0KX1mdW5jdGlvbiB1KGUpe2lmKCJudW1iZXIiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKCcic2l6ZSIgYXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpfWZ1bmN0aW9uIGYoZSx0LG4scil7cmV0dXJuIHUodCksdDw9MD9vKGUsdCk6dm9pZCAwIT09bj8ic3RyaW5nIj09dHlwZW9mIHI/byhlLHQpLmZpbGwobixyKTpvKGUsdCkuZmlsbChuKTpvKGUsdCl9ZnVuY3Rpb24gYyhlLHQpe2lmKHUodCksZT1vKGUsdDwwPzA6MHxnKHQpKSwhcy5UWVBFRF9BUlJBWV9TVVBQT1JUKWZvcih2YXIgbj0wO248dDsrK24pZVtuXT0wO3JldHVybiBlfWZ1bmN0aW9uIGwoZSx0LG4pe2lmKCJzdHJpbmciPT10eXBlb2YgbiYmIiIhPT1ufHwobj0idXRmOCIpLCFzLmlzRW5jb2RpbmcobikpdGhyb3cgbmV3IFR5cGVFcnJvcignImVuY29kaW5nIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJyk7dmFyIHI9MHxfKHQsbik7cmV0dXJuIGU9byhlLHIpLGUud3JpdGUodCxuKSxlfWZ1bmN0aW9uIGgoZSx0KXt2YXIgbj0wfGcodC5sZW5ndGgpO2U9byhlLG4pO2Zvcih2YXIgcj0wO3I8bjtyKz0xKWVbcl09MjU1JnRbcl07cmV0dXJuIGV9ZnVuY3Rpb24gcChlLHQsbixyKXtpZih0LmJ5dGVMZW5ndGgsbjwwfHx0LmJ5dGVMZW5ndGg8bil0aHJvdyBuZXcgUmFuZ2VFcnJvcigiJ29mZnNldCcgaXMgb3V0IG9mIGJvdW5kcyIpO2lmKHQuYnl0ZUxlbmd0aDxuKyhyfHwwKSl0aHJvdyBuZXcgUmFuZ2VFcnJvcigiJ2xlbmd0aCcgaXMgb3V0IG9mIGJvdW5kcyIpO3JldHVybiB0PXZvaWQgMD09PXI/bmV3IFVpbnQ4QXJyYXkodCxuKTpuZXcgVWludDhBcnJheSh0LG4scikscy5UWVBFRF9BUlJBWV9TVVBQT1JUPyhlPXQsZS5fX3Byb3RvX189cy5wcm90b3R5cGUpOmU9aChlLHQpLGV9ZnVuY3Rpb24gZChlLHQpe2lmKHMuaXNCdWZmZXIodCkpe3ZhciBuPTB8Zyh0Lmxlbmd0aCk7cmV0dXJuIGU9byhlLG4pLDA9PT1lLmxlbmd0aD9lOih0LmNvcHkoZSwwLDAsbiksZSl9aWYodCl7aWYoInVuZGVmaW5lZCIhPXR5cGVvZiBBcnJheUJ1ZmZlciYmdC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcnx8Imxlbmd0aCJpbiB0KXJldHVybiJudW1iZXIiIT10eXBlb2YgdC5sZW5ndGh8fFgodC5sZW5ndGgpP28oZSwwKTpoKGUsdCk7aWYoIkJ1ZmZlciI9PT10LnR5cGUmJiQodC5kYXRhKSlyZXR1cm4gaChlLHQuZGF0YSl9dGhyb3cgbmV3IFR5cGVFcnJvcigiRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LiIpfWZ1bmN0aW9uIGcoZSl7aWYoZT49aSgpKXRocm93IG5ldyBSYW5nZUVycm9yKCJBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtIHNpemU6IDB4IitpKCkudG9TdHJpbmcoMTYpKyIgYnl0ZXMiKTtyZXR1cm4gMHxlfWZ1bmN0aW9uIHkoZSl7cmV0dXJuK2UhPWUmJihlPTApLHMuYWxsb2MoK2UpfWZ1bmN0aW9uIF8oZSx0KXtpZihzLmlzQnVmZmVyKGUpKXJldHVybiBlLmxlbmd0aDtpZigidW5kZWZpbmVkIiE9dHlwZW9mIEFycmF5QnVmZmVyJiYiZnVuY3Rpb24iPT10eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3JiYoQXJyYXlCdWZmZXIuaXNWaWV3KGUpfHxlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKXJldHVybiBlLmJ5dGVMZW5ndGg7InN0cmluZyIhPXR5cGVvZiBlJiYoZT0iIitlKTt2YXIgbj1lLmxlbmd0aDtpZigwPT09bilyZXR1cm4gMDtmb3IodmFyIHI9ITE7Oylzd2l0Y2godCl7Y2FzZSJhc2NpaSI6Y2FzZSJiaW5hcnkiOmNhc2UicmF3IjpjYXNlInJhd3MiOnJldHVybiBuO2Nhc2UidXRmOCI6Y2FzZSJ1dGYtOCI6Y2FzZSB2b2lkIDA6cmV0dXJuIHEoZSkubGVuZ3RoO2Nhc2UidWNzMiI6Y2FzZSJ1Y3MtMiI6Y2FzZSJ1dGYxNmxlIjpjYXNlInV0Zi0xNmxlIjpyZXR1cm4gMipuO2Nhc2UiaGV4IjpyZXR1cm4gbj4+PjE7Y2FzZSJiYXNlNjQiOnJldHVybiBXKGUpLmxlbmd0aDtkZWZhdWx0OmlmKHIpcmV0dXJuIHEoZSkubGVuZ3RoO3Q9KCIiK3QpLnRvTG93ZXJDYXNlKCkscj0hMH19ZnVuY3Rpb24gdihlLHQsbil7dmFyIHI9ITE7aWYoKHZvaWQgMD09PXR8fHQ8MCkmJih0PTApLHQ+dGhpcy5sZW5ndGgpcmV0dXJuIiI7aWYoKHZvaWQgMD09PW58fG4+dGhpcy5sZW5ndGgpJiYobj10aGlzLmxlbmd0aCksbjw9MClyZXR1cm4iIjtpZihuPj4+PTAsdD4+Pj0wLG48PXQpcmV0dXJuIiI7Zm9yKGV8fChlPSJ1dGY4Iik7Oylzd2l0Y2goZSl7Y2FzZSJoZXgiOnJldHVybiBDKHRoaXMsdCxuKTtjYXNlInV0ZjgiOmNhc2UidXRmLTgiOnJldHVybiBJKHRoaXMsdCxuKTtjYXNlImFzY2lpIjpyZXR1cm4gTih0aGlzLHQsbik7Y2FzZSJiaW5hcnkiOnJldHVybiBQKHRoaXMsdCxuKTtjYXNlImJhc2U2NCI6cmV0dXJuIFQodGhpcyx0LG4pO2Nhc2UidWNzMiI6Y2FzZSJ1Y3MtMiI6Y2FzZSJ1dGYxNmxlIjpjYXNlInV0Zi0xNmxlIjpyZXR1cm4gTSh0aGlzLHQsbik7ZGVmYXVsdDppZihyKXRocm93IG5ldyBUeXBlRXJyb3IoIlVua25vd24gZW5jb2Rpbmc6ICIrZSk7ZT0oZSsiIikudG9Mb3dlckNhc2UoKSxyPSEwfX1mdW5jdGlvbiBtKGUsdCxuKXt2YXIgcj1lW3RdO2VbdF09ZVtuXSxlW25dPXJ9ZnVuY3Rpb24gRShlLHQsbixyKXtmdW5jdGlvbiBpKGUsdCl7cmV0dXJuIDE9PT1vP2VbdF06ZS5yZWFkVUludDE2QkUodCpvKX12YXIgbz0xLHM9ZS5sZW5ndGgsYT10Lmxlbmd0aDtpZih2b2lkIDAhPT1yJiYocj1TdHJpbmcocikudG9Mb3dlckNhc2UoKSwidWNzMiI9PT1yfHwidWNzLTIiPT09cnx8InV0ZjE2bGUiPT09cnx8InV0Zi0xNmxlIj09PXIpKXtpZihlLmxlbmd0aDwyfHx0Lmxlbmd0aDwyKXJldHVybi0xO289MixzLz0yLGEvPTIsbi89Mn1mb3IodmFyIHU9LTEsZj1uO2Y8czsrK2YpaWYoaShlLGYpPT09aSh0LHU9PT0tMT8wOmYtdSkpe2lmKHU9PT0tMSYmKHU9ZiksZi11KzE9PT1hKXJldHVybiB1Km99ZWxzZSB1IT09LTEmJihmLT1mLXUpLHU9LTE7cmV0dXJuLTF9ZnVuY3Rpb24gdyhlLHQsbixyKXtuPU51bWJlcihuKXx8MDt2YXIgaT1lLmxlbmd0aC1uO3I/KHI9TnVtYmVyKHIpLHI+aSYmKHI9aSkpOnI9aTt2YXIgbz10Lmxlbmd0aDtpZihvJTIhPT0wKXRocm93IG5ldyBFcnJvcigiSW52YWxpZCBoZXggc3RyaW5nIik7cj5vLzImJihyPW8vMik7Zm9yKHZhciBzPTA7czxyOysrcyl7dmFyIGE9cGFyc2VJbnQodC5zdWJzdHIoMipzLDIpLDE2KTtpZihpc05hTihhKSlyZXR1cm4gcztlW24rc109YX1yZXR1cm4gc31mdW5jdGlvbiBiKGUsdCxuLHIpe3JldHVybiBWKHEodCxlLmxlbmd0aC1uKSxlLG4scil9ZnVuY3Rpb24gUyhlLHQsbixyKXtyZXR1cm4gVihLKHQpLGUsbixyKX1mdW5jdGlvbiBPKGUsdCxuLHIpe3JldHVybiBTKGUsdCxuLHIpfWZ1bmN0aW9uIFIoZSx0LG4scil7cmV0dXJuIFYoVyh0KSxlLG4scil9ZnVuY3Rpb24gQShlLHQsbixyKXtyZXR1cm4gVih6KHQsZS5sZW5ndGgtbiksZSxuLHIpfWZ1bmN0aW9uIFQoZSx0LG4pe3JldHVybiAwPT09dCYmbj09PWUubGVuZ3RoP0ouZnJvbUJ5dGVBcnJheShlKTpKLmZyb21CeXRlQXJyYXkoZS5zbGljZSh0LG4pKX1mdW5jdGlvbiBJKGUsdCxuKXtuPU1hdGgubWluKGUubGVuZ3RoLG4pO2Zvcih2YXIgcj1bXSxpPXQ7aTxuOyl7dmFyIG89ZVtpXSxzPW51bGwsYT1vPjIzOT80Om8+MjIzPzM6bz4xOTE/MjoxO2lmKGkrYTw9bil7dmFyIHUsZixjLGw7c3dpdGNoKGEpe2Nhc2UgMTpvPDEyOCYmKHM9byk7YnJlYWs7Y2FzZSAyOnU9ZVtpKzFdLDEyOD09PSgxOTImdSkmJihsPSgzMSZvKTw8Nnw2MyZ1LGw+MTI3JiYocz1sKSk7YnJlYWs7Y2FzZSAzOnU9ZVtpKzFdLGY9ZVtpKzJdLDEyOD09PSgxOTImdSkmJjEyOD09PSgxOTImZikmJihsPSgxNSZvKTw8MTJ8KDYzJnUpPDw2fDYzJmYsbD4yMDQ3JiYobDw1NTI5Nnx8bD41NzM0MykmJihzPWwpKTticmVhaztjYXNlIDQ6dT1lW2krMV0sZj1lW2krMl0sYz1lW2krM10sMTI4PT09KDE5MiZ1KSYmMTI4PT09KDE5MiZmKSYmMTI4PT09KDE5MiZjKSYmKGw9KDE1Jm8pPDwxOHwoNjMmdSk8PDEyfCg2MyZmKTw8Nnw2MyZjLGw+NjU1MzUmJmw8MTExNDExMiYmKHM9bCkpfX1udWxsPT09cz8ocz02NTUzMyxhPTEpOnM+NjU1MzUmJihzLT02NTUzNixyLnB1c2gocz4+PjEwJjEwMjN8NTUyOTYpLHM9NTYzMjB8MTAyMyZzKSxyLnB1c2gocyksaSs9YX1yZXR1cm4gTChyKX1mdW5jdGlvbiBMKGUpe3ZhciB0PWUubGVuZ3RoO2lmKHQ8PVopcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLGUpO2Zvcih2YXIgbj0iIixyPTA7cjx0OyluKz1TdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZyxlLnNsaWNlKHIscis9WikpO3JldHVybiBufWZ1bmN0aW9uIE4oZSx0LG4pe3ZhciByPSIiO249TWF0aC5taW4oZS5sZW5ndGgsbik7Zm9yKHZhciBpPXQ7aTxuOysraSlyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDEyNyZlW2ldKTtyZXR1cm4gcn1mdW5jdGlvbiBQKGUsdCxuKXt2YXIgcj0iIjtuPU1hdGgubWluKGUubGVuZ3RoLG4pO2Zvcih2YXIgaT10O2k8bjsrK2kpcis9U3RyaW5nLmZyb21DaGFyQ29kZShlW2ldKTtyZXR1cm4gcn1mdW5jdGlvbiBDKGUsdCxuKXt2YXIgcj1lLmxlbmd0aDsoIXR8fHQ8MCkmJih0PTApLCghbnx8bjwwfHxuPnIpJiYobj1yKTtmb3IodmFyIGk9IiIsbz10O288bjsrK28paSs9SChlW29dKTtyZXR1cm4gaX1mdW5jdGlvbiBNKGUsdCxuKXtmb3IodmFyIHI9ZS5zbGljZSh0LG4pLGk9IiIsbz0wO288ci5sZW5ndGg7bys9MilpKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHJbb10rMjU2KnJbbysxXSk7cmV0dXJuIGl9ZnVuY3Rpb24geChlLHQsbil7aWYoZSUxIT09MHx8ZTwwKXRocm93IG5ldyBSYW5nZUVycm9yKCJvZmZzZXQgaXMgbm90IHVpbnQiKTtpZihlK3Q+bil0aHJvdyBuZXcgUmFuZ2VFcnJvcigiVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCIpfWZ1bmN0aW9uIEQoZSx0LG4scixpLG8pe2lmKCFzLmlzQnVmZmVyKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoJyJidWZmZXIiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKTtpZih0Pml8fHQ8byl0aHJvdyBuZXcgUmFuZ2VFcnJvcignInZhbHVlIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJyk7aWYobityPmUubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKCJJbmRleCBvdXQgb2YgcmFuZ2UiKX1mdW5jdGlvbiBqKGUsdCxuLHIpe3Q8MCYmKHQ9NjU1MzUrdCsxKTtmb3IodmFyIGk9MCxvPU1hdGgubWluKGUubGVuZ3RoLW4sMik7aTxvOysraSllW24raV09KHQmMjU1PDw4KihyP2k6MS1pKSk+Pj44KihyP2k6MS1pKX1mdW5jdGlvbiBVKGUsdCxuLHIpe3Q8MCYmKHQ9NDI5NDk2NzI5NSt0KzEpO2Zvcih2YXIgaT0wLG89TWF0aC5taW4oZS5sZW5ndGgtbiw0KTtpPG87KytpKWVbbitpXT10Pj4+OCoocj9pOjMtaSkmMjU1fWZ1bmN0aW9uIGsoZSx0LG4scixpLG8pe2lmKG4rcj5lLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcigiSW5kZXggb3V0IG9mIHJhbmdlIik7aWYobjwwKXRocm93IG5ldyBSYW5nZUVycm9yKCJJbmRleCBvdXQgb2YgcmFuZ2UiKX1mdW5jdGlvbiBCKGUsdCxuLHIsaSl7cmV0dXJuIGl8fGsoZSx0LG4sNCwzLjQwMjgyMzQ2NjM4NTI4ODZlMzgsLTMuNDAyODIzNDY2Mzg1Mjg4NmUzOCksUS53cml0ZShlLHQsbixyLDIzLDQpLG4rNH1mdW5jdGlvbiBHKGUsdCxuLHIsaSl7cmV0dXJuIGl8fGsoZSx0LG4sOCwxLjc5NzY5MzEzNDg2MjMxNTdlMzA4LC0xLjc5NzY5MzEzNDg2MjMxNTdlMzA4KSxRLndyaXRlKGUsdCxuLHIsNTIsOCksbis4fWZ1bmN0aW9uIEYoZSl7aWYoZT1ZKGUpLnJlcGxhY2UoZWUsIiIpLGUubGVuZ3RoPDIpcmV0dXJuIiI7Zm9yKDtlLmxlbmd0aCU0IT09MDspZSs9Ij0iO3JldHVybiBlfWZ1bmN0aW9uIFkoZSl7cmV0dXJuIGUudHJpbT9lLnRyaW0oKTplLnJlcGxhY2UoL15ccyt8XHMrJC9nLCIiKX1mdW5jdGlvbiBIKGUpe3JldHVybiBlPDE2PyIwIitlLnRvU3RyaW5nKDE2KTplLnRvU3RyaW5nKDE2KX1mdW5jdGlvbiBxKGUsdCl7dD10fHwxLzA7Zm9yKHZhciBuLHI9ZS5sZW5ndGgsaT1udWxsLG89W10scz0wO3M8cjsrK3Mpe2lmKG49ZS5jaGFyQ29kZUF0KHMpLG4+NTUyOTUmJm48NTczNDQpe2lmKCFpKXtpZihuPjU2MzE5KXsodC09Myk+LTEmJm8ucHVzaCgyMzksMTkxLDE4OSk7Y29udGludWV9aWYocysxPT09cil7KHQtPTMpPi0xJiZvLnB1c2goMjM5LDE5MSwxODkpO2NvbnRpbnVlfWk9bjtjb250aW51ZX1pZihuPDU2MzIwKXsodC09Myk+LTEmJm8ucHVzaCgyMzksMTkxLDE4OSksaT1uO2NvbnRpbnVlfW49KGktNTUyOTY8PDEwfG4tNTYzMjApKzY1NTM2fWVsc2UgaSYmKHQtPTMpPi0xJiZvLnB1c2goMjM5LDE5MSwxODkpO2lmKGk9bnVsbCxuPDEyOCl7aWYoKHQtPTEpPDApYnJlYWs7by5wdXNoKG4pfWVsc2UgaWYobjwyMDQ4KXtpZigodC09Mik8MClicmVhaztvLnB1c2gobj4+NnwxOTIsNjMmbnwxMjgpfWVsc2UgaWYobjw2NTUzNil7aWYoKHQtPTMpPDApYnJlYWs7by5wdXNoKG4+PjEyfDIyNCxuPj42JjYzfDEyOCw2MyZufDEyOCl9ZWxzZXtpZighKG48MTExNDExMikpdGhyb3cgbmV3IEVycm9yKCJJbnZhbGlkIGNvZGUgcG9pbnQiKTtpZigodC09NCk8MClicmVhaztvLnB1c2gobj4+MTh8MjQwLG4+PjEyJjYzfDEyOCxuPj42JjYzfDEyOCw2MyZufDEyOCl9fXJldHVybiBvfWZ1bmN0aW9uIEsoZSl7Zm9yKHZhciB0PVtdLG49MDtuPGUubGVuZ3RoOysrbil0LnB1c2goMjU1JmUuY2hhckNvZGVBdChuKSk7cmV0dXJuIHR9ZnVuY3Rpb24geihlLHQpe2Zvcih2YXIgbixyLGksbz1bXSxzPTA7czxlLmxlbmd0aCYmISgodC09Mik8MCk7KytzKW49ZS5jaGFyQ29kZUF0KHMpLHI9bj4+OCxpPW4lMjU2LG8ucHVzaChpKSxvLnB1c2gocik7cmV0dXJuIG99ZnVuY3Rpb24gVyhlKXtyZXR1cm4gSi50b0J5dGVBcnJheShGKGUpKX1mdW5jdGlvbiBWKGUsdCxuLHIpe2Zvcih2YXIgaT0wO2k8ciYmIShpK24+PXQubGVuZ3RofHxpPj1lLmxlbmd0aCk7KytpKXRbaStuXT1lW2ldO3JldHVybiBpfWZ1bmN0aW9uIFgoZSl7cmV0dXJuIGUhPT1lfXZhciBKPWUoImJhc2U2NC1qcyIpLFE9ZSgiaWVlZTc1NCIpLCQ9ZSgiaXNhcnJheSIpO24uQnVmZmVyPXMsbi5TbG93QnVmZmVyPXksbi5JTlNQRUNUX01BWF9CWVRFUz01MCxzLlRZUEVEX0FSUkFZX1NVUFBPUlQ9dm9pZCAwIT09dC5UWVBFRF9BUlJBWV9TVVBQT1JUP3QuVFlQRURfQVJSQVlfU1VQUE9SVDpyKCksbi5rTWF4TGVuZ3RoPWkoKSxzLnBvb2xTaXplPTgxOTIscy5fYXVnbWVudD1mdW5jdGlvbihlKXtyZXR1cm4gZS5fX3Byb3RvX189cy5wcm90b3R5cGUsZX0scy5mcm9tPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gYShudWxsLGUsdCxuKX0scy5UWVBFRF9BUlJBWV9TVVBQT1JUJiYocy5wcm90b3R5cGUuX19wcm90b19fPVVpbnQ4QXJyYXkucHJvdG90eXBlLHMuX19wcm90b19fPVVpbnQ4QXJyYXksInVuZGVmaW5lZCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5zcGVjaWVzJiZzW1N5bWJvbC5zcGVjaWVzXT09PXMmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShzLFN5bWJvbC5zcGVjaWVzLHt2YWx1ZTpudWxsLGNvbmZpZ3VyYWJsZTohMH0pKSxzLmFsbG9jPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gZihudWxsLGUsdCxuKX0scy5hbGxvY1Vuc2FmZT1mdW5jdGlvbihlKXtyZXR1cm4gYyhudWxsLGUpfSxzLmFsbG9jVW5zYWZlU2xvdz1mdW5jdGlvbihlKXtyZXR1cm4gYyhudWxsLGUpfSxzLmlzQnVmZmVyPWZ1bmN0aW9uKGUpe3JldHVybiEobnVsbD09ZXx8IWUuX2lzQnVmZmVyKX0scy5jb21wYXJlPWZ1bmN0aW9uKGUsdCl7aWYoIXMuaXNCdWZmZXIoZSl8fCFzLmlzQnVmZmVyKHQpKXRocm93IG5ldyBUeXBlRXJyb3IoIkFyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMiKTtpZihlPT09dClyZXR1cm4gMDtmb3IodmFyIG49ZS5sZW5ndGgscj10Lmxlbmd0aCxpPTAsbz1NYXRoLm1pbihuLHIpO2k8bzsrK2kpaWYoZVtpXSE9PXRbaV0pe249ZVtpXSxyPXRbaV07YnJlYWt9cmV0dXJuIG48cj8tMTpyPG4/MTowfSxzLmlzRW5jb2Rpbmc9ZnVuY3Rpb24oZSl7c3dpdGNoKFN0cmluZyhlKS50b0xvd2VyQ2FzZSgpKXtjYXNlImhleCI6Y2FzZSJ1dGY4IjpjYXNlInV0Zi04IjpjYXNlImFzY2lpIjpjYXNlImJpbmFyeSI6Y2FzZSJiYXNlNjQiOmNhc2UicmF3IjpjYXNlInVjczIiOmNhc2UidWNzLTIiOmNhc2UidXRmMTZsZSI6Y2FzZSJ1dGYtMTZsZSI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19LHMuY29uY2F0PWZ1bmN0aW9uKGUsdCl7aWYoISQoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcignImxpc3QiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpO2lmKDA9PT1lLmxlbmd0aClyZXR1cm4gcy5hbGxvYygwKTt2YXIgbjtpZih2b2lkIDA9PT10KWZvcih0PTAsbj0wO248ZS5sZW5ndGg7KytuKXQrPWVbbl0ubGVuZ3RoO3ZhciByPXMuYWxsb2NVbnNhZmUodCksaT0wO2ZvcihuPTA7bjxlLmxlbmd0aDsrK24pe3ZhciBvPWVbbl07aWYoIXMuaXNCdWZmZXIobykpdGhyb3cgbmV3IFR5cGVFcnJvcignImxpc3QiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpO28uY29weShyLGkpLGkrPW8ubGVuZ3RofXJldHVybiByfSxzLmJ5dGVMZW5ndGg9XyxzLnByb3RvdHlwZS5faXNCdWZmZXI9ITAscy5wcm90b3R5cGUuc3dhcDE2PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5sZW5ndGg7aWYoZSUyIT09MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcigiQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMiKTtmb3IodmFyIHQ9MDt0PGU7dCs9MiltKHRoaXMsdCx0KzEpO3JldHVybiB0aGlzfSxzLnByb3RvdHlwZS5zd2FwMzI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmxlbmd0aDtpZihlJTQhPT0wKXRocm93IG5ldyBSYW5nZUVycm9yKCJCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cyIpO2Zvcih2YXIgdD0wO3Q8ZTt0Kz00KW0odGhpcyx0LHQrMyksbSh0aGlzLHQrMSx0KzIpO3JldHVybiB0aGlzfSxzLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3ZhciBlPTB8dGhpcy5sZW5ndGg7cmV0dXJuIDA9PT1lPyIiOjA9PT1hcmd1bWVudHMubGVuZ3RoP0kodGhpcywwLGUpOnYuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxzLnByb3RvdHlwZS5lcXVhbHM9ZnVuY3Rpb24oZSl7aWYoIXMuaXNCdWZmZXIoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciIpO3JldHVybiB0aGlzPT09ZXx8MD09PXMuY29tcGFyZSh0aGlzLGUpfSxzLnByb3RvdHlwZS5pbnNwZWN0PWZ1bmN0aW9uKCl7dmFyIGU9IiIsdD1uLklOU1BFQ1RfTUFYX0JZVEVTO3JldHVybiB0aGlzLmxlbmd0aD4wJiYoZT10aGlzLnRvU3RyaW5nKCJoZXgiLDAsdCkubWF0Y2goLy57Mn0vZykuam9pbigiICIpLHRoaXMubGVuZ3RoPnQmJihlKz0iIC4uLiAiKSksIjxCdWZmZXIgIitlKyI+In0scy5wcm90b3R5cGUuY29tcGFyZT1mdW5jdGlvbihlLHQsbixyLGkpe2lmKCFzLmlzQnVmZmVyKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoIkFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIiKTtpZih2b2lkIDA9PT10JiYodD0wKSx2b2lkIDA9PT1uJiYobj1lP2UubGVuZ3RoOjApLHZvaWQgMD09PXImJihyPTApLHZvaWQgMD09PWkmJihpPXRoaXMubGVuZ3RoKSx0PDB8fG4+ZS5sZW5ndGh8fHI8MHx8aT50aGlzLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcigib3V0IG9mIHJhbmdlIGluZGV4Iik7aWYocj49aSYmdD49bilyZXR1cm4gMDtpZihyPj1pKXJldHVybi0xO2lmKHQ+PW4pcmV0dXJuIDE7aWYodD4+Pj0wLG4+Pj49MCxyPj4+PTAsaT4+Pj0wLHRoaXM9PT1lKXJldHVybiAwO2Zvcih2YXIgbz1pLXIsYT1uLXQsdT1NYXRoLm1pbihvLGEpLGY9dGhpcy5zbGljZShyLGkpLGM9ZS5zbGljZSh0LG4pLGw9MDtsPHU7KytsKWlmKGZbbF0hPT1jW2xdKXtvPWZbbF0sYT1jW2xdO2JyZWFrfXJldHVybiBvPGE/LTE6YTxvPzE6MH0scy5wcm90b3R5cGUuaW5kZXhPZj1mdW5jdGlvbihlLHQsbil7aWYoInN0cmluZyI9PXR5cGVvZiB0PyhuPXQsdD0wKTp0PjIxNDc0ODM2NDc/dD0yMTQ3NDgzNjQ3OnQ8LTIxNDc0ODM2NDgmJih0PS0yMTQ3NDgzNjQ4KSx0Pj49MCwwPT09dGhpcy5sZW5ndGgpcmV0dXJuLTE7aWYodD49dGhpcy5sZW5ndGgpcmV0dXJuLTE7aWYodDwwJiYodD1NYXRoLm1heCh0aGlzLmxlbmd0aCt0LDApKSwic3RyaW5nIj09dHlwZW9mIGUmJihlPXMuZnJvbShlLG4pKSxzLmlzQnVmZmVyKGUpKXJldHVybiAwPT09ZS5sZW5ndGg/LTE6RSh0aGlzLGUsdCxuKTtpZigibnVtYmVyIj09dHlwZW9mIGUpcmV0dXJuIHMuVFlQRURfQVJSQVlfU1VQUE9SVCYmImZ1bmN0aW9uIj09PVVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2Y/VWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKHRoaXMsZSx0KTpFKHRoaXMsW2VdLHQsbik7dGhyb3cgbmV3IFR5cGVFcnJvcigidmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyIil9LHMucHJvdG90eXBlLmluY2x1ZGVzPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdGhpcy5pbmRleE9mKGUsdCxuKSE9PS0xfSxzLnByb3RvdHlwZS53cml0ZT1mdW5jdGlvbihlLHQsbixyKXtpZih2b2lkIDA9PT10KXI9InV0ZjgiLG49dGhpcy5sZW5ndGgsdD0wO2Vsc2UgaWYodm9pZCAwPT09biYmInN0cmluZyI9PXR5cGVvZiB0KXI9dCxuPXRoaXMubGVuZ3RoLHQ9MDtlbHNle2lmKCFpc0Zpbml0ZSh0KSl0aHJvdyBuZXcgRXJyb3IoIkJ1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkIik7dD0wfHQsaXNGaW5pdGUobik/KG49MHxuLHZvaWQgMD09PXImJihyPSJ1dGY4IikpOihyPW4sbj12b2lkIDApfXZhciBpPXRoaXMubGVuZ3RoLXQ7aWYoKHZvaWQgMD09PW58fG4+aSkmJihuPWkpLGUubGVuZ3RoPjAmJihuPDB8fHQ8MCl8fHQ+dGhpcy5sZW5ndGgpdGhyb3cgbmV3IFJhbmdlRXJyb3IoIkF0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzIik7cnx8KHI9InV0ZjgiKTtmb3IodmFyIG89ITE7Oylzd2l0Y2gocil7Y2FzZSJoZXgiOnJldHVybiB3KHRoaXMsZSx0LG4pO2Nhc2UidXRmOCI6Y2FzZSJ1dGYtOCI6cmV0dXJuIGIodGhpcyxlLHQsbik7Y2FzZSJhc2NpaSI6cmV0dXJuIFModGhpcyxlLHQsbik7Y2FzZSJiaW5hcnkiOnJldHVybiBPKHRoaXMsZSx0LG4pO2Nhc2UiYmFzZTY0IjpyZXR1cm4gUih0aGlzLGUsdCxuKTtjYXNlInVjczIiOmNhc2UidWNzLTIiOmNhc2UidXRmMTZsZSI6Y2FzZSJ1dGYtMTZsZSI6cmV0dXJuIEEodGhpcyxlLHQsbik7ZGVmYXVsdDppZihvKXRocm93IG5ldyBUeXBlRXJyb3IoIlVua25vd24gZW5jb2Rpbmc6ICIrcik7cj0oIiIrcikudG9Mb3dlckNhc2UoKSxvPSEwfX0scy5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJue3R5cGU6IkJ1ZmZlciIsZGF0YTpBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnJ8fHRoaXMsMCl9fTt2YXIgWj00MDk2O3MucHJvdG90eXBlLnNsaWNlPWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5sZW5ndGg7ZT1+fmUsdD12b2lkIDA9PT10P246fn50LGU8MD8oZSs9bixlPDAmJihlPTApKTplPm4mJihlPW4pLHQ8MD8odCs9bix0PDAmJih0PTApKTp0Pm4mJih0PW4pLHQ8ZSYmKHQ9ZSk7dmFyIHI7aWYocy5UWVBFRF9BUlJBWV9TVVBQT1JUKXI9dGhpcy5zdWJhcnJheShlLHQpLHIuX19wcm90b19fPXMucHJvdG90eXBlO2Vsc2V7dmFyIGk9dC1lO3I9bmV3IHMoaSwodm9pZCAwKSk7Zm9yKHZhciBvPTA7bzxpOysrbylyW29dPXRoaXNbbytlXX1yZXR1cm4gcn0scy5wcm90b3R5cGUucmVhZFVJbnRMRT1mdW5jdGlvbihlLHQsbil7ZT0wfGUsdD0wfHQsbnx8eChlLHQsdGhpcy5sZW5ndGgpO2Zvcih2YXIgcj10aGlzW2VdLGk9MSxvPTA7KytvPHQmJihpKj0yNTYpOylyKz10aGlzW2Urb10qaTtyZXR1cm4gcn0scy5wcm90b3R5cGUucmVhZFVJbnRCRT1mdW5jdGlvbihlLHQsbil7ZT0wfGUsdD0wfHQsbnx8eChlLHQsdGhpcy5sZW5ndGgpO2Zvcih2YXIgcj10aGlzW2UrLS10XSxpPTE7dD4wJiYoaSo9MjU2KTspcis9dGhpc1tlKy0tdF0qaTtyZXR1cm4gcn0scy5wcm90b3R5cGUucmVhZFVJbnQ4PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHR8fHgoZSwxLHRoaXMubGVuZ3RoKSx0aGlzW2VdfSxzLnByb3RvdHlwZS5yZWFkVUludDE2TEU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdHx8eChlLDIsdGhpcy5sZW5ndGgpLHRoaXNbZV18dGhpc1tlKzFdPDw4fSxzLnByb3RvdHlwZS5yZWFkVUludDE2QkU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdHx8eChlLDIsdGhpcy5sZW5ndGgpLHRoaXNbZV08PDh8dGhpc1tlKzFdfSxzLnByb3RvdHlwZS5yZWFkVUludDMyTEU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdHx8eChlLDQsdGhpcy5sZW5ndGgpLCh0aGlzW2VdfHRoaXNbZSsxXTw8OHx0aGlzW2UrMl08PDE2KSsxNjc3NzIxNip0aGlzW2UrM119LHMucHJvdG90eXBlLnJlYWRVSW50MzJCRT1mdW5jdGlvbihlLHQpe3JldHVybiB0fHx4KGUsNCx0aGlzLmxlbmd0aCksMTY3NzcyMTYqdGhpc1tlXSsodGhpc1tlKzFdPDwxNnx0aGlzW2UrMl08PDh8dGhpc1tlKzNdKX0scy5wcm90b3R5cGUucmVhZEludExFPWZ1bmN0aW9uKGUsdCxuKXtlPTB8ZSx0PTB8dCxufHx4KGUsdCx0aGlzLmxlbmd0aCk7Zm9yKHZhciByPXRoaXNbZV0saT0xLG89MDsrK288dCYmKGkqPTI1Nik7KXIrPXRoaXNbZStvXSppO3JldHVybiBpKj0xMjgscj49aSYmKHItPU1hdGgucG93KDIsOCp0KSkscn0scy5wcm90b3R5cGUucmVhZEludEJFPWZ1bmN0aW9uKGUsdCxuKXtlPTB8ZSx0PTB8dCxufHx4KGUsdCx0aGlzLmxlbmd0aCk7Zm9yKHZhciByPXQsaT0xLG89dGhpc1tlKy0tcl07cj4wJiYoaSo9MjU2KTspbys9dGhpc1tlKy0tcl0qaTtyZXR1cm4gaSo9MTI4LG8+PWkmJihvLT1NYXRoLnBvdygyLDgqdCkpLG99LHMucHJvdG90eXBlLnJlYWRJbnQ4PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHR8fHgoZSwxLHRoaXMubGVuZ3RoKSwxMjgmdGhpc1tlXT8oMjU1LXRoaXNbZV0rMSkqLTE6dGhpc1tlXX0scy5wcm90b3R5cGUucmVhZEludDE2TEU9ZnVuY3Rpb24oZSx0KXt0fHx4KGUsMix0aGlzLmxlbmd0aCk7dmFyIG49dGhpc1tlXXx0aGlzW2UrMV08PDg7cmV0dXJuIDMyNzY4Jm4/NDI5NDkwMTc2MHxuOm59LHMucHJvdG90eXBlLnJlYWRJbnQxNkJFPWZ1bmN0aW9uKGUsdCl7dHx8eChlLDIsdGhpcy5sZW5ndGgpO3ZhciBuPXRoaXNbZSsxXXx0aGlzW2VdPDw4O3JldHVybiAzMjc2OCZuPzQyOTQ5MDE3NjB8bjpufSxzLnByb3RvdHlwZS5yZWFkSW50MzJMRT1mdW5jdGlvbihlLHQpe3JldHVybiB0fHx4KGUsNCx0aGlzLmxlbmd0aCksdGhpc1tlXXx0aGlzW2UrMV08PDh8dGhpc1tlKzJdPDwxNnx0aGlzW2UrM108PDI0fSxzLnByb3RvdHlwZS5yZWFkSW50MzJCRT1mdW5jdGlvbihlLHQpe3JldHVybiB0fHx4KGUsNCx0aGlzLmxlbmd0aCksdGhpc1tlXTw8MjR8dGhpc1tlKzFdPDwxNnx0aGlzW2UrMl08PDh8dGhpc1tlKzNdfSxzLnByb3RvdHlwZS5yZWFkRmxvYXRMRT1mdW5jdGlvbihlLHQpe3JldHVybiB0fHx4KGUsNCx0aGlzLmxlbmd0aCksUS5yZWFkKHRoaXMsZSwhMCwyMyw0KX0scy5wcm90b3R5cGUucmVhZEZsb2F0QkU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdHx8eChlLDQsdGhpcy5sZW5ndGgpLFEucmVhZCh0aGlzLGUsITEsMjMsNCl9LHMucHJvdG90eXBlLnJlYWREb3VibGVMRT1mdW5jdGlvbihlLHQpe3JldHVybiB0fHx4KGUsOCx0aGlzLmxlbmd0aCksUS5yZWFkKHRoaXMsZSwhMCw1Miw4KX0scy5wcm90b3R5cGUucmVhZERvdWJsZUJFPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHR8fHgoZSw4LHRoaXMubGVuZ3RoKSxRLnJlYWQodGhpcyxlLCExLDUyLDgpfSxzLnByb3RvdHlwZS53cml0ZVVJbnRMRT1mdW5jdGlvbihlLHQsbixyKXtpZihlPStlLHQ9MHx0LG49MHxuLCFyKXt2YXIgaT1NYXRoLnBvdygyLDgqbiktMTtEKHRoaXMsZSx0LG4saSwwKX12YXIgbz0xLHM9MDtmb3IodGhpc1t0XT0yNTUmZTsrK3M8biYmKG8qPTI1Nik7KXRoaXNbdCtzXT1lL28mMjU1O3JldHVybiB0K259LHMucHJvdG90eXBlLndyaXRlVUludEJFPWZ1bmN0aW9uKGUsdCxuLHIpe2lmKGU9K2UsdD0wfHQsbj0wfG4sIXIpe3ZhciBpPU1hdGgucG93KDIsOCpuKS0xO0QodGhpcyxlLHQsbixpLDApfXZhciBvPW4tMSxzPTE7Zm9yKHRoaXNbdCtvXT0yNTUmZTstLW8+PTAmJihzKj0yNTYpOyl0aGlzW3Qrb109ZS9zJjI1NTtyZXR1cm4gdCtufSxzLnByb3RvdHlwZS53cml0ZVVJbnQ4PWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gZT0rZSx0PTB8dCxufHxEKHRoaXMsZSx0LDEsMjU1LDApLHMuVFlQRURfQVJSQVlfU1VQUE9SVHx8KGU9TWF0aC5mbG9vcihlKSksdGhpc1t0XT0yNTUmZSx0KzF9LHMucHJvdG90eXBlLndyaXRlVUludDE2TEU9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBlPStlLHQ9MHx0LG58fEQodGhpcyxlLHQsMiw2NTUzNSwwKSxzLlRZUEVEX0FSUkFZX1NVUFBPUlQ/KHRoaXNbdF09MjU1JmUsdGhpc1t0KzFdPWU+Pj44KTpqKHRoaXMsZSx0LCEwKSx0KzJ9LHMucHJvdG90eXBlLndyaXRlVUludDE2QkU9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBlPStlLHQ9MHx0LG58fEQodGhpcyxlLHQsMiw2NTUzNSwwKSxzLlRZUEVEX0FSUkFZX1NVUFBPUlQ/KHRoaXNbdF09ZT4+PjgsdGhpc1t0KzFdPTI1NSZlKTpqKHRoaXMsZSx0LCExKSx0KzJ9LHMucHJvdG90eXBlLndyaXRlVUludDMyTEU9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBlPStlLHQ9MHx0LG58fEQodGhpcyxlLHQsNCw0Mjk0OTY3Mjk1LDApLHMuVFlQRURfQVJSQVlfU1VQUE9SVD8odGhpc1t0KzNdPWU+Pj4yNCx0aGlzW3QrMl09ZT4+PjE2LHRoaXNbdCsxXT1lPj4+OCx0aGlzW3RdPTI1NSZlKTpVKHRoaXMsZSx0LCEwKSx0KzR9LHMucHJvdG90eXBlLndyaXRlVUludDMyQkU9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBlPStlLHQ9MHx0LG58fEQodGhpcyxlLHQsNCw0Mjk0OTY3Mjk1LDApLHMuVFlQRURfQVJSQVlfU1VQUE9SVD8odGhpc1t0XT1lPj4+MjQsdGhpc1t0KzFdPWU+Pj4xNix0aGlzW3QrMl09ZT4+PjgsdGhpc1t0KzNdPTI1NSZlKTpVKHRoaXMsZSx0LCExKSx0KzR9LHMucHJvdG90eXBlLndyaXRlSW50TEU9ZnVuY3Rpb24oZSx0LG4scil7aWYoZT0rZSx0PTB8dCwhcil7dmFyIGk9TWF0aC5wb3coMiw4Km4tMSk7RCh0aGlzLGUsdCxuLGktMSwtaSl9dmFyIG89MCxzPTEsYT0wO2Zvcih0aGlzW3RdPTI1NSZlOysrbzxuJiYocyo9MjU2KTspZTwwJiYwPT09YSYmMCE9PXRoaXNbdCtvLTFdJiYoYT0xKSx0aGlzW3Qrb109KGUvcz4+MCktYSYyNTU7cmV0dXJuIHQrbn0scy5wcm90b3R5cGUud3JpdGVJbnRCRT1mdW5jdGlvbihlLHQsbixyKXtpZihlPStlLHQ9MHx0LCFyKXt2YXIgaT1NYXRoLnBvdygyLDgqbi0xKTtEKHRoaXMsZSx0LG4saS0xLC1pKX12YXIgbz1uLTEscz0xLGE9MDtmb3IodGhpc1t0K29dPTI1NSZlOy0tbz49MCYmKHMqPTI1Nik7KWU8MCYmMD09PWEmJjAhPT10aGlzW3QrbysxXSYmKGE9MSksdGhpc1t0K29dPShlL3M+PjApLWEmMjU1O3JldHVybiB0K259LHMucHJvdG90eXBlLndyaXRlSW50OD1mdW5jdGlvbihlLHQsbil7cmV0dXJuIGU9K2UsdD0wfHQsbnx8RCh0aGlzLGUsdCwxLDEyNywtMTI4KSxzLlRZUEVEX0FSUkFZX1NVUFBPUlR8fChlPU1hdGguZmxvb3IoZSkpLGU8MCYmKGU9MjU1K2UrMSksdGhpc1t0XT0yNTUmZSx0KzF9LHMucHJvdG90eXBlLndyaXRlSW50MTZMRT1mdW5jdGlvbihlLHQsbil7cmV0dXJuIGU9K2UsdD0wfHQsbnx8RCh0aGlzLGUsdCwyLDMyNzY3LC0zMjc2OCkscy5UWVBFRF9BUlJBWV9TVVBQT1JUPyh0aGlzW3RdPTI1NSZlLHRoaXNbdCsxXT1lPj4+OCk6aih0aGlzLGUsdCwhMCksdCsyfSxzLnByb3RvdHlwZS53cml0ZUludDE2QkU9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBlPStlLHQ9MHx0LG58fEQodGhpcyxlLHQsMiwzMjc2NywtMzI3NjgpLHMuVFlQRURfQVJSQVlfU1VQUE9SVD8odGhpc1t0XT1lPj4+OCx0aGlzW3QrMV09MjU1JmUpOmoodGhpcyxlLHQsITEpLHQrMn0scy5wcm90b3R5cGUud3JpdGVJbnQzMkxFPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gZT0rZSx0PTB8dCxufHxEKHRoaXMsZSx0LDQsMjE0NzQ4MzY0NywtMjE0NzQ4MzY0OCkscy5UWVBFRF9BUlJBWV9TVVBQT1JUPyh0aGlzW3RdPTI1NSZlLHRoaXNbdCsxXT1lPj4+OCx0aGlzW3QrMl09ZT4+PjE2LHRoaXNbdCszXT1lPj4+MjQpOlUodGhpcyxlLHQsITApLHQrNH0scy5wcm90b3R5cGUud3JpdGVJbnQzMkJFPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gZT0rZSx0PTB8dCxufHxEKHRoaXMsZSx0LDQsMjE0NzQ4MzY0NywtMjE0NzQ4MzY0OCksZTwwJiYoZT00Mjk0OTY3Mjk1K2UrMSkscy5UWVBFRF9BUlJBWV9TVVBQT1JUPyh0aGlzW3RdPWU+Pj4yNCx0aGlzW3QrMV09ZT4+PjE2LHRoaXNbdCsyXT1lPj4+OCx0aGlzW3QrM109MjU1JmUpOlUodGhpcyxlLHQsITEpLHQrNH0scy5wcm90b3R5cGUud3JpdGVGbG9hdExFPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gQih0aGlzLGUsdCwhMCxuKX0scy5wcm90b3R5cGUud3JpdGVGbG9hdEJFPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gQih0aGlzLGUsdCwhMSxuKX0scy5wcm90b3R5cGUud3JpdGVEb3VibGVMRT1mdW5jdGlvbihlLHQsbil7cmV0dXJuIEcodGhpcyxlLHQsITAsbil9LHMucHJvdG90eXBlLndyaXRlRG91YmxlQkU9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBHKHRoaXMsZSx0LCExLG4pfSxzLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKGUsdCxuLHIpe2lmKG58fChuPTApLHJ8fDA9PT1yfHwocj10aGlzLmxlbmd0aCksdD49ZS5sZW5ndGgmJih0PWUubGVuZ3RoKSx0fHwodD0wKSxyPjAmJnI8biYmKHI9bikscj09PW4pcmV0dXJuIDA7aWYoMD09PWUubGVuZ3RofHwwPT09dGhpcy5sZW5ndGgpcmV0dXJuIDA7aWYodDwwKXRocm93IG5ldyBSYW5nZUVycm9yKCJ0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzIik7aWYobjwwfHxuPj10aGlzLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcigic291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcyIpO2lmKHI8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcigic291cmNlRW5kIG91dCBvZiBib3VuZHMiKTtyPnRoaXMubGVuZ3RoJiYocj10aGlzLmxlbmd0aCksZS5sZW5ndGgtdDxyLW4mJihyPWUubGVuZ3RoLXQrbik7dmFyIGksbz1yLW47aWYodGhpcz09PWUmJm48dCYmdDxyKWZvcihpPW8tMTtpPj0wOy0taSllW2krdF09dGhpc1tpK25dO2Vsc2UgaWYobzwxZTN8fCFzLlRZUEVEX0FSUkFZX1NVUFBPUlQpZm9yKGk9MDtpPG87KytpKWVbaSt0XT10aGlzW2krbl07ZWxzZSBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChlLHRoaXMuc3ViYXJyYXkobixuK28pLHQpO3JldHVybiBvfSxzLnByb3RvdHlwZS5maWxsPWZ1bmN0aW9uKGUsdCxuLHIpe2lmKCJzdHJpbmciPT10eXBlb2YgZSl7aWYoInN0cmluZyI9PXR5cGVvZiB0PyhyPXQsdD0wLG49dGhpcy5sZW5ndGgpOiJzdHJpbmciPT10eXBlb2YgbiYmKHI9bixuPXRoaXMubGVuZ3RoKSwxPT09ZS5sZW5ndGgpe3ZhciBpPWUuY2hhckNvZGVBdCgwKTtpPDI1NiYmKGU9aSl9aWYodm9pZCAwIT09ciYmInN0cmluZyIhPXR5cGVvZiByKXRocm93IG5ldyBUeXBlRXJyb3IoImVuY29kaW5nIG11c3QgYmUgYSBzdHJpbmciKTtpZigic3RyaW5nIj09dHlwZW9mIHImJiFzLmlzRW5jb2RpbmcocikpdGhyb3cgbmV3IFR5cGVFcnJvcigiVW5rbm93biBlbmNvZGluZzogIityKX1lbHNlIm51bWJlciI9PXR5cGVvZiBlJiYoZT0yNTUmZSk7aWYodDwwfHx0aGlzLmxlbmd0aDx0fHx0aGlzLmxlbmd0aDxuKXRocm93IG5ldyBSYW5nZUVycm9yKCJPdXQgb2YgcmFuZ2UgaW5kZXgiKTtpZihuPD10KXJldHVybiB0aGlzO3Q+Pj49MCxuPXZvaWQgMD09PW4/dGhpcy5sZW5ndGg6bj4+PjAsZXx8KGU9MCk7dmFyIG87aWYoIm51bWJlciI9PXR5cGVvZiBlKWZvcihvPXQ7bzxuOysrbyl0aGlzW29dPWU7ZWxzZXt2YXIgYT1zLmlzQnVmZmVyKGUpP2U6cShuZXcgcyhlLHIpLnRvU3RyaW5nKCkpLHU9YS5sZW5ndGg7Zm9yKG89MDtvPG4tdDsrK28pdGhpc1tvK3RdPWFbbyV1XX1yZXR1cm4gdGhpc307dmFyIGVlPS9bXitcLzAtOUEtWmEtei1fXS9nfSkuY2FsbCh0aGlzLCJ1bmRlZmluZWQiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDoidW5kZWZpbmVkIiE9dHlwZW9mIHNlbGY/c2VsZjoidW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30pfSx7ImJhc2U2NC1qcyI6MixpZWVlNzU0OjE3LGlzYXJyYXk6MjF9XSw4OltmdW5jdGlvbihlLHQsbil7dC5leHBvcnRzPXtPX1JET05MWTowLE9fV1JPTkxZOjEsT19SRFdSOjIsU19JRk1UOjYxNDQwLFNfSUZSRUc6MzI3NjgsU19JRkRJUjoxNjM4NCxTX0lGQ0hSOjgxOTIsU19JRkJMSzoyNDU3NixTX0lGSUZPOjQwOTYsU19JRkxOSzo0MDk2MCxTX0lGU09DSzo0OTE1MixPX0NSRUFUOjUxMixPX0VYQ0w6MjA0OCxPX05PQ1RUWToxMzEwNzIsT19UUlVOQzoxMDI0LE9fQVBQRU5EOjgsT19ESVJFQ1RPUlk6MTA0ODU3NixPX05PRk9MTE9XOjI1NixPX1NZTkM6MTI4LE9fU1lNTElOSzoyMDk3MTUyLE9fTk9OQkxPQ0s6NCxTX0lSV1hVOjQ0OCxTX0lSVVNSOjI1NixTX0lXVVNSOjEyOCxTX0lYVVNSOjY0LFNfSVJXWEc6NTYsU19JUkdSUDozMixTX0lXR1JQOjE2LFNfSVhHUlA6OCxTX0lSV1hPOjcsU19JUk9USDo0LFNfSVdPVEg6MixTX0lYT1RIOjEsRTJCSUc6NyxFQUNDRVM6MTMsRUFERFJJTlVTRTo0OCxFQUREUk5PVEFWQUlMOjQ5LEVBRk5PU1VQUE9SVDo0NyxFQUdBSU46MzUsRUFMUkVBRFk6MzcsRUJBREY6OSxFQkFETVNHOjk0LEVCVVNZOjE2LEVDQU5DRUxFRDo4OSxFQ0hJTEQ6MTAsRUNPTk5BQk9SVEVEOjUzLEVDT05OUkVGVVNFRDo2MSxFQ09OTlJFU0VUOjU0LEVERUFETEs6MTEsRURFU1RBRERSUkVROjM5LEVET006MzMsRURRVU9UOjY5LEVFWElTVDoxNyxFRkFVTFQ6MTQsRUZCSUc6MjcsRUhPU1RVTlJFQUNIOjY1LEVJRFJNOjkwLEVJTFNFUTo5MixFSU5QUk9HUkVTUzozNixFSU5UUjo0LEVJTlZBTDoyMixFSU86NSxFSVNDT05OOjU2LEVJU0RJUjoyMSxFTE9PUDo2MixFTUZJTEU6MjQsRU1MSU5LOjMxLEVNU0dTSVpFOjQwLEVNVUxUSUhPUDo5NSxFTkFNRVRPT0xPTkc6NjMsRU5FVERPV046NTAsRU5FVFJFU0VUOjUyLEVORVRVTlJFQUNIOjUxLEVORklMRToyMyxFTk9CVUZTOjU1LEVOT0RBVEE6OTYsRU5PREVWOjE5LEVOT0VOVDoyLEVOT0VYRUM6OCxFTk9MQ0s6NzcsRU5PTElOSzo5NyxFTk9NRU06MTIsRU5PTVNHOjkxLEVOT1BST1RPT1BUOjQyLEVOT1NQQzoyOCxFTk9TUjo5OCxFTk9TVFI6OTksRU5PU1lTOjc4LEVOT1RDT05OOjU3LEVOT1RESVI6MjAsRU5PVEVNUFRZOjY2LEVOT1RTT0NLOjM4LEVOT1RTVVA6NDUsRU5PVFRZOjI1LEVOWElPOjYsRU9QTk9UU1VQUDoxMDIsRU9WRVJGTE9XOjg0LEVQRVJNOjEsRVBJUEU6MzIsRVBST1RPOjEwMCxFUFJPVE9OT1NVUFBPUlQ6NDMsRVBST1RPVFlQRTo0MSxFUkFOR0U6MzQsRVJPRlM6MzAsRVNQSVBFOjI5LEVTUkNIOjMsRVNUQUxFOjcwLEVUSU1FOjEwMSxFVElNRURPVVQ6NjAsRVRYVEJTWToyNixFV09VTERCTE9DSzozNSxFWERFVjoxOCxTSUdIVVA6MSxTSUdJTlQ6MixTSUdRVUlUOjMsU0lHSUxMOjQsU0lHVFJBUDo1LFNJR0FCUlQ6NixTSUdJT1Q6NixTSUdCVVM6MTAsU0lHRlBFOjgsU0lHS0lMTDo5LFNJR1VTUjE6MzAsU0lHU0VHVjoxMSxTSUdVU1IyOjMxLFNJR1BJUEU6MTMsU0lHQUxSTToxNCxTSUdURVJNOjE1LFNJR0NITEQ6MjAsU0lHQ09OVDoxOSxTSUdTVE9QOjE3LFNJR1RTVFA6MTgsU0lHVFRJTjoyMSxTSUdUVE9VOjIyLFNJR1VSRzoxNixTSUdYQ1BVOjI0LFNJR1hGU1o6MjUsU0lHVlRBTFJNOjI2LFNJR1BST0Y6MjcsU0lHV0lOQ0g6MjgsU0lHSU86MjMsU0lHU1lTOjEyLFNTTF9PUF9BTEw6MjE0NzQ4NjcxOSxTU0xfT1BfQUxMT1dfVU5TQUZFX0xFR0FDWV9SRU5FR09USUFUSU9OOjI2MjE0NCxTU0xfT1BfQ0lQSEVSX1NFUlZFUl9QUkVGRVJFTkNFOjQxOTQzMDQsU1NMX09QX0NJU0NPX0FOWUNPTk5FQ1Q6MzI3NjgsU1NMX09QX0NPT0tJRV9FWENIQU5HRTo4MTkyLFNTTF9PUF9DUllQVE9QUk9fVExTRVhUX0JVRzoyMTQ3NDgzNjQ4LFNTTF9PUF9ET05UX0lOU0VSVF9FTVBUWV9GUkFHTUVOVFM6MjA0OCxTU0xfT1BfRVBIRU1FUkFMX1JTQTowLFNTTF9PUF9MRUdBQ1lfU0VSVkVSX0NPTk5FQ1Q6NCxTU0xfT1BfTUlDUk9TT0ZUX0JJR19TU0xWM19CVUZGRVI6MzIsU1NMX09QX01JQ1JPU09GVF9TRVNTX0lEX0JVRzoxLFNTTF9PUF9NU0lFX1NTTFYyX1JTQV9QQURESU5HOjAsU1NMX09QX05FVFNDQVBFX0NBX0ROX0JVRzo1MzY4NzA5MTIsU1NMX09QX05FVFNDQVBFX0NIQUxMRU5HRV9CVUc6MixTU0xfT1BfTkVUU0NBUEVfREVNT19DSVBIRVJfQ0hBTkdFX0JVRzoxMDczNzQxODI0LFNTTF9PUF9ORVRTQ0FQRV9SRVVTRV9DSVBIRVJfQ0hBTkdFX0JVRzo4LFNTTF9PUF9OT19DT01QUkVTU0lPTjoxMzEwNzIsU1NMX09QX05PX1FVRVJZX01UVTo0MDk2LFNTTF9PUF9OT19TRVNTSU9OX1JFU1VNUFRJT05fT05fUkVORUdPVElBVElPTjo2NTUzNixTU0xfT1BfTk9fU1NMdjI6MTY3NzcyMTYsU1NMX09QX05PX1NTTHYzOjMzNTU0NDMyLFNTTF9PUF9OT19USUNLRVQ6MTYzODQsU1NMX09QX05PX1RMU3YxOjY3MTA4ODY0LFNTTF9PUF9OT19UTFN2MV8xOjI2ODQzNTQ1NixTU0xfT1BfTk9fVExTdjFfMjoxMzQyMTc3MjgsU1NMX09QX1BLQ1MxX0NIRUNLXzE6MCxTU0xfT1BfUEtDUzFfQ0hFQ0tfMjowLFNTTF9PUF9TSU5HTEVfREhfVVNFOjEwNDg1NzYsU1NMX09QX1NJTkdMRV9FQ0RIX1VTRTo1MjQyODgsU1NMX09QX1NTTEVBWV8wODBfQ0xJRU5UX0RIX0JVRzoxMjgsU1NMX09QX1NTTFJFRjJfUkVVU0VfQ0VSVF9UWVBFX0JVRzowLFNTTF9PUF9UTFNfQkxPQ0tfUEFERElOR19CVUc6NTEyLFNTTF9PUF9UTFNfRDVfQlVHOjI1NixTU0xfT1BfVExTX1JPTExCQUNLX0JVRzo4Mzg4NjA4LEVOR0lORV9NRVRIT0RfRFNBOjIsRU5HSU5FX01FVEhPRF9ESDo0LEVOR0lORV9NRVRIT0RfUkFORDo4LEVOR0lORV9NRVRIT0RfRUNESDoxNixFTkdJTkVfTUVUSE9EX0VDRFNBOjMyLEVOR0lORV9NRVRIT0RfQ0lQSEVSUzo2NCxFTkdJTkVfTUVUSE9EX0RJR0VTVFM6MTI4LEVOR0lORV9NRVRIT0RfU1RPUkU6MjU2LEVOR0lORV9NRVRIT0RfUEtFWV9NRVRIUzo1MTIsRU5HSU5FX01FVEhPRF9QS0VZX0FTTjFfTUVUSFM6MTAyNCxFTkdJTkVfTUVUSE9EX0FMTDo2NTUzNSxFTkdJTkVfTUVUSE9EX05PTkU6MCxESF9DSEVDS19QX05PVF9TQUZFX1BSSU1FOjIsREhfQ0hFQ0tfUF9OT1RfUFJJTUU6MSxESF9VTkFCTEVfVE9fQ0hFQ0tfR0VORVJBVE9SOjQsREhfTk9UX1NVSVRBQkxFX0dFTkVSQVRPUjo4LE5QTl9FTkFCTEVEOjEsUlNBX1BLQ1MxX1BBRERJTkc6MSxSU0FfU1NMVjIzX1BBRERJTkc6MixSU0FfTk9fUEFERElORzozLFJTQV9QS0NTMV9PQUVQX1BBRERJTkc6NCxSU0FfWDkzMV9QQURESU5HOjUsUlNBX1BLQ1MxX1BTU19QQURESU5HOjYsUE9JTlRfQ09OVkVSU0lPTl9DT01QUkVTU0VEOjIsUE9JTlRfQ09OVkVSU0lPTl9VTkNPTVBSRVNTRUQ6NCxQT0lOVF9DT05WRVJTSU9OX0hZQlJJRDo2LEZfT0s6MCxSX09LOjQsV19PSzoyLFhfT0s6MSxVVl9VRFBfUkVVU0VBRERSOjR9fSx7fV0sOTpbZnVuY3Rpb24oZSx0LG4pe3ZhciByPWUoIi4uLy4uL21vZHVsZXMvX2NvcmUiKSxpPXIuSlNPTnx8KHIuSlNPTj17c3RyaW5naWZ5OkpTT04uc3RyaW5naWZ5fSk7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBpLnN0cmluZ2lmeS5hcHBseShpLGFyZ3VtZW50cyl9fSx7Ii4uLy4uL21vZHVsZXMvX2NvcmUiOjEwfV0sMTA6W2Z1bmN0aW9uKGUsdCxuKXt2YXIgcj10LmV4cG9ydHM9e3ZlcnNpb246IjIuNC4wIn07Im51bWJlciI9PXR5cGVvZiBfX2UmJihfX2U9cil9LHt9XSwxMTpbZnVuY3Rpb24oZSx0LG4peyhmdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUpe3JldHVybiBBcnJheS5pc0FycmF5P0FycmF5LmlzQXJyYXkoZSk6IltvYmplY3QgQXJyYXldIj09PXkoZSl9ZnVuY3Rpb24gcihlKXtyZXR1cm4iYm9vbGVhbiI9PXR5cGVvZiBlfWZ1bmN0aW9uIGkoZSl7cmV0dXJuIG51bGw9PT1lfWZ1bmN0aW9uIG8oZSl7cmV0dXJuIG51bGw9PWV9ZnVuY3Rpb24gcyhlKXtyZXR1cm4ibnVtYmVyIj09dHlwZW9mIGV9ZnVuY3Rpb24gYShlKXtyZXR1cm4ic3RyaW5nIj09dHlwZW9mIGV9ZnVuY3Rpb24gdShlKXtyZXR1cm4ic3ltYm9sIj09dHlwZW9mIGV9ZnVuY3Rpb24gZihlKXtyZXR1cm4gdm9pZCAwPT09ZX1mdW5jdGlvbiBjKGUpe3JldHVybiJbb2JqZWN0IFJlZ0V4cF0iPT09eShlKX1mdW5jdGlvbiBsKGUpe3JldHVybiJvYmplY3QiPT10eXBlb2YgZSYmbnVsbCE9PWV9ZnVuY3Rpb24gaChlKXtyZXR1cm4iW29iamVjdCBEYXRlXSI9PT15KGUpfWZ1bmN0aW9uIHAoZSl7cmV0dXJuIltvYmplY3QgRXJyb3JdIj09PXkoZSl8fGUgaW5zdGFuY2VvZiBFcnJvcn1mdW5jdGlvbiBkKGUpe3JldHVybiJmdW5jdGlvbiI9PXR5cGVvZiBlfWZ1bmN0aW9uIGcoZSl7cmV0dXJuIG51bGw9PT1lfHwiYm9vbGVhbiI9PXR5cGVvZiBlfHwibnVtYmVyIj09dHlwZW9mIGV8fCJzdHJpbmciPT10eXBlb2YgZXx8InN5bWJvbCI9PXR5cGVvZiBlfHwidW5kZWZpbmVkIj09dHlwZW9mIGV9ZnVuY3Rpb24geShlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfW4uaXNBcnJheT10LG4uaXNCb29sZWFuPXIsbi5pc051bGw9aSxuLmlzTnVsbE9yVW5kZWZpbmVkPW8sbi5pc051bWJlcj1zLG4uaXNTdHJpbmc9YSxuLmlzU3ltYm9sPXUsbi5pc1VuZGVmaW5lZD1mLG4uaXNSZWdFeHA9YyxuLmlzT2JqZWN0PWwsbi5pc0RhdGU9aCxuLmlzRXJyb3I9cCxuLmlzRnVuY3Rpb249ZCxuLmlzUHJpbWl0aXZlPWcsbi5pc0J1ZmZlcj1lLmlzQnVmZmVyfSkuY2FsbCh0aGlzLHtpc0J1ZmZlcjplKCIuLi8uLi9pcy1idWZmZXIvaW5kZXguanMiKX0pfSx7Ii4uLy4uL2lzLWJ1ZmZlci9pbmRleC5qcyI6MjB9XSwxMjpbZnVuY3Rpb24oZSx0LG4pe2Z1bmN0aW9uIHIoKXt0aGlzLl9ldmVudHM9dGhpcy5fZXZlbnRzfHx7fSx0aGlzLl9tYXhMaXN0ZW5lcnM9dGhpcy5fbWF4TGlzdGVuZXJzfHx2b2lkIDB9ZnVuY3Rpb24gaShlKXtyZXR1cm4iZnVuY3Rpb24iPT10eXBlb2YgZX1mdW5jdGlvbiBvKGUpe3JldHVybiJudW1iZXIiPT10eXBlb2YgZX1mdW5jdGlvbiBzKGUpe3JldHVybiJvYmplY3QiPT10eXBlb2YgZSYmbnVsbCE9PWV9ZnVuY3Rpb24gYShlKXtyZXR1cm4gdm9pZCAwPT09ZX10LmV4cG9ydHM9cixyLkV2ZW50RW1pdHRlcj1yLHIucHJvdG90eXBlLl9ldmVudHM9dm9pZCAwLHIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnM9dm9pZCAwLHIuZGVmYXVsdE1heExpc3RlbmVycz0xMCxyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnM9ZnVuY3Rpb24oZSl7aWYoIW8oZSl8fGU8MHx8aXNOYU4oZSkpdGhyb3cgVHlwZUVycm9yKCJuIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXIiKTsKcmV0dXJuIHRoaXMuX21heExpc3RlbmVycz1lLHRoaXN9LHIucHJvdG90eXBlLmVtaXQ9ZnVuY3Rpb24oZSl7dmFyIHQsbixyLG8sdSxmO2lmKHRoaXMuX2V2ZW50c3x8KHRoaXMuX2V2ZW50cz17fSksImVycm9yIj09PWUmJighdGhpcy5fZXZlbnRzLmVycm9yfHxzKHRoaXMuX2V2ZW50cy5lcnJvcikmJiF0aGlzLl9ldmVudHMuZXJyb3IubGVuZ3RoKSl7aWYodD1hcmd1bWVudHNbMV0sdCBpbnN0YW5jZW9mIEVycm9yKXRocm93IHQ7dmFyIGM9bmV3IEVycm9yKCdVbmNhdWdodCwgdW5zcGVjaWZpZWQgImVycm9yIiBldmVudC4gKCcrdCsiKSIpO3Rocm93IGMuY29udGV4dD10LGN9aWYobj10aGlzLl9ldmVudHNbZV0sYShuKSlyZXR1cm4hMTtpZihpKG4pKXN3aXRjaChhcmd1bWVudHMubGVuZ3RoKXtjYXNlIDE6bi5jYWxsKHRoaXMpO2JyZWFrO2Nhc2UgMjpuLmNhbGwodGhpcyxhcmd1bWVudHNbMV0pO2JyZWFrO2Nhc2UgMzpuLmNhbGwodGhpcyxhcmd1bWVudHNbMV0sYXJndW1lbnRzWzJdKTticmVhaztkZWZhdWx0Om89QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpLG4uYXBwbHkodGhpcyxvKX1lbHNlIGlmKHMobikpZm9yKG89QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpLGY9bi5zbGljZSgpLHI9Zi5sZW5ndGgsdT0wO3U8cjt1KyspZlt1XS5hcHBseSh0aGlzLG8pO3JldHVybiEwfSxyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe3ZhciBuO2lmKCFpKHQpKXRocm93IFR5cGVFcnJvcigibGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uIik7cmV0dXJuIHRoaXMuX2V2ZW50c3x8KHRoaXMuX2V2ZW50cz17fSksdGhpcy5fZXZlbnRzLm5ld0xpc3RlbmVyJiZ0aGlzLmVtaXQoIm5ld0xpc3RlbmVyIixlLGkodC5saXN0ZW5lcik/dC5saXN0ZW5lcjp0KSx0aGlzLl9ldmVudHNbZV0/cyh0aGlzLl9ldmVudHNbZV0pP3RoaXMuX2V2ZW50c1tlXS5wdXNoKHQpOnRoaXMuX2V2ZW50c1tlXT1bdGhpcy5fZXZlbnRzW2VdLHRdOnRoaXMuX2V2ZW50c1tlXT10LHModGhpcy5fZXZlbnRzW2VdKSYmIXRoaXMuX2V2ZW50c1tlXS53YXJuZWQmJihuPWEodGhpcy5fbWF4TGlzdGVuZXJzKT9yLmRlZmF1bHRNYXhMaXN0ZW5lcnM6dGhpcy5fbWF4TGlzdGVuZXJzLG4mJm4+MCYmdGhpcy5fZXZlbnRzW2VdLmxlbmd0aD5uJiYodGhpcy5fZXZlbnRzW2VdLndhcm5lZD0hMCxjb25zb2xlLmVycm9yKCIobm9kZSkgd2FybmluZzogcG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAlZCBsaXN0ZW5lcnMgYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvIGluY3JlYXNlIGxpbWl0LiIsdGhpcy5fZXZlbnRzW2VdLmxlbmd0aCksImZ1bmN0aW9uIj09dHlwZW9mIGNvbnNvbGUudHJhY2UmJmNvbnNvbGUudHJhY2UoKSkpLHRoaXN9LHIucHJvdG90eXBlLm9uPXIucHJvdG90eXBlLmFkZExpc3RlbmVyLHIucHJvdG90eXBlLm9uY2U9ZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBuKCl7dGhpcy5yZW1vdmVMaXN0ZW5lcihlLG4pLHJ8fChyPSEwLHQuYXBwbHkodGhpcyxhcmd1bWVudHMpKX1pZighaSh0KSl0aHJvdyBUeXBlRXJyb3IoImxpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbiIpO3ZhciByPSExO3JldHVybiBuLmxpc3RlbmVyPXQsdGhpcy5vbihlLG4pLHRoaXN9LHIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7dmFyIG4scixvLGE7aWYoIWkodCkpdGhyb3cgVHlwZUVycm9yKCJsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24iKTtpZighdGhpcy5fZXZlbnRzfHwhdGhpcy5fZXZlbnRzW2VdKXJldHVybiB0aGlzO2lmKG49dGhpcy5fZXZlbnRzW2VdLG89bi5sZW5ndGgscj0tMSxuPT09dHx8aShuLmxpc3RlbmVyKSYmbi5saXN0ZW5lcj09PXQpZGVsZXRlIHRoaXMuX2V2ZW50c1tlXSx0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXImJnRoaXMuZW1pdCgicmVtb3ZlTGlzdGVuZXIiLGUsdCk7ZWxzZSBpZihzKG4pKXtmb3IoYT1vO2EtLSA+MDspaWYoblthXT09PXR8fG5bYV0ubGlzdGVuZXImJm5bYV0ubGlzdGVuZXI9PT10KXtyPWE7YnJlYWt9aWYocjwwKXJldHVybiB0aGlzOzE9PT1uLmxlbmd0aD8obi5sZW5ndGg9MCxkZWxldGUgdGhpcy5fZXZlbnRzW2VdKTpuLnNwbGljZShyLDEpLHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lciYmdGhpcy5lbWl0KCJyZW1vdmVMaXN0ZW5lciIsZSx0KX1yZXR1cm4gdGhpc30sci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3ZhciB0LG47aWYoIXRoaXMuX2V2ZW50cylyZXR1cm4gdGhpcztpZighdGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKXJldHVybiAwPT09YXJndW1lbnRzLmxlbmd0aD90aGlzLl9ldmVudHM9e306dGhpcy5fZXZlbnRzW2VdJiZkZWxldGUgdGhpcy5fZXZlbnRzW2VdLHRoaXM7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpe2Zvcih0IGluIHRoaXMuX2V2ZW50cykicmVtb3ZlTGlzdGVuZXIiIT09dCYmdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnModCk7cmV0dXJuIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCJyZW1vdmVMaXN0ZW5lciIpLHRoaXMuX2V2ZW50cz17fSx0aGlzfWlmKG49dGhpcy5fZXZlbnRzW2VdLGkobikpdGhpcy5yZW1vdmVMaXN0ZW5lcihlLG4pO2Vsc2UgaWYobilmb3IoO24ubGVuZ3RoOyl0aGlzLnJlbW92ZUxpc3RlbmVyKGUsbltuLmxlbmd0aC0xXSk7cmV0dXJuIGRlbGV0ZSB0aGlzLl9ldmVudHNbZV0sdGhpc30sci5wcm90b3R5cGUubGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiB0PXRoaXMuX2V2ZW50cyYmdGhpcy5fZXZlbnRzW2VdP2kodGhpcy5fZXZlbnRzW2VdKT9bdGhpcy5fZXZlbnRzW2VdXTp0aGlzLl9ldmVudHNbZV0uc2xpY2UoKTpbXX0sci5wcm90b3R5cGUubGlzdGVuZXJDb3VudD1mdW5jdGlvbihlKXtpZih0aGlzLl9ldmVudHMpe3ZhciB0PXRoaXMuX2V2ZW50c1tlXTtpZihpKHQpKXJldHVybiAxO2lmKHQpcmV0dXJuIHQubGVuZ3RofXJldHVybiAwfSxyLmxpc3RlbmVyQ291bnQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5saXN0ZW5lckNvdW50KHQpfX0se31dLDEzOltmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIoZSl7aWYobnVsbD09PWV8fCJvYmplY3QiIT10eXBlb2YgZSlyZXR1cm4gZTtpZihlIGluc3RhbmNlb2YgT2JqZWN0KXZhciB0PXtfX3Byb3RvX186ZS5fX3Byb3RvX199O2Vsc2UgdmFyIHQ9T2JqZWN0LmNyZWF0ZShudWxsKTtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZSkuZm9yRWFjaChmdW5jdGlvbihuKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxuLE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxuKSl9KSx0fXZhciBpPWUoImZzIik7dC5leHBvcnRzPXIoaSl9LHtmczo0fV0sMTQ6W2Z1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24obil7ZnVuY3Rpb24gcigpe31mdW5jdGlvbiBpKGUpe2Z1bmN0aW9uIHQoZSx0LG4pe2Z1bmN0aW9uIHIoZSx0LG4pe3JldHVybiB2KGUsdCxmdW5jdGlvbihpKXshaXx8IkVNRklMRSIhPT1pLmNvZGUmJiJFTkZJTEUiIT09aS5jb2RlPygiZnVuY3Rpb24iPT10eXBlb2YgbiYmbi5hcHBseSh0aGlzLGFyZ3VtZW50cykscygpKTpvKFtyLFtlLHQsbl1dKX0pfXJldHVybiJmdW5jdGlvbiI9PXR5cGVvZiB0JiYobj10LHQ9bnVsbCkscihlLHQsbil9ZnVuY3Rpb24gcihlLHQsbixyKXtmdW5jdGlvbiBpKGUsdCxuLHIpe3JldHVybiBtKGUsdCxuLGZ1bmN0aW9uKGEpeyFhfHwiRU1GSUxFIiE9PWEuY29kZSYmIkVORklMRSIhPT1hLmNvZGU/KCJmdW5jdGlvbiI9PXR5cGVvZiByJiZyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSxzKCkpOm8oW2ksW2UsdCxuLHJdXSl9KX1yZXR1cm4iZnVuY3Rpb24iPT10eXBlb2YgbiYmKHI9bixuPW51bGwpLGkoZSx0LG4scil9ZnVuY3Rpb24gYShlLHQsbixyKXtmdW5jdGlvbiBpKGUsdCxuLHIpe3JldHVybiBFKGUsdCxuLGZ1bmN0aW9uKGEpeyFhfHwiRU1GSUxFIiE9PWEuY29kZSYmIkVORklMRSIhPT1hLmNvZGU/KCJmdW5jdGlvbiI9PXR5cGVvZiByJiZyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSxzKCkpOm8oW2ksW2UsdCxuLHJdXSl9KX1yZXR1cm4iZnVuY3Rpb24iPT10eXBlb2YgbiYmKHI9bixuPW51bGwpLGkoZSx0LG4scil9ZnVuY3Rpb24gYyhlLHQpe2Z1bmN0aW9uIG4oKXtyZXR1cm4gdyhlLGZ1bmN0aW9uKHIsaSl7aSYmaS5zb3J0JiZpLnNvcnQoKSwhcnx8IkVNRklMRSIhPT1yLmNvZGUmJiJFTkZJTEUiIT09ci5jb2RlPygiZnVuY3Rpb24iPT10eXBlb2YgdCYmdC5hcHBseSh0aGlzLGFyZ3VtZW50cykscygpKTpvKFtuLFtlLHRdXSl9KX1yZXR1cm4gbihlLHQpfWZ1bmN0aW9uIGwoZSx0KXtyZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGw/KFMuYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXMpOmwuYXBwbHkoT2JqZWN0LmNyZWF0ZShsLnByb3RvdHlwZSksYXJndW1lbnRzKX1mdW5jdGlvbiBoKCl7dmFyIGU9dGhpcztfKGUucGF0aCxlLmZsYWdzLGUubW9kZSxmdW5jdGlvbih0LG4pe3Q/KGUuYXV0b0Nsb3NlJiZlLmRlc3Ryb3koKSxlLmVtaXQoImVycm9yIix0KSk6KGUuZmQ9bixlLmVtaXQoIm9wZW4iLG4pLGUucmVhZCgpKX0pfWZ1bmN0aW9uIHAoZSx0KXtyZXR1cm4gdGhpcyBpbnN0YW5jZW9mIHA/KE8uYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXMpOnAuYXBwbHkoT2JqZWN0LmNyZWF0ZShwLnByb3RvdHlwZSksYXJndW1lbnRzKX1mdW5jdGlvbiBkKCl7dmFyIGU9dGhpcztfKGUucGF0aCxlLmZsYWdzLGUubW9kZSxmdW5jdGlvbih0LG4pe3Q/KGUuZGVzdHJveSgpLGUuZW1pdCgiZXJyb3IiLHQpKTooZS5mZD1uLGUuZW1pdCgib3BlbiIsbikpfSl9ZnVuY3Rpb24gZyhlLHQpe3JldHVybiBuZXcgbChlLHQpfWZ1bmN0aW9uIHkoZSx0KXtyZXR1cm4gbmV3IHAoZSx0KX1mdW5jdGlvbiBfKGUsdCxuLHIpe2Z1bmN0aW9uIGkoZSx0LG4scil7cmV0dXJuIFIoZSx0LG4sZnVuY3Rpb24oYSx1KXshYXx8IkVNRklMRSIhPT1hLmNvZGUmJiJFTkZJTEUiIT09YS5jb2RlPygiZnVuY3Rpb24iPT10eXBlb2YgciYmci5hcHBseSh0aGlzLGFyZ3VtZW50cykscygpKTpvKFtpLFtlLHQsbixyXV0pfSl9cmV0dXJuImZ1bmN0aW9uIj09dHlwZW9mIG4mJihyPW4sbj1udWxsKSxpKGUsdCxuLHIpfXUoZSksZS5ncmFjZWZ1bGlmeT1pLGUuRmlsZVJlYWRTdHJlYW09bCxlLkZpbGVXcml0ZVN0cmVhbT1wLGUuY3JlYXRlUmVhZFN0cmVhbT1nLGUuY3JlYXRlV3JpdGVTdHJlYW09eTt2YXIgdj1lLnJlYWRGaWxlO2UucmVhZEZpbGU9dDt2YXIgbT1lLndyaXRlRmlsZTtlLndyaXRlRmlsZT1yO3ZhciBFPWUuYXBwZW5kRmlsZTtFJiYoZS5hcHBlbmRGaWxlPWEpO3ZhciB3PWUucmVhZGRpcjtpZihlLnJlYWRkaXI9YywidjAuOCI9PT1uLnZlcnNpb24uc3Vic3RyKDAsNCkpe3ZhciBiPWYoZSk7bD1iLlJlYWRTdHJlYW0scD1iLldyaXRlU3RyZWFtfXZhciBTPWUuUmVhZFN0cmVhbTtsLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFMucHJvdG90eXBlKSxsLnByb3RvdHlwZS5vcGVuPWg7dmFyIE89ZS5Xcml0ZVN0cmVhbTtwLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKE8ucHJvdG90eXBlKSxwLnByb3RvdHlwZS5vcGVuPWQsZS5SZWFkU3RyZWFtPWwsZS5Xcml0ZVN0cmVhbT1wO3ZhciBSPWUub3BlbjtyZXR1cm4gZS5vcGVuPV8sZX1mdW5jdGlvbiBvKGUpe2goIkVOUVVFVUUiLGVbMF0ubmFtZSxlWzFdKSxjLnB1c2goZSl9ZnVuY3Rpb24gcygpe3ZhciBlPWMuc2hpZnQoKTtlJiYoaCgiUkVUUlkiLGVbMF0ubmFtZSxlWzFdKSxlWzBdLmFwcGx5KG51bGwsZVsxXSkpfXZhciBhPWUoImZzIiksdT1lKCIuL3BvbHlmaWxscy5qcyIpLGY9ZSgiLi9sZWdhY3ktc3RyZWFtcy5qcyIpLGM9W10sbD1lKCJ1dGlsIiksaD1yO2wuZGVidWdsb2c/aD1sLmRlYnVnbG9nKCJnZnM0Iik6L1xiZ2ZzNFxiL2kudGVzdChuLmVudi5OT0RFX0RFQlVHfHwiIikmJihoPWZ1bmN0aW9uKCl7dmFyIGU9bC5mb3JtYXQuYXBwbHkobCxhcmd1bWVudHMpO2U9IkdGUzQ6ICIrZS5zcGxpdCgvXG4vKS5qb2luKCJcbkdGUzQ6ICIpLGNvbnNvbGUuZXJyb3IoZSl9KSwvXGJnZnM0XGIvaS50ZXN0KG4uZW52Lk5PREVfREVCVUd8fCIiKSYmbi5vbigiZXhpdCIsZnVuY3Rpb24oKXtoKGMpLGUoImFzc2VydCIpLmVxdWFsKGMubGVuZ3RoLDApfSksdC5leHBvcnRzPWkoZSgiLi9mcy5qcyIpKSxuLmVudi5URVNUX0dSQUNFRlVMX0ZTX0dMT0JBTF9QQVRDSCYmKHQuZXhwb3J0cz1pKGEpKSx0LmV4cG9ydHMuY2xvc2U9YS5jbG9zZT1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxuKXtyZXR1cm4gZS5jYWxsKGEsdCxmdW5jdGlvbihlKXtlfHxzKCksImZ1bmN0aW9uIj09dHlwZW9mIG4mJm4uYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9fShhLmNsb3NlKSx0LmV4cG9ydHMuY2xvc2VTeW5jPWEuY2xvc2VTeW5jPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0KXt2YXIgbj1lLmFwcGx5KGEsYXJndW1lbnRzKTtyZXR1cm4gcygpLG59fShhLmNsb3NlU3luYyl9KS5jYWxsKHRoaXMsZSgiX3Byb2Nlc3MiKSl9LHsiLi9mcy5qcyI6MTMsIi4vbGVnYWN5LXN0cmVhbXMuanMiOjE1LCIuL3BvbHlmaWxscy5qcyI6MTYsX3Byb2Nlc3M6MjUsYXNzZXJ0OjUsZnM6NCx1dGlsOjQ0fV0sMTU6W2Z1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24obil7ZnVuY3Rpb24gcihlKXtmdW5jdGlvbiB0KHIsbyl7aWYoISh0aGlzIGluc3RhbmNlb2YgdCkpcmV0dXJuIG5ldyB0KHIsbyk7aS5jYWxsKHRoaXMpO3ZhciBzPXRoaXM7dGhpcy5wYXRoPXIsdGhpcy5mZD1udWxsLHRoaXMucmVhZGFibGU9ITAsdGhpcy5wYXVzZWQ9ITEsdGhpcy5mbGFncz0iciIsdGhpcy5tb2RlPTQzOCx0aGlzLmJ1ZmZlclNpemU9NjU1MzYsbz1vfHx7fTtmb3IodmFyIGE9T2JqZWN0LmtleXMobyksdT0wLGY9YS5sZW5ndGg7dTxmO3UrKyl7dmFyIGM9YVt1XTt0aGlzW2NdPW9bY119aWYodGhpcy5lbmNvZGluZyYmdGhpcy5zZXRFbmNvZGluZyh0aGlzLmVuY29kaW5nKSx2b2lkIDAhPT10aGlzLnN0YXJ0KXtpZigibnVtYmVyIiE9dHlwZW9mIHRoaXMuc3RhcnQpdGhyb3cgVHlwZUVycm9yKCJzdGFydCBtdXN0IGJlIGEgTnVtYmVyIik7aWYodm9pZCAwPT09dGhpcy5lbmQpdGhpcy5lbmQ9MS8wO2Vsc2UgaWYoIm51bWJlciIhPXR5cGVvZiB0aGlzLmVuZCl0aHJvdyBUeXBlRXJyb3IoImVuZCBtdXN0IGJlIGEgTnVtYmVyIik7aWYodGhpcy5zdGFydD50aGlzLmVuZCl0aHJvdyBuZXcgRXJyb3IoInN0YXJ0IG11c3QgYmUgPD0gZW5kIik7dGhpcy5wb3M9dGhpcy5zdGFydH1yZXR1cm4gbnVsbCE9PXRoaXMuZmQ/dm9pZCBuLm5leHRUaWNrKGZ1bmN0aW9uKCl7cy5fcmVhZCgpfSk6dm9pZCBlLm9wZW4odGhpcy5wYXRoLHRoaXMuZmxhZ3MsdGhpcy5tb2RlLGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU/KHMuZW1pdCgiZXJyb3IiLGUpLHZvaWQocy5yZWFkYWJsZT0hMSkpOihzLmZkPXQscy5lbWl0KCJvcGVuIix0KSx2b2lkIHMuX3JlYWQoKSl9KX1mdW5jdGlvbiByKHQsbil7aWYoISh0aGlzIGluc3RhbmNlb2YgcikpcmV0dXJuIG5ldyByKHQsbik7aS5jYWxsKHRoaXMpLHRoaXMucGF0aD10LHRoaXMuZmQ9bnVsbCx0aGlzLndyaXRhYmxlPSEwLHRoaXMuZmxhZ3M9InciLHRoaXMuZW5jb2Rpbmc9ImJpbmFyeSIsdGhpcy5tb2RlPTQzOCx0aGlzLmJ5dGVzV3JpdHRlbj0wLG49bnx8e307Zm9yKHZhciBvPU9iamVjdC5rZXlzKG4pLHM9MCxhPW8ubGVuZ3RoO3M8YTtzKyspe3ZhciB1PW9bc107dGhpc1t1XT1uW3VdfWlmKHZvaWQgMCE9PXRoaXMuc3RhcnQpe2lmKCJudW1iZXIiIT10eXBlb2YgdGhpcy5zdGFydCl0aHJvdyBUeXBlRXJyb3IoInN0YXJ0IG11c3QgYmUgYSBOdW1iZXIiKTtpZih0aGlzLnN0YXJ0PDApdGhyb3cgbmV3IEVycm9yKCJzdGFydCBtdXN0IGJlID49IHplcm8iKTt0aGlzLnBvcz10aGlzLnN0YXJ0fXRoaXMuYnVzeT0hMSx0aGlzLl9xdWV1ZT1bXSxudWxsPT09dGhpcy5mZCYmKHRoaXMuX29wZW49ZS5vcGVuLHRoaXMuX3F1ZXVlLnB1c2goW3RoaXMuX29wZW4sdGhpcy5wYXRoLHRoaXMuZmxhZ3MsdGhpcy5tb2RlLHZvaWQgMF0pLHRoaXMuZmx1c2goKSl9cmV0dXJue1JlYWRTdHJlYW06dCxXcml0ZVN0cmVhbTpyfX12YXIgaT1lKCJzdHJlYW0iKS5TdHJlYW07dC5leHBvcnRzPXJ9KS5jYWxsKHRoaXMsZSgiX3Byb2Nlc3MiKSl9LHtfcHJvY2VzczoyNSxzdHJlYW06NDB9XSwxNjpbZnVuY3Rpb24oZSx0LG4peyhmdW5jdGlvbihuKXtmdW5jdGlvbiByKGUpe2MuaGFzT3duUHJvcGVydHkoIk9fU1lNTElOSyIpJiZuLnZlcnNpb24ubWF0Y2goL152MFwuNlwuWzAtMl18XnYwXC41XC4vKSYmaShlKSxlLmx1dGltZXN8fG8oZSksZS5jaG93bj1zKGUuY2hvd24pLGUuZmNob3duPXMoZS5mY2hvd24pLGUubGNob3duPXMoZS5sY2hvd24pLGUuY2htb2Q9cyhlLmNobW9kKSxlLmZjaG1vZD1zKGUuZmNobW9kKSxlLmxjaG1vZD1zKGUubGNobW9kKSxlLmNob3duU3luYz1hKGUuY2hvd25TeW5jKSxlLmZjaG93blN5bmM9YShlLmZjaG93blN5bmMpLGUubGNob3duU3luYz1hKGUubGNob3duU3luYyksZS5jaG1vZFN5bmM9cyhlLmNobW9kU3luYyksZS5mY2htb2RTeW5jPXMoZS5mY2htb2RTeW5jKSxlLmxjaG1vZFN5bmM9cyhlLmxjaG1vZFN5bmMpLGUubGNobW9kfHwoZS5sY2htb2Q9ZnVuY3Rpb24oZSx0LHIpe24ubmV4dFRpY2socil9LGUubGNobW9kU3luYz1mdW5jdGlvbigpe30pLGUubGNob3dufHwoZS5sY2hvd249ZnVuY3Rpb24oZSx0LHIsaSl7bi5uZXh0VGljayhpKX0sZS5sY2hvd25TeW5jPWZ1bmN0aW9uKCl7fSksIndpbjMyIj09PW4ucGxhdGZvcm0mJihlLnJlbmFtZT1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxuLHIpe3ZhciBpPURhdGUubm93KCk7ZSh0LG4sZnVuY3Rpb24gbyhzKXtyZXR1cm4gcyYmKCJFQUNDRVMiPT09cy5jb2RlfHwiRVBFUk0iPT09cy5jb2RlKSYmRGF0ZS5ub3coKS1pPDFlMz9lKHQsbixvKTp2b2lkKHImJnIocykpfSl9fShlLnJlbmFtZSkpLGUucmVhZD1mdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24obixyLGksbyxzLGEpe3ZhciB1O2lmKGEmJiJmdW5jdGlvbiI9PXR5cGVvZiBhKXt2YXIgZj0wO3U9ZnVuY3Rpb24oYyxsLGgpe3JldHVybiBjJiYiRUFHQUlOIj09PWMuY29kZSYmZjwxMD8oZisrLHQuY2FsbChlLG4scixpLG8scyx1KSk6dm9pZCBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19cmV0dXJuIHQuY2FsbChlLG4scixpLG8scyx1KX19KGUucmVhZCksZS5yZWFkU3luYz1mdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24obixyLGksbyxzKXtmb3IodmFyIGE9MDs7KXRyeXtyZXR1cm4gdC5jYWxsKGUsbixyLGksbyxzKX1jYXRjaCh1KXtpZigiRUFHQUlOIj09PXUuY29kZSYmYTwxMCl7YSsrO2NvbnRpbnVlfXRocm93IHV9fX0oZS5yZWFkU3luYyl9ZnVuY3Rpb24gaShlKXtlLmxjaG1vZD1mdW5jdGlvbih0LG4scil7cj1yfHxub29wLGUub3Blbih0LGMuT19XUk9OTFl8Yy5PX1NZTUxJTkssbixmdW5jdGlvbih0LGkpe3JldHVybiB0P3ZvaWQgcih0KTp2b2lkIGUuZmNobW9kKGksbixmdW5jdGlvbih0KXtlLmNsb3NlKGksZnVuY3Rpb24oZSl7cih0fHxlKX0pfSl9KX0sZS5sY2htb2RTeW5jPWZ1bmN0aW9uKHQsbil7dmFyIHIsaT1lLm9wZW5TeW5jKHQsYy5PX1dST05MWXxjLk9fU1lNTElOSyxuKSxvPSEwO3RyeXtyPWUuZmNobW9kU3luYyhpLG4pLG89ITF9ZmluYWxseXtpZihvKXRyeXtlLmNsb3NlU3luYyhpKX1jYXRjaChzKXt9ZWxzZSBlLmNsb3NlU3luYyhpKX1yZXR1cm4gcn19ZnVuY3Rpb24gbyhlKXtjLmhhc093blByb3BlcnR5KCJPX1NZTUxJTksiKT8oZS5sdXRpbWVzPWZ1bmN0aW9uKHQsbixyLGkpe2Uub3Blbih0LGMuT19TWU1MSU5LLGZ1bmN0aW9uKHQsbyl7cmV0dXJuIGk9aXx8bm9vcCx0P2kodCk6dm9pZCBlLmZ1dGltZXMobyxuLHIsZnVuY3Rpb24odCl7ZS5jbG9zZShvLGZ1bmN0aW9uKGUpe3JldHVybiBpKHR8fGUpfSl9KX0pfSxlLmx1dGltZXNTeW5jPWZ1bmN0aW9uKHQsbixyKXt2YXIgaSxvPWUub3BlblN5bmModCxjLk9fU1lNTElOSykscz0hMDt0cnl7aT1lLmZ1dGltZXNTeW5jKG8sbixyKSxzPSExfWZpbmFsbHl7aWYocyl0cnl7ZS5jbG9zZVN5bmMobyl9Y2F0Y2goYSl7fWVsc2UgZS5jbG9zZVN5bmMobyl9cmV0dXJuIGl9KTooZS5sdXRpbWVzPWZ1bmN0aW9uKGUsdCxyLGkpe24ubmV4dFRpY2soaSl9LGUubHV0aW1lc1N5bmM9ZnVuY3Rpb24oKXt9KX1mdW5jdGlvbiBzKGUpe3JldHVybiBlP2Z1bmN0aW9uKHQsbixyLGkpe3JldHVybiBlLmNhbGwoZix0LG4scixmdW5jdGlvbihlLHQpe3UoZSkmJihlPW51bGwpLGkoZSx0KX0pfTplfWZ1bmN0aW9uIGEoZSl7cmV0dXJuIGU/ZnVuY3Rpb24odCxuLHIpe3RyeXtyZXR1cm4gZS5jYWxsKGYsdCxuLHIpfWNhdGNoKGkpe2lmKCF1KGkpKXRocm93IGl9fTplfWZ1bmN0aW9uIHUoZSl7aWYoIWUpcmV0dXJuITA7aWYoIkVOT1NZUyI9PT1lLmNvZGUpcmV0dXJuITA7dmFyIHQ9IW4uZ2V0dWlkfHwwIT09bi5nZXR1aWQoKTtyZXR1cm4hKCF0fHwiRUlOVkFMIiE9PWUuY29kZSYmIkVQRVJNIiE9PWUuY29kZSl9dmFyIGY9ZSgiLi9mcy5qcyIpLGM9ZSgiY29uc3RhbnRzIiksbD1uLmN3ZCxoPW51bGw7bi5jd2Q9ZnVuY3Rpb24oKXtyZXR1cm4gaHx8KGg9bC5jYWxsKG4pKSxofTt0cnl7bi5jd2QoKX1jYXRjaChwKXt9dmFyIGQ9bi5jaGRpcjtuLmNoZGlyPWZ1bmN0aW9uKGUpe2g9bnVsbCxkLmNhbGwobixlKX0sdC5leHBvcnRzPXJ9KS5jYWxsKHRoaXMsZSgiX3Byb2Nlc3MiKSl9LHsiLi9mcy5qcyI6MTMsX3Byb2Nlc3M6MjUsY29uc3RhbnRzOjh9XSwxNzpbZnVuY3Rpb24oZSx0LG4pe24ucmVhZD1mdW5jdGlvbihlLHQsbixyLGkpe3ZhciBvLHMsYT04Kmktci0xLHU9KDE8PGEpLTEsZj11Pj4xLGM9LTcsbD1uP2ktMTowLGg9bj8tMToxLHA9ZVt0K2xdO2ZvcihsKz1oLG89cCYoMTw8LWMpLTEscD4+PS1jLGMrPWE7Yz4wO289MjU2Km8rZVt0K2xdLGwrPWgsYy09OCk7Zm9yKHM9byYoMTw8LWMpLTEsbz4+PS1jLGMrPXI7Yz4wO3M9MjU2KnMrZVt0K2xdLGwrPWgsYy09OCk7aWYoMD09PW8pbz0xLWY7ZWxzZXtpZihvPT09dSlyZXR1cm4gcz9OYU46KHA/LTE6MSkqKDEvMCk7cys9TWF0aC5wb3coMixyKSxvLT1mfXJldHVybihwPy0xOjEpKnMqTWF0aC5wb3coMixvLXIpfSxuLndyaXRlPWZ1bmN0aW9uKGUsdCxuLHIsaSxvKXt2YXIgcyxhLHUsZj04Km8taS0xLGM9KDE8PGYpLTEsbD1jPj4xLGg9MjM9PT1pP01hdGgucG93KDIsLTI0KS1NYXRoLnBvdygyLC03Nyk6MCxwPXI/MDpvLTEsZD1yPzE6LTEsZz10PDB8fDA9PT10JiYxL3Q8MD8xOjA7Zm9yKHQ9TWF0aC5hYnModCksaXNOYU4odCl8fHQ9PT0xLzA/KGE9aXNOYU4odCk/MTowLHM9Yyk6KHM9TWF0aC5mbG9vcihNYXRoLmxvZyh0KS9NYXRoLkxOMiksdCoodT1NYXRoLnBvdygyLC1zKSk8MSYmKHMtLSx1Kj0yKSx0Kz1zK2w+PTE/aC91OmgqTWF0aC5wb3coMiwxLWwpLHQqdT49MiYmKHMrKyx1Lz0yKSxzK2w+PWM/KGE9MCxzPWMpOnMrbD49MT8oYT0odCp1LTEpKk1hdGgucG93KDIsaSkscys9bCk6KGE9dCpNYXRoLnBvdygyLGwtMSkqTWF0aC5wb3coMixpKSxzPTApKTtpPj04O2VbbitwXT0yNTUmYSxwKz1kLGEvPTI1NixpLT04KTtmb3Iocz1zPDxpfGEsZis9aTtmPjA7ZVtuK3BdPTI1NSZzLHArPWQscy89MjU2LGYtPTgpO2VbbitwLWRdfD0xMjgqZ319LHt9XSwxODpbZnVuY3Rpb24oZSx0LG4peyFmdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxyKXt2YXIgaT10aGlzIGluc3RhbmNlb2YgZT90aGlzOm47aWYoaS5yZXNldChyKSwic3RyaW5nIj09dHlwZW9mIHQmJnQubGVuZ3RoPjAmJmkuaGFzaCh0KSxpIT09dGhpcylyZXR1cm4gaX12YXIgbjtlLnByb3RvdHlwZS5oYXNoPWZ1bmN0aW9uKGUpe3ZhciB0LG4scixpLG87c3dpdGNoKG89ZS5sZW5ndGgsdGhpcy5sZW4rPW8sbj10aGlzLmsxLHI9MCx0aGlzLnJlbSl7Y2FzZSAwOm5ePW8+cj82NTUzNSZlLmNoYXJDb2RlQXQocisrKTowO2Nhc2UgMTpuXj1vPnI/KDY1NTM1JmUuY2hhckNvZGVBdChyKyspKTw8ODowO2Nhc2UgMjpuXj1vPnI/KDY1NTM1JmUuY2hhckNvZGVBdChyKyspKTw8MTY6MDtjYXNlIDM6bl49bz5yPygyNTUmZS5jaGFyQ29kZUF0KHIpKTw8MjQ6MCxuXj1vPnI/KDY1MjgwJmUuY2hhckNvZGVBdChyKyspKT4+ODowfWlmKHRoaXMucmVtPW8rdGhpcy5yZW0mMyxvLT10aGlzLnJlbSxvPjApe2Zvcih0PXRoaXMuaDE7Oyl7aWYobj0xMTYwMSpuKzM0MzI5MDY3NTIqKDY1NTM1Jm4pJjQyOTQ5NjcyOTUsbj1uPDwxNXxuPj4+MTcsbj0xMzcxNSpuKzQ2MTgzMjE5MiooNjU1MzUmbikmNDI5NDk2NzI5NSx0Xj1uLHQ9dDw8MTN8dD4+PjE5LHQ9NSp0KzM4NjQyOTIxOTYmNDI5NDk2NzI5NSxyPj1vKWJyZWFrO249NjU1MzUmZS5jaGFyQ29kZUF0KHIrKyleKDY1NTM1JmUuY2hhckNvZGVBdChyKyspKTw8OF4oNjU1MzUmZS5jaGFyQ29kZUF0KHIrKykpPDwxNixpPWUuY2hhckNvZGVBdChyKyspLG5ePSgyNTUmaSk8PDI0Xig2NTI4MCZpKT4+OH1zd2l0Y2gobj0wLHRoaXMucmVtKXtjYXNlIDM6bl49KDY1NTM1JmUuY2hhckNvZGVBdChyKzIpKTw8MTY7Y2FzZSAyOm5ePSg2NTUzNSZlLmNoYXJDb2RlQXQocisxKSk8PDg7Y2FzZSAxOm5ePTY1NTM1JmUuY2hhckNvZGVBdChyKX10aGlzLmgxPXR9cmV0dXJuIHRoaXMuazE9bix0aGlzfSxlLnByb3RvdHlwZS5yZXN1bHQ9ZnVuY3Rpb24oKXt2YXIgZSx0O3JldHVybiBlPXRoaXMuazEsdD10aGlzLmgxLGU+MCYmKGU9MTE2MDEqZSszNDMyOTA2NzUyKig2NTUzNSZlKSY0Mjk0OTY3Mjk1LGU9ZTw8MTV8ZT4+PjE3LGU9MTM3MTUqZSs0NjE4MzIxOTIqKDY1NTM1JmUpJjQyOTQ5NjcyOTUsdF49ZSksdF49dGhpcy5sZW4sdF49dD4+PjE2LHQ9NTE4MTkqdCsyMjQ2NzcwNjg4Kig2NTUzNSZ0KSY0Mjk0OTY3Mjk1LHRePXQ+Pj4xMyx0PTQ0NTk3KnQrMzI2NjQ0NTMxMiooNjU1MzUmdCkmNDI5NDk2NzI5NSx0Xj10Pj4+MTYsdD4+PjB9LGUucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmgxPSJudW1iZXIiPT10eXBlb2YgZT9lOjAsdGhpcy5yZW09dGhpcy5rMT10aGlzLmxlbj0wLHRoaXN9LG49bmV3IGUsInVuZGVmaW5lZCIhPXR5cGVvZiB0P3QuZXhwb3J0cz1lOnRoaXMuTXVybXVySGFzaDM9ZX0oKX0se31dLDE5OltmdW5jdGlvbihlLHQsbil7ImZ1bmN0aW9uIj09dHlwZW9mIE9iamVjdC5jcmVhdGU/dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7ZS5zdXBlcl89dCxlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KX06dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7ZS5zdXBlcl89dDt2YXIgbj1mdW5jdGlvbigpe307bi5wcm90b3R5cGU9dC5wcm90b3R5cGUsZS5wcm90b3R5cGU9bmV3IG4sZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZX19LHt9XSwyMDpbZnVuY3Rpb24oZSx0LG4pe3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4hKG51bGw9PWV8fCEoZS5faXNCdWZmZXJ8fGUuY29uc3RydWN0b3ImJiJmdW5jdGlvbiI9PXR5cGVvZiBlLmNvbnN0cnVjdG9yLmlzQnVmZmVyJiZlLmNvbnN0cnVjdG9yLmlzQnVmZmVyKGUpKSl9fSx7fV0sMjE6W2Z1bmN0aW9uKGUsdCxuKXt2YXIgcj17fS50b1N0cmluZzt0LmV4cG9ydHM9QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24oZSl7cmV0dXJuIltvYmplY3QgQXJyYXldIj09ci5jYWxsKGUpfX0se31dLDIyOltmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQpeyhmdW5jdGlvbigpe3ZhciByLGksbyxzLGEsdSxmLGMsbCxoLHAsZCxnLHksXz1mdW5jdGlvbihlLHQpe2Z1bmN0aW9uIG4oKXt0aGlzLmNvbnN0cnVjdG9yPWV9Zm9yKHZhciByIGluIHQpdi5jYWxsKHQscikmJihlW3JdPXRbcl0pO3JldHVybiBuLnByb3RvdHlwZT10LnByb3RvdHlwZSxlLnByb3RvdHlwZT1uZXcgbixlLl9fc3VwZXJfXz10LnByb3RvdHlwZSxlfSx2PXt9Lmhhc093blByb3BlcnR5O2c9ZSgicGF0aCIpLGQ9ZSgiZnMiKSxwPWUoImV2ZW50cyIpLHk9ZSgid3JpdGUtZmlsZS1hdG9taWMiKS5zeW5jLGk9Ii0tLS5FTVBUWV9TVFJJTkcuLS0tIixmPWZ1bmN0aW9uKGUpe3ZhciB0LG4scixpLG87Zm9yKGk9ZC5yZWFkZGlyU3luYyhlKSxvPVtdLHQ9MCxuPWkubGVuZ3RoO3Q8bjt0Kyspcj1pW3RdLG8ucHVzaChsKGcuam9pbihlLHIpKSk7cmV0dXJuIG99LGw9ZnVuY3Rpb24oZSl7cmV0dXJuIGQuc3RhdFN5bmMoZSkuaXNEaXJlY3RvcnkoKT8oZihlKSxkLnJtZGlyU3luYyhlKSk6ZC51bmxpbmtTeW5jKGUpfSxjPWZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiB0PSIiPT09ZT9pOmUudG9TdHJpbmcoKX0sYT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUpe3RoaXMubWVzc2FnZT1udWxsIT1lP2U6IlVua25vd24gZXJyb3IuIixudWxsIT1FcnJvci5jYXB0dXJlU3RhY2tUcmFjZSYmRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcyx0aGlzLmNvbnN0cnVjdG9yKSx0aGlzLm5hbWU9dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfXJldHVybiBfKHQsZSksdC5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5uYW1lKyI6ICIrdGhpcy5tZXNzYWdlfSx0fShFcnJvciksdT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0LG4scixpKXt0aGlzLmtleT1lLHRoaXMub2xkVmFsdWU9dCx0aGlzLm5ld1ZhbHVlPW4sdGhpcy51cmw9cix0aGlzLnN0b3JhZ2VBcmVhPW51bGwhPWk/aToibG9jYWxTdG9yYWdlIn1yZXR1cm4gZX0oKSxzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LG4pe2lmKHRoaXMua2V5PXQsdGhpcy5pbmRleD1uLCEodGhpcyBpbnN0YW5jZW9mIGUpKXJldHVybiBuZXcgZSh0aGlzLmtleSx0aGlzLmluZGV4KX1yZXR1cm4gZX0oKSxoPWZ1bmN0aW9uKCl7dmFyIGU7cmV0dXJuIGU9ZnVuY3Rpb24oKXt9LGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUobnVsbCksbmV3IGV9LG89ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gbihlLGkpe3JldHVybiB0aGlzLl9sb2NhdGlvbj1lLHRoaXMucXVvdGE9bnVsbCE9aT9pOjUyNDI4ODAsdGhpcyBpbnN0YW5jZW9mIG4/KHRoaXMuX2xvY2F0aW9uPWcucmVzb2x2ZSh0aGlzLl9sb2NhdGlvbiksbnVsbCE9clt0aGlzLl9sb2NhdGlvbl0/clt0aGlzLl9sb2NhdGlvbl06KHRoaXMubGVuZ3RoPTAsdGhpcy5fYnl0ZXNJblVzZT0wLHRoaXMuX2tleXM9W10sdGhpcy5fbWV0YUtleU1hcD1oKCksdGhpcy5fZXZlbnRVcmw9InBpZDoiK3QucGlkLHRoaXMuX2luaXQoKSx0aGlzLl9RVU9UQV9FWENFRURFRF9FUlI9YSxyW3RoaXMuX2xvY2F0aW9uXT10aGlzLHJbdGhpcy5fbG9jYXRpb25dKSk6bmV3IG4odGhpcy5fbG9jYXRpb24sdGhpcy5xdW90YSl9dmFyIHI7cmV0dXJuIF8obixlKSxyPXt9LG4ucHJvdG90eXBlLl9pbml0PWZ1bmN0aW9uKCl7dmFyIGUsdCxuLHIsaSxvLGEsdTt0cnl7aWYodT1kLnN0YXRTeW5jKHRoaXMuX2xvY2F0aW9uKSxudWxsIT11JiYhdS5pc0RpcmVjdG9yeSgpKXRocm93IG5ldyBFcnJvcigiQSBmaWxlIGV4aXN0cyBhdCB0aGUgbG9jYXRpb24gJyIrdGhpcy5fbG9jYXRpb24rIicgd2hlbiB0cnlpbmcgdG8gY3JlYXRlL29wZW4gbG9jYWxTdG9yYWdlIik7Zm9yKHRoaXMuX2J5dGVzSW5Vc2U9MCx0aGlzLmxlbmd0aD0wLG49ZC5yZWFkZGlyU3luYyh0aGlzLl9sb2NhdGlvbiksaT1yPTAsYT1uLmxlbmd0aDtyPGE7aT0rK3Ipbz1uW2ldLHQ9ZGVjb2RlVVJJQ29tcG9uZW50KG8pLHRoaXMuX2tleXMucHVzaCh0KSxlPW5ldyBzKG8saSksdGhpcy5fbWV0YUtleU1hcFt0XT1lLHU9dGhpcy5fZ2V0U3RhdChvKSxudWxsIT0obnVsbCE9dT91LnNpemU6dm9pZCAwKSYmKGUuc2l6ZT11LnNpemUsdGhpcy5fYnl0ZXNJblVzZSs9dS5zaXplKTt0aGlzLmxlbmd0aD1uLmxlbmd0aH1jYXRjaChmKXtkLm1rZGlyU3luYyh0aGlzLl9sb2NhdGlvbil9fSxuLnByb3RvdHlwZS5zZXRJdGVtPWZ1bmN0aW9uKGUsdCl7dmFyIG4scixpLG8sZixsLGgsZCxfLHY7aWYoZj1wLkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50KHRoaXMsInN0b3JhZ2UiKSxkPW51bGwsZiYmKGQ9dGhpcy5nZXRJdGVtKGUpKSxlPWMoZSksbj1lbmNvZGVVUklDb21wb25lbnQoZSksbz1nLmpvaW4odGhpcy5fbG9jYXRpb24sbiksXz10LnRvU3RyaW5nKCksdj1fLmxlbmd0aCxsPXRoaXMuX21ldGFLZXlNYXBbZV0saT0hIWwsaD1pP2wuc2l6ZTowLHRoaXMuX2J5dGVzSW5Vc2UtaCt2PnRoaXMucXVvdGEpdGhyb3cgbmV3IGE7aWYoeShvLF8sInV0ZjgiKSxpfHwobD1uZXcgcyhuLHRoaXMuX2tleXMucHVzaChlKS0xKSxsLnNpemU9dix0aGlzLl9tZXRhS2V5TWFwW2VdPWwsdGhpcy5sZW5ndGgrPTEsdGhpcy5fYnl0ZXNJblVzZSs9diksZilyZXR1cm4gcj1uZXcgdShlLGQsdCx0aGlzLl9ldmVudFVybCksdGhpcy5lbWl0KCJzdG9yYWdlIixyKX0sbi5wcm90b3R5cGUuZ2V0SXRlbT1mdW5jdGlvbihlKXt2YXIgdCxuO3JldHVybiBlPWMoZSksbj10aGlzLl9tZXRhS2V5TWFwW2VdLG4/KHQ9Zy5qb2luKHRoaXMuX2xvY2F0aW9uLG4ua2V5KSxkLnJlYWRGaWxlU3luYyh0LCJ1dGY4IikpOm51bGx9LG4ucHJvdG90eXBlLl9nZXRTdGF0PWZ1bmN0aW9uKGUpe3ZhciB0O2U9YyhlKSx0PWcuam9pbih0aGlzLl9sb2NhdGlvbixlbmNvZGVVUklDb21wb25lbnQoZSkpO3RyeXtyZXR1cm4gZC5zdGF0U3luYyh0KX1jYXRjaChuKXtyZXR1cm4gbnVsbH19LG4ucHJvdG90eXBlLnJlbW92ZUl0ZW09ZnVuY3Rpb24oZSl7dmFyIHQsbixyLGksbyxzLGEsZixoO2lmKGU9YyhlKSxzPXRoaXMuX21ldGFLZXlNYXBbZV0pe3I9cC5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCh0aGlzLCJzdG9yYWdlIiksYT1udWxsLHImJihhPXRoaXMuZ2V0SXRlbShlKSksZGVsZXRlIHRoaXMuX21ldGFLZXlNYXBbZV0sdGhpcy5sZW5ndGgtPTEsdGhpcy5fYnl0ZXNJblVzZS09cy5zaXplLG49Zy5qb2luKHRoaXMuX2xvY2F0aW9uLHMua2V5KSx0aGlzLl9rZXlzLnNwbGljZShzLmluZGV4LDEpLGY9dGhpcy5fbWV0YUtleU1hcDtmb3IoaSBpbiBmKWg9ZltpXSxvPXRoaXMuX21ldGFLZXlNYXBbaV0sby5pbmRleD5zLmluZGV4JiYoby5pbmRleC09MSk7aWYobChuKSxyKXJldHVybiB0PW5ldyB1KGUsYSxudWxsLHRoaXMuX2V2ZW50VXJsKSx0aGlzLmVtaXQoInN0b3JhZ2UiLHQpfX0sbi5wcm90b3R5cGUua2V5PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9rZXlzW2VdfSxuLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3ZhciBlO2lmKGYodGhpcy5fbG9jYXRpb24pLHRoaXMuX21ldGFLZXlNYXA9aCgpLHRoaXMuX2tleXM9W10sdGhpcy5sZW5ndGg9MCx0aGlzLl9ieXRlc0luVXNlPTAscC5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCh0aGlzLCJzdG9yYWdlIikpcmV0dXJuIGU9bmV3IHUobnVsbCxudWxsLG51bGwsdGhpcy5fZXZlbnRVcmwpLHRoaXMuZW1pdCgic3RvcmFnZSIsZSl9LG4ucHJvdG90eXBlLl9nZXRCeXRlc0luVXNlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2J5dGVzSW5Vc2V9LG4ucHJvdG90eXBlLl9kZWxldGVMb2NhdGlvbj1mdW5jdGlvbigpe3JldHVybiBkZWxldGUgclt0aGlzLl9sb2NhdGlvbl0sbCh0aGlzLl9sb2NhdGlvbiksdGhpcy5fbWV0YUtleU1hcD17fSx0aGlzLl9rZXlzPVtdLHRoaXMubGVuZ3RoPTAsdGhpcy5fYnl0ZXNJblVzZT0wfSxufShwLkV2ZW50RW1pdHRlcikscj1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7cmV0dXJuIHQuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1yZXR1cm4gXyh0LGUpLHQucHJvdG90eXBlLnNldEl0ZW09ZnVuY3Rpb24oZSxuKXt2YXIgcjtyZXR1cm4gcj1KU09OLnN0cmluZ2lmeShuKSx0Ll9fc3VwZXJfXy5zZXRJdGVtLmNhbGwodGhpcyxlLHIpfSx0LnByb3RvdHlwZS5nZXRJdGVtPWZ1bmN0aW9uKGUpe3JldHVybiBKU09OLnBhcnNlKHQuX19zdXBlcl9fLmdldEl0ZW0uY2FsbCh0aGlzLGUpKX0sdH0obyksbi5Mb2NhbFN0b3JhZ2U9byxuLkpTT05TdG9yYWdlPXIsbi5RVU9UQV9FWENFRURFRF9FUlI9YX0pLmNhbGwodGhpcyl9KS5jYWxsKHRoaXMsZSgiX3Byb2Nlc3MiKSl9LHtfcHJvY2VzczoyNSxldmVudHM6MTIsZnM6NCxwYXRoOjIzLCJ3cml0ZS1maWxlLWF0b21pYyI6NDV9XSwyMzpbZnVuY3Rpb24oZSx0LG4peyhmdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUsdCl7Zm9yKHZhciBuPTAscj1lLmxlbmd0aC0xO3I+PTA7ci0tKXt2YXIgaT1lW3JdOyIuIj09PWk/ZS5zcGxpY2UociwxKToiLi4iPT09aT8oZS5zcGxpY2UociwxKSxuKyspOm4mJihlLnNwbGljZShyLDEpLG4tLSl9aWYodClmb3IoO24tLTtuKWUudW5zaGlmdCgiLi4iKTtyZXR1cm4gZX1mdW5jdGlvbiByKGUsdCl7aWYoZS5maWx0ZXIpcmV0dXJuIGUuZmlsdGVyKHQpO2Zvcih2YXIgbj1bXSxyPTA7cjxlLmxlbmd0aDtyKyspdChlW3JdLHIsZSkmJm4ucHVzaChlW3JdKTtyZXR1cm4gbn12YXIgaT0vXihcLz98KShbXHNcU10qPykoKD86XC57MSwyfXxbXlwvXSs/fCkoXC5bXi5cL10qfCkpKD86W1wvXSopJC8sbz1mdW5jdGlvbihlKXtyZXR1cm4gaS5leGVjKGUpLnNsaWNlKDEpfTtuLnJlc29sdmU9ZnVuY3Rpb24oKXtmb3IodmFyIG49IiIsaT0hMSxvPWFyZ3VtZW50cy5sZW5ndGgtMTtvPj0tMSYmIWk7by0tKXt2YXIgcz1vPj0wP2FyZ3VtZW50c1tvXTplLmN3ZCgpO2lmKCJzdHJpbmciIT10eXBlb2Ygcyl0aHJvdyBuZXcgVHlwZUVycm9yKCJBcmd1bWVudHMgdG8gcGF0aC5yZXNvbHZlIG11c3QgYmUgc3RyaW5ncyIpO3MmJihuPXMrIi8iK24saT0iLyI9PT1zLmNoYXJBdCgwKSl9cmV0dXJuIG49dChyKG4uc3BsaXQoIi8iKSxmdW5jdGlvbihlKXtyZXR1cm4hIWV9KSwhaSkuam9pbigiLyIpLChpPyIvIjoiIikrbnx8Ii4ifSxuLm5vcm1hbGl6ZT1mdW5jdGlvbihlKXt2YXIgaT1uLmlzQWJzb2x1dGUoZSksbz0iLyI9PT1zKGUsLTEpO3JldHVybiBlPXQocihlLnNwbGl0KCIvIiksZnVuY3Rpb24oZSl7cmV0dXJuISFlfSksIWkpLmpvaW4oIi8iKSxlfHxpfHwoZT0iLiIpLGUmJm8mJihlKz0iLyIpLChpPyIvIjoiIikrZX0sbi5pc0Fic29sdXRlPWZ1bmN0aW9uKGUpe3JldHVybiIvIj09PWUuY2hhckF0KDApfSxuLmpvaW49ZnVuY3Rpb24oKXt2YXIgZT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMCk7cmV0dXJuIG4ubm9ybWFsaXplKHIoZSxmdW5jdGlvbihlLHQpe2lmKCJzdHJpbmciIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKCJBcmd1bWVudHMgdG8gcGF0aC5qb2luIG11c3QgYmUgc3RyaW5ncyIpO3JldHVybiBlfSkuam9pbigiLyIpKX0sbi5yZWxhdGl2ZT1mdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoZSl7Zm9yKHZhciB0PTA7dDxlLmxlbmd0aCYmIiI9PT1lW3RdO3QrKyk7Zm9yKHZhciBuPWUubGVuZ3RoLTE7bj49MCYmIiI9PT1lW25dO24tLSk7cmV0dXJuIHQ+bj9bXTplLnNsaWNlKHQsbi10KzEpfWU9bi5yZXNvbHZlKGUpLnN1YnN0cigxKSx0PW4ucmVzb2x2ZSh0KS5zdWJzdHIoMSk7Zm9yKHZhciBpPXIoZS5zcGxpdCgiLyIpKSxvPXIodC5zcGxpdCgiLyIpKSxzPU1hdGgubWluKGkubGVuZ3RoLG8ubGVuZ3RoKSxhPXMsdT0wO3U8czt1KyspaWYoaVt1XSE9PW9bdV0pe2E9dTticmVha31mb3IodmFyIGY9W10sdT1hO3U8aS5sZW5ndGg7dSsrKWYucHVzaCgiLi4iKTtyZXR1cm4gZj1mLmNvbmNhdChvLnNsaWNlKGEpKSxmLmpvaW4oIi8iKX0sbi5zZXA9Ii8iLG4uZGVsaW1pdGVyPSI6IixuLmRpcm5hbWU9ZnVuY3Rpb24oZSl7dmFyIHQ9byhlKSxuPXRbMF0scj10WzFdO3JldHVybiBufHxyPyhyJiYocj1yLnN1YnN0cigwLHIubGVuZ3RoLTEpKSxuK3IpOiIuIn0sbi5iYXNlbmFtZT1mdW5jdGlvbihlLHQpe3ZhciBuPW8oZSlbMl07cmV0dXJuIHQmJm4uc3Vic3RyKC0xKnQubGVuZ3RoKT09PXQmJihuPW4uc3Vic3RyKDAsbi5sZW5ndGgtdC5sZW5ndGgpKSxufSxuLmV4dG5hbWU9ZnVuY3Rpb24oZSl7cmV0dXJuIG8oZSlbM119O3ZhciBzPSJiIj09PSJhYiIuc3Vic3RyKC0xKT9mdW5jdGlvbihlLHQsbil7cmV0dXJuIGUuc3Vic3RyKHQsbil9OmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdDwwJiYodD1lLmxlbmd0aCt0KSxlLnN1YnN0cih0LG4pfX0pLmNhbGwodGhpcyxlKCJfcHJvY2VzcyIpKX0se19wcm9jZXNzOjI1fV0sMjQ6W2Z1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24oZSl7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG4odCxuLHIsaSl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcignImNhbGxiYWNrIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTt2YXIgbyxzLGE9YXJndW1lbnRzLmxlbmd0aDtzd2l0Y2goYSl7Y2FzZSAwOmNhc2UgMTpyZXR1cm4gZS5uZXh0VGljayh0KTtjYXNlIDI6cmV0dXJuIGUubmV4dFRpY2soZnVuY3Rpb24oKXt0LmNhbGwobnVsbCxuKX0pO2Nhc2UgMzpyZXR1cm4gZS5uZXh0VGljayhmdW5jdGlvbigpe3QuY2FsbChudWxsLG4scil9KTtjYXNlIDQ6cmV0dXJuIGUubmV4dFRpY2soZnVuY3Rpb24oKXt0LmNhbGwobnVsbCxuLHIsaSl9KTtkZWZhdWx0OmZvcihvPW5ldyBBcnJheShhLTEpLHM9MDtzPG8ubGVuZ3RoOylvW3MrK109YXJndW1lbnRzW3NdO3JldHVybiBlLm5leHRUaWNrKGZ1bmN0aW9uKCl7dC5hcHBseShudWxsLG8pfSl9fSFlLnZlcnNpb258fDA9PT1lLnZlcnNpb24uaW5kZXhPZigidjAuIil8fDA9PT1lLnZlcnNpb24uaW5kZXhPZigidjEuIikmJjAhPT1lLnZlcnNpb24uaW5kZXhPZigidjEuOC4iKT90LmV4cG9ydHM9bjp0LmV4cG9ydHM9ZS5uZXh0VGlja30pLmNhbGwodGhpcyxlKCJfcHJvY2VzcyIpKX0se19wcm9jZXNzOjI1fV0sMjU6W2Z1bmN0aW9uKGUsdCxuKXtmdW5jdGlvbiByKCl7aCYmYyYmKGg9ITEsYy5sZW5ndGg/bD1jLmNvbmNhdChsKTpwPS0xLGwubGVuZ3RoJiZpKCkpfWZ1bmN0aW9uIGkoKXtpZighaCl7dmFyIGU9YShyKTtoPSEwO2Zvcih2YXIgdD1sLmxlbmd0aDt0Oyl7Zm9yKGM9bCxsPVtdOysrcDx0OyljJiZjW3BdLnJ1bigpO3A9LTEsdD1sLmxlbmd0aH1jPW51bGwsaD0hMSx1KGUpfX1mdW5jdGlvbiBvKGUsdCl7dGhpcy5mdW49ZSx0aGlzLmFycmF5PXR9ZnVuY3Rpb24gcygpe312YXIgYSx1LGY9dC5leHBvcnRzPXt9OyFmdW5jdGlvbigpe3RyeXthPXNldFRpbWVvdXR9Y2F0Y2goZSl7YT1mdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcigic2V0VGltZW91dCBpcyBub3QgZGVmaW5lZCIpfX10cnl7dT1jbGVhclRpbWVvdXR9Y2F0Y2goZSl7dT1mdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcigiY2xlYXJUaW1lb3V0IGlzIG5vdCBkZWZpbmVkIil9fX0oKTt2YXIgYyxsPVtdLGg9ITEscD0tMTtmLm5leHRUaWNrPWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoLTEpO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSlmb3IodmFyIG49MTtuPGFyZ3VtZW50cy5sZW5ndGg7bisrKXRbbi0xXT1hcmd1bWVudHNbbl07bC5wdXNoKG5ldyBvKGUsdCkpLDEhPT1sLmxlbmd0aHx8aHx8YShpLDApfSxvLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXt0aGlzLmZ1bi5hcHBseShudWxsLHRoaXMuYXJyYXkpfSxmLnRpdGxlPSJicm93c2VyIixmLmJyb3dzZXI9ITAsZi5lbnY9e30sZi5hcmd2PVtdLGYudmVyc2lvbj0iIixmLnZlcnNpb25zPXt9LGYub249cyxmLmFkZExpc3RlbmVyPXMsZi5vbmNlPXMsZi5vZmY9cyxmLnJlbW92ZUxpc3RlbmVyPXMsZi5yZW1vdmVBbGxMaXN0ZW5lcnM9cyxmLmVtaXQ9cyxmLmJpbmRpbmc9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKCJwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCIpfSxmLmN3ZD1mdW5jdGlvbigpe3JldHVybiIvIn0sZi5jaGRpcj1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoInByb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCIpfSxmLnVtYXNrPWZ1bmN0aW9uKCl7cmV0dXJuIDB9fSx7fV0sMjY6W2Z1bmN0aW9uKGUsdCxuKXt0LmV4cG9ydHM9ZSgiLi9saWIvX3N0cmVhbV9kdXBsZXguanMiKX0seyIuL2xpYi9fc3RyZWFtX2R1cGxleC5qcyI6Mjd9XSwyNzpbZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKGUpe3JldHVybiB0aGlzIGluc3RhbmNlb2Ygcj8oZi5jYWxsKHRoaXMsZSksYy5jYWxsKHRoaXMsZSksZSYmZS5yZWFkYWJsZT09PSExJiYodGhpcy5yZWFkYWJsZT0hMSksZSYmZS53cml0YWJsZT09PSExJiYodGhpcy53cml0YWJsZT0hMSksdGhpcy5hbGxvd0hhbGZPcGVuPSEwLGUmJmUuYWxsb3dIYWxmT3Blbj09PSExJiYodGhpcy5hbGxvd0hhbGZPcGVuPSExKSx2b2lkIHRoaXMub25jZSgiZW5kIixpKSk6bmV3IHIoZSl9ZnVuY3Rpb24gaSgpe3RoaXMuYWxsb3dIYWxmT3Blbnx8dGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZHx8YShvLHRoaXMpfWZ1bmN0aW9uIG8oZSl7ZS5lbmQoKX12YXIgcz1PYmplY3Qua2V5c3x8ZnVuY3Rpb24oZSl7dmFyIHQ9W107Zm9yKHZhciBuIGluIGUpdC5wdXNoKG4pO3JldHVybiB0fTt0LmV4cG9ydHM9cjt2YXIgYT1lKCJwcm9jZXNzLW5leHRpY2stYXJncyIpLHU9ZSgiY29yZS11dGlsLWlzIik7dS5pbmhlcml0cz1lKCJpbmhlcml0cyIpO3ZhciBmPWUoIi4vX3N0cmVhbV9yZWFkYWJsZSIpLGM9ZSgiLi9fc3RyZWFtX3dyaXRhYmxlIik7dS5pbmhlcml0cyhyLGYpO2Zvcih2YXIgbD1zKGMucHJvdG90eXBlKSxoPTA7aDxsLmxlbmd0aDtoKyspe3ZhciBwPWxbaF07ci5wcm90b3R5cGVbcF18fChyLnByb3RvdHlwZVtwXT1jLnByb3RvdHlwZVtwXSl9fSx7Ii4vX3N0cmVhbV9yZWFkYWJsZSI6MjksIi4vX3N0cmVhbV93cml0YWJsZSI6MzEsImNvcmUtdXRpbC1pcyI6MTEsaW5oZXJpdHM6MTksInByb2Nlc3MtbmV4dGljay1hcmdzIjoyNH1dLDI4OltmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIoZSl7cmV0dXJuIHRoaXMgaW5zdGFuY2VvZiByP3ZvaWQgaS5jYWxsKHRoaXMsZSk6bmV3IHIoZSl9dC5leHBvcnRzPXI7dmFyIGk9ZSgiLi9fc3RyZWFtX3RyYW5zZm9ybSIpLG89ZSgiY29yZS11dGlsLWlzIik7by5pbmhlcml0cz1lKCJpbmhlcml0cyIpLG8uaW5oZXJpdHMocixpKSxyLnByb3RvdHlwZS5fdHJhbnNmb3JtPWZ1bmN0aW9uKGUsdCxuKXtuKG51bGwsZSl9fSx7Ii4vX3N0cmVhbV90cmFuc2Zvcm0iOjMwLCJjb3JlLXV0aWwtaXMiOjExLGluaGVyaXRzOjE5fV0sMjk6W2Z1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24obil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIoZSx0LG4pe3JldHVybiBrP2UucHJlcGVuZExpc3RlbmVyKHQsbik6dm9pZChlLl9ldmVudHMmJmUuX2V2ZW50c1t0XT9UKGUuX2V2ZW50c1t0XSk/ZS5fZXZlbnRzW3RdLnVuc2hpZnQobik6ZS5fZXZlbnRzW3RdPVtuLGUuX2V2ZW50c1t0XV06ZS5vbih0LG4pKX1mdW5jdGlvbiBpKHQsbil7VT1VfHxlKCIuL19zdHJlYW1fZHVwbGV4IiksdD10fHx7fSx0aGlzLm9iamVjdE1vZGU9ISF0Lm9iamVjdE1vZGUsbiBpbnN0YW5jZW9mIFUmJih0aGlzLm9iamVjdE1vZGU9dGhpcy5vYmplY3RNb2RlfHwhIXQucmVhZGFibGVPYmplY3RNb2RlKTt2YXIgcj10LmhpZ2hXYXRlck1hcmssaT10aGlzLm9iamVjdE1vZGU/MTY6MTYzODQ7dGhpcy5oaWdoV2F0ZXJNYXJrPXJ8fDA9PT1yP3I6aSx0aGlzLmhpZ2hXYXRlck1hcms9fn50aGlzLmhpZ2hXYXRlck1hcmssdGhpcy5idWZmZXI9W10sdGhpcy5sZW5ndGg9MCx0aGlzLnBpcGVzPW51bGwsdGhpcy5waXBlc0NvdW50PTAsdGhpcy5mbG93aW5nPW51bGwsdGhpcy5lbmRlZD0hMSx0aGlzLmVuZEVtaXR0ZWQ9ITEsdGhpcy5yZWFkaW5nPSExLHRoaXMuc3luYz0hMCx0aGlzLm5lZWRSZWFkYWJsZT0hMSx0aGlzLmVtaXR0ZWRSZWFkYWJsZT0hMSx0aGlzLnJlYWRhYmxlTGlzdGVuaW5nPSExLHRoaXMucmVzdW1lU2NoZWR1bGVkPSExLHRoaXMuZGVmYXVsdEVuY29kaW5nPXQuZGVmYXVsdEVuY29kaW5nfHwidXRmOCIsdGhpcy5yYW5PdXQ9ITEsdGhpcy5hd2FpdERyYWluPTAsdGhpcy5yZWFkaW5nTW9yZT0hMSx0aGlzLmRlY29kZXI9bnVsbCx0aGlzLmVuY29kaW5nPW51bGwsdC5lbmNvZGluZyYmKGp8fChqPWUoInN0cmluZ19kZWNvZGVyLyIpLlN0cmluZ0RlY29kZXIpLHRoaXMuZGVjb2Rlcj1uZXcgaih0LmVuY29kaW5nKSx0aGlzLmVuY29kaW5nPXQuZW5jb2RpbmcpfWZ1bmN0aW9uIG8odCl7cmV0dXJuIFU9VXx8ZSgiLi9fc3RyZWFtX2R1cGxleCIpLHRoaXMgaW5zdGFuY2VvZiBvPyh0aGlzLl9yZWFkYWJsZVN0YXRlPW5ldyBpKHQsdGhpcyksdGhpcy5yZWFkYWJsZT0hMCx0JiYiZnVuY3Rpb24iPT10eXBlb2YgdC5yZWFkJiYodGhpcy5fcmVhZD10LnJlYWQpLHZvaWQgSS5jYWxsKHRoaXMpKTpuZXcgbyh0KX1mdW5jdGlvbiBzKGUsdCxuLHIsaSl7dmFyIG89Yyh0LG4pO2lmKG8pZS5lbWl0KCJlcnJvciIsbyk7ZWxzZSBpZihudWxsPT09bil0LnJlYWRpbmc9ITEsbChlLHQpO2Vsc2UgaWYodC5vYmplY3RNb2RlfHxuJiZuLmxlbmd0aD4wKWlmKHQuZW5kZWQmJiFpKXt2YXIgcz1uZXcgRXJyb3IoInN0cmVhbS5wdXNoKCkgYWZ0ZXIgRU9GIik7ZS5lbWl0KCJlcnJvciIscyl9ZWxzZSBpZih0LmVuZEVtaXR0ZWQmJmkpe3ZhciB1PW5ldyBFcnJvcigic3RyZWFtLnVuc2hpZnQoKSBhZnRlciBlbmQgZXZlbnQiKTtlLmVtaXQoImVycm9yIix1KX1lbHNle3ZhciBmOyF0LmRlY29kZXJ8fGl8fHJ8fChuPXQuZGVjb2Rlci53cml0ZShuKSxmPSF0Lm9iamVjdE1vZGUmJjA9PT1uLmxlbmd0aCksaXx8KHQucmVhZGluZz0hMSksZnx8KHQuZmxvd2luZyYmMD09PXQubGVuZ3RoJiYhdC5zeW5jPyhlLmVtaXQoImRhdGEiLG4pLGUucmVhZCgwKSk6KHQubGVuZ3RoKz10Lm9iamVjdE1vZGU/MTpuLmxlbmd0aCxpP3QuYnVmZmVyLnVuc2hpZnQobik6dC5idWZmZXIucHVzaChuKSx0Lm5lZWRSZWFkYWJsZSYmaChlKSkpLGQoZSx0KX1lbHNlIGl8fCh0LnJlYWRpbmc9ITEpO3JldHVybiBhKHQpfWZ1bmN0aW9uIGEoZSl7cmV0dXJuIWUuZW5kZWQmJihlLm5lZWRSZWFkYWJsZXx8ZS5sZW5ndGg8ZS5oaWdoV2F0ZXJNYXJrfHwwPT09ZS5sZW5ndGgpfWZ1bmN0aW9uIHUoZSl7cmV0dXJuIGU+PUI/ZT1COihlLS0sZXw9ZT4+PjEsZXw9ZT4+PjIsZXw9ZT4+PjQsZXw9ZT4+PjgsZXw9ZT4+PjE2LGUrKyksZX1mdW5jdGlvbiBmKGUsdCl7cmV0dXJuIDA9PT10Lmxlbmd0aCYmdC5lbmRlZD8wOnQub2JqZWN0TW9kZT8wPT09ZT8wOjE6bnVsbD09PWV8fGlzTmFOKGUpP3QuZmxvd2luZyYmdC5idWZmZXIubGVuZ3RoP3QuYnVmZmVyWzBdLmxlbmd0aDp0Lmxlbmd0aDplPD0wPzA6KGU+dC5oaWdoV2F0ZXJNYXJrJiYodC5oaWdoV2F0ZXJNYXJrPXUoZSkpLGU+dC5sZW5ndGg/dC5lbmRlZD90Lmxlbmd0aDoodC5uZWVkUmVhZGFibGU9ITAsMCk6ZSl9ZnVuY3Rpb24gYyhlLHQpe3ZhciBuPW51bGw7cmV0dXJuIFAuaXNCdWZmZXIodCl8fCJzdHJpbmciPT10eXBlb2YgdHx8bnVsbD09PXR8fHZvaWQgMD09PXR8fGUub2JqZWN0TW9kZXx8KG49bmV3IFR5cGVFcnJvcigiSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuayIpKSxufWZ1bmN0aW9uIGwoZSx0KXtpZighdC5lbmRlZCl7aWYodC5kZWNvZGVyKXt2YXIgbj10LmRlY29kZXIuZW5kKCk7biYmbi5sZW5ndGgmJih0LmJ1ZmZlci5wdXNoKG4pLHQubGVuZ3RoKz10Lm9iamVjdE1vZGU/MTpuLmxlbmd0aCl9dC5lbmRlZD0hMCxoKGUpfX1mdW5jdGlvbiBoKGUpe3ZhciB0PWUuX3JlYWRhYmxlU3RhdGU7dC5uZWVkUmVhZGFibGU9ITEsdC5lbWl0dGVkUmVhZGFibGV8fChEKCJlbWl0UmVhZGFibGUiLHQuZmxvd2luZyksdC5lbWl0dGVkUmVhZGFibGU9ITAsdC5zeW5jP0EocCxlKTpwKGUpKX1mdW5jdGlvbiBwKGUpe0QoImVtaXQgcmVhZGFibGUiKSxlLmVtaXQoInJlYWRhYmxlIiksRShlKX1mdW5jdGlvbiBkKGUsdCl7dC5yZWFkaW5nTW9yZXx8KHQucmVhZGluZ01vcmU9ITAsQShnLGUsdCkpfWZ1bmN0aW9uIGcoZSx0KXtmb3IodmFyIG49dC5sZW5ndGg7IXQucmVhZGluZyYmIXQuZmxvd2luZyYmIXQuZW5kZWQmJnQubGVuZ3RoPHQuaGlnaFdhdGVyTWFyayYmKEQoIm1heWJlUmVhZE1vcmUgcmVhZCAwIiksZS5yZWFkKDApLG4hPT10Lmxlbmd0aCk7KW49dC5sZW5ndGg7dC5yZWFkaW5nTW9yZT0hMX1mdW5jdGlvbiB5KGUpe3JldHVybiBmdW5jdGlvbigpe3ZhciB0PWUuX3JlYWRhYmxlU3RhdGU7RCgicGlwZU9uRHJhaW4iLHQuYXdhaXREcmFpbiksdC5hd2FpdERyYWluJiZ0LmF3YWl0RHJhaW4tLSwwPT09dC5hd2FpdERyYWluJiZOKGUsImRhdGEiKSYmKHQuZmxvd2luZz0hMCxFKGUpKX19ZnVuY3Rpb24gXyhlKXtEKCJyZWFkYWJsZSBuZXh0dGljayByZWFkIDAiKSxlLnJlYWQoMCl9ZnVuY3Rpb24gdihlLHQpe3QucmVzdW1lU2NoZWR1bGVkfHwodC5yZXN1bWVTY2hlZHVsZWQ9ITAsQShtLGUsdCkpfWZ1bmN0aW9uIG0oZSx0KXt0LnJlYWRpbmd8fChEKCJyZXN1bWUgcmVhZCAwIiksZS5yZWFkKDApKSx0LnJlc3VtZVNjaGVkdWxlZD0hMSxlLmVtaXQoInJlc3VtZSIpLEUoZSksdC5mbG93aW5nJiYhdC5yZWFkaW5nJiZlLnJlYWQoMCl9ZnVuY3Rpb24gRShlKXt2YXIgdD1lLl9yZWFkYWJsZVN0YXRlO2lmKEQoImZsb3ciLHQuZmxvd2luZyksdC5mbG93aW5nKWRvIHZhciBuPWUucmVhZCgpO3doaWxlKG51bGwhPT1uJiZ0LmZsb3dpbmcpfWZ1bmN0aW9uIHcoZSx0KXt2YXIgbixyPXQuYnVmZmVyLGk9dC5sZW5ndGgsbz0hIXQuZGVjb2RlcixzPSEhdC5vYmplY3RNb2RlO2lmKDA9PT1yLmxlbmd0aClyZXR1cm4gbnVsbDtpZigwPT09aSluPW51bGw7ZWxzZSBpZihzKW49ci5zaGlmdCgpO2Vsc2UgaWYoIWV8fGU+PWkpbj1vP3Iuam9pbigiIik6MT09PXIubGVuZ3RoP3JbMF06UC5jb25jYXQocixpKSxyLmxlbmd0aD0wO2Vsc2UgaWYoZTxyWzBdLmxlbmd0aCl7dmFyIGE9clswXTtuPWEuc2xpY2UoMCxlKSxyWzBdPWEuc2xpY2UoZSl9ZWxzZSBpZihlPT09clswXS5sZW5ndGgpbj1yLnNoaWZ0KCk7ZWxzZXtuPW8/IiI6Qy5hbGxvY1Vuc2FmZShlKTtmb3IodmFyIHU9MCxmPTAsYz1yLmxlbmd0aDtmPGMmJnU8ZTtmKyspe3ZhciBsPXJbMF0saD1NYXRoLm1pbihlLXUsbC5sZW5ndGgpO28/bis9bC5zbGljZSgwLGgpOmwuY29weShuLHUsMCxoKSxoPGwubGVuZ3RoP3JbMF09bC5zbGljZShoKTpyLnNoaWZ0KCksdSs9aH19cmV0dXJuIG59ZnVuY3Rpb24gYihlKXt2YXIgdD1lLl9yZWFkYWJsZVN0YXRlO2lmKHQubGVuZ3RoPjApdGhyb3cgbmV3IEVycm9yKCciZW5kUmVhZGFibGUoKSIgY2FsbGVkIG9uIG5vbi1lbXB0eSBzdHJlYW0nKTt0LmVuZEVtaXR0ZWR8fCh0LmVuZGVkPSEwLEEoUyx0LGUpKX1mdW5jdGlvbiBTKGUsdCl7ZS5lbmRFbWl0dGVkfHwwIT09ZS5sZW5ndGh8fChlLmVuZEVtaXR0ZWQ9ITAsdC5yZWFkYWJsZT0hMSx0LmVtaXQoImVuZCIpKX1mdW5jdGlvbiBPKGUsdCl7Zm9yKHZhciBuPTAscj1lLmxlbmd0aDtuPHI7bisrKXQoZVtuXSxuKX1mdW5jdGlvbiBSKGUsdCl7Zm9yKHZhciBuPTAscj1lLmxlbmd0aDtuPHI7bisrKWlmKGVbbl09PT10KXJldHVybiBuO3JldHVybi0xfXQuZXhwb3J0cz1vO3ZhciBBPWUoInByb2Nlc3MtbmV4dGljay1hcmdzIiksVD1lKCJpc2FycmF5Iik7by5SZWFkYWJsZVN0YXRlPWk7dmFyIEksTD1lKCJldmVudHMiKS5FdmVudEVtaXR0ZXIsTj1mdW5jdGlvbihlLHQpe3JldHVybiBlLmxpc3RlbmVycyh0KS5sZW5ndGh9OyFmdW5jdGlvbigpe3RyeXtJPWUoInN0cmVhbSIpfWNhdGNoKHQpe31maW5hbGx5e0l8fChJPWUoImV2ZW50cyIpLkV2ZW50RW1pdHRlcil9fSgpO3ZhciBQPWUoImJ1ZmZlciIpLkJ1ZmZlcixDPWUoImJ1ZmZlci1zaGltcyIpLE09ZSgiY29yZS11dGlsLWlzIik7TS5pbmhlcml0cz1lKCJpbmhlcml0cyIpO3ZhciB4PWUoInV0aWwiKSxEPXZvaWQgMDtEPXgmJnguZGVidWdsb2c/eC5kZWJ1Z2xvZygic3RyZWFtIik6ZnVuY3Rpb24oKXt9O3ZhciBqO00uaW5oZXJpdHMobyxJKTt2YXIgVSxVLGs9ImZ1bmN0aW9uIj09dHlwZW9mIEwucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lcjtvLnByb3RvdHlwZS5wdXNoPWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5fcmVhZGFibGVTdGF0ZTtyZXR1cm4gbi5vYmplY3RNb2RlfHwic3RyaW5nIiE9dHlwZW9mIGV8fCh0PXR8fG4uZGVmYXVsdEVuY29kaW5nLHQhPT1uLmVuY29kaW5nJiYoZT1DLmZyb20oZSx0KSx0PSIiKSkscyh0aGlzLG4sZSx0LCExKX0sby5wcm90b3R5cGUudW5zaGlmdD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLl9yZWFkYWJsZVN0YXRlO3JldHVybiBzKHRoaXMsdCxlLCIiLCEwKX0sby5wcm90b3R5cGUuaXNQYXVzZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nPT09ITF9LG8ucHJvdG90eXBlLnNldEVuY29kaW5nPWZ1bmN0aW9uKHQpe3JldHVybiBqfHwoaj1lKCJzdHJpbmdfZGVjb2Rlci8iKS5TdHJpbmdEZWNvZGVyKSx0aGlzLl9yZWFkYWJsZVN0YXRlLmRlY29kZXI9bmV3IGoodCksdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmNvZGluZz10LHRoaXN9O3ZhciBCPTgzODg2MDg7by5wcm90b3R5cGUucmVhZD1mdW5jdGlvbihlKXtEKCJyZWFkIixlKTt2YXIgdD10aGlzLl9yZWFkYWJsZVN0YXRlLG49ZTtpZigoIm51bWJlciIhPXR5cGVvZiBlfHxlPjApJiYodC5lbWl0dGVkUmVhZGFibGU9ITEpLDA9PT1lJiZ0Lm5lZWRSZWFkYWJsZSYmKHQubGVuZ3RoPj10LmhpZ2hXYXRlck1hcmt8fHQuZW5kZWQpKXJldHVybiBEKCJyZWFkOiBlbWl0UmVhZGFibGUiLHQubGVuZ3RoLHQuZW5kZWQpLDA9PT10Lmxlbmd0aCYmdC5lbmRlZD9iKHRoaXMpOmgodGhpcyksbnVsbDtpZihlPWYoZSx0KSwwPT09ZSYmdC5lbmRlZClyZXR1cm4gMD09PXQubGVuZ3RoJiZiKHRoaXMpLG51bGw7dmFyIHI9dC5uZWVkUmVhZGFibGU7RCgibmVlZCByZWFkYWJsZSIsciksKDA9PT10Lmxlbmd0aHx8dC5sZW5ndGgtZTx0LmhpZ2hXYXRlck1hcmspJiYocj0hMCxEKCJsZW5ndGggbGVzcyB0aGFuIHdhdGVybWFyayIscikpLCh0LmVuZGVkfHx0LnJlYWRpbmcpJiYocj0hMSxEKCJyZWFkaW5nIG9yIGVuZGVkIixyKSksciYmKEQoImRvIHJlYWQiKSx0LnJlYWRpbmc9ITAsdC5zeW5jPSEwLDA9PT10Lmxlbmd0aCYmKHQubmVlZFJlYWRhYmxlPSEwKSx0aGlzLl9yZWFkKHQuaGlnaFdhdGVyTWFyayksdC5zeW5jPSExKSxyJiYhdC5yZWFkaW5nJiYoZT1mKG4sdCkpO3ZhciBpO3JldHVybiBpPWU+MD93KGUsdCk6bnVsbCxudWxsPT09aSYmKHQubmVlZFJlYWRhYmxlPSEwLGU9MCksdC5sZW5ndGgtPWUsMCE9PXQubGVuZ3RofHx0LmVuZGVkfHwodC5uZWVkUmVhZGFibGU9ITApLG4hPT1lJiZ0LmVuZGVkJiYwPT09dC5sZW5ndGgmJmIodGhpcyksbnVsbCE9PWkmJnRoaXMuZW1pdCgiZGF0YSIsaSksaX0sby5wcm90b3R5cGUuX3JlYWQ9ZnVuY3Rpb24oZSl7dGhpcy5lbWl0KCJlcnJvciIsbmV3IEVycm9yKCJub3QgaW1wbGVtZW50ZWQiKSl9LG8ucHJvdG90eXBlLnBpcGU9ZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBpKGUpe0QoIm9udW5waXBlIiksZT09PWgmJnMoKX1mdW5jdGlvbiBvKCl7RCgib25lbmQiKSxlLmVuZCgpfWZ1bmN0aW9uIHMoKXtEKCJjbGVhbnVwIiksZS5yZW1vdmVMaXN0ZW5lcigiY2xvc2UiLGYpLGUucmVtb3ZlTGlzdGVuZXIoImZpbmlzaCIsYyksZS5yZW1vdmVMaXN0ZW5lcigiZHJhaW4iLF8pLGUucmVtb3ZlTGlzdGVuZXIoImVycm9yIix1KSxlLnJlbW92ZUxpc3RlbmVyKCJ1bnBpcGUiLGkpLGgucmVtb3ZlTGlzdGVuZXIoImVuZCIsbyksaC5yZW1vdmVMaXN0ZW5lcigiZW5kIixzKSxoLnJlbW92ZUxpc3RlbmVyKCJkYXRhIixhKSx2PSEwLCFwLmF3YWl0RHJhaW58fGUuX3dyaXRhYmxlU3RhdGUmJiFlLl93cml0YWJsZVN0YXRlLm5lZWREcmFpbnx8XygpfWZ1bmN0aW9uIGEodCl7RCgib25kYXRhIik7dmFyIG49ZS53cml0ZSh0KTshMT09PW4mJigoMT09PXAucGlwZXNDb3VudCYmcC5waXBlcz09PWV8fHAucGlwZXNDb3VudD4xJiZSKHAucGlwZXMsZSkhPT0tMSkmJiF2JiYoRCgiZmFsc2Ugd3JpdGUgcmVzcG9uc2UsIHBhdXNlIixoLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4pLGguX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbisrKSxoLnBhdXNlKCkpfWZ1bmN0aW9uIHUodCl7RCgib25lcnJvciIsdCksbCgpLGUucmVtb3ZlTGlzdGVuZXIoImVycm9yIix1KSwwPT09TihlLCJlcnJvciIpJiZlLmVtaXQoImVycm9yIix0KX1mdW5jdGlvbiBmKCl7ZS5yZW1vdmVMaXN0ZW5lcigiZmluaXNoIixjKSxsKCl9ZnVuY3Rpb24gYygpe0QoIm9uZmluaXNoIiksZS5yZW1vdmVMaXN0ZW5lcigiY2xvc2UiLGYpLGwoKX1mdW5jdGlvbiBsKCl7RCgidW5waXBlIiksaC51bnBpcGUoZSl9dmFyIGg9dGhpcyxwPXRoaXMuX3JlYWRhYmxlU3RhdGU7c3dpdGNoKHAucGlwZXNDb3VudCl7Y2FzZSAwOnAucGlwZXM9ZTticmVhaztjYXNlIDE6cC5waXBlcz1bcC5waXBlcyxlXTticmVhaztkZWZhdWx0OnAucGlwZXMucHVzaChlKX1wLnBpcGVzQ291bnQrPTEsRCgicGlwZSBjb3VudD0lZCBvcHRzPSVqIixwLnBpcGVzQ291bnQsdCk7dmFyIGQ9KCF0fHx0LmVuZCE9PSExKSYmZSE9PW4uc3Rkb3V0JiZlIT09bi5zdGRlcnIsZz1kP286cztwLmVuZEVtaXR0ZWQ/QShnKTpoLm9uY2UoImVuZCIsZyksZS5vbigidW5waXBlIixpKTt2YXIgXz15KGgpO2Uub24oImRyYWluIixfKTt2YXIgdj0hMTtyZXR1cm4gaC5vbigiZGF0YSIsYSkscihlLCJlcnJvciIsdSksZS5vbmNlKCJjbG9zZSIsZiksZS5vbmNlKCJmaW5pc2giLGMpLGUuZW1pdCgicGlwZSIsaCkscC5mbG93aW5nfHwoRCgicGlwZSByZXN1bWUiKSxoLnJlc3VtZSgpKSxlfSxvLnByb3RvdHlwZS51bnBpcGU9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fcmVhZGFibGVTdGF0ZTtpZigwPT09dC5waXBlc0NvdW50KXJldHVybiB0aGlzO2lmKDE9PT10LnBpcGVzQ291bnQpcmV0dXJuIGUmJmUhPT10LnBpcGVzP3RoaXM6KGV8fChlPXQucGlwZXMpLHQucGlwZXM9bnVsbCx0LnBpcGVzQ291bnQ9MCx0LmZsb3dpbmc9ITEsZSYmZS5lbWl0KCJ1bnBpcGUiLHRoaXMpLHRoaXMpO2lmKCFlKXt2YXIgbj10LnBpcGVzLHI9dC5waXBlc0NvdW50O3QucGlwZXM9bnVsbCx0LnBpcGVzQ291bnQ9MCx0LmZsb3dpbmc9ITE7Zm9yKHZhciBpPTA7aTxyO2krKyluW2ldLmVtaXQoInVucGlwZSIsdGhpcyk7cmV0dXJuIHRoaXN9dmFyIG89Uih0LnBpcGVzLGUpO3JldHVybiBvPT09LTE/dGhpczoodC5waXBlcy5zcGxpY2UobywxKSx0LnBpcGVzQ291bnQtPTEsMT09PXQucGlwZXNDb3VudCYmKHQucGlwZXM9dC5waXBlc1swXSksZS5lbWl0KCJ1bnBpcGUiLHRoaXMpLHRoaXMpfSxvLnByb3RvdHlwZS5vbj1mdW5jdGlvbihlLHQpe3ZhciBuPUkucHJvdG90eXBlLm9uLmNhbGwodGhpcyxlLHQpO2lmKCJkYXRhIj09PWUmJiExIT09dGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nJiZ0aGlzLnJlc3VtZSgpLCJyZWFkYWJsZSI9PT1lJiYhdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkKXt2YXIgcj10aGlzLl9yZWFkYWJsZVN0YXRlO3IucmVhZGFibGVMaXN0ZW5pbmd8fChyLnJlYWRhYmxlTGlzdGVuaW5nPSEwLHIuZW1pdHRlZFJlYWRhYmxlPSExLHIubmVlZFJlYWRhYmxlPSEwLHIucmVhZGluZz9yLmxlbmd0aCYmaCh0aGlzLHIpOkEoXyx0aGlzKSl9cmV0dXJuIG59LG8ucHJvdG90eXBlLmFkZExpc3RlbmVyPW8ucHJvdG90eXBlLm9uLG8ucHJvdG90eXBlLnJlc3VtZT1mdW5jdGlvbigpe3ZhciBlPXRoaXMuX3JlYWRhYmxlU3RhdGU7cmV0dXJuIGUuZmxvd2luZ3x8KEQoInJlc3VtZSIpLGUuZmxvd2luZz0hMCx2KHRoaXMsZSkpLHRoaXN9LG8ucHJvdG90eXBlLnBhdXNlPWZ1bmN0aW9uKCl7cmV0dXJuIEQoImNhbGwgcGF1c2UgZmxvd2luZz0laiIsdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKSwhMSE9PXRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyYmKEQoInBhdXNlIiksCnRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZz0hMSx0aGlzLmVtaXQoInBhdXNlIikpLHRoaXN9LG8ucHJvdG90eXBlLndyYXA9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fcmVhZGFibGVTdGF0ZSxuPSExLHI9dGhpcztlLm9uKCJlbmQiLGZ1bmN0aW9uKCl7aWYoRCgid3JhcHBlZCBlbmQiKSx0LmRlY29kZXImJiF0LmVuZGVkKXt2YXIgZT10LmRlY29kZXIuZW5kKCk7ZSYmZS5sZW5ndGgmJnIucHVzaChlKX1yLnB1c2gobnVsbCl9KSxlLm9uKCJkYXRhIixmdW5jdGlvbihpKXtpZihEKCJ3cmFwcGVkIGRhdGEiKSx0LmRlY29kZXImJihpPXQuZGVjb2Rlci53cml0ZShpKSksKCF0Lm9iamVjdE1vZGV8fG51bGwhPT1pJiZ2b2lkIDAhPT1pKSYmKHQub2JqZWN0TW9kZXx8aSYmaS5sZW5ndGgpKXt2YXIgbz1yLnB1c2goaSk7b3x8KG49ITAsZS5wYXVzZSgpKX19KTtmb3IodmFyIGkgaW4gZSl2b2lkIDA9PT10aGlzW2ldJiYiZnVuY3Rpb24iPT10eXBlb2YgZVtpXSYmKHRoaXNbaV09ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGVbdF0uYXBwbHkoZSxhcmd1bWVudHMpfX0oaSkpO3ZhciBvPVsiZXJyb3IiLCJjbG9zZSIsImRlc3Ryb3kiLCJwYXVzZSIsInJlc3VtZSJdO3JldHVybiBPKG8sZnVuY3Rpb24odCl7ZS5vbih0LHIuZW1pdC5iaW5kKHIsdCkpfSksci5fcmVhZD1mdW5jdGlvbih0KXtEKCJ3cmFwcGVkIF9yZWFkIix0KSxuJiYobj0hMSxlLnJlc3VtZSgpKX0scn0sby5fZnJvbUxpc3Q9d30pLmNhbGwodGhpcyxlKCJfcHJvY2VzcyIpKX0seyIuL19zdHJlYW1fZHVwbGV4IjoyNyxfcHJvY2VzczoyNSxidWZmZXI6NywiYnVmZmVyLXNoaW1zIjo2LCJjb3JlLXV0aWwtaXMiOjExLGV2ZW50czoxMixpbmhlcml0czoxOSxpc2FycmF5OjIxLCJwcm9jZXNzLW5leHRpY2stYXJncyI6MjQsInN0cmluZ19kZWNvZGVyLyI6NDEsdXRpbDozfV0sMzA6W2Z1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcihlKXt0aGlzLmFmdGVyVHJhbnNmb3JtPWZ1bmN0aW9uKHQsbil7cmV0dXJuIGkoZSx0LG4pfSx0aGlzLm5lZWRUcmFuc2Zvcm09ITEsdGhpcy50cmFuc2Zvcm1pbmc9ITEsdGhpcy53cml0ZWNiPW51bGwsdGhpcy53cml0ZWNodW5rPW51bGwsdGhpcy53cml0ZWVuY29kaW5nPW51bGx9ZnVuY3Rpb24gaShlLHQsbil7dmFyIHI9ZS5fdHJhbnNmb3JtU3RhdGU7ci50cmFuc2Zvcm1pbmc9ITE7dmFyIGk9ci53cml0ZWNiO2lmKCFpKXJldHVybiBlLmVtaXQoImVycm9yIixuZXcgRXJyb3IoIm5vIHdyaXRlY2IgaW4gVHJhbnNmb3JtIGNsYXNzIikpO3Iud3JpdGVjaHVuaz1udWxsLHIud3JpdGVjYj1udWxsLG51bGwhPT1uJiZ2b2lkIDAhPT1uJiZlLnB1c2gobiksaSh0KTt2YXIgbz1lLl9yZWFkYWJsZVN0YXRlO28ucmVhZGluZz0hMSwoby5uZWVkUmVhZGFibGV8fG8ubGVuZ3RoPG8uaGlnaFdhdGVyTWFyaykmJmUuX3JlYWQoby5oaWdoV2F0ZXJNYXJrKX1mdW5jdGlvbiBvKGUpe2lmKCEodGhpcyBpbnN0YW5jZW9mIG8pKXJldHVybiBuZXcgbyhlKTthLmNhbGwodGhpcyxlKSx0aGlzLl90cmFuc2Zvcm1TdGF0ZT1uZXcgcih0aGlzKTt2YXIgdD10aGlzO3RoaXMuX3JlYWRhYmxlU3RhdGUubmVlZFJlYWRhYmxlPSEwLHRoaXMuX3JlYWRhYmxlU3RhdGUuc3luYz0hMSxlJiYoImZ1bmN0aW9uIj09dHlwZW9mIGUudHJhbnNmb3JtJiYodGhpcy5fdHJhbnNmb3JtPWUudHJhbnNmb3JtKSwiZnVuY3Rpb24iPT10eXBlb2YgZS5mbHVzaCYmKHRoaXMuX2ZsdXNoPWUuZmx1c2gpKSx0aGlzLm9uY2UoInByZWZpbmlzaCIsZnVuY3Rpb24oKXsiZnVuY3Rpb24iPT10eXBlb2YgdGhpcy5fZmx1c2g/dGhpcy5fZmx1c2goZnVuY3Rpb24oZSl7cyh0LGUpfSk6cyh0KX0pfWZ1bmN0aW9uIHMoZSx0KXtpZih0KXJldHVybiBlLmVtaXQoImVycm9yIix0KTt2YXIgbj1lLl93cml0YWJsZVN0YXRlLHI9ZS5fdHJhbnNmb3JtU3RhdGU7aWYobi5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKCJDYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gd3MubGVuZ3RoICE9IDAiKTtpZihyLnRyYW5zZm9ybWluZyl0aHJvdyBuZXcgRXJyb3IoIkNhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiBzdGlsbCB0cmFuc2Zvcm1pbmciKTtyZXR1cm4gZS5wdXNoKG51bGwpfXQuZXhwb3J0cz1vO3ZhciBhPWUoIi4vX3N0cmVhbV9kdXBsZXgiKSx1PWUoImNvcmUtdXRpbC1pcyIpO3UuaW5oZXJpdHM9ZSgiaW5oZXJpdHMiKSx1LmluaGVyaXRzKG8sYSksby5wcm90b3R5cGUucHVzaD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLl90cmFuc2Zvcm1TdGF0ZS5uZWVkVHJhbnNmb3JtPSExLGEucHJvdG90eXBlLnB1c2guY2FsbCh0aGlzLGUsdCl9LG8ucHJvdG90eXBlLl90cmFuc2Zvcm09ZnVuY3Rpb24oZSx0LG4pe3Rocm93IG5ldyBFcnJvcigiTm90IGltcGxlbWVudGVkIil9LG8ucHJvdG90eXBlLl93cml0ZT1mdW5jdGlvbihlLHQsbil7dmFyIHI9dGhpcy5fdHJhbnNmb3JtU3RhdGU7aWYoci53cml0ZWNiPW4sci53cml0ZWNodW5rPWUsci53cml0ZWVuY29kaW5nPXQsIXIudHJhbnNmb3JtaW5nKXt2YXIgaT10aGlzLl9yZWFkYWJsZVN0YXRlOyhyLm5lZWRUcmFuc2Zvcm18fGkubmVlZFJlYWRhYmxlfHxpLmxlbmd0aDxpLmhpZ2hXYXRlck1hcmspJiZ0aGlzLl9yZWFkKGkuaGlnaFdhdGVyTWFyayl9fSxvLnByb3RvdHlwZS5fcmVhZD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLl90cmFuc2Zvcm1TdGF0ZTtudWxsIT09dC53cml0ZWNodW5rJiZ0LndyaXRlY2ImJiF0LnRyYW5zZm9ybWluZz8odC50cmFuc2Zvcm1pbmc9ITAsdGhpcy5fdHJhbnNmb3JtKHQud3JpdGVjaHVuayx0LndyaXRlZW5jb2RpbmcsdC5hZnRlclRyYW5zZm9ybSkpOnQubmVlZFRyYW5zZm9ybT0hMH19LHsiLi9fc3RyZWFtX2R1cGxleCI6MjcsImNvcmUtdXRpbC1pcyI6MTEsaW5oZXJpdHM6MTl9XSwzMTpbZnVuY3Rpb24oZSx0LG4peyhmdW5jdGlvbihuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcigpe31mdW5jdGlvbiBpKGUsdCxuKXt0aGlzLmNodW5rPWUsdGhpcy5lbmNvZGluZz10LHRoaXMuY2FsbGJhY2s9bix0aGlzLm5leHQ9bnVsbH1mdW5jdGlvbiBvKHQsbil7Tj1OfHxlKCIuL19zdHJlYW1fZHVwbGV4IiksdD10fHx7fSx0aGlzLm9iamVjdE1vZGU9ISF0Lm9iamVjdE1vZGUsbiBpbnN0YW5jZW9mIE4mJih0aGlzLm9iamVjdE1vZGU9dGhpcy5vYmplY3RNb2RlfHwhIXQud3JpdGFibGVPYmplY3RNb2RlKTt2YXIgcj10LmhpZ2hXYXRlck1hcmssaT10aGlzLm9iamVjdE1vZGU/MTY6MTYzODQ7dGhpcy5oaWdoV2F0ZXJNYXJrPXJ8fDA9PT1yP3I6aSx0aGlzLmhpZ2hXYXRlck1hcms9fn50aGlzLmhpZ2hXYXRlck1hcmssdGhpcy5uZWVkRHJhaW49ITEsdGhpcy5lbmRpbmc9ITEsdGhpcy5lbmRlZD0hMSx0aGlzLmZpbmlzaGVkPSExO3ZhciBvPXQuZGVjb2RlU3RyaW5ncz09PSExO3RoaXMuZGVjb2RlU3RyaW5ncz0hbyx0aGlzLmRlZmF1bHRFbmNvZGluZz10LmRlZmF1bHRFbmNvZGluZ3x8InV0ZjgiLHRoaXMubGVuZ3RoPTAsdGhpcy53cml0aW5nPSExLHRoaXMuY29ya2VkPTAsdGhpcy5zeW5jPSEwLHRoaXMuYnVmZmVyUHJvY2Vzc2luZz0hMSx0aGlzLm9ud3JpdGU9ZnVuY3Rpb24oZSl7ZChuLGUpfSx0aGlzLndyaXRlY2I9bnVsbCx0aGlzLndyaXRlbGVuPTAsdGhpcy5idWZmZXJlZFJlcXVlc3Q9bnVsbCx0aGlzLmxhc3RCdWZmZXJlZFJlcXVlc3Q9bnVsbCx0aGlzLnBlbmRpbmdjYj0wLHRoaXMucHJlZmluaXNoZWQ9ITEsdGhpcy5lcnJvckVtaXR0ZWQ9ITEsdGhpcy5idWZmZXJlZFJlcXVlc3RDb3VudD0wLHRoaXMuY29ya2VkUmVxdWVzdHNGcmVlPW5ldyBiKHRoaXMpfWZ1bmN0aW9uIHModCl7cmV0dXJuIE49Tnx8ZSgiLi9fc3RyZWFtX2R1cGxleCIpLHRoaXMgaW5zdGFuY2VvZiBzfHx0aGlzIGluc3RhbmNlb2YgTj8odGhpcy5fd3JpdGFibGVTdGF0ZT1uZXcgbyh0LHRoaXMpLHRoaXMud3JpdGFibGU9ITAsdCYmKCJmdW5jdGlvbiI9PXR5cGVvZiB0LndyaXRlJiYodGhpcy5fd3JpdGU9dC53cml0ZSksImZ1bmN0aW9uIj09dHlwZW9mIHQud3JpdGV2JiYodGhpcy5fd3JpdGV2PXQud3JpdGV2KSksdm9pZCBBLmNhbGwodGhpcykpOm5ldyBzKHQpfWZ1bmN0aW9uIGEoZSx0KXt2YXIgbj1uZXcgRXJyb3IoIndyaXRlIGFmdGVyIGVuZCIpO2UuZW1pdCgiZXJyb3IiLG4pLFModCxuKX1mdW5jdGlvbiB1KGUsdCxuLHIpe3ZhciBpPSEwLG89ITE7cmV0dXJuIG51bGw9PT1uP289bmV3IFR5cGVFcnJvcigiTWF5IG5vdCB3cml0ZSBudWxsIHZhbHVlcyB0byBzdHJlYW0iKTpJLmlzQnVmZmVyKG4pfHwic3RyaW5nIj09dHlwZW9mIG58fHZvaWQgMD09PW58fHQub2JqZWN0TW9kZXx8KG89bmV3IFR5cGVFcnJvcigiSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuayIpKSxvJiYoZS5lbWl0KCJlcnJvciIsbyksUyhyLG8pLGk9ITEpLGl9ZnVuY3Rpb24gZihlLHQsbil7cmV0dXJuIGUub2JqZWN0TW9kZXx8ZS5kZWNvZGVTdHJpbmdzPT09ITF8fCJzdHJpbmciIT10eXBlb2YgdHx8KHQ9TC5mcm9tKHQsbikpLHR9ZnVuY3Rpb24gYyhlLHQsbixyLG8pe249Zih0LG4sciksSS5pc0J1ZmZlcihuKSYmKHI9ImJ1ZmZlciIpO3ZhciBzPXQub2JqZWN0TW9kZT8xOm4ubGVuZ3RoO3QubGVuZ3RoKz1zO3ZhciBhPXQubGVuZ3RoPHQuaGlnaFdhdGVyTWFyaztpZihhfHwodC5uZWVkRHJhaW49ITApLHQud3JpdGluZ3x8dC5jb3JrZWQpe3ZhciB1PXQubGFzdEJ1ZmZlcmVkUmVxdWVzdDt0Lmxhc3RCdWZmZXJlZFJlcXVlc3Q9bmV3IGkobixyLG8pLHU/dS5uZXh0PXQubGFzdEJ1ZmZlcmVkUmVxdWVzdDp0LmJ1ZmZlcmVkUmVxdWVzdD10Lmxhc3RCdWZmZXJlZFJlcXVlc3QsdC5idWZmZXJlZFJlcXVlc3RDb3VudCs9MX1lbHNlIGwoZSx0LCExLHMsbixyLG8pO3JldHVybiBhfWZ1bmN0aW9uIGwoZSx0LG4scixpLG8scyl7dC53cml0ZWxlbj1yLHQud3JpdGVjYj1zLHQud3JpdGluZz0hMCx0LnN5bmM9ITAsbj9lLl93cml0ZXYoaSx0Lm9ud3JpdGUpOmUuX3dyaXRlKGksbyx0Lm9ud3JpdGUpLHQuc3luYz0hMX1mdW5jdGlvbiBoKGUsdCxuLHIsaSl7LS10LnBlbmRpbmdjYixuP1MoaSxyKTppKHIpLGUuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkPSEwLGUuZW1pdCgiZXJyb3IiLHIpfWZ1bmN0aW9uIHAoZSl7ZS53cml0aW5nPSExLGUud3JpdGVjYj1udWxsLGUubGVuZ3RoLT1lLndyaXRlbGVuLGUud3JpdGVsZW49MH1mdW5jdGlvbiBkKGUsdCl7dmFyIG49ZS5fd3JpdGFibGVTdGF0ZSxyPW4uc3luYyxpPW4ud3JpdGVjYjtpZihwKG4pLHQpaChlLG4scix0LGkpO2Vsc2V7dmFyIG89dihuKTtvfHxuLmNvcmtlZHx8bi5idWZmZXJQcm9jZXNzaW5nfHwhbi5idWZmZXJlZFJlcXVlc3R8fF8oZSxuKSxyP08oZyxlLG4sbyxpKTpnKGUsbixvLGkpfX1mdW5jdGlvbiBnKGUsdCxuLHIpe258fHkoZSx0KSx0LnBlbmRpbmdjYi0tLHIoKSxFKGUsdCl9ZnVuY3Rpb24geShlLHQpezA9PT10Lmxlbmd0aCYmdC5uZWVkRHJhaW4mJih0Lm5lZWREcmFpbj0hMSxlLmVtaXQoImRyYWluIikpfWZ1bmN0aW9uIF8oZSx0KXt0LmJ1ZmZlclByb2Nlc3Npbmc9ITA7dmFyIG49dC5idWZmZXJlZFJlcXVlc3Q7aWYoZS5fd3JpdGV2JiZuJiZuLm5leHQpe3ZhciByPXQuYnVmZmVyZWRSZXF1ZXN0Q291bnQsaT1uZXcgQXJyYXkociksbz10LmNvcmtlZFJlcXVlc3RzRnJlZTtvLmVudHJ5PW47Zm9yKHZhciBzPTA7bjspaVtzXT1uLG49bi5uZXh0LHMrPTE7bChlLHQsITAsdC5sZW5ndGgsaSwiIixvLmZpbmlzaCksdC5wZW5kaW5nY2IrKyx0Lmxhc3RCdWZmZXJlZFJlcXVlc3Q9bnVsbCxvLm5leHQ/KHQuY29ya2VkUmVxdWVzdHNGcmVlPW8ubmV4dCxvLm5leHQ9bnVsbCk6dC5jb3JrZWRSZXF1ZXN0c0ZyZWU9bmV3IGIodCl9ZWxzZXtmb3IoO247KXt2YXIgYT1uLmNodW5rLHU9bi5lbmNvZGluZyxmPW4uY2FsbGJhY2ssYz10Lm9iamVjdE1vZGU/MTphLmxlbmd0aDtpZihsKGUsdCwhMSxjLGEsdSxmKSxuPW4ubmV4dCx0LndyaXRpbmcpYnJlYWt9bnVsbD09PW4mJih0Lmxhc3RCdWZmZXJlZFJlcXVlc3Q9bnVsbCl9dC5idWZmZXJlZFJlcXVlc3RDb3VudD0wLHQuYnVmZmVyZWRSZXF1ZXN0PW4sdC5idWZmZXJQcm9jZXNzaW5nPSExfWZ1bmN0aW9uIHYoZSl7cmV0dXJuIGUuZW5kaW5nJiYwPT09ZS5sZW5ndGgmJm51bGw9PT1lLmJ1ZmZlcmVkUmVxdWVzdCYmIWUuZmluaXNoZWQmJiFlLndyaXRpbmd9ZnVuY3Rpb24gbShlLHQpe3QucHJlZmluaXNoZWR8fCh0LnByZWZpbmlzaGVkPSEwLGUuZW1pdCgicHJlZmluaXNoIikpfWZ1bmN0aW9uIEUoZSx0KXt2YXIgbj12KHQpO3JldHVybiBuJiYoMD09PXQucGVuZGluZ2NiPyhtKGUsdCksdC5maW5pc2hlZD0hMCxlLmVtaXQoImZpbmlzaCIpKTptKGUsdCkpLG59ZnVuY3Rpb24gdyhlLHQsbil7dC5lbmRpbmc9ITAsRShlLHQpLG4mJih0LmZpbmlzaGVkP1Mobik6ZS5vbmNlKCJmaW5pc2giLG4pKSx0LmVuZGVkPSEwLGUud3JpdGFibGU9ITF9ZnVuY3Rpb24gYihlKXt2YXIgdD10aGlzO3RoaXMubmV4dD1udWxsLHRoaXMuZW50cnk9bnVsbCx0aGlzLmZpbmlzaD1mdW5jdGlvbihuKXt2YXIgcj10LmVudHJ5O2Zvcih0LmVudHJ5PW51bGw7cjspe3ZhciBpPXIuY2FsbGJhY2s7ZS5wZW5kaW5nY2ItLSxpKG4pLHI9ci5uZXh0fWUuY29ya2VkUmVxdWVzdHNGcmVlP2UuY29ya2VkUmVxdWVzdHNGcmVlLm5leHQ9dDplLmNvcmtlZFJlcXVlc3RzRnJlZT10fX10LmV4cG9ydHM9czt2YXIgUz1lKCJwcm9jZXNzLW5leHRpY2stYXJncyIpLE89IW4uYnJvd3NlciYmWyJ2MC4xMCIsInYwLjkuIl0uaW5kZXhPZihuLnZlcnNpb24uc2xpY2UoMCw1KSk+LTE/c2V0SW1tZWRpYXRlOlM7cy5Xcml0YWJsZVN0YXRlPW87dmFyIFI9ZSgiY29yZS11dGlsLWlzIik7Ui5pbmhlcml0cz1lKCJpbmhlcml0cyIpO3ZhciBBLFQ9e2RlcHJlY2F0ZTplKCJ1dGlsLWRlcHJlY2F0ZSIpfTshZnVuY3Rpb24oKXt0cnl7QT1lKCJzdHJlYW0iKX1jYXRjaCh0KXt9ZmluYWxseXtBfHwoQT1lKCJldmVudHMiKS5FdmVudEVtaXR0ZXIpfX0oKTt2YXIgST1lKCJidWZmZXIiKS5CdWZmZXIsTD1lKCJidWZmZXItc2hpbXMiKTtSLmluaGVyaXRzKHMsQSk7dmFyIE47by5wcm90b3R5cGUuZ2V0QnVmZmVyPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPXRoaXMuYnVmZmVyZWRSZXF1ZXN0LHQ9W107ZTspdC5wdXNoKGUpLGU9ZS5uZXh0O3JldHVybiB0fSxmdW5jdGlvbigpe3RyeXtPYmplY3QuZGVmaW5lUHJvcGVydHkoby5wcm90b3R5cGUsImJ1ZmZlciIse2dldDpULmRlcHJlY2F0ZShmdW5jdGlvbigpe3JldHVybiB0aGlzLmdldEJ1ZmZlcigpfSwiX3dyaXRhYmxlU3RhdGUuYnVmZmVyIGlzIGRlcHJlY2F0ZWQuIFVzZSBfd3JpdGFibGVTdGF0ZS5nZXRCdWZmZXIgaW5zdGVhZC4iKX0pfWNhdGNoKGUpe319KCk7dmFyIE47cy5wcm90b3R5cGUucGlwZT1mdW5jdGlvbigpe3RoaXMuZW1pdCgiZXJyb3IiLG5ldyBFcnJvcigiQ2Fubm90IHBpcGUsIG5vdCByZWFkYWJsZSIpKX0scy5wcm90b3R5cGUud3JpdGU9ZnVuY3Rpb24oZSx0LG4pe3ZhciBpPXRoaXMuX3dyaXRhYmxlU3RhdGUsbz0hMTtyZXR1cm4iZnVuY3Rpb24iPT10eXBlb2YgdCYmKG49dCx0PW51bGwpLEkuaXNCdWZmZXIoZSk/dD0iYnVmZmVyIjp0fHwodD1pLmRlZmF1bHRFbmNvZGluZyksImZ1bmN0aW9uIiE9dHlwZW9mIG4mJihuPXIpLGkuZW5kZWQ/YSh0aGlzLG4pOnUodGhpcyxpLGUsbikmJihpLnBlbmRpbmdjYisrLG89Yyh0aGlzLGksZSx0LG4pKSxvfSxzLnByb3RvdHlwZS5jb3JrPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fd3JpdGFibGVTdGF0ZTtlLmNvcmtlZCsrfSxzLnByb3RvdHlwZS51bmNvcms9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLl93cml0YWJsZVN0YXRlO2UuY29ya2VkJiYoZS5jb3JrZWQtLSxlLndyaXRpbmd8fGUuY29ya2VkfHxlLmZpbmlzaGVkfHxlLmJ1ZmZlclByb2Nlc3Npbmd8fCFlLmJ1ZmZlcmVkUmVxdWVzdHx8Xyh0aGlzLGUpKX0scy5wcm90b3R5cGUuc2V0RGVmYXVsdEVuY29kaW5nPWZ1bmN0aW9uKGUpe2lmKCJzdHJpbmciPT10eXBlb2YgZSYmKGU9ZS50b0xvd2VyQ2FzZSgpKSwhKFsiaGV4IiwidXRmOCIsInV0Zi04IiwiYXNjaWkiLCJiaW5hcnkiLCJiYXNlNjQiLCJ1Y3MyIiwidWNzLTIiLCJ1dGYxNmxlIiwidXRmLTE2bGUiLCJyYXciXS5pbmRleE9mKChlKyIiKS50b0xvd2VyQ2FzZSgpKT4tMSkpdGhyb3cgbmV3IFR5cGVFcnJvcigiVW5rbm93biBlbmNvZGluZzogIitlKTtyZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5kZWZhdWx0RW5jb2Rpbmc9ZSx0aGlzfSxzLnByb3RvdHlwZS5fd3JpdGU9ZnVuY3Rpb24oZSx0LG4pe24obmV3IEVycm9yKCJub3QgaW1wbGVtZW50ZWQiKSl9LHMucHJvdG90eXBlLl93cml0ZXY9bnVsbCxzLnByb3RvdHlwZS5lbmQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXRoaXMuX3dyaXRhYmxlU3RhdGU7ImZ1bmN0aW9uIj09dHlwZW9mIGU/KG49ZSxlPW51bGwsdD1udWxsKToiZnVuY3Rpb24iPT10eXBlb2YgdCYmKG49dCx0PW51bGwpLG51bGwhPT1lJiZ2b2lkIDAhPT1lJiZ0aGlzLndyaXRlKGUsdCksci5jb3JrZWQmJihyLmNvcmtlZD0xLHRoaXMudW5jb3JrKCkpLHIuZW5kaW5nfHxyLmZpbmlzaGVkfHx3KHRoaXMscixuKX19KS5jYWxsKHRoaXMsZSgiX3Byb2Nlc3MiKSl9LHsiLi9fc3RyZWFtX2R1cGxleCI6MjcsX3Byb2Nlc3M6MjUsYnVmZmVyOjcsImJ1ZmZlci1zaGltcyI6NiwiY29yZS11dGlsLWlzIjoxMSxldmVudHM6MTIsaW5oZXJpdHM6MTksInByb2Nlc3MtbmV4dGljay1hcmdzIjoyNCwidXRpbC1kZXByZWNhdGUiOjQyfV0sMzI6W2Z1bmN0aW9uKGUsdCxuKXt0LmV4cG9ydHM9ZSgiLi9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcyIpfSx7Ii4vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMiOjI4fV0sMzM6W2Z1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24ocil7dmFyIGk9ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIGUoInN0cmVhbSIpfWNhdGNoKHQpe319KCk7bj10LmV4cG9ydHM9ZSgiLi9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcyIpLG4uU3RyZWFtPWl8fG4sbi5SZWFkYWJsZT1uLG4uV3JpdGFibGU9ZSgiLi9saWIvX3N0cmVhbV93cml0YWJsZS5qcyIpLG4uRHVwbGV4PWUoIi4vbGliL19zdHJlYW1fZHVwbGV4LmpzIiksbi5UcmFuc2Zvcm09ZSgiLi9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMiKSxuLlBhc3NUaHJvdWdoPWUoIi4vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMiKSwhci5icm93c2VyJiYiZGlzYWJsZSI9PT1yLmVudi5SRUFEQUJMRV9TVFJFQU0mJmkmJih0LmV4cG9ydHM9aSl9KS5jYWxsKHRoaXMsZSgiX3Byb2Nlc3MiKSl9LHsiLi9saWIvX3N0cmVhbV9kdXBsZXguanMiOjI3LCIuL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzIjoyOCwiLi9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcyI6MjksIi4vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzIjozMCwiLi9saWIvX3N0cmVhbV93cml0YWJsZS5qcyI6MzEsX3Byb2Nlc3M6MjV9XSwzNDpbZnVuY3Rpb24oZSx0LG4pe3QuZXhwb3J0cz1lKCIuL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcyIpfSx7Ii4vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzIjozMH1dLDM1OltmdW5jdGlvbihlLHQsbil7dC5leHBvcnRzPWUoIi4vbGliL19zdHJlYW1fd3JpdGFibGUuanMiKX0seyIuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzIjozMX1dLDM2OltmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIG4oKXtmdW5jdGlvbiB0KGMpe2MmJiFhJiYoYT1jKTtmb3IodmFyIGw9YXJndW1lbnRzLmxlbmd0aCxoPTE7aDxsO2grKyl2b2lkIDAhPT1hcmd1bWVudHNbaF0mJihzW2gtMV09KHNbaC0xXXx8W10pLmNvbmNhdChhcmd1bWVudHNbaF0pKTtpZihyLmxlbmd0aD51KXt2YXIgcD1yLnNsaWNlKHUpO2YrPShyLmxlbmd0aC11KSpvLHU9ci5sZW5ndGgsZS5uZXh0VGljayhmdW5jdGlvbigpe3AuZm9yRWFjaChmdW5jdGlvbihlKXtuLmZvckVhY2goZnVuY3Rpb24obil7bihlLHQpfSl9KX0pfTA9PT0tLWYmJmkuYXBwbHkobnVsbCxbYV0uY29uY2F0KHMpKX12YXIgbj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLHI9bi5zaGlmdCgpfHxbXSxpPW4ucG9wKCk7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIGkpdGhyb3cgbmV3IEVycm9yKCJObyBjYWxsYmFjayBwcm92aWRlZCB0byBhc3luY01hcCIpO2lmKCFyKXJldHVybiBpKG51bGwsW10pO0FycmF5LmlzQXJyYXkocil8fChyPVtyXSk7dmFyIG89bi5sZW5ndGgscz1bXSxhPW51bGwsdT1yLmxlbmd0aCxmPXUqbztyZXR1cm4gZj92b2lkIHIuZm9yRWFjaChmdW5jdGlvbihlKXtuLmZvckVhY2goZnVuY3Rpb24obil7bihlLHQpfSl9KTppKG51bGwsW10pfXQuZXhwb3J0cz1ufSkuY2FsbCh0aGlzLGUoIl9wcm9jZXNzIikpfSx7X3Byb2Nlc3M6MjV9XSwzNzpbZnVuY3Rpb24oZSx0LG4pe2Z1bmN0aW9uIHIoKXt2YXIgZSx0PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyksbj1udWxsO3JldHVybiJvYmplY3QiPT10eXBlb2YgdFswXT8obj10LnNoaWZ0KCksZT10LnNoaWZ0KCksInN0cmluZyI9PXR5cGVvZiBlJiYoZT1uW2VdKSk6ZT10LnNoaWZ0KCksZnVuY3Rpb24ocil7ZS5hcHBseShuLHQuY29uY2F0KHIpKX19dC5leHBvcnRzPXJ9LHt9XSwzODpbZnVuY3Rpb24oZSx0LG4pe2Z1bmN0aW9uIHIoZSx0KXt2YXIgbj1bXTshZnVuY3Rpb24gbyhzLGEpe3JldHVybiBzPj1hP3QobnVsbCxuKTooQXJyYXkuaXNBcnJheShlW3NdKSYmKGVbc109aS5hcHBseShudWxsLGVbc10ubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlPT09ci5maXJzdD9uWzBdOmU9PT1yLmxhc3Q/bltuLmxlbmd0aC0xXTplfSkpKSxlW3NdP3ZvaWQgZVtzXShmdW5jdGlvbihlLHIpe3JldHVybiBlP3QoZSxuKToodm9pZCAwIT09ciYmKG49bi5jb25jYXQocikpLHZvaWQgbyhzKzEsYSkpfSk6byhzKzEsYSkpfSgwLGUubGVuZ3RoKX10LmV4cG9ydHM9cjt2YXIgaT1lKCIuL2JpbmQtYWN0b3IuanMiKTtyLmZpcnN0PXt9LHIubGFzdD17fX0seyIuL2JpbmQtYWN0b3IuanMiOjM3fV0sMzk6W2Z1bmN0aW9uKGUsdCxuKXtuLmFzeW5jTWFwPWUoIi4vYXN5bmMtbWFwIiksbi5iaW5kQWN0b3I9ZSgiLi9iaW5kLWFjdG9yIiksbi5jaGFpbj1lKCIuL2NoYWluIil9LHsiLi9hc3luYy1tYXAiOjM2LCIuL2JpbmQtYWN0b3IiOjM3LCIuL2NoYWluIjozOH1dLDQwOltmdW5jdGlvbihlLHQsbil7ZnVuY3Rpb24gcigpe2kuY2FsbCh0aGlzKX10LmV4cG9ydHM9cjt2YXIgaT1lKCJldmVudHMiKS5FdmVudEVtaXR0ZXIsbz1lKCJpbmhlcml0cyIpO28ocixpKSxyLlJlYWRhYmxlPWUoInJlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS5qcyIpLHIuV3JpdGFibGU9ZSgicmVhZGFibGUtc3RyZWFtL3dyaXRhYmxlLmpzIiksci5EdXBsZXg9ZSgicmVhZGFibGUtc3RyZWFtL2R1cGxleC5qcyIpLHIuVHJhbnNmb3JtPWUoInJlYWRhYmxlLXN0cmVhbS90cmFuc2Zvcm0uanMiKSxyLlBhc3NUaHJvdWdoPWUoInJlYWRhYmxlLXN0cmVhbS9wYXNzdGhyb3VnaC5qcyIpLHIuU3RyZWFtPXIsci5wcm90b3R5cGUucGlwZT1mdW5jdGlvbihlLHQpe2Z1bmN0aW9uIG4odCl7ZS53cml0YWJsZSYmITE9PT1lLndyaXRlKHQpJiZmLnBhdXNlJiZmLnBhdXNlKCl9ZnVuY3Rpb24gcigpe2YucmVhZGFibGUmJmYucmVzdW1lJiZmLnJlc3VtZSgpfWZ1bmN0aW9uIG8oKXtjfHwoYz0hMCxlLmVuZCgpKX1mdW5jdGlvbiBzKCl7Y3x8KGM9ITAsImZ1bmN0aW9uIj09dHlwZW9mIGUuZGVzdHJveSYmZS5kZXN0cm95KCkpfWZ1bmN0aW9uIGEoZSl7aWYodSgpLDA9PT1pLmxpc3RlbmVyQ291bnQodGhpcywiZXJyb3IiKSl0aHJvdyBlfWZ1bmN0aW9uIHUoKXtmLnJlbW92ZUxpc3RlbmVyKCJkYXRhIixuKSxlLnJlbW92ZUxpc3RlbmVyKCJkcmFpbiIsciksZi5yZW1vdmVMaXN0ZW5lcigiZW5kIixvKSxmLnJlbW92ZUxpc3RlbmVyKCJjbG9zZSIscyksZi5yZW1vdmVMaXN0ZW5lcigiZXJyb3IiLGEpLGUucmVtb3ZlTGlzdGVuZXIoImVycm9yIixhKSxmLnJlbW92ZUxpc3RlbmVyKCJlbmQiLHUpLGYucmVtb3ZlTGlzdGVuZXIoImNsb3NlIix1KSxlLnJlbW92ZUxpc3RlbmVyKCJjbG9zZSIsdSl9dmFyIGY9dGhpcztmLm9uKCJkYXRhIixuKSxlLm9uKCJkcmFpbiIsciksZS5faXNTdGRpb3x8dCYmdC5lbmQ9PT0hMXx8KGYub24oImVuZCIsbyksZi5vbigiY2xvc2UiLHMpKTt2YXIgYz0hMTtyZXR1cm4gZi5vbigiZXJyb3IiLGEpLGUub24oImVycm9yIixhKSxmLm9uKCJlbmQiLHUpLGYub24oImNsb3NlIix1KSxlLm9uKCJjbG9zZSIsdSksZS5lbWl0KCJwaXBlIixmKSxlfX0se2V2ZW50czoxMixpbmhlcml0czoxOSwicmVhZGFibGUtc3RyZWFtL2R1cGxleC5qcyI6MjYsInJlYWRhYmxlLXN0cmVhbS9wYXNzdGhyb3VnaC5qcyI6MzIsInJlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS5qcyI6MzMsInJlYWRhYmxlLXN0cmVhbS90cmFuc2Zvcm0uanMiOjM0LCJyZWFkYWJsZS1zdHJlYW0vd3JpdGFibGUuanMiOjM1fV0sNDE6W2Z1bmN0aW9uKGUsdCxuKXtmdW5jdGlvbiByKGUpe2lmKGUmJiF1KGUpKXRocm93IG5ldyBFcnJvcigiVW5rbm93biBlbmNvZGluZzogIitlKX1mdW5jdGlvbiBpKGUpe3JldHVybiBlLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpfWZ1bmN0aW9uIG8oZSl7dGhpcy5jaGFyUmVjZWl2ZWQ9ZS5sZW5ndGglMix0aGlzLmNoYXJMZW5ndGg9dGhpcy5jaGFyUmVjZWl2ZWQ/MjowfWZ1bmN0aW9uIHMoZSl7dGhpcy5jaGFyUmVjZWl2ZWQ9ZS5sZW5ndGglMyx0aGlzLmNoYXJMZW5ndGg9dGhpcy5jaGFyUmVjZWl2ZWQ/MzowfXZhciBhPWUoImJ1ZmZlciIpLkJ1ZmZlcix1PWEuaXNFbmNvZGluZ3x8ZnVuY3Rpb24oZSl7c3dpdGNoKGUmJmUudG9Mb3dlckNhc2UoKSl7Y2FzZSJoZXgiOmNhc2UidXRmOCI6Y2FzZSJ1dGYtOCI6Y2FzZSJhc2NpaSI6Y2FzZSJiaW5hcnkiOmNhc2UiYmFzZTY0IjpjYXNlInVjczIiOmNhc2UidWNzLTIiOmNhc2UidXRmMTZsZSI6Y2FzZSJ1dGYtMTZsZSI6Y2FzZSJyYXciOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fSxmPW4uU3RyaW5nRGVjb2Rlcj1mdW5jdGlvbihlKXtzd2l0Y2godGhpcy5lbmNvZGluZz0oZXx8InV0ZjgiKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1stX10vLCIiKSxyKGUpLHRoaXMuZW5jb2Rpbmcpe2Nhc2UidXRmOCI6dGhpcy5zdXJyb2dhdGVTaXplPTM7YnJlYWs7Y2FzZSJ1Y3MyIjpjYXNlInV0ZjE2bGUiOnRoaXMuc3Vycm9nYXRlU2l6ZT0yLHRoaXMuZGV0ZWN0SW5jb21wbGV0ZUNoYXI9bzticmVhaztjYXNlImJhc2U2NCI6dGhpcy5zdXJyb2dhdGVTaXplPTMsdGhpcy5kZXRlY3RJbmNvbXBsZXRlQ2hhcj1zO2JyZWFrO2RlZmF1bHQ6cmV0dXJuIHZvaWQodGhpcy53cml0ZT1pKX10aGlzLmNoYXJCdWZmZXI9bmV3IGEoNiksdGhpcy5jaGFyUmVjZWl2ZWQ9MCx0aGlzLmNoYXJMZW5ndGg9MH07Zi5wcm90b3R5cGUud3JpdGU9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PSIiO3RoaXMuY2hhckxlbmd0aDspe3ZhciBuPWUubGVuZ3RoPj10aGlzLmNoYXJMZW5ndGgtdGhpcy5jaGFyUmVjZWl2ZWQ/dGhpcy5jaGFyTGVuZ3RoLXRoaXMuY2hhclJlY2VpdmVkOmUubGVuZ3RoO2lmKGUuY29weSh0aGlzLmNoYXJCdWZmZXIsdGhpcy5jaGFyUmVjZWl2ZWQsMCxuKSx0aGlzLmNoYXJSZWNlaXZlZCs9bix0aGlzLmNoYXJSZWNlaXZlZDx0aGlzLmNoYXJMZW5ndGgpcmV0dXJuIiI7ZT1lLnNsaWNlKG4sZS5sZW5ndGgpLHQ9dGhpcy5jaGFyQnVmZmVyLnNsaWNlKDAsdGhpcy5jaGFyTGVuZ3RoKS50b1N0cmluZyh0aGlzLmVuY29kaW5nKTt2YXIgcj10LmNoYXJDb2RlQXQodC5sZW5ndGgtMSk7aWYoIShyPj01NTI5NiYmcjw9NTYzMTkpKXtpZih0aGlzLmNoYXJSZWNlaXZlZD10aGlzLmNoYXJMZW5ndGg9MCwwPT09ZS5sZW5ndGgpcmV0dXJuIHQ7YnJlYWt9dGhpcy5jaGFyTGVuZ3RoKz10aGlzLnN1cnJvZ2F0ZVNpemUsdD0iIn10aGlzLmRldGVjdEluY29tcGxldGVDaGFyKGUpO3ZhciBpPWUubGVuZ3RoO3RoaXMuY2hhckxlbmd0aCYmKGUuY29weSh0aGlzLmNoYXJCdWZmZXIsMCxlLmxlbmd0aC10aGlzLmNoYXJSZWNlaXZlZCxpKSxpLT10aGlzLmNoYXJSZWNlaXZlZCksdCs9ZS50b1N0cmluZyh0aGlzLmVuY29kaW5nLDAsaSk7dmFyIGk9dC5sZW5ndGgtMSxyPXQuY2hhckNvZGVBdChpKTtpZihyPj01NTI5NiYmcjw9NTYzMTkpe3ZhciBvPXRoaXMuc3Vycm9nYXRlU2l6ZTtyZXR1cm4gdGhpcy5jaGFyTGVuZ3RoKz1vLHRoaXMuY2hhclJlY2VpdmVkKz1vLHRoaXMuY2hhckJ1ZmZlci5jb3B5KHRoaXMuY2hhckJ1ZmZlcixvLDAsbyksZS5jb3B5KHRoaXMuY2hhckJ1ZmZlciwwLDAsbyksdC5zdWJzdHJpbmcoMCxpKX1yZXR1cm4gdH0sZi5wcm90b3R5cGUuZGV0ZWN0SW5jb21wbGV0ZUNoYXI9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUubGVuZ3RoPj0zPzM6ZS5sZW5ndGg7dD4wO3QtLSl7dmFyIG49ZVtlLmxlbmd0aC10XTtpZigxPT10JiZuPj41PT02KXt0aGlzLmNoYXJMZW5ndGg9MjticmVha31pZih0PD0yJiZuPj40PT0xNCl7dGhpcy5jaGFyTGVuZ3RoPTM7YnJlYWt9aWYodDw9MyYmbj4+Mz09MzApe3RoaXMuY2hhckxlbmd0aD00O2JyZWFrfX10aGlzLmNoYXJSZWNlaXZlZD10fSxmLnByb3RvdHlwZS5lbmQ9ZnVuY3Rpb24oZSl7dmFyIHQ9IiI7aWYoZSYmZS5sZW5ndGgmJih0PXRoaXMud3JpdGUoZSkpLHRoaXMuY2hhclJlY2VpdmVkKXt2YXIgbj10aGlzLmNoYXJSZWNlaXZlZCxyPXRoaXMuY2hhckJ1ZmZlcixpPXRoaXMuZW5jb2Rpbmc7dCs9ci5zbGljZSgwLG4pLnRvU3RyaW5nKGkpfXJldHVybiB0fX0se2J1ZmZlcjo3fV0sNDI6W2Z1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24oZSl7ZnVuY3Rpb24gbihlLHQpe2Z1bmN0aW9uIG4oKXtpZighaSl7aWYocigidGhyb3dEZXByZWNhdGlvbiIpKXRocm93IG5ldyBFcnJvcih0KTtyKCJ0cmFjZURlcHJlY2F0aW9uIik/Y29uc29sZS50cmFjZSh0KTpjb25zb2xlLndhcm4odCksaT0hMH1yZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9aWYocigibm9EZXByZWNhdGlvbiIpKXJldHVybiBlO3ZhciBpPSExO3JldHVybiBufWZ1bmN0aW9uIHIodCl7dHJ5e2lmKCFlLmxvY2FsU3RvcmFnZSlyZXR1cm4hMX1jYXRjaChuKXtyZXR1cm4hMX12YXIgcj1lLmxvY2FsU3RvcmFnZVt0XTtyZXR1cm4gbnVsbCE9ciYmInRydWUiPT09U3RyaW5nKHIpLnRvTG93ZXJDYXNlKCl9dC5leHBvcnRzPW59KS5jYWxsKHRoaXMsInVuZGVmaW5lZCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOiJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZj9zZWxmOiJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHt9XSw0MzpbZnVuY3Rpb24oZSx0LG4pe3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZSYmIm9iamVjdCI9PXR5cGVvZiBlJiYiZnVuY3Rpb24iPT10eXBlb2YgZS5jb3B5JiYiZnVuY3Rpb24iPT10eXBlb2YgZS5maWxsJiYiZnVuY3Rpb24iPT10eXBlb2YgZS5yZWFkVUludDh9fSx7fV0sNDQ6W2Z1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24odCxyKXtmdW5jdGlvbiBpKGUsdCl7dmFyIHI9e3NlZW46W10sc3R5bGl6ZTpzfTtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD49MyYmKHIuZGVwdGg9YXJndW1lbnRzWzJdKSxhcmd1bWVudHMubGVuZ3RoPj00JiYoci5jb2xvcnM9YXJndW1lbnRzWzNdKSxnKHQpP3Iuc2hvd0hpZGRlbj10OnQmJm4uX2V4dGVuZChyLHQpLHcoci5zaG93SGlkZGVuKSYmKHIuc2hvd0hpZGRlbj0hMSksdyhyLmRlcHRoKSYmKHIuZGVwdGg9MiksdyhyLmNvbG9ycykmJihyLmNvbG9ycz0hMSksdyhyLmN1c3RvbUluc3BlY3QpJiYoci5jdXN0b21JbnNwZWN0PSEwKSxyLmNvbG9ycyYmKHIuc3R5bGl6ZT1vKSx1KHIsZSxyLmRlcHRoKX1mdW5jdGlvbiBvKGUsdCl7dmFyIG49aS5zdHlsZXNbdF07cmV0dXJuIG4/IhtbIitpLmNvbG9yc1tuXVswXSsibSIrZSsiG1siK2kuY29sb3JzW25dWzFdKyJtIjplfWZ1bmN0aW9uIHMoZSx0KXtyZXR1cm4gZX1mdW5jdGlvbiBhKGUpe3ZhciB0PXt9O3JldHVybiBlLmZvckVhY2goZnVuY3Rpb24oZSxuKXt0W2VdPSEwfSksdH1mdW5jdGlvbiB1KGUsdCxyKXtpZihlLmN1c3RvbUluc3BlY3QmJnQmJkEodC5pbnNwZWN0KSYmdC5pbnNwZWN0IT09bi5pbnNwZWN0JiYoIXQuY29uc3RydWN0b3J8fHQuY29uc3RydWN0b3IucHJvdG90eXBlIT09dCkpe3ZhciBpPXQuaW5zcGVjdChyLGUpO3JldHVybiBtKGkpfHwoaT11KGUsaSxyKSksaX12YXIgbz1mKGUsdCk7aWYobylyZXR1cm4gbzt2YXIgcz1PYmplY3Qua2V5cyh0KSxnPWEocyk7aWYoZS5zaG93SGlkZGVuJiYocz1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0KSksUih0KSYmKHMuaW5kZXhPZigibWVzc2FnZSIpPj0wfHxzLmluZGV4T2YoImRlc2NyaXB0aW9uIik+PTApKXJldHVybiBjKHQpO2lmKDA9PT1zLmxlbmd0aCl7aWYoQSh0KSl7dmFyIHk9dC5uYW1lPyI6ICIrdC5uYW1lOiIiO3JldHVybiBlLnN0eWxpemUoIltGdW5jdGlvbiIreSsiXSIsInNwZWNpYWwiKX1pZihiKHQpKXJldHVybiBlLnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpLCJyZWdleHAiKTtpZihPKHQpKXJldHVybiBlLnN0eWxpemUoRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KSwiZGF0ZSIpO2lmKFIodCkpcmV0dXJuIGModCl9dmFyIF89IiIsdj0hMSxFPVsieyIsIn0iXTtpZihkKHQpJiYodj0hMCxFPVsiWyIsIl0iXSksQSh0KSl7dmFyIHc9dC5uYW1lPyI6ICIrdC5uYW1lOiIiO189IiBbRnVuY3Rpb24iK3crIl0ifWlmKGIodCkmJihfPSIgIitSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCkpLE8odCkmJihfPSIgIitEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZy5jYWxsKHQpKSxSKHQpJiYoXz0iICIrYyh0KSksMD09PXMubGVuZ3RoJiYoIXZ8fDA9PXQubGVuZ3RoKSlyZXR1cm4gRVswXStfK0VbMV07aWYocjwwKXJldHVybiBiKHQpP2Uuc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCksInJlZ2V4cCIpOmUuc3R5bGl6ZSgiW09iamVjdF0iLCJzcGVjaWFsIik7ZS5zZWVuLnB1c2godCk7dmFyIFM7cmV0dXJuIFM9dj9sKGUsdCxyLGcscyk6cy5tYXAoZnVuY3Rpb24obil7cmV0dXJuIGgoZSx0LHIsZyxuLHYpfSksZS5zZWVuLnBvcCgpLHAoUyxfLEUpfWZ1bmN0aW9uIGYoZSx0KXtpZih3KHQpKXJldHVybiBlLnN0eWxpemUoInVuZGVmaW5lZCIsInVuZGVmaW5lZCIpO2lmKG0odCkpe3ZhciBuPSInIitKU09OLnN0cmluZ2lmeSh0KS5yZXBsYWNlKC9eInwiJC9nLCIiKS5yZXBsYWNlKC8nL2csIlxcJyIpLnJlcGxhY2UoL1xcIi9nLCciJykrIiciO3JldHVybiBlLnN0eWxpemUobiwic3RyaW5nIil9cmV0dXJuIHYodCk/ZS5zdHlsaXplKCIiK3QsIm51bWJlciIpOmcodCk/ZS5zdHlsaXplKCIiK3QsImJvb2xlYW4iKTp5KHQpP2Uuc3R5bGl6ZSgibnVsbCIsIm51bGwiKTp2b2lkIDB9ZnVuY3Rpb24gYyhlKXtyZXR1cm4iWyIrRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkrIl0ifWZ1bmN0aW9uIGwoZSx0LG4scixpKXtmb3IodmFyIG89W10scz0wLGE9dC5sZW5ndGg7czxhOysrcylQKHQsU3RyaW5nKHMpKT9vLnB1c2goaChlLHQsbixyLFN0cmluZyhzKSwhMCkpOm8ucHVzaCgiIik7cmV0dXJuIGkuZm9yRWFjaChmdW5jdGlvbihpKXtpLm1hdGNoKC9eXGQrJC8pfHxvLnB1c2goaChlLHQsbixyLGksITApKX0pLG99ZnVuY3Rpb24gaChlLHQsbixyLGksbyl7dmFyIHMsYSxmO2lmKGY9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LGkpfHx7dmFsdWU6dFtpXX0sZi5nZXQ/YT1mLnNldD9lLnN0eWxpemUoIltHZXR0ZXIvU2V0dGVyXSIsInNwZWNpYWwiKTplLnN0eWxpemUoIltHZXR0ZXJdIiwic3BlY2lhbCIpOmYuc2V0JiYoYT1lLnN0eWxpemUoIltTZXR0ZXJdIiwic3BlY2lhbCIpKSxQKHIsaSl8fChzPSJbIitpKyJdIiksYXx8KGUuc2Vlbi5pbmRleE9mKGYudmFsdWUpPDA/KGE9eShuKT91KGUsZi52YWx1ZSxudWxsKTp1KGUsZi52YWx1ZSxuLTEpLGEuaW5kZXhPZigiXG4iKT4tMSYmKGE9bz9hLnNwbGl0KCJcbiIpLm1hcChmdW5jdGlvbihlKXtyZXR1cm4iICAiK2V9KS5qb2luKCJcbiIpLnN1YnN0cigyKToiXG4iK2Euc3BsaXQoIlxuIikubWFwKGZ1bmN0aW9uKGUpe3JldHVybiIgICAiK2V9KS5qb2luKCJcbiIpKSk6YT1lLnN0eWxpemUoIltDaXJjdWxhcl0iLCJzcGVjaWFsIikpLHcocykpe2lmKG8mJmkubWF0Y2goL15cZCskLykpcmV0dXJuIGE7cz1KU09OLnN0cmluZ2lmeSgiIitpKSxzLm1hdGNoKC9eIihbYS16QS1aX11bYS16QS1aXzAtOV0qKSIkLyk/KHM9cy5zdWJzdHIoMSxzLmxlbmd0aC0yKSxzPWUuc3R5bGl6ZShzLCJuYW1lIikpOihzPXMucmVwbGFjZSgvJy9nLCJcXCciKS5yZXBsYWNlKC9cXCIvZywnIicpLnJlcGxhY2UoLyheInwiJCkvZywiJyIpLHM9ZS5zdHlsaXplKHMsInN0cmluZyIpKX1yZXR1cm4gcysiOiAiK2F9ZnVuY3Rpb24gcChlLHQsbil7dmFyIHI9MCxpPWUucmVkdWNlKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHIrKyx0LmluZGV4T2YoIlxuIik+PTAmJnIrKyxlK3QucmVwbGFjZSgvXHUwMDFiXFtcZFxkP20vZywiIikubGVuZ3RoKzF9LDApO3JldHVybiBpPjYwP25bMF0rKCIiPT09dD8iIjp0KyJcbiAiKSsiICIrZS5qb2luKCIsXG4gICIpKyIgIituWzFdOm5bMF0rdCsiICIrZS5qb2luKCIsICIpKyIgIituWzFdfWZ1bmN0aW9uIGQoZSl7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSl9ZnVuY3Rpb24gZyhlKXtyZXR1cm4iYm9vbGVhbiI9PXR5cGVvZiBlfWZ1bmN0aW9uIHkoZSl7cmV0dXJuIG51bGw9PT1lfWZ1bmN0aW9uIF8oZSl7cmV0dXJuIG51bGw9PWV9ZnVuY3Rpb24gdihlKXtyZXR1cm4ibnVtYmVyIj09dHlwZW9mIGV9ZnVuY3Rpb24gbShlKXtyZXR1cm4ic3RyaW5nIj09dHlwZW9mIGV9ZnVuY3Rpb24gRShlKXtyZXR1cm4ic3ltYm9sIj09dHlwZW9mIGV9ZnVuY3Rpb24gdyhlKXtyZXR1cm4gdm9pZCAwPT09ZX1mdW5jdGlvbiBiKGUpe3JldHVybiBTKGUpJiYiW29iamVjdCBSZWdFeHBdIj09PUkoZSl9ZnVuY3Rpb24gUyhlKXtyZXR1cm4ib2JqZWN0Ij09dHlwZW9mIGUmJm51bGwhPT1lfWZ1bmN0aW9uIE8oZSl7cmV0dXJuIFMoZSkmJiJbb2JqZWN0IERhdGVdIj09PUkoZSl9ZnVuY3Rpb24gUihlKXtyZXR1cm4gUyhlKSYmKCJbb2JqZWN0IEVycm9yXSI9PT1JKGUpfHxlIGluc3RhbmNlb2YgRXJyb3IpfWZ1bmN0aW9uIEEoZSl7cmV0dXJuImZ1bmN0aW9uIj09dHlwZW9mIGV9ZnVuY3Rpb24gVChlKXtyZXR1cm4gbnVsbD09PWV8fCJib29sZWFuIj09dHlwZW9mIGV8fCJudW1iZXIiPT10eXBlb2YgZXx8InN0cmluZyI9PXR5cGVvZiBlfHwic3ltYm9sIj09dHlwZW9mIGV8fCJ1bmRlZmluZWQiPT10eXBlb2YgZX1mdW5jdGlvbiBJKGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9ZnVuY3Rpb24gTChlKXtyZXR1cm4gZTwxMD8iMCIrZS50b1N0cmluZygxMCk6ZS50b1N0cmluZygxMCl9ZnVuY3Rpb24gTigpe3ZhciBlPW5ldyBEYXRlLHQ9W0woZS5nZXRIb3VycygpKSxMKGUuZ2V0TWludXRlcygpKSxMKGUuZ2V0U2Vjb25kcygpKV0uam9pbigiOiIpO3JldHVybltlLmdldERhdGUoKSxEW2UuZ2V0TW9udGgoKV0sdF0uam9pbigiICIpfWZ1bmN0aW9uIFAoZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9dmFyIEM9LyVbc2RqJV0vZztuLmZvcm1hdD1mdW5jdGlvbihlKXtpZighbShlKSl7Zm9yKHZhciB0PVtdLG49MDtuPGFyZ3VtZW50cy5sZW5ndGg7bisrKXQucHVzaChpKGFyZ3VtZW50c1tuXSkpO3JldHVybiB0LmpvaW4oIiAiKX1mb3IodmFyIG49MSxyPWFyZ3VtZW50cyxvPXIubGVuZ3RoLHM9U3RyaW5nKGUpLnJlcGxhY2UoQyxmdW5jdGlvbihlKXtpZigiJSUiPT09ZSlyZXR1cm4iJSI7aWYobj49bylyZXR1cm4gZTtzd2l0Y2goZSl7Y2FzZSIlcyI6cmV0dXJuIFN0cmluZyhyW24rK10pO2Nhc2UiJWQiOnJldHVybiBOdW1iZXIocltuKytdKTtjYXNlIiVqIjp0cnl7cmV0dXJuIEpTT04uc3RyaW5naWZ5KHJbbisrXSl9Y2F0Y2godCl7cmV0dXJuIltDaXJjdWxhcl0ifWRlZmF1bHQ6cmV0dXJuIGV9fSksYT1yW25dO248bzthPXJbKytuXSlzKz15KGEpfHwhUyhhKT8iICIrYToiICIraShhKTtyZXR1cm4gc30sbi5kZXByZWNhdGU9ZnVuY3Rpb24oZSxpKXtmdW5jdGlvbiBvKCl7aWYoIXMpe2lmKHQudGhyb3dEZXByZWNhdGlvbil0aHJvdyBuZXcgRXJyb3IoaSk7dC50cmFjZURlcHJlY2F0aW9uP2NvbnNvbGUudHJhY2UoaSk6Y29uc29sZS5lcnJvcihpKSxzPSEwfXJldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1pZih3KHIucHJvY2VzcykpcmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG4uZGVwcmVjYXRlKGUsaSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfTtpZih0Lm5vRGVwcmVjYXRpb249PT0hMClyZXR1cm4gZTt2YXIgcz0hMTtyZXR1cm4gb307dmFyIE0seD17fTtuLmRlYnVnbG9nPWZ1bmN0aW9uKGUpe2lmKHcoTSkmJihNPXQuZW52Lk5PREVfREVCVUd8fCIiKSxlPWUudG9VcHBlckNhc2UoKSwheFtlXSlpZihuZXcgUmVnRXhwKCJcXGIiK2UrIlxcYiIsImkiKS50ZXN0KE0pKXt2YXIgcj10LnBpZDt4W2VdPWZ1bmN0aW9uKCl7dmFyIHQ9bi5mb3JtYXQuYXBwbHkobixhcmd1bWVudHMpO2NvbnNvbGUuZXJyb3IoIiVzICVkOiAlcyIsZSxyLHQpfX1lbHNlIHhbZV09ZnVuY3Rpb24oKXt9O3JldHVybiB4W2VdfSxuLmluc3BlY3Q9aSxpLmNvbG9ycz17Ym9sZDpbMSwyMl0saXRhbGljOlszLDIzXSx1bmRlcmxpbmU6WzQsMjRdLGludmVyc2U6WzcsMjddLHdoaXRlOlszNywzOV0sZ3JleTpbOTAsMzldLGJsYWNrOlszMCwzOV0sYmx1ZTpbMzQsMzldLGN5YW46WzM2LDM5XSxncmVlbjpbMzIsMzldLG1hZ2VudGE6WzM1LDM5XSxyZWQ6WzMxLDM5XSx5ZWxsb3c6WzMzLDM5XX0saS5zdHlsZXM9e3NwZWNpYWw6ImN5YW4iLG51bWJlcjoieWVsbG93IiwiYm9vbGVhbiI6InllbGxvdyIsdW5kZWZpbmVkOiJncmV5IiwibnVsbCI6ImJvbGQiLHN0cmluZzoiZ3JlZW4iLGRhdGU6Im1hZ2VudGEiLHJlZ2V4cDoicmVkIn0sbi5pc0FycmF5PWQsbi5pc0Jvb2xlYW49ZyxuLmlzTnVsbD15LG4uaXNOdWxsT3JVbmRlZmluZWQ9XyxuLmlzTnVtYmVyPXYsbi5pc1N0cmluZz1tLG4uaXNTeW1ib2w9RSxuLmlzVW5kZWZpbmVkPXcsbi5pc1JlZ0V4cD1iLG4uaXNPYmplY3Q9UyxuLmlzRGF0ZT1PLG4uaXNFcnJvcj1SLG4uaXNGdW5jdGlvbj1BLG4uaXNQcmltaXRpdmU9VCxuLmlzQnVmZmVyPWUoIi4vc3VwcG9ydC9pc0J1ZmZlciIpO3ZhciBEPVsiSmFuIiwiRmViIiwiTWFyIiwiQXByIiwiTWF5IiwiSnVuIiwiSnVsIiwiQXVnIiwiU2VwIiwiT2N0IiwiTm92IiwiRGVjIl07bi5sb2c9ZnVuY3Rpb24oKXtjb25zb2xlLmxvZygiJXMgLSAlcyIsTigpLG4uZm9ybWF0LmFwcGx5KG4sYXJndW1lbnRzKSl9LG4uaW5oZXJpdHM9ZSgiaW5oZXJpdHMiKSxuLl9leHRlbmQ9ZnVuY3Rpb24oZSx0KXtpZighdHx8IVModCkpcmV0dXJuIGU7Zm9yKHZhciBuPU9iamVjdC5rZXlzKHQpLHI9bi5sZW5ndGg7ci0tOyllW25bcl1dPXRbbltyXV07cmV0dXJuIGV9fSkuY2FsbCh0aGlzLGUoIl9wcm9jZXNzIiksInVuZGVmaW5lZCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOiJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZj9zZWxmOiJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHsiLi9zdXBwb3J0L2lzQnVmZmVyIjo0MyxfcHJvY2VzczoyNSxpbmhlcml0czoxOX1dLDQ1OltmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKG4scil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIGkoKXtmb3IodmFyIGU9bmV3IGEsdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDsrK3QpZS5oYXNoKCIiK2FyZ3VtZW50c1t0XSk7cmV0dXJuIGUucmVzdWx0KCl9dmFyIG89ZSgiZ3JhY2VmdWwtZnMiKSxzPWUoInNsaWRlIikuY2hhaW4sYT1lKCJpbXVybXVyaGFzaCIpLHU9MCxmPWZ1bmN0aW9uKGUpe3JldHVybiBlKyIuIitpKHIsbi5waWQsKyt1KX07dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuLHIpe24gaW5zdGFuY2VvZiBGdW5jdGlvbiYmKHI9bixuPW51bGwpLG58fChuPXt9KTt2YXIgaT1mKGUpO3MoW1tvLG8ud3JpdGVGaWxlLGksdCxuXSxuLmNob3duJiZbbyxvLmNob3duLGksbi5jaG93bi51aWQsbi5jaG93bi5naWRdLFtvLG8ucmVuYW1lLGksZV1dLGZ1bmN0aW9uKGUpe2U/by51bmxpbmsoaSxmdW5jdGlvbigpe3IoZSl9KTpyKCl9KX0sdC5leHBvcnRzLnN5bmM9ZnVuY3Rpb24oZSx0LG4pe258fChuPXt9KTt2YXIgcj1mKGUpO3RyeXtvLndyaXRlRmlsZVN5bmMocix0LG4pLG4uY2hvd24mJm8uY2hvd25TeW5jKHIsbi5jaG93bi51aWQsbi5jaG93bi5naWQpLG8ucmVuYW1lU3luYyhyLGUpfWNhdGNoKGkpe3RyeXtvLnVubGlua1N5bmMocil9Y2F0Y2gocyl7fXRocm93IGl9fX0pLmNhbGwodGhpcyxlKCJfcHJvY2VzcyIpLCIvbm9kZV9tb2R1bGVzL3dyaXRlLWZpbGUtYXRvbWljL2luZGV4LmpzIil9LHtfcHJvY2VzczoyNSwiZ3JhY2VmdWwtZnMiOjE0LGltdXJtdXJoYXNoOjE4LHNsaWRlOjM5fV0sNDY6W2Z1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6eyJkZWZhdWx0IjplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkobiwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIGk9ZSgiYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5Iiksbz1yKGkpLHM9ZSgiLi91bml2ZXJzYWwtbG9jYWxzdG9yYWdlIiksYT1yKHMpLHU9e3NldDpmdW5jdGlvbihlLHQsbil7YVsiZGVmYXVsdCJdLnNldEl0ZW0oZSwoMCxvWyJkZWZhdWx0Il0pKHt2ZXJzaW9uOnQsdmFsdWU6bn0pKX0sZ2V0OmZ1bmN0aW9uKGUpe3RyeXtyZXR1cm4gSlNPTi5wYXJzZShhWyJkZWZhdWx0Il0uZ2V0SXRlbShlKSkudmFsdWV9Y2F0Y2godCl7fX0sZ2V0VmVyc2lvbjpmdW5jdGlvbihlKXt0cnl7cmV0dXJuIEpTT04ucGFyc2UoYVsiZGVmYXVsdCJdLmdldEl0ZW0oZSkpLnZlcnNpb259Y2F0Y2godCl7fX0sImRlbGV0ZSI6ZnVuY3Rpb24oZSl7YVsiZGVmYXVsdCJdLnJlbW92ZUl0ZW0oZSl9fTtuWyJkZWZhdWx0Il09dSx0LmV4cG9ydHM9blsiZGVmYXVsdCJdfSx7Ii4vdW5pdmVyc2FsLWxvY2Fsc3RvcmFnZSI6NDgsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeSI6MX1dLDQ3OltmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOnsiZGVmYXVsdCI6ZX19dmFyIGk9ZSgiYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5Iiksbz1yKGkpOyJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93LmxvY2FsU3RvcmFnZSYmInVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3cuc2Vzc2lvblN0b3JhZ2V8fGZ1bmN0aW9uKCl7dmFyIGU9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHQsbil7dmFyIHIsaTtuPyhyPW5ldyBEYXRlLHIuc2V0VGltZShyLmdldFRpbWUoKSsyNCpuKjYwKjYwKjFlMyksaT0iOyBleHBpcmVzPSIrci50b0dNVFN0cmluZygpKTppPSIiLGRvY3VtZW50LmNvb2tpZT1lKyI9Iit0K2krIjsgcGF0aD0vIn1mdW5jdGlvbiBuKGUpe3ZhciB0LG4scj1lKyI9IixpPWRvY3VtZW50LmNvb2tpZS5zcGxpdCgiOyIpO2Zvcih0PTA7dDxpLmxlbmd0aDt0Kyspe2ZvcihuPWlbdF07IiAiPT1uLmNoYXJBdCgwKTspbj1uLnN1YnN0cmluZygxLG4ubGVuZ3RoKTtpZigwPT1uLmluZGV4T2YocikpcmV0dXJuIG4uc3Vic3RyaW5nKHIubGVuZ3RoLG4ubGVuZ3RoKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiByKG4pe249KDAsb1siZGVmYXVsdCJdKShuKSwic2Vzc2lvbiI9PWU/d2luZG93Lm5hbWU9bjp0KCJsb2NhbFN0b3JhZ2UiLG4sMzY1KX1mdW5jdGlvbiBpKCl7InNlc3Npb24iPT1lP3dpbmRvdy5uYW1lPSIiOnQoImxvY2FsU3RvcmFnZSIsIiIsMzY1KX1mdW5jdGlvbiBzKCl7dmFyIHQ9InNlc3Npb24iPT1lP3dpbmRvdy5uYW1lOm4oImxvY2FsU3RvcmFnZSIpO3JldHVybiB0P0pTT04ucGFyc2UodCk6e319dmFyIGE9cygpO3JldHVybntsZW5ndGg6MCxjbGVhcjpmdW5jdGlvbigpe2E9e30sdGhpcy5sZW5ndGg9MCxpKCl9LGdldEl0ZW06ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PWFbZV0/bnVsbDphW2VdfSxrZXk6ZnVuY3Rpb24oZSl7dmFyIHQ9MDtmb3IodmFyIG4gaW4gYSl7aWYodD09ZSlyZXR1cm4gbjt0Kyt9cmV0dXJuIG51bGx9LHJlbW92ZUl0ZW06ZnVuY3Rpb24oZSl7ZGVsZXRlIGFbZV0sdGhpcy5sZW5ndGgtLSxyKGEpfSxzZXRJdGVtOmZ1bmN0aW9uKGUsdCl7YVtlXT10KyIiLHRoaXMubGVuZ3RoKysscihhKX19fTsidW5kZWZpbmVkIj09dHlwZW9mIHdpbmRvdy5sb2NhbFN0b3JhZ2UmJih3aW5kb3cubG9jYWxTdG9yYWdlPW5ldyBlKCJsb2NhbCIpKSwidW5kZWZpbmVkIj09dHlwZW9mIHdpbmRvdy5zZXNzaW9uU3RvcmFnZSYmKHdpbmRvdy5zZXNzaW9uU3RvcmFnZT1uZXcgZSgic2Vzc2lvbiIpKX0oKX0seyJiYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnkiOjF9XSw0ODpbZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkobiwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIHI9dm9pZCAwO2lmKCJ1bmRlZmluZWQiPT10eXBlb2Ygd2luZG93KXt2YXIgaT1lKCJub2RlLWxvY2Fsc3RvcmFnZSIpLkxvY2FsU3RvcmFnZTtyPW5ldyBpKCIuL3Vscy1zY3JhdGNoIil9ZWxzZSByPSJ1bmRlZmluZWQiPT10eXBlb2Ygd2luZG93LmxvY2FsU3RvcmFnZXx8InVuZGVmaW5lZCI9PXR5cGVvZiB3aW5kb3cuc2Vzc2lvblN0b3JhZ2U/ZSgiLi9yZW0tbG9jYWxzdG9yYWdlIik6d2luZG93LmxvY2FsU3RvcmFnZTtuWyJkZWZhdWx0Il09cix0LmV4cG9ydHM9blsiZGVmYXVsdCJdfSx7Ii4vcmVtLWxvY2Fsc3RvcmFnZSI6NDcsIm5vZGUtbG9jYWxzdG9yYWdlIjoyMn1dfSx7fSxbNDZdKSg0Nil9KTsKCgp9KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gInVuZGVmaW5lZCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gInVuZGVmaW5lZCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIgPyB3aW5kb3cgOiB7fSkKCn0se31dLDQxNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8qKgoqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQoqIENvcHlyaWdodCAyMDE2IElORVNDLUlECiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMCiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYKKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0EKKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHCiogQ29weXJpZ2h0IDIwMTYgQXBpemVlCiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4KKgoqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwoqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKKgoqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCioKKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCioqLwoKLyoqCiogQGF1dGhvciBtaWNhZWxwZWRyb3NhQGdtYWlsLmNvbQoqIE1pbmltYWwgaW50ZXJmYWNlIGFuZCBpbXBsZW1lbnRhdGlvbiB0byBzZW5kIGFuZCByZWNlaXZlIG1lc3NhZ2VzLiBJdCBjYW4gYmUgcmV1c2VkIGluIG1hbnkgdHlwZSBvZiBjb21wb25lbnRzLgoqIENvbXBvbmVudHMgdGhhdCBuZWVkIGEgbWVzc2FnZSBzeXN0ZW0gc2hvdWxkIHJlY2VpdmUgdGhpcyBjbGFzcyBhcyBhIGRlcGVuZGVuY3kgb3IgZXh0ZW5kIGl0LgoqIEV4dGVuc2lvbnMgc2hvdWxkIGltcGxlbWVudCB0aGUgZm9sbG93aW5nIHByaXZhdGUgbWV0aG9kczogX29uUG9zdE1lc3NhZ2UgYW5kIF9yZWdpc3RlckV4dGVybmFsTGlzdGVuZXIKKi8KCnZhciBCdXMgPSBmdW5jdGlvbiAoKSB7CiAgLyogcHJpdmF0ZQogIF9tc2dJZDogbnVtYmVyOwogIF9zdWJzY3JpcHRpb25zOiA8dXJsOiBNc2dMaXN0ZW5lcltdPgogICBfcmVzcG9uc2VUaW1lT3V0OiBudW1iZXIKICBfcmVzcG9uc2VDYWxsYmFja3M6IDx1cmwraWQ6IChtc2cpID0+IHZvaWQ+CiAgICovCgogIGZ1bmN0aW9uIEJ1cygpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIEJ1cyk7CgogICAgdmFyIF90aGlzID0gdGhpczsKICAgIF90aGlzLl9tc2dJZCA9IDA7CiAgICBfdGhpcy5fc3Vic2NyaXB0aW9ucyA9IHt9OwoKICAgIF90aGlzLl9yZXNwb25zZVRpbWVPdXQgPSA1MDAwOyAvL2RlZmF1bHQgdG8gM3MKICAgIF90aGlzLl9yZXNwb25zZUNhbGxiYWNrcyA9IHt9OwoKICAgIF90aGlzLl9yZWdpc3RlckV4dGVybmFsTGlzdGVuZXIoKTsKICB9CgogIC8qKgogICogUmVnaXN0ZXIgbGlzdGVuZXIgdG8gcmVjZWl2ZSBtZXNzYWdlIHdoZW4gIm1zZy50byA9PT0gdXJsIi4KICAqIFNwZWNpYWwgdXJsICIqIiBmb3IgZGVmYXVsdCBsaXN0ZW5lciBpcyBhY2NlcHRlZCB0byBpbnRlcmNlcHQgYWxsIG1lc3NhZ2VzLgogICogQHBhcmFtIHtVUkx9IHVybCBBZGRyZXNzIHRvIGludGVyY2VwdCwgdGhhIGlzIGluIHRoZSBtZXNzYWdlICJ0byIKICAqIEBwYXJhbSB7TGlzdGVuZXJ9IGxpc3RlbmVyIGxpc3RlbmVyCiAgKiBAcmV0dXJuIHtNc2dMaXN0ZW5lcn0gaW5zdGFuY2Ugb2YgTXNnTGlzdGVuZXIKICAqLwoKCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoQnVzLCBbewogICAga2V5OiAnYWRkTGlzdGVuZXInLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHVybCwgbGlzdGVuZXIpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBpdGVtID0gbmV3IE1zZ0xpc3RlbmVyKF90aGlzLl9zdWJzY3JpcHRpb25zLCB1cmwsIGxpc3RlbmVyKTsKICAgICAgdmFyIGl0ZW1MaXN0ID0gX3RoaXMuX3N1YnNjcmlwdGlvbnNbdXJsXTsKICAgICAgaWYgKCFpdGVtTGlzdCkgewogICAgICAgIGl0ZW1MaXN0ID0gW107CiAgICAgICAgX3RoaXMuX3N1YnNjcmlwdGlvbnNbdXJsXSA9IGl0ZW1MaXN0OwogICAgICB9CgogICAgICBpdGVtTGlzdC5wdXNoKGl0ZW0pOwogICAgICByZXR1cm4gaXRlbTsKICAgIH0KCiAgICAvKioKICAgICAqIE1hbnVhbGx5IGFkZCBhIHJlc3BvbnNlIGxpc3RlbmVyLiBPbmx5IG9uZSBsaXN0ZW5lciBwZXIgbWVzc2FnZSBJRCBzaG91bGQgZXhpc3QuCiAgICAgKiBBVEVOVElPTiwgdGhlcmUgaXMgbm8gdGltZW91dCBmb3IgdGhpcyBsaXN0ZW5lci4KICAgICAqIFRoZSBsaXN0ZW5lciBzaG91bGQgYmUgcmVtb3ZlZCB3aXRoIGEgcmVtb3ZlUmVzcG9uc2VMaXN0ZW5lciwgZmFpbGluZyB0byBkbyB0aGlzIHdpbGwgcmVzdWx0IGluIGEgdW5yZWxlYXNlZCBtZW1vcnkgcHJvYmxlbS4KICAgICAqIEBwYXJhbSB7VVJMfSB1cmwgT3JpZ2luIGFkZHJlc3Mgb2YgdGhlIG1lc3NhZ2Ugc2VudCwgIm1zZy5mcm9tIi4KICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtc2dJZCBNZXNzYWdlIElEIHRoYXQgaXMgcmV0dXJuZWQgZnJvbSB0aGUgcG9zdE1lc3NhZ2UuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNwb25zZUxpc3RlbmVyIENhbGxiYWNrIGZ1bmN0aW9uIGZvciB0aGUgcmVzcG9uc2UKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdhZGRSZXNwb25zZUxpc3RlbmVyJywKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRSZXNwb25zZUxpc3RlbmVyKHVybCwgbXNnSWQsIHJlc3BvbnNlTGlzdGVuZXIpIHsKICAgICAgdGhpcy5fcmVzcG9uc2VDYWxsYmFja3NbdXJsICsgbXNnSWRdID0gcmVzcG9uc2VMaXN0ZW5lcjsKICAgIH0KCiAgICAvKioKICAgICAqIFJlbW92ZSB0aGUgcmVzcG9uc2UgbGlzdGVuZXIuCiAgICAgKiBAcGFyYW0ge1VSTH0gdXJsIE9yaWdpbiBhZGRyZXNzIG9mIHRoZSBtZXNzYWdlIHNlbnQsICJtc2cuZnJvbSIuCiAgICAgKiBAcGFyYW0ge251bWJlcn0gbXNnSWQgIE1lc3NhZ2UgSUQgdGhhdCBpcyByZXR1cm5lZCBmcm9tIHRoZSBwb3N0TWVzc2FnZQogICAgICovCgogIH0sIHsKICAgIGtleTogJ3JlbW92ZVJlc3BvbnNlTGlzdGVuZXInLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZVJlc3BvbnNlTGlzdGVuZXIodXJsLCBtc2dJZCkgewogICAgICBkZWxldGUgdGhpcy5fcmVzcG9uc2VDYWxsYmFja3NbdXJsICsgbXNnSWRdOwogICAgfQoKICAgIC8qKgogICAgICogUmVtb3ZlIGFsbCBleGlzdGVudCBsaXN0ZW5lcnMgZm9yIHRoZSBVUkwKICAgICAqIEBwYXJhbSAge1VSTH0gdXJsIEFkZHJlc3MgcmVnaXN0ZXJlZAogICAgICovCgogIH0sIHsKICAgIGtleTogJ3JlbW92ZUFsbExpc3RlbmVyc09mJywKICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnNPZih1cmwpIHsKICAgICAgZGVsZXRlIHRoaXMuX3N1YnNjcmlwdGlvbnNbdXJsXTsKICAgIH0KCiAgICAvKioKICAgICAqIEhlbHBlciBtZXRob2QgdG8gYmluZCBsaXN0ZW5lcnMgKGluIGJvdGggZGlyZWN0aW9ucykgaW50byBvdGhlciBNaW5pQnVzIHRhcmdldC4KICAgICAqIEBwYXJhbSAge1VSTH0gb3V0VXJsIE91dGJvdW5kIFVSTCwgcmVnaXN0ZXIgbGlzdGVuZXIgZm9yIHVybCBpbiBkaXJlY3Rpb24gInRoaXMgLT4gdGFyZ2V0IgogICAgICogQHBhcmFtICB7VVJMfSBpblVybCBJbmJvdW5kIFVSTCwgcmVnaXN0ZXIgbGlzdGVuZXIgZm9yIHVybCBpbiBkaXJlY3Rpb24gInRhcmdldCAtPiB0aGlzIgogICAgICogQHBhcmFtICB7TWluaUJ1c30gdGFyZ2V0IFRoZSBvdGhlciB0YXJnZXQgTWluaUJ1cwogICAgICogQHJldHVybiB7Qm91bmR9IGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZSBwcm9wZXJ0aWVzIFt0aGlzTGlzdGVuZXIsIHRhcmdldExpc3RlbmVyXSBhbmQgdGhlIHVuYmluZCBtZXRob2QuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAnYmluZCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gYmluZChvdXRVcmwsIGluVXJsLCB0YXJnZXQpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIHRoaXNMaXN0biA9IF90aGlzLmFkZExpc3RlbmVyKG91dFVybCwgZnVuY3Rpb24gKG1zZykgewogICAgICAgIHRhcmdldC5wb3N0TWVzc2FnZShtc2cpOwogICAgICB9KTsKCiAgICAgIHZhciB0YXJnZXRMaXN0biA9IHRhcmdldC5hZGRMaXN0ZW5lcihpblVybCwgZnVuY3Rpb24gKG1zZykgewogICAgICAgIF90aGlzLnBvc3RNZXNzYWdlKG1zZyk7CiAgICAgIH0pOwoKICAgICAgcmV0dXJuIHsKICAgICAgICB0aGlzTGlzdGVuZXI6IHRoaXNMaXN0biwKICAgICAgICB0YXJnZXRMaXN0ZW5lcjogdGFyZ2V0TGlzdG4sCiAgICAgICAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQoKSB7CiAgICAgICAgICBfdGhpczIudGhpc0xpc3RlbmVyLnJlbW92ZSgpOwogICAgICAgICAgX3RoaXMyLnRhcmdldExpc3RlbmVyLnJlbW92ZSgpOwogICAgICAgIH0KICAgICAgfTsKICAgIH0KCiAgICAvL3B1Ymxpc2ggb24gZGVmYXVsdCBsaXN0ZW5lcnMKCiAgfSwgewogICAga2V5OiAnX3B1Ymxpc2hPbkRlZmF1bHQnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9wdWJsaXNoT25EZWZhdWx0KG1zZykgewogICAgICAvL2lzIHRoZXJlIGFueSAiKiIgKGRlZmF1bHQpIGxpc3RlbmVycz8KICAgICAgdmFyIGl0ZW1MaXN0ID0gdGhpcy5fc3Vic2NyaXB0aW9uc1snKiddOwogICAgICBpZiAoaXRlbUxpc3QpIHsKICAgICAgICB0aGlzLl9wdWJsaXNoT24oaXRlbUxpc3QsIG1zZyk7CiAgICAgIH0KICAgIH0KCiAgICAvL3B1Ymxpc2ggb24gYSBzdWJzY3JpcHRpb24gbGlzdC4KCiAgfSwgewogICAga2V5OiAnX3B1Ymxpc2hPbicsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3B1Ymxpc2hPbihpdGVtTGlzdCwgbXNnKSB7CiAgICAgIGl0ZW1MaXN0LmZvckVhY2goZnVuY3Rpb24gKHN1YikgewogICAgICAgIHN1Yi5fY2FsbGJhY2sobXNnKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX3Jlc3BvbnNlQ2FsbGJhY2snLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9yZXNwb25zZUNhbGxiYWNrKGluTXNnLCByZXNwb25zZUNhbGxiYWNrKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAvL2F1dG9tYXRpYyBtYW5hZ2VtZW50IG9mIHJlc3BvbnNlIGhhbmRsZXJzCiAgICAgIGlmIChyZXNwb25zZUNhbGxiYWNrKSB7CiAgICAgICAgKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciByZXNwb25zZUlkID0gaW5Nc2cuZnJvbSArIGluTXNnLmlkOwogICAgICAgICAgX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3Jlc3BvbnNlSWRdID0gcmVzcG9uc2VDYWxsYmFjazsKCiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHJlc3BvbnNlRnVuID0gX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3Jlc3BvbnNlSWRdOwogICAgICAgICAgICBkZWxldGUgX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3Jlc3BvbnNlSWRdOwoKICAgICAgICAgICAgaWYgKHJlc3BvbnNlRnVuKSB7CiAgICAgICAgICAgICAgdmFyIGVycm9yTXNnID0gewogICAgICAgICAgICAgICAgaWQ6IGluTXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLAogICAgICAgICAgICAgICAgYm9keTogeyBjb2RlOiA0MDgsIGRlc2M6ICdSZXNwb25zZSB0aW1lb3V0IScsIHZhbHVlOiBpbk1zZyB9CiAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgcmVzcG9uc2VGdW4oZXJyb3JNc2cpOwogICAgICAgICAgICB9CiAgICAgICAgICB9LCBfdGhpcy5fcmVzcG9uc2VUaW1lT3V0KTsKICAgICAgICB9KSgpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAnX29uUmVzcG9uc2UnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9vblJlc3BvbnNlKG1zZykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgaWYgKG1zZy50eXBlID09PSAncmVzcG9uc2UnKSB7CiAgICAgICAgdmFyIHJlc3BvbnNlSWQgPSBtc2cudG8gKyBtc2cuaWQ7CiAgICAgICAgdmFyIHJlc3BvbnNlRnVuID0gX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3Jlc3BvbnNlSWRdOwoKICAgICAgICAvL2lmIGl0J3MgYSBwcm92aXNpb25hbCByZXNwb25zZSwgZG9uJ3QgZGVsZXRlIHJlc3BvbnNlIGxpc3RlbmVyCiAgICAgICAgaWYgKG1zZy5ib2R5LmNvZGUgPj0gMjAwKSB7CiAgICAgICAgICBkZWxldGUgX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3Jlc3BvbnNlSWRdOwogICAgICAgIH0KCiAgICAgICAgaWYgKHJlc3BvbnNlRnVuKSB7CiAgICAgICAgICByZXNwb25zZUZ1bihtc2cpOwogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgLy9yZWNlaXZlIG1lc3NhZ2VzIGZyb20gZXh0ZXJuYWwgaW50ZXJmYWNlCgogIH0sIHsKICAgIGtleTogJ19vbk1lc3NhZ2UnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9vbk1lc3NhZ2UobXNnKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBpZiAoIV90aGlzLl9vblJlc3BvbnNlKG1zZykpIHsKICAgICAgICB2YXIgaXRlbUxpc3QgPSBfdGhpcy5fc3Vic2NyaXB0aW9uc1ttc2cudG9dOwogICAgICAgIGlmIChpdGVtTGlzdCkgewogICAgICAgICAgX3RoaXMuX3B1Ymxpc2hPbihpdGVtTGlzdCwgbXNnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgX3RoaXMuX3B1Ymxpc2hPbkRlZmF1bHQobXNnKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICdfZ2VuSWQnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9nZW5JZChpbk1zZykgewogICAgICAvL1RPRE86IGhvdyBkbyB3ZSBtYW5hZ2UgbWVzc2FnZSBJRCdzPyBTaG91bGQgaXQgYmUgYSBnbG9iYWwgcnVudGltZSBjb3VudGVyLCBvciBwZXIgVVJMIGFkZHJlc3M/CiAgICAgIC8vR2xvYmFsIGNvdW50ZXIgd2lsbCBub3Qgd29yaywgYmVjYXVzZSB0aGVyZSB3aWxsIGJlIG11bHRpcGxlIE1pbmlCdXMgaW5zdGFuY2VzIQogICAgICAvL1BlciBVUkwsIGNhbiBiZSBhIGxvdCBvZiBkYXRhIHRvIG1haW50YWluIQogICAgICAvL01heWJlIGEgY291bnRlciBwZXIgTWluaUJ1cyBpbnN0YW5jZS4gVGhpcyBpcyB0aGUgYXNzdW1lZCBzb2x1dGlvbiBmb3Igbm93LgogICAgICBpZiAoIWluTXNnLmlkIHx8IGluTXNnLmlkID09PSAwKSB7CiAgICAgICAgdGhpcy5fbXNnSWQrKzsKICAgICAgICBpbk1zZy5pZCA9IHRoaXMuX21zZ0lkOwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAqIFNlbmQgbWVzc2FnZXMgdG8gbG9jYWwgbGlzdGVuZXJzLCBvciBpZiBub3QgZXhpc3RzIHRvIGV4dGVybmFsIGxpc3RlbmVycy4KICAgICogSXQncyBoYXMgYW4gb3B0aW9uYWwgbWVjaGFuaXNtIGZvciBhdXRvbWF0aWMgbWFuYWdlbWVudCBvZiByZXNwb25zZSBoYW5kbGVycy4KICAgICogVGhlIHJlc3BvbnNlIGhhbmRsZXIgd2lsbCBiZSB1bnJlZ2lzdGVyZWQgYWZ0ZXIgcmVjZWl2aW5nIHRoZSByZXNwb25zZSwgb3IgYWZ0ZXIgcmVzcG9uc2UgdGltZW91dCAoZGVmYXVsdCB0byAzcykuCiAgICAqIEBwYXJhbSAge01lc3NhZ2V9IG1zZyBNZXNzYWdlIHRvIHNlbmQuIE1lc3NhZ2UgSUQgaXMgYXV0b21hdGljYWxseSBhZGRlZCB0byB0aGUgbWVzc2FnZS4KICAgICogQHBhcmFtICB7RnVuY3Rpb259IHJlc3BvbnNlQ2FsbGJhY2sgT3B0aW9uYWwgcGFyYW1ldGVyLCBpZiB0aGUgZGV2ZWxvcGVyIHdoYXQncyBhdXRvbWF0aWMgcmVzcG9uc2UgbWFuYWdlbWVudC4KICAgICogQHJldHVybiB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZXNzYWdlIElELCBpbiBjYXNlIGl0IHNob3VsZCBiZSBuZWVkZWQgZm9yIG1hbnVhbCBtYW5hZ2VtZW50IG9mIHRoZSByZXNwb25zZSBoYW5kbGVyLgogICAgKi8KCiAgfSwgewogICAga2V5OiAncG9zdE1lc3NhZ2UnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBvc3RNZXNzYWdlKGluTXNnLCByZXNwb25zZUNhbGxiYWNrKSB7fQoKICAgIC8qKgogICAgICogTm90IHB1YmxpYyBhdmFpbGFibGUsIHVzZWQgYnkgdGhlIGNsYXNzIGV4dGVuc2lvbiBpbXBsZW1lbnRhdGlvbiwgdG8gcHJvY2VzcyBtZXNzYWdlcyBmcm9tIHRoZSBwdWJsaWMgInBvc3RNZXNzYWdlIiB3aXRob3V0IGEgcmVnaXN0ZXJlZCBsaXN0ZW5lci4KICAgICAqIFVzZWQgdG8gc2VuZCB0aGUgbWVzc2FnZSB0byBhbiBleHRlcm5hbCBpbnRlcmZhY2UsIGxpa2UgYSBXZWJXb3JrZXIsIElGcmFtZSwgZXRjLgogICAgICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSBtc2cgTWVzc2FnZQogICAgICovCgogIH0sIHsKICAgIGtleTogJ19vblBvc3RNZXNzYWdlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfb25Qb3N0TWVzc2FnZShtc2cpIHt9IC8qaW1wbGVtZW50YXRpb24gd2lsbCBzZW5kIG1lc3NhZ2UgdG8gZXh0ZXJuYWwgc3lzdGVtKi8KCiAgICAvKioKICAgICAqIE5vdCBwdWJsaWMgYXZhaWxhYmxlLCB1c2VkIGJ5IHRoZSBjbGFzcyBleHRlbnNpb24gaW1wbGVtZW50YXRpb24sIHRvIHByb2Nlc3MgYWxsIG1lc3NhZ2VzIHRoYXQgZW50ZXIgdGhlIE1pbmlCdXMgZnJvbSBhbiBleHRlcm5hbCBpbnRlcmZhY2UsIGxpa2UgYSBXZWJXb3JrZXIsIElGcmFtZSwgZXRjLgogICAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIG9uZSB0aW1lIGluIHRoZSBjb25zdHJ1Y3RvciB0byByZWdpc3RlciBleHRlcm5hbCBsaXN0ZW5lcnMuCiAgICAgKiBUaGUgaW1wbGVtZW50YXRpb24gd2lsbCBwcm9iYWJseSBjYWxsIHRoZSAiX29uTWVzc2FnZSIgbWV0aG9kIHRvIHB1Ymxpc2ggaW4gdGhlIGxvY2FsIGxpc3RlbmVycy4KICAgICAqIERPIE5PVCBjYWxsICJwb3N0TWVzc2FnZSIsIHRoZXJlIGlzIGEgZGFuZ2VyIHRoYXQgdGhlIG1lc3NhZ2UgZW50ZXJzIGluIGEgY3ljbGUhCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAnX3JlZ2lzdGVyRXh0ZXJuYWxMaXN0ZW5lcicsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlZ2lzdGVyRXh0ZXJuYWxMaXN0ZW5lcigpIHsvKmltcGxlbWVudGF0aW9uIHdpbGwgcmVnaXN0ZXIgZXh0ZXJuYWwgbGlzdGVuZXIgYW5kIGNhbGwgInRoaXMuX29uTWVzc2FnZShtc2cpIiAqL30KICB9XSk7CiAgcmV0dXJuIEJ1czsKfSgpOwoKdmFyIE1zZ0xpc3RlbmVyID0gZnVuY3Rpb24gKCkgewogIC8qIHByaXZhdGUKICBfc3Vic2NyaXB0aW9uczogPHN0cmluZzogTXNnTGlzdGVuZXJbXT47CiAgX3VybDogc3RyaW5nOwogIF9jYWxsYmFjazogKG1zZykgPT4gdm9pZDsKICAqLwoKICBmdW5jdGlvbiBNc2dMaXN0ZW5lcihzdWJzY3JpcHRpb25zLCB1cmwsIGNhbGxiYWNrKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBNc2dMaXN0ZW5lcik7CgogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICBfdGhpcy5fc3Vic2NyaXB0aW9ucyA9IHN1YnNjcmlwdGlvbnM7CiAgICBfdGhpcy5fdXJsID0gdXJsOwogICAgX3RoaXMuX2NhbGxiYWNrID0gY2FsbGJhY2s7CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShNc2dMaXN0ZW5lciwgW3sKICAgIGtleTogJ3JlbW92ZScsCgoKICAgIC8qKgogICAgICogUmVtb3ZlIHRoaXMgbGlzdGVuZXIgZnJvbSB0aGUgQnVzCiAgICAgKi8KICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgc3VicyA9IF90aGlzLl9zdWJzY3JpcHRpb25zW190aGlzLl91cmxdOwogICAgICBpZiAoc3VicykgewogICAgICAgIHZhciBpbmRleCA9IHN1YnMuaW5kZXhPZihfdGhpcyk7CiAgICAgICAgc3Vicy5zcGxpY2UoaW5kZXgsIDEpOwoKICAgICAgICAvL2lmIHRoZXJlIGFyZSBubyBsaXN0ZW5lcnMsIHJlbW92ZSB0aGUgc3Vic2NyaXB0aW9uIGVudGlyZWx5LgogICAgICAgIGlmIChzdWJzLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgZGVsZXRlIF90aGlzLl9zdWJzY3JpcHRpb25zW190aGlzLl91cmxdOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogJ3VybCcsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3VybDsKICAgIH0KICB9XSk7CiAgcmV0dXJuIE1zZ0xpc3RlbmVyOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBCdXM7Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7ImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTMsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTR9XSw0MTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX3N0cmluZ2lmeSA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeScpOwoKdmFyIF9zdHJpbmdpZnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RyaW5naWZ5KTsKCnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTsKCnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7Cgp2YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTsKCnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7Cgp2YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpOwoKdmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpOwoKdmFyIF9CdXMyID0gcmVxdWlyZSgnLi9CdXMnKTsKCnZhciBfQnVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0J1czIpOwoKdmFyIF9QaXBlbGluZSA9IHJlcXVpcmUoJy4vUGlwZWxpbmUnKTsKCnZhciBfUGlwZWxpbmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUGlwZWxpbmUpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8qKgoqIEBhdXRob3IgbWljYWVscGVkcm9zYUBnbWFpbC5jb20KKiBNZXNzYWdlIEJVUyBJbnRlcmZhY2UgaXMgYW4gZXh0ZW5zaW9uIG9mIHRoZSBCdXMKKiBJdCBkb2Vzbid0IHN1cHBvcnQgdGhlIGRlZmF1bHQgJyonIGxpc3RlbmVyLCBpbnN0ZWFkIGl0IHVzZXMgdGhlIHJlZ2lzdHJ5LnJlc29sdmUoLi4pCiovCi8qKgoqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQoqIENvcHlyaWdodCAyMDE2IElORVNDLUlECiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMCiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYKKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0EKKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHCiogQ29weXJpZ2h0IDIwMTYgQXBpemVlCiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4KKgoqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwoqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKKgoqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCioKKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCioqLwoKdmFyIE1lc3NhZ2VCdXMgPSBmdW5jdGlvbiAoX0J1cykgewogICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKE1lc3NhZ2VCdXMsIF9CdXMpOwoKICAvKiBwcml2YXRlCiAgX3JlZ2lzdHJ5OiBSZWdpc3RyeQogIF9mb3J3YXJkczogeyA8ZnJvbS11cmw+OiB7IGZsOiBNc2dMaXN0ZW5lciwgc2FuZGJveFRvVXJsczogTWFwKFNhbmRib3gsIFt0by11cmxdKSwgdXJsVG9TYW5kYm94OiB7IHRvLXVybDogU2FuZGJveCB9IH0gfQogICBfcGlwZWxpbmU6IFBpcGVsaW5lCiAgKi8KCiAgLy9UT0RPOiBmdXR1cmUgb3B0aW1pemF0aW9uCiAgLy8xLiBtZXNzYWdlIGJhdGNoIHByb2Nlc3Npbmcgd2l0aCBzZXRJbnRlcnZhbAogIC8vMi4gcmVzb2x2ZSBkZWZhdWx0IGdhdGV3YXkvcHJvdG9zdHViIHdpdGggcmVnaXN0ZXIucmVzb2x2ZQoKICBmdW5jdGlvbiBNZXNzYWdlQnVzKHJlZ2lzdHJ5KSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBNZXNzYWdlQnVzKTsKCiAgICB2YXIgX3RoaXMyID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShNZXNzYWdlQnVzKS5jYWxsKHRoaXMpKTsKCiAgICBfdGhpczIuX3JlZ2lzdHJ5ID0gcmVnaXN0cnk7CiAgICBfdGhpczIuX2ZvcndhcmRzID0ge307CgogICAgX3RoaXMyLl9waXBlbGluZSA9IG5ldyBfUGlwZWxpbmUyLmRlZmF1bHQoZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgIGNvbnNvbGUubG9nKCdQSVBFTElORS1FUlJPUjogJywgKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKGVycm9yKSk7CiAgICB9KTsKICAgIHJldHVybiBfdGhpczI7CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShNZXNzYWdlQnVzLCBbewogICAga2V5OiAncG9zdE1lc3NhZ2UnLAoKCiAgICAvKioKICAgICAqIFBvc3QgYSBtZXNzYWdlIGZvciByb3V0aW5nLiBJdCB3aWxsIGZpcnN0IHNlYXJjaCBmb3IgYSBsaXN0ZW5lciwgaWYgdGhlcmUgaXMgbm8gb25lLCBpdCBzZW5kcyB0byBhIGV4dGVybmFsIHJvdXRpbmcgdXNpbmcgdGhlIF9vblBvc3RNZXNzYWdlLgogICAgICogRXh0ZXJuYWwgcm91dGluZyB1c2UgdGhlIHJlZ2lzdHJ5LnJlc29sdmUoLi4pIG1ldGhvZCB0byBkZWNpZGUgdGhlIGRlc3RpbmF0aW9uIHNhbmRib3guCiAgICAgKiBAcGFyYW0gIHtNZXNzYWdlfSBpbk1zZyAgICAgICAgICAgIEpTT04gd2l0aCBtYW5kYXRvcnkgTWVzc2FnZSBzdHJ1Y3R1cmUge2lkLCB0eXBlLCBmcm9tLCB0b30KICAgICAqIEBwYXJhbSAge0NhbGxiYWNrfSByZXNwb25zZUNhbGxiYWNrIE9wdGlvbmFsIGNhbGxiYWNrIGlmIGEgcmVzcG9uc2UgaXMgZXhwZWN0ZWQgZnJvbSB0aGUgcmVxdWVzdC4gQSByZXNwb25zZSB3aWxsIGJlIGFsd2F5cyBzZW50LCBldmVuIGlmIGl0IGlzIGEgIlRpbWVvdXQiLgogICAgICogQHJldHVybiB7bnVtYmVyfSAgICAgICAgICAgICAgICAgIHRoZSBNZXNzYWdlIGlkCiAgICAgKi8KICAgIHZhbHVlOiBmdW5jdGlvbiBwb3N0TWVzc2FnZShpbk1zZywgcmVzcG9uc2VDYWxsYmFjaykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgX3RoaXMuX2dlbklkKGluTXNnKTsKCiAgICAgIF90aGlzLl9waXBlbGluZS5wcm9jZXNzKGluTXNnLCBmdW5jdGlvbiAobXNnKSB7CgogICAgICAgIF90aGlzLl9yZXNwb25zZUNhbGxiYWNrKGluTXNnLCByZXNwb25zZUNhbGxiYWNrKTsKCiAgICAgICAgaWYgKCFfdGhpcy5fb25SZXNwb25zZShtc2cpKSB7CiAgICAgICAgICB2YXIgaXRlbUxpc3QgPSBfdGhpcy5fc3Vic2NyaXB0aW9uc1ttc2cudG9dOwogICAgICAgICAgaWYgKGl0ZW1MaXN0KSB7CiAgICAgICAgICAgIC8vZG8gbm90IHB1Ymxpc2ggb24gZGVmYXVsdCBhZGRyZXNzLCBiZWNhdXNlIG9mIGxvb3BiYWNrIGN5Y2xlCiAgICAgICAgICAgIF90aGlzLl9wdWJsaXNoT24oaXRlbUxpc3QsIG1zZyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvL2lmIHRoZXJlIGlzIG5vIGxpc3RlbmVyLCBzZW5kIHRvIGV4dGVybmFsIGludGVyZmFjZQogICAgICAgICAgICBfdGhpcy5fb25Qb3N0TWVzc2FnZShtc2cpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CgogICAgICByZXR1cm4gaW5Nc2cuaWQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBBZGRzIGFuIGV4dGVybmFsIHB1Ymxpc2ggYWRkcmVzcyBsaXN0ZW5lci4gRXZlcnkgbWVzc2FnZSBmb3IgdGhlIGFkZHJlc3Mgd2lsbCBiZSBmb3J3YXJkZWQgdG8gdGhlIGV4dGVybmFsIHJvdXRpbmcgYnkgX29uUG9zdE1lc3NhZ2UuCiAgICAgKiBUaGlzIG1lYW5zLCBldmVuIGlmIHRoZXJlIGlzIGEgbGlzdGVuZXIgZm9yIHRoZSBhZGRyZXNzLCBpdCB3aWxsIGFsc28gc2VuZCB0aGUgbWVzc2FnZSB0byB0aGUgZXh0ZXJuYWwgcm91dGluZy4KICAgICAqIEBwYXJhbSB7VVJMfSBmcm9tIFB1Ymxpc2ggYWRkcmVzcy4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdhZGRQdWJsaXNoJywKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRQdWJsaXNoKGZyb20pIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgLy92ZXJpZnkgaWYgZm9yd2FyZCBleGlzdAogICAgICB2YXIgcmVmQ291bnQgPSBfdGhpcy5fZm9yd2FyZHNbZnJvbV07CiAgICAgIGlmICghcmVmQ291bnQpIHsKICAgICAgICB2YXIgZm9yd2FyZExpc3RlbmVyID0gX3RoaXMuYWRkTGlzdGVuZXIoZnJvbSwgZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgY29uc29sZS5sb2coJ01CLVBVQkxJU0g6ICggJyArIGZyb20gKyAnICknKTsKICAgICAgICAgIF90aGlzLl9vblBvc3RNZXNzYWdlKG1zZyk7CiAgICAgICAgfSk7CgogICAgICAgIHJlZkNvdW50ID0gewogICAgICAgICAgY291bnRlcjogMCwKICAgICAgICAgIGZsOiBmb3J3YXJkTGlzdGVuZXIsCiAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHsKICAgICAgICAgICAgX3RoaXMzLmNvdW50ZXItLTsKICAgICAgICAgICAgaWYgKF90aGlzMy5jb3VudGVyID09PSAwKSB7CiAgICAgICAgICAgICAgX3RoaXMzLmZsLnJlbW92ZSgpOwogICAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5fZm9yd2FyZHNbZnJvbV07CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBfdGhpcy5fZm9yd2FyZHNbZnJvbV0gPSByZWZDb3VudDsKICAgICAgfQoKICAgICAgcmVmQ291bnQuY291bnRlcisrOwogICAgICByZXR1cm4gcmVmQ291bnQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBBZGRzIGEgZm9yd2FyZCBsaXN0ZW5lciBmb3IgYSBtZXNzYWdlIGRlc3RpbmF0aW9uLiBFdmVyeSBtZXNzYWdlIHJlYWNoaW5nIGFuIGFkZHJlc3Mgd2lsbCBiZSBhbHNvIHNlbnQgdG8gdGhlIGZvcndhcmQgYWRkcmVzcy4KICAgICAqIEBwYXJhbSB7VVJMfSBmcm9tIE1lc3NhZ2UgZGVzdGluYXRpb24sIGl0J3MgYWN0dWFsbHkgdGhlIGZpZWxkICJ0byIgb2YgdGhlIG1lc3NhZ2UuCiAgICAgKiBAcGFyYW0ge1VSTH0gdG8gICBGb3J3YXJkIGFkZHJlc3MuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAnYWRkRm9yd2FyZCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkRm9yd2FyZChmcm9tLCB0bykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIF90aGlzLmFkZExpc3RlbmVyKGZyb20sIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICBjb25zb2xlLmxvZygnTUItRk9SV0FSRDogKCAnICsgZnJvbSArICcgdG8gJyArIHRvICsgJyApJyk7CiAgICAgICAgX3RoaXMuZm9yd2FyZCh0bywgbXNnKTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBKdXN0IGZvcndhcmQncyBhIG1lc3NhZ2UgdG8gdGhlIGZvcndhcmQgYWRkcmVzcy4gTGlzdGVuZXJzIHNob3VsZCBiZSBhdmFpbGFibGUgZm9yIHRoZSBmb3J3YXJkIGFkZHJlc3MuCiAgICAgKiBAcGFyYW0gIHtVUkx9IHVybCBGb3J3YXJkIGFkZHJlc3MuCiAgICAgKiBAcGFyYW0gIHtNZXNzYWdlfSBtc2cgTWVzc2FnZSB0byBmb3J3YXJkCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAnZm9yd2FyZCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gZm9yd2FyZCh1cmwsIG1zZykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGl0ZW1MaXN0ID0gX3RoaXMuX3N1YnNjcmlwdGlvbnNbdXJsXTsKICAgICAgaWYgKGl0ZW1MaXN0KSB7CiAgICAgICAgX3RoaXMuX3B1Ymxpc2hPbihpdGVtTGlzdCwgbXNnKTsKICAgICAgfQogICAgfQoKICAgIC8vZGVmYXVsdCByb3V0ZSwgaWYgdGhlcmUgYXJlIG5vIGxpc3RlbmVycyBhdmFpbGFibGUgZm9yIGEgbWVzc2FnZSBkZXN0aW5hdGlvbi4KCiAgfSwgewogICAga2V5OiAnX29uUG9zdE1lc3NhZ2UnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9vblBvc3RNZXNzYWdlKG1zZykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgLy9yZXNvbHZlIGV4dGVybmFsIHByb3Rvc3R1Yi4uLgogICAgICBfdGhpcy5fcmVnaXN0cnkucmVzb2x2ZShtc2cudG8pLnRoZW4oZnVuY3Rpb24gKHJvdXRlKSB7CiAgICAgICAgX3RoaXMuZm9yd2FyZChyb3V0ZSwgbXNnKTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICBjb25zb2xlLmxvZygnUkVTT0xWRS1FUlJPUjogJywgZSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ3BpcGVsaW5lJywKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fcGlwZWxpbmU7CiAgICB9CiAgfV0pOwogIHJldHVybiBNZXNzYWdlQnVzOwp9KF9CdXMzLmRlZmF1bHQpOwoKZXhwb3J0cy5kZWZhdWx0ID0gTWVzc2FnZUJ1czsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi9CdXMiOjQxNCwiLi9QaXBlbGluZSI6NDE2LCJiYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnkiOjIsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZiI6NiwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxMywiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxNCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzIjoxNSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iOjE2fV0sNDE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIik7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoqCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBCiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQKKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wKKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVgoqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcKKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUKKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTgoqCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAoqCiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKKgoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KKiovCgovKioKKiBAYXV0aG9yIG1pY2FlbHBlZHJvc2FAZ21haWwuY29tCiogU2VxdWVuY2lhbCBwcm9jZXNzb3Igb2YgbWV0aG9kcy4gU2ltaWxhciB0byBob3cgU2VxdWVudGlhbCBQcm9taXNlJ3Mgd29yaywgYnV0IGJldHRlciBmaXQgZm9yIG1lc3NhZ2UgcHJvY2Vzc2luZy4KKiBOb3JtYWwgdXNlIGZvciB0aGlzLCBpcyB0byBpbnRlcmNlcHQgYWxsIG1lc3NhZ2VzIHdpdGggY29uZmlndXJlZCBoYW5kbGVycywgYW5kIGFjdCBhY2NvcmRpbmdseS4KKi8KCnZhciBQaXBlbGluZSA9IGZ1bmN0aW9uICgpIHsKICAvKiBwdWJsaWMKICAgIGhhbmRsZXJzOiAoKFBpcGVDb250ZXh0KSA9PiB2b2lkKVtdCiAgICBvbkZhaWw6IChlcnJvcikgPT4gdm9pZAogICovCgogIGZ1bmN0aW9uIFBpcGVsaW5lKF9vbkZhaWwpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFBpcGVsaW5lKTsKCiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIF90aGlzLmhhbmRsZXJzID0gW107CiAgICBfdGhpcy5vbkZhaWwgPSBfb25GYWlsOwogIH0KCiAgLyoqCiAgICogSW5zZXJ0IGEgbWVzc2FnZSBpbiB0aGUgcGlwZWxpbmUgcXVldWUuIEFsbCBtZXNzYWdlcyBhcmUgd3JhcHBlZCB3aXRoIGEgUGlwZUNvbnRleHQuCiAgICogQHBhcmFtICB7TWVzc2FnZX0gbXNnICAgICAgIE1lc3NhZ2UgZm9yIHRoZSBxdWV1ZQogICAqIEBwYXJhbSAge0NhbGxiYWNrfSBvbkRlbGl2ZXIgV2hlbiBtZXNzYWdlIGlzIGZpbmlzaGVkIHByb2Nlc3NpbmcgZnJvbSBhbGwgaGFuZGxlcnMsIGl0IHdpbGwgYmUgZGVsaXZlcmVkIGluIHRoaXMgY2FsbGJhY2suCiAgICovCgoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShQaXBlbGluZSwgW3sKICAgIGtleTogInByb2Nlc3MiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHByb2Nlc3MobXNnLCBvbkRlbGl2ZXIpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGlmIChfdGhpcy5oYW5kbGVycy5sZW5ndGggPiAwKSB7CiAgICAgICAgdmFyIGl0ZXIgPSBuZXcgSXRlcmF0b3IoX3RoaXMuaGFuZGxlcnMpOwogICAgICAgIGl0ZXIubmV4dChuZXcgUGlwZUNvbnRleHQoX3RoaXMsIGl0ZXIsIG1zZywgb25EZWxpdmVyKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgb25EZWxpdmVyKG1zZyk7CiAgICAgIH0KICAgIH0KICB9XSk7CiAgcmV0dXJuIFBpcGVsaW5lOwp9KCk7CgovKioKKiBAYXV0aG9yIG1pY2FlbHBlZHJvc2FAZ21haWwuY29tCiogV3JhcHBlciBhcm91bmQgYSBtZXNzYWdlIHRoYXQgYWRkcyBhY3Rpb25zIHRoYXQgY2FuIGJlIGZpcmVkIGJ5IGFueSBpbnRlcmNlcHRvciBoYW5kbGVyLgoqIFRoZSBQaXBlbGluZSBpcyBhc3luY2hyb25vdXMsIHNvIGFuIGhhbmRsZXIgc2hvdWxkIGFsd2F5cyBjYWxsIGFuIGFjdGlvbiwgdGhlIGRlZmF1bHQgb25lIGlzICJuZXh0KCkiCiovCgoKdmFyIFBpcGVDb250ZXh0ID0gZnVuY3Rpb24gKCkgewogIC8qIHByaXZhdGUKICAgIF9pblN0b3A6IGJvb2xlYW4KICAgICBfcGlwZWxpbmU6IFBpcGVsaW5lCiAgICBfaXRlcjogSXRlcmF0b3IKICAgIF9tc2c6IE1lc3NhZ2UKICAqLwoKICBmdW5jdGlvbiBQaXBlQ29udGV4dChwaXBlbGluZSwgaXRlciwgbXNnLCBvbkRlbGl2ZXIpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFBpcGVDb250ZXh0KTsKCiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIF90aGlzLl9pblN0b3AgPSBmYWxzZTsKCiAgICBfdGhpcy5fcGlwZWxpbmUgPSBwaXBlbGluZTsKICAgIF90aGlzLl9pdGVyID0gaXRlcjsKICAgIF90aGlzLl9tc2cgPSBtc2c7CiAgICBfdGhpcy5fb25EZWxpdmVyID0gb25EZWxpdmVyOwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoUGlwZUNvbnRleHQsIFt7CiAgICBrZXk6ICJuZXh0IiwKCgogICAgLyoqCiAgICAgKiBQcm9jZWVkIHRvIHRoZSBuZXh0IGludGVyY2VwdG9yIGhhbmRsZXIsIHVubGVzcyB0aGVyZSB3YXMgYW4gZXJyb3IuIElmIGl0J3MgdGhlIGxhc3Qgb25lLCBwcm9jZWVkIHRvIG9uRGVsaXZlciBoYW5kbGVyLgogICAgICovCiAgICB2YWx1ZTogZnVuY3Rpb24gbmV4dCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGlmICghX3RoaXMuX2luU3RvcCkgewogICAgICAgIGlmIChfdGhpcy5faXRlci5oYXNOZXh0KSB7CiAgICAgICAgICBfdGhpcy5faXRlci5uZXh0KF90aGlzKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgX3RoaXMuX29uRGVsaXZlcihfdGhpcy5fbXNnKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFByb2NlZWQgZGlyZWN0bHkgdG8gdGhlIG9uRGVsaXZlciBoYW5kbGVyLCB1bmxlc3MgdGhlcmUgd2FzIGFuIGVycm9yLgogICAgICovCgogIH0sIHsKICAgIGtleTogImRlbGl2ZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGl2ZXIoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIGlmICghX3RoaXMuX2luU3RvcCkgewogICAgICAgIF90aGlzLl9pblN0b3AgPSB0cnVlOwogICAgICAgIF90aGlzLl9vbkRlbGl2ZXIoX3RoaXMuX21zZyk7CiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIE1hcmsgdGhlIGNvbnRleHQgd2l0aCBhbiBlcnJvciBhbmQgcHJvY2VlZCB0byB0aGUgb25GYWlsIGhhbmRsZXIuCiAgICAgKiBAcGFyYW0gIHtbdHlwZV19IGVycm9yIFtkZXNjcmlwdGlvbl0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJmYWlsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmYWlsKGVycm9yKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBpZiAoIV90aGlzLl9pblN0b3ApIHsKICAgICAgICBfdGhpcy5faW5TdG9wID0gdHJ1ZTsKICAgICAgICBpZiAoX3RoaXMuX3BpcGVsaW5lLm9uRmFpbCkgewogICAgICAgICAgX3RoaXMuX3BpcGVsaW5lLm9uRmFpbChlcnJvcik7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGlwZWxpbmUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9waXBlbGluZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJtc2ciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9tc2c7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQoaW5Nc2cpIHsKICAgICAgdGhpcy5fbXNnID0gaW5Nc2c7CiAgICB9CiAgfV0pOwogIHJldHVybiBQaXBlQ29udGV4dDsKfSgpOwoKdmFyIEl0ZXJhdG9yID0gZnVuY3Rpb24gKCkgewogIC8qIHByaXZhdGUKICAgIF9pbmRleDogbnVtYmVyCiAgICBfYXJyYXk6IFtdCiAgKi8KCiAgZnVuY3Rpb24gSXRlcmF0b3IoYXJyYXkpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIEl0ZXJhdG9yKTsKCiAgICB0aGlzLl9pbmRleCA9IC0xOwogICAgdGhpcy5fYXJyYXkgPSBhcnJheTsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEl0ZXJhdG9yLCBbewogICAga2V5OiAiaGFzTmV4dCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX2luZGV4IDwgdGhpcy5fYXJyYXkubGVuZ3RoIC0gMTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJuZXh0IiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB0aGlzLl9pbmRleCsrOwogICAgICByZXR1cm4gdGhpcy5fYXJyYXlbdGhpcy5faW5kZXhdOwogICAgfQogIH1dKTsKICByZXR1cm4gSXRlcmF0b3I7Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IFBpcGVsaW5lOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbImRlZmF1bHQiXTsKCn0seyJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjEzLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE0fV0sNDE3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9wcm9taXNlID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UnKTsKCnZhciBfcHJvbWlzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9taXNlKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8qKgoqIENsYXNzIHdpdGggdGhlIGNyeXB0b2dyYXBoaWMgZnVuY3Rpb25zIGZvciB0aGUgYXV0aGVudGljYXRpb24gcHJvdG9jb2wKKgoqLwoKdmFyIENyeXB0byA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBDcnlwdG8oKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBDcnlwdG8pOwoKICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgfQoKICAvKioKICAqIGVuY29kZSBhIGJ5dGVBcnJheSB2YWx1ZSBpbiBiYXNlIDY0IGVuY29kZQogICogQHBhcmFtICAge2J5dGVBcnJheX0gICAgdmFsdWUgICAgYnl0ZUFycmF5IHZhbHVlCiAgKiBAcmV0dXJuICB7c3RyaW5nfSAgIGVuY29kZWQgdmFsdWUKICAqLwoKCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoQ3J5cHRvLCBbewogICAga2V5OiAnZW5jb2RlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBlbmNvZGUodmFsdWUpIHsKICAgICAgcmV0dXJuIGJ0b2EodmFsdWUpOwogICAgfQoKICAgIC8qKgogICAgKiBkZWNvZGUgYSBiYXNlNjQgdmFsdWUgaW4gYSBuZXcgVWludDhBcnJheQogICAgKiBAcGFyYW0gICB7c3RyaW5nfSAgICB2YWx1ZSAgICB2YWx1ZSBlbmNvZGVkIGluIGJhc2UgNjQKICAgICogQHJldHVybiAge2J5dGVBcnJheX0gZGVjb2RlZFZhbHVlCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdkZWNvZGUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlY29kZSh2YWx1ZSkgewogICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoSlNPTi5wYXJzZSgnWycgKyBhdG9iKHZhbHVlKSArICddJykpOwogICAgfQogIH0sIHsKICAgIGtleTogJ2VuY3J5cHRSU0EnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGVuY3J5cHRSU0EocHViS2V5LCBkYXRhKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBfdGhpcy5faW1wb3J0UlNBZW5jcnlwdEtleShuZXcgVWludDhBcnJheShwdWJLZXkpKS50aGVuKGZ1bmN0aW9uIChwdWJsaWNLZXkpIHsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLmVuY3J5cHQoewogICAgICAgICAgICBuYW1lOiAnUlNBLU9BRVAnCiAgICAgICAgICB9LCBwdWJsaWNLZXksIC8vZnJvbSBnZW5lcmF0ZUtleSBvciBpbXBvcnRLZXkgYWJvdmUKICAgICAgICAgIGRhdGEgLy9BcnJheUJ1ZmZlciBvZiBkYXRhIHlvdSB3YW50IHRvIGVuY3J5cHQKICAgICAgICAgICkudGhlbihmdW5jdGlvbiAoZW5jcnlwdGVkKSB7CiAgICAgICAgICAgIC8vcmV0dXJucyBhbiBBcnJheUJ1ZmZlciBjb250YWluaW5nIHRoZSBlbmNyeXB0ZWQgZGF0YQogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tZW5jcnlwdFJTQScsIG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZCkpOwogICAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZCkpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWVuY3J5cHRSU0EnLCBlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkZWNyeXB0UlNBJywKICAgIHZhbHVlOiBmdW5jdGlvbiBkZWNyeXB0UlNBKHByaXZLZXksIGRhdGEpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIF90aGlzLl9pbXBvcnRSU0FkZWNyeXB0S2V5KHByaXZLZXkpLnRoZW4oZnVuY3Rpb24gKHByaXZhdGVLZXkpIHsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLmRlY3J5cHQoewogICAgICAgICAgICBuYW1lOiAnUlNBLU9BRVAnCiAgICAgICAgICB9LCBwcml2YXRlS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlCiAgICAgICAgICBkYXRhIC8vQXJyYXlCdWZmZXIgb2YgdGhlIGRhdGEKICAgICAgICAgICkudGhlbihmdW5jdGlvbiAoZGVjcnlwdGVkKSB7CgogICAgICAgICAgICB2YXIgZGVjcnlwdGVkRGF0YSA9IG5ldyBVaW50OEFycmF5KGRlY3J5cHRlZCk7CgogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tZGVjcnlwdFJTQScsIGRlY3J5cHRlZERhdGEpOwogICAgICAgICAgICByZXNvbHZlKGRlY3J5cHRlZERhdGEpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWRlY3J5cHRSU0EnLCBlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdzaWduUlNBJywKICAgIHZhbHVlOiBmdW5jdGlvbiBzaWduUlNBKHByaXZLZXksIGRhdGEpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIF90aGlzLl9pbXBvcnRSU0FzaWduS2V5KHByaXZLZXkpLnRoZW4oZnVuY3Rpb24gKHByaXZhdGVLZXkpIHsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLnNpZ24oewogICAgICAgICAgICBuYW1lOiAnUlNBU1NBLVBLQ1MxLXYxXzUnCiAgICAgICAgICB9LCBwcml2YXRlS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlCiAgICAgICAgICBfdGhpcy5fdXRmOEVuY29kZShkYXRhKSAvL0FycmF5QnVmZmVyIG9mIGRhdGEgeW91IHdhbnQgdG8gc2lnbgogICAgICAgICAgKS50aGVuKGZ1bmN0aW9uIChzaWduYXR1cmUpIHsKICAgICAgICAgICAgLy9yZXR1cm5zIGFuIEFycmF5QnVmZmVyIGNvbnRhaW5pbmcgdGhlIHNpZ25hdHVyZQogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tc2lnblJTQScsIG5ldyBVaW50OEFycmF5KHNpZ25hdHVyZSkpOwogICAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KHNpZ25hdHVyZSkpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLXNpZ25SU0EnLCBlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICd2ZXJpZnlSU0EnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHZlcmlmeVJTQShwdWJLZXksIGRhdGEsIHNpZ25hdHVyZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgX3RoaXMuX2ltcG9ydFJTQXZlcmlmeUtleShwdWJLZXkpLnRoZW4oZnVuY3Rpb24gKHB1YmxpY0tleSkgewoKICAgICAgICAgIGNyeXB0by5zdWJ0bGUudmVyaWZ5KHsKICAgICAgICAgICAgbmFtZTogJ1JTQVNTQS1QS0NTMS12MV81JwogICAgICAgICAgfSwgcHVibGljS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlCiAgICAgICAgICBzaWduYXR1cmUsIC8vQXJyYXlCdWZmZXIgb2YgdGhlIHNpZ25hdHVyZQogICAgICAgICAgX3RoaXMuX3V0ZjhFbmNvZGUoZGF0YSkgLy9BcnJheUJ1ZmZlciBvZiB0aGUgZGF0YQogICAgICAgICAgKS50aGVuKGZ1bmN0aW9uIChpc3ZhbGlkKSB7CiAgICAgICAgICAgIC8vcmV0dXJucyBhIGJvb2xlYW4gb24gd2hldGhlciB0aGUgc2lnbmF0dXJlIGlzIHRydWUgb3Igbm90CiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by12ZXJpZnlSU0EnLCBpc3ZhbGlkKTsKICAgICAgICAgICAgcmVzb2x2ZShpc3ZhbGlkKTsKICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ2NyeXB0by12ZXJpZnlSU0EnLCBlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdlbmNyeXB0QUVTJywKICAgIHZhbHVlOiBmdW5jdGlvbiBlbmNyeXB0QUVTKGtleSwgZGF0YSwgaXYpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIF90aGlzLl9pbXBvcnRBRVNrZXkoa2V5KS50aGVuKGZ1bmN0aW9uIChhZXNLZXkpIHsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLmVuY3J5cHQoewogICAgICAgICAgICBuYW1lOiAnQUVTLUNCQycsCiAgICAgICAgICAgIC8vRG9uJ3QgcmUtdXNlIGluaXRpYWxpemF0aW9uIHZlY3RvcnMhCiAgICAgICAgICAgIC8vQWx3YXlzIGdlbmVyYXRlIGEgbmV3IGl2IGV2ZXJ5IHRpbWUgeW91ciBlbmNyeXB0IQogICAgICAgICAgICBpdjogaXYKICAgICAgICAgIH0sIGFlc0tleSwgLy9mcm9tIGdlbmVyYXRlS2V5IG9yIGltcG9ydEtleSBhYm92ZQogICAgICAgICAgX3RoaXMuX3V0ZjhFbmNvZGUoZGF0YSkgLy9BcnJheUJ1ZmZlciBvZiBkYXRhIHlvdSB3YW50IHRvIGVuY3J5cHQKICAgICAgICAgICkudGhlbihmdW5jdGlvbiAoZW5jcnlwdGVkKSB7CiAgICAgICAgICAgIC8vcmV0dXJucyBhbiBBcnJheUJ1ZmZlciBjb250YWluaW5nIHRoZSBlbmNyeXB0ZWQgZGF0YQogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tZW5jcnlwdEFFUycsIG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZCkpOwogICAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZCkpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWVuY3J5cHRBRVMnLCBlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkZWNyeXB0QUVTJywKICAgIHZhbHVlOiBmdW5jdGlvbiBkZWNyeXB0QUVTKGtleSwgZGF0YSwgaXYpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIF90aGlzLl9pbXBvcnRBRVNrZXkoa2V5KS50aGVuKGZ1bmN0aW9uIChhZXNLZXkpIHsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLmRlY3J5cHQoewogICAgICAgICAgICBuYW1lOiAnQUVTLUNCQycsCiAgICAgICAgICAgIGl2OiBpdgogICAgICAgICAgfSwgYWVzS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlCiAgICAgICAgICBkYXRhIC8vQXJyYXlCdWZmZXIgb2YgdGhlIGRhdGEKICAgICAgICAgICkudGhlbihmdW5jdGlvbiAoZGVjcnlwdGVkKSB7CgogICAgICAgICAgICB2YXIgZGVjb2RlZERhdGEgPSBfdGhpcy5fdXRmOERlY29kZShuZXcgVWludDhBcnJheShkZWNyeXB0ZWQpKTsKICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWRlY3J5cHRBRVMnLCBkZWNvZGVkRGF0YSk7CiAgICAgICAgICAgIHJlc29sdmUoZGVjb2RlZERhdGEpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWRlY3J5cHRBRVMnLCBlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogY3JlYXRlcyBhIGhhc2ggdXNpbmcgdGhlIEhNQUMgYWxnb3JpdGhtCiAgICAqIEBwYXJhbSAge2J5dGVBcnJheX0gICAga2V5ICAgICAgIGtleSB0byBiZSB1c2VkIGluIHRoZSBobWFjCiAgICAqIEBwYXJhbSAge3N0cmluZ30gICAgICBkYXRhICAgICAgIGluZm9ybWF0aW9uIHRvIGJlIGhhc2hlZAogICAgKiBAcmV0dXJuICB7Ynl0ZUFycmF5fSAgIHNpZ25hdHVyZSAgcmVzdWx0aW5nIGhhc2gKICAgICovCgogIH0sIHsKICAgIGtleTogJ2hhc2hITUFDJywKICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNoSE1BQyhrZXksIGRhdGEpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBfdGhpcy5faW1wb3J0SE1BQ2tleShrZXkpLnRoZW4oZnVuY3Rpb24gKGhtYWNLZXkpIHsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLnNpZ24oewogICAgICAgICAgICBuYW1lOiAnSE1BQycKICAgICAgICAgIH0sIGhtYWNLZXksIC8vZnJvbSBnZW5lcmF0ZUtleSBvciBpbXBvcnRLZXkgYWJvdmUKICAgICAgICAgIF90aGlzLl91dGY4RW5jb2RlKGRhdGEpIC8vQXJyYXlCdWZmZXIgb2YgZGF0YSB5b3Ugd2FudCB0byBzaWduCiAgICAgICAgICApLnRoZW4oZnVuY3Rpb24gKHNpZ25hdHVyZSkgewogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8taGFzaEhNQUMnLCBzaWduYXR1cmUpOwoKICAgICAgICAgICAgLy9yZXR1cm5zIGFuIEFycmF5QnVmZmVyIGNvbnRhaW5pbmcgdGhlIHNpZ25hdHVyZQogICAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KHNpZ25hdHVyZSkpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWhhc2hITUFDJywgZXJyKTsKICAgICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIHZlcmlmaWVzIGFuIGhhc2ggdXNpbmcgdGhlIEhNQUMgYWxnb3JpdGhtCiAgICAqIEBwYXJhbSAge2J5dGVBcnJheX0gICAga2V5ICAgICAgIGtleSB0byBiZSB1c2VkIGluIHRoZSBobWFjCiAgICAqIEBwYXJhbSAge3N0cmluZ30gICAgICBkYXRhICAgICAgIGluZm9ybWF0aW9uIHRvIGJlIGhhc2hlZCB0byBjb21wYXJlCiAgICAqIEBwYXJhbSAge2J5dGVBcnJheX0gIHNpZ25hdHVyZSAgIGhhc2ggdG8gY29tcGFyZSB3aXRoIHRoZSByZWNlaXZlZCBkYXRhCiAgICAqIEByZXR1cm4gIHtib29sZWFufSAgIGlzdmFsaWQgICAgIGJvb2xlYW4gc2F5aW5nIGlmIHRoZSBkYXRhIGNvcnJlc3BvbmRzIHRvIHRoZSBoYXNoIHJlY2VpdmVkCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICd2ZXJpZnlITUFDJywKICAgIHZhbHVlOiBmdW5jdGlvbiB2ZXJpZnlITUFDKGtleSwgZGF0YSwgc2lnbmF0dXJlKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgX3RoaXMuX2ltcG9ydEhNQUNrZXkoa2V5KS50aGVuKGZ1bmN0aW9uIChobWFjS2V5KSB7CgogICAgICAgICAgY3J5cHRvLnN1YnRsZS52ZXJpZnkoewogICAgICAgICAgICBuYW1lOiAnSE1BQycKICAgICAgICAgIH0sIGhtYWNLZXksIC8vZnJvbSBnZW5lcmF0ZUtleSBvciBpbXBvcnRLZXkgYWJvdmUKICAgICAgICAgIHNpZ25hdHVyZSwgLy9BcnJheUJ1ZmZlciBvZiB0aGUgc2lnbmF0dXJlCiAgICAgICAgICBfdGhpcy5fdXRmOEVuY29kZShkYXRhKSAvL0FycmF5QnVmZmVyIG9mIHRoZSBkYXRhCiAgICAgICAgICApLnRoZW4oZnVuY3Rpb24gKGlzdmFsaWQpIHsKICAgICAgICAgICAgLy9yZXR1cm5zIGEgYm9vbGVhbiBvbiB3aGV0aGVyIHRoZSBzaWduYXR1cmUgaXMgdHJ1ZSBvciBub3QKICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLXZlcmlmeUhNQUMnLCBpc3ZhbGlkKTsKICAgICAgICAgICAgaXN2YWxpZCA/IHJlc29sdmUoaXN2YWxpZCkgOiByZWplY3QoaXN2YWxpZCk7CiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2NyeXB0by12ZXJpZnlITUFDJywgZXJyKTsKICAgICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIGdlbmVyYXRlcyBhIFJTQSBwdWJsaWMvcHJpdmF0ZSBrZXkgcGFpciB3aXRoIGEgbW9kdWx1cyBsZW5ndGggb2YgMjA0OCBiaXRzCiAgICAqIEByZXR1cm4gIHtKU09OfSAgIGtleVBhaXIgICAganNvbiBjb250YWluaW5nIHRoZSBwdWJsaWMgYW5kIHByaXZhdGUga2V5cwogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2VuZXJhdGVSU0FLZXlQYWlyJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZVJTQUtleVBhaXIoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBrZXlQYWlyID0ge307CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBjcnlwdG8uc3VidGxlLmdlbmVyYXRlS2V5KHsKICAgICAgICAgIG5hbWU6ICdSU0EtUFNTJywKICAgICAgICAgIG1vZHVsdXNMZW5ndGg6IDIwNDgsIC8vY2FuIGJlIDEwMjQsIDIwNDgsIG9yIDQwOTYKICAgICAgICAgIHB1YmxpY0V4cG9uZW50OiBuZXcgVWludDhBcnJheShbMHgwMSwgMHgwMCwgMHgwMV0pLAogICAgICAgICAgaGFzaDogeyBuYW1lOiAnU0hBLTI1NicgfSAvL2NhbiBiZSAnU0hBLTEnLCAnU0hBLTI1NicsICdTSEEtMzg0Jywgb3IgJ1NIQS01MTInCiAgICAgICAgfSwgdHJ1ZSwgLy93aGV0aGVyIHRoZSBrZXkgaXMgZXh0cmFjdGFibGUgKGkuZS4gY2FuIGJlIHVzZWQgaW4gZXhwb3J0S2V5KQogICAgICAgIFsnc2lnbicsICd2ZXJpZnknXSAvL2NhbiBiZSBhbnkgY29tYmluYXRpb24gb2YgJ3NpZ24nIGFuZCAndmVyaWZ5JwoKICAgICAgICApLnRoZW4oZnVuY3Rpb24gKGtleSkgewogICAgICAgICAgLy9yZXR1cm5zIGEga2V5cGFpciBvYmplY3QKICAgICAgICAgIC8vY29uc29sZS5sb2coa2V5KTsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLmV4cG9ydEtleSgnc3BraScsIC8vY2FuIGJlICdqd2snIChwdWJsaWMgb3IgcHJpdmF0ZSksICdzcGtpJyAocHVibGljIG9ubHkpLCBvciAncGtjczgnIChwcml2YXRlIG9ubHkpCiAgICAgICAgICBrZXkucHVibGljS2V5IC8vY2FuIGJlIGEgcHVibGljS2V5IG9yIHByaXZhdGVLZXksIGFzIGxvbmcgYXMgZXh0cmFjdGFibGUgd2FzIHRydWUKICAgICAgICAgICkudGhlbihmdW5jdGlvbiAocHVibGljS2V5KSB7CiAgICAgICAgICAgIC8vcmV0dXJucyB0aGUgZXhwb3J0ZWQga2V5IGRhdGEKICAgICAgICAgICAga2V5UGFpci5wdWJsaWMgPSBuZXcgVWludDhBcnJheShwdWJsaWNLZXkpOwogICAgICAgICAgICByZXR1cm4gY3J5cHRvLnN1YnRsZS5leHBvcnRLZXkoJ3BrY3M4JywgLy9jYW4gYmUgJ2p3aycgKHB1YmxpYyBvciBwcml2YXRlKSwgJ3Nwa2knIChwdWJsaWMgb25seSksIG9yICdwa2NzOCcgKHByaXZhdGUgb25seSkKICAgICAgICAgICAga2V5LnByaXZhdGVLZXkgLy9jYW4gYmUgYSBwdWJsaWNLZXkgb3IgcHJpdmF0ZUtleSwgYXMgbG9uZyBhcyBleHRyYWN0YWJsZSB3YXMgdHJ1ZQogICAgICAgICAgICApOwogICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocHJpdmF0ZUtleSkgewogICAgICAgICAgICBrZXlQYWlyLnByaXZhdGUgPSBuZXcgVWludDhBcnJheShwcml2YXRlS2V5KTsKICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWdlbmVyYXRlUlNBS2V5UGFpcicsIGtleVBhaXIpOwoKICAgICAgICAgICAgcmVzb2x2ZShrZXlQYWlyKTsKICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTsKICAgICAgICAgIHJlamVjdChlcnIpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogR2VuZXJhdGVzIGEgMTI4IGJpdCByYW5kb20gdmFsdWUuCiAgICAqIEByZXR1cm4ge2J5dGVBcnJheX0gIGFycmF5ICAgIHJhbmRvbSB2YWx1ZQogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2VuZXJhdGVJVicsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGVJVigpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBhcnJheSA9IG5ldyBVaW50OEFycmF5KDE2KTsKICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnJheSk7CgogICAgICByZXR1cm4gYXJyYXk7CiAgICB9CgogICAgLyoqCiAgICAqIEdlbmVyYXRlcyBhIDI1NiBiaXQgcmFuZG9tIHZhbHVlLiAzMiBiaXRzIGFyZSBleHRyYXRlZCBmcm9tIHRoZSBtYWNoaW5lIHRpbWUsCiAgICAqIHRoZSByZW1haW5pbmcgYXJlIGdlbmVyYXRlZCByYW5kb21seQogICAgKiBAcmV0dXJuIHtieXRlQXJyYXl9ICBhcnJheSAgICByYW5kb20gdmFsdWUKICAgICovCgogIH0sIHsKICAgIGtleTogJ2dlbmVyYXRlUmFuZG9tJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbSgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBhcnJheSA9IG5ldyBVaW50OEFycmF5KDMyKTsKICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnJheSk7CgogICAgICB2YXIgZGF0ZSA9IERhdGUubm93KCk7CiAgICAgIHZhciBkYXRlRW5jb2RlZCA9IF90aGlzLl91dGY4RW5jb2RlKGRhdGUpOwoKICAgICAgLy9leHRyYWN0IHRoZSBsZWFzdCBzaWduaWZpY2FudCA0IGJ5dGVzIGluIHRoZSBkYXRlCiAgICAgIHZhciBmaW5hbERhdGUgPSBkYXRlRW5jb2RlZC5zbGljZShkYXRlRW5jb2RlZC5sZW5ndGggLSA0LCBkYXRlRW5jb2RlZC5sZW5ndGgpOwoKICAgICAgLy8gYWRkIGluIHRoZSBmaXJzdCA0IGJ5dGVzIG9mIHRoZSBhcnJheSB0aGUgYnl0ZXMgZXh0cmFjdGVkIHByZXZpb3VzbHk7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7CiAgICAgICAgYXJyYXlbaV0gPSBmaW5hbERhdGVbaV07CiAgICAgIH0KICAgICAgcmV0dXJuIGFycmF5OwogICAgfQoKICAgIC8qKgogICAgKiBnZW5lcmF0ZXMgYSBwcmVtYXN0ZXIgc2VjcmV0IChQTVMpIG9mIDQ4IGJ5dGVzICgzODQgYml0cykgcmFuZG9tbHkKICAgICogQHJldHVybiB7Ynl0ZUFycmF5fSAgYXJyYXkgICAgcHJlbWFzdGVyIHNlY3JldCBrZXkKICAgICovCgogIH0sIHsKICAgIGtleTogJ2dlbmVyYXRlUE1TJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZVBNUygpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBhcnJheSA9IG5ldyBVaW50OEFycmF5KDQ4KTsKICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnJheSk7CiAgICAgIHJldHVybiBhcnJheTsKICAgIH0KCiAgICAvKioKICAgICogZ2VuZXJhdGVzIGEgbWFzdGVyS2V5IHNlY3JldCAoUE1TKSBvZiA0OCBieXRlcyAoMzg0IGJpdHMpIHVzaW5nIHRoZSBwcmVtYXN0ZXIgc2VjcmV0IGFuZAogICAgKiB0d28gcmFuZG9tcwogICAgKiBAcmV0dXJuIHtieXRlQXJyYXl9ICBhcnJheSAgICBtYXN0ZXIgc2VjcmV0IGtleSB3aXRoIDQ4IGJ5dGVzCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdnZW5lcmF0ZU1hc3RlclNlY3JldCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGVNYXN0ZXJTZWNyZXQoaG1hY0tleSwgZGF0YSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgdmFyIGtleSA9IG5ldyBVaW50OEFycmF5KDQ4KTsKICAgICAgICB2YXIgc2VlZCA9IGRhdGE7CgogICAgICAgIF90aGlzLl9kaWdlc3QoaG1hY0tleSkudGhlbihmdW5jdGlvbiAoZGlnZXN0ZWRLZXkpIHsKCiAgICAgICAgICBfdGhpcy5oYXNoSE1BQyhkaWdlc3RlZEtleSwgc2VlZCkudGhlbihmdW5jdGlvbiAoa2V5cGFydDApIHsKCiAgICAgICAgICAgIC8vY29weSB0aGUgZmlyc3QgMzIgYnl0ZXMgaW50byB0aGUga2V5CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzI7IGkrKykgewogICAgICAgICAgICAgIGtleVtpXSA9IGtleXBhcnQwW2ldOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBfdGhpcy5oYXNoSE1BQyhkaWdlc3RlZEtleSwgc2VlZCArIGtleXBhcnQwKTsKICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGtleXBhcnQxKSB7CgogICAgICAgICAgICAvL2NvcHkgdGhlIGZpcnN0IDE2IGJ5dGVzIHRvIHRoZSBrZXkgcmVtYWluaW5nIDE2IGJ5dGVzCiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKykgewogICAgICAgICAgICAgIGtleVtpICsgMzJdID0ga2V5cGFydDFbaV07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWdlbmVyYXRlTWFzdGVyU2VjcmV0Jywga2V5KTsKICAgICAgICAgICAgcmVzb2x2ZShrZXkpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWdlbmVyYXRlTWFzdGVyU2VjcmV0JywgZXJyKTsKICAgICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIGdlbmVyYXRlcyBib3RoIHVzZXJzIE1BQyBhbmQgZW5jcnlwdGlvbiBrZXlzLiBnZW5lcmF0ZSBhcyBvdXRwdXQgYW4gYXJyYXkKICAgICogd2l0aCA0IGJ5dGVBcnJheSBlYWNoIHdpdGggMzIgYnl0ZXMKICAgICogQHBhcmFtICB7Ynl0ZUFycmF5fSAgICAgICAgc2VjcmV0ICAgICAgIHNlY3JldCB0byBiZSB1c2VkIGluIHRoZSBITUFDIGZ1bmN0aW9uCiAgICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIGRhdGEgICAgICAgICBpbmZvcm1hdGlvbiB0byBiZSB1c2VkIGFzIHNlZWQKICAgICogQHJldHVybiB7QXJyYXk8Ynl0ZUFycmF5Pn0ga2V5ICAgICAgICAgIGFycmF5IHdpdGggdGhlIGluZm9ybWF0aW9uIHRvIGdlbmVyYXRlIGtleXMKICAgICovCgogIH0sIHsKICAgIGtleTogJ2dlbmVyYXRlS2V5cycsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGVLZXlzKGhtYWNLZXksIGRhdGEpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICB2YXIga2V5ID0gW107CiAgICAgICAgdmFyIHNlZWQgPSBkYXRhOwoKICAgICAgICAvLyBpdGVyYXRlIDQgdGltZXMgdG8gb2J0YWluIGEgMTAyNCBrZXkgc2l6ZQogICAgICAgIF90aGlzLmhhc2hITUFDKGhtYWNLZXksIHNlZWQpLnRoZW4oZnVuY3Rpb24gKGtleXBhcnQwKSB7CiAgICAgICAgICBrZXkucHVzaChrZXlwYXJ0MCk7CiAgICAgICAgICByZXR1cm4gX3RoaXMuaGFzaEhNQUMoaG1hY0tleSwgc2VlZCArIGtleXBhcnQwKTsKICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChrZXlwYXJ0MSkgewogICAgICAgICAga2V5LnB1c2goa2V5cGFydDEpOwogICAgICAgICAgcmV0dXJuIF90aGlzLmhhc2hITUFDKGhtYWNLZXksIHNlZWQgKyBrZXlwYXJ0MSk7CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoa2V5cGFydDIpIHsKICAgICAgICAgIGtleS5wdXNoKGtleXBhcnQyKTsKICAgICAgICAgIHJldHVybiBfdGhpcy5oYXNoSE1BQyhobWFjS2V5LCBzZWVkICsga2V5cGFydDIpOwogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGtleXBhcnQzKSB7CiAgICAgICAgICBrZXkucHVzaChrZXlwYXJ0Myk7CgogICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWdlbmVyYXRlS2V5cycsIGtleSk7CiAgICAgICAgICByZXNvbHZlKGtleSk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWdlbmVyYXRlS2V5cycsIGVycik7CiAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICB9KTsKCiAgICAgICAgLy9jb25zb2xlLmxvZyhobWFjS2V5LCBkYXRhKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2ltcG9ydFJTQXNpZ25LZXknLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9pbXBvcnRSU0FzaWduS2V5KHByaXZLZXkpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KCdwa2NzOCcsIC8vY2FuIGJlICdqd2snIChwdWJsaWMgb3IgcHJpdmF0ZSksICdzcGtpJyAocHVibGljIG9ubHkpLCBvciAncGtjczgnIChwcml2YXRlIG9ubHkpCiAgICAgICAgcHJpdktleSwgeyAvL3RoZXNlIGFyZSB0aGUgYWxnb3JpdGhtIG9wdGlvbnMKICAgICAgICAgIG5hbWU6ICdSU0FTU0EtUEtDUzEtdjFfNScsCiAgICAgICAgICBoYXNoOiB7IG5hbWU6ICdTSEEtMjU2JyB9IC8vY2FuIGJlICdTSEEtMScsICdTSEEtMjU2JywgJ1NIQS0zODQnLCBvciAnU0hBLTUxMicKICAgICAgICB9LCB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpCiAgICAgICAgWydzaWduJ10gLy8ndmVyaWZ5JyBmb3IgcHVibGljIGtleSBpbXBvcnQsICdzaWduJyBmb3IgcHJpdmF0ZSBrZXkgaW1wb3J0cwogICAgICAgICkudGhlbihmdW5jdGlvbiAocHJpdmF0ZUtleSkgewogICAgICAgICAgLy9yZXR1cm5zIGEgcHVibGljS2V5IChvciBwcml2YXRlS2V5IGlmIHlvdSBhcmUgaW1wb3J0aW5nIGEgcHJpdmF0ZSBrZXkpCiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tX2ltcG9ydFJTQXNpZ25LZXknLCBwcml2YXRlS2V5KTsKICAgICAgICAgIHJlc29sdmUocHJpdmF0ZUtleSk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgY29uc29sZS5lcnJvcignY3J5cHRvLV9pbXBvcnRSU0FzaWduS2V5JywgZXJyKTsKICAgICAgICAgIHJlamVjdChlcnIpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfaW1wb3J0UlNBdmVyaWZ5S2V5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBfaW1wb3J0UlNBdmVyaWZ5S2V5KHB1YktleSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoJ3Nwa2knLCAvL2NhbiBiZSAnandrJyAocHVibGljIG9yIHByaXZhdGUpLCAnc3BraScgKHB1YmxpYyBvbmx5KSwgb3IgJ3BrY3M4JyAocHJpdmF0ZSBvbmx5KQogICAgICAgIHB1YktleSwgeyAvL3RoZXNlIGFyZSB0aGUgYWxnb3JpdGhtIG9wdGlvbnMKICAgICAgICAgIG5hbWU6ICdSU0FTU0EtUEtDUzEtdjFfNScsCiAgICAgICAgICBoYXNoOiB7IG5hbWU6ICdTSEEtMjU2JyB9IC8vY2FuIGJlICdTSEEtMScsICdTSEEtMjU2JywgJ1NIQS0zODQnLCBvciAnU0hBLTUxMicKICAgICAgICB9LCB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpCiAgICAgICAgWyd2ZXJpZnknXSAvLyd2ZXJpZnknIGZvciBwdWJsaWMga2V5IGltcG9ydCwgJ3NpZ24nIGZvciBwcml2YXRlIGtleSBpbXBvcnRzCiAgICAgICAgKS50aGVuKGZ1bmN0aW9uIChwdWJsaWNLZXkpIHsKICAgICAgICAgIC8vcmV0dXJucyBhIHB1YmxpY0tleSAob3IgcHJpdmF0ZUtleSBpZiB5b3UgYXJlIGltcG9ydGluZyBhIHByaXZhdGUga2V5KQogICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLV9pbXBvcnRSU0F2ZXJpZnlLZXknLCBwdWJsaWNLZXkpOwogICAgICAgICAgcmVzb2x2ZShwdWJsaWNLZXkpOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2NyeXB0by1faW1wb3J0UlNBdmVyaWZ5S2V5JywgZXJyKTsKICAgICAgICAgIHJlamVjdChlcnIpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfaW1wb3J0UlNBZW5jcnlwdEtleScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2ltcG9ydFJTQWVuY3J5cHRLZXkocHViS2V5KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBjcnlwdG8uc3VidGxlLmltcG9ydEtleSgnc3BraScsIC8vY2FuIGJlICdqd2snIChwdWJsaWMgb3IgcHJpdmF0ZSksICdzcGtpJyAocHVibGljIG9ubHkpLCBvciAncGtjczgnIChwcml2YXRlIG9ubHkpCiAgICAgICAgcHViS2V5LCB7IC8vdGhlc2UgYXJlIHRoZSBhbGdvcml0aG0gb3B0aW9ucwogICAgICAgICAgbmFtZTogJ1JTQS1PQUVQJywKICAgICAgICAgIGhhc2g6IHsgbmFtZTogJ1NIQS0yNTYnIH0gLy9jYW4gYmUgJ1NIQS0xJywgJ1NIQS0yNTYnLCAnU0hBLTM4NCcsIG9yICdTSEEtNTEyJwogICAgICAgIH0sIHRydWUsIC8vd2hldGhlciB0aGUga2V5IGlzIGV4dHJhY3RhYmxlIChpLmUuIGNhbiBiZSB1c2VkIGluIGV4cG9ydEtleSkKICAgICAgICBbJ2VuY3J5cHQnXSAvLydlbmNyeXB0JyBvciAnd3JhcEtleScgZm9yIHB1YmxpYyBrZXkgaW1wb3J0IG9yCiAgICAgICAgLy8nZGVjcnlwdCcgb3IgJ3Vud3JhcEtleScgZm9yIHByaXZhdGUga2V5IGltcG9ydHMKICAgICAgICApLnRoZW4oZnVuY3Rpb24gKHB1YmxpY0tleSkgewogICAgICAgICAgLy9yZXR1cm5zIGEgcHVibGljS2V5IChvciBwcml2YXRlS2V5IGlmIHlvdSBhcmUgaW1wb3J0aW5nIGEgcHJpdmF0ZSBrZXkpCiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tX2ltcG9ydFJTQWVuY3J5cHRLZXknLCBwdWJsaWNLZXkpOwogICAgICAgICAgcmVzb2x2ZShwdWJsaWNLZXkpOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2NyeXB0by1faW1wb3J0UlNBZW5jcnlwdEtleScsIGVycik7CiAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2ltcG9ydFJTQWRlY3J5cHRLZXknLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9pbXBvcnRSU0FkZWNyeXB0S2V5KHByaXZLZXkpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KCdwa2NzOCcsIC8vY2FuIGJlICdqd2snIChwdWJsaWMgb3IgcHJpdmF0ZSksICdzcGtpJyAocHVibGljIG9ubHkpLCBvciAncGtjczgnIChwcml2YXRlIG9ubHkpCiAgICAgICAgcHJpdktleSwgeyAvL3RoZXNlIGFyZSB0aGUgYWxnb3JpdGhtIG9wdGlvbnMKICAgICAgICAgIG5hbWU6ICdSU0EtT0FFUCcsCiAgICAgICAgICBoYXNoOiB7IG5hbWU6ICdTSEEtMjU2JyB9IC8vY2FuIGJlICdTSEEtMScsICdTSEEtMjU2JywgJ1NIQS0zODQnLCBvciAnU0hBLTUxMicKICAgICAgICB9LCB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpCiAgICAgICAgWydkZWNyeXB0J10gLy8nZW5jcnlwdCcgb3IgJ3dyYXBLZXknIGZvciBwdWJsaWMga2V5IGltcG9ydCBvcgogICAgICAgIC8vJ2RlY3J5cHQnIG9yICd1bndyYXBLZXknIGZvciBwcml2YXRlIGtleSBpbXBvcnRzCiAgICAgICAgKS50aGVuKGZ1bmN0aW9uIChwcml2YXRlS2V5KSB7CiAgICAgICAgICAvL3JldHVybnMgYSBwdWJsaWNLZXkgKG9yIHByaXZhdGVLZXkgaWYgeW91IGFyZSBpbXBvcnRpbmcgYSBwcml2YXRlIGtleSkKICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1faW1wb3J0UlNBZGVjcnlwdEtleScsIHByaXZhdGVLZXkpOwogICAgICAgICAgcmVzb2x2ZShwcml2YXRlS2V5KTsKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKCdjcnlwdG8tX2ltcG9ydFJTQWRlY3J5cHRLZXknLCBlcnIpOwogICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ2NvbmNhdFBNU3dpdGhSYW5kb21zJywKICAgIHZhbHVlOiBmdW5jdGlvbiBjb25jYXRQTVN3aXRoUmFuZG9tcyhwbXMsIHRvUmFuZG9tLCBmcm9tUmFuZG9tKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgZmluYWxLZXkgPSBuZXcgVWludDhBcnJheShwbXMubGVuZ3RoICsgdG9SYW5kb20ubGVuZ3RoICsgZnJvbVJhbmRvbS5sZW5ndGgpOwoKICAgICAgLy8gYWRkIFByZW1hc3RlcktleQogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBtcy5sZW5ndGg7IGkrKykgewogICAgICAgIGZpbmFsS2V5W2ldID0gcG1zW2ldOwogICAgICB9CgogICAgICAvL2FkZCB0byByYW5kb20KICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHRvUmFuZG9tLmxlbmd0aDsgX2krKykgewogICAgICAgIGZpbmFsS2V5W19pICsgcG1zLmxlbmd0aF0gPSBwbXNbX2ldOwogICAgICB9CgogICAgICAvL2FkZCBmcm9tIHJhbmRvbQogICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBmcm9tUmFuZG9tLmxlbmd0aDsgX2kyKyspIHsKICAgICAgICBmaW5hbEtleVtfaTIgKyBwbXMubGVuZ3RoICsgdG9SYW5kb20ubGVuZ3RoXSA9IHBtc1tfaTJdOwogICAgICB9CgogICAgICByZXR1cm4gZmluYWxLZXk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2dlbmVyYXRlMjU2Yml0S2V5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2VuZXJhdGUyNTZiaXRLZXkoKSB7CiAgICAgIHZhciBhcnJheSA9IG5ldyBVaW50OEFycmF5KDMyKTsKICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnJheSk7CgogICAgICByZXR1cm4gYXJyYXk7CiAgICB9CgogICAgLyoqCiAgICAqIGltcG9ydHMgdGhlIHNlY3JldCB0byB0aGUgSE1BQyBmdW5jdGlvbgogICAgKiBAcGFyYW0gIHtieXRlQXJyYXl9ICAgYXJyYXlCdWZmZXIgICAgIGJ5dGVzIHRvIGltcG9ydCBhcyBrZXkKICAgICogQHJldHVybiB7SlNPTn0gICAgICAga2V5ICAgICAgICAgICAgICBrZXkgcmVhZHkgdG8gYmUgdXNlZCBpbiB0aGUgSE1BQyBjcnlwdG9ncmFwaGljIGZ1bmN0aW9uCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdfaW1wb3J0SE1BQ2tleScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2ltcG9ydEhNQUNrZXkoYXJyYXlCdWZmZXIpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBfdGhpcy5fZGlnZXN0KGFycmF5QnVmZmVyKS50aGVuKGZ1bmN0aW9uIChrZXkpIHsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLmltcG9ydEtleSgncmF3JywgLy9jYW4gYmUgJ2p3aycgb3IgJ3JhdycKICAgICAgICAgIGtleSwgeyAvL3RoaXMgaXMgdGhlIGFsZ29yaXRobSBvcHRpb25zCiAgICAgICAgICAgIG5hbWU6ICdITUFDJywKICAgICAgICAgICAgaGFzaDogeyBuYW1lOiAnU0hBLTI1NicgfSwgLy9jYW4gYmUgJ1NIQS0xJywgJ1NIQS0yNTYnLCAnU0hBLTM4NCcsIG9yICdTSEEtNTEyJwogICAgICAgICAgICBsZW5ndGg6IDI1NiAvL29wdGlvbmFsLCBpZiB5b3Ugd2FudCB5b3VyIGtleSBsZW5ndGggdG8gZGlmZmVyIGZyb20gdGhlIGhhc2ggZnVuY3Rpb24ncyBibG9jayBsZW5ndGgKICAgICAgICAgIH0sIHRydWUsIC8vd2hldGhlciB0aGUga2V5IGlzIGV4dHJhY3RhYmxlIChpLmUuIGNhbiBiZSB1c2VkIGluIGV4cG9ydEtleSkKICAgICAgICAgIFsnc2lnbicsICd2ZXJpZnknXSAvL2NhbiBiZSBhbnkgY29tYmluYXRpb24gb2YgJ3NpZ24nIGFuZCAndmVyaWZ5JwogICAgICAgICAgKS50aGVuKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICAgICAgLy9yZXR1cm5zIHRoZSBzeW1tZXRyaWMga2V5CiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1faW1wb3J0SE1BQ2tleScsIGtleSk7CiAgICAgICAgICAgIHJlc29sdmUoa2V5KTsKICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2RpZ2VzdCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2RpZ2VzdCh2YWx1ZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgY3J5cHRvLnN1YnRsZS5kaWdlc3QoewogICAgICAgICAgbmFtZTogJ1NIQS0yNTYnCiAgICAgICAgfSwgdmFsdWUgLy9UaGUgZGF0YSB5b3Ugd2FudCB0byBoYXNoIGFzIGFuIEFycmF5QnVmZmVyCiAgICAgICAgKS50aGVuKGZ1bmN0aW9uIChoYXNoKSB7CiAgICAgICAgICAvL3JldHVybnMgdGhlIGhhc2ggYXMgYW4gQXJyYXlCdWZmZXIKICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1kaWdlc3QnLCBuZXcgVWludDhBcnJheShoYXNoKSk7CiAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KGhhc2gpKTsKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7CiAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2ltcG9ydEFFU2tleScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2ltcG9ydEFFU2tleShhcnJheUJ1ZmZlcikgewogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBjcnlwdG8uc3VidGxlLmltcG9ydEtleSgncmF3JywgLy9jYW4gYmUgJ2p3aycgb3IgJ3JhdycKICAgICAgICBhcnJheUJ1ZmZlciwgeyAvL3RoaXMgaXMgdGhlIGFsZ29yaXRobSBvcHRpb25zCiAgICAgICAgICBuYW1lOiAnQUVTLUNCQycKICAgICAgICB9LCB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpCiAgICAgICAgWydlbmNyeXB0JywgJ2RlY3J5cHQnXSAvL2NhbiBiZSAnZW5jcnlwdCcsICdkZWNyeXB0JywgJ3dyYXBLZXknLCBvciAndW53cmFwS2V5JwogICAgICAgICkudGhlbihmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgICAvL3JldHVybnMgdGhlIHN5bW1ldHJpYyBrZXkKICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1pbXBvcnRBRVNrZXknLCBrZXkpOwogICAgICAgICAgcmVzb2x2ZShrZXkpOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2NyeXB0by1pbXBvcnRBRVNrZXknLCBlcnIpOwogICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ191dGY4RW5jb2RlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfdXRmOEVuY29kZShzKSB7CiAgICAgIHJldHVybiBuZXcgVGV4dEVuY29kZXIoJ3V0Zi04JykuZW5jb2RlKHMpOwogICAgfQogIH0sIHsKICAgIGtleTogJ191dGY4RGVjb2RlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfdXRmOERlY29kZShzKSB7CiAgICAgIHJldHVybiBuZXcgVGV4dERlY29kZXIoJ3V0Zi04JykuZGVjb2RlKHMpOwogICAgfQogIH1dKTsKICByZXR1cm4gQ3J5cHRvOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBDcnlwdG87Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7ImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlIjoxMCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxMywiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxNH1dLDQxODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoqCiogZmFrZSBjbGFzcyBmb3IgdGhlIGd1aSB0byBzZWxlY3QgdGhlIGlkZW50aXR5LAoqIFRPRE8gcmVwbGFjZSB3aXRoIHRoZSBwcm9wZXIgaWRlbnRpdHkgR1VJCioKKi8KCnZhciBHdWlGYWtlID0gZnVuY3Rpb24gR3VpRmFrZSh1cmwsIG1lc3NhZ2VCdXMpIHsKICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBHdWlGYWtlKTsKCiAgdmFyIF90aGlzID0gdGhpczsKCiAgX3RoaXMuX3VybCA9IHVybDsKICBfdGhpcy5fd2FpdFRpbWUgPSAxMDAwMDsKICBfdGhpcy5fbWVzc2FnZUJ1cyA9IG1lc3NhZ2VCdXM7CgogIF90aGlzLl9tZXNzYWdlQnVzLmFkZExpc3RlbmVyKF90aGlzLl91cmwsIGZ1bmN0aW9uIChtc2cpIHsKCiAgICBjb25zb2xlLmxvZygnaGVyZSEnKTsKICAgIHZhciByZXBseU1zZyA9IHsgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgdG86IG1zZy5mcm9tLCBmcm9tOiBtc2cudG8sIGJvZHk6IHsgdmFsdWU6IG1zZy5ib2R5LnZhbHVlICsgJy1jaGFuZ2VkJyB9IH07CgogICAgLy8gdG8gdGVzdCBvbiB0aGUgaWRlbnRpdHkgc2lkZSB0aGUgbGlzdGVuZXIgd2l0aG91dCB0aGUgdGltZW91dAogICAgLy8gY2FuIHJlcHJlc2VudCB0aGUgdGltZSB0aGUgdXNlciB0YWtlcyB0byBjaG9vc2UgYW5kIGlkZW50aXR5CiAgICBpZiAobXNnLmJvZHkudmFsdWUgPT09ICd3YWl0JykgewoKICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UocmVwbHlNc2cpOwogICAgICB9LCBfdGhpcy5fd2FpdFRpbWUpOwogICAgfSBlbHNlIHsKICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UocmVwbHlNc2cpOwogICAgfQogIH0pOwp9OwoKZXhwb3J0cy5kZWZhdWx0ID0gR3VpRmFrZTsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxM31dLDQxOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8qKgoqIFRoZSBJZGVudGl0eSBEYXRhIE1vZGVsIGlzIHVzZWQgdG8gbW9kZWwgdGhlIHJlVEhJTksgVXNlciBlbnRpdHkuIFRoZSBJZGVudGl0eSBkYXRhIG1vZGVsIGlzIGhhbmRsZWQgYnkgSWRlbnRpdHkgTWFuYWdlbWVudCBmdW5jdGlvbmFsaXR5LgoqCiovCgp2YXIgSWRlbnRpdHkgPSBmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gSWRlbnRpdHkoZ3VpZCwgdHlwZSkgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgSWRlbnRpdHkpOwoKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgX3RoaXMuZ3VpZCA9IGd1aWQ7CiAgICBfdGhpcy50eXBlID0gdHlwZTsKICAgIF90aGlzLmlkZW50aWZpZXJzTGlzdCA9IHt9OwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoSWRlbnRpdHksIFt7CiAgICBrZXk6ICdhZGRJZGVudGl0eScsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkSWRlbnRpdHkoaWRlbnRpZmllcikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgaWRlbnRpdHlJbmZvcm1hdGlvbiA9IHsKICAgICAgICBpZEFzc2VydGlvbjogJycsCiAgICAgICAgc2VydmljZUFkZHJlc3M6ICcnLAogICAgICAgIGF1dGhlbnRpY2F0aW9uRGF0YTogJycsCiAgICAgICAgYXV0aG9yaXNhdGlvbkRhdGE6ICcnLAogICAgICAgIHVzZXJQcm9maWxlOiAnJwogICAgICB9OwogICAgICBfdGhpcy5pZGVudGlmaWVyc0xpc3RbaWRlbnRpZmllcl0gPSBpZGVudGl0eUluZm9ybWF0aW9uOwogICAgfQogIH0sIHsKICAgIGtleTogJ2FkZElkQXNzZXJ0aW9uJywKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRJZEFzc2VydGlvbihpZGVudGlmaWVyLCBhc3NlcnRpb24sIGlkcCwgc2NvcGUpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBuZXdJZEFzc2VydGlvbiA9IG5ldyBJZEFzc2VydGlvbihhc3NlcnRpb24sIGlkcCwgc2NvcGUpOwoKICAgICAgX3RoaXMuaWRBc3NlcnRpb25MaXN0LnB1c2gobmV3SWRBc3NlcnRpb24pOwogICAgfQogIH1dKTsKICByZXR1cm4gSWRlbnRpdHk7Cn0oKTsKCnZhciBJZEFzc2VydGlvbiA9IGZ1bmN0aW9uIElkQXNzZXJ0aW9uKGFzc2VydGlvbiwgaWRwLCBzY29wZSkgewogICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIElkQXNzZXJ0aW9uKTsKCiAgdmFyIF90aGlzID0gdGhpczsKCiAgX3RoaXMuYXNzZXJ0aW9uID0gYXNzZXJ0aW9uOwogIF90aGlzLmlkcCA9IGlkcDsKICBfdGhpcy5zY29wZSA9IHNjb3BlOwp9OwoKdmFyIElkVmFsaWRhdGlvbiA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBJZFZhbGlkYXRpb24oaWRlbnRpdHksIGNvbnRlbnRzKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBJZFZhbGlkYXRpb24pOwoKICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICBfdGhpcy5pZGVudGl0eSA9IGlkZW50aXR5OwogICAgX3RoaXMuY29udGVudHMgPSBjb250ZW50czsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKElkVmFsaWRhdGlvbiwgW3sKICAgIGtleTogJ3ZhbGlkYXRlcycsCiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsaWRhdGVzKGlkZW50aXR5LCBjb250ZW50cykgewogICAgICAvL1RPRE8gaW1wbGVtZW50IHRoZSBsb2dpYwoKICAgIH0KICB9XSk7CiAgcmV0dXJuIElkVmFsaWRhdGlvbjsKfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gSWRlbnRpdHk7Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7ImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTMsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTR9XSw0MjA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX3N0cmluZ2lmeSA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeScpOwoKdmFyIF9zdHJpbmdpZnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RyaW5naWZ5KTsKCnZhciBfcHJvbWlzZSA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlJyk7Cgp2YXIgX3Byb21pc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvbWlzZSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy91dGlscy5qcycpOwoKdmFyIF9JZGVudGl0eSA9IHJlcXVpcmUoJy4vSWRlbnRpdHknKTsKCnZhciBfSWRlbnRpdHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSWRlbnRpdHkpOwoKdmFyIF9DcnlwdG8gPSByZXF1aXJlKCcuL0NyeXB0bycpOwoKdmFyIF9DcnlwdG8yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ3J5cHRvKTsKCnZhciBfR3VpRmFrZSA9IHJlcXVpcmUoJy4vR3VpRmFrZScpOwoKdmFyIF9HdWlGYWtlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0d1aUZha2UpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8qKgoqCiogVGhlIElkZW50aXR5IE1vZHVsZSAoSWQgTW9kdWxlKSBpcyB0aGUgY29tcG9uZW50IHJlc3BvbnNpYmxlIGZvciBoYW5kbGluZyB0aGUKKiB1c2VyIGlkZW50aXR5IGFuZCB0aGUgYXNzb2NpYXRpb24gb2YgdGhpcyBpZGVudGl0eSB3aXRoIHRoZSBIeXBlcnR5IGluc3RhbmNlcywKKiBpbiBvcmRlciB0byBtYWtlIEh5cGVydHkgaW5zdGFuY2VzIGlkZW50aWZpYWJsZS4gVGhlIGlkZW50aXR5IGluIHRoZSByZVRISU5LIHByb2plY3QKKiBpcyBub3QgZml4ZWQgdG8gYSB1bmlxdWUgSWRlbnRpdHkgU2VydmljZSBQcm92aWRlciwgYnV0IG9idGFpbmVkIHRocm91Z2ggc2V2ZXJhbAoqIGRpZmZlcmVudCBJZGVudGl0eSBzb3VyY2VzLiBXaXRoIHRoaXMgYXBwcm9hY2gsIHRoZSBJZCBNb2R1bGUgcHJvdmlkZXMgdG8gdGhlIHVzZXIgdGhlCiogb3B0aW9uIHRvIGNob29zZSB0aGUgcHJlZmVycmVkIG1ldGhvZCBmb3IgYXV0aGVudGljYXRpb24uCiogVGhpcyBtb2R1bGUgd2lsbCB0aHVzIGFibGUgdG8gc3VwcG9ydCBtdWx0aXBsZSBJZGVudGl0eSBhY3F1aXNpdGlvbiBtZXRob2RzLAoqIHN1Y2ggYXMgT3BlbklEIGNvbm5lY3QgMS4wLCBLZXJiZXJvcyBTeXN0ZW0sIG9yIGF1dGhlbnRpY2F0aW9uIHRocm91Z2ggc21hcnQgY2FyZHMuCiogRm9yIGV4YW1wbGUsIGEgdXNlciB3aXRoIGEgR29vZ2xlIGFjY291bnQgY2FuIHVzZSB0aGUgR29vZ2xlIGFzIGFuIElkZW50aXR5IFByb3ZpZGVyIHRvIHByb3ZpZGUgSWRlbnRpdHkgVG9rZW5zLAoqICB3aGljaCBjYW4gYmUgdXNlZCBieSB0aGUgSWRlbnRpdHkgTW9kdWxlIHRvIGFzc29jaWF0ZSBpdCB3aXRoIGEgSHlwZXJ0eSBpbnN0YW5jZS4KKgoqIFRoZSBJZGVudGl0eSBNb2R1bGUgdXNlcyBhIG5vZGUgcGFja2FnZSwgdGhlIEhlbGxvSlMsIHdoaWNoIGlzIGEgY2xpZW50LXNpZGUgSmF2YVNjcmlwdCBBUEkgZm9yIGF1dGhlbnRpY2F0aW9uCiogdGhhdCBmYWNpbGl0YXRlcyB0aGUgcmVxdWVzdHMgZm9yIHRoZSBPcGVuSUQgY29ubmVjdCBwcm90b2NvbC4gVGhpcyBtZXRob2QgYWxsb3dzIGZvciBzb21lIGFic3RyYWN0aW9uCiogd2hlbiBtYWtpbmcgcmVxdWVzdHMgZm9yIGRpZmZlcmVudCBJZGVudGl0eSBQcm92aWRlcnMsIHN1Y2ggYXMgT3BlbklEIGNvbm5lY3QgdXNlZCBieSBHb29nbGUsIEZhY2Vib29rLCBNaWNyb3NvZnQsIGZvciBleGFtcGxlLgoqCiogV2hlbiBhIHJlcXVlc3QgZm9yIGEgdXNlciBpZGVudGl0eSBpcyBtYWRlIHVzaW5nIHRoZSBtZXRob2QgbG9naW5XaXRoUlAoaWRlbnRpZmllciwgc2NvcGUpLAoqIHRoaXMgbWV0aG9kIHdpbGwgYW5hbHlzZSB0aGUgSWRlbnRpdHkgUHJvdmlkZXIgY2hvc2VuIHRvIG9idGFpbiBhbiBpZGVudGl0eSBhbmQgd2lsbCB1c2UgdGhlIEhlbGxvSlMgbm9kZSBwYWNrYWdlCiogd2l0aCB0aGUgc2VsZWN0ZWQgSWRlbnRpdHkgUHJvdmlkZXIgYW5kIGlkZW50aXR5IHNjb3BlLiBBZnRlciB0aGUgSGVsbG9KUyByZXF1ZXN0IGZvciBhbiBBY2Nlc3MgVG9rZW4KKiB0byB0aGUgSWRlbnRpdHkgUHJvdmlkZXJzLCB0aGUgdXNlciB3aWxsIGJlIHByb21wdGVkIHRvIGF1dGhlbnRpY2F0ZSB0b3dhcmRzIHRoZSBJZGVudGl0eSBQcm92aWRlci4KKiBVcG9uIHJlY2VpdmluZyB0aGUgQWNjZXNzIFRva2VuLCB0aGlzIHRva2VuIGlzIHZhbGlkYXRlZCB3aXRoIGEgUkVTVGZ1bCB3ZWIgc2VydmljZSByZXF1ZXN0IHRvIGFuIGVuZHBvaW50Ciogb24gdGhlIElkZW50aXR5IFByb3ZpZGVyIEF1dGhvcml6YXRpb24gU2VydmVyLCBhbmQgYWZ0ZXIgdGhlIHZhbGlkYXRpb24gaXMgZG9uZSwKKiBhbiBJRCB0b2tlbiBpcyBvYnRhaW5lZCB3aXRoIHRoZSBpbmZvcm1hdGlvbiBhY2NvcmRpbmcgdG8gdGhlIHNjb3BlIHJlcXVpcmVkLgoqIFRoaXMgSUQgdG9rZW4gaXMgdGhlbiBwcmVzZXJ2ZWQgaW4gdGhpcyBtb2R1bGUgdGhhdCBjYW4gb2J0YWluZWQgdGhyb3VnaCB0aGUgZ2V0SWRlbnRpdGllcygpCiogYW5kIGlzIHBhc3NlZCBhcyByZXR1cm4gdmFsdWUgb2YgdGhlIGxvZ2luV2l0aFJQIGZ1bmN0aW9uLiBUaGUgbWV0aG9kcyBnZW5lcmF0ZUFzc2VydGlvbiBhbmQgdmFsaWRhdGVBc3NlcnRpb24gaGF2ZSBub3QgeWV0IGJlZW4gZGV2ZWxvcGVkLgoqCiovCgp2YXIgSWRlbnRpdHlNb2R1bGUgPSBmdW5jdGlvbiAoKSB7CgogIC8qKgogICogVGhpcyBpcyB0aGUgY29uc3RydWN0b3IgdG8gaW5pdGlhbGlzZSB0aGUgSWRlbnRpdHkgTW9kdWxlIGl0IGRvZXMgbm90IHJlcXVpcmUgYW55IGlucHV0LgogICovCgogIGZ1bmN0aW9uIElkZW50aXR5TW9kdWxlKHJ1bnRpbWVVUkwpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIElkZW50aXR5TW9kdWxlKTsKCiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIGlmICghcnVudGltZVVSTCkgdGhyb3cgbmV3IEVycm9yKCdydW50aW1lVVJMIGlzIG1pc3NpbmcuJyk7CgogICAgX3RoaXMuX3J1bnRpbWVVUkwgPSBydW50aW1lVVJMOwogICAgX3RoaXMuX2lkbVVSTCA9IF90aGlzLl9ydW50aW1lVVJMICsgJy9pZG0nOwogICAgX3RoaXMuX2d1aVVSTCA9IF90aGlzLl9ydW50aW1lVVJMICsgJy9pZGVudGl0eS1ndWknOwoKICAgIF90aGlzLl9kb21haW4gPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkoX3RoaXMuX3J1bnRpbWVVUkwpLmRvbWFpbjsKCiAgICAvL3RvIHN0b3JlIGl0ZW1zIHdpdGggdGhpcyBmb3JtYXQ6IHtpZGVudGl0eTogaWRlbnRpdHlVUkwsIHRva2VuOiB0b2tlbklEfQogICAgX3RoaXMuaWRlbnRpdGllcyA9IFtdOwogICAgdmFyIG5ld0lkZW50aXR5ID0gbmV3IF9JZGVudGl0eTIuZGVmYXVsdCgnZ3VpZCcsICdIVU1BTicpOwogICAgX3RoaXMuaWRlbnRpdHkgPSBuZXdJZGVudGl0eTsKICAgIF90aGlzLmNyeXB0byA9IG5ldyBfQ3J5cHRvMi5kZWZhdWx0KCk7CgogICAgLy9zdG9yZXMgdGhlIGFzc29jaWF0aW9uIG9mIHRoZSBkYXRhT2JqZWN0IGFuZCB0aGUgSHlwZXJ0eSByZWdpc3RlcmVkIHdpdGhpbgogICAgX3RoaXMuZGF0YU9iamVjdHNJZGVudGl0eSA9IHt9OwoKICAgIC8vIGhhc2hUYWJsZSB0byBzdG9yZSBhbGwgdGhlIGNyeXB0byBpbmZvcm1hdGlvbiBiZXR3ZWVuIHR3byBoeXBlcnRpZXMKICAgIF90aGlzLmNoYXRLZXlzID0ge307CgogICAgLy8gaGFzaFRhYmxlIHRvIHN0b3JlIHRoZSBzeW1tZXRyaWMga2V5cyB0byBiZSB1c2VkIGluIHRoZSBjaGF0IGdyb3VwCiAgICBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXMgPSB7fTsKCiAgICAvL2ZhaWxzYWZlIHRvIGVuYWJsZS9kaXNhYmxlIGFsbCB0aGUgY3JpcHRvZ3JhcGhpYyBmdW5jdGlvbnMKICAgIF90aGlzLmlzVG9Vc2VFbmNyeXB0aW9uID0gdHJ1ZTsKCiAgICAvLyB2ZXJpZmljYXRpb24gb2Ygbm9kZUpTLCBhbmQgaW4gY2FzZSBpdCBpcyBub2RlSlMgdGhlbiBkaXNhYmxlIGVuY3J5cHRpb24KICAgIC8vIFRPRE8gaW1wcm92ZSBsYXRlciwgdGhpcyBleGlzdHMgYmVjYXVzZSB0aGUgY3J5cHRvIGxpYiB1c2VzIGJyb3dzZXIgY3J5cHRvZ3JhcGhpYyBtZXRob2RzCiAgICAvL190aGlzLmlzVG9Vc2VFbmNyeXB0aW9uID0gKHdpbmRvdykgPyB0cnVlIDogZmFsc2U7CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShJZGVudGl0eU1vZHVsZSwgW3sKICAgIGtleTogJ3Rlc3QnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRlc3Qoc3RyaW5nKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBtZXNzYWdlID0geyB0eXBlOiAnY3JlYXRlJywgdG86IF90aGlzLl9ndWlVUkwsIGZyb206IF90aGlzLl9pZG1VUkwsIGJvZHk6IHsgdmFsdWU6IHN0cmluZyB9IH07CgogICAgICB2YXIgaWQgPSBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlKTsKCiAgICAgIF90aGlzLl9tZXNzYWdlQnVzLmFkZFJlc3BvbnNlTGlzdGVuZXIoX3RoaXMuX2lkbVVSTCwgaWQsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICBjb25zb2xlLmxvZygnaGVyZSEhJywgbXNnLmJvZHkudmFsdWUpOwogICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnJlbW92ZVJlc3BvbnNlTGlzdGVuZXIoX3RoaXMuX2lkbVVSTCwgaWQpOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogcmV0dXJuIHRoZSBtZXNzYWdlQnVzIGluIHRoaXMgUmVnaXN0cnkKICAgICogQHBhcmFtIHtNZXNzYWdlQnVzfSAgICAgICAgICAgbWVzc2FnZUJ1cwogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2V0SWRlbnRpdGllcycsCgoKICAgIC8qKgogICAgKiBGdW5jdGlvbiB0byByZXR1cm4gYWxsIHRoZSBpZGVudGl0aWVzIHJlZ2lzdGVyZWQgd2l0aGluIGEgc2Vzc2lvbiBieSBhIHVzZXIuCiAgICAqIFRoZXNlIGlkZW50aXRpZXMgYXJlIHJldHVybmVkIGluIGFuIGFycmF5IGNvbnRhaW5pbmcgYSBKU09OIHBhY2thZ2UgZm9yIGVhY2ggdXNlciBpZGVudGl0eS4KICAgICogQHJldHVybiB7QXJyYXk8SWRlbnRpdGllcz59ICAgICAgICAgSWRlbnRpdGllcwogICAgKi8KICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJZGVudGl0aWVzKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gX3RoaXMuaWRlbnRpdGllczsKICAgIH0KCiAgICAvKioKICAgICogZ2V0cyBhbGwgdGhlIGluZm9ybWF0aW9uIGZyb20gYSBnaXZlbiB1c2VyVVJMCiAgICAqIEBwYXJhbSAge1N0cmluZ30gIHVzZXJVUkwgICAgIHVzZXIgdXJsCiAgICAqIEByZXR1cm4ge0pTT059ICAgIGlkZW50aXR5ICAgIGlkZW50aXR5IGJ1bmRsZSBmcm9tIHRoZSB1c2VyVVJMCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdnZXRJZGVudGl0eScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SWRlbnRpdHkodXNlclVSTCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgZm9yICh2YXIgaW5kZXggaW4gX3RoaXMuaWRlbnRpdGllcykgewoKICAgICAgICB2YXIgaWRlbnRpdHkgPSBfdGhpcy5pZGVudGl0aWVzW2luZGV4XTsKICAgICAgICBpZiAoaWRlbnRpdHkuaWRlbnRpdHkgPT09IHVzZXJVUkwpIHsKICAgICAgICAgIHJldHVybiBpZGVudGl0eTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHRocm93ICdpZGVudGl0eSBub3QgZm91bmQnOwogICAgfQogIH0sIHsKICAgIGtleTogJ2dldElkZW50aXR5T2ZIeXBlcnR5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJZGVudGl0eU9mSHlwZXJ0eShoeXBlcnR5VVJMKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICB2YXIgc3BsaXRVUkwgPSBoeXBlcnR5VVJMLnNwbGl0KCc6Ly8nKTsKICAgICAgICBpZiAoc3BsaXRVUkxbMF0gIT09ICdoeXBlcnR5JykgewogICAgICAgICAgX3RoaXMuX2dldEh5cGVydHlGcm9tRGF0YU9iamVjdChoeXBlcnR5VVJMKS50aGVuKGZ1bmN0aW9uIChyZXR1cm5lZEh5cGVydHlVUkwpIHsKICAgICAgICAgICAgdmFyIHVzZXJVUkwgPSBfdGhpcy5yZWdpc3RyeS5nZXRIeXBlcnR5T3duZXIocmV0dXJuZWRIeXBlcnR5VVJMKTsKICAgICAgICAgICAgaWYgKHVzZXJVUkwpIHsKCiAgICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggaW4gX3RoaXMuaWRlbnRpdGllcykgewogICAgICAgICAgICAgICAgdmFyIGlkZW50aXR5ID0gX3RoaXMuaWRlbnRpdGllc1tpbmRleF07CiAgICAgICAgICAgICAgICBpZiAoaWRlbnRpdHkuaWRlbnRpdHkgPT09IHVzZXJVUkwpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoaWRlbnRpdHkubWVzc2FnZUluZm8pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdubyBpZGVudGl0eSB3YXMgZm91bmQgJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2YXIgdXNlclVSTCA9IF90aGlzLnJlZ2lzdHJ5LmdldEh5cGVydHlPd25lcihoeXBlcnR5VVJMKTsKICAgICAgICAgIGlmICh1c2VyVVJMKSB7CgogICAgICAgICAgICBmb3IgKHZhciBpbmRleCBpbiBfdGhpcy5pZGVudGl0aWVzKSB7CiAgICAgICAgICAgICAgdmFyIGlkZW50aXR5ID0gX3RoaXMuaWRlbnRpdGllc1tpbmRleF07CiAgICAgICAgICAgICAgaWYgKGlkZW50aXR5LmlkZW50aXR5ID09PSB1c2VyVVJMKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShpZGVudGl0eS5tZXNzYWdlSW5mbyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdubyBpZGVudGl0eSB3YXMgZm91bmQuJyk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogRnVuY3Rpb24gdG8gcmV0dXJuIGFsbCB0aGUgdXNlcnMgVVJMcyByZWdpc3RlcmVkIHdpdGhpbiBhIHNlc3Npb24KICAgICogVGhlc2UgdXNlcnMgVVJMcyBhcmUgcmV0dXJuZWQgaW4gYW4gYXJyYXkgb2Ygc3RyaW5ncy4KICAgICogQHBhcmFtICB7Qm9vbGVhbn0gIGVtYWlsRm9ybWF0IChPcHRpb25hbCkgICBib29sZWFuIHRvIGluZGljYXRlIHRvIHJldHVybiBpbiBlbWFpbCBmb3JtYXQKICAgICogQHJldHVybiB7QXJyYXk8U3RyaW5nPn0gICAgICAgICB1c2VycwogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2V0VXNlcnNJRHMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFVzZXJzSURzKGVtYWlsRm9ybWF0KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciB1c2VycyA9IFtdOwoKICAgICAgLy9pZiByZXF1ZXN0IGNvbWVzIHdpdGggdGhlIGVtYWlsRm9ybWF0IG9wdGlvbiwgdGhlbiBjb252ZXJ0IHVybCB0byBlbWFpbCBmb3JtYXQKICAgICAgdmFyIGNvbnZlcnRlciA9IGVtYWlsRm9ybWF0ID8gX3V0aWxzLmdldFVzZXJFbWFpbEZyb21VUkwgOiBmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgIH07CgogICAgICBmb3IgKHZhciBpbmRleCBpbiBfdGhpcy5pZGVudGl0aWVzKSB7CiAgICAgICAgdmFyIGlkZW50aXR5ID0gX3RoaXMuaWRlbnRpdGllc1tpbmRleF07CiAgICAgICAgdXNlcnMucHVzaChjb252ZXJ0ZXIoaWRlbnRpdHkuaWRlbnRpdHkpKTsKICAgICAgfQogICAgICByZXR1cm4gdXNlcnM7CiAgICB9CgogICAgLyoqCiAgICAqIEZ1bmN0aW9uIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgSWRlbnRpdHkgd2l0aGluIGEgc2Vzc2lvbgogICAgKiBAcmV0dXJuIHtJZGVudGl0eX0gICAgICAgIGlkZW50aXR5ICAgICAgICAgaWRlbnRpdHkKICAgICovCgogIH0sIHsKICAgIGtleTogJ2dldEN1cnJlbnRJZGVudGl0eScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q3VycmVudElkZW50aXR5KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gX3RoaXMuY3VycmVudElkZW50aXR5OwogICAgfQoKICAgIC8qKgogICAgKiBGdW5jdGlvbiB0byBzZXQgdGhlIGN1cnJlbnQgSWRlbnRpdHkgd2l0aCBhIGdpdmVuIElkZW50aXR5CiAgICAqIEBwYXJhbSB7SWRlbnRpdHl9ICAgICAgICBpZGVudGl0eSAgICAgICAgIGlkZW50aXR5CiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdzZXRDdXJyZW50SWRlbnRpdHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldEN1cnJlbnRJZGVudGl0eShpZGVudGl0eSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICBfdGhpcy5jdXJyZW50SWRlbnRpdHkgPSBpZGVudGl0eTsKICAgIH0KCiAgICAvKioKICAgICogRnVuY3Rpb24gdG8gcmVtb3ZlIHRoZSBhbiBpZGVudGl0eSBmcm9tIHRoZSBJZGVudGl0aWVzIGFycmF5CiAgICAqIEBwYXJhbSB7U3RyaW5nfSAgICB1c2VyVVJMICAgICAgdXNlclVSTAogICAgKi8KCiAgfSwgewogICAga2V5OiAnZGVsZXRlSWRlbnRpdHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZUlkZW50aXR5KHVzZXJVUkwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGZvciAodmFyIGlkZW50aXR5IGluIF90aGlzLmlkZW50aXRpZXMpIHsKICAgICAgICBpZiAoX3RoaXMuaWRlbnRpdGllc1tpZGVudGl0eV0uaWRlbnRpdHkgPT09IHVzZXJVUkwpIHsKICAgICAgICAgIF90aGlzLmlkZW50aXRpZXMuc3BsaWNlKGlkZW50aXR5LCAxKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICogRnVuY3Rpb24gdGhhdCByZXNvbHZlIGFuZCBjcmVhdGUgdGhlIGRvbWFpblVSTCBpbiBjYXNlIGl0IGlzIHByb3ZpZGVkIG9uZS4gSWYgbm90LCByZXNvbHZlIHRoZSBkZWZhdWx0IGRvbWFpblVSTAogICAgKiBAcGFyYW0ge1N0cmluZ30gICAgIGlkcERvbWFpbiAgICAgaWRwRG9tYWluIChPcHRpb25hbCkKICAgICovCgogIH0sIHsKICAgIGtleTogJ19yZXNvbHZlRG9tYWluJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVzb2x2ZURvbWFpbihpZHBEb21haW4pIHsKICAgICAgaWYgKCFpZHBEb21haW4pIHsKICAgICAgICByZXR1cm4gJ2RvbWFpbi1pZHA6Ly9nb29nbGUuY29tJzsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gJ2RvbWFpbi1pZHA6Ly8nICsgaWRwRG9tYWluOwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAqIEZ1bmN0aW9uIHRvIGxvZ2luIGEgdXNlciB3aXRoaW4gdGhlIHNlc3Npb24sIGl0IHdpbGwgc3RhcnQgdGhlIHByb2Nlc3MgdG8gb2J0YWluIGFuIElkZW50aXR5IGZyb20gYSB1c2VyLCBpbmNsdWRpbmcgdGhlIHJlcXVlc3QgZm9yIGFuIGlkZW50aXR5IEFzc2VydGlvbi4gVGhlIGZ1bmN0aW9uIHJldHVybnMgYSBwcm9taXNlIHdpdGggdGhlIHRva2VuIHJlY2VpdmVkIGJ5IHRoZSBpZHBQcm94eS4KICAgICoKICAgICogQHBhcmFtICB7SWRlbnRpZmllcn0gICAgICBpZGVudGlmaWVyICAgICAgaWRlbnRpZmllcgogICAgKiBAcGFyYW0gIHtTY29wZX0gICAgICAgICAgIHNjb3BlICAgICAgICAgICBzY29wZQogICAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgIFByb21pc2UgICAgICAgICBJRFRva2VuIGNvbnRhaW5pbmcgdGhlIHVzZXIgaW5mb3JtYXRpb24KICAgICovCgogIH0sIHsKICAgIGtleTogJ2xvZ2luV2l0aFJQJywKICAgIHZhbHVlOiBmdW5jdGlvbiBsb2dpbldpdGhSUChpZGVudGlmaWVyLCBzY29wZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIC8vVE9ETyByZW1vdmUgdGhpcyB2ZXJpZmljYXRpb24gYW5kIHJlZmFjdG9yIHRoaXMgcGFydAogICAgICAgIF90aGlzLmN1cnJlbnRJZGVudGl0eSA9IHVuZGVmaW5lZDsKICAgICAgICBfdGhpcy5nZXRJZGVudGl0eUFzc2VydGlvbignaWRlbnRpZmllcicsICdvcmlnaW4nLCAnaGludCcsIGlkZW50aWZpZXIpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnbG9naW5XaXRoUlAnKTsKICAgICAgICAgIHJlc29sdmUodmFsdWUpOwogICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdsb2dpbldpdGhSUCBlcnInKTsKICAgICAgICAgIHJlamVjdChlcnIpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogRnVuY3Rpb24gdGhhdCBmZXRjaCBhbiBpZGVudGl0eUFzc2VydGlvbiBmcm9tIGEgdXNlci4KICAgICoKICAgICogQHJldHVybiB7SWRBc3NlcnRpb259ICAgICAgICAgICAgICBJZEFzc2VydGlvbgogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2V0SWRlbnRpdHlBc3NlcnRpb24nLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldElkZW50aXR5QXNzZXJ0aW9uKGlkZW50aWZpZXIsIG9yaWdpbiwgdXNlcm5hbWVIaW50LCBpZHBEb21haW4pIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBpZiAoX3RoaXMuY3VycmVudElkZW50aXR5ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIC8vVE9ETyB2ZXJpZnkgd2hldGhlciB0aGUgdG9rZW4gaXMgc3RpbGwgdmFsaWQgb3Igbm90LgogICAgICAgICAgLy8gc2hvdWxkIGJlIG5lZWRlZCB0byBtYWtlIGZ1cnRoZXIgcmVxdWVzdHMsIHRvIG9idGFpbiBhIHZhbGlkIHRva2VuCiAgICAgICAgICByZXR1cm4gcmVzb2x2ZShfdGhpcy5jdXJyZW50SWRlbnRpdHkpOwogICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgLy9DSEVDSyB3aGV0aGVyIGlzIGJyb3dzZXIgZW52aXJvbm1lbnQgb3Igbm9kZWpzCiAgICAgICAgICAvL2lmIGl0IGlzIGJyb3dzZXIsIHRoZW4gY3JlYXRlIGEgZmFrZSBpZGVudGl0eQoKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGlmICh3aW5kb3cpIHsKICAgICAgICAgICAgICAoZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgICAgIHZhciBwdWJsaWNLZXkgPSB2b2lkIDA7CiAgICAgICAgICAgICAgICB2YXIgdXNlcmtleVBhaXIgPSB2b2lkIDA7CgogICAgICAgICAgICAgICAgLy9nZW5lcmF0ZXMgdGhlIFJTQSBrZXkgcGFpcgogICAgICAgICAgICAgICAgX3RoaXMuY3J5cHRvLmdlbmVyYXRlUlNBS2V5UGFpcigpLnRoZW4oZnVuY3Rpb24gKGtleVBhaXIpIHsKCiAgICAgICAgICAgICAgICAgIHB1YmxpY0tleSA9IGJ0b2Eoa2V5UGFpci5wdWJsaWMpOwogICAgICAgICAgICAgICAgICB1c2Vya2V5UGFpciA9IGtleVBhaXI7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5nZW5lcmF0ZUFzc2VydGlvbihwdWJsaWNLZXksIG9yaWdpbiwgJycsIHVzZXJrZXlQYWlyLCBpZHBEb21haW4pOwogICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAodXJsKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5nZW5lcmF0ZUFzc2VydGlvbihwdWJsaWNLZXksIG9yaWdpbiwgdXJsLCB1c2Vya2V5UGFpciwgaWRwRG9tYWluKTsKICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHJlamVjdCgnRXJyb3Igb24gb2J0YWluaW5nIElkZW50aXR5Jyk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTsKICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9KSgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnZ2V0SWRlbnRpdHlBc3NlcnRpb24gZm9yIG5vZGVqcycpOwogICAgICAgICAgICB2YXIgcmFuZG9tTnVtYmVyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAgKyAxKTsKICAgICAgICAgICAgdmFyIGlkZW50aXR5QnVuZGxlID0gewogICAgICAgICAgICAgIGFzc2VydGlvbjogJ2Fzc2VydGlvbicsCiAgICAgICAgICAgICAgaWRwOiAnbm9kZWpzJywKICAgICAgICAgICAgICB1c2VyUHJvZmlsZTogewogICAgICAgICAgICAgICAgYXZhdGFyOiAnaHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tLy1XYUNyalZNTVYtUS9BQUFBQUFBQUFBSS9BQUFBQUFBQUFBcy84T2xWcUNwU0I5Yy9waG90by5qcGcnLAogICAgICAgICAgICAgICAgY246ICd0ZXN0IG5vZGVqcycsCiAgICAgICAgICAgICAgICB1c2VybmFtZTogJ25vZGVqcy0nICsgcmFuZG9tTnVtYmVyICsgJ0Bub2RlanMuY29tJywKICAgICAgICAgICAgICAgIHVzZXJVUkw6ICd1c2VyOi8vbm9kZWpzLmNvbS9ub2RlanMtJyArIHJhbmRvbU51bWJlcgogICAgICAgICAgICAgIH0gfTsKICAgICAgICAgICAgX3RoaXMuY3VycmVudElkZW50aXR5ID0gaWRlbnRpdHlCdW5kbGU7CiAgICAgICAgICAgIF90aGlzLmlkZW50aXRpZXMucHVzaChpZGVudGl0eUJ1bmRsZSk7CiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGlkZW50aXR5QnVuZGxlKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgKiBSZXF1ZXN0cyB0aGUgSWRwUHJveHkgZnJvbSBhIGdpdmVuIERvbWFpbiBmb3IgYW4gaWRlbnRpdHlBc3NlcnRpb24KICAgICoKICAgICogQHBhcmFtICB7RE9NU3RyaW5nfSBjb250ZW50cyAgICAgY29udGVudHMKICAgICogQHBhcmFtICB7RE9NU3RyaW5nfSBvcmlnaW4gICAgICAgb3JpZ2luCiAgICAqIEBwYXJhbSAge0RPTVN0cmluZ30gdXNlcm5hbWVIaW50IHVzZXJuYW1lSGludAogICAgKiBAcGFyYW0gIHtKU09OfSAgICAgIGtleVBhaXIgICAgICAgdXNlciBrZXlQYWlyCiAgICAqIEByZXR1cm4ge0lkQXNzZXJ0aW9ufSAgICAgICAgICAgICAgSWRBc3NlcnRpb24KICAgICovCgogIH0sIHsKICAgIGtleTogJ2dlbmVyYXRlQXNzZXJ0aW9uJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZUFzc2VydGlvbihjb250ZW50cywgb3JpZ2luLCB1c2VybmFtZUhpbnQsIGtleVBhaXIsIGlkcERvbWFpbikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgZG9tYWluID0gX3RoaXMuX3Jlc29sdmVEb21haW4oaWRwRG9tYWluKTsKICAgICAgdmFyIG1lc3NhZ2UgPSB2b2lkIDA7CgogICAgICBjb25zb2xlLmxvZygnZ2VuZXJhdGVBc3NlcnRpb24nKTsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBtZXNzYWdlID0geyB0eXBlOiAnZXhlY3V0ZScsIHRvOiBkb21haW4sIGZyb206IF90aGlzLl9pZG1VUkwsIGJvZHk6IHsgcmVzb3VyY2U6ICdpZGVudGl0eScsIG1ldGhvZDogJ2dlbmVyYXRlQXNzZXJ0aW9uJywgcGFyYW1zOiB7IGNvbnRlbnRzOiBjb250ZW50cywgb3JpZ2luOiBvcmlnaW4sIHVzZXJuYW1lSGludDogdXNlcm5hbWVIaW50IH0gfSB9OwoKICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCBmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgICB2YXIgcmVzdWx0ID0gcmVzLmJvZHkudmFsdWU7CgogICAgICAgICAgaWYgKHJlc3VsdC5sb2dpblVybCkgewogICAgICAgICAgICAoZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgICB2YXIgd2luID0gd2luZG93Lm9wZW4ocmVzdWx0LmxvZ2luVXJsLCAnb3BlbklEcmVxdWVzdCcsICd3aWR0aD04MDAsIGhlaWdodD02MDAnKTsKICAgICAgICAgICAgICBpZiAod2luZG93LmNvcmRvdmEpIHsKICAgICAgICAgICAgICAgIHdpbi5hZGRFdmVudExpc3RlbmVyKCdsb2Fkc3RhcnQnLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICB2YXIgdXJsID0gZS51cmw7CiAgICAgICAgICAgICAgICAgIHZhciBjb2RlID0gL1wmY29kZT0oLispJC8uZXhlYyh1cmwpOwogICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSAvXCZlcnJvcj0oLispJC8uZXhlYyh1cmwpOwoKICAgICAgICAgICAgICAgICAgaWYgKGNvZGUgfHwgZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICB3aW4uY2xvc2UoKTsKICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHVybCk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICB2YXIgcG9sbFRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAod2luLmNsb3NlZCkgewogICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoJ1NvbWUgZXJyb3Igb2NjdXJlZCB3aGVuIHRyeWluZyB0byBnZXQgaWRlbnRpdHkuJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwocG9sbFRpbWVyKTsKICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICBpZiAod2luLmRvY3VtZW50LlVSTC5pbmRleE9mKCdpZF90b2tlbicpICE9PSAtMSB8fCB3aW4uZG9jdW1lbnQuVVJMLmluZGV4T2YobG9jYXRpb24ub3JpZ2luKSAhPT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwocG9sbFRpbWVyKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IHdpbi5kb2N1bWVudC5VUkw7CgogICAgICAgICAgICAgICAgICAgICAgICB3aW4uY2xvc2UoKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh1cmwpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LCA1MDApOwogICAgICAgICAgICAgICAgfSkoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pKCk7CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdCkgewoKICAgICAgICAgICAgdmFyIGFzc2VydGlvblBhcnNlZCA9IEpTT04ucGFyc2UoYXRvYihyZXN1bHQuYXNzZXJ0aW9uKSk7CiAgICAgICAgICAgIHZhciBpZFRva2VuID0gdm9pZCAwOwoKICAgICAgICAgICAgLy9UT0RPIHJlbW92ZSB0aGUgdmVyaWZpY2F0aW9uIGFuZCByZW1vdmUgdGhlIHRva2VuSURKU09OIGZyb20gdGhlIGdvb2dsZSBpZHBQcm94eTsKICAgICAgICAgICAgaWYgKGFzc2VydGlvblBhcnNlZC50b2tlbklESlNPTikgewogICAgICAgICAgICAgIGlkVG9rZW4gPSBhc3NlcnRpb25QYXJzZWQudG9rZW5JREpTT047CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgaWRUb2tlbiA9IGFzc2VydGlvblBhcnNlZDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGlkVG9rZW4pIHsKICAgICAgICAgICAgICByZXN1bHQuaWRlbnRpdHkgPSAoMCwgX3V0aWxzLmdldFVzZXJVUkxGcm9tRW1haWwpKGlkVG9rZW4uZW1haWwpOwoKICAgICAgICAgICAgICBfdGhpcy5pZGVudGl0eS5hZGRJZGVudGl0eShyZXN1bHQpOwoKICAgICAgICAgICAgICAvLyBjaGVjayBpZiBleGlzdHMgYW55IGluZm9Ub2tlbiBpbiB0aGUgcmVzdWx0IHJlY2VpdmVkCiAgICAgICAgICAgICAgdmFyIGluZm9Ub2tlbiA9IHJlc3VsdC5pbmZvVG9rZW4gPyByZXN1bHQuaW5mb1Rva2VuIDoge307CiAgICAgICAgICAgICAgdmFyIHVzZXJQcm9maWxlQnVuZGxlID0geyB1c2VybmFtZTogaWRUb2tlbi5lbWFpbCwgY246IGlkVG9rZW4ubmFtZSwgYXZhdGFyOiBpbmZvVG9rZW4ucGljdHVyZSwgbG9jYWxlOiBpbmZvVG9rZW4ubG9jYWxlLCB1c2VyVVJMOiAoMCwgX3V0aWxzLmdldFVzZXJVUkxGcm9tRW1haWwpKGlkVG9rZW4uZW1haWwpIH07CgogICAgICAgICAgICAgIC8vY3JlYXRpb24gb2YgYSBuZXcgSlNPTiB3aXRoIHRoZSBpZGVudGl0eSB0byBzZW5kIHZpYSBtZXNzYWdlcwogICAgICAgICAgICAgIHZhciBuZXdJZGVudGl0eSA9IHsgdXNlclByb2ZpbGU6IHVzZXJQcm9maWxlQnVuZGxlLCBpZHA6IHJlc3VsdC5pZHAuZG9tYWluLCBhc3NlcnRpb246IHJlc3VsdC5hc3NlcnRpb24gfTsKICAgICAgICAgICAgICByZXN1bHQubWVzc2FnZUluZm8gPSBuZXdJZGVudGl0eTsKICAgICAgICAgICAgICByZXN1bHQua2V5UGFpciA9IGtleVBhaXI7CgogICAgICAgICAgICAgIF90aGlzLmN1cnJlbnRJZGVudGl0eSA9IG5ld0lkZW50aXR5OwogICAgICAgICAgICAgIF90aGlzLmlkZW50aXRpZXMucHVzaChyZXN1bHQpOwogICAgICAgICAgICAgIHJlc29sdmUobmV3SWRlbnRpdHkpOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZWplY3QoJ2Vycm9yIG9uIG9idGFpbmluZyBpZGVudGl0eSBpbmZvcm1hdGlvbicpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogT1RIRVIgVVNFUidTIElERU5USVRZCiAgICAqLwoKICAgIC8qKgogICAgKiBSZXF1ZXN0cyB0aGUgSWRwUHJveHkgZnJvbSBhIGdpdmVuIERvbWFpbiB0byB2YWxpZGF0ZSBhbiBJZGVudGl0eUFzc2VydGlvbgogICAgKiBSZXR1cm5zIGEgcHJvbWlzZSB3aXRoIHRoZSByZXN1bHQgZnJvbSB0aGUgdmFsaWRhdGlvbi4KICAgICogQHBhcmFtICB7RE9NU3RyaW5nfSBhc3NlcnRpb24KICAgICogQHBhcmFtICB7RE9NU3RyaW5nfSBvcmlnaW4gICAgICAgb3JpZ2luCiAgICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgUHJvbWlzZSAgICAgICAgIHByb21pc2Ugd2l0aCB0aGUgcmVzdWx0IGZyb20gdGhlIHZhbGlkYXRpb24KICAgICovCgogIH0sIHsKICAgIGtleTogJ3ZhbGlkYXRlQXNzZXJ0aW9uJywKICAgIHZhbHVlOiBmdW5jdGlvbiB2YWxpZGF0ZUFzc2VydGlvbihhc3NlcnRpb24sIG9yaWdpbiwgaWRwRG9tYWluKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgZG9tYWluID0gX3RoaXMuX3Jlc29sdmVEb21haW4oaWRwRG9tYWluKTsKCiAgICAgIHZhciBtZXNzYWdlID0geyB0eXBlOiAnRVhFQ1VURScsIHRvOiBkb21haW4sIGZyb206IF90aGlzLl9pZG1VUkwsIGJvZHk6IHsgcmVzb3VyY2U6ICdpZGVudGl0eScsIG1ldGhvZDogJ3ZhbGlkYXRlQXNzZXJ0aW9uJywKICAgICAgICAgIHBhcmFtczogeyBhc3NlcnRpb246IGFzc2VydGlvbiwgb3JpZ2luOiBvcmlnaW4gfSB9IH07CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCBmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICBpZiAocmVzdWx0LmJvZHkuY29kZSA9PT0gMjAwKSB7CiAgICAgICAgICAgIHJlc29sdmUocmVzdWx0LmJvZHkudmFsdWUpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVqZWN0KCdlcnJvcicsIHJlc3VsdC5ib2R5LmNvZGUpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdlbmNyeXB0TWVzc2FnZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZW5jcnlwdE1lc3NhZ2UobWVzc2FnZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgY29uc29sZS5sb2coJ2VuY3J5cHQgbWVzc2FnZSAnKTsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIHZhciBpc0hhbmRTaGFrZVR5cGUgPSBtZXNzYWdlLnR5cGUgPT09ICdoYW5kc2hha2UnOwoKICAgICAgICAvL2lmIGlzIG5vdCB0byBhcHBseSBlbmNyeXB0aW9uLCB0aGVuIHJldHVybnMgcmVzb2x2ZQogICAgICAgIGlmICghX3RoaXMuaXNUb1VzZUVuY3J5cHRpb24gJiYgIWlzSGFuZFNoYWtlVHlwZSkgewogICAgICAgICAgY29uc29sZS5sb2coJ2VuY3J5cHRpb24gZGlzYWJsZWQnKTsKICAgICAgICAgIHJldHVybiByZXNvbHZlKG1lc3NhZ2UpOwogICAgICAgIH0KCiAgICAgICAgLy9UT0RPIHJlbW92ZSB0aGlzIGxvZ2ljIGFuZCBtb3ZlIGl0IHRvIGEgdXRpbCBmdW5jdGlvbgogICAgICAgIHZhciBzcGxpdGVkVG9VUkwgPSBtZXNzYWdlLnRvLnNwbGl0KCcvJyk7CiAgICAgICAgdmFyIGRhdGFPYmplY3RVUkwgPSBzcGxpdGVkVG9VUkxbMF0gKyAnLy8nICsgc3BsaXRlZFRvVVJMWzJdICsgJy8nICsgc3BsaXRlZFRvVVJMWzNdOwogICAgICAgIGlmIChzcGxpdGVkVG9VUkwubGVuZ3RoID4gNikgewogICAgICAgICAgZGF0YU9iamVjdFVSTCA9IHNwbGl0ZWRUb1VSTFswXSArICcvLycgKyBzcGxpdGVkVG9VUkxbMl0gKyAnLycgKyBzcGxpdGVkVG9VUkxbM10gKyAnLycgKyBzcGxpdGVkVG9VUkxbNF07CiAgICAgICAgfQoKICAgICAgICB2YXIgaXNUb0RhdGFPYmplY3QgPSAoMCwgX3V0aWxzLmlzRGF0YU9iamVjdFVSTCkoZGF0YU9iamVjdFVSTCk7CiAgICAgICAgdmFyIGlzRnJvbUh5cGVydHkgPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkobWVzc2FnZS5mcm9tKS50eXBlID09PSAnaHlwZXJ0eSc7CiAgICAgICAgdmFyIGlzVG9IeXBlcnR5ID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKG1lc3NhZ2UudG8pLnR5cGUgPT09ICdoeXBlcnR5JzsKCiAgICAgICAgaWYgKGlzRnJvbUh5cGVydHkgJiYgaXNUb0h5cGVydHkpIHsKICAgICAgICAgIHZhciB1c2VyVVJMID0gX3RoaXMuX3JlZ2lzdHJ5LmdldEh5cGVydHlPd25lcihtZXNzYWdlLmZyb20pOwogICAgICAgICAgaWYgKHVzZXJVUkwpIHsKICAgICAgICAgICAgKGZ1bmN0aW9uICgpIHsKCiAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgZXhpc3RzIGFueSBrZXlzIGJldHdlZW4gdHdvIHVzZXJzCiAgICAgICAgICAgICAgdmFyIGNoYXRLZXlzID0gX3RoaXMuY2hhdEtleXNbbWVzc2FnZS5mcm9tICsgJzwtPicgKyBtZXNzYWdlLnRvXTsKICAgICAgICAgICAgICBpZiAoIWNoYXRLZXlzKSB7CiAgICAgICAgICAgICAgICBjaGF0S2V5cyA9IF90aGlzLl9uZXdDaGF0Q3J5cHRvKG1lc3NhZ2UsIHVzZXJVUkwpOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2NyZWF0ZUNoYXRLZXkgZW5jcnlwdCcsIG1lc3NhZ2UuZnJvbSArIG1lc3NhZ2UudG8pOwogICAgICAgICAgICAgICAgX3RoaXMuY2hhdEtleXNbbWVzc2FnZS5mcm9tICsgJzwtPicgKyBtZXNzYWdlLnRvXSA9IGNoYXRLZXlzOwogICAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmhhbmRzaGFrZVBoYXNlID0gJ3N0YXJ0SGFuZFNoYWtlJzsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGlmIChjaGF0S2V5cy5hdXRoZW50aWNhdGVkICYmICFpc0hhbmRTaGFrZVR5cGUpIHsKICAgICAgICAgICAgICAgIChmdW5jdGlvbiAoKSB7CgogICAgICAgICAgICAgICAgICB2YXIgaXYgPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVJVigpOwogICAgICAgICAgICAgICAgICBfdGhpcy5jcnlwdG8uZW5jcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tU2Vzc2lvbktleSwgbWVzc2FnZS5ib2R5LnZhbHVlLCBpdikudGhlbihmdW5jdGlvbiAoZW5jcnlwdGVkVmFsdWUpIHsKCiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIG1lc3NhZ2UuYm9keS52YWx1ZSArIGl2LCBjaGF0S2V5cy5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7CgogICAgICAgICAgICAgICAgICAgIF90aGlzLmNyeXB0by5oYXNoSE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tSGFzaEtleSwgZmlsdGVyZWRNZXNzYWdlKS50aGVuKGZ1bmN0aW9uIChoYXNoKSB7CiAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdyZXN1bHQgb2YgaGFzaCAnLCBoYXNoKTsKICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHsgaXY6IF90aGlzLmNyeXB0by5lbmNvZGUoaXYpLCB2YWx1ZTogX3RoaXMuY3J5cHRvLmVuY29kZShlbmNyeXB0ZWRWYWx1ZSksIGhhc2g6IF90aGlzLmNyeXB0by5lbmNvZGUoaGFzaCkgfTsKICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS52YWx1ZSA9IGJ0b2EoKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKHZhbHVlKSk7CgogICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAvLyBpZiBpcyBhIGhhbmRzaGFrZSBtZXNzYWdlLCBqdXN0IHJlc29sdmUgaXQKICAgICAgICAgICAgICAgIH0pKCk7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc0hhbmRTaGFrZVR5cGUpIHsKICAgICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CgogICAgICAgICAgICAgICAgLy8gZWxzZSwgc3RhcnRzIGEgbmV3IGhhbmRzaGFrZSBwcm90b2NvbAogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBfdGhpcy5fZG9IYW5kU2hha2VQaGFzZShtZXNzYWdlLCBjaGF0S2V5cykudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgICAgICAgICAgX3RoaXMuY2hhdEtleXNbbWVzc2FnZS5mcm9tICsgJzwtPicgKyBtZXNzYWdlLnRvXSA9IHZhbHVlLmNoYXRLZXlzOwoKICAgICAgICAgICAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UodmFsdWUubWVzc2FnZSk7CiAgICAgICAgICAgICAgICAgIHJlamVjdCgnZW5jcnlwdCBoYW5kc2hha2UgcHJvdG9jb2wgcGhhc2UgJyk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pKCk7CiAgICAgICAgICB9CgogICAgICAgICAgLy9pZiBmcm9tIGh5cGVydHkgdG8gYSBkYXRhT2JqZWN0VVJMCiAgICAgICAgfSBlbHNlIGlmIChpc0Zyb21IeXBlcnR5ICYmIGlzVG9EYXRhT2JqZWN0KSB7CiAgICAgICAgICAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICBjb25zb2xlLmxvZygnZGF0YU9iamVjdCB2YWx1ZSB0byBlbmNyeXB0OiAnLCBtZXNzYWdlLmJvZHkudmFsdWUpOwoKICAgICAgICAgICAgdmFyIGRhdGFPYmplY3RLZXkgPSBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXNbZGF0YU9iamVjdFVSTF07CgogICAgICAgICAgICAvL2lmIG5vIGtleSBleGlzdHMsIGNyZWF0ZSBhIG5ldyBvbmUgaWYgaXMgdGhlIHJlcG9ydGVyIG9mIGRhdGFPYmplY3QKICAgICAgICAgICAgaWYgKCFkYXRhT2JqZWN0S2V5KSB7CiAgICAgICAgICAgICAgdmFyIGlzSHlwZXJ0eVJlcG9ydGVyID0gX3RoaXMucmVnaXN0cnkuZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzKGRhdGFPYmplY3RVUkwpOwoKICAgICAgICAgICAgICAvLyBpZiB0aGUgaHlwZXJ0eSBpcyB0aGUgcmVwb3J0ZXIgb2YgdGhlIGRhdGFPYmplY3QgdGhlbiBnZW5lcmF0ZXMgYSBzZXNzaW9uIGtleQogICAgICAgICAgICAgIGlmIChpc0h5cGVydHlSZXBvcnRlciAmJiBpc0h5cGVydHlSZXBvcnRlciA9PT0gbWVzc2FnZS5mcm9tKSB7CgogICAgICAgICAgICAgICAgdmFyIHNlc3Npb25LZXkgPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVSYW5kb20oKTsKICAgICAgICAgICAgICAgIF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5c1tkYXRhT2JqZWN0VVJMXSA9IHsgc2Vzc2lvbktleTogc2Vzc2lvbktleSwgaXNUb0VuY3J5cHQ6IHRydWUgfTsKCiAgICAgICAgICAgICAgICBkYXRhT2JqZWN0S2V5ID0gX3RoaXMuZGF0YU9iamVjdFNlc3Npb25LZXlzW2RhdGFPYmplY3RVUkxdOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy9jaGVjayBpZiB0aGVyZSBpcyBhbHJlYWR5IGEgc2Vzc2lvbiBrZXkgZm9yIHRoZSBjaGF0IHJvb20KICAgICAgICAgICAgaWYgKGRhdGFPYmplY3RLZXkpIHsKCiAgICAgICAgICAgICAgLy8gYW5kIGlmIGlzIHRvIGFwcGx5IGVuY3J5cHRpb24sIGVuY3J5cHQgdGhlIG1lc3NhZ2VzCiAgICAgICAgICAgICAgaWYgKGRhdGFPYmplY3RLZXkuaXNUb0VuY3J5cHQpIHsKICAgICAgICAgICAgICAgIChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIHZhciBpdiA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZUlWKCk7CgogICAgICAgICAgICAgICAgICBfdGhpcy5jcnlwdG8uZW5jcnlwdEFFUyhkYXRhT2JqZWN0S2V5LnNlc3Npb25LZXksIF90aGlzLmNyeXB0by5lbmNvZGUoKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKG1lc3NhZ2UuYm9keS52YWx1ZSkpLCBpdikudGhlbihmdW5jdGlvbiAoZW5jcnlwdGVkVmFsdWUpIHsKCiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIG1lc3NhZ2UuYm9keS52YWx1ZSArIGl2LCBkYXRhT2JqZWN0S2V5LnNlc3Npb25LZXkpOwoKICAgICAgICAgICAgICAgICAgICBfdGhpcy5jcnlwdG8uaGFzaEhNQUMoZGF0YU9iamVjdEtleS5zZXNzaW9uS2V5LCBmaWx0ZXJlZE1lc3NhZ2UpLnRoZW4oZnVuY3Rpb24gKGhhc2gpIHsKICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2hhc2ggJywgaGFzaCk7CgogICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0gYnRvYSgoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkoeyB2YWx1ZTogX3RoaXMuY3J5cHRvLmVuY29kZShlbmNyeXB0ZWRWYWx1ZSksIGl2OiBfdGhpcy5jcnlwdG8uZW5jb2RlKGl2KSwgaGFzaDogX3RoaXMuY3J5cHRvLmVuY29kZShoYXNoKSB9KSk7CgogICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LnZhbHVlID0gbmV3VmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgIC8vIGlmIG5vdCwganVzdCBzZW5kIHRoZSBtZXNzYWdlCiAgICAgICAgICAgICAgICB9KSgpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgLy8gc3RhcnQgdGhlIGdlbmVyYXRpb24gb2YgYSBuZXcgc2Vzc2lvbiBLZXkKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZWplY3QoJ2ZhaWxlZCB0byBkZWNyeXB0IG1lc3NhZ2UnKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSkoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ2RlY3J5cHRNZXNzYWdlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBkZWNyeXB0TWVzc2FnZShtZXNzYWdlKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBjb25zb2xlLmxvZygnZGVjcnlwdCBtZXNzYWdlICcpOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgdmFyIGlzSGFuZFNoYWtlVHlwZSA9IG1lc3NhZ2UudHlwZSA9PT0gJ2hhbmRzaGFrZSc7CgogICAgICAgIC8vaWYgaXMgbm90IHRvIGFwcGx5IGVuY3J5cHRpb24sIHRoZW4gcmV0dXJucyByZXNvbHZlCiAgICAgICAgaWYgKCFfdGhpcy5pc1RvVXNlRW5jcnlwdGlvbiAmJiAhaXNIYW5kU2hha2VUeXBlKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnZGVjcnlwdGlvbiBkaXNhYmxlZCcpOwogICAgICAgICAgcmV0dXJuIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgfQoKICAgICAgICAvL1RPRE8gcmVtb3ZlIHRoaXMgbG9naWMgYW5kIG1vdmUgaXQgdG8gYSB1dGlsIGZ1bmN0aW9uCgogICAgICAgIHZhciBzcGxpdGVkVG9VUkwgPSBtZXNzYWdlLnRvLnNwbGl0KCcvJyk7CiAgICAgICAgdmFyIGRhdGFPYmplY3RVUkwgPSBzcGxpdGVkVG9VUkxbMF0gKyAnLy8nICsgc3BsaXRlZFRvVVJMWzJdICsgJy8nICsgc3BsaXRlZFRvVVJMWzNdOwogICAgICAgIGlmIChzcGxpdGVkVG9VUkwubGVuZ3RoID4gNikgewogICAgICAgICAgZGF0YU9iamVjdFVSTCA9IHNwbGl0ZWRUb1VSTFswXSArICcvLycgKyBzcGxpdGVkVG9VUkxbMl0gKyAnLycgKyBzcGxpdGVkVG9VUkxbM10gKyAnLycgKyBzcGxpdGVkVG9VUkxbNF07CiAgICAgICAgfQoKICAgICAgICB2YXIgaXNUb0RhdGFPYmplY3QgPSAoMCwgX3V0aWxzLmlzRGF0YU9iamVjdFVSTCkoZGF0YU9iamVjdFVSTCk7CiAgICAgICAgdmFyIGlzRnJvbUh5cGVydHkgPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkobWVzc2FnZS5mcm9tKS50eXBlID09PSAnaHlwZXJ0eSc7CiAgICAgICAgdmFyIGlzVG9IeXBlcnR5ID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKG1lc3NhZ2UudG8pLnR5cGUgPT09ICdoeXBlcnR5JzsKCiAgICAgICAgLy9pcyBpcyBoeXBlcnR5IHRvIGh5cGVydHkgY29tbXVuaWNhdGlvbgogICAgICAgIGlmIChpc0Zyb21IeXBlcnR5ICYmIGlzVG9IeXBlcnR5KSB7CiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdkZWNyeXB0IGh5cGVydHkgdG8gaHlwZXJ0eScpOwogICAgICAgICAgdmFyIHVzZXJVUkwgPSBfdGhpcy5fcmVnaXN0cnkuZ2V0SHlwZXJ0eU93bmVyKG1lc3NhZ2UudG8pOwogICAgICAgICAgaWYgKHVzZXJVUkwpIHsKICAgICAgICAgICAgKGZ1bmN0aW9uICgpIHsKCiAgICAgICAgICAgICAgdmFyIGNoYXRLZXlzID0gX3RoaXMuY2hhdEtleXNbbWVzc2FnZS50byArICc8LT4nICsgbWVzc2FnZS5mcm9tXTsKICAgICAgICAgICAgICBpZiAoIWNoYXRLZXlzKSB7CiAgICAgICAgICAgICAgICBjaGF0S2V5cyA9IF90aGlzLl9uZXdDaGF0Q3J5cHRvKG1lc3NhZ2UsIHVzZXJVUkwsICdkZWNyeXB0Jyk7CiAgICAgICAgICAgICAgICBfdGhpcy5jaGF0S2V5c1ttZXNzYWdlLnRvICsgJzwtPicgKyBtZXNzYWdlLmZyb21dID0gY2hhdEtleXM7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBpZiAoY2hhdEtleXMuYXV0aGVudGljYXRlZCAmJiAhaXNIYW5kU2hha2VUeXBlKSB7CiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBKU09OLnBhcnNlKGF0b2IobWVzc2FnZS5ib2R5LnZhbHVlKSk7CiAgICAgICAgICAgICAgICAgIHZhciBpdiA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWUuaXYpOwogICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWUudmFsdWUpOwogICAgICAgICAgICAgICAgICB2YXIgaGFzaCA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWUuaGFzaCk7CiAgICAgICAgICAgICAgICAgIF90aGlzLmNyeXB0by5kZWNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSwgZGF0YSwgaXYpLnRoZW4oZnVuY3Rpb24gKGRlY3J5cHRlZERhdGEpIHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZGVjcnlwdGVkIHZhbHVlICcsIGRlY3J5cHRlZERhdGEpOwogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS52YWx1ZSA9IGRlY3J5cHRlZERhdGE7CgogICAgICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBkZWNyeXB0ZWREYXRhICsgaXYpOwoKICAgICAgICAgICAgICAgICAgICBfdGhpcy5jcnlwdG8udmVyaWZ5SE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb0hhc2hLZXksIGZpbHRlcmVkTWVzc2FnZSwgaGFzaCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdyZXN1bHQgb2YgaGFzaCB2ZXJpZmljYXRpb24hICcsIHJlc3VsdCk7CiAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJvZHkuYXNzZXJ0ZWRJZGVudGl0eSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pKCk7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc0hhbmRTaGFrZVR5cGUpIHsKICAgICAgICAgICAgICAgIF90aGlzLl9kb0hhbmRTaGFrZVBoYXNlKG1lc3NhZ2UsIGNoYXRLZXlzKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgewoKICAgICAgICAgICAgICAgICAgLy9pZiBpdCB3YXMgc3RhcnRlZCBieSBkb011dHVhbEF1dGhlbnRpY2F0aW9uIHRoZW4gZW5kcyB0aGUgcHJvdG9jb2wKICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSAnaGFuZFNoYWtlRW5kJykgewogICAgICAgICAgICAgICAgICAgIHJlamVjdCgnZGVjcnlwdCBoYW5kc2hha2UgcHJvdG9jb2wgcGhhc2UgJyk7CgogICAgICAgICAgICAgICAgICAgIC8vIGlmIHdhcyBzdGFydGVkIGJ5IGEgbWVzc2FnZSwgdGhlbiByZXNlbmQgdGhhdCBtZXNzYWdlCiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY2hhdEtleXNbbWVzc2FnZS50byArICc8LT4nICsgbWVzc2FnZS5mcm9tXSA9IHZhbHVlLmNoYXRLZXlzOwogICAgICAgICAgICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHZhbHVlLm1lc3NhZ2UpOwogICAgICAgICAgICAgICAgICAgIHJlamVjdCgnZGVjcnlwdCBoYW5kc2hha2UgcHJvdG9jb2wgcGhhc2UgJyk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZWplY3QoJ3dyb25nIG1lc3NhZ2UgZG8gZGVjcnlwdCcpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkoKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlamVjdCgnZXJyb3Igb24gZGVjcnlwdCBtZXNzYWdlJyk7CiAgICAgICAgICB9CgogICAgICAgICAgLy9pZiBmcm9tIGh5cGVydHkgdG8gYSBkYXRhT2JqZWN0VVJMCiAgICAgICAgfSBlbHNlIGlmIChpc0Zyb21IeXBlcnR5ICYmIGlzVG9EYXRhT2JqZWN0KSB7CiAgICAgICAgICAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICBjb25zb2xlLmxvZygnZGF0YU9iamVjdCB2YWx1ZSB0byBkZWNyeXB0OiAnLCBtZXNzYWdlLmJvZHkpOwoKICAgICAgICAgICAgdmFyIGRhdGFPYmplY3RLZXkgPSBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXNbZGF0YU9iamVjdFVSTF07CgogICAgICAgICAgICBpZiAoZGF0YU9iamVjdEtleSkgewoKICAgICAgICAgICAgICAvL2NoZWNrIGlmIGlzIHRvIGFwcGx5IGVuY3J5cHRpb24KICAgICAgICAgICAgICBpZiAoZGF0YU9iamVjdEtleS5pc1RvRW5jcnlwdCkgewogICAgICAgICAgICAgICAgKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgdmFyIHBhcnNlZFZhbHVlID0gSlNPTi5wYXJzZShhdG9iKG1lc3NhZ2UuYm9keS52YWx1ZSkpOwogICAgICAgICAgICAgICAgICB2YXIgaXYgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHBhcnNlZFZhbHVlLml2KTsKICAgICAgICAgICAgICAgICAgdmFyIGVuY3J5cHRlZFZhbHVlID0gX3RoaXMuY3J5cHRvLmRlY29kZShwYXJzZWRWYWx1ZS52YWx1ZSk7CiAgICAgICAgICAgICAgICAgIHZhciBoYXNoID0gX3RoaXMuY3J5cHRvLmRlY29kZShwYXJzZWRWYWx1ZS5oYXNoKTsKCiAgICAgICAgICAgICAgICAgIF90aGlzLmNyeXB0by5kZWNyeXB0QUVTKGRhdGFPYmplY3RLZXkuc2Vzc2lvbktleSwgZW5jcnlwdGVkVmFsdWUsIGl2KS50aGVuKGZ1bmN0aW9uIChkZWNyeXB0ZWRWYWx1ZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBwYXJzZWRWYWx1ZSA9IEpTT04ucGFyc2UoYXRvYihkZWNyeXB0ZWRWYWx1ZSkpOwogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkZWNyeXB0ZWQgVmFsdWUsJywgcGFyc2VkVmFsdWUpOwogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS52YWx1ZSA9IHBhcnNlZFZhbHVlOwoKICAgICAgICAgICAgICAgICAgICB2YXIgZmlsdGVyZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgcGFyc2VkVmFsdWUgKyBpdik7CgogICAgICAgICAgICAgICAgICAgIF90aGlzLmNyeXB0by52ZXJpZnlITUFDKGRhdGFPYmplY3RLZXkuc2Vzc2lvbktleSwgZmlsdGVyZWRNZXNzYWdlLCBoYXNoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ3Jlc3VsdCBvZiBoYXNoIHZlcmlmaWNhdGlvbiEgJywgcmVzdWx0KTsKCiAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJvZHkuYXNzZXJ0ZWRJZGVudGl0eSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgIC8vaWYgbm90LCBqdXN0IHJldHVybiB0aGUgbWVzc2FnZQogICAgICAgICAgICAgICAgfSkoKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmFzc2VydGVkSWRlbnRpdHkgPSB0cnVlOwogICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmFzc2VydGVkSWRlbnRpdHkgPSB0cnVlOwogICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CgogICAgICAgICAgICAgIC8vcmVqZWN0KCdubyBzZXNzaW9uS2V5IGZvciBjaGF0IHJvb20gZm91bmQnKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSkoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVqZWN0KCd3cm9uZyBtZXNzYWdlIHRvIGRlY3J5cHQnKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ2RvTXV0dWFsQXV0aGVudGljYXRpb24nLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRvTXV0dWFsQXV0aGVudGljYXRpb24oc2VuZGVyLCByZWNlaXZlcikgewogICAgICBjb25zb2xlLmxvZygnZG9NdXR1YWxBdXRoZW50aWNhdGlvbjogJywgc2VuZGVyLCByZWNlaXZlcik7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBkYXRhT2JqZWN0VVJMID0gdm9pZCAwOwoKICAgICAgLy8gY2hlY2sgaWYgdGhlIHNlbmRlciBpcyBhIGRhdGFPYmplY3QgYW5kIGlmIHNvIHN0b3JlcyB0aGF0IHZhbHVlCiAgICAgIHZhciByZXBvcnRlclVSTCA9IF90aGlzLnJlZ2lzdHJ5LmdldFJlcG9ydGVyVVJMU3luY2hvbm91cyhzZW5kZXIpOwogICAgICBpZiAocmVwb3J0ZXJVUkwpIHsKICAgICAgICBkYXRhT2JqZWN0VVJMID0gc2VuZGVyOwogICAgICAgIHNlbmRlciA9IHJlcG9ydGVyVVJMOwogICAgICB9CgogICAgICB2YXIgbXNnID0gewogICAgICAgIHRvOiByZWNlaXZlciwKICAgICAgICBmcm9tOiBzZW5kZXIsCiAgICAgICAgY2FsbGJhY2s6IHVuZGVmaW5lZCwKICAgICAgICBib2R5OiB7IGhhbmRzaGFrZVBoYXNlOiAnc3RhcnRIYW5kU2hha2UnLCBpZ25vcmU6ICdpZ25vcmVNZXNzYWdlJyB9CiAgICAgIH07CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgaWYgKCFzZW5kZXIgfHwgIXJlY2VpdmVyKSB7CiAgICAgICAgICByZXR1cm4gcmVqZWN0KCdzZW5kZXIgb3IgcmVjZWl2ZXIgbWlzc2luZyBvbiBkb011dHVhbEF1dGhlbnRpY2F0aW9uJyk7CiAgICAgICAgfQoKICAgICAgICB2YXIgY2hhdEtleXMgPSBfdGhpcy5jaGF0S2V5c1tzZW5kZXIgKyAnPC0+JyArIHJlY2VpdmVyXTsKICAgICAgICB2YXIgdXNlclVSTCA9IF90aGlzLl9yZWdpc3RyeS5nZXRIeXBlcnR5T3duZXIoc2VuZGVyKTsKCiAgICAgICAgaWYgKHVzZXJVUkwpIHsKCiAgICAgICAgICBpZiAoIWNoYXRLZXlzKSB7CiAgICAgICAgICAgIC8vIGNhbGxiYWNrIHRvIHJlc29sdmUgd2hlbiBmaW5pc2ggdGhlIG11dHVhbCBhdXRoZW50aWNhdGlvbgogICAgICAgICAgICB2YXIgcmVzb2x2ZWQgPSBmdW5jdGlvbiByZXNvbHZlZCh2YWx1ZSkgewogICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjYWxsYmFjayB2YWx1ZTonLCB2YWx1ZSk7CiAgICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIG1zZy5jYWxsYmFjayA9IHJlc29sdmVkOwogICAgICAgICAgICBtc2cuZGF0YU9iamVjdFVSTCA9IGRhdGFPYmplY3RVUkw7CgogICAgICAgICAgICBjaGF0S2V5cyA9IF90aGlzLl9uZXdDaGF0Q3J5cHRvKG1zZywgdXNlclVSTCk7CiAgICAgICAgICAgIF90aGlzLmNoYXRLZXlzW3NlbmRlciArICc8LT4nICsgcmVjZWl2ZXJdID0gY2hhdEtleXM7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKGNoYXRLZXlzLmF1dGhlbnRpY2F0ZWQpIHsKCiAgICAgICAgICAgIHZhciBzdGFydFNlc3Npb25LZXlFeGNoYW5nZSA9IHsKICAgICAgICAgICAgICB0bzogc2VuZGVyLAogICAgICAgICAgICAgIGZyb206IHJlY2VpdmVyCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGNoYXRLZXlzLmRhdGFPYmplY3RVUkwgPSBkYXRhT2JqZWN0VVJMOwogICAgICAgICAgICBfdGhpcy5fc2VuZFJlcG9ydGVyU2Vzc2lvbktleShzdGFydFNlc3Npb25LZXlFeGNoYW5nZSwgY2hhdEtleXMpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7CgogICAgICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHZhbHVlLm1lc3NhZ2UpOwogICAgICAgICAgICAgIHJlc29sdmUoJ2V4Y2hhbmdlIG9mIGNoYXQgc2Vzc2lvbktleSBpbml0aWF0ZWQnKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgX3RoaXMuX2RvSGFuZFNoYWtlUGhhc2UobXNnLCBjaGF0S2V5cyk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlamVjdCgnZXJyb3Igb24gZG9NdXR1YWxBdXRoZW50aWNhdGlvbicpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2RvSGFuZFNoYWtlUGhhc2UnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9kb0hhbmRTaGFrZVBoYXNlKG1lc3NhZ2UsIGNoYXRLZXlzKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAvL2NvbnNvbGUubG9nKCdoYW5kc2hha2VUeXBlJyk7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIGhhbmRzaGFrZVR5cGUgPSBtZXNzYWdlLmJvZHkuaGFuZHNoYWtlUGhhc2U7CiAgICAgICAgdmFyIGl2ID0gdm9pZCAwOwogICAgICAgIHZhciBoYXNoID0gdm9pZCAwOwogICAgICAgIHZhciB2YWx1ZSA9IHt9OwogICAgICAgIHZhciBmaWx0ZXJlZE1lc3NhZ2UgPSB2b2lkIDA7CgogICAgICAgIChmdW5jdGlvbiAoKSB7CiAgICAgICAgICBzd2l0Y2ggKGhhbmRzaGFrZVR5cGUpIHsKCiAgICAgICAgICAgIGNhc2UgJ3N0YXJ0SGFuZFNoYWtlJzoKICAgICAgICAgICAgICBjaGF0S2V5cy5rZXlzLmZyb21SYW5kb20gPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVSYW5kb20oKTsKCiAgICAgICAgICAgICAgdmFyIHN0YXJ0SGFuZFNoYWtlTXNnID0gewogICAgICAgICAgICAgICAgdHlwZTogJ2hhbmRzaGFrZScsCiAgICAgICAgICAgICAgICB0bzogbWVzc2FnZS50bywKICAgICAgICAgICAgICAgIGZyb206IG1lc3NhZ2UuZnJvbSwKICAgICAgICAgICAgICAgIGJvZHk6IHsKICAgICAgICAgICAgICAgICAgaGFuZHNoYWtlUGhhc2U6ICdzZW5kZXJIZWxsbycsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdGhpcy5jcnlwdG8uZW5jb2RlKGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIGNoYXRLZXlzLmhhbmRzaGFrZUhpc3Rvcnkuc2VuZGVySGVsbG8gPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChzdGFydEhhbmRTaGFrZU1zZywgdW5kZWZpbmVkLCBjaGF0S2V5cy5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7CgogICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHdhcyB0aGUgZW5jcnlwdCBmdW5jdGlvbiBvciB0aGUgbXV0dWFsIGF1dGhlbnRpY2F0aW9uIHRoYXQgcmVxdWVzdCB0aGUKICAgICAgICAgICAgICAvLyBzdGFydCBvZiB0aGUgaGFuZFNoYWtlUGhhc2UuCiAgICAgICAgICAgICAgaWYgKGNoYXRLZXlzLmluaXRpYWxNZXNzYWdlKSB7CiAgICAgICAgICAgICAgICByZXNvbHZlKHsgbWVzc2FnZTogc3RhcnRIYW5kU2hha2VNc2csIGNoYXRLZXlzOiBjaGF0S2V5cyB9KTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgX3RoaXMuY2hhdEtleXNbbWVzc2FnZS5mcm9tICsgJzwtPicgKyBtZXNzYWdlLnRvXSA9IGNoYXRLZXlzOwogICAgICAgICAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2Uoc3RhcnRIYW5kU2hha2VNc2cpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJ3NlbmRlckhlbGxvJzoKCiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3NlbmRlckhlbGxvJyk7CiAgICAgICAgICAgICAgY2hhdEtleXMuaGFuZHNoYWtlSGlzdG9yeS5zZW5kZXJIZWxsbyA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UpOwogICAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSA9IF90aGlzLmNyeXB0by5kZWNvZGUobWVzc2FnZS5ib2R5LnZhbHVlKTsKICAgICAgICAgICAgICBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlUmFuZG9tKCk7CgogICAgICAgICAgICAgIHZhciBzZW5kZXJIZWxsb01zZyA9IHsKICAgICAgICAgICAgICAgIHR5cGU6ICdoYW5kc2hha2UnLAogICAgICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSwKICAgICAgICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sCiAgICAgICAgICAgICAgICBib2R5OiB7CiAgICAgICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAncmVjZWl2ZXJIZWxsbycsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdGhpcy5jcnlwdG8uZW5jb2RlKGNoYXRLZXlzLmtleXMudG9SYW5kb20pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5LnJlY2VpdmVySGVsbG8gPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChzZW5kZXJIZWxsb01zZywgdW5kZWZpbmVkLCBjaGF0S2V5cy5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7CiAgICAgICAgICAgICAgcmVzb2x2ZSh7IG1lc3NhZ2U6IHNlbmRlckhlbGxvTXNnLCBjaGF0S2V5czogY2hhdEtleXMgfSk7CgogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICdyZWNlaXZlckhlbGxvJzoKCiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlY2VpdmVySGVsbG8nKTsKICAgICAgICAgICAgICBjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5LnJlY2VpdmVySGVsbG8gPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlKTsKCiAgICAgICAgICAgICAgX3RoaXMudmFsaWRhdGVBc3NlcnRpb24obWVzc2FnZS5ib2R5LmlkZW50aXR5LmFzc2VydGlvbikudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKCiAgICAgICAgICAgICAgICB2YXIgcmVjZWl2ZXJQdWJsaWNLZXkgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHZhbHVlLmNvbnRlbnRzLm5vbmNlKTsKICAgICAgICAgICAgICAgIHZhciBwcmVtYXN0ZXJTZWNyZXQgPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVQTVMoKTsKICAgICAgICAgICAgICAgIHZhciB0b1JhbmRvbSA9IG1lc3NhZ2UuYm9keS52YWx1ZTsKICAgICAgICAgICAgICAgIGNoYXRLZXlzLmh5cGVydHlUby5hc3NlcnRpb24gPSBtZXNzYWdlLmJvZHkuaWRlbnRpdHkuYXNzZXJ0aW9uOwogICAgICAgICAgICAgICAgY2hhdEtleXMuaHlwZXJ0eVRvLnB1YmxpY0tleSA9IHJlY2VpdmVyUHVibGljS2V5OwogICAgICAgICAgICAgICAgY2hhdEtleXMuaHlwZXJ0eVRvLnVzZXJJRCA9IHZhbHVlLmNvbnRlbnRzLmVtYWlsOwogICAgICAgICAgICAgICAgY2hhdEtleXMua2V5cy50b1JhbmRvbSA9IF90aGlzLmNyeXB0by5kZWNvZGUodG9SYW5kb20pOwogICAgICAgICAgICAgICAgY2hhdEtleXMua2V5cy5wcmVtYXN0ZXJLZXkgPSBwcmVtYXN0ZXJTZWNyZXQ7CgogICAgICAgICAgICAgICAgdmFyIGNvbmNhdEtleSA9IF90aGlzLmNyeXB0by5jb25jYXRQTVN3aXRoUmFuZG9tcyhwcmVtYXN0ZXJTZWNyZXQsIGNoYXRLZXlzLmtleXMudG9SYW5kb20sIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSk7CgogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5nZW5lcmF0ZU1hc3RlclNlY3JldChjb25jYXRLZXksICdtZXNzYWdlSGlzdG9yaWMnICsgY2hhdEtleXMua2V5cy50b1JhbmRvbSArIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSk7CgogICAgICAgICAgICAgICAgLy9nZW5lcmF0ZSB0aGUgbWFzdGVyIGtleQogICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKG1hc3RlcktleSkgewogICAgICAgICAgICAgICAgY2hhdEtleXMua2V5cy5tYXN0ZXJLZXkgPSBtYXN0ZXJLZXk7CgogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5nZW5lcmF0ZUtleXMobWFzdGVyS2V5LCAna2V5IGV4cGFuc2lvbicgKyBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tICsgY2hhdEtleXMua2V5cy5mcm9tUmFuZG9tKTsKCiAgICAgICAgICAgICAgICAvL2dlbmVyYXRlIHRoZSBzeW1tZXRyaWMgYW5kIGhhc2gga2V5cwogICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGtleXMpIHsKCiAgICAgICAgICAgICAgICBjaGF0S2V5cy5rZXlzLmh5cGVydHlUb1Nlc3Npb25LZXkgPSBuZXcgVWludDhBcnJheShrZXlzWzBdKTsKICAgICAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5ID0gbmV3IFVpbnQ4QXJyYXkoa2V5c1sxXSk7CiAgICAgICAgICAgICAgICBjaGF0S2V5cy5rZXlzLmh5cGVydHlUb0hhc2hLZXkgPSBuZXcgVWludDhBcnJheShrZXlzWzJdKTsKICAgICAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21IYXNoS2V5ID0gbmV3IFVpbnQ4QXJyYXkoa2V5c1szXSk7CiAgICAgICAgICAgICAgICBpdiA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZUlWKCk7CiAgICAgICAgICAgICAgICB2YWx1ZS5pdiA9IF90aGlzLmNyeXB0by5lbmNvZGUoaXYpOwoKICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlU3RydWN0dXJlID0gewogICAgICAgICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJywKICAgICAgICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSwKICAgICAgICAgICAgICAgICAgZnJvbTogbWVzc2FnZS50bywKICAgICAgICAgICAgICAgICAgYm9keTogewogICAgICAgICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAnc2VuZGVyQ2VydGlmaWNhdGUnCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgLy8gaGFzaCB0aGUgdmFsdWUgYW5kIHRoZSBpdgogICAgICAgICAgICAgICAgZmlsdGVyZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZVN0cnVjdHVyZSwgJ29rJyArIGl2LCBjaGF0S2V5cy5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmhhc2hITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21IYXNoS2V5LCBmaWx0ZXJlZE1lc3NhZ2UpOwogICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGhhc2gpIHsKICAgICAgICAgICAgICAgIHZhbHVlLmhhc2ggPSBfdGhpcy5jcnlwdG8uZW5jb2RlKGhhc2gpOwoKICAgICAgICAgICAgICAgIC8vZW5jcnlwdCB0aGUgZGF0YQogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5lbmNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5LCAnb2snLCBpdik7CiAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoZW5jcnlwdGVkRGF0YSkgewogICAgICAgICAgICAgICAgdmFsdWUuc3ltZXRyaWNFbmNyeXB0aW9uID0gX3RoaXMuY3J5cHRvLmVuY29kZShlbmNyeXB0ZWREYXRhKTsKCiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmVuY3J5cHRSU0EoY2hhdEtleXMuaHlwZXJ0eVRvLnB1YmxpY0tleSwgY2hhdEtleXMua2V5cy5wcmVtYXN0ZXJLZXkpOwogICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGVuY3J5cHRlZFZhbHVlKSB7CgogICAgICAgICAgICAgICAgdmFsdWUuYXNzeW1ldHJpY0VuY3J5cHRpb24gPSBfdGhpcy5jcnlwdG8uZW5jb2RlKGVuY3J5cHRlZFZhbHVlKTsKCiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZVN0cnVjdHVyZSA9IHsKICAgICAgICAgICAgICAgICAgdHlwZTogJ2hhbmRzaGFrZScsCiAgICAgICAgICAgICAgICAgIHRvOiBtZXNzYWdlLmZyb20sCiAgICAgICAgICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sCiAgICAgICAgICAgICAgICAgIGJvZHk6IHsKICAgICAgICAgICAgICAgICAgICBoYW5kc2hha2VQaGFzZTogJ3NlbmRlckNlcnRpZmljYXRlJwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlVG9IYXNoID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZVN0cnVjdHVyZSwgY2hhdEtleXMua2V5cy5wcmVtYXN0ZXJLZXksIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTsKCiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLnNpZ25SU0EoY2hhdEtleXMuaHlwZXJ0eUZyb20ucHJpdmF0ZUtleSwgKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKGNoYXRLZXlzLmhhbmRzaGFrZUhpc3RvcnkpICsgKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKG1lc3NhZ2VUb0hhc2gpKTsKICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChzaWduYXR1cmUpIHsKCiAgICAgICAgICAgICAgICB2YWx1ZS5zaWduYXR1cmUgPSBfdGhpcy5jcnlwdG8uZW5jb2RlKHNpZ25hdHVyZSk7CgogICAgICAgICAgICAgICAgdmFyIHJlY2VpdmVySGVsbG9Nc2cgPSB7CiAgICAgICAgICAgICAgICAgIHR5cGU6ICdoYW5kc2hha2UnLAogICAgICAgICAgICAgICAgICB0bzogbWVzc2FnZS5mcm9tLAogICAgICAgICAgICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLAogICAgICAgICAgICAgICAgICBib2R5OiB7CiAgICAgICAgICAgICAgICAgICAgaGFuZHNoYWtlUGhhc2U6ICdzZW5kZXJDZXJ0aWZpY2F0ZScsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGJ0b2EoKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKHZhbHVlKSkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGNoYXRLZXlzLmhhbmRzaGFrZUhpc3Rvcnkuc2VuZGVyQ2VydGlmaWNhdGUgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChyZWNlaXZlckhlbGxvTXNnLCAnb2snICsgaXYsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTsKCiAgICAgICAgICAgICAgICByZXNvbHZlKHsgbWVzc2FnZTogcmVjZWl2ZXJIZWxsb01zZywgY2hhdEtleXM6IGNoYXRLZXlzIH0pOwogICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnJvcik7CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICdzZW5kZXJDZXJ0aWZpY2F0ZSc6CgogICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzZW5kZXJDZXJ0aWZpY2F0ZScpOwogICAgICAgICAgICAgIHZhciByZWNlaXZlZFZhbHVlID0gSlNPTi5wYXJzZShhdG9iKG1lc3NhZ2UuYm9keS52YWx1ZSkpOwoKICAgICAgICAgICAgICBfdGhpcy52YWxpZGF0ZUFzc2VydGlvbihtZXNzYWdlLmJvZHkuaWRlbnRpdHkuYXNzZXJ0aW9uKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgICAgICAgdmFyIGVuY3J5cHRlZFBNUyA9IF90aGlzLmNyeXB0by5kZWNvZGUocmVjZWl2ZWRWYWx1ZS5hc3N5bWV0cmljRW5jcnlwdGlvbik7CiAgICAgICAgICAgICAgICB2YXIgc2VuZGVyUHVibGljS2V5ID0gX3RoaXMuY3J5cHRvLmRlY29kZSh2YWx1ZS5jb250ZW50cy5ub25jZSk7CiAgICAgICAgICAgICAgICBjaGF0S2V5cy5oeXBlcnR5VG8uYXNzZXJ0aW9uID0gbWVzc2FnZS5ib2R5LmlkZW50aXR5LmFzc2VydGlvbjsKICAgICAgICAgICAgICAgIGNoYXRLZXlzLmh5cGVydHlUby5wdWJsaWNLZXkgPSBzZW5kZXJQdWJsaWNLZXk7CiAgICAgICAgICAgICAgICBjaGF0S2V5cy5oeXBlcnR5VG8udXNlcklEID0gdmFsdWUuY29udGVudHMuZW1haWw7CgogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5kZWNyeXB0UlNBKGNoYXRLZXlzLmh5cGVydHlGcm9tLnByaXZhdGVLZXksIGVuY3J5cHRlZFBNUyk7CiAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7CiAgICAgICAgICAgICAgICByZWplY3QoJ0Vycm9yIGR1cmluZyBhdXRoZW50aWNhdGlvbiBvZiBpZGVudGl0eScpOwoKICAgICAgICAgICAgICAgIC8vb2J0YWluIHRoZSBQcmVtYXN0ZXJLZXkgdXNpbmcgdGhlIHByaXZhdGUga2V5CiAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocG1zKSB7CgogICAgICAgICAgICAgICAgY2hhdEtleXMua2V5cy5wcmVtYXN0ZXJLZXkgPSBuZXcgVWludDhBcnJheShwbXMpOwoKICAgICAgICAgICAgICAgIHZhciBzaWduYXR1cmUgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHJlY2VpdmVkVmFsdWUuc2lnbmF0dXJlKTsKCiAgICAgICAgICAgICAgICB2YXIgcmVjZWl2ZWRtc2dUb0hhc2ggPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBjaGF0S2V5cy5rZXlzLnByZW1hc3RlcktleSk7CgogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by52ZXJpZnlSU0EoY2hhdEtleXMuaHlwZXJ0eVRvLnB1YmxpY0tleSwgKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKGNoYXRLZXlzLmhhbmRzaGFrZUhpc3RvcnkpICsgKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKHJlY2VpdmVkbXNnVG9IYXNoKSwgc2lnbmF0dXJlKTsKCiAgICAgICAgICAgICAgICAvLyB2YWxpZGF0ZXMgdGhlIHNpZ25hdHVyZSByZWNlaXZlZAogICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHNpZ25WYWxpZGF0aW9uUmVzdWx0KSB7CgogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3NpZ25hdHVyZSB2YWxpZGF0aW9uIHJlc3VsdCAnLCBzaWduVmFsaWRhdGlvblJlc3VsdCk7CiAgICAgICAgICAgICAgICB2YXIgY29uY2F0S2V5ID0gX3RoaXMuY3J5cHRvLmNvbmNhdFBNU3dpdGhSYW5kb21zKGNoYXRLZXlzLmtleXMucHJlbWFzdGVyS2V5LCBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tLCBjaGF0S2V5cy5rZXlzLmZyb21SYW5kb20pOwoKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVNYXN0ZXJTZWNyZXQoY29uY2F0S2V5LCAnbWVzc2FnZUhpc3RvcmljJyArIGNoYXRLZXlzLmtleXMudG9SYW5kb20gKyBjaGF0S2V5cy5rZXlzLmZyb21SYW5kb20pOwoKICAgICAgICAgICAgICAgIC8vIGdlbmVyYXRlcyB0aGUgbWFzdGVyIGtleXMgZnJvbSB0aGUgUHJlbWFzdGVyIGtleSBhbmQgdGhlIHJhbmRvbXMKICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChtYXN0ZXJLZXkpIHsKICAgICAgICAgICAgICAgIGNoYXRLZXlzLmtleXMubWFzdGVyS2V5ID0gbWFzdGVyS2V5OwoKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVLZXlzKG1hc3RlcktleSwgJ2tleSBleHBhbnNpb24nICsgY2hhdEtleXMua2V5cy50b1JhbmRvbSArIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSk7CgogICAgICAgICAgICAgICAgLy8gZ2VuZXJhdGVzIHRoZSBzeW1tZXRyaWMga2V5cyB0byBiZSB1c2VkIGluIHRoZSBzeW1tZXRyaWMgZW5jcnlwdGlvbgogICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGtleXMpIHsKICAgICAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5ID0gbmV3IFVpbnQ4QXJyYXkoa2V5c1swXSk7CiAgICAgICAgICAgICAgICBjaGF0S2V5cy5rZXlzLmh5cGVydHlUb1Nlc3Npb25LZXkgPSBuZXcgVWludDhBcnJheShrZXlzWzFdKTsKICAgICAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21IYXNoS2V5ID0gbmV3IFVpbnQ4QXJyYXkoa2V5c1syXSk7CiAgICAgICAgICAgICAgICBjaGF0S2V5cy5rZXlzLmh5cGVydHlUb0hhc2hLZXkgPSBuZXcgVWludDhBcnJheShrZXlzWzNdKTsKICAgICAgICAgICAgICAgIGl2ID0gX3RoaXMuY3J5cHRvLmRlY29kZShyZWNlaXZlZFZhbHVlLml2KTsKICAgICAgICAgICAgICAgIHZhciBkYXRhID0gX3RoaXMuY3J5cHRvLmRlY29kZShyZWNlaXZlZFZhbHVlLnN5bWV0cmljRW5jcnlwdGlvbik7CgogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5kZWNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSwgZGF0YSwgaXYpOwogICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGRlY3J5cHRlZERhdGEpIHsKICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2RlY3J5cHRlZERhdGEnLCBkZWNyeXB0ZWREYXRhKTsKCiAgICAgICAgICAgICAgICBjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5LnNlbmRlckNlcnRpZmljYXRlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkRGF0YSArIGl2KTsKCiAgICAgICAgICAgICAgICB2YXIgaGFzaFJlY2VpdmVkID0gX3RoaXMuY3J5cHRvLmRlY29kZShyZWNlaXZlZFZhbHVlLmhhc2gpOwoKICAgICAgICAgICAgICAgIGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIGRlY3J5cHRlZERhdGEgKyBpdik7CgogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by52ZXJpZnlITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvSGFzaEtleSwgZmlsdGVyZWRNZXNzYWdlLCBoYXNoUmVjZWl2ZWQpOwogICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZlcmlmaWVkSGFzaCkgewoKICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ3Jlc3VsdCBvZiBoYXNoIHZlcmlmaWNhdGlvbiAnLCB2ZXJpZmllZEhhc2gpOwogICAgICAgICAgICAgICAgdmFyIHJlY2VpdmVyRmluaXNoZWRNZXNzYWdlID0gewogICAgICAgICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJywKICAgICAgICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSwKICAgICAgICAgICAgICAgICAgZnJvbTogbWVzc2FnZS50bywKICAgICAgICAgICAgICAgICAgYm9keTogewogICAgICAgICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAncmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UnCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBpdiA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZUlWKCk7CiAgICAgICAgICAgICAgICB2YWx1ZS5pdiA9IF90aGlzLmNyeXB0by5lbmNvZGUoaXYpOwoKICAgICAgICAgICAgICAgIGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKHJlY2VpdmVyRmluaXNoZWRNZXNzYWdlLCAnb2shJyArIGl2LCBjaGF0S2V5cy5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7CgogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5oYXNoSE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tSGFzaEtleSwgcmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UpOwogICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGhhc2gpIHsKCiAgICAgICAgICAgICAgICB2YWx1ZS5oYXNoID0gX3RoaXMuY3J5cHRvLmVuY29kZShoYXNoKTsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uZW5jcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tU2Vzc2lvbktleSwgJ29rIScsIGl2KTsKICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChlbmNyeXB0ZWRWYWx1ZSkgewogICAgICAgICAgICAgICAgdmFsdWUudmFsdWUgPSBfdGhpcy5jcnlwdG8uZW5jb2RlKGVuY3J5cHRlZFZhbHVlKTsKICAgICAgICAgICAgICAgIHZhciByZWNlaXZlckZpbmlzaGVkTWVzc2FnZSA9IHsKICAgICAgICAgICAgICAgICAgdHlwZTogJ2hhbmRzaGFrZScsCiAgICAgICAgICAgICAgICAgIHRvOiBtZXNzYWdlLmZyb20sCiAgICAgICAgICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sCiAgICAgICAgICAgICAgICAgIGJvZHk6IHsKICAgICAgICAgICAgICAgICAgICBoYW5kc2hha2VQaGFzZTogJ3JlY2VpdmVyRmluaXNoZWRNZXNzYWdlJywKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYnRvYSgoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkodmFsdWUpKQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIGNoYXRLZXlzLmhhbmRzaGFrZUhpc3RvcnkucmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChyZWNlaXZlckZpbmlzaGVkTWVzc2FnZSwgJ29rIScgKyBpdiwgY2hhdEtleXMuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pOwogICAgICAgICAgICAgICAgY2hhdEtleXMuYXV0aGVudGljYXRlZCA9IHRydWU7CiAgICAgICAgICAgICAgICByZXNvbHZlKHsgbWVzc2FnZTogcmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UsIGNoYXRLZXlzOiBjaGF0S2V5cyB9KTsKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJ3JlY2VpdmVyRmluaXNoZWRNZXNzYWdlJzoKCiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlY2VpdmVyRmluaXNoZWRNZXNzYWdlJyk7CiAgICAgICAgICAgICAgY2hhdEtleXMuYXV0aGVudGljYXRlZCA9IHRydWU7CgogICAgICAgICAgICAgIHZhbHVlID0gSlNPTi5wYXJzZShhdG9iKG1lc3NhZ2UuYm9keS52YWx1ZSkpOwoKICAgICAgICAgICAgICBpdiA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWUuaXYpOwogICAgICAgICAgICAgIHZhciBkYXRhID0gX3RoaXMuY3J5cHRvLmRlY29kZSh2YWx1ZS52YWx1ZSk7CiAgICAgICAgICAgICAgaGFzaCA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWUuaGFzaCk7CgogICAgICAgICAgICAgIF90aGlzLmNyeXB0by5kZWNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSwgZGF0YSwgaXYpLnRoZW4oZnVuY3Rpb24gKGRlY3J5cHRlZERhdGEpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkZWNyeXB0ZWREYXRhJywgZGVjcnlwdGVkRGF0YSk7CiAgICAgICAgICAgICAgICBjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5LnJlY2VpdmVyRmluaXNoZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkRGF0YSArIGl2KTsKCiAgICAgICAgICAgICAgICB2YXIgZmlsdGVyZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGF0YSArIGl2KTsKICAgICAgICAgICAgICAgIF90aGlzLmNyeXB0by52ZXJpZnlITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvSGFzaEtleSwgZmlsdGVyZWRNZXNzYWdlLCBoYXNoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2hhc2ggcmVzdWx0JywgcmVzdWx0KTsKCiAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIHdhcyBhbiBpbml0aWFsIG1lc3NhZ2UgdGhhdCB3YXMgYmxvY2tlZCBhbmQgc2VuZCBpdAogICAgICAgICAgICAgICAgICBpZiAoY2hhdEtleXMuaW5pdGlhbE1lc3NhZ2UpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaW5pdGlhbE1lc3NhZ2UgPSB7CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY3JlYXRlJywKICAgICAgICAgICAgICAgICAgICAgIHRvOiBtZXNzYWdlLmZyb20sCiAgICAgICAgICAgICAgICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLAogICAgICAgICAgICAgICAgICAgICAgYm9keTogewogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY2hhdEtleXMuaW5pdGlhbE1lc3NhZ2UuYm9keS52YWx1ZQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgIHJlc29sdmUoeyBtZXNzYWdlOiBpbml0aWFsTWVzc2FnZSwgY2hhdEtleXM6IGNoYXRLZXlzIH0pOwoKICAgICAgICAgICAgICAgICAgICAvL3NlbmRzIHRoZSBzZXNzaW9uS2V5IHRvIHRoZSBzdWJzY3JpYmVyIGh5cGVydHkKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc2VuZFJlcG9ydGVyU2Vzc2lvbktleShtZXNzYWdlLCBjaGF0S2V5cykudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJ3JlcG9ydGVyU2Vzc2lvbktleSc6CgogICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXBvcnRlclNlc3Npb25LZXknKTsKCiAgICAgICAgICAgICAgdmFyIHZhbHVlSVZhbmRIYXNoID0gSlNPTi5wYXJzZShhdG9iKG1lc3NhZ2UuYm9keS52YWx1ZSkpOwogICAgICAgICAgICAgIGhhc2ggPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHZhbHVlSVZhbmRIYXNoLmhhc2gpOwogICAgICAgICAgICAgIGl2ID0gX3RoaXMuY3J5cHRvLmRlY29kZSh2YWx1ZUlWYW5kSGFzaC5pdik7CiAgICAgICAgICAgICAgdmFyIGVuY3J5cHRlZFZhbHVlID0gX3RoaXMuY3J5cHRvLmRlY29kZSh2YWx1ZUlWYW5kSGFzaC52YWx1ZSk7CiAgICAgICAgICAgICAgdmFyIHBhcnNlZFZhbHVlID0gdm9pZCAwOwogICAgICAgICAgICAgIHZhciBzZXNzaW9uS2V5ID0gdm9pZCAwOwogICAgICAgICAgICAgIHZhciBkYXRhT2JqZWN0VVJMID0gdm9pZCAwOwogICAgICAgICAgICAgIHZhciByZWNlaXZlckFja25vd2xlZGdlTXNnID0gdm9pZCAwOwoKICAgICAgICAgICAgICBfdGhpcy5jcnlwdG8uZGVjcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb1Nlc3Npb25LZXksIGVuY3J5cHRlZFZhbHVlLCBpdikudGhlbihmdW5jdGlvbiAoZGVjcnlwdGVkVmFsdWUpIHsKCiAgICAgICAgICAgICAgICBwYXJzZWRWYWx1ZSA9IEpTT04ucGFyc2UoZGVjcnlwdGVkVmFsdWUpOwogICAgICAgICAgICAgICAgc2Vzc2lvbktleSA9IF90aGlzLmNyeXB0by5kZWNvZGUocGFyc2VkVmFsdWUudmFsdWUpOwogICAgICAgICAgICAgICAgZGF0YU9iamVjdFVSTCA9IHBhcnNlZFZhbHVlLmRhdGFPYmplY3RVUkw7CgogICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2VUb0hhc2ggPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBkZWNyeXB0ZWRWYWx1ZSArIGl2KTsKCiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLnZlcmlmeUhNQUMoY2hhdEtleXMua2V5cy5oeXBlcnR5VG9IYXNoS2V5LCBtZXNzYWdlVG9IYXNoLCBoYXNoKTsKICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChoYXNoUmVzdWx0KSB7CgogICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnaGFzaCBzdWNjZXNzZnVsbHkgdmFsaWRhdGVkICcsIGhhc2hSZXN1bHQpOwoKICAgICAgICAgICAgICAgIF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5c1tkYXRhT2JqZWN0VVJMXSA9IHsgc2Vzc2lvbktleTogc2Vzc2lvbktleSwgaXNUb0VuY3J5cHQ6IHRydWUgfTsKCiAgICAgICAgICAgICAgICBpdiA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZUlWKCk7CiAgICAgICAgICAgICAgICB2YWx1ZS5pdiA9IF90aGlzLmNyeXB0by5lbmNvZGUoaXYpOwoKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uZW5jcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tU2Vzc2lvbktleSwgJ29rISEnLCBpdik7CiAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoZW5jcnlwdGVkVmFsdWUpIHsKCiAgICAgICAgICAgICAgICByZWNlaXZlckFja25vd2xlZGdlTXNnID0gewogICAgICAgICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJywKICAgICAgICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSwKICAgICAgICAgICAgICAgICAgZnJvbTogbWVzc2FnZS50bywKICAgICAgICAgICAgICAgICAgYm9keTogewogICAgICAgICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAncmVjZWl2ZXJBY2tub3dsZWRnZScKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICB2YWx1ZS52YWx1ZSA9IF90aGlzLmNyeXB0by5lbmNvZGUoZW5jcnlwdGVkVmFsdWUpOwogICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2VUb0hhc2ggPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChyZWNlaXZlckFja25vd2xlZGdlTXNnLCAnb2shIScgKyBpdiwgY2hhdEtleXMuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pOwoKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uaGFzaEhNQUMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbUhhc2hLZXksIG1lc3NhZ2VUb0hhc2gpOwogICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGhhc2hlZE1lc3NhZ2UpIHsKICAgICAgICAgICAgICAgIHZhciBmaW5hbFZhbHVlID0gYnRvYSgoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkoeyB2YWx1ZTogdmFsdWUudmFsdWUsIGhhc2g6IF90aGlzLmNyeXB0by5lbmNvZGUoaGFzaGVkTWVzc2FnZSksIGl2OiB2YWx1ZS5pdiB9KSk7CgogICAgICAgICAgICAgICAgcmVjZWl2ZXJBY2tub3dsZWRnZU1zZy5ib2R5LnZhbHVlID0gZmluYWxWYWx1ZTsKICAgICAgICAgICAgICAgIHJlc29sdmUoeyBtZXNzYWdlOiByZWNlaXZlckFja25vd2xlZGdlTXNnLCBjaGF0S2V5czogY2hhdEtleXMgfSk7CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICdyZWNlaXZlckFja25vd2xlZGdlJzoKCiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlY2VpdmVyQWNrbm93bGVkZ2UnKTsKCiAgICAgICAgICAgICAgdmFyIHJlY2VpdmVkdmFsdWVJVmFuZEhhc2ggPSBKU09OLnBhcnNlKGF0b2IobWVzc2FnZS5ib2R5LnZhbHVlKSk7CiAgICAgICAgICAgICAgdmFyIHJlY2VpdmVkSGFzaCA9IF90aGlzLmNyeXB0by5kZWNvZGUocmVjZWl2ZWR2YWx1ZUlWYW5kSGFzaC5oYXNoKTsKICAgICAgICAgICAgICBpdiA9IF90aGlzLmNyeXB0by5kZWNvZGUocmVjZWl2ZWR2YWx1ZUlWYW5kSGFzaC5pdik7CiAgICAgICAgICAgICAgdmFyIHJlY2VpdmVkRW5jcnlwdGVkVmFsdWUgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHJlY2VpdmVkdmFsdWVJVmFuZEhhc2gudmFsdWUpOwoKICAgICAgICAgICAgICBfdGhpcy5jcnlwdG8uZGVjcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb1Nlc3Npb25LZXksIHJlY2VpdmVkRW5jcnlwdGVkVmFsdWUsIGl2KS50aGVuKGZ1bmN0aW9uIChkZWNyeXB0ZWRWYWx1ZSkgewoKICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBkZWNyeXB0ZWRWYWx1ZSArIGl2KTsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8udmVyaWZ5SE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb0hhc2hLZXksIGZpbHRlcmVkTWVzc2FnZSwgcmVjZWl2ZWRIYXNoKTsKICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChoYXNoUmVzdWx0KSB7CiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdoYXNoUmVzdWx0ICcsIGhhc2hSZXN1bHQpOwoKICAgICAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IGNoYXRLZXlzLmNhbGxiYWNrOwoKICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykgewogICAgICAgICAgICAgICAgICBjYWxsYmFjaygnaGFuZFNoYWtlRW5kJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXNvbHZlKCdoYW5kU2hha2VFbmQnKTsKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgcmVqZWN0KG1lc3NhZ2UpOwogICAgICAgICAgfQogICAgICAgIH0pKCk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ19zZW5kUmVwb3J0ZXJTZXNzaW9uS2V5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBfc2VuZFJlcG9ydGVyU2Vzc2lvbktleShtZXNzYWdlLCBjaGF0S2V5cykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgc2Vzc2lvbktleUJ1bmRsZSA9IF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5c1tjaGF0S2V5cy5kYXRhT2JqZWN0VVJMXTsKICAgICAgdmFyIHJlcG9ydGVyU2Vzc2lvbktleU1zZyA9IHZvaWQgMDsKICAgICAgdmFyIHZhbHVlVG9FbmNyeXB0ID0gdm9pZCAwOwogICAgICB2YXIgc2Vzc2lvbktleSA9IHZvaWQgMDsKICAgICAgdmFyIGl2ID0gdm9pZCAwOwogICAgICB2YXIgdmFsdWUgPSB7fTsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICAvL2lmIHRoZXJlIGlzIG5vdCB5ZXQgYSBzZXNzaW9uIEtleSwgZ2VuZXJhdGVzIGEgbmV3IG9uZQogICAgICAgIGlmICghc2Vzc2lvbktleUJ1bmRsZSkgewogICAgICAgICAgc2Vzc2lvbktleSA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZVJhbmRvbSgpOwogICAgICAgICAgX3RoaXMuZGF0YU9iamVjdFNlc3Npb25LZXlzW2NoYXRLZXlzLmRhdGFPYmplY3RVUkxdID0geyBzZXNzaW9uS2V5OiBzZXNzaW9uS2V5LCBpc1RvRW5jcnlwdDogdHJ1ZSB9OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzZXNzaW9uS2V5ID0gc2Vzc2lvbktleUJ1bmRsZS5zZXNzaW9uS2V5OwogICAgICAgIH0KCiAgICAgICAgdmFsdWVUb0VuY3J5cHQgPSAoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkoeyB2YWx1ZTogX3RoaXMuY3J5cHRvLmVuY29kZShzZXNzaW9uS2V5KSwgZGF0YU9iamVjdFVSTDogY2hhdEtleXMuZGF0YU9iamVjdFVSTCB9KTsKCiAgICAgICAgaXYgPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVJVigpOwogICAgICAgIHZhbHVlLml2ID0gX3RoaXMuY3J5cHRvLmVuY29kZShpdik7CiAgICAgICAgX3RoaXMuY3J5cHRvLmVuY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbVNlc3Npb25LZXksIHZhbHVlVG9FbmNyeXB0LCBpdikudGhlbihmdW5jdGlvbiAoZW5jcnlwdGVkVmFsdWUpIHsKCiAgICAgICAgICByZXBvcnRlclNlc3Npb25LZXlNc2cgPSB7CiAgICAgICAgICAgIHR5cGU6ICdoYW5kc2hha2UnLAogICAgICAgICAgICB0bzogbWVzc2FnZS5mcm9tLAogICAgICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLAogICAgICAgICAgICBib2R5OiB7CiAgICAgICAgICAgICAgaGFuZHNoYWtlUGhhc2U6ICdyZXBvcnRlclNlc3Npb25LZXknLAogICAgICAgICAgICAgIHZhbHVlOiBfdGhpcy5jcnlwdG8uZW5jb2RlKGVuY3J5cHRlZFZhbHVlKQogICAgICAgICAgICB9CiAgICAgICAgICB9OwoKICAgICAgICAgIHZhciBmaWx0ZXJlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChyZXBvcnRlclNlc3Npb25LZXlNc2csIHZhbHVlVG9FbmNyeXB0ICsgaXYsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTsKCiAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmhhc2hITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21IYXNoS2V5LCBmaWx0ZXJlZE1lc3NhZ2UpOwogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGhhc2hlZE1lc3NhZ2UpIHsKCiAgICAgICAgICB2YXIgdmFsdWVXaXRoSGFzaCA9IGJ0b2EoKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKHsgdmFsdWU6IHJlcG9ydGVyU2Vzc2lvbktleU1zZy5ib2R5LnZhbHVlLCBoYXNoOiBfdGhpcy5jcnlwdG8uZW5jb2RlKGhhc2hlZE1lc3NhZ2UpLCBpdjogdmFsdWUuaXYgfSkpOwoKICAgICAgICAgIHJlcG9ydGVyU2Vzc2lvbktleU1zZy5ib2R5LnZhbHVlID0gdmFsdWVXaXRoSGFzaDsKICAgICAgICAgIHJlc29sdmUoeyBtZXNzYWdlOiByZXBvcnRlclNlc3Npb25LZXlNc2csIGNoYXRLZXlzOiBjaGF0S2V5cyB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIHJldHVybnMgdGhlIHJlcG9ydGVyIGFzc29jaWF0ZWQgdG8gdGhlIGRhdGFPYmplY3QgVVJMCiAgICAqIEBwYXJhbSAgIHtTdHJpbmd9ICAgZGF0YU9iamVjdFVSTCAgICAgICAgIGRhdGFPYmplY3QgdXJsCiAgICAqIEByZXR1cm4gICB7U3RyaW5nfSAgcmVwb3J0ZXIgICAgICAgICAgICAgIGRhdGFPYmplY3QgdXJsIHJlcG9ydGVyCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdfZ2V0SHlwZXJ0eUZyb21EYXRhT2JqZWN0JywKICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0SHlwZXJ0eUZyb21EYXRhT2JqZWN0KGRhdGFPYmplY3RVUkwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICAvL1RPRE8gcmVtb3ZlIHRoaXMgbG9naWMgYW5kIG1vdmUgaXQgdG8gYSB1dGlsIGZ1bmN0aW9uCgogICAgICAgIHZhciBzcGxpdGVkVVJMID0gZGF0YU9iamVjdFVSTC5zcGxpdCgnLycpOwogICAgICAgIHZhciBmaW5hbFVSTCA9IHNwbGl0ZWRVUkxbMF0gKyAnLy8nICsgc3BsaXRlZFVSTFsyXSArICcvJyArIHNwbGl0ZWRVUkxbM107CiAgICAgICAgaWYgKHNwbGl0ZWRVUkwubGVuZ3RoID4gNikgewogICAgICAgICAgZmluYWxVUkwgPSBzcGxpdGVkVVJMWzBdICsgJy8vJyArIHNwbGl0ZWRVUkxbMl0gKyAnLycgKyBzcGxpdGVkVVJMWzNdICsgJy8nICsgc3BsaXRlZFVSTFs0XTsKICAgICAgICB9CgogICAgICAgIC8vIGNoZWNrIGlmIGlzIHRoZSBjcmVhdG9yIG9mIHRoZSBoeXBlcnR5CiAgICAgICAgdmFyIHJlcG9ydGVyVVJMID0gX3RoaXMucmVnaXN0cnkuZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzKGZpbmFsVVJMKTsKCiAgICAgICAgaWYgKHJlcG9ydGVyVVJMKSB7CiAgICAgICAgICByZXNvbHZlKHJlcG9ydGVyVVJMKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgaXMgYWxyZWFkeSBhbiBhc3NvY2lhdGlvbiBmcm9tIGFuIGh5cGVydHlVUkwgdG8gdGhlIGRhdGFPYmplY3QKICAgICAgICAgIHZhciBzdG9yZWRSZXBvcnRlclVSTCA9IF90aGlzLmRhdGFPYmplY3RzSWRlbnRpdHlbZmluYWxVUkxdOwoKICAgICAgICAgIGlmIChzdG9yZWRSZXBvcnRlclVSTCkgewogICAgICAgICAgICByZXNvbHZlKHN0b3JlZFJlcG9ydGVyVVJMKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGFueSBoeXBlcnR5IHRoYXQgc3Vic2NyaWJlZCB0aGUgZGF0YU9iamVjdFVSTAogICAgICAgICAgICB2YXIgc3Vic2NyaWJlckh5cGVydHkgPSBfdGhpcy5yZWdpc3RyeS5nZXREYXRhT2JqZWN0U3Vic2NyaWJlckh5cGVydHkoZGF0YU9iamVjdFVSTCk7CgogICAgICAgICAgICBpZiAoc3Vic2NyaWJlckh5cGVydHkpIHsKICAgICAgICAgICAgICByZXNvbHZlKHN1YnNjcmliZXJIeXBlcnR5KTsKICAgICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgICAgLy8gc2VhcmNoIGluIGRvbWFpbiByZWdpc3RyeSBmb3IgdGhlIGh5cGVydHkgYXNzb2NpYXRlZCB0byB0aGUgZGF0YU9iamVjdAogICAgICAgICAgICAgIC8vIHNlYXJjaCBpbiBjYXNlIGlzIGEgc3Vic2NyaWJlciB3aG8gd2FudHMgdG8ga25vdyB0aGUgcmVwb3J0ZXIKICAgICAgICAgICAgICBfdGhpcy5yZWdpc3RyeS5kaXNjb3ZlckRhdGFPYmplY3RQZXJVUkwoZmluYWxVUkwsIHNwbGl0ZWRVUkxbMl0pLnRoZW4oZnVuY3Rpb24gKGRhdGFPYmplY3QpIHsKICAgICAgICAgICAgICAgIF90aGlzLmRhdGFPYmplY3RzSWRlbnRpdHlbZmluYWxVUkxdID0gZGF0YU9iamVjdC5yZXBvcnRlcjsKICAgICAgICAgICAgICAgIHJlc29sdmUoZGF0YU9iamVjdC5yZXBvcnRlcik7CiAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgKiBmaWx0ZXIgdGhlIG1lc3NhZ2VzIHRvIGhhc2gsIGJ5IHJlbW92aW5nIHNvbWUgZmllbGRzIG5vdCBnZW5lcmF0ZWQgYnkgdGhlIHJ1bnRpbWUgY29yZQogICAgKiBAcGFyYW0ge01lc3NhZ2V9ICBtZXNzYWdlICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZQogICAgKiBAcGFyYW0ge1N0cmluZ30gIGRlY3J5cHRlZFZhbHVlIChPcHRpb25hbCkgICAgdmFsdWUgZnJvbSBib2R5LnZhbHVlIGluIGNhc2UgaXQgb3JpZ2luYWxseSBjb21lcyBlbmNyeXB0ZWQKICAgICogQHBhcmFtIHtKU09OfSAgaWRlbnRpdHkoT3B0aW9uYWwpICAgIGFkZCB0aGUgaHlwZXJ0eSBpZGVudGl0eSBhc3NvY2lhdGVkIGluIGNhc2UgaXMgbm90IGFkZGVkIHRvIHRoZSBpbml0aWFsIG1lc3NhZ2UKICAgICogQHJldHVybiB7TWVzc2FnZX0gIG5ldyBtZXNzYWdlIGZpbHRlcmVkCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdfZmlsdGVyTWVzc2FnZVRvSGFzaCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkVmFsdWUsIGlkZW50aXR5KSB7CgogICAgICByZXR1cm4gewogICAgICAgIHR5cGU6IG1lc3NhZ2UudHlwZSwKICAgICAgICBmcm9tOiBtZXNzYWdlLmZyb20sCiAgICAgICAgdG86IG1lc3NhZ2UudG8sCiAgICAgICAgYm9keTogewogICAgICAgICAgaWRlbnRpdHk6IGlkZW50aXR5IHx8IG1lc3NhZ2UuYm9keS5pZGVudGl0eSwKICAgICAgICAgIHZhbHVlOiBkZWNyeXB0ZWRWYWx1ZSB8fCBtZXNzYWdlLmJvZHkudmFsdWUsCiAgICAgICAgICBoYW5kc2hha2VQaGFzZTogbWVzc2FnZS5ib2R5LmhhbmRzaGFrZVBoYXNlCiAgICAgICAgfQogICAgICB9OwogICAgfQoKICAgIC8qKgogICAgKiBnZW5lcmF0ZXMgdGhlIGluaXRpYWwgc3RydWN0dXJlIGZvciB0aGUga2V5cyBiZXR3ZWVuIHR3byB1c2VycwogICAgKiBAcGFyYW0ge0pTT059ICAgIG1lc3NhZ2UgICAgICAgICAgICAgIGluaXRpYWwgbWVzc2FnZSB0aGF0IHRyaWdnZXJzIHRoZSBtdXR1YWwgYXV0aGVudGljYXRpb24KICAgICogQHBhcmFtIHtTdHJpbmd9ICB1c2VyVVJMICAgICAgICAgICAgICB1c2VyVVJMCiAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVjZWl2ZXIoT3B0aW9uYWwpICBpbmRpY2F0ZXMgaWYgaXMgdGhlIHNlbmRlciBvciB0aGUgcmVjZWl2ZXIgdGhhdCBjcmVhdGVzIGEgbmV3IGNoYXQgY3J5cHRvCiAgICAqIEByZXR1cm4ge0pTT059IG5ld0NoYXRDcnlwdG8gIG5ldyBKU09OIHN0cnVjdHVyZSBmb3IgdGhlIGNoYXQgY3J5cHRvCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdfbmV3Q2hhdENyeXB0bycsCiAgICB2YWx1ZTogZnVuY3Rpb24gX25ld0NoYXRDcnlwdG8obWVzc2FnZSwgdXNlclVSTCwgcmVjZWl2ZXIpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIC8vY2hlY2sgd2hldGhlciBpcyB0aGUgc2VuZGVyIG9yIHRoZSByZWNlaXZlciB0byBjcmVhdGUgYSBuZXcgY2hhdENyeXB0bwogICAgICAvL3RvIG1hbnRhaW4gY29uc2lzdGVuY3kgb24gdGhlIGtleXMgaWYgdGhlIHJlY2VpdmVyIGNyZWF0ZSBhIG5ldyBjaGF0Q3J5cHRvLAogICAgICAvL3RoZW4gaW52ZXJ0IHRoZSBmaWVsZHMKICAgICAgdmFyIGZyb20gPSByZWNlaXZlciA/IG1lc3NhZ2UudG8gOiBtZXNzYWdlLmZyb207CiAgICAgIHZhciB0byA9IHJlY2VpdmVyID8gbWVzc2FnZS5mcm9tIDogbWVzc2FnZS50bzsKCiAgICAgIHZhciB1c2VySW5mbyA9IF90aGlzLmdldElkZW50aXR5KHVzZXJVUkwpOwoKICAgICAgdmFyIG5ld0NoYXRDcnlwdG8gPSB7CiAgICAgICAgaHlwZXJ0eUZyb206IHsKICAgICAgICAgIGh5cGVydHk6IGZyb20sCiAgICAgICAgICB1c2VySUQ6IHVzZXJJbmZvLm1lc3NhZ2VJbmZvLnVzZXJQcm9maWxlLnVzZXJuYW1lLAogICAgICAgICAgcHJpdmF0ZUtleTogdXNlckluZm8ua2V5UGFpci5wcml2YXRlLAogICAgICAgICAgcHVibGljS2V5OiB1c2VySW5mby5rZXlQYWlyLnB1YmxpYywKICAgICAgICAgIGFzc2VydGlvbjogdXNlckluZm8uYXNzZXJ0aW9uLAogICAgICAgICAgbWVzc2FnZUluZm86IHVzZXJJbmZvLm1lc3NhZ2VJbmZvCiAgICAgICAgfSwKICAgICAgICBoeXBlcnR5VG86IHsKICAgICAgICAgIGh5cGVydHk6IHRvLAogICAgICAgICAgdXNlcklEOiB1bmRlZmluZWQsCiAgICAgICAgICBwdWJsaWNLZXk6IHVuZGVmaW5lZCwKICAgICAgICAgIGFzc2VydGlvbjogdW5kZWZpbmVkCiAgICAgICAgfSwKICAgICAgICBrZXlzOiB7CiAgICAgICAgICBoeXBlcnR5VG9TZXNzaW9uS2V5OiB1bmRlZmluZWQsCiAgICAgICAgICBoeXBlcnR5RnJvbVNlc3Npb25LZXk6IHVuZGVmaW5lZCwKICAgICAgICAgIGh5cGVydHlUb0hhc2hLZXk6IHVuZGVmaW5lZCwKICAgICAgICAgIGh5cGVydHlGcm9tSGFzaEtleTogdW5kZWZpbmVkLAogICAgICAgICAgdG9SYW5kb206IHVuZGVmaW5lZCwKICAgICAgICAgIGZyb21SYW5kb206IHVuZGVmaW5lZCwKICAgICAgICAgIHByZW1hc3RlcktleTogdW5kZWZpbmVkLAogICAgICAgICAgbWFzdGVyS2V5OiB1bmRlZmluZWQKICAgICAgICB9LAogICAgICAgIGhhbmRzaGFrZUhpc3Rvcnk6IHsKICAgICAgICAgIHNlbmRlckhlbGxvOiB1bmRlZmluZWQsCiAgICAgICAgICByZWNlaXZlckhlbGxvOiB1bmRlZmluZWQsCiAgICAgICAgICBzZW5kZXJDZXJ0aWZpY2F0ZTogdW5kZWZpbmVkLAogICAgICAgICAgcmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2U6IHVuZGVmaW5lZAogICAgICAgIH0sCiAgICAgICAgaW5pdGlhbE1lc3NhZ2U6IG1lc3NhZ2UuYm9keS5pZ25vcmUgPyB1bmRlZmluZWQgOiBtZXNzYWdlLAogICAgICAgIGNhbGxiYWNrOiBtZXNzYWdlLmNhbGxiYWNrLAogICAgICAgIGF1dGhlbnRpY2F0ZWQ6IGZhbHNlLAogICAgICAgIGRhdGFPYmplY3RVUkw6IG1lc3NhZ2UuZGF0YU9iamVjdFVSTAogICAgICB9OwoKICAgICAgcmV0dXJuIG5ld0NoYXRDcnlwdG87CiAgICB9CiAgfSwgewogICAga2V5OiAnbWVzc2FnZUJ1cycsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF90aGlzLl9tZXNzYWdlQnVzOwogICAgfQoKICAgIC8qKgogICAgKiBTZXQgdGhlIG1lc3NhZ2VCdXMgaW4gdGhpcyBSZWdpc3RyeQogICAgKiBAcGFyYW0ge01lc3NhZ2VCdXN9ICAgICAgICAgICBtZXNzYWdlQnVzCiAgICAqLwogICAgLAogICAgc2V0OiBmdW5jdGlvbiBzZXQobWVzc2FnZUJ1cykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICBfdGhpcy5fbWVzc2FnZUJ1cyA9IG1lc3NhZ2VCdXM7CgogICAgICAvL1RPRE8gcmVtb3ZlIGxhdGVyIHdpdGggdGhlIHByb3BlciBHVUkgbWVzc2FnZSBsaXN0ZW5lcgogICAgICB2YXIgZ3VpRmFrZSA9IG5ldyBfR3VpRmFrZTIuZGVmYXVsdChfdGhpcy5fZ3VpVVJMLCBfdGhpcy5fbWVzc2FnZUJ1cyk7CiAgICAgIF90aGlzLmd1aUZha2UgPSBndWlGYWtlOwogICAgfQoKICAgIC8qKgogICAgKiByZXR1cm4gdGhlIHJlZ2lzdHJ5IGluIHRoaXMgaWRNb2R1bGUKICAgICogQHBhcmFtIHtyZWdpc3RyeX0gICAgICAgICAgIHJlZ2lzdHJ5CiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdyZWdpc3RyeScsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF90aGlzLl9yZWdpc3RyeTsKICAgIH0KCiAgICAvKioKICAgICogU2V0IHRoZSByZWdpc3RyeSBpbiB0aGlzIGlkTW9kdWxlCiAgICAqIEBwYXJhbSB7cmVnaXN0cnl9ICAgICByZWcKICAgICovCiAgICAsCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChyZWdpc3RyeSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICBfdGhpcy5fcmVnaXN0cnkgPSByZWdpc3RyeTsKICAgIH0KICB9XSk7CiAgcmV0dXJuIElkZW50aXR5TW9kdWxlOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBJZGVudGl0eU1vZHVsZTsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi4vdXRpbHMvdXRpbHMuanMiOjQ0NywiLi9DcnlwdG8iOjQxNywiLi9HdWlGYWtlIjo0MTgsIi4vSWRlbnRpdHkiOjQxOSwiYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5IjoyLCJiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZSI6MTAsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTMsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTR9XSw0MjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayIpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCnZhciBDb21iaW5pbmdBbGdvcml0aG0gPSBmdW5jdGlvbiBDb21iaW5pbmdBbGdvcml0aG0oKSB7CiAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgQ29tYmluaW5nQWxnb3JpdGhtKTsKfTsKCmV4cG9ydHMuZGVmYXVsdCA9IENvbWJpbmluZ0FsZ29yaXRobTsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWyJkZWZhdWx0Il07Cgp9LHsiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxM31dLDQyMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCnZhciBPcGVyYXRvcnMgPSBmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gT3BlcmF0b3JzKCkgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgT3BlcmF0b3JzKTsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKE9wZXJhdG9ycywgW3sKICAgIGtleTogJ2FuZCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gYW5kKHBhcmFtcykgewogICAgICByZXR1cm4gcGFyYW1zWzBdICYmIHBhcmFtc1sxXTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdiZXR3ZWVuJywKICAgIHZhbHVlOiBmdW5jdGlvbiBiZXR3ZWVuKHBhcmFtcykgewogICAgICB2YXIgc3RhcnQgPSBwYXJzZUludChwYXJhbXNbMF1bMF0pOwogICAgICB2YXIgZW5kID0gcGFyc2VJbnQocGFyYW1zWzBdWzFdKTsKICAgICAgdmFyIG5vdyA9IHBhcmFtc1sxXTsKCiAgICAgIGlmIChlbmQgPCBzdGFydCkgewogICAgICAgIG5vdyA9IG5vdyA8IHN0YXJ0ID8gbm93ICs9IDI0MDAgOiBub3c7CiAgICAgICAgZW5kICs9IDI0MDA7CiAgICAgIH0KCiAgICAgIHJldHVybiBub3cgPiBzdGFydCAmJiBub3cgPCBlbmQ7CiAgICB9CiAgfSwgewogICAga2V5OiAnZXF1YWxzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBlcXVhbHMocGFyYW1zKSB7CiAgICAgIHJldHVybiBwYXJhbXNbMF0gPT09ICcqJyB8fCBwYXJhbXNbMF0gPT09IHBhcmFtc1sxXTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdpbicsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2luKHBhcmFtcykgewogICAgICByZXR1cm4gcGFyYW1zWzBdLmluZGV4T2YocGFyYW1zWzFdKSA+IC0xOwogICAgfQogIH0sIHsKICAgIGtleTogJ25vdCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gbm90KHBhcmFtcykgewogICAgICByZXR1cm4gIXBhcmFtc1swXTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdvcicsCiAgICB2YWx1ZTogZnVuY3Rpb24gb3IocGFyYW1zKSB7CiAgICAgIHJldHVybiBwYXJhbXNbMF0gfHwgcGFyYW1zWzFdOwogICAgfQogIH1dKTsKICByZXR1cm4gT3BlcmF0b3JzOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBPcGVyYXRvcnM7Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7ImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTMsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTR9XSw0MjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCnZhciBfT3BlcmF0b3JzID0gcmVxdWlyZSgnLi9PcGVyYXRvcnMnKTsKCnZhciBfT3BlcmF0b3JzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX09wZXJhdG9ycyk7Cgp2YXIgX1J1bnRpbWVDb3JlQ3R4ID0gcmVxdWlyZSgnLi9jb250ZXh0L1J1bnRpbWVDb3JlQ3R4Jyk7Cgp2YXIgX1J1bnRpbWVDb3JlQ3R4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1J1bnRpbWVDb3JlQ3R4KTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgovKioKKiBUaGUgUG9saWN5IERlY2lzaW9uIFBvaW50IChQRFApIGRlY2lkZXMgaWYgYSBtZXNzYWdlIGlzIHRvIGJlIGF1dGhvcmlzZWQgYnkgY2hlY2tpbmcgYSBzZXQgb2YKKiBwb2xpY2llcy4gVGhlIHJlc291cmNlIHRvIGJlIHZlcmlmaWVkIGlzIHNwZWNpZmllZCBpbiB0aGUgZmlyc3Qgd29yZCBvZiB0aGUgJ2NvbmRpdGlvbicgZmllbGQgb2YKKiBhIFBvbGljeSBvYmplY3QuIFRoZSBpbXBsZW1lbnRhdGlvbiB0aGF0IHZlcmlmaWVzIGlmIHRoZSBtZXNzYWdlIGlzIGNvbXBsaWFudCB3aXRoIGEgcG9saWN5IGlzCiogc3BlY2lmaWVkIGluIGEgaGFzaHRhYmxlIHRvIGFsbG93IGR5bmFtaWMgZGVmaW5pdGlvbiBvZiB0aGUgaW1wbGVtZW50YXRpb24sIHByb3ZpZGluZwoqIGV4dGVuc2liaWxpdHkgdG8gdGhlIFBvbGljeSBFbmdpbmUgZnVuY3Rpb25hbGl0aWVzLgoqLwoKdmFyIFBEUCA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBQRFAoY29udGV4dCkgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgUERQKTsKCiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0OwogICAgdGhpcy5vcGVyYXRvcnMgPSBuZXcgX09wZXJhdG9yczIuZGVmYXVsdCgpOwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoUERQLCBbewogICAga2V5OiAnYXBwbHlQb2xpY2llcycsCiAgICB2YWx1ZTogZnVuY3Rpb24gYXBwbHlQb2xpY2llcyhtZXNzYWdlLCBwb2xpY2llcykgewogICAgICB2YXIgcmVzdWx0ID0gdGhpcy5ldmFsdWF0ZVNQUG9saWN5KG1lc3NhZ2UsIHBvbGljaWVzLnNlcnZpY2VQcm92aWRlclBvbGljeSk7CiAgICAgIGlmICh0aGlzLmNvbnRleHQgaW5zdGFuY2VvZiBfUnVudGltZUNvcmVDdHgyLmRlZmF1bHQgJiYgKHJlc3VsdCB8fCByZXN1bHQgPT09ICdOb3QgQXBwbGljYWJsZScpKSB7CiAgICAgICAgcmVzdWx0ID0gdGhpcy5ldmFsdWF0ZVVzZXJQb2xpY3kobWVzc2FnZSwgcG9saWNpZXMudXNlclBvbGljeSk7CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdldmFsdWF0ZVNQUG9saWN5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBldmFsdWF0ZVNQUG9saWN5KG1lc3NhZ2UsIHBvbGljeSkgewogICAgICB2YXIgcmVzdWx0ID0gdm9pZCAwOwoKICAgICAgaWYgKHBvbGljeSkgewogICAgICAgIHJlc3VsdCA9IHBvbGljeS5ldmFsdWF0ZSh0aGlzLmNvbnRleHQsIG1lc3NhZ2UpOwogICAgICB9IGVsc2UgewogICAgICAgIHJlc3VsdCA9ICdOb3QgQXBwbGljYWJsZSc7CiAgICAgIH0KCiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CiAgfSwgewogICAga2V5OiAnZXZhbHVhdGVVc2VyUG9saWN5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBldmFsdWF0ZVVzZXJQb2xpY3kobWVzc2FnZSwgdGl0bGUpIHsKICAgICAgdmFyIHJlc3VsdCA9IHZvaWQgMDsKCiAgICAgIGlmICh0aXRsZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgdmFyIHBvbGljeSA9IHRoaXMuY29udGV4dC51c2VyUG9saWNpZXNbdGl0bGVdOwogICAgICAgIGlmIChwb2xpY3kpIHsKICAgICAgICAgIHJlc3VsdCA9IHBvbGljeS5ldmFsdWF0ZSh0aGlzLmNvbnRleHQsIG1lc3NhZ2UpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXN1bHQgPSAnTm90IEFwcGxpY2FibGUnOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICByZXN1bHQgPSAnTm90IEFwcGxpY2FibGUnOwogICAgICB9CgogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogIH0sIHsKICAgIGtleTogJ2NvbnRleHQnLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9jb250ZXh0OwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KGNvbnRleHQpIHsKICAgICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7CiAgICB9CiAgfSwgewogICAga2V5OiAnb3BlcmF0b3JzJywKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fb3BlcmF0b3JzOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KG9wZXJhdG9ycykgewogICAgICB0aGlzLl9vcGVyYXRvcnMgPSBvcGVyYXRvcnM7CiAgICB9CiAgfV0pOwogIHJldHVybiBQRFA7Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IFBEUDsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi9PcGVyYXRvcnMiOjQyMiwiLi9jb250ZXh0L1J1bnRpbWVDb3JlQ3R4Ijo0MzMsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTMsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTR9XSw0MjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayIpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9Cgp2YXIgUEVQID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFBFUChjb250ZXh0KSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBQRVApOwoKICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShQRVAsIFt7CiAgICBrZXk6ICJlbmZvcmNlUG9saWNpZXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGVuZm9yY2VQb2xpY2llcyhtZXNzYWdlLCBwb2xpY2llcywgYXV0aERlY2lzaW9uKSB7CiAgICAgIHZhciBwb2xpY3kgPSB2b2lkIDA7CgogICAgICBpZiAocG9saWNpZXMudXNlclBvbGljeSkgewogICAgICAgIHBvbGljeSA9IHRoaXMuY29udGV4dC51c2VyUG9saWNpZXNbcG9saWNpZXMudXNlclBvbGljeV07CiAgICAgICAgaWYgKHBvbGljeSkgewogICAgICAgICAgcG9saWN5LmVuZm9yY2VBY3Rpb25zKHRoaXMuY29udGV4dCwgbWVzc2FnZSwgYXV0aERlY2lzaW9uKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcG9saWN5ID0gdGhpcy5jb250ZXh0LnNlcnZpY2VQcm92aWRlclBvbGljeTsKICAgICAgaWYgKHBvbGljeSkgewogICAgICAgIHBvbGljeS5lbmZvcmNlQWN0aW9ucyh0aGlzLmNvbnRleHQsIG1lc3NhZ2UsIGF1dGhEZWNpc2lvbik7CiAgICAgIH0KICAgIH0KCiAgICAvKnNlbmRBdXRvbWF0aWNNZXNzYWdlKCkge30KICAgICBmb3J3YXJkVG9JRCgpIHt9CiAgICAgZm9yd2FyZFRvSHlwZXJ0eSgpIHt9Ki8KCiAgfV0pOwogIHJldHVybiBQRVA7Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IFBFUDsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWyJkZWZhdWx0Il07Cgp9LHsiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxMywiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxNH1dLDQyNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKdmFyIF9EZW55T3ZlcnJpZGVzID0gcmVxdWlyZSgnLi9jb21iaW5pbmdBbGdvcml0aG1zL0RlbnlPdmVycmlkZXMnKTsKCnZhciBfRGVueU92ZXJyaWRlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EZW55T3ZlcnJpZGVzKTsKCnZhciBfRmlyc3RBcHBsaWNhYmxlID0gcmVxdWlyZSgnLi9jb21iaW5pbmdBbGdvcml0aG1zL0ZpcnN0QXBwbGljYWJsZScpOwoKdmFyIF9GaXJzdEFwcGxpY2FibGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRmlyc3RBcHBsaWNhYmxlKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9Cgp2YXIgUG9saWN5ID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFBvbGljeShrZXksIHJ1bGVzLCBhY3Rpb25zLCBjb21iaW5pbmdBbGdvcml0aG0pIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFBvbGljeSk7CgogICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uczsKICAgIHRoaXMua2V5ID0ga2V5OwogICAgdGhpcy5ydWxlcyA9IHJ1bGVzOwogICAgdGhpcy5jb21iaW5pbmdBbGdvcml0aG0gPSBjb21iaW5pbmdBbGdvcml0aG07CiAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShQb2xpY3ksIFt7CiAgICBrZXk6ICdhZGRSdWxlJywKCgogICAgLy9UT0RPOiBGSVgKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRSdWxlKHJ1bGUpIHsKICAgICAgdGhpcy5fcnVsZXMucHVzaChydWxlKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkZWxldGVSdWxlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxldGVSdWxlKHNjb3BlLCB0YXJnZXQsIGNvbmRpdGlvbikgewogICAgICBkZWxldGUgdGhpcy5ydWxlc1tzY29wZV1bdGFyZ2V0XVtjb25kaXRpb25dOwogICAgfQogIH0sIHsKICAgIGtleTogJ2VuZm9yY2VBY3Rpb25zJywKICAgIHZhbHVlOiBmdW5jdGlvbiBlbmZvcmNlQWN0aW9ucyhjb250ZXh0LCBtZXNzYWdlLCBhdXRoRGVjaXNpb24pIHsKICAgICAgZm9yICh2YXIgaSBpbiB0aGlzLmFjdGlvbnMpIHsKICAgICAgICBjb250ZXh0W3RoaXMuYWN0aW9uc1tpXV0obWVzc2FnZSwgYXV0aERlY2lzaW9uKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogJ2V2YWx1YXRlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBldmFsdWF0ZShjb250ZXh0LCBtZXNzYWdlKSB7CiAgICAgIHZhciByZXN1bHRzID0gW107CgogICAgICBmb3IgKHZhciBpIGluIHRoaXMucnVsZXMpIHsKICAgICAgICByZXN1bHRzLnB1c2godGhpcy5ydWxlc1tpXS5ldmFsdWF0ZShjb250ZXh0LCBtZXNzYWdlKSk7CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzLmNvbWJpbmluZ0FsZ29yaXRobS5ldmFsdWF0ZShyZXN1bHRzKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdhY3Rpb25zJywKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fYWN0aW9uczsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChhY3Rpb25zKSB7CiAgICAgIHRoaXMuX2FjdGlvbnMgPSBhY3Rpb25zOwogICAgfQogIH0sIHsKICAgIGtleTogJ2NvbWJpbmluZ0FsZ29yaXRobScsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX2NvbWJpbmluZ0FsZ29yaXRobTsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChjb21iaW5pbmdBbGdvcml0aG0pIHsKICAgICAgaWYgKGNvbWJpbmluZ0FsZ29yaXRobSA9PT0gJ2RlbnlPdmVycmlkZXMnKSB7CiAgICAgICAgdGhpcy5fY29tYmluaW5nQWxnb3JpdGhtID0gbmV3IF9EZW55T3ZlcnJpZGVzMi5kZWZhdWx0KCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKGNvbWJpbmluZ0FsZ29yaXRobSA9PT0gJ2ZpcnN0QXBwbGljYWJsZScpIHsKICAgICAgICAgIHRoaXMuX2NvbWJpbmluZ0FsZ29yaXRobSA9IG5ldyBfRmlyc3RBcHBsaWNhYmxlMi5kZWZhdWx0KCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRocm93IEVycm9yKCdVbmtub3duIGFsZ29yaXRobTogJyArIGNvbWJpbmluZ0FsZ29yaXRobSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAnaXNBY3RpdmUnLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9pc0FjdGl2ZTsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChpc0FjdGl2ZSkgewogICAgICB0aGlzLl9pc0FjdGl2ZSA9IGlzQWN0aXZlOwogICAgfQogIH0sIHsKICAgIGtleTogJ2tleScsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX2tleTsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChrZXkpIHsKICAgICAgdGhpcy5fa2V5ID0ga2V5OwogICAgfQogIH0sIHsKICAgIGtleTogJ3J1bGVzJywKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fcnVsZXM7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQocnVsZXMpIHsKICAgICAgdGhpcy5fcnVsZXMgPSBydWxlczsKICAgIH0KICB9XSk7CiAgcmV0dXJuIFBvbGljeTsKfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gUG9saWN5Owptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuL2NvbWJpbmluZ0FsZ29yaXRobXMvRGVueU92ZXJyaWRlcyI6NDI4LCIuL2NvbWJpbmluZ0FsZ29yaXRobXMvRmlyc3RBcHBsaWNhYmxlIjo0MjksImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTMsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTR9XSw0MjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCnZhciBfUEVQID0gcmVxdWlyZSgnLi9QRVAnKTsKCnZhciBfUEVQMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1BFUCk7Cgp2YXIgX1BEUCA9IHJlcXVpcmUoJy4vUERQJyk7Cgp2YXIgX1BEUDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9QRFApOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCnZhciBQb2xpY3lFbmdpbmUgPSBmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gUG9saWN5RW5naW5lKGNvbnRleHQpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFBvbGljeUVuZ2luZSk7CgogICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDsKICAgIHRoaXMuY29udGV4dC5wb2xpY3lFbmdpbmUgPSB0aGlzOwogICAgdGhpcy5wZHAgPSBuZXcgX1BEUDIuZGVmYXVsdChjb250ZXh0KTsKICAgIHRoaXMucGVwID0gbmV3IF9QRVAyLmRlZmF1bHQoY29udGV4dCk7CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShQb2xpY3lFbmdpbmUsIFt7CiAgICBrZXk6ICdhZGRQb2xpY3knLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFBvbGljeShzb3VyY2UsIGtleSwgcG9saWN5KSB7CiAgICAgIGlmIChzb3VyY2UgPT09ICdTRVJWSUNFX1BST1ZJREVSJykgewogICAgICAgIHRoaXMuY29udGV4dC5zZXJ2aWNlUHJvdmlkZXJQb2xpY2llc1trZXldID0gcG9saWN5OwogICAgICB9IGVsc2UgewogICAgICAgIGlmIChzb3VyY2UgPT09ICdVU0VSJykgewogICAgICAgICAgdGhpcy5jb250ZXh0LnVzZXJQb2xpY2llc1trZXldID0gcG9saWN5OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aHJvdyBFcnJvcignVW5rbm93biBwb2xpY3kgc291cmNlOiAnICsgc291cmNlKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICdyZW1vdmVQb2xpY3knLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZVBvbGljeShzb3VyY2UsIGtleSkgewogICAgICBpZiAoc291cmNlID09PSAnKicpIHsKICAgICAgICB0aGlzLmNvbnRleHQuc2VydmljZVByb3ZpZGVyUG9saWNpZXMgPSB7fTsKICAgICAgICB0aGlzLmNvbnRleHQudXNlclBvbGljaWVzID0ge307CiAgICAgICAgdGhpcy5jb250ZXh0LmFjdGl2ZVVzZXJQb2xpY3kgPSB1bmRlZmluZWQ7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKHNvdXJjZSA9PT0gJ1NFUlZJQ0VfUFJPVklERVInKSB7CiAgICAgICAgICBkZWxldGUgdGhpcy5jb250ZXh0LnNlcnZpY2VQcm92aWRlclBvbGljaWVzW2tleV07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGlmIChzb3VyY2UgPT09ICdVU0VSJykgewogICAgICAgICAgICBkZWxldGUgdGhpcy5jb250ZXh0LnVzZXJQb2xpY2llc1trZXldOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1Vua25vd24gcG9saWN5IHNvdXJjZTogJyArIHNvdXJjZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAncmVtb3ZlUnVsZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlUnVsZShrZXksIHJ1bGUpIHsKICAgICAgZGVsZXRlIHRoaXMuY29udGV4dC51c2VyUG9saWNpZXNba2V5XVtydWxlLnNjb3BlXVtydWxlLnRhcmdldF1bcnVsZS5jb25kaXRpb25dOwogICAgfQogIH0sIHsKICAgIGtleTogJ2F1dGhvcmlzZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gYXV0aG9yaXNlKG1lc3NhZ2UpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF90aGlzLmNvbnRleHQuYXV0aG9yaXNlKG1lc3NhZ2UpOwogICAgfQogIH0sIHsKICAgIGtleTogJ2dldEdyb3Vwc05hbWVzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRHcm91cHNOYW1lcyhzY29wZSwgdGFyZ2V0KSB7CiAgICAgIHZhciBteUdyb3VwcyA9IHRoaXMuY29udGV4dC5ncm91cHM7CiAgICAgIHZhciBncm91cHNOYW1lcyA9IFtdOwogICAgICBpZiAobXlHcm91cHNbc2NvcGVdW3RhcmdldF0gIT09IHVuZGVmaW5lZCkgewogICAgICAgIGZvciAodmFyIGdyb3VwTmFtZSBpbiBteUdyb3Vwc1tzY29wZV1bdGFyZ2V0XSkgewogICAgICAgICAgZ3JvdXBzTmFtZXMucHVzaChncm91cE5hbWUpOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gZ3JvdXBzTmFtZXM7CiAgICB9CiAgfSwgewogICAga2V5OiAnZ2V0R3JvdXAnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEdyb3VwKHNjb3BlLCB0YXJnZXQsIGdyb3VwTmFtZSkgewogICAgICB2YXIgbXlHcm91cHMgPSB0aGlzLmNvbnRleHQuZ3JvdXBzOwogICAgICB2YXIgbWVtYmVycyA9IFtdOwoKICAgICAgaWYgKG15R3JvdXBzW3Njb3BlXSAhPT0gdW5kZWZpbmVkICYmIG15R3JvdXBzW3Njb3BlXVt0YXJnZXRdICE9PSB1bmRlZmluZWQgJiYgbXlHcm91cHNbc2NvcGVdW3RhcmdldF1bZ3JvdXBOYW1lXSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgbWVtYmVycyA9IG15R3JvdXBzW3Njb3BlXVt0YXJnZXRdW2dyb3VwTmFtZV07CiAgICAgIH0KCiAgICAgIHJldHVybiBtZW1iZXJzOwogICAgfQoKICAgIC8qKgogICAgKiBDcmVhdGVzIGEgZ3JvdXAgd2l0aCB0aGUgZ2l2ZW4gbmFtZS4KICAgICogQHBhcmFtICB7U3RyaW5nfSAgZ3JvdXBOYW1lCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdjcmVhdGVHcm91cCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlR3JvdXAoc2NvcGUsIHRhcmdldCwgZ3JvdXBOYW1lKSB7CiAgICAgIHZhciBteUdyb3VwcyA9IHRoaXMuY29udGV4dC5ncm91cHM7CgogICAgICBpZiAobXlHcm91cHNbc2NvcGVdID09PSB1bmRlZmluZWQpIHsKICAgICAgICBteUdyb3Vwc1tzY29wZV0gPSB7fTsKICAgICAgfQogICAgICBpZiAobXlHcm91cHNbc2NvcGVdW3RhcmdldF0gPT09IHVuZGVmaW5lZCkgewogICAgICAgIG15R3JvdXBzW3Njb3BlXVt0YXJnZXRdID0ge307CiAgICAgIH0KCiAgICAgIG15R3JvdXBzW3Njb3BlXVt0YXJnZXRdW2dyb3VwTmFtZV0gPSBbXTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkZWxldGVHcm91cCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlR3JvdXAoc2NvcGUsIHRhcmdldCwgZ3JvdXBOYW1lKSB7CiAgICAgIGRlbGV0ZSB0aGlzLmNvbnRleHQuZ3JvdXBzW3Njb3BlXVt0YXJnZXRdW2dyb3VwTmFtZV07CiAgICB9CgogICAgLyoqCiAgICAqIEFkZHMgdGhlIGdpdmVuIHVzZXIgZW1haWwgdG8gdGhlIGdyb3VwIHdpdGggdGhlIGdpdmVuIG5hbWUuCiAgICAqIEBwYXJhbSAge1N0cmluZ30gIHVzZXJFbWFpbAogICAgKiBAcGFyYW0gIHtTdHJpbmd9ICBncm91cE5hbWUKICAgICovCgogIH0sIHsKICAgIGtleTogJ2FkZFRvR3JvdXAnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFRvR3JvdXAoc2NvcGUsIHRhcmdldCwgZ3JvdXBOYW1lLCB1c2VyRW1haWwpIHsKICAgICAgdmFyIG15R3JvdXBzID0gdGhpcy5jb250ZXh0Lmdyb3VwczsKICAgICAgaWYgKG15R3JvdXBzW3Njb3BlXSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgbXlHcm91cHNbc2NvcGVdID0ge307CiAgICAgIH0KICAgICAgaWYgKG15R3JvdXBzW3Njb3BlXVt0YXJnZXRdID09PSB1bmRlZmluZWQpIHsKICAgICAgICBteUdyb3Vwc1tzY29wZV1bdGFyZ2V0XSA9IHt9OwogICAgICB9CiAgICAgIGlmIChteUdyb3Vwc1tzY29wZV1bdGFyZ2V0XVtncm91cE5hbWVdID09PSB1bmRlZmluZWQpIHsKICAgICAgICB0aGlzLmNyZWF0ZUdyb3VwKHNjb3BlLCB0YXJnZXQsIGdyb3VwTmFtZSk7CiAgICAgIH0KICAgICAgaWYgKG15R3JvdXBzW3Njb3BlXVt0YXJnZXRdW2dyb3VwTmFtZV0uaW5kZXhPZih1c2VyRW1haWwpID09PSAtMSkgewogICAgICAgIG15R3JvdXBzW3Njb3BlXVt0YXJnZXRdW2dyb3VwTmFtZV0ucHVzaCh1c2VyRW1haWwpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAncmVtb3ZlRnJvbUdyb3VwJywKICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVGcm9tR3JvdXAoc2NvcGUsIHRhcmdldCwgZ3JvdXBOYW1lLCB1c2VyRW1haWwpIHsKICAgICAgdmFyIG15R3JvdXBzID0gdGhpcy5jb250ZXh0Lmdyb3VwczsKICAgICAgdmFyIGdyb3VwID0gbXlHcm91cHNbc2NvcGVdW3RhcmdldF1bZ3JvdXBOYW1lXTsKCiAgICAgIGdyb3VwLnNwbGljZShncm91cC5pbmRleE9mKHVzZXJFbWFpbCksIDEpOwogICAgfQogIH0sIHsKICAgIGtleTogJ2NvbnRleHQnLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9jb250ZXh0OwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KGNvbnRleHQpIHsKICAgICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7CiAgICB9CiAgfSwgewogICAga2V5OiAncGRwJywKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fcGRwOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHBkcCkgewogICAgICB0aGlzLl9wZHAgPSBwZHA7CiAgICB9CiAgfSwgewogICAga2V5OiAncGVwJywKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fcGVwOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHBlcCkgewogICAgICB0aGlzLl9wZXAgPSBwZXA7CiAgICB9CiAgfV0pOwogIHJldHVybiBQb2xpY3lFbmdpbmU7Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IFBvbGljeUVuZ2luZTsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi9QRFAiOjQyMywiLi9QRVAiOjQyNCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxMywiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxNH1dLDQyNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKdmFyIF9PcGVyYXRvcnMgPSByZXF1aXJlKCcuL09wZXJhdG9ycycpOwoKdmFyIF9PcGVyYXRvcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfT3BlcmF0b3JzKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9Cgp2YXIgUnVsZSA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBSdWxlKGF1dGhvcmlzZSwgY29uZGl0aW9uLCBzY29wZSwgdGFyZ2V0KSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBSdWxlKTsKCiAgICB0aGlzLm9wZXJhdG9ycyA9IG5ldyBfT3BlcmF0b3JzMi5kZWZhdWx0KCk7CiAgICB0aGlzLmF1dGhvcmlzZSA9IGF1dGhvcmlzZTsKICAgIHRoaXMuY29uZGl0aW9uID0gY29uZGl0aW9uOwogICAgdGhpcy5zY29wZSA9IHNjb3BlOwogICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShSdWxlLCBbewogICAga2V5OiAnZXZhbHVhdGUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGV2YWx1YXRlKGNvbnRleHQsIG1lc3NhZ2UpIHsKICAgICAgaWYgKHRoaXMuY29uZGl0aW9uLmlzQXBwbGljYWJsZShjb250ZXh0LCBtZXNzYWdlLCB0aGlzLnNjb3BlLCB0aGlzLnRhcmdldCkpIHsKICAgICAgICByZXR1cm4gdGhpcy5hdXRob3Jpc2U7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuICdOb3QgQXBwbGljYWJsZSc7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICdhdXRob3Jpc2UnLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9hdXRob3Jpc2U7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQoZGVjaXNpb24pIHsKICAgICAgdGhpcy5fYXV0aG9yaXNlID0gZGVjaXNpb247CiAgICB9CiAgfSwgewogICAga2V5OiAnY29uZGl0aW9uJywKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fY29uZGl0aW9uOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KGNvbmRpdGlvbikgewogICAgICB0aGlzLl9jb25kaXRpb24gPSBjb25kaXRpb247CiAgICB9CiAgfSwgewogICAga2V5OiAnc2NvcGUnLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9zY29wZTsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChzY29wZSkgewogICAgICB0aGlzLl9zY29wZSA9IHNjb3BlOwogICAgfQogIH0sIHsKICAgIGtleTogJ3RhcmdldCcsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3RhcmdldDsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh0YXJnZXQpIHsKICAgICAgdGhpcy5fdGFyZ2V0ID0gdGFyZ2V0OwogICAgfQogIH1dKTsKICByZXR1cm4gUnVsZTsKfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gUnVsZTsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi9PcGVyYXRvcnMiOjQyMiwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxMywiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxNH1dLDQyODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTsKCnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7Cgp2YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTsKCnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7Cgp2YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpOwoKdmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpOwoKdmFyIF9Db21iaW5pbmdBbGdvcml0aG0yID0gcmVxdWlyZSgnLi4vQ29tYmluaW5nQWxnb3JpdGhtJyk7Cgp2YXIgX0NvbWJpbmluZ0FsZ29yaXRobTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Db21iaW5pbmdBbGdvcml0aG0yKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9Cgp2YXIgRGVueU92ZXJyaWRlcyA9IGZ1bmN0aW9uIChfQ29tYmluaW5nQWxnb3JpdGhtKSB7CiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoRGVueU92ZXJyaWRlcywgX0NvbWJpbmluZ0FsZ29yaXRobSk7CgogIGZ1bmN0aW9uIERlbnlPdmVycmlkZXMoKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBEZW55T3ZlcnJpZGVzKTsKICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKERlbnlPdmVycmlkZXMpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpOwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoRGVueU92ZXJyaWRlcywgW3sKICAgIGtleTogJ2V2YWx1YXRlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBldmFsdWF0ZShpbmRpdmlkdWFsUmVzdWx0cykgewogICAgICBpZiAoaW5kaXZpZHVhbFJlc3VsdHMuaW5kZXhPZihmYWxzZSkgIT09IC0xKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9IGVsc2UgewogICAgICAgIGlmIChpbmRpdmlkdWFsUmVzdWx0cy5pbmRleE9mKHRydWUpICE9PSAtMSkgewogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiAnTm90IEFwcGxpY2FibGUnOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH1dKTsKICByZXR1cm4gRGVueU92ZXJyaWRlczsKfShfQ29tYmluaW5nQWxnb3JpdGhtMy5kZWZhdWx0KTsKCmV4cG9ydHMuZGVmYXVsdCA9IERlbnlPdmVycmlkZXM7Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7Ii4uL0NvbWJpbmluZ0FsZ29yaXRobSI6NDIxLCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YiOjYsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTMsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTQsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyI6MTUsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIjoxNn1dLDQyOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTsKCnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7Cgp2YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTsKCnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7Cgp2YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpOwoKdmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpOwoKdmFyIF9Db21iaW5pbmdBbGdvcml0aG0yID0gcmVxdWlyZSgnLi4vQ29tYmluaW5nQWxnb3JpdGhtJyk7Cgp2YXIgX0NvbWJpbmluZ0FsZ29yaXRobTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Db21iaW5pbmdBbGdvcml0aG0yKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9Cgp2YXIgRmlyc3RBcHBsaWNhYmxlID0gZnVuY3Rpb24gKF9Db21iaW5pbmdBbGdvcml0aG0pIHsKICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShGaXJzdEFwcGxpY2FibGUsIF9Db21iaW5pbmdBbGdvcml0aG0pOwoKICBmdW5jdGlvbiBGaXJzdEFwcGxpY2FibGUoKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBGaXJzdEFwcGxpY2FibGUpOwogICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoRmlyc3RBcHBsaWNhYmxlKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEZpcnN0QXBwbGljYWJsZSwgW3sKICAgIGtleTogJ2V2YWx1YXRlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBldmFsdWF0ZShpbmRpdmlkdWFsUmVzdWx0cykgewogICAgICBmb3IgKHZhciBpIGluIGluZGl2aWR1YWxSZXN1bHRzKSB7CiAgICAgICAgaWYgKGluZGl2aWR1YWxSZXN1bHRzW2ldICE9PSAnTm90IEFwcGxpY2FibGUnKSB7CiAgICAgICAgICByZXR1cm4gaW5kaXZpZHVhbFJlc3VsdHNbaV07CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gJ05vdCBBcHBsaWNhYmxlJzsKICAgIH0KICB9XSk7CiAgcmV0dXJuIEZpcnN0QXBwbGljYWJsZTsKfShfQ29tYmluaW5nQWxnb3JpdGhtMy5kZWZhdWx0KTsKCmV4cG9ydHMuZGVmYXVsdCA9IEZpcnN0QXBwbGljYWJsZTsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi4vQ29tYmluaW5nQWxnb3JpdGhtIjo0MjEsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZiI6NiwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxMywiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxNCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzIjoxNSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iOjE2fV0sNDMwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7Cgp2YXIgX09wZXJhdG9ycyA9IHJlcXVpcmUoJy4uL09wZXJhdG9ycycpOwoKdmFyIF9PcGVyYXRvcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfT3BlcmF0b3JzKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9Cgp2YXIgQ29uZGl0aW9uID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIENvbmRpdGlvbihhdHRyaWJ1dGUsIG9wZXJhdG9yLCBwYXJhbXMpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIENvbmRpdGlvbik7CgogICAgdGhpcy5hdHRyaWJ1dGUgPSBhdHRyaWJ1dGU7CiAgICB0aGlzLm9wZXJhdG9yID0gb3BlcmF0b3I7CiAgICB0aGlzLnBhcmFtcyA9IHBhcmFtczsKICAgIHRoaXMub3BlcmF0b3JzID0gbmV3IF9PcGVyYXRvcnMyLmRlZmF1bHQoKTsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKENvbmRpdGlvbiwgW3sKICAgIGtleTogJ2lzQXBwbGljYWJsZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNBcHBsaWNhYmxlKGNvbnRleHQsIG1lc3NhZ2UpIHsKICAgICAgY29udGV4dFt0aGlzLmF0dHJpYnV0ZV0gPSB7IG1lc3NhZ2U6IG1lc3NhZ2UgfTsKICAgICAgdmFyIHZhbHVlID0gY29udGV4dFt0aGlzLmF0dHJpYnV0ZV07CgogICAgICBpZiAodGhpcy5vcGVyYXRvciA9PT0gJ2luJykgewogICAgICAgIC8vIHNvdXJjZSBpbiBwcmVhdXRoCiAgICAgICAgdmFyIGRhdGFPYmplY3RVUkwgPSBtZXNzYWdlLnRvLnNwbGl0KCcvJyk7CiAgICAgICAgZGF0YU9iamVjdFVSTC5wb3AoKTsKICAgICAgICBkYXRhT2JqZWN0VVJMID0gZGF0YU9iamVjdFVSTFswXSArICcvLycgKyBkYXRhT2JqZWN0VVJMWzJdOwogICAgICAgIHRoaXMucGFyYW1zID0gY29udGV4dC5ydW50aW1lUmVnaXN0cnkuZ2V0UHJlQXV0aFN1YnNjcmliZXJzKGRhdGFPYmplY3RVUkwpOwogICAgICB9CgogICAgICByZXR1cm4gdGhpcy5vcGVyYXRvcnNbdGhpcy5vcGVyYXRvcl0oW3RoaXMucGFyYW1zLCB2YWx1ZV0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ2F0dHJpYnV0ZScsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX2F0dHJpYnV0ZTsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChhdHRyaWJ1dGUpIHsKICAgICAgdGhpcy5fYXR0cmlidXRlID0gYXR0cmlidXRlOwogICAgfQogIH0sIHsKICAgIGtleTogJ29wZXJhdG9yJywKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fb3BlcmF0b3I7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQob3BlcmF0b3IpIHsKICAgICAgdGhpcy5fb3BlcmF0b3IgPSBvcGVyYXRvcjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdwYXJhbXMnLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9wYXJhbXM7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQocGFyYW1zKSB7CiAgICAgIHRoaXMuX3BhcmFtcyA9IHBhcmFtczsKICAgIH0KICB9XSk7CiAgcmV0dXJuIENvbmRpdGlvbjsKfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gQ29uZGl0aW9uOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuLi9PcGVyYXRvcnMiOjQyMiwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxMywiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxNH1dLDQzMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTsKCnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7Cgp2YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTsKCnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7Cgp2YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpOwoKdmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpOwoKdmFyIF9Db25kaXRpb24yID0gcmVxdWlyZSgnLi9Db25kaXRpb24nKTsKCnZhciBfQ29uZGl0aW9uMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbmRpdGlvbjIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCnZhciBTdWJzY3JpcHRpb25Db25kaXRpb24gPSBmdW5jdGlvbiAoX0NvbmRpdGlvbikgewogICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFN1YnNjcmlwdGlvbkNvbmRpdGlvbiwgX0NvbmRpdGlvbik7CgogIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbkNvbmRpdGlvbihhdHRyaWJ1dGUsIG9wZXJhdG9yLCBwYXJhbXMpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFN1YnNjcmlwdGlvbkNvbmRpdGlvbik7CiAgICByZXR1cm4gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShTdWJzY3JpcHRpb25Db25kaXRpb24pLmNhbGwodGhpcywgYXR0cmlidXRlLCBvcGVyYXRvciwgcGFyYW1zKSk7CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShTdWJzY3JpcHRpb25Db25kaXRpb24sIFt7CiAgICBrZXk6ICdpc0FwcGxpY2FibGUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzQXBwbGljYWJsZShjb250ZXh0LCBtZXNzYWdlLCBzY29wZSwgdGFyZ2V0KSB7CiAgICAgIHZhciBpc1N1YnNjcmlwdGlvbiA9IG1lc3NhZ2UudHlwZSA9PT0gJ3N1YnNjcmliZSc7CiAgICAgIHZhciBpc0Zyb21SZW1vdGVTTSA9IGNvbnRleHQuaXNGcm9tUmVtb3RlU00obWVzc2FnZS5mcm9tKTsKICAgICAgaWYgKGlzU3Vic2NyaXB0aW9uICYgaXNGcm9tUmVtb3RlU00pIHsKICAgICAgICB2YXIgYXBwbGljYWJsZSA9IHZvaWQgMDsKICAgICAgICBzd2l0Y2ggKHNjb3BlKSB7CiAgICAgICAgICBjYXNlICdnbG9iYWwnOgogICAgICAgICAgICBhcHBsaWNhYmxlID0gdHJ1ZTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICdoeXBlcnR5JzoKICAgICAgICAgICAgdmFyIGh5cGVydHlVUkwgPSBjb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5nZXRIeXBlcnR5TmFtZSgpOwogICAgICAgICAgICBhcHBsaWNhYmxlID0gdGFyZ2V0ID09PSBoeXBlcnR5VVJMOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgJ3VzZXInOgogICAgICAgICAgICB2YXIgaHlwZXJ0eSA9IGNvbnRleHQucnVudGltZVJlZ2lzdHJ5LmdldFJlcG9ydGVyVVJMU3luY2hvbm91cyhjb250ZXh0LmdldFVSTChtZXNzYWdlLnRvKSk7CiAgICAgICAgICAgIHZhciBvd25lciA9IGNvbnRleHQucnVudGltZVJlZ2lzdHJ5LmdldEh5cGVydHlPd25lcihoeXBlcnR5KTsKICAgICAgICAgICAgYXBwbGljYWJsZSA9IHRhcmdldCA9PT0gb3duZXI7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAnZGF0YU9iamVjdCc6CiAgICAgICAgICAgIHZhciBkYXRhT2JqZWN0VVJMID0gbWVzc2FnZS5ib2R5LnJlc291cmNlOwogICAgICAgICAgICBhcHBsaWNhYmxlID0gdGFyZ2V0ID09PSBkYXRhT2JqZWN0VVJMOwogICAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGFwcGxpY2FibGU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CiAgfV0pOwogIHJldHVybiBTdWJzY3JpcHRpb25Db25kaXRpb247Cn0oX0NvbmRpdGlvbjMuZGVmYXVsdCk7CgpleHBvcnRzLmRlZmF1bHQgPSBTdWJzY3JpcHRpb25Db25kaXRpb247Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7Ii4vQ29uZGl0aW9uIjo0MzAsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZiI6NiwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxMywiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxNCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzIjoxNSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iOjE2fV0sNDMyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7Cgp2YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvdXRpbHMnKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9Cgp2YXIgQ29tbW9uQ3R4ID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIENvbW1vbkN0eCgpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIENvbW1vbkN0eCk7CgogICAgdGhpcy5zZXJ2aWNlUHJvdmlkZXJQb2xpY2llcyA9IHt9OwogICAgdGhpcy5kZWZhdWx0QmVoYXZpb3IgPSB0cnVlOwogICAgdGhpcy5ncm91cHMgPSB7fTsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKENvbW1vbkN0eCwgW3sKICAgIGtleTogJ2RlZmF1bHRCZWhhdmlvcicsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX2RlZmF1bHRCZWhhdmlvcjsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChiZWhhdmlvcikgewogICAgICB0aGlzLl9kZWZhdWx0QmVoYXZpb3IgPSBiZWhhdmlvcjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdzZXJ2aWNlUHJvdmlkZXJQb2xpY2llcycsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3NlcnZpY2VQcm92aWRlclBvbGljaWVzOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHBvbGljaWVzKSB7CiAgICAgIHRoaXMuX3NlcnZpY2VQcm92aWRlclBvbGljaWVzID0gcG9saWNpZXM7CiAgICB9CiAgfSwgewogICAga2V5OiAnZGF0ZScsCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChub3cpIHsKICAgICAgaWYgKCFub3cubWVzc2FnZSkgewogICAgICAgIGlmICh0eXBlb2Ygbm93ID09PSAnc3RyaW5nJykgewogICAgICAgICAgdGhpcy5fZGF0ZSA9IG5vdzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpOwogICAgICAgICAgdmFyIGRheSA9IFN0cmluZyhkYXRlLmdldERhdGUoKSk7CiAgICAgICAgICBpZiAoZGF5Lmxlbmd0aCA9PT0gMSkgewogICAgICAgICAgICBkYXkgPSAnMCcgKyBkYXk7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgbW9udGggPSBTdHJpbmcoZGF0ZS5nZXRNb250aCgpICsgMSk7CiAgICAgICAgICBpZiAobW9udGgubGVuZ3RoID09PSAxKSB7CiAgICAgICAgICAgIG1vbnRoID0gJzAnICsgbW9udGg7CiAgICAgICAgICB9CgogICAgICAgICAgdGhpcy5fZGF0ZSA9IGRheSArICcvJyArIG1vbnRoICsgJy8nICsgZGF0ZS5nZXRGdWxsWWVhcigpOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fZGF0ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkb21haW4nLAogICAgc2V0OiBmdW5jdGlvbiBzZXQocGFyYW1zKSB7CiAgICAgIHRoaXMuX2RvbWFpbiA9ICgwLCBfdXRpbHMuZGl2aWRlRW1haWwpKHBhcmFtcy5tZXNzYWdlLmJvZHkuaWRlbnRpdHkudXNlclByb2ZpbGUudXNlcm5hbWUpLmRvbWFpbjsKICAgIH0sCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX2RvbWFpbjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdzb3VyY2UnLAogICAgc2V0OiBmdW5jdGlvbiBzZXQocGFyYW1zKSB7CiAgICAgIHRoaXMuX3NvdXJjZSA9IHBhcmFtcy5tZXNzYWdlLmJvZHkuaWRlbnRpdHkudXNlclByb2ZpbGUudXNlcm5hbWU7CiAgICB9LAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBfdGhpcy5fc291cmNlOwogICAgfQogIH0sIHsKICAgIGtleTogJ3RpbWUnLAogICAgc2V0OiBmdW5jdGlvbiBzZXQobm93KSB7CiAgICAgIGlmICghbm93Lm1lc3NhZ2UpIHsKICAgICAgICBpZiAobm93KSB7CiAgICAgICAgICB0aGlzLl90aW1lID0gbm93OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2YXIgX25vdyA9IG5ldyBEYXRlKCk7CiAgICAgICAgICB2YXIgbWludXRlcyA9IFN0cmluZyhfbm93LmdldE1pbnV0ZXMoKSk7CiAgICAgICAgICBpZiAobWludXRlcy5sZW5ndGggPT09IDEpIHsKICAgICAgICAgICAgbWludXRlcyA9ICcwJyArIG1pbnV0ZXM7CiAgICAgICAgICB9CiAgICAgICAgICB0aGlzLl90aW1lID0gcGFyc2VJbnQoU3RyaW5nKF9ub3cuZ2V0SG91cnMoKSkgKyBtaW51dGVzKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF90aGlzLl90aW1lOwogICAgfQogIH0sIHsKICAgIGtleTogJ3dlZWtkYXknLAogICAgc2V0OiBmdW5jdGlvbiBzZXQobm93KSB7CiAgICAgIGlmICghbm93Lm1lc3NhZ2UpIHsKICAgICAgICBpZiAobm93KSB7CiAgICAgICAgICB0aGlzLl93ZWVrZGF5ID0gbm93OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLl93ZWVrZGF5ID0gU3RyaW5nKG5ldyBEYXRlKCkuZ2V0RGF5KCkpOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fd2Vla2RheTsKICAgIH0KICB9XSk7CiAgcmV0dXJuIENvbW1vbkN0eDsKfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gQ29tbW9uQ3R4Owptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuLi8uLi91dGlscy91dGlscyI6NDQ3LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjEzLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE0fV0sNDMzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9wcm9taXNlID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UnKTsKCnZhciBfcHJvbWlzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9taXNlKTsKCnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTsKCnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7Cgp2YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTsKCnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7Cgp2YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpOwoKdmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpOwoKdmFyIF9Db21tb25DdHgyID0gcmVxdWlyZSgnLi9Db21tb25DdHgnKTsKCnZhciBfQ29tbW9uQ3R4MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbW1vbkN0eDIpOwoKdmFyIF91dGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3V0aWxzJyk7Cgp2YXIgX1BlcnNpc3RlbmNlTWFuYWdlciA9IHJlcXVpcmUoJ3NlcnZpY2UtZnJhbWV3b3JrL2Rpc3QvUGVyc2lzdGVuY2VNYW5hZ2VyJyk7Cgp2YXIgX1BlcnNpc3RlbmNlTWFuYWdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9QZXJzaXN0ZW5jZU1hbmFnZXIpOwoKdmFyIF9SdWxlID0gcmVxdWlyZSgnLi4vUnVsZScpOwoKdmFyIF9SdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1J1bGUpOwoKdmFyIF9Vc2VyUG9saWN5ID0gcmVxdWlyZSgnLi4vcG9saWNpZXMvVXNlclBvbGljeScpOwoKdmFyIF9Vc2VyUG9saWN5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1VzZXJQb2xpY3kpOwoKdmFyIF9TdWJzY3JpcHRpb25Db25kaXRpb24gPSByZXF1aXJlKCcuLi9jb25kaXRpb25zL1N1YnNjcmlwdGlvbkNvbmRpdGlvbicpOwoKdmFyIF9TdWJzY3JpcHRpb25Db25kaXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3Vic2NyaXB0aW9uQ29uZGl0aW9uKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9Cgp2YXIgUnVudGltZUNvcmVDdHggPSBmdW5jdGlvbiAoX0NvbW1vbkN0eCkgewogICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFJ1bnRpbWVDb3JlQ3R4LCBfQ29tbW9uQ3R4KTsKCiAgZnVuY3Rpb24gUnVudGltZUNvcmVDdHgoaWRNb2R1bGUsIHJ1bnRpbWVSZWdpc3RyeSkgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgUnVudGltZUNvcmVDdHgpOwoKICAgIHZhciBfdGhpczIgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFJ1bnRpbWVDb3JlQ3R4KS5jYWxsKHRoaXMpKTsKCiAgICBfdGhpczIuaWRNb2R1bGUgPSBpZE1vZHVsZTsKICAgIF90aGlzMi5ydW50aW1lUmVnaXN0cnkgPSBydW50aW1lUmVnaXN0cnk7CiAgICBfdGhpczIuYWN0aXZlVXNlclBvbGljeSA9IHVuZGVmaW5lZDsKICAgIF90aGlzMi51c2VyUG9saWNpZXMgPSB7fTsKICAgIHJldHVybiBfdGhpczI7CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShSdW50aW1lQ29yZUN0eCwgW3sKICAgIGtleTogJ2F1dGhvcmlzZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gYXV0aG9yaXNlKG1lc3NhZ2UpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIGNvbnNvbGUubG9nKCctLS0gUG9saWN5IEVuZ2luZSAtLS0nKTsKICAgICAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTsKICAgICAgICBtZXNzYWdlLmJvZHkgPSBtZXNzYWdlLmJvZHkgfHwge307CiAgICAgICAgdmFyIHJlc3VsdCA9IHZvaWQgMDsKICAgICAgICB2YXIgaXNUb1ZlcmlmeSA9IF90aGlzLl9pc1RvVmVyaWZ5KG1lc3NhZ2UpOwogICAgICAgIHZhciBpc0luY29taW5nTWVzc2FnZSA9IF90aGlzLl9pc0luY29taW5nTWVzc2FnZShtZXNzYWdlKTsKICAgICAgICB2YXIgaXNUb0N5cGhlciA9IF90aGlzLl9pc1RvQ3lwaGVyTW9kdWxlKG1lc3NhZ2UpOwogICAgICAgIGlmIChpc1RvVmVyaWZ5KSB7CiAgICAgICAgICBpZiAoaXNJbmNvbWluZ01lc3NhZ2UpIHsKICAgICAgICAgICAgaWYgKGlzVG9DeXBoZXIpIHsKICAgICAgICAgICAgICBfdGhpcy5kZWNyeXB0KG1lc3NhZ2UpLnRoZW4oZnVuY3Rpb24gKG1lc3NhZ2UpIHsKICAgICAgICAgICAgICAgIHZhciBwb2xpY2llcyA9IHsKICAgICAgICAgICAgICAgICAgc2VydmljZVByb3ZpZGVyUG9saWN5OiBfdGhpcy5nZXRTZXJ2aWNlUHJvdmlkZXJQb2xpY3kobWVzc2FnZSwgaXNJbmNvbWluZ01lc3NhZ2UpLAogICAgICAgICAgICAgICAgICB1c2VyUG9saWN5OiBfdGhpcy5hY3RpdmVVc2VyUG9saWN5CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgcmVzdWx0ID0gX3RoaXMucG9saWN5RW5naW5lLnBkcC5hcHBseVBvbGljaWVzKG1lc3NhZ2UsIHBvbGljaWVzKTsKICAgICAgICAgICAgICAgIF90aGlzLnBvbGljeUVuZ2luZS5wZXAuZW5mb3JjZVBvbGljaWVzKG1lc3NhZ2UsIHBvbGljaWVzLCByZXN1bHQpOwogICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gJ05vdCBBcHBsaWNhYmxlJykgewogICAgICAgICAgICAgICAgICByZXN1bHQgPSBfdGhpcy5kZWZhdWx0QmVoYXZpb3I7CiAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS5hdXRoID0gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS5hdXRoID0gbWVzc2FnZS5ib2R5LmF1dGggPT09IHVuZGVmaW5lZCA/IHRydWUgOiBtZXNzYWdlLmJvZHkuYXV0aDsKICAgICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIHJlamVjdCgnTWVzc2FnZSBibG9ja2VkJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHZhciBwb2xpY2llcyA9IHsKICAgICAgICAgICAgICAgIHNlcnZpY2VQcm92aWRlclBvbGljeTogX3RoaXMuZ2V0U2VydmljZVByb3ZpZGVyUG9saWN5KG1lc3NhZ2UsIGlzSW5jb21pbmdNZXNzYWdlKSwKICAgICAgICAgICAgICAgIHVzZXJQb2xpY3k6IF90aGlzLmFjdGl2ZVVzZXJQb2xpY3kKICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIHJlc3VsdCA9IF90aGlzLnBvbGljeUVuZ2luZS5wZHAuYXBwbHlQb2xpY2llcyhtZXNzYWdlLCBwb2xpY2llcyk7CiAgICAgICAgICAgICAgX3RoaXMucG9saWN5RW5naW5lLnBlcC5lbmZvcmNlUG9saWNpZXMobWVzc2FnZSwgcG9saWNpZXMsIHJlc3VsdCk7CiAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gJ05vdCBBcHBsaWNhYmxlJykgewogICAgICAgICAgICAgICAgcmVzdWx0ID0gX3RoaXMuZGVmYXVsdEJlaGF2aW9yOwogICAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmF1dGggPSBmYWxzZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHJlc3VsdCkgewogICAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmF1dGggPSBtZXNzYWdlLmJvZHkuYXV0aCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IG1lc3NhZ2UuYm9keS5hdXRoOwogICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmVqZWN0KCdNZXNzYWdlIGJsb2NrZWQnKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhciBpc1RvU2V0SUQgPSBfdGhpcy5faXNUb1NldElEKG1lc3NhZ2UpOwogICAgICAgICAgICBpZiAoaXNUb1NldElEKSB7CiAgICAgICAgICAgICAgX3RoaXMuX2dldElkZW50aXR5KG1lc3NhZ2UpLnRoZW4oZnVuY3Rpb24gKGlkZW50aXR5KSB7CiAgICAgICAgICAgICAgICBtZXNzYWdlLmJvZHkuaWRlbnRpdHkgPSBpZGVudGl0eTsKICAgICAgICAgICAgICAgIHZhciBwb2xpY2llcyA9IHsKICAgICAgICAgICAgICAgICAgc2VydmljZVByb3ZpZGVyUG9saWN5OiBfdGhpcy5nZXRTZXJ2aWNlUHJvdmlkZXJQb2xpY3kobWVzc2FnZSwgaXNJbmNvbWluZ01lc3NhZ2UpLAogICAgICAgICAgICAgICAgICB1c2VyUG9saWN5OiBfdGhpcy5hY3RpdmVVc2VyUG9saWN5CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgcmVzdWx0ID0gX3RoaXMucG9saWN5RW5naW5lLnBkcC5hcHBseVBvbGljaWVzKG1lc3NhZ2UsIHBvbGljaWVzKTsKICAgICAgICAgICAgICAgIF90aGlzLnBvbGljeUVuZ2luZS5wZXAuZW5mb3JjZVBvbGljaWVzKG1lc3NhZ2UsIHBvbGljaWVzLCByZXN1bHQpOwogICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gJ05vdCBBcHBsaWNhYmxlJykgewogICAgICAgICAgICAgICAgICByZXN1bHQgPSBfdGhpcy5kZWZhdWx0QmVoYXZpb3I7CiAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS5hdXRoID0gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS5hdXRoID0gbWVzc2FnZS5ib2R5LmF1dGggPT09IHVuZGVmaW5lZCA/IHRydWUgOiBtZXNzYWdlLmJvZHkuYXV0aDsKICAgICAgICAgICAgICAgICAgaWYgKGlzVG9DeXBoZXIpIHsKICAgICAgICAgICAgICAgICAgICBfdGhpcy5lbmNyeXB0KG1lc3NhZ2UpLnRoZW4oZnVuY3Rpb24gKG1lc3NhZ2UpIHsKICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIHJlamVjdCgnTWVzc2FnZSBibG9ja2VkJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHZhciBfcG9saWNpZXMgPSB7CiAgICAgICAgICAgICAgICBzZXJ2aWNlUHJvdmlkZXJQb2xpY3k6IF90aGlzLmdldFNlcnZpY2VQcm92aWRlclBvbGljeShtZXNzYWdlLCBpc0luY29taW5nTWVzc2FnZSksCiAgICAgICAgICAgICAgICB1c2VyUG9saWN5OiBfdGhpcy5hY3RpdmVVc2VyUG9saWN5CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICByZXN1bHQgPSBfdGhpcy5wb2xpY3lFbmdpbmUucGRwLmFwcGx5UG9saWNpZXMobWVzc2FnZSwgX3BvbGljaWVzKTsKICAgICAgICAgICAgICBfdGhpcy5wb2xpY3lFbmdpbmUucGVwLmVuZm9yY2VQb2xpY2llcyhtZXNzYWdlLCBfcG9saWNpZXMsIHJlc3VsdCk7CiAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gJ05vdCBBcHBsaWNhYmxlJykgewogICAgICAgICAgICAgICAgcmVzdWx0ID0gX3RoaXMuZGVmYXVsdEJlaGF2aW9yOwogICAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmF1dGggPSBmYWxzZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHJlc3VsdCkgewogICAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmF1dGggPSBtZXNzYWdlLmJvZHkuYXV0aCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IG1lc3NhZ2UuYm9keS5hdXRoOwogICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmVqZWN0KCdNZXNzYWdlIGJsb2NrZWQnKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzdWx0ID0gX3RoaXMuZGVmYXVsdEJlaGF2aW9yOwogICAgICAgICAgbWVzc2FnZS5ib2R5LmF1dGggPSBmYWxzZTsKICAgICAgICAgIGlmIChyZXN1bHQpIHsKICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlamVjdCgnTWVzc2FnZSBibG9ja2VkJyk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkZWNyeXB0JywKICAgIHZhbHVlOiBmdW5jdGlvbiBkZWNyeXB0KG1lc3NhZ2UpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIF90aGlzLmlkTW9kdWxlLmRlY3J5cHRNZXNzYWdlKG1lc3NhZ2UpLnRoZW4oZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgcmVzb2x2ZShtc2cpOwogICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgcmVqZWN0KGVycm9yKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnZG9NdXR1YWxBdXRoZW50aWNhdGlvbicsCiAgICB2YWx1ZTogZnVuY3Rpb24gZG9NdXR1YWxBdXRoZW50aWNhdGlvbihtZXNzYWdlLCBhdXRoRGVjaXNpb24pIHsKICAgICAgaWYgKGF1dGhEZWNpc2lvbikgewogICAgICAgIHZhciB0byA9IG1lc3NhZ2UudG8uc3BsaXQoJy8nKTsKICAgICAgICB2YXIgc3Vic0luZGV4ID0gdG8uaW5kZXhPZignc3Vic2NyaXB0aW9uJyk7CiAgICAgICAgdmFyIGlzRGF0YU9iamVjdFN1YnNjcmlwdGlvbiA9IHN1YnNJbmRleCAhPT0gLTE7CiAgICAgICAgdmFyIGlzRnJvbVJlbW90ZVNNID0gdGhpcy5pc0Zyb21SZW1vdGVTTShtZXNzYWdlLmZyb20pOwogICAgICAgIGlmIChpc0RhdGFPYmplY3RTdWJzY3JpcHRpb24gJiBpc0Zyb21SZW1vdGVTTSkgewogICAgICAgICAgdG8ucG9wKCk7CiAgICAgICAgICB2YXIgZGF0YU9iamVjdFVSTCA9IHRvWzBdICsgJy8vJyArIHRvWzJdICsgJy8nICsgdG9bM107CiAgICAgICAgICBpZiAodG8ubGVuZ3RoID4gNCkgewogICAgICAgICAgICBkYXRhT2JqZWN0VVJMID0gdG9bMF0gKyAnLy8nICsgdG9bMl0gKyAnLycgKyB0b1szXSArICcvJyArIHRvWzRdOwogICAgICAgICAgfQogICAgICAgICAgdGhpcy5pZE1vZHVsZS5kb011dHVhbEF1dGhlbnRpY2F0aW9uKGRhdGFPYmplY3RVUkwsIG1lc3NhZ2UuYm9keS5zdWJzY3JpYmVyKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICdlbmNyeXB0JywKICAgIHZhbHVlOiBmdW5jdGlvbiBlbmNyeXB0KG1lc3NhZ2UpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIF90aGlzLmlkTW9kdWxlLmVuY3J5cHRNZXNzYWdlKG1lc3NhZ2UpLnRoZW4oZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgcmVzb2x2ZShtc2cpOwogICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgcmVqZWN0KGVycm9yKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnZ2V0U2VydmljZVByb3ZpZGVyUG9saWN5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTZXJ2aWNlUHJvdmlkZXJQb2xpY3kobWVzc2FnZSwgaXNJbmNvbWluZykgewogICAgICB2YXIgcG9saWN5ID0gdm9pZCAwOwoKICAgICAgaWYgKGlzSW5jb21pbmcpIHsKICAgICAgICB2YXIgdG9IeXBlcnR5ID0gdGhpcy5ydW50aW1lUmVnaXN0cnkuZ2V0SHlwZXJ0eU5hbWUobWVzc2FnZS50byk7CiAgICAgICAgcG9saWN5ID0gdGhpcy5zZXJ2aWNlUHJvdmlkZXJQb2xpY2llc1t0b0h5cGVydHldOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBmcm9tSHlwZXJ0eSA9IHRoaXMucnVudGltZVJlZ2lzdHJ5LmdldEh5cGVydHlOYW1lKG1lc3NhZ2UuZnJvbSk7CiAgICAgICAgcG9saWN5ID0gdGhpcy5zZXJ2aWNlUHJvdmlkZXJQb2xpY2llc1tmcm9tSHlwZXJ0eV07CiAgICAgIH0KICAgICAgcmV0dXJuIHBvbGljeTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdpc0Zyb21SZW1vdGVTTScsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNGcm9tUmVtb3RlU00oZnJvbSkgewogICAgICB2YXIgc3BsaXRGcm9tID0gZnJvbS5zcGxpdCgnOi8vJyk7CiAgICAgIHJldHVybiBzcGxpdEZyb21bMF0gPT09ICdydW50aW1lJyAmJiBmcm9tICE9PSB0aGlzLnJ1bnRpbWVSZWdpc3RyeS5ydW50aW1lVVJMICsgJy9zbSc7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2lzVG9TZXRJRCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2lzVG9TZXRJRChtZXNzYWdlKSB7CiAgICAgIHZhciBzY2hlbWFzVG9JZ25vcmUgPSBbJ2RvbWFpbi1pZHAnLCAncnVudGltZScsICdkb21haW4nXTsKICAgICAgdmFyIHNwbGl0RnJvbSA9IG1lc3NhZ2UuZnJvbS5zcGxpdCgnOi8vJyk7CiAgICAgIHZhciBmcm9tU2NoZW1hID0gc3BsaXRGcm9tWzBdOwoKICAgICAgcmV0dXJuIHNjaGVtYXNUb0lnbm9yZS5pbmRleE9mKGZyb21TY2hlbWEpID09PSAtMTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfaXNJbmNvbWluZ01lc3NhZ2UnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9pc0luY29taW5nTWVzc2FnZShtZXNzYWdlKSB7CiAgICAgIHJldHVybiBtZXNzYWdlLmJvZHkuaWRlbnRpdHkgPyB0cnVlIDogZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAnZ2V0VVJMJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRVUkwodXJsKSB7CiAgICAgIHZhciBzcGxpdFVSTCA9IHVybC5zcGxpdCgnLycpOwogICAgICByZXR1cm4gc3BsaXRVUkxbMF0gKyAnLy8nICsgc3BsaXRVUkxbMl0gKyAnLycgKyBzcGxpdFVSTFszXTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfZ2V0SWRlbnRpdHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRJZGVudGl0eShtZXNzYWdlKSB7CiAgICAgIGlmIChtZXNzYWdlLnR5cGUgPT09ICd1cGRhdGUnKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuaWRNb2R1bGUuZ2V0SWRlbnRpdHlPZkh5cGVydHkobWVzc2FnZS5ib2R5LnNvdXJjZSk7CiAgICAgIH0KCiAgICAgIGlmIChtZXNzYWdlLnR5cGUgPT09ICdyZXNwb25zZScgJiYgbWVzc2FnZS5ib2R5LnNvdXJjZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuaWRNb2R1bGUuZ2V0SWRlbnRpdHlPZkh5cGVydHkobWVzc2FnZS5ib2R5LnNvdXJjZSk7CiAgICAgIH0KCiAgICAgIGlmICgoMCwgX3V0aWxzLmRpdmlkZVVSTCkobWVzc2FnZS5mcm9tKS50eXBlID09PSAnaHlwZXJ0eScpIHsKICAgICAgICByZXR1cm4gdGhpcy5pZE1vZHVsZS5nZXRJZGVudGl0eU9mSHlwZXJ0eShtZXNzYWdlLmZyb20pOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB0aGlzLmlkTW9kdWxlLmdldElkZW50aXR5T2ZIeXBlcnR5KHRoaXMuZ2V0VVJMKG1lc3NhZ2UuZnJvbSkpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAnX2lzVG9WZXJpZnknLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9pc1RvVmVyaWZ5KG1lc3NhZ2UpIHsKICAgICAgdmFyIHNjaGVtYXNUb0lnbm9yZSA9IFsnZG9tYWluLWlkcCcsICdoeXBlcnR5LXJ1bnRpbWUnLCAncnVudGltZScsICdkb21haW4nXTsKICAgICAgdmFyIHNwbGl0RnJvbSA9IG1lc3NhZ2UuZnJvbS5zcGxpdCgnOi8vJyk7CiAgICAgIHZhciBmcm9tU2NoZW1hID0gc3BsaXRGcm9tWzBdOwogICAgICB2YXIgc3BsaXRUbyA9IG1lc3NhZ2UudG8uc3BsaXQoJzovLycpOwogICAgICB2YXIgdG9TY2hlbWEgPSBzcGxpdFRvWzBdOwogICAgICBpZiAoZnJvbVNjaGVtYSA9PT0gbWVzc2FnZS5mcm9tIHx8IHRvU2NoZW1hID09PSBtZXNzYWdlLnRvKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIHJldHVybiBzY2hlbWFzVG9JZ25vcmUuaW5kZXhPZihmcm9tU2NoZW1hKSA9PT0gLTEgfHwgc2NoZW1hc1RvSWdub3JlLmluZGV4T2YodG9TY2hlbWEpID09PSAtMTsKICAgIH0KCiAgICAvL1RPRE8gdXNlIHNjaGVtYXNUb0lnbm9yZSBpbnN0ZWFkCgogIH0sIHsKICAgIGtleTogJ19pc1RvQ3lwaGVyTW9kdWxlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfaXNUb0N5cGhlck1vZHVsZShtZXNzYWdlKSB7CiAgICAgIHZhciBpc0NyZWF0ZSA9IG1lc3NhZ2UudHlwZSA9PT0gJ2NyZWF0ZSc7CiAgICAgIHZhciBpc0Zyb21IeXBlcnR5ID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKG1lc3NhZ2UuZnJvbSkudHlwZSA9PT0gJ2h5cGVydHknOwogICAgICB2YXIgaXNUb0h5cGVydHkgPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkobWVzc2FnZS50bykudHlwZSA9PT0gJ2h5cGVydHknOwogICAgICB2YXIgaXNUb0RhdGFPYmplY3QgPSAoMCwgX3V0aWxzLmlzRGF0YU9iamVjdFVSTCkobWVzc2FnZS50byk7CiAgICAgIHZhciBpc0hhbmRzaGFrZSA9IG1lc3NhZ2UudHlwZSA9PT0gJ2hhbmRzaGFrZSc7CgogICAgICByZXR1cm4gaXNDcmVhdGUgJiYgaXNGcm9tSHlwZXJ0eSAmJiBpc1RvSHlwZXJ0eSB8fCBpc0NyZWF0ZSAmJiBpc0Zyb21IeXBlcnR5ICYmIGlzVG9EYXRhT2JqZWN0IHx8IGlzSGFuZHNoYWtlOwogICAgfQogIH0sIHsKICAgIGtleTogJ3JlZ2lzdGVyU3Vic2NyaWJlcicsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXJTdWJzY3JpYmVyKG1lc3NhZ2UsIGF1dGhEZWNpc2lvbikgewogICAgICBpZiAoYXV0aERlY2lzaW9uKSB7CiAgICAgICAgdmFyIHRvID0gbWVzc2FnZS50by5zcGxpdCgnLycpOwogICAgICAgIHZhciBzdWJzSW5kZXggPSB0by5pbmRleE9mKCdzdWJzY3JpcHRpb24nKTsKICAgICAgICB2YXIgaXNEYXRhT2JqZWN0U3Vic2NyaXB0aW9uID0gc3Vic0luZGV4ICE9PSAtMTsKICAgICAgICB2YXIgaXNGcm9tUmVtb3RlU00gPSB0aGlzLmlzRnJvbVJlbW90ZVNNKG1lc3NhZ2UuZnJvbSk7CgogICAgICAgIGlmIChpc0RhdGFPYmplY3RTdWJzY3JpcHRpb24gJiBpc0Zyb21SZW1vdGVTTSkgewogICAgICAgICAgdG8ucG9wKCk7CiAgICAgICAgICB2YXIgZGF0YU9iamVjdFVSTCA9IHRvWzBdICsgJy8vJyArIHRvWzJdICsgJy8nICsgdG9bM107CiAgICAgICAgICBpZiAodG8ubGVuZ3RoID4gNCkgewogICAgICAgICAgICBkYXRhT2JqZWN0VVJMID0gdG9bMF0gKyAnLy8nICsgdG9bMl0gKyAnLycgKyB0b1szXSArICcvJyArIHRvWzRdOwogICAgICAgICAgfQogICAgICAgICAgdGhpcy5ydW50aW1lUmVnaXN0cnkucmVnaXN0ZXJTdWJzY3JpYmVyKGRhdGFPYmplY3RVUkwsIG1lc3NhZ2UuYm9keS5zdWJzY3JpYmVyKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICdfZ2V0TGFzdENvbXBvbmVudE9mVVJMJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0TGFzdENvbXBvbmVudE9mVVJMKHVybCkgewogICAgICB2YXIgc3BsaXQgPSB1cmwuc3BsaXQoJy8nKTsKICAgICAgcmV0dXJuIHNwbGl0W3NwbGl0Lmxlbmd0aCAtIDFdOwogICAgfQogIH0sIHsKICAgIGtleTogJ2FjdGl2ZVVzZXJQb2xpY3knLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9hY3RpdmVVc2VyUG9saWN5OwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHBvbGljeSkgewogICAgICB0aGlzLl9hY3RpdmVVc2VyUG9saWN5ID0gcG9saWN5OwogICAgfQogIH0sIHsKICAgIGtleTogJ2RhdGFPYmplY3RTY2hlbWUnLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9kYXRhT2JqZWN0U2NoZW1lOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHBhcmFtcykgewogICAgICB2YXIgZnJvbSA9IHBhcmFtcy5tZXNzYWdlLmZyb207CiAgICAgIGlmICgoMCwgX3V0aWxzLmlzRGF0YU9iamVjdFVSTCkoZnJvbSkpIHsKICAgICAgICB0aGlzLl9kYXRhT2JqZWN0U2NoZW1lID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKGZyb20pLnR5cGU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5fZGF0YU9iamVjdFNjaGVtZSA9IHVuZGVmaW5lZDsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogJ2lkTW9kdWxlJywKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5faWRNb2R1bGU7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQoaWRNb2R1bGUpIHsKICAgICAgdGhpcy5faWRNb2R1bGUgPSBpZE1vZHVsZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdwb2xpY2llcycsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIHBvbGljaWVzID0gX1BlcnNpc3RlbmNlTWFuYWdlcjIuZGVmYXVsdC5nZXQoJ3BvbGljaWVzJyk7CgogICAgICBpZiAocG9saWNpZXMgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHBvbGljaWVzID0ge307CiAgICAgIH0KICAgICAgcmV0dXJuIHBvbGljaWVzOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHBvbGljaWVzKSB7CiAgICAgIF9QZXJzaXN0ZW5jZU1hbmFnZXIyLmRlZmF1bHQuc2V0KCdwb2xpY2llcycsICcwJywgcG9saWNpZXMpOwogICAgfQogIH0sIHsKICAgIGtleTogJ3BvbGljeUVuZ2luZScsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3BvbGljeUVuZ2luZTsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChwb2xpY3lFbmdpbmUpIHsKICAgICAgdGhpcy5fcG9saWN5RW5naW5lID0gcG9saWN5RW5naW5lOwogICAgICB2YXIgYWNjZXB0QW55U3Vic2NyaXB0aW9uUnVsZSA9IG5ldyBfUnVsZTIuZGVmYXVsdCh0cnVlLCBuZXcgX1N1YnNjcmlwdGlvbkNvbmRpdGlvbjIuZGVmYXVsdCgnc3Vic2NyaXB0aW9uJywgJ2VxdWFscycsICcqJyksICdnbG9iYWwnLCAnZ2xvYmFsJyk7CiAgICAgIHZhciBwb2xpY3kgPSBuZXcgX1VzZXJQb2xpY3kyLmRlZmF1bHQoJ015IHBvbGljeScsIFthY2NlcHRBbnlTdWJzY3JpcHRpb25SdWxlXSwgWydyZWdpc3RlclN1YnNjcmliZXInLCAnZG9NdXR1YWxBdXRoZW50aWNhdGlvbiddKTsKICAgICAgdGhpcy5fcG9saWN5RW5naW5lLmFkZFBvbGljeSgnVVNFUicsICdNeSBwb2xpY3knLCBwb2xpY3kpOwogICAgICB0aGlzLmFjdGl2ZVVzZXJQb2xpY3kgPSAnTXkgcG9saWN5JzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdydW50aW1lUmVnaXN0cnknLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9ydW50aW1lUmVnaXN0cnk7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQocmVnaXN0cnkpIHsKICAgICAgdGhpcy5fcnVudGltZVJlZ2lzdHJ5ID0gcmVnaXN0cnk7CiAgICB9CiAgfSwgewogICAga2V5OiAnc3Vic2NyaXB0aW9uJywKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fc3Vic2NyaXB0aW9uOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHBhcmFtcykgewogICAgICB0aGlzLl9zdWJzY3JpcHRpb24gPSBwYXJhbXMubWVzc2FnZS5ib2R5LnN1YnNjcmliZXI7CiAgICB9CiAgfV0pOwogIHJldHVybiBSdW50aW1lQ29yZUN0eDsKfShfQ29tbW9uQ3R4My5kZWZhdWx0KTsKCmV4cG9ydHMuZGVmYXVsdCA9IFJ1bnRpbWVDb3JlQ3R4Owptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuLi8uLi91dGlscy91dGlscyI6NDQ3LCIuLi9SdWxlIjo0MjcsIi4uL2NvbmRpdGlvbnMvU3Vic2NyaXB0aW9uQ29uZGl0aW9uIjo0MzEsIi4uL3BvbGljaWVzL1VzZXJQb2xpY3kiOjQzNCwiLi9Db21tb25DdHgiOjQzMiwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mIjo2LCJiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZSI6MTAsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTMsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTQsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyI6MTUsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIjoxNiwic2VydmljZS1mcmFtZXdvcmsvZGlzdC9QZXJzaXN0ZW5jZU1hbmFnZXIiOjQxM31dLDQzNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTsKCnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpOwoKdmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTsKCnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7Cgp2YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7Cgp2YXIgX1BvbGljeTIgPSByZXF1aXJlKCcuLi9Qb2xpY3knKTsKCnZhciBfUG9saWN5MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1BvbGljeTIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCnZhciBVc2VyUG9saWN5ID0gZnVuY3Rpb24gKF9Qb2xpY3kpIHsKICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShVc2VyUG9saWN5LCBfUG9saWN5KTsKCiAgZnVuY3Rpb24gVXNlclBvbGljeShrZXksIHJ1bGVzLCBhY3Rpb25zLCBjb21iaW5pbmdBbGdvcml0aG0pIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFVzZXJQb2xpY3kpOwoKICAgIGlmICghY29tYmluaW5nQWxnb3JpdGhtKSB7CiAgICAgIGNvbWJpbmluZ0FsZ29yaXRobSA9ICdkZW55T3ZlcnJpZGVzJzsKICAgIH0KICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFVzZXJQb2xpY3kpLmNhbGwodGhpcywga2V5LCBydWxlcywgYWN0aW9ucywgY29tYmluaW5nQWxnb3JpdGhtKSk7CiAgfQoKICByZXR1cm4gVXNlclBvbGljeTsKfShfUG9saWN5My5kZWZhdWx0KTsKCmV4cG9ydHMuZGVmYXVsdCA9IFVzZXJQb2xpY3k7Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7Ii4uL1BvbGljeSI6NDI1LCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YiOjYsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTMsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyI6MTUsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIjoxNn1dLDQzNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfcHJvbWlzZSA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlJyk7Cgp2YXIgX3Byb21pc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvbWlzZSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgovKioKKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0EKKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRAoqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTAoqIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WCiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBCiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBRwoqIENvcHlyaWdodCAyMDE2IEFwaXplZQoqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOCioKKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CioKKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAoqCiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQoqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAoqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoqKi8KLy8gaW1wb3J0IE1lc3NhZ2VGYWN0b3J5IGZyb20gJy4uLy4uL3Jlc291cmNlcy9NZXNzYWdlRmFjdG9yeSc7CgovKioKICogQ2xhc3Mgd2lsbCBhc2sgdG8gdGhlIG1lc3NhZ2Ugbm9kZSBmb3IgYWRkcmVzc2VzCiAqLwoKdmFyIEFkZHJlc3NBbGxvY2F0aW9uID0gZnVuY3Rpb24gKCkgewogIC8qIHByaXZhdGUKICBfdXJsOiBVUkwKICBfYnVzOiBNaW5pQnVzCiAgKi8KCiAgLyoqCiAgICogQ3JlYXRlIGFuIEFkZHJlc3MgQWxsb2NhdGlvbgogICAqIEBwYXJhbSAge1VSTC5VUkx9ICAgICAgdXJsIC0gdXJsIGZyb20gd2hvIGlzIHNlbmRpbmcgdGhlIG1lc3NhZ2UKICAgKiBAcGFyYW0gIHtNaW5pQnVzfSAgICAgIGJ1cyAtIE1pbmlCdXMgdXNlZCBmb3IgYWRkcmVzcyBhbGxvY2F0aW9uCiAgICovCgogIGZ1bmN0aW9uIEFkZHJlc3NBbGxvY2F0aW9uKHVybCwgYnVzKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBBZGRyZXNzQWxsb2NhdGlvbik7CgogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAvLyBsZXQgbWVzc2FnZUZhY3RvcnkgPSBuZXcgTWVzc2FnZUZhY3RvcnkoKTsKICAgIC8vCiAgICAvLyBfdGhpcy5fbWVzc2FnZUZhY3RvcnkgPSBtZXNzYWdlRmFjdG9yeTsKICAgIF90aGlzLl91cmwgPSB1cmw7CiAgICBfdGhpcy5fYnVzID0gYnVzOwogIH0KCiAgLyoqCiAgICogZ2V0IHRoZSBVUkwgdmFsdWUKICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB1cmwgdmFsdWU7CiAgICovCgoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShBZGRyZXNzQWxsb2NhdGlvbiwgW3sKICAgIGtleTogJ2NyZWF0ZScsCgoKICAgIC8qKgogICAgICogQXNrIGZvciBjcmVhdGlvbiBvZiBhIG51bWJlciBvZiBIeXBlcnR5IGFkZHJlc3NlcywgdG8gdGhlIGRvbWFpbiBtZXNzYWdlIG5vZGUuCiAgICAgKiBAcGFyYW0gIHtEb21haW59IGRvbWFpbiAtIERvbWFpbiBvZiB0aGUgbWVzc2FnZSBub2RlLgogICAgICogQHBhcmFtICB7bnVtYmVyfSBudW1iZXIgLSBOdW1iZXIgb2YgYWRkcmVzc2VzIHRvIHJlcXVlc3QKICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEh5cGVydHlVUkw+fSAgQSBsaXN0IG9mIEh5cGVydHlVUkwncwogICAgICovCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlKGRvbWFpbiwgbnVtYmVyKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAvLyBsZXQgbWVzc2FnZUZhY3RvcnkgPSBfdGhpcy5fbWVzc2FnZUZhY3Rvcnk7CgogICAgICB2YXIgbXNnID0gewogICAgICAgIHR5cGU6ICdjcmVhdGUnLCBmcm9tOiBfdGhpcy5fdXJsLCB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyBkb21haW4gKyAnL2h5cGVydHktYWRkcmVzcy1hbGxvY2F0aW9uJywKICAgICAgICBib2R5OiB7IHZhbHVlOiB7IG51bWJlcjogbnVtYmVyIH0gfQogICAgICB9OwoKICAgICAgLy8gVE9ETzogQXBwbHkgdGhlIG1lc3NhZ2UgZmFjdG9yeQogICAgICAvLyBUaGUgbXNnLW5vZGUtdmVydHggc2hvdWxkIGJlIGNoYW5nZWQgdGhlIGJvZHkgZmllbGQgdG8gcmVjZWl2ZQogICAgICAvLyB0aGUgZm9sbG93aW5nIGZvcm1hdCBib2R5OiB7dmFsdWU6IHtudW1iZXI6IG51bWJlcn19IGJlY2F1c2UKICAgICAgLy8gdGhlIG1lc3NhZ2UgaXMgZ2VuZXJhdGVkIGluIHRoYXQgd2F5IGJ5IHRoZSBtZXNzYWdlIGZhY3Rvcnk7CiAgICAgIC8vIGxldCBtc2cgPSBtZXNzYWdlRmFjdG9yeS5jcmVhdGVNZXNzYWdlUmVxdWVzdChfdGhpcy5fdXJsLCAnZG9tYWluOi8vbXNnLW5vZGUuJyArIGRvbWFpbiArICcvaHlwZXJ0eS1hZGRyZXNzLWFsbG9jYXRpb24nLCAnJywge251bWJlcjogbnVtYmVyfSk7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgLy8gVE9ETzogY2hhbmdlIHRoaXMgcmVzcG9uc2UgTWVzc2FnZSB1c2luZyB0aGUgTWVzc2FnZUZhY3RvcnkKICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG1zZywgZnVuY3Rpb24gKHJlcGx5KSB7CiAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHsKICAgICAgICAgICAgcmVzb2x2ZShyZXBseS5ib2R5LnZhbHVlLmFsbG9jYXRlZCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZWplY3QocmVwbHkuYm9keS5kZXNjKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIFNlbmQgYSByZXF1ZXN0IHRvIHRoZSBkb21haW4gbWVzc2FnZSBub2RlLCB0byBkZWFsbG9jYXRlIG9uZSBvciBtb3JlIGFkZHJlc3NlcwogICAgKiBAcGFyYW0gIHtEb21haW59IGRvbWFpbiAtIERvbWFpbiBvZiB0aGUgbWVzc2FnZSBub2RlLgogICAgKiBAcGFyYW0gIHthZGRyZXNzZXN9IGFkZHJlc3NlcyB0byByZXF1ZXN0IHRoZSBkZWFsbG9jYXRpb24KICAgICogQHJldHVybnMge1Byb21pc2V9ICB0aGUgcmVzcG9uc2UgYnkgdGhlIG1lc3NhZ2Ugbm9kZQogICAgKi8KCiAgfSwgewogICAga2V5OiAnZGVsZXRlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVsZXRlKGRvbWFpbiwgYWRkcmVzc2VzKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgbWVzc2FnZSA9IHsKICAgICAgICB0eXBlOiAnZGVsZXRlJywgZnJvbTogX3RoaXMuX3VybCwgdG86ICdkb21haW46Ly9tc2ctbm9kZS4nICsgZG9tYWluICsgJy9oeXBlcnR5LWFkZHJlc3MtYWxsb2NhdGlvbicsCiAgICAgICAgYm9keTogeyBjaGlsZHJlblJlc291cmNlczogYWRkcmVzc2VzIH0KICAgICAgfTsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIGZ1bmN0aW9uIChyZXBseSkgewogICAgICAgICAgY29uc29sZS5sb2coJ3JlcGx5JywgcmVwbHkpOwogICAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7CiAgICAgICAgICAgIHJlc29sdmUocmVwbHkuYm9keS5jb2RlKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlamVjdChyZXBseS5ib2R5LmRlc2MpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICd1cmwnLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl91cmw7CiAgICB9CiAgfV0pOwogIHJldHVybiBBZGRyZXNzQWxsb2NhdGlvbjsKfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gQWRkcmVzc0FsbG9jYXRpb247Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7ImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlIjoxMCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxMywiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxNH1dLDQzNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTsKCnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7Cgp2YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTsKCnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7Cgp2YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpOwoKdmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpOwoKdmFyIF9SZWdpc3RyeURhdGFNb2RlbDIgPSByZXF1aXJlKCcuL1JlZ2lzdHJ5RGF0YU1vZGVsJyk7Cgp2YXIgX1JlZ2lzdHJ5RGF0YU1vZGVsMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JlZ2lzdHJ5RGF0YU1vZGVsMik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoqCiogICBAYXV0aG9yOiBHaWwgRGlhcyAoZ2lsLmRpYXNAdGVjbmljby51bGlzYm9hLnB0KQoqICAgSHlwZXJ0eUluc3RhbmNlIERhdGEgTW9kZWwgdXNlZCB0byBtb2RlbCBpbnN0YW5jZXMgb2YgSHlwZXJ0aWVzIHJ1bm5pbmcgaW4gZGV2aWNlcyBhbmQgc2VydmVycy4KKi8KCnZhciBIeXBlcnR5SW5zdGFuY2UgPSBmdW5jdGlvbiAoX1JlZ2lzdHJ5RGF0YU1vZGVsKSB7CiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoSHlwZXJ0eUluc3RhbmNlLCBfUmVnaXN0cnlEYXRhTW9kZWwpOwoKICBmdW5jdGlvbiBIeXBlcnR5SW5zdGFuY2UoaWQsIHVybCwgZGVzY3JpcHRvclVSTCwgZGVzY3JpcHRvciwgaHlwZXJ0eVVSTCwgdXNlciwgZ3VpZCwgcnVudGltZSwgY29udGV4dCkgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgSHlwZXJ0eUluc3RhbmNlKTsKCiAgICB2YXIgX3RoaXMyID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShIeXBlcnR5SW5zdGFuY2UpLmNhbGwodGhpcywgaWQsIHVybCwgZGVzY3JpcHRvclVSTCkpOwoKICAgIHZhciBfdGhpcyA9IF90aGlzMjsKICAgIF90aGlzLl9kZXNjcmlwdG9yID0gZGVzY3JpcHRvcjsKICAgIF90aGlzLl9oeXBlcnR5VVJMID0gaHlwZXJ0eVVSTDsKICAgIF90aGlzLl91c2VyID0gdXNlcjsKICAgIF90aGlzLl9ndWlkID0gZ3VpZDsKICAgIF90aGlzLl9ydW50aW1lID0gcnVudGltZTsKICAgIF90aGlzLl9jb250ZXh0ID0gY29udGV4dDsKICAgIHJldHVybiBfdGhpczI7CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShIeXBlcnR5SW5zdGFuY2UsIFt7CiAgICBrZXk6ICd1c2VyJywKICAgIHNldDogZnVuY3Rpb24gc2V0KGlkZW50aXR5KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIF90aGlzLnVzZXIgPSBpZGVudGl0eTsKICAgIH0sCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF90aGlzLl91c2VyOwogICAgfQogIH0sIHsKICAgIGtleTogJ2h5cGVydHlVUkwnLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBfdGhpcy5faHlwZXJ0eVVSTDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkZXNjcmlwdG9yJywKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gX3RoaXMuX2Rlc2NyaXB0b3I7CiAgICB9CiAgfSwgewogICAga2V5OiAnb2JqZWN0TmFtZScsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF90aGlzLl9kZXNjcmlwdG9yLl9vYmplY3ROYW1lOwogICAgfQogIH1dKTsKICByZXR1cm4gSHlwZXJ0eUluc3RhbmNlOwp9KF9SZWdpc3RyeURhdGFNb2RlbDMuZGVmYXVsdCk7IC8qKgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICoqLwoKCmV4cG9ydHMuZGVmYXVsdCA9IEh5cGVydHlJbnN0YW5jZTsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi9SZWdpc3RyeURhdGFNb2RlbCI6NDM4LCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YiOjYsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTMsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTQsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyI6MTUsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIjoxNn1dLDQzNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfcHJvbWlzZSA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlJyk7Cgp2YXIgX3Byb21pc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvbWlzZSk7Cgp2YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7Cgp2YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKdmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7Cgp2YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpOwoKdmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTsKCnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTsKCnZhciBfRXZlbnRFbWl0dGVyMiA9IHJlcXVpcmUoJy4uL3V0aWxzL0V2ZW50RW1pdHRlcicpOwoKdmFyIF9FdmVudEVtaXR0ZXIzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRXZlbnRFbWl0dGVyMik7Cgp2YXIgX0FkZHJlc3NBbGxvY2F0aW9uID0gcmVxdWlyZSgnLi9BZGRyZXNzQWxsb2NhdGlvbicpOwoKdmFyIF9BZGRyZXNzQWxsb2NhdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9BZGRyZXNzQWxsb2NhdGlvbik7Cgp2YXIgX09iamVjdEFsbG9jYXRpb24gPSByZXF1aXJlKCcuLi9zeW5jaGVyL09iamVjdEFsbG9jYXRpb24nKTsKCnZhciBfT2JqZWN0QWxsb2NhdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9PYmplY3RBbGxvY2F0aW9uKTsKCnZhciBfSHlwZXJ0eUluc3RhbmNlID0gcmVxdWlyZSgnLi9IeXBlcnR5SW5zdGFuY2UnKTsKCnZhciBfSHlwZXJ0eUluc3RhbmNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0h5cGVydHlJbnN0YW5jZSk7Cgp2YXIgX01lc3NhZ2VGYWN0b3J5ID0gcmVxdWlyZSgnc2VydmljZS1mcmFtZXdvcmsvZGlzdC9NZXNzYWdlRmFjdG9yeScpOwoKdmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3V0aWxzLmpzJyk7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyppbXBvcnQgSWRlbnRpdHlNYW5hZ2VyIGZyb20gJy4vSWRlbnRpdHlNYW5hZ2VyJzsKaW1wb3J0IERpc2NvdmVyeSBmcm9tICcuL0Rpc2NvdmVyeSc7Ki8KCi8qKgoqIFJ1bnRpbWUgUmVnaXN0cnkgSW50ZXJmYWNlCiovCi8qKgoqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQoqIENvcHlyaWdodCAyMDE2IElORVNDLUlECiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMCiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYKKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0EKKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHCiogQ29weXJpZ2h0IDIwMTYgQXBpemVlCiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4KKgoqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwoqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKKgoqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCioKKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCioqLwoKdmFyIFJlZ2lzdHJ5ID0gZnVuY3Rpb24gKF9FdmVudEVtaXR0ZXIpIHsKICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShSZWdpc3RyeSwgX0V2ZW50RW1pdHRlcik7CgoKICAvKioKICAqIFRvIGluaXRpYWxpc2UgdGhlIFJ1bnRpbWUgUmVnaXN0cnkgd2l0aCB0aGUgUnVudGltZVVSTCB0aGF0IHdpbGwgYmUgdGhlIGJhc2lzIHRvIGRlcml2ZSB0aGUgaW50ZXJuYWwgcnVudGltZSBhZGRyZXNzZXMgd2hlbiBhbGxvY2F0aW5nIGFkZHJlc3NlcyB0byBpbnRlcm5hbCBydW50aW1lIGNvbXBvbmVudC4gSW4gYWRkaXRpb24sIHRoZSBSZWdpc3RyeSBkb21haW4gYmFjay1lbmQgdG8gYmUgdXNlZCB0byByZW1vdGVseSByZWdpc3RlciBSdW50aW1lIGNvbXBvbmVudHMsIGlzIGFsc28gcGFzc2VkIGFzIGlucHV0IHBhcmFtZXRlci4KICAqIEBwYXJhbSAge01lc3NhZ2VCdXN9ICAgICAgICAgIG1zZ2J1cyAgICAgICAgICAgICAgICBtc2didXMKICAqIEBwYXJhbSAge0h5cGVydHlSdW50aW1lVVJMfSAgIHJ1bnRpbWVVUkwgICAgICAgICAgICBydW50aW1lVVJMCiAgKiBAcGFyYW0gIHtBcHBTYW5kYm94fSAgICAgICAgICBhcHBTYW5kYm94ICAgICAgICAgICAgYXBwU2FuZGJveAogICogQHBhcmFtICB7cnVudGltZUNhdGFsb2d1ZX0gICAgcnVudGltZUNhdGFsb2d1ZSAgICAgIHJ1bnRpbWVDYXRhbG9ndWUKICAqIEBwYXJhbSAge0RvbWFpblVSTH0gICAgICAgICAgIHJlbW90ZVJlZ2lzdHJ5ICAgICAgICByZW1vdGVSZWdpc3RyeQogICovCgogIGZ1bmN0aW9uIFJlZ2lzdHJ5KHJ1bnRpbWVVUkwsIGFwcFNhbmRib3gsIGlkZW50aXR5TW9kdWxlLCBydW50aW1lQ2F0YWxvZ3VlLCByZW1vdGVSZWdpc3RyeSkgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgUmVnaXN0cnkpOwoKCiAgICAvLyBob3cgc29tZSBmdW5jdGlvbnMgcmVjZWl2ZSB0aGUgcGFyYW1ldGVycyBmb3IgZXhhbXBsZToKICAgIC8vIG5ldyBSZWdpc3RyeSgnaHlwZXJ0eS1ydW50aW1lOi8vc3AxLzEyMycsIGFwcFNhbmRib3gsIGlkTW9kdWxlLCByZW1vdGVSZWdpc3RyeSk7CiAgICAvLyByZWdpc3RyeS5yZWdpc3RlclN0dWIoc2FuZGJveCwgJ3NwMScpOwogICAgLy8gcmVnaXN0cnkucmVnaXN0ZXJIeXBlcnR5KHNhbmRCb3gsICdoeXBlcnR5LXJ1bnRpbWU6Ly9zcDEvMTIzJyk7CiAgICAvLyByZWdpc3RyeS5yZXNvbHZlKCdoeXBlcnR5LXJ1bnRpbWU6Ly9zcDEvMTIzJyk7CgogICAgdmFyIF90aGlzMiA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoUmVnaXN0cnkpLmNhbGwodGhpcykpOwoKICAgIGlmICghcnVudGltZVVSTCkgdGhyb3cgbmV3IEVycm9yKCdydW50aW1lVVJMIGlzIG1pc3NpbmcuJyk7CiAgICAvKmlmICghcmVtb3RlUmVnaXN0cnkpIHRocm93IG5ldyBFcnJvcigncmVtb3RlUmVnaXN0cnkgaXMgbWlzc2luZycpOyovCgogICAgdmFyIF90aGlzID0gX3RoaXMyOwoKICAgIF90aGlzLnJlZ2lzdHJ5VVJMID0gcnVudGltZVVSTCArICcvcmVnaXN0cnkvJzsKICAgIF90aGlzLmFwcFNhbmRib3ggPSBhcHBTYW5kYm94OwogICAgX3RoaXMucnVudGltZVVSTCA9IHJ1bnRpbWVVUkw7CiAgICBfdGhpcy5ydW50aW1lQ2F0YWxvZ3VlID0gcnVudGltZUNhdGFsb2d1ZTsKICAgIF90aGlzLnJlbW90ZVJlZ2lzdHJ5ID0gcmVtb3RlUmVnaXN0cnk7CiAgICBfdGhpcy5pZE1vZHVsZSA9IGlkZW50aXR5TW9kdWxlOwogICAgX3RoaXMuaWRlbnRpZmllciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwICsgMSk7CgogICAgLy8gdGhlIGV4cGlyZXMgaW4gMzYwMCwgcmVwcmVzZW50cyAxIGhvdXIKICAgIC8vdGhlIGV4cGlyZXMgaXMgaW4gc2Vjb25kcywgdW5pdCBvZiBtZWFzdXJlIHJlY2VpdmVkIGJ5IHRoZSBkb21haW4gcmVnaXN0cnkKICAgIF90aGlzLmV4cGlyZXNUaW1lID0gMzYwMDsKCiAgICBfdGhpcy5oeXBlcnRpZXNMaXN0VG9SZW1vdmUgPSB7fTsKICAgIF90aGlzLmh5cGVydGllc0xpc3QgPSBbXTsKICAgIF90aGlzLnByb3Rvc3R1YnNMaXN0ID0ge307CiAgICBfdGhpcy5pZHBQcm94eUxpc3QgPSB7fTsKICAgIF90aGlzLmRhdGFPYmplY3RMaXN0ID0ge307CiAgICBfdGhpcy5zdWJzY3JpYmVkRGF0YU9iamVjdExpc3QgPSB7fTsKICAgIF90aGlzLnNhbmRib3hlc0xpc3QgPSB7IHNhbmRib3g6IHt9LCBhcHBTYW5kYm94OiB7fSB9OwogICAgX3RoaXMucGVwTGlzdCA9IHt9OwoKICAgIF90aGlzLl9kb21haW4gPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkoX3RoaXMucmVnaXN0cnlVUkwpLmRvbWFpbjsKICAgIF90aGlzLnNhbmRib3hlc0xpc3QuYXBwU2FuZGJveFtydW50aW1lVVJMXSA9IGFwcFNhbmRib3g7CiAgICB2YXIgbXNnRmFjdG9yeSA9IG5ldyBfTWVzc2FnZUZhY3RvcnkuTWVzc2FnZUZhY3RvcnkoJ2ZhbHNlJywgJ3t9Jyk7CiAgICBfdGhpcy5tZXNzYWdlRmFjdG9yeSA9IG1zZ0ZhY3Rvcnk7CiAgICByZXR1cm4gX3RoaXMyOwogIH0KCiAgLyoqCiAgKiByZXR1cm4gdGhlIG1lc3NhZ2VCdXMgaW4gdGhpcyBSZWdpc3RyeQogICogQHBhcmFtIHtNZXNzYWdlQnVzfSAgICAgICAgICAgbWVzc2FnZUJ1cwogICovCgoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShSZWdpc3RyeSwgW3sKICAgIGtleTogJ19nZXRJZGVudGl0eUFzc29jaWF0ZWQnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRJZGVudGl0eUFzc29jaWF0ZWQodHlwZSwgaHlwZXJ0eVVSTCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgZm9yICh2YXIgaHlwZXJ0eSBpbiBfdGhpcy5oeXBlcnRpZXNMaXN0KSB7CiAgICAgICAgdmFyIHZhbHVlID0gX3RoaXMuaHlwZXJ0aWVzTGlzdFtoeXBlcnR5XTsKICAgICAgICBpZiAodmFsdWUuX2h5cGVydHlVUkwgPT09IGh5cGVydHlVUkwpIHsKICAgICAgICAgIHN3aXRjaCAodHlwZSkgewogICAgICAgICAgICBjYXNlICd1c2VybmFtZSc6CiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLl91c2VyLnVzZXJuYW1lOwogICAgICAgICAgICBjYXNlICdjbic6CiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLl91c2VyLmNuOwogICAgICAgICAgICBjYXNlICdsb2NhbGUnOgogICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5fdXNlci5sb2NhbGU7CiAgICAgICAgICAgIGNhc2UgJ2F2YXRhcic6CiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLl91c2VyLmF2YXRhcjsKICAgICAgICAgICAgY2FzZSAndXNlclVSTCc6CiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLl91c2VyLnVzZXJVUkw7CiAgICAgICAgICAgIGNhc2UgJy4nOgogICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5fdXNlcjsKICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICByZXR1cm4gJyc7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiAnJzsKICAgIH0KCiAgICAvKioKICAgICogcXVlcnkgdGhlIGRvbWFpbiByZWdpc3RyeSBmb3IgaW5mb3JtYXRpb24gZnJvbSBhIGRhdGFPYmplY3QgVVJMCiAgICAqIEBwYXJhbSAge1N0cmluZ30gICB1cmwgICAgICAgICAgICBkYXRhT2JqZWN0IFVSTAogICAgKiBAcmV0dXJuIHtKU09OfSAgICAgZGF0YU9iamVjdCAgICAgZGF0YSBvYmplY3QKICAgICovCgogIH0sIHsKICAgIGtleTogJ2Rpc2NvdmVyRGF0YU9iamVjdFBlclVSTCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzY292ZXJEYXRhT2JqZWN0UGVyVVJMKHVybCwgZG9tYWluKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBhY3RpdmVEb21haW4gPSB2b2lkIDA7CgogICAgICBpZiAoIWRvbWFpbikgewogICAgICAgIGFjdGl2ZURvbWFpbiA9IF90aGlzLl9kb21haW47CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYWN0aXZlRG9tYWluID0gZG9tYWluOwogICAgICB9CgogICAgICB2YXIgbXNnID0gewogICAgICAgIHR5cGU6ICdyZWFkJywgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIGFjdGl2ZURvbWFpbiArICcvJywgYm9keTogeyByZXNvdXJjZTogdXJsLCBzZWFyY2g6ICdkYXRhT2JqZWN0UGVyVVJMJyB9CiAgICAgIH07CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnLCBmdW5jdGlvbiAocmVwbHkpIHsKCiAgICAgICAgICB2YXIgZGF0YU9iamVjdCA9IHJlcGx5LmJvZHkudmFsdWU7CgogICAgICAgICAgaWYgKGRhdGFPYmplY3QpIHsKICAgICAgICAgICAgcmVzb2x2ZShkYXRhT2JqZWN0KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlamVjdCgnRGF0YU9iamVjdCBub3QgZm91bmQnKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byByZXR1cm4gdGhlIHNhbmRib3ggaW5zdGFuY2Ugd2hlcmUgdGhlIEFwcGxpY2F0aW9uIGlzIGV4ZWN1dGluZy4gSXQgaXMgYXNzdW1lZCB0aGVyZSBpcyBqdXN0IG9uZSBBcHAgcGVyIFJ1bnRpbWUgaW5zdGFuY2UuCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdnZXRBcHBTYW5kYm94JywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBcHBTYW5kYm94KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gX3RoaXMuYXBwU2FuZGJveDsKICAgIH0KCiAgICAvKioKICAgICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSB1c2VyIGFzc29jaWF0ZWQgdG8gdGhlIGh5cGVydHkgVVJMCiAgICAqIEBwYXJhbSAgICB7U3RyaW5nfSAgICBoeXBlcnR5VVJMICAgICAgaHlwZXJ0eSBVUkwKICAgICogQHJldHVybiAgIHtTdHJpbmd9ICAgIHVzZXJVUkwgICAgICAgICB1c2VyIFVSTAogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2V0SHlwZXJ0eU93bmVyJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRIeXBlcnR5T3duZXIoaHlwZXJ0eVVSTCkgewoKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIHVzZXJVUkwgPSB2b2lkIDA7CgogICAgICBmb3IgKHZhciBpbmRleCBpbiBfdGhpcy5oeXBlcnRpZXNMaXN0KSB7CiAgICAgICAgdmFyIGh5cGVydHkgPSBfdGhpcy5oeXBlcnRpZXNMaXN0W2luZGV4XTsKICAgICAgICBpZiAoaHlwZXJ0eS5oeXBlcnR5VVJMID09PSBoeXBlcnR5VVJMKSB7CiAgICAgICAgICB1c2VyVVJMID0gaHlwZXJ0eS51c2VyLnVzZXJVUkw7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiB1c2VyVVJMOwogICAgfQoKICAgIC8qKgogICAgKiByZXR1cm5zIHRoZSBoeXBlcnR5IE5hbWUgZnJvbSBhIGdpdmVuIHVybC4gVGhpcyB1cmwgY291bGQgYmUgZnJvbSBhIGRhdGFPYmplY3Qgb3IgaHlwZXJ0eQogICAgKiBAcGFyYW0gICAge1N0cmluZ30gICAgdXJsICAgICAgaHlwZXJ0eSBvciBkYXRhT2JqZWN0IFVSTAogICAgKiBAcmV0dXJuICAge1N0cmluZ30gICAgaHlwZXJ0eU5hbWUgICAgIGh5cGVydHkgTmFtZQogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2V0SHlwZXJ0eU5hbWUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEh5cGVydHlOYW1lKHVybCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGlzSHlwZXJ0eVVSTCA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKSh1cmwpLnR5cGUgPT09ICdoeXBlcnR5JzsKCiAgICAgIC8vdmFsdWUgdG8gYmUgcmV0dXJuZWQgaW4gdGhlIGVuZAogICAgICB2YXIgaHlwZXJ0eU5hbWUgPSB2b2lkIDA7CgogICAgICAvL2lmIGlzIG5vdCBhbiBoeXBlcnR5LCBjaGVjayBpZiBpcyBhIGRhdGFPYmplY3QgYW5kIG9idGFpbiBoaXMgcmVwb3J0ZXIKICAgICAgdmFyIGh5cGVydHlVUkwgPSBpc0h5cGVydHlVUkwgPyBoeXBlcnR5VVJMID0gdXJsIDogX3RoaXMuZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzKHVybCk7CgogICAgICBmb3IgKHZhciBpbmRleCBpbiBfdGhpcy5oeXBlcnRpZXNMaXN0KSB7CiAgICAgICAgdmFyIGh5cGVydHkgPSBfdGhpcy5oeXBlcnRpZXNMaXN0W2luZGV4XTsKICAgICAgICBpZiAoaHlwZXJ0eS5oeXBlcnR5VVJMID09PSBoeXBlcnR5VVJMKSB7CiAgICAgICAgICBoeXBlcnR5TmFtZSA9IGh5cGVydHkub2JqZWN0TmFtZTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gaHlwZXJ0eU5hbWU7CiAgICB9CgogICAgLyoqCiAgICAqIGZ1bmN0aW9uIHRvIHJldHVybiB0aGUgcmVwb3J0ZXJVUkwgYXNzb2NpYXRlZCB3aXRoIHRoZSBkYXRhb2JqZWN0IFVSTAogICAgKiBAcGFyYW0gICAge1N0cmluZ30gICAgIGRhdGFPYmplY3RVUkwgICAgZGF0YU9iamVjdFVSTAogICAgKiBAcmV0dXJuICAge1N0cmluZ30gICAgIHJlcG9ydGVyVVJMICAgICAgcmVwb3J0ZXJVUkwKICAgICovCgogIH0sIHsKICAgIGtleTogJ2dldFJlcG9ydGVyVVJMJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSZXBvcnRlclVSTChkYXRhT2JqZWN0VVJMKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgZGF0YU9iamVjdCA9IF90aGlzLmRhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgaWYgKGRhdGFPYmplY3QpIHsKICAgICAgICAgIHJlc29sdmUoZGF0YU9iamVjdC5yZXBvcnRlcik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlamVjdCgnTm8gcmVwb3J0ZXIgd2FzIGZvdW5kJyk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogZnVuY3Rpb24gdG8gcmV0dXJuIHRoZSByZXBvcnRlclVSTCBhc3NvY2lhdGVkIHdpdGggdGhlIGRhdGFvYmplY3QgVVJMLiBubyBwcm9taXNlIHJldHVybmVkCiAgICAqIEBwYXJhbSAgICB7U3RyaW5nfSAgICAgZGF0YU9iamVjdFVSTCAgICBkYXRhT2JqZWN0VVJMCiAgICAqIEByZXR1cm4gICB7U3RyaW5nfSAgICAgcmVwb3J0ZXJVUkwgICAgICByZXBvcnRlclVSTAogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSZXBvcnRlclVSTFN5bmNob25vdXMoZGF0YU9iamVjdFVSTCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGRhdGFPYmplY3QgPSBfdGhpcy5kYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VVJMXTsKCiAgICAgIHJldHVybiBkYXRhT2JqZWN0ID8gZGF0YU9iamVjdC5yZXBvcnRlciA6IHVuZGVmaW5lZDsKICAgIH0KCiAgICAvKioKICAgICogcmV0dXJucyB0aGUgaHlwZXJ0eSBVUkwgdGhhdCBzdWJzY3JpYmVkIHRoZSBkYXRhT2JqZWN0CiAgICAqIEBwYXJhbSAgICB7U3RyaW5nfSAgICAgdXJsICAgICAgICAgICAgdXJsIGZvcm1hdAogICAgKiBAcmV0dXJuICAge1N0cmluZ30gICAgSHlwZXJ0eSBVUkwgc3Vic2NyaWJlZCB0byB0aGUgVVJMCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdnZXREYXRhT2JqZWN0U3Vic2NyaWJlckh5cGVydHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldERhdGFPYmplY3RTdWJzY3JpYmVySHlwZXJ0eSh1cmwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBfdGhpcy5zdWJzY3JpYmVkRGF0YU9iamVjdExpc3RbdXJsXTsKICAgIH0KCiAgICAvKioKICAgICogcmVnaXN0ZXIgYSBkZXNpcmVkIGRhdGFPYmplY3QgdG8gc3Vic2NyaWJlCiAgICAqIEBwYXJhbSAgICB7U3RyaW5nfSAgICBkYXRhT2JqZWN0VVJMICAgICAgZGF0YU9iamVjdCBVUkwKICAgICovCgogIH0sIHsKICAgIGtleTogJ3JlZ2lzdGVyU3Vic2NyaWJlZERhdGFPYmplY3QnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyU3Vic2NyaWJlZERhdGFPYmplY3QoZGF0YU9iamVjdFVSTCwgaHlwZXJ0eVVSTCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICBpZiAoX3RoaXMuc3Vic2NyaWJlZERhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdID09PSB1bmRlZmluZWQpIHsKICAgICAgICBfdGhpcy5zdWJzY3JpYmVkRGF0YU9iamVjdExpc3RbZGF0YU9iamVjdFVSTF0gPSBoeXBlcnR5VVJMOwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAqIEZ1bmN0aW9uIHRvIHJldHVybiB0aGUgbGlzdCBvZiBwcmUgYXV0aG9yaXNlZCB1c2VycyByZWNlaXZlZCBpbiB0aGUgY3JlYXRpb24gb2YgYSBkYXRhIG9iamVjdAogICAgKiBAcGFyYW0gICAge1N0cmluZ30gICAgICAgICAgICBkYXRhT2JqZWN0VVJMICAgIGRhdGFPYmplY3RVUkwKICAgICogQHJldHVybiAgIHtBcnJheTxTdHJpbmc+fSAgICAgcHJlQXV0aCAgICAgICAgIExpc3Qgb2YgcHJlIGF1dGhvcmlzZWQgdXNlcnMKICAgICovCgogIH0sIHsKICAgIGtleTogJ2dldFByZUF1dGhTdWJzY3JpYmVycycsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UHJlQXV0aFN1YnNjcmliZXJzKGRhdGFPYmplY3RVUkwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIGRhdGFPYmplY3QgPSBfdGhpcy5kYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VVJMXTsKICAgICAgdmFyIHByZUF1dGggPSBbXTsKCiAgICAgIGlmIChkYXRhT2JqZWN0KSB7CiAgICAgICAgcHJlQXV0aCA9IGRhdGFPYmplY3QucHJlQXV0aDsKICAgICAgfQogICAgICByZXR1cm4gcHJlQXV0aDsKICAgIH0KCiAgICAvKioKICAgICogc2VuZCByZXF1ZXN0cyB0byB1bnJlZ2lzdGVyIGFsbCBoeXBlcnRpZXMgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnkKICAgICogQHJldHVybiAgIHtQcm9taXNlfSAgICAgcmV0dXJuIGEgcHJvbWlzZSBpZiB0aGUgcmVzdWx0IG9mIHVucmVnaXN0cmF0aW9uIGFsbCBoeXBlcnRpZXMKICAgICovCgogIH0sIHsKICAgIGtleTogJ3VucmVnaXN0ZXJBbGxIeXBlcnRpZXMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHVucmVnaXN0ZXJBbGxIeXBlcnRpZXMoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgdW5yZWdpc3RlclJlc3VsdHMgPSBbXTsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBmb3IgKHZhciBpbmRleCBpbiBfdGhpcy5oeXBlcnRpZXNMaXN0KSB7CiAgICAgICAgICB2YXIgaHlwZXJ0eSA9IF90aGlzLmh5cGVydGllc0xpc3RbaW5kZXhdOwogICAgICAgICAgdmFyIHJlc3VsdCA9IF90aGlzLnVucmVnaXN0ZXJIeXBlcnR5SW5zdGFuY2UoaHlwZXJ0eS51c2VyLnVzZXJVUkwsIGh5cGVydHkuaHlwZXJ0eVVSTCk7CiAgICAgICAgICB1bnJlZ2lzdGVyUmVzdWx0cy5wdXNoKHJlc3VsdCk7CiAgICAgICAgfQoKICAgICAgICBfcHJvbWlzZTIuZGVmYXVsdC5hbGwodW5yZWdpc3RlclJlc3VsdHMpLnRoZW4oZnVuY3Rpb24gKCkgewoKICAgICAgICAgIHJlc29sdmUoJ3N1Y2Nlc3NmdWxseSB1bnJlZ2lzdGVyZWQgYWxsIGh5cGVydGllcycpOwogICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgcmVqZWN0KGVycm9yKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqICBmdW5jdGlvbiB0byB1bnJlZ2lzdGVyIGFuIGh5cGVydHlJbnN0YW5jZSBpbiB0aGUgRG9tYWluIFJlZ2lzdHJ5CiAgICAqICBAcGFyYW0gICB7U3RyaW5nfSAgICAgIHVzZXIgICAgICAgIHVzZXIgdXJsCiAgICAqICBAcGFyYW0gICB7U3RyaW5nfSAgICAgIGh5cGVydHlJbnN0YW5jZSAgIEh5cGVydHlJbnNudGFuY2UgdXJsCiAgICAqCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICd1bnJlZ2lzdGVySHlwZXJ0eUluc3RhbmNlJywKICAgIHZhbHVlOiBmdW5jdGlvbiB1bnJlZ2lzdGVySHlwZXJ0eUluc3RhbmNlKHVzZXIsIGh5cGVydHlJbnN0YW5jZSkgewogICAgICAvL1RPRE8gd29ya2luZyBidXQgdGhlIHVzZXIKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBtZXNzYWdlID0geyB0eXBlOiAnZGVsZXRlJywgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsCiAgICAgICAgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMuX2RvbWFpbiArICcvJywKICAgICAgICBib2R5OiB7IHZhbHVlOiB7IHVzZXI6IHVzZXIsIGh5cGVydHlVUkw6IGh5cGVydHlJbnN0YW5jZSB9IH0gfTsKCiAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIGZ1bmN0aW9uIChyZXBseSkgewogICAgICAgIGNvbnNvbGUubG9nKCd1bnJlZ2lzdGVyIGh5cGVydHkgUmVwbHknLCByZXBseSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgKiAgZnVuY3Rpb24gdG8gZGVsZXRlIGFuIGRhdGFPYmplY3RJbnN0YW5jZSBpbiB0aGUgRG9tYWluIFJlZ2lzdHJ5CiAgICAqICBAcGFyYW0gICB7U3RyaW5nfSAgICBuYW1lICAgICAgRGF0YU9iamVjdE5hbWUKICAgICovCgogIH0sIHsKICAgIGtleTogJ2RlbGV0ZURhdGFPYmplY3RJbnN0YW5jZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlRGF0YU9iamVjdEluc3RhbmNlKG5hbWUpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBtZXNzYWdlID0geyB0eXBlOiAnZGVsZXRlJywgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsCiAgICAgICAgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMuX2RvbWFpbiArICcvJywKICAgICAgICBib2R5OiB7IHZhbHVlOiB7IG5hbWU6IG5hbWUgfSB9IH07CgogICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCBmdW5jdGlvbiAocmVwbHkpIHsKICAgICAgICBjb25zb2xlLmxvZygndW5yZWdpc3RlciBkYXRhT2JqZWN0IFJlcGx5JywgcmVwbHkpOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogRnVuY3Rpb24gdG8gdXBkYXRlIGFuIEh5cGVydHkKICAgICovCgogIH0sIHsKICAgIGtleTogJ3VwZGF0ZUh5cGVydHlJbnN0YW5jZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlSHlwZXJ0eUluc3RhbmNlKHJlc291cmNlLCB2YWx1ZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIG1lc3NhZ2UgPSB7IHR5cGU6ICdVUERBVEUnLCBmcm9tOiBfdGhpcy5yZWdpc3RyeVVSTCwKICAgICAgICB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5fZG9tYWluICsgJy8nLAogICAgICAgIGJvZHk6IHsgcmVzb3VyY2U6IHJlc291cmNlLCB2YWx1ZTogdmFsdWUgfSB9OwoKICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdC5wb3N0TWVzc2FnZShtZXNzYWdlLCBmdW5jdGlvbiAocmVwbHkpIHsKICAgICAgICBjb25zb2xlLmxvZygnVXBkYXRlZCBoeXBlcnR5IHJlcGx5JywgcmVwbHkpOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogcmVnaXN0ZXIgYSBuZXcgc3Vic2NyaWJlciBpbiB0aGUgZGF0YU9iamVjdCByZWdpc3RlcmVkCiAgICAqIEBwYXJhbSAge1N0cmluZ30gICBkYXRhT2JqZWN0VVJMICAgIGRhdGFPYmplY3QgVVJMCiAgICAqIEBwYXJhbSAge1N0cmluZ30gICBzdWJzY3JpYmVyVVJMICAgIHN1YnNjcmliZXIgVVJMCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdyZWdpc3RlclN1YnNjcmliZXInLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyU3Vic2NyaWJlcihkYXRhT2JqZWN0VVJMLCBzdWJzY3JpYmVyVVJMKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBkYXRhT2JqZWN0ID0gX3RoaXMuZGF0YU9iamVjdExpc3RbZGF0YU9iamVjdFVSTF07CgogICAgICBpZiAoZGF0YU9iamVjdCkgewogICAgICAgIGRhdGFPYmplY3Quc3Vic2NyaWJlcnMucHVzaChzdWJzY3JpYmVyVVJMKTsKICAgICAgICBfdGhpcy5kYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VVJMXSA9IGRhdGFPYmplY3Q7CiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICogZ2V0IHRoZSBzdWJzY3JpYmVycyByZWdpc3RlcmVkIHdpdGhpbiBhIGRhdGFPYmplY3QKICAgICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICBkYXRhT2JqZWN0VVJMICAgIGRhdGFPYmplY3QgVVJMCiAgICAqIEBwYXJhbSAge0FycmF5PFN0cmluZz59ICAgU3Vic3RyaWJlcnMgTGlzdAogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2V0RGF0YU9iamVjdFN1YnNjcmliZXJzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREYXRhT2JqZWN0U3Vic2NyaWJlcnMoZGF0YU9iamVjdFVSTCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgZGF0YU9iamVjdCA9IF90aGlzLmRhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdOwoKICAgICAgaWYgKGRhdGFPYmplY3QpIHsKICAgICAgICByZXR1cm4gZGF0YU9iamVjdC5zdWJzY3JpYmVyczsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aHJvdyAnTm8gZGF0YU9iamVjdCB3YXMgZm91bmQnOwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAqIFRvIHJlZ2lzdGVyIGEgbmV3IERhdGEgT2JqZWN0IGluIHRoZSBydW50aW1lIHdoaWNoIHJldHVybnMgdGhlIGRhdGFPYmplY3RVUkwgYWxsb2NhdGVkIHRvIHRoZSBuZXcgRGF0YSBPYmplY3QuCiAgICAqIEBwYXJhbSAge1N0cmluZ30gICAgICBpZGVudGlmaWVyICAgICAgICAgICAgaWRlbnRpZmllcgogICAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgZGF0YU9iamVjdHNjaGVtYSAgICAgICAgICAgIGRhdGFPYmplY3RzY2hlbWEKICAgICogQHBhcmFtICB7U3RyaW5nfSAgICAgIGRhdGFPYmplY3RVcmwgICAgICAgIGRhdGFPYmplY3RVcmwKICAgICogQHJldHVybiB7U3RyaW5nfSAgICAgIGRhdGFPYmplY3RSZXBvcnRlciAgICAgICAgIGRhdGFPYmplY3RSZXBvcnRlcgogICAgKi8KCiAgfSwgewogICAga2V5OiAncmVnaXN0ZXJEYXRhT2JqZWN0JywKICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3RlckRhdGFPYmplY3QoaWRlbnRpZmllciwgZGF0YU9iamVjdHNjaGVtYSwgZGF0YU9iamVjdFVybCwgZGF0YU9iamVjdFJlcG9ydGVyLCBhdXRob3Jpc2UpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICAvL21lc3NhZ2UgdG8gcmVnaXN0ZXIgdGhlIG5ldyBoeXBlcnR5LCB3aXRoaW4gdGhlIGRvbWFpbiByZWdpc3RyeQogICAgICAgIHZhciBtZXNzYWdlVmFsdWUgPSB7IG5hbWU6IGlkZW50aWZpZXIsIHNjaGVtYTogZGF0YU9iamVjdHNjaGVtYSwgdXJsOiBkYXRhT2JqZWN0VXJsLCBleHBpcmVzOiBfdGhpcy5leHBpcmVzVGltZSwgcmVwb3J0ZXI6IGRhdGFPYmplY3RSZXBvcnRlciwgcHJlQXV0aDogYXV0aG9yaXNlLCBzdWJzY3JpYmVyczogW10gfTsKCiAgICAgICAgX3RoaXMuZGF0YU9iamVjdExpc3RbZGF0YU9iamVjdFVybF0gPSBtZXNzYWdlVmFsdWU7CgogICAgICAgIHZhciBtZXNzYWdlID0gX3RoaXMubWVzc2FnZUZhY3RvcnkuY3JlYXRlQ3JlYXRlTWVzc2FnZVJlcXVlc3QoX3RoaXMucmVnaXN0cnlVUkwsICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMucmVnaXN0cnlEb21haW4gKyAnLycsIG1lc3NhZ2VWYWx1ZSwgJ3BvbGljeScpOwoKICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCBmdW5jdGlvbiAocmVwbHkpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCc9PT0+IHJlZ2lzdGVyRGF0YU9iamVjdCBSZXBseTogJywgcmVwbHkpOwogICAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7CiAgICAgICAgICAgIHJlc29sdmUoJ29rJyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZWplY3QoJ2Vycm9yIG9uIHJlZ2lzdGVyIERhdGFPYmplY3QnKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIFRvIHJlZ2lzdGVyIGEgbmV3IEh5cGVydHkgaW4gdGhlIHJ1bnRpbWUgd2hpY2ggcmV0dXJucyB0aGUgSHlwZXJ0eVVSTCBhbGxvY2F0ZWQgdG8gdGhlIG5ldyBIeXBlcnR5LgogICAgKiBAcGFyYW0gIHtTYW5kYm94fSAgICAgICAgICAgICBzYW5kYm94ICAgICAgICAgICAgICAgc2FuZGJveAogICAgKiBAcGFyYW0gIHtIeXBlcnR5Q2F0YWxvZ3VlVVJMfSBIeXBlcnR5Q2F0YWxvZ3VlVVJMICAgZGVzY3JpcHRvcgogICAgKiBAcmV0dXJuIHtIeXBlcnR5VVJMfSAgICAgICAgICBIeXBlcnR5VVJMCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdyZWdpc3Rlckh5cGVydHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVySHlwZXJ0eShzYW5kYm94LCBkZXNjcmlwdG9yVVJMLCBkZXNjcmlwdG9yKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAvL2Fzc3VtaW5nIGRlc2NyaXB0b3IgY29tZSBpbiB0aGlzIGZvcm1hdCwgdGhlIHNlcnZpY2UtcHJvdmlkZXItZG9tYWluIHVybCBpcyByZXRyaWV2ZWQgYnkgYSBzcGxpdCBpbnN0cnVjdGlvbgogICAgICAvL2h5cGVydHktY2F0YWxvZ3VlOi8vPHNlcnZpY2UtcHJvdmlkZXItZG9tYWluPi88Y2F0YWxvZ3VlLW9iamVjdC1pZGVudGlmaWVyPgogICAgICB2YXIgZG9tYWluVXJsID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKGRlc2NyaXB0b3JVUkwpLmRvbWFpbjsKCiAgICAgIGlmIChkb21haW5VcmwuaW5jbHVkZXMoJ2NhdGFsb2d1ZScpKSB7CiAgICAgICAgZG9tYWluVXJsID0gZG9tYWluVXJsLnJlcGxhY2UoJ2NhdGFsb2d1ZS4nLCAnJyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBfdGhpcy5pZE1vZHVsZS5nZXRJZGVudGl0eUFzc2VydGlvbigpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgdmFyIHVzZXJQcm9maWxlID0gcmVzdWx0LnVzZXJQcm9maWxlOwogICAgICAgICAgdmFyIGlkZW50aXR5VVJMID0gdXNlclByb2ZpbGUudXNlclVSTDsKCiAgICAgICAgICBpZiAoX3RoaXMuX21lc3NhZ2VCdXMgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICByZWplY3QoJ01lc3NhZ2VCdXMgbm90IGZvdW5kIG9uIHJlZ2lzdGVyU3R1YicpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy9jYWxsIGNoZWNrIGlmIHRoZSBwcm90b3N0dWIgZXhpc3QKICAgICAgICAgICAgX3RoaXMucmVzb2x2ZSgnaHlwZXJ0eS1ydW50aW1lOi8vJyArIGRvbWFpblVybCkudGhlbihmdW5jdGlvbiAoKSB7CgogICAgICAgICAgICAgIF90aGlzLnJlZ2lzdHJ5RG9tYWluID0gZG9tYWluVXJsOwoKICAgICAgICAgICAgICAvLyBUT0RPOiBzaG91bGQgYmUgaW1wbGVtZW50ZWQgd2l0aCBhZGRyZXNzZXMgcG9sbAogICAgICAgICAgICAgIC8vIEluIHRoaXMgY2FzZSB3ZSB3aWxsIHJlcXVlc3QgYW5kIHJldHVybiBvbmx5IG9uZQogICAgICAgICAgICAgIC8vIGFkZHJlc3MKICAgICAgICAgICAgICB2YXIgbnVtYmVyT2ZBZGRyZXNzZXMgPSAxOwogICAgICAgICAgICAgIF90aGlzLmFkZHJlc3NBbGxvY2F0aW9uLmNyZWF0ZShkb21haW5VcmwsIG51bWJlck9mQWRkcmVzc2VzKS50aGVuKGZ1bmN0aW9uIChhZGRlcmVzc0xpc3QpIHsKCiAgICAgICAgICAgICAgICBhZGRlcmVzc0xpc3QuZm9yRWFjaChmdW5jdGlvbiAoYWRkcmVzcykgewoKICAgICAgICAgICAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoYWRkcmVzcyArICcvc3RhdHVzJywgZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdNZXNzYWdlIGFkZExpc3RlbmVyIGZvciA6ICcsIGFkZHJlc3MgKyAnL3N0YXR1cyAtPiAnICsgbXNnKTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICB2YXIgaHlwZXJ0eSA9IG5ldyBfSHlwZXJ0eUluc3RhbmNlMi5kZWZhdWx0KF90aGlzLmlkZW50aWZpZXIsIF90aGlzLnJlZ2lzdHJ5VVJMLCBkZXNjcmlwdG9yVVJMLCBkZXNjcmlwdG9yLCBhZGRlcmVzc0xpc3RbMF0sIHVzZXJQcm9maWxlKTsKCiAgICAgICAgICAgICAgICBfdGhpcy5oeXBlcnRpZXNMaXN0LnB1c2goaHlwZXJ0eSk7CgogICAgICAgICAgICAgICAgLy9jaGVjayB3aGV0aGVyIHRoZSByZWNlaXZlZCBzYW5ib3ggZSBBcHBsaWNhdGlvblNhbmRib3ggb3IgYSBub3JtYWwgc2FuZGJveAogICAgICAgICAgICAgICAgaWYgKHNhbmRib3gudHlwZSA9PT0gJ2FwcCcpIHsKICAgICAgICAgICAgICAgICAgX3RoaXMuc2FuZGJveGVzTGlzdC5hcHBTYW5kYm94W2FkZGVyZXNzTGlzdFswXV0gPSBzYW5kYm94OwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzYW5kYm94LnR5cGUgPT09ICdub3JtYWwnKSB7CiAgICAgICAgICAgICAgICAgIF90aGlzLnNhbmRib3hlc0xpc3Quc2FuZGJveFthZGRlcmVzc0xpc3RbMF1dID0gc2FuZGJveDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIHJlamVjdCgnV3JvbmcgU2FuZGJveFR5cGUnKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB2YXIgcmVzb3VyY2VzID0gdm9pZCAwOwoKICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBoeXBlcnR5IHJlc291cmNlcyBpcyBhIHZlY3RvciBvciBhIHN0cmluZwogICAgICAgICAgICAgICAgLy8gVE9ETyBkZWxldGUgbGF0ZXIgd2hlbiBjYXRhbG9ndWUgaXMgZml4ZWQKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZGVzY3JpcHRvci5oeXBlcnR5VHlwZSA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgICAgcmVzb3VyY2VzID0gW107CiAgICAgICAgICAgICAgICAgIHJlc291cmNlcy5wdXNoKGRlc2NyaXB0b3IuaHlwZXJ0eVR5cGUpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgcmVzb3VyY2VzID0gZGVzY3JpcHRvci5oeXBlcnR5VHlwZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRvckRhdGFTY2hlbWEgPSBkZXNjcmlwdG9yLmRhdGFPYmplY3RzOwogICAgICAgICAgICAgICAgdmFyIGRhdGFTY2hlbWFzQXJyYXkgPSBbXTsKCiAgICAgICAgICAgICAgICAvL3RoaXMgd2lsbCBjcmVhdGUgYSBhcnJheSB3aXRoIGEgUHJvbWlzZSBpbiBlYWNoIHBvc2l0aW9uCiAgICAgICAgICAgICAgICBmb3IgKHZhciBpbmRleCBpbiBkZXNjcmlwdG9yRGF0YVNjaGVtYSkgewogICAgICAgICAgICAgICAgICBkYXRhU2NoZW1hc0FycmF5LnB1c2goX3RoaXMucnVudGltZUNhdGFsb2d1ZS5nZXREYXRhU2NoZW1hRGVzY3JpcHRvcihkZXNjcmlwdG9yRGF0YVNjaGVtYVtpbmRleF0pKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBhcyBzb29uIGFzIHRoZSBwcmV2aW91cyBhcnJheSBpcyBjb21wbGV0ZWQsIHRoaXMgd2lsbCB3YWl0IGZvciB0aGUgcmVzb2x2ZSBvZiBhbGwgcHJvbWlzZXMgaW4gdGhlIGFycmF5CiAgICAgICAgICAgICAgICBfcHJvbWlzZTIuZGVmYXVsdC5hbGwoZGF0YVNjaGVtYXNBcnJheSkudGhlbihmdW5jdGlvbiAoZGF0YVNjaGVtYXMpIHsKCiAgICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJlZERhdGFTY2hlbWFzID0gW107CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pbmRleCBpbiBkYXRhU2NoZW1hcykgewogICAgICAgICAgICAgICAgICAgIHZhciBkYXRhU2NoZW1hID0gZGF0YVNjaGVtYXNbX2luZGV4XTsKICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZERhdGFTY2hlbWFzLnB1c2goZGF0YVNjaGVtYS5zb3VyY2VQYWNrYWdlLnNvdXJjZUNvZGUucHJvcGVydGllcy5zY2hlbWUuY29uc3RhbnQpOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAvL21lc3NhZ2UgdG8gcmVnaXN0ZXIgdGhlIG5ldyBoeXBlcnR5LCB3aXRoaW4gdGhlIGRvbWFpbiByZWdpc3RyeQogICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZVZhbHVlID0geyB1c2VyOiBpZGVudGl0eVVSTCwgaHlwZXJ0eURlc2NyaXB0b3JVUkw6IGRlc2NyaXB0b3JVUkwsIGh5cGVydHlVUkw6IGFkZGVyZXNzTGlzdFswXSwgZXhwaXJlczogX3RoaXMuZXhwaXJlc1RpbWUsIHJlc291cmNlczogcmVzb3VyY2VzLCBkYXRhU2NoZW1lczogZmlsdGVyZWREYXRhU2NoZW1hcyB9OwoKICAgICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBfdGhpcy5tZXNzYWdlRmFjdG9yeS5jcmVhdGVDcmVhdGVNZXNzYWdlUmVxdWVzdChfdGhpcy5yZWdpc3RyeVVSTCwgJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5yZWdpc3RyeURvbWFpbiArICcvJywgbWVzc2FnZVZhbHVlLCAncG9saWN5Jyk7CgogICAgICAgICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCBmdW5jdGlvbiAocmVwbHkpIHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnPT09PiBSZWdpc3Rlckh5cGVydHkgUmVwbHk6ICcsIHJlcGx5KTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGFkZGVyZXNzTGlzdFswXSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCgnRmFpbGVkIHRvIHJlZ2lzdGVyIGFuIEh5cGVydHknKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgLy90aW1lciB0byBrZWVwIHRoZSByZWdpc3RyYXRpb24gYWxpdmUKICAgICAgICAgICAgICAgICAgLy8gdGhlIHRpbWUgaXMgZGVmaW5lZCBieSBhIGxpdHRsZSBsZXNzIHRoYW4gaGFsZiBvZiB0aGUgZXhwaXJlcyB0aW1lIGRlZmluZWQKICAgICAgICAgICAgICAgICAgdmFyIGtlZXBBbGl2ZVRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IF90aGlzLm1lc3NhZ2VGYWN0b3J5LmNyZWF0ZUNyZWF0ZU1lc3NhZ2VSZXF1ZXN0KF90aGlzLnJlZ2lzdHJ5VVJMLCAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLnJlZ2lzdHJ5RG9tYWluICsgJy8nLCBtZXNzYWdlVmFsdWUsICdwb2xpY3knKTsKCiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgZnVuY3Rpb24gKHJlcGx5KSB7CiAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnPT09PiBLZWVwQWxpdmUgUmVwbHk6ICcsIHJlcGx5KTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgfSwgX3RoaXMuZXhwaXJlc1RpbWUgLyAxLjEgLyAyICogMTAwMCk7CgogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnSHlwZXJ0eSBTY2hlbWFzJywgZmlsdGVyZWREYXRhU2NoZW1hcyk7CiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdIeXBlcnR5IHJlc291cmNlcycsIHJlc291cmNlcyk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQWRkcmVzcyBSZWFzb246ICcsIHJlYXNvbik7CiAgICAgICAgICAgICAgICByZWplY3QocmVhc29uKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgcmVqZWN0KCdGYWlsZWQgdG8gb2J0YWluIGFuIGlkZW50aXR5Jyk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgKiBUbyB1bnJlZ2lzdGVyIGEgcHJldmlvdXNseSByZWdpc3RlcmVkIEh5cGVydHkKICAgICogQHBhcmFtICB7SHlwZXJ0eVVSTH0gICAgICAgICAgSHlwZXJ0eVVSTCB1cmwgICAgICAgIHVybAogICAgKi8KCiAgfSwgewogICAga2V5OiAndW5yZWdpc3Rlckh5cGVydHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIHVucmVnaXN0ZXJIeXBlcnR5KHVybCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIHZhciBmb3VuZCA9IGZhbHNlOwogICAgICAgIHZhciBpbmRleCA9IDA7CgogICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IF90aGlzLmh5cGVydGllc0xpc3QubGVuZ3RoOyBpbmRleCsrKSB7CiAgICAgICAgICB2YXIgaHlwZXJ0eSA9IF90aGlzLmh5cGVydGllc0xpc3RbaW5kZXhdOwogICAgICAgICAgaWYgKGh5cGVydHkgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICBpZiAoaHlwZXJ0eS5oeXBlcnR5VVJMID09PSB1cmwpIHsKICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChmb3VuZCA9PT0gZmFsc2UpIHsKICAgICAgICAgIHJlamVjdCgnSHlwZXJ0eSBub3QgZm91bmQnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZGVsZXRlIF90aGlzLmh5cGVydGllc0xpc3RbaW5kZXhdOwogICAgICAgICAgcmVzb2x2ZSgnSHlwZXJ0eSBzdWNjZXNzZnVsbHkgZGVsZXRlZCcpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIFRvIGRpc2NvdmVyIHByb3RvY29sIHN0dWJzIGF2YWlsYWJsZSBpbiB0aGUgcnVudGltZSBmb3IgYSBjZXJ0YWluIGRvbWFpbi4gSWYgYXZhaWxhYmxlLCBpdCByZXR1cm5zIHRoZSBydW50aW1lIHVybCBmb3IgdGhlIHByb3RvY29sIHN0dWIgdGhhdCBjb25uZWN0cyB0byB0aGUgcmVxdWVzdGVkIGRvbWFpbi4gUmVxdWlyZWQgYnkgdGhlIHJ1bnRpbWUgQlVTIHRvIHJvdXRlIG1lc3NhZ2VzIHRvIHJlbW90ZSBzZXJ2ZXJzIG9yIHBlZXJzIChkbyB3ZSBuZWVkIHNvbWV0aGluZyBzaW1pbGFyIGZvciBIeXBlcnRpZXM/KS4KICAgICogQHBhcmFtICB7RG9tYWluVVJMfSAgICAgICAgICAgRG9tYWluVVJMICAgICAgICAgICAgdXJsCiAgICAqIEByZXR1cm4ge1J1bnRpbWVVUkx9ICAgICAgICAgICBSdW50aW1lVVJMCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdkaXNjb3ZlclByb3Rvc3R1YicsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzY292ZXJQcm90b3N0dWIodXJsKSB7CiAgICAgIGlmICghdXJsKSB0aHJvdyBuZXcgRXJyb3IoJ1BhcmFtZXRlciB1cmwgbmVlZGVkJyk7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIHJlcXVlc3QgPSBfdGhpcy5wcm90b3N0dWJzTGlzdFt1cmxdOwoKICAgICAgICBpZiAocmVxdWVzdCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICByZWplY3QoJ3JlcXVlc3RVcGRhdGUgY291bGRuXCd0IGdldCB0aGUgUHJvdG9zdHViVVJMJyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc29sdmUocmVxdWVzdCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICAqIFRvIHJlZ2lzdGVyIGEgbmV3IFByb3RvY29sIFN0dWIgaW4gdGhlIHJ1bnRpbWUgaW5jbHVkaW5nIGFzIGlucHV0IHBhcmFtZXRlcnMgdGhlIGZ1bmN0aW9uIHRvIHBvc3RNZXNzYWdlLCB0aGUgRG9tYWluVVJMIHRoYXQgaXMgY29ubmVjdGVkIHdpdGggdGhlIHN0dWIsIHdoaWNoIHJldHVybnMgdGhlIFJ1bnRpbWVVUkwgYWxsb2NhdGVkIHRvIHRoZSBuZXcgUHJvdG9jb2xTdHViLgogICAgICogQHBhcmFtIHtTYW5kYm94fSAgICAgICAgU2FuZGJveAogICAgICogQHBhcmFtICB7RG9tYWluVVJMfSAgICAgRG9tYWluVVJMIHNlcnZpY2UgcHJvdmlkZXIgZG9tYWluCiAgICAgKiBAcmV0dXJuIHtSdW50aW1lUHJvdG9TdHViVVJMfQogICAgICovCgogIH0sIHsKICAgIGtleTogJ3JlZ2lzdGVyU3R1YicsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXJTdHViKHNhbmRib3gsIGRvbWFpblVSTCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgcnVudGltZVByb3RvU3R1YlVSTCA9IHZvaWQgMDsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICAvL2NoZWNrIGlmIG1lc3NhZ2VCdXMgaXMgcmVnaXN0ZXJlZCBpbiByZWdpc3RyeSBvciBub3QKICAgICAgICBpZiAoX3RoaXMuX21lc3NhZ2VCdXMgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgcmVqZWN0KCdNZXNzYWdlQnVzIG5vdCBmb3VuZCBvbiByZWdpc3RlclN0dWInKTsKICAgICAgICB9CgogICAgICAgIC8vVE9ETyBpbXBsZW1lbnQgYSB1bmlxdWUgbnVtYmVyIGZvciB0aGUgcHJvdG9zdHViVVJMCiAgICAgICAgaWYgKCFkb21haW5VUkwuaW5kZXhPZignbXNnLW5vZGUuJykpIHsKICAgICAgICAgIGRvbWFpblVSTCA9IGRvbWFpblVSTC5zdWJzdHJpbmcoZG9tYWluVVJMLmluZGV4T2YoJy4nKSArIDEpOwogICAgICAgIH0KCiAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCA9ICdtc2ctbm9kZS4nICsgZG9tYWluVVJMICsgJy9wcm90b3N0dWIvJyArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwICsgMSk7CgogICAgICAgIC8vIFRPRE86IE9wdGltaXplIHRoaXMKICAgICAgICBfdGhpcy5wcm90b3N0dWJzTGlzdFtkb21haW5VUkxdID0gcnVudGltZVByb3RvU3R1YlVSTDsKICAgICAgICBfdGhpcy5zYW5kYm94ZXNMaXN0LnNhbmRib3hbcnVudGltZVByb3RvU3R1YlVSTF0gPSBzYW5kYm94OwoKICAgICAgICAvLyBzYW5kYm94LmFkZExpc3RlbmVyKCcqJywgZnVuY3Rpb24obXNnKSB7CiAgICAgICAgLy8gICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpOwogICAgICAgIC8vIH0pOwoKICAgICAgICByZXNvbHZlKHJ1bnRpbWVQcm90b1N0dWJVUkwpOwoKICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihydW50aW1lUHJvdG9TdHViVVJMICsgJy9zdGF0dXMnLCBmdW5jdGlvbiAobXNnKSB7CiAgICAgICAgICBpZiAobXNnLnJlc291cmNlID09PSBtc2cudG8gKyAnL3N0YXR1cycpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ1J1bnRpbWVQcm90b3N0dWJVUkwvc3RhdHVzIG1lc3NhZ2U6ICcsIG1zZy5ib2R5LnZhbHVlKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIFRvIHVucmVnaXN0ZXIgYSBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgcHJvdG9jb2wgc3R1YgogICAgKiBAcGFyYW0gIHtIeXBlcnR5UnVudGltZVVSTH0gICBIeXBlcnR5UnVudGltZVVSTCAgICAgaHlwZXJ0eVJ1bnRpbWVVUkwKICAgICovCgogIH0sIHsKICAgIGtleTogJ3VucmVnaXN0ZXJTdHViJywKICAgIHZhbHVlOiBmdW5jdGlvbiB1bnJlZ2lzdGVyU3R1YihoeXBlcnR5UnVudGltZVVSTCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgcnVudGltZVByb3RvU3R1YlVSTCA9IHZvaWQgMDsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICB2YXIgZGF0YSA9IF90aGlzLnByb3Rvc3R1YnNMaXN0W2h5cGVydHlSdW50aW1lVVJMXTsKCiAgICAgICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgcmVqZWN0KCdFcnJvciBvbiB1bnJlZ2lzdGVyU3R1YjogSHlwZXJ0eSBub3QgZm91bmQnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZGVsZXRlIF90aGlzLnByb3Rvc3R1YnNMaXN0W2h5cGVydHlSdW50aW1lVVJMXTsKICAgICAgICAgIHJlc29sdmUoJ1Byb3Rvc3R1YlVSTCByZW1vdmVkJyk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICAqIFRvIHJlZ2lzdGVyIGEgbmV3IElkZW50aXR5IFByb3ZpZGVyIHByb3h5IGluIHRoZSBydW50aW1lIGluY2x1ZGluZyBhcyBpbnB1dCBwYXJhbWV0ZXJzIHRoZSBmdW5jdGlvbiB0byBwb3N0TWVzc2FnZSwgdGhlIERvbWFpblVSTCB0aGF0IGlzIGNvbm5lY3RlZCB3aXRoIHRoZSBzdHViLCB3aGljaCByZXR1cm5zIHRoZSBSdW50aW1lVVJMIGFsbG9jYXRlZCB0byB0aGUgbmV3IFByb3RvY29sU3R1Yi4KICAgICAqIEBwYXJhbSB7U2FuZGJveH0gICAgICAgIFNhbmRib3gKICAgICAqIEBwYXJhbSAge0RvbWFpblVSTH0gICAgIERvbWFpblVSTCBzZXJ2aWNlIHByb3ZpZGVyIGRvbWFpbgogICAgICogQHJldHVybiB7UnVudGltZUlkcFByb3h5VVJMfQogICAgICovCgogIH0sIHsKICAgIGtleTogJ3JlZ2lzdGVySWRwUHJveHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVySWRwUHJveHkoc2FuZGJveCwgZG9tYWluVVJMKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBpZHBQcm94eVN0dWJVUkwgPSB2b2lkIDA7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgLy9jaGVjayBpZiBtZXNzYWdlQnVzIGlzIHJlZ2lzdGVyZWQgaW4gcmVnaXN0cnkgb3Igbm90CiAgICAgICAgaWYgKF90aGlzLl9tZXNzYWdlQnVzID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgIHJlamVjdCgnTWVzc2FnZUJ1cyBub3QgZm91bmQgb24gcmVnaXN0ZXJTdHViJyk7CiAgICAgICAgfQoKICAgICAgICBpZHBQcm94eVN0dWJVUkwgPSAnZG9tYWluLWlkcDovLycgKyBkb21haW5VUkwgKyAnL3N0dWIvJyArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwICsgMSk7CgogICAgICAgIC8vIFRPRE86IE9wdGltaXplIHRoaXMKICAgICAgICBfdGhpcy5pZHBQcm94eUxpc3RbZG9tYWluVVJMXSA9IGlkcFByb3h5U3R1YlVSTDsKICAgICAgICBfdGhpcy5zYW5kYm94ZXNMaXN0LnNhbmRib3hbaWRwUHJveHlTdHViVVJMXSA9IHNhbmRib3g7CgogICAgICAgIC8vIHNhbmRib3guYWRkTGlzdGVuZXIoJyonLCBmdW5jdGlvbihtc2cpIHsKICAgICAgICAvLyAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7CiAgICAgICAgLy8gfSk7CgogICAgICAgIHJlc29sdmUoaWRwUHJveHlTdHViVVJMKTsKCiAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoaWRwUHJveHlTdHViVVJMICsgJy9zdGF0dXMnLCBmdW5jdGlvbiAobXNnKSB7CiAgICAgICAgICBpZiAobXNnLnJlc291cmNlID09PSBtc2cudG8gKyAnL3N0YXR1cycpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ2lkcFByb3h5U3R1YlVSTC9zdGF0dXMgbWVzc2FnZTogJywgbXNnLmJvZHkudmFsdWUpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogVG8gZGlzY292ZXIgaWRwUHJveHkgc3R1YnMgYXZhaWxhYmxlIGluIHRoZSBydW50aW1lIGZvciBhIGNlcnRhaW4gZG9tYWluLiBJZiBhdmFpbGFibGUsIGl0IHJldHVybnMgdGhlIHJ1bnRpbWUgdXJsIGZvciB0aGUgaWRwUHJveHkgc3R1YiB0aGF0IGNvbm5lY3RzIHRvIHRoZSByZXF1ZXN0ZWQgZG9tYWluLiBSZXF1aXJlZCBieSB0aGUgcnVudGltZSBCVVMgdG8gcm91dGUgbWVzc2FnZXMgdG8gcmVtb3RlIHNlcnZlcnMgb3IgcGVlcnMKICAgICogQHBhcmFtICB7RG9tYWluVVJMfSAgICAgICAgICAgRG9tYWluVVJMICAgICAgICAgICAgdXJsCiAgICAqIEByZXR1cm4ge1J1bnRpbWVVUkx9ICAgICAgICAgICBSdW50aW1lVVJMICAgICAgICAgaWRwUHJveHlVcmwKICAgICovCgogIH0sIHsKICAgIGtleTogJ2Rpc2NvdmVySWRwUHJveHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2NvdmVySWRwUHJveHkodXJsKSB7CiAgICAgIGlmICghdXJsKSB0aHJvdyBuZXcgRXJyb3IoJ1BhcmFtZXRlciB1cmwgbmVlZGVkJyk7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIHJlcXVlc3QgPSBfdGhpcy5pZHBQcm94eUxpc3RbdXJsXTsKCiAgICAgICAgaWYgKHJlcXVlc3QgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgcmVqZWN0KCdyZXF1ZXN0VXBkYXRlIGNvdWxkblwndCBnZXQgdGhlIGlkcFByb3h5VVJMJyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc29sdmUocmVxdWVzdCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogVG8gcmVnaXN0ZXIgYSBuZXcgUG9saWN5IEVuZm9yY2VyIGluIHRoZSBydW50aW1lIGluY2x1ZGluZyBhcyBpbnB1dCBwYXJhbWV0ZXJzIHRoZSBmdW5jdGlvbiB0byBwb3N0TWVzc2FnZSwgdGhlIEh5cGVydHlVUkwgYXNzb2NpYXRlZCB3aXRoIHRoZSBQRVAsIHdoaWNoIHJldHVybnMgdGhlIFJ1bnRpbWVVUkwgYWxsb2NhdGVkIHRvIHRoZSBuZXcgUG9saWN5IEVuZm9yY2VyIGNvbXBvbmVudC4KICAgICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSBwb3N0TWVzc2FnZSBwb3N0TWVzc2FnZQogICAgKiBAcGFyYW0gIHtIeXBlcnR5VVJMfSAgICAgICAgICBIeXBlcnR5VVJMICAgICAgICAgICAgaHlwZXJ0eQogICAgKiBAcmV0dXJuIHtIeXBlcnR5UnVudGltZVVSTH0gICBIeXBlcnR5UnVudGltZVVSTAogICAgKi8KCiAgfSwgewogICAga2V5OiAncmVnaXN0ZXJQRVAnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyUEVQKHBvc3RNZXNzYWdlLCBoeXBlcnR5KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAvL1RPRE8gY2hlY2sgd2hhdCBwYXJhbWV0ZXIgaW4gdGhlIHBvc3RNZXNzYWdlIHRoZSBwZXAgaXMuCiAgICAgICAgX3RoaXMucGVwTGlzdFtoeXBlcnR5XSA9IHBvc3RNZXNzYWdlOwogICAgICAgIHJlc29sdmUoJ1BFUCByZWdpc3RlcmVkIHdpdGggc3VjY2VzcycpOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogVG8gdW5yZWdpc3RlciBhIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBwcm90b2NvbCBzdHViCiAgICAqIEBwYXJhbSAge0h5cGVydHlSdW50aW1lVVJMfSAgIEh5cGVydHlSdW50aW1lVVJMICAgICBIeXBlcnR5UnVudGltZVVSTAogICAgKi8KCiAgfSwgewogICAga2V5OiAndW5yZWdpc3RlclBFUCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gdW5yZWdpc3RlclBFUChIeXBlcnR5UnVudGltZVVSTCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIHZhciByZXN1bHQgPSBfdGhpcy5wZXBMaXN0W0h5cGVydHlSdW50aW1lVVJMXTsKCiAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICByZWplY3QoJ1BlcCBOb3QgZm91bmQuJyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc29sdmUoJ1BFUCBzdWNjZXNzZnVsbHkgcmVtb3ZlZC4nKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgKiBUbyByZWNlaXZlIHN0YXR1cyBldmVudHMgZnJvbSBjb21wb25lbnRzIHJlZ2lzdGVyZWQgaW4gdGhlIFJlZ2lzdHJ5LgogICAgKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICBNZXNzYWdlLk1lc3NhZ2UgICAgICAgZXZlbnQKICAgICovCgogIH0sIHsKICAgIGtleTogJ29uRXZlbnQnLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uRXZlbnQoZXZlbnQpIHsKICAgICAgLy8gVE9ETyBib2R5Li4uCiAgICAgIGNvbnNvbGUubG9nKCdvbkV2ZW50Jyk7CiAgICB9CgogICAgLyoqCiAgICAqIFRvIGRpc2NvdmVyIHNhbmRib3hlcyBhdmFpbGFibGUgaW4gdGhlIHJ1bnRpbWUgZm9yIGEgY2VydGFpbiBkb21haW4uIFJlcXVpcmVkIGJ5IHRoZSBydW50aW1lIFVBIHRvIGF2b2lkIG1vcmUgdGhhbiBvbmUgc2FuZGJveCBmb3IgdGhlIHNhbWUgZG9tYWluLgogICAgKiBAcGFyYW0gIHtEb21haW5VUkx9IERvbWFpblVSTCB1cmwKICAgICogQHJldHVybiB7UnVudGltZVNhbmRib3h9ICAgICAgICAgICBSdW50aW1lU2FuZGJveAogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2V0U2FuZGJveCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2FuZGJveCh1cmwpIHsKICAgICAgaWYgKCF1cmwpIHRocm93IG5ldyBFcnJvcignUGFyYW1ldGVyIHVybCBuZWVkZWQnKTsKICAgICAgY29uc29sZS5sb2coJ2dldFNhbmRib3g6ICcsIHVybCk7CgogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIHJlcXVlc3QgPSB2b2lkIDA7CgogICAgICAgIC8vZmlyc3QgdHJ5IHRvIGZpbmQgdGhlIHVybCBpbiB0aGUgYXBwU2FuZGJveCBsaXN0CiAgICAgICAgcmVxdWVzdCA9IF90aGlzLnNhbmRib3hlc0xpc3QuYXBwU2FuZGJveFt1cmxdOwoKICAgICAgICAvL2lmIG5vIGFwcFNhbmRib3ggd2FzIGZvdW5kLCB0cnkgdG8gc2VhcmNoIGluIHRoZSBub3JtYWwgc2FuZGJveGVzIGxpc3QKICAgICAgICBpZiAoIXJlcXVlc3QpIHsKICAgICAgICAgIHJlcXVlc3QgPSBfdGhpcy5zYW5kYm94ZXNMaXN0LnNhbmRib3hbdXJsXTsKCiAgICAgICAgICBpZiAoIXJlcXVlc3QpIHsKCiAgICAgICAgICAgIHZhciBkb21haW4gPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkodXJsKS5kb21haW47CgogICAgICAgICAgICAvLyBzZWFyY2ggaW4gdGhlIHNhbmRib3hlcyBsaXN0IGZvciBhIGVudHJ5IGNvbnRhaW5pbmcgdGhlIGRvbWFpbiBnaXZlbgogICAgICAgICAgICBmb3IgKHZhciBzYW5kYm94IGluIF90aGlzLnNhbmRib3hlc0xpc3Quc2FuZGJveCkgewogICAgICAgICAgICAgIGlmIChzYW5kYm94LmluY2x1ZGVzKGRvbWFpbikpIHsKICAgICAgICAgICAgICAgIHJlcXVlc3QgPSBfdGhpcy5zYW5kYm94ZXNMaXN0LnNhbmRib3hbc2FuZGJveF07CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICghcmVxdWVzdCkgewogICAgICAgICAgcmVqZWN0KCdubyBzYW5kYm94IGZvdW5kIGZvcjogJyArIHVybCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc29sdmUocmVxdWVzdCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogVG8gdmVyaWZ5IGlmIHNvdXJjZSBpcyB2YWxpZCBhbmQgdG8gcmVzb2x2ZSB0YXJnZXQgcnVudGltZSB1cmwgYWRkcmVzcyBpZiBuZWVkZWQgKGVnIHByb3Rvc3R1YiBydW50aW1lIHVybCBpbiBjYXNlIHRoZSBtZXNzYWdlIGlzIHRvIGJlIGRpc3BhdGNoZWQgdG8gYSByZW1vdGUgZW5kcG9pbnQpLgogICAgKiBAcGFyYW0gIHtVUkwuVVJMfSAgdXJsICAgICAgIHVybAogICAgKiBAcmV0dXJuIHtQcm9taXNlPFVSTC5VUkw+fSAgICAgICAgICAgICAgICAgUHJvbWlzZSA8VVJMLlVSTD4KICAgICovCgogIH0sIHsKICAgIGtleTogJ3Jlc29sdmUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlc29sdmUodXJsKSB7CiAgICAgIGNvbnNvbGUubG9nKCdyZXNvbHZlICcgKyB1cmwpOwogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgLy9zcGxpdCB0aGUgdXJsIHRvIGZpbmQgdGhlIGRvbWFpblVSTC4gZGVhbHMgd2l0aCB0aGUgdXJsIGZvciBleGFtcGxlIGFzOgogICAgICAvLyJoeXBlcnR5LXJ1bnRpbWU6Ly9zcDEvcHJvdG9zdHViLzEyMyIsCiAgICAgIHZhciBkaXZpZGVkVVJMID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKHVybCk7CiAgICAgIHZhciBkb21haW5VcmwgPSBkaXZpZGVkVVJMLmRvbWFpbjsKICAgICAgdmFyIHR5cGUgPSBkaXZpZGVkVVJMLnR5cGU7CgogICAgICAvLyByZXNvbHZlIHRoZSBkb21haW4gcHJvdG9zdHViIGluIGNhc2Ugb2YgYSBtZXNzYWdlIHRvIGdsb2JhbCByZWdpc3RyeQogICAgICBpZiAodXJsLmluY2x1ZGVzKCdnbG9iYWw6Ly9yZWdpc3RyeScpKSB7CiAgICAgICAgZG9tYWluVXJsID0gX3RoaXMuX2RvbWFpbjsKICAgICAgfQoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIGlmICghZG9tYWluVXJsLmluZGV4T2YoJ21zZy1ub2RlLicpIHx8ICFkb21haW5VcmwuaW5kZXhPZigncmVnaXN0cnkuJykpIHsKICAgICAgICAgIGRvbWFpblVybCA9IGRvbWFpblVybC5zdWJzdHJpbmcoZG9tYWluVXJsLmluZGV4T2YoJy4nKSArIDEpOwogICAgICAgIH0KCiAgICAgICAgdmFyIHJlcXVlc3QgPSB2b2lkIDA7CiAgICAgICAgaWYgKHR5cGUgPT09ICdkb21haW4taWRwJykgewogICAgICAgICAgcmVxdWVzdCA9IF90aGlzLmlkcFByb3h5TGlzdFtkb21haW5VcmxdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXF1ZXN0ID0gX3RoaXMucHJvdG9zdHVic0xpc3RbZG9tYWluVXJsXTsKICAgICAgICB9CgogICAgICAgIF90aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3J1bnRpbWU6c3R1YkxvYWRlZCcsIGZ1bmN0aW9uIChkb21haW5VcmwpIHsKICAgICAgICAgIHJlcXVlc3QgPSBfdGhpcy5wcm90b3N0dWJzTGlzdFtkb21haW5VcmxdOwogICAgICAgICAgY29uc29sZS5pbmZvKCdSZXNvbHZlZCBQcm90b3N0dWI6ICcsIHJlcXVlc3QpOwogICAgICAgICAgcmVzb2x2ZShyZXF1ZXN0KTsKICAgICAgICB9KTsKCiAgICAgICAgX3RoaXMuYWRkRXZlbnRMaXN0ZW5lcigncnVudGltZTppZHBQcm94eUxvYWRlZCcsIGZ1bmN0aW9uIChkb21haW5VcmwpIHsKICAgICAgICAgIHJlcXVlc3QgPSBfdGhpcy5pZHBQcm94eUxpc3RbZG9tYWluVXJsXTsKICAgICAgICAgIGNvbnNvbGUuaW5mbygnUmVzb2x2ZWQgSURQUHJveHk6ICcsIHJlcXVlc3QpOwogICAgICAgICAgcmVzb2x2ZShyZXF1ZXN0KTsKICAgICAgICB9KTsKCiAgICAgICAgaWYgKHJlcXVlc3QgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgY29uc29sZS5pbmZvKCdSZXNvbHZlZDogJywgcmVxdWVzdCk7CiAgICAgICAgICByZXNvbHZlKHJlcXVlc3QpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAodHlwZSA9PT0gJ2RvbWFpbi1pZHAnKSB7CiAgICAgICAgICAgIF90aGlzLnRyaWdnZXIoJ3J1bnRpbWU6bG9hZElkcFByb3h5JywgZG9tYWluVXJsKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIF90aGlzLnRyaWdnZXIoJ3J1bnRpbWU6bG9hZFN0dWInLCBkb21haW5VcmwpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnbWVzc2FnZUJ1cycsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF90aGlzLl9tZXNzYWdlQnVzOwogICAgfQoKICAgIC8qKgogICAgKiBTZXQgdGhlIG1lc3NhZ2VCdXMgaW4gdGhpcyBSZWdpc3RyeQogICAgKiBAcGFyYW0ge01lc3NhZ2VCdXN9ICAgICAgICAgICBtZXNzYWdlQnVzCiAgICAqLwogICAgLAogICAgc2V0OiBmdW5jdGlvbiBzZXQobWVzc2FnZUJ1cykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICBfdGhpcy5fbWVzc2FnZUJ1cyA9IG1lc3NhZ2VCdXM7CgogICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihfdGhpcy5yZWdpc3RyeVVSTCwgZnVuY3Rpb24gKG1zZykgewoKICAgICAgICB2YXIgdXNlclVybCA9IF90aGlzLl9nZXRJZGVudGl0eUFzc29jaWF0ZWQobXNnLmJvZHkucmVzb3VyY2UsIG1zZy5ib2R5LmNyaXRlcmlhKTsKCiAgICAgICAgdmFyIHJlcGx5ID0geyBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCB0bzogbXNnLmZyb20sIGZyb206IG1zZy50bywgYm9keTogeyByZXNvdXJjZTogdXNlclVybCB9IH07CiAgICAgICAgcmVwbHkuYm9keS5jb2RlID0gdXNlclVybCA/IDIwMCA6IDQwNDsKCiAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UocmVwbHkpOwogICAgICB9KTsKCiAgICAgIC8vIGFsc28gc2V0IHVwIG1lc3NhZ2VCdXMgaW4gdGhlIElkZW50aXR5TW9kdWxlIGNvbXBvbmVudAogICAgICAvLyBUT0RPIHJlZGVmaW5lIGEgYmV0dGVyIHdheSB0byBhZGQgdGhlIG1lc3NhZ2VCdXMgaW4gdGhlIElkTW9kdWxlCiAgICAgIF90aGlzLmlkTW9kdWxlLm1lc3NhZ2VCdXMgPSBtZXNzYWdlQnVzOwoKICAgICAgLy8gSW5zdGFsbCBBZGRyZXNzQWxsb2NhdGlvbgogICAgICB2YXIgYWRkcmVzc0FsbG9jYXRpb24gPSBuZXcgX0FkZHJlc3NBbGxvY2F0aW9uMi5kZWZhdWx0KF90aGlzLnJlZ2lzdHJ5VVJMLCBtZXNzYWdlQnVzKTsKICAgICAgX3RoaXMuYWRkcmVzc0FsbG9jYXRpb24gPSBhZGRyZXNzQWxsb2NhdGlvbjsKCiAgICAgIC8vSW5zdGFsbCBPYmplY3RBbGxvY2F0aW9uCiAgICAgIHZhciBvYmplY3RBbGxvY2F0aW9uID0gbmV3IF9PYmplY3RBbGxvY2F0aW9uMi5kZWZhdWx0KF90aGlzLnJlZ2lzdHJ5VVJMICsgJy9vYmplY3QtYWxsb2NhdGlvbicsIG1lc3NhZ2VCdXMpOwogICAgICBfdGhpcy5vYmplY3RBbGxvY2F0aW9uID0gb2JqZWN0QWxsb2NhdGlvbjsKCiAgICAgIC8qbGV0IGRpc2NvdmVyeSA9IG5ldyBEaXNjb3ZlcnkoX3RoaXMucmVnaXN0cnlVUkwsIG1lc3NhZ2VCdXMpOwogICAgICBfdGhpcy5kaXNjb3ZlcnkgPSBkaXNjb3Zlcnk7CiAgICAgICBsZXQgaWRlbnRpdHlNYW5hZ2VyID0gbmV3IElkZW50aXR5TWFuYWdlcignaHlwZXJ0eTovL2xvY2FsaG9zdC84MzNhNmU1Mi01MTViLTQ5OGItYTU3Yi1lM2RhZWVjZTQ4ZDInLCBfdGhpcy5ydW50aW1lVVJMLCBtZXNzYWdlQnVzKTsKICAgICAgX3RoaXMuaWRlbnRpdHlNYW5hZ2VyID0gaWRlbnRpdHlNYW5hZ2VyOyovCiAgICB9CiAgfV0pOwogIHJldHVybiBSZWdpc3RyeTsKfShfRXZlbnRFbWl0dGVyMy5kZWZhdWx0KTsKCmV4cG9ydHMuZGVmYXVsdCA9IFJlZ2lzdHJ5Owptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuLi9zeW5jaGVyL09iamVjdEFsbG9jYXRpb24iOjQ0MCwiLi4vdXRpbHMvRXZlbnRFbWl0dGVyIjo0NDUsIi4uL3V0aWxzL3V0aWxzLmpzIjo0NDcsIi4vQWRkcmVzc0FsbG9jYXRpb24iOjQzNSwiLi9IeXBlcnR5SW5zdGFuY2UiOjQzNiwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mIjo2LCJiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZSI6MTAsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTMsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTQsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyI6MTUsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIjoxNiwic2VydmljZS1mcmFtZXdvcmsvZGlzdC9NZXNzYWdlRmFjdG9yeSI6NDEyfV0sNDM4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIik7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoqCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBCiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQKKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wKKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVgoqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcKKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUKKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTgoqCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAoqCiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKKgoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KKiovCi8qKgoqICAgQGF1dGhvcjogR2lsIERpYXMgKGdpbC5kaWFzQHRlY25pY28udWxpc2JvYS5wdCkKKiAgIFJlZ2lzdHJ5IERhdGEgTW9kZWwgaW5jbHVkZXMgYWxsIE9iamVjdHMgdG8gYmUgaGFuZGxlZCBieSB0aGUgUmVnaXN0cnkgZnVuY3Rpb25hbGl0eSBpbmNsdWRpbmcKKi8KCnZhciBSZWdpc3RyeURhdGFNb2RlbCA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBSZWdpc3RyeURhdGFNb2RlbChpZCwgdXJsLCBkZXNjcmlwdG9yVVJMLCBzdGFydGluZ1RpbWUsIGxhc3RNb2RpZmllZCwgc3RhdHVzLCBzdHVicywgc3R1YnNDb25maWd1cmF0aW9uKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBSZWdpc3RyeURhdGFNb2RlbCk7CgogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICBfdGhpcy5faWQgPSBpZDsKICAgIF90aGlzLl91cmwgPSB1cmw7CiAgICBfdGhpcy5fZGVzY3JpcHRvclVSTCA9IGRlc2NyaXB0b3JVUkw7CiAgICBfdGhpcy5fc3RhcnRpbmdUaW1lID0gc3RhcnRpbmdUaW1lOwogICAgX3RoaXMuX2xhc3RNb2RpZmllZCA9IGxhc3RNb2RpZmllZDsKICAgIF90aGlzLl9zdGF0dXMgPSBzdGF0dXM7CiAgICBfdGhpcy5fc3R1YnMgPSBzdHViczsKICAgIF90aGlzLl9zdHVic0NvbmZpZ3VyYXRpb24gPSBzdHVic0NvbmZpZ3VyYXRpb247CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShSZWdpc3RyeURhdGFNb2RlbCwgW3sKICAgIGtleTogImlkIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gX3RoaXMuX2lkOwogICAgfQogIH0sIHsKICAgIGtleTogInVybCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF90aGlzLl91cmw7CiAgICB9CiAgfSwgewogICAga2V5OiAiZGVzY3JpcHRvciIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF90aGlzLl9kZXNjcmlwdG9yVVJMOwogICAgfQogIH1dKTsKICByZXR1cm4gUmVnaXN0cnlEYXRhTW9kZWw7Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IFJlZ2lzdHJ5RGF0YU1vZGVsOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbImRlZmF1bHQiXTsKCn0seyJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjEzLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE0fV0sNDM5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9hc3NpZ24gPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2Fzc2lnbicpOwoKdmFyIF9hc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXNzaWduKTsKCnZhciBfcHJvbWlzZSA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlJyk7Cgp2YXIgX3Byb21pc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvbWlzZSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCnJlcXVpcmUoJ2JhYmVsLXBvbHlmaWxsJyk7Cgp2YXIgX1JlZ2lzdHJ5ID0gcmVxdWlyZSgnLi4vcmVnaXN0cnkvUmVnaXN0cnknKTsKCnZhciBfUmVnaXN0cnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVnaXN0cnkpOwoKdmFyIF9JZGVudGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2lkZW50aXR5L0lkZW50aXR5TW9kdWxlJyk7Cgp2YXIgX0lkZW50aXR5TW9kdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0lkZW50aXR5TW9kdWxlKTsKCnZhciBfUG9saWN5RW5naW5lID0gcmVxdWlyZSgnLi4vcG9saWN5L1BvbGljeUVuZ2luZScpOwoKdmFyIF9Qb2xpY3lFbmdpbmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUG9saWN5RW5naW5lKTsKCnZhciBfTWVzc2FnZUJ1cyA9IHJlcXVpcmUoJy4uL2J1cy9NZXNzYWdlQnVzJyk7Cgp2YXIgX01lc3NhZ2VCdXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTWVzc2FnZUJ1cyk7Cgp2YXIgX1N5bmNoZXJNYW5hZ2VyID0gcmVxdWlyZSgnLi4vc3luY2hlci9TeW5jaGVyTWFuYWdlcicpOwoKdmFyIF9TeW5jaGVyTWFuYWdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TeW5jaGVyTWFuYWdlcik7Cgp2YXIgX1J1bnRpbWVDb3JlQ3R4ID0gcmVxdWlyZSgnLi4vcG9saWN5L2NvbnRleHQvUnVudGltZUNvcmVDdHgnKTsKCnZhciBfUnVudGltZUNvcmVDdHgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUnVudGltZUNvcmVDdHgpOwoKdmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3V0aWxzJyk7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoqCiAqIFJ1bnRpbWUgVXNlciBBZ2VudCBJbnRlcmZhY2Ugd2lsbCBwcm9jZXNzIGFsbCB0aGUgZGVwZW5kZWNpZXMgb2YgdGhlIGNvcmUgcnVudGltZTsKICogQGF1dGhvciBWaXRvciBTaWx2YSBbdml0b3ItdC1zaWx2YUB0ZWxlY29tLnB0XQogKiBAdmVyc2lvbiAwLjQuMAogKgogKiBAcHJvcGVydHkge3J1bnRpbWVGYWN0b3J5fSBydW50aW1lRmFjdG9yeSAtIFNwZWNpZmljIGltcGxlbWVudGF0aW9uIGZvciBhbGwgZW52aXJvbm1lbnRzOwogKiBAcHJvcGVydHkge1J1bnRpbWVDYXRhbG9ndWV9IHJ1bnRpbWVDYXRhbG9ndWUgLSBDYXRhbG9ndWUgb2YgY29tcG9uZW50cyBjYW4gYmUgaW5zdGFsbGVkOwogKiBAcHJvcGVydHkge3J1bnRpbWVVUkx9IHJ1bnRpbWVVUkwgLSBUaGlzIGlkZW50aWZ5IHRoZSBjb3JlIHJ1bnRpbWUsIHNob3VsZCBiZSB1bmlxdWU7CiAqIEBwcm9wZXJ0eSB7SWRlbnRpdHlNb2R1bGV9IGlkZW50aXR5TW9kdWxlIC0gSWRlbnRpdHkgTW9kdWxlOwogKiBAcHJvcGVydHkge1BvbGljeUVuZ2luZX0gcG9saWN5RW5naW5lIC0gUG9saWN5IEVuZ2luZSBNb2R1bGU7CiAqIEBwcm9wZXJ0eSB7UmVnaXN0cnl9IHJlZ2lzdHJ5IC0gUmVnaXN0cnkgTW9kdWxlOwogKiBAcHJvcGVydHkge01lc3NhZ2VCdXN9IG1lc3NhZ2VCdXMgLSBNZXNzYWdlIEJ1cyBpcyB1c2VkIGxpa2UgYSByb3V0ZXIgdG8gcmVkaXJlY3QgdGhlIG1lc3NhZ2VzIGZyb20gb25lIGNvbXBvbmVudCB0byBvdGhlcihzKQogKiBAcHJvcGVydHkge0dyYXBoQ29ubmVjdG9yfSBncmFwaENvbm5lY3RvciAtIEdyYXBoIENvbm5lY3RvciBoYW5kbGluZyBHVUlEIGFuZCBjb250YWN0cwogKi8KLyoqCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBCiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQKKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wKKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVgoqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcKKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUKKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTgoqCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAoqCiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKKgoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KKiovCgp2YXIgUnVudGltZVVBID0gZnVuY3Rpb24gKCkgewoKICAvKioKICAgKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgUnVudGltZSBVc2VyIEFnZW50CiAgICogQHBhcmFtIHtydW50aW1lRmFjdG9yeX0gcnVudGltZUZhY3RvcnkgLSBTcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBmb3IgdGhlIGVudmlyb25tZW50IHdoZXJlIHRoZSBjb3JlIHJ1bnRpbWUgd2lsbCBydW47CiAgICogQHBhcmFtIHtkb21haW59IGRvbWFpblVSTCAtIHNwZWNpZnkgdGhlIGRvbWFpbiBiYXNlIGZvciB0aGUgcnVudGltZTsKICAgKi8KCiAgZnVuY3Rpb24gUnVudGltZVVBKHJ1bnRpbWVGYWN0b3J5LCBkb21haW4pIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFJ1bnRpbWVVQSk7CgoKICAgIGlmICghcnVudGltZUZhY3RvcnkpIHRocm93IG5ldyBFcnJvcignVGhlIHNhbmRib3ggZmFjdG9yeSBpcyBhIG5lZWRlZCBwYXJhbWV0ZXInKTsKICAgIGlmICghZG9tYWluKSB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBuZWVkIHRoZSBkb21haW4gb2YgcnVudGltZScpOwoKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgX3RoaXMucnVudGltZUZhY3RvcnkgPSBydW50aW1lRmFjdG9yeTsKICAgIF90aGlzLnJ1bnRpbWVDYXRhbG9ndWUgPSBydW50aW1lRmFjdG9yeS5jcmVhdGVSdW50aW1lQ2F0YWxvZ3VlKCk7CgogICAgLy8gVE9ETzogcG9zdCBhbmQgcmV0dXJuIHJlZ2lzdHJ5L2h5cGVydHlSdW50aW1lSW5zdGFuY2UgdG8gYW5kIGZyb20gQmFjay1lbmQgU2VydmljZQogICAgLy8gdGhlIHJlc3BvbnNlIGlzIGxpa2U6IHJ1bnRpbWU6Ly9zcDEvMTIzCgogICAgdmFyIHJ1bnRpbWVVUkwgPSAncnVudGltZTovLycgKyBkb21haW4gKyAnLycgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMCArIDEpOwogICAgX3RoaXMucnVudGltZVVSTCA9IHJ1bnRpbWVVUkw7CiAgICBfdGhpcy5kb21haW4gPSBkb21haW47CgogICAgLy8gVE9ETzogY2hlY2sgaWYgcnVudGltZSBjYXRhbG9ndWUgbmVlZCB0aGUgcnVudGltZVVSTDsKICAgIF90aGlzLnJ1bnRpbWVDYXRhbG9ndWUucnVudGltZVVSTCA9IHJ1bnRpbWVVUkw7CgogICAgLy8gSW5zdGFudGlhdGUgdGhlIGlkZW50aXR5IE1vZHVsZQogICAgX3RoaXMuaWRlbnRpdHlNb2R1bGUgPSBuZXcgX0lkZW50aXR5TW9kdWxlMi5kZWZhdWx0KHJ1bnRpbWVVUkwpOwoKICAgIC8vIFVzZSB0aGUgc2FuZGJveCBmYWN0b3J5IHRvIGNyZWF0ZSBhbiBBcHBTYW5kYm94OwogICAgLy8gSW4gdGhlIGZ1dHVyZSBjYW4gYmUgZGVjaWRlZCBieSBwb2xpY3lFbmdpbmUgaWYgd2UgbmVlZAogICAgLy8gY3JlYXRlIGEgQXBwU2FuZGJveCBvciBub3Q7CiAgICB2YXIgYXBwU2FuZGJveCA9IHJ1bnRpbWVGYWN0b3J5LmNyZWF0ZUFwcFNhbmRib3goKTsKCiAgICAvLyBJbnN0YW50aWF0ZSB0aGUgUmVnaXN0cnkgTW9kdWxlCiAgICBfdGhpcy5yZWdpc3RyeSA9IG5ldyBfUmVnaXN0cnkyLmRlZmF1bHQocnVudGltZVVSTCwgYXBwU2FuZGJveCwgX3RoaXMuaWRlbnRpdHlNb2R1bGUsIF90aGlzLnJ1bnRpbWVDYXRhbG9ndWUpOwoKICAgIC8vIEluc3RhbnRpYXRlIHRoZSBNZXNzYWdlIEJ1cwogICAgX3RoaXMubWVzc2FnZUJ1cyA9IG5ldyBfTWVzc2FnZUJ1czIuZGVmYXVsdChfdGhpcy5yZWdpc3RyeSk7CgogICAgLy8gSW5zdGFudGlhdGUgdGhlIFBvbGljeSBFbmdpbmUKICAgIF90aGlzLnBvbGljeUVuZ2luZSA9IG5ldyBfUG9saWN5RW5naW5lMi5kZWZhdWx0KG5ldyBfUnVudGltZUNvcmVDdHgyLmRlZmF1bHQoX3RoaXMuaWRlbnRpdHlNb2R1bGUsIF90aGlzLnJlZ2lzdHJ5KSk7CgogICAgX3RoaXMubWVzc2FnZUJ1cy5waXBlbGluZS5oYW5kbGVycyA9IFsKCiAgICAvLyBQb2xpY3kgbWVzc2FnZSBhdXRob3Jpc2UKICAgIGZ1bmN0aW9uIChjdHgpIHsKICAgICAgX3RoaXMucG9saWN5RW5naW5lLmF1dGhvcmlzZShjdHgubXNnKS50aGVuKGZ1bmN0aW9uIChjaGFuZ2VkTWdzKSB7CiAgICAgICAgY3R4Lm1zZyA9IGNoYW5nZWRNZ3M7CiAgICAgICAgY3R4Lm5leHQoKTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgIGNvbnNvbGUuZXJyb3IocmVhc29uKTsKICAgICAgICBjdHguZmFpbChyZWFzb24pOwogICAgICB9KTsKICAgIH1dOwoKICAgIC8vIEFkZCB0byBBcHAgU2FuZGJveCB0aGUgbGlzdGVuZXI7CiAgICBhcHBTYW5kYm94LmFkZExpc3RlbmVyKCcqJywgZnVuY3Rpb24gKG1zZykgewogICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7CiAgICB9KTsKCiAgICAvLyBSZWdpc3RlciBtZXNzYWdlQnVzIG9uIFJlZ2lzdHJ5CiAgICBfdGhpcy5yZWdpc3RyeS5tZXNzYWdlQnVzID0gX3RoaXMubWVzc2FnZUJ1czsKCiAgICAvLyBSZWdpc3RlciByZWdpc3RyeSBvbiBJZGVudGl0eU1vZHVsZQogICAgX3RoaXMuaWRlbnRpdHlNb2R1bGUucmVnaXN0cnkgPSBfdGhpcy5yZWdpc3RyeTsKCiAgICBfdGhpcy5yZWdpc3RyeS5hZGRFdmVudExpc3RlbmVyKCdydW50aW1lOmxvYWRTdHViJywgZnVuY3Rpb24gKGRvbWFpblVSTCkgewogICAgICBfdGhpcy5sb2FkU3R1Yihkb21haW5VUkwpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzLnJlZ2lzdHJ5LnRyaWdnZXIoJ3J1bnRpbWU6c3R1YkxvYWRlZCcsIGRvbWFpblVSTCk7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZGVwbG95IHRoZSBQcm90b2NvbFN0dWIgY29tcG9uZW50ICcsIHJlYXNvbik7CiAgICAgIH0pOwogICAgfSk7CgogICAgX3RoaXMucmVnaXN0cnkuYWRkRXZlbnRMaXN0ZW5lcigncnVudGltZTpsb2FkSWRwUHJveHknLCBmdW5jdGlvbiAoZG9tYWluVVJMKSB7CiAgICAgIF90aGlzLmxvYWRJZHBQcm94eShkb21haW5VUkwpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzLnJlZ2lzdHJ5LnRyaWdnZXIoJ3J1bnRpbWU6aWRwUHJveHlMb2FkZWQnLCBkb21haW5VUkwpOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGRlcGxveSB0aGUgSURQIFByb3h5IGNvbXBvbmVudCAnLCByZWFzb24pOwogICAgICB9KTsKICAgIH0pOwoKICAgIC8vIFVzZSBzYW5kYm94IGZhY3RvcnkgdG8gdXNlIHNwZWNpZmljIG1ldGhvZHMKICAgIC8vIGFuZCBzZXQgdGhlIG1lc3NhZ2UgYnVzIHRvIHRoZSBmYWN0b3J5CiAgICBydW50aW1lRmFjdG9yeS5tZXNzYWdlQnVzID0gX3RoaXMubWVzc2FnZUJ1czsKCiAgICAvLyBJbnN0YW5jaWF0ZSB0aGUgU3luY2hlck1hbmFnZXI7CiAgICBfdGhpcy5zeW5jaGVyTWFuYWdlciA9IG5ldyBfU3luY2hlck1hbmFnZXIyLmRlZmF1bHQoX3RoaXMucnVudGltZVVSTCwgX3RoaXMubWVzc2FnZUJ1cywgX3RoaXMucmVnaXN0cnksIF90aGlzLnJ1bnRpbWVDYXRhbG9ndWUpOwoKICAgIC8vIEluc3RhbnRpYXRlIHRoZSBHcmFwaCBDb25uZWN0b3IKICAgIC8vIF90aGlzLmdyYXBoQ29ubmVjdG9yID0gbmV3IEdyYXBoQ29ubmVjdG9yKF90aGlzLnJ1bnRpbWVVUkwsIF90aGlzLm1lc3NhZ2VCdXMpOwogIH0KCiAgLyoqCiAgKiBBY2NvbW9kYXRlIGludGVyb3BlcmFiaWxpdHkgaW4gSDJIIGFuZCBwcm90byBvbiB0aGUgZmx5IGZvciBuZXdseSBkaXNjb3ZlcmVkIGRldmljZXMgaW4gTTJNCiAgKiBAcGFyYW0gIHtDYXRhbG9ndWVEYXRhT2JqZWN0Lkh5cGVydHlEZXNjcmlwdG9yfSAgIGRlc2NyaXB0b3IgICAgZGVzY3JpcHRvcgogICovCgoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShSdW50aW1lVUEsIFt7CiAgICBrZXk6ICdkaXNjb3ZlckhpcGVydHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2NvdmVySGlwZXJ0eShkZXNjcmlwdG9yKSB7fQogICAgLy8gQm9keS4uLgoKCiAgICAvKioKICAgICogUmVnaXN0ZXIgSHlwZXJ0eSBkZXBsb3llZCBieSB0aGUgQXBwIHRoYXQgaXMgcGFzc2VkIGFzIGlucHV0IHBhcmFtZXRlci4gVG8gYmUgdXNlZCB3aGVuIEFwcCBhbmQgSHlwZXJ0aWVzIGFyZSBmcm9tIHRoZSBzYW1lIGRvbWFpbiBvdGhlcndpc2UgdGhlIFJ1bnRpbWVVQSB3aWxsIHJhaXNlIGFuIGV4Y2VwdGlvbiBhbmQgdGhlIEFwcCBoYXMgdG8gdXNlIHRoZSBsb2FkSHlwZXJ0eSguLikgZnVuY3Rpb24uCiAgICAqIEBwYXJhbSAge09iamVjdH0gT2JqZWN0ICAgICAgICAgICAgICAgICAgIGh5cGVydHlJbnN0YW5jZQogICAgKiBAcGFyYW0gIHtVUkwuSHlwZXJ0eUNhdGFsb2d1ZVVSTH0gICAgICAgICBkZXNjcmlwdG9yICAgICAgZGVzY3JpcHRvcgogICAgKi8KCiAgfSwgewogICAga2V5OiAncmVnaXN0ZXJIeXBlcnR5JywKICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3Rlckh5cGVydHkoaHlwZXJ0eUluc3RhbmNlLCBkZXNjcmlwdG9yKSB7fQogICAgLy8gQm9keS4uLgoKCiAgICAvKioKICAgICogRGVwbG95IEh5cGVydHkgZnJvbSBDYXRhbG9ndWUgVVJMCiAgICAqIEBwYXJhbSAge1VSTC5IeXBlcnR5Q2F0YWxvZ3VlVVJMfSAgICBoeXBlcnR5IGh5cGVydHlEZXNjcmlwdG9yIHVybDsKICAgICovCgogIH0sIHsKICAgIGtleTogJ2xvYWRIeXBlcnR5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkSHlwZXJ0eShoeXBlcnR5RGVzY3JpcHRvclVSTCkgewoKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGlmICghaHlwZXJ0eURlc2NyaXB0b3JVUkwpIHRocm93IG5ldyBFcnJvcignSHlwZXJ0eSBkZXNjcmlwdG9yIHVybCBwYXJhbWV0ZXIgaXMgbmVlZGVkJyk7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIF9oeXBlcnR5VVJMID0gdm9pZCAwOwogICAgICAgIHZhciBfaHlwZXJ0eVNhbmRib3ggPSB2b2lkIDA7CiAgICAgICAgdmFyIF9oeXBlcnR5RGVzY3JpcHRvciA9IHZvaWQgMDsKICAgICAgICB2YXIgX2h5cGVydHlTb3VyY2VQYWNrYWdlID0gdm9pZCAwOwoKICAgICAgICB2YXIgZXJyb3JSZWFzb24gPSBmdW5jdGlvbiBlcnJvclJlYXNvbihyZWFzb24pIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1NvbWV0aGluZyBmYWlsZWQgb24gdGhlIGRlcGxveSBoeXBlcnR5OiAnLCByZWFzb24pOwogICAgICAgICAgcmVqZWN0KHJlYXNvbik7CiAgICAgICAgfTsKCiAgICAgICAgLy8gR2V0IEh5cGVydHkgZGVzY3JpcHRvcgogICAgICAgIC8vIFRPRE86IHRoZSByZXF1ZXN0IE1vZHVsZSBzaG91bGQgYmUgY2hhbmdlZCwKICAgICAgICAvLyBiZWNhdXNlIGF0IHRoaXMgbW9tZW50IGl0IGlzIGluY29tcGF0aWJsZSB3aXRoIG5vZGVqczsKICAgICAgICAvLyBQcm9iYWJseSB3ZSBuZWVkIHRvIHBhc3MgYSBmYWN0b3J5IGxpa2Ugd2UgZG8gZm9yIHNhbmRib3hlczsKICAgICAgICBjb25zb2xlLmluZm8oJy0tLS0tLS0tLS0tLS0tLS0tLSBIeXBlcnR5IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpOwogICAgICAgIGNvbnNvbGUuaW5mbygnR2V0IGh5cGVydHkgZGVzY3JpcHRvciBmb3IgOicsIGh5cGVydHlEZXNjcmlwdG9yVVJMKTsKICAgICAgICByZXR1cm4gX3RoaXMucnVudGltZUNhdGFsb2d1ZS5nZXRIeXBlcnR5RGVzY3JpcHRvcihoeXBlcnR5RGVzY3JpcHRvclVSTCkudGhlbihmdW5jdGlvbiAoaHlwZXJ0eURlc2NyaXB0b3IpIHsKICAgICAgICAgIC8vIGF0IHRoaXMgcG9pbnQsIHdlIGhhdmUgY29tcGxldGVkICJzdGVwIDIgYW5kIDMiIGFzIHNob3duIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQKICAgICAgICAgIGNvbnNvbGUuaW5mbygnMTogcmV0dXJuIGh5cGVydHkgZGVzY3JpcHRvcicpOwoKICAgICAgICAgIC8vIGh5cGVydHkgY29udGFpbnMgdGhlIGZ1bGwgcGF0aCBvZiB0aGUgY2F0YWxvZ3VlIFVSTCwgZS5nLgogICAgICAgICAgLy8gY2F0YWxvZ3VlLnJldGhpbmsuZXUvLndlbGwta25vd24vLi4uLi4uLi4uLgogICAgICAgICAgX2h5cGVydHlEZXNjcmlwdG9yID0gaHlwZXJ0eURlc2NyaXB0b3I7CgogICAgICAgICAgdmFyIHNvdXJjZVBhY2thZ2VVUkwgPSBoeXBlcnR5RGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlVVJMOwoKICAgICAgICAgIGlmIChzb3VyY2VQYWNrYWdlVVJMID09PSAnL3NvdXJjZVBhY2thZ2UnKSB7CiAgICAgICAgICAgIHJldHVybiBoeXBlcnR5RGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIEdldCB0aGUgaHlwZXJ0eSBzb3VyY2UgY29kZQogICAgICAgICAgcmV0dXJuIF90aGlzLnJ1bnRpbWVDYXRhbG9ndWUuZ2V0U291cmNlUGFja2FnZUZyb21VUkwoc291cmNlUGFja2FnZVVSTCk7CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoc291cmNlUGFja2FnZSkgewogICAgICAgICAgY29uc29sZS5pbmZvKCcyOiByZXR1cm4gaHlwZXJ0eSBzb3VyY2UgY29kZScpOwoKICAgICAgICAgIC8vIGF0IHRoaXMgcG9pbnQsIHdlIGhhdmUgY29tcGxldGVkICJzdGVwIDQgYW5kIDUiIGFzIHNob3duIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQKCiAgICAgICAgICBfaHlwZXJ0eVNvdXJjZVBhY2thZ2UgPSBzb3VyY2VQYWNrYWdlOwoKICAgICAgICAgIC8vCiAgICAgICAgICAvLyBzdGVwcyA2IC0tIDkgYXJlIHNraXBwZWQuCiAgICAgICAgICAvLyBUT0RPOiBvbiByZWxlYXNlIG9mIGNvcmUgMC4yOwogICAgICAgICAgLy8gVE9ETzogUHJvbWlzZSB0byBjaGVjayB0aGUgcG9saWN5IGVuZ2luZQoKICAgICAgICAgIC8vIG1vY2stdXAgY29kZTsKICAgICAgICAgIC8vIHRlbXBvcmFyeSBjb2RlLCBvbmx5CiAgICAgICAgICB2YXIgcG9saWN5ID0gdHJ1ZTsKCiAgICAgICAgICByZXR1cm4gcG9saWN5OwogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHBvbGljeVJlc3VsdCkgewogICAgICAgICAgY29uc29sZS5pbmZvKCczOiByZXR1cm4gcG9saWN5IGVuZ2luZSByZXN1bHQ6ICcsIHBvbGljeVJlc3VsdCk7CgogICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCA2IHRvIDkgb2YgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktaHlwZXJ0eS5tZCByaWdodCBub3cuCiAgICAgICAgICAvLwogICAgICAgICAgLy8gU3RlcHMgNiAtLSA5CiAgICAgICAgICAvLyBBcyBhIHJlc3VsdCBvZiB0aGUgc2lwcGVkIHN0ZXBzLCB3ZSBrbm93IGF0IHRoaXMgcG9pbnQgaWYgd2UgZXhlY3V0ZQogICAgICAgICAgLy8gaW5TYW1lU2FuZGJveCBvciBub3QuCiAgICAgICAgICAvLwoKICAgICAgICAgIC8vIEZvciB0ZXN0aW5nLCBqdXN0IGFzc3VtZSB3ZSBleGVjdXRlIGluIHNhbWUgU2FuZGJveC4KICAgICAgICAgIHZhciBpblNhbWVTYW5kYm94ID0gdHJ1ZTsKICAgICAgICAgIHZhciBzYW5kYm94ID0gdm9pZCAwOwoKICAgICAgICAgIGlmIChpblNhbWVTYW5kYm94KSB7CgogICAgICAgICAgICAvLyB0aGlzIGRvbid0IG5lZWQgYmUgYSBQcm9taXNlOwogICAgICAgICAgICBzYW5kYm94ID0gX3RoaXMucmVnaXN0cnkuZ2V0QXBwU2FuZGJveCgpOwoKICAgICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCAxMSBoZXJlLgogICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgIHZhciBkb21haW4gPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkoaHlwZXJ0eURlc2NyaXB0b3JVUkwpLmRvbWFpbjsKCiAgICAgICAgICAgIC8vIGdldFNhbmRib3gsIHRoaXMgd2lsbCByZXR1cm4gYSBwcm9taXNlOwogICAgICAgICAgICBzYW5kYm94ID0gX3RoaXMucmVnaXN0cnkuZ2V0U2FuZGJveChkb21haW4pOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIHRoaXMgd2lsbCByZXR1cm4gdGhlIHNhbmRib3ggb3Igb25lIHByb21pc2UgdG8gZ2V0U2FuZGJveDsKICAgICAgICAgIHJldHVybiBzYW5kYm94OwogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHNhbmRib3gpIHsKICAgICAgICAgIGNvbnNvbGUuaW5mbygnNDogcmV0dXJuIHRoZSBzYW5kYm94Jywgc2FuZGJveCk7CgogICAgICAgICAgLy8gUmV0dXJuIHRoZSBzYW5kYm94IGluZGVwZW50ZWx5IGlmIGl0IHJ1bm5pbmcgaW4gdGhlIHNhbWUgc2FuZGJveCBvciBub3QKICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgMTQgaGVyZS4KICAgICAgICAgIHJldHVybiBzYW5kYm94OwogICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJzQuMTogVHJ5IHRvIHJlZ2lzdGVyIGEgbmV3IHNhbmRib3ggJywgcmVhc29uKTsKCiAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgc2FuZGJveCBpcyByZWdpc3RlZCBmb3IgdGhpcyBoeXBlcnR5IGRlc2NyaXB0b3IgdXJsOwogICAgICAgICAgLy8gTWFrZSBTdGVwcyB4eHggLS0tIHh4eAogICAgICAgICAgLy8gSW5zdGFudGlhdGUgdGhlIFNhbmRib3gKICAgICAgICAgIHZhciBzYW5kYm94ID0gX3RoaXMucnVudGltZUZhY3RvcnkuY3JlYXRlU2FuZGJveCgpOwoKICAgICAgICAgIHNhbmRib3guYWRkTGlzdGVuZXIoJyonLCBmdW5jdGlvbiAobXNnKSB7CiAgICAgICAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIHJldHVybiBzYW5kYm94OwogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHNhbmRib3gpIHsKICAgICAgICAgIGNvbnNvbGUuaW5mbygnNTogcmV0dXJuIHNhbmRib3ggYW5kIHJlZ2lzdGVyJyk7CgogICAgICAgICAgX2h5cGVydHlTYW5kYm94ID0gc2FuZGJveDsKCiAgICAgICAgICAvLyBSZWdpc3RlciBoeXBlcnR5CiAgICAgICAgICByZXR1cm4gX3RoaXMucmVnaXN0cnkucmVnaXN0ZXJIeXBlcnR5KHNhbmRib3gsIGh5cGVydHlEZXNjcmlwdG9yVVJMLCBfaHlwZXJ0eURlc2NyaXB0b3IpOwogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGh5cGVydHlVUkwpIHsKICAgICAgICAgIGNvbnNvbGUuaW5mbygnNjogSHlwZXJ0eSB1cmwsIGFmdGVyIHJlZ2lzdGVyIGh5cGVydHknLCBoeXBlcnR5VVJMKTsKCiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDE2IG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQgcmlnaHQgbm93LgogICAgICAgICAgX2h5cGVydHlVUkwgPSBoeXBlcnR5VVJMOwoKICAgICAgICAgIC8vIEV4dGVuZCBvcmlnaW5hbCBoeXBlcnR5IGNvbmZpZ3VyYXRpb247CiAgICAgICAgICB2YXIgY29uZmlndXJhdGlvbiA9IHt9OwogICAgICAgICAgaWYgKCEoMCwgX3V0aWxzLmVtcHR5T2JqZWN0KShfaHlwZXJ0eURlc2NyaXB0b3IuY29uZmlndXJhdGlvbikpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICBjb25maWd1cmF0aW9uID0gKDAsIF9hc3NpZ24yLmRlZmF1bHQpKHt9LCBKU09OLnBhcnNlKF9oeXBlcnR5RGVzY3JpcHRvci5jb25maWd1cmF0aW9uKSk7CiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICBjb25maWd1cmF0aW9uID0gX2h5cGVydHlEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb247CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucnVudGltZVVSTCA9IF90aGlzLnJ1bnRpbWVVUkw7CgogICAgICAgICAgLy8gV2Ugd2lsbCBkZXBsb3kgdGhlIGNvbXBvbmVudCAtIHN0ZXAgMTcgb2YgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktaHlwZXJ0eS5tZCByaWdodCBub3cuCiAgICAgICAgICByZXR1cm4gX2h5cGVydHlTYW5kYm94LmRlcGxveUNvbXBvbmVudChfaHlwZXJ0eVNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZSwgX2h5cGVydHlVUkwsIGNvbmZpZ3VyYXRpb24pOwogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGRlcGxveUNvbXBvbmVudFN0YXR1cykgewogICAgICAgICAgY29uc29sZS5pbmZvKCc3OiBEZXBsb3kgY29tcG9uZW50IHN0YXR1cyBmb3IgaHlwZXJ0eTogJywgZGVwbG95Q29tcG9uZW50U3RhdHVzKTsKCiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDE5IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQgcmlnaHQgbm93LgoKICAgICAgICAgIC8vIEFkZCB0aGUgbWVzc2FnZSBidXMgbGlzdGVuZXIgdG8gdGhlIGFwcFNhbmRib3ggb3IgaHlwZXJ0U2FuZGJveDsKICAgICAgICAgIF90aGlzLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoX2h5cGVydHlVUkwsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICAgICAgX2h5cGVydHlTYW5kYm94LnBvc3RNZXNzYWdlKG1zZyk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDIwIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQgcmlnaHQgbm93LgogICAgICAgICAgdmFyIGh5cGVydHkgPSB7CiAgICAgICAgICAgIHJ1bnRpbWVIeXBlcnR5VVJMOiBfaHlwZXJ0eVVSTCwKICAgICAgICAgICAgc3RhdHVzOiBkZXBsb3lDb21wb25lbnRTdGF0dXMKICAgICAgICAgIH07CgogICAgICAgICAgcmVzb2x2ZShoeXBlcnR5KTsKCiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDIxIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQgcmlnaHQgbm93LgogICAgICAgICAgY29uc29sZS5sb2coJy0tLS0tLS0tLS0tLS0tLS0tLSBFTkQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJyk7CiAgICAgICAgfSkuY2F0Y2goZXJyb3JSZWFzb24pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogRGVwbG95IFN0dWIgZnJvbSBDYXRhbG9ndWUgVVJMIG9yIGRvbWFpbiB1cmwKICAgICogQHBhcmFtICB7VVJMLlVSTH0gICAgIGRvbWFpbiAgICAgICAgICBkb21haW4KICAgICovCgogIH0sIHsKICAgIGtleTogJ2xvYWRTdHViJywKICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkU3R1Yihwcm90b3N0dWJVUkwpIHsKCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBpZiAoIXByb3Rvc3R1YlVSTCkgdGhyb3cgbmV3IEVycm9yKCdkb21haW4gcGFyYW1ldGVyIGlzIG5lZWRlZCcpOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIHZhciBkb21haW4gPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkocHJvdG9zdHViVVJMKS5kb21haW47CgogICAgICAgIGlmICghZG9tYWluKSB7CiAgICAgICAgICBkb21haW4gPSBwcm90b3N0dWJVUkw7CiAgICAgICAgfQoKICAgICAgICB2YXIgX3N0dWJTYW5kYm94ID0gdm9pZCAwOwogICAgICAgIHZhciBfc3R1YkRlc2NyaXB0b3IgPSB2b2lkIDA7CiAgICAgICAgdmFyIF9ydW50aW1lUHJvdG9TdHViVVJMID0gdm9pZCAwOwogICAgICAgIHZhciBfc3R1YlNvdXJjZVBhY2thZ2UgPSB2b2lkIDA7CgogICAgICAgIHZhciBlcnJvclJlYXNvbiA9IGZ1bmN0aW9uIGVycm9yUmVhc29uKHJlYXNvbikgewogICAgICAgICAgY29uc29sZS5lcnJvcignU29tZXRoaW5nIGZhaWxlZCBvbiB0aGUgZGVwbG95IG9mIHByb3RvY29sc3R1YjogJywgcmVhc29uKTsKICAgICAgICAgIHJlamVjdChyZWFzb24pOwogICAgICAgIH07CgogICAgICAgIC8vIERpc2NvdmVyIFByb3RvY29sIFN0dWIKICAgICAgICBjb25zb2xlLmluZm8oJy0tLS0tLS0tLS0tLS0tLS0tLS0gUHJvdG9TdHViIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuJyk7CiAgICAgICAgY29uc29sZS5pbmZvKCdEaXNjb3ZlciBvciBDcmVhdGUgYSBuZXcgUHJvdG9TdHViIGZvciBkb21haW46ICcsIGRvbWFpbik7CiAgICAgICAgX3RoaXMucmVnaXN0cnkuZGlzY292ZXJQcm90b3N0dWIoZG9tYWluKS50aGVuKGZ1bmN0aW9uIChydW50aW1lUHJvdG9TdHViVVJMKSB7CiAgICAgICAgICAvLyBJcyByZWdpc3RlZD8KICAgICAgICAgIGNvbnNvbGUuaW5mbygnMS4gUHJvdG8gU3R1YiBEaXNjb3ZlcmVkOiAnLCBydW50aW1lUHJvdG9TdHViVVJMKTsKCiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDIgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCgogICAgICAgICAgLy8gVE9ETzogQ2hlY2sgaWYgdGhlIHN0YXR1cyBpcyBzYXZlZCBpbiB0aGUgc3RhdHVzIG9mIHNhbmRib3g7CiAgICAgICAgICB2YXIgc3R1YiA9IHsKICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTDogcnVudGltZVByb3RvU3R1YlVSTCwKICAgICAgICAgICAgc3RhdHVzOiAnZGVwbG95ZWQnCiAgICAgICAgICB9OwoKICAgICAgICAgIHJlc29sdmUoc3R1Yik7CiAgICAgICAgICBjb25zb2xlLmluZm8oJy0tLS0tLS0tLS0tLS0tLS0tLS0gRU5EIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuJyk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikgewoKICAgICAgICAgIC8vIGlzIG5vdCByZWdpc3RlZD8KICAgICAgICAgIGNvbnNvbGUuaW5mbygnMS4gUHJvdG8gU3R1YiBub3QgZm91bmQ6JywgcmVhc29uKTsKCiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDMgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCgogICAgICAgICAgLy8gd2UgbmVlZCB0byBnZXQgUHJvdG9TdHViIGRlc2NyaXB0b3Igc3RlcCA0IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAogICAgICAgICAgX3RoaXMucnVudGltZUNhdGFsb2d1ZS5nZXRTdHViRGVzY3JpcHRvcihwcm90b3N0dWJVUkwpLnRoZW4oZnVuY3Rpb24gKHN0dWJEZXNjcmlwdG9yKSB7CgogICAgICAgICAgICBjb25zb2xlLmluZm8oJzIuIHJldHVybiB0aGUgUHJvdG9TdHViIGRlc2NyaXB0b3I6Jywgc3R1YkRlc2NyaXB0b3IpOwoKICAgICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCA1IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAogICAgICAgICAgICBfc3R1YkRlc2NyaXB0b3IgPSBzdHViRGVzY3JpcHRvcjsKCiAgICAgICAgICAgIHZhciBzb3VyY2VQYWNrYWdlVVJMID0gc3R1YkRlc2NyaXB0b3Iuc291cmNlUGFja2FnZVVSTDsKCiAgICAgICAgICAgIGlmIChzb3VyY2VQYWNrYWdlVVJMID09PSAnL3NvdXJjZVBhY2thZ2UnKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHN0dWJEZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2U7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gZ2V0IFByb3RvU3R1YiBTb3VyY2UgY29kZSBmcm9tIGRlc2NyaXB0b3IgLSBzdGVwIDYgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCiAgICAgICAgICAgIHJldHVybiBfdGhpcy5ydW50aW1lQ2F0YWxvZ3VlLmdldFNvdXJjZVBhY2thZ2VGcm9tVVJMKHNvdXJjZVBhY2thZ2VVUkwpOwogICAgICAgICAgfSkuY2F0Y2goZXJyb3JSZWFzb24pLnRoZW4oZnVuY3Rpb24gKHN0dWJTb3VyY2VQYWNrYWdlKSB7CiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnMy4gcmV0dXJuIHRoZSBQcm90b1N0dWIgU291cmNlIENvZGU6ICcsIHN0dWJTb3VyY2VQYWNrYWdlKTsKCiAgICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgNyBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKCiAgICAgICAgICAgIF9zdHViU291cmNlUGFja2FnZSA9IHN0dWJTb3VyY2VQYWNrYWdlOwoKICAgICAgICAgICAgLy8gVE9ETzogQ2hlY2sgb24gUEVQIChwb2xpY3kgRW5naW5lKSBpZiB3ZSBuZWVkIHRoZSBzYW5kYm94IGFuZCBjaGVjayBpZiB0aGUgU2FuZGJveCBGYWN0b3J5IGhhdmUgdGhlIGNvbnRleHQgc2FuZGJveDsKICAgICAgICAgICAgdmFyIHBvbGljeSA9IHRydWU7CiAgICAgICAgICAgIHJldHVybiBwb2xpY3k7CiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChwb2xpY3kpIHsKICAgICAgICAgICAgLy8gdGhpcyB3aWxsIHJldHVybiB0aGUgc2FuZGJveCBvciBvbmUgcHJvbWlzZSB0byBnZXRTYW5kYm94OwogICAgICAgICAgICByZXR1cm4gX3RoaXMucmVnaXN0cnkuZ2V0U2FuZGJveChkb21haW4pOwogICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoc3R1YlNhbmRib3gpIHsKCiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnNC4gaWYgdGhlIHNhbmRib3ggaXMgcmVnaXN0ZXJlZCB0aGVuIHJldHVybiB0aGUgc2FuZGJveCAnLCBzdHViU2FuZGJveCk7CgogICAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKCiAgICAgICAgICAgIF9zdHViU2FuZGJveCA9IHN0dWJTYW5kYm94OwogICAgICAgICAgICByZXR1cm4gc3R1YlNhbmRib3g7CiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnNS4gU2FuZGJveCB3YXMgbm90IGZvdW5kLCBjcmVhdGluZyBhIG5ldyBvbmUgJywgcmVhc29uKTsKCiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBzYW5kYm94IGlzIHJlZ2lzdGVkIGZvciB0aGlzIHN0dWIgZGVzY3JpcHRvciB1cmw7CiAgICAgICAgICAgIC8vIE1ha2UgU3RlcHMgeHh4IC0tLSB4eHgKICAgICAgICAgICAgLy8gSW5zdGFudGlhdGUgdGhlIFNhbmRib3gKICAgICAgICAgICAgdmFyIHNhbmRib3ggPSBfdGhpcy5ydW50aW1lRmFjdG9yeS5jcmVhdGVTYW5kYm94KCk7CiAgICAgICAgICAgIHNhbmRib3guYWRkTGlzdGVuZXIoJyonLCBmdW5jdGlvbiAobXNnKSB7CiAgICAgICAgICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIHJldHVybiBzYW5kYm94OwogICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoc2FuZGJveCkgewogICAgICAgICAgICBjb25zb2xlLmluZm8oJzYuIHJldHVybiB0aGUgc2FuZGJveCBpbnN0YW5jZSBhbmQgcmVnaXN0ZXInLCBzYW5kYm94LCAndG8gZG9tYWluICcsIGRvbWFpbik7CgogICAgICAgICAgICBfc3R1YlNhbmRib3ggPSBzYW5kYm94OwoKICAgICAgICAgICAgLy8gd2UgbmVlZCByZWdpc3RlciBzdHViIG9uIHJlZ2lzdHJ5IC0gc3RlcCB4eHggaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCiAgICAgICAgICAgIHJldHVybiBfdGhpcy5yZWdpc3RyeS5yZWdpc3RlclN0dWIoX3N0dWJTYW5kYm94LCBkb21haW4pOwogICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocnVudGltZVByb3RvU3R1YlVSTCkgewoKICAgICAgICAgICAgY29uc29sZS5pbmZvKCc3LiByZXR1cm4gdGhlIHJ1bnRpbWUgcHJvdG9zdHViIHVybDogJywgcnVudGltZVByb3RvU3R1YlVSTCk7CgogICAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKCiAgICAgICAgICAgIF9ydW50aW1lUHJvdG9TdHViVVJMID0gcnVudGltZVByb3RvU3R1YlVSTDsKCiAgICAgICAgICAgIC8vIEV4dGVuZCBvcmlnaW5hbCBoeXBlcnR5IGNvbmZpZ3VyYXRpb247CiAgICAgICAgICAgIHZhciBjb25maWd1cmF0aW9uID0ge307CiAgICAgICAgICAgIGlmICghKDAsIF91dGlscy5lbXB0eU9iamVjdCkoX3N0dWJEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb24pKSB7CiAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24gPSAoMCwgX2Fzc2lnbjIuZGVmYXVsdCkoe30sIEpTT04ucGFyc2UoX3N0dWJEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb24pKTsKICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uID0gX3N0dWJEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb247CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBjb25maWd1cmF0aW9uLnJ1bnRpbWVVUkwgPSBfdGhpcy5ydW50aW1lVVJMOwoKICAgICAgICAgICAgLy8gRGVwbG95IENvbXBvbmVudCBzdGVwIHh4eAogICAgICAgICAgICByZXR1cm4gX3N0dWJTYW5kYm94LmRlcGxveUNvbXBvbmVudChfc3R1YlNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZSwgcnVudGltZVByb3RvU3R1YlVSTCwgY29uZmlndXJhdGlvbik7CiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChkZXBsb3lDb21wb25lbnRTdGF0dXMpIHsKICAgICAgICAgICAgY29uc29sZS5pbmZvKCc4OiByZXR1cm4gZGVwbG95IGNvbXBvbmVudCBmb3Igc2FuZGJveCBzdGF0dXM6ICcsIGRlcGxveUNvbXBvbmVudFN0YXR1cyk7CgogICAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKCiAgICAgICAgICAgIC8vIEFkZCB0aGUgbWVzc2FnZSBidXMgbGlzdGVuZXIKICAgICAgICAgICAgX3RoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihfcnVudGltZVByb3RvU3R1YlVSTCwgZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgICAgIF9zdHViU2FuZGJveC5wb3N0TWVzc2FnZShtc2cpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgeHh4IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAoKICAgICAgICAgICAgLy8gTG9hZCBTdHViIGZ1bmN0aW9uIHJlc29sdmVkIHdpdGggc3VjY2VzczsKICAgICAgICAgICAgdmFyIHN0dWIgPSB7CiAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTDogX3J1bnRpbWVQcm90b1N0dWJVUkwsCiAgICAgICAgICAgICAgc3RhdHVzOiBkZXBsb3lDb21wb25lbnRTdGF0dXMKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIHJlc29sdmUoc3R1Yik7CiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnLS0tLS0tLS0tLS0tLS0tLS0tLSBFTkQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4nKTsKICAgICAgICAgIH0pLmNhdGNoKGVycm9yUmVhc29uKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIERlcGxveSBTdHViIGZyb20gQ2F0YWxvZ3VlIFVSTCBvciBkb21haW4gdXJsCiAgICAqIEBwYXJhbSAge1VSTC5VUkx9ICAgICBkb21haW4gICAgICAgICAgZG9tYWluCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdsb2FkSWRwUHJveHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWRJZHBQcm94eShpZHBQcm94eVVSTCkgewoKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGlmICghaWRwUHJveHlVUkwpIHRocm93IG5ldyBFcnJvcignVGhlIElEUCBQcm94eSBVUkwgaXMgYSBuZWVkZWQgcGFyYW1ldGVyLCBjb3VsZCBiZSBhIERPTUFJTiBvciBhIFVSTCcpOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIHZhciBkb21haW4gPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkoaWRwUHJveHlVUkwpLmRvbWFpbjsKCiAgICAgICAgaWYgKCFkb21haW4pIHsKICAgICAgICAgIGRvbWFpbiA9IGlkcFByb3h5VVJMOwogICAgICAgIH0KCiAgICAgICAgdmFyIF9wcm94eVNhbmRib3ggPSB2b2lkIDA7CiAgICAgICAgdmFyIF9wcm94eURlc2NyaXB0b3IgPSB2b2lkIDA7CiAgICAgICAgdmFyIF9ydW50aW1lSWRwUHJveHlVUkwgPSB2b2lkIDA7CiAgICAgICAgdmFyIF9wcm94eVNvdXJjZVBhY2thZ2UgPSB2b2lkIDA7CgogICAgICAgIHZhciBlcnJvclJlYXNvbiA9IGZ1bmN0aW9uIGVycm9yUmVhc29uKHJlYXNvbikgewogICAgICAgICAgY29uc29sZS5lcnJvcignU29tZXRoaW5nIGZhaWxlZCBvbiB0aGUgZGVwbG95IG9mIElkcFByb3h5OiAnLCByZWFzb24pOwogICAgICAgICAgcmVqZWN0KHJlYXNvbik7CiAgICAgICAgfTsKCiAgICAgICAgLy8gRGlzY292ZXIgSURQUHJveHkKICAgICAgICBjb25zb2xlLmluZm8oJy0tLS0tLS0tLS0tLS0tLS0tLS0gSURQIFByb3h5IERlcGxveSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbicpOwogICAgICAgIGNvbnNvbGUuaW5mbygnRGlzY292ZXIgb3IgQ3JlYXRlIGEgbmV3IElkcFByb3h5IGZvciBkb21haW4vVVJMOiAnLCBkb21haW4pOwogICAgICAgIHJldHVybiBfdGhpcy5yZWdpc3RyeS5kaXNjb3ZlcklkcFByb3h5KGRvbWFpbikudGhlbihmdW5jdGlvbiAocnVudGltZUlkcFByb3h5VVJMKSB7CiAgICAgICAgICAvLyBJcyByZWdpc3RlZD8KICAgICAgICAgIGNvbnNvbGUuaW5mbygnMS4gSURQUHJveHkgRGlzY292ZXJlZDogJywgcnVudGltZUlkcFByb3h5VVJMKTsKCiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDIgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCgogICAgICAgICAgLy8gVE9ETzogQ2hlY2sgaWYgdGhlIHN0YXR1cyBpcyBzYXZlZCBpbiB0aGUgc3RhdHVzIG9mIHNhbmRib3g7CiAgICAgICAgICB2YXIgaWRwUHJveHkgPSB7CiAgICAgICAgICAgIHJ1bnRpbWVJZHBQcm94eVVSTDogcnVudGltZUlkcFByb3h5VVJMLAogICAgICAgICAgICBzdGF0dXM6ICdkZXBsb3llZCcKICAgICAgICAgIH07CgogICAgICAgICAgcmVzb2x2ZShpZHBQcm94eSk7CiAgICAgICAgICBjb25zb2xlLmluZm8oJy0tLS0tLS0tLS0tLS0tLS0tLS0gRU5EIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuJyk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikgewoKICAgICAgICAgIC8vIGlzIG5vdCByZWdpc3RlZD8KICAgICAgICAgIGNvbnNvbGUuaW5mbygnMS4gSWRwUHJveHkgbm90IGZvdW5kOicsIHJlYXNvbik7CgogICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCAzIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAoKICAgICAgICAgIC8vIHdlIG5lZWQgdG8gZ2V0IFByb3RvU3R1YiBkZXNjcmlwdG9yIHN0ZXAgNCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKICAgICAgICAgIF90aGlzLnJ1bnRpbWVDYXRhbG9ndWUuZ2V0SWRwUHJveHlEZXNjcmlwdG9yKGlkcFByb3h5VVJMKS50aGVuKGZ1bmN0aW9uIChwcm94eURlc2NyaXB0b3IpIHsKCiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnMi4gUmV0dXJuIHRoZSBJRFBQcm94eSBkZXNjcmlwdG9yOicsIHByb3h5RGVzY3JpcHRvcik7CgogICAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDUgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCiAgICAgICAgICAgIF9wcm94eURlc2NyaXB0b3IgPSBwcm94eURlc2NyaXB0b3I7CgogICAgICAgICAgICB2YXIgc291cmNlUGFja2FnZVVSTCA9IHByb3h5RGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlVVJMOwoKICAgICAgICAgICAgaWYgKHNvdXJjZVBhY2thZ2VVUkwgPT09ICcvc291cmNlUGFja2FnZScpIHsKICAgICAgICAgICAgICByZXR1cm4gcHJveHlEZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2U7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gZ2V0IFByb3RvU3R1YiBTb3VyY2UgY29kZSBmcm9tIGRlc2NyaXB0b3IgLSBzdGVwIDYgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCiAgICAgICAgICAgIHJldHVybiBfdGhpcy5ydW50aW1lQ2F0YWxvZ3VlLmdldFNvdXJjZVBhY2thZ2VGcm9tVVJMKHNvdXJjZVBhY2thZ2VVUkwpOwogICAgICAgICAgfSkuY2F0Y2goZXJyb3JSZWFzb24pLnRoZW4oZnVuY3Rpb24gKHNvdXJjZVBhY2thZ2UpIHsKICAgICAgICAgICAgY29uc29sZS5pbmZvKCczLiByZXR1cm4gdGhlIElEUFByb3h5IHNvdXJjZSBwYWNrYWdlOiAnLCBzb3VyY2VQYWNrYWdlKTsKCiAgICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgNyBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKCiAgICAgICAgICAgIF9wcm94eVNvdXJjZVBhY2thZ2UgPSBzb3VyY2VQYWNrYWdlOwoKICAgICAgICAgICAgLy8gVE9ETzogQ2hlY2sgb24gUEVQIChwb2xpY3kgRW5naW5lKSBpZiB3ZSBuZWVkIHRoZSBzYW5kYm94IGFuZCBjaGVjayBpZiB0aGUgU2FuZGJveCBGYWN0b3J5IGhhdmUgdGhlIGNvbnRleHQgc2FuZGJveDsKICAgICAgICAgICAgdmFyIHBvbGljeSA9IHRydWU7CiAgICAgICAgICAgIHJldHVybiBwb2xpY3k7CiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChwb2xpY3kpIHsKICAgICAgICAgICAgLy8gdGhpcyB3aWxsIHJldHVybiB0aGUgc2FuZGJveCBvciBvbmUgcHJvbWlzZSB0byBnZXRTYW5kYm94OwogICAgICAgICAgICByZXR1cm4gX3RoaXMucmVnaXN0cnkuZ2V0U2FuZGJveChkb21haW4pOwogICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocHJveHlTYW5kYm94KSB7CgogICAgICAgICAgICBjb25zb2xlLmluZm8oJzQuIGlmIHRoZSBzYW5kYm94IGlzIHJlZ2lzdGVyZWQgdGhlbiByZXR1cm4gdGhlIHNhbmRib3gnLCBwcm94eVNhbmRib3gpOwoKICAgICAgICAgICAgX3Byb3h5U2FuZGJveCA9IHByb3h5U2FuZGJveDsKICAgICAgICAgICAgcmV0dXJuIHByb3h5U2FuZGJveDsKICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgICAgY29uc29sZS5pbmZvKCc1LiBTYW5kYm94IHdhcyBub3QgZm91bmQsIGNyZWF0aW5nIGEgbmV3IG9uZScsIHJlYXNvbik7CgogICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgc2FuZGJveCBpcyByZWdpc3RlZCBmb3IgdGhpcyBwcm94eSBkZXNjcmlwdG9yIHVybDsKICAgICAgICAgICAgLy8gTWFrZSBTdGVwcyB4eHggLS0tIHh4eAogICAgICAgICAgICAvLyBJbnN0YW50aWF0ZSB0aGUgU2FuZGJveAogICAgICAgICAgICB2YXIgc2FuZGJveCA9IF90aGlzLnJ1bnRpbWVGYWN0b3J5LmNyZWF0ZVNhbmRib3goKTsKICAgICAgICAgICAgc2FuZGJveC5hZGRMaXN0ZW5lcignKicsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICAgICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgcmV0dXJuIHNhbmRib3g7CiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChzYW5kYm94KSB7CiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnNi4gcmV0dXJuIHRoZSBzYW5kYm94IGluc3RhbmNlIGFuZCByZWdpc3RlcicsIHNhbmRib3gsICd0byBkb21haW4gJywgZG9tYWluKTsKCiAgICAgICAgICAgIF9wcm94eVNhbmRib3ggPSBzYW5kYm94OwoKICAgICAgICAgICAgLy8gd2UgbmVlZCByZWdpc3RlciBzdHViIG9uIHJlZ2lzdHJ5IC0gc3RlcCB4eHggaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCiAgICAgICAgICAgIHJldHVybiBfdGhpcy5yZWdpc3RyeS5yZWdpc3RlcklkcFByb3h5KHNhbmRib3gsIGRvbWFpbik7CiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChydW50aW1lSWRwUHJveHlVUkwpIHsKCiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnNy4gUmV0dXJuIHRoZSBydW50aW1lIElkcCBQcm94eSBVUkw6ICcsIHJ1bnRpbWVJZHBQcm94eVVSTCk7CgogICAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKCiAgICAgICAgICAgIF9ydW50aW1lSWRwUHJveHlVUkwgPSBydW50aW1lSWRwUHJveHlVUkw7CgogICAgICAgICAgICAvLyBFeHRlbmQgb3JpZ2luYWwgaHlwZXJ0eSBjb25maWd1cmF0aW9uOwogICAgICAgICAgICB2YXIgY29uZmlndXJhdGlvbiA9IHt9OwogICAgICAgICAgICBpZiAoISgwLCBfdXRpbHMuZW1wdHlPYmplY3QpKF9wcm94eURlc2NyaXB0b3IuY29uZmlndXJhdGlvbikpIHsKICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiA9ICgwLCBfYXNzaWduMi5kZWZhdWx0KSh7fSwgSlNPTi5wYXJzZShfcHJveHlEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb24pKTsKICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uID0gX3Byb3h5RGVzY3JpcHRvci5jb25maWd1cmF0aW9uOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBjb25maWd1cmF0aW9uLnJ1bnRpbWVVUkwgPSBfdGhpcy5ydW50aW1lVVJMOwoKICAgICAgICAgICAgLy8gRGVwbG95IENvbXBvbmVudCBzdGVwIHh4eAogICAgICAgICAgICByZXR1cm4gX3Byb3h5U2FuZGJveC5kZXBsb3lDb21wb25lbnQoX3Byb3h5U291cmNlUGFja2FnZS5zb3VyY2VDb2RlLCBydW50aW1lSWRwUHJveHlVUkwsIGNvbmZpZ3VyYXRpb24pOwogICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoZGVwbG95Q29tcG9uZW50U3RhdHVzKSB7CiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnODogcmV0dXJuIGRlcGxveSBjb21wb25lbnQgZm9yIHNhbmRib3ggc3RhdHVzOiAnLCBkZXBsb3lDb21wb25lbnRTdGF0dXMpOwoKICAgICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCB4eHggaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCgogICAgICAgICAgICAvLyBBZGQgdGhlIG1lc3NhZ2UgYnVzIGxpc3RlbmVyCiAgICAgICAgICAgIF90aGlzLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoX3J1bnRpbWVJZHBQcm94eVVSTCwgZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgICAgIF9wcm94eVNhbmRib3gucG9zdE1lc3NhZ2UobXNnKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKCiAgICAgICAgICAgIC8vIExvYWQgU3R1YiBmdW5jdGlvbiByZXNvbHZlZCB3aXRoIHN1Y2Nlc3M7CiAgICAgICAgICAgIHZhciBpZHBQcm94eSA9IHsKICAgICAgICAgICAgICBydW50aW1lSWRwUHJveHlVUkw6IF9ydW50aW1lSWRwUHJveHlVUkwsCiAgICAgICAgICAgICAgc3RhdHVzOiBkZXBsb3lDb21wb25lbnRTdGF0dXMKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIHJlc29sdmUoaWRwUHJveHkpOwogICAgICAgICAgICBjb25zb2xlLmluZm8oJy0tLS0tLS0tLS0tLS0tLS0tLS0gRU5EIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuJyk7CiAgICAgICAgICB9KS5jYXRjaChlcnJvclJlYXNvbik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgICogVXNlZCB0byBjbG9zZSBhbGwgdGhlIHJ1bnRpbWU7IFVucmVnaXN0ZXIgYWxsIGh5cGVydGllczsKICAgICAqIEByZXR1cm4ge1Byb21pc2U8Qm9vbGVhbj59IHJlc3VsdCBvZiB0aGUgY2xvc2UgbWV0aG9kLCB3aXRoIHRydWUgb3IgZmFsc2UgdG8gdGhlIG9wZXJhdGlvbiBzdWNjZXNzOwogICAgICovCgogIH0sIHsKICAgIGtleTogJ2Nsb3NlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZSgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGNvbnNvbGUuaW5mbygnVW5yZWdpc3RlciBhbGwgaHlwZXJ0aWVzJyk7CiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBfdGhpcy5yZWdpc3RyeS51bnJlZ2lzdGVyQWxsSHlwZXJ0aWVzKCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICBjb25zb2xlLmluZm8oJ0FsbCB0aGUgaHlwZXJ0aWVzIGFyZSB1bnJlZ2lzdGVkIHdpdGggU3VjY2VzczonLCByZXN1bHQpOwogICAgICAgICAgcmVzb2x2ZSh0cnVlKTsKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gdW5yZWdpc3RlciB0aGUgaHlwZXJ0aWVzJywgcmVhc29uKTsKICAgICAgICAgIHJlamVjdChmYWxzZSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgKiBVc2VkIHRvIGNoZWNrIGZvciB1cGRhdGVzIGFib3V0IGNvbXBvbmVudHMgaGFuZGxlZCBpbiB0aGUgQ2F0YWxvZ3VlIGluY2x1ZGluZyBwcm90b2NvbCBzdHVicyBhbmQgSHlwZXJ0aWVzLiBjaGVjayByZWxhdGlvbnNoaXAgd2l0aCBsaWZlY3ljbGUgbWFuYWdlbWVudCBwcm92aWRlZCBieSBTZXJ2aWNlIFdvcmtlcnMKICAgICogQHBhcmFtICB7Q2F0YWxvZ3VlVVJMfSAgICAgICB1cmwgdXJsCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdjaGVja0ZvclVwZGF0ZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tGb3JVcGRhdGUodXJsKSB7CiAgICAgIC8vIEJvZHkuLi4KICAgIH0KICB9XSk7CiAgcmV0dXJuIFJ1bnRpbWVVQTsKfSgpOwovLyBpbXBvcnQgR3JhcGhDb25uZWN0b3IgZnJvbSAnLi4vZ3JhcGhjb25uZWN0b3IvR3JhcGhDb25uZWN0b3InOwoKLy9NYWluIGRlcGVuZGVjaWVzCgoKZXhwb3J0cy5kZWZhdWx0ID0gUnVudGltZVVBOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuLi9idXMvTWVzc2FnZUJ1cyI6NDE1LCIuLi9pZGVudGl0eS9JZGVudGl0eU1vZHVsZSI6NDIwLCIuLi9wb2xpY3kvUG9saWN5RW5naW5lIjo0MjYsIi4uL3BvbGljeS9jb250ZXh0L1J1bnRpbWVDb3JlQ3R4Ijo0MzMsIi4uL3JlZ2lzdHJ5L1JlZ2lzdHJ5Ijo0MzcsIi4uL3N5bmNoZXIvU3luY2hlck1hbmFnZXIiOjQ0NCwiLi4vdXRpbHMvdXRpbHMiOjQ0NywiYmFiZWwtcG9seWZpbGwiOjEsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvYXNzaWduIjozLCJiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZSI6MTAsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTMsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTR9XSw0NDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX3Byb21pc2UgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZScpOwoKdmFyIF9wcm9taXNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb21pc2UpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoqCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBCiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQKKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wKKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVgoqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcKKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUKKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTgoqCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAoqCiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKKgoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KKiovCgp2YXIgT2JqZWN0QWxsb2NhdGlvbiA9IGZ1bmN0aW9uICgpIHsKICAvKiBwcml2YXRlCiAgX3VybDogVVJMCiAgX2J1czogTWluaUJ1cwogICovCgogIC8qKgogICAqIENyZWF0ZSBhbiBPYmplY3QgQWxsb2NhdGlvbgogICAqIEBwYXJhbSAge1VSTC5VUkx9ICAgICAgdXJsIC0gdXJsIGZyb20gd2hvIGlzIHNlbmRpbmcgdGhlIG1lc3NhZ2UKICAgKiBAcGFyYW0gIHtNaW5pQnVzfSAgICAgIGJ1cyAtIE1pbmlCdXMgdXNlZCBmb3IgYWRkcmVzcyBhbGxvY2F0aW9uCiAgICovCgogIGZ1bmN0aW9uIE9iamVjdEFsbG9jYXRpb24odXJsLCBidXMpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIE9iamVjdEFsbG9jYXRpb24pOwoKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgX3RoaXMuX3VybCA9IHVybDsKICAgIF90aGlzLl9idXMgPSBidXM7CiAgfQoKICAvKioKICAgKiBnZXQgdGhlIFVSTCB2YWx1ZQogICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHVybCB2YWx1ZTsKICAgKi8KCgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKE9iamVjdEFsbG9jYXRpb24sIFt7CiAgICBrZXk6ICdjcmVhdGUnLAoKCiAgICAvKioKICAgICAqIEFzayBmb3IgY3JlYXRpb24gb2YgYSBudW1iZXIgb2YgT2JqZWN0IGFkZHJlc3NlcywgdG8gdGhlIGRvbWFpbiBtZXNzYWdlIG5vZGUuCiAgICAgKiBAcGFyYW0gIHtEb21haW59IGRvbWFpbiAtIERvbWFpbiBvZiB0aGUgbWVzc2FnZSBub2RlLgogICAgICogQHBhcmFtICB7bnVtYmVyfSBudW1iZXIgLSBOdW1iZXIgb2YgYWRkcmVzc2VzIHRvIHJlcXVlc3QKICAgICAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdFVSTD59ICBBIGxpc3Qgb2YgT2JqZWN0VVJMJ3MKICAgICAqLwogICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZShkb21haW4sIHNjaGVtZSwgbnVtYmVyKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gbXNnLW5vZGUgT2JqZWN0QWxsb2NhdGlvbk1hbmFnZXIgY29tcG9uZW50CiAgICAgIHZhciBtc2cgPSB7CiAgICAgICAgdHlwZTogJ2NyZWF0ZScsIGZyb206IF90aGlzLl91cmwsIHRvOiAnZG9tYWluOi8vbXNnLW5vZGUuJyArIGRvbWFpbiArICcvb2JqZWN0LWFkZHJlc3MtYWxsb2NhdGlvbicsCiAgICAgICAgYm9keTogeyBzY2hlbWU6IHNjaGVtZSwgdmFsdWU6IHsgbnVtYmVyOiBudW1iZXIgfSB9CiAgICAgIH07CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG1zZywgZnVuY3Rpb24gKHJlcGx5KSB7CiAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHsKICAgICAgICAgICAgcmVzb2x2ZShyZXBseS5ib2R5LnZhbHVlLmFsbG9jYXRlZCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZWplY3QocmVwbHkuYm9keS5kZXNjKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAndXJsJywKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fdXJsOwogICAgfQogIH1dKTsKICByZXR1cm4gT2JqZWN0QWxsb2NhdGlvbjsKfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gT2JqZWN0QWxsb2NhdGlvbjsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UiOjEwLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjEzLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE0fV0sNDQxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7Cgp2YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvdXRpbHMnKTsKCnZhciBfU3Vic2NyaXB0aW9uID0gcmVxdWlyZSgnLi9TdWJzY3JpcHRpb24nKTsKCnZhciBfU3Vic2NyaXB0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N1YnNjcmlwdGlvbik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKdmFyIE9ic2VydmVyT2JqZWN0ID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIE9ic2VydmVyT2JqZWN0KHBhcmVudCwgdXJsLCBjaGlsZHJlbnMpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIE9ic2VydmVyT2JqZWN0KTsKCiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIF90aGlzLl9wYXJlbnQgPSBwYXJlbnQ7CiAgICBfdGhpcy5fdXJsID0gdXJsOwogICAgX3RoaXMuX2NoaWxkcmVucyA9IGNoaWxkcmVuczsKCiAgICBfdGhpcy5fYnVzID0gcGFyZW50Ll9idXM7CiAgICBfdGhpcy5fc3Vic2NyaXB0aW9ucyA9IHt9OwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoT2JzZXJ2ZXJPYmplY3QsIFt7CiAgICBrZXk6ICdhZGRTdWJzY3JpcHRpb24nLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFN1YnNjcmlwdGlvbihoeXBlcnR5KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBfdGhpcy5fc3Vic2NyaXB0aW9uc1toeXBlcnR5XSA9IG5ldyBfU3Vic2NyaXB0aW9uMi5kZWZhdWx0KF90aGlzLl9idXMsIGh5cGVydHksIF90aGlzLl91cmwsIF90aGlzLl9jaGlsZHJlbnMsIGZhbHNlKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdyZW1vdmVTdWJzY3JpcHRpb24nLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZVN1YnNjcmlwdGlvbihoeXBlcnR5KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgZG9tYWluID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKGh5cGVydHkpLmRvbWFpbjsKICAgICAgdmFyIG9ialVSTFN1YnNjcmlwdGlvbiA9IF90aGlzLl91cmwgKyAnL3N1YnNjcmlwdGlvbic7CgogICAgICB2YXIgc3Vic2NyaXB0aW9uID0gX3RoaXMuX3N1YnNjcmlwdGlvbnNbaHlwZXJ0eV07CiAgICAgIGlmIChzdWJzY3JpcHRpb24pIHsKICAgICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gcmVtb3RlIFJlcG9ydGVyT2JqZWN0IC0+IF9vblJlbW90ZVVuU3Vic2NyaWJlCiAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7CiAgICAgICAgICB0eXBlOiAndW5zdWJzY3JpYmUnLCBmcm9tOiBfdGhpcy5fcGFyZW50Ll91cmwsIHRvOiBvYmpVUkxTdWJzY3JpcHRpb24sCiAgICAgICAgICBib2R5OiB7IHJlc291cmNlOiBfdGhpcy5fdXJsIH0KICAgICAgICB9KTsKCiAgICAgICAgLy9UT0RPOiBzaG91bGQgSSB3YWl0IGZvciByZXNwb25zZSBiZWZvcmUgdW5zdWJzY3JpYmUgb24gbXNnLW5vZGUKICAgICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gbXNnLW5vZGUgU3Vic2NyaXB0aW9uTWFuYWdlciBjb21wb25lbnQKICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHsKICAgICAgICAgIHR5cGU6ICd1bnN1YnNjcmliZScsIGZyb206IF90aGlzLl9wYXJlbnQuX3VybCwgdG86ICdkb21haW46Ly9tc2ctbm9kZS4nICsgZG9tYWluICsgJy9zbScsCiAgICAgICAgICBib2R5OiB7IHJlc291cmNlOiBfdGhpcy5fdXJsLCBjaGlsZHJlblJlc291cmNlczogX3RoaXMuX2NoaWxkcmVucyB9CiAgICAgICAgfSk7CgogICAgICAgIHN1YnNjcmlwdGlvbi5fcmVsZWFzZUxpc3RlbmVycygpOwogICAgICAgIGRlbGV0ZSBfdGhpcy5fc3Vic2NyaXB0aW9uc1toeXBlcnR5XTsKICAgICAgfQogICAgfQogIH1dKTsKICByZXR1cm4gT2JzZXJ2ZXJPYmplY3Q7Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IE9ic2VydmVyT2JqZWN0Owptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuLi91dGlscy91dGlscyI6NDQ3LCIuL1N1YnNjcmlwdGlvbiI6NDQzLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjEzLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE0fV0sNDQyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9wcm9taXNlID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UnKTsKCnZhciBfcHJvbWlzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9taXNlKTsKCnZhciBfa2V5cyA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5cycpOwoKdmFyIF9rZXlzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2tleXMpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7Cgp2YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvdXRpbHMnKTsKCnZhciBfU3Vic2NyaXB0aW9uID0gcmVxdWlyZSgnLi9TdWJzY3JpcHRpb24nKTsKCnZhciBfU3Vic2NyaXB0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N1YnNjcmlwdGlvbik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKdmFyIFJlcG9ydGVyT2JqZWN0ID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFJlcG9ydGVyT2JqZWN0KHBhcmVudCwgb3duZXIsIHVybCkgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgUmVwb3J0ZXJPYmplY3QpOwoKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgX3RoaXMuX3BhcmVudCA9IHBhcmVudDsKICAgIF90aGlzLl9vd25lciA9IG93bmVyOwogICAgX3RoaXMuX3VybCA9IHVybDsKCiAgICBfdGhpcy5fYnVzID0gcGFyZW50Ll9idXM7CgogICAgX3RoaXMuX2RvbWFpbiA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShvd25lcikuZG9tYWluOwogICAgX3RoaXMuX29ialN1YnNjcmlwdG9yVVJMID0gX3RoaXMuX3VybCArICcvc3Vic2NyaXB0aW9uJzsKCiAgICBfdGhpcy5fc3Vic2NyaXB0aW9ucyA9IHt9OwogICAgX3RoaXMuX2NoaWxkcmVucyA9IFtdOwogICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzID0gW107CgogICAgX3RoaXMuX2ZvcndhcmRzID0ge307CgogICAgX3RoaXMuX2FsbG9jYXRlTGlzdGVuZXJzKCk7CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShSZXBvcnRlck9iamVjdCwgW3sKICAgIGtleTogJ19hbGxvY2F0ZUxpc3RlbmVycycsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2FsbG9jYXRlTGlzdGVuZXJzKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgLy9hZGQgc3Vic2NyaXB0aW9uIGxpc3RlbmVyLi4uCiAgICAgIF90aGlzLl9zdWJzY3JpcHRpb25MaXN0ZW5lciA9IF90aGlzLl9idXMuYWRkTGlzdGVuZXIoX3RoaXMuX29ialN1YnNjcmlwdG9yVVJMLCBmdW5jdGlvbiAobXNnKSB7CiAgICAgICAgY29uc29sZS5sb2coX3RoaXMuX29ialN1YnNjcmlwdG9yVVJMICsgJy1SQ1Y6ICcsIG1zZyk7CiAgICAgICAgc3dpdGNoIChtc2cudHlwZSkgewogICAgICAgICAgY2FzZSAnc3Vic2NyaWJlJzoKICAgICAgICAgICAgX3RoaXMuX29uUmVtb3RlU3Vic2NyaWJlKG1zZyk7YnJlYWs7CiAgICAgICAgICBjYXNlICd1bnN1YnNjcmliZSc6CiAgICAgICAgICAgIF90aGlzLl9vblJlbW90ZVVuU3Vic2NyaWJlKG1zZyk7YnJlYWs7CiAgICAgICAgICBjYXNlICdyZXNwb25zZSc6CiAgICAgICAgICAgIF90aGlzLl9vblJlbW90ZVJlc3BvbnNlKG1zZyk7YnJlYWs7CiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIHZhciBjaGFuZ2VVUkwgPSBfdGhpcy5fdXJsICsgJy9jaGFuZ2VzJzsKICAgICAgX3RoaXMuX2NoYW5nZUxpc3RlbmVyID0gX3RoaXMuX2J1cy5hZGRMaXN0ZW5lcihjaGFuZ2VVUkwsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICAvL1RPRE86IHdoYXQgdG9kbyBoZXJlPyBTYXZlIGNoYW5nZXM/CiAgICAgICAgY29uc29sZS5sb2coJ1N5bmNoZXJNYW5hZ2VyLScgKyBjaGFuZ2VVUkwgKyAnLVJDVjogJywgbXNnKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX3JlbGVhc2VMaXN0ZW5lcnMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWxlYXNlTGlzdGVuZXJzKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgX3RoaXMuX3N1YnNjcmlwdGlvbkxpc3RlbmVyLnJlbW92ZSgpOwoKICAgICAgX3RoaXMuX2NoYW5nZUxpc3RlbmVyLnJlbW92ZSgpOwoKICAgICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGNsKSB7CiAgICAgICAgY2wucmVtb3ZlKCk7CiAgICAgIH0pOwoKICAgICAgKDAsIF9rZXlzMi5kZWZhdWx0KShfdGhpcy5fZm9yd2FyZHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIF90aGlzLmZvcndhcmRVblN1YnNjcmliZShrZXkpOwogICAgICB9KTsKCiAgICAgIC8vcmVtb3ZlIGFsbCBzdWJzY3JpcHRpb25zCiAgICAgICgwLCBfa2V5czIuZGVmYXVsdCkoX3RoaXMuX3N1YnNjcmlwdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIF90aGlzLl9zdWJzY3JpcHRpb25zW2tleV0uX3JlbGVhc2VMaXN0ZW5lcnMoKTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZWdpc3RlciBhIGxpc3RlbmVyIGluIHRoZSBtc2ctbm9kZSBhbmQgaW4gdGhlIGxvY2FsIE1lc3NhZ2VCdXMsIHNvIHRoYXQgbWVzc2FnZXMgb24gdGhpcyBhZGRyZXNzIGFyZSBmb3J3YXJkZWQgdG8gdGhlIHJlcG9ydGVyIG9iamVjdAogICAgICogQHBhcmFtICB7c3RyaW5nfSBhZGRyZXNzIC0gVVJMIHRvIHJlZ2lzdGVyIHRoZSBsaXN0ZW5lcnMKICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJldHVybiBQcm9taXNlIE9LIG9yIGVycm9yCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAnZm9yd2FyZFN1YnNjcmliZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZm9yd2FyZFN1YnNjcmliZShhZGRyZXNzZXMpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCB0byB0aGUgbXNnLW5vZGUgU3Vic2NyaXB0aW9uTWFuYWdlciBjb21wb25lbnQKICAgICAgdmFyIG5vZGVTdWJzY3JpYmVNc2cgPSB7CiAgICAgICAgdHlwZTogJ3N1YnNjcmliZScsIGZyb206IF90aGlzLl9wYXJlbnQuX3VybCwgdG86ICdkb21haW46Ly9tc2ctbm9kZS4nICsgX3RoaXMuX2RvbWFpbiArICcvc20nLAogICAgICAgIGJvZHk6IHsgc3Vic2NyaWJlOiBhZGRyZXNzZXMsIHNvdXJjZTogX3RoaXMuX293bmVyIH0KICAgICAgfTsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uobm9kZVN1YnNjcmliZU1zZywgZnVuY3Rpb24gKHJlcGx5KSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnZm9yd2FyZC1zdWJzY3JpYmUtcmVzcG9uc2UocmVwb3J0ZXIpOiAnLCByZXBseSk7CiAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHsKICAgICAgICAgICAgdmFyIG5ld0ZvcndhcmQgPSBfdGhpcy5fYnVzLmFkZEZvcndhcmQoX3RoaXMuX3VybCwgX3RoaXMuX293bmVyKTsKICAgICAgICAgICAgX3RoaXMuX2ZvcndhcmRzW2FkZHJlc3Nlc1swXV0gPSBuZXdGb3J3YXJkOwogICAgICAgICAgICByZXNvbHZlKCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZWplY3QoJ0Vycm9yIG9uIG1zZy1ub2RlIHN1YnNjcmlwdGlvbjogJyArIHJlcGx5LmJvZHkuZGVzYyk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgICogVW5SZWdpc3RlciBhIGxpc3RlbmVyIGluIHRoZSBtc2ctbm9kZSBhbmQgaW4gdGhlIGxvY2FsIE1lc3NhZ2VCdXMsIHNvIHRoYXQgbWVzc2FnZXMgb24gdGhpcyBhZGRyZXNzIGFyZSByZW1vdmVkIGZyb20gZm9yd2FyZAogICAgICogQHBhcmFtICB7c3RyaW5nfSBhZGRyZXNzIC0gVVJMIHRvIHVuLXJlZ2lzdGVyIHRoZSBsaXN0ZW5lcnMKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdmb3J3YXJkVW5TdWJzY3JpYmUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZvcndhcmRVblN1YnNjcmliZShhZGRyZXNzKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBfdGhpcy5fZm9yd2FyZHNbYWRkcmVzc10ucmVtb3ZlKCk7CiAgICAgIGRlbGV0ZSBfdGhpcy5fZm9yd2FyZHNbYWRkcmVzc107CgogICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gdGhlIG1zZy1ub2RlIFN1YnNjcmlwdGlvbk1hbmFnZXIgY29tcG9uZW50CiAgICAgIHZhciBub2RlVW5TdWJzY3JpYmVNc2cgPSB7CiAgICAgICAgdHlwZTogJ3Vuc3Vic2NyaWJlJywgZnJvbTogX3RoaXMuX3BhcmVudC5fdXJsLCB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyBfdGhpcy5fZG9tYWluICsgJy9zbScsCiAgICAgICAgYm9keTogeyBzdWJzY3JpYmU6IFthZGRyZXNzXSwgc291cmNlOiBfdGhpcy5fb3duZXIgfQogICAgICB9OwoKICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShub2RlVW5TdWJzY3JpYmVNc2cpOwogICAgfQoKICAgIC8qKgogICAgICogUmVnaXN0ZXIgbGlzdGVuZXJzIGZvciBhIGxpc3Qgb2YgY2hpbGRyZW5zLiBQdWJsaWMgY2hhbm5lbHMgdXNlZCB0byB0cmFuc21pdCBtZXNzYWdlcy4KICAgICAqIEBwYXJhbSAge3N0cmluZ1tdfSBjaGlsZHJlbnMgLSBjaGFubmVscyB0byByZWdpc3RlcgogICAgICogQHJldHVybiB7UHJvbWlzZX0gUmV0dXJuIFByb21pc2UgT0sgb3IgZXJyb3IKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdhZGRDaGlsZHJlbnMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZENoaWxkcmVucyhjaGlsZHJlbnMpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIGlmIChjaGlsZHJlbnMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICByZXNvbHZlKCk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICB2YXIgY2hpbGRCYXNlVVJMID0gX3RoaXMuX3VybCArICcvY2hpbGRyZW4vJzsKICAgICAgICBfdGhpcy5fY2hpbGRyZW5zLnB1c2goY2hpbGRyZW5zKTsKCiAgICAgICAgLyoKICAgICAgICBfdGhpcy5fY2hpbGRyZW5zLmZvckVhY2goKGNoaWxkKSA9PiB7CiAgICAgICAgICBsZXQgY2hpbGRJZCA9IGNoaWxkQmFzZVVSTCArIGNoaWxkOwogICAgICAgICAgIGxldCBzZWxmRm9yd2FyZCA9IF90aGlzLl9idXMuYWRkRm9yd2FyZChjaGlsZElkLCBvd25lcik7CiAgICAgICAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMucHVzaChzZWxmRm9yd2FyZCk7CiAgICAgICAgfSk7Ki8KCiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbnMgPSBbXTsKICAgICAgICBjaGlsZHJlbnMuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHsKICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb25zLnB1c2goY2hpbGRCYXNlVVJMICsgY2hpbGQpOwogICAgICAgIH0pOwoKICAgICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gdGhlIG1zZy1ub2RlIFN1YnNjcmlwdGlvbk1hbmFnZXIgY29tcG9uZW50CiAgICAgICAgdmFyIG5vZGVTdWJzY3JpYmVNc2cgPSB7CiAgICAgICAgICB0eXBlOiAnc3Vic2NyaWJlJywgZnJvbTogX3RoaXMuX3BhcmVudC5fdXJsLCB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyBfdGhpcy5fZG9tYWluICsgJy9zbScsCiAgICAgICAgICBib2R5OiB7IHN1YnNjcmliZTogc3Vic2NyaXB0aW9ucywgc291cmNlOiBfdGhpcy5fb3duZXIgfQogICAgICAgIH07CgogICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uobm9kZVN1YnNjcmliZU1zZywgZnVuY3Rpb24gKHJlcGx5KSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnbm9kZS1zdWJzY3JpYmUtcmVzcG9uc2UocmVwb3J0ZXIpOiAnLCByZXBseSk7CiAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHsKCiAgICAgICAgICAgIC8vYWRkIGNoaWxkcmVuIGxpc3RlbmVycyBvbiBsb2NhbCAuLi4KICAgICAgICAgICAgc3Vic2NyaXB0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZFVSTCkgewogICAgICAgICAgICAgIHZhciBjaGlsZExpc3RlbmVyID0gX3RoaXMuX2J1cy5hZGRMaXN0ZW5lcihjaGlsZFVSTCwgZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgICAgICAgLy9UT0RPOiB3aGF0IHRvZG8gaGVyZT8gU2F2ZSBjaGlsZHJlbnM/CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnU3luY2hlck1hbmFnZXItJyArIGNoaWxkVVJMICsgJy1SQ1Y6ICcsIG1zZyk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzLnB1c2goY2hpbGRMaXN0ZW5lcik7CgogICAgICAgICAgICAgIHZhciBzZWxmRm9yd2FyZCA9IF90aGlzLl9idXMuYWRkRm9yd2FyZChjaGlsZFVSTCwgX3RoaXMuX293bmVyKTsKICAgICAgICAgICAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMucHVzaChzZWxmRm9yd2FyZCk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgcmVzb2x2ZSgpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVqZWN0KCdFcnJvciBvbiBtc2ctbm9kZSBzdWJzY3JpcHRpb246ICcgKyByZXBseS5ib2R5LmRlc2MpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkZWxldGUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9kZWxldGUoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBkb21haW4gPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkoX3RoaXMuX293bmVyKS5kb21haW47CgogICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgZGlyZWN0bHkgdG8gYWxsIHN1YnNjcmliZXJzIG9mIHRoZSByZXBvcnRlcgogICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHsKICAgICAgICB0eXBlOiAnZGVsZXRlJywgZnJvbTogX3RoaXMuX29ialN1YnNjcmlwdG9yVVJMLCB0bzogX3RoaXMuX3VybCArICcvY2hhbmdlcycKICAgICAgfSk7CgogICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gdGhlIG1zZy1ub2RlIE9iamVjdEFsbG9jYXRpb25NYW5hZ2VyIGNvbXBvbmVudAogICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHsKICAgICAgICB0eXBlOiAnZGVsZXRlJywgZnJvbTogX3RoaXMuX3BhcmVudC5fdXJsLCB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyBkb21haW4gKyAnL29iamVjdC1hZGRyZXNzLWFsbG9jYXRpb24nLAogICAgICAgIGJvZHk6IHsgcmVzb3VyY2U6IF90aGlzLl91cmwsIGNoaWxkcmVuUmVzb3VyY2VzOiBfdGhpcy5fY2hpbGRyZW5zIH0KICAgICAgfSk7CgogICAgICBfdGhpcy5fcmVsZWFzZUxpc3RlbmVycygpOwogICAgICBkZWxldGUgX3RoaXMuX3BhcmVudC5fcmVwb3J0ZXJzW190aGlzLl91cmxdOwogICAgfQogIH0sIHsKICAgIGtleTogJ19vblJlbW90ZVJlc3BvbnNlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfb25SZW1vdGVSZXNwb25zZShtc2cpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UoewogICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IF90aGlzLl91cmwsCiAgICAgICAgYm9keTogeyBjb2RlOiBtc2cuYm9keS5jb2RlLCBpZGVudGl0eTogbXNnLmJvZHkuaWRlbnRpdHksIHNvdXJjZTogbXNnLmZyb20gfQogICAgICB9KTsKICAgIH0KCiAgICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBTeW5jaGVyIC0+IHN1YnNjcmliZQoKICB9LCB7CiAgICBrZXk6ICdfb25SZW1vdGVTdWJzY3JpYmUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9vblJlbW90ZVN1YnNjcmliZShtc2cpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIGh5cGVydHlVUkwgPSBtc2cuYm9keS5zdWJzY3JpYmVyOwoKICAgICAgLy92YWxpZGF0ZSBpZiBzdWJzY3JpcHRpb24gYWxyZWFkeSBleGlzdHM/CiAgICAgIGlmIChfdGhpcy5fc3Vic2NyaXB0aW9uc1toeXBlcnR5VVJMXSkgewogICAgICAgIHZhciBlcnJvck1zZyA9IHsKICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IGh5cGVydHlVUkwsCiAgICAgICAgICBib2R5OiB7IGNvZGU6IDUwMCwgZGVzYzogJ1N1YnNjcmlwdGlvbiBmb3IgKCcgKyBfdGhpcy5fdXJsICsgJyA6ICcgKyBoeXBlcnR5VVJMICsgJykgYWxyZWFkeSBleGlzdHMhJyB9CiAgICAgICAgfTsKCiAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShlcnJvck1zZyk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICAvL2FzayB0byBzdWJzY3JpYmUgdG8gU3luY2hlcj8gKGRlcGVuZHMgb24gdGhlIG9wZXJhdGlvbiBtb2RlKQogICAgICAvL1RPRE86IGdldCBtb2RlIGZyb20gb2JqZWN0IQogICAgICB2YXIgbW9kZSA9ICdzdWIvcHViJzsKCiAgICAgIGlmIChtb2RlID09PSAnc3ViL3B1YicpIHsKICAgICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gbG9jYWwgaHlwZXJ0eSBhZGRyZXNzIFN5bmNoZXIgLT4gX29uRm9yd2FyZAogICAgICAgIHZhciBmb3J3YXJkTXNnID0gewogICAgICAgICAgdHlwZTogJ2ZvcndhcmQnLCBmcm9tOiBfdGhpcy5fdXJsLCB0bzogX3RoaXMuX293bmVyLAogICAgICAgICAgYm9keTogeyB0eXBlOiBtc2cudHlwZSwgZnJvbTogaHlwZXJ0eVVSTCwgdG86IF90aGlzLl91cmwsIGlkZW50aXR5OiBtc2cuYm9keS5pZGVudGl0eSB9CiAgICAgICAgfTsKCiAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShmb3J3YXJkTXNnLCBmdW5jdGlvbiAocmVwbHkpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdmb3J3YXJkLXJlcGx5OiAnLCByZXBseSk7CiAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHsKICAgICAgICAgICAgX3RoaXMuX3N1YnNjcmlwdGlvbnNbaHlwZXJ0eVVSTF0gPSBuZXcgX1N1YnNjcmlwdGlvbjIuZGVmYXVsdChfdGhpcy5fYnVzLCBfdGhpcy5fb3duZXIsIF90aGlzLl91cmwsIF90aGlzLl9jaGlsZHJlbnMsIHRydWUpOwogICAgICAgICAgfQoKICAgICAgICAgIC8vRkxPVy1PVVQ6IHN1YnNjcmlwdGlvbiByZXNwb25zZSBzZW50IChmb3J3YXJkIGZyb20gaW50ZXJuYWwgSHlwZXJ0eSkKICAgICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UoewogICAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBtc2cuZnJvbSwKICAgICAgICAgICAgYm9keTogcmVwbHkuYm9keQogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KCiAgICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSByZW1vdGUgT2JzZXJ2ZXJPYmplY3QgLT4gcmVtb3ZlU3Vic2NyaXB0aW9uCgogIH0sIHsKICAgIGtleTogJ19vblJlbW90ZVVuU3Vic2NyaWJlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfb25SZW1vdGVVblN1YnNjcmliZShtc2cpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIGh5cGVydHlVUkwgPSBtc2cuYm9keS5zdWJzY3JpYmVyOwoKICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHlVUkxdOwogICAgICBpZiAoc3Vic2NyaXB0aW9uKSB7CiAgICAgICAgc3Vic2NyaXB0aW9uLl9yZWxlYXNlTGlzdGVuZXJzKCk7CiAgICAgICAgZGVsZXRlIF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHlVUkxdOwoKICAgICAgICAvL1RPRE86IHNlbmQgdW4tc3Vic2NyaWJlIG1lc3NhZ2UgdG8gU3luY2hlcj8gKGRlcGVuZHMgb24gdGhlIG9wZXJhdGlvbiBtb2RlKQogICAgICB9CiAgICB9CiAgfV0pOwogIHJldHVybiBSZXBvcnRlck9iamVjdDsKfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gUmVwb3J0ZXJPYmplY3Q7Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7Ii4uL3V0aWxzL3V0aWxzIjo0NDcsIi4vU3Vic2NyaXB0aW9uIjo0NDMsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5cyI6OCwiYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UiOjEwLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjEzLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE0fV0sNDQzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKdmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oYnVzLCBvd25lciwgdXJsLCBjaGlsZHJlbnMsIGlzUmVwb3J0ZXIpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFN1YnNjcmlwdGlvbik7CgogICAgdmFyIF90aGlzID0gdGhpczsKICAgIHZhciBjaGlsZEJhc2VVUkwgPSB1cmwgKyAnL2NoaWxkcmVuLyc7CiAgICB2YXIgY2hhbmdlVVJMID0gdXJsICsgJy9jaGFuZ2VzJzsKCiAgICAvL3Byb2Nlc3MgZGVsZXRlIG1lc3NhZ2UKICAgIF90aGlzLl9kZWxldGVMaXN0ZW5lciA9IGJ1cy5hZGRMaXN0ZW5lcihjaGFuZ2VVUkwsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgaWYgKG1zZy50eXBlID09PSAnZGVsZXRlJykgewogICAgICAgIGNvbnNvbGUubG9nKCdTdWJzY3JpcHRpb24tREVMRVRFOiAnLCBtc2cpOwoKICAgICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gYWxsIHN1YnNjcmliZXJzCiAgICAgICAgdmFyIGRlbGV0ZU1lc3NhZ2VUb0h5cGVydHkgPSB7CiAgICAgICAgICB0eXBlOiAnZGVsZXRlJywgZnJvbTogbXNnLmZyb20sIHRvOiBvd25lciwKICAgICAgICAgIGJvZHk6IHsgaWRlbnRpdHk6IG1zZy5ib2R5LmlkZW50aXR5LCByZXNvdXJjZTogdXJsIH0KICAgICAgICB9OwoKICAgICAgICAvL3NlbmQgZGVsZXRlIHRvIGh5cGVydHkKICAgICAgICBidXMucG9zdE1lc3NhZ2UoZGVsZXRlTWVzc2FnZVRvSHlwZXJ0eSwgZnVuY3Rpb24gKHJlcGx5KSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnU3Vic2NyaXB0aW9uLURFTEVURS1SRVBMWTogJywgcmVwbHkpOwogICAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7CiAgICAgICAgICAgIF90aGlzLl9yZWxlYXNlTGlzdGVuZXJzKCk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pOwoKICAgIC8vYWRkIGNoYW5nZSBwdWJsaXNoIGFkZHJlc3Mgb3IgZm9yd2FyZAogICAgaWYgKGlzUmVwb3J0ZXIpIHsKICAgICAgX3RoaXMuX2NoYW5nZUxpc3RlbmVyID0gYnVzLmFkZFB1Ymxpc2goY2hhbmdlVVJMKTsKICAgIH0gZWxzZSB7CiAgICAgIF90aGlzLl9jaGFuZ2VMaXN0ZW5lciA9IGJ1cy5hZGRGb3J3YXJkKGNoYW5nZVVSTCwgb3duZXIpOwogICAgfQoKICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycyA9IFtdOwogICAgY2hpbGRyZW5zLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7CiAgICAgIHZhciBjaGlsZElkID0gY2hpbGRCYXNlVVJMICsgY2hpbGQ7CgogICAgICAvL2FkZCBjaGlsZHJlbiBwdWJsaXNoIGFkZHJlc3MKICAgICAgdmFyIGNoaWxkcmVuRm9yd2FyZCA9IGJ1cy5hZGRQdWJsaXNoKGNoaWxkSWQpOwogICAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMucHVzaChjaGlsZHJlbkZvcndhcmQpOwoKICAgICAgLy9hZGQgc2VsZiBmb3J3YXJkIGlmIGFuIG9ic2VydmVyCiAgICAgIGlmICghaXNSZXBvcnRlcikgewogICAgICAgIHZhciBzZWxmRm9yd2FyZCA9IGJ1cy5hZGRGb3J3YXJkKGNoaWxkSWQsIG93bmVyKTsKICAgICAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMucHVzaChzZWxmRm9yd2FyZCk7CiAgICAgIH0KICAgIH0pOwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoU3Vic2NyaXB0aW9uLCBbewogICAga2V5OiAnX3JlbGVhc2VMaXN0ZW5lcnMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWxlYXNlTGlzdGVuZXJzKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgX3RoaXMuX2RlbGV0ZUxpc3RlbmVyLnJlbW92ZSgpOwoKICAgICAgX3RoaXMuX2NoYW5nZUxpc3RlbmVyLnJlbW92ZSgpOwoKICAgICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGZvcndhcmQpIHsKICAgICAgICBmb3J3YXJkLnJlbW92ZSgpOwogICAgICB9KTsKICAgIH0KICB9XSk7CiAgcmV0dXJuIFN1YnNjcmlwdGlvbjsKfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gU3Vic2NyaXB0aW9uOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjEzLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE0fV0sNDQ0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9zdHJpbmdpZnkgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnknKTsKCnZhciBfc3RyaW5naWZ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0cmluZ2lmeSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy91dGlscycpOwoKdmFyIF9PYmplY3RBbGxvY2F0aW9uID0gcmVxdWlyZSgnLi9PYmplY3RBbGxvY2F0aW9uJyk7Cgp2YXIgX09iamVjdEFsbG9jYXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfT2JqZWN0QWxsb2NhdGlvbik7Cgp2YXIgX1JlcG9ydGVyT2JqZWN0ID0gcmVxdWlyZSgnLi9SZXBvcnRlck9iamVjdCcpOwoKdmFyIF9SZXBvcnRlck9iamVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SZXBvcnRlck9iamVjdCk7Cgp2YXIgX09ic2VydmVyT2JqZWN0ID0gcmVxdWlyZSgnLi9PYnNlcnZlck9iamVjdCcpOwoKdmFyIF9PYnNlcnZlck9iamVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9PYnNlcnZlck9iamVjdCk7Cgp2YXIgX3R2ID0gcmVxdWlyZSgnLi4vdXRpbHMvdHY0Jyk7Cgp2YXIgX3R2MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R2KTsKCnZhciBfTWVzc2FnZUZhY3RvcnkgPSByZXF1aXJlKCdzZXJ2aWNlLWZyYW1ld29yay9kaXN0L01lc3NhZ2VGYWN0b3J5Jyk7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoqCiAqIEBhdXRob3IgbWljYWVscGVkcm9zYUBnbWFpbC5jb20KICogQ29yZSBTeW5jcm9uaXphdGlvbiBzeXN0ZW0uCiAqLwovKioKKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0EKKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRAoqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTAoqIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WCiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBCiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBRwoqIENvcHlyaWdodCAyMDE2IEFwaXplZQoqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOCioKKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CioKKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAoqCiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQoqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAoqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoqKi8KCnZhciBTeW5jaGVyTWFuYWdlciA9IGZ1bmN0aW9uICgpIHsKICAvKiBwcml2YXRlCiAgX3VybDogVVJMCiAgX2J1czogTWluaUJ1cwogIF9yZWdpc3RyeTogUmVnaXN0cnkKICBfYWxsb2NhdG9yOiBPYmplY3RBbGxvY2F0aW9uCiAgIF9yZXBvcnRlcnM6IHsgT2JqZWN0VVJMOiBSZXBvcnRlck9iamVjdCB9CiAgX29ic2VydmVyczogeyBPYmplY3RVUkw6IE9ic2VydmVyT2JqZWN0IH0KICAqLwoKICBmdW5jdGlvbiBTeW5jaGVyTWFuYWdlcihydW50aW1lVVJMLCBidXMsIHJlZ2lzdHJ5LCBjYXRhbG9nLCBhbGxvY2F0b3IpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFN5bmNoZXJNYW5hZ2VyKTsKCiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIF90aGlzLl9idXMgPSBidXM7CiAgICBfdGhpcy5fcmVnaXN0cnkgPSByZWdpc3RyeTsKICAgIF90aGlzLl9jYXRhbG9nID0gY2F0YWxvZzsKCiAgICAvL1RPRE86IHRoZXNlIHNob3VsZCBiZSBzYXZlZCBpbiBwZXJzaXN0ZW5jZSBlbmdpbmU/CiAgICBfdGhpcy5fdXJsID0gcnVudGltZVVSTCArICcvc20nOwogICAgX3RoaXMuX29iamVjdFVSTCA9IHJ1bnRpbWVVUkwgKyAnL29iamVjdC1hbGxvY2F0aW9uJzsKCiAgICBfdGhpcy5fcmVwb3J0ZXJzID0ge307CiAgICBfdGhpcy5fb2JzZXJ2ZXJzID0ge307CgogICAgLy9UT0RPOiB0aGlzIHNob3VsZCBub3QgYmUgaGFyZGNvZGVkIQogICAgX3RoaXMuX2RvbWFpbiA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShydW50aW1lVVJMKS5kb21haW47CgogICAgX3RoaXMuX21mID0gbmV3IF9NZXNzYWdlRmFjdG9yeS5NZXNzYWdlRmFjdG9yeShmYWxzZSwge30pOwoKICAgIGlmIChhbGxvY2F0b3IpIHsKICAgICAgX3RoaXMuX2FsbG9jYXRvciA9IGFsbG9jYXRvcjsKICAgIH0gZWxzZSB7CiAgICAgIF90aGlzLl9hbGxvY2F0b3IgPSBuZXcgX09iamVjdEFsbG9jYXRpb24yLmRlZmF1bHQoX3RoaXMuX29iamVjdFVSTCwgYnVzKTsKICAgIH0KCiAgICBidXMuYWRkTGlzdGVuZXIoX3RoaXMuX3VybCwgZnVuY3Rpb24gKG1zZykgewogICAgICBjb25zb2xlLmxvZygnU3luY2hlck1hbmFnZXItUkNWOiAnLCBtc2cpOwogICAgICBzd2l0Y2ggKG1zZy50eXBlKSB7CiAgICAgICAgY2FzZSAnY3JlYXRlJzoKICAgICAgICAgIF90aGlzLl9vbkNyZWF0ZShtc2cpO2JyZWFrOwogICAgICAgIGNhc2UgJ2RlbGV0ZSc6CiAgICAgICAgICBfdGhpcy5fb25EZWxldGUobXNnKTticmVhazsKICAgICAgICBjYXNlICdzdWJzY3JpYmUnOgogICAgICAgICAgX3RoaXMuX29uTG9jYWxTdWJzY3JpYmUobXNnKTticmVhazsKICAgICAgICBjYXNlICd1bnN1YnNjcmliZSc6CiAgICAgICAgICBfdGhpcy5fb25Mb2NhbFVuU3Vic2NyaWJlKG1zZyk7YnJlYWs7CiAgICAgIH0KICAgIH0pOwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoU3luY2hlck1hbmFnZXIsIFt7CiAgICBrZXk6ICdfb25DcmVhdGUnLAoKCiAgICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBTeW5jaGVyIC0+IGNyZWF0ZQogICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkNyZWF0ZShtc2cpIHsKCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBvd25lciA9IG1zZy5mcm9tOwogICAgICB2YXIgZG9tYWluID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKG1zZy5mcm9tKS5kb21haW47CgogICAgICBpZiAobXNnLmJvZHkucmVzb3VyY2UpIHsKICAgICAgICBfdGhpcy5fYXV0aG9yaXNlKG1zZywgbXNnLmJvZHkucmVzb3VyY2UpOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgLy9nZXQgc2NoZW1hIGZyb20gY2F0YWxvZ3VlIGFuZCBwYXJzZSAtPiAoc2NoZW1lLCBjaGlsZHJlbikKICAgICAgX3RoaXMuX2NhdGFsb2cuZ2V0RGF0YVNjaGVtYURlc2NyaXB0b3IobXNnLmJvZHkuc2NoZW1hKS50aGVuKGZ1bmN0aW9uIChkZXNjcmlwdG9yKSB7CgogICAgICAgIHZhciBwcm9wZXJ0aWVzID0gZGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlLnNvdXJjZUNvZGUucHJvcGVydGllczsKICAgICAgICB2YXIgc2NoZW1lID0gcHJvcGVydGllcy5zY2hlbWUgPyBwcm9wZXJ0aWVzLnNjaGVtZS5jb25zdGFudCA6ICdyZXNvdXJjZSc7CiAgICAgICAgdmFyIGNoaWxkcmVucyA9IHByb3BlcnRpZXMuY2hpbGRyZW4gPyBwcm9wZXJ0aWVzLmNoaWxkcmVuLmNvbnN0YW50IDogW107CgogICAgICAgIGNvbnNvbGUubG9nKCdTY2hlbWU6ICcsIHNjaGVtZSk7CgogICAgICAgIC8vIHNjaGVtYSB2YWxpZGF0aW9uCiAgICAgICAgY29uc29sZS5sb2coJ1J1bm5pbmcgb2JqZWN0IHZhbGlkYXRpb24uLi4nKTsKICAgICAgICB0cnkgewogICAgICAgICAgdmFyIG9iaiA9IG1zZy5ib2R5LnZhbHVlOwogICAgICAgICAgdmFyIHNjaGVtYSA9IGRlc2NyaXB0b3Iuc291cmNlUGFja2FnZS5zb3VyY2VDb2RlOwoKICAgICAgICAgIC8vIGFkZCBzdXBwb3J0IGZvciBzY2hlbWEgcmVmZXJlbmNpbmcgaXRzZWxmCiAgICAgICAgICBfdHYyLmRlZmF1bHQuYWRkU2NoZW1hKHNjaGVtYS5pZCwgc2NoZW1hKTsKCiAgICAgICAgICAvLyB2YWxpZGF0ZQogICAgICAgICAgdmFyIHJlc3VsdCA9IF90djIuZGVmYXVsdC52YWxpZGF0ZU11bHRpcGxlKG9iaiwgc2NoZW1hKTsKCiAgICAgICAgICAvLyBkZWxldGUgZXJyb3Igc3RhY2tzIHRvIGltcHJvdmUgbG9nZ2luZwogICAgICAgICAgcmVzdWx0LmVycm9ycy5mb3JFYWNoKGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgICBkZWxldGUgZXJyb3Iuc3RhY2s7CiAgICAgICAgICB9KTsKCiAgICAgICAgICAvLyBwcmludCBtb3JlIGRldGFpbHMgYWJvdXQgdmFsaWRhdGlvbiBpZiBpdCBmYWlscyBvciBzY2hlbWEgY29udGFpbnMgJHJlZnMKICAgICAgICAgIGlmICghcmVzdWx0LnZhbGlkIHx8IHJlc3VsdC5taXNzaW5nLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgY29uc29sZS53YXJuKCdPYmplY3QgdmFsaWRhdGlvbiAnICsgKHJlc3VsdC52YWxpZCA/ICdzdWNjZWVkZWQsIGJ1dCBzY2hlbWEgY29udGFpbmVkIHJlZmVyZW5jZXM6JyA6ICdmYWlsZWQ6JyksICgwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KShyZXN1bHQsIG51bGwsIDIpKTsKICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnT2JqZWN0OicsICgwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KShvYmosIG51bGwsIDIpLCAnXHJcblNjaGVtYTonLCAoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkoc2NoZW1hLCBudWxsLCAyKSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb25zb2xlLmxvZygnT2JqZWN0IHZhbGlkYXRpb24gc3VjY2VlZGVkJyk7CiAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgY29uc29sZS53YXJuKCdFcnJvciBkdXJpbmcgb2JqZWN0IHZhbGlkYXRpb246JywgZSk7CiAgICAgICAgfQoKICAgICAgICAvL3JlcXVlc3QgYWRkcmVzcyBhbGxvY2F0aW9uIG9mIGEgbmV3IG9iamVjdCBmcm9tIHRoZSBtc2ctbm9kZQogICAgICAgIF90aGlzLl9hbGxvY2F0b3IuY3JlYXRlKGRvbWFpbiwgc2NoZW1lLCAxKS50aGVuKGZ1bmN0aW9uIChhbGxvY2F0ZWQpIHsKICAgICAgICAgIHZhciBvYmpVUkwgPSBhbGxvY2F0ZWRbMF07CgogICAgICAgICAgY29uc29sZS5sb2coJ0FMTE9DQVRPUiBDUkVBVEU6JywgYWxsb2NhdGVkKTsKCiAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uVVJMID0gb2JqVVJMICsgJy9zdWJzY3JpcHRpb24nOwoKICAgICAgICAgIGNvbnNvbGUubG9nKCdTdWJzY3JpcHRpb24gVVJMJywgc3Vic2NyaXB0aW9uVVJMKTsKCiAgICAgICAgICAvL1RvIHJlZ2lzdGVyIHRoZSBkYXRhT2JqZWN0IGluIHRoZSBydW50aW1lUmVnaXN0cnkKICAgICAgICAgIGNvbnNvbGUuaW5mbygnUmVnaXN0ZXIgT2JqZWN0OiAnLCBtc2cuYm9keS52YWx1ZS5uYW1lLCBtc2cuYm9keS52YWx1ZS5zY2hlbWEsIG9ialVSTCwgbXNnLmJvZHkudmFsdWUucmVwb3J0ZXIsIG1zZy5ib2R5LnZhbHVlLnJlc291cmNlcyk7CiAgICAgICAgICBfdGhpcy5fcmVnaXN0cnkucmVnaXN0ZXJEYXRhT2JqZWN0KG1zZy5ib2R5LnZhbHVlLm5hbWUsIG1zZy5ib2R5LnZhbHVlLnNjaGVtYSwgb2JqVVJMLCBtc2cuYm9keS52YWx1ZS5yZXBvcnRlciwgbXNnLmJvZHkudmFsdWUucmVzb3VyY2VzKS50aGVuKGZ1bmN0aW9uIChyZXNvbHZlKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEYXRhT2JqZWN0IHN1Y2Nlc3NmdWxseSByZWdpc3RlcmVkJywgcmVzb2x2ZSk7CgogICAgICAgICAgICAvL2FsbCBPSyAtPiBjcmVhdGUgcmVwb3J0ZXIgYW5kIHJlZ2lzdGVyIGxpc3RlbmVycwogICAgICAgICAgICB2YXIgcmVwb3J0ZXIgPSBuZXcgX1JlcG9ydGVyT2JqZWN0Mi5kZWZhdWx0KF90aGlzLCBvd25lciwgb2JqVVJMKTsKICAgICAgICAgICAgcmVwb3J0ZXIuZm9yd2FyZFN1YnNjcmliZShbb2JqVVJMLCBzdWJzY3JpcHRpb25VUkxdKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICByZXBvcnRlci5hZGRDaGlsZHJlbnMoY2hpbGRyZW5zKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIF90aGlzLl9yZXBvcnRlcnNbb2JqVVJMXSA9IHJlcG9ydGVyOwoKICAgICAgICAgICAgICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2UgcmVzcG9uc2UgdG8gU3luY2hlciAtPiBjcmVhdGUKICAgICAgICAgICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UoewogICAgICAgICAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBvd25lciwKICAgICAgICAgICAgICAgICAgYm9keTogeyBjb2RlOiAyMDAsIHJlc291cmNlOiBvYmpVUkwsIGNoaWxkcmVuUmVzb3VyY2VzOiBjaGlsZHJlbnMgfQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgLy9zZW5kIGNyZWF0ZSB0byBhbGwgb2JzZXJ2ZXJzLCByZXNwb25zZXMgd2lsbCBiZSBkZWxpdmVyIHRvIHRoZSBIeXBlcnR5IG93bmVyPwogICAgICAgICAgICAgICAgLy9zY2hlZHVsZSBmb3IgbmV4dCBjeWNsZSBuZWVkZWQsIGJlY2F1c2UgdGhlIFJlcG9ydGVyIHNob3VsZCBiZSBhdmFpbGFibGUuCiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgLy93aWxsIGludml0ZSBvdGhlciBoeXBlcnRpZXMKICAgICAgICAgICAgICAgICAgX3RoaXMuX2F1dGhvcmlzZShtc2csIG9ialVSTCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgIC8vRkxPVy1PVVQ6IGVycm9yIG1lc3NhZ2UgcmVzcG9uc2UgdG8gU3luY2hlciAtPiBjcmVhdGUKICAgICAgICB2YXIgcmVzcG9uc2VNc2cgPSB7CiAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBvd25lciwKICAgICAgICAgIGJvZHk6IHsgY29kZTogNTAwLCBkZXNjOiByZWFzb24gfQogICAgICAgIH07CgogICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UocmVzcG9uc2VNc2cpOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfYXV0aG9yaXNlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfYXV0aG9yaXNlKG1zZywgb2JqVVJMKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBvYmpTdWJzY3JpcHRvclVSTCA9IG9ialVSTCArICcvc3Vic2NyaXB0aW9uJzsKCiAgICAgIG1zZy5ib2R5LmF1dGhvcmlzZS5mb3JFYWNoKGZ1bmN0aW9uIChoeXBlcnR5VVJMKSB7CiAgICAgICAgLy9GTE9XLU9VVDogc2VuZCBpbnZpdGVzIHRvIGxpc3Qgb2YgcmVtb3RlIFN5bmNoZXIgLT4gX29uUmVtb3RlQ3JlYXRlIC0+IG9uTm90aWZpY2F0aW9uCiAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7CiAgICAgICAgICB0eXBlOiAnY3JlYXRlJywgZnJvbTogb2JqU3Vic2NyaXB0b3JVUkwsIHRvOiBoeXBlcnR5VVJMLAogICAgICAgICAgYm9keTogeyBpZGVudGl0eTogbXNnLmJvZHkuaWRlbnRpdHksIHNvdXJjZTogbXNnLmZyb20sIHZhbHVlOiBtc2cuYm9keS52YWx1ZSwgc2NoZW1hOiBtc2cuYm9keS5zY2hlbWEgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBEYXRhT2JqZWN0UmVwb3J0ZXIgLT4gZGVsZXRlCgogIH0sIHsKICAgIGtleTogJ19vbkRlbGV0ZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX29uRGVsZXRlKG1zZykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIG9ialVSTCA9IG1zZy5ib2R5LnJlc291cmNlOwoKICAgICAgdmFyIG9iamVjdCA9IF90aGlzLl9yZXBvcnRlcnNbb2JqVVJMXTsKICAgICAgaWYgKG9iamVjdCkgewogICAgICAgIC8vVE9ETzogaXMgdGhlcmUgYW55IHBvbGljeSB2ZXJpZmljYXRpb24gYmVmb3JlIGRlbGV0ZT8KICAgICAgICBvYmplY3QuZGVsZXRlKCk7CgogICAgICAgIC8vVE9ETzogdW5yZWdpc3RlciBvYmplY3Q/CiAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7CiAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBtc2cuZnJvbSwKICAgICAgICAgIGJvZHk6IHsgY29kZTogMjAwIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfQoKICAgIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIGxvY2FsIFN5bmNoZXIgLT4gc3Vic2NyaWJlCgogIH0sIHsKICAgIGtleTogJ19vbkxvY2FsU3Vic2NyaWJlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfb25Mb2NhbFN1YnNjcmliZShtc2cpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGh5cGVydHlVUkwgPSBtc2cuZnJvbTsKICAgICAgdmFyIG9ialVSTCA9IG1zZy5ib2R5LnJlc291cmNlOwogICAgICB2YXIgb2JqVVJMU3Vic2NyaXB0aW9uID0gb2JqVVJMICsgJy9zdWJzY3JpcHRpb24nOwogICAgICB2YXIgY2hpbGRCYXNlVVJMID0gb2JqVVJMICsgJy9jaGlsZHJlbi8nOwoKICAgICAgdmFyIGRvbWFpbiA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShvYmpVUkwpLmRvbWFpbjsKCiAgICAgIC8vZ2V0IHNjaGVtYSBmcm9tIGNhdGFsb2d1ZSBhbmQgcGFyc2UgLT4gKGNoaWxkcmVuKQogICAgICBfdGhpcy5fY2F0YWxvZy5nZXREYXRhU2NoZW1hRGVzY3JpcHRvcihtc2cuYm9keS5zY2hlbWEpLnRoZW4oZnVuY3Rpb24gKGRlc2NyaXB0b3IpIHsKICAgICAgICB2YXIgcHJvcGVydGllcyA9IGRlc2NyaXB0b3Iuc291cmNlUGFja2FnZS5zb3VyY2VDb2RlLnByb3BlcnRpZXM7CiAgICAgICAgdmFyIGNoaWxkcmVucyA9IHByb3BlcnRpZXMuY2hpbGRyZW4gPyBwcm9wZXJ0aWVzLmNoaWxkcmVuLmNvbnN0YW50IDogW107CgogICAgICAgIC8vY2hpbGRyZW4gYWRkcmVzc2VzCiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbnMgPSBbXTsKICAgICAgICBzdWJzY3JpcHRpb25zLnB1c2gob2JqVVJMICsgJy9jaGFuZ2VzJyk7CiAgICAgICAgY2hpbGRyZW5zLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7CiAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9ucy5wdXNoKGNoaWxkQmFzZVVSTCArIGNoaWxkKTsKICAgICAgICB9KTsKCiAgICAgICAgLy9GTE9XLU9VVDogc3Vic2NyaWJlIG1lc3NhZ2UgdG8gdGhlIG1zZy1ub2RlLCByZWdpc3RlcmluZyBsaXN0ZW5lcnMgb24gdGhlIGJyb2tlcgogICAgICAgIHZhciBub2RlU3Vic2NyaWJlTXNnID0gewogICAgICAgICAgdHlwZTogJ3N1YnNjcmliZScsIGZyb206IF90aGlzLl91cmwsIHRvOiAnZG9tYWluOi8vbXNnLW5vZGUuJyArIGRvbWFpbiArICcvc20nLAogICAgICAgICAgYm9keTogeyBpZGVudGl0eTogbXNnLmJvZHkuaWRlbnRpdHksIHN1YnNjcmliZTogc3Vic2NyaXB0aW9ucywgc291cmNlOiBoeXBlcnR5VVJMIH0KICAgICAgICB9OwoKICAgICAgICAvL3N1YnNjcmliZSBpbiBtc2ctbm9kZQogICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uobm9kZVN1YnNjcmliZU1zZywgZnVuY3Rpb24gKHJlcGx5KSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnbm9kZS1zdWJzY3JpYmUtcmVzcG9uc2Uob2JzZXJ2ZXIpOiAnLCByZXBseSk7CiAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHsKCiAgICAgICAgICAgIC8vRkxPVy1PVVQ6IHJlcGx5IHdpdGggcHJvdmlzaW9uYWwgcmVzcG9uc2UKICAgICAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7CiAgICAgICAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogaHlwZXJ0eVVSTCwKICAgICAgICAgICAgICBib2R5OiB7IGNvZGU6IDEwMCwgY2hpbGRyZW5SZXNvdXJjZXM6IGNoaWxkcmVucyB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgLy9GTE9XLU9VVDogc3Vic2NyaWJlIG1lc3NhZ2UgdG8gcmVtb3RlIFJlcG9ydGVyT2JqZWN0IC0+IF9vblJlbW90ZVN1YnNjcmliZQogICAgICAgICAgICB2YXIgb2JqU3Vic2NyaWJlTXNnID0gewogICAgICAgICAgICAgIHR5cGU6ICdzdWJzY3JpYmUnLCBmcm9tOiBfdGhpcy5fdXJsLCB0bzogb2JqVVJMU3Vic2NyaXB0aW9uLAogICAgICAgICAgICAgIGJvZHk6IHsgaWRlbnRpdHk6IG5vZGVTdWJzY3JpYmVNc2cuYm9keS5pZGVudGl0eSwgc3Vic2NyaWJlcjogaHlwZXJ0eVVSTCB9CiAgICAgICAgICAgIH07CgogICAgICAgICAgICAvL3N1YnNjcmliZSB0byByZXBvcnRlciBTTQogICAgICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG9ialN1YnNjcmliZU1zZywgZnVuY3Rpb24gKHJlcGx5KSB7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlcG9ydGVyLXN1YnNjcmliZS1yZXNwb25zZTogJywgcmVwbHkpOwogICAgICAgICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkgewoKICAgICAgICAgICAgICAgIHZhciBvYnNlcnZlciA9IF90aGlzLl9vYnNlcnZlcnNbb2JqVVJMXTsKICAgICAgICAgICAgICAgIGlmICghb2JzZXJ2ZXIpIHsKICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIgPSBuZXcgX09ic2VydmVyT2JqZWN0Mi5kZWZhdWx0KF90aGlzLCBvYmpVUkwsIGNoaWxkcmVucyk7CiAgICAgICAgICAgICAgICAgIF90aGlzLl9vYnNlcnZlcnNbb2JqVVJMXSA9IG9ic2VydmVyOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vcmVnaXN0ZXIgaHlwZXJ0eSBzdWJzY3JpcHRpb24KICAgICAgICAgICAgICAgIG9ic2VydmVyLmFkZFN1YnNjcmlwdGlvbihoeXBlcnR5VVJMKTsKCiAgICAgICAgICAgICAgICAvL2ZvcndhcmQgdG8gaHlwZXJ0eToKICAgICAgICAgICAgICAgIHJlcGx5LmlkID0gbXNnLmlkOwogICAgICAgICAgICAgICAgcmVwbHkuZnJvbSA9IF90aGlzLl91cmw7CiAgICAgICAgICAgICAgICByZXBseS50byA9IGh5cGVydHlVUkw7CiAgICAgICAgICAgICAgICBfdGhpczIuX2J1cy5wb3N0TWVzc2FnZShyZXBseSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vbGlzdGVuZXIgcmVqZWN0ZWQKICAgICAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7CiAgICAgICAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogaHlwZXJ0eVVSTCwKICAgICAgICAgICAgICBib2R5OiByZXBseS5ib2R5CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBsb2NhbCBEYXRhT2JqZWN0T2JzZXJ2ZXIgLT4gdW5zdWJzY3JpYmUKCiAgfSwgewogICAga2V5OiAnX29uTG9jYWxVblN1YnNjcmliZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX29uTG9jYWxVblN1YnNjcmliZShtc2cpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBoeXBlcnR5VVJMID0gbXNnLmZyb207CiAgICAgIHZhciBvYmpVUkwgPSBtc2cuYm9keS5yZXNvdXJjZTsKCiAgICAgIHZhciBvYnNlcnZlciA9IF90aGlzLl9vYnNlcnZlcnNbb2JqVVJMXTsKICAgICAgaWYgKG9ic2VydmVyKSB7CiAgICAgICAgLy9UT0RPOiBpcyB0aGVyZSBhbnkgcG9saWN5IHZlcmlmaWNhdGlvbiBiZWZvcmUgZGVsZXRlPwogICAgICAgIG9ic2VydmVyLnJlbW92ZVN1YnNjcmlwdGlvbihoeXBlcnR5VVJMKTsKCiAgICAgICAgLy9UT0RPOiBkZXN0cm95IG9iamVjdCBpbiB0aGUgcmVnaXN0cnk/CiAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7CiAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBtc2cuZnJvbSwKICAgICAgICAgIGJvZHk6IHsgY29kZTogMjAwIH0KICAgICAgICB9KTsKCiAgICAgICAgLy9UT0RPOiByZW1vdmUgT2JqZWN0IGlmIG5vIG1vcmUgc3Vic2NyaXB0aW9uPwogICAgICAgIC8vZGVsZXRlIF90aGlzLl9vYnNlcnZlcnNbb2JqVVJMXTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogJ3VybCcsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3VybDsKICAgIH0KICB9XSk7CiAgcmV0dXJuIFN5bmNoZXJNYW5hZ2VyOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBTeW5jaGVyTWFuYWdlcjsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi4vdXRpbHMvdHY0Ijo0NDYsIi4uL3V0aWxzL3V0aWxzIjo0NDcsIi4vT2JqZWN0QWxsb2NhdGlvbiI6NDQwLCIuL09ic2VydmVyT2JqZWN0Ijo0NDEsIi4vUmVwb3J0ZXJPYmplY3QiOjQ0MiwiYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5IjoyLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjEzLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE0LCJzZXJ2aWNlLWZyYW1ld29yay9kaXN0L01lc3NhZ2VGYWN0b3J5Ijo0MTJ9XSw0NDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayIpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgovKioKKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0EKKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRAoqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTAoqIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WCiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBCiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBRwoqIENvcHlyaWdodCAyMDE2IEFwaXplZQoqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOCioKKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CioKKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAoqCiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQoqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAoqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoqKi8KLyoqCiAqIEV2ZW50RW1pdHRlcgogKiBBbGwgY2xhc3NlcyB3aGljaCBleHRlbmRzIHRoaXMsIGNhbiBoYXZlIGFkZEV2ZW50TGlzdGVuZXIgYW5kIHRyaWdnZXIgZXZlbnRzOwogKi8KCnZhciBFdmVudEVtaXR0ZXIgPSBmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgRXZlbnRFbWl0dGVyKTsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEV2ZW50RW1pdHRlciwgW3sKICAgIGtleTogImFkZEV2ZW50TGlzdGVuZXIiLAoKCiAgICAvKioKICAgICAqIGFkZEV2ZW50TGlzdGVuZXIgbGlzdGVuIGZvciBhbiBldmVudFR5cGUKICAgICAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICBldmVudFR5cGUgLSBsaXN0ZW5pbmcgZm9yIHRoaXMgdHlwZSBvZiBldmVudAogICAgICogQHBhcmFtICB7RnVuY3Rpb259ICAgICAgIGNiICAgICAgICAtIGNhbGxiYWNrIGZ1bmN0aW9uIHdpbGwgYmUgZXhlY3V0ZWQgd2hlbiB0aGUgZXZlbnQgaXQgaXMgaW52b2tlZAogICAgICovCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNiKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIF90aGlzW2V2ZW50VHlwZV0gPSBjYjsKICAgIH0KCiAgICAvKioKICAgICAqIEludm9rZSB0aGUgZXZlbnRUeXBlCiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IGV2ZW50VHlwZSAtIGV2ZW50IHdpbGwgYmUgaW52b2tlZAogICAgICogQHBhcmFtICB7b2JqZWN0fSBwYXJhbXMgLSBwYXJhbWV0ZXJzIHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBhZGRFdmVudExpc3RlbmVyCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAidHJpZ2dlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdHJpZ2dlcihldmVudFR5cGUsIHBhcmFtcykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgaWYgKF90aGlzW2V2ZW50VHlwZV0pIHsKICAgICAgICBfdGhpc1tldmVudFR5cGVdKHBhcmFtcyk7CiAgICAgIH0KICAgIH0KICB9XSk7CiAgcmV0dXJuIEV2ZW50RW1pdHRlcjsKfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gRXZlbnRFbWl0dGVyOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbImRlZmF1bHQiXTsKCn0seyJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjEzLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE0fV0sNDQ2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogICAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX3N0cmluZ2lmeSA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeScpOwoKdmFyIF9zdHJpbmdpZnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RyaW5naWZ5KTsKCnZhciBfZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eScpOwoKdmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZpbmVQcm9wZXJ0eSk7Cgp2YXIgX2lzRnJvemVuID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9pcy1mcm96ZW4nKTsKCnZhciBfaXNGcm96ZW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNGcm96ZW4pOwoKdmFyIF9jcmVhdGUgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2NyZWF0ZScpOwoKdmFyIF9jcmVhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlKTsKCnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YnKTsKCnZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpOwoKdmFyIF9rZXlzID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzJyk7Cgp2YXIgX2tleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa2V5cyk7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoKIEF1dGhvcjogR2VyYWludCBMdWZmIGFuZCBvdGhlcnMKIFllYXI6IDIwMTMKCiBUaGlzIGNvZGUgaXMgcmVsZWFzZWQgaW50byB0aGUgInB1YmxpYyBkb21haW4iIGJ5IGl0cyBhdXRob3IocykuICBBbnlib2R5IG1heSB1c2UsIGFsdGVyIGFuZCBkaXN0cmlidXRlIHRoZSBjb2RlIHdpdGhvdXQgcmVzdHJpY3Rpb24uICBUaGUgYXV0aG9yIG1ha2VzIG5vIGd1YXJhbnRlZXMsIGFuZCB0YWtlcyBubyBsaWFiaWxpdHkgb2YgYW55IGtpbmQgZm9yIHVzZSBvZiB0aGlzIGNvZGUuCgogSWYgeW91IGZpbmQgYSBidWcgb3IgbWFrZSBhbiBpbXByb3ZlbWVudCwgaXQgd291bGQgYmUgY291cnRlb3VzIHRvIGxldCB0aGUgYXV0aG9yIGtub3csIGJ1dCBpdCBpcyBub3QgY29tcHVsc29yeS4KICovCi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9rZXlzP3JlZGlyZWN0bG9jYWxlPWVuLVVTJnJlZGlyZWN0c2x1Zz1KYXZhU2NyaXB0JTJGUmVmZXJlbmNlJTJGR2xvYmFsX09iamVjdHMlMkZPYmplY3QlMkZrZXlzCmlmICghX2tleXMyLmRlZmF1bHQpIHsKICAgIE9iamVjdC5rZXlzID0gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksCiAgICAgICAgICAgIGhhc0RvbnRFbnVtQnVnID0gIXsgdG9TdHJpbmc6IG51bGwgfS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgndG9TdHJpbmcnKSwKICAgICAgICAgICAgZG9udEVudW1zID0gWyd0b1N0cmluZycsICd0b0xvY2FsZVN0cmluZycsICd2YWx1ZU9mJywgJ2hhc093blByb3BlcnR5JywgJ2lzUHJvdG90eXBlT2YnLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAnY29uc3RydWN0b3InXSwKICAgICAgICAgICAgZG9udEVudW1zTGVuZ3RoID0gZG9udEVudW1zLmxlbmd0aDsKCiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHsKICAgICAgICAgICAgaWYgKCh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKG9iaikpICE9PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqICE9PSAnZnVuY3Rpb24nIHx8IG9iaiA9PT0gbnVsbCkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmtleXMgY2FsbGVkIG9uIG5vbi1vYmplY3QnKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdOwoKICAgICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBvYmopIHsKICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIHsKICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChwcm9wKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGhhc0RvbnRFbnVtQnVnKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRvbnRFbnVtc0xlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqLCBkb250RW51bXNbaV0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGRvbnRFbnVtc1tpXSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfTsKICAgIH0oKTsKfQovLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvY3JlYXRlCmlmICghX2NyZWF0ZTIuZGVmYXVsdCkgewogICAgT2JqZWN0LmNyZWF0ZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBmdW5jdGlvbiBGKCkge30KCiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChvKSB7CiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAxKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ09iamVjdC5jcmVhdGUgaW1wbGVtZW50YXRpb24gb25seSBhY2NlcHRzIG9uZSBwYXJhbWV0ZXIuJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgRi5wcm90b3R5cGUgPSBvOwogICAgICAgICAgICByZXR1cm4gbmV3IEYoKTsKICAgICAgICB9OwogICAgfSgpOwp9Ci8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2lzQXJyYXk/cmVkaXJlY3Rsb2NhbGU9ZW4tVVMmcmVkaXJlY3RzbHVnPUphdmFTY3JpcHQlMkZSZWZlcmVuY2UlMkZHbG9iYWxfT2JqZWN0cyUyRkFycmF5JTJGaXNBcnJheQppZiAoIUFycmF5LmlzQXJyYXkpIHsKICAgIEFycmF5LmlzQXJyYXkgPSBmdW5jdGlvbiAodkFyZykgewogICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodkFyZykgPT09ICJbb2JqZWN0IEFycmF5XSI7CiAgICB9Owp9Ci8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2luZGV4T2Y/cmVkaXJlY3Rsb2NhbGU9ZW4tVVMmcmVkaXJlY3RzbHVnPUphdmFTY3JpcHQlMkZSZWZlcmVuY2UlMkZHbG9iYWxfT2JqZWN0cyUyRkFycmF5JTJGaW5kZXhPZgppZiAoIUFycmF5LnByb3RvdHlwZS5pbmRleE9mKSB7CiAgICBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIChzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXggKi8pIHsKICAgICAgICBpZiAodGhpcyA9PT0gbnVsbCkgewogICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7CiAgICAgICAgfQogICAgICAgIHZhciB0ID0gT2JqZWN0KHRoaXMpOwogICAgICAgIHZhciBsZW4gPSB0Lmxlbmd0aCA+Pj4gMDsKCiAgICAgICAgaWYgKGxlbiA9PT0gMCkgewogICAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgfQogICAgICAgIHZhciBuID0gMDsKICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHsKICAgICAgICAgICAgbiA9IE51bWJlcihhcmd1bWVudHNbMV0pOwogICAgICAgICAgICBpZiAobiAhPT0gbikgewogICAgICAgICAgICAgICAgLy8gc2hvcnRjdXQgZm9yIHZlcmlmeWluZyBpZiBpdCdzIE5hTgogICAgICAgICAgICAgICAgbiA9IDA7CiAgICAgICAgICAgIH0gZWxzZSBpZiAobiAhPT0gMCAmJiBuICE9PSBJbmZpbml0eSAmJiBuICE9PSAtSW5maW5pdHkpIHsKICAgICAgICAgICAgICAgIG4gPSAobiA+IDAgfHwgLTEpICogTWF0aC5mbG9vcihNYXRoLmFicyhuKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKG4gPj0gbGVuKSB7CiAgICAgICAgICAgIHJldHVybiAtMTsKICAgICAgICB9CiAgICAgICAgdmFyIGsgPSBuID49IDAgPyBuIDogTWF0aC5tYXgobGVuIC0gTWF0aC5hYnMobiksIDApOwogICAgICAgIGZvciAoOyBrIDwgbGVuOyBrKyspIHsKICAgICAgICAgICAgaWYgKGsgaW4gdCAmJiB0W2tdID09PSBzZWFyY2hFbGVtZW50KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gazsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gLTE7CiAgICB9Owp9CgovLyBHcnVuZ2V5IE9iamVjdC5pc0Zyb3plbiBoYWNrCmlmICghX2lzRnJvemVuMi5kZWZhdWx0KSB7CiAgICBPYmplY3QuaXNGcm96ZW4gPSBmdW5jdGlvbiAob2JqKSB7CiAgICAgICAgdmFyIGtleSA9ICJ0djRfdGVzdF9mcm96ZW5fa2V5IjsKICAgICAgICB3aGlsZSAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHsKICAgICAgICAgICAga2V5ICs9IE1hdGgucmFuZG9tKCk7CiAgICAgICAgfQogICAgICAgIHRyeSB7CiAgICAgICAgICAgIG9ialtrZXldID0gdHJ1ZTsKICAgICAgICAgICAgZGVsZXRlIG9ialtrZXldOwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICB9Owp9Ci8vIEJhc2VkIG9uOiBodHRwczovL2dpdGh1Yi5jb20vZ2VyYWludGx1ZmYvdXJpLXRlbXBsYXRlcywgYnV0IHdpdGggYWxsIHRoZSBkZS1zdWJzdGl0dXRpb24gc3R1ZmYgcmVtb3ZlZAoKdmFyIHVyaVRlbXBsYXRlR2xvYmFsTW9kaWZpZXJzID0gewogICAgIisiOiB0cnVlLAogICAgIiMiOiB0cnVlLAogICAgIi4iOiB0cnVlLAogICAgIi8iOiB0cnVlLAogICAgIjsiOiB0cnVlLAogICAgIj8iOiB0cnVlLAogICAgIiYiOiB0cnVlCn07CnZhciB1cmlUZW1wbGF0ZVN1ZmZpY2VzID0gewogICAgIioiOiB0cnVlCn07CgpmdW5jdGlvbiBub3RSZWFsbHlQZXJjZW50RW5jb2RlKHN0cmluZykgewogICAgcmV0dXJuIGVuY29kZVVSSShzdHJpbmcpLnJlcGxhY2UoLyUyNVswLTldWzAtOV0vZywgZnVuY3Rpb24gKGRvdWJsZUVuY29kZWQpIHsKICAgICAgICByZXR1cm4gIiUiICsgZG91YmxlRW5jb2RlZC5zdWJzdHJpbmcoMyk7CiAgICB9KTsKfQoKZnVuY3Rpb24gdXJpVGVtcGxhdGVTdWJzdGl0dXRpb24oc3BlYykgewogICAgdmFyIG1vZGlmaWVyID0gIiI7CiAgICBpZiAodXJpVGVtcGxhdGVHbG9iYWxNb2RpZmllcnNbc3BlYy5jaGFyQXQoMCldKSB7CiAgICAgICAgbW9kaWZpZXIgPSBzcGVjLmNoYXJBdCgwKTsKICAgICAgICBzcGVjID0gc3BlYy5zdWJzdHJpbmcoMSk7CiAgICB9CiAgICB2YXIgc2VwYXJhdG9yID0gIiI7CiAgICB2YXIgcHJlZml4ID0gIiI7CiAgICB2YXIgc2hvdWxkRXNjYXBlID0gdHJ1ZTsKICAgIHZhciBzaG93VmFyaWFibGVzID0gZmFsc2U7CiAgICB2YXIgdHJpbUVtcHR5U3RyaW5nID0gZmFsc2U7CiAgICBpZiAobW9kaWZpZXIgPT09ICcrJykgewogICAgICAgIHNob3VsZEVzY2FwZSA9IGZhbHNlOwogICAgfSBlbHNlIGlmIChtb2RpZmllciA9PT0gIi4iKSB7CiAgICAgICAgcHJlZml4ID0gIi4iOwogICAgICAgIHNlcGFyYXRvciA9ICIuIjsKICAgIH0gZWxzZSBpZiAobW9kaWZpZXIgPT09ICIvIikgewogICAgICAgIHByZWZpeCA9ICIvIjsKICAgICAgICBzZXBhcmF0b3IgPSAiLyI7CiAgICB9IGVsc2UgaWYgKG1vZGlmaWVyID09PSAnIycpIHsKICAgICAgICBwcmVmaXggPSAiIyI7CiAgICAgICAgc2hvdWxkRXNjYXBlID0gZmFsc2U7CiAgICB9IGVsc2UgaWYgKG1vZGlmaWVyID09PSAnOycpIHsKICAgICAgICBwcmVmaXggPSAiOyI7CiAgICAgICAgc2VwYXJhdG9yID0gIjsiOwogICAgICAgIHNob3dWYXJpYWJsZXMgPSB0cnVlOwogICAgICAgIHRyaW1FbXB0eVN0cmluZyA9IHRydWU7CiAgICB9IGVsc2UgaWYgKG1vZGlmaWVyID09PSAnPycpIHsKICAgICAgICBwcmVmaXggPSAiPyI7CiAgICAgICAgc2VwYXJhdG9yID0gIiYiOwogICAgICAgIHNob3dWYXJpYWJsZXMgPSB0cnVlOwogICAgfSBlbHNlIGlmIChtb2RpZmllciA9PT0gJyYnKSB7CiAgICAgICAgcHJlZml4ID0gIiYiOwogICAgICAgIHNlcGFyYXRvciA9ICImIjsKICAgICAgICBzaG93VmFyaWFibGVzID0gdHJ1ZTsKICAgIH0KCiAgICB2YXIgdmFyTmFtZXMgPSBbXTsKICAgIHZhciB2YXJMaXN0ID0gc3BlYy5zcGxpdCgiLCIpOwogICAgdmFyIHZhclNwZWNzID0gW107CiAgICB2YXIgdmFyU3BlY01hcCA9IHt9OwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YXJMaXN0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIHZhck5hbWUgPSB2YXJMaXN0W2ldOwogICAgICAgIHZhciB0cnVuY2F0ZSA9IG51bGw7CiAgICAgICAgaWYgKHZhck5hbWUuaW5kZXhPZigiOiIpICE9PSAtMSkgewogICAgICAgICAgICB2YXIgcGFydHMgPSB2YXJOYW1lLnNwbGl0KCI6Iik7CiAgICAgICAgICAgIHZhck5hbWUgPSBwYXJ0c1swXTsKICAgICAgICAgICAgdHJ1bmNhdGUgPSBwYXJzZUludChwYXJ0c1sxXSwgMTApOwogICAgICAgIH0KICAgICAgICB2YXIgc3VmZmljZXMgPSB7fTsKICAgICAgICB3aGlsZSAodXJpVGVtcGxhdGVTdWZmaWNlc1t2YXJOYW1lLmNoYXJBdCh2YXJOYW1lLmxlbmd0aCAtIDEpXSkgewogICAgICAgICAgICBzdWZmaWNlc1t2YXJOYW1lLmNoYXJBdCh2YXJOYW1lLmxlbmd0aCAtIDEpXSA9IHRydWU7CiAgICAgICAgICAgIHZhck5hbWUgPSB2YXJOYW1lLnN1YnN0cmluZygwLCB2YXJOYW1lLmxlbmd0aCAtIDEpOwogICAgICAgIH0KICAgICAgICB2YXIgdmFyU3BlYyA9IHsKICAgICAgICAgICAgdHJ1bmNhdGU6IHRydW5jYXRlLAogICAgICAgICAgICBuYW1lOiB2YXJOYW1lLAogICAgICAgICAgICBzdWZmaWNlczogc3VmZmljZXMKICAgICAgICB9OwogICAgICAgIHZhclNwZWNzLnB1c2godmFyU3BlYyk7CiAgICAgICAgdmFyU3BlY01hcFt2YXJOYW1lXSA9IHZhclNwZWM7CiAgICAgICAgdmFyTmFtZXMucHVzaCh2YXJOYW1lKTsKICAgIH0KICAgIHZhciBzdWJGdW5jdGlvbiA9IGZ1bmN0aW9uIHN1YkZ1bmN0aW9uKHZhbHVlRnVuY3Rpb24pIHsKICAgICAgICB2YXIgcmVzdWx0ID0gIiI7CiAgICAgICAgdmFyIHN0YXJ0SW5kZXggPSAwOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFyU3BlY3MubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIHZhclNwZWMgPSB2YXJTcGVjc1tpXTsKICAgICAgICAgICAgdmFyIHZhbHVlID0gdmFsdWVGdW5jdGlvbih2YXJTcGVjLm5hbWUpOwogICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCB8fCBBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDAgfHwgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KSh2YWx1ZSkpID09PSAnb2JqZWN0JyAmJiAoMCwgX2tleXMyLmRlZmF1bHQpKHZhbHVlKS5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICAgIHN0YXJ0SW5kZXgrKzsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChpID09PSBzdGFydEluZGV4KSB7CiAgICAgICAgICAgICAgICByZXN1bHQgKz0gcHJlZml4OwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmVzdWx0ICs9IHNlcGFyYXRvciB8fCAiLCI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7CiAgICAgICAgICAgICAgICBpZiAoc2hvd1ZhcmlhYmxlcykgewogICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB2YXJTcGVjLm5hbWUgKyAiPSI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGogPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB2YXJTcGVjLnN1ZmZpY2VzWycqJ10gPyBzZXBhcmF0b3IgfHwgIiwiIDogIiwiOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFyU3BlYy5zdWZmaWNlc1snKiddICYmIHNob3dWYXJpYWJsZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB2YXJTcGVjLm5hbWUgKyAiPSI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHNob3VsZEVzY2FwZSA/IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZVtqXSkucmVwbGFjZSgvIS9nLCAiJTIxIikgOiBub3RSZWFsbHlQZXJjZW50RW5jb2RlKHZhbHVlW2pdKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmICgodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHZhbHVlKSkgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICBpZiAoc2hvd1ZhcmlhYmxlcyAmJiAhdmFyU3BlYy5zdWZmaWNlc1snKiddKSB7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHZhclNwZWMubmFtZSArICI9IjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBmaXJzdCA9IHRydWU7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIWZpcnN0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB2YXJTcGVjLnN1ZmZpY2VzWycqJ10gPyBzZXBhcmF0b3IgfHwgIiwiIDogIiwiOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBmaXJzdCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzaG91bGRFc2NhcGUgPyBlbmNvZGVVUklDb21wb25lbnQoa2V5KS5yZXBsYWNlKC8hL2csICIlMjEiKSA6IG5vdFJlYWxseVBlcmNlbnRFbmNvZGUoa2V5KTsKICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gdmFyU3BlYy5zdWZmaWNlc1snKiddID8gJz0nIDogIiwiOwogICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzaG91bGRFc2NhcGUgPyBlbmNvZGVVUklDb21wb25lbnQodmFsdWVba2V5XSkucmVwbGFjZSgvIS9nLCAiJTIxIikgOiBub3RSZWFsbHlQZXJjZW50RW5jb2RlKHZhbHVlW2tleV0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKHNob3dWYXJpYWJsZXMpIHsKICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gdmFyU3BlYy5uYW1lOwogICAgICAgICAgICAgICAgICAgIGlmICghdHJpbUVtcHR5U3RyaW5nIHx8IHZhbHVlICE9PSAiIikgewogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gIj0iOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICh2YXJTcGVjLnRydW5jYXRlICE9IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygwLCB2YXJTcGVjLnRydW5jYXRlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzaG91bGRFc2NhcGUgPyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpLnJlcGxhY2UoLyEvZywgIiUyMSIpIDogbm90UmVhbGx5UGVyY2VudEVuY29kZSh2YWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH07CiAgICBzdWJGdW5jdGlvbi52YXJOYW1lcyA9IHZhck5hbWVzOwogICAgcmV0dXJuIHsKICAgICAgICBwcmVmaXg6IHByZWZpeCwKICAgICAgICBzdWJzdGl0dXRpb246IHN1YkZ1bmN0aW9uCiAgICB9Owp9CgpmdW5jdGlvbiBVcmlUZW1wbGF0ZSh0ZW1wbGF0ZSkgewogICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFVyaVRlbXBsYXRlKSkgewogICAgICAgIHJldHVybiBuZXcgVXJpVGVtcGxhdGUodGVtcGxhdGUpOwogICAgfQogICAgdmFyIHBhcnRzID0gdGVtcGxhdGUuc3BsaXQoInsiKTsKICAgIHZhciB0ZXh0UGFydHMgPSBbcGFydHMuc2hpZnQoKV07CiAgICB2YXIgcHJlZml4ZXMgPSBbXTsKICAgIHZhciBzdWJzdGl0dXRpb25zID0gW107CiAgICB2YXIgdmFyTmFtZXMgPSBbXTsKICAgIHdoaWxlIChwYXJ0cy5sZW5ndGggPiAwKSB7CiAgICAgICAgdmFyIHBhcnQgPSBwYXJ0cy5zaGlmdCgpOwogICAgICAgIHZhciBzcGVjID0gcGFydC5zcGxpdCgifSIpWzBdOwogICAgICAgIHZhciByZW1haW5kZXIgPSBwYXJ0LnN1YnN0cmluZyhzcGVjLmxlbmd0aCArIDEpOwogICAgICAgIHZhciBmdW5jcyA9IHVyaVRlbXBsYXRlU3Vic3RpdHV0aW9uKHNwZWMpOwogICAgICAgIHN1YnN0aXR1dGlvbnMucHVzaChmdW5jcy5zdWJzdGl0dXRpb24pOwogICAgICAgIHByZWZpeGVzLnB1c2goZnVuY3MucHJlZml4KTsKICAgICAgICB0ZXh0UGFydHMucHVzaChyZW1haW5kZXIpOwogICAgICAgIHZhck5hbWVzID0gdmFyTmFtZXMuY29uY2F0KGZ1bmNzLnN1YnN0aXR1dGlvbi52YXJOYW1lcyk7CiAgICB9CiAgICB0aGlzLmZpbGwgPSBmdW5jdGlvbiAodmFsdWVGdW5jdGlvbikgewogICAgICAgIHZhciByZXN1bHQgPSB0ZXh0UGFydHNbMF07CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJzdGl0dXRpb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHZhciBzdWJzdGl0dXRpb24gPSBzdWJzdGl0dXRpb25zW2ldOwogICAgICAgICAgICByZXN1bHQgKz0gc3Vic3RpdHV0aW9uKHZhbHVlRnVuY3Rpb24pOwogICAgICAgICAgICByZXN1bHQgKz0gdGV4dFBhcnRzW2kgKyAxXTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH07CiAgICB0aGlzLnZhck5hbWVzID0gdmFyTmFtZXM7CiAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGU7Cn0KClVyaVRlbXBsYXRlLnByb3RvdHlwZSA9IHsKICAgIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHsKICAgICAgICByZXR1cm4gdGhpcy50ZW1wbGF0ZTsKICAgIH0sCiAgICBmaWxsRnJvbU9iamVjdDogZnVuY3Rpb24gZmlsbEZyb21PYmplY3Qob2JqKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZmlsbChmdW5jdGlvbiAodmFyTmFtZSkgewogICAgICAgICAgICByZXR1cm4gb2JqW3Zhck5hbWVdOwogICAgICAgIH0pOwogICAgfQp9Owp2YXIgVmFsaWRhdG9yQ29udGV4dCA9IGZ1bmN0aW9uIFZhbGlkYXRvckNvbnRleHQocGFyZW50LCBjb2xsZWN0TXVsdGlwbGUsIGVycm9yUmVwb3J0ZXIsIGNoZWNrUmVjdXJzaXZlLCB0cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7CiAgICB0aGlzLm1pc3NpbmcgPSBbXTsKICAgIHRoaXMubWlzc2luZ01hcCA9IHt9OwogICAgdGhpcy5mb3JtYXRWYWxpZGF0b3JzID0gcGFyZW50ID8gKDAsIF9jcmVhdGUyLmRlZmF1bHQpKHBhcmVudC5mb3JtYXRWYWxpZGF0b3JzKSA6IHt9OwogICAgdGhpcy5zY2hlbWFzID0gcGFyZW50ID8gKDAsIF9jcmVhdGUyLmRlZmF1bHQpKHBhcmVudC5zY2hlbWFzKSA6IHt9OwogICAgdGhpcy5jb2xsZWN0TXVsdGlwbGUgPSBjb2xsZWN0TXVsdGlwbGU7CiAgICB0aGlzLmVycm9ycyA9IFtdOwogICAgdGhpcy5oYW5kbGVFcnJvciA9IGNvbGxlY3RNdWx0aXBsZSA/IHRoaXMuY29sbGVjdEVycm9yIDogdGhpcy5yZXR1cm5FcnJvcjsKICAgIGlmIChjaGVja1JlY3Vyc2l2ZSkgewogICAgICAgIHRoaXMuY2hlY2tSZWN1cnNpdmUgPSB0cnVlOwogICAgICAgIHRoaXMuc2Nhbm5lZCA9IFtdOwogICAgICAgIHRoaXMuc2Nhbm5lZEZyb3plbiA9IFtdOwogICAgICAgIHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXMgPSBbXTsKICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW5WYWxpZGF0aW9uRXJyb3JzID0gW107CiAgICAgICAgdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5ID0gJ3R2NF92YWxpZGF0aW9uX2lkJzsKICAgICAgICB0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXkgPSAndHY0X3ZhbGlkYXRpb25fZXJyb3JzX2lkJzsKICAgIH0KICAgIGlmICh0cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7CiAgICAgICAgdGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzID0gdHJ1ZTsKICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRocyA9IHt9OwogICAgICAgIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMgPSB7fTsKICAgIH0KICAgIHRoaXMuZXJyb3JSZXBvcnRlciA9IGVycm9yUmVwb3J0ZXIgfHwgZGVmYXVsdEVycm9yUmVwb3J0ZXIoJ2VuJyk7CiAgICBpZiAodHlwZW9mIHRoaXMuZXJyb3JSZXBvcnRlciA9PT0gJ3N0cmluZycpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlYnVnJyk7CiAgICB9CiAgICB0aGlzLmRlZmluZWRLZXl3b3JkcyA9IHt9OwogICAgaWYgKHBhcmVudCkgewogICAgICAgIGZvciAodmFyIGtleSBpbiBwYXJlbnQuZGVmaW5lZEtleXdvcmRzKSB7CiAgICAgICAgICAgIHRoaXMuZGVmaW5lZEtleXdvcmRzW2tleV0gPSBwYXJlbnQuZGVmaW5lZEtleXdvcmRzW2tleV0uc2xpY2UoMCk7CiAgICAgICAgfQogICAgfQp9OwpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5kZWZpbmVLZXl3b3JkID0gZnVuY3Rpb24gKGtleXdvcmQsIGtleXdvcmRGdW5jdGlvbikgewogICAgdGhpcy5kZWZpbmVkS2V5d29yZHNba2V5d29yZF0gPSB0aGlzLmRlZmluZWRLZXl3b3Jkc1trZXl3b3JkXSB8fCBbXTsKICAgIHRoaXMuZGVmaW5lZEtleXdvcmRzW2tleXdvcmRdLnB1c2goa2V5d29yZEZ1bmN0aW9uKTsKfTsKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUuY3JlYXRlRXJyb3IgPSBmdW5jdGlvbiAoY29kZSwgbWVzc2FnZVBhcmFtcywgZGF0YVBhdGgsIHNjaGVtYVBhdGgsIHN1YkVycm9ycywgZGF0YSwgc2NoZW1hKSB7CiAgICB2YXIgZXJyb3IgPSBuZXcgVmFsaWRhdGlvbkVycm9yKGNvZGUsIG1lc3NhZ2VQYXJhbXMsIGRhdGFQYXRoLCBzY2hlbWFQYXRoLCBzdWJFcnJvcnMpOwogICAgZXJyb3IubWVzc2FnZSA9IHRoaXMuZXJyb3JSZXBvcnRlcihlcnJvciwgZGF0YSwgc2NoZW1hKTsKICAgIHJldHVybiBlcnJvcjsKfTsKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUucmV0dXJuRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHsKICAgIHJldHVybiBlcnJvcjsKfTsKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUuY29sbGVjdEVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7CiAgICBpZiAoZXJyb3IpIHsKICAgICAgICB0aGlzLmVycm9ycy5wdXNoKGVycm9yKTsKICAgIH0KICAgIHJldHVybiBudWxsOwp9OwpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5wcmVmaXhFcnJvcnMgPSBmdW5jdGlvbiAoc3RhcnRJbmRleCwgZGF0YVBhdGgsIHNjaGVtYVBhdGgpIHsKICAgIGZvciAodmFyIGkgPSBzdGFydEluZGV4OyBpIDwgdGhpcy5lcnJvcnMubGVuZ3RoOyBpKyspIHsKICAgICAgICB0aGlzLmVycm9yc1tpXSA9IHRoaXMuZXJyb3JzW2ldLnByZWZpeFdpdGgoZGF0YVBhdGgsIHNjaGVtYVBhdGgpOwogICAgfQogICAgcmV0dXJuIHRoaXM7Cn07ClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmJhblVua25vd25Qcm9wZXJ0aWVzID0gZnVuY3Rpb24gKGRhdGEsIHNjaGVtYSkgewogICAgZm9yICh2YXIgdW5rbm93blBhdGggaW4gdGhpcy51bmtub3duUHJvcGVydHlQYXRocykgewogICAgICAgIHZhciBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5VTktOT1dOX1BST1BFUlRZLCB7IHBhdGg6IHVua25vd25QYXRoIH0sIHVua25vd25QYXRoLCAiIiwgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7CiAgICAgICAgaWYgKHJlc3VsdCkgewogICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUuYWRkRm9ybWF0ID0gZnVuY3Rpb24gKGZvcm1hdCwgdmFsaWRhdG9yKSB7CiAgICBpZiAoKHR5cGVvZiBmb3JtYXQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoZm9ybWF0KSkgPT09ICdvYmplY3QnKSB7CiAgICAgICAgZm9yICh2YXIga2V5IGluIGZvcm1hdCkgewogICAgICAgICAgICB0aGlzLmFkZEZvcm1hdChrZXksIGZvcm1hdFtrZXldKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CiAgICB0aGlzLmZvcm1hdFZhbGlkYXRvcnNbZm9ybWF0XSA9IHZhbGlkYXRvcjsKfTsKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUucmVzb2x2ZVJlZnMgPSBmdW5jdGlvbiAoc2NoZW1hLCB1cmxIaXN0b3J5KSB7CiAgICBpZiAoc2NoZW1hWyckcmVmJ10gIT09IHVuZGVmaW5lZCkgewogICAgICAgIHVybEhpc3RvcnkgPSB1cmxIaXN0b3J5IHx8IHt9OwogICAgICAgIGlmICh1cmxIaXN0b3J5W3NjaGVtYVsnJHJlZiddXSkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLkNJUkNVTEFSX1JFRkVSRU5DRSwgeyB1cmxzOiAoMCwgX2tleXMyLmRlZmF1bHQpKHVybEhpc3RvcnkpLmpvaW4oJywgJykgfSwgJycsICcnLCBudWxsLCB1bmRlZmluZWQsIHNjaGVtYSk7CiAgICAgICAgfQogICAgICAgIHVybEhpc3Rvcnlbc2NoZW1hWyckcmVmJ11dID0gdHJ1ZTsKICAgICAgICBzY2hlbWEgPSB0aGlzLmdldFNjaGVtYShzY2hlbWFbJyRyZWYnXSwgdXJsSGlzdG9yeSk7CiAgICB9CiAgICByZXR1cm4gc2NoZW1hOwp9OwpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5nZXRTY2hlbWEgPSBmdW5jdGlvbiAodXJsLCB1cmxIaXN0b3J5KSB7CiAgICB2YXIgc2NoZW1hOwogICAgaWYgKHRoaXMuc2NoZW1hc1t1cmxdICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBzY2hlbWEgPSB0aGlzLnNjaGVtYXNbdXJsXTsKICAgICAgICByZXR1cm4gdGhpcy5yZXNvbHZlUmVmcyhzY2hlbWEsIHVybEhpc3RvcnkpOwogICAgfQogICAgdmFyIGJhc2VVcmwgPSB1cmw7CiAgICB2YXIgZnJhZ21lbnQgPSAiIjsKICAgIGlmICh1cmwuaW5kZXhPZignIycpICE9PSAtMSkgewogICAgICAgIGZyYWdtZW50ID0gdXJsLnN1YnN0cmluZyh1cmwuaW5kZXhPZigiIyIpICsgMSk7CiAgICAgICAgYmFzZVVybCA9IHVybC5zdWJzdHJpbmcoMCwgdXJsLmluZGV4T2YoIiMiKSk7CiAgICB9CiAgICBpZiAoKDAsIF90eXBlb2YzLmRlZmF1bHQpKHRoaXMuc2NoZW1hc1tiYXNlVXJsXSkgPT09ICdvYmplY3QnKSB7CiAgICAgICAgc2NoZW1hID0gdGhpcy5zY2hlbWFzW2Jhc2VVcmxdOwogICAgICAgIHZhciBwb2ludGVyUGF0aCA9IGRlY29kZVVSSUNvbXBvbmVudChmcmFnbWVudCk7CiAgICAgICAgaWYgKHBvaW50ZXJQYXRoID09PSAiIikgewogICAgICAgICAgICByZXR1cm4gdGhpcy5yZXNvbHZlUmVmcyhzY2hlbWEsIHVybEhpc3RvcnkpOwogICAgICAgIH0gZWxzZSBpZiAocG9pbnRlclBhdGguY2hhckF0KDApICE9PSAiLyIpIHsKICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgICAgICB9CiAgICAgICAgdmFyIHBhcnRzID0gcG9pbnRlclBhdGguc3BsaXQoIi8iKS5zbGljZSgxKTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSBwYXJ0c1tpXS5yZXBsYWNlKC9+MS9nLCAiLyIpLnJlcGxhY2UoL34wL2csICJ+Iik7CiAgICAgICAgICAgIGlmIChzY2hlbWFbY29tcG9uZW50XSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICBzY2hlbWEgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBzY2hlbWEgPSBzY2hlbWFbY29tcG9uZW50XTsKICAgICAgICB9CiAgICAgICAgaWYgKHNjaGVtYSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlc29sdmVSZWZzKHNjaGVtYSwgdXJsSGlzdG9yeSk7CiAgICAgICAgfQogICAgfQogICAgaWYgKHRoaXMubWlzc2luZ1tiYXNlVXJsXSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgdGhpcy5taXNzaW5nLnB1c2goYmFzZVVybCk7CiAgICAgICAgdGhpcy5taXNzaW5nW2Jhc2VVcmxdID0gYmFzZVVybDsKICAgICAgICB0aGlzLm1pc3NpbmdNYXBbYmFzZVVybF0gPSBiYXNlVXJsOwogICAgfQp9OwpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5zZWFyY2hTY2hlbWFzID0gZnVuY3Rpb24gKHNjaGVtYSwgdXJsKSB7CiAgICBpZiAoQXJyYXkuaXNBcnJheShzY2hlbWEpKSB7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY2hlbWEubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdGhpcy5zZWFyY2hTY2hlbWFzKHNjaGVtYVtpXSwgdXJsKTsKICAgICAgICB9CiAgICB9IGVsc2UgaWYgKHNjaGVtYSAmJiAodHlwZW9mIHNjaGVtYSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShzY2hlbWEpKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICBpZiAodHlwZW9mIHNjaGVtYS5pZCA9PT0gInN0cmluZyIpIHsKICAgICAgICAgICAgaWYgKGlzVHJ1c3RlZFVybCh1cmwsIHNjaGVtYS5pZCkpIHsKICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjaGVtYXNbc2NoZW1hLmlkXSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2hlbWFzW3NjaGVtYS5pZF0gPSBzY2hlbWE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZm9yICh2YXIga2V5IGluIHNjaGVtYSkgewogICAgICAgICAgICBpZiAoa2V5ICE9PSAiZW51bSIpIHsKICAgICAgICAgICAgICAgIGlmICgoMCwgX3R5cGVvZjMuZGVmYXVsdCkoc2NoZW1hW2tleV0pID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgICAgIHRoaXMuc2VhcmNoU2NoZW1hcyhzY2hlbWFba2V5XSwgdXJsKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAiJHJlZiIpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdXJpID0gZ2V0RG9jdW1lbnRVcmkoc2NoZW1hW2tleV0pOwogICAgICAgICAgICAgICAgICAgIGlmICh1cmkgJiYgdGhpcy5zY2hlbWFzW3VyaV0gPT09IHVuZGVmaW5lZCAmJiB0aGlzLm1pc3NpbmdNYXBbdXJpXSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWlzc2luZ01hcFt1cmldID0gdXJpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfTsKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUuYWRkU2NoZW1hID0gZnVuY3Rpb24gKHVybCwgc2NoZW1hKSB7CiAgICAvL292ZXJsb2FkCiAgICBpZiAodHlwZW9mIHVybCAhPT0gJ3N0cmluZycgfHwgdHlwZW9mIHNjaGVtYSA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICBpZiAoKHR5cGVvZiB1cmwgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkodXJsKSkgPT09ICdvYmplY3QnICYmIHR5cGVvZiB1cmwuaWQgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgIHNjaGVtYSA9IHVybDsKICAgICAgICAgICAgdXJsID0gc2NoZW1hLmlkOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CiAgICBpZiAodXJsID09PSBnZXREb2N1bWVudFVyaSh1cmwpICsgIiMiKSB7CiAgICAgICAgLy8gUmVtb3ZlIGVtcHR5IGZyYWdtZW50CiAgICAgICAgdXJsID0gZ2V0RG9jdW1lbnRVcmkodXJsKTsKICAgIH0KICAgIHRoaXMuc2NoZW1hc1t1cmxdID0gc2NoZW1hOwogICAgZGVsZXRlIHRoaXMubWlzc2luZ01hcFt1cmxdOwogICAgbm9ybVNjaGVtYShzY2hlbWEsIHVybCk7CiAgICB0aGlzLnNlYXJjaFNjaGVtYXMoc2NoZW1hLCB1cmwpOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUuZ2V0U2NoZW1hTWFwID0gZnVuY3Rpb24gKCkgewogICAgdmFyIG1hcCA9IHt9OwogICAgZm9yICh2YXIga2V5IGluIHRoaXMuc2NoZW1hcykgewogICAgICAgIG1hcFtrZXldID0gdGhpcy5zY2hlbWFzW2tleV07CiAgICB9CiAgICByZXR1cm4gbWFwOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUuZ2V0U2NoZW1hVXJpcyA9IGZ1bmN0aW9uIChmaWx0ZXJSZWdFeHApIHsKICAgIHZhciBsaXN0ID0gW107CiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5zY2hlbWFzKSB7CiAgICAgICAgaWYgKCFmaWx0ZXJSZWdFeHAgfHwgZmlsdGVyUmVnRXhwLnRlc3Qoa2V5KSkgewogICAgICAgICAgICBsaXN0LnB1c2goa2V5KTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gbGlzdDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmdldE1pc3NpbmdVcmlzID0gZnVuY3Rpb24gKGZpbHRlclJlZ0V4cCkgewogICAgdmFyIGxpc3QgPSBbXTsKICAgIGZvciAodmFyIGtleSBpbiB0aGlzLm1pc3NpbmdNYXApIHsKICAgICAgICBpZiAoIWZpbHRlclJlZ0V4cCB8fCBmaWx0ZXJSZWdFeHAudGVzdChrZXkpKSB7CiAgICAgICAgICAgIGxpc3QucHVzaChrZXkpOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBsaXN0Owp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUuZHJvcFNjaGVtYXMgPSBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLnNjaGVtYXMgPSB7fTsKICAgIHRoaXMucmVzZXQoKTsKfTsKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLm1pc3NpbmcgPSBbXTsKICAgIHRoaXMubWlzc2luZ01hcCA9IHt9OwogICAgdGhpcy5lcnJvcnMgPSBbXTsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQWxsID0gZnVuY3Rpb24gKGRhdGEsIHNjaGVtYSwgZGF0YVBhdGhQYXJ0cywgc2NoZW1hUGF0aFBhcnRzLCBkYXRhUG9pbnRlclBhdGgpIHsKICAgIHZhciB0b3BMZXZlbDsKICAgIHNjaGVtYSA9IHRoaXMucmVzb2x2ZVJlZnMoc2NoZW1hKTsKICAgIGlmICghc2NoZW1hKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9IGVsc2UgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIFZhbGlkYXRpb25FcnJvcikgewogICAgICAgIHRoaXMuZXJyb3JzLnB1c2goc2NoZW1hKTsKICAgICAgICByZXR1cm4gc2NoZW1hOwogICAgfQoKICAgIHZhciBzdGFydEVycm9yQ291bnQgPSB0aGlzLmVycm9ycy5sZW5ndGg7CiAgICB2YXIgZnJvemVuSW5kZXgsCiAgICAgICAgc2Nhbm5lZEZyb3plblNjaGVtYUluZGV4ID0gbnVsbCwKICAgICAgICBzY2FubmVkU2NoZW1hc0luZGV4ID0gbnVsbDsKICAgIGlmICh0aGlzLmNoZWNrUmVjdXJzaXZlICYmIGRhdGEgJiYgKHR5cGVvZiBkYXRhID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGRhdGEpKSA9PT0gJ29iamVjdCcpIHsKICAgICAgICB0b3BMZXZlbCA9ICF0aGlzLnNjYW5uZWQubGVuZ3RoOwogICAgICAgIGlmIChkYXRhW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV0pIHsKICAgICAgICAgICAgdmFyIHNjaGVtYUluZGV4ID0gZGF0YVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldLmluZGV4T2Yoc2NoZW1hKTsKICAgICAgICAgICAgaWYgKHNjaGVtYUluZGV4ICE9PSAtMSkgewogICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSB0aGlzLmVycm9ycy5jb25jYXQoZGF0YVt0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXldW3NjaGVtYUluZGV4XSk7CiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoKDAsIF9pc0Zyb3plbjIuZGVmYXVsdCkoZGF0YSkpIHsKICAgICAgICAgICAgZnJvemVuSW5kZXggPSB0aGlzLnNjYW5uZWRGcm96ZW4uaW5kZXhPZihkYXRhKTsKICAgICAgICAgICAgaWYgKGZyb3plbkluZGV4ICE9PSAtMSkgewogICAgICAgICAgICAgICAgdmFyIGZyb3plblNjaGVtYUluZGV4ID0gdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hc1tmcm96ZW5JbmRleF0uaW5kZXhPZihzY2hlbWEpOwogICAgICAgICAgICAgICAgaWYgKGZyb3plblNjaGVtYUluZGV4ICE9PSAtMSkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuY29uY2F0KHRoaXMuc2Nhbm5lZEZyb3plblZhbGlkYXRpb25FcnJvcnNbZnJvemVuSW5kZXhdW2Zyb3plblNjaGVtYUluZGV4XSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgdGhpcy5zY2FubmVkLnB1c2goZGF0YSk7CiAgICAgICAgaWYgKCgwLCBfaXNGcm96ZW4yLmRlZmF1bHQpKGRhdGEpKSB7CiAgICAgICAgICAgIGlmIChmcm96ZW5JbmRleCA9PT0gLTEpIHsKICAgICAgICAgICAgICAgIGZyb3plbkluZGV4ID0gdGhpcy5zY2FubmVkRnJvemVuLmxlbmd0aDsKICAgICAgICAgICAgICAgIHRoaXMuc2Nhbm5lZEZyb3plbi5wdXNoKGRhdGEpOwogICAgICAgICAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hcy5wdXNoKFtdKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBzY2FubmVkRnJvemVuU2NoZW1hSW5kZXggPSB0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzW2Zyb3plbkluZGV4XS5sZW5ndGg7CiAgICAgICAgICAgIHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXNbZnJvemVuSW5kZXhdW3NjYW5uZWRGcm96ZW5TY2hlbWFJbmRleF0gPSBzY2hlbWE7CiAgICAgICAgICAgIHRoaXMuc2Nhbm5lZEZyb3plblZhbGlkYXRpb25FcnJvcnNbZnJvemVuSW5kZXhdW3NjYW5uZWRGcm96ZW5TY2hlbWFJbmRleF0gPSBbXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAoIWRhdGFbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XSkgewogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShkYXRhLCB0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXksIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFtdLAogICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShkYXRhLCB0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXksIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFtdLAogICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICAgICAvL0lFIDcvOCB3b3JrYXJvdW5kCiAgICAgICAgICAgICAgICAgICAgZGF0YVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldID0gW107CiAgICAgICAgICAgICAgICAgICAgZGF0YVt0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXldID0gW107CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgc2Nhbm5lZFNjaGVtYXNJbmRleCA9IGRhdGFbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XS5sZW5ndGg7CiAgICAgICAgICAgIGRhdGFbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XVtzY2FubmVkU2NoZW1hc0luZGV4XSA9IHNjaGVtYTsKICAgICAgICAgICAgZGF0YVt0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXldW3NjYW5uZWRTY2hlbWFzSW5kZXhdID0gW107CiAgICAgICAgfQogICAgfQoKICAgIHZhciBlcnJvckNvdW50ID0gdGhpcy5lcnJvcnMubGVuZ3RoOwogICAgdmFyIGVycm9yID0gdGhpcy52YWxpZGF0ZUJhc2ljKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlTnVtZXJpYyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgdGhpcy52YWxpZGF0ZVN0cmluZyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgdGhpcy52YWxpZGF0ZUFycmF5KGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlT2JqZWN0KGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlQ29tYmluYXRpb25zKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlSHlwZXJtZWRpYShkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgdGhpcy52YWxpZGF0ZUZvcm1hdChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgdGhpcy52YWxpZGF0ZURlZmluZWRLZXl3b3JkcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgbnVsbDsKCiAgICBpZiAodG9wTGV2ZWwpIHsKICAgICAgICB3aGlsZSAodGhpcy5zY2FubmVkLmxlbmd0aCkgewogICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMuc2Nhbm5lZC5wb3AoKTsKICAgICAgICAgICAgZGVsZXRlIGl0ZW1bdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XTsKICAgICAgICB9CiAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuID0gW107CiAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hcyA9IFtdOwogICAgfQoKICAgIGlmIChlcnJvciB8fCBlcnJvckNvdW50ICE9PSB0aGlzLmVycm9ycy5sZW5ndGgpIHsKICAgICAgICB3aGlsZSAoZGF0YVBhdGhQYXJ0cyAmJiBkYXRhUGF0aFBhcnRzLmxlbmd0aCB8fCBzY2hlbWFQYXRoUGFydHMgJiYgc2NoZW1hUGF0aFBhcnRzLmxlbmd0aCkgewogICAgICAgICAgICB2YXIgZGF0YVBhcnQgPSBkYXRhUGF0aFBhcnRzICYmIGRhdGFQYXRoUGFydHMubGVuZ3RoID8gIiIgKyBkYXRhUGF0aFBhcnRzLnBvcCgpIDogbnVsbDsKICAgICAgICAgICAgdmFyIHNjaGVtYVBhcnQgPSBzY2hlbWFQYXRoUGFydHMgJiYgc2NoZW1hUGF0aFBhcnRzLmxlbmd0aCA/ICIiICsgc2NoZW1hUGF0aFBhcnRzLnBvcCgpIDogbnVsbDsKICAgICAgICAgICAgaWYgKGVycm9yKSB7CiAgICAgICAgICAgICAgICBlcnJvciA9IGVycm9yLnByZWZpeFdpdGgoZGF0YVBhcnQsIHNjaGVtYVBhcnQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMucHJlZml4RXJyb3JzKGVycm9yQ291bnQsIGRhdGFQYXJ0LCBzY2hlbWFQYXJ0KTsKICAgICAgICB9CiAgICB9CgogICAgaWYgKHNjYW5uZWRGcm96ZW5TY2hlbWFJbmRleCAhPT0gbnVsbCkgewogICAgICAgIHRoaXMuc2Nhbm5lZEZyb3plblZhbGlkYXRpb25FcnJvcnNbZnJvemVuSW5kZXhdW3NjYW5uZWRGcm96ZW5TY2hlbWFJbmRleF0gPSB0aGlzLmVycm9ycy5zbGljZShzdGFydEVycm9yQ291bnQpOwogICAgfSBlbHNlIGlmIChzY2FubmVkU2NoZW1hc0luZGV4ICE9PSBudWxsKSB7CiAgICAgICAgZGF0YVt0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXldW3NjYW5uZWRTY2hlbWFzSW5kZXhdID0gdGhpcy5lcnJvcnMuc2xpY2Uoc3RhcnRFcnJvckNvdW50KTsKICAgIH0KCiAgICByZXR1cm4gdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7Cn07ClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gKGRhdGEsIHNjaGVtYSkgewogICAgaWYgKHR5cGVvZiBzY2hlbWEuZm9ybWF0ICE9PSAnc3RyaW5nJyB8fCAhdGhpcy5mb3JtYXRWYWxpZGF0b3JzW3NjaGVtYS5mb3JtYXRdKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICB2YXIgZXJyb3JNZXNzYWdlID0gdGhpcy5mb3JtYXRWYWxpZGF0b3JzW3NjaGVtYS5mb3JtYXRdLmNhbGwobnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgIGlmICh0eXBlb2YgZXJyb3JNZXNzYWdlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgZXJyb3JNZXNzYWdlID09PSAnbnVtYmVyJykgewogICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuRk9STUFUX0NVU1RPTSwgeyBtZXNzYWdlOiBlcnJvck1lc3NhZ2UgfSwgJycsICcvZm9ybWF0JywgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgIH0gZWxzZSBpZiAoZXJyb3JNZXNzYWdlICYmICh0eXBlb2YgZXJyb3JNZXNzYWdlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGVycm9yTWVzc2FnZSkpID09PSAnb2JqZWN0JykgewogICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuRk9STUFUX0NVU1RPTSwgeyBtZXNzYWdlOiBlcnJvck1lc3NhZ2UubWVzc2FnZSB8fCAiPyIgfSwgZXJyb3JNZXNzYWdlLmRhdGFQYXRoIHx8ICcnLCBlcnJvck1lc3NhZ2Uuc2NoZW1hUGF0aCB8fCAiL2Zvcm1hdCIsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICB9CiAgICByZXR1cm4gbnVsbDsKfTsKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVEZWZpbmVkS2V5d29yZHMgPSBmdW5jdGlvbiAoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHsKICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmRlZmluZWRLZXl3b3JkcykgewogICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hW2tleV0gPT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICB2YXIgdmFsaWRhdGlvbkZ1bmN0aW9ucyA9IHRoaXMuZGVmaW5lZEtleXdvcmRzW2tleV07CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWxpZGF0aW9uRnVuY3Rpb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHZhciBmdW5jID0gdmFsaWRhdGlvbkZ1bmN0aW9uc1tpXTsKICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMoZGF0YSwgc2NoZW1hW2tleV0sIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKTsKICAgICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiByZXN1bHQgPT09ICdudW1iZXInKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLktFWVdPUkRfQ1VTVE9NLCB7CiAgICAgICAgICAgICAgICAgICAga2V5OiBrZXksCiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogcmVzdWx0CiAgICAgICAgICAgICAgICB9LCAnJywgJycsIG51bGwsIGRhdGEsIHNjaGVtYSkucHJlZml4V2l0aChudWxsLCBrZXkpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdCAmJiAodHlwZW9mIHJlc3VsdCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShyZXN1bHQpKSA9PT0gJ29iamVjdCcpIHsKICAgICAgICAgICAgICAgIHZhciBjb2RlID0gcmVzdWx0LmNvZGU7CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvZGUgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFFcnJvckNvZGVzW2NvZGVdKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5kZWZpbmVkIGVycm9yIGNvZGUgKHVzZSBkZWZpbmVFcnJvcik6ICcgKyBjb2RlKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgY29kZSA9IEVycm9yQ29kZXNbY29kZV07CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb2RlICE9PSAnbnVtYmVyJykgewogICAgICAgICAgICAgICAgICAgIGNvZGUgPSBFcnJvckNvZGVzLktFWVdPUkRfQ1VTVE9NOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2VQYXJhbXMgPSAoMCwgX3R5cGVvZjMuZGVmYXVsdCkocmVzdWx0Lm1lc3NhZ2UpID09PSAnb2JqZWN0JyA/IHJlc3VsdC5tZXNzYWdlIDogewogICAgICAgICAgICAgICAgICAgIGtleToga2V5LAogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHJlc3VsdC5tZXNzYWdlIHx8ICI/IgogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHZhciBzY2hlbWFQYXRoID0gcmVzdWx0LnNjaGVtYVBhdGggfHwgIi8iICsga2V5LnJlcGxhY2UoL34vZywgJ34wJykucmVwbGFjZSgvXC8vZywgJ34xJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihjb2RlLCBtZXNzYWdlUGFyYW1zLCByZXN1bHQuZGF0YVBhdGggfHwgbnVsbCwgc2NoZW1hUGF0aCwgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBudWxsOwp9OwoKZnVuY3Rpb24gcmVjdXJzaXZlQ29tcGFyZShBLCBCKSB7CiAgICBpZiAoQSA9PT0gQikgewogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgaWYgKEEgJiYgQiAmJiAodHlwZW9mIEEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoQSkpID09PSAib2JqZWN0IiAmJiAodHlwZW9mIEIgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoQikpID09PSAib2JqZWN0IikgewogICAgICAgIGlmIChBcnJheS5pc0FycmF5KEEpICE9PSBBcnJheS5pc0FycmF5KEIpKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoQSkpIHsKICAgICAgICAgICAgaWYgKEEubGVuZ3RoICE9PSBCLmxlbmd0aCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgQS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgaWYgKCFyZWN1cnNpdmVDb21wYXJlKEFbaV0sIEJbaV0pKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIGtleTsKICAgICAgICAgICAgZm9yIChrZXkgaW4gQSkgewogICAgICAgICAgICAgICAgaWYgKEJba2V5XSA9PT0gdW5kZWZpbmVkICYmIEFba2V5XSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAoa2V5IGluIEIpIHsKICAgICAgICAgICAgICAgIGlmIChBW2tleV0gPT09IHVuZGVmaW5lZCAmJiBCW2tleV0gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKGtleSBpbiBBKSB7CiAgICAgICAgICAgICAgICBpZiAoIXJlY3Vyc2l2ZUNvbXBhcmUoQVtrZXldLCBCW2tleV0pKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgcmV0dXJuIGZhbHNlOwp9CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUJhc2ljID0gZnVuY3Rpb24gdmFsaWRhdGVCYXNpYyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgewogICAgdmFyIGVycm9yOwogICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZVR5cGUoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpKSB7CiAgICAgICAgcmV0dXJuIGVycm9yLnByZWZpeFdpdGgobnVsbCwgInR5cGUiKTsKICAgIH0KICAgIGlmIChlcnJvciA9IHRoaXMudmFsaWRhdGVFbnVtKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSkgewogICAgICAgIHJldHVybiBlcnJvci5wcmVmaXhXaXRoKG51bGwsICJ0eXBlIik7CiAgICB9CiAgICByZXR1cm4gbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlVHlwZSA9IGZ1bmN0aW9uIHZhbGlkYXRlVHlwZShkYXRhLCBzY2hlbWEpIHsKICAgIGlmIChzY2hlbWEudHlwZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICB2YXIgZGF0YVR5cGUgPSB0eXBlb2YgZGF0YSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShkYXRhKTsKICAgIGlmIChkYXRhID09PSBudWxsKSB7CiAgICAgICAgZGF0YVR5cGUgPSAibnVsbCI7CiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHsKICAgICAgICBkYXRhVHlwZSA9ICJhcnJheSI7CiAgICB9CiAgICB2YXIgYWxsb3dlZFR5cGVzID0gc2NoZW1hLnR5cGU7CiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYWxsb3dlZFR5cGVzKSkgewogICAgICAgIGFsbG93ZWRUeXBlcyA9IFthbGxvd2VkVHlwZXNdOwogICAgfQoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWxsb3dlZFR5cGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIHR5cGUgPSBhbGxvd2VkVHlwZXNbaV07CiAgICAgICAgaWYgKHR5cGUgPT09IGRhdGFUeXBlIHx8IHR5cGUgPT09ICJpbnRlZ2VyIiAmJiBkYXRhVHlwZSA9PT0gIm51bWJlciIgJiYgZGF0YSAlIDEgPT09IDApIHsKICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5JTlZBTElEX1RZUEUsIHsKICAgICAgICB0eXBlOiBkYXRhVHlwZSwKICAgICAgICBleHBlY3RlZDogYWxsb3dlZFR5cGVzLmpvaW4oIi8iKQogICAgfSwgJycsICcnLCBudWxsLCBkYXRhLCBzY2hlbWEpOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVFbnVtID0gZnVuY3Rpb24gdmFsaWRhdGVFbnVtKGRhdGEsIHNjaGVtYSkgewogICAgaWYgKHNjaGVtYVsiZW51bSJdID09PSB1bmRlZmluZWQpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NoZW1hWyJlbnVtIl0ubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgZW51bVZhbCA9IHNjaGVtYVsiZW51bSJdW2ldOwogICAgICAgIGlmIChyZWN1cnNpdmVDb21wYXJlKGRhdGEsIGVudW1WYWwpKSB7CiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuRU5VTV9NSVNNQVRDSCwgeyB2YWx1ZTogdHlwZW9mIEpTT04gIT09ICd1bmRlZmluZWQnID8gKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKGRhdGEpIDogZGF0YSB9LCAnJywgJycsIG51bGwsIGRhdGEsIHNjaGVtYSk7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU51bWVyaWMgPSBmdW5jdGlvbiB2YWxpZGF0ZU51bWVyaWMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHsKICAgIHJldHVybiB0aGlzLnZhbGlkYXRlTXVsdGlwbGVPZihkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgdGhpcy52YWxpZGF0ZU1pbk1heChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgdGhpcy52YWxpZGF0ZU5hTihkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgbnVsbDsKfTsKCnZhciBDTE9TRV9FTk9VR0hfTE9XID0gTWF0aC5wb3coMiwgLTUxKTsKdmFyIENMT1NFX0VOT1VHSF9ISUdIID0gMSAtIENMT1NFX0VOT1VHSF9MT1c7ClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlTXVsdGlwbGVPZiA9IGZ1bmN0aW9uIHZhbGlkYXRlTXVsdGlwbGVPZihkYXRhLCBzY2hlbWEpIHsKICAgIHZhciBtdWx0aXBsZU9mID0gc2NoZW1hLm11bHRpcGxlT2YgfHwgc2NoZW1hLmRpdmlzaWJsZUJ5OwogICAgaWYgKG11bHRpcGxlT2YgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgaWYgKHR5cGVvZiBkYXRhID09PSAibnVtYmVyIikgewogICAgICAgIHZhciByZW1haW5kZXIgPSBkYXRhIC8gbXVsdGlwbGVPZiAlIDE7CiAgICAgICAgaWYgKHJlbWFpbmRlciA+PSBDTE9TRV9FTk9VR0hfTE9XICYmIHJlbWFpbmRlciA8IENMT1NFX0VOT1VHSF9ISUdIKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuTlVNQkVSX01VTFRJUExFX09GLCB7CiAgICAgICAgICAgICAgICB2YWx1ZTogZGF0YSwKICAgICAgICAgICAgICAgIG11bHRpcGxlT2Y6IG11bHRpcGxlT2YKICAgICAgICAgICAgfSwgJycsICcnLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVNaW5NYXggPSBmdW5jdGlvbiB2YWxpZGF0ZU1pbk1heChkYXRhLCBzY2hlbWEpIHsKICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gIm51bWJlciIpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGlmIChzY2hlbWEubWluaW11bSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgaWYgKGRhdGEgPCBzY2hlbWEubWluaW11bSkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk5VTUJFUl9NSU5JTVVNLCB7CiAgICAgICAgICAgICAgICB2YWx1ZTogZGF0YSwKICAgICAgICAgICAgICAgIG1pbmltdW06IHNjaGVtYS5taW5pbXVtCiAgICAgICAgICAgIH0sICcnLCAnL21pbmltdW0nLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgICAgIH0KICAgICAgICBpZiAoc2NoZW1hLmV4Y2x1c2l2ZU1pbmltdW0gJiYgZGF0YSA9PT0gc2NoZW1hLm1pbmltdW0pIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5OVU1CRVJfTUlOSU1VTV9FWENMVVNJVkUsIHsKICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhLAogICAgICAgICAgICAgICAgbWluaW11bTogc2NoZW1hLm1pbmltdW0KICAgICAgICAgICAgfSwgJycsICcvZXhjbHVzaXZlTWluaW11bScsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgfQogICAgfQogICAgaWYgKHNjaGVtYS5tYXhpbXVtICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBpZiAoZGF0YSA+IHNjaGVtYS5tYXhpbXVtKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuTlVNQkVSX01BWElNVU0sIHsKICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhLAogICAgICAgICAgICAgICAgbWF4aW11bTogc2NoZW1hLm1heGltdW0KICAgICAgICAgICAgfSwgJycsICcvbWF4aW11bScsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgfQogICAgICAgIGlmIChzY2hlbWEuZXhjbHVzaXZlTWF4aW11bSAmJiBkYXRhID09PSBzY2hlbWEubWF4aW11bSkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk5VTUJFUl9NQVhJTVVNX0VYQ0xVU0lWRSwgewogICAgICAgICAgICAgICAgdmFsdWU6IGRhdGEsCiAgICAgICAgICAgICAgICBtYXhpbXVtOiBzY2hlbWEubWF4aW11bQogICAgICAgICAgICB9LCAnJywgJy9leGNsdXNpdmVNYXhpbXVtJywgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlTmFOID0gZnVuY3Rpb24gdmFsaWRhdGVOYU4oZGF0YSwgc2NoZW1hKSB7CiAgICBpZiAodHlwZW9mIGRhdGEgIT09ICJudW1iZXIiKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICBpZiAoaXNOYU4oZGF0YSkgPT09IHRydWUgfHwgZGF0YSA9PT0gSW5maW5pdHkgfHwgZGF0YSA9PT0gLUluZmluaXR5KSB7CiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5OVU1CRVJfTk9UX0FfTlVNQkVSLCB7IHZhbHVlOiBkYXRhIH0sICcnLCAnL3R5cGUnLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgfQogICAgcmV0dXJuIG51bGw7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZVN0cmluZyA9IGZ1bmN0aW9uIHZhbGlkYXRlU3RyaW5nKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7CiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZVN0cmluZ0xlbmd0aChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgdGhpcy52YWxpZGF0ZVN0cmluZ1BhdHRlcm4oZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IG51bGw7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZVN0cmluZ0xlbmd0aCA9IGZ1bmN0aW9uIHZhbGlkYXRlU3RyaW5nTGVuZ3RoKGRhdGEsIHNjaGVtYSkgewogICAgaWYgKHR5cGVvZiBkYXRhICE9PSAic3RyaW5nIikgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgaWYgKHNjaGVtYS5taW5MZW5ndGggIT09IHVuZGVmaW5lZCkgewogICAgICAgIGlmIChkYXRhLmxlbmd0aCA8IHNjaGVtYS5taW5MZW5ndGgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5TVFJJTkdfTEVOR1RIX1NIT1JULCB7CiAgICAgICAgICAgICAgICBsZW5ndGg6IGRhdGEubGVuZ3RoLAogICAgICAgICAgICAgICAgbWluaW11bTogc2NoZW1hLm1pbkxlbmd0aAogICAgICAgICAgICB9LCAnJywgJy9taW5MZW5ndGgnLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgICAgIH0KICAgIH0KICAgIGlmIChzY2hlbWEubWF4TGVuZ3RoICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBpZiAoZGF0YS5sZW5ndGggPiBzY2hlbWEubWF4TGVuZ3RoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuU1RSSU5HX0xFTkdUSF9MT05HLCB7CiAgICAgICAgICAgICAgICBsZW5ndGg6IGRhdGEubGVuZ3RoLAogICAgICAgICAgICAgICAgbWF4aW11bTogc2NoZW1hLm1heExlbmd0aAogICAgICAgICAgICB9LCAnJywgJy9tYXhMZW5ndGgnLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVTdHJpbmdQYXR0ZXJuID0gZnVuY3Rpb24gdmFsaWRhdGVTdHJpbmdQYXR0ZXJuKGRhdGEsIHNjaGVtYSkgewogICAgaWYgKHR5cGVvZiBkYXRhICE9PSAic3RyaW5nIiB8fCB0eXBlb2Ygc2NoZW1hLnBhdHRlcm4gIT09ICJzdHJpbmciICYmICEoc2NoZW1hLnBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHApKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICB2YXIgcmVnZXhwOwogICAgaWYgKHNjaGVtYS5wYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwKSB7CiAgICAgICAgcmVnZXhwID0gc2NoZW1hLnBhdHRlcm47CiAgICB9IGVsc2UgewogICAgICAgIHZhciBib2R5LAogICAgICAgICAgICBmbGFncyA9ICcnOwogICAgICAgIC8vIENoZWNrIGZvciByZWd1bGFyIGV4cHJlc3Npb24gbGl0ZXJhbHMKICAgICAgICAvLyBAc2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy03LjguNQogICAgICAgIHZhciBsaXRlcmFsID0gc2NoZW1hLnBhdHRlcm4ubWF0Y2goL15cLyguKylcLyhbaW1nXSopJC8pOwogICAgICAgIGlmIChsaXRlcmFsKSB7CiAgICAgICAgICAgIGJvZHkgPSBsaXRlcmFsWzFdOwogICAgICAgICAgICBmbGFncyA9IGxpdGVyYWxbMl07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYm9keSA9IHNjaGVtYS5wYXR0ZXJuOwogICAgICAgIH0KICAgICAgICByZWdleHAgPSBuZXcgUmVnRXhwKGJvZHksIGZsYWdzKTsKICAgIH0KICAgIGlmICghcmVnZXhwLnRlc3QoZGF0YSkpIHsKICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLlNUUklOR19QQVRURVJOLCB7IHBhdHRlcm46IHNjaGVtYS5wYXR0ZXJuIH0sICcnLCAnL3BhdHRlcm4nLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgfQogICAgcmV0dXJuIG51bGw7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUFycmF5ID0gZnVuY3Rpb24gdmFsaWRhdGVBcnJheShkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgewogICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZUFycmF5TGVuZ3RoKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlQXJyYXlVbmlxdWVJdGVtcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgdGhpcy52YWxpZGF0ZUFycmF5SXRlbXMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IG51bGw7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUFycmF5TGVuZ3RoID0gZnVuY3Rpb24gdmFsaWRhdGVBcnJheUxlbmd0aChkYXRhLCBzY2hlbWEpIHsKICAgIHZhciBlcnJvcjsKICAgIGlmIChzY2hlbWEubWluSXRlbXMgIT09IHVuZGVmaW5lZCkgewogICAgICAgIGlmIChkYXRhLmxlbmd0aCA8IHNjaGVtYS5taW5JdGVtcykgewogICAgICAgICAgICBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5BUlJBWV9MRU5HVEhfU0hPUlQsIHsKICAgICAgICAgICAgICAgIGxlbmd0aDogZGF0YS5sZW5ndGgsCiAgICAgICAgICAgICAgICBtaW5pbXVtOiBzY2hlbWEubWluSXRlbXMKICAgICAgICAgICAgfSwgJycsICcvbWluSXRlbXMnLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHsKICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGlmIChzY2hlbWEubWF4SXRlbXMgIT09IHVuZGVmaW5lZCkgewogICAgICAgIGlmIChkYXRhLmxlbmd0aCA+IHNjaGVtYS5tYXhJdGVtcykgewogICAgICAgICAgICBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5BUlJBWV9MRU5HVEhfTE9ORywgewogICAgICAgICAgICAgICAgbGVuZ3RoOiBkYXRhLmxlbmd0aCwKICAgICAgICAgICAgICAgIG1heGltdW06IHNjaGVtYS5tYXhJdGVtcwogICAgICAgICAgICB9LCAnJywgJy9tYXhJdGVtcycsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIG51bGw7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUFycmF5VW5pcXVlSXRlbXMgPSBmdW5jdGlvbiB2YWxpZGF0ZUFycmF5VW5pcXVlSXRlbXMoZGF0YSwgc2NoZW1hKSB7CiAgICBpZiAoc2NoZW1hLnVuaXF1ZUl0ZW1zKSB7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGZvciAodmFyIGogPSBpICsgMTsgaiA8IGRhdGEubGVuZ3RoOyBqKyspIHsKICAgICAgICAgICAgICAgIGlmIChyZWN1cnNpdmVDb21wYXJlKGRhdGFbaV0sIGRhdGFbal0pKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLkFSUkFZX1VOSVFVRSwgewogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaDE6IGksCiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoMjogagogICAgICAgICAgICAgICAgICAgIH0sICcnLCAnL3VuaXF1ZUl0ZW1zJywgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVBcnJheUl0ZW1zID0gZnVuY3Rpb24gdmFsaWRhdGVBcnJheUl0ZW1zKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7CiAgICBpZiAoc2NoZW1hLml0ZW1zID09PSB1bmRlZmluZWQpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIHZhciBlcnJvciwgaTsKICAgIGlmIChBcnJheS5pc0FycmF5KHNjaGVtYS5pdGVtcykpIHsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAoaSA8IHNjaGVtYS5pdGVtcy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIGlmIChlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YVtpXSwgc2NoZW1hLml0ZW1zW2ldLCBbaV0sIFsiaXRlbXMiLCBpXSwgZGF0YVBvaW50ZXJQYXRoICsgIi8iICsgaSkpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2NoZW1hLmFkZGl0aW9uYWxJdGVtcyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNjaGVtYS5hZGRpdGlvbmFsSXRlbXMgPT09ICJib29sZWFuIikgewogICAgICAgICAgICAgICAgICAgIGlmICghc2NoZW1hLmFkZGl0aW9uYWxJdGVtcykgewogICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5BUlJBWV9BRERJVElPTkFMX0lURU1TLCB7fSwgJy8nICsgaSwgJy9hZGRpdGlvbmFsSXRlbXMnLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGFbaV0sIHNjaGVtYS5hZGRpdGlvbmFsSXRlbXMsIFtpXSwgWyJhZGRpdGlvbmFsSXRlbXMiXSwgZGF0YVBvaW50ZXJQYXRoICsgIi8iICsgaSkpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9IGVsc2UgewogICAgICAgIGZvciAoaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YVtpXSwgc2NoZW1hLml0ZW1zLCBbaV0sIFsiaXRlbXMiXSwgZGF0YVBvaW50ZXJQYXRoICsgIi8iICsgaSkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVPYmplY3QgPSBmdW5jdGlvbiB2YWxpZGF0ZU9iamVjdChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgewogICAgaWYgKCh0eXBlb2YgZGF0YSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShkYXRhKSkgIT09ICJvYmplY3QiIHx8IGRhdGEgPT09IG51bGwgfHwgQXJyYXkuaXNBcnJheShkYXRhKSkgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgcmV0dXJuIHRoaXMudmFsaWRhdGVPYmplY3RNaW5NYXhQcm9wZXJ0aWVzKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlT2JqZWN0UmVxdWlyZWRQcm9wZXJ0aWVzKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlT2JqZWN0UHJvcGVydGllcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgdGhpcy52YWxpZGF0ZU9iamVjdERlcGVuZGVuY2llcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0TWluTWF4UHJvcGVydGllcyA9IGZ1bmN0aW9uIHZhbGlkYXRlT2JqZWN0TWluTWF4UHJvcGVydGllcyhkYXRhLCBzY2hlbWEpIHsKICAgIHZhciBrZXlzID0gKDAsIF9rZXlzMi5kZWZhdWx0KShkYXRhKTsKICAgIHZhciBlcnJvcjsKICAgIGlmIChzY2hlbWEubWluUHJvcGVydGllcyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgaWYgKGtleXMubGVuZ3RoIDwgc2NoZW1hLm1pblByb3BlcnRpZXMpIHsKICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuT0JKRUNUX1BST1BFUlRJRVNfTUlOSU1VTSwgewogICAgICAgICAgICAgICAgcHJvcGVydHlDb3VudDoga2V5cy5sZW5ndGgsCiAgICAgICAgICAgICAgICBtaW5pbXVtOiBzY2hlbWEubWluUHJvcGVydGllcwogICAgICAgICAgICB9LCAnJywgJy9taW5Qcm9wZXJ0aWVzJywgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBpZiAoc2NoZW1hLm1heFByb3BlcnRpZXMgIT09IHVuZGVmaW5lZCkgewogICAgICAgIGlmIChrZXlzLmxlbmd0aCA+IHNjaGVtYS5tYXhQcm9wZXJ0aWVzKSB7CiAgICAgICAgICAgIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk9CSkVDVF9QUk9QRVJUSUVTX01BWElNVU0sIHsKICAgICAgICAgICAgICAgIHByb3BlcnR5Q291bnQ6IGtleXMubGVuZ3RoLAogICAgICAgICAgICAgICAgbWF4aW11bTogc2NoZW1hLm1heFByb3BlcnRpZXMKICAgICAgICAgICAgfSwgJycsICcvbWF4UHJvcGVydGllcycsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIG51bGw7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdFJlcXVpcmVkUHJvcGVydGllcyA9IGZ1bmN0aW9uIHZhbGlkYXRlT2JqZWN0UmVxdWlyZWRQcm9wZXJ0aWVzKGRhdGEsIHNjaGVtYSkgewogICAgaWYgKHNjaGVtYS5yZXF1aXJlZCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY2hlbWEucmVxdWlyZWQubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIGtleSA9IHNjaGVtYS5yZXF1aXJlZFtpXTsKICAgICAgICAgICAgaWYgKGRhdGFba2V5XSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuT0JKRUNUX1JFUVVJUkVELCB7IGtleToga2V5IH0sICcnLCAnL3JlcXVpcmVkLycgKyBpLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIG51bGw7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdFByb3BlcnRpZXMgPSBmdW5jdGlvbiB2YWxpZGF0ZU9iamVjdFByb3BlcnRpZXMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHsKICAgIHZhciBlcnJvcjsKICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7CiAgICAgICAgdmFyIGtleVBvaW50ZXJQYXRoID0gZGF0YVBvaW50ZXJQYXRoICsgIi8iICsga2V5LnJlcGxhY2UoL34vZywgJ34wJykucmVwbGFjZSgvXC8vZywgJ34xJyk7CiAgICAgICAgdmFyIGZvdW5kTWF0Y2ggPSBmYWxzZTsKICAgICAgICBpZiAoc2NoZW1hLnByb3BlcnRpZXMgIT09IHVuZGVmaW5lZCAmJiBzY2hlbWEucHJvcGVydGllc1trZXldICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgZm91bmRNYXRjaCA9IHRydWU7CiAgICAgICAgICAgIGlmIChlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YVtrZXldLCBzY2hlbWEucHJvcGVydGllc1trZXldLCBba2V5XSwgWyJwcm9wZXJ0aWVzIiwga2V5XSwga2V5UG9pbnRlclBhdGgpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKHNjaGVtYS5wYXR0ZXJuUHJvcGVydGllcyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIGZvciAodmFyIHBhdHRlcm5LZXkgaW4gc2NoZW1hLnBhdHRlcm5Qcm9wZXJ0aWVzKSB7CiAgICAgICAgICAgICAgICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cChwYXR0ZXJuS2V5KTsKICAgICAgICAgICAgICAgIGlmIChyZWdleHAudGVzdChrZXkpKSB7CiAgICAgICAgICAgICAgICAgICAgZm91bmRNYXRjaCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhW2tleV0sIHNjaGVtYS5wYXR0ZXJuUHJvcGVydGllc1twYXR0ZXJuS2V5XSwgW2tleV0sIFsicGF0dGVyblByb3BlcnRpZXMiLCBwYXR0ZXJuS2V5XSwga2V5UG9pbnRlclBhdGgpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKCFmb3VuZE1hdGNoKSB7CiAgICAgICAgICAgIGlmIChzY2hlbWEuYWRkaXRpb25hbFByb3BlcnRpZXMgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykgewogICAgICAgICAgICAgICAgICAgIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzW2tleVBvaW50ZXJQYXRoXSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHNba2V5UG9pbnRlclBhdGhdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWEuYWRkaXRpb25hbFByb3BlcnRpZXMgPT09ICJib29sZWFuIikgewogICAgICAgICAgICAgICAgICAgIGlmICghc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk9CSkVDVF9BRERJVElPTkFMX1BST1BFUlRJRVMsIHsga2V5OiBrZXkgfSwgJycsICcvYWRkaXRpb25hbFByb3BlcnRpZXMnLCBudWxsLCBkYXRhLCBzY2hlbWEpLnByZWZpeFdpdGgoa2V5LCBudWxsKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGlmIChlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YVtrZXldLCBzY2hlbWEuYWRkaXRpb25hbFByb3BlcnRpZXMsIFtrZXldLCBbImFkZGl0aW9uYWxQcm9wZXJ0aWVzIl0sIGtleVBvaW50ZXJQYXRoKSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyAmJiAhdGhpcy5rbm93blByb3BlcnR5UGF0aHNba2V5UG9pbnRlclBhdGhdKSB7CiAgICAgICAgICAgICAgICB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzW2tleVBvaW50ZXJQYXRoXSA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykgewogICAgICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRoc1trZXlQb2ludGVyUGF0aF0gPSB0cnVlOwogICAgICAgICAgICBkZWxldGUgdGhpcy51bmtub3duUHJvcGVydHlQYXRoc1trZXlQb2ludGVyUGF0aF07CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIG51bGw7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdERlcGVuZGVuY2llcyA9IGZ1bmN0aW9uIHZhbGlkYXRlT2JqZWN0RGVwZW5kZW5jaWVzKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7CiAgICB2YXIgZXJyb3I7CiAgICBpZiAoc2NoZW1hLmRlcGVuZGVuY2llcyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgZm9yICh2YXIgZGVwS2V5IGluIHNjaGVtYS5kZXBlbmRlbmNpZXMpIHsKICAgICAgICAgICAgaWYgKGRhdGFbZGVwS2V5XSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICB2YXIgZGVwID0gc2NoZW1hLmRlcGVuZGVuY2llc1tkZXBLZXldOwogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkZXAgPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFbZGVwXSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk9CSkVDVF9ERVBFTkRFTkNZX0tFWSwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBkZXBLZXksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaXNzaW5nOiBkZXAKICAgICAgICAgICAgICAgICAgICAgICAgfSwgJycsICcnLCBudWxsLCBkYXRhLCBzY2hlbWEpLnByZWZpeFdpdGgobnVsbCwgZGVwS2V5KS5wcmVmaXhXaXRoKG51bGwsICJkZXBlbmRlbmNpZXMiKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZGVwKSkgewogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXF1aXJlZEtleSA9IGRlcFtpXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFbcmVxdWlyZWRLZXldID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk9CSkVDVF9ERVBFTkRFTkNZX0tFWSwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogZGVwS2V5LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pc3Npbmc6IHJlcXVpcmVkS2V5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAnJywgJy8nICsgaSwgbnVsbCwgZGF0YSwgc2NoZW1hKS5wcmVmaXhXaXRoKG51bGwsIGRlcEtleSkucHJlZml4V2l0aChudWxsLCAiZGVwZW5kZW5jaWVzIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGlmIChlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YSwgZGVwLCBbXSwgWyJkZXBlbmRlbmNpZXMiLCBkZXBLZXldLCBkYXRhUG9pbnRlclBhdGgpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQ29tYmluYXRpb25zID0gZnVuY3Rpb24gdmFsaWRhdGVDb21iaW5hdGlvbnMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHsKICAgIHJldHVybiB0aGlzLnZhbGlkYXRlQWxsT2YoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IHRoaXMudmFsaWRhdGVBbnlPZihkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgdGhpcy52YWxpZGF0ZU9uZU9mKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlTm90KGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVBbGxPZiA9IGZ1bmN0aW9uIHZhbGlkYXRlQWxsT2YoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHsKICAgIGlmIChzY2hlbWEuYWxsT2YgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgdmFyIGVycm9yOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY2hlbWEuYWxsT2YubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgc3ViU2NoZW1hID0gc2NoZW1hLmFsbE9mW2ldOwogICAgICAgIGlmIChlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YSwgc3ViU2NoZW1hLCBbXSwgWyJhbGxPZiIsIGldLCBkYXRhUG9pbnRlclBhdGgpKSB7CiAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQW55T2YgPSBmdW5jdGlvbiB2YWxpZGF0ZUFueU9mKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7CiAgICBpZiAoc2NoZW1hLmFueU9mID09PSB1bmRlZmluZWQpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIHZhciBlcnJvcnMgPSBbXTsKICAgIHZhciBzdGFydEVycm9yQ291bnQgPSB0aGlzLmVycm9ycy5sZW5ndGg7CiAgICB2YXIgb2xkVW5rbm93blByb3BlcnR5UGF0aHMsIG9sZEtub3duUHJvcGVydHlQYXRoczsKICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHsKICAgICAgICBvbGRVbmtub3duUHJvcGVydHlQYXRocyA9IHRoaXMudW5rbm93blByb3BlcnR5UGF0aHM7CiAgICAgICAgb2xkS25vd25Qcm9wZXJ0eVBhdGhzID0gdGhpcy5rbm93blByb3BlcnR5UGF0aHM7CiAgICB9CiAgICB2YXIgZXJyb3JBdEVuZCA9IHRydWU7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjaGVtYS5hbnlPZi5sZW5ndGg7IGkrKykgewogICAgICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHsKICAgICAgICAgICAgdGhpcy51bmtub3duUHJvcGVydHlQYXRocyA9IHt9OwogICAgICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRocyA9IHt9OwogICAgICAgIH0KICAgICAgICB2YXIgc3ViU2NoZW1hID0gc2NoZW1hLmFueU9mW2ldOwoKICAgICAgICB2YXIgZXJyb3JDb3VudCA9IHRoaXMuZXJyb3JzLmxlbmd0aDsKICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGEsIHN1YlNjaGVtYSwgW10sIFsiYW55T2YiLCBpXSwgZGF0YVBvaW50ZXJQYXRoKTsKCiAgICAgICAgaWYgKGVycm9yID09PSBudWxsICYmIGVycm9yQ291bnQgPT09IHRoaXMuZXJyb3JzLmxlbmd0aCkgewogICAgICAgICAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLnNsaWNlKDAsIHN0YXJ0RXJyb3JDb3VudCk7CgogICAgICAgICAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBrbm93bktleSBpbiB0aGlzLmtub3duUHJvcGVydHlQYXRocykgewogICAgICAgICAgICAgICAgICAgIG9sZEtub3duUHJvcGVydHlQYXRoc1trbm93bktleV0gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBvbGRVbmtub3duUHJvcGVydHlQYXRoc1trbm93bktleV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmb3IgKHZhciB1bmtub3duS2V5IGluIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIW9sZEtub3duUHJvcGVydHlQYXRoc1t1bmtub3duS2V5XSkgewogICAgICAgICAgICAgICAgICAgICAgICBvbGRVbmtub3duUHJvcGVydHlQYXRoc1t1bmtub3duS2V5XSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBjb250aW51ZSBsb29waW5nIHNvIHdlIGNhdGNoIGFsbCB0aGUgcHJvcGVydHkgZGVmaW5pdGlvbnMsIGJ1dCB3ZSBkb24ndCB3YW50IHRvIHJldHVybiBhbiBlcnJvcgogICAgICAgICAgICAgICAgZXJyb3JBdEVuZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KICAgICAgICBpZiAoZXJyb3IpIHsKICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyb3IucHJlZml4V2l0aChudWxsLCAiIiArIGkpLnByZWZpeFdpdGgobnVsbCwgImFueU9mIikpOwogICAgICAgIH0KICAgIH0KICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHsKICAgICAgICB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzID0gb2xkVW5rbm93blByb3BlcnR5UGF0aHM7CiAgICAgICAgdGhpcy5rbm93blByb3BlcnR5UGF0aHMgPSBvbGRLbm93blByb3BlcnR5UGF0aHM7CiAgICB9CiAgICBpZiAoZXJyb3JBdEVuZCkgewogICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQodGhpcy5lcnJvcnMuc2xpY2Uoc3RhcnRFcnJvckNvdW50KSk7CiAgICAgICAgdGhpcy5lcnJvcnMgPSB0aGlzLmVycm9ycy5zbGljZSgwLCBzdGFydEVycm9yQ291bnQpOwogICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuQU5ZX09GX01JU1NJTkcsIHt9LCAiIiwgIi9hbnlPZiIsIGVycm9ycywgZGF0YSwgc2NoZW1hKTsKICAgIH0KfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlT25lT2YgPSBmdW5jdGlvbiB2YWxpZGF0ZU9uZU9mKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7CiAgICBpZiAoc2NoZW1hLm9uZU9mID09PSB1bmRlZmluZWQpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIHZhciB2YWxpZEluZGV4ID0gbnVsbDsKICAgIHZhciBlcnJvcnMgPSBbXTsKICAgIHZhciBzdGFydEVycm9yQ291bnQgPSB0aGlzLmVycm9ycy5sZW5ndGg7CiAgICB2YXIgb2xkVW5rbm93blByb3BlcnR5UGF0aHMsIG9sZEtub3duUHJvcGVydHlQYXRoczsKICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHsKICAgICAgICBvbGRVbmtub3duUHJvcGVydHlQYXRocyA9IHRoaXMudW5rbm93blByb3BlcnR5UGF0aHM7CiAgICAgICAgb2xkS25vd25Qcm9wZXJ0eVBhdGhzID0gdGhpcy5rbm93blByb3BlcnR5UGF0aHM7CiAgICB9CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjaGVtYS5vbmVPZi5sZW5ndGg7IGkrKykgewogICAgICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHsKICAgICAgICAgICAgdGhpcy51bmtub3duUHJvcGVydHlQYXRocyA9IHt9OwogICAgICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRocyA9IHt9OwogICAgICAgIH0KICAgICAgICB2YXIgc3ViU2NoZW1hID0gc2NoZW1hLm9uZU9mW2ldOwoKICAgICAgICB2YXIgZXJyb3JDb3VudCA9IHRoaXMuZXJyb3JzLmxlbmd0aDsKICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGEsIHN1YlNjaGVtYSwgW10sIFsib25lT2YiLCBpXSwgZGF0YVBvaW50ZXJQYXRoKTsKCiAgICAgICAgaWYgKGVycm9yID09PSBudWxsICYmIGVycm9yQ291bnQgPT09IHRoaXMuZXJyb3JzLmxlbmd0aCkgewogICAgICAgICAgICBpZiAodmFsaWRJbmRleCA9PT0gbnVsbCkgewogICAgICAgICAgICAgICAgdmFsaWRJbmRleCA9IGk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLnNsaWNlKDAsIHN0YXJ0RXJyb3JDb3VudCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk9ORV9PRl9NVUxUSVBMRSwgewogICAgICAgICAgICAgICAgICAgIGluZGV4MTogdmFsaWRJbmRleCwKICAgICAgICAgICAgICAgICAgICBpbmRleDI6IGkKICAgICAgICAgICAgICAgIH0sICIiLCAiL29uZU9mIiwgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBrbm93bktleSBpbiB0aGlzLmtub3duUHJvcGVydHlQYXRocykgewogICAgICAgICAgICAgICAgICAgIG9sZEtub3duUHJvcGVydHlQYXRoc1trbm93bktleV0gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBvbGRVbmtub3duUHJvcGVydHlQYXRoc1trbm93bktleV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmb3IgKHZhciB1bmtub3duS2V5IGluIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIW9sZEtub3duUHJvcGVydHlQYXRoc1t1bmtub3duS2V5XSkgewogICAgICAgICAgICAgICAgICAgICAgICBvbGRVbmtub3duUHJvcGVydHlQYXRoc1t1bmtub3duS2V5XSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChlcnJvcikgewogICAgICAgICAgICBlcnJvcnMucHVzaChlcnJvcik7CiAgICAgICAgfQogICAgfQogICAgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykgewogICAgICAgIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMgPSBvbGRVbmtub3duUHJvcGVydHlQYXRoczsKICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRocyA9IG9sZEtub3duUHJvcGVydHlQYXRoczsKICAgIH0KICAgIGlmICh2YWxpZEluZGV4ID09PSBudWxsKSB7CiAgICAgICAgZXJyb3JzID0gZXJyb3JzLmNvbmNhdCh0aGlzLmVycm9ycy5zbGljZShzdGFydEVycm9yQ291bnQpKTsKICAgICAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLnNsaWNlKDAsIHN0YXJ0RXJyb3JDb3VudCk7CiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5PTkVfT0ZfTUlTU0lORywge30sICIiLCAiL29uZU9mIiwgZXJyb3JzLCBkYXRhLCBzY2hlbWEpOwogICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLnNsaWNlKDAsIHN0YXJ0RXJyb3JDb3VudCk7CiAgICB9CiAgICByZXR1cm4gbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlTm90ID0gZnVuY3Rpb24gdmFsaWRhdGVOb3QoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHsKICAgIGlmIChzY2hlbWEubm90ID09PSB1bmRlZmluZWQpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIHZhciBvbGRFcnJvckNvdW50ID0gdGhpcy5lcnJvcnMubGVuZ3RoOwogICAgdmFyIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzLCBvbGRLbm93blByb3BlcnR5UGF0aHM7CiAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7CiAgICAgICAgb2xkVW5rbm93blByb3BlcnR5UGF0aHMgPSB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzOwogICAgICAgIG9sZEtub3duUHJvcGVydHlQYXRocyA9IHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzOwogICAgICAgIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMgPSB7fTsKICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRocyA9IHt9OwogICAgfQogICAgdmFyIGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhLCBzY2hlbWEubm90LCBudWxsLCBudWxsLCBkYXRhUG9pbnRlclBhdGgpOwogICAgdmFyIG5vdEVycm9ycyA9IHRoaXMuZXJyb3JzLnNsaWNlKG9sZEVycm9yQ291bnQpOwogICAgdGhpcy5lcnJvcnMgPSB0aGlzLmVycm9ycy5zbGljZSgwLCBvbGRFcnJvckNvdW50KTsKICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHsKICAgICAgICB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzID0gb2xkVW5rbm93blByb3BlcnR5UGF0aHM7CiAgICAgICAgdGhpcy5rbm93blByb3BlcnR5UGF0aHMgPSBvbGRLbm93blByb3BlcnR5UGF0aHM7CiAgICB9CiAgICBpZiAoZXJyb3IgPT09IG51bGwgJiYgbm90RXJyb3JzLmxlbmd0aCA9PT0gMCkgewogICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuTk9UX1BBU1NFRCwge30sICIiLCAiL25vdCIsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICB9CiAgICByZXR1cm4gbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlSHlwZXJtZWRpYSA9IGZ1bmN0aW9uIHZhbGlkYXRlQ29tYmluYXRpb25zKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7CiAgICBpZiAoIXNjaGVtYS5saW5rcykgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgdmFyIGVycm9yOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY2hlbWEubGlua3MubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgbGRvID0gc2NoZW1hLmxpbmtzW2ldOwogICAgICAgIGlmIChsZG8ucmVsID09PSAiZGVzY3JpYmVkYnkiKSB7CiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9IG5ldyBVcmlUZW1wbGF0ZShsZG8uaHJlZik7CiAgICAgICAgICAgIHZhciBhbGxQcmVzZW50ID0gdHJ1ZTsKICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0ZW1wbGF0ZS52YXJOYW1lcy5sZW5ndGg7IGorKykgewogICAgICAgICAgICAgICAgaWYgKCEodGVtcGxhdGUudmFyTmFtZXNbal0gaW4gZGF0YSkpIHsKICAgICAgICAgICAgICAgICAgICBhbGxQcmVzZW50ID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGFsbFByZXNlbnQpIHsKICAgICAgICAgICAgICAgIHZhciBzY2hlbWFVcmwgPSB0ZW1wbGF0ZS5maWxsRnJvbU9iamVjdChkYXRhKTsKICAgICAgICAgICAgICAgIHZhciBzdWJTY2hlbWEgPSB7ICIkcmVmIjogc2NoZW1hVXJsIH07CiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGEsIHN1YlNjaGVtYSwgW10sIFsibGlua3MiLCBpXSwgZGF0YVBvaW50ZXJQYXRoKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfTsKCi8vIHBhcnNlVVJJKCkgYW5kIHJlc29sdmVVcmwoKSBhcmUgZnJvbSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS8xMDg4ODUwCi8vICAgLSAgcmVsZWFzZWQgYXMgcHVibGljIGRvbWFpbiBieSBhdXRob3IgKCJZYWZmbGUiKSAtIHNlZSBjb21tZW50cyBvbiBnaXN0CgpmdW5jdGlvbiBwYXJzZVVSSSh1cmwpIHsKICAgIHZhciBtID0gU3RyaW5nKHVybCkucmVwbGFjZSgvXlxzK3xccyskL2csICcnKS5tYXRjaCgvXihbXjpcLz8jXSs6KT8oXC9cLyg/OlteOkBdKig/OjpbXjpAXSopP0ApPygoW146XC8/I10qKSg/OjooXGQqKSk/KSk/KFtePyNdKikoXD9bXiNdKik/KCNbXHNcU10qKT8vKTsKICAgIC8vIGF1dGhvcml0eSA9ICcvLycgKyB1c2VyICsgJzonICsgcGFzcyAnQCcgKyBob3N0bmFtZSArICc6JyBwb3J0CiAgICByZXR1cm4gbSA/IHsKICAgICAgICBocmVmOiBtWzBdIHx8ICcnLAogICAgICAgIHByb3RvY29sOiBtWzFdIHx8ICcnLAogICAgICAgIGF1dGhvcml0eTogbVsyXSB8fCAnJywKICAgICAgICBob3N0OiBtWzNdIHx8ICcnLAogICAgICAgIGhvc3RuYW1lOiBtWzRdIHx8ICcnLAogICAgICAgIHBvcnQ6IG1bNV0gfHwgJycsCiAgICAgICAgcGF0aG5hbWU6IG1bNl0gfHwgJycsCiAgICAgICAgc2VhcmNoOiBtWzddIHx8ICcnLAogICAgICAgIGhhc2g6IG1bOF0gfHwgJycKICAgIH0gOiBudWxsOwp9CgpmdW5jdGlvbiByZXNvbHZlVXJsKGJhc2UsIGhyZWYpIHsKICAgIC8vIFJGQyAzOTg2CgogICAgZnVuY3Rpb24gcmVtb3ZlRG90U2VnbWVudHMoaW5wdXQpIHsKICAgICAgICB2YXIgb3V0cHV0ID0gW107CiAgICAgICAgaW5wdXQucmVwbGFjZSgvXihcLlwuPyhcL3wkKSkrLywgJycpLnJlcGxhY2UoL1wvKFwuKFwvfCQpKSsvZywgJy8nKS5yZXBsYWNlKC9cL1wuXC4kLywgJy8uLi8nKS5yZXBsYWNlKC9cLz9bXlwvXSovZywgZnVuY3Rpb24gKHApIHsKICAgICAgICAgICAgaWYgKHAgPT09ICcvLi4nKSB7CiAgICAgICAgICAgICAgICBvdXRwdXQucG9wKCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBvdXRwdXQucHVzaChwKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHJldHVybiBvdXRwdXQuam9pbignJykucmVwbGFjZSgvXlwvLywgaW5wdXQuY2hhckF0KDApID09PSAnLycgPyAnLycgOiAnJyk7CiAgICB9CgogICAgaHJlZiA9IHBhcnNlVVJJKGhyZWYgfHwgJycpOwogICAgYmFzZSA9IHBhcnNlVVJJKGJhc2UgfHwgJycpOwoKICAgIHJldHVybiAhaHJlZiB8fCAhYmFzZSA/IG51bGwgOiAoaHJlZi5wcm90b2NvbCB8fCBiYXNlLnByb3RvY29sKSArIChocmVmLnByb3RvY29sIHx8IGhyZWYuYXV0aG9yaXR5ID8gaHJlZi5hdXRob3JpdHkgOiBiYXNlLmF1dGhvcml0eSkgKyByZW1vdmVEb3RTZWdtZW50cyhocmVmLnByb3RvY29sIHx8IGhyZWYuYXV0aG9yaXR5IHx8IGhyZWYucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycgPyBocmVmLnBhdGhuYW1lIDogaHJlZi5wYXRobmFtZSA/IChiYXNlLmF1dGhvcml0eSAmJiAhYmFzZS5wYXRobmFtZSA/ICcvJyA6ICcnKSArIGJhc2UucGF0aG5hbWUuc2xpY2UoMCwgYmFzZS5wYXRobmFtZS5sYXN0SW5kZXhPZignLycpICsgMSkgKyBocmVmLnBhdGhuYW1lIDogYmFzZS5wYXRobmFtZSkgKyAoaHJlZi5wcm90b2NvbCB8fCBocmVmLmF1dGhvcml0eSB8fCBocmVmLnBhdGhuYW1lID8gaHJlZi5zZWFyY2ggOiBocmVmLnNlYXJjaCB8fCBiYXNlLnNlYXJjaCkgKyBocmVmLmhhc2g7Cn0KCmZ1bmN0aW9uIGdldERvY3VtZW50VXJpKHVyaSkgewogICAgcmV0dXJuIHVyaS5zcGxpdCgnIycpWzBdOwp9CgpmdW5jdGlvbiBub3JtU2NoZW1hKHNjaGVtYSwgYmFzZVVyaSkgewogICAgaWYgKHNjaGVtYSAmJiAodHlwZW9mIHNjaGVtYSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShzY2hlbWEpKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICBpZiAoYmFzZVVyaSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIGJhc2VVcmkgPSBzY2hlbWEuaWQ7CiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc2NoZW1hLmlkID09PSAic3RyaW5nIikgewogICAgICAgICAgICBiYXNlVXJpID0gcmVzb2x2ZVVybChiYXNlVXJpLCBzY2hlbWEuaWQpOwogICAgICAgICAgICBzY2hlbWEuaWQgPSBiYXNlVXJpOwogICAgICAgIH0KICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzY2hlbWEpKSB7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NoZW1hLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICBub3JtU2NoZW1hKHNjaGVtYVtpXSwgYmFzZVVyaSk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAodHlwZW9mIHNjaGVtYVsnJHJlZiddID09PSAic3RyaW5nIikgewogICAgICAgICAgICAgICAgc2NoZW1hWyckcmVmJ10gPSByZXNvbHZlVXJsKGJhc2VVcmksIHNjaGVtYVsnJHJlZiddKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gc2NoZW1hKSB7CiAgICAgICAgICAgICAgICBpZiAoa2V5ICE9PSAiZW51bSIpIHsKICAgICAgICAgICAgICAgICAgICBub3JtU2NoZW1hKHNjaGVtYVtrZXldLCBiYXNlVXJpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKZnVuY3Rpb24gZGVmYXVsdEVycm9yUmVwb3J0ZXIobGFuZ3VhZ2UpIHsKICAgIGxhbmd1YWdlID0gbGFuZ3VhZ2UgfHwgJ2VuJzsKCiAgICB2YXIgZXJyb3JNZXNzYWdlcyA9IGxhbmd1YWdlc1tsYW5ndWFnZV07CgogICAgcmV0dXJuIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgIHZhciBtZXNzYWdlVGVtcGxhdGUgPSBlcnJvck1lc3NhZ2VzW2Vycm9yLmNvZGVdIHx8IEVycm9yTWVzc2FnZXNEZWZhdWx0W2Vycm9yLmNvZGVdOwogICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZVRlbXBsYXRlICE9PSAnc3RyaW5nJykgewogICAgICAgICAgICByZXR1cm4gIlVua25vd24gZXJyb3IgY29kZSAiICsgZXJyb3IuY29kZSArICI6ICIgKyAoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkoZXJyb3IubWVzc2FnZVBhcmFtcyk7CiAgICAgICAgfQogICAgICAgIHZhciBtZXNzYWdlUGFyYW1zID0gZXJyb3IucGFyYW1zOwogICAgICAgIC8vIEFkYXB0ZWQgZnJvbSBDcm9ja2ZvcmQncyBzdXBwbGFudCgpCiAgICAgICAgcmV0dXJuIG1lc3NhZ2VUZW1wbGF0ZS5yZXBsYWNlKC9ceyhbXnt9XSopXH0vZywgZnVuY3Rpb24gKHdob2xlLCB2YXJOYW1lKSB7CiAgICAgICAgICAgIHZhciBzdWJWYWx1ZSA9IG1lc3NhZ2VQYXJhbXNbdmFyTmFtZV07CiAgICAgICAgICAgIHJldHVybiB0eXBlb2Ygc3ViVmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBzdWJWYWx1ZSA9PT0gJ251bWJlcicgPyBzdWJWYWx1ZSA6IHdob2xlOwogICAgICAgIH0pOwogICAgfTsKfQoKdmFyIEVycm9yQ29kZXMgPSB7CiAgICBJTlZBTElEX1RZUEU6IDAsCiAgICBFTlVNX01JU01BVENIOiAxLAogICAgQU5ZX09GX01JU1NJTkc6IDEwLAogICAgT05FX09GX01JU1NJTkc6IDExLAogICAgT05FX09GX01VTFRJUExFOiAxMiwKICAgIE5PVF9QQVNTRUQ6IDEzLAogICAgLy8gTnVtZXJpYyBlcnJvcnMKICAgIE5VTUJFUl9NVUxUSVBMRV9PRjogMTAwLAogICAgTlVNQkVSX01JTklNVU06IDEwMSwKICAgIE5VTUJFUl9NSU5JTVVNX0VYQ0xVU0lWRTogMTAyLAogICAgTlVNQkVSX01BWElNVU06IDEwMywKICAgIE5VTUJFUl9NQVhJTVVNX0VYQ0xVU0lWRTogMTA0LAogICAgTlVNQkVSX05PVF9BX05VTUJFUjogMTA1LAogICAgLy8gU3RyaW5nIGVycm9ycwogICAgU1RSSU5HX0xFTkdUSF9TSE9SVDogMjAwLAogICAgU1RSSU5HX0xFTkdUSF9MT05HOiAyMDEsCiAgICBTVFJJTkdfUEFUVEVSTjogMjAyLAogICAgLy8gT2JqZWN0IGVycm9ycwogICAgT0JKRUNUX1BST1BFUlRJRVNfTUlOSU1VTTogMzAwLAogICAgT0JKRUNUX1BST1BFUlRJRVNfTUFYSU1VTTogMzAxLAogICAgT0JKRUNUX1JFUVVJUkVEOiAzMDIsCiAgICBPQkpFQ1RfQURESVRJT05BTF9QUk9QRVJUSUVTOiAzMDMsCiAgICBPQkpFQ1RfREVQRU5ERU5DWV9LRVk6IDMwNCwKICAgIC8vIEFycmF5IGVycm9ycwogICAgQVJSQVlfTEVOR1RIX1NIT1JUOiA0MDAsCiAgICBBUlJBWV9MRU5HVEhfTE9ORzogNDAxLAogICAgQVJSQVlfVU5JUVVFOiA0MDIsCiAgICBBUlJBWV9BRERJVElPTkFMX0lURU1TOiA0MDMsCiAgICAvLyBDdXN0b20vdXNlci1kZWZpbmVkIGVycm9ycwogICAgRk9STUFUX0NVU1RPTTogNTAwLAogICAgS0VZV09SRF9DVVNUT006IDUwMSwKICAgIC8vIFNjaGVtYSBzdHJ1Y3R1cmUKICAgIENJUkNVTEFSX1JFRkVSRU5DRTogNjAwLAogICAgLy8gTm9uLXN0YW5kYXJkIHZhbGlkYXRpb24gb3B0aW9ucwogICAgVU5LTk9XTl9QUk9QRVJUWTogMTAwMAp9Owp2YXIgRXJyb3JDb2RlTG9va3VwID0ge307CmZvciAodmFyIGtleSBpbiBFcnJvckNvZGVzKSB7CiAgICBFcnJvckNvZGVMb29rdXBbRXJyb3JDb2Rlc1trZXldXSA9IGtleTsKfQp2YXIgRXJyb3JNZXNzYWdlc0RlZmF1bHQgPSB7CiAgICBJTlZBTElEX1RZUEU6ICJJbnZhbGlkIHR5cGU6IHt0eXBlfSAoZXhwZWN0ZWQge2V4cGVjdGVkfSkiLAogICAgRU5VTV9NSVNNQVRDSDogIk5vIGVudW0gbWF0Y2ggZm9yOiB7dmFsdWV9IiwKICAgIEFOWV9PRl9NSVNTSU5HOiAiRGF0YSBkb2VzIG5vdCBtYXRjaCBhbnkgc2NoZW1hcyBmcm9tIFwiYW55T2ZcIiIsCiAgICBPTkVfT0ZfTUlTU0lORzogIkRhdGEgZG9lcyBub3QgbWF0Y2ggYW55IHNjaGVtYXMgZnJvbSBcIm9uZU9mXCIiLAogICAgT05FX09GX01VTFRJUExFOiAiRGF0YSBpcyB2YWxpZCBhZ2FpbnN0IG1vcmUgdGhhbiBvbmUgc2NoZW1hIGZyb20gXCJvbmVPZlwiOiBpbmRpY2VzIHtpbmRleDF9IGFuZCB7aW5kZXgyfSIsCiAgICBOT1RfUEFTU0VEOiAiRGF0YSBtYXRjaGVzIHNjaGVtYSBmcm9tIFwibm90XCIiLAogICAgLy8gTnVtZXJpYyBlcnJvcnMKICAgIE5VTUJFUl9NVUxUSVBMRV9PRjogIlZhbHVlIHt2YWx1ZX0gaXMgbm90IGEgbXVsdGlwbGUgb2Yge211bHRpcGxlT2Z9IiwKICAgIE5VTUJFUl9NSU5JTVVNOiAiVmFsdWUge3ZhbHVlfSBpcyBsZXNzIHRoYW4gbWluaW11bSB7bWluaW11bX0iLAogICAgTlVNQkVSX01JTklNVU1fRVhDTFVTSVZFOiAiVmFsdWUge3ZhbHVlfSBpcyBlcXVhbCB0byBleGNsdXNpdmUgbWluaW11bSB7bWluaW11bX0iLAogICAgTlVNQkVSX01BWElNVU06ICJWYWx1ZSB7dmFsdWV9IGlzIGdyZWF0ZXIgdGhhbiBtYXhpbXVtIHttYXhpbXVtfSIsCiAgICBOVU1CRVJfTUFYSU1VTV9FWENMVVNJVkU6ICJWYWx1ZSB7dmFsdWV9IGlzIGVxdWFsIHRvIGV4Y2x1c2l2ZSBtYXhpbXVtIHttYXhpbXVtfSIsCiAgICBOVU1CRVJfTk9UX0FfTlVNQkVSOiAiVmFsdWUge3ZhbHVlfSBpcyBub3QgYSB2YWxpZCBudW1iZXIiLAogICAgLy8gU3RyaW5nIGVycm9ycwogICAgU1RSSU5HX0xFTkdUSF9TSE9SVDogIlN0cmluZyBpcyB0b28gc2hvcnQgKHtsZW5ndGh9IGNoYXJzKSwgbWluaW11bSB7bWluaW11bX0iLAogICAgU1RSSU5HX0xFTkdUSF9MT05HOiAiU3RyaW5nIGlzIHRvbyBsb25nICh7bGVuZ3RofSBjaGFycyksIG1heGltdW0ge21heGltdW19IiwKICAgIFNUUklOR19QQVRURVJOOiAiU3RyaW5nIGRvZXMgbm90IG1hdGNoIHBhdHRlcm46IHtwYXR0ZXJufSIsCiAgICAvLyBPYmplY3QgZXJyb3JzCiAgICBPQkpFQ1RfUFJPUEVSVElFU19NSU5JTVVNOiAiVG9vIGZldyBwcm9wZXJ0aWVzIGRlZmluZWQgKHtwcm9wZXJ0eUNvdW50fSksIG1pbmltdW0ge21pbmltdW19IiwKICAgIE9CSkVDVF9QUk9QRVJUSUVTX01BWElNVU06ICJUb28gbWFueSBwcm9wZXJ0aWVzIGRlZmluZWQgKHtwcm9wZXJ0eUNvdW50fSksIG1heGltdW0ge21heGltdW19IiwKICAgIE9CSkVDVF9SRVFVSVJFRDogIk1pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHk6IHtrZXl9IiwKICAgIE9CSkVDVF9BRERJVElPTkFMX1BST1BFUlRJRVM6ICJBZGRpdGlvbmFsIHByb3BlcnRpZXMgbm90IGFsbG93ZWQiLAogICAgT0JKRUNUX0RFUEVOREVOQ1lfS0VZOiAiRGVwZW5kZW5jeSBmYWlsZWQgLSBrZXkgbXVzdCBleGlzdDoge21pc3Npbmd9IChkdWUgdG8ga2V5OiB7a2V5fSkiLAogICAgLy8gQXJyYXkgZXJyb3JzCiAgICBBUlJBWV9MRU5HVEhfU0hPUlQ6ICJBcnJheSBpcyB0b28gc2hvcnQgKHtsZW5ndGh9KSwgbWluaW11bSB7bWluaW11bX0iLAogICAgQVJSQVlfTEVOR1RIX0xPTkc6ICJBcnJheSBpcyB0b28gbG9uZyAoe2xlbmd0aH0pLCBtYXhpbXVtIHttYXhpbXVtfSIsCiAgICBBUlJBWV9VTklRVUU6ICJBcnJheSBpdGVtcyBhcmUgbm90IHVuaXF1ZSAoaW5kaWNlcyB7bWF0Y2gxfSBhbmQge21hdGNoMn0pIiwKICAgIEFSUkFZX0FERElUSU9OQUxfSVRFTVM6ICJBZGRpdGlvbmFsIGl0ZW1zIG5vdCBhbGxvd2VkIiwKICAgIC8vIEZvcm1hdCBlcnJvcnMKICAgIEZPUk1BVF9DVVNUT006ICJGb3JtYXQgdmFsaWRhdGlvbiBmYWlsZWQgKHttZXNzYWdlfSkiLAogICAgS0VZV09SRF9DVVNUT006ICJLZXl3b3JkIGZhaWxlZDoge2tleX0gKHttZXNzYWdlfSkiLAogICAgLy8gU2NoZW1hIHN0cnVjdHVyZQogICAgQ0lSQ1VMQVJfUkVGRVJFTkNFOiAiQ2lyY3VsYXIgJHJlZnM6IHt1cmxzfSIsCiAgICAvLyBOb24tc3RhbmRhcmQgdmFsaWRhdGlvbiBvcHRpb25zCiAgICBVTktOT1dOX1BST1BFUlRZOiAiVW5rbm93biBwcm9wZXJ0eSAobm90IGluIHNjaGVtYSkiCn07CgpmdW5jdGlvbiBWYWxpZGF0aW9uRXJyb3IoY29kZSwgcGFyYW1zLCBkYXRhUGF0aCwgc2NoZW1hUGF0aCwgc3ViRXJyb3JzKSB7CiAgICBFcnJvci5jYWxsKHRoaXMpOwogICAgaWYgKGNvZGUgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHRocm93IG5ldyBFcnJvcigiTm8gZXJyb3IgY29kZSBzdXBwbGllZDogIiArIHNjaGVtYVBhdGgpOwogICAgfQogICAgdGhpcy5tZXNzYWdlID0gJyc7CiAgICB0aGlzLnBhcmFtcyA9IHBhcmFtczsKICAgIHRoaXMuY29kZSA9IGNvZGU7CiAgICB0aGlzLmRhdGFQYXRoID0gZGF0YVBhdGggfHwgIiI7CiAgICB0aGlzLnNjaGVtYVBhdGggPSBzY2hlbWFQYXRoIHx8ICIiOwogICAgdGhpcy5zdWJFcnJvcnMgPSBzdWJFcnJvcnMgfHwgbnVsbDsKCiAgICB2YXIgZXJyID0gbmV3IEVycm9yKHRoaXMubWVzc2FnZSk7CiAgICB0aGlzLnN0YWNrID0gZXJyLnN0YWNrIHx8IGVyci5zdGFja3RyYWNlOwogICAgaWYgKCF0aGlzLnN0YWNrKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgdGhyb3cgZXJyOwogICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICB0aGlzLnN0YWNrID0gZXJyLnN0YWNrIHx8IGVyci5zdGFja3RyYWNlOwogICAgICAgIH0KICAgIH0KfQoKVmFsaWRhdGlvbkVycm9yLnByb3RvdHlwZSA9ICgwLCBfY3JlYXRlMi5kZWZhdWx0KShFcnJvci5wcm90b3R5cGUpOwpWYWxpZGF0aW9uRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVmFsaWRhdGlvbkVycm9yOwpWYWxpZGF0aW9uRXJyb3IucHJvdG90eXBlLm5hbWUgPSAnVmFsaWRhdGlvbkVycm9yJzsKClZhbGlkYXRpb25FcnJvci5wcm90b3R5cGUucHJlZml4V2l0aCA9IGZ1bmN0aW9uIChkYXRhUHJlZml4LCBzY2hlbWFQcmVmaXgpIHsKICAgIGlmIChkYXRhUHJlZml4ICE9PSBudWxsKSB7CiAgICAgICAgZGF0YVByZWZpeCA9IGRhdGFQcmVmaXgucmVwbGFjZSgvfi9nLCAifjAiKS5yZXBsYWNlKC9cLy9nLCAifjEiKTsKICAgICAgICB0aGlzLmRhdGFQYXRoID0gIi8iICsgZGF0YVByZWZpeCArIHRoaXMuZGF0YVBhdGg7CiAgICB9CiAgICBpZiAoc2NoZW1hUHJlZml4ICE9PSBudWxsKSB7CiAgICAgICAgc2NoZW1hUHJlZml4ID0gc2NoZW1hUHJlZml4LnJlcGxhY2UoL34vZywgIn4wIikucmVwbGFjZSgvXC8vZywgIn4xIik7CiAgICAgICAgdGhpcy5zY2hlbWFQYXRoID0gIi8iICsgc2NoZW1hUHJlZml4ICsgdGhpcy5zY2hlbWFQYXRoOwogICAgfQogICAgaWYgKHRoaXMuc3ViRXJyb3JzICE9PSBudWxsKSB7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN1YkVycm9ycy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB0aGlzLnN1YkVycm9yc1tpXS5wcmVmaXhXaXRoKGRhdGFQcmVmaXgsIHNjaGVtYVByZWZpeCk7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIHRoaXM7Cn07CgpmdW5jdGlvbiBpc1RydXN0ZWRVcmwoYmFzZVVybCwgdGVzdFVybCkgewogICAgaWYgKHRlc3RVcmwuc3Vic3RyaW5nKDAsIGJhc2VVcmwubGVuZ3RoKSA9PT0gYmFzZVVybCkgewogICAgICAgIHZhciByZW1haW5kZXIgPSB0ZXN0VXJsLnN1YnN0cmluZyhiYXNlVXJsLmxlbmd0aCk7CiAgICAgICAgaWYgKHRlc3RVcmwubGVuZ3RoID4gMCAmJiB0ZXN0VXJsLmNoYXJBdChiYXNlVXJsLmxlbmd0aCAtIDEpID09PSAiLyIgfHwgcmVtYWluZGVyLmNoYXJBdCgwKSA9PT0gIiMiIHx8IHJlbWFpbmRlci5jaGFyQXQoMCkgPT09ICI/IikgewogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gZmFsc2U7Cn0KCnZhciBsYW5ndWFnZXMgPSB7fTsKCmZ1bmN0aW9uIGNyZWF0ZUFwaShsYW5ndWFnZSkgewogICAgdmFyIGdsb2JhbENvbnRleHQgPSBuZXcgVmFsaWRhdG9yQ29udGV4dCgpOwogICAgdmFyIGN1cnJlbnRMYW5ndWFnZTsKICAgIHZhciBjdXN0b21FcnJvclJlcG9ydGVyOwogICAgdmFyIGFwaSA9IHsKICAgICAgICBzZXRFcnJvclJlcG9ydGVyOiBmdW5jdGlvbiBzZXRFcnJvclJlcG9ydGVyKHJlcG9ydGVyKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVwb3J0ZXIgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sYW5ndWFnZShyZXBvcnRlcik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY3VzdG9tRXJyb3JSZXBvcnRlciA9IHJlcG9ydGVyOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9LAogICAgICAgIGFkZEZvcm1hdDogZnVuY3Rpb24gYWRkRm9ybWF0KCkgewogICAgICAgICAgICBnbG9iYWxDb250ZXh0LmFkZEZvcm1hdC5hcHBseShnbG9iYWxDb250ZXh0LCBhcmd1bWVudHMpOwogICAgICAgIH0sCiAgICAgICAgbGFuZ3VhZ2U6IGZ1bmN0aW9uIGxhbmd1YWdlKGNvZGUpIHsKICAgICAgICAgICAgaWYgKCFjb2RlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudExhbmd1YWdlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICghbGFuZ3VhZ2VzW2NvZGVdKSB7CiAgICAgICAgICAgICAgICBjb2RlID0gY29kZS5zcGxpdCgnLScpWzBdOyAvLyBmYWxsIGJhY2sgdG8gYmFzZSBsYW5ndWFnZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChsYW5ndWFnZXNbY29kZV0pIHsKICAgICAgICAgICAgICAgIGN1cnJlbnRMYW5ndWFnZSA9IGNvZGU7CiAgICAgICAgICAgICAgICByZXR1cm4gY29kZTsgLy8gc28geW91IGNhbiB0ZWxsIGlmIGZhbGwtYmFjayBoYXMgaGFwcGVuZWQKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfSwKICAgICAgICBhZGRMYW5ndWFnZTogZnVuY3Rpb24gYWRkTGFuZ3VhZ2UoY29kZSwgbWVzc2FnZU1hcCkgewogICAgICAgICAgICB2YXIga2V5OwogICAgICAgICAgICBmb3IgKGtleSBpbiBFcnJvckNvZGVzKSB7CiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZU1hcFtrZXldICYmICFtZXNzYWdlTWFwW0Vycm9yQ29kZXNba2V5XV0pIHsKICAgICAgICAgICAgICAgICAgICBtZXNzYWdlTWFwW0Vycm9yQ29kZXNba2V5XV0gPSBtZXNzYWdlTWFwW2tleV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHJvb3RDb2RlID0gY29kZS5zcGxpdCgnLScpWzBdOwogICAgICAgICAgICBpZiAoIWxhbmd1YWdlc1tyb290Q29kZV0pIHsKICAgICAgICAgICAgICAgIC8vIHVzZSBmb3IgYmFzZSBsYW5ndWFnZSBpZiBub3QgeWV0IGRlZmluZWQKICAgICAgICAgICAgICAgIGxhbmd1YWdlc1tjb2RlXSA9IG1lc3NhZ2VNYXA7CiAgICAgICAgICAgICAgICBsYW5ndWFnZXNbcm9vdENvZGVdID0gbWVzc2FnZU1hcDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGxhbmd1YWdlc1tjb2RlXSA9ICgwLCBfY3JlYXRlMi5kZWZhdWx0KShsYW5ndWFnZXNbcm9vdENvZGVdKTsKICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIG1lc3NhZ2VNYXApIHsKICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGxhbmd1YWdlc1tyb290Q29kZV1ba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2VzW3Jvb3RDb2RlXVtrZXldID0gbWVzc2FnZU1hcFtrZXldOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZXNbY29kZV1ba2V5XSA9IG1lc3NhZ2VNYXBba2V5XTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAogICAgICAgIGZyZXNoQXBpOiBmdW5jdGlvbiBmcmVzaEFwaShsYW5ndWFnZSkgewogICAgICAgICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlQXBpKCk7CiAgICAgICAgICAgIGlmIChsYW5ndWFnZSkgewogICAgICAgICAgICAgICAgcmVzdWx0Lmxhbmd1YWdlKGxhbmd1YWdlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0sCiAgICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uIHZhbGlkYXRlKGRhdGEsIHNjaGVtYSwgY2hlY2tSZWN1cnNpdmUsIGJhblVua25vd25Qcm9wZXJ0aWVzKSB7CiAgICAgICAgICAgIHZhciBkZWYgPSBkZWZhdWx0RXJyb3JSZXBvcnRlcihjdXJyZW50TGFuZ3VhZ2UpOwogICAgICAgICAgICB2YXIgZXJyb3JSZXBvcnRlciA9IGN1c3RvbUVycm9yUmVwb3J0ZXIgPyBmdW5jdGlvbiAoZXJyb3IsIGRhdGEsIHNjaGVtYSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGN1c3RvbUVycm9yUmVwb3J0ZXIoZXJyb3IsIGRhdGEsIHNjaGVtYSkgfHwgZGVmKGVycm9yLCBkYXRhLCBzY2hlbWEpOwogICAgICAgICAgICB9IDogZGVmOwogICAgICAgICAgICB2YXIgY29udGV4dCA9IG5ldyBWYWxpZGF0b3JDb250ZXh0KGdsb2JhbENvbnRleHQsIGZhbHNlLCBlcnJvclJlcG9ydGVyLCBjaGVja1JlY3Vyc2l2ZSwgYmFuVW5rbm93blByb3BlcnRpZXMpOwogICAgICAgICAgICBpZiAodHlwZW9mIHNjaGVtYSA9PT0gInN0cmluZyIpIHsKICAgICAgICAgICAgICAgIHNjaGVtYSA9IHsgIiRyZWYiOiBzY2hlbWEgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb250ZXh0LmFkZFNjaGVtYSgiIiwgc2NoZW1hKTsKICAgICAgICAgICAgdmFyIGVycm9yID0gY29udGV4dC52YWxpZGF0ZUFsbChkYXRhLCBzY2hlbWEsIG51bGwsIG51bGwsICIiKTsKICAgICAgICAgICAgaWYgKCFlcnJvciAmJiBiYW5Vbmtub3duUHJvcGVydGllcykgewogICAgICAgICAgICAgICAgZXJyb3IgPSBjb250ZXh0LmJhblVua25vd25Qcm9wZXJ0aWVzKGRhdGEsIHNjaGVtYSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yOwogICAgICAgICAgICB0aGlzLm1pc3NpbmcgPSBjb250ZXh0Lm1pc3Npbmc7CiAgICAgICAgICAgIHRoaXMudmFsaWQgPSBlcnJvciA9PT0gbnVsbDsKICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsaWQ7CiAgICAgICAgfSwKICAgICAgICB2YWxpZGF0ZVJlc3VsdDogZnVuY3Rpb24gdmFsaWRhdGVSZXN1bHQoKSB7CiAgICAgICAgICAgIHZhciByZXN1bHQgPSB7fTsKICAgICAgICAgICAgdGhpcy52YWxpZGF0ZS5hcHBseShyZXN1bHQsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfSwKICAgICAgICB2YWxpZGF0ZU11bHRpcGxlOiBmdW5jdGlvbiB2YWxpZGF0ZU11bHRpcGxlKGRhdGEsIHNjaGVtYSwgY2hlY2tSZWN1cnNpdmUsIGJhblVua25vd25Qcm9wZXJ0aWVzKSB7CiAgICAgICAgICAgIHZhciBkZWYgPSBkZWZhdWx0RXJyb3JSZXBvcnRlcihjdXJyZW50TGFuZ3VhZ2UpOwogICAgICAgICAgICB2YXIgZXJyb3JSZXBvcnRlciA9IGN1c3RvbUVycm9yUmVwb3J0ZXIgPyBmdW5jdGlvbiAoZXJyb3IsIGRhdGEsIHNjaGVtYSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGN1c3RvbUVycm9yUmVwb3J0ZXIoZXJyb3IsIGRhdGEsIHNjaGVtYSkgfHwgZGVmKGVycm9yLCBkYXRhLCBzY2hlbWEpOwogICAgICAgICAgICB9IDogZGVmOwogICAgICAgICAgICB2YXIgY29udGV4dCA9IG5ldyBWYWxpZGF0b3JDb250ZXh0KGdsb2JhbENvbnRleHQsIHRydWUsIGVycm9yUmVwb3J0ZXIsIGNoZWNrUmVjdXJzaXZlLCBiYW5Vbmtub3duUHJvcGVydGllcyk7CiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hID09PSAic3RyaW5nIikgewogICAgICAgICAgICAgICAgc2NoZW1hID0geyAiJHJlZiI6IHNjaGVtYSB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnRleHQuYWRkU2NoZW1hKCIiLCBzY2hlbWEpOwogICAgICAgICAgICBjb250ZXh0LnZhbGlkYXRlQWxsKGRhdGEsIHNjaGVtYSwgbnVsbCwgbnVsbCwgIiIpOwogICAgICAgICAgICBpZiAoYmFuVW5rbm93blByb3BlcnRpZXMpIHsKICAgICAgICAgICAgICAgIGNvbnRleHQuYmFuVW5rbm93blByb3BlcnRpZXMoZGF0YSwgc2NoZW1hKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgcmVzdWx0ID0ge307CiAgICAgICAgICAgIHJlc3VsdC5lcnJvcnMgPSBjb250ZXh0LmVycm9yczsKICAgICAgICAgICAgcmVzdWx0Lm1pc3NpbmcgPSBjb250ZXh0Lm1pc3Npbmc7CiAgICAgICAgICAgIHJlc3VsdC52YWxpZCA9IHJlc3VsdC5lcnJvcnMubGVuZ3RoID09PSAwOwogICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0sCiAgICAgICAgYWRkU2NoZW1hOiBmdW5jdGlvbiBhZGRTY2hlbWEoKSB7CiAgICAgICAgICAgIHJldHVybiBnbG9iYWxDb250ZXh0LmFkZFNjaGVtYS5hcHBseShnbG9iYWxDb250ZXh0LCBhcmd1bWVudHMpOwogICAgICAgIH0sCiAgICAgICAgZ2V0U2NoZW1hOiBmdW5jdGlvbiBnZXRTY2hlbWEoKSB7CiAgICAgICAgICAgIHJldHVybiBnbG9iYWxDb250ZXh0LmdldFNjaGVtYS5hcHBseShnbG9iYWxDb250ZXh0LCBhcmd1bWVudHMpOwogICAgICAgIH0sCiAgICAgICAgZ2V0U2NoZW1hTWFwOiBmdW5jdGlvbiBnZXRTY2hlbWFNYXAoKSB7CiAgICAgICAgICAgIHJldHVybiBnbG9iYWxDb250ZXh0LmdldFNjaGVtYU1hcC5hcHBseShnbG9iYWxDb250ZXh0LCBhcmd1bWVudHMpOwogICAgICAgIH0sCiAgICAgICAgZ2V0U2NoZW1hVXJpczogZnVuY3Rpb24gZ2V0U2NoZW1hVXJpcygpIHsKICAgICAgICAgICAgcmV0dXJuIGdsb2JhbENvbnRleHQuZ2V0U2NoZW1hVXJpcy5hcHBseShnbG9iYWxDb250ZXh0LCBhcmd1bWVudHMpOwogICAgICAgIH0sCiAgICAgICAgZ2V0TWlzc2luZ1VyaXM6IGZ1bmN0aW9uIGdldE1pc3NpbmdVcmlzKCkgewogICAgICAgICAgICByZXR1cm4gZ2xvYmFsQ29udGV4dC5nZXRNaXNzaW5nVXJpcy5hcHBseShnbG9iYWxDb250ZXh0LCBhcmd1bWVudHMpOwogICAgICAgIH0sCiAgICAgICAgZHJvcFNjaGVtYXM6IGZ1bmN0aW9uIGRyb3BTY2hlbWFzKCkgewogICAgICAgICAgICBnbG9iYWxDb250ZXh0LmRyb3BTY2hlbWFzLmFwcGx5KGdsb2JhbENvbnRleHQsIGFyZ3VtZW50cyk7CiAgICAgICAgfSwKICAgICAgICBkZWZpbmVLZXl3b3JkOiBmdW5jdGlvbiBkZWZpbmVLZXl3b3JkKCkgewogICAgICAgICAgICBnbG9iYWxDb250ZXh0LmRlZmluZUtleXdvcmQuYXBwbHkoZ2xvYmFsQ29udGV4dCwgYXJndW1lbnRzKTsKICAgICAgICB9LAogICAgICAgIGRlZmluZUVycm9yOiBmdW5jdGlvbiBkZWZpbmVFcnJvcihjb2RlTmFtZSwgY29kZU51bWJlciwgZGVmYXVsdE1lc3NhZ2UpIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiBjb2RlTmFtZSAhPT0gJ3N0cmluZycgfHwgIS9eW0EtWl0rKF9bQS1aXSspKiQvLnRlc3QoY29kZU5hbWUpKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvZGUgbmFtZSBtdXN0IGJlIGEgc3RyaW5nIGluIFVQUEVSX0NBU0VfV0lUSF9VTkRFUlNDT1JFUycpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh0eXBlb2YgY29kZU51bWJlciAhPT0gJ251bWJlcicgfHwgY29kZU51bWJlciAlIDEgIT09IDAgfHwgY29kZU51bWJlciA8IDEwMDAwKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvZGUgbnVtYmVyIG11c3QgYmUgYW4gaW50ZWdlciA+IDEwMDAwJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHR5cGVvZiBFcnJvckNvZGVzW2NvZGVOYW1lXSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgYWxyZWFkeSBkZWZpbmVkOiAnICsgY29kZU5hbWUgKyAnIGFzICcgKyBFcnJvckNvZGVzW2NvZGVOYW1lXSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHR5cGVvZiBFcnJvckNvZGVMb29rdXBbY29kZU51bWJlcl0gIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIGNvZGUgYWxyZWFkeSB1c2VkOiAnICsgRXJyb3JDb2RlTG9va3VwW2NvZGVOdW1iZXJdICsgJyBhcyAnICsgY29kZU51bWJlcik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgRXJyb3JDb2Rlc1tjb2RlTmFtZV0gPSBjb2RlTnVtYmVyOwogICAgICAgICAgICBFcnJvckNvZGVMb29rdXBbY29kZU51bWJlcl0gPSBjb2RlTmFtZTsKICAgICAgICAgICAgRXJyb3JNZXNzYWdlc0RlZmF1bHRbY29kZU5hbWVdID0gRXJyb3JNZXNzYWdlc0RlZmF1bHRbY29kZU51bWJlcl0gPSBkZWZhdWx0TWVzc2FnZTsKICAgICAgICAgICAgZm9yICh2YXIgbGFuZ0NvZGUgaW4gbGFuZ3VhZ2VzKSB7CiAgICAgICAgICAgICAgICB2YXIgbGFuZ3VhZ2UgPSBsYW5ndWFnZXNbbGFuZ0NvZGVdOwogICAgICAgICAgICAgICAgaWYgKGxhbmd1YWdlW2NvZGVOYW1lXSkgewogICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlW2NvZGVOdW1iZXJdID0gbGFuZ3VhZ2VbY29kZU51bWJlcl0gfHwgbGFuZ3VhZ2VbY29kZU5hbWVdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICByZXNldDogZnVuY3Rpb24gcmVzZXQoKSB7CiAgICAgICAgICAgIGdsb2JhbENvbnRleHQucmVzZXQoKTsKICAgICAgICAgICAgdGhpcy5lcnJvciA9IG51bGw7CiAgICAgICAgICAgIHRoaXMubWlzc2luZyA9IFtdOwogICAgICAgICAgICB0aGlzLnZhbGlkID0gdHJ1ZTsKICAgICAgICB9LAogICAgICAgIG1pc3Npbmc6IFtdLAogICAgICAgIGVycm9yOiBudWxsLAogICAgICAgIHZhbGlkOiB0cnVlLAogICAgICAgIG5vcm1TY2hlbWE6IG5vcm1TY2hlbWEsCiAgICAgICAgcmVzb2x2ZVVybDogcmVzb2x2ZVVybCwKICAgICAgICBnZXREb2N1bWVudFVyaTogZ2V0RG9jdW1lbnRVcmksCiAgICAgICAgZXJyb3JDb2RlczogRXJyb3JDb2RlcwogICAgfTsKICAgIGFwaS5sYW5ndWFnZShsYW5ndWFnZSB8fCAnZW4nKTsKICAgIHJldHVybiBhcGk7Cn0KCi8vZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRvcigpIHsKdmFyIHR2NCA9IGNyZWF0ZUFwaSgpOwp0djQuYWRkTGFuZ3VhZ2UoJ2VuLWdiJywgRXJyb3JNZXNzYWdlc0RlZmF1bHQpOwoKLy9sZWdhY3kgcHJvcGVydHkKdHY0LnR2NCA9IHR2NDsKLy9yZXR1cm4gdHY0OwpleHBvcnRzLmRlZmF1bHQgPSB0djQ7Ci8vfQoKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5IjoyLCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2NyZWF0ZSI6NCwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHkiOjUsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvaXMtZnJvemVuIjo3LCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXMiOjgsImJhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YiOjE3fV0sNDQ3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9zdHJpbmdpZnkgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnknKTsKCnZhciBfc3RyaW5naWZ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0cmluZ2lmeSk7Cgp2YXIgX2tleXMgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXMnKTsKCnZhciBfa2V5czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9rZXlzKTsKCmV4cG9ydHMuZGl2aWRlVVJMID0gZGl2aWRlVVJMOwpleHBvcnRzLmRpdmlkZUVtYWlsID0gZGl2aWRlRW1haWw7CmV4cG9ydHMuZW1wdHlPYmplY3QgPSBlbXB0eU9iamVjdDsKZXhwb3J0cy5kZWVwQ2xvbmUgPSBkZWVwQ2xvbmU7CmV4cG9ydHMuZ2V0VXNlclVSTEZyb21FbWFpbCA9IGdldFVzZXJVUkxGcm9tRW1haWw7CmV4cG9ydHMuZ2V0VXNlckVtYWlsRnJvbVVSTCA9IGdldFVzZXJFbWFpbEZyb21VUkw7CmV4cG9ydHMuY29udmVydFRvVXNlclVSTCA9IGNvbnZlcnRUb1VzZXJVUkw7CmV4cG9ydHMuaXNEYXRhT2JqZWN0VVJMID0gaXNEYXRhT2JqZWN0VVJMOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8qKgoqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQoqIENvcHlyaWdodCAyMDE2IElORVNDLUlECiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMCiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYKKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0EKKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHCiogQ29weXJpZ2h0IDIwMTYgQXBpemVlCiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4KKgoqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwoqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKKgoqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCioKKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCioqLwovKioKICogU3VwcG9ydCBtb2R1bGUgd2l0aCBzb21lIGZ1bmN0aW9ucyB3aWxsIGJlIHVzZWZ1bAogKiBAbW9kdWxlIHV0aWxzCiAqLwoKLyoqCiAqIEB0eXBlZGVmIGRpdmlkZVVSTAogKiBAdHlwZSBPYmplY3QKICogQHByb3BlcnR5IHtzdHJpbmd9IHR5cGUgVGhlIHR5cGUgb2YgVVJMCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkb21haW4gVGhlIGRvbWFpbiBvZiBVUkwKICogQHByb3BlcnR5IHtzdHJpbmd9IGlkZW50aXR5IFRoZSBpZGVudGl0eSBvZiBVUkwKICovCgovKioKICogRGl2aWRlIGFuIHVybCBpbiB0eXBlLCBkb21haW4gYW5kIGlkZW50aXR5CiAqIEBwYXJhbSAge1VSTC5VUkx9IHVybCAtIHVybCBhZGRyZXNzCiAqIEByZXR1cm4ge2RpdmlkZVVSTH0gdGhlIHJlc3VsdCBvZiBkaXZpZGVVUkwKICovCmZ1bmN0aW9uIGRpdmlkZVVSTCh1cmwpIHsKCiAgaWYgKCF1cmwpIHRocm93IEVycm9yKCdVUkwgaXMgbmVlZGVkIHRvIHNwbGl0Jyk7CgogIC8vIGxldCByZSA9IC8oW2EtekEtWi1dKik/OlwvXC8oPzpcLik/KFstYS16QS1aMC05QDolLl9cK34jPV17MiwyNTZ9XC5bYS16XXsyLDZ9XGIpKihcL1tcL1xkXHdcLi1dKikqKD86W1w/XSkqKC4rKSovZ2k7CiAgdmFyIHJlID0gLyhbYS16QS1aLV0qKTpcL1wvKD86XC4pPyhbLWEtekEtWjAtOUA6JS5fXCt+Iz1dezIsMjU2fSkoWy1hLXpBLVowLTlAOiUuX1wrfiM9XC9dKikvZ2k7CiAgdmFyIHN1YnN0ID0gJyQxLCQyLCQzJzsKICB2YXIgcGFydHMgPSB1cmwucmVwbGFjZShyZSwgc3Vic3QpLnNwbGl0KCcsJyk7CgogIC8vIElmIHRoZSB1cmwgaGFzIG5vIHByb3RvY29sLCB0aGUgZGVmYXVsdCBwcm90b2NvbCBzZXQgaXMgaHR0cHMKICBpZiAocGFydHNbMF0gPT09IHVybCkgewogICAgcGFydHNbMF0gPSAnaHR0cHMnOwogICAgcGFydHNbMV0gPSB1cmw7CiAgfQoKICB2YXIgcmVzdWx0ID0gewogICAgdHlwZTogcGFydHNbMF0sCiAgICBkb21haW46IHBhcnRzWzFdLAogICAgaWRlbnRpdHk6IHBhcnRzWzJdCiAgfTsKCiAgcmV0dXJuIHJlc3VsdDsKfQoKZnVuY3Rpb24gZGl2aWRlRW1haWwoZW1haWwpIHsKICB2YXIgaW5kZXhPZkF0ID0gZW1haWwuaW5kZXhPZignQCcpOwoKICB2YXIgcmVzdWx0ID0gewogICAgdXNlcm5hbWU6IGVtYWlsLnN1YnN0cmluZygwLCBpbmRleE9mQXQpLAogICAgZG9tYWluOiBlbWFpbC5zdWJzdHJpbmcoaW5kZXhPZkF0ICsgMSwgZW1haWwubGVuZ3RoKQogIH07CgogIHJldHVybiByZXN1bHQ7Cn0KCi8qKgogKiBDaGVjayBpZiBhbiBPYmplY3QgaXMgZW1wdHkKICogQHBhcmFtICB7T2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIGJlIGNoZWNrZWQKICogQHJldHVybiB7Qm9vbGVhbn0gICAgICAgc3RhdHVzIG9mIE9iamVjdCwgZW1wdHkgb3Igbm90ICh0cnVlfGZhbHNlKTsKICovCmZ1bmN0aW9uIGVtcHR5T2JqZWN0KG9iamVjdCkgewogIHJldHVybiAoMCwgX2tleXMyLmRlZmF1bHQpKG9iamVjdCkubGVuZ3RoID4gMCA/IGZhbHNlIDogdHJ1ZTsKfQoKLyoqCiAqIE1ha2UgYSBDT1BZIG9mIHRoZSBvcmlnaW5hbCBkYXRhCiAqIEBwYXJhbSAge09iamVjdH0gIG9iaiAtIG9iamVjdCB0byBiZSBjbG9uZWQKICogQHJldHVybiB7T2JqZWN0fQogKi8KZnVuY3Rpb24gZGVlcENsb25lKG9iaikgewogIC8vVE9ETzogc2ltcGxlIGJ1dCBpbmVmZmljaWVudCBKU09OIGRlZXAgY2xvbmUuLi4KICBpZiAob2JqKSByZXR1cm4gSlNPTi5wYXJzZSgoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkob2JqKSk7Cn0KCi8qKgogKiBPYnRhaW5zIHRoZSB1c2VyIFVSTCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEgZ2l2ZW4gZW1haWwKICogQHBhcmFtICB7c3RyaW5nfSB1c2VyRW1haWwgVGhlIHVzZXIgZW1haWwKICogQHJldHVybiB7VVJMLlVSTH0gdXNlclVSTCBUaGUgdXNlciBVUkwKICovCmZ1bmN0aW9uIGdldFVzZXJVUkxGcm9tRW1haWwodXNlckVtYWlsKSB7CiAgdmFyIGluZGV4T2ZBdCA9IHVzZXJFbWFpbC5pbmRleE9mKCdAJyk7CiAgcmV0dXJuICd1c2VyOi8vJyArIHVzZXJFbWFpbC5zdWJzdHJpbmcoaW5kZXhPZkF0ICsgMSwgdXNlckVtYWlsLmxlbmd0aCkgKyAnLycgKyB1c2VyRW1haWwuc3Vic3RyaW5nKDAsIGluZGV4T2ZBdCk7Cn0KCi8qKgogKiBPYnRhaW5zIHRoZSB1c2VyIGVtYWlsIHRoYXQgY29ycmVzcG9uZHMgdG8gYSBnaXZlbiBVUkwKICogQHBhcmFtICB7VVJMLlVSTH0gdXNlclVSTCBUaGUgdXNlciBVUkwKICogQHJldHVybiB7c3RyaW5nfSB1c2VyRW1haWwgVGhlIHVzZXIgZW1haWwKICovCmZ1bmN0aW9uIGdldFVzZXJFbWFpbEZyb21VUkwodXNlclVSTCkgewogIHZhciB1cmwgPSBkaXZpZGVVUkwodXNlclVSTCk7CiAgcmV0dXJuIHVybC5pZGVudGl0eS5yZXBsYWNlKCcvJywgJycpICsgJ0AnICsgdXJsLmRvbWFpbjsgLy8gaWRlbnRpdHkgZmllbGQgaGFzICcvZXhhbXBsZUlEJyBpbnN0ZWFkIG9mICdleGFtcGxlSUQnCn0KCi8qKgogKiBDaGVjayBpZiB0aGUgdXNlciBpZGVudGlmaWVyIGlzIGFscmVhZHkgaW4gdGhlIFVSTCBmb3JtYXQsIGlmIG5vdCwgY29udmVydCB0byBVUkwgZm9ybWF0CiAqIEBwYXJhbSAge3N0cmluZ30gICBpZGVudGlmaWVyICB1c2VyIGlkZW50aWZpZXIKICogQHJldHVybiB7c3RyaW5nfSAgIHVzZXJVUkwgICAgdGhlIHVzZXIgVVJMCiAqLwpmdW5jdGlvbiBjb252ZXJ0VG9Vc2VyVVJMKGlkZW50aWZpZXIpIHsKCiAgLy8gY2hlY2sgaWYgdGhlIGlkZW50aWZpZXIgaXMgYWxyZWFkeSBpbiB0aGUgdXJsIGZvcm1hdAogIGlmIChpZGVudGlmaWVyLnN1YnN0cmluZygwLCA3KSA9PT0gJ3VzZXI6Ly8nKSB7CiAgICB2YXIgZGl2aWRlZFVSTCA9IGRpdmlkZVVSTChpZGVudGlmaWVyKTsKCiAgICAvL2NoZWNrIGlmIHRoZSB1cmwgaXMgd2VsbCBmb3JtYXRlZAogICAgaWYgKGRpdmlkZWRVUkwuZG9tYWluICYmIGRpdmlkZWRVUkwuaWRlbnRpdHkpIHsKICAgICAgcmV0dXJuIGlkZW50aWZpZXI7CiAgICB9IGVsc2UgewogICAgICB0aHJvdyAndXNlclVSTCB3aXRoIHdyb25nIGZvcm1hdCc7CiAgICB9CgogICAgLy9pZiBub3QsIGNvbnZlcnQgdGhlIHVzZXIgZW1haWwgdG8gVVJMIGZvcm1hdAogIH0gZWxzZSB7CiAgICByZXR1cm4gZ2V0VXNlclVSTEZyb21FbWFpbChpZGVudGlmaWVyKTsKICB9Cn0KCmZ1bmN0aW9uIGlzRGF0YU9iamVjdFVSTCh1cmwpIHsKICB2YXIgc2NoZW1hc1RvSWdub3JlID0gWydkb21haW4taWRwJywgJ3J1bnRpbWUnLCAnZG9tYWluJywgJ2h5cGVydHknXTsKICB2YXIgc3BsaXRVUkwgPSB1cmwuc3BsaXQoJzovLycpOwogIHZhciB1cmxTY2hlbWEgPSBzcGxpdFVSTFswXTsKCiAgcmV0dXJuIHNjaGVtYXNUb0lnbm9yZS5pbmRleE9mKHVybFNjaGVtYSkgPT09IC0xOwp9Cgp9LHsiYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5IjoyLCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXMiOjh9XX0se30sWzQzOV0pKDQzOSkKfSk7Ci8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlMWEJoWTJzdlgzQnlaV3gxWkdVdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2YkdsaUwybHVaR1Y0TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEoxYm5ScGJXVXZZMjl5WlMxcWN5OXFjMjl1TDNOMGNtbHVaMmxtZVM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF5ZFc1MGFXMWxMMk52Y21VdGFuTXZiMkpxWldOMEwyRnpjMmxuYmk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF5ZFc1MGFXMWxMMk52Y21VdGFuTXZiMkpxWldOMEwyTnlaV0YwWlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF5ZFc1MGFXMWxMMk52Y21VdGFuTXZiMkpxWldOMEwyUmxabWx1WlMxd2NtOXdaWEowZVM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF5ZFc1MGFXMWxMMk52Y21VdGFuTXZiMkpxWldOMEwyZGxkQzF3Y205MGIzUjVjR1V0YjJZdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y25WdWRHbHRaUzlqYjNKbExXcHpMMjlpYW1WamRDOXBjeTFtY205NlpXNHVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNuVnVkR2x0WlM5amIzSmxMV3B6TDI5aWFtVmpkQzlyWlhsekxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhKMWJuUnBiV1V2WTI5eVpTMXFjeTl2WW1wbFkzUXZjMlYwTFhCeWIzUnZkSGx3WlMxdlppNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxeWRXNTBhVzFsTDJOdmNtVXRhbk12Y0hKdmJXbHpaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXlkVzUwYVcxbEwyTnZjbVV0YW5NdmMzbHRZbTlzTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEoxYm5ScGJXVXZZMjl5WlMxcWN5OXplVzFpYjJ3dmFYUmxjbUYwYjNJdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y25WdWRHbHRaUzlvWld4d1pYSnpMMk5zWVhOelEyRnNiRU5vWldOckxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhKMWJuUnBiV1V2YUdWc2NHVnljeTlqY21WaGRHVkRiR0Z6Y3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF5ZFc1MGFXMWxMMmhsYkhCbGNuTXZhVzVvWlhKcGRITXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNuVnVkR2x0WlM5b1pXeHdaWEp6TDNCdmMzTnBZbXhsUTI5dWMzUnlkV04wYjNKU1pYUjFjbTR1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjblZ1ZEdsdFpTOW9aV3h3WlhKekwzUjVjR1Z2Wmk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJadUwzSmxaMlY0Y0M5bGMyTmhjR1V1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDJwemIyNHZjM1J5YVc1bmFXWjVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTl2WW1wbFkzUXZZWE56YVdkdUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5bWJpOXZZbXBsWTNRdlkzSmxZWFJsTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2WkdWbWFXNWxMWEJ5YjNCbGNuUjVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTl2WW1wbFkzUXZaMlYwTFhCeWIzUnZkSGx3WlMxdlppNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdlptNHZiMkpxWldOMEwybHpMV1p5YjNwbGJpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdlptNHZiMkpxWldOMEwydGxlWE11YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDI5aWFtVmpkQzl6WlhRdGNISnZkRzkwZVhCbExXOW1MbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTl3Y205dGFYTmxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTl6ZVcxaWIyd3ZhVzVrWlhndWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwzTjViV0p2YkM5cGRHVnlZWFJ2Y2k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWVMxbWRXNWpkR2x2Ymk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWVdSa0xYUnZMWFZ1YzJOdmNHRmliR1Z6TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTloYmkxcGJuTjBZVzVqWlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWVc0dGIySnFaV04wTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTloY25KaGVTMXBibU5zZFdSbGN5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZlkyeGhjM052Wmk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWTI5bUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5amIzSmxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWpkSGd1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMlJsWm1sdVpXUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyUmxjMk55YVhCMGIzSnpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWtiMjB0WTNKbFlYUmxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWxiblZ0TFdKMVp5MXJaWGx6TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlsYm5WdExXdGxlWE11YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMlY0Y0c5eWRDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZlptRnBiSE11YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMlp2Y2kxdlppNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZloyeHZZbUZzTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlvWVhNdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJocFpHVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyaDBiV3d1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMmxsT0Mxa2IyMHRaR1ZtYVc1bExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5cGJuWnZhMlV1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMmx2WW1wbFkzUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgybHpMV0Z5Y21GNUxXbDBaWEl1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMmx6TFdGeWNtRjVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXBjeTF2WW1wbFkzUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgybDBaWEl0WTJGc2JDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmFYUmxjaTFqY21WaGRHVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgybDBaWEl0WkdWbWFXNWxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXBkR1Z5TFdSbGRHVmpkQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZhWFJsY2kxemRHVndMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXBkR1Z5WVhSdmNuTXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgydGxlVzltTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlzYVdKeVlYSjVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXRaWFJoTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl0YVdOeWIzUmhjMnN1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMjlpYW1WamRDMWhjM05wWjI0dWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDI5aWFtVmpkQzFqY21WaGRHVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyOWlhbVZqZEMxa2NDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmIySnFaV04wTFdSd2N5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmIySnFaV04wTFdkdmNHUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyOWlhbVZqZEMxbmIzQnVMV1Y0ZEM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYjJKcVpXTjBMV2R2Y0c0dWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDI5aWFtVmpkQzFuYjNCekxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5dlltcGxZM1F0WjNCdkxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5dlltcGxZM1F0YTJWNWN5MXBiblJsY201aGJDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmIySnFaV04wTFd0bGVYTXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyOWlhbVZqZEMxd2FXVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyOWlhbVZqZEMxellYQXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgzQnliM0JsY25SNUxXUmxjMk11YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYM0psWkdWbWFXNWxMV0ZzYkM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmY21Wa1pXWnBibVV1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYM05sZEMxd2NtOTBieTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZjMlYwTFhOd1pXTnBaWE11YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYM05sZEMxMGJ5MXpkSEpwYm1jdGRHRm5MbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXphR0Z5WldRdGEyVjVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXphR0Z5WldRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNOd1pXTnBaWE10WTI5dWMzUnlkV04wYjNJdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNOMGNtbHVaeTFoZEM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmZEdGemF5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmRHOHRhVzVrWlhndWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNSdkxXbHVkR1ZuWlhJdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNSdkxXbHZZbXBsWTNRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNSdkxXeGxibWQwYUM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmZEc4dGIySnFaV04wTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTkwYnkxd2NtbHRhWFJwZG1VdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNWcFpDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmQydHpMV1JsWm1sdVpTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmQydHpMV1Y0ZEM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmZDJ0ekxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDJOdmNtVXVaMlYwTFdsMFpYSmhkRzl5TFcxbGRHaHZaQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWxjell1WVhKeVlYa3VhWFJsY21GMGIzSXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNWhjM05wWjI0dWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1amNtVmhkR1V1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVrWldacGJtVXRjSEp2Y0dWeWRIa3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNW5aWFF0Y0hKdmRHOTBlWEJsTFc5bUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdWFYTXRabkp2ZW1WdUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdWEyVjVjeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbk5sZEMxd2NtOTBiM1I1Y0dVdGIyWXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNTBieTF6ZEhKcGJtY3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlpYTTJMbkJ5YjIxcGMyVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlpYTTJMbk4wY21sdVp5NXBkR1Z5WVhSdmNpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5bGN6WXVjM2x0WW05c0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDJWek55NXplVzFpYjJ3dVlYTjVibU10YVhSbGNtRjBiM0l1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZaWE0zTG5ONWJXSnZiQzV2WW5ObGNuWmhZbXhsTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMM2RsWWk1a2IyMHVhWFJsY21GaWJHVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOWhMVzUxYldKbGNpMTJZV3gxWlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDJGa1pDMTBieTExYm5OamIzQmhZbXhsY3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDJGeWNtRjVMV052Y0hrdGQybDBhR2x1TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmWVhKeVlYa3RabWxzYkM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDJGeWNtRjVMV1p5YjIwdGFYUmxjbUZpYkdVdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5aGNuSmhlUzF0WlhSb2IyUnpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZZWEp5WVhrdGNtVmtkV05sTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmWVhKeVlYa3RjM0JsWTJsbGN5MWpiMjV6ZEhKMVkzUnZjaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMkZ5Y21GNUxYTndaV05wWlhNdFkzSmxZWFJsTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmWW1sdVpDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyTnZiR3hsWTNScGIyNHRjM1J5YjI1bkxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZlkyOXNiR1ZqZEdsdmJpMTBieTFxYzI5dUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZlkyOXNiR1ZqZEdsdmJpMTNaV0ZyTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmWTI5c2JHVmpkR2x2Ymk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDJOeVpXRjBaUzF3Y205d1pYSjBlUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMlJoZEdVdGRHOHRjSEpwYldsMGFYWmxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZaWGh3YjNKMExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZlptRnBiSE10YVhNdGNtVm5aWGh3TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmWm1sNExYSmxMWGRyY3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDJac1lXZHpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZhVzVvWlhKcGRDMXBaaTF5WlhGMWFYSmxaQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMmx6TFdsdWRHVm5aWEl1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTlwY3kxeVpXZGxlSEF1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTlzYVdKeVlYSjVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZiV0YwYUMxbGVIQnRNUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMjFoZEdndGJHOW5NWEF1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTl0WVhSb0xYTnBaMjR1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTl0WlhSaFpHRjBZUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMjlpYW1WamRDMW1iM0pqWldRdGNHRnRMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZiMkpxWldOMExYUnZMV0Z5Y21GNUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmIzZHVMV3RsZVhNdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5d1lYSnpaUzFtYkc5aGRDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgzQmhjbk5sTFdsdWRDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgzQmhjblJwWVd3dWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5d1lYUm9MbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZjbVZrWldacGJtVXRZV3hzTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmY21Wa1pXWnBibVV1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTl5WlhCc1lXTmxjaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYM05oYldVdGRtRnNkV1V1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTl6WlhRdGMzQmxZMmxsY3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDNOMGNtbGpkQzF0WlhSb2IyUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOXpkSEpwYm1jdFkyOXVkR1Y0ZEM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDNOMGNtbHVaeTFvZEcxc0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmMzUnlhVzVuTFhCaFpDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgzTjBjbWx1WnkxeVpYQmxZWFF1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTl6ZEhKcGJtY3RkSEpwYlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDNOMGNtbHVaeTEzY3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDNSNWNHVmtMV0Z5Y21GNUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmRIbHdaV1F0WW5WbVptVnlMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZkSGx3WldRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJOdmNtVXVjbVZuWlhod0xtVnpZMkZ3WlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtRnljbUY1TG1OdmNIa3RkMmwwYUdsdUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVZWEp5WVhrdVpYWmxjbmt1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1aGNuSmhlUzVtYVd4c0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVZWEp5WVhrdVptbHNkR1Z5TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdVlYSnlZWGt1Wm1sdVpDMXBibVJsZUM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtRnljbUY1TG1acGJtUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTVoY25KaGVTNW1iM0l0WldGamFDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbUZ5Y21GNUxtWnliMjB1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1aGNuSmhlUzVwYm1SbGVDMXZaaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG1GeWNtRjVMbWx6TFdGeWNtRjVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1WVhKeVlYa3VhbTlwYmk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtRnljbUY1TG14aGMzUXRhVzVrWlhndGIyWXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTVoY25KaGVTNXRZWEF1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1aGNuSmhlUzV2Wmk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtRnljbUY1TG5KbFpIVmpaUzF5YVdkb2RDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbUZ5Y21GNUxuSmxaSFZqWlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtRnljbUY1TG5Oc2FXTmxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1WVhKeVlYa3VjMjl0WlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtRnljbUY1TG5OdmNuUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTVoY25KaGVTNXpjR1ZqYVdWekxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVaR0YwWlM1dWIzY3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTVrWVhSbExuUnZMV2x6YnkxemRISnBibWN1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1a1lYUmxMblJ2TFdwemIyNHVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTVrWVhSbExuUnZMWEJ5YVcxcGRHbDJaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG1SaGRHVXVkRzh0YzNSeWFXNW5MbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1Wm5WdVkzUnBiMjR1WW1sdVpDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbVoxYm1OMGFXOXVMbWhoY3kxcGJuTjBZVzVqWlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtWjFibU4wYVc5dUxtNWhiV1V1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1dFlYQXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV0WVhSb0xtRmpiM05vTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWJXRjBhQzVoYzJsdWFDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbTFoZEdndVlYUmhibWd1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1dFlYUm9MbU5pY25RdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXRZWFJvTG1Oc2VqTXlMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1YldGMGFDNWpiM05vTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWJXRjBhQzVsZUhCdE1TNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbTFoZEdndVpuSnZkVzVrTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWJXRjBhQzVvZVhCdmRDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbTFoZEdndWFXMTFiQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG0xaGRHZ3ViRzluTVRBdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXRZWFJvTG14dlp6RndMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1YldGMGFDNXNiMmN5TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWJXRjBhQzV6YVdkdUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXViV0YwYUM1emFXNW9MbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1YldGMGFDNTBZVzVvTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWJXRjBhQzUwY25WdVl5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbTUxYldKbGNpNWpiMjV6ZEhKMVkzUnZjaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG01MWJXSmxjaTVsY0hOcGJHOXVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1Ym5WdFltVnlMbWx6TFdacGJtbDBaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG01MWJXSmxjaTVwY3kxcGJuUmxaMlZ5TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWJuVnRZbVZ5TG1sekxXNWhiaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG01MWJXSmxjaTVwY3kxellXWmxMV2x1ZEdWblpYSXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV1ZFcxaVpYSXViV0Y0TFhOaFptVXRhVzUwWldkbGNpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbTUxYldKbGNpNXRhVzR0YzJGbVpTMXBiblJsWjJWeUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXViblZ0WW1WeUxuQmhjbk5sTFdac2IyRjBMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1Ym5WdFltVnlMbkJoY25ObExXbHVkQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG01MWJXSmxjaTUwYnkxbWFYaGxaQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG01MWJXSmxjaTUwYnkxd2NtVmphWE5wYjI0dWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdVpHVm1hVzVsTFhCeWIzQmxjblJwWlhNdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdVpuSmxaWHBsTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG1kbGRDMXZkMjR0Y0hKdmNHVnlkSGt0WkdWelkzSnBjSFJ2Y2k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1blpYUXRiM2R1TFhCeWIzQmxjblI1TFc1aGJXVnpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbWx6TFdWNGRHVnVjMmxpYkdVdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdWFYTXRjMlZoYkdWa0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtbHpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbkJ5WlhabGJuUXRaWGgwWlc1emFXOXVjeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzV6WldGc0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExuUnZMWE4wY21sdVp5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbkJoY25ObExXWnNiMkYwTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWNHRnljMlV0YVc1MExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjbVZtYkdWamRDNWhjSEJzZVM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuSmxabXhsWTNRdVkyOXVjM1J5ZFdOMExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjbVZtYkdWamRDNWtaV1pwYm1VdGNISnZjR1Z5ZEhrdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXlaV1pzWldOMExtUmxiR1YwWlMxd2NtOXdaWEowZVM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuSmxabXhsWTNRdVpXNTFiV1Z5WVhSbExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjbVZtYkdWamRDNW5aWFF0YjNkdUxYQnliM0JsY25SNUxXUmxjMk55YVhCMGIzSXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV5Wldac1pXTjBMbWRsZEMxd2NtOTBiM1I1Y0dVdGIyWXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV5Wldac1pXTjBMbWRsZEM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuSmxabXhsWTNRdWFHRnpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1Y21WbWJHVmpkQzVwY3kxbGVIUmxibk5wWW14bExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjbVZtYkdWamRDNXZkMjR0YTJWNWN5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbkpsWm14bFkzUXVjSEpsZG1WdWRDMWxlSFJsYm5OcGIyNXpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1Y21WbWJHVmpkQzV6WlhRdGNISnZkRzkwZVhCbExXOW1MbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1Y21WbWJHVmpkQzV6WlhRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXlaV2RsZUhBdVkyOXVjM1J5ZFdOMGIzSXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV5WldkbGVIQXVabXhoWjNNdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXlaV2RsZUhBdWJXRjBZMmd1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1eVpXZGxlSEF1Y21Wd2JHRmpaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5KbFoyVjRjQzV6WldGeVkyZ3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV5WldkbGVIQXVjM0JzYVhRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXlaV2RsZUhBdWRHOHRjM1J5YVc1bkxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjMlYwTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWMzUnlhVzVuTG1GdVkyaHZjaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5OMGNtbHVaeTVpYVdjdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXpkSEpwYm1jdVlteHBibXN1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1emRISnBibWN1WW05c1pDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbk4wY21sdVp5NWpiMlJsTFhCdmFXNTBMV0YwTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWMzUnlhVzVuTG1WdVpITXRkMmwwYUM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1bWFYaGxaQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5OMGNtbHVaeTVtYjI1MFkyOXNiM0l1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1emRISnBibWN1Wm05dWRITnBlbVV1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1emRISnBibWN1Wm5KdmJTMWpiMlJsTFhCdmFXNTBMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1YzNSeWFXNW5MbWx1WTJ4MVpHVnpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1YzNSeWFXNW5MbWwwWVd4cFkzTXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV6ZEhKcGJtY3ViR2x1YXk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1eVlYY3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV6ZEhKcGJtY3VjbVZ3WldGMExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxuTnRZV3hzTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWMzUnlhVzVuTG5OMFlYSjBjeTEzYVhSb0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxuTjBjbWxyWlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1emRXSXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV6ZEhKcGJtY3VjM1Z3TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWMzUnlhVzVuTG5SeWFXMHVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTUwZVhCbFpDNWhjbkpoZVMxaWRXWm1aWEl1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1MGVYQmxaQzVrWVhSaExYWnBaWGN1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1MGVYQmxaQzVtYkc5aGRETXlMV0Z5Y21GNUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVkSGx3WldRdVpteHZZWFEyTkMxaGNuSmhlUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5SNWNHVmtMbWx1ZERFMkxXRnljbUY1TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWRIbHdaV1F1YVc1ME16SXRZWEp5WVhrdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNTBlWEJsWkM1cGJuUTRMV0Z5Y21GNUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVkSGx3WldRdWRXbHVkREUyTFdGeWNtRjVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1ZEhsd1pXUXVkV2x1ZERNeUxXRnljbUY1TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWRIbHdaV1F1ZFdsdWREZ3RZWEp5WVhrdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNTBlWEJsWkM1MWFXNTBPQzFqYkdGdGNHVmtMV0Z5Y21GNUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVkMlZoYXkxdFlYQXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTUzWldGckxYTmxkQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0zTG1GeWNtRjVMbWx1WTJ4MVpHVnpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjemN1WVhOaGNDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTNMbVZ5Y205eUxtbHpMV1Z5Y205eUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6Y3ViV0Z3TG5SdkxXcHpiMjR1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tnk1dFlYUm9MbWxoWkdSb0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6Y3ViV0YwYUM1cGJYVnNhQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0zTG0xaGRHZ3VhWE4xWW1ndWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NXRZWFJvTG5WdGRXeG9MbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjemN1YjJKcVpXTjBMbVJsWm1sdVpTMW5aWFIwWlhJdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NXZZbXBsWTNRdVpHVm1hVzVsTFhObGRIUmxjaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0zTG05aWFtVmpkQzVsYm5SeWFXVnpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjemN1YjJKcVpXTjBMbWRsZEMxdmQyNHRjSEp2Y0dWeWRIa3RaR1Z6WTNKcGNIUnZjbk11YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tnk1dlltcGxZM1F1Ykc5dmEzVndMV2RsZEhSbGNpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTNMbTlpYW1WamRDNXNiMjlyZFhBdGMyVjBkR1Z5TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pjdWIySnFaV04wTG5aaGJIVmxjeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0zTG05aWMyVnlkbUZpYkdVdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NXlaV1pzWldOMExtUmxabWx1WlMxdFpYUmhaR0YwWVM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNM0xuSmxabXhsWTNRdVpHVnNaWFJsTFcxbGRHRmtZWFJoTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pjdWNtVm1iR1ZqZEM1blpYUXRiV1YwWVdSaGRHRXRhMlY1Y3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNM0xuSmxabXhsWTNRdVoyVjBMVzFsZEdGa1lYUmhMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjemN1Y21WbWJHVmpkQzVuWlhRdGIzZHVMVzFsZEdGa1lYUmhMV3RsZVhNdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NXlaV1pzWldOMExtZGxkQzF2ZDI0dGJXVjBZV1JoZEdFdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NXlaV1pzWldOMExtaGhjeTF0WlhSaFpHRjBZUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0zTG5KbFpteGxZM1F1YUdGekxXOTNiaTF0WlhSaFpHRjBZUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0zTG5KbFpteGxZM1F1YldWMFlXUmhkR0V1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tnk1elpYUXVkRzh0YW5OdmJpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTNMbk4wY21sdVp5NWhkQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0zTG5OMGNtbHVaeTV0WVhSamFDMWhiR3d1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tnk1emRISnBibWN1Y0dGa0xXVnVaQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0zTG5OMGNtbHVaeTV3WVdRdGMzUmhjblF1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tnk1emRISnBibWN1ZEhKcGJTMXNaV1owTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pjdWMzUnlhVzVuTG5SeWFXMHRjbWxuYUhRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NXplWE4wWlcwdVoyeHZZbUZzTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTkzWldJdVpHOXRMbWwwWlhKaFlteGxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OTNaV0l1YVcxdFpXUnBZWFJsTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTkzWldJdWRHbHRaWEp6TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YzJocGJTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OXdjbTlqWlhOekwySnliM2R6WlhJdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdmNtVm5aVzVsY21GMGIzSXRjblZ1ZEdsdFpTOXlkVzUwYVcxbExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwzTmxjblpwWTJVdFpuSmhiV1YzYjNKckwyUnBjM1F2VFdWemMyRm5aVVpoWTNSdmNua3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZjMlZ5ZG1salpTMW1jbUZ0WlhkdmNtc3ZaR2x6ZEM5UVpYSnphWE4wWlc1alpVMWhibUZuWlhJdWFuTWlMQ0p6Y21NdlluVnpMMEoxY3k1cWN5SXNJbk55WXk5aWRYTXZUV1Z6YzJGblpVSjFjeTVxY3lJc0luTnlZeTlpZFhNdlVHbHdaV3hwYm1VdWFuTWlMQ0p6Y21NdmFXUmxiblJwZEhrdlEzSjVjSFJ2TG1weklpd2ljM0pqTDJsa1pXNTBhWFI1TDBkMWFVWmhhMlV1YW5NaUxDSnpjbU12YVdSbGJuUnBkSGt2U1dSbGJuUnBkSGt1YW5NaUxDSnpjbU12YVdSbGJuUnBkSGt2U1dSbGJuUnBkSGxOYjJSMWJHVXVhbk1pTENKemNtTXZjRzlzYVdONUwwTnZiV0pwYm1sdVowRnNaMjl5YVhSb2JTNXFjeUlzSW5OeVl5OXdiMnhwWTNrdlQzQmxjbUYwYjNKekxtcHpJaXdpYzNKakwzQnZiR2xqZVM5UVJGQXVhbk1pTENKemNtTXZjRzlzYVdONUwxQkZVQzVxY3lJc0luTnlZeTl3YjJ4cFkza3ZVRzlzYVdONUxtcHpJaXdpYzNKakwzQnZiR2xqZVM5UWIyeHBZM2xGYm1kcGJtVXVhbk1pTENKemNtTXZjRzlzYVdONUwxSjFiR1V1YW5NaUxDSnpjbU12Y0c5c2FXTjVMMk52YldKcGJtbHVaMEZzWjI5eWFYUm9iWE12UkdWdWVVOTJaWEp5YVdSbGN5NXFjeUlzSW5OeVl5OXdiMnhwWTNrdlkyOXRZbWx1YVc1blFXeG5iM0pwZEdodGN5OUdhWEp6ZEVGd2NHeHBZMkZpYkdVdWFuTWlMQ0p6Y21NdmNHOXNhV041TDJOdmJtUnBkR2x2Ym5NdlEyOXVaR2wwYVc5dUxtcHpJaXdpYzNKakwzQnZiR2xqZVM5amIyNWthWFJwYjI1ekwxTjFZbk5qY21sd2RHbHZia052Ym1ScGRHbHZiaTVxY3lJc0luTnlZeTl3YjJ4cFkza3ZZMjl1ZEdWNGRDOURiMjF0YjI1RGRIZ3Vhbk1pTENKemNtTXZjRzlzYVdONUwyTnZiblJsZUhRdlVuVnVkR2x0WlVOdmNtVkRkSGd1YW5NaUxDSnpjbU12Y0c5c2FXTjVMM0J2YkdsamFXVnpMMVZ6WlhKUWIyeHBZM2t1YW5NaUxDSnpjbU12Y21WbmFYTjBjbmt2UVdSa2NtVnpjMEZzYkc5allYUnBiMjR1YW5NaUxDSnpjbU12Y21WbmFYTjBjbmt2U0hsd1pYSjBlVWx1YzNSaGJtTmxMbXB6SWl3aWMzSmpMM0psWjJsemRISjVMMUpsWjJsemRISjVMbXB6SWl3aWMzSmpMM0psWjJsemRISjVMMUpsWjJsemRISjVSR0YwWVUxdlpHVnNMbXB6SWl3aWMzSmpMM0oxYm5ScGJXVXZVblZ1ZEdsdFpWVkJMbXB6SWl3aWMzSmpMM041Ym1Ob1pYSXZUMkpxWldOMFFXeHNiMk5oZEdsdmJpNXFjeUlzSW5OeVl5OXplVzVqYUdWeUwwOWljMlZ5ZG1WeVQySnFaV04wTG1weklpd2ljM0pqTDNONWJtTm9aWEl2VW1Wd2IzSjBaWEpQWW1wbFkzUXVhbk1pTENKemNtTXZjM2x1WTJobGNpOVRkV0p6WTNKcGNIUnBiMjR1YW5NaUxDSnpjbU12YzNsdVkyaGxjaTlUZVc1amFHVnlUV0Z1WVdkbGNpNXFjeUlzSW5OeVl5OTFkR2xzY3k5RmRtVnVkRVZ0YVhSMFpYSXVhbk1pTENKemNtTXZkWFJwYkhNdmRIWTBMbXB6SWl3aWMzSmpMM1YwYVd4ekwzVjBhV3h6TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPenRCUTBGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3UVVNdlFrRTdPMEZEUVVFN08wRkRRVUU3TzBGRFFVRTdPMEZEUVVFN08wRkRRVUU3TzBGRFFVRTdPMEZEUVVFN08wRkRRVUU3TzBGRFFVRTdPMEZEUVVFN08wRkRRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMUpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU14UWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyaERRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJoQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEY0VKQk8wRkJRMEU3TzBGRFJFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOS1FUdEJRVU5CT3p0QlEwUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFNrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOS1FUdEJRVU5CT3p0QlEwUkJPMEZCUTBFN08wRkRSRUU3UVVGRFFUczdRVU5FUVR0QlFVTkJPenRCUTBSQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEU2tFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5LUVR0QlFVTkJPMEZCUTBFN08wRkRSa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEU0VFN08wRkRRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTktRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwcEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOd1FrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOMFFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOS1FUdEJRVU5CT3p0QlEwUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRia0pCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEU0VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVGtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFNFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMlJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRelZFUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5PUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU40UWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFNFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOUVFUczdRVU5CUVR0QlFVTkJPMEZCUTBFN08wRkRSa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRaa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTktRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFCQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEU2tFN1FVRkRRVHRCUVVOQk96dEJRMFpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTllRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5hUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU55UlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM0JDUVR0QlFVTkJPMEZCUTBFN08wRkRSa0U3TzBGRFFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVkVFN08wRkRRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOd1JFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOdVJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMmhEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGVrTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyWkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMXBCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMlpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYmtKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTA1Qk96dEJRMEZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFwQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRhRUpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMDVCT3p0QlEwRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFSQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRVRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRUa0U3TzBGRFFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGVFSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFlrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFRrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOS1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRURUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOUVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMmhDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRNVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMDVCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOTVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRURUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTB4Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEU2tFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMWhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMUpCT3p0QlEwRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRWa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOUVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOcVEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTRUU3UVVGRFFUdEJRVU5CT3p0QlEwWkJPMEZCUTBFN1FVRkRRVHM3UVVOR1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFVrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5RUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVWtFN1FVRkRRVHRCUVVOQk96dEJRMFpCT3p0QlEwRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRNVk5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGFFSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUXpGUFFUczdRVU5CUVRzN1FVTkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRCUTFwQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEU2tFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3T3p0QlEwNUJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEZWtKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTmtRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzBGRFVFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU16UTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRNMEpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMlpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOTVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdPenRCUTNaQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVNM1NVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRiRVpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzBGRGNFWkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3UVVOUVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN096czdPenM3T3p0QlExSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlF6RkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1FVTllRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVNelFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdPenM3T3pzN096czdPMEZEV2tFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096czdPenM3T3p0QlExQkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRCUTB4Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdPenM3T3pzN096czdPenM3UVVOUVFUczdRVU5CUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlVRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5JUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0QlEwaEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenM3T3pzN096czdPMEZEYkVSQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTA1Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJaQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMVJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFVFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGRFSkJPenM3TzBGRFFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOS1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUXk5Q1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMUJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzBGRFNFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdPenM3T3pzN1FVTmFRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dEJRMDVCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFVFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYkVKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRhRUpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTllRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRE4wSkJPMEZCUTBFN096czdPenM3T3pzN096czdPenM3UVVORVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlF6bGtRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGFGSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3T3pzN096czdPenRCUTNwQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRURUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTB4Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMVJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOTVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5VUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMkpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRZa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5XUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTNKRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRaRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3UVVOSVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEV0VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGNrSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFSQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMnhDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlVRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOVVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU16UWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRWRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTjBRa0U3TzBGRFFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRE0wSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFlrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5XUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOSVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTmFRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTjRRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOb1FrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEycENRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOVVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5VUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlFRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRVa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTktRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTNwQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVONFFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5vUWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlFRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5JUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExQkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMGhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOa1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEV0VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlFRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEY0VWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwaEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5JUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExQkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFSQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwaEJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMGhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTBoQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwaEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGFFaEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096czdPMEZEYWtKQk8wRkJRMEU3UVVGRFFUczdPenRCUTBaQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOU1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFVrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdRVU5JUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08wRkRVRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOUVFUdEJRVU5CTzBGQlEwRTdPenM3UVVOR1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFVrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08wRkRVa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFZFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3UVVOSVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVObVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlF6bERRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU55UWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOV1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM3BDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlVRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOVVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEY0VKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRVRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5XUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOSVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVObVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRaRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZET1VKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUXpGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTBwQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMVJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTllRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOVVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOeVJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGVFSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOWVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOT1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOT1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOT1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOT1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFVrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTnVRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRUa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRUa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRUa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTjBRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExaEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08wRkRUa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRUa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMnBDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFRFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFRrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEycENRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTk9RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTk9RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTk9RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dEJRMDVCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlF6ZERRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5JUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMHBCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTktRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwcEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFNrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOS1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTBwQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEU2tFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5LUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTNaRVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEV0VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMWhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTllRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRVa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEU0VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOV1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVObVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExWkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyWkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOWVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEV0VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMnhDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYWtKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOcVFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTNSTlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMUJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOa1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5zUWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTm9Ra0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOUVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFVrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFprRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5rUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOSVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5VUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkROMEpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFSQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTA1Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3T3pzN1FVTk9RVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5JUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOeVFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMHhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYmtKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZETDB0Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3UVVOd1NVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3T3p0QlF6VndRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096czdRVU12UWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenM3T3pzN096czdPenM3T3pzN096czdRVU12UWtFN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZCZFVKQk96czdPenM3TzBsQlRVMHNSenRCUVVOS096czdPenM3TzBGQlUwRXNhVUpCUVdNN1FVRkJRVHM3UVVGRFdpeFJRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMRlZCUVUwc1RVRkJUaXhIUVVGbExFTkJRV1k3UVVGRFFTeFZRVUZOTEdOQlFVNHNSMEZCZFVJc1JVRkJka0k3TzBGQlJVRXNWVUZCVFN4blFrRkJUaXhIUVVGNVFpeEpRVUY2UWl4RFFVRXJRanRCUVVNdlFpeFZRVUZOTEd0Q1FVRk9MRWRCUVRKQ0xFVkJRVE5DT3p0QlFVVkJMRlZCUVUwc2VVSkJRVTQ3UVVGRFJEczdRVUZGUkRzN096czdPenM3T3pzN1owTkJUMWtzUnl4RlFVRkxMRkVzUlVGQlZUdEJRVU42UWl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFZRVUZKTEU5QlFVOHNTVUZCU1N4WFFVRktMRU5CUVdkQ0xFMUJRVTBzWTBGQmRFSXNSVUZCYzBNc1IwRkJkRU1zUlVGQk1rTXNVVUZCTTBNc1EwRkJXRHRCUVVOQkxGVkJRVWtzVjBGQlZ5eE5RVUZOTEdOQlFVNHNRMEZCY1VJc1IwRkJja0lzUTBGQlpqdEJRVU5CTEZWQlFVa3NRMEZCUXl4UlFVRk1MRVZCUVdVN1FVRkRZaXh0UWtGQlZ5eEZRVUZZTzBGQlEwRXNZMEZCVFN4alFVRk9MRU5CUVhGQ0xFZEJRWEpDTEVsQlFUUkNMRkZCUVRWQ08wRkJRMFE3TzBGQlJVUXNaVUZCVXl4SlFVRlVMRU5CUVdNc1NVRkJaRHRCUVVOQkxHRkJRVThzU1VGQlVEdEJRVU5FT3p0QlFVVkVPenM3T3pzN096czdPenQzUTBGUmIwSXNSeXhGUVVGTExFc3NSVUZCVHl4blFpeEZRVUZyUWp0QlFVTm9SQ3hYUVVGTExHdENRVUZNTEVOQlFYZENMRTFCUVUwc1MwRkJPVUlzU1VGQmRVTXNaMEpCUVhaRE8wRkJRMFE3TzBGQlJVUTdPenM3T3pzN096SkRRVXQxUWl4SExFVkJRVXNzU3l4RlFVRlBPMEZCUTJwRExHRkJRVThzUzBGQlN5eHJRa0ZCVEN4RFFVRjNRaXhOUVVGTkxFdEJRVGxDTEVOQlFWQTdRVUZEUkRzN1FVRkZSRHM3T3pzN096dDVRMEZKY1VJc1J5eEZRVUZMTzBGQlEzaENMR0ZCUVU4c1MwRkJTeXhqUVVGTUxFTkJRVzlDTEVkQlFYQkNMRU5CUVZBN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN096dDVRa0ZQU3l4TkxFVkJRVkVzU3l4RlFVRlBMRTBzUlVGQlVUdEJRVUZCT3p0QlFVTXhRaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4VlFVRkpMRmxCUVZrc1RVRkJUU3hYUVVGT0xFTkJRV3RDTEUxQlFXeENMRVZCUVRCQ0xGVkJRVU1zUjBGQlJDeEZRVUZUTzBGQlEycEVMR1ZCUVU4c1YwRkJVQ3hEUVVGdFFpeEhRVUZ1UWp0QlFVTkVMRTlCUm1Vc1EwRkJhRUk3TzBGQlNVRXNWVUZCU1N4alFVRmpMRTlCUVU4c1YwRkJVQ3hEUVVGdFFpeExRVUZ1UWl4RlFVRXdRaXhWUVVGRExFZEJRVVFzUlVGQlV6dEJRVU51UkN4alFVRk5MRmRCUVU0c1EwRkJhMElzUjBGQmJFSTdRVUZEUkN4UFFVWnBRaXhEUVVGc1FqczdRVUZKUVN4aFFVRlBPMEZCUTB3c2MwSkJRV01zVTBGRVZEdEJRVVZNTEhkQ1FVRm5RaXhYUVVaWU8wRkJSMHdzWjBKQlFWRXNhMEpCUVUwN1FVRkRXaXhwUWtGQlN5eFpRVUZNTEVOQlFXdENMRTFCUVd4Q08wRkJRMEVzYVVKQlFVc3NZMEZCVEN4RFFVRnZRaXhOUVVGd1FqdEJRVU5FTzBGQlRra3NUMEZCVUR0QlFWRkVPenRCUVVWRU96czdPM05EUVVOclFpeEhMRVZCUVVzN1FVRkRja0k3UVVGRFFTeFZRVUZKTEZkQlFWY3NTMEZCU3l4alFVRk1MRU5CUVc5Q0xFZEJRWEJDTEVOQlFXWTdRVUZEUVN4VlFVRkpMRkZCUVVvc1JVRkJZenRCUVVOYUxHRkJRVXNzVlVGQlRDeERRVUZuUWl4UlFVRm9RaXhGUVVFd1FpeEhRVUV4UWp0QlFVTkVPMEZCUTBZN08wRkJSVVE3T3pzN0swSkJRMWNzVVN4RlFVRlZMRWNzUlVGQlN6dEJRVU40UWl4bFFVRlRMRTlCUVZRc1EwRkJhVUlzVlVGQlF5eEhRVUZFTEVWQlFWTTdRVUZEZUVJc1dVRkJTU3hUUVVGS0xFTkJRV01zUjBGQlpEdEJRVU5FTEU5QlJrUTdRVUZIUkRzN08zTkRRVVZwUWl4TExFVkJRVThzWjBJc1JVRkJhMEk3UVVGRGVrTXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUU3UVVGRFFTeFZRVUZKTEdkQ1FVRktMRVZCUVhOQ08wRkJRVUU3UVVGRGNFSXNZMEZCU1N4aFFVRmhMRTFCUVUwc1NVRkJUaXhIUVVGaExFMUJRVTBzUlVGQmNFTTdRVUZEUVN4blFrRkJUU3hyUWtGQlRpeERRVUY1UWl4VlFVRjZRaXhKUVVGMVF5eG5Ra0ZCZGtNN08wRkJSVUVzY1VKQlFWY3NXVUZCVFR0QlFVTm1MR2RDUVVGSkxHTkJRV01zVFVGQlRTeHJRa0ZCVGl4RFFVRjVRaXhWUVVGNlFpeERRVUZzUWp0QlFVTkJMRzFDUVVGUExFMUJRVTBzYTBKQlFVNHNRMEZCZVVJc1ZVRkJla0lzUTBGQlVEczdRVUZGUVN4blFrRkJTU3hYUVVGS0xFVkJRV2xDTzBGQlEyWXNhMEpCUVVrc1YwRkJWenRCUVVOaUxHOUNRVUZKTEUxQlFVMHNSVUZFUnl4RlFVTkRMRTFCUVUwc1ZVRkVVRHRCUVVWaUxITkNRVUZOTEVWQlFVVXNUVUZCVFN4SFFVRlNMRVZCUVdFc1RVRkJUU3h0UWtGQmJrSXNSVUZCZDBNc1QwRkJUeXhMUVVFdlF6dEJRVVpQTEdWQlFXWTdPMEZCUzBFc01FSkJRVmtzVVVGQldqdEJRVU5FTzBGQlEwWXNWMEZhUkN4RlFWbEhMRTFCUVUwc1owSkJXbFE3UVVGS2IwSTdRVUZwUW5KQ08wRkJRMFk3T3p0blEwRkZWeXhITEVWQlFVczdRVUZEWml4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFZRVUZKTEVsQlFVa3NTVUZCU2l4TFFVRmhMRlZCUVdwQ0xFVkJRVFpDTzBGQlF6TkNMRmxCUVVrc1lVRkJZU3hKUVVGSkxFVkJRVW9zUjBGQlV5eEpRVUZKTEVWQlFUbENPMEZCUTBFc1dVRkJTU3hqUVVGakxFMUJRVTBzYTBKQlFVNHNRMEZCZVVJc1ZVRkJla0lzUTBGQmJFSTdPMEZCUlVFN1FVRkRRU3haUVVGSkxFbEJRVWtzU1VGQlNpeERRVUZUTEVsQlFWUXNTVUZCYVVJc1IwRkJja0lzUlVGQk1FSTdRVUZEZUVJc2FVSkJRVThzVFVGQlRTeHJRa0ZCVGl4RFFVRjVRaXhWUVVGNlFpeERRVUZRTzBGQlEwUTdPMEZCUlVRc1dVRkJTU3hYUVVGS0xFVkJRV2xDTzBGQlEyWXNjMEpCUVZrc1IwRkJXanRCUVVOQkxHbENRVUZQTEVsQlFWQTdRVUZEUkR0QlFVTkdPenRCUVVWRUxHRkJRVThzUzBGQlVEdEJRVU5FT3p0QlFVVkVPenM3T3l0Q1FVTlhMRWNzUlVGQlN6dEJRVU5rTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxGVkJRVWtzUTBGQlF5eE5RVUZOTEZkQlFVNHNRMEZCYTBJc1IwRkJiRUlzUTBGQlRDeEZRVUUyUWp0QlFVTXpRaXhaUVVGSkxGZEJRVmNzVFVGQlRTeGpRVUZPTEVOQlFYRkNMRWxCUVVrc1JVRkJla0lzUTBGQlpqdEJRVU5CTEZsQlFVa3NVVUZCU2l4RlFVRmpPMEZCUTFvc1owSkJRVTBzVlVGQlRpeERRVUZwUWl4UlFVRnFRaXhGUVVFeVFpeEhRVUV6UWp0QlFVTkVMRk5CUmtRc1RVRkZUenRCUVVOTUxHZENRVUZOTEdsQ1FVRk9MRU5CUVhkQ0xFZEJRWGhDTzBGQlEwUTdRVUZEUmp0QlFVTkdPenM3TWtKQlJVMHNTeXhGUVVGUE8wRkJRMW83UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGUUxFbEJRV0VzVFVGQlRTeEZRVUZPTEV0QlFXRXNRMEZCT1VJc1JVRkJhVU03UVVGREwwSXNZVUZCU3l4TlFVRk1PMEZCUTBFc1kwRkJUU3hGUVVGT0xFZEJRVmNzUzBGQlN5eE5RVUZvUWp0QlFVTkVPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenM3TzJkRFFWRlpMRXNzUlVGQlR5eG5RaXhGUVVGclFpeERRVUZIT3p0QlFVVjRRenM3T3pzN096czdiVU5CUzJVc1J5eEZRVUZMTEVOQlFUSkVMRU5CUVhwRU96dEJRVVYwUWpzN096czdPenM3TzJkRVFVMDBRaXhEUVVGRkxHMUdRVUZ4UmpzN096czdTVUZKTDBjc1Z6dEJRVU5LT3pzN096czdRVUZOUVN4MVFrRkJXU3hoUVVGYUxFVkJRVEpDTEVkQlFUTkNMRVZCUVdkRExGRkJRV2hETEVWQlFUQkRPMEZCUVVFN08wRkJRM2hETEZGQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxGVkJRVTBzWTBGQlRpeEhRVUYxUWl4aFFVRjJRanRCUVVOQkxGVkJRVTBzU1VGQlRpeEhRVUZoTEVkQlFXSTdRVUZEUVN4VlFVRk5MRk5CUVU0c1IwRkJhMElzVVVGQmJFSTdRVUZEUkRzN096czdPMEZCU1VRN096czJRa0ZIVXp0QlFVTlFMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZWQlFVa3NUMEZCVHl4TlFVRk5MR05CUVU0c1EwRkJjVUlzVFVGQlRTeEpRVUV6UWl4RFFVRllPMEZCUTBFc1ZVRkJTU3hKUVVGS0xFVkJRVlU3UVVGRFVpeFpRVUZKTEZGQlFWRXNTMEZCU3l4UFFVRk1MRU5CUVdFc1MwRkJZaXhEUVVGYU8wRkJRMEVzWVVGQlN5eE5RVUZNTEVOQlFWa3NTMEZCV2l4RlFVRnRRaXhEUVVGdVFqczdRVUZGUVR0QlFVTkJMRmxCUVVrc1MwRkJTeXhOUVVGTUxFdEJRV2RDTEVOQlFYQkNMRVZCUVhWQ08wRkJRM0pDTEdsQ1FVRlBMRTFCUVUwc1kwRkJUaXhEUVVGeFFpeE5RVUZOTEVsQlFUTkNMRU5CUVZBN1FVRkRSRHRCUVVOR08wRkJRMFk3T3p0M1FrRnNRbE03UVVGQlJTeGhRVUZQTEV0QlFVc3NTVUZCV2p0QlFVRnRRanM3T3pzN2EwSkJjVUpzUWl4SE96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGREwxQm1PenM3TzBGQlEwRTdPenM3T3p0QlFVVkJPenM3T3p0QlFYcENRVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1NVRTRRazBzVlRzN08wRkJRMG83T3pzN096dEJRVTlCTzBGQlEwRTdRVUZEUVRzN1FVRkZRU3h6UWtGQldTeFJRVUZhTEVWQlFYTkNPMEZCUVVFN08wRkJRVUU3TzBGQlJYQkNMRmRCUVVzc1UwRkJUQ3hIUVVGcFFpeFJRVUZxUWp0QlFVTkJMRmRCUVVzc1UwRkJUQ3hIUVVGcFFpeEZRVUZxUWpzN1FVRkZRU3hYUVVGTExGTkJRVXdzUjBGQmFVSXNkVUpCUVdFc1ZVRkJReXhMUVVGRUxFVkJRVmM3UVVGRGRrTXNZMEZCVVN4SFFVRlNMRU5CUVZrc2EwSkJRVm9zUlVGQlowTXNlVUpCUVdVc1MwRkJaaXhEUVVGb1F6dEJRVU5FTEV0QlJtZENMRU5CUVdwQ08wRkJURzlDTzBGQlVYSkNPenM3T3pzN1FVRkpSRHM3T3pzN096dG5RMEZQV1N4TExFVkJRVThzWjBJc1JVRkJhMEk3UVVGRGJrTXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzV1VGQlRTeE5RVUZPTEVOQlFXRXNTMEZCWWpzN1FVRkZRU3haUVVGTkxGTkJRVTRzUTBGQlowSXNUMEZCYUVJc1EwRkJkMElzUzBGQmVFSXNSVUZCSzBJc1ZVRkJReXhIUVVGRUxFVkJRVk03TzBGQlJYUkRMR05CUVUwc2FVSkJRVTRzUTBGQmQwSXNTMEZCZUVJc1JVRkJLMElzWjBKQlFTOUNPenRCUVVWQkxGbEJRVWtzUTBGQlF5eE5RVUZOTEZkQlFVNHNRMEZCYTBJc1IwRkJiRUlzUTBGQlRDeEZRVUUyUWp0QlFVTXpRaXhqUVVGSkxGZEJRVmNzVFVGQlRTeGpRVUZPTEVOQlFYRkNMRWxCUVVrc1JVRkJla0lzUTBGQlpqdEJRVU5CTEdOQlFVa3NVVUZCU2l4RlFVRmpPMEZCUTFvN1FVRkRRU3hyUWtGQlRTeFZRVUZPTEVOQlFXbENMRkZCUVdwQ0xFVkJRVEpDTEVkQlFUTkNPMEZCUTBRc1YwRklSQ3hOUVVkUE8wRkJRMHc3UVVGRFFTeHJRa0ZCVFN4alFVRk9MRU5CUVhGQ0xFZEJRWEpDTzBGQlEwUTdRVUZEUmp0QlFVTkdMRTlCWkVRN08wRkJaMEpCTEdGQlFVOHNUVUZCVFN4RlFVRmlPMEZCUTBRN08wRkJSVVE3T3pzN096czdPeXRDUVV0WExFa3NSVUZCVFR0QlFVRkJPenRCUVVObUxGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJPMEZCUTBFc1ZVRkJTU3hYUVVGWExFMUJRVTBzVTBGQlRpeERRVUZuUWl4SlFVRm9RaXhEUVVGbU8wRkJRMEVzVlVGQlNTeERRVUZETEZGQlFVd3NSVUZCWlR0QlFVTmlMRmxCUVVrc2EwSkJRV3RDTEUxQlFVMHNWMEZCVGl4RFFVRnJRaXhKUVVGc1FpeEZRVUYzUWl4VlFVRkRMRWRCUVVRc1JVRkJVenRCUVVOeVJDeHJRa0ZCVVN4SFFVRlNMRU5CUVZrc2JVSkJRVzFDTEVsQlFXNUNMRWRCUVRCQ0xFbEJRWFJETzBGQlEwRXNaMEpCUVUwc1kwRkJUaXhEUVVGeFFpeEhRVUZ5UWp0QlFVTkVMRk5CU0hGQ0xFTkJRWFJDT3p0QlFVdEJMRzFDUVVGWE8wRkJRMVFzYlVKQlFWTXNRMEZFUVR0QlFVVlVMR05CUVVrc1pVRkdTenRCUVVkVUxHdENRVUZSTEd0Q1FVRk5PMEZCUTFvc2JVSkJRVXNzVDBGQlREdEJRVU5CTEdkQ1FVRkpMRTlCUVVzc1QwRkJUQ3hMUVVGcFFpeERRVUZ5UWl4RlFVRjNRanRCUVVOMFFpeHhRa0ZCU3l4RlFVRk1MRU5CUVZFc1RVRkJVanRCUVVOQkxIRkNRVUZQTEUxQlFVMHNVMEZCVGl4RFFVRm5RaXhKUVVGb1FpeERRVUZRTzBGQlEwUTdRVUZEUmp0QlFWUlJMRk5CUVZnN08wRkJXVVFzWTBGQlRTeFRRVUZPTEVOQlFXZENMRWxCUVdoQ0xFbEJRWGRDTEZGQlFYaENPMEZCUTBRN08wRkJSVVFzWlVGQlV5eFBRVUZVTzBGQlEwRXNZVUZCVHl4UlFVRlFPMEZCUTBFN08wRkJSVVE3T3pzN096czdPeXRDUVV0WkxFa3NSVUZCVFN4RkxFVkJRVWs3UVVGRGJrSXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzWVVGQlR5eE5RVUZOTEZkQlFVNHNRMEZCYTBJc1NVRkJiRUlzUlVGQmQwSXNWVUZCUXl4SFFVRkVMRVZCUVZNN1FVRkRkRU1zWjBKQlFWRXNSMEZCVWl4RFFVRlpMRzFDUVVGdFFpeEpRVUZ1UWl4SFFVRXdRaXhOUVVFeFFpeEhRVUZ0UXl4RlFVRnVReXhIUVVGM1F5eEpRVUZ3UkR0QlFVTkJMR05CUVUwc1QwRkJUaXhEUVVGakxFVkJRV1FzUlVGQmEwSXNSMEZCYkVJN1FVRkRSQ3hQUVVoTkxFTkJRVkE3UVVGSlJEczdRVUZGUkRzN096czdPenM3TkVKQlMxRXNSeXhGUVVGTExFY3NSVUZCU3p0QlFVTm9RaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4VlFVRkpMRmRCUVZjc1RVRkJUU3hqUVVGT0xFTkJRWEZDTEVkQlFYSkNMRU5CUVdZN1FVRkRRU3hWUVVGSkxGRkJRVW9zUlVGQll6dEJRVU5hTEdOQlFVMHNWVUZCVGl4RFFVRnBRaXhSUVVGcVFpeEZRVUV5UWl4SFFVRXpRanRCUVVORU8wRkJRMFk3TzBGQlJVUTdPenM3YlVOQlEyVXNSeXhGUVVGTE8wRkJRMnhDTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQk8wRkJRMEVzV1VGQlRTeFRRVUZPTEVOQlFXZENMRTlCUVdoQ0xFTkJRWGRDTEVsQlFVa3NSVUZCTlVJc1JVRkJaME1zU1VGQmFFTXNRMEZCY1VNc1ZVRkJReXhMUVVGRUxFVkJRVmM3UVVGRE9VTXNZMEZCVFN4UFFVRk9MRU5CUVdNc1MwRkJaQ3hGUVVGeFFpeEhRVUZ5UWp0QlFVTkVMRTlCUmtRc1JVRkZSeXhMUVVaSUxFTkJSVk1zVlVGQlV5eERRVUZVTEVWQlFWazdRVUZEYmtJc1owSkJRVkVzUjBGQlVpeERRVUZaTEdsQ1FVRmFMRVZCUVN0Q0xFTkJRUzlDTzBGQlEwUXNUMEZLUkR0QlFVdEVPenM3ZDBKQk1VZGhPMEZCUVVVc1lVRkJUeXhMUVVGTExGTkJRVm83UVVGQmQwSTdPenM3TzJ0Q1FUWkhOVUlzVlRzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTnFTMlk3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJkVUpCT3pzN096czdTVUZMVFN4Uk8wRkJRMG83T3pzN08wRkJTMEVzYjBKQlFWa3NUMEZCV2l4RlFVRnhRanRCUVVGQk96dEJRVU51UWl4UlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFZRVUZOTEZGQlFVNHNSMEZCYVVJc1JVRkJha0k3UVVGRFFTeFZRVUZOTEUxQlFVNHNSMEZCWlN4UFFVRm1PMEZCUTBRN08wRkJSVVE3T3pzN096czdPenMwUWtGTFVTeEhMRVZCUVVzc1V5eEZRVUZYTzBGQlEzUkNMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZWQlFVa3NUVUZCVFN4UlFVRk9MRU5CUVdVc1RVRkJaaXhIUVVGM1FpeERRVUUxUWl4RlFVRXJRanRCUVVNM1FpeFpRVUZKTEU5QlFVOHNTVUZCU1N4UlFVRktMRU5CUVdFc1RVRkJUU3hSUVVGdVFpeERRVUZZTzBGQlEwRXNZVUZCU3l4SlFVRk1MRU5CUVZVc1NVRkJTU3hYUVVGS0xFTkJRV2RDTEV0QlFXaENMRVZCUVhWQ0xFbEJRWFpDTEVWQlFUWkNMRWRCUVRkQ0xFVkJRV3RETEZOQlFXeERMRU5CUVZZN1FVRkRSQ3hQUVVoRUxFMUJSMDg3UVVGRFRDeHJRa0ZCVlN4SFFVRldPMEZCUTBRN1FVRkRSanM3T3pzN1FVRkhTRHM3T3pzN096dEpRVXROTEZjN1FVRkRTanM3T3pzN096dEJRVkZCTEhWQ1FVRlpMRkZCUVZvc1JVRkJjMElzU1VGQmRFSXNSVUZCTkVJc1IwRkJOVUlzUlVGQmFVTXNVMEZCYWtNc1JVRkJORU03UVVGQlFUczdRVUZETVVNc1VVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNWVUZCVFN4UFFVRk9MRWRCUVdkQ0xFdEJRV2hDT3p0QlFVVkJMRlZCUVUwc1UwRkJUaXhIUVVGclFpeFJRVUZzUWp0QlFVTkJMRlZCUVUwc1MwRkJUaXhIUVVGakxFbEJRV1E3UVVGRFFTeFZRVUZOTEVsQlFVNHNSMEZCWVN4SFFVRmlPMEZCUTBFc1ZVRkJUU3hWUVVGT0xFZEJRVzFDTEZOQlFXNUNPMEZCUTBRN096czdPenRCUVU5RU96czdNa0pCUjA4N1FVRkRUQ3hWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4VlFVRkpMRU5CUVVNc1RVRkJUU3hQUVVGWUxFVkJRVzlDTzBGQlEyeENMRmxCUVVrc1RVRkJUU3hMUVVGT0xFTkJRVmtzVDBGQmFFSXNSVUZCZVVJN1FVRkRka0lzWjBKQlFVMHNTMEZCVGl4RFFVRlpMRWxCUVZvc1EwRkJhVUlzUzBGQmFrSTdRVUZEUkN4VFFVWkVMRTFCUlU4N1FVRkRUQ3huUWtGQlRTeFZRVUZPTEVOQlFXbENMRTFCUVUwc1NVRkJka0k3UVVGRFJEdEJRVU5HTzBGQlEwWTdPMEZCUlVRN096czdPenM0UWtGSFZUdEJRVU5TTEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1ZVRkJTU3hEUVVGRExFMUJRVTBzVDBGQldDeEZRVUZ2UWp0QlFVTnNRaXhqUVVGTkxFOUJRVTRzUjBGQlowSXNTVUZCYUVJN1FVRkRRU3hqUVVGTkxGVkJRVTRzUTBGQmFVSXNUVUZCVFN4SlFVRjJRanRCUVVORU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN2VVSkJTVXNzU3l4RlFVRlBPMEZCUTFZc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNWVUZCU1N4RFFVRkRMRTFCUVUwc1QwRkJXQ3hGUVVGdlFqdEJRVU5zUWl4alFVRk5MRTlCUVU0c1IwRkJaMElzU1VGQmFFSTdRVUZEUVN4WlFVRkpMRTFCUVUwc1UwRkJUaXhEUVVGblFpeE5RVUZ3UWl4RlFVRTBRanRCUVVNeFFpeG5Ra0ZCVFN4VFFVRk9MRU5CUVdkQ0xFMUJRV2hDTEVOQlFYVkNMRXRCUVhaQ08wRkJRMFE3UVVGRFJqdEJRVU5HT3pzN2QwSkJOVU5qTzBGQlFVVXNZVUZCVHl4TFFVRkxMRk5CUVZvN1FVRkJkMEk3T3p0M1FrRkZMMEk3UVVGQlJTeGhRVUZQTEV0QlFVc3NTVUZCV2p0QlFVRnRRaXhMTzNOQ1FVTjJRaXhMTEVWQlFVODdRVUZCUlN4WFFVRkxMRWxCUVV3c1IwRkJXU3hMUVVGYU8wRkJRVzlDT3pzN096dEpRVFJEYWtNc1VUdEJRVU5LT3pzN096dEJRVXRCTEc5Q1FVRlpMRXRCUVZvc1JVRkJiVUk3UVVGQlFUczdRVUZEYWtJc1UwRkJTeXhOUVVGTUxFZEJRV01zUTBGQlF5eERRVUZtTzBGQlEwRXNVMEZCU3l4TlFVRk1MRWRCUVdNc1MwRkJaRHRCUVVORU96czdPM2RDUVVWaE8wRkJRMW9zWVVGQlR5eExRVUZMTEUxQlFVd3NSMEZCWXl4TFFVRkxMRTFCUVV3c1EwRkJXU3hOUVVGYUxFZEJRWEZDTEVOQlFURkRPMEZCUTBRN096dDNRa0ZGVlR0QlFVTlVMRmRCUVVzc1RVRkJURHRCUVVOQkxHRkJRVThzUzBGQlN5eE5RVUZNTEVOQlFWa3NTMEZCU3l4TlFVRnFRaXhEUVVGUU8wRkJRMFE3T3pzN08ydENRVWRaTEZFN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTNaS1pqczdPenM3U1VGSlRTeE5PMEZCUlVvc2IwSkJRV003UVVGQlFUczdRVUZEV2l4UlFVRkpMRkZCUVZFc1NVRkJXanRCUVVWRU96dEJRVVZFT3pzN096czdPenM3TWtKQlMwOHNTeXhGUVVGUE8wRkJRMW9zWVVGQlR5eExRVUZMTEV0QlFVd3NRMEZCVUR0QlFVTkVPenRCUVVWRU96czdPenM3T3pzeVFrRkxUeXhMTEVWQlFVODdRVUZEV2l4aFFVRlBMRWxCUVVrc1ZVRkJTaXhEUVVGbExFdEJRVXNzUzBGQlRDeERRVUZYTEUxQlFVMHNTMEZCU3l4TFFVRk1MRU5CUVU0c1IwRkJiMElzUjBGQkwwSXNRMEZCWml4RFFVRlFPMEZCUTBRN096c3JRa0ZGVlN4TkxFVkJRVkVzU1N4RlFVRk5PMEZCUTNaQ0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlV5eFBRVUZVTEVWQlFXdENMRTFCUVd4Q0xFVkJRVEJDTzBGQlF6TkRMR05CUVUwc2IwSkJRVTRzUTBGQk1rSXNTVUZCU1N4VlFVRktMRU5CUVdVc1RVRkJaaXhEUVVFelFpeEZRVUZ0UkN4SlFVRnVSQ3hEUVVGM1JDeFZRVUZUTEZOQlFWUXNSVUZCYjBJN08wRkJSVEZGTEdsQ1FVRlBMRTFCUVZBc1EwRkJZeXhQUVVGa0xFTkJRMGs3UVVGRFJTeHJRa0ZCVFR0QlFVUlNMRmRCUkVvc1JVRkpTU3hUUVVwS0xFVkJTV1U3UVVGRFdDeGpRVUZMTzBGQlRGUXNXVUZQUXl4SlFWQkVMRU5CVDAwc1ZVRkJVeXhUUVVGVUxFVkJRVzlDTzBGQlEzaENPMEZCUTBFN1FVRkRRU3h2UWtGQlVTeEpRVUZKTEZWQlFVb3NRMEZCWlN4VFFVRm1MRU5CUVZJN1FVRkZSQ3hYUVZwRUxFVkJXVWNzUzBGYVNDeERRVmxUTEZWQlFWTXNSMEZCVkN4RlFVRmpPMEZCUTNKQ0xHOUNRVUZSTEVkQlFWSXNRMEZCV1N4dFFrRkJXaXhGUVVGcFF5eEhRVUZxUXp0QlFVTkJMRzFDUVVGUExFZEJRVkE3UVVGRFJDeFhRV1pFTzBGQmFVSkVMRk5CYmtKRU8wRkJjVUpFTEU5QmRFSk5MRU5CUVZBN1FVRjNRa1E3T3pzclFrRkZWU3hQTEVWQlFWTXNTU3hGUVVGTk8wRkJRM2hDTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxHRkJRVThzYzBKQlFWa3NWVUZCVXl4UFFVRlVMRVZCUVd0Q0xFMUJRV3hDTEVWQlFUQkNPMEZCUXpORExHTkJRVTBzYjBKQlFVNHNRMEZCTWtJc1QwRkJNMElzUlVGQmIwTXNTVUZCY0VNc1EwRkJlVU1zVlVGQlV5eFZRVUZVTEVWQlFYRkNPenRCUVVVMVJDeHBRa0ZCVHl4TlFVRlFMRU5CUVdNc1QwRkJaQ3hEUVVOSk8wRkJRMFVzYTBKQlFVMDdRVUZFVWl4WFFVUktMRVZCU1Vrc1ZVRktTaXhGUVVsblFqdEJRVU5hTEdOQlFVczdRVUZNVkN4WlFVOURMRWxCVUVRc1EwRlBUU3hWUVVGVExGTkJRVlFzUlVGQmIwSTdPMEZCUlhoQ0xHZENRVUZKTEdkQ1FVRm5RaXhKUVVGSkxGVkJRVW9zUTBGQlpTeFRRVUZtTEVOQlFYQkNPenRCUVVWQk8wRkJRMEVzYjBKQlFWRXNZVUZCVWp0QlFVVkVMRmRCWkVRc1JVRmpSeXhMUVdSSUxFTkJZMU1zVlVGQlV5eEhRVUZVTEVWQlFXTTdRVUZEY2tJc2IwSkJRVkVzUjBGQlVpeERRVUZaTEcxQ1FVRmFMRVZCUVdsRExFZEJRV3BETzBGQlEwRXNiVUpCUVU4c1IwRkJVRHRCUVVORUxGZEJha0pFTzBGQmEwSkVMRk5CY0VKRU8wRkJjMEpFTEU5QmRrSk5MRU5CUVZBN1FVRjNRa1E3T3pzMFFrRkZUeXhQTEVWQlFWTXNTU3hGUVVGTk8wRkJRM0pDTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxHRkJRVThzYzBKQlFWa3NWVUZCVXl4UFFVRlVMRVZCUVd0Q0xFMUJRV3hDTEVWQlFUQkNPMEZCUXpORExHTkJRVTBzYVVKQlFVNHNRMEZCZDBJc1QwRkJlRUlzUlVGQmFVTXNTVUZCYWtNc1EwRkJjME1zVlVGQlV5eFZRVUZVTEVWQlFYRkNPenRCUVVWNlJDeHBRa0ZCVHl4TlFVRlFMRU5CUVdNc1NVRkJaQ3hEUVVOSk8wRkJRMFVzYTBKQlFVMDdRVUZFVWl4WFFVUktMRVZCU1Vrc1ZVRktTaXhGUVVsblFqdEJRVU5hTEdkQ1FVRk5MRmRCUVU0c1EwRkJhMElzU1VGQmJFSXNRMEZCZDBJN1FVRk1OVUlzV1VGUFF5eEpRVkJFTEVOQlQwMHNWVUZCVXl4VFFVRlVMRVZCUVc5Q08wRkJRM2hDTzBGQlEwRTdRVUZEUVN4dlFrRkJVU3hKUVVGSkxGVkJRVW9zUTBGQlpTeFRRVUZtTEVOQlFWSTdRVUZGUkN4WFFWcEVMRVZCV1Vjc1MwRmFTQ3hEUVZsVExGVkJRVk1zUjBGQlZDeEZRVUZqTzBGQlEzSkNMRzlDUVVGUkxFZEJRVklzUTBGQldTeG5Ra0ZCV2l4RlFVRTRRaXhIUVVFNVFqdEJRVU5CTEcxQ1FVRlBMRWRCUVZBN1FVRkRSQ3hYUVdaRU8wRkJhVUpFTEZOQmJrSkVPMEZCY1VKRUxFOUJkRUpOTEVOQlFWQTdRVUYxUWtRN096czRRa0ZGVXl4TkxFVkJRVkVzU1N4RlFVRk5MRk1zUlVGQlZ6dEJRVU5xUXl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeGhRVUZQTEhOQ1FVRlpMRlZCUVZNc1QwRkJWQ3hGUVVGclFpeE5RVUZzUWl4RlFVRXdRanRCUVVNelF5eGpRVUZOTEcxQ1FVRk9MRU5CUVRCQ0xFMUJRVEZDTEVWQlFXdERMRWxCUVd4RExFTkJRWFZETEZWQlFWTXNVMEZCVkN4RlFVRnZRanM3UVVGRmVrUXNhVUpCUVU4c1RVRkJVQ3hEUVVGakxFMUJRV1FzUTBGRFNUdEJRVU5GTEd0Q1FVRk5PMEZCUkZJc1YwRkVTaXhGUVVsSkxGTkJTa29zUlVGSlpUdEJRVU5ZTEcxQ1FVeEtMRVZCUzJVN1FVRkRXQ3huUWtGQlRTeFhRVUZPTEVOQlFXdENMRWxCUVd4Q0xFTkJRWGRDTzBGQlRqVkNMRmxCVVVNc1NVRlNSQ3hEUVZGTkxGVkJRVk1zVDBGQlZDeEZRVUZyUWp0QlFVTjBRanRCUVVOQk8wRkJRMEVzYjBKQlFWRXNUMEZCVWp0QlFVVkVMRmRCWWtRc1JVRmhSeXhMUVdKSUxFTkJZVk1zVlVGQlV5eEhRVUZVTEVWQlFXTTdRVUZEY2tJc2IwSkJRVkVzUjBGQlVpeERRVUZaTEd0Q1FVRmFMRVZCUVdkRExFZEJRV2hETzBGQlEwRXNiVUpCUVU4c1IwRkJVRHRCUVVORUxGZEJhRUpFTzBGQmEwSkVMRk5CY0VKRU8wRkJjMEpFTEU5QmRrSk5MRU5CUVZBN1FVRjNRa1E3T3pzclFrRkZWU3hITEVWQlFVc3NTU3hGUVVGTkxFVXNSVUZCU1R0QlFVTjRRaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZyUWl4TlFVRnNRaXhGUVVFd1FqdEJRVU16UXl4alFVRk5MR0ZCUVU0c1EwRkJiMElzUjBGQmNFSXNSVUZCZVVJc1NVRkJla0lzUTBGQk9FSXNWVUZCVXl4TlFVRlVMRVZCUVdsQ096dEJRVVUzUXl4cFFrRkJUeXhOUVVGUUxFTkJRV01zVDBGQlpDeERRVU5KTzBGQlEwVXNhMEpCUVUwc1UwRkVVanRCUVVWRk8wRkJRMEU3UVVGRFFTeG5Ra0ZCU1R0QlFVcE9MRmRCUkVvc1JVRlBTU3hOUVZCS0xFVkJUMWs3UVVGRFVpeG5Ra0ZCVFN4WFFVRk9MRU5CUVd0Q0xFbEJRV3hDTEVOQlFYZENPMEZCVWpWQ0xGbEJWVU1zU1VGV1JDeERRVlZOTEZWQlFWTXNVMEZCVkN4RlFVRnZRanRCUVVONFFqdEJRVU5CTzBGQlEwRXNiMEpCUVZFc1NVRkJTU3hWUVVGS0xFTkJRV1VzVTBGQlppeERRVUZTTzBGQlJVUXNWMEZtUkN4RlFXVkhMRXRCWmtnc1EwRmxVeXhWUVVGVExFZEJRVlFzUlVGQll6dEJRVU55UWl4dlFrRkJVU3hIUVVGU0xFTkJRVmtzYlVKQlFWb3NSVUZCYVVNc1IwRkJha003UVVGRFFTeHRRa0ZCVHl4SFFVRlFPMEZCUTBRc1YwRnNRa1E3UVVGdlFrUXNVMEYwUWtRN1FVRjNRa1FzVDBGNlFrMHNRMEZCVUR0QlFUQkNSRHM3T3l0Q1FVVlZMRWNzUlVGQlN5eEpMRVZCUVUwc1JTeEZRVUZKTzBGQlEzaENMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEdGQlFVOHNjMEpCUVZrc1ZVRkJVeXhQUVVGVUxFVkJRV3RDTEUxQlFXeENMRVZCUVRCQ08wRkJRek5ETEdOQlFVMHNZVUZCVGl4RFFVRnZRaXhIUVVGd1FpeEZRVUY1UWl4SlFVRjZRaXhEUVVFNFFpeFZRVUZUTEUxQlFWUXNSVUZCYVVJN08wRkJSVGRETEdsQ1FVRlBMRTFCUVZBc1EwRkJZeXhQUVVGa0xFTkJRMGs3UVVGRFJTeHJRa0ZCVFN4VFFVUlNPMEZCUlVVc1owSkJRVWs3UVVGR1RpeFhRVVJLTEVWQlMwa3NUVUZNU2l4RlFVdFpPMEZCUTFJc1kwRkJTenRCUVU1VUxGbEJVVU1zU1VGU1JDeERRVkZOTEZWQlFWTXNVMEZCVkN4RlFVRnZRanM3UVVGRmVFSXNaMEpCUVVrc1kwRkJZeXhOUVVGTkxGZEJRVTRzUTBGQmEwSXNTVUZCU1N4VlFVRktMRU5CUVdVc1UwRkJaaXhEUVVGc1FpeERRVUZzUWp0QlFVTkJPMEZCUTBFc2IwSkJRVkVzVjBGQlVqdEJRVVZFTEZkQlpFUXNSVUZqUnl4TFFXUklMRU5CWTFNc1ZVRkJVeXhIUVVGVUxFVkJRV003UVVGRGNrSXNiMEpCUVZFc1IwRkJVaXhEUVVGWkxHMUNRVUZhTEVWQlFXbERMRWRCUVdwRE8wRkJRMEVzYlVKQlFVOHNSMEZCVUR0QlFVTkVMRmRCYWtKRU8wRkJiVUpFTEZOQmNrSkVPMEZCZFVKRUxFOUJlRUpOTEVOQlFWQTdRVUY1UWtRN08wRkJSVVE3T3pzN096czdPenMyUWtGTlV5eEhMRVZCUVVzc1NTeEZRVUZOTzBGQlEyeENMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEdGQlFVOHNjMEpCUVZrc1ZVRkJVeXhQUVVGVUxFVkJRV2xDTEUxQlFXcENMRVZCUVhsQ096dEJRVVV4UXl4alFVRk5MR05CUVU0c1EwRkJjVUlzUjBGQmNrSXNSVUZCTUVJc1NVRkJNVUlzUTBGQkswSXNWVUZCVXl4UFFVRlVMRVZCUVd0Q096dEJRVVV2UXl4cFFrRkJUeXhOUVVGUUxFTkJRV01zU1VGQlpDeERRVU5CTzBGQlEwVXNhMEpCUVUwN1FVRkVVaXhYUVVSQkxFVkJTVUVzVDBGS1FTeEZRVWxUTzBGQlExUXNaMEpCUVUwc1YwRkJUaXhEUVVGclFpeEpRVUZzUWl4RFFVRjNRanRCUVV4NFFpeFpRVTlETEVsQlVFUXNRMEZQVFN4VlFVRlRMRk5CUVZRc1JVRkJiMEk3UVVGRGVFSTdPMEZCUlVFN1FVRkRRU3h2UWtGQlVTeEpRVUZKTEZWQlFVb3NRMEZCWlN4VFFVRm1MRU5CUVZJN1FVRkZSQ3hYUVdKRUxFVkJZVWNzUzBGaVNDeERRV0ZUTEZWQlFWTXNSMEZCVkN4RlFVRmpPMEZCUTNKQ0xHOUNRVUZSTEVkQlFWSXNRMEZCV1N4cFFrRkJXaXhGUVVFclFpeEhRVUV2UWp0QlFVTkJMRzFDUVVGUExFZEJRVkE3UVVGRFJDeFhRV2hDUkR0QlFXbENSQ3hUUVc1Q1JEdEJRVzlDUkN4UFFYUkNUU3hEUVVGUU8wRkJkVUpFT3p0QlFVVkVPenM3T3pzN096czdPeXRDUVU5WExFY3NSVUZCU3l4SkxFVkJRVTBzVXl4RlFVRlhPMEZCUXk5Q0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlV5eFBRVUZVTEVWQlFXbENMRTFCUVdwQ0xFVkJRWGxDT3p0QlFVVXhReXhqUVVGTkxHTkJRVTRzUTBGQmNVSXNSMEZCY2tJc1JVRkJNRUlzU1VGQk1VSXNRMEZCSzBJc1ZVRkJVeXhQUVVGVUxFVkJRV3RDT3p0QlFVVXZReXhwUWtGQlR5eE5RVUZRTEVOQlFXTXNUVUZCWkN4RFFVTkZPMEZCUTBVc2EwSkJRVTA3UVVGRVVpeFhRVVJHTEVWQlNVVXNUMEZLUml4RlFVbFhPMEZCUTFRc2JVSkJURVlzUlVGTFlUdEJRVU5ZTEdkQ1FVRk5MRmRCUVU0c1EwRkJhMElzU1VGQmJFSXNRMEZCZDBJN1FVRk9NVUlzV1VGUlF5eEpRVkpFTEVOQlVVMHNWVUZCVXl4UFFVRlVMRVZCUVd0Q08wRkJRM1JDTzBGQlEwRTdRVUZEUXl4dFFrRkJSQ3hIUVVGWkxGRkJRVkVzVDBGQlVpeERRVUZhTEVkQlFTdENMRTlCUVU4c1QwRkJVQ3hEUVVFdlFqdEJRVVZFTEZkQllrUXNSVUZoUnl4TFFXSklMRU5CWVZNc1ZVRkJVeXhIUVVGVUxFVkJRV003UVVGRGNrSXNiMEpCUVZFc1MwRkJVaXhEUVVGakxHMUNRVUZrTEVWQlFXMURMRWRCUVc1RE8wRkJRMEVzYlVKQlFVOHNSMEZCVUR0QlFVTkVMRmRCYUVKRU8wRkJhMEpFTEZOQmNFSkVPMEZCY1VKRUxFOUJka0pOTEVOQlFWQTdRVUYzUWtRN08wRkJSVVE3T3pzN096czdlVU5CU1hGQ08wRkJRMjVDTEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1ZVRkJTU3hWUVVGVkxFVkJRV1E3TzBGQlJVRXNZVUZCVHl4elFrRkJXU3hWUVVGVExFOUJRVlFzUlVGQmEwSXNUVUZCYkVJc1JVRkJNRUk3UVVGRE0wTXNaVUZCVHl4TlFVRlFMRU5CUVdNc1YwRkJaQ3hEUVVOQk8wRkJRMFVzWjBKQlFVMHNVMEZFVWp0QlFVVkZMSGxDUVVGbExFbEJSbXBDTEVWQlJYVkNPMEZCUTNKQ0xEQkNRVUZuUWl4SlFVRkpMRlZCUVVvc1EwRkJaU3hEUVVGRExFbEJRVVFzUlVGQlR5eEpRVUZRTEVWQlFXRXNTVUZCWWl4RFFVRm1MRU5CU0d4Q08wRkJTVVVzWjBKQlFVMHNSVUZCUXl4TlFVRk5MRk5CUVZBc1JVRkJhMEk3UVVGS01VSXNVMEZFUVN4RlFVOUJMRWxCVUVFc1JVRlBUVHRCUVVOT0xGTkJRVU1zVFVGQlJDeEZRVUZUTEZGQlFWUXNRMEZCYlVJN08wRkJVbTVDTEZWQlZVVXNTVUZXUml4RFFWVlBMRlZCUVZNc1IwRkJWQ3hGUVVGak8wRkJRMjVDTzBGQlEwRTdPMEZCUlVFc2FVSkJRVThzVFVGQlVDeERRVUZqTEZOQlFXUXNRMEZEUlN4TlFVUkdMRVZCUTFVN1FVRkRVaXhqUVVGSkxGTkJRVlU3UVVGR2FFSXNXVUZIUlN4SlFVaEdMRU5CUjA4c1ZVRkJVeXhUUVVGVUxFVkJRVzlDTzBGQlEzcENPMEZCUTBFc2IwSkJRVkVzVFVGQlVpeEhRVUZyUWl4SlFVRkpMRlZCUVVvc1EwRkJaU3hUUVVGbUxFTkJRV3hDTzBGQlEwRXNiVUpCUVU4c1QwRkJUeXhOUVVGUUxFTkJRV01zVTBGQlpDeERRVU5NTEU5QlJFc3NSVUZEU1R0QlFVTlVMR2RDUVVGSkxGVkJRVmM3UVVGR1ZpeGhRVUZRTzBGQlNVUXNWMEZXUkN4RlFWVkhMRWxCVmtnc1EwRlZVU3hWUVVGVExGVkJRVlFzUlVGQmNVSTdRVUZETTBJc2IwSkJRVkVzVDBGQlVpeEhRVUZ0UWl4SlFVRkpMRlZCUVVvc1EwRkJaU3hWUVVGbUxFTkJRVzVDTzBGQlEwRTdPMEZCUlVFc2IwSkJRVkVzVDBGQlVqdEJRVVZFTEZkQmFFSkVMRVZCWjBKSExFdEJhRUpJTEVOQlowSlRMRlZCUVZNc1IwRkJWQ3hGUVVGak8wRkJRM0pDTEc5Q1FVRlJMRXRCUVZJc1EwRkJZeXhIUVVGa08wRkJRMEVzYlVKQlFVOHNSMEZCVUR0QlFVTkVMRmRCYmtKRU8wRkJjVUpFTEZOQmJrTkVMRVZCYlVOSExFdEJia05JTEVOQmJVTlRMRlZCUVZNc1IwRkJWQ3hGUVVGak8wRkJRM0pDTEd0Q1FVRlJMRXRCUVZJc1EwRkJZeXhIUVVGa08wRkJRMEVzYVVKQlFVOHNSMEZCVUR0QlFVTkVMRk5CZEVORU8wRkJkVU5FTEU5QmVFTk5MRU5CUVZBN1FVRjVRMFE3TzBGQlJVUTdPenM3T3pzN2FVTkJTV0U3UVVGRFdDeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hWUVVGSkxGRkJRVkVzU1VGQlN5eFZRVUZNTEVOQlFXZENMRVZCUVdoQ0xFTkJRVm83UVVGRFFTeGhRVUZQTEdWQlFWQXNRMEZCZFVJc1MwRkJka0k3TzBGQlJVRXNZVUZCVHl4TFFVRlFPMEZCUTBRN08wRkJSVVE3T3pzN096czdPM0ZEUVV0cFFqdEJRVU5tTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxGVkJRVWtzVVVGQlVTeEpRVUZMTEZWQlFVd3NRMEZCWjBJc1JVRkJhRUlzUTBGQldqdEJRVU5CTEdGQlFVOHNaVUZCVUN4RFFVRjFRaXhMUVVGMlFqczdRVUZGUVN4VlFVRkpMRTlCUVU4c1MwRkJTeXhIUVVGTUxFVkJRVmc3UVVGRFFTeFZRVUZKTEdOQlFXTXNUVUZCVFN4WFFVRk9MRU5CUVd0Q0xFbEJRV3hDTEVOQlFXeENPenRCUVVWQk8wRkJRMEVzVlVGQlNTeFpRVUZaTEZsQlFWa3NTMEZCV2l4RFFVRnJRaXhaUVVGWkxFMUJRVm9zUjBGQmNVSXNRMEZCZGtNc1JVRkJNRU1zV1VGQldTeE5RVUYwUkN4RFFVRm9RanM3UVVGRlFUdEJRVU5CTEZkQlFVc3NTVUZCU1N4SlFVRkpMRU5CUVdJc1JVRkJaMElzU1VGQlNTeERRVUZ3UWl4RlFVRjFRaXhIUVVGMlFpeEZRVUUwUWp0QlFVRkZMR05CUVUwc1EwRkJUaXhKUVVGWExGVkJRVlVzUTBGQlZpeERRVUZZTzBGQlFUQkNPMEZCUTNoRUxHRkJRVThzUzBGQlVEdEJRVU5FT3p0QlFVVkVPenM3T3pzN08ydERRVWxqTzBGQlExb3NWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzVlVGQlNTeFJRVUZSTEVsQlFVa3NWVUZCU2l4RFFVRmxMRVZCUVdZc1EwRkJXanRCUVVOQkxHRkJRVThzWlVGQlVDeERRVUYxUWl4TFFVRjJRanRCUVVOQkxHRkJRVThzUzBGQlVEdEJRVU5FT3p0QlFVVkVPenM3T3pzN096dDVRMEZMY1VJc1R5eEZRVUZUTEVrc1JVRkJUVHRCUVVOc1F5eFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hoUVVGUExITkNRVUZaTEZWQlFWTXNUMEZCVkN4RlFVRnJRaXhOUVVGc1FpeEZRVUV3UWp0QlFVTXpReXhaUVVGSkxFMUJRVTBzU1VGQlNTeFZRVUZLTEVOQlFXVXNSVUZCWml4RFFVRldPMEZCUTBFc1dVRkJTU3hQUVVGUExFbEJRVmc3TzBGQlJVRXNZMEZCVFN4UFFVRk9MRU5CUVdNc1QwRkJaQ3hGUVVGMVFpeEpRVUYyUWl4RFFVRTBRaXhWUVVGRExGZEJRVVFzUlVGQmFVSTdPMEZCUlRORExHZENRVUZOTEZGQlFVNHNRMEZCWlN4WFFVRm1MRVZCUVRSQ0xFbEJRVFZDTEVWQlFXdERMRWxCUVd4RExFTkJRWFZETEZWQlFWTXNVVUZCVkN4RlFVRnRRanM3UVVGRmVFUTdRVUZEUVN4cFFrRkJTeXhKUVVGSkxFbEJRVWtzUTBGQllpeEZRVUZuUWl4SlFVRkpMRVZCUVhCQ0xFVkJRWGRDTEVkQlFYaENMRVZCUVRaQ08wRkJRVVVzYTBKQlFVa3NRMEZCU2l4SlFVRlRMRk5CUVZNc1EwRkJWQ3hEUVVGVU8wRkJRWFZDTzBGQlEzUkVMRzFDUVVGUExFMUJRVTBzVVVGQlRpeERRVUZsTEZkQlFXWXNSVUZCTkVJc1QwRkJUeXhSUVVGdVF5eERRVUZRTzBGQlJVUXNWMEZPUkN4RlFVMUhMRWxCVGtnc1EwRk5VU3hWUVVGVExGRkJRVlFzUlVGQmJVSTdPMEZCUlhwQ08wRkJRMEVzYVVKQlFVc3NTVUZCU1N4SlFVRkpMRU5CUVdJc1JVRkJaMElzU1VGQlNTeEZRVUZ3UWl4RlFVRjNRaXhIUVVGNFFpeEZRVUUyUWp0QlFVRkZMR3RDUVVGSkxFbEJRVWtzUlVGQlVpeEpRVUZqTEZOQlFWTXNRMEZCVkN4RFFVRmtPMEZCUVRSQ08wRkJRek5FTzBGQlEwRXNiMEpCUVZFc1IwRkJVanRCUVVWRUxGZEJZa1FzUlVGaFJ5eExRV0pJTEVOQllWTXNWVUZCVXl4SFFVRlVMRVZCUVdNN1FVRkRja0lzYjBKQlFWRXNSMEZCVWl4RFFVRlpMRFpDUVVGYUxFVkJRVEpETEVkQlFUTkRPMEZCUTBFc2JVSkJRVThzUjBGQlVEdEJRVU5FTEZkQmFFSkVPMEZCYVVKRUxGTkJia0pFTzBGQmNVSkVMRTlCZWtKTkxFTkJRVkE3UVVFd1FrUTdPMEZCUlVRN096czdPenM3T3pzN2FVTkJUMkVzVHl4RlFVRlRMRWtzUlVGQlRUdEJRVU14UWl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeGhRVUZQTEhOQ1FVRlpMRlZCUVZNc1QwRkJWQ3hGUVVGclFpeE5RVUZzUWl4RlFVRXdRanM3UVVGRk0wTXNXVUZCU1N4TlFVRk5MRVZCUVZZN1FVRkRRU3haUVVGSkxFOUJRVThzU1VGQldEczdRVUZGUVR0QlFVTkJMR05CUVUwc1VVRkJUaXhEUVVGbExFOUJRV1lzUlVGQmQwSXNTVUZCZUVJc1JVRkJPRUlzU1VGQk9VSXNRMEZCYlVNc1ZVRkJVeXhSUVVGVUxFVkJRVzFDTzBGQlEzQkVMR05CUVVrc1NVRkJTaXhEUVVGVExGRkJRVlE3UVVGRFFTeHBRa0ZCVHl4TlFVRk5MRkZCUVU0c1EwRkJaU3hQUVVGbUxFVkJRWGRDTEU5QlFVOHNVVUZCTDBJc1EwRkJVRHRCUVVWRUxGTkJTa1FzUlVGSlJ5eEpRVXBJTEVOQlNWRXNWVUZCVXl4UlFVRlVMRVZCUVcxQ08wRkJRM3BDTEdOQlFVa3NTVUZCU2l4RFFVRlRMRkZCUVZRN1FVRkRRU3hwUWtGQlR5eE5RVUZOTEZGQlFVNHNRMEZCWlN4UFFVRm1MRVZCUVhkQ0xFOUJRVThzVVVGQkwwSXNRMEZCVUR0QlFVVkVMRk5CVWtRc1JVRlJSeXhKUVZKSUxFTkJVVkVzVlVGQlV5eFJRVUZVTEVWQlFXMUNPMEZCUTNwQ0xHTkJRVWtzU1VGQlNpeERRVUZUTEZGQlFWUTdRVUZEUVN4cFFrRkJUeXhOUVVGTkxGRkJRVTRzUTBGQlpTeFBRVUZtTEVWQlFYZENMRTlCUVU4c1VVRkJMMElzUTBGQlVEdEJRVVZFTEZOQldrUXNSVUZaUnl4SlFWcElMRU5CV1ZFc1ZVRkJVeXhSUVVGVUxFVkJRVzFDTzBGQlEzcENMR05CUVVrc1NVRkJTaXhEUVVGVExGRkJRVlE3TzBGQlJVRTdRVUZEUVN4clFrRkJVU3hIUVVGU08wRkJSVVFzVTBGc1FrUXNSVUZyUWtjc1MwRnNRa2dzUTBGclFsTXNWVUZCVXl4SFFVRlVMRVZCUVdNN1FVRkRja0k3UVVGRFFTeHBRa0ZCVHl4SFFVRlFPMEZCUTBRc1UwRnlRa1E3TzBGQmRVSkJPMEZCUTBRc1QwRTVRazBzUTBGQlVEdEJRU3RDUkRzN08zTkRRVVZwUWl4UExFVkJRVk03UVVGRGVrSXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzWVVGQlR5eHpRa0ZCV1N4VlFVRlRMRTlCUVZRc1JVRkJhMElzVFVGQmJFSXNSVUZCTUVJN1FVRkRNME1zWlVGQlR5eE5RVUZRTEVOQlFXTXNVMEZCWkN4RFFVTkpMRTlCUkVvc1JVRkRZVHRCUVVOVUxHVkJSa29zUlVGSFNTeEZRVUZKTzBGQlEwWXNaMEpCUVUwc2JVSkJSRkk3UVVGRlJTeG5Ra0ZCVFN4RlFVRkRMRTFCUVUwc1UwRkJVQ3hGUVVGclFqdEJRVVl4UWl4VFFVaEtMRVZCVDBrc1NVRlFTaXhGUVU5Vk8wRkJRMDRzVTBGQlF5eE5RVUZFTEVOQlFWTTdRVUZTWWl4VlFWVkRMRWxCVmtRc1EwRlZUU3hWUVVGVExGVkJRVlFzUlVGQmNVSTdRVUZEZWtJN1FVRkRRVHRCUVVOQkxHdENRVUZSTEZWQlFWSTdRVUZGUkN4VFFXWkVMRVZCWlVjc1MwRm1TQ3hEUVdWVExGVkJRVk1zUjBGQlZDeEZRVUZqTzBGQlEzSkNMR3RDUVVGUkxFdEJRVklzUTBGQll5d3dRa0ZCWkN4RlFVRXdReXhIUVVFeFF6dEJRVU5CTEdsQ1FVRlBMRWRCUVZBN1FVRkRSQ3hUUVd4Q1JEdEJRVzFDUkN4UFFYQkNUU3hEUVVGUU8wRkJjVUpFT3pzN2QwTkJSVzFDTEUwc1JVRkJVVHRCUVVNeFFpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hoUVVGUExITkNRVUZaTEZWQlFWTXNUMEZCVkN4RlFVRnJRaXhOUVVGc1FpeEZRVUV3UWp0QlFVTXpReXhsUVVGUExFMUJRVkFzUTBGQll5eFRRVUZrTEVOQlEwa3NUVUZFU2l4RlFVTlpPMEZCUTFJc1kwRkdTaXhGUVVkSkxFVkJRVWs3UVVGRFJpeG5Ra0ZCVFN4dFFrRkVVanRCUVVWRkxHZENRVUZOTEVWQlFVTXNUVUZCVFN4VFFVRlFMRVZCUVd0Q08wRkJSakZDTEZOQlNFb3NSVUZQU1N4SlFWQktMRVZCVDFVN1FVRkRUaXhUUVVGRExGRkJRVVFzUTBGQlZ6dEJRVkptTEZWQlZVTXNTVUZXUkN4RFFWVk5MRlZCUVZNc1UwRkJWQ3hGUVVGdlFqdEJRVU40UWp0QlFVTkJPMEZCUTBFc2EwSkJRVkVzVTBGQlVqdEJRVVZFTEZOQlprUXNSVUZsUnl4TFFXWklMRU5CWlZNc1ZVRkJVeXhIUVVGVUxFVkJRV003UVVGRGNrSXNhMEpCUVZFc1MwRkJVaXhEUVVGakxEUkNRVUZrTEVWQlFUUkRMRWRCUVRWRE8wRkJRMEVzYVVKQlFVOHNSMEZCVUR0QlFVTkVMRk5CYkVKRU8wRkJiVUpFTEU5QmNFSk5MRU5CUVZBN1FVRnhRa1E3T3p0NVEwRkZiMElzVFN4RlFVRlJPMEZCUXpOQ0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlV5eFBRVUZVTEVWQlFXdENMRTFCUVd4Q0xFVkJRVEJDTzBGQlF6TkRMR1ZCUVU4c1RVRkJVQ3hEUVVGakxGTkJRV1FzUTBGRFNTeE5RVVJLTEVWQlExazdRVUZEVWl4alFVWktMRVZCUjBrc1JVRkJTVHRCUVVOR0xHZENRVUZOTEZWQlJGSTdRVUZGUlN4blFrRkJUU3hGUVVGRExFMUJRVTBzVTBGQlVDeEZRVUZyUWp0QlFVWXhRaXhUUVVoS0xFVkJUMGtzU1VGUVNpeEZRVTlWTzBGQlEwNHNVMEZCUXl4VFFVRkVMRU5CUVZrN1FVRkRRVHRCUVZSb1FpeFZRVmRETEVsQldFUXNRMEZYVFN4VlFVRlRMRk5CUVZRc1JVRkJiMEk3UVVGRGVFSTdRVUZEUVR0QlFVTkJMR3RDUVVGUkxGTkJRVkk3UVVGRlJDeFRRV2hDUkN4RlFXZENSeXhMUVdoQ1NDeERRV2RDVXl4VlFVRlRMRWRCUVZRc1JVRkJZenRCUVVOeVFpeHJRa0ZCVVN4TFFVRlNMRU5CUVdNc05rSkJRV1FzUlVGQk5rTXNSMEZCTjBNN1FVRkRRU3hwUWtGQlR5eEhRVUZRTzBGQlEwUXNVMEZ1UWtRN1FVRnZRa1FzVDBGeVFrMHNRMEZCVUR0QlFYTkNSRHM3TzNsRFFVVnZRaXhQTEVWQlFWTTdRVUZETlVJc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNZVUZCVHl4elFrRkJXU3hWUVVGVExFOUJRVlFzUlVGQmEwSXNUVUZCYkVJc1JVRkJNRUk3UVVGRE0wTXNaVUZCVHl4TlFVRlFMRU5CUVdNc1UwRkJaQ3hEUVVOSkxFOUJSRW9zUlVGRFlUdEJRVU5VTEdWQlJrb3NSVUZIU1N4RlFVRkpPMEZCUTBZc1owSkJRVTBzVlVGRVVqdEJRVVZGTEdkQ1FVRk5MRVZCUVVNc1RVRkJUU3hUUVVGUUxFVkJRV3RDTzBGQlJqRkNMRk5CU0Vvc1JVRlBTU3hKUVZCS0xFVkJUMVU3UVVGRFRpeFRRVUZETEZOQlFVUXNRMEZCV1R0QlFVTkJPMEZCVkdoQ0xGVkJWME1zU1VGWVJDeERRVmROTEZWQlFWTXNWVUZCVkN4RlFVRnhRanRCUVVONlFqdEJRVU5CTzBGQlEwRXNhMEpCUVZFc1ZVRkJVanRCUVVWRUxGTkJhRUpFTEVWQlowSkhMRXRCYUVKSUxFTkJaMEpUTEZWQlFWTXNSMEZCVkN4RlFVRmpPMEZCUTNKQ0xHdENRVUZSTEV0QlFWSXNRMEZCWXl3MlFrRkJaQ3hGUVVFMlF5eEhRVUUzUXp0QlFVTkJMR2xDUVVGUExFZEJRVkE3UVVGRFJDeFRRVzVDUkR0QlFXOUNSQ3hQUVhKQ1RTeERRVUZRTzBGQmMwSkVPenM3ZVVOQlJXOUNMRWNzUlVGQlN5eFJMRVZCUVZVc1ZTeEZRVUZaTzBGQlF6bERMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZWQlFVa3NWMEZCVnl4SlFVRkpMRlZCUVVvc1EwRkJaU3hKUVVGSkxFMUJRVW9zUjBGQllTeFRRVUZUTEUxQlFYUkNMRWRCUVN0Q0xGZEJRVmNzVFVGQmVrUXNRMEZCWmpzN1FVRkZRVHRCUVVOQkxGZEJRVXNzU1VGQlNTeEpRVUZKTEVOQlFXSXNSVUZCWjBJc1NVRkJTU3hKUVVGSkxFMUJRWGhDTEVWQlFXZERMRWRCUVdoRExFVkJRWEZETzBGQlEyNURMR2xDUVVGVExFTkJRVlFzU1VGQll5eEpRVUZKTEVOQlFVb3NRMEZCWkR0QlFVTkVPenRCUVVWRU8wRkJRMEVzVjBGQlN5eEpRVUZKTEV0QlFVa3NRMEZCWWl4RlFVRm5RaXhMUVVGSkxGTkJRVk1zVFVGQk4wSXNSVUZCY1VNc1NVRkJja01zUlVGQk1FTTdRVUZEZUVNc2FVSkJRVk1zUzBGQlNTeEpRVUZKTEUxQlFXcENMRWxCUVRKQ0xFbEJRVWtzUlVGQlNpeERRVUV6UWp0QlFVTkVPenRCUVVWRU8wRkJRMEVzVjBGQlN5eEpRVUZKTEUxQlFVa3NRMEZCWWl4RlFVRm5RaXhOUVVGSkxGZEJRVmNzVFVGQkwwSXNSVUZCZFVNc1MwRkJka01zUlVGQk5FTTdRVUZETVVNc2FVSkJRVk1zVFVGQlNTeEpRVUZKTEUxQlFWSXNSMEZCYVVJc1UwRkJVeXhOUVVGdVF5eEpRVUUyUXl4SlFVRkpMRWRCUVVvc1EwRkJOME03UVVGRFJEczdRVUZGUkN4aFFVRlBMRkZCUVZBN1FVRkRSRHM3TzNsRFFVVnZRanRCUVVOdVFpeFZRVUZKTEZGQlFWRXNTVUZCU3l4VlFVRk1MRU5CUVdkQ0xFVkJRV2hDTEVOQlFWbzdRVUZEUVN4aFFVRlBMR1ZCUVZBc1EwRkJkVUlzUzBGQmRrSTdPMEZCUlVFc1lVRkJUeXhMUVVGUU8wRkJRMFE3TzBGQlJVUTdPenM3T3pzN08yMURRVXRsTEZjc1JVRkJZVHRCUVVNeFFpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hoUVVGUExITkNRVUZaTEZWQlFWTXNUMEZCVkN4RlFVRnJRaXhOUVVGc1FpeEZRVUV3UWpzN1FVRkZNME1zWTBGQlRTeFBRVUZPTEVOQlFXTXNWMEZCWkN4RlFVRXlRaXhKUVVFelFpeERRVUZuUXl4VlFVRkRMRWRCUVVRc1JVRkJVenM3UVVGRmRrTXNhVUpCUVU4c1RVRkJVQ3hEUVVGakxGTkJRV1FzUTBGRFFTeExRVVJCTEVWQlEwODdRVUZEVUN4aFFVWkJMRVZCUjBFc1JVRkJTVHRCUVVOR0xHdENRVUZOTEUxQlJGSTdRVUZGUlN4clFrRkJUU3hGUVVGRExFMUJRVTBzVTBGQlVDeEZRVVpTTEVWQlJUSkNPMEZCUTNwQ0xHOUNRVUZSTEVkQlFVazdRVUZJWkN4WFFVaEJMRVZCVVVFc1NVRlNRU3hGUVZGTk8wRkJRMDRzVjBGQlF5eE5RVUZFTEVWQlFWTXNVVUZCVkN4RFFVRnRRanRCUVZSdVFpeFpRVlZGTEVsQlZrWXNRMEZWVHl4VlFVRlRMRWRCUVZRc1JVRkJZenRCUVVOdVFqdEJRVU5CTzBGQlEwRXNiMEpCUVZFc1IwRkJVanRCUVVORUxGZEJaRVFzUlVGbFF5eExRV1pFTEVOQlpVOHNWVUZCVXl4SFFVRlVMRVZCUVdNN1FVRkRia0lzYlVKQlFVOHNSMEZCVUR0QlFVTkVMRmRCYWtKRU8wRkJhMEpFTEZOQmNFSkVPMEZCY1VKRUxFOUJka0pOTEVOQlFWQTdRVUYzUWtRN096czBRa0ZGVHl4TExFVkJRVTg3UVVGRFlpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hoUVVGUExITkNRVUZaTEZWQlFWTXNUMEZCVkN4RlFVRnJRaXhOUVVGc1FpeEZRVUV3UWp0QlFVTXpReXhsUVVGUExFMUJRVkFzUTBGQll5eE5RVUZrTEVOQlEwazdRVUZEUlN4blFrRkJUVHRCUVVSU0xGTkJSRW9zUlVGSlNTeExRVUZOTzBGQlNsWXNWVUZOUXl4SlFVNUVMRU5CVFUwc1ZVRkJVeXhKUVVGVUxFVkJRV1U3UVVGRGJrSTdRVUZEUVR0QlFVTkJMR3RDUVVGUkxFbEJRVWtzVlVGQlNpeERRVUZsTEVsQlFXWXNRMEZCVWp0QlFVTkVMRk5CVmtRc1JVRlhReXhMUVZoRUxFTkJWMDhzVlVGQlV5eEhRVUZVTEVWQlFXTTdRVUZEYmtJc2EwSkJRVkVzUzBGQlVpeERRVUZqTEVkQlFXUTdRVUZEUVN4cFFrRkJUeXhIUVVGUU8wRkJRMFFzVTBGa1JEdEJRV2RDUkN4UFFXcENUU3hEUVVGUU8wRkJhMEpFT3pzN2EwTkJSV0VzVnl4RlFVRmhPMEZCUTNwQ0xHRkJRVThzYzBKQlFWa3NWVUZCVXl4UFFVRlVMRVZCUVd0Q0xFMUJRV3hDTEVWQlFUQkNPMEZCUXpORExHVkJRVThzVFVGQlVDeERRVUZqTEZOQlFXUXNRMEZEU1N4TFFVUktMRVZCUTFjN1FVRkRVQ3h0UWtGR1NpeEZRVWRKTEVWQlFVazdRVUZEUml4blFrRkJUVHRCUVVSU0xGTkJTRW9zUlVGTlNTeEpRVTVLTEVWQlRWVTdRVUZEVGl4VFFVRkRMRk5CUVVRc1JVRkJXU3hUUVVGYUxFTkJRWFZDTzBGQlVETkNMRlZCVTBNc1NVRlVSQ3hEUVZOTkxGVkJRVk1zUjBGQlZDeEZRVUZqTzBGQlEyeENPMEZCUTBFN1FVRkRRU3hyUWtGQlVTeEhRVUZTTzBGQlEwUXNVMEZpUkN4RlFXTkRMRXRCWkVRc1EwRmpUeXhWUVVGVExFZEJRVlFzUlVGQll6dEJRVU51UWl4clFrRkJVU3hMUVVGU0xFTkJRV01zY1VKQlFXUXNSVUZCY1VNc1IwRkJja003UVVGRFFTeHBRa0ZCVHl4SFFVRlFPMEZCUTBRc1UwRnFRa1E3UVVGclFrUXNUMEZ1UWswc1EwRkJVRHRCUVc5Q1JEczdPMmREUVVWWExFTXNSVUZCUnp0QlFVTmlMR0ZCUVU4c1NVRkJTU3hYUVVGS0xFTkJRV2RDTEU5QlFXaENMRVZCUVhsQ0xFMUJRWHBDTEVOQlFXZERMRU5CUVdoRExFTkJRVkE3UVVGRFJEczdPMmREUVVWWExFTXNSVUZCUnp0QlFVTmlMR0ZCUVU4c1NVRkJTU3hYUVVGS0xFTkJRV2RDTEU5QlFXaENMRVZCUVhsQ0xFMUJRWHBDTEVOQlFXZERMRU5CUVdoRExFTkJRVkE3UVVGRFJEczdPenM3YTBKQlIxa3NUVHM3T3pzN096czdPenM3T3pzN096dEJRM0p4UW1ZN096czdPenRKUVV0TkxFOHNSMEZGU2l4cFFrRkJXU3hIUVVGYUxFVkJRV2xDTEZWQlFXcENMRVZCUVRaQ08wRkJRVUU3TzBGQlF6TkNMRTFCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZGQlFVMHNTVUZCVGl4SFFVRmhMRWRCUVdJN1FVRkRRU3hSUVVGTkxGTkJRVTRzUjBGQmEwSXNTMEZCYkVJN1FVRkRRU3hSUVVGTkxGZEJRVTRzUjBGQmIwSXNWVUZCY0VJN08wRkJSVUVzVVVGQlRTeFhRVUZPTEVOQlFXdENMRmRCUVd4Q0xFTkJRVGhDTEUxQlFVMHNTVUZCY0VNc1JVRkJNRU1zWlVGQlR6czdRVUZGTDBNc1dVRkJVU3hIUVVGU0xFTkJRVmtzVDBGQldqdEJRVU5CTEZGQlFVa3NWMEZCVnl4RlFVRkRMRWxCUVVrc1NVRkJTU3hGUVVGVUxFVkJRV0VzVFVGQlRTeFZRVUZ1UWl4RlFVRXJRaXhKUVVGSkxFbEJRVWtzU1VGQmRrTXNSVUZCTmtNc1RVRkJUU3hKUVVGSkxFVkJRWFpFTEVWQlFUSkVMRTFCUVUwc1JVRkJReXhQUVVGUExFbEJRVWtzU1VGQlNpeERRVUZUTEV0QlFWUXNSMEZCYTBJc1ZVRkJNVUlzUlVGQmFrVXNSVUZCWmpzN1FVRkZRVHRCUVVOQk8wRkJRMEVzVVVGQlNTeEpRVUZKTEVsQlFVb3NRMEZCVXl4TFFVRlVMRXRCUVcxQ0xFMUJRWFpDTEVWQlFTdENPenRCUVVVM1FpeHBRa0ZCVnl4WlFVRk5PMEZCUTJZc1kwRkJUU3hYUVVGT0xFTkJRV3RDTEZkQlFXeENMRU5CUVRoQ0xGRkJRVGxDTzBGQlEwUXNUMEZHUkN4RlFVVkhMRTFCUVUwc1UwRkdWRHRCUVVkRUxFdEJURVFzVFVGTFR6dEJRVU5NTEZsQlFVMHNWMEZCVGl4RFFVRnJRaXhYUVVGc1FpeERRVUU0UWl4UlFVRTVRanRCUVVORU8wRkJRMFlzUjBGbVJEdEJRV2RDUkN4RE96dHJRa0ZKV1N4UE96czdPenM3T3pzN096czdPenM3T3pzN096dEJRMnhEWmpzN096czdTVUZKVFN4Uk8wRkJSVW9zYjBKQlFWa3NTVUZCV2l4RlFVRnJRaXhKUVVGc1FpeEZRVUYzUWp0QlFVRkJPenRCUVVOMFFpeFJRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hWUVVGTkxFbEJRVTRzUjBGQllTeEpRVUZpTzBGQlEwRXNWVUZCVFN4SlFVRk9MRWRCUVdFc1NVRkJZanRCUVVOQkxGVkJRVTBzWlVGQlRpeEhRVUYzUWl4RlFVRjRRanRCUVVWRU96czdPMmREUVVWWExGVXNSVUZCV1R0QlFVTjBRaXhWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEZWQlFVa3NjMEpCUVhOQ08wRkJRM2hDTEhGQ1FVRmhMRVZCUkZjN1FVRkZlRUlzZDBKQlFXZENMRVZCUmxFN1FVRkhlRUlzTkVKQlFXOUNMRVZCU0VrN1FVRkplRUlzTWtKQlFXMUNMRVZCU2tzN1FVRkxlRUlzY1VKQlFXRTdRVUZNVnl4UFFVRXhRanRCUVU5QkxGbEJRVTBzWlVGQlRpeERRVUZ6UWl4VlFVRjBRaXhKUVVGdlF5eHRRa0ZCY0VNN1FVRkRSRHM3TzIxRFFVVmpMRlVzUlVGQldTeFRMRVZCUVZjc1J5eEZRVUZMTEVzc1JVRkJUenRCUVVOb1JDeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hWUVVGSkxHbENRVUZwUWl4SlFVRkpMRmRCUVVvc1EwRkJaMElzVTBGQmFFSXNSVUZCTWtJc1IwRkJNMElzUlVGQlowTXNTMEZCYUVNc1EwRkJja0k3TzBGQlJVRXNXVUZCVFN4bFFVRk9MRU5CUVhOQ0xFbEJRWFJDTEVOQlFUSkNMR05CUVROQ08wRkJRMFE3T3pzN08wbEJSMGNzVnl4SFFVVktMSEZDUVVGWkxGTkJRVm9zUlVGQmRVSXNSMEZCZGtJc1JVRkJORUlzUzBGQk5VSXNSVUZCYlVNN1FVRkJRVHM3UVVGRGFrTXNUVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzVVVGQlRTeFRRVUZPTEVkQlFXdENMRk5CUVd4Q08wRkJRMEVzVVVGQlRTeEhRVUZPTEVkQlFWa3NSMEZCV2p0QlFVTkJMRkZCUVUwc1MwRkJUaXhIUVVGakxFdEJRV1E3UVVGRFJDeERPenRKUVVsSExGazdRVUZGU2l4M1FrRkJXU3hSUVVGYUxFVkJRWE5DTEZGQlFYUkNMRVZCUVdkRE8wRkJRVUU3TzBGQlF6bENMRkZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzVlVGQlRTeFJRVUZPTEVkQlFXbENMRkZCUVdwQ08wRkJRMEVzVlVGQlRTeFJRVUZPTEVkQlFXbENMRkZCUVdwQ08wRkJRMFE3T3pzN09FSkJSVk1zVVN4RlFVRlZMRkVzUlVGQlZUdEJRVU0xUWpzN1FVRkZSRHM3T3pzN2EwSkJSMWtzVVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVNM1JHWTdPMEZCUTBFN096czdRVUZEUVRzN096dEJRVU5CT3pzN096czdRVUZGUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1NVRTBRazBzWXpzN1FVRkZTanM3T3p0QlFVZEJMREJDUVVGWkxGVkJRVm9zUlVGQmQwSTdRVUZCUVRzN1FVRkRkRUlzVVVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1VVRkJTU3hEUVVGRExGVkJRVXdzUlVGQmFVSXNUVUZCVFN4SlFVRkpMRXRCUVVvc1EwRkJWU3gzUWtGQlZpeERRVUZPT3p0QlFVVnFRaXhWUVVGTkxGZEJRVTRzUjBGQmIwSXNWVUZCY0VJN1FVRkRRU3hWUVVGTkxFOUJRVTRzUjBGQlowSXNUVUZCVFN4WFFVRk9MRWRCUVc5Q0xFMUJRWEJETzBGQlEwRXNWVUZCVFN4UFFVRk9MRWRCUVdkQ0xFMUJRVTBzVjBGQlRpeEhRVUZ2UWl4bFFVRndRenM3UVVGRlFTeFZRVUZOTEU5QlFVNHNSMEZCWjBJc2MwSkJRVlVzVFVGQlRTeFhRVUZvUWl4RlFVRTJRaXhOUVVFM1F6czdRVUZGUVR0QlFVTkJMRlZCUVUwc1ZVRkJUaXhIUVVGdFFpeEZRVUZ1UWp0QlFVTkJMRkZCUVVrc1kwRkJZeXgxUWtGQllTeE5RVUZpTEVWQlFXOUNMRTlCUVhCQ0xFTkJRV3hDTzBGQlEwRXNWVUZCVFN4UlFVRk9MRWRCUVdsQ0xGZEJRV3BDTzBGQlEwRXNWVUZCVFN4TlFVRk9MRWRCUVdVc2MwSkJRV1k3TzBGQlJVRTdRVUZEUVN4VlFVRk5MRzFDUVVGT0xFZEJRVFJDTEVWQlFUVkNPenRCUVVWQk8wRkJRMEVzVlVGQlRTeFJRVUZPTEVkQlFXbENMRVZCUVdwQ096dEJRVVZCTzBGQlEwRXNWVUZCVFN4eFFrRkJUaXhIUVVFNFFpeEZRVUU1UWpzN1FVRkZRVHRCUVVOQkxGVkJRVTBzYVVKQlFVNHNSMEZCTUVJc1NVRkJNVUk3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUlVRN096czdlVUpCUlVrc1RTeEZRVUZSTzBGQlExZ3NWVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3hWUVVGSkxGVkJRVlVzUlVGQlF5eE5RVUZMTEZGQlFVNHNSVUZCWjBJc1NVRkJTU3hOUVVGTkxFOUJRVEZDTEVWQlFXMURMRTFCUVUwc1RVRkJUU3hQUVVFdlF5eEZRVUYzUkN4TlFVRk5MRVZCUVVNc1QwRkJUeXhOUVVGU0xFVkJRVGxFTEVWQlFXUTdPMEZCUlVFc1ZVRkJTU3hMUVVGTExFMUJRVTBzVjBGQlRpeERRVUZyUWl4WFFVRnNRaXhEUVVFNFFpeFBRVUU1UWl4RFFVRlVPenRCUVVWQkxGbEJRVTBzVjBGQlRpeERRVUZyUWl4dFFrRkJiRUlzUTBGQmMwTXNUVUZCVFN4UFFVRTFReXhGUVVGeFJDeEZRVUZ5UkN4RlFVRjVSQ3hsUVVGUE8wRkJRemxFTEdkQ1FVRlJMRWRCUVZJc1EwRkJXU3hSUVVGYUxFVkJRWE5DTEVsQlFVa3NTVUZCU2l4RFFVRlRMRXRCUVM5Q08wRkJRMEVzWTBGQlRTeFhRVUZPTEVOQlFXdENMSE5DUVVGc1FpeERRVUY1UXl4TlFVRk5MRTlCUVM5RExFVkJRWGRFTEVWQlFYaEVPMEZCUTBRc1QwRklSRHRCUVVsRU96dEJRVVZFT3pzN096czdPenM3UVVGM1EwRTdPenM3TzI5RFFVdG5RanRCUVVOa0xGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNZVUZCVHl4TlFVRk5MRlZCUVdJN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN1owTkJTMWtzVHl4RlFVRlRPMEZCUTI1Q0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRmRCUVVzc1NVRkJTU3hMUVVGVUxFbEJRV3RDTEUxQlFVMHNWVUZCZUVJc1JVRkJiME03TzBGQlJXeERMRmxCUVVrc1YwRkJWeXhOUVVGTkxGVkJRVTRzUTBGQmFVSXNTMEZCYWtJc1EwRkJaanRCUVVOQkxGbEJRVWtzVTBGQlV5eFJRVUZVTEV0QlFYTkNMRTlCUVRGQ0xFVkJRVzFETzBGQlEycERMR2xDUVVGUExGRkJRVkE3UVVGRFJEdEJRVU5HT3p0QlFVVkVMRmxCUVUwc2IwSkJRVTQ3UVVGRFJEczdPM2xEUVVWdlFpeFZMRVZCUVZrN1FVRkRMMElzVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1lVRkJUeXh6UWtGQldTeFZRVUZUTEU5QlFWUXNSVUZCYTBJc1RVRkJiRUlzUlVGQk1FSTdRVUZETTBNc1dVRkJTU3hYUVVGWExGZEJRVmNzUzBGQldDeERRVUZwUWl4TFFVRnFRaXhEUVVGbU8wRkJRMEVzV1VGQlNTeFRRVUZUTEVOQlFWUXNUVUZCWjBJc1UwRkJjRUlzUlVGQkswSTdRVUZETjBJc1owSkJRVTBzZVVKQlFVNHNRMEZCWjBNc1ZVRkJhRU1zUlVGQk5FTXNTVUZCTlVNc1EwRkJhVVFzVlVGQlF5eHJRa0ZCUkN4RlFVRjNRanRCUVVOMlJTeG5Ra0ZCU1N4VlFVRlZMRTFCUVUwc1VVRkJUaXhEUVVGbExHVkJRV1lzUTBGQkswSXNhMEpCUVM5Q0xFTkJRV1E3UVVGRFFTeG5Ra0ZCU1N4UFFVRktMRVZCUVdFN08wRkJSVmdzYlVKQlFVc3NTVUZCU1N4TFFVRlVMRWxCUVd0Q0xFMUJRVTBzVlVGQmVFSXNSVUZCYjBNN1FVRkRiRU1zYjBKQlFVa3NWMEZCVnl4TlFVRk5MRlZCUVU0c1EwRkJhVUlzUzBGQmFrSXNRMEZCWmp0QlFVTkJMRzlDUVVGSkxGTkJRVk1zVVVGQlZDeExRVUZ6UWl4UFFVRXhRaXhGUVVGdFF6dEJRVU5xUXl4NVFrRkJUeXhSUVVGUkxGTkJRVk1zVjBGQmFrSXNRMEZCVUR0QlFVTkVPMEZCUTBZN1FVRkRSaXhoUVZKRUxFMUJVVTg3UVVGRFRDeHhRa0ZCVHl4UFFVRlBMSGRDUVVGUUxFTkJRVkE3UVVGRFJEdEJRVU5HTEZkQllrUTdRVUZqUkN4VFFXWkVMRTFCWlU4N1FVRkRUQ3hqUVVGSkxGVkJRVlVzVFVGQlRTeFJRVUZPTEVOQlFXVXNaVUZCWml4RFFVRXJRaXhWUVVFdlFpeERRVUZrTzBGQlEwRXNZMEZCU1N4UFFVRktMRVZCUVdFN08wRkJSVmdzYVVKQlFVc3NTVUZCU1N4TFFVRlVMRWxCUVd0Q0xFMUJRVTBzVlVGQmVFSXNSVUZCYjBNN1FVRkRiRU1zYTBKQlFVa3NWMEZCVnl4TlFVRk5MRlZCUVU0c1EwRkJhVUlzUzBGQmFrSXNRMEZCWmp0QlFVTkJMR3RDUVVGSkxGTkJRVk1zVVVGQlZDeExRVUZ6UWl4UFFVRXhRaXhGUVVGdFF6dEJRVU5xUXl4MVFrRkJUeXhSUVVGUkxGTkJRVk1zVjBGQmFrSXNRMEZCVUR0QlFVTkVPMEZCUTBZN1FVRkRSaXhYUVZKRUxFMUJVVTg3UVVGRFRDeHRRa0ZCVHl4UFFVRlBMSGRDUVVGUUxFTkJRVkE3UVVGRFJEdEJRVU5HTzBGQlEwWXNUMEV2UWswc1EwRkJVRHRCUVdkRFJEczdRVUZGUkRzN096czdPenM3TzJkRFFVMVpMRmNzUlVGQllUdEJRVU4yUWl4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxGVkJRVWtzVVVGQlVTeEZRVUZhT3p0QlFVVkJPMEZCUTBFc1ZVRkJTU3haUVVGaExGZEJRVVFzWjBOQlFYTkRMRlZCUVVNc1MwRkJSQ3hGUVVGWE8wRkJRVU1zWlVGQlR5eExRVUZRTzBGQlFXTXNUMEZCYUVZN08wRkJSVUVzVjBGQlN5eEpRVUZKTEV0QlFWUXNTVUZCYTBJc1RVRkJUU3hWUVVGNFFpeEZRVUZ2UXp0QlFVTnNReXhaUVVGSkxGZEJRVmNzVFVGQlRTeFZRVUZPTEVOQlFXbENMRXRCUVdwQ0xFTkJRV1k3UVVGRFFTeGpRVUZOTEVsQlFVNHNRMEZCVnl4VlFVRlZMRk5CUVZNc1VVRkJia0lzUTBGQldEdEJRVU5FTzBGQlEwUXNZVUZCVHl4TFFVRlFPMEZCUTBRN08wRkJSVVE3T3pzN096czdlVU5CU1hGQ08wRkJRMjVDTEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1lVRkJUeXhOUVVGTkxHVkJRV0k3UVVGRFJEczdRVUZGUkRzN096czdPenQxUTBGSmJVSXNVU3hGUVVGVk8wRkJRek5DTEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1dVRkJUU3hsUVVGT0xFZEJRWGRDTEZGQlFYaENPMEZCUTBRN08wRkJSVVE3T3pzN096czdiVU5CU1dVc1R5eEZRVUZUTzBGQlEzUkNMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZkQlFVc3NTVUZCU1N4UlFVRlVMRWxCUVhGQ0xFMUJRVTBzVlVGQk0wSXNSVUZCZFVNN1FVRkRja01zV1VGQlNTeE5RVUZOTEZWQlFVNHNRMEZCYVVJc1VVRkJha0lzUlVGQk1rSXNVVUZCTTBJc1MwRkJkME1zVDBGQk5VTXNSVUZCY1VRN1FVRkRia1FzWjBKQlFVMHNWVUZCVGl4RFFVRnBRaXhOUVVGcVFpeERRVUYzUWl4UlFVRjRRaXhGUVVGclF5eERRVUZzUXp0QlFVTkVPMEZCUTBZN1FVRkRSanM3UVVGRlJEczdPenM3T3p0dFEwRkpaU3hUTEVWQlFWYzdRVUZEZUVJc1ZVRkJTU3hEUVVGRExGTkJRVXdzUlVGQlowSTdRVUZEWkN4bFFVRlBMSGxDUVVGUU8wRkJRMFFzVDBGR1JDeE5RVVZQTzBGQlEwd3NaVUZCVHl4clFrRkJhMElzVTBGQmVrSTdRVUZEUkR0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN08yZERRVTlaTEZVc1JVRkJXU3hMTEVWQlFVODdRVUZETjBJc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNZVUZCVHl4elFrRkJXU3hWUVVGVExFOUJRVlFzUlVGQmEwSXNUVUZCYkVJc1JVRkJNRUk3TzBGQlJUTkRPMEZCUTBFc1kwRkJUU3hsUVVGT0xFZEJRWGRDTEZOQlFYaENPMEZCUTBFc1kwRkJUU3h2UWtGQlRpeERRVUV5UWl4WlFVRXpRaXhGUVVGNVF5eFJRVUY2UXl4RlFVRnRSQ3hOUVVGdVJDeEZRVUV5UkN4VlFVRXpSQ3hGUVVGMVJTeEpRVUYyUlN4RFFVRTBSU3hWUVVGVExFdEJRVlFzUlVGQlowSTdRVUZETVVZc2EwSkJRVkVzUjBGQlVpeERRVUZaTEdGQlFWbzdRVUZEUVN4clFrRkJVU3hMUVVGU08wRkJRMFFzVTBGSVJDeEZRVWRITEZWQlFWTXNSMEZCVkN4RlFVRmpPMEZCUTJZc2EwSkJRVkVzUjBGQlVpeERRVUZaTEdsQ1FVRmFPMEZCUTBFc2FVSkJRVThzUjBGQlVEdEJRVU5FTEZOQlRrUTdRVUZQUkN4UFFWaE5MRU5CUVZBN1FVRlpSRHM3UVVGRlJEczdPenM3T3pzN2VVTkJTM0ZDTEZVc1JVRkJXU3hOTEVWQlFWRXNXU3hGUVVGakxGTXNSVUZCVnp0QlFVTm9SU3hWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZwUWl4TlFVRnFRaXhGUVVGNVFqczdRVUZGTVVNc1dVRkJTU3hOUVVGTkxHVkJRVTRzUzBGQk1FSXNVMEZCT1VJc1JVRkJlVU03UVVGRGRrTTdRVUZEUVR0QlFVTkJMR2xDUVVGUExGRkJRVkVzVFVGQlRTeGxRVUZrTEVOQlFWQTdRVUZEUkN4VFFVcEVMRTFCU1U4N08wRkJSVXc3UVVGRFFUczdRVUZGUVN4alFVRkpPMEZCUTBZc1owSkJRVWtzVFVGQlNpeEZRVUZaTzBGQlFVRTdPMEZCUlZZc2IwSkJRVWtzYTBKQlFVbzdRVUZEUVN4dlFrRkJTU3h2UWtGQlNqczdRVUZGUVR0QlFVTkJMSE5DUVVGTkxFMUJRVTRzUTBGQllTeHJRa0ZCWWl4SFFVRnJReXhKUVVGc1F5eERRVUYxUXl4VlFVRlRMRTlCUVZRc1JVRkJhMEk3TzBGQlJYWkVMRGhDUVVGWkxFdEJRVXNzVVVGQlVTeE5RVUZpTEVOQlFWbzdRVUZEUVN4blEwRkJZeXhQUVVGa08wRkJRMEVzZVVKQlFVOHNUVUZCVFN4cFFrRkJUaXhEUVVGM1FpeFRRVUY0UWl4RlFVRnRReXhOUVVGdVF5eEZRVUV5UXl4RlFVRXpReXhGUVVFclF5eFhRVUV2UXl4RlFVRTBSQ3hUUVVFMVJDeERRVUZRTzBGQlJVUXNhVUpCVGtRc1JVRk5SeXhKUVU1SUxFTkJUVkVzVlVGQlV5eEhRVUZVTEVWQlFXTTdRVUZEY0VJc2VVSkJRVThzVFVGQlRTeHBRa0ZCVGl4RFFVRjNRaXhUUVVGNFFpeEZRVUZ0UXl4TlFVRnVReXhGUVVFeVF5eEhRVUV6UXl4RlFVRm5SQ3hYUVVGb1JDeEZRVUUyUkN4VFFVRTNSQ3hEUVVGUU8wRkJSVVFzYVVKQlZFUXNSVUZUUnl4SlFWUklMRU5CVTFFc1ZVRkJVeXhMUVVGVUxFVkJRV2RDTzBGQlEzUkNMSE5DUVVGSkxFdEJRVW9zUlVGQlZ6dEJRVU5VTERSQ1FVRlJMRXRCUVZJN1FVRkRSQ3h0UWtGR1JDeE5RVVZQTzBGQlEwd3NNa0pCUVU4c05rSkJRVkE3UVVGRFJEdEJRVU5HTEdsQ1FXWkVMRVZCWlVjc1MwRm1TQ3hEUVdWVExGVkJRVk1zUjBGQlZDeEZRVUZqTzBGQlEzSkNMREJDUVVGUkxFZEJRVklzUTBGQldTeEhRVUZhTzBGQlEwRXNlVUpCUVU4c1IwRkJVRHRCUVVORUxHbENRV3hDUkR0QlFVNVZPMEZCZVVKWU8wRkJRMFlzVjBFelFrUXNRMEV5UWtVc1QwRkJUeXhMUVVGUUxFVkJRV003UVVGRFpDeHZRa0ZCVVN4SFFVRlNMRU5CUVZrc2FVTkJRVm83UVVGRFFTeG5Ra0ZCU1N4bFFVRmxMRXRCUVVzc1MwRkJUQ3hEUVVGWkxFdEJRVXNzVFVGQlRDeExRVUZuUWl4TFFVRnFRaXhIUVVFd1FpeERRVUZ5UXl4RFFVRnVRanRCUVVOQkxHZENRVUZKTEdsQ1FVRnBRanRCUVVOdVFpeDVRa0ZCVnl4WFFVUlJPMEZCUlc1Q0xHMUNRVUZKTEZGQlJtVTdRVUZIYmtJc01rSkJRV0U3UVVGRFdDeDNRa0ZCVVN3NFJrRkVSenRCUVVWWUxHOUNRVUZKTEdGQlJrODdRVUZIV0N3d1FrRkJWU3haUVVGWkxGbEJRVm9zUjBGQk1rSXNZVUZJTVVJN1FVRkpXQ3g1UWtGQlV5dzRRa0ZCT0VJN1FVRktOVUlzWlVGSVRTeEZRVUZ5UWp0QlFWTkJMR3RDUVVGTkxHVkJRVTRzUjBGQmQwSXNZMEZCZUVJN1FVRkRRU3hyUWtGQlRTeFZRVUZPTEVOQlFXbENMRWxCUVdwQ0xFTkJRWE5DTEdOQlFYUkNPMEZCUTBFc2JVSkJRVThzVVVGQlVTeGpRVUZTTEVOQlFWQTdRVUZEUkR0QlFVTkdPMEZCUTBZc1QwRjJSRTBzUTBGQlVEdEJRWGRFUkRzN1FVRkZSRHM3T3pzN096czdPenM3TzNORFFWTnJRaXhSTEVWQlFWVXNUU3hGUVVGUkxGa3NSVUZCWXl4UExFVkJRVk1zVXl4RlFVRlhPMEZCUTNCRkxGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNWVUZCU1N4VFFVRlRMRTFCUVUwc1kwRkJUaXhEUVVGeFFpeFRRVUZ5UWl4RFFVRmlPMEZCUTBFc1ZVRkJTU3huUWtGQlNqczdRVUZGUVN4alFVRlJMRWRCUVZJc1EwRkJXU3h0UWtGQldqczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZwUWl4TlFVRnFRaXhGUVVGNVFqczdRVUZGTVVNc2EwSkJRVlVzUlVGQlF5eE5RVUZMTEZOQlFVNHNSVUZCYVVJc1NVRkJTU3hOUVVGeVFpeEZRVUUyUWl4TlFVRk5MRTFCUVUwc1QwRkJla01zUlVGQmEwUXNUVUZCVFN4RlFVRkRMRlZCUVZVc1ZVRkJXQ3hGUVVGMVFpeFJRVUZSTEcxQ1FVRXZRaXhGUVVGdlJDeFJRVUZSTEVWQlFVTXNWVUZCVlN4UlFVRllMRVZCUVhGQ0xGRkJRVkVzVFVGQk4wSXNSVUZCY1VNc1kwRkJZeXhaUVVGdVJDeEZRVUUxUkN4RlFVRjRSQ3hGUVVGV096dEJRVVZCTEdOQlFVMHNWMEZCVGl4RFFVRnJRaXhYUVVGc1FpeERRVUU0UWl4UFFVRTVRaXhGUVVGMVF5eFZRVUZETEVkQlFVUXNSVUZCVXp0QlFVTTVReXhqUVVGSkxGTkJRVk1zU1VGQlNTeEpRVUZLTEVOQlFWTXNTMEZCZEVJN08wRkJSVUVzWTBGQlNTeFBRVUZQTEZGQlFWZ3NSVUZCY1VJN1FVRkJRVHM3UVVGRmJrSXNhMEpCUVVrc1RVRkJUU3hQUVVGUExFbEJRVkFzUTBGQldTeFBRVUZQTEZGQlFXNUNMRVZCUVRaQ0xHVkJRVGRDTEVWQlFUaERMSFZDUVVFNVF5eERRVUZXTzBGQlEwRXNhMEpCUVVrc1QwRkJUeXhQUVVGWUxFVkJRVzlDTzBGQlEyeENMRzlDUVVGSkxHZENRVUZLTEVOQlFYRkNMRmRCUVhKQ0xFVkJRV3RETEZWQlFWTXNRMEZCVkN4RlFVRlpPMEZCUXpWRExITkNRVUZKTEUxQlFVMHNSVUZCUlN4SFFVRmFPMEZCUTBFc2MwSkJRVWtzVDBGQlR5eGxRVUZsTEVsQlFXWXNRMEZCYjBJc1IwRkJjRUlzUTBGQldEdEJRVU5CTEhOQ1FVRkpMRkZCUVZFc1owSkJRV2RDTEVsQlFXaENMRU5CUVhGQ0xFZEJRWEpDTEVOQlFWbzdPMEZCUlVFc2MwSkJRVWtzVVVGQlVTeExRVUZhTEVWQlFXMUNPMEZCUTJwQ0xIZENRVUZKTEV0QlFVbzdRVUZEUVN3MFFrRkJVU3hIUVVGU08wRkJRMFE3UVVGRFJpeHBRa0ZVUkR0QlFWVkVMR1ZCV0VRc1RVRlhUenRCUVVGQk8wRkJRMHdzYzBKQlFVa3NXVUZCV1N4WlFVRlpMRmxCUVZjN1FVRkRja01zZDBKQlFVazdRVUZEUml3d1FrRkJTU3hKUVVGSkxFMUJRVklzUlVGQlowSTdRVUZEWkN3clFrRkJUeXhwUkVGQlVEdEJRVU5CTEhORFFVRmpMRk5CUVdRN1FVRkRSRHM3UVVGRlJDd3dRa0ZCU1N4SlFVRkpMRkZCUVVvc1EwRkJZU3hIUVVGaUxFTkJRV2xDTEU5QlFXcENMRU5CUVhsQ0xGVkJRWHBDTEUxQlFYbERMRU5CUVVNc1EwRkJNVU1zU1VGQkswTXNTVUZCU1N4UlFVRktMRU5CUVdFc1IwRkJZaXhEUVVGcFFpeFBRVUZxUWl4RFFVRjVRaXhUUVVGVExFMUJRV3hETEUxQlFUaERMRU5CUVVNc1EwRkJiRWNzUlVGQmNVYzdRVUZEYmtjc0swSkJRVThzWVVGQlVDeERRVUZ4UWl4VFFVRnlRanRCUVVOQkxEUkNRVUZKTEUxQlFWRXNTVUZCU1N4UlFVRktMRU5CUVdFc1IwRkJla0k3TzBGQlJVRXNORUpCUVVrc1MwRkJTanRCUVVOQkxHZERRVUZSTEVkQlFWSTdRVUZEUkR0QlFVTkdMSEZDUVdKRUxFTkJZVVVzVDBGQlR5eERRVUZRTEVWQlFWVTdRVUZEVmp0QlFVTkVPMEZCUTBZc2JVSkJha0psTEVWQmFVSmlMRWRCYWtKaExFTkJRV2hDTzBGQlJFczdRVUZ0UWs0N1FVRnFRMnRDTzBGQmEwTndRaXhYUVd4RFJDeE5RV3REVHl4SlFVRkpMRTFCUVVvc1JVRkJXVHM3UVVGRmFrSXNaMEpCUVVrc2EwSkJRV3RDTEV0QlFVc3NTMEZCVEN4RFFVRlhMRXRCUVVzc1QwRkJUeXhUUVVGYUxFTkJRVmdzUTBGQmRFSTdRVUZEUVN4blFrRkJTU3huUWtGQlNqczdRVUZGUVR0QlFVTkJMR2RDUVVGSkxHZENRVUZuUWl4WFFVRndRaXhGUVVGcFF6dEJRVU12UWl4M1FrRkJWU3huUWtGQlowSXNWMEZCTVVJN1FVRkRSQ3hoUVVaRUxFMUJSVTg3UVVGRFRDeDNRa0ZCVlN4bFFVRldPMEZCUTBRN08wRkJSVVFzWjBKQlFVa3NUMEZCU2l4RlFVRmhPMEZCUTFnc2NVSkJRVThzVVVGQlVDeEhRVUZyUWl4blEwRkJiMElzVVVGQlVTeExRVUUxUWl4RFFVRnNRanM3UVVGRlFTeHZRa0ZCVFN4UlFVRk9MRU5CUVdVc1YwRkJaaXhEUVVFeVFpeE5RVUV6UWpzN1FVRkZRVHRCUVVOQkxHdENRVUZKTEZsQlFXRXNUMEZCVHl4VFFVRlNMRWRCUVhGQ0xFOUJRVThzVTBGQk5VSXNSMEZCZDBNc1JVRkJlRVE3UVVGRFFTeHJRa0ZCU1N4dlFrRkJiMElzUlVGQlF5eFZRVUZWTEZGQlFWRXNTMEZCYmtJc1JVRkJNRUlzU1VGQlNTeFJRVUZSTEVsQlFYUkRMRVZCUVRSRExGRkJRVkVzVlVGQlZTeFBRVUU1UkN4RlFVRjFSU3hSUVVGUkxGVkJRVlVzVFVGQmVrWXNSVUZCYVVjc1UwRkJVeXhuUTBGQmIwSXNVVUZCVVN4TFFVRTFRaXhEUVVFeFJ5eEZRVUY0UWpzN1FVRkZRVHRCUVVOQkxHdENRVUZKTEdOQlFXTXNSVUZCUXl4aFFVRmhMR2xDUVVGa0xFVkJRV2xETEV0QlFVc3NUMEZCVHl4SFFVRlFMRU5CUVZjc1RVRkJha1FzUlVGQmVVUXNWMEZCVnl4UFFVRlBMRk5CUVRORkxFVkJRV3hDTzBGQlEwRXNjVUpCUVU4c1YwRkJVQ3hIUVVGeFFpeFhRVUZ5UWp0QlFVTkJMSEZDUVVGUExFOUJRVkFzUjBGQmFVSXNUMEZCYWtJN08wRkJSVUVzYjBKQlFVMHNaVUZCVGl4SFFVRjNRaXhYUVVGNFFqdEJRVU5CTEc5Q1FVRk5MRlZCUVU0c1EwRkJhVUlzU1VGQmFrSXNRMEZCYzBJc1RVRkJkRUk3UVVGRFFTeHpRa0ZCVVN4WFFVRlNPMEZCUlVRN1FVRkRSaXhYUVM5Q1RTeE5RU3RDUVR0QlFVTk1MRzFDUVVGUExIbERRVUZRTzBGQlEwUTdRVUZGUml4VFFYaEZSRHRCUVhsRlJDeFBRVGRGVFN4RFFVRlFPMEZCT0VWRU96dEJRVVZFT3pzN08wRkJTVUU3T3pzN096czdPenM3YzBOQlQydENMRk1zUlVGQlZ5eE5MRVZCUVZFc1V5eEZRVUZYTzBGQlF6bERMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZWQlFVa3NVMEZCVXl4TlFVRk5MR05CUVU0c1EwRkJjVUlzVTBGQmNrSXNRMEZCWWpzN1FVRkZRU3hWUVVGSkxGVkJRVlVzUlVGQlF5eE5RVUZMTEZOQlFVNHNSVUZCYVVJc1NVRkJTU3hOUVVGeVFpeEZRVUUyUWl4TlFVRk5MRTFCUVUwc1QwRkJla01zUlVGQmEwUXNUVUZCVFN4RlFVRkRMRlZCUVZVc1ZVRkJXQ3hGUVVGMVFpeFJRVUZSTEcxQ1FVRXZRanRCUVVNNVJDeHJRa0ZCVVN4RlFVRkRMRmRCUVZjc1UwRkJXaXhGUVVGMVFpeFJRVUZSTEUxQlFTOUNMRVZCUkhORUxFVkJRWGhFTEVWQlFXUTdPMEZCUjBFc1lVRkJUeXh6UWtGQldTeFZRVUZUTEU5QlFWUXNSVUZCYTBJc1RVRkJiRUlzUlVGQk1FSTdRVUZETTBNc1kwRkJUU3hYUVVGT0xFTkJRV3RDTEZkQlFXeENMRU5CUVRoQ0xFOUJRVGxDTEVWQlFYVkRMRlZCUVVNc1RVRkJSQ3hGUVVGWk8wRkJRMnBFTEdOQlFVa3NUMEZCVHl4SlFVRlFMRU5CUVZrc1NVRkJXaXhMUVVGeFFpeEhRVUY2UWl4RlFVRTRRanRCUVVNMVFpeHZRa0ZCVVN4UFFVRlBMRWxCUVZBc1EwRkJXU3hMUVVGd1FqdEJRVU5FTEZkQlJrUXNUVUZGVHp0QlFVTk1MRzFDUVVGUExFOUJRVkFzUlVGQlowSXNUMEZCVHl4SlFVRlFMRU5CUVZrc1NVRkJOVUk3UVVGRFJEdEJRVU5HTEZOQlRrUTdRVUZQUkN4UFFWSk5MRU5CUVZBN1FVRlRSRHM3TzIxRFFVVmpMRThzUlVGQlV6dEJRVU4wUWl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeGpRVUZSTEVkQlFWSXNRMEZCV1N4clFrRkJXanM3UVVGRlFTeGhRVUZQTEhOQ1FVRlpMRlZCUVZNc1QwRkJWQ3hGUVVGclFpeE5RVUZzUWl4RlFVRXdRanRCUVVNelF5eFpRVUZKTEd0Q1FVRnJRaXhSUVVGUkxFbEJRVklzUzBGQmFVSXNWMEZCZGtNN08wRkJSVUU3UVVGRFFTeFpRVUZKTEVOQlFVTXNUVUZCVFN4cFFrRkJVQ3hKUVVFMFFpeERRVUZETEdWQlFXcERMRVZCUVd0RU8wRkJRMmhFTEd0Q1FVRlJMRWRCUVZJc1EwRkJXU3h4UWtGQldqdEJRVU5CTEdsQ1FVRlBMRkZCUVZFc1QwRkJVaXhEUVVGUU8wRkJRMFE3TzBGQlJVUTdRVUZEUVN4WlFVRkpMR1ZCUVdVc1VVRkJVU3hGUVVGU0xFTkJRVmNzUzBGQldDeERRVUZwUWl4SFFVRnFRaXhEUVVGdVFqdEJRVU5CTEZsQlFVa3NaMEpCUVdkQ0xHRkJRV0VzUTBGQllpeEpRVUZyUWl4SlFVRnNRaXhIUVVGNVFpeGhRVUZoTEVOQlFXSXNRMEZCZWtJc1IwRkJNa01zUjBGQk0wTXNSMEZCYVVRc1lVRkJZU3hEUVVGaUxFTkJRWEpGTzBGQlEwRXNXVUZCU1N4aFFVRmhMRTFCUVdJc1IwRkJjMElzUTBGQk1VSXNSVUZCTmtJN1FVRkRNMElzTUVKQlFXZENMR0ZCUVdFc1EwRkJZaXhKUVVGclFpeEpRVUZzUWl4SFFVRjVRaXhoUVVGaExFTkJRV0lzUTBGQmVrSXNSMEZCTWtNc1IwRkJNME1zUjBGQmFVUXNZVUZCWVN4RFFVRmlMRU5CUVdwRUxFZEJRVzFGTEVkQlFXNUZMRWRCUVhsRkxHRkJRV0VzUTBGQllpeERRVUY2Ump0QlFVTkVPenRCUVVWRUxGbEJRVWtzYVVKQlFXbENMRFJDUVVGblFpeGhRVUZvUWl4RFFVRnlRanRCUVVOQkxGbEJRVWtzWjBKQlFXZENMSE5DUVVGVkxGRkJRVkVzU1VGQmJFSXNSVUZCZDBJc1NVRkJlRUlzUzBGQmFVTXNVMEZCY2tRN1FVRkRRU3haUVVGSkxHTkJRV01zYzBKQlFWVXNVVUZCVVN4RlFVRnNRaXhGUVVGelFpeEpRVUYwUWl4TFFVRXJRaXhUUVVGcVJEczdRVUZGUVN4WlFVRkpMR2xDUVVGcFFpeFhRVUZ5UWl4RlFVRnJRenRCUVVOb1F5eGpRVUZKTEZWQlFWVXNUVUZCVFN4VFFVRk9MRU5CUVdkQ0xHVkJRV2hDTEVOQlFXZERMRkZCUVZFc1NVRkJlRU1zUTBGQlpEdEJRVU5CTEdOQlFVa3NUMEZCU2l4RlFVRmhPMEZCUVVFN08wRkJSVmc3UVVGRFFTeHJRa0ZCU1N4WFFVRlhMRTFCUVUwc1VVRkJUaXhEUVVGbExGRkJRVkVzU1VGQlVpeEhRVUZsTEV0QlFXWXNSMEZCZFVJc1VVRkJVU3hGUVVFNVF5eERRVUZtTzBGQlEwRXNhMEpCUVVrc1EwRkJReXhSUVVGTUxFVkJRV1U3UVVGRFlpd3lRa0ZCVnl4TlFVRk5MR05CUVU0c1EwRkJjVUlzVDBGQmNrSXNSVUZCT0VJc1QwRkJPVUlzUTBGQldEdEJRVU5CTEhkQ1FVRlJMRWRCUVZJc1EwRkJXU3gxUWtGQldpeEZRVUZ4UXl4UlFVRlJMRWxCUVZJc1IwRkJaU3hSUVVGUkxFVkJRVFZFTzBGQlEwRXNjMEpCUVUwc1VVRkJUaXhEUVVGbExGRkJRVkVzU1VGQlVpeEhRVUZsTEV0QlFXWXNSMEZCZFVJc1VVRkJVU3hGUVVFNVF5eEpRVUZ2UkN4UlFVRndSRHRCUVVOQkxIZENRVUZSTEVsQlFWSXNRMEZCWVN4alFVRmlMRWRCUVRoQ0xHZENRVUU1UWp0QlFVTkVPenRCUVVWRUxHdENRVUZKTEZOQlFWTXNZVUZCVkN4SlFVRXdRaXhEUVVGRExHVkJRUzlDTEVWQlFXZEVPMEZCUVVFN08wRkJSVGxETEhOQ1FVRkpMRXRCUVVzc1RVRkJUU3hOUVVGT0xFTkJRV0VzVlVGQllpeEZRVUZVTzBGQlEwRXNkMEpCUVUwc1RVRkJUaXhEUVVGaExGVkJRV0lzUTBGQmQwSXNVMEZCVXl4SlFVRlVMRU5CUVdNc2NVSkJRWFJETEVWQlFUWkVMRkZCUVZFc1NVRkJVaXhEUVVGaExFdEJRVEZGTEVWQlFXbEdMRVZCUVdwR0xFVkJRWEZHTEVsQlFYSkdMRU5CUVRCR0xEQkNRVUZyUWpzN1FVRkZNVWNzZDBKQlFVa3NhMEpCUVd0Q0xFMUJRVTBzYjBKQlFVNHNRMEZCTWtJc1QwRkJNMElzUlVGQmIwTXNVVUZCVVN4SlFVRlNMRU5CUVdFc1MwRkJZaXhIUVVGeFFpeEZRVUY2UkN4RlFVRTJSQ3hUUVVGVExGZEJRVlFzUTBGQmNVSXNWMEZCYkVZc1EwRkJkRUk3TzBGQlJVRXNNRUpCUVUwc1RVRkJUaXhEUVVGaExGRkJRV0lzUTBGQmMwSXNVMEZCVXl4SlFVRlVMRU5CUVdNc2EwSkJRWEJETEVWQlFYZEVMR1ZCUVhoRUxFVkJRWGxGTEVsQlFYcEZMRU5CUVRoRkxHZENRVUZSTzBGQlEzQkdPMEZCUTBFc01FSkJRVWtzVVVGQlVTeEZRVUZETEVsQlFVa3NUVUZCVFN4TlFVRk9MRU5CUVdFc1RVRkJZaXhEUVVGdlFpeEZRVUZ3UWl4RFFVRk1MRVZCUVRoQ0xFOUJRVThzVFVGQlRTeE5RVUZPTEVOQlFXRXNUVUZCWWl4RFFVRnZRaXhqUVVGd1FpeERRVUZ5UXl4RlFVRXdSU3hOUVVGTkxFMUJRVTBzVFVGQlRpeERRVUZoTEUxQlFXSXNRMEZCYjBJc1NVRkJjRUlzUTBGQmFFWXNSVUZCV2p0QlFVTkJMRGhDUVVGUkxFbEJRVklzUTBGQllTeExRVUZpTEVkQlFYRkNMRXRCUVVzc2VVSkJRV1VzUzBGQlppeERRVUZNTEVOQlFYSkNPenRCUVVWQkxEaENRVUZSTEU5QlFWSTdRVUZEUkN4eFFrRk9SRHRCUVU5RUxHMUNRVmhFT3p0QlFXRkJPMEZCYUVJNFF6dEJRV2xDTDBNc1pVRnFRa1FzVFVGcFFrOHNTVUZCU1N4bFFVRktMRVZCUVhGQ08wRkJRekZDTEhkQ1FVRlJMRTlCUVZJN08wRkJSVUU3UVVGRFJDeGxRVXBOTEUxQlNVRTdRVUZEVEN4elFrRkJUU3hwUWtGQlRpeERRVUYzUWl4UFFVRjRRaXhGUVVGcFF5eFJRVUZxUXl4RlFVRXlReXhKUVVFelF5eERRVUZuUkN4VlFVRlRMRXRCUVZRc1JVRkJaMEk3UVVGRE9VUXNkMEpCUVUwc1VVRkJUaXhEUVVGbExGRkJRVkVzU1VGQlVpeEhRVUZsTEV0QlFXWXNSMEZCZFVJc1VVRkJVU3hGUVVFNVF5eEpRVUZ2UkN4TlFVRk5MRkZCUVRGRU96dEJRVVZCTEhkQ1FVRk5MRmRCUVU0c1EwRkJhMElzVjBGQmJFSXNRMEZCT0VJc1RVRkJUU3hQUVVGd1F6dEJRVU5CTEhsQ1FVRlBMRzFEUVVGUU8wRkJRMFFzYVVKQlRFUTdRVUZOUkR0QlFYWkRWVHRCUVhkRFdqczdRVUZGU0R0QlFVTkRMRk5CTjBORUxFMUJOa05QTEVsQlFVa3NhVUpCUVdsQ0xHTkJRWEpDTEVWQlFYRkRPMEZCUVVFN1FVRkRNVU1zYjBKQlFWRXNSMEZCVWl4RFFVRlpMQ3RDUVVGYUxFVkJRVFpETEZGQlFWRXNTVUZCVWl4RFFVRmhMRXRCUVRGRU96dEJRVVZCTEdkQ1FVRkpMR2RDUVVGblFpeE5RVUZOTEhGQ1FVRk9MRU5CUVRSQ0xHRkJRVFZDTEVOQlFYQkNPenRCUVVWQk8wRkJRMEVzWjBKQlFVa3NRMEZCUXl4aFFVRk1MRVZCUVc5Q08wRkJRMnhDTEd0Q1FVRkpMRzlDUVVGdlFpeE5RVUZOTEZGQlFVNHNRMEZCWlN4M1FrRkJaaXhEUVVGM1F5eGhRVUY0UXl4RFFVRjRRanM3UVVGRlFUdEJRVU5CTEd0Q1FVRkpMSEZDUVVGeFFpeHpRa0ZCYzBJc1VVRkJVU3hKUVVGMlJDeEZRVUUyUkRzN1FVRkZNMFFzYjBKQlFVa3NZVUZCWVN4TlFVRk5MRTFCUVU0c1EwRkJZU3hqUVVGaUxFVkJRV3BDTzBGQlEwRXNjMEpCUVUwc2NVSkJRVTRzUTBGQk5FSXNZVUZCTlVJc1NVRkJOa01zUlVGQlF5eFpRVUZaTEZWQlFXSXNSVUZCZVVJc1lVRkJZU3hKUVVGMFF5eEZRVUUzUXpzN1FVRkZRU3huUTBGQlowSXNUVUZCVFN4eFFrRkJUaXhEUVVFMFFpeGhRVUUxUWl4RFFVRm9RanRCUVVORU8wRkJRMFk3TzBGQlJVUTdRVUZEUVN4blFrRkJTU3hoUVVGS0xFVkJRVzFDT3p0QlFVVnFRanRCUVVOQkxHdENRVUZKTEdOQlFXTXNWMEZCYkVJc1JVRkJLMEk3UVVGQlFUdEJRVU0zUWl4elFrRkJTU3hMUVVGTExFMUJRVTBzVFVGQlRpeERRVUZoTEZWQlFXSXNSVUZCVkRzN1FVRkZRU3gzUWtGQlRTeE5RVUZPTEVOQlFXRXNWVUZCWWl4RFFVRjNRaXhqUVVGakxGVkJRWFJETEVWQlFXdEVMRTFCUVUwc1RVRkJUaXhEUVVGaExFMUJRV0lzUTBGQmIwSXNlVUpCUVdVc1VVRkJVU3hKUVVGU0xFTkJRV0VzUzBGQk5VSXNRMEZCY0VJc1EwRkJiRVFzUlVGQk1rY3NSVUZCTTBjc1JVRkJLMGNzU1VGQkwwY3NRMEZCYjBnc01FSkJRV3RDT3p0QlFVVndTU3gzUWtGQlNTeHJRa0ZCYTBJc1RVRkJUU3h2UWtGQlRpeERRVUV5UWl4UFFVRXpRaXhGUVVGdlF5eFJRVUZSTEVsQlFWSXNRMEZCWVN4TFFVRmlMRWRCUVhGQ0xFVkJRWHBFTEVWQlFUWkVMR05CUVdNc1ZVRkJNMFVzUTBGQmRFSTdPMEZCUlVFc01FSkJRVTBzVFVGQlRpeERRVUZoTEZGQlFXSXNRMEZCYzBJc1kwRkJZeXhWUVVGd1F5eEZRVUZuUkN4bFFVRm9SQ3hGUVVGcFJTeEpRVUZxUlN4RFFVRnpSU3huUWtGQlVUdEJRVU0xUlRzN1FVRkZRU3d3UWtGQlNTeFhRVUZYTEV0QlFVc3NlVUpCUVdVc1JVRkJReXhQUVVGUExFMUJRVTBzVFVGQlRpeERRVUZoTEUxQlFXSXNRMEZCYjBJc1kwRkJjRUlzUTBGQlVpeEZRVUUyUXl4SlFVRkpMRTFCUVUwc1RVRkJUaXhEUVVGaExFMUJRV0lzUTBGQmIwSXNSVUZCY0VJc1EwRkJha1FzUlVGQk1FVXNUVUZCVFN4TlFVRk5MRTFCUVU0c1EwRkJZU3hOUVVGaUxFTkJRVzlDTEVsQlFYQkNMRU5CUVdoR0xFVkJRV1lzUTBGQlRDeERRVUZtT3p0QlFVVkJMRGhDUVVGUkxFbEJRVklzUTBGQllTeExRVUZpTEVkQlFYRkNMRkZCUVhKQ08wRkJRMEVzT0VKQlFWRXNUMEZCVWp0QlFVTkVMSEZDUVZCRU8wRkJVVVFzYlVKQldrUTdPMEZCWTBZN1FVRnFRaXRDTzBGQmEwSTVRaXhsUVd4Q1JDeE5RV3RDVHp0QlFVTk1MSGRDUVVGUkxFOUJRVkk3UVVGRFJEczdRVUZGUkR0QlFVTkVMR0ZCTVVKRUxFMUJNRUpQTzBGQlEwd3NjVUpCUVU4c01rSkJRVkE3UVVGRFJEdEJRV2hFZVVNN1FVRnBSRE5ETzBGQlEwWXNUMEZ1U0Uwc1EwRkJVRHRCUVc5SVJEczdPMjFEUVVWakxFOHNSVUZCVXp0QlFVTjBRaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4alFVRlJMRWRCUVZJc1EwRkJXU3hyUWtGQldqczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZyUWl4TlFVRnNRaXhGUVVFd1FqdEJRVU16UXl4WlFVRkpMR3RDUVVGclFpeFJRVUZSTEVsQlFWSXNTMEZCYVVJc1YwRkJka003TzBGQlJVRTdRVUZEUVN4WlFVRkpMRU5CUVVNc1RVRkJUU3hwUWtGQlVDeEpRVUUwUWl4RFFVRkRMR1ZCUVdwRExFVkJRV3RFTzBGQlEyaEVMR3RDUVVGUkxFZEJRVklzUTBGQldTeHhRa0ZCV2p0QlFVTkJMR2xDUVVGUExGRkJRVkVzVDBGQlVpeERRVUZRTzBGQlEwUTdPMEZCUlVRN08wRkJSVUVzV1VGQlNTeGxRVUZsTEZGQlFWRXNSVUZCVWl4RFFVRlhMRXRCUVZnc1EwRkJhVUlzUjBGQmFrSXNRMEZCYmtJN1FVRkRRU3haUVVGSkxHZENRVUZuUWl4aFFVRmhMRU5CUVdJc1NVRkJhMElzU1VGQmJFSXNSMEZCZVVJc1lVRkJZU3hEUVVGaUxFTkJRWHBDTEVkQlFUSkRMRWRCUVRORExFZEJRV2xFTEdGQlFXRXNRMEZCWWl4RFFVRnlSVHRCUVVOQkxGbEJRVWtzWVVGQllTeE5RVUZpTEVkQlFYTkNMRU5CUVRGQ0xFVkJRVFpDTzBGQlF6TkNMREJDUVVGblFpeGhRVUZoTEVOQlFXSXNTVUZCYTBJc1NVRkJiRUlzUjBGQmVVSXNZVUZCWVN4RFFVRmlMRU5CUVhwQ0xFZEJRVEpETEVkQlFUTkRMRWRCUVdsRUxHRkJRV0VzUTBGQllpeERRVUZxUkN4SFFVRnRSU3hIUVVGdVJTeEhRVUY1UlN4aFFVRmhMRU5CUVdJc1EwRkJla1k3UVVGRFJEczdRVUZGUkN4WlFVRkpMR2xDUVVGcFFpdzBRa0ZCWjBJc1lVRkJhRUlzUTBGQmNrSTdRVUZEUVN4WlFVRkpMR2RDUVVGblFpeHpRa0ZCVlN4UlFVRlJMRWxCUVd4Q0xFVkJRWGRDTEVsQlFYaENMRXRCUVdsRExGTkJRWEpFTzBGQlEwRXNXVUZCU1N4alFVRmpMSE5DUVVGVkxGRkJRVkVzUlVGQmJFSXNSVUZCYzBJc1NVRkJkRUlzUzBGQkswSXNVMEZCYWtRN08wRkJSVUU3UVVGRFFTeFpRVUZKTEdsQ1FVRnBRaXhYUVVGeVFpeEZRVUZyUXp0QlFVTm9RenRCUVVOQkxHTkJRVWtzVlVGQlZTeE5RVUZOTEZOQlFVNHNRMEZCWjBJc1pVRkJhRUlzUTBGQlowTXNVVUZCVVN4RlFVRjRReXhEUVVGa08wRkJRMEVzWTBGQlNTeFBRVUZLTEVWQlFXRTdRVUZCUVRzN1FVRkZXQ3hyUWtGQlNTeFhRVUZYTEUxQlFVMHNVVUZCVGl4RFFVRmxMRkZCUVZFc1JVRkJVaXhIUVVGaExFdEJRV0lzUjBGQmNVSXNVVUZCVVN4SlFVRTFReXhEUVVGbU8wRkJRMEVzYTBKQlFVa3NRMEZCUXl4UlFVRk1MRVZCUVdVN1FVRkRZaXd5UWtGQlZ5eE5RVUZOTEdOQlFVNHNRMEZCY1VJc1QwRkJja0lzUlVGQk9FSXNUMEZCT1VJc1JVRkJkVU1zVTBGQmRrTXNRMEZCV0R0QlFVTkJMSE5DUVVGTkxGRkJRVTRzUTBGQlpTeFJRVUZSTEVWQlFWSXNSMEZCWVN4TFFVRmlMRWRCUVhGQ0xGRkJRVkVzU1VGQk5VTXNTVUZCYjBRc1VVRkJjRVE3UVVGRFJEczdRVUZGUkN4clFrRkJTU3hUUVVGVExHRkJRVlFzU1VGQk1FSXNRMEZCUXl4bFFVRXZRaXhGUVVGblJEdEJRVUZCTzBGQlF6bERMSE5DUVVGSkxGRkJRVkVzUzBGQlN5eExRVUZNTEVOQlFWY3NTMEZCU3l4UlFVRlJMRWxCUVZJc1EwRkJZU3hMUVVGc1FpeERRVUZZTEVOQlFWbzdRVUZEUVN4elFrRkJTU3hMUVVGTExFMUJRVTBzVFVGQlRpeERRVUZoTEUxQlFXSXNRMEZCYjBJc1RVRkJUU3hGUVVFeFFpeERRVUZVTzBGQlEwRXNjMEpCUVVrc1QwRkJUeXhOUVVGTkxFMUJRVTRzUTBGQllTeE5RVUZpTEVOQlFXOUNMRTFCUVUwc1MwRkJNVUlzUTBGQldEdEJRVU5CTEhOQ1FVRkpMRTlCUVU4c1RVRkJUU3hOUVVGT0xFTkJRV0VzVFVGQllpeERRVUZ2UWl4TlFVRk5MRWxCUVRGQ0xFTkJRVmc3UVVGRFFTeDNRa0ZCVFN4TlFVRk9MRU5CUVdFc1ZVRkJZaXhEUVVGM1FpeFRRVUZUTEVsQlFWUXNRMEZCWXl4dFFrRkJkRU1zUlVGQk1rUXNTVUZCTTBRc1JVRkJhVVVzUlVGQmFrVXNSVUZCY1VVc1NVRkJja1VzUTBGQk1FVXNlVUpCUVdsQ08wRkJRM3BHTERSQ1FVRlJMRWRCUVZJc1EwRkJXU3hyUWtGQldpeEZRVUZuUXl4aFFVRm9RenRCUVVOQkxEUkNRVUZSTEVsQlFWSXNRMEZCWVN4TFFVRmlMRWRCUVhGQ0xHRkJRWEpDT3p0QlFVVkJMSGRDUVVGSkxHdENRVUZyUWl4TlFVRk5MRzlDUVVGT0xFTkJRVEpDTEU5QlFUTkNMRVZCUVc5RExHZENRVUZuUWl4RlFVRndSQ3hEUVVGMFFqczdRVUZGUVN3d1FrRkJUU3hOUVVGT0xFTkJRV0VzVlVGQllpeERRVUYzUWl4VFFVRlRMRWxCUVZRc1EwRkJZeXhuUWtGQmRFTXNSVUZCZDBRc1pVRkJlRVFzUlVGQmVVVXNTVUZCZWtVc1JVRkJLMFVzU1VGQkwwVXNRMEZCYjBZc2EwSkJRVlU3UVVGRE5VWTdRVUZEUVN3NFFrRkJVU3hKUVVGU0xFTkJRV0VzWjBKQlFXSXNSMEZCWjBNc1NVRkJhRU03UVVGRFFTdzRRa0ZCVVN4UFFVRlNPMEZCUTBRc2NVSkJTa1E3UVVGTFJDeHRRa0ZZUkR0QlFVdzRRenRCUVd0Q0wwTXNaVUZzUWtRc1RVRnJRazhzU1VGQlNTeGxRVUZLTEVWQlFYRkNPMEZCUXpGQ0xITkNRVUZOTEdsQ1FVRk9MRU5CUVhkQ0xFOUJRWGhDTEVWQlFXbERMRkZCUVdwRExFVkJRVEpETEVsQlFUTkRMRU5CUVdkRUxGVkJRVk1zUzBGQlZDeEZRVUZuUWpzN1FVRkZPVVE3UVVGRFFTeHpRa0ZCU1N4VlFVRlZMR05CUVdRc1JVRkJPRUk3UVVGRE5VSXNNa0pCUVU4c2JVTkJRVkE3TzBGQlJVWTdRVUZEUXl4dFFrRktSQ3hOUVVsUE8wRkJRMHdzTUVKQlFVMHNVVUZCVGl4RFFVRmxMRkZCUVZFc1JVRkJVaXhIUVVGaExFdEJRV0lzUjBGQmNVSXNVVUZCVVN4SlFVRTFReXhKUVVGdlJDeE5RVUZOTEZGQlFURkVPMEZCUTBFc01FSkJRVTBzVjBGQlRpeERRVUZyUWl4WFFVRnNRaXhEUVVFNFFpeE5RVUZOTEU5QlFYQkRPMEZCUTBFc01rSkJRVThzYlVOQlFWQTdRVUZEUkR0QlFVTkdMR2xDUVZwRU8wRkJZVVFzWlVGa1RTeE5RV05CTzBGQlEwd3NkVUpCUVU4c01FSkJRVkE3UVVGRFJEdEJRVEZEVlR0QlFUSkRXaXhYUVRORFJDeE5RVEpEVHp0QlFVTk1MRzFDUVVGUExEQkNRVUZRTzBGQlEwUTdPMEZCUlVRN1FVRkRSQ3hUUVc1RVJDeE5RVzFFVHl4SlFVRkpMR2xDUVVGcFFpeGpRVUZ5UWl4RlFVRnhRenRCUVVGQk8wRkJRekZETEc5Q1FVRlJMRWRCUVZJc1EwRkJXU3dyUWtGQldpeEZRVUUyUXl4UlFVRlJMRWxCUVhKRU96dEJRVVZCTEdkQ1FVRkpMR2RDUVVGblFpeE5RVUZOTEhGQ1FVRk9MRU5CUVRSQ0xHRkJRVFZDTEVOQlFYQkNPenRCUVVWQkxHZENRVUZKTEdGQlFVb3NSVUZCYlVJN08wRkJSV3BDTzBGQlEwRXNhMEpCUVVrc1kwRkJZeXhYUVVGc1FpeEZRVUVyUWp0QlFVRkJPMEZCUXpkQ0xITkNRVUZKTEdOQlFXTXNTMEZCU3l4TFFVRk1MRU5CUVZjc1MwRkJTeXhSUVVGUkxFbEJRVklzUTBGQllTeExRVUZzUWl4RFFVRllMRU5CUVd4Q08wRkJRMEVzYzBKQlFVa3NTMEZCU3l4TlFVRk5MRTFCUVU0c1EwRkJZU3hOUVVGaUxFTkJRVzlDTEZsQlFWa3NSVUZCYUVNc1EwRkJWRHRCUVVOQkxITkNRVUZKTEdsQ1FVRnBRaXhOUVVGTkxFMUJRVTRzUTBGQllTeE5RVUZpTEVOQlFXOUNMRmxCUVZrc1MwRkJhRU1zUTBGQmNrSTdRVUZEUVN4elFrRkJTU3hQUVVGUExFMUJRVTBzVFVGQlRpeERRVUZoTEUxQlFXSXNRMEZCYjBJc1dVRkJXU3hKUVVGb1F5eERRVUZZT3p0QlFVVkJMSGRDUVVGTkxFMUJRVTRzUTBGQllTeFZRVUZpTEVOQlFYZENMR05CUVdNc1ZVRkJkRU1zUlVGQmEwUXNZMEZCYkVRc1JVRkJhMFVzUlVGQmJFVXNSVUZCYzBVc1NVRkJkRVVzUTBGQk1rVXNNRUpCUVd0Q08wRkJRek5HTEhkQ1FVRkpMR05CUVdNc1MwRkJTeXhMUVVGTUxFTkJRVmNzUzBGQlN5eGpRVUZNTEVOQlFWZ3NRMEZCYkVJN1FVRkRRU3cwUWtGQlVTeEhRVUZTTEVOQlFWa3NhMEpCUVZvc1JVRkJaME1zVjBGQmFFTTdRVUZEUVN3MFFrRkJVU3hKUVVGU0xFTkJRV0VzUzBGQllpeEhRVUZ4UWl4WFFVRnlRanM3UVVGRlFTeDNRa0ZCU1N4clFrRkJhMElzVFVGQlRTeHZRa0ZCVGl4RFFVRXlRaXhQUVVFelFpeEZRVUZ2UXl4alFVRmpMRVZCUVd4RUxFTkJRWFJDT3p0QlFVVkJMREJDUVVGTkxFMUJRVTRzUTBGQllTeFZRVUZpTEVOQlFYZENMR05CUVdNc1ZVRkJkRU1zUlVGQmEwUXNaVUZCYkVRc1JVRkJiVVVzU1VGQmJrVXNSVUZCZVVVc1NVRkJla1VzUTBGQk9FVXNhMEpCUVZVN1FVRkRkRVk3TzBGQlJVRXNPRUpCUVZFc1NVRkJVaXhEUVVGaExHZENRVUZpTEVkQlFXZERMRWxCUVdoRE8wRkJRMEVzT0VKQlFWRXNUMEZCVWp0QlFVTkVMSEZDUVV4RU8wRkJUVVFzYlVKQllrUTdPMEZCWlVZN1FVRnlRaXRDTzBGQmMwSTVRaXhsUVhSQ1JDeE5RWE5DVHp0QlFVTk1MSGRDUVVGUkxFbEJRVklzUTBGQllTeG5Ra0ZCWWl4SFFVRm5ReXhKUVVGb1F6dEJRVU5CTEhkQ1FVRlJMRTlCUVZJN1FVRkRSRHRCUVVWR0xHRkJPVUpFTEUxQk9FSlBPMEZCUTB3c2MwSkJRVkVzU1VGQlVpeERRVUZoTEdkQ1FVRmlMRWRCUVdkRExFbEJRV2hETzBGQlEwRXNjMEpCUVZFc1QwRkJVanM3UVVGRlFUdEJRVU5FTzBGQmVFTjVRenRCUVRCRE0wTXNVMEV4UTAwc1RVRXdRMEU3UVVGRFRDeHBRa0ZCVHl3d1FrRkJVRHRCUVVORU8wRkJSVVlzVDBGMlNFMHNRMEZCVUR0QlFYZElSRHM3T3pKRFFVVnpRaXhOTEVWQlFWRXNVU3hGUVVGVk8wRkJRM1pETEdOQlFWRXNSMEZCVWl4RFFVRlpMREJDUVVGYUxFVkJRWGRETEUxQlFYaERMRVZCUVdkRUxGRkJRV2hFTzBGQlEwRXNWVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3hWUVVGSkxITkNRVUZLT3p0QlFVVkJPMEZCUTBFc1ZVRkJTU3hqUVVGakxFMUJRVTBzVVVGQlRpeERRVUZsTEhkQ1FVRm1MRU5CUVhkRExFMUJRWGhETEVOQlFXeENPMEZCUTBFc1ZVRkJTU3hYUVVGS0xFVkJRV2xDTzBGQlEyWXNkMEpCUVdkQ0xFMUJRV2hDTzBGQlEwRXNhVUpCUVZNc1YwRkJWRHRCUVVORU96dEJRVVZFTEZWQlFVa3NUVUZCVFR0QlFVTlNMRmxCUVVrc1VVRkVTVHRCUVVWU0xHTkJRVTBzVFVGR1JUdEJRVWRTTEd0Q1FVRlZMRk5CU0VZN1FVRkpVaXhqUVVGTkxFVkJRVU1zWjBKQlFXZENMR2RDUVVGcVFpeEZRVUZ0UXl4UlFVRlJMR1ZCUVRORE8wRkJTa1VzVDBGQlZqczdRVUZQUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZyUWl4TlFVRnNRaXhGUVVFd1FqczdRVUZGTTBNc1dVRkJTU3hEUVVGRExFMUJRVVFzU1VGQlZ5eERRVUZETEZGQlFXaENMRVZCUVRCQ08wRkJRM2hDTEdsQ1FVRlBMRTlCUVU4c2MwUkJRVkFzUTBGQlVEdEJRVU5FT3p0QlFVVkVMRmxCUVVrc1YwRkJWeXhOUVVGTkxGRkJRVTRzUTBGQlpTeFRRVUZUTEV0QlFWUXNSMEZCYVVJc1VVRkJhRU1zUTBGQlpqdEJRVU5CTEZsQlFVa3NWVUZCVlN4TlFVRk5MRk5CUVU0c1EwRkJaMElzWlVGQmFFSXNRMEZCWjBNc1RVRkJhRU1zUTBGQlpEczdRVUZGUVN4WlFVRkpMRTlCUVVvc1JVRkJZVHM3UVVGRldDeGpRVUZKTEVOQlFVTXNVVUZCVEN4RlFVRmxPMEZCUTJJN1FVRkRRU3huUWtGQlNTeFhRVUZYTEZOQlFWZ3NVVUZCVnl4RFFVRlRMRXRCUVZRc1JVRkJaMEk3UVVGRE4wSXNjMEpCUVZFc1IwRkJVaXhEUVVGWkxHbENRVUZhTEVWQlFTdENMRXRCUVM5Q08wRkJRMEVzYzBKQlFWRXNTMEZCVWp0QlFVTkVMR0ZCU0VRN1FVRkpRU3huUWtGQlNTeFJRVUZLTEVkQlFXVXNVVUZCWmp0QlFVTkJMR2RDUVVGSkxHRkJRVW9zUjBGQmIwSXNZVUZCY0VJN08wRkJSVUVzZFVKQlFWY3NUVUZCVFN4alFVRk9MRU5CUVhGQ0xFZEJRWEpDTEVWQlFUQkNMRTlCUVRGQ0xFTkJRVmc3UVVGRFFTeHJRa0ZCVFN4UlFVRk9MRU5CUVdVc1UwRkJVeXhMUVVGVUxFZEJRV2xDTEZGQlFXaERMRWxCUVRSRExGRkJRVFZETzBGQlEwUTdPMEZCUlVRc1kwRkJTU3hUUVVGVExHRkJRV0lzUlVGQk5FSTdPMEZCUlRGQ0xHZENRVUZKTERCQ1FVRXdRanRCUVVNMVFpeHJRa0ZCU1N4TlFVUjNRanRCUVVVMVFpeHZRa0ZCVFR0QlFVWnpRaXhoUVVFNVFqdEJRVWxCTEhGQ1FVRlRMR0ZCUVZRc1IwRkJlVUlzWVVGQmVrSTdRVUZEUVN4clFrRkJUU3gxUWtGQlRpeERRVUU0UWl4MVFrRkJPVUlzUlVGQmRVUXNVVUZCZGtRc1JVRkJhVVVzU1VGQmFrVXNRMEZCYzBVc2FVSkJRVk03TzBGQlJUZEZMRzlDUVVGTkxGZEJRVTRzUTBGQmEwSXNWMEZCYkVJc1EwRkJPRUlzVFVGQlRTeFBRVUZ3UXp0QlFVTkJMSE5DUVVGUkxIVkRRVUZTTzBGQlEwUXNZVUZLUkR0QlFVdEVMRmRCV2tRc1RVRlpUenM3UVVGRlRDeHJRa0ZCVFN4cFFrRkJUaXhEUVVGM1FpeEhRVUY0UWl4RlFVRTJRaXhSUVVFM1FqdEJRVU5FTzBGQlEwWXNVMEV2UWtRc1RVRXJRazg3UVVGRFRDeHBRa0ZCVHl4cFEwRkJVRHRCUVVORU8wRkJRMFlzVDBFelEwMHNRMEZCVUR0QlFUWkRSRHM3TzNORFFVVnBRaXhQTEVWQlFWTXNVU3hGUVVGVk8wRkJRMjVETEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQk96dEJRVVZCTEdGQlFVOHNjMEpCUVZrc1ZVRkJVeXhQUVVGVUxFVkJRV2xDTEUxQlFXcENMRVZCUVhsQ096dEJRVVV4UXl4WlFVRkpMR2RDUVVGblFpeFJRVUZSTEVsQlFWSXNRMEZCWVN4alFVRnFRenRCUVVOQkxGbEJRVWtzVjBGQlNqdEJRVU5CTEZsQlFVa3NZVUZCU2p0QlFVTkJMRmxCUVVrc1VVRkJVU3hGUVVGYU8wRkJRMEVzV1VGQlNTeDNRa0ZCU2pzN1FVRk9NRU03UVVGUE1VTXNhMEpCUVZFc1lVRkJVanM3UVVGRlJTeHBRa0ZCU3l4blFrRkJURHRCUVVORkxIVkNRVUZUTEVsQlFWUXNRMEZCWXl4VlFVRmtMRWRCUVRKQ0xFMUJRVTBzVFVGQlRpeERRVUZoTEdOQlFXSXNSVUZCTTBJN08wRkJSVUVzYTBKQlFVa3NiMEpCUVc5Q08wRkJRM1JDTEhOQ1FVRk5MRmRCUkdkQ08wRkJSWFJDTEc5Q1FVRkpMRkZCUVZFc1JVRkdWVHRCUVVkMFFpeHpRa0ZCVFN4UlFVRlJMRWxCU0ZFN1FVRkpkRUlzYzBKQlFVMDdRVUZEU2l4clEwRkJaMElzWVVGRVdqdEJRVVZLTEhsQ1FVRlBMRTFCUVUwc1RVRkJUaXhEUVVGaExFMUJRV0lzUTBGQmIwSXNVMEZCVXl4SlFVRlVMRU5CUVdNc1ZVRkJiRU03UVVGR1NEdEJRVXBuUWl4bFFVRjRRanRCUVZOQkxIVkNRVUZUTEdkQ1FVRlVMRU5CUVRCQ0xGZEJRVEZDTEVkQlFYZERMRTFCUVUwc2IwSkJRVTRzUTBGQk1rSXNhVUpCUVROQ0xFVkJRVGhETEZOQlFUbERMRVZCUVhsRUxGTkJRVk1zVjBGQlZDeERRVUZ4UWl4WFFVRTVSU3hEUVVGNFF6czdRVUZGUVR0QlFVTkJPMEZCUTBFc2EwSkJRVWtzVTBGQlV5eGpRVUZpTEVWQlFUWkNPMEZCUVVNc2QwSkJRVkVzUlVGQlF5eFRRVUZUTEdsQ1FVRldMRVZCUVRaQ0xGVkJRVlVzVVVGQmRrTXNSVUZCVWp0QlFVTTNRaXhsUVVSRUxFMUJRMDg3UVVGRFRDeHpRa0ZCVFN4UlFVRk9MRU5CUVdVc1VVRkJVU3hKUVVGU0xFZEJRV1VzUzBGQlppeEhRVUYxUWl4UlFVRlJMRVZCUVRsRExFbEJRVzlFTEZGQlFYQkVPMEZCUTBFc2MwSkJRVTBzVjBGQlRpeERRVUZyUWl4WFFVRnNRaXhEUVVFNFFpeHBRa0ZCT1VJN1FVRkRSRHM3UVVGRlNEdEJRVU5CTEdsQ1FVRkxMR0ZCUVV3N08wRkJSVVVzYzBKQlFWRXNSMEZCVWl4RFFVRlpMR0ZCUVZvN1FVRkRRU3gxUWtGQlV5eG5Ra0ZCVkN4RFFVRXdRaXhYUVVFeFFpeEhRVUYzUXl4TlFVRk5MRzlDUVVGT0xFTkJRVEpDTEU5QlFUTkNMRU5CUVhoRE8wRkJRMEVzZFVKQlFWTXNTVUZCVkN4RFFVRmpMRlZCUVdRc1IwRkJNa0lzVFVGQlRTeE5RVUZPTEVOQlFXRXNUVUZCWWl4RFFVRnZRaXhSUVVGUkxFbEJRVklzUTBGQllTeExRVUZxUXl4RFFVRXpRanRCUVVOQkxIVkNRVUZUTEVsQlFWUXNRMEZCWXl4UlFVRmtMRWRCUVhsQ0xFMUJRVTBzVFVGQlRpeERRVUZoTEdOQlFXSXNSVUZCZWtJN08wRkJSVUVzYTBKQlFVa3NhVUpCUVdsQ08wRkJRMjVDTEhOQ1FVRk5MRmRCUkdFN1FVRkZia0lzYjBKQlFVa3NVVUZCVVN4SlFVWlBPMEZCUjI1Q0xITkNRVUZOTEZGQlFWRXNSVUZJU3p0QlFVbHVRaXh6UWtGQlRUdEJRVU5LTEd0RFFVRm5RaXhsUVVSYU8wRkJSVW9zZVVKQlFVOHNUVUZCVFN4TlFVRk9MRU5CUVdFc1RVRkJZaXhEUVVGdlFpeFRRVUZUTEVsQlFWUXNRMEZCWXl4UlFVRnNRenRCUVVaSU8wRkJTbUVzWlVGQmNrSTdRVUZUUVN4MVFrRkJVeXhuUWtGQlZDeERRVUV3UWl4aFFVRXhRaXhIUVVFd1F5eE5RVUZOTEc5Q1FVRk9MRU5CUVRKQ0xHTkJRVE5DTEVWQlFUSkRMRk5CUVRORExFVkJRWE5FTEZOQlFWTXNWMEZCVkN4RFFVRnhRaXhYUVVFelJTeERRVUV4UXp0QlFVTkJMSE5DUVVGUkxFVkJRVU1zVTBGQlV5eGpRVUZXTEVWQlFUQkNMRlZCUVZVc1VVRkJjRU1zUlVGQlVqczdRVUZGUmp0QlFVTkJMR2xDUVVGTExHVkJRVXc3TzBGQlJVVXNjMEpCUVZFc1IwRkJVaXhEUVVGWkxHVkJRVm83UVVGRFFTeDFRa0ZCVXl4blFrRkJWQ3hEUVVFd1FpeGhRVUV4UWl4SFFVRXdReXhOUVVGTkxHOUNRVUZPTEVOQlFUSkNMRTlCUVROQ0xFTkJRVEZET3p0QlFVVkJMRzlDUVVGTkxHbENRVUZPTEVOQlFYZENMRkZCUVZFc1NVRkJVaXhEUVVGaExGRkJRV0lzUTBGQmMwSXNVMEZCT1VNc1JVRkJlVVFzU1VGQmVrUXNRMEZCT0VRc1ZVRkJReXhMUVVGRUxFVkJRVmM3TzBGQlJYWkZMRzlDUVVGSkxHOUNRVUZ2UWl4TlFVRk5MRTFCUVU0c1EwRkJZU3hOUVVGaUxFTkJRVzlDTEUxQlFVMHNVVUZCVGl4RFFVRmxMRXRCUVc1RExFTkJRWGhDTzBGQlEwRXNiMEpCUVVrc2EwSkJRV3RDTEUxQlFVMHNUVUZCVGl4RFFVRmhMRmRCUVdJc1JVRkJkRUk3UVVGRFFTeHZRa0ZCU1N4WFFVRlhMRkZCUVZFc1NVRkJVaXhEUVVGaExFdEJRVFZDTzBGQlEwRXNlVUpCUVZNc1UwRkJWQ3hEUVVGdFFpeFRRVUZ1UWl4SFFVRXJRaXhSUVVGUkxFbEJRVklzUTBGQllTeFJRVUZpTEVOQlFYTkNMRk5CUVhKRU8wRkJRMEVzZVVKQlFWTXNVMEZCVkN4RFFVRnRRaXhUUVVGdVFpeEhRVUVyUWl4cFFrRkJMMEk3UVVGRFFTeDVRa0ZCVXl4VFFVRlVMRU5CUVcxQ0xFMUJRVzVDTEVkQlFTdENMRTFCUVUwc1VVRkJUaXhEUVVGbExFdEJRVGxETzBGQlEwRXNlVUpCUVZNc1NVRkJWQ3hEUVVGakxGRkJRV1FzUjBGQk1FSXNUVUZCVFN4TlFVRk9MRU5CUVdFc1RVRkJZaXhEUVVGdlFpeFJRVUZ3UWl4RFFVRXhRanRCUVVOQkxIbENRVUZUTEVsQlFWUXNRMEZCWXl4WlFVRmtMRWRCUVRaQ0xHVkJRVGRDT3p0QlFVVkJMRzlDUVVGSkxGbEJRVmtzVFVGQlRTeE5RVUZPTEVOQlFXRXNiMEpCUVdJc1EwRkJhME1zWlVGQmJFTXNSVUZCYlVRc1UwRkJVeXhKUVVGVUxFTkJRV01zVVVGQmFrVXNSVUZCTWtVc1UwRkJVeXhKUVVGVUxFTkJRV01zVlVGQmVrWXNRMEZCYUVJN08wRkJSVUVzZFVKQlFVOHNUVUZCVFN4TlFVRk9MRU5CUVdFc2IwSkJRV0lzUTBGQmEwTXNVMEZCYkVNc1JVRkJOa01zYjBKQlFXOUNMRk5CUVZNc1NVRkJWQ3hEUVVGakxGRkJRV3hETEVkQlFUWkRMRk5CUVZNc1NVRkJWQ3hEUVVGakxGVkJRWGhITEVOQlFWQTdPMEZCUlVFN1FVRkRSQ3hsUVdoQ1JDeEZRV2RDUnl4SlFXaENTQ3hEUVdkQ1VTeFZRVUZETEZOQlFVUXNSVUZCWlR0QlFVTnlRaXg1UWtGQlV5eEpRVUZVTEVOQlFXTXNVMEZCWkN4SFFVRXdRaXhUUVVFeFFqczdRVUZGUVN4MVFrRkJUeXhOUVVGTkxFMUJRVTRzUTBGQllTeFpRVUZpTEVOQlFUQkNMRk5CUVRGQ0xFVkJRWEZETEd0Q1FVRnJRaXhUUVVGVExFbEJRVlFzUTBGQll5eFJRVUZvUXl4SFFVRXlReXhUUVVGVExFbEJRVlFzUTBGQll5eFZRVUU1Uml4RFFVRlFPenRCUVVWQk8wRkJRMFFzWlVGMFFrUXNSVUZ6UWtjc1NVRjBRa2dzUTBGelFsRXNWVUZCUXl4SlFVRkVMRVZCUVZVN08wRkJSV2hDTEhsQ1FVRlRMRWxCUVZRc1EwRkJZeXh0UWtGQlpDeEhRVUZ2UXl4SlFVRkpMRlZCUVVvc1EwRkJaU3hMUVVGTExFTkJRVXdzUTBGQlppeERRVUZ3UXp0QlFVTkJMSGxDUVVGVExFbEJRVlFzUTBGQll5eHhRa0ZCWkN4SFFVRnpReXhKUVVGSkxGVkJRVW9zUTBGQlpTeExRVUZMTEVOQlFVd3NRMEZCWml4RFFVRjBRenRCUVVOQkxIbENRVUZUTEVsQlFWUXNRMEZCWXl4blFrRkJaQ3hIUVVGcFF5eEpRVUZKTEZWQlFVb3NRMEZCWlN4TFFVRkxMRU5CUVV3c1EwRkJaaXhEUVVGcVF6dEJRVU5CTEhsQ1FVRlRMRWxCUVZRc1EwRkJZeXhyUWtGQlpDeEhRVUZ0UXl4SlFVRkpMRlZCUVVvc1EwRkJaU3hMUVVGTExFTkJRVXdzUTBGQlppeERRVUZ1UXp0QlFVTkJMSEZDUVVGTExFMUJRVTBzVFVGQlRpeERRVUZoTEZWQlFXSXNSVUZCVER0QlFVTkJMSE5DUVVGTkxFVkJRVTRzUjBGQlZ5eE5RVUZOTEUxQlFVNHNRMEZCWVN4TlFVRmlMRU5CUVc5Q0xFVkJRWEJDTEVOQlFWZzdPMEZCUlVFc2IwSkJRVWtzYlVKQlFXMUNPMEZCUTNKQ0xIZENRVUZOTEZkQlJHVTdRVUZGY2tJc2MwSkJRVWtzVVVGQlVTeEpRVVpUTzBGQlIzSkNMSGRDUVVGTkxGRkJRVkVzUlVGSVR6dEJRVWx5UWl4M1FrRkJUVHRCUVVOS0xHOURRVUZuUWp0QlFVUmFPMEZCU21Vc2FVSkJRWFpDT3p0QlFWTkJPMEZCUTBFc2EwTkJRV3RDTEUxQlFVMHNiMEpCUVU0c1EwRkJNa0lzWjBKQlFUTkNMRVZCUVRaRExFOUJRVThzUlVGQmNFUXNSVUZCZDBRc1UwRkJVeXhYUVVGVUxFTkJRWEZDTEZkQlFUZEZMRU5CUVd4Q08wRkJRMEVzZFVKQlFVOHNUVUZCVFN4TlFVRk9MRU5CUVdFc1VVRkJZaXhEUVVGelFpeFRRVUZUTEVsQlFWUXNRMEZCWXl4clFrRkJjRU1zUlVGQmQwUXNaVUZCZUVRc1EwRkJVRHRCUVVORUxHVkJNME5FTEVWQk1rTkhMRWxCTTBOSUxFTkJNa05STEZWQlFVTXNTVUZCUkN4RlFVRlZPMEZCUTJoQ0xITkNRVUZOTEVsQlFVNHNSMEZCWVN4TlFVRk5MRTFCUVU0c1EwRkJZU3hOUVVGaUxFTkJRVzlDTEVsQlFYQkNMRU5CUVdJN08wRkJSVUU3UVVGRFFTeDFRa0ZCVHl4TlFVRk5MRTFCUVU0c1EwRkJZU3hWUVVGaUxFTkJRWGRDTEZOQlFWTXNTVUZCVkN4RFFVRmpMSEZDUVVGMFF5eEZRVUUyUkN4SlFVRTNSQ3hGUVVGdFJTeEZRVUZ1UlN4RFFVRlFPMEZCUTBRc1pVRm9SRVFzUlVGblJFY3NTVUZvUkVnc1EwRm5SRkVzVlVGQlF5eGhRVUZFTEVWQlFXMUNPMEZCUTNwQ0xITkNRVUZOTEd0Q1FVRk9MRWRCUVRKQ0xFMUJRVTBzVFVGQlRpeERRVUZoTEUxQlFXSXNRMEZCYjBJc1lVRkJjRUlzUTBGQk0wSTdPMEZCUlVFc2RVSkJRVThzVFVGQlRTeE5RVUZPTEVOQlFXRXNWVUZCWWl4RFFVRjNRaXhUUVVGVExGTkJRVlFzUTBGQmJVSXNVMEZCTTBNc1JVRkJjMFFzVTBGQlV5eEpRVUZVTEVOQlFXTXNXVUZCY0VVc1EwRkJVRHRCUVVWRUxHVkJja1JFTEVWQmNVUkhMRWxCY2tSSUxFTkJjVVJSTEZWQlFVTXNZMEZCUkN4RlFVRnZRanM3UVVGRk1VSXNjMEpCUVUwc2IwSkJRVTRzUjBGQk5rSXNUVUZCVFN4TlFVRk9MRU5CUVdFc1RVRkJZaXhEUVVGdlFpeGpRVUZ3UWl4RFFVRTNRanM3UVVGRlFTeHZRa0ZCU1N4dFFrRkJiVUk3UVVGRGNrSXNkMEpCUVUwc1YwRkVaVHRCUVVWeVFpeHpRa0ZCU1N4UlFVRlJMRWxCUmxNN1FVRkhja0lzZDBKQlFVMHNVVUZCVVN4RlFVaFBPMEZCU1hKQ0xIZENRVUZOTzBGQlEwb3NiME5CUVdkQ08wRkJSRm83UVVGS1pTeHBRa0ZCZGtJN08wRkJVMEVzYjBKQlFVa3NaMEpCUVdkQ0xFMUJRVTBzYjBKQlFVNHNRMEZCTWtJc1owSkJRVE5DTEVWQlFUWkRMRk5CUVZNc1NVRkJWQ3hEUVVGakxGbEJRVE5FTEVWQlFYbEZMRk5CUVZNc1YwRkJWQ3hEUVVGeFFpeFhRVUU1Uml4RFFVRndRanM3UVVGRlFTeDFRa0ZCVHl4TlFVRk5MRTFCUVU0c1EwRkJZU3hQUVVGaUxFTkJRWEZDTEZOQlFWTXNWMEZCVkN4RFFVRnhRaXhWUVVFeFF5eEZRVUZ6UkN4NVFrRkJaU3hUUVVGVExHZENRVUY0UWl4SlFVRTBReXg1UWtGQlpTeGhRVUZtTEVOQlFXeEhMRU5CUVZBN1FVRkZSQ3hsUVhSRlJDeEZRWE5GUnl4SlFYUkZTQ3hEUVhORlVTeHhRa0ZCWVRzN1FVRkZia0lzYzBKQlFVMHNVMEZCVGl4SFFVRnJRaXhOUVVGTkxFMUJRVTRzUTBGQllTeE5RVUZpTEVOQlFXOUNMRk5CUVhCQ0xFTkJRV3hDT3p0QlFVVkJMRzlDUVVGSkxHMUNRVUZ0UWp0QlFVTnlRaXgzUWtGQlRTeFhRVVJsTzBGQlJYSkNMSE5DUVVGSkxGRkJRVkVzU1VGR1V6dEJRVWR5UWl4M1FrRkJUU3hSUVVGUkxFVkJTRTg3UVVGSmNrSXNkMEpCUVUwN1FVRkRTaXh2UTBGQlowSXNiVUpCUkZvN1FVRkZTaXd5UWtGQlR5eExRVUZMTEhsQ1FVRmxMRXRCUVdZc1EwRkJURHRCUVVaSU8wRkJTbVVzYVVKQlFYWkNPMEZCVTBFc2VVSkJRVk1zWjBKQlFWUXNRMEZCTUVJc2FVSkJRVEZDTEVkQlFUaERMRTFCUVUwc2IwSkJRVTRzUTBGQk1rSXNaMEpCUVROQ0xFVkJRVFpETEU5QlFVOHNSVUZCY0VRc1JVRkJkMFFzVTBGQlV5eFhRVUZVTEVOQlFYRkNMRmRCUVRkRkxFTkJRVGxET3p0QlFVVkJMSGRDUVVGUkxFVkJRVU1zVTBGQlV5eG5Ra0ZCVml4RlFVRTBRaXhWUVVGVkxGRkJRWFJETEVWQlFWSTdRVUZGUkN4bFFYWkdSQ3hGUVhWR1J6dEJRVUZCTEhWQ1FVRlRMRTlCUVU4c1MwRkJVQ3hEUVVGVU8wRkJRVUVzWlVGMlJrZzdPMEZCZVVaR08wRkJRMEVzYVVKQlFVc3NiVUpCUVV3N08wRkJSVVVzYzBKQlFWRXNSMEZCVWl4RFFVRlpMRzFDUVVGYU8wRkJRMEVzYTBKQlFVa3NaMEpCUVdkQ0xFdEJRVXNzUzBGQlRDeERRVUZYTEV0QlFVc3NVVUZCVVN4SlFVRlNMRU5CUVdFc1MwRkJiRUlzUTBGQldDeERRVUZ3UWpzN1FVRkZRU3h2UWtGQlRTeHBRa0ZCVGl4RFFVRjNRaXhSUVVGUkxFbEJRVklzUTBGQllTeFJRVUZpTEVOQlFYTkNMRk5CUVRsRExFVkJRWGxFTEVsQlFYcEVMRU5CUVRoRUxGVkJRVU1zUzBGQlJDeEZRVUZYTzBGQlEzWkZMRzlDUVVGSkxHVkJRV1VzVFVGQlRTeE5RVUZPTEVOQlFXRXNUVUZCWWl4RFFVRnZRaXhqUVVGakxHOUNRVUZzUXl4RFFVRnVRanRCUVVOQkxHOUNRVUZKTEd0Q1FVRnJRaXhOUVVGTkxFMUJRVTRzUTBGQllTeE5RVUZpTEVOQlFXOUNMRTFCUVUwc1VVRkJUaXhEUVVGbExFdEJRVzVETEVOQlFYUkNPMEZCUTBFc2VVSkJRVk1zVTBGQlZDeERRVUZ0UWl4VFFVRnVRaXhIUVVFclFpeFJRVUZSTEVsQlFWSXNRMEZCWVN4UlFVRmlMRU5CUVhOQ0xGTkJRWEpFTzBGQlEwRXNlVUpCUVZNc1UwRkJWQ3hEUVVGdFFpeFRRVUZ1UWl4SFFVRXJRaXhsUVVFdlFqdEJRVU5CTEhsQ1FVRlRMRk5CUVZRc1EwRkJiVUlzVFVGQmJrSXNSMEZCSzBJc1RVRkJUU3hSUVVGT0xFTkJRV1VzUzBGQk9VTTdPMEZCUlVFc2RVSkJRVThzVFVGQlRTeE5RVUZPTEVOQlFXRXNWVUZCWWl4RFFVRjNRaXhUUVVGVExGZEJRVlFzUTBGQmNVSXNWVUZCTjBNc1JVRkJlVVFzV1VGQmVrUXNRMEZCVUR0QlFVVkVMR1ZCVkVRc1JVRlRSeXhWUVVGRExFdEJRVVFzUlVGQlZ6dEJRVU5hTEhkQ1FVRlJMRWRCUVZJc1EwRkJXU3hMUVVGYU8wRkJRMEVzZFVKQlFVOHNlVU5CUVZBN08wRkJSVUU3UVVGRFJDeGxRV1JFTEVWQlkwY3NTVUZrU0N4RFFXTlJMR1ZCUVU4N08wRkJSV0lzZVVKQlFWTXNTVUZCVkN4RFFVRmpMRmxCUVdRc1IwRkJOa0lzU1VGQlNTeFZRVUZLTEVOQlFXVXNSMEZCWml4RFFVRTNRanM3UVVGRlFTeHZRa0ZCU1N4WlFVRlpMRTFCUVUwc1RVRkJUaXhEUVVGaExFMUJRV0lzUTBGQmIwSXNZMEZCWXl4VFFVRnNReXhEUVVGb1FqczdRVUZGUVN4dlFrRkJTU3h2UWtGQmIwSXNUVUZCVFN4dlFrRkJUaXhEUVVFeVFpeFBRVUV6UWl4RlFVRnZReXhUUVVGVExFbEJRVlFzUTBGQll5eFpRVUZzUkN4RFFVRjRRanM3UVVGRlFTeDFRa0ZCVHl4TlFVRk5MRTFCUVU0c1EwRkJZU3hUUVVGaUxFTkJRWFZDTEZOQlFWTXNVMEZCVkN4RFFVRnRRaXhUUVVFeFF5eEZRVUZ4UkN4NVFrRkJaU3hUUVVGVExHZENRVUY0UWl4SlFVRTBReXg1UWtGQlpTeHBRa0ZCWml4RFFVRnFSeXhGUVVGdlNTeFRRVUZ3U1N4RFFVRlFPenRCUVVWQk8wRkJRMFFzWlVGNlFrUXNSVUY1UWtjc1NVRjZRa2dzUTBGNVFsRXNaME5CUVhkQ096dEJRVVU1UWl4M1FrRkJVU3hIUVVGU0xFTkJRVmtzT0VKQlFWb3NSVUZCTkVNc2IwSkJRVFZETzBGQlEwRXNiMEpCUVVrc1dVRkJXU3hOUVVGTkxFMUJRVTRzUTBGQllTeHZRa0ZCWWl4RFFVRnJReXhUUVVGVExFbEJRVlFzUTBGQll5eFpRVUZvUkN4RlFVRTRSQ3hUUVVGVExFbEJRVlFzUTBGQll5eFJRVUUxUlN4RlFVRnpSaXhUUVVGVExFbEJRVlFzUTBGQll5eFZRVUZ3Unl4RFFVRm9RanM3UVVGRlFTeDFRa0ZCVHl4TlFVRk5MRTFCUVU0c1EwRkJZU3h2UWtGQllpeERRVUZyUXl4VFFVRnNReXhGUVVFMlF5eHZRa0ZCYjBJc1UwRkJVeXhKUVVGVUxFTkJRV01zVVVGQmJFTXNSMEZCTmtNc1UwRkJVeXhKUVVGVUxFTkJRV01zVlVGQmVFY3NRMEZCVURzN1FVRkZRVHRCUVVORUxHVkJha05FTEVWQmFVTkhMRWxCYWtOSUxFTkJhVU5STEhGQ1FVRmhPMEZCUTI1Q0xIbENRVUZUTEVsQlFWUXNRMEZCWXl4VFFVRmtMRWRCUVRCQ0xGTkJRVEZDT3p0QlFVVkJMSFZDUVVGUExFMUJRVTBzVFVGQlRpeERRVUZoTEZsQlFXSXNRMEZCTUVJc1UwRkJNVUlzUlVGQmNVTXNhMEpCUVd0Q0xGTkJRVk1zU1VGQlZDeERRVUZqTEZGQlFXaERMRWRCUVRKRExGTkJRVk1zU1VGQlZDeERRVUZqTEZWQlFUbEdMRU5CUVZBN08wRkJSVUU3UVVGRFJDeGxRWFpEUkN4RlFYVkRSeXhKUVhaRFNDeERRWFZEVVN4blFrRkJVVHRCUVVOa0xIbENRVUZUTEVsQlFWUXNRMEZCWXl4eFFrRkJaQ3hIUVVGelF5eEpRVUZKTEZWQlFVb3NRMEZCWlN4TFFVRkxMRU5CUVV3c1EwRkJaaXhEUVVGMFF6dEJRVU5CTEhsQ1FVRlRMRWxCUVZRc1EwRkJZeXh0UWtGQlpDeEhRVUZ2UXl4SlFVRkpMRlZCUVVvc1EwRkJaU3hMUVVGTExFTkJRVXdzUTBGQlppeERRVUZ3UXp0QlFVTkJMSGxDUVVGVExFbEJRVlFzUTBGQll5eHJRa0ZCWkN4SFFVRnRReXhKUVVGSkxGVkJRVW9zUTBGQlpTeExRVUZMTEVOQlFVd3NRMEZCWml4RFFVRnVRenRCUVVOQkxIbENRVUZUTEVsQlFWUXNRMEZCWXl4blFrRkJaQ3hIUVVGcFF5eEpRVUZKTEZWQlFVb3NRMEZCWlN4TFFVRkxMRU5CUVV3c1EwRkJaaXhEUVVGcVF6dEJRVU5CTEhGQ1FVRkxMRTFCUVUwc1RVRkJUaXhEUVVGaExFMUJRV0lzUTBGQmIwSXNZMEZCWXl4RlFVRnNReXhEUVVGTU8wRkJRMEVzYjBKQlFVa3NUMEZCVHl4TlFVRk5MRTFCUVU0c1EwRkJZU3hOUVVGaUxFTkJRVzlDTEdOQlFXTXNhMEpCUVd4RExFTkJRVmc3TzBGQlJVRXNkVUpCUVU4c1RVRkJUU3hOUVVGT0xFTkJRV0VzVlVGQllpeERRVUYzUWl4VFFVRlRMRWxCUVZRc1EwRkJZeXh0UWtGQmRFTXNSVUZCTWtRc1NVRkJNMFFzUlVGQmFVVXNSVUZCYWtVc1EwRkJVRHRCUVVWRUxHVkJha1JFTEVWQmFVUkhMRWxCYWtSSUxFTkJhVVJSTEhsQ1FVRnBRanRCUVVOMlFqczdRVUZGUVN4NVFrRkJVeXhuUWtGQlZDeERRVUV3UWl4cFFrRkJNVUlzUjBGQk9FTXNUVUZCVFN4dlFrRkJUaXhEUVVFeVFpeFBRVUV6UWl4RlFVRnZReXhuUWtGQlowSXNSVUZCY0VRc1EwRkJPVU03TzBGQlJVRXNiMEpCUVVrc1pVRkJaU3hOUVVGTkxFMUJRVTRzUTBGQllTeE5RVUZpTEVOQlFXOUNMR05CUVdNc1NVRkJiRU1zUTBGQmJrSTdPMEZCUlVFc2EwTkJRV3RDTEUxQlFVMHNiMEpCUVU0c1EwRkJNa0lzVDBGQk0wSXNSVUZCYjBNc1owSkJRV2RDTEVWQlFYQkVMRU5CUVd4Q096dEJRVVZCTEhWQ1FVRlBMRTFCUVUwc1RVRkJUaXhEUVVGaExGVkJRV0lzUTBGQmQwSXNVMEZCVXl4SlFVRlVMRU5CUVdNc1owSkJRWFJETEVWQlFYZEVMR1ZCUVhoRUxFVkJRWGxGTEZsQlFYcEZMRU5CUVZBN1FVRkZSQ3hsUVRWRVJDeEZRVFJFUnl4SlFUVkVTQ3hEUVRSRVVTeDNRa0ZCYVVJN08wRkJSWFpDTzBGQlEwRXNiMEpCUVVrc01FSkJRVEJDTzBGQlF6VkNMSGRDUVVGTkxGZEJSSE5DTzBGQlJUVkNMSE5DUVVGSkxGRkJRVkVzU1VGR1owSTdRVUZITlVJc2QwSkJRVTBzVVVGQlVTeEZRVWhqTzBGQlNUVkNMSGRDUVVGTk8wRkJRMG9zYjBOQlFXZENPMEZCUkZvN1FVRktjMElzYVVKQlFUbENPMEZCVVVFc2NVSkJRVXNzVFVGQlRTeE5RVUZPTEVOQlFXRXNWVUZCWWl4RlFVRk1PMEZCUTBFc2MwSkJRVTBzUlVGQlRpeEhRVUZYTEUxQlFVMHNUVUZCVGl4RFFVRmhMRTFCUVdJc1EwRkJiMElzUlVGQmNFSXNRMEZCV0RzN1FVRkZRU3hyUTBGQmEwSXNUVUZCVFN4dlFrRkJUaXhEUVVFeVFpeDFRa0ZCTTBJc1JVRkJiMFFzVVVGQlVTeEZRVUUxUkN4RlFVRm5SU3hUUVVGVExGZEJRVlFzUTBGQmNVSXNWMEZCY2tZc1EwRkJiRUk3TzBGQlJVRXNkVUpCUVU4c1RVRkJUU3hOUVVGT0xFTkJRV0VzVVVGQllpeERRVUZ6UWl4VFFVRlRMRWxCUVZRc1EwRkJZeXhyUWtGQmNFTXNSVUZCZDBRc2RVSkJRWGhFTEVOQlFWQTdRVUZEUkN4bFFUZEZSQ3hGUVRaRlJ5eEpRVGRGU0N4RFFUWkZVU3huUWtGQlVUczdRVUZGWkN4elFrRkJUU3hKUVVGT0xFZEJRV0VzVFVGQlRTeE5RVUZPTEVOQlFXRXNUVUZCWWl4RFFVRnZRaXhKUVVGd1FpeERRVUZpTzBGQlEwRXNkVUpCUVU4c1RVRkJUU3hOUVVGT0xFTkJRV0VzVlVGQllpeERRVUYzUWl4VFFVRlRMRWxCUVZRc1EwRkJZeXh4UWtGQmRFTXNSVUZCTmtRc1MwRkJOMFFzUlVGQmIwVXNSVUZCY0VVc1EwRkJVRHRCUVVWRUxHVkJiRVpFTEVWQmEwWkhMRWxCYkVaSUxFTkJhMFpSTERCQ1FVRnJRanRCUVVONFFpeHpRa0ZCVFN4TFFVRk9MRWRCUVdNc1RVRkJUU3hOUVVGT0xFTkJRV0VzVFVGQllpeERRVUZ2UWl4alFVRndRaXhEUVVGa08wRkJRMEVzYjBKQlFVa3NNRUpCUVRCQ08wRkJRelZDTEhkQ1FVRk5MRmRCUkhOQ08wRkJSVFZDTEhOQ1FVRkpMRkZCUVZFc1NVRkdaMEk3UVVGSE5VSXNkMEpCUVUwc1VVRkJVU3hGUVVoak8wRkJTVFZDTEhkQ1FVRk5PMEZCUTBvc2IwTkJRV2RDTEhsQ1FVUmFPMEZCUlVvc01rSkJRVThzUzBGQlN5eDVRa0ZCWlN4TFFVRm1MRU5CUVV3N1FVRkdTRHRCUVVwelFpeHBRa0ZCT1VJN08wRkJWVUVzZVVKQlFWTXNaMEpCUVZRc1EwRkJNRUlzZFVKQlFURkNMRWRCUVc5RUxFMUJRVTBzYjBKQlFVNHNRMEZCTWtJc2RVSkJRVE5DTEVWQlFXOUVMRkZCUVZFc1JVRkJOVVFzUlVGQlowVXNVMEZCVXl4WFFVRlVMRU5CUVhGQ0xGZEJRWEpHTEVOQlFYQkVPMEZCUTBFc2VVSkJRVk1zWVVGQlZDeEhRVUY1UWl4SlFVRjZRanRCUVVOQkxIZENRVUZSTEVWQlFVTXNVMEZCVXl4MVFrRkJWaXhGUVVGdFF5eFZRVUZWTEZGQlFUZERMRVZCUVZJN1FVRkRSQ3hsUVdwSFJEczdRVUZ0UjBZN1FVRkRRU3hwUWtGQlN5eDVRa0ZCVERzN1FVRkZSU3h6UWtGQlVTeEhRVUZTTEVOQlFWa3NlVUpCUVZvN1FVRkRRU3gxUWtGQlV5eGhRVUZVTEVkQlFYbENMRWxCUVhwQ096dEJRVVZCTEhOQ1FVRlJMRXRCUVVzc1MwRkJUQ3hEUVVGWExFdEJRVXNzVVVGQlVTeEpRVUZTTEVOQlFXRXNTMEZCYkVJc1EwRkJXQ3hEUVVGU096dEJRVVZCTEcxQ1FVRkxMRTFCUVUwc1RVRkJUaXhEUVVGaExFMUJRV0lzUTBGQmIwSXNUVUZCVFN4RlFVRXhRaXhEUVVGTU8wRkJRMEVzYTBKQlFVa3NUMEZCVHl4TlFVRk5MRTFCUVU0c1EwRkJZU3hOUVVGaUxFTkJRVzlDTEUxQlFVMHNTMEZCTVVJc1EwRkJXRHRCUVVOQkxIRkNRVUZQTEUxQlFVMHNUVUZCVGl4RFFVRmhMRTFCUVdJc1EwRkJiMElzVFVGQlRTeEpRVUV4UWl4RFFVRlFPenRCUVVWQkxHOUNRVUZOTEUxQlFVNHNRMEZCWVN4VlFVRmlMRU5CUVhkQ0xGTkJRVk1zU1VGQlZDeERRVUZqTEcxQ1FVRjBReXhGUVVFeVJDeEpRVUV6UkN4RlFVRnBSU3hGUVVGcVJTeEZRVUZ4UlN4SlFVRnlSU3hEUVVFd1JTeDVRa0ZCYVVJN1FVRkRla1lzZDBKQlFWRXNSMEZCVWl4RFFVRlpMR1ZCUVZvc1JVRkJOa0lzWVVGQk4wSTdRVUZEUVN4NVFrRkJVeXhuUWtGQlZDeERRVUV3UWl4MVFrRkJNVUlzUjBGQmIwUXNUVUZCVFN4dlFrRkJUaXhEUVVFeVFpeFBRVUV6UWl4RlFVRnZReXhuUWtGQlowSXNSVUZCY0VRc1EwRkJjRVE3TzBGQlJVRXNiMEpCUVVrc2EwSkJRV3RDTEUxQlFVMHNiMEpCUVU0c1EwRkJNa0lzVDBGQk0wSXNSVUZCYjBNc1QwRkJUeXhGUVVFelF5eERRVUYwUWp0QlFVTkJMSE5DUVVGTkxFMUJRVTRzUTBGQllTeFZRVUZpTEVOQlFYZENMRk5CUVZNc1NVRkJWQ3hEUVVGakxHZENRVUYwUXl4RlFVRjNSQ3hsUVVGNFJDeEZRVUY1UlN4SlFVRjZSU3hGUVVFclJTeEpRVUV2UlN4RFFVRnZSaXhyUWtGQlZUdEJRVU0xUml3d1FrRkJVU3hIUVVGU0xFTkJRVmtzWVVGQldpeEZRVUV5UWl4TlFVRXpRanM3UVVGRlFUdEJRVU5CTEhOQ1FVRkpMRk5CUVZNc1kwRkJZaXhGUVVFMlFqdEJRVU16UWl4M1FrRkJTU3hwUWtGQmFVSTdRVUZEYmtJc05FSkJRVTBzVVVGRVlUdEJRVVZ1UWl3d1FrRkJTU3hSUVVGUkxFbEJSazg3UVVGSGJrSXNORUpCUVUwc1VVRkJVU3hGUVVoTE8wRkJTVzVDTERSQ1FVRk5PMEZCUTBvc0swSkJRVThzVTBGQlV5eGpRVUZVTEVOQlFYZENMRWxCUVhoQ0xFTkJRVFpDTzBGQlJHaERPMEZCU21Fc2NVSkJRWEpDT3p0QlFWTkJMRFJDUVVGUkxFVkJRVU1zVTBGQlV5eGpRVUZXTEVWQlFUQkNMRlZCUVZVc1VVRkJjRU1zUlVGQlVqczdRVUZGUVR0QlFVTkVMRzFDUVdKRUxFMUJZVTg3UVVGRFRDd3dRa0ZCVFN4MVFrRkJUaXhEUVVFNFFpeFBRVUU1UWl4RlFVRjFReXhSUVVGMlF5eEZRVUZwUkN4SlFVRnFSQ3hEUVVGelJDeHBRa0ZCVXp0QlFVTTNSQ3c0UWtGQlVTeExRVUZTTzBGQlEwUXNjVUpCUmtRN1FVRkhSRHRCUVVOR0xHbENRWFJDUkR0QlFYVkNSQ3hsUVRWQ1JEczdRVUU0UWtZN1FVRkRRU3hwUWtGQlN5eHZRa0ZCVERzN1FVRkZSU3h6UWtGQlVTeEhRVUZTTEVOQlFWa3NiMEpCUVZvN08wRkJSVUVzYTBKQlFVa3NhVUpCUVdsQ0xFdEJRVXNzUzBGQlRDeERRVUZYTEV0QlFVc3NVVUZCVVN4SlFVRlNMRU5CUVdFc1MwRkJiRUlzUTBGQldDeERRVUZ5UWp0QlFVTkJMSEZDUVVGUExFMUJRVTBzVFVGQlRpeERRVUZoTEUxQlFXSXNRMEZCYjBJc1pVRkJaU3hKUVVGdVF5eERRVUZRTzBGQlEwRXNiVUpCUVVzc1RVRkJUU3hOUVVGT0xFTkJRV0VzVFVGQllpeERRVUZ2UWl4bFFVRmxMRVZCUVc1RExFTkJRVXc3UVVGRFFTeHJRa0ZCU1N4cFFrRkJhVUlzVFVGQlRTeE5RVUZPTEVOQlFXRXNUVUZCWWl4RFFVRnZRaXhsUVVGbExFdEJRVzVETEVOQlFYSkNPMEZCUTBFc2EwSkJRVWtzYjBKQlFVbzdRVUZEUVN4clFrRkJTU3h0UWtGQlNqdEJRVU5CTEd0Q1FVRkpMSE5DUVVGS08wRkJRMEVzYTBKQlFVa3NLMEpCUVVvN08wRkJSVUVzYjBKQlFVMHNUVUZCVGl4RFFVRmhMRlZCUVdJc1EwRkJkMElzVTBGQlV5eEpRVUZVTEVOQlFXTXNiVUpCUVhSRExFVkJRVEpFTEdOQlFUTkVMRVZCUVRKRkxFVkJRVE5GTEVWQlFTdEZMRWxCUVM5RkxFTkJRVzlHTERCQ1FVRnJRanM3UVVGRmNFY3NPRUpCUVdNc1MwRkJTeXhMUVVGTUxFTkJRVmNzWTBGQldDeERRVUZrTzBGQlEwRXNOa0pCUVdFc1RVRkJUU3hOUVVGT0xFTkJRV0VzVFVGQllpeERRVUZ2UWl4WlFVRlpMRXRCUVdoRExFTkJRV0k3UVVGRFFTeG5RMEZCWjBJc1dVRkJXU3hoUVVFMVFqczdRVUZGUVN4dlFrRkJTU3huUWtGQlowSXNUVUZCVFN4dlFrRkJUaXhEUVVFeVFpeFBRVUV6UWl4RlFVRnZReXhwUWtGQmFVSXNSVUZCY2tRc1EwRkJjRUk3TzBGQlJVRXNkVUpCUVU4c1RVRkJUU3hOUVVGT0xFTkJRV0VzVlVGQllpeERRVUYzUWl4VFFVRlRMRWxCUVZRc1EwRkJZeXhuUWtGQmRFTXNSVUZCZDBRc1lVRkJlRVFzUlVGQmRVVXNTVUZCZGtVc1EwRkJVRHRCUVVWRUxHVkJWa1FzUlVGVlJ5eEpRVlpJTEVOQlZWRXNjMEpCUVdNN08wRkJSWEJDT3p0QlFVVkJMSE5DUVVGTkxIRkNRVUZPTEVOQlFUUkNMR0ZCUVRWQ0xFbEJRVGhETEVWQlFVTXNXVUZCV1N4VlFVRmlMRVZCUVhsQ0xHRkJRV0VzU1VGQmRFTXNSVUZCT1VNN08wRkJSVUVzY1VKQlFVc3NUVUZCVFN4TlFVRk9MRU5CUVdFc1ZVRkJZaXhGUVVGTU8wRkJRMEVzYzBKQlFVMHNSVUZCVGl4SFFVRlhMRTFCUVUwc1RVRkJUaXhEUVVGaExFMUJRV0lzUTBGQmIwSXNSVUZCY0VJc1EwRkJXRHM3UVVGRlFTeDFRa0ZCVHl4TlFVRk5MRTFCUVU0c1EwRkJZU3hWUVVGaUxFTkJRWGRDTEZOQlFWTXNTVUZCVkN4RFFVRmpMSEZDUVVGMFF5eEZRVUUyUkN4TlFVRTNSQ3hGUVVGeFJTeEZRVUZ5UlN4RFFVRlFPMEZCUTBRc1pVRndRa1FzUlVGdlFrY3NTVUZ3UWtnc1EwRnZRbEVzTUVKQlFXdENPenRCUVVWNFFpeDVRMEZCZVVJN1FVRkRka0lzZDBKQlFVMHNWMEZFYVVJN1FVRkZka0lzYzBKQlFVa3NVVUZCVVN4SlFVWlhPMEZCUjNaQ0xIZENRVUZOTEZGQlFWRXNSVUZJVXp0QlFVbDJRaXgzUWtGQlRUdEJRVU5LTEc5RFFVRm5RanRCUVVSYU8wRkJTbWxDTEdsQ1FVRjZRanM3UVVGVFFTeHpRa0ZCVFN4TFFVRk9MRWRCUVdNc1RVRkJUU3hOUVVGT0xFTkJRV0VzVFVGQllpeERRVUZ2UWl4alFVRndRaXhEUVVGa08wRkJRMEVzYjBKQlFVa3NaMEpCUVdkQ0xFMUJRVTBzYjBKQlFVNHNRMEZCTWtJc2MwSkJRVE5DTEVWQlFXMUVMRk5CUVZNc1JVRkJOVVFzUlVGQlowVXNVMEZCVXl4WFFVRlVMRU5CUVhGQ0xGZEJRWEpHTEVOQlFYQkNPenRCUVVWQkxIVkNRVUZQTEUxQlFVMHNUVUZCVGl4RFFVRmhMRkZCUVdJc1EwRkJjMElzVTBGQlV5eEpRVUZVTEVOQlFXTXNhMEpCUVhCRExFVkJRWGRFTEdGQlFYaEVMRU5CUVZBN1FVRkRSQ3hsUVc1RFJDeEZRVzFEUnl4SlFXNURTQ3hEUVcxRFVTeDVRa0ZCYVVJN1FVRkRka0lzYjBKQlFVa3NZVUZCWVN4TFFVRkxMSGxDUVVGbExFVkJRVU1zVDBGQlR5eE5RVUZOTEV0QlFXUXNSVUZCY1VJc1RVRkJUU3hOUVVGTkxFMUJRVTRzUTBGQllTeE5RVUZpTEVOQlFXOUNMR0ZCUVhCQ0xFTkJRVE5DTEVWQlFTdEVMRWxCUVVrc1RVRkJUU3hGUVVGNlJTeEZRVUZtTEVOQlFVd3NRMEZCYWtJN08wRkJSVUVzZFVOQlFYVkNMRWxCUVhaQ0xFTkJRVFJDTEV0QlFUVkNMRWRCUVc5RExGVkJRWEJETzBGQlEwRXNkMEpCUVZFc1JVRkJReXhUUVVGVExITkNRVUZXTEVWQlFXdERMRlZCUVZVc1VVRkJOVU1zUlVGQlVqdEJRVU5FTEdWQmVFTkVPenRCUVRCRFJqdEJRVU5CTEdsQ1FVRkxMSEZDUVVGTU96dEJRVVZGTEhOQ1FVRlJMRWRCUVZJc1EwRkJXU3h4UWtGQldqczdRVUZGUVN4clFrRkJTU3g1UWtGQmVVSXNTMEZCU3l4TFFVRk1MRU5CUVZjc1MwRkJTeXhSUVVGUkxFbEJRVklzUTBGQllTeExRVUZzUWl4RFFVRllMRU5CUVRkQ08wRkJRMEVzYTBKQlFVa3NaVUZCWlN4TlFVRk5MRTFCUVU0c1EwRkJZU3hOUVVGaUxFTkJRVzlDTEhWQ1FVRjFRaXhKUVVFelF5eERRVUZ1UWp0QlFVTkJMRzFDUVVGTExFMUJRVTBzVFVGQlRpeERRVUZoTEUxQlFXSXNRMEZCYjBJc2RVSkJRWFZDTEVWQlFUTkRMRU5CUVV3N1FVRkRRU3hyUWtGQlNTeDVRa0ZCZVVJc1RVRkJUU3hOUVVGT0xFTkJRV0VzVFVGQllpeERRVUZ2UWl4MVFrRkJkVUlzUzBGQk0wTXNRMEZCTjBJN08wRkJSVUVzYjBKQlFVMHNUVUZCVGl4RFFVRmhMRlZCUVdJc1EwRkJkMElzVTBGQlV5eEpRVUZVTEVOQlFXTXNiVUpCUVhSRExFVkJRVEpFTEhOQ1FVRXpSQ3hGUVVGdFJpeEZRVUZ1Uml4RlFVRjFSaXhKUVVGMlJpeERRVUUwUml3d1FrRkJhMEk3TzBGQlJUVkhMRzlDUVVGSkxHdENRVUZyUWl4TlFVRk5MRzlDUVVGT0xFTkJRVEpDTEU5QlFUTkNMRVZCUVc5RExHbENRVUZwUWl4RlFVRnlSQ3hEUVVGMFFqdEJRVU5CTEhWQ1FVRlBMRTFCUVUwc1RVRkJUaXhEUVVGaExGVkJRV0lzUTBGQmQwSXNVMEZCVXl4SlFVRlVMRU5CUVdNc1owSkJRWFJETEVWQlFYZEVMR1ZCUVhoRUxFVkJRWGxGTEZsQlFYcEZMRU5CUVZBN1FVRkRSQ3hsUVVwRUxFVkJTVWNzU1VGS1NDeERRVWxSTEhOQ1FVRmpPMEZCUTNCQ096dEJRVVZCTEc5Q1FVRkpMRmRCUVZjc1UwRkJVeXhSUVVGNFFqczdRVUZGUVN4dlFrRkJTU3hSUVVGS0xFVkJRV003UVVGRFdpd3lRa0ZCVXl4alFVRlVPMEZCUTBRN1FVRkRSQ3gzUWtGQlVTeGpRVUZTTzBGQlEwUXNaVUZpUkRzN1FVRmxSanRCUVVOQk8wRkJRMFVzY1VKQlFVOHNUMEZCVUR0QlFXcFlTanRCUVZBd1F6dEJRVEJZTTBNc1QwRXhXRTBzUTBGQlVEdEJRVEpZUkRzN096UkRRVVYxUWl4UExFVkJRVk1zVVN4RlFVRlZPMEZCUTNwRExGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNWVUZCU1N4dFFrRkJiVUlzVFVGQlRTeHhRa0ZCVGl4RFFVRTBRaXhUUVVGVExHRkJRWEpETEVOQlFYWkNPMEZCUTBFc1ZVRkJTU3c0UWtGQlNqdEJRVU5CTEZWQlFVa3NkVUpCUVVvN1FVRkRRU3hWUVVGSkxHMUNRVUZLTzBGQlEwRXNWVUZCU1N4WFFVRktPMEZCUTBFc1ZVRkJTU3hSUVVGUkxFVkJRVm83TzBGQlJVRXNZVUZCVHl4elFrRkJXU3hWUVVGVExFOUJRVlFzUlVGQmEwSXNUVUZCYkVJc1JVRkJNRUk3TzBGQlJUTkRPMEZCUTBFc1dVRkJTU3hEUVVGRExHZENRVUZNTEVWQlFYVkNPMEZCUTNKQ0xIVkNRVUZoTEUxQlFVMHNUVUZCVGl4RFFVRmhMR05CUVdJc1JVRkJZanRCUVVOQkxHZENRVUZOTEhGQ1FVRk9MRU5CUVRSQ0xGTkJRVk1zWVVGQmNrTXNTVUZCYzBRc1JVRkJReXhaUVVGWkxGVkJRV0lzUlVGQmVVSXNZVUZCWVN4SlFVRjBReXhGUVVGMFJEdEJRVU5FTEZOQlNFUXNUVUZIVHp0QlFVTk1MSFZDUVVGaExHbENRVUZwUWl4VlFVRTVRanRCUVVORU96dEJRVVZFTEhsQ1FVRnBRaXg1UWtGQlpTeEZRVUZETEU5QlFVOHNUVUZCVFN4TlFVRk9MRU5CUVdFc1RVRkJZaXhEUVVGdlFpeFZRVUZ3UWl4RFFVRlNMRVZCUVhsRExHVkJRV1VzVTBGQlV5eGhRVUZxUlN4RlFVRm1MRU5CUVdwQ096dEJRVVZCTEdGQlFVc3NUVUZCVFN4TlFVRk9MRU5CUVdFc1ZVRkJZaXhGUVVGTU8wRkJRMEVzWTBGQlRTeEZRVUZPTEVkQlFWY3NUVUZCVFN4TlFVRk9MRU5CUVdFc1RVRkJZaXhEUVVGdlFpeEZRVUZ3UWl4RFFVRllPMEZCUTBFc1kwRkJUU3hOUVVGT0xFTkJRV0VzVlVGQllpeERRVUYzUWl4VFFVRlRMRWxCUVZRc1EwRkJZeXh4UWtGQmRFTXNSVUZCTmtRc1kwRkJOMFFzUlVGQk5rVXNSVUZCTjBVc1JVRkJhVVlzU1VGQmFrWXNRMEZCYzBZc01FSkJRV3RDT3p0QlFVVjBSeXhyUTBGQmQwSTdRVUZEZEVJc2EwSkJRVTBzVjBGRVowSTdRVUZGZEVJc1owSkJRVWtzVVVGQlVTeEpRVVpWTzBGQlIzUkNMR3RDUVVGTkxGRkJRVkVzUlVGSVVUdEJRVWwwUWl4clFrRkJUVHRCUVVOS0xEaENRVUZuUWl4dlFrRkVXanRCUVVWS0xIRkNRVUZQTEUxQlFVMHNUVUZCVGl4RFFVRmhMRTFCUVdJc1EwRkJiMElzWTBGQmNFSTdRVUZHU0R0QlFVcG5RaXhYUVVGNFFqczdRVUZWUVN4alFVRkpMR3RDUVVGclFpeE5RVUZOTEc5Q1FVRk9MRU5CUVRKQ0xIRkNRVUV6UWl4RlFVRnJSQ3hwUWtGQmFVSXNSVUZCYmtVc1JVRkJkVVVzVTBGQlV5eFhRVUZVTEVOQlFYRkNMRmRCUVRWR0xFTkJRWFJDT3p0QlFVVkJMR2xDUVVGUExFMUJRVTBzVFVGQlRpeERRVUZoTEZGQlFXSXNRMEZCYzBJc1UwRkJVeXhKUVVGVUxFTkJRV01zYTBKQlFYQkRMRVZCUVhkRUxHVkJRWGhFTEVOQlFWQTdRVUZEUkN4VFFXWkVMRVZCWlVjc1NVRm1TQ3hEUVdWUkxIbENRVUZwUWpzN1FVRkZka0lzWTBGQlNTeG5Ra0ZCWjBJc1MwRkJTeXg1UWtGQlpTeEZRVUZETEU5QlFVOHNjMEpCUVhOQ0xFbEJRWFJDTEVOQlFUSkNMRXRCUVc1RExFVkJRVEJETEUxQlFVMHNUVUZCVFN4TlFVRk9MRU5CUVdFc1RVRkJZaXhEUVVGdlFpeGhRVUZ3UWl4RFFVRm9SQ3hGUVVGdlJpeEpRVUZKTEUxQlFVMHNSVUZCT1VZc1JVRkJaaXhEUVVGTUxFTkJRWEJDT3p0QlFVVkJMR2REUVVGelFpeEpRVUYwUWl4RFFVRXlRaXhMUVVFelFpeEhRVUZ0UXl4aFFVRnVRenRCUVVOQkxHdENRVUZSTEVWQlFVTXNVMEZCVXl4eFFrRkJWaXhGUVVGcFF5eFZRVUZWTEZGQlFUTkRMRVZCUVZJN1FVRkRSQ3hUUVhKQ1JEdEJRWE5DUkN4UFFYQkRUU3hEUVVGUU8wRkJjVU5FT3p0QlFVVkVPenM3T3pzN096czRRMEZMTUVJc1lTeEZRVUZsTzBGQlEzWkRMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEdGQlFVOHNjMEpCUVZrc1ZVRkJVeXhQUVVGVUxFVkJRV3RDTEUxQlFXeENMRVZCUVRCQ096dEJRVVV6UXpzN1FVRkZRU3haUVVGSkxHRkJRV0VzWTBGQll5eExRVUZrTEVOQlFXOUNMRWRCUVhCQ0xFTkJRV3BDTzBGQlEwRXNXVUZCU1N4WFFVRlhMRmRCUVZjc1EwRkJXQ3hKUVVGblFpeEpRVUZvUWl4SFFVRjFRaXhYUVVGWExFTkJRVmdzUTBGQmRrSXNSMEZCZFVNc1IwRkJka01zUjBGQk5rTXNWMEZCVnl4RFFVRllMRU5CUVRWRU8wRkJRMEVzV1VGQlNTeFhRVUZYTEUxQlFWZ3NSMEZCYjBJc1EwRkJlRUlzUlVGQk1rSTdRVUZEZWtJc2NVSkJRVmNzVjBGQlZ5eERRVUZZTEVsQlFXZENMRWxCUVdoQ0xFZEJRWFZDTEZkQlFWY3NRMEZCV0N4RFFVRjJRaXhIUVVGMVF5eEhRVUYyUXl4SFFVRTJReXhYUVVGWExFTkJRVmdzUTBGQk4wTXNSMEZCTmtRc1IwRkJOMFFzUjBGQmJVVXNWMEZCVnl4RFFVRllMRU5CUVRsRk8wRkJRMFE3TzBGQlJVUTdRVUZEUVN4WlFVRkpMR05CUVdNc1RVRkJUU3hSUVVGT0xFTkJRV1VzZDBKQlFXWXNRMEZCZDBNc1VVRkJlRU1zUTBGQmJFSTdPMEZCUlVFc1dVRkJTU3hYUVVGS0xFVkJRV2xDTzBGQlEyWXNhMEpCUVZFc1YwRkJVanRCUVVORUxGTkJSa1FzVFVGRlR6dEJRVU5NTzBGQlEwRXNZMEZCU1N4dlFrRkJiMElzVFVGQlRTeHRRa0ZCVGl4RFFVRXdRaXhSUVVFeFFpeERRVUY0UWpzN1FVRkZRU3hqUVVGSkxHbENRVUZLTEVWQlFYVkNPMEZCUTNKQ0xHOUNRVUZSTEdsQ1FVRlNPMEZCUTBRc1YwRkdSQ3hOUVVWUE8wRkJRMHc3UVVGRFFTeG5Ra0ZCU1N4dlFrRkJiMElzVFVGQlRTeFJRVUZPTEVOQlFXVXNPRUpCUVdZc1EwRkJPRU1zWVVGQk9VTXNRMEZCZUVJN08wRkJSVUVzWjBKQlFVa3NhVUpCUVVvc1JVRkJkVUk3UVVGRGNrSXNjMEpCUVZFc2FVSkJRVkk3UVVGRFJDeGhRVVpFTEUxQlJVODdPMEZCUlV3N1FVRkRRVHRCUVVOQkxHOUNRVUZOTEZGQlFVNHNRMEZCWlN4M1FrRkJaaXhEUVVGM1F5eFJRVUY0UXl4RlFVRnJSQ3hYUVVGWExFTkJRVmdzUTBGQmJFUXNSVUZCYVVVc1NVRkJha1VzUTBGQmMwVXNjMEpCUVdNN1FVRkRiRVlzYzBKQlFVMHNiVUpCUVU0c1EwRkJNRUlzVVVGQk1VSXNTVUZCYzBNc1YwRkJWeXhSUVVGcVJEdEJRVU5CTEhkQ1FVRlJMRmRCUVZjc1VVRkJia0k3UVVGRFJDeGxRVWhFTEVWQlIwY3NaVUZCVHp0QlFVTlNMSFZDUVVGUExFZEJRVkE3UVVGRFJDeGxRVXhFTzBGQlRVUTdRVUZEUmp0QlFVTkdPMEZCUTBZc1QwRjRRMDBzUTBGQlVEdEJRWGxEUkRzN1FVRkZSRHM3T3pzN096czdPenQ1UTBGUGNVSXNUeXhGUVVGVExHTXNSVUZCWjBJc1VTeEZRVUZWT3p0QlFVVjBSQ3hoUVVGUE8wRkJRMHdzWTBGQlRTeFJRVUZSTEVsQlJGUTdRVUZGVEN4alFVRk5MRkZCUVZFc1NVRkdWRHRCUVVkTUxGbEJRVTBzVVVGQlVTeEZRVWhVTzBGQlNVd3NZMEZCVFR0QlFVTktMRzlDUVVGVkxGbEJRVmtzVVVGQlVTeEpRVUZTTEVOQlFXRXNVVUZFTDBJN1FVRkZTaXhwUWtGQlR5eHJRa0ZCYTBJc1VVRkJVU3hKUVVGU0xFTkJRV0VzUzBGR2JFTTdRVUZIU2l3d1FrRkJaMElzVVVGQlVTeEpRVUZTTEVOQlFXRTdRVUZJZWtJN1FVRktSQ3hQUVVGUU8wRkJWVVE3TzBGQlJVUTdPenM3T3pzN096czdiVU5CVDJVc1R5eEZRVUZUTEU4c1JVRkJVeXhSTEVWQlFWVTdRVUZEZWtNc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1ZVRkJTU3hQUVVGUkxGRkJRVVFzUjBGQllTeFJRVUZSTEVWQlFYSkNMRWRCUVRCQ0xGRkJRVkVzU1VGQk4wTTdRVUZEUVN4VlFVRkpMRXRCUVUwc1VVRkJSQ3hIUVVGaExGRkJRVkVzU1VGQmNrSXNSMEZCTkVJc1VVRkJVU3hGUVVFM1F6czdRVUZGUVN4VlFVRkpMRmRCUVZjc1RVRkJUU3hYUVVGT0xFTkJRV3RDTEU5QlFXeENMRU5CUVdZN08wRkJSVUVzVlVGQlNTeG5Ra0ZEU2p0QlFVTkZMSEZDUVVOQk8wRkJRMFVzYlVKQlFWTXNTVUZFV0R0QlFVVkZMR3RDUVVGUkxGTkJRVk1zVjBGQlZDeERRVUZ4UWl4WFFVRnlRaXhEUVVGcFF5eFJRVVl6UXp0QlFVZEZMSE5DUVVGWkxGTkJRVk1zVDBGQlZDeERRVUZwUWl4UFFVZ3ZRanRCUVVsRkxIRkNRVUZYTEZOQlFWTXNUMEZCVkN4RFFVRnBRaXhOUVVvNVFqdEJRVXRGTEhGQ1FVRlhMRk5CUVZNc1UwRk1kRUk3UVVGTlJTeDFRa0ZCWVN4VFFVRlRPMEZCVG5oQ0xGTkJSa1k3UVVGVlJTeHRRa0ZEUVR0QlFVTkZMRzFDUVVGVExFVkJSRmc3UVVGRlJTeHJRa0ZCVVN4VFFVWldPMEZCUjBVc2NVSkJRVmNzVTBGSVlqdEJRVWxGTEhGQ1FVRlhPMEZCU21Jc1UwRllSanRCUVdsQ1JTeGpRVU5CTzBGQlEwVXNLMEpCUVhGQ0xGTkJSSFpDTzBGQlJVVXNhVU5CUVhWQ0xGTkJSbnBDTzBGQlIwVXNORUpCUVd0Q0xGTkJTSEJDTzBGQlNVVXNPRUpCUVc5Q0xGTkJTblJDTzBGQlMwVXNiMEpCUVZVc1UwRk1XanRCUVUxRkxITkNRVUZaTEZOQlRtUTdRVUZQUlN4M1FrRkJZeXhUUVZCb1FqdEJRVkZGTEhGQ1FVRlhPMEZCVW1Jc1UwRnNRa1k3UVVFMFFrVXNNRUpCUVd0Q08wRkJRMmhDTEhWQ1FVRmhMRk5CUkVjN1FVRkZhRUlzZVVKQlFXVXNVMEZHUXp0QlFVZG9RaXcyUWtGQmJVSXNVMEZJU0R0QlFVbG9RaXh0UTBGQmVVSTdRVUZLVkN4VFFUVkNjRUk3UVVGclEwVXNkMEpCUVdsQ0xGRkJRVkVzU1VGQlVpeERRVUZoTEUxQlFXUXNSMEZCZDBJc1UwRkJlRUlzUjBGQmIwTXNUMEZzUTNSRU8wRkJiVU5GTEd0Q1FVRlZMRkZCUVZFc1VVRnVRM0JDTzBGQmIwTkZMSFZDUVVGbExFdEJjRU5xUWp0QlFYRkRSU3gxUWtGQlpTeFJRVUZSTzBGQmNrTjZRaXhQUVVSQk96dEJRWGxEUVN4aFFVRlBMR0ZCUVZBN1FVRkRSRHM3TzNkQ1FXaDJRMmRDTzBGQlEyWXNWVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3hoUVVGUExFMUJRVTBzVjBGQllqdEJRVU5FT3p0QlFVVkVPenM3T3p0elFrRkpaU3hWTEVWQlFWazdRVUZEZWtJc1ZVRkJTU3hSUVVGUkxFbEJRVm83UVVGRFFTeFpRVUZOTEZkQlFVNHNSMEZCYjBJc1ZVRkJjRUk3TzBGQlJVRTdRVUZEUVN4VlFVRkpMRlZCUVZVc2MwSkJRVmtzVFVGQlRTeFBRVUZzUWl4RlFVRXlRaXhOUVVGTkxGZEJRV3BETEVOQlFXUTdRVUZEUVN4WlFVRk5MRTlCUVU0c1IwRkJaMElzVDBGQmFFSTdRVUZEUkRzN1FVRkZSRHM3T3pzN096dDNRa0ZKWlR0QlFVTmlMRlZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzWVVGQlR5eE5RVUZOTEZOQlFXSTdRVUZEUkRzN1FVRkZSRHM3T3pzN2MwSkJTV0VzVVN4RlFVRlZPMEZCUTNKQ0xGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNXVUZCVFN4VFFVRk9MRWRCUVd0Q0xGRkJRV3hDTzBGQlEwUTdPenM3TzJ0Q1FXbDBRMWtzWXpzN096czdPenM3T3pzN096czdPenRKUXpjd1ExUXNhMEk3T3pzN2EwSkJTVk1zYTBJN096czdPenM3T3pzN096czdPenM3T3pzN08wbERTbFFzVXpzN096czdPenQzUWtGRlFTeE5MRVZCUVZFN1FVRkRWaXhoUVVGUExFOUJRVThzUTBGQlVDeExRVUZoTEU5QlFVOHNRMEZCVUN4RFFVRndRanRCUVVORU96czdORUpCUlU4c1RTeEZRVUZSTzBGQlEyUXNWVUZCU1N4UlFVRlJMRk5CUVZNc1QwRkJUeXhEUVVGUUxFVkJRVlVzUTBGQlZpeERRVUZVTEVOQlFWbzdRVUZEUVN4VlFVRkpMRTFCUVUwc1UwRkJVeXhQUVVGUExFTkJRVkFzUlVGQlZTeERRVUZXTEVOQlFWUXNRMEZCVmp0QlFVTkJMRlZCUVVrc1RVRkJUU3hQUVVGUExFTkJRVkFzUTBGQlZqczdRVUZGUVN4VlFVRkpMRTFCUVUwc1MwRkJWaXhGUVVGcFFqdEJRVU5tTEdOQlFVOHNUVUZCVFN4TFFVRlFMRWRCUVdkQ0xFOUJRVThzU1VGQmRrSXNSMEZCT0VJc1IwRkJjRU03UVVGRFFTeGxRVUZQTEVsQlFWQTdRVUZEUkRzN1FVRkZSQ3hoUVVGUkxFMUJRVTBzUzBGQlRpeEpRVUZsTEUxQlFVMHNSMEZCTjBJN1FVRkRSRHM3T3pKQ1FVVk5MRTBzUlVGQlVUdEJRVU5pTEdGQlFVOHNUMEZCVHl4RFFVRlFMRTFCUVdNc1IwRkJaQ3hKUVVGeFFpeFBRVUZQTEVOQlFWQXNUVUZCWXl4UFFVRlBMRU5CUVZBc1EwRkJNVU03UVVGRFJEczdPM2RDUVVWRkxFMHNSVUZCVVR0QlFVTlVMR0ZCUVU4c1QwRkJUeXhEUVVGUUxFVkJRVlVzVDBGQlZpeERRVUZyUWl4UFFVRlBMRU5CUVZBc1EwRkJiRUlzU1VGQkswSXNRMEZCUXl4RFFVRjJRenRCUVVORU96czdkMEpCUlVjc1RTeEZRVUZSTzBGQlExWXNZVUZCVHl4RFFVRkRMRTlCUVU4c1EwRkJVQ3hEUVVGU08wRkJRMFE3T3p0MVFrRkZSU3hOTEVWQlFWRTdRVUZEVkN4aFFVRlBMRTlCUVU4c1EwRkJVQ3hMUVVGaExFOUJRVThzUTBGQlVDeERRVUZ3UWp0QlFVTkVPenM3T3p0clFrRkpXU3hUT3pzN096czdPenM3T3pzN096czdPenM3UVVOeVEyWTdPenM3UVVGRFFUczdPenM3TzBGQlEwRTdPenM3T3pzN08wbEJUMDBzUnp0QlFVVktMR1ZCUVZrc1QwRkJXaXhGUVVGeFFqdEJRVUZCT3p0QlFVTnVRaXhUUVVGTExFOUJRVXdzUjBGQlpTeFBRVUZtTzBGQlEwRXNVMEZCU3l4VFFVRk1MRWRCUVdsQ0xIbENRVUZxUWp0QlFVTkVPenM3TzJ0RFFXdENZU3hQTEVWQlFWTXNVU3hGUVVGVk8wRkJReTlDTEZWQlFVa3NVMEZCVXl4TFFVRkxMR2RDUVVGTUxFTkJRWE5DTEU5QlFYUkNMRVZCUVN0Q0xGTkJRVk1zY1VKQlFYaERMRU5CUVdJN1FVRkRRU3hWUVVGSkxFdEJRVXNzVDBGQlRDeDVRMEZCTWtNc1ZVRkJWU3hYUVVGWExHZENRVUZvUlN4RFFVRktMRVZCUVhWR08wRkJRM0pHTEdsQ1FVRlRMRXRCUVVzc2EwSkJRVXdzUTBGQmQwSXNUMEZCZUVJc1JVRkJhVU1zVTBGQlV5eFZRVUV4UXl4RFFVRlVPMEZCUTBRN1FVRkRSQ3hoUVVGUExFMUJRVkE3UVVGRFJEczdPM0ZEUVVWblFpeFBMRVZCUVZNc1RTeEZRVUZSTzBGQlEyaERMRlZCUVVrc1pVRkJTanM3UVVGRlFTeFZRVUZKTEUxQlFVb3NSVUZCV1R0QlFVTldMR2xDUVVGVExFOUJRVThzVVVGQlVDeERRVUZuUWl4TFFVRkxMRTlCUVhKQ0xFVkJRVGhDTEU5QlFUbENMRU5CUVZRN1FVRkRSQ3hQUVVaRUxFMUJSVTg3UVVGRFRDeHBRa0ZCVXl4blFrRkJWRHRCUVVORU96dEJRVVZFTEdGQlFVOHNUVUZCVUR0QlFVTkVPenM3ZFVOQlJXdENMRThzUlVGQlV5eExMRVZCUVU4N1FVRkRha01zVlVGQlNTeGxRVUZLT3p0QlFVVkJMRlZCUVVrc1ZVRkJWU3hUUVVGa0xFVkJRWGxDTzBGQlEzWkNMRmxCUVVrc1UwRkJVeXhMUVVGTExFOUJRVXdzUTBGQllTeFpRVUZpTEVOQlFUQkNMRXRCUVRGQ0xFTkJRV0k3UVVGRFFTeFpRVUZKTEUxQlFVb3NSVUZCV1R0QlFVTldMRzFDUVVGVExFOUJRVThzVVVGQlVDeERRVUZuUWl4TFFVRkxMRTlCUVhKQ0xFVkJRVGhDTEU5QlFUbENMRU5CUVZRN1FVRkRSQ3hUUVVaRUxFMUJSVTg3UVVGRFRDeHRRa0ZCVXl4blFrRkJWRHRCUVVORU8wRkJRMFlzVDBGUVJDeE5RVTlQTzBGQlEwd3NhVUpCUVZNc1owSkJRVlE3UVVGRFJEczdRVUZGUkN4aFFVRlBMRTFCUVZBN1FVRkRSRHM3TzNkQ1FXNUVZVHRCUVVOYUxHRkJRVThzUzBGQlN5eFJRVUZhTzBGQlEwUXNTenR6UWtGTlZ5eFBMRVZCUVZNN1FVRkRia0lzVjBGQlN5eFJRVUZNTEVkQlFXZENMRTlCUVdoQ08wRkJRMFE3T3p0M1FrRk9aVHRCUVVOa0xHRkJRVThzUzBGQlN5eFZRVUZhTzBGQlEwUXNTenR6UWtGTllTeFRMRVZCUVZjN1FVRkRka0lzVjBGQlN5eFZRVUZNTEVkQlFXdENMRk5CUVd4Q08wRkJRMFE3T3pzN08ydENRWGxEV1N4SE96czdPenM3T3pzN096czdPenM3T3pzN096dEpRM1pGVkN4SE8wRkJSVW9zWlVGQldTeFBRVUZhTEVWQlFYRkNPMEZCUVVFN08wRkJRMjVDTEZOQlFVc3NUMEZCVEN4SFFVRmxMRTlCUVdZN1FVRkRSRHM3T3p0dlEwRkZaU3hQTEVWQlFWTXNVU3hGUVVGVkxGa3NSVUZCWXp0QlFVTXZReXhWUVVGSkxHVkJRVW83TzBGQlJVRXNWVUZCU1N4VFFVRlRMRlZCUVdJc1JVRkJlVUk3UVVGRGRrSXNhVUpCUVZNc1MwRkJTeXhQUVVGTUxFTkJRV0VzV1VGQllpeERRVUV3UWl4VFFVRlRMRlZCUVc1RExFTkJRVlE3UVVGRFFTeFpRVUZKTEUxQlFVb3NSVUZCV1R0QlFVTldMR2xDUVVGUExHTkJRVkFzUTBGQmMwSXNTMEZCU3l4UFFVRXpRaXhGUVVGdlF5eFBRVUZ3UXl4RlFVRTJReXhaUVVFM1F6dEJRVU5FTzBGQlEwWTdRVUZEUkN4bFFVRlRMRXRCUVVzc1QwRkJUQ3hEUVVGaExIRkNRVUYwUWp0QlFVTkJMRlZCUVVrc1RVRkJTaXhGUVVGWk8wRkJRMVlzWlVGQlR5eGpRVUZRTEVOQlFYTkNMRXRCUVVzc1QwRkJNMElzUlVGQmIwTXNUMEZCY0VNc1JVRkJOa01zV1VGQk4wTTdRVUZEUkR0QlFVTkdPenRCUVVWRU96czdPenM3T3p0clFrRlJZU3hIT3pzN096czdPenM3T3pzN096czdPenM3UVVNM1FtWTdPenM3UVVGRFFUczdPenM3TzBsQlJVMHNUVHRCUVVWS0xHdENRVUZaTEVkQlFWb3NSVUZCYVVJc1MwRkJha0lzUlVGQmQwSXNUMEZCZUVJc1JVRkJhVU1zYTBKQlFXcERMRVZCUVhGRU8wRkJRVUU3TzBGQlEyNUVMRk5CUVVzc1QwRkJUQ3hIUVVGbExFOUJRV1k3UVVGRFFTeFRRVUZMTEVkQlFVd3NSMEZCVnl4SFFVRllPMEZCUTBFc1UwRkJTeXhMUVVGTUxFZEJRV0VzUzBGQllqdEJRVU5CTEZOQlFVc3NhMEpCUVV3c1IwRkJNRUlzYTBKQlFURkNPMEZCUTBFc1UwRkJTeXhSUVVGTUxFZEJRV2RDTEV0QlFXaENPMEZCUTBRN096czdPenRCUVd0RVJEczBRa0ZEVVN4SkxFVkJRVTA3UVVGRFdpeFhRVUZMTEUxQlFVd3NRMEZCV1N4SlFVRmFMRU5CUVdsQ0xFbEJRV3BDTzBGQlEwUTdPenNyUWtGRlZTeExMRVZCUVU4c1RTeEZRVUZSTEZNc1JVRkJWenRCUVVOdVF5eGhRVUZQTEV0QlFVc3NTMEZCVEN4RFFVRlhMRXRCUVZnc1JVRkJhMElzVFVGQmJFSXNSVUZCTUVJc1UwRkJNVUlzUTBGQlVEdEJRVU5FT3pzN2JVTkJSV01zVHl4RlFVRlRMRThzUlVGQlV5eFpMRVZCUVdNN1FVRkROME1zVjBGQlN5eEpRVUZKTEVOQlFWUXNTVUZCWXl4TFFVRkxMRTlCUVc1Q0xFVkJRVFJDTzBGQlF6RkNMR2RDUVVGUkxFdEJRVXNzVDBGQlRDeERRVUZoTEVOQlFXSXNRMEZCVWl4RlFVRjVRaXhQUVVGNlFpeEZRVUZyUXl4WlFVRnNRenRCUVVORU8wRkJRMFk3T3pzMlFrRkZVU3hQTEVWQlFWTXNUeXhGUVVGVE8wRkJRM3BDTEZWQlFVa3NWVUZCVlN4RlFVRmtPenRCUVVWQkxGZEJRVXNzU1VGQlNTeERRVUZVTEVsQlFXTXNTMEZCU3l4TFFVRnVRaXhGUVVFd1FqdEJRVU40UWl4blFrRkJVU3hKUVVGU0xFTkJRV0VzUzBGQlN5eExRVUZNTEVOQlFWY3NRMEZCV0N4RlFVRmpMRkZCUVdRc1EwRkJkVUlzVDBGQmRrSXNSVUZCWjBNc1QwRkJhRU1zUTBGQllqdEJRVU5FT3p0QlFVVkVMR0ZCUVU4c1MwRkJTeXhyUWtGQlRDeERRVUYzUWl4UlFVRjRRaXhEUVVGcFF5eFBRVUZxUXl4RFFVRlFPMEZCUTBRN096dDNRa0YyUldFN1FVRkRXaXhoUVVGUExFdEJRVXNzVVVGQldqdEJRVU5FTEVzN2MwSkJPRUpYTEU4c1JVRkJVenRCUVVOdVFpeFhRVUZMTEZGQlFVd3NSMEZCWjBJc1QwRkJhRUk3UVVGRFJEczdPM2RDUVRsQ2QwSTdRVUZEZGtJc1lVRkJUeXhMUVVGTExHMUNRVUZhTzBGQlEwUXNTenR6UWtGamMwSXNhMElzUlVGQmIwSTdRVUZEZWtNc1ZVRkJTU3gxUWtGQmRVSXNaVUZCTTBJc1JVRkJORU03UVVGRE1VTXNZVUZCU3l4dFFrRkJUQ3hIUVVFeVFpdzJRa0ZCTTBJN1FVRkRSQ3hQUVVaRUxFMUJSVTg3UVVGRFRDeFpRVUZKTEhWQ1FVRjFRaXhwUWtGQk0wSXNSVUZCT0VNN1FVRkROVU1zWlVGQlN5eHRRa0ZCVEN4SFFVRXlRaXdyUWtGQk0wSTdRVUZEUkN4VFFVWkVMRTFCUlU4N1FVRkRUQ3huUWtGQlRTeE5RVUZOTEhkQ1FVRjNRaXhyUWtGQk9VSXNRMEZCVGp0QlFVTkVPMEZCUTBZN1FVRkRSanM3TzNkQ1FYUkNZenRCUVVOaUxHRkJRVThzUzBGQlN5eFRRVUZhTzBGQlEwUXNTenR6UWtFd1Fsa3NVU3hGUVVGVk8wRkJRM0pDTEZkQlFVc3NVMEZCVEN4SFFVRnBRaXhSUVVGcVFqdEJRVU5FT3pzN2QwSkJNVUpUTzBGQlExSXNZVUZCVHl4TFFVRkxMRWxCUVZvN1FVRkRSQ3hMTzNOQ1FUQkNUeXhITEVWQlFVczdRVUZEV0N4WFFVRkxMRWxCUVV3c1IwRkJXU3hIUVVGYU8wRkJRMFE3T3p0M1FrRXhRbGM3UVVGRFZpeGhRVUZQTEV0QlFVc3NUVUZCV2p0QlFVTkVMRXM3YzBKQk1FSlRMRXNzUlVGQlR6dEJRVU5tTEZkQlFVc3NUVUZCVEN4SFFVRmpMRXRCUVdRN1FVRkRSRHM3T3pzN2EwSkJOa0paTEUwN096czdPenM3T3pzN096czdPenM3T3p0QlEzaEdaanM3T3p0QlFVTkJPenM3T3pzN1NVRkZUU3haTzBGQlJVb3NkMEpCUVZrc1QwRkJXaXhGUVVGeFFqdEJRVUZCT3p0QlFVTnVRaXhUUVVGTExFOUJRVXdzUjBGQlpTeFBRVUZtTzBGQlEwRXNVMEZCU3l4UFFVRk1MRU5CUVdFc1dVRkJZaXhIUVVFMFFpeEpRVUUxUWp0QlFVTkJMRk5CUVVzc1IwRkJUQ3hIUVVGWExHdENRVUZSTEU5QlFWSXNRMEZCV0R0QlFVTkJMRk5CUVVzc1IwRkJUQ3hIUVVGWExHdENRVUZSTEU5QlFWSXNRMEZCV0R0QlFVTkVPenM3T3poQ1FUQkNVeXhOTEVWQlFWRXNSeXhGUVVGTExFMHNSVUZCVVR0QlFVTTNRaXhWUVVGSkxGZEJRVmNzYTBKQlFXWXNSVUZCYlVNN1FVRkRha01zWVVGQlN5eFBRVUZNTEVOQlFXRXNkVUpCUVdJc1EwRkJjVU1zUjBGQmNrTXNTVUZCTkVNc1RVRkJOVU03UVVGRFJDeFBRVVpFTEUxQlJVODdRVUZEVEN4WlFVRkpMRmRCUVZjc1RVRkJaaXhGUVVGMVFqdEJRVU55UWl4bFFVRkxMRTlCUVV3c1EwRkJZU3haUVVGaUxFTkJRVEJDTEVkQlFURkNMRWxCUVdsRExFMUJRV3BETzBGQlEwUXNVMEZHUkN4TlFVVlBPMEZCUTB3c1owSkJRVTBzVFVGQlRTdzBRa0ZCTkVJc1RVRkJiRU1zUTBGQlRqdEJRVU5FTzBGQlEwWTdRVUZEUmpzN08ybERRVVZaTEUwc1JVRkJVU3hITEVWQlFVczdRVUZEZUVJc1ZVRkJTU3hYUVVGWExFZEJRV1lzUlVGQmIwSTdRVUZEYkVJc1lVRkJTeXhQUVVGTUxFTkJRV0VzZFVKQlFXSXNSMEZCZFVNc1JVRkJka003UVVGRFFTeGhRVUZMTEU5QlFVd3NRMEZCWVN4WlFVRmlMRWRCUVRSQ0xFVkJRVFZDTzBGQlEwRXNZVUZCU3l4UFFVRk1MRU5CUVdFc1owSkJRV0lzUjBGQlowTXNVMEZCYUVNN1FVRkRSQ3hQUVVwRUxFMUJTVTg3UVVGRFRDeFpRVUZKTEZkQlFWY3NhMEpCUVdZc1JVRkJiVU03UVVGRGFrTXNhVUpCUVU4c1MwRkJTeXhQUVVGTUxFTkJRV0VzZFVKQlFXSXNRMEZCY1VNc1IwRkJja01zUTBGQlVEdEJRVU5FTEZOQlJrUXNUVUZGVHp0QlFVTk1MR05CUVVrc1YwRkJWeXhOUVVGbUxFVkJRWFZDTzBGQlEzSkNMRzFDUVVGUExFdEJRVXNzVDBGQlRDeERRVUZoTEZsQlFXSXNRMEZCTUVJc1IwRkJNVUlzUTBGQlVEdEJRVU5FTEZkQlJrUXNUVUZGVHp0QlFVTk1MR3RDUVVGTkxFMUJRVTBzTkVKQlFUUkNMRTFCUVd4RExFTkJRVTQ3UVVGRFJEdEJRVU5HTzBGQlEwWTdRVUZEUmpzN095dENRVVZWTEVjc1JVRkJTeXhKTEVWQlFVMDdRVUZEY0VJc1lVRkJUeXhMUVVGTExFOUJRVXdzUTBGQllTeFpRVUZpTEVOQlFUQkNMRWRCUVRGQ0xFVkJRU3RDTEV0QlFVc3NTMEZCY0VNc1JVRkJNa01zUzBGQlN5eE5RVUZvUkN4RlFVRjNSQ3hMUVVGTExGTkJRVGRFTEVOQlFWQTdRVUZEUkRzN096aENRVVZUTEU4c1JVRkJVenRCUVVOcVFpeFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMR0ZCUVU4c1RVRkJUU3hQUVVGT0xFTkJRV01zVTBGQlpDeERRVUYzUWl4UFFVRjRRaXhEUVVGUU8wRkJRMFE3T3p0dFEwRkZZeXhMTEVWQlFVOHNUU3hGUVVGUk8wRkJRelZDTEZWQlFVa3NWMEZCVnl4TFFVRkxMRTlCUVV3c1EwRkJZU3hOUVVFMVFqdEJRVU5CTEZWQlFVa3NZMEZCWXl4RlFVRnNRanRCUVVOQkxGVkJRVWtzVTBGQlV5eExRVUZVTEVWQlFXZENMRTFCUVdoQ0xFMUJRVFJDTEZOQlFXaERMRVZCUVRKRE8wRkJRM3BETEdGQlFVc3NTVUZCU1N4VFFVRlVMRWxCUVhOQ0xGTkJRVk1zUzBGQlZDeEZRVUZuUWl4TlFVRm9RaXhEUVVGMFFpeEZRVUVyUXp0QlFVTTNReXh6UWtGQldTeEpRVUZhTEVOQlFXbENMRk5CUVdwQ08wRkJRMFE3UVVGRFJqdEJRVU5FTEdGQlFVOHNWMEZCVUR0QlFVTkVPenM3TmtKQlJWRXNTeXhGUVVGUExFMHNSVUZCVVN4VExFVkJRVmM3UVVGRGFrTXNWVUZCU1N4WFFVRlhMRXRCUVVzc1QwRkJUQ3hEUVVGaExFMUJRVFZDTzBGQlEwRXNWVUZCU1N4VlFVRlZMRVZCUVdRN08wRkJSVUVzVlVGQlNTeFRRVUZUTEV0QlFWUXNUVUZCYjBJc1UwRkJjRUlzU1VGQmFVTXNVMEZCVXl4TFFVRlVMRVZCUVdkQ0xFMUJRV2hDTEUxQlFUUkNMRk5CUVRkRUxFbEJRVEJGTEZOQlFWTXNTMEZCVkN4RlFVRm5RaXhOUVVGb1FpeEZRVUYzUWl4VFFVRjRRaXhOUVVGMVF5eFRRVUZ5U0N4RlFVRm5TVHRCUVVNNVNDeHJRa0ZCVlN4VFFVRlRMRXRCUVZRc1JVRkJaMElzVFVGQmFFSXNSVUZCZDBJc1UwRkJlRUlzUTBGQlZqdEJRVU5FT3p0QlFVVkVMR0ZCUVU4c1QwRkJVRHRCUVVORU96dEJRVVZFT3pzN096czdPMmREUVVsWkxFc3NSVUZCVHl4TkxFVkJRVkVzVXl4RlFVRlhPMEZCUTNCRExGVkJRVWtzVjBGQlZ5eExRVUZMTEU5QlFVd3NRMEZCWVN4TlFVRTFRanM3UVVGRlFTeFZRVUZKTEZOQlFWTXNTMEZCVkN4TlFVRnZRaXhUUVVGNFFpeEZRVUZ0UXp0QlFVTnFReXhwUWtGQlV5eExRVUZVTEVsQlFXdENMRVZCUVd4Q08wRkJRMFE3UVVGRFJDeFZRVUZKTEZOQlFWTXNTMEZCVkN4RlFVRm5RaXhOUVVGb1FpeE5RVUUwUWl4VFFVRm9ReXhGUVVFeVF6dEJRVU42UXl4cFFrRkJVeXhMUVVGVUxFVkJRV2RDTEUxQlFXaENMRWxCUVRCQ0xFVkJRVEZDTzBGQlEwUTdPMEZCUlVRc1pVRkJVeXhMUVVGVUxFVkJRV2RDTEUxQlFXaENMRVZCUVhkQ0xGTkJRWGhDTEVsQlFYRkRMRVZCUVhKRE8wRkJRMFE3T3p0blEwRkZWeXhMTEVWQlFVOHNUU3hGUVVGUkxGTXNSVUZCVnp0QlFVTndReXhoUVVGUExFdEJRVXNzVDBGQlRDeERRVUZoTEUxQlFXSXNRMEZCYjBJc1MwRkJjRUlzUlVGQk1rSXNUVUZCTTBJc1JVRkJiVU1zVTBGQmJrTXNRMEZCVUR0QlFVTkVPenRCUVVWRU96czdPenM3T3pzclFrRkxWeXhMTEVWQlFVOHNUU3hGUVVGUkxGTXNSVUZCVnl4VExFVkJRVmM3UVVGRE9VTXNWVUZCU1N4WFFVRlhMRXRCUVVzc1QwRkJUQ3hEUVVGaExFMUJRVFZDTzBGQlEwRXNWVUZCU1N4VFFVRlRMRXRCUVZRc1RVRkJiMElzVTBGQmVFSXNSVUZCYlVNN1FVRkRha01zYVVKQlFWTXNTMEZCVkN4SlFVRnJRaXhGUVVGc1FqdEJRVU5FTzBGQlEwUXNWVUZCU1N4VFFVRlRMRXRCUVZRc1JVRkJaMElzVFVGQmFFSXNUVUZCTkVJc1UwRkJhRU1zUlVGQk1rTTdRVUZEZWtNc2FVSkJRVk1zUzBGQlZDeEZRVUZuUWl4TlFVRm9RaXhKUVVFd1FpeEZRVUV4UWp0QlFVTkVPMEZCUTBRc1ZVRkJTU3hUUVVGVExFdEJRVlFzUlVGQlowSXNUVUZCYUVJc1JVRkJkMElzVTBGQmVFSXNUVUZCZFVNc1UwRkJNME1zUlVGQmMwUTdRVUZEY0VRc1lVRkJTeXhYUVVGTUxFTkJRV2xDTEV0QlFXcENMRVZCUVhkQ0xFMUJRWGhDTEVWQlFXZERMRk5CUVdoRE8wRkJRMFE3UVVGRFJDeFZRVUZKTEZOQlFWTXNTMEZCVkN4RlFVRm5RaXhOUVVGb1FpeEZRVUYzUWl4VFFVRjRRaXhGUVVGdFF5eFBRVUZ1UXl4RFFVRXlReXhUUVVFelF5eE5RVUV3UkN4RFFVRkRMRU5CUVM5RUxFVkJRV3RGTzBGQlEyaEZMR2xDUVVGVExFdEJRVlFzUlVGQlowSXNUVUZCYUVJc1JVRkJkMElzVTBGQmVFSXNSVUZCYlVNc1NVRkJia01zUTBGQmQwTXNVMEZCZUVNN1FVRkRSRHRCUVVOR096czdiME5CUldVc1N5eEZRVUZQTEUwc1JVRkJVU3hUTEVWQlFWY3NVeXhGUVVGWE8wRkJRMjVFTEZWQlFVa3NWMEZCVnl4TFFVRkxMRTlCUVV3c1EwRkJZU3hOUVVFMVFqdEJRVU5CTEZWQlFVa3NVVUZCVVN4VFFVRlRMRXRCUVZRc1JVRkJaMElzVFVGQmFFSXNSVUZCZDBJc1UwRkJlRUlzUTBGQldqczdRVUZGUVN4WlFVRk5MRTFCUVU0c1EwRkJZU3hOUVVGTkxFOUJRVTRzUTBGQll5eFRRVUZrTEVOQlFXSXNSVUZCZFVNc1EwRkJka003UVVGRFJEczdPM2RDUVhCSllUdEJRVU5hTEdGQlFVOHNTMEZCU3l4UlFVRmFPMEZCUTBRc1N6dHpRa0ZWVnl4UExFVkJRVk03UVVGRGJrSXNWMEZCU3l4UlFVRk1MRWRCUVdkQ0xFOUJRV2hDTzBGQlEwUTdPenQzUWtGV1V6dEJRVU5TTEdGQlFVOHNTMEZCU3l4SlFVRmFPMEZCUTBRc1N6dHpRa0ZWVHl4SExFVkJRVXM3UVVGRFdDeFhRVUZMTEVsQlFVd3NSMEZCV1N4SFFVRmFPMEZCUTBRN096dDNRa0ZXVXp0QlFVTlNMR0ZCUVU4c1MwRkJTeXhKUVVGYU8wRkJRMFFzU3p0elFrRlZUeXhITEVWQlFVczdRVUZEV0N4WFFVRkxMRWxCUVV3c1IwRkJXU3hIUVVGYU8wRkJRMFE3T3pzN08ydENRV3RJV1N4Wk96czdPenM3T3pzN096czdPenM3T3pzN1FVTndTbVk3T3pzN096dEpRVVZOTEVrN1FVRkZTaXhuUWtGQldTeFRRVUZhTEVWQlFYVkNMRk5CUVhaQ0xFVkJRV3RETEV0QlFXeERMRVZCUVhsRExFMUJRWHBETEVWQlFXbEVPMEZCUVVFN08wRkJReTlETEZOQlFVc3NVMEZCVEN4SFFVRnBRaXg1UWtGQmFrSTdRVUZEUVN4VFFVRkxMRk5CUVV3c1IwRkJhVUlzVTBGQmFrSTdRVUZEUVN4VFFVRkxMRk5CUVV3c1IwRkJhVUlzVTBGQmFrSTdRVUZEUVN4VFFVRkxMRXRCUVV3c1IwRkJZU3hMUVVGaU8wRkJRMEVzVTBGQlN5eE5RVUZNTEVkQlFXTXNUVUZCWkR0QlFVTkVPenM3T3paQ1FXdERVU3hQTEVWQlFWTXNUeXhGUVVGVE8wRkJRM3BDTEZWQlFVa3NTMEZCU3l4VFFVRk1MRU5CUVdVc1dVRkJaaXhEUVVFMFFpeFBRVUUxUWl4RlFVRnhReXhQUVVGeVF5eEZRVUU0UXl4TFFVRkxMRXRCUVc1RUxFVkJRVEJFTEV0QlFVc3NUVUZCTDBRc1EwRkJTaXhGUVVFMFJUdEJRVU14UlN4bFFVRlBMRXRCUVVzc1UwRkJXanRCUVVORUxFOUJSa1FzVFVGRlR6dEJRVU5NTEdWQlFVOHNaMEpCUVZBN1FVRkRSRHRCUVVOR096czdkMEpCZEVObE8wRkJRMlFzWVVGQlR5eExRVUZMTEZWQlFWbzdRVUZEUkN4TE8zTkNRV05oTEZFc1JVRkJWVHRCUVVOMFFpeFhRVUZMTEZWQlFVd3NSMEZCYTBJc1VVRkJiRUk3UVVGRFJEczdPM2RDUVdSbE8wRkJRMlFzWVVGQlR5eExRVUZMTEZWQlFWbzdRVUZEUkN4TE8zTkNRV05oTEZNc1JVRkJWenRCUVVOMlFpeFhRVUZMTEZWQlFVd3NSMEZCYTBJc1UwRkJiRUk3UVVGRFJEczdPM2RDUVdSWE8wRkJRMVlzWVVGQlR5eExRVUZMTEUxQlFWbzdRVUZEUkN4TE8zTkNRV05UTEVzc1JVRkJUenRCUVVObUxGZEJRVXNzVFVGQlRDeEhRVUZqTEV0QlFXUTdRVUZEUkRzN08zZENRV1JaTzBGQlExZ3NZVUZCVHl4TFFVRkxMRTlCUVZvN1FVRkRSQ3hMTzNOQ1FXTlZMRTBzUlVGQlVUdEJRVU5xUWl4WFFVRkxMRTlCUVV3c1IwRkJaU3hOUVVGbU8wRkJRMFE3T3pzN08ydENRVmRaTEVrN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRM0pFWmpzN096czdPMGxCUlUwc1lUczdPenM3T3pzN096czJRa0ZGU3l4cFFpeEZRVUZ0UWp0QlFVTXhRaXhWUVVGSkxHdENRVUZyUWl4UFFVRnNRaXhEUVVFd1FpeExRVUV4UWl4TlFVRnhReXhEUVVGRExFTkJRVEZETEVWQlFUWkRPMEZCUXpORExHVkJRVThzUzBGQlVEdEJRVU5FTEU5QlJrUXNUVUZGVHp0QlFVTk1MRmxCUVVrc2EwSkJRV3RDTEU5QlFXeENMRU5CUVRCQ0xFbEJRVEZDTEUxQlFXOURMRU5CUVVNc1EwRkJla01zUlVGQk5FTTdRVUZETVVNc2FVSkJRVThzU1VGQlVEdEJRVU5FTEZOQlJrUXNUVUZGVHp0QlFVTk1MR2xDUVVGUExHZENRVUZRTzBGQlEwUTdRVUZEUmp0QlFVTkdPenM3T3p0clFrRkpXU3hoT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTnNRbVk3T3pzN096dEpRVVZOTEdVN096czdPenM3T3pzN05rSkJSVXNzYVVJc1JVRkJiVUk3UVVGRE1VSXNWMEZCU3l4SlFVRkpMRU5CUVZRc1NVRkJZeXhwUWtGQlpDeEZRVUZwUXp0QlFVTXZRaXhaUVVGSkxHdENRVUZyUWl4RFFVRnNRaXhOUVVGNVFpeG5Ra0ZCTjBJc1JVRkJLME03UVVGRE4wTXNhVUpCUVU4c2EwSkJRV3RDTEVOQlFXeENMRU5CUVZBN1FVRkRSRHRCUVVOR096dEJRVVZFTEdGQlFVOHNaMEpCUVZBN1FVRkRSRHM3T3pzN2EwSkJSMWtzWlRzN096czdPenM3T3pzN096czdPenM3TzBGRFptWTdPenM3T3p0SlFVVk5MRk03UVVGRlNpeHhRa0ZCV1N4VFFVRmFMRVZCUVhWQ0xGRkJRWFpDTEVWQlFXbERMRTFCUVdwRExFVkJRWGxETzBGQlFVRTdPMEZCUTNaRExGTkJRVXNzVTBGQlRDeEhRVUZwUWl4VFFVRnFRanRCUVVOQkxGTkJRVXNzVVVGQlRDeEhRVUZuUWl4UlFVRm9RanRCUVVOQkxGTkJRVXNzVFVGQlRDeEhRVUZqTEUxQlFXUTdRVUZEUVN4VFFVRkxMRk5CUVV3c1IwRkJhVUlzZVVKQlFXcENPMEZCUTBRN096czdhVU5CTUVKWkxFOHNSVUZCVXl4UExFVkJRVk03UVVGRE4wSXNZMEZCVVN4TFFVRkxMRk5CUVdJc1NVRkJNRUlzUlVGQlJTeFRRVUZUTEU5QlFWZ3NSVUZCTVVJN1FVRkRRU3hWUVVGSkxGRkJRVkVzVVVGQlVTeExRVUZMTEZOQlFXSXNRMEZCV2pzN1FVRkZRU3hWUVVGSkxFdEJRVXNzVVVGQlRDeExRVUZyUWl4SlFVRjBRaXhGUVVFMFFqdEJRVUZGTzBGQlF6VkNMRmxCUVVrc1owSkJRV2RDTEZGQlFWRXNSVUZCVWl4RFFVRlhMRXRCUVZnc1EwRkJhVUlzUjBGQmFrSXNRMEZCY0VJN1FVRkRRU3h6UWtGQll5eEhRVUZrTzBGQlEwRXNkMEpCUVdkQ0xHTkJRV01zUTBGQlpDeEpRVUZ0UWl4SlFVRnVRaXhIUVVFd1FpeGpRVUZqTEVOQlFXUXNRMEZCTVVNN1FVRkRRU3hoUVVGTExFMUJRVXdzUjBGQll5eFJRVUZSTEdWQlFWSXNRMEZCZDBJc2NVSkJRWGhDTEVOQlFUaERMR0ZCUVRsRExFTkJRV1E3UVVGRFJEczdRVUZGUkN4aFFVRlBMRXRCUVVzc1UwRkJUQ3hEUVVGbExFdEJRVXNzVVVGQmNFSXNSVUZCT0VJc1EwRkJReXhMUVVGTExFMUJRVTRzUlVGQll5eExRVUZrTEVOQlFUbENMRU5CUVZBN1FVRkRSRHM3TzNkQ1FYQkRaVHRCUVVOa0xHRkJRVThzUzBGQlN5eFZRVUZhTzBGQlEwUXNTenR6UWtGVllTeFRMRVZCUVZjN1FVRkRka0lzVjBGQlN5eFZRVUZNTEVkQlFXdENMRk5CUVd4Q08wRkJRMFE3T3p0M1FrRldZenRCUVVOaUxHRkJRVThzUzBGQlN5eFRRVUZhTzBGQlEwUXNTenR6UWtGVldTeFJMRVZCUVZVN1FVRkRja0lzVjBGQlN5eFRRVUZNTEVkQlFXbENMRkZCUVdwQ08wRkJRMFE3T3p0M1FrRldXVHRCUVVOWUxHRkJRVThzUzBGQlN5eFBRVUZhTzBGQlEwUXNTenR6UWtGVlZTeE5MRVZCUVZFN1FVRkRha0lzVjBGQlN5eFBRVUZNTEVkQlFXVXNUVUZCWmp0QlFVTkVPenM3T3p0clFrRnJRbGtzVXpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRia1JtT3pzN096czdTVUZGVFN4eFFqczdPMEZCUlVvc2FVTkJRVmtzVTBGQldpeEZRVUYxUWl4UlFVRjJRaXhGUVVGcFF5eE5RVUZxUXl4RlFVRjVRenRCUVVGQk8wRkJRVUVzTUVoQlEycERMRk5CUkdsRExFVkJRM1JDTEZGQlJITkNMRVZCUTFvc1RVRkVXVHRCUVVWNFF6czdPenRwUTBGRldTeFBMRVZCUVZNc1R5eEZRVUZUTEVzc1JVRkJUeXhOTEVWQlFWRTdRVUZETlVNc1ZVRkJTU3hwUWtGQmFVSXNVVUZCVVN4SlFVRlNMRXRCUVdsQ0xGZEJRWFJETzBGQlEwRXNWVUZCU1N4cFFrRkJhVUlzVVVGQlVTeGpRVUZTTEVOQlFYVkNMRkZCUVZFc1NVRkJMMElzUTBGQmNrSTdRVUZEUVN4VlFVRkpMR2xDUVVGcFFpeGpRVUZ5UWl4RlFVRnhRenRCUVVOdVF5eFpRVUZKTEcxQ1FVRktPMEZCUTBFc1owSkJRVkVzUzBGQlVqdEJRVU5GTEdWQlFVc3NVVUZCVER0QlFVTkZMSGxDUVVGaExFbEJRV0k3UVVGRFFUdEJRVU5HTEdWQlFVc3NVMEZCVER0QlFVTkZMR2RDUVVGSkxHRkJRV0VzVVVGQlVTeGxRVUZTTEVOQlFYZENMR05CUVhoQ0xFVkJRV3BDTzBGQlEwRXNlVUpCUVdFc1YwRkJWeXhWUVVGNFFqdEJRVU5CTzBGQlEwWXNaVUZCU3l4TlFVRk1PMEZCUTBVc1owSkJRVWtzVlVGQlZTeFJRVUZSTEdWQlFWSXNRMEZCZDBJc2QwSkJRWGhDTEVOQlFXbEVMRkZCUVZFc1RVRkJVaXhEUVVGbExGRkJRVkVzUlVGQmRrSXNRMEZCYWtRc1EwRkJaRHRCUVVOQkxHZENRVUZKTEZGQlFWRXNVVUZCVVN4bFFVRlNMRU5CUVhkQ0xHVkJRWGhDTEVOQlFYZERMRTlCUVhoRExFTkJRVm83UVVGRFFTeDVRa0ZCWVN4WFFVRlhMRXRCUVhoQ08wRkJRMEU3UVVGRFJpeGxRVUZMTEZsQlFVdzdRVUZEUlN4blFrRkJTU3huUWtGQlowSXNVVUZCVVN4SlFVRlNMRU5CUVdFc1VVRkJha003UVVGRFFTeDVRa0ZCWVN4WFFVRlhMR0ZCUVhoQ08wRkJRMEU3UVVGb1FrbzdRVUZyUWtFc1pVRkJUeXhWUVVGUU8wRkJRMFFzVDBGeVFrUXNUVUZ4UWs4N1FVRkRUQ3hsUVVGUExFdEJRVkE3UVVGRFJEdEJRVU5HT3pzN096dHJRa0ZIV1N4eFFqczdPenM3T3pzN096czdPenM3T3pzN08wRkRkRU5tT3pzN08wbEJSVTBzVXp0QlFVVktMSFZDUVVGak8wRkJRVUU3TzBGQlExb3NVMEZCU3l4MVFrRkJUQ3hIUVVFclFpeEZRVUV2UWp0QlFVTkJMRk5CUVVzc1pVRkJUQ3hIUVVGMVFpeEpRVUYyUWp0QlFVTkJMRk5CUVVzc1RVRkJUQ3hIUVVGakxFVkJRV1E3UVVGRFJEczdPenQzUWtGRmNVSTdRVUZEY0VJc1lVRkJUeXhMUVVGTExHZENRVUZhTzBGQlEwUXNTenR6UWtGTmJVSXNVU3hGUVVGVk8wRkJRelZDTEZkQlFVc3NaMEpCUVV3c1IwRkJkMElzVVVGQmVFSTdRVUZEUkRzN08zZENRVTQyUWp0QlFVTTFRaXhoUVVGUExFdEJRVXNzZDBKQlFWbzdRVUZEUkN4TE8zTkNRVTB5UWl4UkxFVkJRVlU3UVVGRGNFTXNWMEZCU3l4M1FrRkJUQ3hIUVVGblF5eFJRVUZvUXp0QlFVTkVPenM3YzBKQlJWRXNSeXhGUVVGTE8wRkJRMW9zVlVGQlNTeERRVUZETEVsQlFVa3NUMEZCVkN4RlFVRnJRanRCUVVOb1FpeFpRVUZKTEU5QlFVOHNSMEZCVUN4TFFVRmxMRkZCUVc1Q0xFVkJRVFpDTzBGQlF6TkNMR1ZCUVVzc1MwRkJUQ3hIUVVGaExFZEJRV0k3UVVGRFJDeFRRVVpFTEUxQlJVODdRVUZEVEN4alFVRkpMRTlCUVU4c1NVRkJTU3hKUVVGS0xFVkJRVmc3UVVGRFFTeGpRVUZKTEUxQlFVMHNUMEZCVHl4TFFVRkxMRTlCUVV3c1JVRkJVQ3hEUVVGV08wRkJRMEVzWTBGQlNTeEpRVUZKTEUxQlFVb3NTMEZCWlN4RFFVRnVRaXhGUVVGelFqdEJRVU53UWl4clFrRkJUU3hOUVVGTkxFZEJRVm83UVVGRFJEdEJRVU5FTEdOQlFVa3NVVUZCVVN4UFFVRlBMRXRCUVVzc1VVRkJUQ3hMUVVGclFpeERRVUY2UWl4RFFVRmFPMEZCUTBFc1kwRkJTU3hOUVVGTkxFMUJRVTRzUzBGQmFVSXNRMEZCY2tJc1JVRkJkMEk3UVVGRGRFSXNiMEpCUVZFc1RVRkJUU3hMUVVGa08wRkJRMFE3TzBGQlJVUXNaVUZCU3l4TFFVRk1MRWRCUVdFc1RVRkJUU3hIUVVGT0xFZEJRVmtzUzBGQldpeEhRVUZ2UWl4SFFVRndRaXhIUVVFd1FpeExRVUZMTEZkQlFVd3NSVUZCZGtNN1FVRkRSRHRCUVVOR08wRkJRMFlzU3p0M1FrRnRRMVU3UVVGRFZDeGhRVUZQTEV0QlFVc3NTMEZCV2p0QlFVTkVPenM3YzBKQmJrTlZMRTBzUlVGQlVUdEJRVU5xUWl4WFFVRkxMRTlCUVV3c1IwRkJaU3gzUWtGQldTeFBRVUZQTEU5QlFWQXNRMEZCWlN4SlFVRm1MRU5CUVc5Q0xGRkJRWEJDTEVOQlFUWkNMRmRCUVRkQ0xFTkJRWGxETEZGQlFYSkVMRVZCUVN0RUxFMUJRVGxGTzBGQlEwUXNTenQzUWtGdFExazdRVUZEV0N4aFFVRlBMRXRCUVVzc1QwRkJXanRCUVVORU96czdjMEpCYmtOVkxFMHNSVUZCVVR0QlFVTnFRaXhYUVVGTExFOUJRVXdzUjBGQlpTeFBRVUZQTEU5QlFWQXNRMEZCWlN4SlFVRm1MRU5CUVc5Q0xGRkJRWEJDTEVOQlFUWkNMRmRCUVRkQ0xFTkJRWGxETEZGQlFYaEVPMEZCUTBRc1N6dDNRa0Z0UTFrN1FVRkRXQ3hWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEdGQlFVOHNUVUZCVFN4UFFVRmlPMEZCUTBRN096dHpRa0Z3UTFFc1J5eEZRVUZMTzBGQlExb3NWVUZCU1N4RFFVRkRMRWxCUVVrc1QwRkJWQ3hGUVVGclFqdEJRVU5vUWl4WlFVRkpMRWRCUVVvc1JVRkJVenRCUVVOUUxHVkJRVXNzUzBGQlRDeEhRVUZoTEVkQlFXSTdRVUZEUkN4VFFVWkVMRTFCUlU4N1FVRkRUQ3hqUVVGSkxFOUJRVTBzU1VGQlNTeEpRVUZLTEVWQlFWWTdRVUZEUVN4alFVRkpMRlZCUVZVc1QwRkJUeXhMUVVGSkxGVkJRVW9zUlVGQlVDeERRVUZrTzBGQlEwRXNZMEZCU1N4UlFVRlJMRTFCUVZJc1MwRkJiVUlzUTBGQmRrSXNSVUZCTUVJN1FVRkRlRUlzYzBKQlFWVXNUVUZCVFN4UFFVRm9RanRCUVVORU8wRkJRMFFzWlVGQlN5eExRVUZNTEVkQlFXRXNVMEZCVXl4UFFVRlBMRXRCUVVrc1VVRkJTaXhGUVVGUUxFbEJRWGxDTEU5QlFXeERMRU5CUVdJN1FVRkRSRHRCUVVOR08wRkJRMFlzU3p0M1FrRjVRbFU3UVVGRFZDeFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMR0ZCUVU4c1RVRkJUU3hMUVVGaU8wRkJRMFE3T3p0elFrRXhRbGNzUnl4RlFVRkxPMEZCUTJZc1ZVRkJTU3hEUVVGRExFbEJRVWtzVDBGQlZDeEZRVUZyUWp0QlFVTm9RaXhaUVVGSkxFZEJRVW9zUlVGQlV6dEJRVU5RTEdWQlFVc3NVVUZCVEN4SFFVRm5RaXhIUVVGb1FqdEJRVU5FTEZOQlJrUXNUVUZGVHp0QlFVTk1MR1ZCUVVzc1VVRkJUQ3hIUVVGblFpeFBRVUZQTEVsQlFVa3NTVUZCU2l4SFFVRlhMRTFCUVZnc1JVRkJVQ3hEUVVGb1FqdEJRVU5FTzBGQlEwWTdRVUZEUml4TE8zZENRVzlDWVR0QlFVTmFMR0ZCUVU4c1MwRkJTeXhSUVVGYU8wRkJRMFE3T3pzN08ydENRVWxaTEZNN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOMlIyWTdPenM3UVVGRFFUczdRVUZEUVRzN096dEJRVU5CT3pzN08wRkJRMEU3T3pzN1FVRkRRVHM3T3pzN08wbEJSVTBzWXpzN08wRkJSVW9zTUVKQlFWa3NVVUZCV2l4RlFVRnpRaXhsUVVGMFFpeEZRVUYxUXp0QlFVRkJPenRCUVVGQk96dEJRVVZ5UXl4WFFVRkxMRkZCUVV3c1IwRkJaMElzVVVGQmFFSTdRVUZEUVN4WFFVRkxMR1ZCUVV3c1IwRkJkVUlzWlVGQmRrSTdRVUZEUVN4WFFVRkxMR2RDUVVGTUxFZEJRWGRDTEZOQlFYaENPMEZCUTBFc1YwRkJTeXhaUVVGTUxFZEJRVzlDTEVWQlFYQkNPMEZCVEhGRE8wRkJUWFJET3pzN096aENRWGRGVXl4UExFVkJRVk03UVVGRGFrSXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzWVVGQlR5eHpRa0ZCV1N4VlFVRkRMRTlCUVVRc1JVRkJWU3hOUVVGV0xFVkJRWEZDTzBGQlEzUkRMR2RDUVVGUkxFZEJRVklzUTBGQldTeDFRa0ZCV2p0QlFVTkJMR2RDUVVGUkxFZEJRVklzUTBGQldTeFBRVUZhTzBGQlEwRXNaMEpCUVZFc1NVRkJVaXhIUVVGbExGRkJRVkVzU1VGQlVpeEpRVUZuUWl4RlFVRXZRanRCUVVOQkxGbEJRVWtzWlVGQlNqdEJRVU5CTEZsQlFVa3NZVUZCWVN4TlFVRk5MRmRCUVU0c1EwRkJhMElzVDBGQmJFSXNRMEZCYWtJN1FVRkRRU3haUVVGSkxHOUNRVUZ2UWl4TlFVRk5MR3RDUVVGT0xFTkJRWGxDTEU5QlFYcENMRU5CUVhoQ08wRkJRMEVzV1VGQlNTeGhRVUZoTEUxQlFVMHNhVUpCUVU0c1EwRkJkMElzVDBGQmVFSXNRMEZCYWtJN1FVRkRRU3haUVVGSkxGVkJRVW9zUlVGQlowSTdRVUZEWkN4alFVRkpMR2xDUVVGS0xFVkJRWFZDTzBGQlEzSkNMR2RDUVVGSkxGVkJRVW9zUlVGQlowSTdRVUZEWkN4dlFrRkJUU3hQUVVGT0xFTkJRV01zVDBGQlpDeEZRVUYxUWl4SlFVRjJRaXhEUVVFMFFpeHRRa0ZCVnp0QlFVTnlReXh2UWtGQlNTeFhRVUZYTzBGQlEySXNlVU5CUVhWQ0xFMUJRVTBzZDBKQlFVNHNRMEZCSzBJc1QwRkJMMElzUlVGQmQwTXNhVUpCUVhoRExFTkJSRlk3UVVGRllpdzRRa0ZCV1N4TlFVRk5PMEZCUmt3c2FVSkJRV1k3UVVGSlFTeDVRa0ZCVXl4TlFVRk5MRmxCUVU0c1EwRkJiVUlzUjBGQmJrSXNRMEZCZFVJc1lVRkJka0lzUTBGQmNVTXNUMEZCY2tNc1JVRkJPRU1zVVVGQk9VTXNRMEZCVkR0QlFVTkJMSE5DUVVGTkxGbEJRVTRzUTBGQmJVSXNSMEZCYmtJc1EwRkJkVUlzWlVGQmRrSXNRMEZCZFVNc1QwRkJka01zUlVGQlowUXNVVUZCYUVRc1JVRkJNRVFzVFVGQk1VUTdRVUZEUVN4dlFrRkJTU3hYUVVGWExHZENRVUZtTEVWQlFXbERPMEZCUXk5Q0xESkNRVUZUTEUxQlFVMHNaVUZCWmp0QlFVTkJMREJDUVVGUkxFbEJRVklzUTBGQllTeEpRVUZpTEVkQlFXOUNMRXRCUVhCQ08wRkJRMFE3UVVGRFJDeHZRa0ZCU1N4TlFVRktMRVZCUVZrN1FVRkRWaXd3UWtGQlVTeEpRVUZTTEVOQlFXRXNTVUZCWWl4SFFVRnhRaXhSUVVGUkxFbEJRVklzUTBGQllTeEpRVUZpTEV0QlFYTkNMRk5CUVhaQ0xFZEJRVzlETEVsQlFYQkRMRWRCUVRKRExGRkJRVkVzU1VGQlVpeERRVUZoTEVsQlFUVkZPMEZCUTBFc01FSkJRVkVzVDBGQlVqdEJRVU5FTEdsQ1FVaEVMRTFCUjA4N1FVRkRUQ3g1UWtGQlR5eHBRa0ZCVUR0QlFVTkVPMEZCUTBZc1pVRnFRa1FzUlVGcFFrY3NWVUZCUXl4TFFVRkVMRVZCUVZjN1FVRkJSU3gxUWtGQlR5eExRVUZRTzBGQlFXZENMR1ZCYWtKb1F6dEJRVzFDUkN4aFFYQkNSQ3hOUVc5Q1R6dEJRVU5NTEd0Q1FVRkpMRmRCUVZjN1FVRkRZaXgxUTBGQmRVSXNUVUZCVFN4M1FrRkJUaXhEUVVFclFpeFBRVUV2UWl4RlFVRjNReXhwUWtGQmVFTXNRMEZFVmp0QlFVVmlMRFJDUVVGWkxFMUJRVTA3UVVGR1RDeGxRVUZtTzBGQlNVRXNkVUpCUVZNc1RVRkJUU3haUVVGT0xFTkJRVzFDTEVkQlFXNUNMRU5CUVhWQ0xHRkJRWFpDTEVOQlFYRkRMRTlCUVhKRExFVkJRVGhETEZGQlFUbERMRU5CUVZRN1FVRkRRU3h2UWtGQlRTeFpRVUZPTEVOQlFXMUNMRWRCUVc1Q0xFTkJRWFZDTEdWQlFYWkNMRU5CUVhWRExFOUJRWFpETEVWQlFXZEVMRkZCUVdoRUxFVkJRVEJFTEUxQlFURkVPMEZCUTBFc2EwSkJRVWtzVjBGQlZ5eG5Ra0ZCWml4RlFVRnBRenRCUVVNdlFpeDVRa0ZCVXl4TlFVRk5MR1ZCUVdZN1FVRkRRU3gzUWtGQlVTeEpRVUZTTEVOQlFXRXNTVUZCWWl4SFFVRnZRaXhMUVVGd1FqdEJRVU5FTzBGQlEwUXNhMEpCUVVrc1RVRkJTaXhGUVVGWk8wRkJRMVlzZDBKQlFWRXNTVUZCVWl4RFFVRmhMRWxCUVdJc1IwRkJjVUlzVVVGQlVTeEpRVUZTTEVOQlFXRXNTVUZCWWl4TFFVRnpRaXhUUVVGMlFpeEhRVUZ2UXl4SlFVRndReXhIUVVFeVF5eFJRVUZSTEVsQlFWSXNRMEZCWVN4SlFVRTFSVHRCUVVOQkxIZENRVUZSTEU5QlFWSTdRVUZEUkN4bFFVaEVMRTFCUjA4N1FVRkRUQ3gxUWtGQlR5eHBRa0ZCVUR0QlFVTkVPMEZCUTBZN1FVRkRSaXhYUVhaRFJDeE5RWFZEVHp0QlFVTk1MR2RDUVVGSkxGbEJRVmtzVFVGQlRTeFZRVUZPTEVOQlFXbENMRTlCUVdwQ0xFTkJRV2hDTzBGQlEwRXNaMEpCUVVrc1UwRkJTaXhGUVVGbE8wRkJRMklzYjBKQlFVMHNXVUZCVGl4RFFVRnRRaXhQUVVGdVFpeEZRVUUwUWl4SlFVRTFRaXhEUVVGcFF5eHZRa0ZCV1R0QlFVTXpReXgzUWtGQlVTeEpRVUZTTEVOQlFXRXNVVUZCWWl4SFFVRjNRaXhSUVVGNFFqdEJRVU5CTEc5Q1FVRkpMRmRCUVZjN1FVRkRZaXg1UTBGQmRVSXNUVUZCVFN4M1FrRkJUaXhEUVVFclFpeFBRVUV2UWl4RlFVRjNReXhwUWtGQmVFTXNRMEZFVmp0QlFVVmlMRGhDUVVGWkxFMUJRVTA3UVVGR1RDeHBRa0ZCWmp0QlFVbEJMSGxDUVVGVExFMUJRVTBzV1VGQlRpeERRVUZ0UWl4SFFVRnVRaXhEUVVGMVFpeGhRVUYyUWl4RFFVRnhReXhQUVVGeVF5eEZRVUU0UXl4UlFVRTVReXhEUVVGVU8wRkJRMEVzYzBKQlFVMHNXVUZCVGl4RFFVRnRRaXhIUVVGdVFpeERRVUYxUWl4bFFVRjJRaXhEUVVGMVF5eFBRVUYyUXl4RlFVRm5SQ3hSUVVGb1JDeEZRVUV3UkN4TlFVRXhSRHRCUVVOQkxHOUNRVUZKTEZkQlFWY3NaMEpCUVdZc1JVRkJhVU03UVVGREwwSXNNa0pCUVZNc1RVRkJUU3hsUVVGbU8wRkJRMEVzTUVKQlFWRXNTVUZCVWl4RFFVRmhMRWxCUVdJc1IwRkJiMElzUzBGQmNFSTdRVUZEUkR0QlFVTkVMRzlDUVVGSkxFMUJRVW9zUlVGQldUdEJRVU5XTERCQ1FVRlJMRWxCUVZJc1EwRkJZU3hKUVVGaUxFZEJRWEZDTEZGQlFWRXNTVUZCVWl4RFFVRmhMRWxCUVdJc1MwRkJjMElzVTBGQmRrSXNSMEZCYjBNc1NVRkJjRU1zUjBGQk1rTXNVVUZCVVN4SlFVRlNMRU5CUVdFc1NVRkJOVVU3UVVGRFFTeHpRa0ZCU1N4VlFVRktMRVZCUVdkQ08wRkJRMlFzTUVKQlFVMHNUMEZCVGl4RFFVRmpMRTlCUVdRc1JVRkJkVUlzU1VGQmRrSXNRMEZCTkVJc2JVSkJRVmM3UVVGRGNrTXNPRUpCUVZFc1QwRkJVanRCUVVORUxIRkNRVVpFTEVWQlJVY3NWVUZCUXl4TFFVRkVMRVZCUVZjN1FVRkJSU3cyUWtGQlR5eExRVUZRTzBGQlFXZENMSEZDUVVab1F6dEJRVWRFTEcxQ1FVcEVMRTFCU1U4N1FVRkRUQ3cwUWtGQlVTeFBRVUZTTzBGQlEwUTdRVUZEUml4cFFrRlVSQ3hOUVZOUE8wRkJRMHdzZVVKQlFVOHNhVUpCUVZBN1FVRkRSRHRCUVVOR0xHVkJlRUpFTEVWQmQwSkhMRlZCUVVNc1MwRkJSQ3hGUVVGWE8wRkJRVVVzZFVKQlFVOHNTMEZCVUR0QlFVRm5RaXhsUVhoQ2FFTTdRVUY1UWtRc1lVRXhRa1FzVFVFd1FrODdRVUZEVEN4clFrRkJTU3haUVVGWE8wRkJRMklzZFVOQlFYVkNMRTFCUVUwc2QwSkJRVTRzUTBGQkswSXNUMEZCTDBJc1JVRkJkME1zYVVKQlFYaERMRU5CUkZZN1FVRkZZaXcwUWtGQldTeE5RVUZOTzBGQlJrd3NaVUZCWmp0QlFVbEJMSFZDUVVGVExFMUJRVTBzV1VGQlRpeERRVUZ0UWl4SFFVRnVRaXhEUVVGMVFpeGhRVUYyUWl4RFFVRnhReXhQUVVGeVF5eEZRVUU0UXl4VFFVRTVReXhEUVVGVU8wRkJRMEVzYjBKQlFVMHNXVUZCVGl4RFFVRnRRaXhIUVVGdVFpeERRVUYxUWl4bFFVRjJRaXhEUVVGMVF5eFBRVUYyUXl4RlFVRm5SQ3hUUVVGb1JDeEZRVUV3UkN4TlFVRXhSRHRCUVVOQkxHdENRVUZKTEZkQlFWY3NaMEpCUVdZc1JVRkJhVU03UVVGREwwSXNlVUpCUVZNc1RVRkJUU3hsUVVGbU8wRkJRMEVzZDBKQlFWRXNTVUZCVWl4RFFVRmhMRWxCUVdJc1IwRkJiMElzUzBGQmNFSTdRVUZEUkR0QlFVTkVMR3RDUVVGSkxFMUJRVW9zUlVGQldUdEJRVU5XTEhkQ1FVRlJMRWxCUVZJc1EwRkJZU3hKUVVGaUxFZEJRWEZDTEZGQlFWRXNTVUZCVWl4RFFVRmhMRWxCUVdJc1MwRkJjMElzVTBGQmRrSXNSMEZCYjBNc1NVRkJjRU1zUjBGQk1rTXNVVUZCVVN4SlFVRlNMRU5CUVdFc1NVRkJOVVU3UVVGRFFTeDNRa0ZCVVN4UFFVRlNPMEZCUTBRc1pVRklSQ3hOUVVkUE8wRkJRMHdzZFVKQlFVOHNhVUpCUVZBN1FVRkRSRHRCUVVOR08wRkJRMFk3UVVGRFJpeFRRWFpHUkN4TlFYVkdUenRCUVVOTUxHMUNRVUZUTEUxQlFVMHNaVUZCWmp0QlFVTkJMR3RDUVVGUkxFbEJRVklzUTBGQllTeEpRVUZpTEVkQlFXOUNMRXRCUVhCQ08wRkJRMEVzWTBGQlNTeE5RVUZLTEVWQlFWazdRVUZEVml4dlFrRkJVU3hQUVVGU08wRkJRMFFzVjBGR1JDeE5RVVZQTzBGQlEwd3NiVUpCUVU4c2FVSkJRVkE3UVVGRFJEdEJRVU5HTzBGQlEwWXNUMEY0UjAwc1EwRkJVRHRCUVhsSFJEczdPelJDUVVWUExFOHNSVUZCVXp0QlFVTm1MRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEdGQlFVOHNjMEpCUVZrc1ZVRkJVeXhQUVVGVUxFVkJRV2xDTEUxQlFXcENMRVZCUVhsQ08wRkJRekZETEdOQlFVMHNVVUZCVGl4RFFVRmxMR05CUVdZc1EwRkJPRUlzVDBGQk9VSXNSVUZCZFVNc1NVRkJka01zUTBGQk5FTXNWVUZCVXl4SFFVRlVMRVZCUVdNN1FVRkRlRVFzYTBKQlFWRXNSMEZCVWp0QlFVTkVMRk5CUmtRc1JVRkZSeXhWUVVGRExFdEJRVVFzUlVGQlZ6dEJRVU5hTEdsQ1FVRlBMRXRCUVZBN1FVRkRSQ3hUUVVwRU8wRkJTMFFzVDBGT1RTeERRVUZRTzBGQlQwUTdPenN5UTBGRmMwSXNUeXhGUVVGVExGa3NSVUZCWXp0QlFVTTFReXhWUVVGSkxGbEJRVW9zUlVGQmEwSTdRVUZEYUVJc1dVRkJTU3hMUVVGTExGRkJRVkVzUlVGQlVpeERRVUZYTEV0QlFWZ3NRMEZCYVVJc1IwRkJha0lzUTBGQlZEdEJRVU5CTEZsQlFVa3NXVUZCV1N4SFFVRkhMRTlCUVVnc1EwRkJWeXhqUVVGWUxFTkJRV2hDTzBGQlEwRXNXVUZCU1N3eVFrRkJNa0lzWTBGQll5eERRVUZETEVOQlFUbERPMEZCUTBFc1dVRkJTU3hwUWtGQmFVSXNTMEZCU3l4alFVRk1MRU5CUVc5Q0xGRkJRVkVzU1VGQk5VSXNRMEZCY2tJN1FVRkRRU3haUVVGSkxESkNRVUV5UWl4alFVRXZRaXhGUVVFclF6dEJRVU0zUXl4aFFVRkhMRWRCUVVnN1FVRkRRU3hqUVVGSkxHZENRVUZuUWl4SFFVRkhMRU5CUVVnc1NVRkJVU3hKUVVGU0xFZEJRV1VzUjBGQlJ5eERRVUZJTEVOQlFXWXNSMEZCZFVJc1IwRkJka0lzUjBGQk5rSXNSMEZCUnl4RFFVRklMRU5CUVdwRU8wRkJRMEVzWTBGQlNTeEhRVUZITEUxQlFVZ3NSMEZCV1N4RFFVRm9RaXhGUVVGdFFqdEJRVU5xUWl3MFFrRkJaMElzUjBGQlJ5eERRVUZJTEVsQlFWRXNTVUZCVWl4SFFVRmxMRWRCUVVjc1EwRkJTQ3hEUVVGbUxFZEJRWFZDTEVkQlFYWkNMRWRCUVRaQ0xFZEJRVWNzUTBGQlNDeERRVUUzUWl4SFFVRnhReXhIUVVGeVF5eEhRVUV5UXl4SFFVRkhMRU5CUVVnc1EwRkJNMFE3UVVGRFJEdEJRVU5FTEdWQlFVc3NVVUZCVEN4RFFVRmpMSE5DUVVGa0xFTkJRWEZETEdGQlFYSkRMRVZCUVc5RUxGRkJRVkVzU1VGQlVpeERRVUZoTEZWQlFXcEZPMEZCUTBRN1FVRkRSanRCUVVOR096czdORUpCUlU4c1R5eEZRVUZUTzBGQlEyWXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzWVVGQlR5eHpRa0ZCV1N4VlFVRlRMRTlCUVZRc1JVRkJhVUlzVFVGQmFrSXNSVUZCZVVJN1FVRkRNVU1zWTBGQlRTeFJRVUZPTEVOQlFXVXNZMEZCWml4RFFVRTRRaXhQUVVFNVFpeEZRVUYxUXl4SlFVRjJReXhEUVVFMFF5eFZRVUZETEVkQlFVUXNSVUZCVXp0QlFVTnVSQ3hyUWtGQlVTeEhRVUZTTzBGQlEwUXNVMEZHUkN4RlFVVkhMRlZCUVVNc1MwRkJSQ3hGUVVGWE8wRkJRMW9zYVVKQlFVOHNTMEZCVUR0QlFVTkVMRk5CU2tRN1FVRkxSQ3hQUVU1TkxFTkJRVkE3UVVGUFJEczdPelpEUVVWM1FpeFBMRVZCUVZNc1ZTeEZRVUZaTzBGQlF6VkRMRlZCUVVrc1pVRkJTanM3UVVGRlFTeFZRVUZKTEZWQlFVb3NSVUZCWjBJN1FVRkRaQ3haUVVGSkxGbEJRVmtzUzBGQlN5eGxRVUZNTEVOQlFYRkNMR05CUVhKQ0xFTkJRVzlETEZGQlFWRXNSVUZCTlVNc1EwRkJhRUk3UVVGRFFTeHBRa0ZCVXl4TFFVRkxMSFZDUVVGTUxFTkJRVFpDTEZOQlFUZENMRU5CUVZRN1FVRkRSQ3hQUVVoRUxFMUJSMDg3UVVGRFRDeFpRVUZKTEdOQlFXTXNTMEZCU3l4bFFVRk1MRU5CUVhGQ0xHTkJRWEpDTEVOQlFXOURMRkZCUVZFc1NVRkJOVU1zUTBGQmJFSTdRVUZEUVN4cFFrRkJVeXhMUVVGTExIVkNRVUZNTEVOQlFUWkNMRmRCUVRkQ0xFTkJRVlE3UVVGRFJEdEJRVU5FTEdGQlFVOHNUVUZCVUR0QlFVTkVPenM3YlVOQlJXTXNTU3hGUVVGTk8wRkJRMjVDTEZWQlFVa3NXVUZCV1N4TFFVRkxMRXRCUVV3c1EwRkJWeXhMUVVGWUxFTkJRV2hDTzBGQlEwRXNZVUZCVHl4VlFVRlZMRU5CUVZZc1RVRkJhVUlzVTBGQmFrSXNTVUZCT0VJc1UwRkJVeXhMUVVGTExHVkJRVXdzUTBGQmNVSXNWVUZCY2tJc1IwRkJhME1zUzBGQmFFWTdRVUZEUkRzN095dENRVVZWTEU4c1JVRkJVenRCUVVOc1FpeFZRVUZKTEd0Q1FVRnJRaXhEUVVGRExGbEJRVVFzUlVGQlpTeFRRVUZtTEVWQlFUQkNMRkZCUVRGQ0xFTkJRWFJDTzBGQlEwRXNWVUZCU1N4WlFVRmhMRkZCUVZFc1NVRkJWQ3hEUVVGbExFdEJRV1lzUTBGQmNVSXNTMEZCY2tJc1EwRkJhRUk3UVVGRFFTeFZRVUZKTEdGQlFXRXNWVUZCVlN4RFFVRldMRU5CUVdwQ096dEJRVVZCTEdGQlFVOHNaMEpCUVdkQ0xFOUJRV2hDTEVOQlFYZENMRlZCUVhoQ0xFMUJRWGRETEVOQlFVTXNRMEZCYUVRN1FVRkRSRHM3TzNWRFFVVnJRaXhQTEVWQlFWTTdRVUZETVVJc1lVRkJVU3hSUVVGUkxFbEJRVklzUTBGQllTeFJRVUZrTEVkQlFUQkNMRWxCUVRGQ0xFZEJRV2xETEV0QlFYaERPMEZCUTBRN096c3lRa0ZGVFN4SExFVkJRVXM3UVVGRFZpeFZRVUZKTEZkQlFWY3NTVUZCU1N4TFFVRktMRU5CUVZVc1IwRkJWaXhEUVVGbU8wRkJRMEVzWVVGQlR5eFRRVUZUTEVOQlFWUXNTVUZCWXl4SlFVRmtMRWRCUVhGQ0xGTkJRVk1zUTBGQlZDeERRVUZ5UWl4SFFVRnRReXhIUVVGdVF5eEhRVUY1UXl4VFFVRlRMRU5CUVZRc1EwRkJhRVE3UVVGRFJEczdPMmxEUVVWWkxFOHNSVUZCVXp0QlFVTndRaXhWUVVGSkxGRkJRVkVzU1VGQlVpeExRVUZwUWl4UlFVRnlRaXhGUVVFclFqdEJRVU0zUWl4bFFVRlBMRXRCUVVzc1VVRkJUQ3hEUVVGakxHOUNRVUZrTEVOQlFXMURMRkZCUVZFc1NVRkJVaXhEUVVGaExFMUJRV2hFTEVOQlFWQTdRVUZEUkRzN1FVRkZSQ3hWUVVGSkxGRkJRVkVzU1VGQlVpeExRVUZwUWl4VlFVRnFRaXhKUVVFclFpeFJRVUZSTEVsQlFWSXNRMEZCWVN4TlFVRmlMRXRCUVhkQ0xGTkJRVE5FTEVWQlFYTkZPMEZCUTNCRkxHVkJRVThzUzBGQlN5eFJRVUZNTEVOQlFXTXNiMEpCUVdRc1EwRkJiVU1zVVVGQlVTeEpRVUZTTEVOQlFXRXNUVUZCYUVRc1EwRkJVRHRCUVVORU96dEJRVVZFTEZWQlFVa3NjMEpCUVZVc1VVRkJVU3hKUVVGc1FpeEZRVUYzUWl4SlFVRjRRaXhMUVVGcFF5eFRRVUZ5UXl4RlFVRm5SRHRCUVVNNVF5eGxRVUZQTEV0QlFVc3NVVUZCVEN4RFFVRmpMRzlDUVVGa0xFTkJRVzFETEZGQlFWRXNTVUZCTTBNc1EwRkJVRHRCUVVORUxFOUJSa1FzVFVGRlR6dEJRVU5NTEdWQlFVOHNTMEZCU3l4UlFVRk1MRU5CUVdNc2IwSkJRV1FzUTBGQmJVTXNTMEZCU3l4TlFVRk1MRU5CUVZrc1VVRkJVU3hKUVVGd1FpeERRVUZ1UXl4RFFVRlFPMEZCUTBRN1FVRkRSanM3TzJkRFFVVlhMRThzUlVGQlV6dEJRVU51UWl4VlFVRkpMR3RDUVVGclFpeERRVUZETEZsQlFVUXNSVUZCWlN4cFFrRkJaaXhGUVVGclF5eFRRVUZzUXl4RlFVRTJReXhSUVVFM1F5eERRVUYwUWp0QlFVTkJMRlZCUVVrc1dVRkJZU3hSUVVGUkxFbEJRVlFzUTBGQlpTeExRVUZtTEVOQlFYRkNMRXRCUVhKQ0xFTkJRV2hDTzBGQlEwRXNWVUZCU1N4aFFVRmhMRlZCUVZVc1EwRkJWaXhEUVVGcVFqdEJRVU5CTEZWQlFVa3NWVUZCVnl4UlFVRlJMRVZCUVZRc1EwRkJZU3hMUVVGaUxFTkJRVzFDTEV0QlFXNUNMRU5CUVdRN1FVRkRRU3hWUVVGSkxGZEJRVmtzVVVGQlVTeERRVUZTTEVOQlFXaENPMEZCUTBFc1ZVRkJTU3hsUVVGbExGRkJRVkVzU1VGQmRrSXNTVUZCSzBJc1lVRkJZU3hSUVVGUkxFVkJRWGhFTEVWQlFUUkVPMEZCUXpGRUxHVkJRVThzUzBGQlVEdEJRVU5FTzBGQlEwUXNZVUZCVHl4blFrRkJaMElzVDBGQmFFSXNRMEZCZDBJc1ZVRkJlRUlzVFVGQmQwTXNRMEZCUXl4RFFVRjZReXhKUVVFNFF5eG5Ra0ZCWjBJc1QwRkJhRUlzUTBGQmQwSXNVVUZCZUVJc1RVRkJjME1zUTBGQlF5eERRVUUxUmp0QlFVTkVPenRCUVVWRU96czdPM05EUVVOclFpeFBMRVZCUVZNN1FVRkRla0lzVlVGQlNTeFhRVUZYTEZGQlFWRXNTVUZCVWl4TFFVRnBRaXhSUVVGb1F6dEJRVU5CTEZWQlFVa3NaMEpCUVdkQ0xITkNRVUZWTEZGQlFWRXNTVUZCYkVJc1JVRkJkMElzU1VGQmVFSXNTMEZCYVVNc1UwRkJja1E3UVVGRFFTeFZRVUZKTEdOQlFXTXNjMEpCUVZVc1VVRkJVU3hGUVVGc1FpeEZRVUZ6UWl4SlFVRjBRaXhMUVVFclFpeFRRVUZxUkR0QlFVTkJMRlZCUVVrc2FVSkJRV2xDTERSQ1FVRm5RaXhSUVVGUkxFVkJRWGhDTEVOQlFYSkNPMEZCUTBFc1ZVRkJTU3hqUVVGakxGRkJRVkVzU1VGQlVpeExRVUZwUWl4WFFVRnVRenM3UVVGRlFTeGhRVUZSTEZsQlFWa3NZVUZCV2l4SlFVRTJRaXhYUVVFNVFpeEpRVUVyUXl4WlFVRlpMR0ZCUVZvc1NVRkJOa0lzWTBGQk5VVXNTVUZCSzBZc1YwRkJkRWM3UVVGRFJEczdPM1ZEUVVWclFpeFBMRVZCUVZNc1dTeEZRVUZqTzBGQlEzaERMRlZCUVVrc1dVRkJTaXhGUVVGclFqdEJRVU5vUWl4WlFVRkpMRXRCUVVzc1VVRkJVU3hGUVVGU0xFTkJRVmNzUzBGQldDeERRVUZwUWl4SFFVRnFRaXhEUVVGVU8wRkJRMEVzV1VGQlNTeFpRVUZaTEVkQlFVY3NUMEZCU0N4RFFVRlhMR05CUVZnc1EwRkJhRUk3UVVGRFFTeFpRVUZKTERKQ1FVRXlRaXhqUVVGakxFTkJRVU1zUTBGQk9VTTdRVUZEUVN4WlFVRkpMR2xDUVVGcFFpeExRVUZMTEdOQlFVd3NRMEZCYjBJc1VVRkJVU3hKUVVFMVFpeERRVUZ5UWpzN1FVRkZRU3haUVVGSkxESkNRVUV5UWl4alFVRXZRaXhGUVVFclF6dEJRVU0zUXl4aFFVRkhMRWRCUVVnN1FVRkRRU3hqUVVGSkxHZENRVUZuUWl4SFFVRkhMRU5CUVVnc1NVRkJVU3hKUVVGU0xFZEJRV1VzUjBGQlJ5eERRVUZJTEVOQlFXWXNSMEZCZFVJc1IwRkJka0lzUjBGQk5rSXNSMEZCUnl4RFFVRklMRU5CUVdwRU8wRkJRMEVzWTBGQlNTeEhRVUZITEUxQlFVZ3NSMEZCV1N4RFFVRm9RaXhGUVVGdFFqdEJRVU5xUWl3MFFrRkJaMElzUjBGQlJ5eERRVUZJTEVsQlFWRXNTVUZCVWl4SFFVRmxMRWRCUVVjc1EwRkJTQ3hEUVVGbUxFZEJRWFZDTEVkQlFYWkNMRWRCUVRaQ0xFZEJRVWNzUTBGQlNDeERRVUUzUWl4SFFVRnhReXhIUVVGeVF5eEhRVUV5UXl4SFFVRkhMRU5CUVVnc1EwRkJNMFE3UVVGRFJEdEJRVU5FTEdWQlFVc3NaVUZCVEN4RFFVRnhRaXhyUWtGQmNrSXNRMEZCZDBNc1lVRkJlRU1zUlVGQmRVUXNVVUZCVVN4SlFVRlNMRU5CUVdFc1ZVRkJjRVU3UVVGRFJEdEJRVU5HTzBGQlEwWTdPenN5UTBGRmMwSXNSeXhGUVVGTE8wRkJRekZDTEZWQlFVa3NVVUZCVVN4SlFVRkpMRXRCUVVvc1EwRkJWU3hIUVVGV0xFTkJRVm83UVVGRFFTeGhRVUZQTEUxQlFVMHNUVUZCVFN4TlFVRk9MRWRCUVdVc1EwRkJja0lzUTBGQlVEdEJRVU5FT3pzN2QwSkJOVlJ6UWp0QlFVTnlRaXhoUVVGUExFdEJRVXNzYVVKQlFWbzdRVUZEUkN4TE8zTkNRU3RDYjBJc1RTeEZRVUZSTzBGQlF6TkNMRmRCUVVzc2FVSkJRVXdzUjBGQmVVSXNUVUZCZWtJN1FVRkRSRHM3TzNkQ1FTOUNjMEk3UVVGRGNrSXNZVUZCVHl4TFFVRkxMR2xDUVVGYU8wRkJRMFFzU3p0elFrRXJRbTlDTEUwc1JVRkJVVHRCUVVNelFpeFZRVUZKTEU5QlFVOHNUMEZCVHl4UFFVRlFMRU5CUVdVc1NVRkJNVUk3UVVGRFFTeFZRVUZKTERSQ1FVRm5RaXhKUVVGb1FpeERRVUZLTEVWQlFUSkNPMEZCUTNwQ0xHRkJRVXNzYVVKQlFVd3NSMEZCZVVJc2MwSkJRVlVzU1VGQlZpeEZRVUZuUWl4SlFVRjZRenRCUVVORUxFOUJSa1FzVFVGRlR6dEJRVU5NTEdGQlFVc3NhVUpCUVV3c1IwRkJlVUlzVTBGQmVrSTdRVUZEUkR0QlFVTkdPenM3ZDBKQmNFTmpPMEZCUTJJc1lVRkJUeXhMUVVGTExGTkJRVm83UVVGRFJDeExPM05DUVc5RFdTeFJMRVZCUVZVN1FVRkRja0lzVjBGQlN5eFRRVUZNTEVkQlFXbENMRkZCUVdwQ08wRkJRMFE3T3p0M1FrRndRMk03UVVGRFlpeFZRVUZKTEZkQlFWY3NOa0pCUVcxQ0xFZEJRVzVDTEVOQlFYVkNMRlZCUVhaQ0xFTkJRV1k3TzBGQlJVRXNWVUZCU1N4aFFVRmhMRk5CUVdwQ0xFVkJRVFJDTzBGQlF6RkNMRzFDUVVGWExFVkJRVmc3UVVGRFJEdEJRVU5FTEdGQlFVOHNVVUZCVUR0QlFVTkVMRXM3YzBKQkswSlpMRkVzUlVGQlZUdEJRVU55UWl4dFEwRkJiVUlzUjBGQmJrSXNRMEZCZFVJc1ZVRkJka0lzUlVGQmJVTXNSMEZCYmtNc1JVRkJkME1zVVVGQmVFTTdRVUZEUkRzN08zZENRUzlDYTBJN1FVRkRha0lzWVVGQlR5eExRVUZMTEdGQlFWbzdRVUZEUkN4TE8zTkNRU3RDWjBJc1dTeEZRVUZqTzBGQlF6ZENMRmRCUVVzc1lVRkJUQ3hIUVVGeFFpeFpRVUZ5UWp0QlFVTkJMRlZCUVVrc05FSkJRVFJDTEcxQ1FVRlRMRWxCUVZRc1JVRkJaU3h2UTBGQk1FSXNZMEZCTVVJc1JVRkJNRU1zVVVGQk1VTXNSVUZCYjBRc1IwRkJjRVFzUTBGQlppeEZRVUY1UlN4UlFVRjZSU3hGUVVGdFJpeFJRVUZ1Uml4RFFVRm9RenRCUVVOQkxGVkJRVWtzVTBGQlV5eDVRa0ZCWlN4WFFVRm1MRVZCUVRSQ0xFTkJRVU1zZVVKQlFVUXNRMEZCTlVJc1JVRkJlVVFzUTBGQlF5eHZRa0ZCUkN4RlFVRjFRaXgzUWtGQmRrSXNRMEZCZWtRc1EwRkJZanRCUVVOQkxGZEJRVXNzWVVGQlRDeERRVUZ0UWl4VFFVRnVRaXhEUVVFMlFpeE5RVUUzUWl4RlFVRnhReXhYUVVGeVF5eEZRVUZyUkN4TlFVRnNSRHRCUVVOQkxGZEJRVXNzWjBKQlFVd3NSMEZCZDBJc1YwRkJlRUk3UVVGRFJEczdPM2RDUVc1RGNVSTdRVUZEY0VJc1lVRkJUeXhMUVVGTExHZENRVUZhTzBGQlEwUXNTenR6UWtGdFEyMUNMRkVzUlVGQlZUdEJRVU0xUWl4WFFVRkxMR2RDUVVGTUxFZEJRWGRDTEZGQlFYaENPMEZCUTBRN096dDNRa0Z1UTJ0Q08wRkJRMnBDTEdGQlFVOHNTMEZCU3l4aFFVRmFPMEZCUTBRc1N6dHpRa0Z0UTJkQ0xFMHNSVUZCVVR0QlFVTjJRaXhYUVVGTExHRkJRVXdzUjBGQmNVSXNUMEZCVHl4UFFVRlFMRU5CUVdVc1NVRkJaaXhEUVVGdlFpeFZRVUY2UXp0QlFVTkVPenM3T3p0clFrRTBVRmtzWXpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOcVZtWTdPenM3T3p0SlFVVk5MRlU3T3p0QlFVTktMSE5DUVVGWkxFZEJRVm9zUlVGQmFVSXNTMEZCYWtJc1JVRkJkMElzVDBGQmVFSXNSVUZCYVVNc2EwSkJRV3BETEVWQlFYRkVPMEZCUVVFN08wRkJRMjVFTEZGQlFVa3NRMEZCUXl4clFrRkJUQ3hGUVVGNVFqdEJRVU4yUWl3eVFrRkJjVUlzWlVGQmNrSTdRVUZEUkR0QlFVaHJSQ3dyUjBGSk4wTXNSMEZLTmtNc1JVRkplRU1zUzBGS2QwTXNSVUZKYWtNc1QwRkthVU1zUlVGSmVFSXNhMEpCU25kQ08wRkJTM0JFT3pzN096dHJRa0ZKV1N4Vk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOYVpqczdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUVhOQ1FUczdRVUZGUVRzN096dEpRVWROTEdsQ08wRkJRMG83T3pzN08wRkJTMEU3T3pzN096dEJRVXRCTERaQ1FVRlpMRWRCUVZvc1JVRkJhVUlzUjBGQmFrSXNSVUZCYzBJN1FVRkJRVHM3UVVGRGNFSXNVVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNWVUZCVFN4SlFVRk9MRWRCUVdFc1IwRkJZanRCUVVOQkxGVkJRVTBzU1VGQlRpeEhRVUZoTEVkQlFXSTdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdPenRCUVUxQk96czdPenM3TWtKQlRVOHNUU3hGUVVGUkxFMHNSVUZCVVR0QlFVTnlRaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVRzN1FVRkZRU3hWUVVGSkxFMUJRVTA3UVVGRFVpeGpRVUZOTEZGQlJFVXNSVUZEVVN4TlFVRk5MRTFCUVUwc1NVRkVjRUlzUlVGRE1FSXNTVUZCU1N4MVFrRkJkVUlzVFVGQmRrSXNSMEZCWjBNc05rSkJSRGxFTzBGQlJWSXNZMEZCVFN4RlFVRkRMRTlCUVU4c1JVRkJReXhSUVVGUkxFMUJRVlFzUlVGQlVqdEJRVVpGTEU5QlFWWTdPMEZCUzBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVU1zVDBGQlJDeEZRVUZWTEUxQlFWWXNSVUZCY1VJN08wRkJSWFJETzBGQlEwRXNZMEZCVFN4SlFVRk9MRU5CUVZjc1YwRkJXQ3hEUVVGMVFpeEhRVUYyUWl4RlFVRTBRaXhWUVVGRExFdEJRVVFzUlVGQlZ6dEJRVU55UXl4alFVRkpMRTFCUVUwc1NVRkJUaXhEUVVGWExFbEJRVmdzUzBGQmIwSXNSMEZCZUVJc1JVRkJOa0k3UVVGRE0wSXNiMEpCUVZFc1RVRkJUU3hKUVVGT0xFTkJRVmNzUzBGQldDeERRVUZwUWl4VFFVRjZRanRCUVVORUxGZEJSa1FzVFVGRlR6dEJRVU5NTEcxQ1FVRlBMRTFCUVUwc1NVRkJUaXhEUVVGWExFbEJRV3hDTzBGQlEwUTdRVUZEUml4VFFVNUVPMEZCVDBRc1QwRldUU3hEUVVGUU8wRkJWMFE3TzBGQlJVUTdPenM3T3pzN096czBRa0ZOVHl4TkxFVkJRVkVzVXl4RlFVRlhPMEZCUTNoQ0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRlZCUVVrc1ZVRkJWVHRCUVVOYUxHTkJRVTBzVVVGRVRTeEZRVU5KTEUxQlFVMHNUVUZCVFN4SlFVUm9RaXhGUVVOelFpeEpRVUZKTEhWQ1FVRjFRaXhOUVVGMlFpeEhRVUZuUXl3MlFrRkVNVVE3UVVGRldpeGpRVUZOTEVWQlFVTXNiVUpCUVcxQ0xGTkJRWEJDTzBGQlJrMHNUMEZCWkRzN1FVRkxRU3hoUVVGUExITkNRVUZaTEZWQlFVTXNUMEZCUkN4RlFVRlZMRTFCUVZZc1JVRkJjVUk3TzBGQlJYUkRMR05CUVUwc1NVRkJUaXhEUVVGWExGZEJRVmdzUTBGQmRVSXNUMEZCZGtJc1JVRkJaME1zVlVGQlF5eExRVUZFTEVWQlFWYzdRVUZEZWtNc2EwSkJRVkVzUjBGQlVpeERRVUZaTEU5QlFWb3NSVUZCY1VJc1MwRkJja0k3UVVGRFFTeGpRVUZKTEUxQlFVMHNTVUZCVGl4RFFVRlhMRWxCUVZnc1MwRkJiMElzUjBGQmVFSXNSVUZCTmtJN1FVRkRNMElzYjBKQlFWRXNUVUZCVFN4SlFVRk9MRU5CUVZjc1NVRkJia0k3UVVGRFJDeFhRVVpFTEUxQlJVODdRVUZEVEN4dFFrRkJUeXhOUVVGTkxFbEJRVTRzUTBGQlZ5eEpRVUZzUWp0QlFVTkVPMEZCUTBZc1UwRlFSRHRCUVZGRUxFOUJWazBzUTBGQlVEdEJRVmxFT3pzN2QwSkJMMFJUTzBGQlFVVXNZVUZCVHl4TFFVRkxMRWxCUVZvN1FVRkJiVUk3T3pzN08ydENRV3RGYkVJc2FVSTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTJoSFpqczdPenM3TzBGQlJVRTdPenM3TzBsQlNVMHNaVHM3TzBGQlJVb3NNa0pCUVZrc1JVRkJXaXhGUVVGblFpeEhRVUZvUWl4RlFVRnhRaXhoUVVGeVFpeEZRVUZ0UXl4VlFVRnVReXhGUVVFclF5eFZRVUV2UXl4RlFVRXlSQ3hKUVVFelJDeEZRVUZwUlN4SlFVRnFSU3hGUVVGMVJTeFBRVUYyUlN4RlFVRm5SaXhQUVVGb1JpeEZRVUY1Ump0QlFVRkJPenRCUVVGQkxEQklRVU5xUml4RlFVUnBSaXhGUVVNM1JTeEhRVVEyUlN4RlFVTjRSU3hoUVVSM1JUczdRVUZGZGtZc1VVRkJTU3hqUVVGS08wRkJRMEVzVlVGQlRTeFhRVUZPTEVkQlFXOUNMRlZCUVhCQ08wRkJRMEVzVlVGQlRTeFhRVUZPTEVkQlFXOUNMRlZCUVhCQ08wRkJRMEVzVlVGQlRTeExRVUZPTEVkQlFXTXNTVUZCWkR0QlFVTkJMRlZCUVUwc1MwRkJUaXhIUVVGakxFbEJRV1E3UVVGRFFTeFZRVUZOTEZGQlFVNHNSMEZCYVVJc1QwRkJha0k3UVVGRFFTeFZRVUZOTEZGQlFVNHNSMEZCYVVJc1QwRkJha0k3UVVGU2RVWTdRVUZUZUVZN096czdjMEpCUlZFc1VTeEZRVUZWTzBGQlEycENMRlZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzV1VGQlRTeEpRVUZPTEVkQlFXRXNVVUZCWWp0QlFVTkVMRXM3ZDBKQlJWVTdRVUZEVkN4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxHRkJRVThzVFVGQlRTeExRVUZpTzBGQlEwUTdPenQzUWtGRlowSTdRVUZEWml4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxHRkJRVThzVFVGQlRTeFhRVUZpTzBGQlEwUTdPenQzUWtGRlowSTdRVUZEWml4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxHRkJRVThzVFVGQlRTeFhRVUZpTzBGQlEwUTdPenQzUWtGRlowSTdRVUZEWml4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxHRkJRVThzVFVGQlRTeFhRVUZPTEVOQlFXdENMRmRCUVhwQ08wRkJRMFE3T3pzclFrRm9SVWc3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dHJRa0Z0UldVc1pUczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlF6ZERaanM3T3p0QlFVTkJPenM3TzBGQlEwRTdPenM3UVVGRFFUczdPenRCUVVWQk96dEJRVU5CT3pzN08wRkJSVUU3T3p0QlFVZEJPenM3UVVGcVEwRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBsQmIwTk5MRkU3T3pzN1FVRkZTanM3T3pzN096czdPMEZCVVVFc2IwSkJRVmtzVlVGQldpeEZRVUYzUWl4VlFVRjRRaXhGUVVGdlF5eGpRVUZ3UXl4RlFVRnZSQ3huUWtGQmNFUXNSVUZCYzBVc1kwRkJkRVVzUlVGQmMwWTdRVUZCUVRzN08wRkJTWEJHTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJVbTlHT3p0QlFWVndSaXhSUVVGSkxFTkJRVU1zVlVGQlRDeEZRVUZwUWl4TlFVRk5MRWxCUVVrc1MwRkJTaXhEUVVGVkxIZENRVUZXTEVOQlFVNDdRVUZEYWtJN08wRkJSVUVzVVVGQlNTeGpRVUZLT3p0QlFVVkJMRlZCUVUwc1YwRkJUaXhIUVVGdlFpeGhRVUZoTEZsQlFXcERPMEZCUTBFc1ZVRkJUU3hWUVVGT0xFZEJRVzFDTEZWQlFXNUNPMEZCUTBFc1ZVRkJUU3hWUVVGT0xFZEJRVzFDTEZWQlFXNUNPMEZCUTBFc1ZVRkJUU3huUWtGQlRpeEhRVUY1UWl4blFrRkJla0k3UVVGRFFTeFZRVUZOTEdOQlFVNHNSMEZCZFVJc1kwRkJka0k3UVVGRFFTeFZRVUZOTEZGQlFVNHNSMEZCYVVJc1kwRkJha0k3UVVGRFFTeFZRVUZOTEZWQlFVNHNSMEZCYlVJc1MwRkJTeXhMUVVGTUxFTkJRVmtzUzBGQlN5eE5RVUZNTEV0QlFXZENMRXRCUVdwQ0xFZEJRVEJDTEVOQlFYSkRMRU5CUVc1Q096dEJRVVZCTzBGQlEwRTdRVUZEUVN4VlFVRk5MRmRCUVU0c1IwRkJiMElzU1VGQmNFSTdPMEZCUlVFc1ZVRkJUU3h4UWtGQlRpeEhRVUU0UWl4RlFVRTVRanRCUVVOQkxGVkJRVTBzWVVGQlRpeEhRVUZ6UWl4RlFVRjBRanRCUVVOQkxGVkJRVTBzWTBGQlRpeEhRVUYxUWl4RlFVRjJRanRCUVVOQkxGVkJRVTBzV1VGQlRpeEhRVUZ4UWl4RlFVRnlRanRCUVVOQkxGVkJRVTBzWTBGQlRpeEhRVUYxUWl4RlFVRjJRanRCUVVOQkxGVkJRVTBzZDBKQlFVNHNSMEZCYVVNc1JVRkJha003UVVGRFFTeFZRVUZOTEdGQlFVNHNSMEZCYzBJc1JVRkJReXhUUVVGVExFVkJRVllzUlVGQll5eFpRVUZaTEVWQlFURkNMRVZCUVhSQ08wRkJRMEVzVlVGQlRTeFBRVUZPTEVkQlFXZENMRVZCUVdoQ096dEJRVVZCTEZWQlFVMHNUMEZCVGl4SFFVRm5RaXh6UWtGQlZTeE5RVUZOTEZkQlFXaENMRVZCUVRaQ0xFMUJRVGRETzBGQlEwRXNWVUZCVFN4aFFVRk9MRU5CUVc5Q0xGVkJRWEJDTEVOQlFTdENMRlZCUVM5Q0xFbEJRVFpETEZWQlFUZERPMEZCUTBFc1VVRkJTU3hoUVVGaExHMURRVUZ0UWl4UFFVRnVRaXhGUVVFMFFpeEpRVUUxUWl4RFFVRnFRanRCUVVOQkxGVkJRVTBzWTBGQlRpeEhRVUYxUWl4VlFVRjJRanRCUVhaRGIwWTdRVUYzUTNKR096dEJRVVZFT3pzN096czdPenN5UTBFNFEzVkNMRWtzUlVGQlRTeFZMRVZCUVZrN1FVRkRka01zVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1YwRkJTeXhKUVVGSkxFOUJRVlFzU1VGQmIwSXNUVUZCVFN4aFFVRXhRaXhGUVVGNVF6dEJRVU4yUXl4WlFVRkpMRkZCUVZFc1RVRkJUU3hoUVVGT0xFTkJRVzlDTEU5QlFYQkNMRU5CUVZvN1FVRkRRU3haUVVGSkxFMUJRVTBzVjBGQlRpeExRVUZ6UWl4VlFVRXhRaXhGUVVGelF6dEJRVU53UXl4clFrRkJVU3hKUVVGU08wRkJRMFVzYVVKQlFVc3NWVUZCVER0QlFVTkZMSEZDUVVGUExFMUJRVTBzUzBGQlRpeERRVUZaTEZGQlFXNUNPMEZCUTBZc2FVSkJRVXNzU1VGQlREdEJRVU5GTEhGQ1FVRlBMRTFCUVUwc1MwRkJUaXhEUVVGWkxFVkJRVzVDTzBGQlEwWXNhVUpCUVVzc1VVRkJURHRCUVVORkxIRkNRVUZQTEUxQlFVMHNTMEZCVGl4RFFVRlpMRTFCUVc1Q08wRkJRMFlzYVVKQlFVc3NVVUZCVER0QlFVTkZMSEZDUVVGUExFMUJRVTBzUzBGQlRpeERRVUZaTEUxQlFXNUNPMEZCUTBZc2FVSkJRVXNzVTBGQlREdEJRVU5GTEhGQ1FVRlBMRTFCUVUwc1MwRkJUaXhEUVVGWkxFOUJRVzVDTzBGQlEwWXNhVUpCUVVzc1IwRkJURHRCUVVORkxIRkNRVUZQTEUxQlFVMHNTMEZCWWp0QlFVTkdPMEZCUTBVc2NVSkJRVThzUlVGQlVEdEJRV1JLTzBGQlowSkVPMEZCUTBZN1FVRkRSQ3hoUVVGUExFVkJRVkE3UVVGRFJEczdRVUZGUkRzN096czdPenM3TmtOQlMzbENMRWNzUlVGQlN5eE5MRVZCUVZFN1FVRkRjRU1zVlVGQlNTeFJRVUZSTEVsQlFWbzdRVUZEUVN4VlFVRkpMSEZDUVVGS096dEJRVVZCTEZWQlFVa3NRMEZCUXl4TlFVRk1MRVZCUVdFN1FVRkRXQ3gxUWtGQlpTeE5RVUZOTEU5QlFYSkNPMEZCUTBRc1QwRkdSQ3hOUVVWUE8wRkJRMHdzZFVKQlFXVXNUVUZCWmp0QlFVTkVPenRCUVVWRUxGVkJRVWtzVFVGQlRUdEJRVU5TTEdOQlFVMHNUVUZFUlN4RlFVTk5MRTFCUVUwc1RVRkJUU3hYUVVSc1FpeEZRVU1yUWl4SlFVRkpMSFZDUVVGMVFpeFpRVUYyUWl4SFFVRnpReXhIUVVSNlJTeEZRVU00UlN4TlFVRk5MRVZCUVVVc1ZVRkJWU3hIUVVGYUxFVkJRV2xDTEZGQlFVOHNhMEpCUVhoQ08wRkJSSEJHTEU5QlFWWTdPMEZCU1VFc1lVRkJUeXh6UWtGQldTeFZRVUZUTEU5QlFWUXNSVUZCYTBJc1RVRkJiRUlzUlVGQk1FSTdPMEZCUlRORExHTkJRVTBzVjBGQlRpeERRVUZyUWl4WFFVRnNRaXhEUVVFNFFpeEhRVUU1UWl4RlFVRnRReXhWUVVGRExFdEJRVVFzUlVGQlZ6czdRVUZGTlVNc1kwRkJTU3hoUVVGaExFMUJRVTBzU1VGQlRpeERRVUZYTEV0QlFUVkNPenRCUVVWQkxHTkJRVWtzVlVGQlNpeEZRVUZuUWp0QlFVTmtMRzlDUVVGUkxGVkJRVkk3UVVGRFJDeFhRVVpFTEUxQlJVODdRVUZEVEN4dFFrRkJUeXh6UWtGQlVEdEJRVU5FTzBGQlEwWXNVMEZVUkR0QlFWVkVMRTlCV2swc1EwRkJVRHRCUVdGRU96dEJRVVZFT3pzN096czdiME5CUjJkQ08wRkJRMlFzVlVGQlNTeFJRVUZSTEVsQlFWbzdRVUZEUVN4aFFVRlBMRTFCUVUwc1ZVRkJZanRCUVVORU96dEJRVVZFT3pzN096czdPenR2UTBGTFowSXNWU3hGUVVGWk96dEJRVVV4UWl4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxGVkJRVWtzWjBKQlFVbzdPMEZCUlVFc1YwRkJTeXhKUVVGSkxFdEJRVlFzU1VGQmEwSXNUVUZCVFN4aFFVRjRRaXhGUVVGMVF6dEJRVU55UXl4WlFVRkpMRlZCUVZVc1RVRkJUU3hoUVVGT0xFTkJRVzlDTEV0QlFYQkNMRU5CUVdRN1FVRkRRU3haUVVGSkxGRkJRVkVzVlVGQlVpeExRVUYxUWl4VlFVRXpRaXhGUVVGMVF6dEJRVU55UXl4dlFrRkJWU3hSUVVGUkxFbEJRVklzUTBGQllTeFBRVUYyUWp0QlFVTkVPMEZCUTBZN1FVRkRSQ3hoUVVGUExFOUJRVkE3UVVGRFJEczdRVUZGUkRzN096czdPenM3YlVOQlMyVXNSeXhGUVVGTE8wRkJRMnhDTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxGVkJRVWtzWlVGQlpTeHpRa0ZCVlN4SFFVRldMRVZCUVdVc1NVRkJaaXhMUVVGM1FpeFRRVUV6UXpzN1FVRkZRVHRCUVVOQkxGVkJRVWtzYjBKQlFVbzdPMEZCUlVFN1FVRkRRU3hWUVVGSkxHRkJRV01zV1VGQlJDeEhRVUZwUWl4aFFVRmhMRWRCUVRsQ0xFZEJRVzlETEUxQlFVMHNkMEpCUVU0c1EwRkJLMElzUjBGQkwwSXNRMEZCY2tRN08wRkJSVUVzVjBGQlN5eEpRVUZKTEV0QlFWUXNTVUZCYTBJc1RVRkJUU3hoUVVGNFFpeEZRVUYxUXp0QlFVTnlReXhaUVVGSkxGVkJRVlVzVFVGQlRTeGhRVUZPTEVOQlFXOUNMRXRCUVhCQ0xFTkJRV1E3UVVGRFFTeFpRVUZKTEZGQlFWRXNWVUZCVWl4TFFVRjFRaXhWUVVFelFpeEZRVUYxUXp0QlFVTnlReXgzUWtGQll5eFJRVUZSTEZWQlFYUkNPMEZCUTBFN1FVRkRSRHRCUVVOR08wRkJRMFFzWVVGQlR5eFhRVUZRTzBGQlEwUTdPMEZCUlVRN096czdPenM3TzIxRFFVdGxMR0VzUlVGQlpUdEJRVU0xUWl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFZRVUZKTEdGQlFXRXNUVUZCVFN4alFVRk9MRU5CUVhGQ0xHRkJRWEpDTEVOQlFXcENPenRCUVVWQkxHRkJRVThzYzBKQlFWa3NWVUZCVXl4UFFVRlVMRVZCUVd0Q0xFMUJRV3hDTEVWQlFUQkNPMEZCUXpORExGbEJRVWtzVlVGQlNpeEZRVUZuUWp0QlFVTmtMR3RDUVVGUkxGZEJRVmNzVVVGQmJrSTdRVUZEUkN4VFFVWkVMRTFCUlU4N1FVRkRUQ3hwUWtGQlR5eDFRa0ZCVUR0QlFVTkVPMEZCUTBZc1QwRk9UU3hEUVVGUU8wRkJUMFE3TzBGQlJVUTdPenM3T3pzN096WkRRVXQ1UWl4aExFVkJRV1U3UVVGRGRFTXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzVlVGQlNTeGhRVUZoTEUxQlFVMHNZMEZCVGl4RFFVRnhRaXhoUVVGeVFpeERRVUZxUWpzN1FVRkZRU3hoUVVGUkxGVkJRVVFzUjBGQlpTeFhRVUZYTEZGQlFURkNMRWRCUVhGRExGTkJRVFZETzBGQlEwUTdPMEZCUlVRN096czdPenM3TzIxRVFVc3JRaXhITEVWQlFVczdRVUZEYkVNc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNZVUZCVHl4TlFVRk5MSGRDUVVGT0xFTkJRU3RDTEVkQlFTOUNMRU5CUVZBN1FVRkRSRHM3UVVGRlJEczdPenM3T3p0cFJFRkpOa0lzWVN4RlFVRmxMRlVzUlVGQldUdEJRVU4wUkN4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxGVkJRVWtzVFVGQlRTeDNRa0ZCVGl4RFFVRXJRaXhoUVVFdlFpeE5RVUZyUkN4VFFVRjBSQ3hGUVVGcFJUdEJRVU12UkN4alFVRk5MSGRDUVVGT0xFTkJRU3RDTEdGQlFTOUNMRWxCUVdkRUxGVkJRV2hFTzBGQlEwUTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdNRU5CUzNOQ0xHRXNSVUZCWlR0QlFVTnVReXhWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEZWQlFVa3NZVUZCWVN4TlFVRk5MR05CUVU0c1EwRkJjVUlzWVVGQmNrSXNRMEZCYWtJN1FVRkRRU3hWUVVGSkxGVkJRVlVzUlVGQlpEczdRVUZGUVN4VlFVRkpMRlZCUVVvc1JVRkJaMEk3UVVGRFpDeHJRa0ZCVlN4WFFVRlhMRTlCUVhKQ08wRkJRMFE3UVVGRFJDeGhRVUZQTEU5QlFWQTdRVUZEUkRzN1FVRkZSRHM3T3pzN096czJRMEZKZVVJN1FVRkRka0lzVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1ZVRkJTU3h2UWtGQmIwSXNSVUZCZUVJN08wRkJSVUVzWVVGQlR5eHpRa0ZCV1N4VlFVRlRMRTlCUVZRc1JVRkJhVUlzVFVGQmFrSXNSVUZCZVVJN08wRkJSVEZETEdGQlFVc3NTVUZCU1N4TFFVRlVMRWxCUVd0Q0xFMUJRVTBzWVVGQmVFSXNSVUZCZFVNN1FVRkRja01zWTBGQlNTeFZRVUZWTEUxQlFVMHNZVUZCVGl4RFFVRnZRaXhMUVVGd1FpeERRVUZrTzBGQlEwRXNZMEZCU1N4VFFVRlRMRTFCUVUwc2VVSkJRVTRzUTBGQlowTXNVVUZCVVN4SlFVRlNMRU5CUVdFc1QwRkJOME1zUlVGQmMwUXNVVUZCVVN4VlFVRTVSQ3hEUVVGaU8wRkJRMEVzTkVKQlFXdENMRWxCUVd4Q0xFTkJRWFZDTEUxQlFYWkNPMEZCUTBRN08wRkJSVVFzTUVKQlFWRXNSMEZCVWl4RFFVRlpMR2xDUVVGYUxFVkJRU3RDTEVsQlFTOUNMRU5CUVc5RExGbEJRVTA3TzBGQlJYaERMR3RDUVVGUkxIbERRVUZTTzBGQlEwUXNVMEZJUkN4RlFVZEhMR2xDUVVGVE8wRkJRVVVzYVVKQlFVOHNTMEZCVUR0QlFVRmxMRk5CU0RkQ08wRkJTVVFzVDBGYVRTeERRVUZRTzBGQllVUTdPMEZCUlVRN096czdPenM3T3pzNFEwRk5NRUlzU1N4RlFVRk5MR1VzUlVGQmFVSTdRVUZETDBNN1FVRkRRU3hWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4VlFVRkpMRlZCUVZVc1JVRkJSU3hOUVVGTkxGRkJRVklzUlVGQmEwSXNUVUZCVFN4TlFVRk5MRmRCUVRsQ08wRkJRMFVzV1VGQlNTeDFRa0ZCZFVJc1RVRkJUU3hQUVVFM1FpeEhRVUYxUXl4SFFVUTNRenRCUVVWRkxHTkJRVTBzUlVGQlJTeFBRVUZQTEVWQlFVTXNUVUZCVFN4SlFVRlFMRVZCUVdFc1dVRkJXU3hsUVVGNlFpeEZRVUZVTEVWQlJsSXNSVUZCWkRzN1FVRkpRU3haUVVGTkxGZEJRVTRzUTBGQmEwSXNWMEZCYkVJc1EwRkJPRUlzVDBGQk9VSXNSVUZCZFVNc1ZVRkJReXhMUVVGRUxFVkJRVmM3UVVGRGFFUXNaMEpCUVZFc1IwRkJVaXhEUVVGWkxEQkNRVUZhTEVWQlFYZERMRXRCUVhoRE8wRkJRMFFzVDBGR1JEdEJRVWRFT3p0QlFVVkVPenM3T3pzN096WkRRVWw1UWl4SkxFVkJRVTA3UVVGRE4wSXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzVlVGQlNTeFZRVUZWTEVWQlFVVXNUVUZCVFN4UlFVRlNMRVZCUVd0Q0xFMUJRVTBzVFVGQlRTeFhRVUU1UWp0QlFVTkZMRmxCUVVrc2RVSkJRWFZDTEUxQlFVMHNUMEZCTjBJc1IwRkJkVU1zUjBGRU4wTTdRVUZGUlN4alFVRk5MRVZCUVVVc1QwRkJUeXhGUVVGRExFMUJRVTBzU1VGQlVDeEZRVUZVTEVWQlJsSXNSVUZCWkRzN1FVRkpRU3haUVVGTkxGZEJRVTRzUTBGQmEwSXNWMEZCYkVJc1EwRkJPRUlzVDBGQk9VSXNSVUZCZFVNc1ZVRkJReXhMUVVGRUxFVkJRVmM3UVVGRGFFUXNaMEpCUVZFc1IwRkJVaXhEUVVGWkxEWkNRVUZhTEVWQlFUSkRMRXRCUVRORE8wRkJRMFFzVDBGR1JEdEJRVWRFT3p0QlFVVkVPenM3T3pzN01FTkJSM05DTEZFc1JVRkJWU3hMTEVWQlFVODdRVUZEY2tNc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNWVUZCU1N4VlFVRlZMRVZCUVVVc1RVRkJUU3hSUVVGU0xFVkJRV3RDTEUxQlFVMHNUVUZCVFN4WFFVRTVRanRCUVVORkxGbEJRVWtzZFVKQlFYVkNMRTFCUVUwc1QwRkJOMElzUjBGQmRVTXNSMEZFTjBNN1FVRkZSU3hqUVVGTkxFVkJRVVVzVlVGQlZTeFJRVUZhTEVWQlFYTkNMRTlCUVU4c1MwRkJOMElzUlVGR1VpeEZRVUZrT3p0QlFVbEJMRmxCUVUwc1YwRkJUaXhEUVVGclFpeEpRVUZzUWl4RFFVRjFRaXhYUVVGMlFpeERRVUZ0UXl4UFFVRnVReXhGUVVFMFF5eFZRVUZETEV0QlFVUXNSVUZCVnp0QlFVTnlSQ3huUWtGQlVTeEhRVUZTTEVOQlFWa3NkVUpCUVZvc1JVRkJjVU1zUzBGQmNrTTdRVUZEUkN4UFFVWkVPMEZCUjBRN08wRkJSVVE3T3pzN096czdPM1ZEUVV0dFFpeGhMRVZCUVdVc1lTeEZRVUZsTzBGQlF5OURMRlZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzVlVGQlNTeGhRVUZoTEUxQlFVMHNZMEZCVGl4RFFVRnhRaXhoUVVGeVFpeERRVUZxUWpzN1FVRkZRU3hWUVVGSkxGVkJRVW9zUlVGQlowSTdRVUZEWkN4dFFrRkJWeXhYUVVGWUxFTkJRWFZDTEVsQlFYWkNMRU5CUVRSQ0xHRkJRVFZDTzBGQlEwRXNZMEZCVFN4alFVRk9MRU5CUVhGQ0xHRkJRWEpDTEVsQlFYTkRMRlZCUVhSRE8wRkJRMFE3UVVGRFJqczdRVUZGUkRzN096czdPenM3TmtOQlMzbENMR0VzUlVGQlpUdEJRVU4wUXl4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxGVkJRVWtzWVVGQllTeE5RVUZOTEdOQlFVNHNRMEZCY1VJc1lVRkJja0lzUTBGQmFrSTdPMEZCUlVFc1ZVRkJTU3hWUVVGS0xFVkJRV2RDTzBGQlEyUXNaVUZCVHl4WFFVRlhMRmRCUVd4Q08wRkJRMFFzVDBGR1JDeE5RVVZQTzBGQlEwd3NZMEZCVFN4NVFrRkJUanRCUVVORU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096czdkVU5CVDIxQ0xGVXNSVUZCV1N4blFpeEZRVUZyUWl4aExFVkJRV1VzYTBJc1JVRkJiMElzVXl4RlFVRlhPMEZCUXpkR0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlV5eFBRVUZVTEVWQlFXdENMRTFCUVd4Q0xFVkJRVEJDT3p0QlFVVXpRenRCUVVOQkxGbEJRVWtzWlVGQlpTeEZRVUZETEUxQlFVMHNWVUZCVUN4RlFVRnRRaXhSUVVGUkxHZENRVUV6UWl4RlFVRTJReXhMUVVGTExHRkJRV3hFTEVWQlFXbEZMRk5CUVZNc1RVRkJUU3hYUVVGb1JpeEZRVUUyUml4VlFVRlZMR3RDUVVGMlJ5eEZRVUV5U0N4VFFVRlRMRk5CUVhCSkxFVkJRU3RKTEdGQlFXRXNSVUZCTlVvc1JVRkJia0k3TzBGQlJVRXNZMEZCVFN4alFVRk9MRU5CUVhGQ0xHRkJRWEpDTEVsQlFYTkRMRmxCUVhSRE96dEJRVVZCTEZsQlFVa3NWVUZCVlN4TlFVRk5MR05CUVU0c1EwRkJjVUlzTUVKQlFYSkNMRU5CUTFvc1RVRkJUU3hYUVVSTkxFVkJSVm9zZFVKQlFYVkNMRTFCUVUwc1kwRkJOMElzUjBGQk9FTXNSMEZHYkVNc1JVRkhXaXhaUVVoWkxFVkJTVm9zVVVGS1dTeERRVUZrT3p0QlFVOUJMR05CUVUwc1YwRkJUaXhEUVVGclFpeFhRVUZzUWl4RFFVRTRRaXhQUVVFNVFpeEZRVUYxUXl4VlFVRkRMRXRCUVVRc1JVRkJWenRCUVVOb1JDeHJRa0ZCVVN4SFFVRlNMRU5CUVZrc2FVTkJRVm9zUlVGQkswTXNTMEZCTDBNN1FVRkRRU3hqUVVGSkxFMUJRVTBzU1VGQlRpeERRVUZYTEVsQlFWZ3NTMEZCYjBJc1IwRkJlRUlzUlVGQk5rSTdRVUZETTBJc2IwSkJRVkVzU1VGQlVqdEJRVU5FTEZkQlJrUXNUVUZGVHp0QlFVTk1MRzFDUVVGUExEaENRVUZRTzBGQlEwUTdRVUZEUml4VFFWQkVPMEZCVTBRc1QwRjJRazBzUTBGQlVEdEJRWGRDUkRzN1FVRkZSRHM3T3pzN096czdPMjlEUVUxblFpeFBMRVZCUVZNc1lTeEZRVUZsTEZVc1JVRkJXVHRCUVVOc1JDeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRVHRCUVVOQk8wRkJRMEVzVlVGQlNTeFpRVUZaTEhOQ1FVRlZMR0ZCUVZZc1JVRkJlVUlzVFVGQmVrTTdPMEZCUlVFc1ZVRkJTU3hWUVVGVkxGRkJRVllzUTBGQmJVSXNWMEZCYmtJc1EwRkJTaXhGUVVGeFF6dEJRVU51UXl4dlFrRkJXU3hWUVVGVkxFOUJRVllzUTBGQmEwSXNXVUZCYkVJc1JVRkJaME1zUlVGQmFFTXNRMEZCV2p0QlFVTkVPenRCUVVWRUxHRkJRVThzYzBKQlFWa3NWVUZCVXl4UFFVRlVMRVZCUVd0Q0xFMUJRV3hDTEVWQlFUQkNPenRCUVVVelF5eGpRVUZOTEZGQlFVNHNRMEZCWlN4dlFrRkJaaXhIUVVGelF5eEpRVUYwUXl4RFFVRXlReXhWUVVGVExFMUJRVlFzUlVGQmFVSTdRVUZETVVRc1kwRkJTU3hqUVVGakxFOUJRVThzVjBGQmVrSTdRVUZEUVN4alFVRkpMR05CUVdNc1dVRkJXU3hQUVVFNVFqczdRVUZGUVN4alFVRkpMRTFCUVUwc1YwRkJUaXhMUVVGelFpeFRRVUV4UWl4RlFVRnhRenRCUVVOdVF5eHRRa0ZCVHl4elEwRkJVRHRCUVVORUxGZEJSa1FzVFVGRlR6dEJRVU5NTzBGQlEwRXNhMEpCUVUwc1QwRkJUaXhEUVVGakxIVkNRVUYxUWl4VFFVRnlReXhGUVVGblJDeEpRVUZvUkN4RFFVRnhSQ3haUVVGWE96dEJRVVU1UkN4dlFrRkJUU3hqUVVGT0xFZEJRWFZDTEZOQlFYWkNPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEd0Q1FVRkpMRzlDUVVGdlFpeERRVUY0UWp0QlFVTkJMRzlDUVVGTkxHbENRVUZPTEVOQlFYZENMRTFCUVhoQ0xFTkJRU3RDTEZOQlFTOUNMRVZCUVRCRExHbENRVUV4UXl4RlFVRTJSQ3hKUVVFM1JDeERRVUZyUlN4VlFVRlRMRmxCUVZRc1JVRkJkVUk3TzBGQlJYWkdMRFpDUVVGaExFOUJRV0lzUTBGQmNVSXNWVUZCVXl4UFFVRlVMRVZCUVd0Q096dEJRVVZ5UXl4M1FrRkJUU3hYUVVGT0xFTkJRV3RDTEZkQlFXeENMRU5CUVRoQ0xGVkJRVlVzVTBGQmVFTXNSVUZCYlVRc1ZVRkJReXhIUVVGRUxFVkJRVk03UVVGRE1VUXNORUpCUVZFc1IwRkJVaXhEUVVGWkxEUkNRVUZhTEVWQlFUQkRMRlZCUVZVc1lVRkJWaXhIUVVFeVFpeEhRVUZ5UlR0QlFVTkVMRzFDUVVaRU8wRkJTVVFzYVVKQlRrUTdPMEZCVVVFc2IwSkJRVWtzVlVGQlZTdzRRa0ZCYjBJc1RVRkJUU3hWUVVFeFFpeEZRVUZ6UXl4TlFVRk5MRmRCUVRWRExFVkJRMlFzWVVGRVl5eEZRVU5ETEZWQlJFUXNSVUZEWVN4aFFVRmhMRU5CUVdJc1EwRkVZaXhGUVVNNFFpeFhRVVE1UWl4RFFVRmtPenRCUVVkQkxITkNRVUZOTEdGQlFVNHNRMEZCYjBJc1NVRkJjRUlzUTBGQmVVSXNUMEZCZWtJN08wRkJSVUU3UVVGRFFTeHZRa0ZCU1N4UlFVRlJMRWxCUVZJc1MwRkJhVUlzUzBGQmNrSXNSVUZCTkVJN1FVRkRNVUlzZDBKQlFVMHNZVUZCVGl4RFFVRnZRaXhWUVVGd1FpeERRVUVyUWl4aFFVRmhMRU5CUVdJc1EwRkJMMElzU1VGQmEwUXNUMEZCYkVRN1FVRkRSQ3hwUWtGR1JDeE5RVVZQTEVsQlFVa3NVVUZCVVN4SlFVRlNMRXRCUVdsQ0xGRkJRWEpDTEVWQlFTdENPMEZCUTNCRExIZENRVUZOTEdGQlFVNHNRMEZCYjBJc1QwRkJjRUlzUTBGQk5FSXNZVUZCWVN4RFFVRmlMRU5CUVRWQ0xFbEJRU3RETEU5QlFTOURPMEZCUTBRc2FVSkJSazBzVFVGRlFUdEJRVU5NTEhsQ1FVRlBMRzFDUVVGUU8wRkJRMFE3TzBGQlJVUXNiMEpCUVVrc2EwSkJRVW83TzBGQlJVRTdRVUZEUVR0QlFVTkJMRzlDUVVGSkxFOUJRVkVzVjBGQlZ5eFhRVUZ1UWl4TFFVRnZReXhSUVVGNFF5eEZRVUZyUkR0QlFVTm9SQ3c0UWtGQldTeEZRVUZhTzBGQlEwRXNORUpCUVZVc1NVRkJWaXhEUVVGbExGZEJRVmNzVjBGQk1VSTdRVUZEUkN4cFFrRklSQ3hOUVVkUE8wRkJRMHdzT0VKQlFWa3NWMEZCVnl4WFFVRjJRanRCUVVORU96dEJRVVZFTEc5Q1FVRkpMSFZDUVVGMVFpeFhRVUZYTEZkQlFYUkRPMEZCUTBFc2IwSkJRVWtzYlVKQlFXMUNMRVZCUVhaQ096dEJRVVZCTzBGQlEwRXNjVUpCUVVzc1NVRkJTU3hMUVVGVUxFbEJRV3RDTEc5Q1FVRnNRaXhGUVVGM1F6dEJRVU4wUXl4dFEwRkJhVUlzU1VGQmFrSXNRMEZCYzBJc1RVRkJUU3huUWtGQlRpeERRVUYxUWl4MVFrRkJka0lzUTBGQkswTXNjVUpCUVhGQ0xFdEJRWEpDTEVOQlFTOURMRU5CUVhSQ08wRkJRMFE3TzBGQlJVUTdRVUZEUVN4clEwRkJVU3hIUVVGU0xFTkJRVmtzWjBKQlFWb3NSVUZCT0VJc1NVRkJPVUlzUTBGQmJVTXNWVUZCVXl4WFFVRlVMRVZCUVhOQ096dEJRVVYyUkN4elFrRkJTU3h6UWtGQmMwSXNSVUZCTVVJN1FVRkRRU3gxUWtGQlN5eEpRVUZKTEUxQlFWUXNTVUZCYTBJc1YwRkJiRUlzUlVGQkswSTdRVUZETjBJc2QwSkJRVWtzWVVGQllTeFpRVUZaTEUxQlFWb3NRMEZCYWtJN1FVRkRRU3gzUTBGQmIwSXNTVUZCY0VJc1EwRkJlVUlzVjBGQlZ5eGhRVUZZTEVOQlFYbENMRlZCUVhwQ0xFTkJRVzlETEZWQlFYQkRMRU5CUVN0RExFMUJRUzlETEVOQlFYTkVMRkZCUVM5Rk8wRkJRMFE3TzBGQlJVUTdRVUZEUVN4elFrRkJTU3hsUVVGbExFVkJRVU1zVFVGQlRTeFhRVUZRTEVWQlFYRkNMSE5DUVVGelFpeGhRVUV6UXl4RlFVRXdSQ3haUVVGWkxHRkJRV0VzUTBGQllpeERRVUYwUlN4RlFVRjFSaXhUUVVGVExFMUJRVTBzVjBGQmRFY3NSVUZCYlVnc1YwRkJWeXhUUVVFNVNDeEZRVUY1U1N4aFFVRmhMRzFDUVVGMFNpeEZRVUZ1UWpzN1FVRkZRU3h6UWtGQlNTeFZRVUZWTEUxQlFVMHNZMEZCVGl4RFFVRnhRaXd3UWtGQmNrSXNRMEZEV2l4TlFVRk5MRmRCUkUwc1JVRkZXaXgxUWtGQmRVSXNUVUZCVFN4alFVRTNRaXhIUVVFNFF5eEhRVVpzUXl4RlFVZGFMRmxCU0Zrc1JVRkpXaXhSUVVwWkxFTkJRV1E3TzBGQlQwRXNkMEpCUVUwc1YwRkJUaXhEUVVGclFpeFhRVUZzUWl4RFFVRTRRaXhQUVVFNVFpeEZRVUYxUXl4VlFVRkRMRXRCUVVRc1JVRkJWenRCUVVOb1JDdzBRa0ZCVVN4SFFVRlNMRU5CUVZrc09FSkJRVm9zUlVGQk5FTXNTMEZCTlVNN08wRkJSVUVzZDBKQlFVa3NUVUZCVFN4SlFVRk9MRU5CUVZjc1NVRkJXQ3hMUVVGdlFpeEhRVUY0UWl4RlFVRTJRanRCUVVNelFpdzRRa0ZCVVN4aFFVRmhMRU5CUVdJc1EwRkJVanRCUVVORUxIRkNRVVpFTEUxQlJVODdRVUZEVEN3MlFrRkJUeXdyUWtGQlVEdEJRVU5FTzBGQlEwWXNiVUpCVWtRN08wRkJWVUU3UVVGRFFUdEJRVU5CTEhOQ1FVRkpMR2xDUVVGcFFpeFpRVUZaTEZsQlFWYzdPMEZCUlRGRExIZENRVUZKTEZWQlFWVXNUVUZCVFN4alFVRk9MRU5CUVhGQ0xEQkNRVUZ5UWl4RFFVTmFMRTFCUVUwc1YwRkVUU3hGUVVWYUxIVkNRVUYxUWl4TlFVRk5MR05CUVRkQ0xFZEJRVGhETEVkQlJteERMRVZCUjFvc1dVRklXU3hGUVVsYUxGRkJTbGtzUTBGQlpEczdRVUZQUVN3d1FrRkJUU3hYUVVGT0xFTkJRV3RDTEZkQlFXeENMRU5CUVRoQ0xFOUJRVGxDTEVWQlFYVkRMRlZCUVVNc1MwRkJSQ3hGUVVGWE8wRkJRMmhFTERoQ1FVRlJMRWRCUVZJc1EwRkJXU3gzUWtGQldpeEZRVUZ6UXl4TFFVRjBRenRCUVVORUxIRkNRVVpFTzBGQlIwUXNiVUpCV205Q0xFVkJXV2hDTEUxQlFVMHNWMEZCVGl4SFFVRnZRaXhIUVVGeVFpeEhRVUUwUWl4RFFVRTNRaXhIUVVGclF5eEpRVnBvUWl4RFFVRnlRanM3UVVGalFTd3dRa0ZCVVN4SFFVRlNMRU5CUVZrc2FVSkJRVm9zUlVGQkswSXNiVUpCUVM5Q08wRkJRMEVzTUVKQlFWRXNSMEZCVWl4RFFVRlpMRzFDUVVGYUxFVkJRV2xETEZOQlFXcERPMEZCUlVRc2FVSkJMME5FTzBGQmFVUkVMR1ZCTjBaRUxFVkJOa1pITEV0Qk4wWklMRU5CTmtaVExGVkJRVk1zVFVGQlZDeEZRVUZwUWp0QlFVTjRRaXgzUWtGQlVTeEhRVUZTTEVOQlFWa3NhMEpCUVZvc1JVRkJaME1zVFVGQmFFTTdRVUZEUVN4MVFrRkJUeXhOUVVGUU8wRkJRMFFzWlVGb1IwUTdRVUZwUjBRc1lVRjZSMFE3UVVFd1IwUTdRVUZEUml4VFFXNUlSQ3hGUVcxSVJ5eFZRVUZUTEVkQlFWUXNSVUZCWXp0QlFVTm1MR2xDUVVGUExEaENRVUZRTzBGQlEwUXNVMEZ5U0VRN1FVRnpTRVFzVDBGNFNFMHNRMEZCVUR0QlFUQklSRHM3UVVGRlJEczdPenM3T3p0elEwRkphMElzUnl4RlFVRkxPMEZCUTNKQ0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlV5eFBRVUZVTEVWQlFXbENMRTFCUVdwQ0xFVkJRWGxDT3p0QlFVVXhReXhaUVVGSkxGRkJRVkVzUzBGQldqdEJRVU5CTEZsQlFVa3NVVUZCVVN4RFFVRmFPenRCUVVWQkxHRkJRVXNzVVVGQlVTeERRVUZpTEVWQlFXZENMRkZCUVZFc1RVRkJUU3hoUVVGT0xFTkJRVzlDTEUxQlFUVkRMRVZCUVc5RUxFOUJRWEJFTEVWQlFUWkVPMEZCUXpORUxHTkJRVWtzVlVGQlZTeE5RVUZOTEdGQlFVNHNRMEZCYjBJc1MwRkJjRUlzUTBGQlpEdEJRVU5CTEdOQlFVa3NXVUZCV1N4VFFVRm9RaXhGUVVFeVFqdEJRVU42UWl4blFrRkJTU3hSUVVGUkxGVkJRVklzUzBGQmRVSXNSMEZCTTBJc1JVRkJaME03UVVGRE9VSXNjMEpCUVZFc1NVRkJVanRCUVVOQk8wRkJRMFE3UVVGRFJqdEJRVU5HT3p0QlFVVkVMRmxCUVVrc1ZVRkJWU3hMUVVGa0xFVkJRWEZDTzBGQlEyNUNMR2xDUVVGUExHMUNRVUZRTzBGQlEwUXNVMEZHUkN4TlFVVlBPMEZCUTB3c2FVSkJRVThzVFVGQlRTeGhRVUZPTEVOQlFXOUNMRXRCUVhCQ0xFTkJRVkE3UVVGRFFTeHJRa0ZCVVN3NFFrRkJVanRCUVVORU8wRkJRMFlzVDBGeVFrMHNRMEZCVUR0QlFYVkNSRHM3UVVGRlJEczdPenM3T3pzN2MwTkJTMnRDTEVjc1JVRkJTenRCUVVOeVFpeFZRVUZKTEVOQlFVTXNSMEZCVEN4RlFVRlZMRTFCUVUwc1NVRkJTU3hMUVVGS0xFTkJRVlVzYzBKQlFWWXNRMEZCVGp0QlFVTldMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEdGQlFVOHNjMEpCUVZrc1ZVRkJVeXhQUVVGVUxFVkJRV2xDTEUxQlFXcENMRVZCUVhsQ096dEJRVVV4UXl4WlFVRkpMRlZCUVZVc1RVRkJUU3hqUVVGT0xFTkJRWEZDTEVkQlFYSkNMRU5CUVdRN08wRkJSVUVzV1VGQlNTeFpRVUZaTEZOQlFXaENMRVZCUVRKQ08wRkJRM3BDTEdsQ1FVRlBMRGhEUVVGUU8wRkJRMFFzVTBGR1JDeE5RVVZQTzBGQlEwd3NhMEpCUVZFc1QwRkJVanRCUVVORU8wRkJRMFlzVDBGVVRTeERRVUZRTzBGQlYwUTdPMEZCUlVRN096czdPenM3T3p0cFEwRk5ZU3hQTEVWQlFWTXNVeXhGUVVGWE8wRkJReTlDTEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1ZVRkJTU3cwUWtGQlNqczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZwUWl4TlFVRnFRaXhGUVVGNVFqczdRVUZGTVVNN1FVRkRRU3haUVVGSkxFMUJRVTBzVjBGQlRpeExRVUZ6UWl4VFFVRXhRaXhGUVVGeFF6dEJRVU51UXl4cFFrRkJUeXh6UTBGQlVEdEJRVU5FT3p0QlFVVkVPMEZCUTBFc1dVRkJTU3hEUVVGRExGVkJRVlVzVDBGQlZpeERRVUZyUWl4WFFVRnNRaXhEUVVGTUxFVkJRWEZETzBGQlEyNURMSE5DUVVGWkxGVkJRVlVzVTBGQlZpeERRVUZ2UWl4VlFVRlZMRTlCUVZZc1EwRkJhMElzUjBGQmJFSXNTVUZCZVVJc1EwRkJOME1zUTBGQldqdEJRVU5FT3p0QlFVVkVMRGhDUVVGelFpeGpRVUZqTEZOQlFXUXNSMEZCTUVJc1lVRkJNVUlzUjBGQk1FTXNTMEZCU3l4TFFVRk1MRU5CUVZrc1MwRkJTeXhOUVVGTUxFdEJRV2RDTEV0QlFXcENMRWRCUVRCQ0xFTkJRWEpETEVOQlFXaEZPenRCUVVWQk8wRkJRMEVzWTBGQlRTeGpRVUZPTEVOQlFYRkNMRk5CUVhKQ0xFbEJRV3RETEcxQ1FVRnNRenRCUVVOQkxHTkJRVTBzWVVGQlRpeERRVUZ2UWl4UFFVRndRaXhEUVVFMFFpeHRRa0ZCTlVJc1NVRkJiVVFzVDBGQmJrUTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTEdkQ1FVRlJMRzFDUVVGU096dEJRVVZCTEdOQlFVMHNWMEZCVGl4RFFVRnJRaXhYUVVGc1FpeERRVUU0UWl4elFrRkJjMElzVTBGQmNFUXNSVUZCSzBRc1ZVRkJReXhIUVVGRUxFVkJRVk03UVVGRGRFVXNZMEZCU1N4SlFVRkpMRkZCUVVvc1MwRkJhVUlzU1VGQlNTeEZRVUZLTEVkQlFWTXNVMEZCT1VJc1JVRkJlVU03UVVGRGRrTXNiMEpCUVZFc1IwRkJVaXhEUVVGWkxITkRRVUZhTEVWQlFXOUVMRWxCUVVrc1NVRkJTaXhEUVVGVExFdEJRVGRFTzBGQlEwUTdRVUZEUml4VFFVcEVPMEZCUzBRc1QwRTNRazBzUTBGQlVEdEJRU3RDUkRzN1FVRkZSRHM3T3pzN096dHRRMEZKWlN4cFFpeEZRVUZ0UWp0QlFVTm9ReXhWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEZWQlFVa3NORUpCUVVvN08wRkJSVUVzWVVGQlR5eHpRa0ZCV1N4VlFVRlRMRTlCUVZRc1JVRkJhVUlzVFVGQmFrSXNSVUZCZVVJN08wRkJSVEZETEZsQlFVa3NUMEZCVHl4TlFVRk5MR05CUVU0c1EwRkJjVUlzYVVKQlFYSkNMRU5CUVZnN08wRkJSVUVzV1VGQlNTeFRRVUZUTEZOQlFXSXNSVUZCZDBJN1FVRkRkRUlzYVVKQlFVOHNORU5CUVZBN1FVRkRSQ3hUUVVaRUxFMUJSVTg3UVVGRFRDeHBRa0ZCVHl4TlFVRk5MR05CUVU0c1EwRkJjVUlzYVVKQlFYSkNMRU5CUVZBN1FVRkRRU3hyUWtGQlVTeHpRa0ZCVWp0QlFVTkVPMEZCUTBZc1QwRldUU3hEUVVGUU8wRkJWMFE3TzBGQlJVUTdPenM3T3pzN096dHhRMEZOYVVJc1R5eEZRVUZUTEZNc1JVRkJWenRCUVVOdVF5eFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMRlZCUVVrc2QwSkJRVW83TzBGQlJVRXNZVUZCVHl4elFrRkJXU3hWUVVGVExFOUJRVlFzUlVGQmFVSXNUVUZCYWtJc1JVRkJlVUk3TzBGQlJURkRPMEZCUTBFc1dVRkJTU3hOUVVGTkxGZEJRVTRzUzBGQmMwSXNVMEZCTVVJc1JVRkJjVU03UVVGRGJrTXNhVUpCUVU4c2MwTkJRVkE3UVVGRFJEczdRVUZGUkN3d1FrRkJhMElzYTBKQlFXdENMRk5CUVd4Q0xFZEJRVGhDTEZGQlFUbENMRWRCUVhsRExFdEJRVXNzUzBGQlRDeERRVUZaTEV0QlFVc3NUVUZCVEN4TFFVRm5RaXhMUVVGcVFpeEhRVUV3UWl4RFFVRnlReXhEUVVFelJEczdRVUZGUVR0QlFVTkJMR05CUVUwc1dVRkJUaXhEUVVGdFFpeFRRVUZ1UWl4SlFVRm5ReXhsUVVGb1F6dEJRVU5CTEdOQlFVMHNZVUZCVGl4RFFVRnZRaXhQUVVGd1FpeERRVUUwUWl4bFFVRTFRaXhKUVVFclF5eFBRVUV2UXpzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRXNaMEpCUVZFc1pVRkJVanM3UVVGRlFTeGpRVUZOTEZkQlFVNHNRMEZCYTBJc1YwRkJiRUlzUTBGQk9FSXNhMEpCUVd0Q0xGTkJRV2hFTEVWQlFUSkVMRlZCUVVNc1IwRkJSQ3hGUVVGVE8wRkJRMnhGTEdOQlFVa3NTVUZCU1N4UlFVRktMRXRCUVdsQ0xFbEJRVWtzUlVGQlNpeEhRVUZUTEZOQlFUbENMRVZCUVhsRE8wRkJRM1pETEc5Q1FVRlJMRWRCUVZJc1EwRkJXU3hyUTBGQldpeEZRVUZuUkN4SlFVRkpMRWxCUVVvc1EwRkJVeXhMUVVGNlJEdEJRVU5FTzBGQlEwWXNVMEZLUkR0QlFVdEVMRTlCZUVKTkxFTkJRVkE3UVVGNVFrUTdPMEZCUlVRN096czdPenM3TzNGRFFVdHBRaXhITEVWQlFVczdRVUZEY0VJc1ZVRkJTU3hEUVVGRExFZEJRVXdzUlVGQlZTeE5RVUZOTEVsQlFVa3NTMEZCU2l4RFFVRlZMSE5DUVVGV0xFTkJRVTQ3UVVGRFZpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hoUVVGUExITkNRVUZaTEZWQlFWTXNUMEZCVkN4RlFVRnBRaXhOUVVGcVFpeEZRVUY1UWpzN1FVRkZNVU1zV1VGQlNTeFZRVUZWTEUxQlFVMHNXVUZCVGl4RFFVRnRRaXhIUVVGdVFpeERRVUZrT3p0QlFVVkJMRmxCUVVrc1dVRkJXU3hUUVVGb1FpeEZRVUV5UWp0QlFVTjZRaXhwUWtGQlR5dzJRMEZCVUR0QlFVTkVMRk5CUmtRc1RVRkZUenRCUVVOTUxHdENRVUZSTEU5QlFWSTdRVUZEUkR0QlFVTkdMRTlCVkUwc1EwRkJVRHRCUVZkRU96dEJRVVZFT3pzN096czdPenM3WjBOQlRWa3NWeXhGUVVGaExFOHNSVUZCVXp0QlFVTm9ReXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZwUWl4TlFVRnFRaXhGUVVGNVFqdEJRVU14UXp0QlFVTkJMR05CUVUwc1QwRkJUaXhEUVVGakxFOUJRV1FzU1VGQmVVSXNWMEZCZWtJN1FVRkRRU3huUWtGQlVTdzJRa0ZCVWp0QlFVTkVMRTlCU2swc1EwRkJVRHRCUVUxRU96dEJRVVZFT3pzN096czdPMnREUVVsakxHbENMRVZCUVcxQ08wRkJReTlDTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxHRkJRVThzYzBKQlFWa3NWVUZCVXl4UFFVRlVMRVZCUVdsQ0xFMUJRV3BDTEVWQlFYbENPenRCUVVVeFF5eFpRVUZKTEZOQlFWTXNUVUZCVFN4UFFVRk9MRU5CUVdNc2FVSkJRV1FzUTBGQllqczdRVUZGUVN4WlFVRkpMRmRCUVZjc1UwRkJaaXhGUVVFd1FqdEJRVU40UWl4cFFrRkJUeXhuUWtGQlVEdEJRVU5FTEZOQlJrUXNUVUZGVHp0QlFVTk1MR3RDUVVGUkxESkNRVUZTTzBGQlEwUTdRVUZEUml4UFFWUk5MRU5CUVZBN1FVRlhSRHM3UVVGRlJEczdPenM3T3pzMFFrRkpVU3hMTEVWQlFVODdRVUZEWWp0QlFVTkJMR05CUVZFc1IwRkJVaXhEUVVGWkxGTkJRVm83UVVGRFJEczdRVUZGUkRzN096czdPenM3SzBKQlMxY3NSeXhGUVVGTE8wRkJRMlFzVlVGQlNTeERRVUZETEVkQlFVd3NSVUZCVlN4TlFVRk5MRWxCUVVrc1MwRkJTaXhEUVVGVkxITkNRVUZXTEVOQlFVNDdRVUZEVml4alFVRlJMRWRCUVZJc1EwRkJXU3hqUVVGYUxFVkJRVFJDTEVkQlFUVkNPenRCUVVWQkxGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNZVUZCVHl4elFrRkJXU3hWUVVGVExFOUJRVlFzUlVGQmFVSXNUVUZCYWtJc1JVRkJlVUk3TzBGQlJURkRMRmxCUVVrc1owSkJRVW83TzBGQlJVRTdRVUZEUVN4clFrRkJWU3hOUVVGTkxHRkJRVTRzUTBGQmIwSXNWVUZCY0VJc1EwRkJLMElzUjBGQkwwSXNRMEZCVmpzN1FVRkZRVHRCUVVOQkxGbEJRVWtzUTBGQlF5eFBRVUZNTEVWQlFXTTdRVUZEV2l4dlFrRkJWU3hOUVVGTkxHRkJRVTRzUTBGQmIwSXNUMEZCY0VJc1EwRkJORUlzUjBGQk5VSXNRMEZCVmpzN1FVRkZRU3hqUVVGSkxFTkJRVU1zVDBGQlRDeEZRVUZqT3p0QlFVVmFMR2RDUVVGSkxGTkJRVk1zYzBKQlFWVXNSMEZCVml4RlFVRmxMRTFCUVRWQ096dEJRVVZCTzBGQlEwRXNhVUpCUVVzc1NVRkJTU3hQUVVGVUxFbEJRVzlDTEUxQlFVMHNZVUZCVGl4RFFVRnZRaXhQUVVGNFF5eEZRVUZwUkR0QlFVTXZReXhyUWtGQlNTeFJRVUZSTEZGQlFWSXNRMEZCYVVJc1RVRkJha0lzUTBGQlNpeEZRVUU0UWp0QlFVTTFRaXd3UWtGQlZTeE5RVUZOTEdGQlFVNHNRMEZCYjBJc1QwRkJjRUlzUTBGQk5FSXNUMEZCTlVJc1EwRkJWanRCUVVOQk8wRkJRMFE3UVVGRFJqdEJRVU5HTzBGQlEwWTdPMEZCUlVRc1dVRkJTU3hEUVVGRExFOUJRVXdzUlVGQll6dEJRVU5hTEdsQ1FVRlBMREpDUVVFeVFpeEhRVUZzUXp0QlFVTkVMRk5CUmtRc1RVRkZUenRCUVVOTUxHdENRVUZSTEU5QlFWSTdRVUZEUkR0QlFVVkdMRTlCTDBKTkxFTkJRVkE3UVVGblEwUTdPMEZCUlVRN096czdPenM3T3pSQ1FVdFJMRWNzUlVGQlN6dEJRVU5ZTEdOQlFWRXNSMEZCVWl4RFFVRlpMR0ZCUVdFc1IwRkJla0k3UVVGRFFTeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRVHRCUVVOQk8wRkJRMEVzVlVGQlNTeGhRVUZoTEhOQ1FVRlZMRWRCUVZZc1EwRkJha0k3UVVGRFFTeFZRVUZKTEZsQlFWa3NWMEZCVnl4TlFVRXpRanRCUVVOQkxGVkJRVWtzVDBGQlR5eFhRVUZYTEVsQlFYUkNPenRCUVVWQk8wRkJRMEVzVlVGQlNTeEpRVUZKTEZGQlFVb3NRMEZCWVN4dFFrRkJZaXhEUVVGS0xFVkJRWFZETzBGQlEzSkRMRzlDUVVGWkxFMUJRVTBzVDBGQmJFSTdRVUZEUkRzN1FVRkZSQ3hoUVVGUExITkNRVUZaTEZWQlFVTXNUMEZCUkN4RlFVRlZMRTFCUVZZc1JVRkJjVUk3TzBGQlJYUkRMRmxCUVVrc1EwRkJReXhWUVVGVkxFOUJRVllzUTBGQmEwSXNWMEZCYkVJc1EwRkJSQ3hKUVVGdFF5eERRVUZETEZWQlFWVXNUMEZCVml4RFFVRnJRaXhYUVVGc1FpeERRVUY0UXl4RlFVRjNSVHRCUVVOMFJTeHpRa0ZCV1N4VlFVRlZMRk5CUVZZc1EwRkJiMElzVlVGQlZTeFBRVUZXTEVOQlFXdENMRWRCUVd4Q0xFbEJRWGxDTEVOQlFUZERMRU5CUVZvN1FVRkRSRHM3UVVGRlJDeFpRVUZKTEdkQ1FVRktPMEZCUTBFc1dVRkJTU3hUUVVGVExGbEJRV0lzUlVGQk1rSTdRVUZEZWtJc2IwSkJRVmNzVFVGQlRTeFpRVUZPTEVOQlFXMUNMRk5CUVc1Q0xFTkJRVmc3UVVGRFJDeFRRVVpFTEUxQlJVODdRVUZEVEN4dlFrRkJWeXhOUVVGTkxHTkJRVTRzUTBGQmNVSXNVMEZCY2tJc1EwRkJXRHRCUVVORU96dEJRVVZFTEdOQlFVMHNaMEpCUVU0c1EwRkJkVUlzYjBKQlFYWkNMRVZCUVRaRExGVkJRVk1zVTBGQlZDeEZRVUZ2UWp0QlFVTXZSQ3h2UWtGQlZ5eE5RVUZOTEdOQlFVNHNRMEZCY1VJc1UwRkJja0lzUTBGQldEdEJRVU5CTEd0Q1FVRlJMRWxCUVZJc1EwRkJZU3h6UWtGQllpeEZRVUZ4UXl4UFFVRnlRenRCUVVOQkxHdENRVUZSTEU5QlFWSTdRVUZEUkN4VFFVcEVPenRCUVUxQkxHTkJRVTBzWjBKQlFVNHNRMEZCZFVJc2QwSkJRWFpDTEVWQlFXbEVMRlZCUVZNc1UwRkJWQ3hGUVVGdlFqdEJRVU51UlN4dlFrRkJWeXhOUVVGTkxGbEJRVTRzUTBGQmJVSXNVMEZCYmtJc1EwRkJXRHRCUVVOQkxHdENRVUZSTEVsQlFWSXNRMEZCWVN4eFFrRkJZaXhGUVVGdlF5eFBRVUZ3UXp0QlFVTkJMR3RDUVVGUkxFOUJRVkk3UVVGRFJDeFRRVXBFT3p0QlFVMUJMRmxCUVVrc1dVRkJXU3hUUVVGb1FpeEZRVUV5UWp0QlFVTjZRaXhyUWtGQlVTeEpRVUZTTEVOQlFXRXNXVUZCWWl4RlFVRXlRaXhQUVVFelFqdEJRVU5CTEd0Q1FVRlJMRTlCUVZJN1FVRkRSQ3hUUVVoRUxFMUJSMDg3UVVGRFRDeGpRVUZKTEZOQlFWTXNXVUZCWWl4RlFVRXlRanRCUVVONlFpeHJRa0ZCVFN4UFFVRk9MRU5CUVdNc2MwSkJRV1FzUlVGQmMwTXNVMEZCZEVNN1FVRkRSQ3hYUVVaRUxFMUJSVTg3UVVGRFRDeHJRa0ZCVFN4UFFVRk9MRU5CUVdNc2EwSkJRV1FzUlVGQmEwTXNVMEZCYkVNN1FVRkRSRHRCUVVWR08wRkJSVVlzVDBGeVEwMHNRMEZCVUR0QlFYTkRSRHM3TzNkQ1FXb3dRbWRDTzBGQlEyWXNWVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3hoUVVGUExFMUJRVTBzVjBGQllqdEJRVU5FT3p0QlFVVkVPenM3T3p0elFrRkpaU3hWTEVWQlFWazdRVUZEZWtJc1ZVRkJTU3hSUVVGUkxFbEJRVm83UVVGRFFTeFpRVUZOTEZkQlFVNHNSMEZCYjBJc1ZVRkJjRUk3TzBGQlJVRXNXVUZCVFN4WFFVRk9MRU5CUVd0Q0xGZEJRV3hDTEVOQlFUaENMRTFCUVUwc1YwRkJjRU1zUlVGQmFVUXNWVUZCVXl4SFFVRlVMRVZCUVdNN08wRkJSVGRFTEZsQlFVa3NWVUZCVlN4TlFVRk5MSE5DUVVGT0xFTkJRVFpDTEVsQlFVa3NTVUZCU2l4RFFVRlRMRkZCUVhSRExFVkJRV2RFTEVsQlFVa3NTVUZCU2l4RFFVRlRMRkZCUVhwRUxFTkJRV1E3TzBGQlJVRXNXVUZCU1N4UlFVRlJMRVZCUVVNc1NVRkJTU3hKUVVGSkxFVkJRVlFzUlVGQllTeE5RVUZOTEZWQlFXNUNMRVZCUVN0Q0xFbEJRVWtzU1VGQlNTeEpRVUYyUXl4RlFVRTJReXhOUVVGTkxFbEJRVWtzUlVGQmRrUXNSVUZCTWtRc1RVRkJUU3hGUVVGRExGVkJRVlVzVDBGQldDeEZRVUZxUlN4RlFVRmFPMEZCUTBFc1kwRkJUU3hKUVVGT0xFTkJRVmNzU1VGQldDeEhRVUZ0UWl4UFFVRkVMRWRCUVZrc1IwRkJXaXhIUVVGclFpeEhRVUZ3UXpzN1FVRkZRU3hqUVVGTkxGZEJRVTRzUTBGQmEwSXNWMEZCYkVJc1EwRkJPRUlzUzBGQk9VSTdRVUZEUkN4UFFWSkVPenRCUVZWQk8wRkJRMEU3UVVGRFFTeFpRVUZOTEZGQlFVNHNRMEZCWlN4VlFVRm1MRWRCUVRSQ0xGVkJRVFZDT3p0QlFVVkJPMEZCUTBFc1ZVRkJTU3h2UWtGQmIwSXNaME5CUVhOQ0xFMUJRVTBzVjBGQk5VSXNSVUZCZVVNc1ZVRkJla01zUTBGQmVFSTdRVUZEUVN4WlFVRk5MR2xDUVVGT0xFZEJRVEJDTEdsQ1FVRXhRanM3UVVGRlFUdEJRVU5CTEZWQlFVa3NiVUpCUVcxQ0xDdENRVUZ4UWl4TlFVRk5MRmRCUVU0c1IwRkJiMElzYjBKQlFYcERMRVZCUVN0RUxGVkJRUzlFTEVOQlFYWkNPMEZCUTBFc1dVRkJUU3huUWtGQlRpeEhRVUY1UWl4blFrRkJla0k3TzBGQlJVRTdPenM3UVVGTFJEczdPenM3YTBKQk5uaENXU3hST3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEybzJRbVk3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRnpRa0U3T3pzN08wbEJTVTBzYVVJN1FVRkZTaXcyUWtGQldTeEZRVUZhTEVWQlFXZENMRWRCUVdoQ0xFVkJRWEZDTEdGQlFYSkNMRVZCUVc5RExGbEJRWEJETEVWQlFXdEVMRmxCUVd4RUxFVkJRV2RGTEUxQlFXaEZMRVZCUVhkRkxFdEJRWGhGTEVWQlFTdEZMR3RDUVVFdlJTeEZRVUZ0Unp0QlFVRkJPenRCUVVOcVJ5eFJRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hWUVVGTkxFZEJRVTRzUjBGQldTeEZRVUZhTzBGQlEwRXNWVUZCVFN4SlFVRk9MRWRCUVdFc1IwRkJZanRCUVVOQkxGVkJRVTBzWTBGQlRpeEhRVUYxUWl4aFFVRjJRanRCUVVOQkxGVkJRVTBzWVVGQlRpeEhRVUZ6UWl4WlFVRjBRanRCUVVOQkxGVkJRVTBzWVVGQlRpeEhRVUZ6UWl4WlFVRjBRanRCUVVOQkxGVkJRVTBzVDBGQlRpeEhRVUZuUWl4TlFVRm9RanRCUVVOQkxGVkJRVTBzVFVGQlRpeEhRVUZsTEV0QlFXWTdRVUZEUVN4VlFVRk5MRzFDUVVGT0xFZEJRVFJDTEd0Q1FVRTFRanRCUVVORU96czdPM2RDUVVWUk8wRkJRMUFzVlVGQlNTeFJRVUZSTEVsQlFWbzdRVUZEUVN4aFFVRlBMRTFCUVUwc1IwRkJZanRCUVVORU96czdkMEpCUlZNN1FVRkRVaXhWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEdGQlFVOHNUVUZCVFN4SlFVRmlPMEZCUTBRN096dDNRa0ZGWjBJN1FVRkRaaXhWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEdGQlFVOHNUVUZCVFN4alFVRmlPMEZCUTBRN096czdPMnRDUVVsWkxHbENPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRMjVEWmpzN1FVRkhRVHM3T3p0QlFVTkJPenM3TzBGQlEwRTdPenM3UVVGRFFUczdPenRCUVVkQk96czdPMEZCUTBFN096czdRVUZGUVRzN096dEJRVVZCT3pzN096czdPenM3T3pzN096dEJRWEpEUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdTVUZ0UkUwc1V6czdRVUZGU2pzN096czdPMEZCUzBFc2NVSkJRVmtzWTBGQldpeEZRVUUwUWl4TlFVRTFRaXhGUVVGdlF6dEJRVUZCT3pzN1FVRkZiRU1zVVVGQlNTeERRVUZETEdOQlFVd3NSVUZCY1VJc1RVRkJUU3hKUVVGSkxFdEJRVW9zUTBGQlZTd3lRMEZCVml4RFFVRk9PMEZCUTNKQ0xGRkJRVWtzUTBGQlF5eE5RVUZNTEVWQlFXRXNUVUZCVFN4SlFVRkpMRXRCUVVvc1EwRkJWU3huUTBGQlZpeERRVUZPT3p0QlFVVmlMRkZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZWQlFVMHNZMEZCVGl4SFFVRjFRaXhqUVVGMlFqdEJRVU5CTEZWQlFVMHNaMEpCUVU0c1IwRkJlVUlzWlVGQlpTeHpRa0ZCWml4RlFVRjZRanM3UVVGRlFUdEJRVU5CT3p0QlFVVkJMRkZCUVVrc1lVRkJZU3hsUVVGbExFMUJRV1lzUjBGQmQwSXNSMEZCZUVJc1IwRkJPRUlzUzBGQlN5eExRVUZNTEVOQlFWa3NTMEZCU3l4TlFVRk1MRXRCUVdkQ0xFdEJRV3BDTEVkQlFUQkNMRU5CUVhKRExFTkJRUzlETzBGQlEwRXNWVUZCVFN4VlFVRk9MRWRCUVcxQ0xGVkJRVzVDTzBGQlEwRXNWVUZCVFN4TlFVRk9MRWRCUVdVc1RVRkJaanM3UVVGRlFUdEJRVU5CTEZWQlFVMHNaMEpCUVU0c1EwRkJkVUlzVlVGQmRrSXNSMEZCYjBNc1ZVRkJjRU03TzBGQlJVRTdRVUZEUVN4VlFVRk5MR05CUVU0c1IwRkJkVUlzTmtKQlFXMUNMRlZCUVc1Q0xFTkJRWFpDT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGRkJRVWtzWVVGQllTeGxRVUZsTEdkQ1FVRm1MRVZCUVdwQ096dEJRVVZCTzBGQlEwRXNWVUZCVFN4UlFVRk9MRWRCUVdsQ0xIVkNRVUZoTEZWQlFXSXNSVUZCZVVJc1ZVRkJla0lzUlVGQmNVTXNUVUZCVFN4alFVRXpReXhGUVVFeVJDeE5RVUZOTEdkQ1FVRnFSU3hEUVVGcVFqczdRVUZGUVR0QlFVTkJMRlZCUVUwc1ZVRkJUaXhIUVVGdFFpeDVRa0ZCWlN4TlFVRk5MRkZCUVhKQ0xFTkJRVzVDT3p0QlFVVkJPMEZCUTBFc1ZVRkJUU3haUVVGT0xFZEJRWEZDTERKQ1FVRnBRaXcyUWtGQmJVSXNUVUZCVFN4alFVRjZRaXhGUVVGNVF5eE5RVUZOTEZGQlFTOURMRU5CUVdwQ0xFTkJRWEpDT3p0QlFVVkJMRlZCUVUwc1ZVRkJUaXhEUVVGcFFpeFJRVUZxUWl4RFFVRXdRaXhSUVVFeFFpeEhRVUZ4UXpzN1FVRkZia003UVVGRFFTeGpRVUZUTEVkQlFWUXNSVUZCWXp0QlFVTmFMRmxCUVUwc1dVRkJUaXhEUVVGdFFpeFRRVUZ1UWl4RFFVRTJRaXhKUVVGSkxFZEJRV3BETEVWQlFYTkRMRWxCUVhSRExFTkJRVEpETEZWQlFWTXNWVUZCVkN4RlFVRnhRanRCUVVNNVJDeFpRVUZKTEVkQlFVb3NSMEZCVlN4VlFVRldPMEZCUTBFc1dVRkJTU3hKUVVGS08wRkJRMFFzVDBGSVJDeEZRVWRITEV0QlNFZ3NRMEZIVXl4VlFVRlRMRTFCUVZRc1JVRkJhVUk3UVVGRGVFSXNaMEpCUVZFc1MwRkJVaXhEUVVGakxFMUJRV1E3UVVGRFFTeFpRVUZKTEVsQlFVb3NRMEZCVXl4TlFVRlVPMEZCUTBRc1QwRk9SRHRCUVU5RUxFdEJXR3RETEVOQlFYSkRPenRCUVdOQk8wRkJRMEVzWlVGQlZ5eFhRVUZZTEVOQlFYVkNMRWRCUVhaQ0xFVkJRVFJDTEZWQlFWTXNSMEZCVkN4RlFVRmpPMEZCUTNoRExGbEJRVTBzVlVGQlRpeERRVUZwUWl4WFFVRnFRaXhEUVVFMlFpeEhRVUUzUWp0QlFVTkVMRXRCUmtRN08wRkJTVUU3UVVGRFFTeFZRVUZOTEZGQlFVNHNRMEZCWlN4VlFVRm1MRWRCUVRSQ0xFMUJRVTBzVlVGQmJFTTdPMEZCUlVFN1FVRkRRU3hWUVVGTkxHTkJRVTRzUTBGQmNVSXNVVUZCY2tJc1IwRkJaME1zVFVGQlRTeFJRVUYwUXpzN1FVRkZRU3hWUVVGTkxGRkJRVTRzUTBGQlpTeG5Ra0ZCWml4RFFVRm5ReXhyUWtGQmFFTXNSVUZCYjBRc1ZVRkJVeXhUUVVGVUxFVkJRVzlDTzBGQlEzUkZMRmxCUVUwc1VVRkJUaXhEUVVGbExGTkJRV1lzUlVGQk1FSXNTVUZCTVVJc1EwRkJLMElzV1VGQlZ6dEJRVU40UXl4alFVRk5MRkZCUVU0c1EwRkJaU3hQUVVGbUxFTkJRWFZDTEc5Q1FVRjJRaXhGUVVFMlF5eFRRVUUzUXp0QlFVTkVMRTlCUmtRc1JVRkZSeXhMUVVaSUxFTkJSVk1zVlVGQlV5eE5RVUZVTEVWQlFXbENPMEZCUTNoQ0xHZENRVUZSTEV0QlFWSXNRMEZCWXl3NFEwRkJaQ3hGUVVFNFJDeE5RVUU1UkR0QlFVTkVMRTlCU2tRN1FVRk5SQ3hMUVZCRU96dEJRVk5CTEZWQlFVMHNVVUZCVGl4RFFVRmxMR2RDUVVGbUxFTkJRV2RETEhOQ1FVRm9ReXhGUVVGM1JDeFZRVUZUTEZOQlFWUXNSVUZCYjBJN1FVRkRNVVVzV1VGQlRTeFpRVUZPTEVOQlFXMUNMRk5CUVc1Q0xFVkJRVGhDTEVsQlFUbENMRU5CUVcxRExGbEJRVmM3UVVGRE5VTXNZMEZCVFN4UlFVRk9MRU5CUVdVc1QwRkJaaXhEUVVGMVFpeDNRa0ZCZGtJc1JVRkJhVVFzVTBGQmFrUTdRVUZEUkN4UFFVWkVMRVZCUlVjc1MwRkdTQ3hEUVVWVExGVkJRVk1zVFVGQlZDeEZRVUZwUWp0QlFVTjRRaXhuUWtGQlVTeExRVUZTTEVOQlFXTXNNa05CUVdRc1JVRkJNa1FzVFVGQk0wUTdRVUZEUkN4UFFVcEVPMEZCVFVRc1MwRlFSRHM3UVVGVFFUdEJRVU5CTzBGQlEwRXNiVUpCUVdVc1ZVRkJaaXhIUVVFMFFpeE5RVUZOTEZWQlFXeERPenRCUVVWQk8wRkJRMEVzVlVGQlRTeGpRVUZPTEVkQlFYVkNMRFpDUVVGdFFpeE5RVUZOTEZWQlFYcENMRVZCUVhGRExFMUJRVTBzVlVGQk0wTXNSVUZCZFVRc1RVRkJUU3hSUVVFM1JDeEZRVUYxUlN4TlFVRk5MR2RDUVVFM1JTeERRVUYyUWpzN1FVRkZRVHRCUVVOQk8wRkJSVVE3TzBGQlJVUTdPenM3T3pzN08yOURRVWxuUWl4VkxFVkJRVmtzUTBGRk0wSTdRVUZFUXpzN08wRkJSMFk3T3pzN096czdPMjlEUVV0blFpeGxMRVZCUVdsQ0xGVXNSVUZCV1N4RFFVVTFRenRCUVVSRE96czdRVUZIUmpzN096czdPenRuUTBGSldTeHZRaXhGUVVGelFqczdRVUZGYUVNc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNWVUZCU1N4RFFVRkRMRzlDUVVGTUxFVkJRVEpDTEUxQlFVMHNTVUZCU1N4TFFVRktMRU5CUVZVc05FTkJRVllzUTBGQlRqczdRVUZGTTBJc1lVRkJUeXh6UWtGQldTeFZRVUZUTEU5QlFWUXNSVUZCYTBJc1RVRkJiRUlzUlVGQk1FSTdPMEZCUlRORExGbEJRVWtzYjBKQlFVbzdRVUZEUVN4WlFVRkpMSGRDUVVGS08wRkJRMEVzV1VGQlNTd3lRa0ZCU2p0QlFVTkJMRmxCUVVrc09FSkJRVW83TzBGQlJVRXNXVUZCU1N4alFVRmpMRk5CUVdRc1YwRkJZeXhEUVVGVExFMUJRVlFzUlVGQmFVSTdRVUZEYWtNc2EwSkJRVkVzUzBGQlVpeERRVUZqTERCRFFVRmtMRVZCUVRCRUxFMUJRVEZFTzBGQlEwRXNhVUpCUVU4c1RVRkJVRHRCUVVORUxGTkJTRVE3TzBGQlMwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3huUWtGQlVTeEpRVUZTTEVOQlFXRXNjVVJCUVdJN1FVRkRRU3huUWtGQlVTeEpRVUZTTEVOQlFXRXNPRUpCUVdJc1JVRkJOa01zYjBKQlFUZERPMEZCUTBFc1pVRkJUeXhOUVVGTkxHZENRVUZPTEVOQlFYVkNMRzlDUVVGMlFpeERRVUUwUXl4dlFrRkJOVU1zUlVGQmEwVXNTVUZCYkVVc1EwRkJkVVVzVlVGQlV5eHBRa0ZCVkN4RlFVRTBRanRCUVVONFJ6dEJRVU5CTEd0Q1FVRlJMRWxCUVZJc1EwRkJZU3c0UWtGQllqczdRVUZGUVR0QlFVTkJPMEZCUTBFc0swSkJRWEZDTEdsQ1FVRnlRanM3UVVGRlFTeGpRVUZKTEcxQ1FVRnRRaXhyUWtGQmEwSXNaMEpCUVhwRE96dEJRVVZCTEdOQlFVa3NjVUpCUVhGQ0xHZENRVUY2UWl4RlFVRXlRenRCUVVONlF5eHRRa0ZCVHl4clFrRkJhMElzWVVGQmVrSTdRVUZEUkRzN1FVRkZSRHRCUVVOQkxHbENRVUZQTEUxQlFVMHNaMEpCUVU0c1EwRkJkVUlzZFVKQlFYWkNMRU5CUVN0RExHZENRVUV2UXl4RFFVRlFPMEZCUTBRc1UwRm9RazBzUlVGcFFrNHNTVUZxUWswc1EwRnBRa1FzVlVGQlV5eGhRVUZVTEVWQlFYZENPMEZCUXpWQ0xHdENRVUZSTEVsQlFWSXNRMEZCWVN3clFrRkJZanM3UVVGRlFUczdRVUZGUVN4clEwRkJkMElzWVVGQmVFSTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMR05CUVVrc1UwRkJVeXhKUVVGaU96dEJRVVZCTEdsQ1FVRlBMRTFCUVZBN1FVRkRSQ3hUUVd4RFRTeEZRVzFEVGl4SlFXNURUU3hEUVcxRFJDeFZRVUZUTEZsQlFWUXNSVUZCZFVJN1FVRkRNMElzYTBKQlFWRXNTVUZCVWl4RFFVRmhMR3REUVVGaUxFVkJRV2xFTEZsQlFXcEVPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxHTkJRVWtzWjBKQlFXZENMRWxCUVhCQ08wRkJRMEVzWTBGQlNTeG5Ra0ZCU2pzN1FVRkZRU3hqUVVGSkxHRkJRVW9zUlVGQmJVSTdPMEZCUldwQ08wRkJRMEVzYzBKQlFWVXNUVUZCVFN4UlFVRk9MRU5CUVdVc1lVRkJaaXhGUVVGV096dEJRVVZCTzBGQlEwUXNWMEZPUkN4TlFVMVBPenRCUVVWTUxHZENRVUZKTEZOQlFWTXNjMEpCUVZVc2IwSkJRVllzUlVGQlowTXNUVUZCTjBNN08wRkJSVUU3UVVGRFFTeHpRa0ZCVlN4TlFVRk5MRkZCUVU0c1EwRkJaU3hWUVVGbUxFTkJRVEJDTEUxQlFURkNMRU5CUVZZN1FVRkRSRHM3UVVGRlJEdEJRVU5CTEdsQ1FVRlBMRTlCUVZBN1FVRkRSQ3hUUVdwRlRTeEZRV2xGU2l4SlFXcEZTU3hEUVdsRlF5eFZRVUZUTEU5QlFWUXNSVUZCYTBJN1FVRkRlRUlzYTBKQlFWRXNTVUZCVWl4RFFVRmhMSFZDUVVGaUxFVkJRWE5ETEU5QlFYUkRPenRCUVVWQk8wRkJRMEU3UVVGRFFTeHBRa0ZCVHl4UFFVRlFPMEZCUTBRc1UwRjJSVTBzUlVGMVJVb3NWVUZCVXl4TlFVRlVMRVZCUVdsQ08wRkJRMnhDTEd0Q1FVRlJMRXRCUVZJc1EwRkJZeXh4UTBGQlpDeEZRVUZ4UkN4TlFVRnlSRHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4alFVRkpMRlZCUVZVc1RVRkJUU3hqUVVGT0xFTkJRWEZDTEdGQlFYSkNMRVZCUVdRN08wRkJSVUVzYTBKQlFWRXNWMEZCVWl4RFFVRnZRaXhIUVVGd1FpeEZRVUY1UWl4VlFVRlRMRWRCUVZRc1JVRkJZenRCUVVOeVF5eHJRa0ZCVFN4VlFVRk9MRU5CUVdsQ0xGZEJRV3BDTEVOQlFUWkNMRWRCUVRkQ08wRkJRMFFzVjBGR1JEczdRVUZKUVN4cFFrRkJUeXhQUVVGUU8wRkJRMFFzVTBGd1JrMHNSVUZ4Ums0c1NVRnlSazBzUTBGeFJrUXNWVUZCVXl4UFFVRlVMRVZCUVd0Q08wRkJRM1JDTEd0Q1FVRlJMRWxCUVZJc1EwRkJZU3huUTBGQllqczdRVUZGUVN3MFFrRkJhMElzVDBGQmJFSTdPMEZCUlVFN1FVRkRRU3hwUWtGQlR5eE5RVUZOTEZGQlFVNHNRMEZCWlN4bFFVRm1MRU5CUVN0Q0xFOUJRUzlDTEVWQlFYZERMRzlDUVVGNFF5eEZRVUU0UkN4clFrRkJPVVFzUTBGQlVEdEJRVU5FTEZOQk5VWk5MRVZCTmtaT0xFbEJOMFpOTEVOQk5rWkVMRlZCUVZNc1ZVRkJWQ3hGUVVGeFFqdEJRVU42UWl4clFrRkJVU3hKUVVGU0xFTkJRV0VzZDBOQlFXSXNSVUZCZFVRc1ZVRkJka1E3TzBGQlJVRTdRVUZEUVN4M1FrRkJZeXhWUVVGa096dEJRVVZCTzBGQlEwRXNZMEZCU1N4blFrRkJaMElzUlVGQmNFSTdRVUZEUVN4alFVRkpMRU5CUVVNc2QwSkJRVmtzYlVKQlFXMUNMR0ZCUVM5Q0xFTkJRVXdzUlVGQmIwUTdRVUZEYkVRc1owSkJRVWs3UVVGRFJpdzRRa0ZCWjBJc2MwSkJRV01zUlVGQlpDeEZRVUZyUWl4TFFVRkxMRXRCUVV3c1EwRkJWeXh0UWtGQmJVSXNZVUZCT1VJc1EwRkJiRUlzUTBGQmFFSTdRVUZEUkN4aFFVWkVMRU5CUlVVc1QwRkJUeXhEUVVGUUxFVkJRVlU3UVVGRFZpdzRRa0ZCWjBJc2JVSkJRVzFDTEdGQlFXNURPMEZCUTBRN1FVRkRSanRCUVVORUxIZENRVUZqTEZWQlFXUXNSMEZCTWtJc1RVRkJUU3hWUVVGcVF6czdRVUZGUVR0QlFVTkJMR2xDUVVGUExHZENRVUZuUWl4bFFVRm9RaXhEUVVGblF5eHpRa0ZCYzBJc1ZVRkJkRVFzUlVGQmEwVXNWMEZCYkVVc1JVRkJLMFVzWVVGQkwwVXNRMEZCVUR0QlFVTkVMRk5CYUVoTkxFVkJhVWhPTEVsQmFraE5MRU5CYVVoRUxGVkJRVk1zY1VKQlFWUXNSVUZCWjBNN1FVRkRjRU1zYTBKQlFWRXNTVUZCVWl4RFFVRmhMREJEUVVGaUxFVkJRWGxFTEhGQ1FVRjZSRHM3UVVGRlFUczdRVUZGUVR0QlFVTkJMR2RDUVVGTkxGVkJRVTRzUTBGQmFVSXNWMEZCYWtJc1EwRkJOa0lzVjBGQk4wSXNSVUZCTUVNc1ZVRkJVeXhIUVVGVUxFVkJRV003UVVGRGRFUXNORUpCUVdkQ0xGZEJRV2hDTEVOQlFUUkNMRWRCUVRWQ08wRkJRMFFzVjBGR1JEczdRVUZKUVR0QlFVTkJMR05CUVVrc1ZVRkJWVHRCUVVOYUxDdENRVUZ0UWl4WFFVUlFPMEZCUlZvc2IwSkJRVkU3UVVGR1NTeFhRVUZrT3p0QlFVdEJMR3RDUVVGUkxFOUJRVkk3TzBGQlJVRTdRVUZEUVN4clFrRkJVU3hIUVVGU0xFTkJRVmtzYVVSQlFWbzdRVUZEUkN4VFFYSkpUU3hGUVhOSlRpeExRWFJKVFN4RFFYTkpRU3hYUVhSSlFTeERRVUZRTzBGQmQwbEVMRTlCTVVwTkxFTkJRVkE3UVVFMFNrUTdPMEZCUlVRN096czdPenM3TmtKQlNWTXNXU3hGUVVGak96dEJRVVZ5UWl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFZRVUZKTEVOQlFVTXNXVUZCVEN4RlFVRnRRaXhOUVVGTkxFbEJRVWtzUzBGQlNpeERRVUZWTERSQ1FVRldMRU5CUVU0N08wRkJSVzVDTEdGQlFVOHNjMEpCUVZrc1ZVRkJVeXhQUVVGVUxFVkJRV3RDTEUxQlFXeENMRVZCUVRCQ096dEJRVVV6UXl4WlFVRkpMRk5CUVZNc2MwSkJRVlVzV1VGQlZpeEZRVUYzUWl4TlFVRnlRenM3UVVGRlFTeFpRVUZKTEVOQlFVTXNUVUZCVEN4RlFVRmhPMEZCUTFnc2JVSkJRVk1zV1VGQlZEdEJRVU5FT3p0QlFVVkVMRmxCUVVrc2NVSkJRVW83UVVGRFFTeFpRVUZKTEhkQ1FVRktPMEZCUTBFc1dVRkJTU3cyUWtGQlNqdEJRVU5CTEZsQlFVa3NNa0pCUVVvN08wRkJSVUVzV1VGQlNTeGpRVUZqTEZOQlFXUXNWMEZCWXl4RFFVRlRMRTFCUVZRc1JVRkJhVUk3UVVGRGFrTXNhMEpCUVZFc1MwRkJVaXhEUVVGakxHdEVRVUZrTEVWQlFXdEZMRTFCUVd4Rk8wRkJRMEVzYVVKQlFVOHNUVUZCVUR0QlFVTkVMRk5CU0VRN08wRkJTMEU3UVVGRFFTeG5Ra0ZCVVN4SlFVRlNMRU5CUVdFc05rUkJRV0k3UVVGRFFTeG5Ra0ZCVVN4SlFVRlNMRU5CUVdFc2FVUkJRV0lzUlVGQlowVXNUVUZCYUVVN1FVRkRRU3hqUVVGTkxGRkJRVTRzUTBGQlpTeHBRa0ZCWml4RFFVRnBReXhOUVVGcVF5eEZRVUY1UXl4SlFVRjZReXhEUVVFNFF5eFZRVUZUTEcxQ1FVRlVMRVZCUVRoQ08wRkJRekZGTzBGQlEwRXNhMEpCUVZFc1NVRkJVaXhEUVVGaExEUkNRVUZpTEVWQlFUSkRMRzFDUVVFelF6czdRVUZGUVRzN1FVRkZRVHRCUVVOQkxHTkJRVWtzVDBGQlR6dEJRVU5VTEdsRFFVRnhRaXh0UWtGRVdqdEJRVVZVTEc5Q1FVRlJPMEZCUmtNc1YwRkJXRHM3UVVGTFFTeHJRa0ZCVVN4SlFVRlNPMEZCUTBFc2EwSkJRVkVzU1VGQlVpeERRVUZoTEhWRVFVRmlPMEZCUTBRc1UwRmtSQ3hGUVdWRExFdEJaa1FzUTBGbFR5eFZRVUZUTEUxQlFWUXNSVUZCYVVJN08wRkJSWFJDTzBGQlEwRXNhMEpCUVZFc1NVRkJVaXhEUVVGaExEQkNRVUZpTEVWQlFYbERMRTFCUVhwRE96dEJRVVZCT3p0QlFVVkJPMEZCUTBFc1owSkJRVTBzWjBKQlFVNHNRMEZCZFVJc2FVSkJRWFpDTEVOQlFYbERMRmxCUVhwRExFVkJRME1zU1VGRVJDeERRVU5OTEZWQlFWTXNZMEZCVkN4RlFVRjVRanM3UVVGRk4wSXNiMEpCUVZFc1NVRkJVaXhEUVVGaExIRkRRVUZpTEVWQlFXOUVMR05CUVhCRU96dEJRVVZCTzBGQlEwRXNPRUpCUVd0Q0xHTkJRV3hDT3p0QlFVVkJMR2RDUVVGSkxHMUNRVUZ0UWl4bFFVRmxMR2RDUVVGMFF6czdRVUZGUVN4blFrRkJTU3h4UWtGQmNVSXNaMEpCUVhwQ0xFVkJRVEpETzBGQlEzcERMSEZDUVVGUExHVkJRV1VzWVVGQmRFSTdRVUZEUkRzN1FVRkZSRHRCUVVOQkxHMUNRVUZQTEUxQlFVMHNaMEpCUVU0c1EwRkJkVUlzZFVKQlFYWkNMRU5CUVN0RExHZENRVUV2UXl4RFFVRlFPMEZCUTBRc1YwRm9Ra1FzUlVGcFFrTXNTMEZxUWtRc1EwRnBRazhzVjBGcVFsQXNSVUZyUWtNc1NVRnNRa1FzUTBGclFrMHNWVUZCVXl4cFFrRkJWQ3hGUVVFMFFqdEJRVU5vUXl4dlFrRkJVU3hKUVVGU0xFTkJRV0VzZFVOQlFXSXNSVUZCYzBRc2FVSkJRWFJFT3p0QlFVVkJPenRCUVVWQkxHbERRVUZ4UWl4cFFrRkJja0k3TzBGQlJVRTdRVUZEUVN4blFrRkJTU3hUUVVGVExFbEJRV0k3UVVGRFFTeHRRa0ZCVHl4TlFVRlFPMEZCUTBRc1YwRTFRa1FzUlVFMlFrTXNTVUUzUWtRc1EwRTJRazBzVlVGQlV5eE5RVUZVTEVWQlFXbENPMEZCUTNKQ08wRkJRMEVzYlVKQlFVOHNUVUZCVFN4UlFVRk9MRU5CUVdVc1ZVRkJaaXhEUVVFd1FpeE5RVUV4UWl4RFFVRlFPMEZCUTBRc1YwRm9RMFFzUlVGcFEwTXNTVUZxUTBRc1EwRnBRMDBzVlVGQlV5eFhRVUZVTEVWQlFYTkNPenRCUVVVeFFpeHZRa0ZCVVN4SlFVRlNMRU5CUVdFc01FUkJRV0lzUlVGQmVVVXNWMEZCZWtVN08wRkJSVUU3TzBGQlJVRXNNa0pCUVdVc1YwRkJaanRCUVVOQkxHMUNRVUZQTEZkQlFWQTdRVUZEUkN4WFFYcERSQ3hGUVRCRFF5eExRVEZEUkN4RFFUQkRUeXhWUVVGVExFMUJRVlFzUlVGQmFVSTdRVUZEZEVJc2IwSkJRVkVzU1VGQlVpeERRVUZoTEN0RFFVRmlMRVZCUVRoRUxFMUJRVGxFT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHZENRVUZKTEZWQlFWVXNUVUZCVFN4alFVRk9MRU5CUVhGQ0xHRkJRWEpDTEVWQlFXUTdRVUZEUVN4dlFrRkJVU3hYUVVGU0xFTkJRVzlDTEVkQlFYQkNMRVZCUVhsQ0xGVkJRVk1zUjBGQlZDeEZRVUZqTzBGQlEzSkRMRzlDUVVGTkxGVkJRVTRzUTBGQmFVSXNWMEZCYWtJc1EwRkJOa0lzUjBGQk4wSTdRVUZEUkN4aFFVWkVPenRCUVVsQkxHMUNRVUZQTEU5QlFWQTdRVUZEUkN4WFFYUkVSQ3hGUVhWRVF5eEpRWFpFUkN4RFFYVkVUU3hWUVVGVExFOUJRVlFzUlVGQmEwSTdRVUZEZEVJc2IwSkJRVkVzU1VGQlVpeERRVUZoTERaRFFVRmlMRVZCUVRSRUxFOUJRVFZFTEVWQlFYRkZMRmxCUVhKRkxFVkJRVzFHTEUxQlFXNUdPenRCUVVWQkxESkNRVUZsTEU5QlFXWTdPMEZCUlVFN1FVRkRRU3h0UWtGQlR5eE5RVUZOTEZGQlFVNHNRMEZCWlN4WlFVRm1MRU5CUVRSQ0xGbEJRVFZDTEVWQlFUQkRMRTFCUVRGRExFTkJRVkE3UVVGRFJDeFhRVGxFUkN4RlFTdEVReXhKUVM5RVJDeERRU3RFVFN4VlFVRlRMRzFDUVVGVUxFVkJRVGhDT3p0QlFVVnNReXh2UWtGQlVTeEpRVUZTTEVOQlFXRXNkVU5CUVdJc1JVRkJjMFFzYlVKQlFYUkVPenRCUVVWQk96dEJRVVZCTEcxRFFVRjFRaXh0UWtGQmRrSTdPMEZCUlVFN1FVRkRRU3huUWtGQlNTeG5Ra0ZCWjBJc1JVRkJjRUk3UVVGRFFTeG5Ra0ZCU1N4RFFVRkRMSGRDUVVGWkxHZENRVUZuUWl4aFFVRTFRaXhEUVVGTUxFVkJRV2xFTzBGQlF5OURMR3RDUVVGSk8wRkJRMFlzWjBOQlFXZENMSE5DUVVGakxFVkJRV1FzUlVGQmEwSXNTMEZCU3l4TFFVRk1MRU5CUVZjc1owSkJRV2RDTEdGQlFUTkNMRU5CUVd4Q0xFTkJRV2hDTzBGQlEwUXNaVUZHUkN4RFFVVkZMRTlCUVU4c1EwRkJVQ3hGUVVGVk8wRkJRMVlzWjBOQlFXZENMR2RDUVVGblFpeGhRVUZvUXp0QlFVTkVPMEZCUTBZN08wRkJSVVFzTUVKQlFXTXNWVUZCWkN4SFFVRXlRaXhOUVVGTkxGVkJRV3BET3p0QlFVVkJPMEZCUTBFc2JVSkJRVThzWVVGQllTeGxRVUZpTEVOQlFUWkNMRzFDUVVGdFFpeFZRVUZvUkN4RlFVRTBSQ3h0UWtGQk5VUXNSVUZCYVVZc1lVRkJha1lzUTBGQlVEdEJRVU5FTEZkQmNrWkVMRVZCYzBaRExFbEJkRVpFTEVOQmMwWk5MRlZCUVZNc2NVSkJRVlFzUlVGQlowTTdRVUZEY0VNc2IwSkJRVkVzU1VGQlVpeERRVUZoTEdsRVFVRmlMRVZCUVdkRkxIRkNRVUZvUlRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTEd0Q1FVRk5MRlZCUVU0c1EwRkJhVUlzVjBGQmFrSXNRMEZCTmtJc2IwSkJRVGRDTEVWQlFXMUVMRlZCUVZNc1IwRkJWQ3hGUVVGak8wRkJReTlFTERKQ1FVRmhMRmRCUVdJc1EwRkJlVUlzUjBGQmVrSTdRVUZEUkN4aFFVWkVPenRCUVVsQk96dEJRVVZCTzBGQlEwRXNaMEpCUVVrc1QwRkJUenRCUVVOVUxHMURRVUZ4UWl4dlFrRkVXanRCUVVWVUxITkNRVUZSTzBGQlJrTXNZVUZCV0RzN1FVRkxRU3h2UWtGQlVTeEpRVUZTTzBGQlEwRXNiMEpCUVZFc1NVRkJVaXhEUVVGaExIVkVRVUZpTzBGQlJVUXNWMEV6UjBRc1JVRTBSME1zUzBFMVIwUXNRMEUwUjA4c1YwRTFSMUE3UVVFNFIwUXNVMEZ5U1VRN1FVRjFTVVFzVDBFMVNrMHNRMEZCVUR0QlFUaEtSRHM3UVVGRlJEczdPenM3T3p0cFEwRkpZU3hYTEVWQlFXRTdPMEZCUlhoQ0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRlZCUVVrc1EwRkJReXhYUVVGTUxFVkJRV3RDTEUxQlFVMHNTVUZCU1N4TFFVRktMRU5CUVZVc2NVVkJRVllzUTBGQlRqczdRVUZGYkVJc1lVRkJUeXh6UWtGQldTeFZRVUZUTEU5QlFWUXNSVUZCYTBJc1RVRkJiRUlzUlVGQk1FSTdPMEZCUlRORExGbEJRVWtzVTBGQlV5eHpRa0ZCVlN4WFFVRldMRVZCUVhWQ0xFMUJRWEJET3p0QlFVVkJMRmxCUVVrc1EwRkJReXhOUVVGTUxFVkJRV0U3UVVGRFdDeHRRa0ZCVXl4WFFVRlVPMEZCUTBRN08wRkJSVVFzV1VGQlNTeHpRa0ZCU2p0QlFVTkJMRmxCUVVrc2VVSkJRVW83UVVGRFFTeFpRVUZKTERSQ1FVRktPMEZCUTBFc1dVRkJTU3cwUWtGQlNqczdRVUZGUVN4WlFVRkpMR05CUVdNc1UwRkJaQ3hYUVVGakxFTkJRVk1zVFVGQlZDeEZRVUZwUWp0QlFVTnFReXhyUWtGQlVTeExRVUZTTEVOQlFXTXNPRU5CUVdRc1JVRkJPRVFzVFVGQk9VUTdRVUZEUVN4cFFrRkJUeXhOUVVGUU8wRkJRMFFzVTBGSVJEczdRVUZMUVR0QlFVTkJMR2RDUVVGUkxFbEJRVklzUTBGQllTeHZSVUZCWWp0QlFVTkJMR2RDUVVGUkxFbEJRVklzUTBGQllTeHZSRUZCWWl4RlFVRnRSU3hOUVVGdVJUdEJRVU5CTEdWQlFVOHNUVUZCVFN4UlFVRk9MRU5CUVdVc1owSkJRV1lzUTBGQlowTXNUVUZCYUVNc1JVRkJkME1zU1VGQmVFTXNRMEZCTmtNc1ZVRkJVeXhyUWtGQlZDeEZRVUUyUWp0QlFVTXZSVHRCUVVOQkxHdENRVUZSTEVsQlFWSXNRMEZCWVN3d1FrRkJZaXhGUVVGNVF5eHJRa0ZCZWtNN08wRkJSVUU3TzBGQlJVRTdRVUZEUVN4alFVRkpMRmRCUVZjN1FVRkRZaXhuUTBGQmIwSXNhMEpCUkZBN1FVRkZZaXh2UWtGQlVUdEJRVVpMTEZkQlFXWTdPMEZCUzBFc2EwSkJRVkVzVVVGQlVqdEJRVU5CTEd0Q1FVRlJMRWxCUVZJc1EwRkJZU3gxUkVGQllqdEJRVU5FTEZOQlpFMHNSVUZsVGl4TFFXWk5MRU5CWlVFc1ZVRkJVeXhOUVVGVUxFVkJRV2xDT3p0QlFVVjBRanRCUVVOQkxHdENRVUZSTEVsQlFWSXNRMEZCWVN4M1FrRkJZaXhGUVVGMVF5eE5RVUYyUXpzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTEdkQ1FVRk5MR2RDUVVGT0xFTkJRWFZDTEhGQ1FVRjJRaXhEUVVFMlF5eFhRVUUzUXl4RlFVTkRMRWxCUkVRc1EwRkRUU3hWUVVGVExHVkJRVlFzUlVGQk1FSTdPMEZCUlRsQ0xHOUNRVUZSTEVsQlFWSXNRMEZCWVN4dlEwRkJZaXhGUVVGdFJDeGxRVUZ1UkRzN1FVRkZRVHRCUVVOQkxDdENRVUZ0UWl4bFFVRnVRanM3UVVGRlFTeG5Ra0ZCU1N4dFFrRkJiVUlzWjBKQlFXZENMR2RDUVVGMlF6czdRVUZGUVN4blFrRkJTU3h4UWtGQmNVSXNaMEpCUVhwQ0xFVkJRVEpETzBGQlEzcERMSEZDUVVGUExHZENRVUZuUWl4aFFVRjJRanRCUVVORU96dEJRVVZFTzBGQlEwRXNiVUpCUVU4c1RVRkJUU3huUWtGQlRpeERRVUYxUWl4MVFrRkJka0lzUTBGQkswTXNaMEpCUVM5RExFTkJRVkE3UVVGRFJDeFhRV2hDUkN4RlFXbENReXhMUVdwQ1JDeERRV2xDVHl4WFFXcENVQ3hGUVd0Q1F5eEpRV3hDUkN4RFFXdENUU3hWUVVGVExHRkJRVlFzUlVGQmQwSTdRVUZETlVJc2IwSkJRVkVzU1VGQlVpeERRVUZoTEhsRFFVRmlMRVZCUVhkRUxHRkJRWGhFT3p0QlFVVkJPenRCUVVWQkxHdERRVUZ6UWl4aFFVRjBRanM3UVVGRlFUdEJRVU5CTEdkQ1FVRkpMRk5CUVZNc1NVRkJZanRCUVVOQkxHMUNRVUZQTEUxQlFWQTdRVUZEUkN4WFFUVkNSQ3hGUVRaQ1F5eEpRVGRDUkN4RFFUWkNUU3hWUVVGVExFMUJRVlFzUlVGQmFVSTdRVUZEY2tJN1FVRkRRU3h0UWtGQlR5eE5RVUZOTEZGQlFVNHNRMEZCWlN4VlFVRm1MRU5CUVRCQ0xFMUJRVEZDTEVOQlFWQTdRVUZEUkN4WFFXaERSQ3hGUVdsRFF5eEpRV3BEUkN4RFFXbERUU3hWUVVGVExGbEJRVlFzUlVGQmRVSTdPMEZCUlROQ0xHOUNRVUZSTEVsQlFWSXNRMEZCWVN4NVJFRkJZaXhGUVVGM1JTeFpRVUY0UlRzN1FVRkZRU3cwUWtGQlowSXNXVUZCYUVJN1FVRkRRU3h0UWtGQlR5eFpRVUZRTzBGQlEwUXNWMEYyUTBRc1JVRjNRME1zUzBGNFEwUXNRMEYzUTA4c1ZVRkJVeXhOUVVGVUxFVkJRV2xDTzBGQlEzUkNMRzlDUVVGUkxFbEJRVklzUTBGQllTdzRRMEZCWWl4RlFVRTJSQ3hOUVVFM1JEczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3huUWtGQlNTeFZRVUZWTEUxQlFVMHNZMEZCVGl4RFFVRnhRaXhoUVVGeVFpeEZRVUZrTzBGQlEwRXNiMEpCUVZFc1YwRkJVaXhEUVVGdlFpeEhRVUZ3UWl4RlFVRjVRaXhWUVVGVExFZEJRVlFzUlVGQll6dEJRVU55UXl4dlFrRkJUU3hWUVVGT0xFTkJRV2xDTEZkQlFXcENMRU5CUVRaQ0xFZEJRVGRDTzBGQlEwUXNZVUZHUkRzN1FVRkpRU3h0UWtGQlR5eFBRVUZRTzBGQlEwUXNWMEZ3UkVRc1JVRnhSRU1zU1VGeVJFUXNRMEZ4UkUwc1ZVRkJVeXhQUVVGVUxFVkJRV3RDTzBGQlEzUkNMRzlDUVVGUkxFbEJRVklzUTBGQllTdzJRMEZCWWl4RlFVRTBSQ3hQUVVFMVJDeEZRVUZ4UlN4WlFVRnlSU3hGUVVGdFJpeE5RVUZ1UmpzN1FVRkZRU3cwUWtGQlowSXNUMEZCYUVJN08wRkJSVUU3UVVGRFFTeHRRa0ZCVHl4TlFVRk5MRkZCUVU0c1EwRkJaU3huUWtGQlppeERRVUZuUXl4UFFVRm9ReXhGUVVGNVF5eE5RVUY2UXl4RFFVRlFPMEZCUTBRc1YwRTFSRVFzUlVFMlJFTXNTVUUzUkVRc1EwRTJSRTBzVlVGQlV5eHJRa0ZCVkN4RlFVRTJRanM3UVVGRmFrTXNiMEpCUVZFc1NVRkJVaXhEUVVGaExIVkRRVUZpTEVWQlFYTkVMR3RDUVVGMFJEczdRVUZGUVRzN1FVRkZRU3hyUTBGQmMwSXNhMEpCUVhSQ096dEJRVVZCTzBGQlEwRXNaMEpCUVVrc1owSkJRV2RDTEVWQlFYQkNPMEZCUTBFc1owSkJRVWtzUTBGQlF5eDNRa0ZCV1N4cFFrRkJhVUlzWVVGQk4wSXNRMEZCVEN4RlFVRnJSRHRCUVVOb1JDeHJRa0ZCU1R0QlFVTkdMR2REUVVGblFpeHpRa0ZCWXl4RlFVRmtMRVZCUVd0Q0xFdEJRVXNzUzBGQlRDeERRVUZYTEdsQ1FVRnBRaXhoUVVFMVFpeERRVUZzUWl4RFFVRm9RanRCUVVORUxHVkJSa1FzUTBGRlJTeFBRVUZQTEVOQlFWQXNSVUZCVlR0QlFVTldMR2REUVVGblFpeHBRa0ZCYVVJc1lVRkJha003UVVGRFJEdEJRVU5HTzBGQlEwUXNNRUpCUVdNc1ZVRkJaQ3hIUVVFeVFpeE5RVUZOTEZWQlFXcERPenRCUVVWQk8wRkJRMEVzYlVKQlFVOHNZMEZCWXl4bFFVRmtMRU5CUVRoQ0xHOUNRVUZ2UWl4VlFVRnNSQ3hGUVVFNFJDeHJRa0ZCT1VRc1JVRkJhMFlzWVVGQmJFWXNRMEZCVUR0QlFVTkVMRmRCYkVaRUxFVkJiVVpETEVsQmJrWkVMRU5CYlVaTkxGVkJRVk1zY1VKQlFWUXNSVUZCWjBNN1FVRkRjRU1zYjBKQlFWRXNTVUZCVWl4RFFVRmhMR2xFUVVGaUxFVkJRV2RGTEhGQ1FVRm9SVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJMR3RDUVVGTkxGVkJRVTRzUTBGQmFVSXNWMEZCYWtJc1EwRkJOa0lzYlVKQlFUZENMRVZCUVd0RUxGVkJRVk1zUjBGQlZDeEZRVUZqTzBGQlF6bEVMRFJDUVVGakxGZEJRV1FzUTBGQk1FSXNSMEZCTVVJN1FVRkRSQ3hoUVVaRU96dEJRVWxCT3p0QlFVVkJPMEZCUTBFc1owSkJRVWtzVjBGQlZ6dEJRVU5pTEd0RFFVRnZRaXh0UWtGRVVEdEJRVVZpTEhOQ1FVRlJPMEZCUmtzc1lVRkJaanM3UVVGTFFTeHZRa0ZCVVN4UlFVRlNPMEZCUTBFc2IwSkJRVkVzU1VGQlVpeERRVUZoTEhWRVFVRmlPMEZCUlVRc1YwRjRSMFFzUlVGNVIwTXNTMEY2UjBRc1EwRjVSMDhzVjBGNlIxQTdRVUV5UjBRc1UwRnNTVTBzUTBGQlVEdEJRVzlKUkN4UFFYcEtUU3hEUVVGUU8wRkJNa3BFT3p0QlFVVkVPenM3T3pzN096UkNRVWxSTzBGQlEwNHNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzWTBGQlVTeEpRVUZTTEVOQlFXRXNNRUpCUVdJN1FVRkRRU3hoUVVGUExITkNRVUZaTEZWQlFWTXNUMEZCVkN4RlFVRnJRaXhOUVVGc1FpeEZRVUV3UWpzN1FVRkZNME1zWTBGQlRTeFJRVUZPTEVOQlFXVXNjMEpCUVdZc1IwRkJkME1zU1VGQmVFTXNRMEZCTmtNc1ZVRkJVeXhOUVVGVUxFVkJRV2xDTzBGQlF6VkVMR3RDUVVGUkxFbEJRVklzUTBGQllTeG5SRUZCWWl4RlFVRXJSQ3hOUVVFdlJEdEJRVU5CTEd0Q1FVRlJMRWxCUVZJN1FVRkRSQ3hUUVVoRUxFVkJSMGNzUzBGSVNDeERRVWRUTEZWQlFWTXNUVUZCVkN4RlFVRnBRanRCUVVONFFpeHJRa0ZCVVN4TFFVRlNMRU5CUVdNc2IwTkJRV1FzUlVGQmIwUXNUVUZCY0VRN1FVRkRRU3hwUWtGQlR5eExRVUZRTzBGQlEwUXNVMEZPUkR0QlFWRkVMRTlCVmswc1EwRkJVRHRCUVZsRU96dEJRVVZFT3pzN096czdPMjFEUVVsbExFY3NSVUZCU3p0QlFVTnNRanRCUVVORU96czdPMEZCT1hCQ1NEczdRVUZNUVRzN08ydENRWFZ4UW1Vc1V6czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRGFITkNaanM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1NVRnpRazBzWjBJN1FVRkRTanM3T3pzN1FVRkxRVHM3T3pzN08wRkJTMEVzTkVKQlFWa3NSMEZCV2l4RlFVRnBRaXhIUVVGcVFpeEZRVUZ6UWp0QlFVRkJPenRCUVVOd1FpeFJRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hWUVVGTkxFbEJRVTRzUjBGQllTeEhRVUZpTzBGQlEwRXNWVUZCVFN4SlFVRk9MRWRCUVdFc1IwRkJZanRCUVVORU96dEJRVVZFT3pzN096czdPenM3TzBGQlRVRTdPenM3T3pzeVFrRk5UeXhOTEVWQlFWRXNUU3hGUVVGUkxFMHNSVUZCVVR0QlFVTTNRaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVR0QlFVTkJMRlZCUVVrc1RVRkJUVHRCUVVOU0xHTkJRVTBzVVVGRVJTeEZRVU5STEUxQlFVMHNUVUZCVFN4SlFVUndRaXhGUVVNd1FpeEpRVUZKTEhWQ1FVRjFRaXhOUVVGMlFpeEhRVUZuUXl3MFFrRkVPVVE3UVVGRlVpeGpRVUZOTEVWQlFVVXNVVUZCVVN4TlFVRldMRVZCUVd0Q0xFOUJRVThzUlVGQlJTeFJRVUZSTEUxQlFWWXNSVUZCZWtJN1FVRkdSU3hQUVVGV096dEJRVXRCTEdGQlFVOHNjMEpCUVZrc1ZVRkJReXhQUVVGRUxFVkJRVlVzVFVGQlZpeEZRVUZ4UWp0QlFVTjBReXhqUVVGTkxFbEJRVTRzUTBGQlZ5eFhRVUZZTEVOQlFYVkNMRWRCUVhaQ0xFVkJRVFJDTEZWQlFVTXNTMEZCUkN4RlFVRlhPMEZCUTNKRExHTkJRVWtzVFVGQlRTeEpRVUZPTEVOQlFWY3NTVUZCV0N4TFFVRnZRaXhIUVVGNFFpeEZRVUUyUWp0QlFVTXpRaXh2UWtGQlVTeE5RVUZOTEVsQlFVNHNRMEZCVnl4TFFVRllMRU5CUVdsQ0xGTkJRWHBDTzBGQlEwUXNWMEZHUkN4TlFVVlBPMEZCUTB3c2JVSkJRVThzVFVGQlRTeEpRVUZPTEVOQlFWY3NTVUZCYkVJN1FVRkRSRHRCUVVOR0xGTkJUa1E3UVVGUFJDeFBRVkpOTEVOQlFWQTdRVUZUUkRzN08zZENRVEZDVXp0QlFVRkZMR0ZCUVU4c1MwRkJTeXhKUVVGYU8wRkJRVzFDT3pzN096dHJRa0UyUW14Q0xHZENPenM3T3pzN096czdPenM3T3pzN096czdRVU42UldZN08wRkJRMEU3T3pzN096dEpRVVZOTEdNN1FVRkZTaXd3UWtGQldTeE5RVUZhTEVWQlFXOUNMRWRCUVhCQ0xFVkJRWGxDTEZOQlFYcENMRVZCUVc5RE8wRkJRVUU3TzBGQlEyeERMRkZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZWQlFVMHNUMEZCVGl4SFFVRm5RaXhOUVVGb1FqdEJRVU5CTEZWQlFVMHNTVUZCVGl4SFFVRmhMRWRCUVdJN1FVRkRRU3hWUVVGTkxGVkJRVTRzUjBGQmJVSXNVMEZCYmtJN08wRkJSVUVzVlVGQlRTeEpRVUZPTEVkQlFXRXNUMEZCVHl4SlFVRndRanRCUVVOQkxGVkJRVTBzWTBGQlRpeEhRVUYxUWl4RlFVRjJRanRCUVVORU96czdPMjlEUVVWbExFOHNSVUZCVXp0QlFVTjJRaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4WlFVRk5MR05CUVU0c1EwRkJjVUlzVDBGQmNrSXNTVUZCWjBNc01rSkJRV2xDTEUxQlFVMHNTVUZCZGtJc1JVRkJOa0lzVDBGQk4wSXNSVUZCYzBNc1RVRkJUU3hKUVVFMVF5eEZRVUZyUkN4TlFVRk5MRlZCUVhoRUxFVkJRVzlGTEV0QlFYQkZMRU5CUVdoRE8wRkJRMFE3T3p0MVEwRkZhMElzVHl4RlFVRlRPMEZCUXpGQ0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRlZCUVVrc1UwRkJVeXh6UWtGQlZTeFBRVUZXTEVWQlFXMUNMRTFCUVdoRE8wRkJRMEVzVlVGQlNTeHhRa0ZCY1VJc1RVRkJUU3hKUVVGT0xFZEJRV0VzWlVGQmRFTTdPMEZCUlVFc1ZVRkJTU3hsUVVGbExFMUJRVTBzWTBGQlRpeERRVUZ4UWl4UFFVRnlRaXhEUVVGdVFqdEJRVU5CTEZWQlFVa3NXVUZCU2l4RlFVRnJRanRCUVVOb1FqdEJRVU5CTEdOQlFVMHNTVUZCVGl4RFFVRlhMRmRCUVZnc1EwRkJkVUk3UVVGRGNrSXNaMEpCUVUwc1lVRkVaU3hGUVVOQkxFMUJRVTBzVFVGQlRTeFBRVUZPTEVOQlFXTXNTVUZFY0VJc1JVRkRNRUlzU1VGQlNTeHJRa0ZFT1VJN1FVRkZja0lzWjBKQlFVMHNSVUZCUlN4VlFVRlZMRTFCUVUwc1NVRkJiRUk3UVVGR1pTeFRRVUYyUWpzN1FVRkxRVHRCUVVOQk8wRkJRMEVzWTBGQlRTeEpRVUZPTEVOQlFWY3NWMEZCV0N4RFFVRjFRanRCUVVOeVFpeG5Ra0ZCVFN4aFFVUmxMRVZCUTBFc1RVRkJUU3hOUVVGTkxFOUJRVTRzUTBGQll5eEpRVVJ3UWl4RlFVTXdRaXhKUVVGSkxIVkNRVUYxUWl4TlFVRjJRaXhIUVVGblF5eExRVVE1UkR0QlFVVnlRaXhuUWtGQlRTeEZRVUZGTEZWQlFWVXNUVUZCVFN4SlFVRnNRaXhGUVVGM1FpeHRRa0ZCYlVJc1RVRkJUU3hWUVVGcVJEdEJRVVpsTEZOQlFYWkNPenRCUVV0QkxIRkNRVUZoTEdsQ1FVRmlPMEZCUTBFc1pVRkJUeXhOUVVGTkxHTkJRVTRzUTBGQmNVSXNUMEZCY2tJc1EwRkJVRHRCUVVORU8wRkJRMFk3T3pzN08ydENRVWxaTEdNN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRGJFUm1PenRCUVVOQk96czdPenM3U1VGRlRTeGpPMEZCUlVvc01FSkJRVmtzVFVGQldpeEZRVUZ2UWl4TFFVRndRaXhGUVVFeVFpeEhRVUV6UWl4RlFVRm5RenRCUVVGQk96dEJRVU01UWl4UlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFZRVUZOTEU5QlFVNHNSMEZCWjBJc1RVRkJhRUk3UVVGRFFTeFZRVUZOTEUxQlFVNHNSMEZCWlN4TFFVRm1PMEZCUTBFc1ZVRkJUU3hKUVVGT0xFZEJRV0VzUjBGQllqczdRVUZGUVN4VlFVRk5MRWxCUVU0c1IwRkJZU3hQUVVGUExFbEJRWEJDT3p0QlFVVkJMRlZCUVUwc1QwRkJUaXhIUVVGblFpeHpRa0ZCVlN4TFFVRldMRVZCUVdsQ0xFMUJRV3BETzBGQlEwRXNWVUZCVFN4clFrRkJUaXhIUVVFeVFpeE5RVUZOTEVsQlFVNHNSMEZCWVN4bFFVRjRRenM3UVVGRlFTeFZRVUZOTEdOQlFVNHNSMEZCZFVJc1JVRkJka0k3UVVGRFFTeFZRVUZOTEZWQlFVNHNSMEZCYlVJc1JVRkJia0k3UVVGRFFTeFZRVUZOTEd0Q1FVRk9MRWRCUVRKQ0xFVkJRVE5DT3p0QlFVVkJMRlZCUVUwc1UwRkJUaXhIUVVGclFpeEZRVUZzUWpzN1FVRkZRU3hWUVVGTkxHdENRVUZPTzBGQlEwUTdPenM3ZVVOQlJXOUNPMEZCUTI1Q0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJPMEZCUTBFc1dVRkJUU3h4UWtGQlRpeEhRVUU0UWl4TlFVRk5MRWxCUVU0c1EwRkJWeXhYUVVGWUxFTkJRWFZDTEUxQlFVMHNhMEpCUVRkQ0xFVkJRV2xFTEZWQlFVTXNSMEZCUkN4RlFVRlRPMEZCUTNSR0xHZENRVUZSTEVkQlFWSXNRMEZCV1N4TlFVRk5MR3RDUVVGT0xFZEJRVEpDTEZGQlFYWkRMRVZCUVdsRUxFZEJRV3BFTzBGQlEwRXNaMEpCUVZFc1NVRkJTU3hKUVVGYU8wRkJRMFVzWlVGQlN5eFhRVUZNTzBGQlFXdENMR3RDUVVGTkxHdENRVUZPTEVOQlFYbENMRWRCUVhwQ0xFVkJRU3RDTzBGQlEycEVMR1ZCUVVzc1lVRkJURHRCUVVGdlFpeHJRa0ZCVFN4dlFrRkJUaXhEUVVFeVFpeEhRVUV6UWl4RlFVRnBRenRCUVVOeVJDeGxRVUZMTEZWQlFVdzdRVUZCYVVJc2EwSkJRVTBzYVVKQlFVNHNRMEZCZDBJc1IwRkJlRUlzUlVGQk9FSTdRVUZJYWtRN1FVRkxSQ3hQUVZBMlFpeERRVUU1UWpzN1FVRlRRU3hWUVVGSkxGbEJRVmtzVFVGQlRTeEpRVUZPTEVkQlFXRXNWVUZCTjBJN1FVRkRRU3haUVVGTkxHVkJRVTRzUjBGQmQwSXNUVUZCVFN4SlFVRk9MRU5CUVZjc1YwRkJXQ3hEUVVGMVFpeFRRVUYyUWl4RlFVRnJReXhWUVVGRExFZEJRVVFzUlVGQlV6dEJRVU5xUlR0QlFVTkJMR2RDUVVGUkxFZEJRVklzUTBGQldTeHZRa0ZCYjBJc1UwRkJjRUlzUjBGQlowTXNVVUZCTlVNc1JVRkJjMFFzUjBGQmRFUTdRVUZEUkN4UFFVaDFRaXhEUVVGNFFqdEJRVWxFT3pzN2QwTkJSVzFDTzBGQlEyeENMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZsQlFVMHNjVUpCUVU0c1EwRkJORUlzVFVGQk5VSTdPMEZCUlVFc1dVRkJUU3hsUVVGT0xFTkJRWE5DTEUxQlFYUkNPenRCUVVWQkxGbEJRVTBzYTBKQlFVNHNRMEZCZVVJc1QwRkJla0lzUTBGQmFVTXNWVUZCUXl4RlFVRkVMRVZCUVZFN1FVRkRka01zVjBGQlJ5eE5RVUZJTzBGQlEwUXNUMEZHUkRzN1FVRkpRU3d3UWtGQldTeE5RVUZOTEZOQlFXeENMRVZCUVRaQ0xFOUJRVGRDTEVOQlFYRkRMRlZCUVVNc1IwRkJSQ3hGUVVGVE8wRkJRelZETEdOQlFVMHNhMEpCUVU0c1EwRkJlVUlzUjBGQmVrSTdRVUZEUkN4UFFVWkVPenRCUVVsQk8wRkJRMEVzTUVKQlFWa3NUVUZCVFN4alFVRnNRaXhGUVVGclF5eFBRVUZzUXl4RFFVRXdReXhWUVVGRExFZEJRVVFzUlVGQlV6dEJRVU5xUkN4alFVRk5MR05CUVU0c1EwRkJjVUlzUjBGQmNrSXNSVUZCTUVJc2FVSkJRVEZDTzBGQlEwUXNUMEZHUkR0QlFVZEVPenRCUVVWRU96czdPenM3T3p0eFEwRkxhVUlzVXl4RlFVRlhPMEZCUXpGQ0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJPMEZCUTBFc1ZVRkJTU3h0UWtGQmJVSTdRVUZEY2tJc1kwRkJUU3hYUVVSbExFVkJRMFlzVFVGQlRTeE5RVUZOTEU5QlFVNHNRMEZCWXl4SlFVUnNRaXhGUVVOM1FpeEpRVUZKTEhWQ1FVRjFRaXhOUVVGTkxFOUJRVGRDTEVkQlFYVkRMRXRCUkc1Rk8wRkJSWEpDTEdOQlFVMHNSVUZCUlN4WFFVRlhMRk5CUVdJc1JVRkJkMElzVVVGQlVTeE5RVUZOTEUxQlFYUkRPMEZCUm1Vc1QwRkJka0k3TzBGQlMwRXNZVUZCVHl4elFrRkJXU3hWUVVGRExFOUJRVVFzUlVGQlZTeE5RVUZXTEVWQlFYRkNPMEZCUTNSRExHTkJRVTBzU1VGQlRpeERRVUZYTEZkQlFWZ3NRMEZCZFVJc1owSkJRWFpDTEVWQlFYbERMRlZCUVVNc1MwRkJSQ3hGUVVGWE8wRkJRMnhFTEd0Q1FVRlJMRWRCUVZJc1EwRkJXU3gzUTBGQldpeEZRVUZ6UkN4TFFVRjBSRHRCUVVOQkxHTkJRVWtzVFVGQlRTeEpRVUZPTEVOQlFWY3NTVUZCV0N4TFFVRnZRaXhIUVVGNFFpeEZRVUUyUWp0QlFVTXpRaXhuUWtGQlNTeGhRVUZoTEUxQlFVMHNTVUZCVGl4RFFVRlhMRlZCUVZnc1EwRkJjMElzVFVGQlRTeEpRVUUxUWl4RlFVRnJReXhOUVVGTkxFMUJRWGhETEVOQlFXcENPMEZCUTBFc2EwSkJRVTBzVTBGQlRpeERRVUZuUWl4VlFVRlZMRU5CUVZZc1EwRkJhRUlzU1VGQlowTXNWVUZCYUVNN1FVRkRRVHRCUVVORUxGZEJTa1FzVFVGSlR6dEJRVU5NTEcxQ1FVRlBMSEZEUVVGeFF5eE5RVUZOTEVsQlFVNHNRMEZCVnl4SlFVRjJSRHRCUVVORU8wRkJRMFlzVTBGVVJEdEJRVlZFTEU5QldFMHNRMEZCVUR0QlFWbEVPenRCUVVWRU96czdPenM3TzNWRFFVbHRRaXhQTEVWQlFWTTdRVUZETVVJc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNXVUZCVFN4VFFVRk9MRU5CUVdkQ0xFOUJRV2hDTEVWQlFYbENMRTFCUVhwQ08wRkJRMEVzWVVGQlR5eE5RVUZOTEZOQlFVNHNRMEZCWjBJc1QwRkJhRUlzUTBGQlVEczdRVUZGUVR0QlFVTkJMRlZCUVVrc2NVSkJRWEZDTzBGQlEzWkNMR05CUVUwc1lVRkVhVUlzUlVGRFJpeE5RVUZOTEUxQlFVMHNUMEZCVGl4RFFVRmpMRWxCUkd4Q0xFVkJRM2RDTEVsQlFVa3NkVUpCUVhWQ0xFMUJRVTBzVDBGQk4wSXNSMEZCZFVNc1MwRkVia1U3UVVGRmRrSXNZMEZCVFN4RlFVRkZMRmRCUVZjc1EwRkJReXhQUVVGRUxFTkJRV0lzUlVGQmQwSXNVVUZCVVN4TlFVRk5MRTFCUVhSRE8wRkJSbWxDTEU5QlFYcENPenRCUVV0QkxGbEJRVTBzU1VGQlRpeERRVUZYTEZkQlFWZ3NRMEZCZFVJc2EwSkJRWFpDTzBGQlEwUTdPMEZCUlVRN096czdPenM3TzJsRFFVdGhMRk1zUlVGQlZ6dEJRVU4wUWl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeGhRVUZQTEhOQ1FVRlpMRlZCUVVNc1QwRkJSQ3hGUVVGVkxFMUJRVllzUlVGQmNVSTdRVUZEZEVNc1dVRkJTU3hWUVVGVkxFMUJRVllzUzBGQmNVSXNRMEZCZWtJc1JVRkJORUk3UVVGRE1VSTdRVUZEUVR0QlFVTkVPenRCUVVWRUxGbEJRVWtzWlVGQlpTeE5RVUZOTEVsQlFVNHNSMEZCWVN4WlFVRm9RenRCUVVOQkxHTkJRVTBzVlVGQlRpeERRVUZwUWl4SlFVRnFRaXhEUVVGelFpeFRRVUYwUWpzN1FVRkZRVHM3T3pzN096dEJRVkZCTEZsQlFVa3NaMEpCUVdkQ0xFVkJRWEJDTzBGQlEwRXNhMEpCUVZVc1QwRkJWaXhEUVVGclFpeFZRVUZETEV0QlFVUTdRVUZCUVN4cFFrRkJWeXhqUVVGakxFbEJRV1FzUTBGQmJVSXNaVUZCWlN4TFFVRnNReXhEUVVGWU8wRkJRVUVzVTBGQmJFSTdPMEZCUlVFN1FVRkRRU3haUVVGSkxHMUNRVUZ0UWp0QlFVTnlRaXhuUWtGQlRTeFhRVVJsTEVWQlEwWXNUVUZCVFN4TlFVRk5MRTlCUVU0c1EwRkJZeXhKUVVSc1FpeEZRVU4zUWl4SlFVRkpMSFZDUVVGMVFpeE5RVUZOTEU5QlFUZENMRWRCUVhWRExFdEJSRzVGTzBGQlJYSkNMR2RDUVVGTkxFVkJRVVVzVjBGQlZ5eGhRVUZpTEVWQlFUUkNMRkZCUVZFc1RVRkJUU3hOUVVFeFF6dEJRVVpsTEZOQlFYWkNPenRCUVV0QkxHTkJRVTBzU1VGQlRpeERRVUZYTEZkQlFWZ3NRMEZCZFVJc1owSkJRWFpDTEVWQlFYbERMRlZCUVVNc1MwRkJSQ3hGUVVGWE8wRkJRMnhFTEd0Q1FVRlJMRWRCUVZJc1EwRkJXU3h4UTBGQldpeEZRVUZ0UkN4TFFVRnVSRHRCUVVOQkxHTkJRVWtzVFVGQlRTeEpRVUZPTEVOQlFWY3NTVUZCV0N4TFFVRnZRaXhIUVVGNFFpeEZRVUUyUWpzN1FVRkZNMEk3UVVGRFFTd3dRa0ZCWXl4UFFVRmtMRU5CUVhOQ0xGVkJRVU1zVVVGQlJDeEZRVUZqTzBGQlEyeERMR3RDUVVGSkxHZENRVUZuUWl4TlFVRk5MRWxCUVU0c1EwRkJWeXhYUVVGWUxFTkJRWFZDTEZGQlFYWkNMRVZCUVdsRExGVkJRVU1zUjBGQlJDeEZRVUZUTzBGQlF6VkVPMEZCUTBFc2QwSkJRVkVzUjBGQlVpeERRVUZaTEc5Q1FVRnZRaXhSUVVGd1FpeEhRVUVyUWl4UlFVRXpReXhGUVVGeFJDeEhRVUZ5UkR0QlFVTkVMR1ZCU0cxQ0xFTkJRWEJDTzBGQlNVRXNiMEpCUVUwc2EwSkJRVTRzUTBGQmVVSXNTVUZCZWtJc1EwRkJPRUlzWVVGQk9VSTdPMEZCUlVFc2EwSkJRVWtzWTBGQll5eE5RVUZOTEVsQlFVNHNRMEZCVnl4VlFVRllMRU5CUVhOQ0xGRkJRWFJDTEVWQlFXZERMRTFCUVUwc1RVRkJkRU1zUTBGQmJFSTdRVUZEUVN4dlFrRkJUU3hyUWtGQlRpeERRVUY1UWl4SlFVRjZRaXhEUVVFNFFpeFhRVUU1UWp0QlFVTkVMR0ZCVkVRN08wRkJWMEU3UVVGRFJDeFhRV1pFTEUxQlpVODdRVUZEVEN4dFFrRkJUeXh4UTBGQmNVTXNUVUZCVFN4SlFVRk9MRU5CUVZjc1NVRkJka1E3UVVGRFJEdEJRVU5HTEZOQmNFSkVPMEZCY1VKRUxFOUJMME5OTEVOQlFWQTdRVUZuUkVRN096czRRa0ZGVVR0QlFVTlFMRlZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzVlVGQlNTeFRRVUZUTEhOQ1FVRlZMRTFCUVUwc1RVRkJhRUlzUlVGQmQwSXNUVUZCY2tNN08wRkJSVUU3UVVGRFFTeFpRVUZOTEVsQlFVNHNRMEZCVnl4WFFVRllMRU5CUVhWQ08wRkJRM0pDTEdOQlFVMHNVVUZFWlN4RlFVTk1MRTFCUVUwc1RVRkJUU3hyUWtGRVVDeEZRVU15UWl4SlFVRkpMRTFCUVUwc1NVRkJUaXhIUVVGaE8wRkJSRFZETEU5QlFYWkNPenRCUVVsQk8wRkJRMEVzV1VGQlRTeEpRVUZPTEVOQlFWY3NWMEZCV0N4RFFVRjFRanRCUVVOeVFpeGpRVUZOTEZGQlJHVXNSVUZEVEN4TlFVRk5MRTFCUVUwc1QwRkJUaXhEUVVGakxFbEJSR1lzUlVGRGNVSXNTVUZCU1N4MVFrRkJkVUlzVFVGQmRrSXNSMEZCWjBNc05FSkJSSHBFTzBGQlJYSkNMR05CUVUwc1JVRkJSU3hWUVVGVkxFMUJRVTBzU1VGQmJFSXNSVUZCZDBJc2JVSkJRVzFDTEUxQlFVMHNWVUZCYWtRN1FVRkdaU3hQUVVGMlFqczdRVUZMUVN4WlFVRk5MR2xDUVVGT08wRkJRMEVzWVVGQlR5eE5RVUZOTEU5QlFVNHNRMEZCWXl4VlFVRmtMRU5CUVhsQ0xFMUJRVTBzU1VGQkwwSXNRMEZCVUR0QlFVTkVPenM3YzBOQlJXbENMRWNzUlVGQlN6dEJRVU55UWl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFpRVUZOTEVsQlFVNHNRMEZCVnl4WFFVRllMRU5CUVhWQ08wRkJRM0pDTEZsQlFVa3NTVUZCU1N4RlFVUmhMRVZCUTFRc1RVRkJUU3hWUVVSSExFVkJRMU1zVFVGQlRTeEpRVUZKTEVWQlJHNUNMRVZCUTNWQ0xFbEJRVWtzVFVGQlRTeEpRVVJxUXp0QlFVVnlRaXhqUVVGTkxFVkJRVVVzVFVGQlRTeEpRVUZKTEVsQlFVb3NRMEZCVXl4SlFVRnFRaXhGUVVGMVFpeFZRVUZWTEVsQlFVa3NTVUZCU2l4RFFVRlRMRkZCUVRGRExFVkJRVzlFTEZGQlFWRXNTVUZCU1N4SlFVRm9SVHRCUVVabExFOUJRWFpDTzBGQlNVUTdPMEZCUlVRN096czdkVU5CUTIxQ0xFY3NSVUZCU3p0QlFVTjBRaXhWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEZWQlFVa3NZVUZCWVN4SlFVRkpMRWxCUVVvc1EwRkJVeXhWUVVFeFFqczdRVUZGUVR0QlFVTkJMRlZCUVVrc1RVRkJUU3hqUVVGT0xFTkJRWEZDTEZWQlFYSkNMRU5CUVVvc1JVRkJjME03UVVGRGNFTXNXVUZCU1N4WFFVRlhPMEZCUTJJc1kwRkJTU3hKUVVGSkxFVkJSRXNzUlVGRFJDeE5RVUZOTEZWQlJFd3NSVUZEYVVJc1RVRkJUU3hKUVVGSkxFVkJSRE5DTEVWQlF5dENMRWxCUVVrc1ZVRkVia003UVVGRllpeG5Ra0ZCVFN4RlFVRkZMRTFCUVUwc1IwRkJVaXhGUVVGaExFMUJRVTBzZFVKQlFYVkNMRTFCUVUwc1NVRkJOMElzUjBGQmIwTXNTMEZCY0VNc1IwRkJOa01zVlVGQk4wTXNSMEZCTUVRc2JVSkJRVGRGTzBGQlJrOHNVMEZCWmpzN1FVRkxRU3hqUVVGTkxFbEJRVTRzUTBGQlZ5eFhRVUZZTEVOQlFYVkNMRkZCUVhaQ08wRkJRMEU3UVVGRFJEczdRVUZGUkR0QlFVTkJPMEZCUTBFc1ZVRkJTU3hQUVVGUExGTkJRVmc3TzBGQlJVRXNWVUZCU1N4VFFVRlRMRk5CUVdJc1JVRkJkMEk3UVVGRGRFSTdRVUZEUVN4WlFVRkpMR0ZCUVdFN1FVRkRaaXhuUWtGQlRTeFRRVVJUTEVWQlEwVXNUVUZCVFN4TlFVRk5MRWxCUkdRc1JVRkRiMElzU1VGQlNTeE5RVUZOTEUxQlJEbENPMEZCUldZc1owSkJRVTBzUlVGQlJTeE5RVUZOTEVsQlFVa3NTVUZCV2l4RlFVRnJRaXhOUVVGTkxGVkJRWGhDTEVWQlFXOURMRWxCUVVrc1RVRkJUU3hKUVVFNVF5eEZRVUZ2UkN4VlFVRlZMRWxCUVVrc1NVRkJTaXhEUVVGVExGRkJRWFpGTzBGQlJsTXNVMEZCYWtJN08wRkJTMEVzWTBGQlRTeEpRVUZPTEVOQlFWY3NWMEZCV0N4RFFVRjFRaXhWUVVGMlFpeEZRVUZ0UXl4VlFVRkRMRXRCUVVRc1JVRkJWenRCUVVNMVF5eHJRa0ZCVVN4SFFVRlNMRU5CUVZrc2FVSkJRVm9zUlVGQkswSXNTMEZCTDBJN1FVRkRRU3hqUVVGSkxFMUJRVTBzU1VGQlRpeERRVUZYTEVsQlFWZ3NTMEZCYjBJc1IwRkJlRUlzUlVGQk5rSTdRVUZETTBJc2EwSkJRVTBzWTBGQlRpeERRVUZ4UWl4VlFVRnlRaXhKUVVGdFF5d3lRa0ZCYVVJc1RVRkJUU3hKUVVGMlFpeEZRVUUyUWl4TlFVRk5MRTFCUVc1RExFVkJRVEpETEUxQlFVMHNTVUZCYWtRc1JVRkJkVVFzVFVGQlRTeFZRVUUzUkN4RlFVRjVSU3hKUVVGNlJTeERRVUZ1UXp0QlFVTkVPenRCUVVWRU8wRkJRMEVzWjBKQlFVMHNTVUZCVGl4RFFVRlhMRmRCUVZnc1EwRkJkVUk3UVVGRGNrSXNaMEpCUVVrc1NVRkJTU3hGUVVSaExFVkJRMVFzVFVGQlRTeFZRVVJITEVWQlExTXNUVUZCVFN4SlFVRkpMRVZCUkc1Q0xFVkJRM1ZDTEVsQlFVa3NTVUZCU1N4SlFVUXZRanRCUVVWeVFpeHJRa0ZCVFN4TlFVRk5PMEZCUmxNc1YwRkJka0k3UVVGTFJDeFRRVnBFTzBGQllVUTdRVUZGUmpzN1FVRkZSRHM3T3p0NVEwRkRjVUlzUnl4RlFVRkxPMEZCUTNoQ0xGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNWVUZCU1N4aFFVRmhMRWxCUVVrc1NVRkJTaXhEUVVGVExGVkJRVEZDT3p0QlFVVkJMRlZCUVVrc1pVRkJaU3hOUVVGTkxHTkJRVTRzUTBGQmNVSXNWVUZCY2tJc1EwRkJia0k3UVVGRFFTeFZRVUZKTEZsQlFVb3NSVUZCYTBJN1FVRkRhRUlzY1VKQlFXRXNhVUpCUVdJN1FVRkRRU3hsUVVGUExFMUJRVTBzWTBGQlRpeERRVUZ4UWl4VlFVRnlRaXhEUVVGUU96dEJRVVZCTzBGQlEwUTdRVUZGUmpzN096czdhMEpCU1Zrc1l6czdPenM3T3pzN096czdPenM3T3pzN096czdTVU55VVZRc1dUdEJRVVZLTEhkQ1FVRlpMRWRCUVZvc1JVRkJhVUlzUzBGQmFrSXNSVUZCZDBJc1IwRkJlRUlzUlVGQk5rSXNVMEZCTjBJc1JVRkJkME1zVlVGQmVFTXNSVUZCYjBRN1FVRkJRVHM3UVVGRGJFUXNVVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3hSUVVGSkxHVkJRV1VzVFVGQlRTeFpRVUY2UWp0QlFVTkJMRkZCUVVrc1dVRkJXU3hOUVVGTkxGVkJRWFJDT3p0QlFVVkJPMEZCUTBFc1ZVRkJUU3hsUVVGT0xFZEJRWGRDTEVsQlFVa3NWMEZCU2l4RFFVRm5RaXhUUVVGb1FpeEZRVUV5UWl4VlFVRkRMRWRCUVVRc1JVRkJVenRCUVVNeFJDeFZRVUZKTEVsQlFVa3NTVUZCU2l4TFFVRmhMRkZCUVdwQ0xFVkJRVEpDTzBGQlEzcENMR2RDUVVGUkxFZEJRVklzUTBGQldTeDFRa0ZCV2l4RlFVRnhReXhIUVVGeVF6czdRVUZGUVR0QlFVTkJMRmxCUVVrc2VVSkJRWGxDTzBGQlF6TkNMR2RDUVVGTkxGRkJSSEZDTEVWQlExZ3NUVUZCVFN4SlFVRkpMRWxCUkVNc1JVRkRTeXhKUVVGSkxFdEJSRlE3UVVGRk0wSXNaMEpCUVUwc1JVRkJSU3hWUVVGVkxFbEJRVWtzU1VGQlNpeERRVUZUTEZGQlFYSkNMRVZCUVN0Q0xGVkJRVlVzUjBGQmVrTTdRVUZHY1VJc1UwRkJOMEk3TzBGQlMwRTdRVUZEUVN4WlFVRkpMRmRCUVVvc1EwRkJaMElzYzBKQlFXaENMRVZCUVhkRExGVkJRVU1zUzBGQlJDeEZRVUZYTzBGQlEycEVMR3RDUVVGUkxFZEJRVklzUTBGQldTdzJRa0ZCV2l4RlFVRXlReXhMUVVFelF6dEJRVU5CTEdOQlFVa3NUVUZCVFN4SlFVRk9MRU5CUVZjc1NVRkJXQ3hMUVVGdlFpeEhRVUY0UWl4RlFVRTJRanRCUVVNelFpeHJRa0ZCVFN4cFFrRkJUanRCUVVORU8wRkJRMFlzVTBGTVJEdEJRVTFFTzBGQlEwWXNTMEZzUW5WQ0xFTkJRWGhDT3p0QlFXOUNRVHRCUVVOQkxGRkJRVWtzVlVGQlNpeEZRVUZuUWp0QlFVTmtMRmxCUVUwc1pVRkJUaXhIUVVGM1FpeEpRVUZKTEZWQlFVb3NRMEZCWlN4VFFVRm1MRU5CUVhoQ08wRkJRMFFzUzBGR1JDeE5RVVZQTzBGQlEwd3NXVUZCVFN4bFFVRk9MRWRCUVhkQ0xFbEJRVWtzVlVGQlNpeERRVUZsTEZOQlFXWXNSVUZCTUVJc1MwRkJNVUlzUTBGQmVFSTdRVUZEUkRzN1FVRkZSQ3hWUVVGTkxHdENRVUZPTEVkQlFUSkNMRVZCUVROQ08wRkJRMEVzWTBGQlZTeFBRVUZXTEVOQlFXdENMRlZCUVVNc1MwRkJSQ3hGUVVGWE8wRkJRek5DTEZWQlFVa3NWVUZCVlN4bFFVRmxMRXRCUVRkQ096dEJRVVZCTzBGQlEwRXNWVUZCU1N4clFrRkJhMElzU1VGQlNTeFZRVUZLTEVOQlFXVXNUMEZCWml4RFFVRjBRanRCUVVOQkxGbEJRVTBzYTBKQlFVNHNRMEZCZVVJc1NVRkJla0lzUTBGQk9FSXNaVUZCT1VJN08wRkJSVUU3UVVGRFFTeFZRVUZKTEVOQlFVTXNWVUZCVEN4RlFVRnBRanRCUVVObUxGbEJRVWtzWTBGQll5eEpRVUZKTEZWQlFVb3NRMEZCWlN4UFFVRm1MRVZCUVhkQ0xFdEJRWGhDTEVOQlFXeENPMEZCUTBFc1kwRkJUU3hyUWtGQlRpeERRVUY1UWl4SlFVRjZRaXhEUVVFNFFpeFhRVUU1UWp0QlFVTkVPMEZCUTBZc1MwRmFSRHRCUVdGRU96czdPM2REUVVWdFFqdEJRVU5zUWl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFpRVUZOTEdWQlFVNHNRMEZCYzBJc1RVRkJkRUk3TzBGQlJVRXNXVUZCVFN4bFFVRk9MRU5CUVhOQ0xFMUJRWFJDT3p0QlFVVkJMRmxCUVUwc2EwSkJRVTRzUTBGQmVVSXNUMEZCZWtJc1EwRkJhVU1zVlVGQlF5eFBRVUZFTEVWQlFXRTdRVUZETlVNc1owSkJRVkVzVFVGQlVqdEJRVU5FTEU5QlJrUTdRVUZIUkRzN096czdhMEpCU1Zrc1dUczdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUXpORFpqczdRVUZEUVRzN096dEJRVU5CT3pzN08wRkJRMEU3T3pzN1FVRkRRVHM3T3p0QlFVVkJPenM3TzBGQlJVRTdPenM3UVVFNVFrRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBsQmEwTk5MR003UVVGRFNqczdPenM3T3pzN08wRkJWVUVzTUVKQlFWa3NWVUZCV2l4RlFVRjNRaXhIUVVGNFFpeEZRVUUyUWl4UlFVRTNRaXhGUVVGMVF5eFBRVUYyUXl4RlFVRm5SQ3hUUVVGb1JDeEZRVUV5UkR0QlFVRkJPenRCUVVONlJDeFJRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hWUVVGTkxFbEJRVTRzUjBGQllTeEhRVUZpTzBGQlEwRXNWVUZCVFN4VFFVRk9MRWRCUVd0Q0xGRkJRV3hDTzBGQlEwRXNWVUZCVFN4UlFVRk9MRWRCUVdsQ0xFOUJRV3BDT3p0QlFVVkJPMEZCUTBFc1ZVRkJUU3hKUVVGT0xFZEJRV0VzWVVGQllTeExRVUV4UWp0QlFVTkJMRlZCUVUwc1ZVRkJUaXhIUVVGdFFpeGhRVUZoTEc5Q1FVRm9RenM3UVVGRlFTeFZRVUZOTEZWQlFVNHNSMEZCYlVJc1JVRkJia0k3UVVGRFFTeFZRVUZOTEZWQlFVNHNSMEZCYlVJc1JVRkJia0k3TzBGQlJVRTdRVUZEUVN4VlFVRk5MRTlCUVU0c1IwRkJaMElzYzBKQlFWVXNWVUZCVml4RlFVRnpRaXhOUVVGMFF6czdRVUZGUVN4VlFVRk5MRWRCUVU0c1IwRkJXU3h0UTBGQmJVSXNTMEZCYmtJc1JVRkJNRUlzUlVGQk1VSXNRMEZCV2pzN1FVRkZRU3hSUVVGSkxGTkJRVW9zUlVGQlpUdEJRVU5pTEZsQlFVMHNWVUZCVGl4SFFVRnRRaXhUUVVGdVFqdEJRVU5FTEV0QlJrUXNUVUZGVHp0QlFVTk1MRmxCUVUwc1ZVRkJUaXhIUVVGdFFpd3JRa0ZCY1VJc1RVRkJUU3hWUVVFelFpeEZRVUYxUXl4SFFVRjJReXhEUVVGdVFqdEJRVU5FT3p0QlFVVkVMRkZCUVVrc1YwRkJTaXhEUVVGblFpeE5RVUZOTEVsQlFYUkNMRVZCUVRSQ0xGVkJRVU1zUjBGQlJDeEZRVUZUTzBGQlEyNURMR05CUVZFc1IwRkJVaXhEUVVGWkxITkNRVUZhTEVWQlFXOURMRWRCUVhCRE8wRkJRMEVzWTBGQlVTeEpRVUZKTEVsQlFWbzdRVUZEUlN4aFFVRkxMRkZCUVV3N1FVRkJaU3huUWtGQlRTeFRRVUZPTEVOQlFXZENMRWRCUVdoQ0xFVkJRWE5DTzBGQlEzSkRMR0ZCUVVzc1VVRkJURHRCUVVGbExHZENRVUZOTEZOQlFVNHNRMEZCWjBJc1IwRkJhRUlzUlVGQmMwSTdRVUZEY2tNc1lVRkJTeXhYUVVGTU8wRkJRV3RDTEdkQ1FVRk5MR2xDUVVGT0xFTkJRWGRDTEVkQlFYaENMRVZCUVRoQ08wRkJRMmhFTEdGQlFVc3NZVUZCVER0QlFVRnZRaXhuUWtGQlRTeHRRa0ZCVGl4RFFVRXdRaXhIUVVFeFFpeEZRVUZuUXp0QlFVcDBSRHRCUVUxRUxFdEJVa1E3UVVGVFJEczdPenM3TzBGQlNVUTdPRUpCUTFVc1J5eEZRVUZMT3p0QlFVVmlMRlZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzVlVGQlNTeFJRVUZSTEVsQlFVa3NTVUZCYUVJN1FVRkRRU3hWUVVGSkxGTkJRVk1zYzBKQlFWVXNTVUZCU1N4SlFVRmtMRVZCUVc5Q0xFMUJRV3BET3p0QlFVVkJMRlZCUVVrc1NVRkJTU3hKUVVGS0xFTkJRVk1zVVVGQllpeEZRVUYxUWp0QlFVTnlRaXhqUVVGTkxGVkJRVTRzUTBGQmFVSXNSMEZCYWtJc1JVRkJjMElzU1VGQlNTeEpRVUZLTEVOQlFWTXNVVUZCTDBJN1FVRkRRVHRCUVVORU96dEJRVVZFTzBGQlEwRXNXVUZCVFN4UlFVRk9MRU5CUVdVc2RVSkJRV1lzUTBGQmRVTXNTVUZCU1N4SlFVRktMRU5CUVZNc1RVRkJhRVFzUlVGQmQwUXNTVUZCZUVRc1EwRkJOa1FzVlVGQlF5eFZRVUZFTEVWQlFXZENPenRCUVVVelJTeFpRVUZKTEdGQlFXRXNWMEZCVnl4aFFVRllMRU5CUVhsQ0xGVkJRWHBDTEVOQlFXOURMRlZCUVhKRU8wRkJRMEVzV1VGQlNTeFRRVUZUTEZkQlFWY3NUVUZCV0N4SFFVRnZRaXhYUVVGWExFMUJRVmdzUTBGQmEwSXNVVUZCZEVNc1IwRkJhVVFzVlVGQk9VUTdRVUZEUVN4WlFVRkpMRmxCUVZrc1YwRkJWeXhSUVVGWUxFZEJRWE5DTEZkQlFWY3NVVUZCV0N4RFFVRnZRaXhSUVVFeFF5eEhRVUZ4UkN4RlFVRnlSVHM3UVVGRlFTeG5Ra0ZCVVN4SFFVRlNMRU5CUVZrc1ZVRkJXaXhGUVVGM1FpeE5RVUY0UWpzN1FVRkZRVHRCUVVOQkxHZENRVUZSTEVkQlFWSXNRMEZCV1N3NFFrRkJXanRCUVVOQkxGbEJRVWs3UVVGRFJpeGpRVUZKTEUxQlFVMHNTVUZCU1N4SlFVRktMRU5CUVZNc1MwRkJia0k3UVVGRFFTeGpRVUZKTEZOQlFWTXNWMEZCVnl4aFFVRllMRU5CUVhsQ0xGVkJRWFJET3p0QlFVVkJPMEZCUTBFc2RVSkJRVWtzVTBGQlNpeERRVUZqTEU5QlFVOHNSVUZCY2tJc1JVRkJlVUlzVFVGQmVrSTdPMEZCUlVFN1FVRkRRU3hqUVVGSkxGTkJRVk1zWVVGQlNTeG5Ra0ZCU2l4RFFVRnhRaXhIUVVGeVFpeEZRVUV3UWl4TlFVRXhRaXhEUVVGaU96dEJRVVZCTzBGQlEwRXNhVUpCUVU4c1RVRkJVQ3hEUVVGakxFOUJRV1FzUTBGQmMwSXNWVUZCUXl4TFFVRkVMRVZCUVZjN1FVRkRMMElzYlVKQlFVOHNUVUZCVFN4TFFVRmlPMEZCUTBRc1YwRkdSRHM3UVVGSlFUdEJRVU5CTEdOQlFVa3NRMEZCUXl4UFFVRlBMRXRCUVZJc1NVRkJhMElzVDBGQlR5eFBRVUZRTEVOQlFXVXNUVUZCWml4SFFVRjNRaXhEUVVFNVF5eEZRVUZyUkR0QlFVTm9SQ3h2UWtGQlVTeEpRVUZTTEVOQlFXRXNkMEpCUVhkQ0xFOUJRVThzUzBGQlVDeEhRVUZsTERaRFFVRm1MRWRCUVN0RUxGTkJRWFpHTEVOQlFXSXNSVUZCWjBnc2VVSkJRV1VzVFVGQlppeEZRVUYxUWl4SlFVRjJRaXhGUVVFMlFpeERRVUUzUWl4RFFVRm9TRHRCUVVOQkxHOUNRVUZSTEV0QlFWSXNRMEZCWXl4VFFVRmtMRVZCUVhsQ0xIbENRVUZsTEVkQlFXWXNSVUZCYjBJc1NVRkJjRUlzUlVGQk1FSXNRMEZCTVVJc1EwRkJla0lzUlVGQmRVUXNZVUZCZGtRc1JVRkJjMFVzZVVKQlFXVXNUVUZCWml4RlFVRjFRaXhKUVVGMlFpeEZRVUUyUWl4RFFVRTNRaXhEUVVGMFJUdEJRVU5FTEZkQlNFUXNUVUZIVHp0QlFVTk1MRzlDUVVGUkxFZEJRVklzUTBGQldTdzJRa0ZCV2p0QlFVTkVPMEZCUTBZc1UwRjBRa1FzUTBGelFrVXNUMEZCVHl4RFFVRlFMRVZCUVZVN1FVRkRWaXhyUWtGQlVTeEpRVUZTTEVOQlFXRXNhVU5CUVdJc1JVRkJaMFFzUTBGQmFFUTdRVUZEUkRzN1FVRkZSRHRCUVVOQkxHTkJRVTBzVlVGQlRpeERRVUZwUWl4TlFVRnFRaXhEUVVGM1FpeE5RVUY0UWl4RlFVRm5ReXhOUVVGb1F5eEZRVUYzUXl4RFFVRjRReXhGUVVFeVF5eEpRVUV6UXl4RFFVRm5SQ3hWUVVGRExGTkJRVVFzUlVGQlpUdEJRVU0zUkN4alFVRkpMRk5CUVZNc1ZVRkJWU3hEUVVGV0xFTkJRV0k3TzBGQlJVRXNhMEpCUVZFc1IwRkJVaXhEUVVGWkxHMUNRVUZhTEVWQlFXbERMRk5CUVdwRE96dEJRVVZCTEdOQlFVa3NhMEpCUVd0Q0xGTkJRVk1zWlVGQkwwSTdPMEZCUlVFc2EwSkJRVkVzUjBGQlVpeERRVUZaTEd0Q1FVRmFMRVZCUVdkRExHVkJRV2hET3p0QlFVVkJPMEZCUTBFc2EwSkJRVkVzU1VGQlVpeERRVUZoTEcxQ1FVRmlMRVZCUVd0RExFbEJRVWtzU1VGQlNpeERRVUZUTEV0QlFWUXNRMEZCWlN4SlFVRnFSQ3hGUVVGMVJDeEpRVUZKTEVsQlFVb3NRMEZCVXl4TFFVRlVMRU5CUVdVc1RVRkJkRVVzUlVGQk9FVXNUVUZCT1VVc1JVRkJjMFlzU1VGQlNTeEpRVUZLTEVOQlFWTXNTMEZCVkN4RFFVRmxMRkZCUVhKSExFVkJRU3RITEVsQlFVa3NTVUZCU2l4RFFVRlRMRXRCUVZRc1EwRkJaU3hUUVVFNVNEdEJRVU5CTEdkQ1FVRk5MRk5CUVU0c1EwRkJaMElzYTBKQlFXaENMRU5CUVcxRExFbEJRVWtzU1VGQlNpeERRVUZUTEV0QlFWUXNRMEZCWlN4SlFVRnNSQ3hGUVVGM1JDeEpRVUZKTEVsQlFVb3NRMEZCVXl4TFFVRlVMRU5CUVdVc1RVRkJka1VzUlVGQkswVXNUVUZCTDBVc1JVRkJkVVlzU1VGQlNTeEpRVUZLTEVOQlFWTXNTMEZCVkN4RFFVRmxMRkZCUVhSSExFVkJRV2RJTEVsQlFVa3NTVUZCU2l4RFFVRlRMRXRCUVZRc1EwRkJaU3hUUVVFdlNDeEZRVUV3U1N4SlFVRXhTU3hEUVVFclNTeFZRVUZUTEU5QlFWUXNSVUZCYTBJN1FVRkRMMG9zYjBKQlFWRXNSMEZCVWl4RFFVRlpMRzlEUVVGYUxFVkJRV3RFTEU5QlFXeEVPenRCUVVWQk8wRkJRMEVzWjBKQlFVa3NWMEZCVnl3MlFrRkJiVUlzUzBGQmJrSXNSVUZCTUVJc1MwRkJNVUlzUlVGQmFVTXNUVUZCYWtNc1EwRkJaanRCUVVOQkxIRkNRVUZUTEdkQ1FVRlVMRU5CUVRCQ0xFTkJRVU1zVFVGQlJDeEZRVUZSTEdWQlFWSXNRMEZCTVVJc1JVRkJiMFFzU1VGQmNFUXNRMEZCZVVRc1dVRkJUVHRCUVVNM1JDeDFRa0ZCVXl4WlFVRlVMRU5CUVhOQ0xGTkJRWFJDTEVWQlFXbERMRWxCUVdwRExFTkJRWE5ETEZsQlFVMDdRVUZETVVNc2MwSkJRVTBzVlVGQlRpeERRVUZwUWl4TlFVRnFRaXhKUVVFeVFpeFJRVUV6UWpzN1FVRkZRVHRCUVVOQkxITkNRVUZOTEVsQlFVNHNRMEZCVnl4WFFVRllMRU5CUVhWQ08wRkJRM0pDTEhOQ1FVRkpMRWxCUVVrc1JVRkVZU3hGUVVOVUxFMUJRVTBzVlVGRVJ5eEZRVU5UTEUxQlFVMHNTVUZCU1N4RlFVUnVRaXhGUVVOMVFpeEpRVUZKTEV0QlJETkNPMEZCUlhKQ0xIZENRVUZOTEVWQlFVVXNUVUZCVFN4SFFVRlNMRVZCUVdFc1ZVRkJWU3hOUVVGMlFpeEZRVUVyUWl4dFFrRkJiVUlzVTBGQmJFUTdRVUZHWlN4cFFrRkJka0k3TzBGQlMwRTdRVUZEUVR0QlFVTkJMREpDUVVGWExGbEJRVTA3UVVGRFpqdEJRVU5CTEhkQ1FVRk5MRlZCUVU0c1EwRkJhVUlzUjBGQmFrSXNSVUZCYzBJc1RVRkJkRUk3UVVGRFJDeHBRa0ZJUkR0QlFVbEVMR1ZCWmtRN1FVRm5Ra1FzWVVGcVFrUTdRVUZyUWtRc1YwRjJRa1FzUlVGMVFrY3NWVUZCVXl4TFFVRlVMRVZCUVdkQ08wRkJRMnBDTEc5Q1FVRlJMRXRCUVZJc1EwRkJZeXhMUVVGa08wRkJRMFFzVjBGNlFrUTdRVUV5UWtRc1UwRjBRMFE3UVVGMVEwUXNUMEUxUlVRc1JVRTBSVWNzUzBFMVJVZ3NRMEUwUlZNc1ZVRkJReXhOUVVGRUxFVkJRVms3UVVGRGJrSTdRVUZEUVN4WlFVRkpMR05CUVdNN1FVRkRhRUlzWTBGQlNTeEpRVUZKTEVWQlJGRXNSVUZEU2l4TlFVRk5MRlZCUkVZc1JVRkRZeXhOUVVGTkxFbEJRVWtzUlVGRWVFSXNSVUZETkVJc1NVRkJTU3hMUVVSb1F6dEJRVVZvUWl4blFrRkJUU3hGUVVGRkxFMUJRVTBzUjBGQlVpeEZRVUZoTEUxQlFVMHNUVUZCYmtJN1FVRkdWU3hUUVVGc1FqczdRVUZMUVN4alFVRk5MRWxCUVU0c1EwRkJWeXhYUVVGWUxFTkJRWFZDTEZkQlFYWkNPMEZCUTBRc1QwRndSa1E3UVVGeFJrUTdPenNyUWtGRlZTeEhMRVZCUVVzc1RTeEZRVUZSTzBGQlEzUkNMRlZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzVlVGQlNTeHZRa0ZCYjBJc1UwRkJVeXhsUVVGcVF6czdRVUZGUVN4VlFVRkpMRWxCUVVvc1EwRkJVeXhUUVVGVUxFTkJRVzFDTEU5QlFXNUNMRU5CUVRKQ0xGVkJRVU1zVlVGQlJDeEZRVUZuUWp0QlFVTjZRenRCUVVOQkxHTkJRVTBzU1VGQlRpeERRVUZYTEZkQlFWZ3NRMEZCZFVJN1FVRkRja0lzWjBKQlFVMHNVVUZFWlN4RlFVTk1MRTFCUVUwc2FVSkJSRVFzUlVGRGIwSXNTVUZCU1N4VlFVUjRRanRCUVVWeVFpeG5Ra0ZCVFN4RlFVRkZMRlZCUVZVc1NVRkJTU3hKUVVGS0xFTkJRVk1zVVVGQmNrSXNSVUZCSzBJc1VVRkJVU3hKUVVGSkxFbEJRVE5ETEVWQlFXbEVMRTlCUVU4c1NVRkJTU3hKUVVGS0xFTkJRVk1zUzBGQmFrVXNSVUZCZDBVc1VVRkJVU3hKUVVGSkxFbEJRVW9zUTBGQlV5eE5RVUY2Ump0QlFVWmxMRk5CUVhaQ08wRkJTVVFzVDBGT1JEdEJRVTlFT3p0QlFVVkVPenM3T3poQ1FVTlZMRWNzUlVGQlN6dEJRVU5pTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxGVkJRVWtzVTBGQlV5eEpRVUZKTEVsQlFVb3NRMEZCVXl4UlFVRjBRanM3UVVGRlFTeFZRVUZKTEZOQlFWTXNUVUZCVFN4VlFVRk9MRU5CUVdsQ0xFMUJRV3BDTEVOQlFXSTdRVUZEUVN4VlFVRkpMRTFCUVVvc1JVRkJXVHRCUVVOV08wRkJRMEVzWlVGQlR5eE5RVUZRT3p0QlFVVkJPMEZCUTBFc1kwRkJUU3hKUVVGT0xFTkJRVmNzVjBGQldDeERRVUYxUWp0QlFVTnlRaXhqUVVGSkxFbEJRVWtzUlVGRVlTeEZRVU5VTEUxQlFVMHNWVUZFUnl4RlFVTlRMRTFCUVUwc1NVRkJTU3hGUVVSdVFpeEZRVU4xUWl4SlFVRkpMRWxCUVVrc1NVRkVMMEk3UVVGRmNrSXNaMEpCUVUwc1JVRkJSU3hOUVVGTkxFZEJRVkk3UVVGR1pTeFRRVUYyUWp0QlFVbEVPMEZCUTBZN08wRkJSVVE3T3pzN2MwTkJRMnRDTEVjc1JVRkJTenRCUVVGQk96dEJRVU55UWl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFZRVUZKTEdGQlFXRXNTVUZCU1N4SlFVRnlRanRCUVVOQkxGVkJRVWtzVTBGQlV5eEpRVUZKTEVsQlFVb3NRMEZCVXl4UlFVRjBRanRCUVVOQkxGVkJRVWtzY1VKQlFYRkNMRk5CUVZNc1pVRkJiRU03UVVGRFFTeFZRVUZKTEdWQlFXVXNVMEZCVXl4WlFVRTFRanM3UVVGRlFTeFZRVUZKTEZOQlFWTXNjMEpCUVZVc1RVRkJWaXhGUVVGclFpeE5RVUV2UWpzN1FVRkZRVHRCUVVOQkxGbEJRVTBzVVVGQlRpeERRVUZsTEhWQ1FVRm1MRU5CUVhWRExFbEJRVWtzU1VGQlNpeERRVUZUTEUxQlFXaEVMRVZCUVhkRUxFbEJRWGhFTEVOQlFUWkVMRlZCUVVNc1ZVRkJSQ3hGUVVGblFqdEJRVU16UlN4WlFVRkpMR0ZCUVdFc1YwRkJWeXhoUVVGWUxFTkJRWGxDTEZWQlFYcENMRU5CUVc5RExGVkJRWEpFTzBGQlEwRXNXVUZCU1N4WlFVRlpMRmRCUVZjc1VVRkJXQ3hIUVVGelFpeFhRVUZYTEZGQlFWZ3NRMEZCYjBJc1VVRkJNVU1zUjBGQmNVUXNSVUZCY2tVN08wRkJSVUU3UVVGRFFTeFpRVUZKTEdkQ1FVRm5RaXhGUVVGd1FqdEJRVU5CTEhOQ1FVRmpMRWxCUVdRc1EwRkJiVUlzVTBGQlV5eFZRVUUxUWp0QlFVTkJMR3RDUVVGVkxFOUJRVllzUTBGQmEwSXNWVUZCUXl4TFFVRkVPMEZCUVVFc2FVSkJRVmNzWTBGQll5eEpRVUZrTEVOQlFXMUNMR1ZCUVdVc1MwRkJiRU1zUTBGQldEdEJRVUZCTEZOQlFXeENPenRCUVVWQk8wRkJRMEVzV1VGQlNTeHRRa0ZCYlVJN1FVRkRja0lzWjBKQlFVMHNWMEZFWlN4RlFVTkdMRTFCUVUwc1RVRkJUU3hKUVVSV0xFVkJRMmRDTEVsQlFVa3NkVUpCUVhWQ0xFMUJRWFpDTEVkQlFXZERMRXRCUkhCRU8wRkJSWEpDTEdkQ1FVRk5MRVZCUVVVc1ZVRkJWU3hKUVVGSkxFbEJRVW9zUTBGQlV5eFJRVUZ5UWl4RlFVRXJRaXhYUVVGWExHRkJRVEZETEVWQlFYbEVMRkZCUVZFc1ZVRkJha1U3UVVGR1pTeFRRVUYyUWpzN1FVRkxRVHRCUVVOQkxHTkJRVTBzU1VGQlRpeERRVUZYTEZkQlFWZ3NRMEZCZFVJc1owSkJRWFpDTEVWQlFYbERMRlZCUVVNc1MwRkJSQ3hGUVVGWE8wRkJRMnhFTEd0Q1FVRlJMRWRCUVZJc1EwRkJXU3h4UTBGQldpeEZRVUZ0UkN4TFFVRnVSRHRCUVVOQkxHTkJRVWtzVFVGQlRTeEpRVUZPTEVOQlFWY3NTVUZCV0N4TFFVRnZRaXhIUVVGNFFpeEZRVUUyUWpzN1FVRkZNMEk3UVVGRFFTeHJRa0ZCVFN4SlFVRk9MRU5CUVZjc1YwRkJXQ3hEUVVGMVFqdEJRVU55UWl4clFrRkJTU3hKUVVGSkxFVkJSR0VzUlVGRFZDeE5RVUZOTEZWQlJFY3NSVUZEVXl4TlFVRk5MRWxCUVVrc1JVRkVia0lzUlVGRGRVSXNTVUZCU1N4VlFVUXpRanRCUVVWeVFpeHZRa0ZCVFN4RlFVRkZMRTFCUVUwc1IwRkJVaXhGUVVGaExHMUNRVUZ0UWl4VFFVRm9RenRCUVVabExHRkJRWFpDT3p0QlFVdEJPMEZCUTBFc1owSkJRVWtzYTBKQlFXdENPMEZCUTNCQ0xHOUNRVUZOTEZkQlJHTXNSVUZEUkN4TlFVRk5MRTFCUVUwc1NVRkVXQ3hGUVVOcFFpeEpRVUZKTEd0Q1FVUnlRanRCUVVWd1FpeHZRa0ZCVFN4RlFVRkZMRlZCUVZVc2FVSkJRV2xDTEVsQlFXcENMRU5CUVhOQ0xGRkJRV3hETEVWQlFUUkRMRmxCUVZrc1ZVRkJlRVE3UVVGR1l5eGhRVUYwUWpzN1FVRkxRVHRCUVVOQkxHdENRVUZOTEVsQlFVNHNRMEZCVnl4WFFVRllMRU5CUVhWQ0xHVkJRWFpDTEVWQlFYZERMRlZCUVVNc1MwRkJSQ3hGUVVGWE8wRkJRMnBFTEhOQ1FVRlJMRWRCUVZJc1EwRkJXU3dyUWtGQldpeEZRVUUyUXl4TFFVRTNRenRCUVVOQkxHdENRVUZKTEUxQlFVMHNTVUZCVGl4RFFVRlhMRWxCUVZnc1MwRkJiMElzUjBGQmVFSXNSVUZCTmtJN08wRkJSVE5DTEc5Q1FVRkpMRmRCUVZjc1RVRkJUU3hWUVVGT0xFTkJRV2xDTEUxQlFXcENMRU5CUVdZN1FVRkRRU3h2UWtGQlNTeERRVUZETEZGQlFVd3NSVUZCWlR0QlFVTmlMRFpDUVVGWExEWkNRVUZ0UWl4TFFVRnVRaXhGUVVFd1FpeE5RVUV4UWl4RlFVRnJReXhUUVVGc1F5eERRVUZZTzBGQlEwRXNkMEpCUVUwc1ZVRkJUaXhEUVVGcFFpeE5RVUZxUWl4SlFVRXlRaXhSUVVFelFqdEJRVU5FT3p0QlFVVkVPMEZCUTBFc2VVSkJRVk1zWlVGQlZDeERRVUY1UWl4VlFVRjZRanM3UVVGRlFUdEJRVU5CTEhOQ1FVRk5MRVZCUVU0c1IwRkJWeXhKUVVGSkxFVkJRV1k3UVVGRFFTeHpRa0ZCVFN4SlFVRk9MRWRCUVdFc1RVRkJUU3hKUVVGdVFqdEJRVU5CTEhOQ1FVRk5MRVZCUVU0c1IwRkJWeXhWUVVGWU8wRkJRMEVzZFVKQlFVc3NTVUZCVEN4RFFVRlZMRmRCUVZZc1EwRkJjMElzUzBGQmRFSTdRVUZEUkR0QlFVTkdMR0ZCYmtKRU8wRkJjVUpFTEZkQmNFTkVMRTFCYjBOUE8wRkJRMHc3UVVGRFFTeHJRa0ZCVFN4SlFVRk9MRU5CUVZjc1YwRkJXQ3hEUVVGMVFqdEJRVU55UWl4clFrRkJTU3hKUVVGSkxFVkJSR0VzUlVGRFZDeE5RVUZOTEZWQlJFY3NSVUZEVXl4TlFVRk5MRWxCUVVrc1JVRkVia0lzUlVGRGRVSXNTVUZCU1N4VlFVUXpRanRCUVVWeVFpeHZRa0ZCVFN4TlFVRk5PMEZCUmxNc1lVRkJka0k3UVVGSlJEdEJRVU5HTEZOQk4wTkVPMEZCT0VORUxFOUJPVVJFTzBGQkswUkVPenRCUVVWRU96czdPM2REUVVOdlFpeEhMRVZCUVVzN1FVRkRka0lzVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1ZVRkJTU3hoUVVGaExFbEJRVWtzU1VGQmNrSTdRVUZEUVN4VlFVRkpMRk5CUVZNc1NVRkJTU3hKUVVGS0xFTkJRVk1zVVVGQmRFSTdPMEZCUlVFc1ZVRkJTU3hYUVVGWExFMUJRVTBzVlVGQlRpeERRVUZwUWl4TlFVRnFRaXhEUVVGbU8wRkJRMEVzVlVGQlNTeFJRVUZLTEVWQlFXTTdRVUZEV2p0QlFVTkJMR2xDUVVGVExHdENRVUZVTEVOQlFUUkNMRlZCUVRWQ096dEJRVVZCTzBGQlEwRXNZMEZCVFN4SlFVRk9MRU5CUVZjc1YwRkJXQ3hEUVVGMVFqdEJRVU55UWl4alFVRkpMRWxCUVVrc1JVRkVZU3hGUVVOVUxFMUJRVTBzVlVGRVJ5eEZRVU5UTEUxQlFVMHNTVUZCU1N4RlFVUnVRaXhGUVVOMVFpeEpRVUZKTEVsQlFVa3NTVUZFTDBJN1FVRkZja0lzWjBKQlFVMHNSVUZCUlN4TlFVRk5MRWRCUVZJN1FVRkdaU3hUUVVGMlFqczdRVUZMUVR0QlFVTkJPMEZCUTBRN1FVRkRSanM3TzNkQ1FYaFBVenRCUVVGRkxHRkJRVThzUzBGQlN5eEpRVUZhTzBGQlFXMUNPenM3T3p0clFrRTBUMnhDTEdNN096czdPenM3T3pzN096czdPenM3T3pzN08wRkROMVJtT3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJjMEpCT3pzN096dEpRVWxOTEZrN096czdPenM3T3p0QlFVVktPenM3T3p0eFEwRkxhVUlzVXl4RlFVRlhMRVVzUlVGQlNUdEJRVU01UWl4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxGbEJRVTBzVTBGQlRpeEpRVUZ0UWl4RlFVRnVRanRCUVVORU96dEJRVVZFT3pzN096czdPenMwUWtGTFVTeFRMRVZCUVZjc1RTeEZRVUZSTzBGQlEzcENMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZWQlFVa3NUVUZCVFN4VFFVRk9MRU5CUVVvc1JVRkJjMEk3UVVGRGNFSXNZMEZCVFN4VFFVRk9MRVZCUVdsQ0xFMUJRV3BDTzBGQlEwUTdRVUZEUmpzN096czdhMEpCU1Zrc1dUczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRja1JtT3pzN096czdPenRCUVZGQk8wRkJRMEVzU1VGQlNTeGxRVUZLTEVWQlFXdENPMEZCUTJRc1YwRkJUeXhKUVVGUUxFZEJRV1VzV1VGQldUdEJRVU4yUWl4WlFVRkpMR2xDUVVGcFFpeFBRVUZQTEZOQlFWQXNRMEZCYVVJc1kwRkJkRU03UVVGQlFTeFpRVU5KTEdsQ1FVRnBRaXhEUVVGRkxFVkJRVU1zVlVGQlZTeEpRVUZZTEVWQlFVUXNRMEZCYlVJc2IwSkJRVzVDTEVOQlFYZERMRlZCUVhoRExFTkJSSFJDTzBGQlFVRXNXVUZGU1N4WlFVRlpMRU5CUTFJc1ZVRkVVU3hGUVVWU0xHZENRVVpSTEVWQlIxSXNVMEZJVVN4RlFVbFNMR2RDUVVwUkxFVkJTMUlzWlVGTVVTeEZRVTFTTEhOQ1FVNVJMRVZCVDFJc1lVRlFVU3hEUVVab1FqdEJRVUZCTEZsQlYwa3NhMEpCUVd0Q0xGVkJRVlVzVFVGWWFFTTdPMEZCWVVFc1pVRkJUeXhWUVVGVkxFZEJRVllzUlVGQlpUdEJRVU5zUWl4blFrRkJTU3hSUVVGUExFZEJRVkFzZFVSQlFVOHNSMEZCVUN4UFFVRmxMRkZCUVdZc1NVRkJNa0lzVDBGQlR5eEhRVUZRTEV0QlFXVXNWVUZCTVVNc1NVRkJkMFFzVVVGQlVTeEpRVUZ3UlN4RlFVRXdSVHRCUVVOMFJTeHpRa0ZCVFN4SlFVRkpMRk5CUVVvc1EwRkJZeXhyUTBGQlpDeERRVUZPTzBGQlEwZzdPMEZCUlVRc1owSkJRVWtzVTBGQlV5eEZRVUZpT3p0QlFVVkJMR2xDUVVGTExFbEJRVWtzU1VGQlZDeEpRVUZwUWl4SFFVRnFRaXhGUVVGelFqdEJRVU5zUWl4dlFrRkJTU3hsUVVGbExFbEJRV1lzUTBGQmIwSXNSMEZCY0VJc1JVRkJlVUlzU1VGQmVrSXNRMEZCU2l4RlFVRnZRenRCUVVOb1F5d3lRa0ZCVHl4SlFVRlFMRU5CUVZrc1NVRkJXanRCUVVOSU8wRkJRMG83TzBGQlJVUXNaMEpCUVVrc1kwRkJTaXhGUVVGdlFqdEJRVU5vUWl4eFFrRkJTeXhKUVVGSkxFbEJRVWtzUTBGQllpeEZRVUZuUWl4SlFVRkpMR1ZCUVhCQ0xFVkJRWEZETEVkQlFYSkRMRVZCUVRCRE8wRkJRM1JETEhkQ1FVRkpMR1ZCUVdVc1NVRkJaaXhEUVVGdlFpeEhRVUZ3UWl4RlFVRjVRaXhWUVVGVkxFTkJRVllzUTBGQmVrSXNRMEZCU2l4RlFVRTBRenRCUVVONFF5d3JRa0ZCVHl4SlFVRlFMRU5CUVZrc1ZVRkJWU3hEUVVGV0xFTkJRVm83UVVGRFNEdEJRVU5LTzBGQlEwbzdRVUZEUkN4dFFrRkJUeXhOUVVGUU8wRkJRMGdzVTBGeVFrUTdRVUZ6UWtnc1MwRndRMkVzUlVGQlpEdEJRWEZEU0R0QlFVTkVPMEZCUTBFc1NVRkJTU3hwUWtGQlNpeEZRVUZ2UWp0QlFVTm9RaXhYUVVGUExFMUJRVkFzUjBGQmFVSXNXVUZCV1R0QlFVTjZRaXhwUWtGQlV5eERRVUZVTEVkQlFXRXNRMEZEV2pzN1FVRkZSQ3hsUVVGUExGVkJRVlVzUTBGQlZpeEZRVUZoTzBGQlEyaENMR2RDUVVGSkxGVkJRVlVzVFVGQlZpeExRVUZ4UWl4RFFVRjZRaXhGUVVFMFFqdEJRVU40UWl4elFrRkJUU3hKUVVGSkxFdEJRVW9zUTBGQlZTd3dSRUZCVml4RFFVRk9PMEZCUTBnN1FVRkRSQ3hqUVVGRkxGTkJRVVlzUjBGQll5eERRVUZrTzBGQlEwRXNiVUpCUVU4c1NVRkJTU3hEUVVGS0xFVkJRVkE3UVVGRFNDeFRRVTVFTzBGQlQwZ3NTMEZZWlN4RlFVRm9RanRCUVZsSU8wRkJRMFE3UVVGRFFTeEpRVUZKTEVOQlFVTXNUVUZCVFN4UFFVRllMRVZCUVc5Q08wRkJRMmhDTEZWQlFVMHNUMEZCVGl4SFFVRm5RaXhWUVVGVkxFbEJRVllzUlVGQlowSTdRVUZETlVJc1pVRkJUeXhQUVVGUExGTkJRVkFzUTBGQmFVSXNVVUZCYWtJc1EwRkJNRUlzU1VGQk1VSXNRMEZCSzBJc1NVRkJMMElzVFVGQmVVTXNaMEpCUVdoRU8wRkJRMGdzUzBGR1JEdEJRVWRJTzBGQlEwUTdRVUZEUVN4SlFVRkpMRU5CUVVNc1RVRkJUU3hUUVVGT0xFTkJRV2RDTEU5QlFYSkNMRVZCUVRoQ08wRkJRekZDTEZWQlFVMHNVMEZCVGl4RFFVRm5RaXhQUVVGb1FpeEhRVUV3UWl4VlFVRlZMR0ZCUVdNc2FVSkJRWGhDTEVWQlFUQkRPMEZCUTJoRkxGbEJRVWtzVTBGQlV5eEpRVUZpTEVWQlFXMUNPMEZCUTJZc2EwSkJRVTBzU1VGQlNTeFRRVUZLTEVWQlFVNDdRVUZEU0R0QlFVTkVMRmxCUVVrc1NVRkJTU3hQUVVGUExFbEJRVkFzUTBGQlVqdEJRVU5CTEZsQlFVa3NUVUZCVFN4RlFVRkZMRTFCUVVZc1MwRkJZU3hEUVVGMlFqczdRVUZGUVN4WlFVRkpMRkZCUVZFc1EwRkJXaXhGUVVGbE8wRkJRMWdzYlVKQlFVOHNRMEZCUXl4RFFVRlNPMEZCUTBnN1FVRkRSQ3haUVVGSkxFbEJRVWtzUTBGQlVqdEJRVU5CTEZsQlFVa3NWVUZCVlN4TlFVRldMRWRCUVcxQ0xFTkJRWFpDTEVWQlFUQkNPMEZCUTNSQ0xHZENRVUZKTEU5QlFVOHNWVUZCVlN4RFFVRldMRU5CUVZBc1EwRkJTanRCUVVOQkxHZENRVUZKTEUxQlFVMHNRMEZCVml4RlFVRmhPMEZCUVVVN1FVRkRXQ3h2UWtGQlNTeERRVUZLTzBGQlEwZ3NZVUZHUkN4TlFVVlBMRWxCUVVrc1RVRkJUU3hEUVVGT0xFbEJRVmNzVFVGQlRTeFJRVUZxUWl4SlFVRTJRaXhOUVVGTkxFTkJRVU1zVVVGQmVFTXNSVUZCYTBRN1FVRkRja1FzYjBKQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVvc1NVRkJVeXhEUVVGRExFTkJRVmdzU1VGQlowSXNTMEZCU3l4TFFVRk1MRU5CUVZjc1MwRkJTeXhIUVVGTUxFTkJRVk1zUTBGQlZDeERRVUZZTEVOQlFYQkNPMEZCUTBnN1FVRkRTanRCUVVORUxGbEJRVWtzUzBGQlN5eEhRVUZVTEVWQlFXTTdRVUZEVml4dFFrRkJUeXhEUVVGRExFTkJRVkk3UVVGRFNEdEJRVU5FTEZsQlFVa3NTVUZCU1N4TFFVRkxMRU5CUVV3c1IwRkJVeXhEUVVGVUxFZEJRV0VzUzBGQlN5eEhRVUZNTEVOQlFWTXNUVUZCVFN4TFFVRkxMRWRCUVV3c1EwRkJVeXhEUVVGVUxFTkJRV1lzUlVGQk5FSXNRMEZCTlVJc1EwRkJja0k3UVVGRFFTeGxRVUZQTEVsQlFVa3NSMEZCV0N4RlFVRm5RaXhIUVVGb1FpeEZRVUZ4UWp0QlFVTnFRaXhuUWtGQlNTeExRVUZMTEVOQlFVd3NTVUZCVlN4RlFVRkZMRU5CUVVZc1RVRkJVeXhoUVVGMlFpeEZRVUZ6UXp0QlFVTnNReXgxUWtGQlR5eERRVUZRTzBGQlEwZzdRVUZEU2p0QlFVTkVMR1ZCUVU4c1EwRkJReXhEUVVGU08wRkJRMGdzUzBFM1FrUTdRVUU0UWtnN08wRkJSVVE3UVVGRFFTeEpRVUZKTEcxQ1FVRktMRVZCUVhOQ08wRkJRMnhDTEZkQlFVOHNVVUZCVUN4SFFVRnJRaXhWUVVGVkxFZEJRVllzUlVGQlpUdEJRVU0zUWl4WlFVRkpMRTFCUVUwc2NVSkJRVlk3UVVGRFFTeGxRVUZQTEVsQlFVa3NZMEZCU2l4RFFVRnRRaXhIUVVGdVFpeERRVUZRTEVWQlFXZERPMEZCUXpWQ0xHMUNRVUZQTEV0QlFVc3NUVUZCVEN4RlFVRlFPMEZCUTBnN1FVRkRSQ3haUVVGSk8wRkJRMEVzWjBKQlFVa3NSMEZCU2l4SlFVRlhMRWxCUVZnN1FVRkRRU3h0UWtGQlR5eEpRVUZKTEVkQlFVb3NRMEZCVUR0QlFVTkJMRzFDUVVGUExFdEJRVkE3UVVGRFNDeFRRVXBFTEVOQlNVVXNUMEZCVHl4RFFVRlFMRVZCUVZVN1FVRkRVaXh0UWtGQlR5eEpRVUZRTzBGQlEwZzdRVUZEU2l4TFFWcEVPMEZCWVVnN1FVRkRSRHM3UVVGRlFTeEpRVUZKTERaQ1FVRTJRanRCUVVNM1FpeFRRVUZMTEVsQlJIZENPMEZCUlRkQ0xGTkJRVXNzU1VGR2QwSTdRVUZITjBJc1UwRkJTeXhKUVVoM1FqdEJRVWszUWl4VFFVRkxMRWxCU25kQ08wRkJTemRDTEZOQlFVc3NTVUZNZDBJN1FVRk5OMElzVTBGQlN5eEpRVTUzUWp0QlFVODNRaXhUUVVGTE8wRkJVSGRDTEVOQlFXcERPMEZCVTBFc1NVRkJTU3h6UWtGQmMwSTdRVUZEZEVJc1UwRkJTenRCUVVScFFpeERRVUV4UWpzN1FVRkpRU3hUUVVGVExITkNRVUZVTEVOQlFXZERMRTFCUVdoRExFVkJRWGRETzBGQlEzQkRMRmRCUVU4c1ZVRkJWU3hOUVVGV0xFVkJRV3RDTEU5QlFXeENMRU5CUVRCQ0xHZENRVUV4UWl4RlFVRTBReXhWUVVGVkxHRkJRVllzUlVGQmVVSTdRVUZEZUVVc1pVRkJUeXhOUVVGTkxHTkJRV01zVTBGQlpDeERRVUYzUWl4RFFVRjRRaXhEUVVGaU8wRkJRMGdzUzBGR1RTeERRVUZRTzBGQlIwZzdPMEZCUlVRc1UwRkJVeXgxUWtGQlZDeERRVUZwUXl4SlFVRnFReXhGUVVGMVF6dEJRVU51UXl4UlFVRkpMRmRCUVZjc1JVRkJaanRCUVVOQkxGRkJRVWtzTWtKQlFUSkNMRXRCUVVzc1RVRkJUQ3hEUVVGWkxFTkJRVm9zUTBGQk0wSXNRMEZCU2l4RlFVRm5SRHRCUVVNMVF5eHRRa0ZCVnl4TFFVRkxMRTFCUVV3c1EwRkJXU3hEUVVGYUxFTkJRVmc3UVVGRFFTeGxRVUZQTEV0QlFVc3NVMEZCVEN4RFFVRmxMRU5CUVdZc1EwRkJVRHRCUVVOSU8wRkJRMFFzVVVGQlNTeFpRVUZaTEVWQlFXaENPMEZCUTBFc1VVRkJTU3hUUVVGVExFVkJRV0k3UVVGRFFTeFJRVUZKTEdWQlFXVXNTVUZCYmtJN1FVRkRRU3hSUVVGSkxHZENRVUZuUWl4TFFVRndRanRCUVVOQkxGRkJRVWtzYTBKQlFXdENMRXRCUVhSQ08wRkJRMEVzVVVGQlNTeGhRVUZoTEVkQlFXcENMRVZCUVhOQ08wRkJRMnhDTEhWQ1FVRmxMRXRCUVdZN1FVRkRTQ3hMUVVaRUxFMUJSVThzU1VGQlNTeGhRVUZoTEVkQlFXcENMRVZCUVhOQ08wRkJRM3BDTEdsQ1FVRlRMRWRCUVZRN1FVRkRRU3h2UWtGQldTeEhRVUZhTzBGQlEwZ3NTMEZJVFN4TlFVZEJMRWxCUVVrc1lVRkJZU3hIUVVGcVFpeEZRVUZ6UWp0QlFVTjZRaXhwUWtGQlV5eEhRVUZVTzBGQlEwRXNiMEpCUVZrc1IwRkJXanRCUVVOSUxFdEJTRTBzVFVGSFFTeEpRVUZKTEdGQlFXRXNSMEZCYWtJc1JVRkJjMEk3UVVGRGVrSXNhVUpCUVZNc1IwRkJWRHRCUVVOQkxIVkNRVUZsTEV0QlFXWTdRVUZEU0N4TFFVaE5MRTFCUjBFc1NVRkJTU3hoUVVGaExFZEJRV3BDTEVWQlFYTkNPMEZCUTNwQ0xHbENRVUZUTEVkQlFWUTdRVUZEUVN4dlFrRkJXU3hIUVVGYU8wRkJRMEVzZDBKQlFXZENMRWxCUVdoQ08wRkJRMEVzTUVKQlFXdENMRWxCUVd4Q08wRkJRMGdzUzBGTVRTeE5RVXRCTEVsQlFVa3NZVUZCWVN4SFFVRnFRaXhGUVVGelFqdEJRVU42UWl4cFFrRkJVeXhIUVVGVU8wRkJRMEVzYjBKQlFWa3NSMEZCV2p0QlFVTkJMSGRDUVVGblFpeEpRVUZvUWp0QlFVTklMRXRCU2swc1RVRkpRU3hKUVVGSkxHRkJRV0VzUjBGQmFrSXNSVUZCYzBJN1FVRkRla0lzYVVKQlFWTXNSMEZCVkR0QlFVTkJMRzlDUVVGWkxFZEJRVm83UVVGRFFTeDNRa0ZCWjBJc1NVRkJhRUk3UVVGRFNEczdRVUZGUkN4UlFVRkpMRmRCUVZjc1JVRkJaanRCUVVOQkxGRkJRVWtzVlVGQlZTeExRVUZMTEV0QlFVd3NRMEZCVnl4SFFVRllMRU5CUVdRN1FVRkRRU3hSUVVGSkxGZEJRVmNzUlVGQlpqdEJRVU5CTEZGQlFVa3NZVUZCWVN4RlFVRnFRanRCUVVOQkxGTkJRVXNzU1VGQlNTeEpRVUZKTEVOQlFXSXNSVUZCWjBJc1NVRkJTU3hSUVVGUkxFMUJRVFZDTEVWQlFXOURMRWRCUVhCRExFVkJRWGxETzBGQlEzSkRMRmxCUVVrc1ZVRkJWU3hSUVVGUkxFTkJRVklzUTBGQlpEdEJRVU5CTEZsQlFVa3NWMEZCVnl4SlFVRm1PMEZCUTBFc1dVRkJTU3hSUVVGUkxFOUJRVklzUTBGQlowSXNSMEZCYUVJc1RVRkJlVUlzUTBGQlF5eERRVUU1UWl4RlFVRnBRenRCUVVNM1FpeG5Ra0ZCU1N4UlFVRlJMRkZCUVZFc1MwRkJVaXhEUVVGakxFZEJRV1FzUTBGQldqdEJRVU5CTEhOQ1FVRlZMRTFCUVUwc1EwRkJUaXhEUVVGV08wRkJRMEVzZFVKQlFWY3NVMEZCVXl4TlFVRk5MRU5CUVU0c1EwRkJWQ3hGUVVGdFFpeEZRVUZ1UWl4RFFVRllPMEZCUTBnN1FVRkRSQ3haUVVGSkxGZEJRVmNzUlVGQlpqdEJRVU5CTEdWQlFVOHNiMEpCUVc5Q0xGRkJRVkVzVFVGQlVpeERRVUZsTEZGQlFWRXNUVUZCVWl4SFFVRnBRaXhEUVVGb1F5eERRVUZ3UWl4RFFVRlFMRVZCUVdkRk8wRkJRelZFTEhGQ1FVRlRMRkZCUVZFc1RVRkJVaXhEUVVGbExGRkJRVkVzVFVGQlVpeEhRVUZwUWl4RFFVRm9ReXhEUVVGVUxFbEJRU3RETEVsQlFTOURPMEZCUTBFc2MwSkJRVlVzVVVGQlVTeFRRVUZTTEVOQlFXdENMRU5CUVd4Q0xFVkJRWEZDTEZGQlFWRXNUVUZCVWl4SFFVRnBRaXhEUVVGMFF5eERRVUZXTzBGQlEwZzdRVUZEUkN4WlFVRkpMRlZCUVZVN1FVRkRWaXh6UWtGQlZTeFJRVVJCTzBGQlJWWXNhMEpCUVUwc1QwRkdTVHRCUVVkV0xITkNRVUZWTzBGQlNFRXNVMEZCWkR0QlFVdEJMR2xDUVVGVExFbEJRVlFzUTBGQll5eFBRVUZrTzBGQlEwRXNiVUpCUVZjc1QwRkJXQ3hKUVVGelFpeFBRVUYwUWp0QlFVTkJMR2xDUVVGVExFbEJRVlFzUTBGQll5eFBRVUZrTzBGQlEwZzdRVUZEUkN4UlFVRkpMR05CUVdNc1UwRkJaQ3hYUVVGakxFTkJRVlVzWVVGQlZpeEZRVUY1UWp0QlFVTjJReXhaUVVGSkxGTkJRVk1zUlVGQllqdEJRVU5CTEZsQlFVa3NZVUZCWVN4RFFVRnFRanRCUVVOQkxHRkJRVXNzU1VGQlNTeEpRVUZKTEVOQlFXSXNSVUZCWjBJc1NVRkJTU3hUUVVGVExFMUJRVGRDTEVWQlFYRkRMRWRCUVhKRExFVkJRVEJETzBGQlEzUkRMR2RDUVVGSkxGVkJRVlVzVTBGQlV5eERRVUZVTEVOQlFXUTdRVUZEUVN4blFrRkJTU3hSUVVGUkxHTkJRV01zVVVGQlVTeEpRVUYwUWl4RFFVRmFPMEZCUTBFc1owSkJRVWtzVlVGQlZTeEpRVUZXTEVsQlFXdENMRlZCUVZVc1UwRkJOVUlzU1VGQk1FTXNUVUZCVFN4UFFVRk9MRU5CUVdNc1MwRkJaQ3hMUVVGM1FpeE5RVUZOTEUxQlFVNHNTMEZCYVVJc1EwRkJia1lzU1VGQk1FWXNVVUZCVHl4TFFVRlFMSFZFUVVGUExFdEJRVkFzVDBGQmFVSXNVVUZCYWtJc1NVRkJOa0lzYjBKQlFWa3NTMEZCV2l4RlFVRnRRaXhOUVVGdVFpeExRVUU0UWl4RFFVRjZTaXhGUVVFMlNqdEJRVU42U2p0QlFVTkJPMEZCUTBnN1FVRkRSQ3huUWtGQlNTeE5RVUZOTEZWQlFWWXNSVUZCYzBJN1FVRkRiRUlzTUVKQlFWVXNUVUZCVmp0QlFVTklMR0ZCUmtRc1RVRkZUenRCUVVOSUxEQkNRVUZYTEdGQlFXRXNSMEZCZUVJN1FVRkRTRHRCUVVORUxHZENRVUZKTEUxQlFVMHNUMEZCVGl4RFFVRmpMRXRCUVdRc1EwRkJTaXhGUVVFd1FqdEJRVU4wUWl4dlFrRkJTU3hoUVVGS0xFVkJRVzFDTzBGQlEyWXNPRUpCUVZVc1VVRkJVU3hKUVVGU0xFZEJRV1VzUjBGQmVrSTdRVUZEU0R0QlFVTkVMSEZDUVVGTExFbEJRVWtzU1VGQlNTeERRVUZpTEVWQlFXZENMRWxCUVVrc1RVRkJUU3hOUVVFeFFpeEZRVUZyUXl4SFFVRnNReXhGUVVGMVF6dEJRVU51UXl4M1FrRkJTU3hKUVVGSkxFTkJRVklzUlVGQlZ6dEJRVU5RTEd0RFFVRlZMRkZCUVZFc1VVRkJVaXhEUVVGcFFpeEhRVUZxUWl4SlFVRjVRaXhoUVVGaExFZEJRWFJETEVkQlFUWkRMRWRCUVhaRU8wRkJRMEVzTkVKQlFVa3NVVUZCVVN4UlFVRlNMRU5CUVdsQ0xFZEJRV3BDTEV0QlFYbENMR0ZCUVRkQ0xFVkJRVFJETzBGQlEzaERMSE5EUVVGVkxGRkJRVkVzU1VGQlVpeEhRVUZsTEVkQlFYcENPMEZCUTBnN1FVRkRTanRCUVVORUxEaENRVUZWTEdWQlFXVXNiVUpCUVcxQ0xFMUJRVTBzUTBGQlRpeERRVUZ1UWl4RlFVRTJRaXhQUVVFM1FpeERRVUZ4UXl4SlFVRnlReXhGUVVFeVF5eExRVUV6UXl4RFFVRm1MRWRCUVcxRkxIVkNRVUYxUWl4TlFVRk5MRU5CUVU0c1EwRkJka0lzUTBGQk4wVTdRVUZEU0R0QlFVTktMR0ZCWWtRc1RVRmhUeXhKUVVGSkxGRkJRVThzUzBGQlVDeDFSRUZCVHl4TFFVRlFMRTlCUVdsQ0xGRkJRWEpDTEVWQlFTdENPMEZCUTJ4RExHOUNRVUZKTEdsQ1FVRnBRaXhEUVVGRExGRkJRVkVzVVVGQlVpeERRVUZwUWl4SFFVRnFRaXhEUVVGMFFpeEZRVUUyUXp0QlFVTjZReXc0UWtGQlZTeFJRVUZSTEVsQlFWSXNSMEZCWlN4SFFVRjZRanRCUVVOSU8wRkJRMFFzYjBKQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc2NVSkJRVXNzU1VGQlNTeEhRVUZVTEVsQlFXZENMRXRCUVdoQ0xFVkJRWFZDTzBGQlEyNUNMSGRDUVVGSkxFTkJRVU1zUzBGQlRDeEZRVUZaTzBGQlExSXNhME5CUVZVc1VVRkJVU3hSUVVGU0xFTkJRV2xDTEVkQlFXcENMRWxCUVhsQ0xHRkJRV0VzUjBGQmRFTXNSMEZCTmtNc1IwRkJka1E3UVVGRFNEdEJRVU5FTERSQ1FVRlJMRXRCUVZJN1FVRkRRU3c0UWtGQlZTeGxRVUZsTEcxQ1FVRnRRaXhIUVVGdVFpeEZRVUYzUWl4UFFVRjRRaXhEUVVGblF5eEpRVUZvUXl4RlFVRnpReXhMUVVGMFF5eERRVUZtTEVkQlFUaEVMSFZDUVVGMVFpeEhRVUYyUWl4RFFVRjRSVHRCUVVOQkxEaENRVUZWTEZGQlFWRXNVVUZCVWl4RFFVRnBRaXhIUVVGcVFpeEpRVUYzUWl4SFFVRjRRaXhIUVVFNFFpeEhRVUY0UXp0QlFVTkJMRGhDUVVGVkxHVkJRV1VzYlVKQlFXMUNMRTFCUVUwc1IwRkJUaXhEUVVGdVFpeEZRVUVyUWl4UFFVRXZRaXhEUVVGMVF5eEpRVUYyUXl4RlFVRTJReXhMUVVFM1F5eERRVUZtTEVkQlFYRkZMSFZDUVVGMVFpeE5RVUZOTEVkQlFVNHNRMEZCZGtJc1EwRkJMMFU3UVVGRFNEdEJRVU5LTEdGQlpFMHNUVUZqUVR0QlFVTklMRzlDUVVGSkxHRkJRVW9zUlVGQmJVSTdRVUZEWml3NFFrRkJWU3hSUVVGUkxFbEJRV3hDTzBGQlEwRXNkMEpCUVVrc1EwRkJReXhsUVVGRUxFbEJRVzlDTEZWQlFWVXNSVUZCYkVNc1JVRkJjME03UVVGRGJFTXNhME5CUVZVc1IwRkJWanRCUVVOSU8wRkJRMG83UVVGRFJDeHZRa0ZCU1N4UlFVRlJMRkZCUVZJc1NVRkJiMElzU1VGQmVFSXNSVUZCT0VJN1FVRkRNVUlzTkVKQlFWRXNUVUZCVFN4VFFVRk9MRU5CUVdkQ0xFTkJRV2hDTEVWQlFXMUNMRkZCUVZFc1VVRkJNMElzUTBGQlVqdEJRVU5JTzBGQlEwUXNNRUpCUVZVc1pVRkJaU3h0UWtGQmJVSXNTMEZCYmtJc1JVRkJNRUlzVDBGQk1VSXNRMEZCYTBNc1NVRkJiRU1zUlVGQmQwTXNTMEZCZUVNc1EwRkJaaXhIUVVGblJTeDFRa0ZCZFVJc1MwRkJka0lzUTBGQk1VVTdRVUZEU0R0QlFVTktPMEZCUTBRc1pVRkJUeXhOUVVGUU8wRkJRMGdzUzBGNFJFUTdRVUY1UkVFc1owSkJRVmtzVVVGQldpeEhRVUYxUWl4UlFVRjJRanRCUVVOQkxGZEJRVTg3UVVGRFNDeG5Ra0ZCVVN4TlFVUk1PMEZCUlVnc2MwSkJRV003UVVGR1dDeExRVUZRTzBGQlNVZzdPMEZCUlVRc1UwRkJVeXhYUVVGVUxFTkJRWEZDTEZGQlFYSkNMRVZCUVN0Q08wRkJRek5DTEZGQlFVa3NSVUZCUlN4blFrRkJaMElzVjBGQmJFSXNRMEZCU2l4RlFVRnZRenRCUVVOb1F5eGxRVUZQTEVsQlFVa3NWMEZCU2l4RFFVRm5RaXhSUVVGb1FpeERRVUZRTzBGQlEwZzdRVUZEUkN4UlFVRkpMRkZCUVZFc1UwRkJVeXhMUVVGVUxFTkJRV1VzUjBGQlppeERRVUZhTzBGQlEwRXNVVUZCU1N4WlFVRlpMRU5CUVVNc1RVRkJUU3hMUVVGT0xFVkJRVVFzUTBGQmFFSTdRVUZEUVN4UlFVRkpMRmRCUVZjc1JVRkJaanRCUVVOQkxGRkJRVWtzWjBKQlFXZENMRVZCUVhCQ08wRkJRMEVzVVVGQlNTeFhRVUZYTEVWQlFXWTdRVUZEUVN4WFFVRlBMRTFCUVUwc1RVRkJUaXhIUVVGbExFTkJRWFJDTEVWQlFYbENPMEZCUTNKQ0xGbEJRVWtzVDBGQlR5eE5RVUZOTEV0QlFVNHNSVUZCV0R0QlFVTkJMRmxCUVVrc1QwRkJUeXhMUVVGTExFdEJRVXdzUTBGQlZ5eEhRVUZZTEVWQlFXZENMRU5CUVdoQ0xFTkJRVmc3UVVGRFFTeFpRVUZKTEZsQlFWa3NTMEZCU3l4VFFVRk1MRU5CUVdVc1MwRkJTeXhOUVVGTUxFZEJRV01zUTBGQk4wSXNRMEZCYUVJN1FVRkRRU3haUVVGSkxGRkJRVkVzZDBKQlFYZENMRWxCUVhoQ0xFTkJRVm83UVVGRFFTeHpRa0ZCWXl4SlFVRmtMRU5CUVcxQ0xFMUJRVTBzV1VGQmVrSTdRVUZEUVN4cFFrRkJVeXhKUVVGVUxFTkJRV01zVFVGQlRTeE5RVUZ3UWp0QlFVTkJMR3RDUVVGVkxFbEJRVllzUTBGQlpTeFRRVUZtTzBGQlEwRXNiVUpCUVZjc1UwRkJVeXhOUVVGVUxFTkJRV2RDTEUxQlFVMHNXVUZCVGl4RFFVRnRRaXhSUVVGdVF5eERRVUZZTzBGQlEwZzdRVUZEUkN4VFFVRkxMRWxCUVV3c1IwRkJXU3hWUVVGVkxHRkJRVllzUlVGQmVVSTdRVUZEYWtNc1dVRkJTU3hUUVVGVExGVkJRVlVzUTBGQlZpeERRVUZpTzBGQlEwRXNZVUZCU3l4SlFVRkpMRWxCUVVrc1EwRkJZaXhGUVVGblFpeEpRVUZKTEdOQlFXTXNUVUZCYkVNc1JVRkJNRU1zUjBGQk1VTXNSVUZCSzBNN1FVRkRNME1zWjBKQlFVa3NaVUZCWlN4alFVRmpMRU5CUVdRc1EwRkJia0k3UVVGRFFTeHpRa0ZCVlN4aFFVRmhMR0ZCUVdJc1EwRkJWanRCUVVOQkxITkNRVUZWTEZWQlFWVXNTVUZCU1N4RFFVRmtMRU5CUVZZN1FVRkRTRHRCUVVORUxHVkJRVThzVFVGQlVEdEJRVU5JTEV0QlVrUTdRVUZUUVN4VFFVRkxMRkZCUVV3c1IwRkJaMElzVVVGQmFFSTdRVUZEUVN4VFFVRkxMRkZCUVV3c1IwRkJaMElzVVVGQmFFSTdRVUZEU0RzN1FVRkZSQ3haUVVGWkxGTkJRVm9zUjBGQmQwSTdRVUZEY0VJc1kwRkJWU3h2UWtGQldUdEJRVU5zUWl4bFFVRlBMRXRCUVVzc1VVRkJXanRCUVVOSUxFdEJTRzFDTzBGQlNYQkNMRzlDUVVGblFpeDNRa0ZCVlN4SFFVRldMRVZCUVdVN1FVRkRNMElzWlVGQlR5eExRVUZMTEVsQlFVd3NRMEZCVlN4VlFVRlZMRTlCUVZZc1JVRkJiVUk3UVVGRGFFTXNiVUpCUVU4c1NVRkJTU3hQUVVGS0xFTkJRVkE3UVVGRFNDeFRRVVpOTEVOQlFWQTdRVUZIU0R0QlFWSnRRaXhEUVVGNFFqdEJRVlZCTEVsQlFVa3NiVUpCUVcxQ0xGTkJRVk1zWjBKQlFWUXNRMEZCTUVJc1RVRkJNVUlzUlVGQmEwTXNaVUZCYkVNc1JVRkJiVVFzWVVGQmJrUXNSVUZCYTBVc1kwRkJiRVVzUlVGQmEwWXNjMEpCUVd4R0xFVkJRVEJITzBGQlF6ZElMRk5CUVVzc1QwRkJUQ3hIUVVGbExFVkJRV1k3UVVGRFFTeFRRVUZMTEZWQlFVd3NSMEZCYTBJc1JVRkJiRUk3UVVGRFFTeFRRVUZMTEdkQ1FVRk1MRWRCUVhkQ0xGTkJRVk1zYzBKQlFXTXNUMEZCVHl4blFrRkJja0lzUTBGQlZDeEhRVUZyUkN4RlFVRXhSVHRCUVVOQkxGTkJRVXNzVDBGQlRDeEhRVUZsTEZOQlFWTXNjMEpCUVdNc1QwRkJUeXhQUVVGeVFpeERRVUZVTEVkQlFYbERMRVZCUVhoRU8wRkJRMEVzVTBGQlN5eGxRVUZNTEVkQlFYVkNMR1ZCUVhaQ08wRkJRMEVzVTBGQlN5eE5RVUZNTEVkQlFXTXNSVUZCWkR0QlFVTkJMRk5CUVVzc1YwRkJUQ3hIUVVGdFFpeHJRa0ZCYTBJc1MwRkJTeXhaUVVGMlFpeEhRVUZ6UXl4TFFVRkxMRmRCUVRsRU8wRkJRMEVzVVVGQlNTeGpRVUZLTEVWQlFXOUNPMEZCUTJoQ0xHRkJRVXNzWTBGQlRDeEhRVUZ6UWl4SlFVRjBRanRCUVVOQkxHRkJRVXNzVDBGQlRDeEhRVUZsTEVWQlFXWTdRVUZEUVN4aFFVRkxMR0ZCUVV3c1IwRkJjVUlzUlVGQmNrSTdRVUZEUVN4aFFVRkxMRzlDUVVGTUxFZEJRVFJDTEVWQlFUVkNPMEZCUTBFc1lVRkJTeXcyUWtGQlRDeEhRVUZ4UXl4RlFVRnlRenRCUVVOQkxHRkJRVXNzYlVKQlFVd3NSMEZCTWtJc2JVSkJRVE5DTzBGQlEwRXNZVUZCU3l4dFFrRkJUQ3hIUVVFeVFpd3dRa0ZCTTBJN1FVRkRTRHRCUVVORUxGRkJRVWtzYzBKQlFVb3NSVUZCTkVJN1FVRkRlRUlzWVVGQlN5eHpRa0ZCVEN4SFFVRTRRaXhKUVVFNVFqdEJRVU5CTEdGQlFVc3NhMEpCUVV3c1IwRkJNRUlzUlVGQk1VSTdRVUZEUVN4aFFVRkxMRzlDUVVGTUxFZEJRVFJDTEVWQlFUVkNPMEZCUTBnN1FVRkRSQ3hUUVVGTExHRkJRVXdzUjBGQmNVSXNhVUpCUVdsQ0xIRkNRVUZ4UWl4SlFVRnlRaXhEUVVGMFF6dEJRVU5CTEZGQlFVa3NUMEZCVHl4TFFVRkxMR0ZCUVZvc1MwRkJPRUlzVVVGQmJFTXNSVUZCTkVNN1FVRkRlRU1zWTBGQlRTeEpRVUZKTEV0QlFVb3NRMEZCVlN4UFFVRldMRU5CUVU0N1FVRkRTRHRCUVVORUxGTkJRVXNzWlVGQlRDeEhRVUYxUWl4RlFVRjJRanRCUVVOQkxGRkJRVWtzVFVGQlNpeEZRVUZaTzBGQlExSXNZVUZCU3l4SlFVRkpMRWRCUVZRc1NVRkJaMElzVDBGQlR5eGxRVUYyUWl4RlFVRjNRenRCUVVOd1F5eHBRa0ZCU3l4bFFVRk1MRU5CUVhGQ0xFZEJRWEpDTEVsQlFUUkNMRTlCUVU4c1pVRkJVQ3hEUVVGMVFpeEhRVUYyUWl4RlFVRTBRaXhMUVVFMVFpeERRVUZyUXl4RFFVRnNReXhEUVVFMVFqdEJRVU5JTzBGQlEwbzdRVUZEU2l4RFFXaERSRHRCUVdsRFFTeHBRa0ZCYVVJc1UwRkJha0lzUTBGQk1rSXNZVUZCTTBJc1IwRkJNa01zVlVGQlZTeFBRVUZXTEVWQlFXMUNMR1ZCUVc1Q0xFVkJRVzlETzBGQlF6TkZMRk5CUVVzc1pVRkJUQ3hEUVVGeFFpeFBRVUZ5UWl4SlFVRm5ReXhMUVVGTExHVkJRVXdzUTBGQmNVSXNUMEZCY2tJc1MwRkJhVU1zUlVGQmFrVTdRVUZEUVN4VFFVRkxMR1ZCUVV3c1EwRkJjVUlzVDBGQmNrSXNSVUZCT0VJc1NVRkJPVUlzUTBGQmJVTXNaVUZCYmtNN1FVRkRTQ3hEUVVoRU8wRkJTVUVzYVVKQlFXbENMRk5CUVdwQ0xFTkJRVEpDTEZkQlFUTkNMRWRCUVhsRExGVkJRVlVzU1VGQlZpeEZRVUZuUWl4aFFVRm9RaXhGUVVFclFpeFJRVUV2UWl4RlFVRjVReXhWUVVGNlF5eEZRVUZ4UkN4VFFVRnlSQ3hGUVVGblJTeEpRVUZvUlN4RlFVRnpSU3hOUVVGMFJTeEZRVUU0UlR0QlFVTnVTQ3hSUVVGSkxGRkJRVkVzU1VGQlNTeGxRVUZLTEVOQlFXOUNMRWxCUVhCQ0xFVkJRVEJDTEdGQlFURkNMRVZCUVhsRExGRkJRWHBETEVWQlFXMUVMRlZCUVc1RUxFVkJRU3RFTEZOQlFTOUVMRU5CUVZvN1FVRkRRU3hWUVVGTkxFOUJRVTRzUjBGQlowSXNTMEZCU3l4aFFVRk1MRU5CUVcxQ0xFdEJRVzVDTEVWQlFUQkNMRWxCUVRGQ0xFVkJRV2RETEUxQlFXaERMRU5CUVdoQ08wRkJRMEVzVjBGQlR5eExRVUZRTzBGQlEwZ3NRMEZLUkR0QlFVdEJMR2xDUVVGcFFpeFRRVUZxUWl4RFFVRXlRaXhYUVVFelFpeEhRVUY1UXl4VlFVRlZMRXRCUVZZc1JVRkJhVUk3UVVGRGRFUXNWMEZCVHl4TFFVRlFPMEZCUTBnc1EwRkdSRHRCUVVkQkxHbENRVUZwUWl4VFFVRnFRaXhEUVVFeVFpeFpRVUV6UWl4SFFVRXdReXhWUVVGVkxFdEJRVllzUlVGQmFVSTdRVUZEZGtRc1VVRkJTU3hMUVVGS0xFVkJRVmM3UVVGRFVDeGhRVUZMTEUxQlFVd3NRMEZCV1N4SlFVRmFMRU5CUVdsQ0xFdEJRV3BDTzBGQlEwZzdRVUZEUkN4WFFVRlBMRWxCUVZBN1FVRkRTQ3hEUVV4RU8wRkJUVUVzYVVKQlFXbENMRk5CUVdwQ0xFTkJRVEpDTEZsQlFUTkNMRWRCUVRCRExGVkJRVlVzVlVGQlZpeEZRVUZ6UWl4UlFVRjBRaXhGUVVGblF5eFZRVUZvUXl4RlFVRTBRenRCUVVOc1JpeFRRVUZMTEVsQlFVa3NTVUZCU1N4VlFVRmlMRVZCUVhsQ0xFbEJRVWtzUzBGQlN5eE5RVUZNTEVOQlFWa3NUVUZCZWtNc1JVRkJhVVFzUjBGQmFrUXNSVUZCYzBRN1FVRkRiRVFzWVVGQlN5eE5RVUZNTEVOQlFWa3NRMEZCV2l4SlFVRnBRaXhMUVVGTExFMUJRVXdzUTBGQldTeERRVUZhTEVWQlFXVXNWVUZCWml4RFFVRXdRaXhSUVVFeFFpeEZRVUZ2UXl4VlFVRndReXhEUVVGcVFqdEJRVU5JTzBGQlEwUXNWMEZCVHl4SlFVRlFPMEZCUTBnc1EwRk1SRHRCUVUxQkxHbENRVUZwUWl4VFFVRnFRaXhEUVVFeVFpeHZRa0ZCTTBJc1IwRkJhMFFzVlVGQlZTeEpRVUZXTEVWQlFXZENMRTFCUVdoQ0xFVkJRWGRDTzBGQlEzUkZMRk5CUVVzc1NVRkJTU3hYUVVGVUxFbEJRWGRDTEV0QlFVc3NiMEpCUVRkQ0xFVkJRVzFFTzBGQlF5OURMRmxCUVVrc1VVRkJVU3hMUVVGTExGZEJRVXdzUTBGQmFVSXNWMEZCVnl4blFrRkJOVUlzUlVGQk9FTXNSVUZCUXl4TlFVRk5MRmRCUVZBc1JVRkJPVU1zUlVGQmJVVXNWMEZCYmtVc1JVRkJaMFlzUlVGQmFFWXNSVUZCYjBZc1NVRkJjRVlzUlVGQk1FWXNTVUZCTVVZc1JVRkJaMGNzVFVGQmFFY3NRMEZCV2p0QlFVTkJMRmxCUVVrc1UwRkJVeXhMUVVGTExGZEJRVXdzUTBGQmFVSXNTMEZCYWtJc1EwRkJZanRCUVVOQkxGbEJRVWtzVFVGQlNpeEZRVUZaTzBGQlExSXNiVUpCUVU4c1RVRkJVRHRCUVVOSU8wRkJRMG83UVVGRFJDeFhRVUZQTEVsQlFWQTdRVUZEU0N4RFFWUkVPenRCUVZkQkxHbENRVUZwUWl4VFFVRnFRaXhEUVVFeVFpeFRRVUV6UWl4SFFVRjFReXhWUVVGVkxFMUJRVllzUlVGQmEwSXNVMEZCYkVJc1JVRkJOa0k3UVVGRGFFVXNVVUZCU1N4UlFVRlBMRTFCUVZBc2RVUkJRVThzVFVGQlVDeFBRVUZyUWl4UlFVRjBRaXhGUVVGblF6dEJRVU0xUWl4aFFVRkxMRWxCUVVrc1IwRkJWQ3hKUVVGblFpeE5RVUZvUWl4RlFVRjNRanRCUVVOd1FpeHBRa0ZCU3l4VFFVRk1MRU5CUVdVc1IwRkJaaXhGUVVGdlFpeFBRVUZQTEVkQlFWQXNRMEZCY0VJN1FVRkRTRHRCUVVORUxHVkJRVThzU1VGQlVEdEJRVU5JTzBGQlEwUXNVMEZCU3l4blFrRkJUQ3hEUVVGelFpeE5RVUYwUWl4SlFVRm5ReXhUUVVGb1F6dEJRVU5JTEVOQlVrUTdRVUZUUVN4cFFrRkJhVUlzVTBGQmFrSXNRMEZCTWtJc1YwRkJNMElzUjBGQmVVTXNWVUZCVlN4TlFVRldMRVZCUVd0Q0xGVkJRV3hDTEVWQlFUaENPMEZCUTI1RkxGRkJRVWtzVDBGQlR5eE5RVUZRTEUxQlFXMUNMRk5CUVhaQ0xFVkJRV3RETzBGQlF6bENMSEZDUVVGaExHTkJRV01zUlVGQk0wSTdRVUZEUVN4WlFVRkpMRmRCUVZjc1QwRkJUeXhOUVVGUUxFTkJRVmdzUTBGQlNpeEZRVUZuUXp0QlFVTTFRaXh0UWtGQlR5eExRVUZMTEZkQlFVd3NRMEZCYVVJc1YwRkJWeXhyUWtGQk5VSXNSVUZCWjBRc1JVRkJReXhOUVVGTkxHOUNRVUZaTEZWQlFWb3NSVUZCZDBJc1NVRkJlRUlzUTBGQk5rSXNTVUZCTjBJc1EwRkJVQ3hGUVVGb1JDeEZRVUUwUml4RlFVRTFSaXhGUVVGblJ5eEZRVUZvUnl4RlFVRnZSeXhKUVVGd1J5eEZRVUV3Unl4VFFVRXhSeXhGUVVGeFNDeE5RVUZ5U0N4RFFVRlFPMEZCUTBnN1FVRkRSQ3h0UWtGQlZ5eFBRVUZQTEUxQlFWQXNRMEZCV0N4SlFVRTJRaXhKUVVFM1FqdEJRVU5CTEdsQ1FVRlRMRXRCUVVzc1UwRkJUQ3hEUVVGbExFOUJRVThzVFVGQlVDeERRVUZtTEVWQlFTdENMRlZCUVM5Q0xFTkJRVlE3UVVGRFNEdEJRVU5FTEZkQlFVOHNUVUZCVUR0QlFVTklMRU5CVmtRN1FVRlhRU3hwUWtGQmFVSXNVMEZCYWtJc1EwRkJNa0lzVTBGQk0wSXNSMEZCZFVNc1ZVRkJWU3hIUVVGV0xFVkJRV1VzVlVGQlppeEZRVUV5UWp0QlFVTTVSQ3hSUVVGSkxFMUJRVW83UVVGRFFTeFJRVUZKTEV0QlFVc3NUMEZCVEN4RFFVRmhMRWRCUVdJc1RVRkJjMElzVTBGQk1VSXNSVUZCY1VNN1FVRkRha01zYVVKQlFWTXNTMEZCU3l4UFFVRk1MRU5CUVdFc1IwRkJZaXhEUVVGVU8wRkJRMEVzWlVGQlR5eExRVUZMTEZkQlFVd3NRMEZCYVVJc1RVRkJha0lzUlVGQmVVSXNWVUZCZWtJc1EwRkJVRHRCUVVOSU8wRkJRMFFzVVVGQlNTeFZRVUZWTEVkQlFXUTdRVUZEUVN4UlFVRkpMRmRCUVZjc1JVRkJaanRCUVVOQkxGRkJRVWtzU1VGQlNTeFBRVUZLTEVOQlFWa3NSMEZCV2l4TlFVRnhRaXhEUVVGRExFTkJRVEZDTEVWQlFUWkNPMEZCUTNwQ0xHMUNRVUZYTEVsQlFVa3NVMEZCU2l4RFFVRmpMRWxCUVVrc1QwRkJTaXhEUVVGWkxFZEJRVm9zU1VGQmJVSXNRMEZCYWtNc1EwRkJXRHRCUVVOQkxHdENRVUZWTEVsQlFVa3NVMEZCU2l4RFFVRmpMRU5CUVdRc1JVRkJhVUlzU1VGQlNTeFBRVUZLTEVOQlFWa3NSMEZCV2l4RFFVRnFRaXhEUVVGV08wRkJRMGc3UVVGRFJDeFJRVUZKTEhOQ1FVRlBMRXRCUVVzc1QwRkJUQ3hEUVVGaExFOUJRV0lzUTBGQlVDeE5RVUZwUXl4UlFVRnlReXhGUVVFclF6dEJRVU16UXl4cFFrRkJVeXhMUVVGTExFOUJRVXdzUTBGQllTeFBRVUZpTEVOQlFWUTdRVUZEUVN4WlFVRkpMR05CUVdNc2JVSkJRVzFDTEZGQlFXNUNMRU5CUVd4Q08wRkJRMEVzV1VGQlNTeG5Ra0ZCWjBJc1JVRkJjRUlzUlVGQmQwSTdRVUZEY0VJc2JVSkJRVThzUzBGQlN5eFhRVUZNTEVOQlFXbENMRTFCUVdwQ0xFVkJRWGxDTEZWQlFYcENMRU5CUVZBN1FVRkRTQ3hUUVVaRUxFMUJSVThzU1VGQlNTeFpRVUZaTEUxQlFWb3NRMEZCYlVJc1EwRkJia0lzVFVGQk1FSXNSMEZCT1VJc1JVRkJiVU03UVVGRGRFTXNiVUpCUVU4c1UwRkJVRHRCUVVOSU8wRkJRMFFzV1VGQlNTeFJRVUZSTEZsQlFWa3NTMEZCV2l4RFFVRnJRaXhIUVVGc1FpeEZRVUYxUWl4TFFVRjJRaXhEUVVFMlFpeERRVUUzUWl4RFFVRmFPMEZCUTBFc1lVRkJTeXhKUVVGSkxFbEJRVWtzUTBGQllpeEZRVUZuUWl4SlFVRkpMRTFCUVUwc1RVRkJNVUlzUlVGQmEwTXNSMEZCYkVNc1JVRkJkVU03UVVGRGJrTXNaMEpCUVVrc1dVRkJXU3hOUVVGTkxFTkJRVTRzUlVGQlV5eFBRVUZVTEVOQlFXbENMRXRCUVdwQ0xFVkJRWGRDTEVkQlFYaENMRVZCUVRaQ0xFOUJRVGRDTEVOQlFYRkRMRXRCUVhKRExFVkJRVFJETEVkQlFUVkRMRU5CUVdoQ08wRkJRMEVzWjBKQlFVa3NUMEZCVHl4VFFVRlFMRTFCUVhOQ0xGTkJRVEZDTEVWQlFYRkRPMEZCUTJwRExIbENRVUZUTEZOQlFWUTdRVUZEUVR0QlFVTklPMEZCUTBRc2NVSkJRVk1zVDBGQlR5eFRRVUZRTEVOQlFWUTdRVUZEU0R0QlFVTkVMRmxCUVVrc1YwRkJWeXhUUVVGbUxFVkJRVEJDTzBGQlEzUkNMRzFDUVVGUExFdEJRVXNzVjBGQlRDeERRVUZwUWl4TlFVRnFRaXhGUVVGNVFpeFZRVUY2UWl4RFFVRlFPMEZCUTBnN1FVRkRTanRCUVVORUxGRkJRVWtzUzBGQlN5eFBRVUZNTEVOQlFXRXNUMEZCWWl4TlFVRXdRaXhUUVVFNVFpeEZRVUY1UXp0QlFVTnlReXhoUVVGTExFOUJRVXdzUTBGQllTeEpRVUZpTEVOQlFXdENMRTlCUVd4Q08wRkJRMEVzWVVGQlN5eFBRVUZNTEVOQlFXRXNUMEZCWWl4SlFVRjNRaXhQUVVGNFFqdEJRVU5CTEdGQlFVc3NWVUZCVEN4RFFVRm5RaXhQUVVGb1FpeEpRVUV5UWl4UFFVRXpRanRCUVVOSU8wRkJRMG9zUTBGMFEwUTdRVUYxUTBFc2FVSkJRV2xDTEZOQlFXcENMRU5CUVRKQ0xHRkJRVE5DTEVkQlFUSkRMRlZCUVZVc1RVRkJWaXhGUVVGclFpeEhRVUZzUWl4RlFVRjFRanRCUVVNNVJDeFJRVUZKTEUxQlFVMHNUMEZCVGl4RFFVRmpMRTFCUVdRc1EwRkJTaXhGUVVFeVFqdEJRVU4yUWl4aFFVRkxMRWxCUVVrc1NVRkJTU3hEUVVGaUxFVkJRV2RDTEVsQlFVa3NUMEZCVHl4TlFVRXpRaXhGUVVGdFF5eEhRVUZ1UXl4RlFVRjNRenRCUVVOd1F5eHBRa0ZCU3l4aFFVRk1MRU5CUVcxQ0xFOUJRVThzUTBGQlVDeERRVUZ1UWl4RlFVRTRRaXhIUVVFNVFqdEJRVU5JTzBGQlEwb3NTMEZLUkN4TlFVbFBMRWxCUVVrc1ZVRkJWU3hSUVVGUExFMUJRVkFzZFVSQlFVOHNUVUZCVUN4UFFVRnJRaXhSUVVGb1F5eEZRVUV3UXp0QlFVTTNReXhaUVVGSkxFOUJRVThzVDBGQlR5eEZRVUZrTEV0QlFYRkNMRkZCUVhwQ0xFVkJRVzFETzBGQlF5OUNMR2RDUVVGSkxHRkJRV0VzUjBGQllpeEZRVUZyUWl4UFFVRlBMRVZCUVhwQ0xFTkJRVW9zUlVGQmEwTTdRVUZET1VJc2IwSkJRVWtzUzBGQlN5eFBRVUZNTEVOQlFXRXNUMEZCVHl4RlFVRndRaXhOUVVFMFFpeFRRVUZvUXl4RlFVRXlRenRCUVVOMlF5eDVRa0ZCU3l4UFFVRk1MRU5CUVdFc1QwRkJUeXhGUVVGd1FpeEpRVUV3UWl4TlFVRXhRanRCUVVOSU8wRkJRMG83UVVGRFNqdEJRVU5FTEdGQlFVc3NTVUZCU1N4SFFVRlVMRWxCUVdkQ0xFMUJRV2hDTEVWQlFYZENPMEZCUTNCQ0xHZENRVUZKTEZGQlFWRXNUVUZCV2l4RlFVRnZRanRCUVVOb1FpeHZRa0ZCU1N4elFrRkJUeXhQUVVGUExFZEJRVkFzUTBGQlVDeE5RVUYxUWl4UlFVRXpRaXhGUVVGeFF6dEJRVU5xUXl4NVFrRkJTeXhoUVVGTUxFTkJRVzFDTEU5QlFVOHNSMEZCVUN4RFFVRnVRaXhGUVVGblF5eEhRVUZvUXp0QlFVTklMR2xDUVVaRUxFMUJSVThzU1VGQlNTeFJRVUZSTEUxQlFWb3NSVUZCYjBJN1FVRkRka0lzZDBKQlFVa3NUVUZCVFN4bFFVRmxMRTlCUVU4c1IwRkJVQ3hEUVVGbUxFTkJRVlk3UVVGRFFTeDNRa0ZCU1N4UFFVRlBMRXRCUVVzc1QwRkJUQ3hEUVVGaExFZEJRV0lzVFVGQmMwSXNVMEZCTjBJc1NVRkJNRU1zUzBGQlN5eFZRVUZNTEVOQlFXZENMRWRCUVdoQ0xFMUJRWGxDTEZOQlFYWkZMRVZCUVd0R08wRkJRemxGTERaQ1FVRkxMRlZCUVV3c1EwRkJaMElzUjBGQmFFSXNTVUZCZFVJc1IwRkJka0k3UVVGRFNEdEJRVU5LTzBGQlEwbzdRVUZEU2p0QlFVTktPMEZCUTBvc1EwRXhRa1E3UVVFeVFrRXNhVUpCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMRk5CUVROQ0xFZEJRWFZETEZWQlFWVXNSMEZCVml4RlFVRmxMRTFCUVdZc1JVRkJkVUk3UVVGRE1VUTdRVUZEUVN4UlFVRkpMRTlCUVU4c1IwRkJVQ3hMUVVGbExGRkJRV1lzU1VGQk1rSXNUMEZCVHl4TlFVRlFMRXRCUVd0Q0xGZEJRV3BFTEVWQlFUaEVPMEZCUXpGRUxGbEJRVWtzVVVGQlR5eEhRVUZRTEhWRVFVRlBMRWRCUVZBc1QwRkJaU3hSUVVGbUxFbEJRVEpDTEU5QlFVOHNTVUZCU1N4RlFVRllMRXRCUVd0Q0xGRkJRV3BFTEVWQlFUSkVPMEZCUTNaRUxIRkNRVUZUTEVkQlFWUTdRVUZEUVN4clFrRkJUU3hQUVVGUExFVkJRV0k3UVVGRFNDeFRRVWhFTEUxQlNVczdRVUZEUkR0QlFVTklPMEZCUTBvN1FVRkRSQ3hSUVVGSkxGRkJRVkVzWlVGQlpTeEhRVUZtTEVsQlFYTkNMRWRCUVd4RExFVkJRWFZETzBGQlEyNURPMEZCUTBFc1kwRkJUU3hsUVVGbExFZEJRV1lzUTBGQlRqdEJRVU5JTzBGQlEwUXNVMEZCU3l4UFFVRk1MRU5CUVdFc1IwRkJZaXhKUVVGdlFpeE5RVUZ3UWp0QlFVTkJMRmRCUVU4c1MwRkJTeXhWUVVGTUxFTkJRV2RDTEVkQlFXaENMRU5CUVZBN1FVRkRRU3hsUVVGWExFMUJRVmdzUlVGQmJVSXNSMEZCYmtJN1FVRkRRU3hUUVVGTExHRkJRVXdzUTBGQmJVSXNUVUZCYmtJc1JVRkJNa0lzUjBGQk0wSTdRVUZEU0N4RFFXNUNSRHM3UVVGeFFrRXNhVUpCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMRmxCUVROQ0xFZEJRVEJETEZsQlFWazdRVUZEYkVRc1VVRkJTU3hOUVVGTkxFVkJRVlk3UVVGRFFTeFRRVUZMTEVsQlFVa3NSMEZCVkN4SlFVRm5RaXhMUVVGTExFOUJRWEpDTEVWQlFUaENPMEZCUXpGQ0xGbEJRVWtzUjBGQlNpeEpRVUZYTEV0QlFVc3NUMEZCVEN4RFFVRmhMRWRCUVdJc1EwRkJXRHRCUVVOSU8wRkJRMFFzVjBGQlR5eEhRVUZRTzBGQlEwZ3NRMEZPUkRzN1FVRlJRU3hwUWtGQmFVSXNVMEZCYWtJc1EwRkJNa0lzWVVGQk0wSXNSMEZCTWtNc1ZVRkJWU3haUVVGV0xFVkJRWGRDTzBGQlF5OUVMRkZCUVVrc1QwRkJUeXhGUVVGWU8wRkJRMEVzVTBGQlN5eEpRVUZKTEVkQlFWUXNTVUZCWjBJc1MwRkJTeXhQUVVGeVFpeEZRVUU0UWp0QlFVTXhRaXhaUVVGSkxFTkJRVU1zV1VGQlJDeEpRVUZwUWl4aFFVRmhMRWxCUVdJc1EwRkJhMElzUjBGQmJFSXNRMEZCY2tJc1JVRkJOa003UVVGRGVrTXNhVUpCUVVzc1NVRkJUQ3hEUVVGVkxFZEJRVlk3UVVGRFNEdEJRVU5LTzBGQlEwUXNWMEZCVHl4SlFVRlFPMEZCUTBnc1EwRlNSRHM3UVVGVlFTeHBRa0ZCYVVJc1UwRkJha0lzUTBGQk1rSXNZMEZCTTBJc1IwRkJORU1zVlVGQlZTeFpRVUZXTEVWQlFYZENPMEZCUTJoRkxGRkJRVWtzVDBGQlR5eEZRVUZZTzBGQlEwRXNVMEZCU3l4SlFVRkpMRWRCUVZRc1NVRkJaMElzUzBGQlN5eFZRVUZ5UWl4RlFVRnBRenRCUVVNM1FpeFpRVUZKTEVOQlFVTXNXVUZCUkN4SlFVRnBRaXhoUVVGaExFbEJRV0lzUTBGQmEwSXNSMEZCYkVJc1EwRkJja0lzUlVGQk5rTTdRVUZEZWtNc2FVSkJRVXNzU1VGQlRDeERRVUZWTEVkQlFWWTdRVUZEU0R0QlFVTktPMEZCUTBRc1YwRkJUeXhKUVVGUU8wRkJRMGdzUTBGU1JEczdRVUZWUVN4cFFrRkJhVUlzVTBGQmFrSXNRMEZCTWtJc1YwRkJNMElzUjBGQmVVTXNXVUZCV1R0QlFVTnFSQ3hUUVVGTExFOUJRVXdzUjBGQlpTeEZRVUZtTzBGQlEwRXNVMEZCU3l4TFFVRk1PMEZCUTBnc1EwRklSRHRCUVVsQkxHbENRVUZwUWl4VFFVRnFRaXhEUVVFeVFpeExRVUV6UWl4SFFVRnRReXhaUVVGWk8wRkJRek5ETEZOQlFVc3NUMEZCVEN4SFFVRmxMRVZCUVdZN1FVRkRRU3hUUVVGTExGVkJRVXdzUjBGQmEwSXNSVUZCYkVJN1FVRkRRU3hUUVVGTExFMUJRVXdzUjBGQll5eEZRVUZrTzBGQlEwZ3NRMEZLUkRzN1FVRk5RU3hwUWtGQmFVSXNVMEZCYWtJc1EwRkJNa0lzVjBGQk0wSXNSMEZCZVVNc1ZVRkJWU3hKUVVGV0xFVkJRV2RDTEUxQlFXaENMRVZCUVhkQ0xHRkJRWGhDTEVWQlFYVkRMR1ZCUVhaRExFVkJRWGRFTEdWQlFYaEVMRVZCUVhsRk8wRkJRemxITEZGQlFVa3NVVUZCU2p0QlFVTkJMR0ZCUVZNc1MwRkJTeXhYUVVGTUxFTkJRV2xDTEUxQlFXcENMRU5CUVZRN1FVRkRRU3hSUVVGSkxFTkJRVU1zVFVGQlRDeEZRVUZoTzBGQlExUXNaVUZCVHl4SlFVRlFPMEZCUTBnc1MwRkdSQ3hOUVVWUExFbEJRVWtzYTBKQlFXdENMR1ZCUVhSQ0xFVkJRWFZETzBGQlF6RkRMR0ZCUVVzc1RVRkJUQ3hEUVVGWkxFbEJRVm9zUTBGQmFVSXNUVUZCYWtJN1FVRkRRU3hsUVVGUExFMUJRVkE3UVVGRFNEczdRVUZGUkN4UlFVRkpMR3RDUVVGclFpeExRVUZMTEUxQlFVd3NRMEZCV1N4TlFVRnNRenRCUVVOQkxGRkJRVWtzVjBGQlNqdEJRVUZCTEZGQlFXbENMREpDUVVFeVFpeEpRVUUxUXp0QlFVRkJMRkZCUVd0RUxITkNRVUZ6UWl4SlFVRjRSVHRCUVVOQkxGRkJRVWtzUzBGQlN5eGpRVUZNTEVsQlFYVkNMRWxCUVhaQ0xFbEJRU3RDTEZGQlFVOHNTVUZCVUN4MVJFRkJUeXhKUVVGUUxFOUJRV2RDTEZGQlFXNUVMRVZCUVRaRU8wRkJRM3BFTEcxQ1FVRlhMRU5CUVVNc1MwRkJTeXhQUVVGTUxFTkJRV0VzVFVGQmVrSTdRVUZEUVN4WlFVRkpMRXRCUVVzc1MwRkJTeXh0UWtGQlZpeERRVUZLTEVWQlFXOURPMEZCUTJoRExHZENRVUZKTEdOQlFXTXNTMEZCU3l4TFFVRkxMRzFDUVVGV0xFVkJRU3RDTEU5QlFTOUNMRU5CUVhWRExFMUJRWFpETEVOQlFXeENPMEZCUTBFc1owSkJRVWtzWjBKQlFXZENMRU5CUVVNc1EwRkJja0lzUlVGQmQwSTdRVUZEY0VJc2NVSkJRVXNzVFVGQlRDeEhRVUZqTEV0QlFVc3NUVUZCVEN4RFFVRlpMRTFCUVZvc1EwRkJiVUlzUzBGQlN5eExRVUZMTEcxQ1FVRldMRVZCUVN0Q0xGZEJRUzlDTEVOQlFXNUNMRU5CUVdRN1FVRkRRU3gxUWtGQlR5eEpRVUZRTzBGQlEwZzdRVUZEU2p0QlFVTkVMRmxCUVVrc2QwSkJRV2RDTEVsQlFXaENMRU5CUVVvc1JVRkJNa0k3UVVGRGRrSXNNRUpCUVdNc1MwRkJTeXhoUVVGTUxFTkJRVzFDTEU5QlFXNUNMRU5CUVRKQ0xFbEJRVE5DTEVOQlFXUTdRVUZEUVN4blFrRkJTU3huUWtGQlowSXNRMEZCUXl4RFFVRnlRaXhGUVVGM1FqdEJRVU53UWl4dlFrRkJTU3h2UWtGQmIwSXNTMEZCU3l4dlFrRkJUQ3hEUVVFd1FpeFhRVUV4UWl4RlFVRjFReXhQUVVGMlF5eERRVUVyUXl4TlFVRXZReXhEUVVGNFFqdEJRVU5CTEc5Q1FVRkpMSE5DUVVGelFpeERRVUZETEVOQlFUTkNMRVZCUVRoQ08wRkJRekZDTEhsQ1FVRkxMRTFCUVV3c1IwRkJZeXhMUVVGTExFMUJRVXdzUTBGQldTeE5RVUZhTEVOQlFXMUNMRXRCUVVzc05rSkJRVXdzUTBGQmJVTXNWMEZCYmtNc1JVRkJaMFFzYVVKQlFXaEVMRU5CUVc1Q0xFTkJRV1E3UVVGRFFTd3lRa0ZCVHl4SlFVRlFPMEZCUTBnN1FVRkRTanRCUVVOS08wRkJRMFFzWVVGQlN5eFBRVUZNTEVOQlFXRXNTVUZCWWl4RFFVRnJRaXhKUVVGc1FqdEJRVU5CTEZsQlFVa3NkMEpCUVdkQ0xFbEJRV2hDTEVOQlFVb3NSVUZCTWtJN1FVRkRka0lzWjBKQlFVa3NaMEpCUVdkQ0xFTkJRVU1zUTBGQmNrSXNSVUZCZDBJN1FVRkRjRUlzT0VKQlFXTXNTMEZCU3l4aFFVRk1MRU5CUVcxQ0xFMUJRV3BETzBGQlEwRXNjVUpCUVVzc1lVRkJUQ3hEUVVGdFFpeEpRVUZ1UWl4RFFVRjNRaXhKUVVGNFFqdEJRVU5CTEhGQ1FVRkxMRzlDUVVGTUxFTkJRVEJDTEVsQlFURkNMRU5CUVN0Q0xFVkJRUzlDTzBGQlEwZzdRVUZEUkN4MVEwRkJNa0lzUzBGQlN5eHZRa0ZCVEN4RFFVRXdRaXhYUVVFeFFpeEZRVUYxUXl4TlFVRnNSVHRCUVVOQkxHbENRVUZMTEc5Q1FVRk1MRU5CUVRCQ0xGZEJRVEZDTEVWQlFYVkRMSGRDUVVGMlF5eEpRVUZ0UlN4TlFVRnVSVHRCUVVOQkxHbENRVUZMTERaQ1FVRk1MRU5CUVcxRExGZEJRVzVETEVWQlFXZEVMSGRDUVVGb1JDeEpRVUUwUlN4RlFVRTFSVHRCUVVOSUxGTkJWRVFzVFVGVFR6dEJRVU5JTEdkQ1FVRkpMRU5CUVVNc1MwRkJTeXhMUVVGTExHMUNRVUZXTEVOQlFVd3NSVUZCY1VNN1FVRkRha01zYjBKQlFVazdRVUZEUVN4clJFRkJjMElzU1VGQmRFSXNSVUZCTkVJc1MwRkJTeXh0UWtGQmFrTXNSVUZCYzBRN1FVRkRiRVFzSzBKQlFVOHNSVUZFTWtNN1FVRkZiRVFzYzBOQlFXTTdRVUZHYjBNc2NVSkJRWFJFTzBGQlNVRXNhMFJCUVhOQ0xFbEJRWFJDTEVWQlFUUkNMRXRCUVVzc2JVSkJRV3BETEVWQlFYTkVPMEZCUTJ4RUxDdENRVUZQTEVWQlJESkRPMEZCUld4RUxITkRRVUZqTzBGQlJtOURMSEZDUVVGMFJEdEJRVWxJTEdsQ1FWUkVMRU5CVTBVc1QwRkJUeXhEUVVGUUxFVkJRVlU3UVVGRFVqdEJRVU5CTEhsQ1FVRkxMRXRCUVVzc2JVSkJRVllzU1VGQmFVTXNSVUZCYWtNN1FVRkRRU3g1UWtGQlN5eExRVUZMTEcxQ1FVRldMRWxCUVdsRExFVkJRV3BETzBGQlEwZzdRVUZEU2p0QlFVTkVMR3REUVVGelFpeExRVUZMTEV0QlFVc3NiVUpCUVZZc1JVRkJLMElzVFVGQmNrUTdRVUZEUVN4cFFrRkJTeXhMUVVGTExHMUNRVUZXTEVWQlFTdENMRzFDUVVFdlFpeEpRVUZ6UkN4TlFVRjBSRHRCUVVOQkxHbENRVUZMTEV0QlFVc3NiVUpCUVZZc1JVRkJLMElzYlVKQlFTOUNMRWxCUVhORUxFVkJRWFJFTzBGQlEwZzdRVUZEU2pzN1FVRkZSQ3hSUVVGSkxHRkJRV0VzUzBGQlN5eE5RVUZNTEVOQlFWa3NUVUZCTjBJN1FVRkRRU3hSUVVGSkxGRkJRVkVzUzBGQlN5eGhRVUZNTEVOQlFXMUNMRWxCUVc1Q0xFVkJRWGxDTEUxQlFYcENMRVZCUVdsRExHVkJRV3BETEV0QlEwd3NTMEZCU3l4bFFVRk1MRU5CUVhGQ0xFbEJRWEpDTEVWQlFUSkNMRTFCUVROQ0xFVkJRVzFETEdWQlFXNURMRU5CUkVzc1NVRkZUQ3hMUVVGTExHTkJRVXdzUTBGQmIwSXNTVUZCY0VJc1JVRkJNRUlzVFVGQk1VSXNSVUZCYTBNc1pVRkJiRU1zUTBGR1N5eEpRVWRNTEV0QlFVc3NZVUZCVEN4RFFVRnRRaXhKUVVGdVFpeEZRVUY1UWl4TlFVRjZRaXhGUVVGcFF5eGxRVUZxUXl4RFFVaExMRWxCU1V3c1MwRkJTeXhqUVVGTUxFTkJRVzlDTEVsQlFYQkNMRVZCUVRCQ0xFMUJRVEZDTEVWQlFXdERMR1ZCUVd4RExFTkJTa3NzU1VGTFRDeExRVUZMTEc5Q1FVRk1MRU5CUVRCQ0xFbEJRVEZDTEVWQlFXZERMRTFCUVdoRExFVkJRWGRETEdWQlFYaERMRU5CVEVzc1NVRk5UQ3hMUVVGTExHdENRVUZNTEVOQlFYZENMRWxCUVhoQ0xFVkJRVGhDTEUxQlFUbENMRVZCUVhORExHVkJRWFJETEVOQlRrc3NTVUZQVEN4TFFVRkxMR05CUVV3c1EwRkJiMElzU1VGQmNFSXNSVUZCTUVJc1RVRkJNVUlzUlVGQmEwTXNaVUZCYkVNc1EwRlFTeXhKUVZGTUxFdEJRVXNzZFVKQlFVd3NRMEZCTmtJc1NVRkJOMElzUlVGQmJVTXNUVUZCYmtNc1JVRkJNa01zWlVGQk0wTXNRMEZTU3l4SlFWTk1MRWxCVkZBN08wRkJWMEVzVVVGQlNTeFJRVUZLTEVWQlFXTTdRVUZEVml4bFFVRlBMRXRCUVVzc1QwRkJUQ3hEUVVGaExFMUJRWEJDTEVWQlFUUkNPMEZCUTNoQ0xHZENRVUZKTEU5QlFVOHNTMEZCU3l4UFFVRk1MRU5CUVdFc1IwRkJZaXhGUVVGWU8wRkJRMEVzYlVKQlFVOHNTMEZCU3l4TFFVRkxMRzFDUVVGV0xFTkJRVkE3UVVGRFNEdEJRVU5FTEdGQlFVc3NZVUZCVEN4SFFVRnhRaXhGUVVGeVFqdEJRVU5CTEdGQlFVc3NiMEpCUVV3c1IwRkJORUlzUlVGQk5VSTdRVUZEU0RzN1FVRkZSQ3hSUVVGSkxGTkJRVk1zWlVGQlpTeExRVUZMTEUxQlFVd3NRMEZCV1N4TlFVRjRReXhGUVVGblJEdEJRVU0xUXl4bFFVRlJMR2xDUVVGcFFpeGpRVUZqTEUxQlFXaERMRWxCUVRSRExHMUNRVUZ0UWl4blFrRkJaMElzVFVGQmRFWXNSVUZCSzBZN1FVRkRNMFlzWjBKQlFVa3NWMEZCV1N4cFFrRkJhVUlzWTBGQll5eE5RVUZvUXl4SFFVRXdReXhMUVVGTExHTkJRV01zUjBGQlpDeEZRVUV2UXl4SFFVRnhSU3hKUVVGd1JqdEJRVU5CTEdkQ1FVRkpMR0ZCUVdNc2JVSkJRVzFDTEdkQ1FVRm5RaXhOUVVGd1F5eEhRVUU0UXl4TFFVRkxMR2RDUVVGblFpeEhRVUZvUWl4RlFVRnVSQ3hIUVVFeVJTeEpRVUUxUmp0QlFVTkJMR2RDUVVGSkxFdEJRVW9zUlVGQlZ6dEJRVU5RTEhkQ1FVRlJMRTFCUVUwc1ZVRkJUaXhEUVVGcFFpeFJRVUZxUWl4RlFVRXlRaXhWUVVFelFpeERRVUZTTzBGQlEwZzdRVUZEUkN4cFFrRkJTeXhaUVVGTUxFTkJRV3RDTEZWQlFXeENMRVZCUVRoQ0xGRkJRVGxDTEVWQlFYZERMRlZCUVhoRE8wRkJRMGc3UVVGRFNqczdRVUZGUkN4UlFVRkpMRFpDUVVFMlFpeEpRVUZxUXl4RlFVRjFRenRCUVVOdVF5eGhRVUZMTERaQ1FVRk1MRU5CUVcxRExGZEJRVzVETEVWQlFXZEVMSGRDUVVGb1JDeEpRVUUwUlN4TFFVRkxMRTFCUVV3c1EwRkJXU3hMUVVGYUxFTkJRV3RDTEdWQlFXeENMRU5CUVRWRk8wRkJRMGdzUzBGR1JDeE5RVVZQTEVsQlFVa3NkMEpCUVhkQ0xFbEJRVFZDTEVWQlFXdERPMEZCUTNKRExHRkJRVXNzUzBGQlN5eHRRa0ZCVml4RlFVRXJRaXh0UWtGQkwwSXNTVUZCYzBRc1MwRkJTeXhOUVVGTUxFTkJRVmtzUzBGQldpeERRVUZyUWl4bFFVRnNRaXhEUVVGMFJEdEJRVU5JT3p0QlFVVkVMRmRCUVU4c1MwRkJTeXhYUVVGTUxFTkJRV2xDTEV0QlFXcENMRU5CUVZBN1FVRkRTQ3hEUVhaSFJEdEJRWGRIUVN4cFFrRkJhVUlzVTBGQmFrSXNRMEZCTWtJc1kwRkJNMElzUjBGQk5FTXNWVUZCVlN4SlFVRldMRVZCUVdkQ0xFMUJRV2hDTEVWQlFYZENPMEZCUTJoRkxGRkJRVWtzVDBGQlR5eFBRVUZQTEUxQlFXUXNTMEZCZVVJc1VVRkJla0lzU1VGQmNVTXNRMEZCUXl4TFFVRkxMR2RDUVVGTUxFTkJRWE5DTEU5QlFVOHNUVUZCTjBJc1EwRkJNVU1zUlVGQlowWTdRVUZETlVVc1pVRkJUeXhKUVVGUU8wRkJRMGc3UVVGRFJDeFJRVUZKTEdWQlFXVXNTMEZCU3l4blFrRkJUQ3hEUVVGelFpeFBRVUZQTEUxQlFUZENMRVZCUVhGRExFbEJRWEpETEVOQlFUQkRMRWxCUVRGRExFVkJRV2RFTEVsQlFXaEVMRVZCUVhORUxFMUJRWFJFTEVOQlFXNUNPMEZCUTBFc1VVRkJTU3hQUVVGUExGbEJRVkFzUzBGQmQwSXNVVUZCZUVJc1NVRkJiME1zVDBGQlR5eFpRVUZRTEV0QlFYZENMRkZCUVdoRkxFVkJRVEJGTzBGQlEzUkZMR1ZCUVU4c1MwRkJTeXhYUVVGTUxFTkJRV2xDTEZkQlFWY3NZVUZCTlVJc1JVRkJNa01zUlVGQlF5eFRRVUZUTEZsQlFWWXNSVUZCTTBNc1JVRkJiMFVzUlVGQmNFVXNSVUZCZDBVc1UwRkJlRVVzUlVGQmJVWXNTVUZCYmtZc1JVRkJlVVlzU1VGQmVrWXNSVUZCSzBZc1RVRkJMMFlzUTBGQlVEdEJRVU5JTEV0QlJrUXNUVUZGVHl4SlFVRkpMR2RDUVVGblFpeFJRVUZQTEZsQlFWQXNkVVJCUVU4c1dVRkJVQ3hQUVVGM1FpeFJRVUUxUXl4RlFVRnpSRHRCUVVONlJDeGxRVUZQTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhYUVVGWExHRkJRVFZDTEVWQlFUSkRMRVZCUVVNc1UwRkJVeXhoUVVGaExFOUJRV0lzU1VGQmQwSXNSMEZCYkVNc1JVRkJNME1zUlVGQmJVWXNZVUZCWVN4UlFVRmlMRWxCUVhsQ0xFVkJRVFZITEVWQlFXZElMR0ZCUVdFc1ZVRkJZaXhKUVVFeVFpeFRRVUV6U1N4RlFVRnpTaXhKUVVGMFNpeEZRVUUwU2l4SlFVRTFTaXhGUVVGclN5eE5RVUZzU3l4RFFVRlFPMEZCUTBnN1FVRkRSQ3hYUVVGUExFbEJRVkE3UVVGRFNDeERRVmhFTzBGQldVRXNhVUpCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMSFZDUVVFelFpeEhRVUZ4UkN4VlFVRlZMRWxCUVZZc1JVRkJaMElzVFVGQmFFSXNSVUZCZDBJc1pVRkJlRUlzUlVGQmVVTTdRVUZETVVZc1UwRkJTeXhKUVVGSkxFZEJRVlFzU1VGQlowSXNTMEZCU3l4bFFVRnlRaXhGUVVGelF6dEJRVU5zUXl4WlFVRkpMRTlCUVU4c1QwRkJUeXhIUVVGUUxFTkJRVkFzUzBGQmRVSXNWMEZCTTBJc1JVRkJkME03UVVGRGNFTTdRVUZEU0R0QlFVTkVMRmxCUVVrc2MwSkJRWE5DTEV0QlFVc3NaVUZCVEN4RFFVRnhRaXhIUVVGeVFpeERRVUV4UWp0QlFVTkJMR0ZCUVVzc1NVRkJTU3hKUVVGSkxFTkJRV0lzUlVGQlowSXNTVUZCU1N4dlFrRkJiMElzVFVGQmVFTXNSVUZCWjBRc1IwRkJhRVFzUlVGQmNVUTdRVUZEYWtRc1owSkJRVWtzVDBGQlR5eHZRa0ZCYjBJc1EwRkJjRUlzUTBGQldEdEJRVU5CTEdkQ1FVRkpMRk5CUVZNc1MwRkJTeXhKUVVGTUxFVkJRVmNzVDBGQlR5eEhRVUZRTEVOQlFWZ3NSVUZCZDBJc1RVRkJlRUlzUlVGQlowTXNaVUZCYUVNc1EwRkJZanRCUVVOQkxHZENRVUZKTEU5QlFVOHNUVUZCVUN4TFFVRnJRaXhSUVVGc1FpeEpRVUU0UWl4UFFVRlBMRTFCUVZBc1MwRkJhMElzVVVGQmNFUXNSVUZCT0VRN1FVRkRNVVFzZFVKQlFVOHNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xGZEJRVmNzWTBGQk5VSXNSVUZCTkVNN1FVRkRMME1zZVVKQlFVc3NSMEZFTUVNN1FVRkZMME1zTmtKQlFWTTdRVUZHYzBNc2FVSkJRVFZETEVWQlIwb3NSVUZJU1N4RlFVZEJMRVZCU0VFc1JVRkhTU3hKUVVoS0xFVkJSMVVzU1VGSVZpeEZRVWRuUWl4TlFVaG9RaXhGUVVkM1FpeFZRVWg0UWl4RFFVZHRReXhKUVVodVF5eEZRVWQ1UXl4SFFVaDZReXhEUVVGUU8wRkJTVWdzWVVGTVJDeE5RVXRQTEVsQlFVa3NWVUZCVlN4UlFVRlBMRTFCUVZBc2RVUkJRVThzVFVGQlVDeFBRVUZyUWl4UlFVRm9ReXhGUVVFd1F6dEJRVU0zUXl4dlFrRkJTU3hQUVVGUExFOUJRVThzU1VGQmJFSTdRVUZEUVN4dlFrRkJTU3hQUVVGUExFbEJRVkFzUzBGQlowSXNVVUZCY0VJc1JVRkJPRUk3UVVGRE1VSXNkMEpCUVVrc1EwRkJReXhYUVVGWExFbEJRVmdzUTBGQlRDeEZRVUYxUWp0QlFVTnVRaXc0UWtGQlRTeEpRVUZKTEV0QlFVb3NRMEZCVlN3MlEwRkJOa01zU1VGQmRrUXNRMEZCVGp0QlFVTklPMEZCUTBRc01rSkJRVThzVjBGQlZ5eEpRVUZZTEVOQlFWQTdRVUZEU0N4cFFrRk1SQ3hOUVV0UExFbEJRVWtzVDBGQlR5eEpRVUZRTEV0QlFXZENMRkZCUVhCQ0xFVkJRVGhDTzBGQlEycERMREpDUVVGUExGZEJRVmNzWTBGQmJFSTdRVUZEU0R0QlFVTkVMRzlDUVVGSkxHZENRVUZwUWl4elFrRkJUeXhQUVVGUExFOUJRV1FzVFVGQk1FSXNVVUZCTTBJc1IwRkJkVU1zVDBGQlR5eFBRVUU1UXl4SFFVRjNSRHRCUVVONFJTeDVRa0ZCU3l4SFFVUnRSVHRCUVVWNFJTdzJRa0ZCVXl4UFFVRlBMRTlCUVZBc1NVRkJhMEk3UVVGR05rTXNhVUpCUVRWRk8wRkJTVUVzYjBKQlFVa3NZVUZCWVN4UFFVRlBMRlZCUVZBc1NVRkJjMElzVFVGQlRTeEpRVUZKTEU5QlFVb3NRMEZCV1N4SlFVRmFMRVZCUVd0Q0xFbEJRV3hDTEVWQlFYZENMRTlCUVhoQ0xFTkJRV2RETEV0QlFXaERMRVZCUVhWRExFbEJRWFpETEVOQlFUZERPMEZCUTBFc2RVSkJRVThzUzBGQlN5eFhRVUZNTEVOQlFXbENMRWxCUVdwQ0xFVkJRWFZDTEdGQlFYWkNMRVZCUVhORExFOUJRVThzVVVGQlVDeEpRVUZ0UWl4SlFVRjZSQ3hGUVVFclJDeFZRVUV2UkN4RlFVRXlSU3hKUVVFelJTeEZRVUZwUml4SlFVRnFSaXhGUVVGMVJpeE5RVUYyUml4RFFVRlFPMEZCUTBnN1FVRkRTanRCUVVOS08wRkJRMFFzVjBGQlR5eEpRVUZRTzBGQlEwZ3NRMEZzUTBRN08wRkJiME5CTEZOQlFWTXNaMEpCUVZRc1EwRkJNRUlzUTBGQk1VSXNSVUZCTmtJc1EwRkJOMElzUlVGQlowTTdRVUZETlVJc1VVRkJTU3hOUVVGTkxFTkJRVllzUlVGQllUdEJRVU5VTEdWQlFVOHNTVUZCVUR0QlFVTklPMEZCUTBRc1VVRkJTU3hMUVVGTExFTkJRVXdzU1VGQlZTeFJRVUZQTEVOQlFWQXNkVVJCUVU4c1EwRkJVQ3hQUVVGaExGRkJRWFpDTEVsQlFXMURMRkZCUVU4c1EwRkJVQ3gxUkVGQlR5eERRVUZRTEU5QlFXRXNVVUZCY0VRc1JVRkJPRVE3UVVGRE1VUXNXVUZCU1N4TlFVRk5MRTlCUVU0c1EwRkJZeXhEUVVGa0xFMUJRWEZDTEUxQlFVMHNUMEZCVGl4RFFVRmpMRU5CUVdRc1EwRkJla0lzUlVGQk1rTTdRVUZEZGtNc2JVSkJRVThzUzBGQlVEdEJRVU5JTEZOQlJrUXNUVUZGVHl4SlFVRkpMRTFCUVUwc1QwRkJUaXhEUVVGakxFTkJRV1FzUTBGQlNpeEZRVUZ6UWp0QlFVTjZRaXhuUWtGQlNTeEZRVUZGTEUxQlFVWXNTMEZCWVN4RlFVRkZMRTFCUVc1Q0xFVkJRVEpDTzBGQlEzWkNMSFZDUVVGUExFdEJRVkE3UVVGRFNEdEJRVU5FTEdsQ1FVRkxMRWxCUVVrc1NVRkJTU3hEUVVGaUxFVkJRV2RDTEVsQlFVa3NSVUZCUlN4TlFVRjBRaXhGUVVFNFFpeEhRVUU1UWl4RlFVRnRRenRCUVVNdlFpeHZRa0ZCU1N4RFFVRkRMR2xDUVVGcFFpeEZRVUZGTEVOQlFVWXNRMEZCYWtJc1JVRkJkVUlzUlVGQlJTeERRVUZHTEVOQlFYWkNMRU5CUVV3c1JVRkJiVU03UVVGREwwSXNNa0pCUVU4c1MwRkJVRHRCUVVOSU8wRkJRMG83UVVGRFNpeFRRVlJOTEUxQlUwRTdRVUZEU0N4blFrRkJTU3hIUVVGS08wRkJRMEVzYVVKQlFVc3NSMEZCVEN4SlFVRlpMRU5CUVZvc1JVRkJaVHRCUVVOWUxHOUNRVUZKTEVWQlFVVXNSMEZCUml4TlFVRlhMRk5CUVZnc1NVRkJkMElzUlVGQlJTeEhRVUZHTEUxQlFWY3NVMEZCZGtNc1JVRkJhMFE3UVVGRE9VTXNNa0pCUVU4c1MwRkJVRHRCUVVOSU8wRkJRMG83UVVGRFJDeHBRa0ZCU3l4SFFVRk1MRWxCUVZrc1EwRkJXaXhGUVVGbE8wRkJRMWdzYjBKQlFVa3NSVUZCUlN4SFFVRkdMRTFCUVZjc1UwRkJXQ3hKUVVGM1FpeEZRVUZGTEVkQlFVWXNUVUZCVnl4VFFVRjJReXhGUVVGclJEdEJRVU01UXl3eVFrRkJUeXhMUVVGUU8wRkJRMGc3UVVGRFNqdEJRVU5FTEdsQ1FVRkxMRWRCUVV3c1NVRkJXU3hEUVVGYUxFVkJRV1U3UVVGRFdDeHZRa0ZCU1N4RFFVRkRMR2xDUVVGcFFpeEZRVUZGTEVkQlFVWXNRMEZCYWtJc1JVRkJlVUlzUlVGQlJTeEhRVUZHTEVOQlFYcENMRU5CUVV3c1JVRkJkVU03UVVGRGJrTXNNa0pCUVU4c1MwRkJVRHRCUVVOSU8wRkJRMG83UVVGRFNqdEJRVU5FTEdWQlFVOHNTVUZCVUR0QlFVTklPMEZCUTBRc1YwRkJUeXhMUVVGUU8wRkJRMGc3TzBGQlJVUXNhVUpCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMR0ZCUVROQ0xFZEJRVEpETEZOQlFWTXNZVUZCVkN4RFFVRjFRaXhKUVVGMlFpeEZRVUUyUWl4TlFVRTNRaXhGUVVGeFF5eGxRVUZ5UXl4RlFVRnpSRHRCUVVNM1JpeFJRVUZKTEV0QlFVbzdRVUZEUVN4UlFVRkpMRkZCUVZFc1MwRkJTeXhaUVVGTUxFTkJRV3RDTEVsQlFXeENMRVZCUVhkQ0xFMUJRWGhDTEVWQlFXZERMR1ZCUVdoRExFTkJRVm9zUlVGQk9FUTdRVUZETVVRc1pVRkJUeXhOUVVGTkxGVkJRVTRzUTBGQmFVSXNTVUZCYWtJc1JVRkJkVUlzVFVGQmRrSXNRMEZCVUR0QlFVTklPMEZCUTBRc1VVRkJTU3hSUVVGUkxFdEJRVXNzV1VGQlRDeERRVUZyUWl4SlFVRnNRaXhGUVVGM1FpeE5RVUY0UWl4RlFVRm5ReXhsUVVGb1F5eERRVUZhTEVWQlFUaEVPMEZCUXpGRUxHVkJRVThzVFVGQlRTeFZRVUZPTEVOQlFXbENMRWxCUVdwQ0xFVkJRWFZDTEUxQlFYWkNMRU5CUVZBN1FVRkRTRHRCUVVORUxGZEJRVThzU1VGQlVEdEJRVU5JTEVOQlZFUTdPMEZCVjBFc2FVSkJRV2xDTEZOQlFXcENMRU5CUVRKQ0xGbEJRVE5DTEVkQlFUQkRMRk5CUVZNc1dVRkJWQ3hEUVVGelFpeEpRVUYwUWl4RlFVRTBRaXhOUVVFMVFpeEZRVUZ2UXp0QlFVTXhSU3hSUVVGSkxFOUJRVThzU1VGQlVDeExRVUZuUWl4VFFVRndRaXhGUVVFclFqdEJRVU16UWl4bFFVRlBMRWxCUVZBN1FVRkRTRHRCUVVORUxGRkJRVWtzYTBKQlFXdENMRWxCUVd4Q0xIVkVRVUZyUWl4SlFVRnNRaXhEUVVGS08wRkJRMEVzVVVGQlNTeFRRVUZUTEVsQlFXSXNSVUZCYlVJN1FVRkRaaXh0UWtGQlZ5eE5RVUZZTzBGQlEwZ3NTMEZHUkN4TlFVVlBMRWxCUVVrc1RVRkJUU3hQUVVGT0xFTkJRV01zU1VGQlpDeERRVUZLTEVWQlFYbENPMEZCUXpWQ0xHMUNRVUZYTEU5QlFWZzdRVUZEU0R0QlFVTkVMRkZCUVVrc1pVRkJaU3hQUVVGUExFbEJRVEZDTzBGQlEwRXNVVUZCU1N4RFFVRkRMRTFCUVUwc1QwRkJUaXhEUVVGakxGbEJRV1FzUTBGQlRDeEZRVUZyUXp0QlFVTTVRaXgxUWtGQlpTeERRVUZETEZsQlFVUXNRMEZCWmp0QlFVTklPenRCUVVWRUxGTkJRVXNzU1VGQlNTeEpRVUZKTEVOQlFXSXNSVUZCWjBJc1NVRkJTU3hoUVVGaExFMUJRV3BETEVWQlFYbERMRWRCUVhwRExFVkJRVGhETzBGQlF6RkRMRmxCUVVrc1QwRkJUeXhoUVVGaExFTkJRV0lzUTBGQldEdEJRVU5CTEZsQlFVa3NVMEZCVXl4UlFVRlVMRWxCUVhOQ0xGTkJRVk1zVTBGQlZDeEpRVUZ6UWl4aFFVRmhMRkZCUVc1RExFbEJRV2RFTEU5QlFVOHNRMEZCVUN4TFFVRmhMRU5CUVhaR0xFVkJRVFJHTzBGQlEzaEdMRzFDUVVGUExFbEJRVkE3UVVGRFNEdEJRVU5LTzBGQlEwUXNWMEZCVHl4TFFVRkxMRmRCUVV3c1EwRkJhVUlzVjBGQlZ5eFpRVUUxUWl4RlFVRXdRenRCUVVNM1F5eGpRVUZOTEZGQlJIVkRPMEZCUlRkRExHdENRVUZWTEdGQlFXRXNTVUZCWWl4RFFVRnJRaXhIUVVGc1FqdEJRVVp0UXl4TFFVRXhReXhGUVVkS0xFVkJTRWtzUlVGSFFTeEZRVWhCTEVWQlIwa3NTVUZJU2l4RlFVZFZMRWxCU0ZZc1JVRkhaMElzVFVGSWFFSXNRMEZCVUR0QlFVbElMRU5CZWtKRU96dEJRVEpDUVN4cFFrRkJhVUlzVTBGQmFrSXNRMEZCTWtJc1dVRkJNMElzUjBGQk1FTXNVMEZCVXl4WlFVRlVMRU5CUVhOQ0xFbEJRWFJDTEVWQlFUUkNMRTFCUVRWQ0xFVkJRVzlETzBGQlF6RkZMRkZCUVVrc1QwRkJUeXhOUVVGUUxFMUJRVzFDTEZOQlFYWkNMRVZCUVd0RE8wRkJRemxDTEdWQlFVOHNTVUZCVUR0QlFVTklPMEZCUTBRc1UwRkJTeXhKUVVGSkxFbEJRVWtzUTBGQllpeEZRVUZuUWl4SlFVRkpMRTlCUVU4c1RVRkJVQ3hGUVVGbExFMUJRVzVETEVWQlFUSkRMRWRCUVRORExFVkJRV2RFTzBGQlF6VkRMRmxCUVVrc1ZVRkJWU3hQUVVGUExFMUJRVkFzUlVGQlpTeERRVUZtTEVOQlFXUTdRVUZEUVN4WlFVRkpMR2xDUVVGcFFpeEpRVUZxUWl4RlFVRjFRaXhQUVVGMlFpeERRVUZLTEVWQlFYRkRPMEZCUTJwRExHMUNRVUZQTEVsQlFWQTdRVUZEU0R0QlFVTktPMEZCUTBRc1YwRkJUeXhMUVVGTExGZEJRVXdzUTBGQmFVSXNWMEZCVnl4aFFVRTFRaXhGUVVFeVF5eEZRVUZETEU5QlFWRXNUMEZCVHl4SlFVRlFMRXRCUVdkQ0xGZEJRV3BDTEVkQlFXZERMSGxDUVVGbExFbEJRV1lzUTBGQmFFTXNSMEZCZFVRc1NVRkJMMFFzUlVGQk0wTXNSVUZCYVVnc1JVRkJha2dzUlVGQmNVZ3NSVUZCY2tnc1JVRkJlVWdzU1VGQmVrZ3NSVUZCSzBnc1NVRkJMMGdzUlVGQmNVa3NUVUZCY2trc1EwRkJVRHRCUVVOSUxFTkJXRVE3TzBGQllVRXNhVUpCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMR1ZCUVROQ0xFZEJRVFpETEZOQlFWTXNaVUZCVkN4RFFVRjVRaXhKUVVGNlFpeEZRVUVyUWl4TlFVRXZRaXhGUVVGMVF5eGxRVUYyUXl4RlFVRjNSRHRCUVVOcVJ5eFhRVUZQTEV0QlFVc3NhMEpCUVV3c1EwRkJkMElzU1VGQmVFSXNSVUZCT0VJc1RVRkJPVUlzUlVGQmMwTXNaVUZCZEVNc1MwRkRRU3hMUVVGTExHTkJRVXdzUTBGQmIwSXNTVUZCY0VJc1JVRkJNRUlzVFVGQk1VSXNSVUZCYTBNc1pVRkJiRU1zUTBGRVFTeEpRVVZCTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhKUVVGcVFpeEZRVUYxUWl4TlFVRjJRaXhGUVVFclFpeGxRVUV2UWl4RFFVWkJMRWxCUjBFc1NVRklVRHRCUVVsSUxFTkJURVE3TzBGQlQwRXNTVUZCU1N4dFFrRkJiVUlzUzBGQlN5eEhRVUZNTEVOQlFWTXNRMEZCVkN4RlFVRlpMRU5CUVVNc1JVRkJZaXhEUVVGMlFqdEJRVU5CTEVsQlFVa3NiMEpCUVc5Q0xFbEJRVWtzWjBKQlFUVkNPMEZCUTBFc2FVSkJRV2xDTEZOQlFXcENMRU5CUVRKQ0xHdENRVUV6UWl4SFFVRm5SQ3hUUVVGVExHdENRVUZVTEVOQlFUUkNMRWxCUVRWQ0xFVkJRV3RETEUxQlFXeERMRVZCUVRCRE8wRkJRM1JHTEZGQlFVa3NZVUZCWVN4UFFVRlBMRlZCUVZBc1NVRkJjVUlzVDBGQlR5eFhRVUUzUXp0QlFVTkJMRkZCUVVrc1pVRkJaU3hUUVVGdVFpeEZRVUU0UWp0QlFVTXhRaXhsUVVGUExFbEJRVkE3UVVGRFNEdEJRVU5FTEZGQlFVa3NUMEZCVHl4SlFVRlFMRXRCUVdkQ0xGRkJRWEJDTEVWQlFUaENPMEZCUXpGQ0xGbEJRVWtzV1VGQllTeFBRVUZQTEZWQlFWSXNSMEZCYzBJc1EwRkJkRU03UVVGRFFTeFpRVUZKTEdGQlFXRXNaMEpCUVdJc1NVRkJhVU1zV1VGQldTeHBRa0ZCYWtRc1JVRkJiMFU3UVVGRGFFVXNiVUpCUVU4c1MwRkJTeXhYUVVGTUxFTkJRV2xDTEZkQlFWY3NhMEpCUVRWQ0xFVkJRV2RFTzBGQlEyNUVMSFZDUVVGUExFbEJSRFJETzBGQlJXNUVMRFJDUVVGWk8wRkJSblZETEdGQlFXaEVMRVZCUjBvc1JVRklTU3hGUVVkQkxFVkJTRUVzUlVGSFNTeEpRVWhLTEVWQlIxVXNTVUZJVml4RlFVZG5RaXhOUVVob1FpeERRVUZRTzBGQlNVZzdRVUZEU2p0QlFVTkVMRmRCUVU4c1NVRkJVRHRCUVVOSUxFTkJaa1E3TzBGQmFVSkJMR2xDUVVGcFFpeFRRVUZxUWl4RFFVRXlRaXhqUVVFelFpeEhRVUUwUXl4VFFVRlRMR05CUVZRc1EwRkJkMElzU1VGQmVFSXNSVUZCT0VJc1RVRkJPVUlzUlVGQmMwTTdRVUZET1VVc1VVRkJTU3hQUVVGUExFbEJRVkFzUzBGQlowSXNVVUZCY0VJc1JVRkJPRUk3UVVGRE1VSXNaVUZCVHl4SlFVRlFPMEZCUTBnN1FVRkRSQ3hSUVVGSkxFOUJRVThzVDBGQlVDeExRVUZ0UWl4VFFVRjJRaXhGUVVGclF6dEJRVU01UWl4WlFVRkpMRTlCUVU4c1QwRkJUeXhQUVVGc1FpeEZRVUV5UWp0QlFVTjJRaXh0UWtGQlR5eExRVUZMTEZkQlFVd3NRMEZCYVVJc1YwRkJWeXhqUVVFMVFpeEZRVUUwUXp0QlFVTXZReXgxUWtGQlR5eEpRVVIzUXp0QlFVVXZReXg1UWtGQlV5eFBRVUZQTzBGQlJpdENMR0ZCUVRWRExFVkJSMG9zUlVGSVNTeEZRVWRCTEZWQlNFRXNSVUZIV1N4SlFVaGFMRVZCUjJ0Q0xFbEJTR3hDTEVWQlIzZENMRTFCU0hoQ0xFTkJRVkE3UVVGSlNEdEJRVU5FTEZsQlFVa3NUMEZCVHl4blFrRkJVQ3hKUVVFeVFpeFRRVUZUTEU5QlFVOHNUMEZCTDBNc1JVRkJkMFE3UVVGRGNFUXNiVUpCUVU4c1MwRkJTeXhYUVVGTUxFTkJRV2xDTEZkQlFWY3NkMEpCUVRWQ0xFVkJRWE5FTzBGQlEzcEVMSFZDUVVGUExFbEJSR3RFTzBGQlJYcEVMSGxDUVVGVExFOUJRVTg3UVVGR2VVTXNZVUZCZEVRc1JVRkhTaXhGUVVoSkxFVkJSMEVzYlVKQlNFRXNSVUZIY1VJc1NVRklja0lzUlVGSE1rSXNTVUZJTTBJc1JVRkhhVU1zVFVGSWFrTXNRMEZCVUR0QlFVbElPMEZCUTBvN1FVRkRSQ3hSUVVGSkxFOUJRVThzVDBGQlVDeExRVUZ0UWl4VFFVRjJRaXhGUVVGclF6dEJRVU01UWl4WlFVRkpMRTlCUVU4c1QwRkJUeXhQUVVGc1FpeEZRVUV5UWp0QlFVTjJRaXh0UWtGQlR5eExRVUZMTEZkQlFVd3NRMEZCYVVJc1YwRkJWeXhqUVVFMVFpeEZRVUUwUXp0QlFVTXZReXgxUWtGQlR5eEpRVVIzUXp0QlFVVXZReXg1UWtGQlV5eFBRVUZQTzBGQlJpdENMR0ZCUVRWRExFVkJSMG9zUlVGSVNTeEZRVWRCTEZWQlNFRXNSVUZIV1N4SlFVaGFMRVZCUjJ0Q0xFbEJTR3hDTEVWQlIzZENMRTFCU0hoQ0xFTkJRVkE3UVVGSlNEdEJRVU5FTEZsQlFVa3NUMEZCVHl4blFrRkJVQ3hKUVVFeVFpeFRRVUZUTEU5QlFVOHNUMEZCTDBNc1JVRkJkMFE3UVVGRGNFUXNiVUpCUVU4c1MwRkJTeXhYUVVGTUxFTkJRV2xDTEZkQlFWY3NkMEpCUVRWQ0xFVkJRWE5FTzBGQlEzcEVMSFZDUVVGUExFbEJSR3RFTzBGQlJYcEVMSGxDUVVGVExFOUJRVTg3UVVGR2VVTXNZVUZCZEVRc1JVRkhTaXhGUVVoSkxFVkJSMEVzYlVKQlNFRXNSVUZIY1VJc1NVRklja0lzUlVGSE1rSXNTVUZJTTBJc1JVRkhhVU1zVFVGSWFrTXNRMEZCVUR0QlFVbElPMEZCUTBvN1FVRkRSQ3hYUVVGUExFbEJRVkE3UVVGRFNDeERRV3BEUkRzN1FVRnRRMEVzYVVKQlFXbENMRk5CUVdwQ0xFTkJRVEpDTEZkQlFUTkNMRWRCUVhsRExGTkJRVk1zVjBGQlZDeERRVUZ4UWl4SlFVRnlRaXhGUVVFeVFpeE5RVUV6UWl4RlFVRnRRenRCUVVONFJTeFJRVUZKTEU5QlFVOHNTVUZCVUN4TFFVRm5RaXhSUVVGd1FpeEZRVUU0UWp0QlFVTXhRaXhsUVVGUExFbEJRVkE3UVVGRFNEdEJRVU5FTEZGQlFVa3NUVUZCVFN4SlFVRk9MRTFCUVdkQ0xFbEJRV2hDTEVsQlFYZENMRk5CUVZNc1VVRkJha01zU1VGQk5rTXNVMEZCVXl4RFFVRkRMRkZCUVRORUxFVkJRWEZGTzBGQlEycEZMR1ZCUVU4c1MwRkJTeXhYUVVGTUxFTkJRV2xDTEZkQlFWY3NiVUpCUVRWQ0xFVkJRV2xFTEVWQlFVTXNUMEZCVHl4SlFVRlNMRVZCUVdwRUxFVkJRV2RGTEVWQlFXaEZMRVZCUVc5RkxFOUJRWEJGTEVWQlFUWkZMRWxCUVRkRkxFVkJRVzFHTEVsQlFXNUdMRVZCUVhsR0xFMUJRWHBHTEVOQlFWQTdRVUZEU0R0QlFVTkVMRmRCUVU4c1NVRkJVRHRCUVVOSUxFTkJVa1E3TzBGQlZVRXNhVUpCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMR05CUVROQ0xFZEJRVFJETEZOQlFWTXNZMEZCVkN4RFFVRjNRaXhKUVVGNFFpeEZRVUU0UWl4TlFVRTVRaXhGUVVGelF5eGxRVUYwUXl4RlFVRjFSRHRCUVVNdlJpeFhRVUZQTEV0QlFVc3NiMEpCUVV3c1EwRkJNRUlzU1VGQk1VSXNSVUZCWjBNc1RVRkJhRU1zUlVGQmQwTXNaVUZCZUVNc1MwRkRRU3hMUVVGTExIRkNRVUZNTEVOQlFUSkNMRWxCUVROQ0xFVkJRV2xETEUxQlFXcERMRVZCUVhsRExHVkJRWHBETEVOQlJFRXNTVUZGUVN4SlFVWlFPMEZCUjBnc1EwRktSRHM3UVVGTlFTeHBRa0ZCYVVJc1UwRkJha0lzUTBGQk1rSXNiMEpCUVROQ0xFZEJRV3RFTEZOQlFWTXNiMEpCUVZRc1EwRkJPRUlzU1VGQk9VSXNSVUZCYjBNc1RVRkJjRU1zUlVGQk5FTTdRVUZETVVZc1VVRkJTU3hQUVVGUExFbEJRVkFzUzBGQlowSXNVVUZCY0VJc1JVRkJPRUk3UVVGRE1VSXNaVUZCVHl4SlFVRlFPMEZCUTBnN1FVRkRSQ3hSUVVGSkxFOUJRVThzVTBGQlVDeExRVUZ4UWl4VFFVRjZRaXhGUVVGdlF6dEJRVU5vUXl4WlFVRkpMRXRCUVVzc1RVRkJUQ3hIUVVGakxFOUJRVThzVTBGQmVrSXNSVUZCYjBNN1FVRkRhRU1zYlVKQlFVOHNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xGZEJRVmNzYlVKQlFUVkNMRVZCUVdsRU8wRkJRM0JFTEhkQ1FVRlJMRXRCUVVzc1RVRkVkVU03UVVGRmNFUXNlVUpCUVZNc1QwRkJUenRCUVVadlF5eGhRVUZxUkN4RlFVZEtMRVZCU0Vrc1JVRkhRU3haUVVoQkxFVkJSMk1zU1VGSVpDeEZRVWR2UWl4SlFVaHdRaXhGUVVjd1FpeE5RVWd4UWl4RFFVRlFPMEZCU1VnN1FVRkRTanRCUVVORUxGRkJRVWtzVDBGQlR5eFRRVUZRTEV0QlFYRkNMRk5CUVhwQ0xFVkJRVzlETzBGQlEyaERMRmxCUVVrc1MwRkJTeXhOUVVGTUxFZEJRV01zVDBGQlR5eFRRVUY2UWl4RlFVRnZRenRCUVVOb1F5eHRRa0ZCVHl4TFFVRkxMRmRCUVV3c1EwRkJhVUlzVjBGQlZ5eHJRa0ZCTlVJc1JVRkJaMFE3UVVGRGJrUXNkMEpCUVZFc1MwRkJTeXhOUVVSelF6dEJRVVZ1UkN4NVFrRkJVeXhQUVVGUE8wRkJSbTFETEdGQlFXaEVMRVZCUjBvc1JVRklTU3hGUVVkQkxGbEJTRUVzUlVGSFl5eEpRVWhrTEVWQlIyOUNMRWxCU0hCQ0xFVkJSekJDTEUxQlNERkNMRU5CUVZBN1FVRkpTRHRCUVVOS08wRkJRMFFzVjBGQlR5eEpRVUZRTzBGQlEwZ3NRMEZ5UWtRN08wRkJkVUpCTEdsQ1FVRnBRaXhUUVVGcVFpeERRVUV5UWl4eFFrRkJNMElzUjBGQmJVUXNVMEZCVXl4eFFrRkJWQ3hEUVVFclFpeEpRVUV2UWl4RlFVRnhReXhOUVVGeVF5eEZRVUUyUXp0QlFVTTFSaXhSUVVGSkxFOUJRVThzU1VGQlVDeExRVUZuUWl4UlFVRm9RaXhKUVVFMlFpeFBRVUZQTEU5QlFVOHNUMEZCWkN4TFFVRXdRaXhSUVVFeFFpeEpRVUZ6UXl4RlFVRkZMRTlCUVU4c1QwRkJVQ3haUVVFd1FpeE5RVUUxUWl4RFFVRjJSU3hGUVVFMlJ6dEJRVU42Unl4bFFVRlBMRWxCUVZBN1FVRkRTRHRCUVVORUxGRkJRVWtzVFVGQlNqdEJRVU5CTEZGQlFVa3NUMEZCVHl4UFFVRlFMRmxCUVRCQ0xFMUJRVGxDTEVWQlFYTkRPMEZCUTJ4RExHbENRVUZUTEU5QlFVOHNUMEZCYUVJN1FVRkRTQ3hMUVVaRUxFMUJSMHM3UVVGRFJDeFpRVUZKTEVsQlFVbzdRVUZCUVN4WlFVRlZMRkZCUVZFc1JVRkJiRUk3UVVGRFFUdEJRVU5CTzBGQlEwRXNXVUZCU1N4VlFVRlZMRTlCUVU4c1QwRkJVQ3hEUVVGbExFdEJRV1lzUTBGQmNVSXNiMEpCUVhKQ0xFTkJRV1E3UVVGRFFTeFpRVUZKTEU5QlFVb3NSVUZCWVR0QlFVTlVMRzFDUVVGUExGRkJRVkVzUTBGQlVpeERRVUZRTzBGQlEwRXNiMEpCUVZFc1VVRkJVU3hEUVVGU0xFTkJRVkk3UVVGRFNDeFRRVWhFTEUxQlNVczdRVUZEUkN4dFFrRkJUeXhQUVVGUExFOUJRV1E3UVVGRFNEdEJRVU5FTEdsQ1FVRlRMRWxCUVVrc1RVRkJTaXhEUVVGWExFbEJRVmdzUlVGQmFVSXNTMEZCYWtJc1EwRkJWRHRCUVVOSU8wRkJRMFFzVVVGQlNTeERRVUZETEU5QlFVOHNTVUZCVUN4RFFVRlpMRWxCUVZvc1EwRkJUQ3hGUVVGM1FqdEJRVU53UWl4bFFVRlBMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeFhRVUZYTEdOQlFUVkNMRVZCUVRSRExFVkJRVU1zVTBGQlV5eFBRVUZQTEU5QlFXcENMRVZCUVRWRExFVkJRWFZGTEVWQlFYWkZMRVZCUVRKRkxGVkJRVE5GTEVWQlFYVkdMRWxCUVhaR0xFVkJRVFpHTEVsQlFUZEdMRVZCUVcxSExFMUJRVzVITEVOQlFWQTdRVUZEU0R0QlFVTkVMRmRCUVU4c1NVRkJVRHRCUVVOSUxFTkJNVUpFT3p0QlFUUkNRU3hwUWtGQmFVSXNVMEZCYWtJc1EwRkJNa0lzWVVGQk0wSXNSMEZCTWtNc1UwRkJVeXhoUVVGVUxFTkJRWFZDTEVsQlFYWkNMRVZCUVRaQ0xFMUJRVGRDTEVWQlFYRkRMR1ZCUVhKRExFVkJRWE5FTzBGQlF6ZEdMRkZCUVVrc1EwRkJReXhOUVVGTkxFOUJRVTRzUTBGQll5eEpRVUZrTEVOQlFVd3NSVUZCTUVJN1FVRkRkRUlzWlVGQlR5eEpRVUZRTzBGQlEwZzdRVUZEUkN4WFFVRlBMRXRCUVVzc2JVSkJRVXdzUTBGQmVVSXNTVUZCZWtJc1JVRkJLMElzVFVGQkwwSXNSVUZCZFVNc1pVRkJka01zUzBGRFFTeExRVUZMTEhkQ1FVRk1MRU5CUVRoQ0xFbEJRVGxDTEVWQlFXOURMRTFCUVhCRExFVkJRVFJETEdWQlFUVkRMRU5CUkVFc1NVRkZRU3hMUVVGTExHdENRVUZNTEVOQlFYZENMRWxCUVhoQ0xFVkJRVGhDTEUxQlFUbENMRVZCUVhORExHVkJRWFJETEVOQlJrRXNTVUZIUVN4SlFVaFFPMEZCU1Vnc1EwRlNSRHM3UVVGVlFTeHBRa0ZCYVVJc1UwRkJha0lzUTBGQk1rSXNiVUpCUVROQ0xFZEJRV2xFTEZOQlFWTXNiVUpCUVZRc1EwRkJOa0lzU1VGQk4wSXNSVUZCYlVNc1RVRkJia01zUlVGQk1rTTdRVUZEZUVZc1VVRkJTU3hMUVVGS08wRkJRMEVzVVVGQlNTeFBRVUZQTEZGQlFWQXNTMEZCYjBJc1UwRkJlRUlzUlVGQmJVTTdRVUZETDBJc1dVRkJTU3hMUVVGTExFMUJRVXdzUjBGQll5eFBRVUZQTEZGQlFYcENMRVZCUVcxRE8wRkJReTlDTEc5Q1FVRlJMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeFhRVUZYTEd0Q1FVRTFRaXhGUVVGblJEdEJRVU53UkN4M1FrRkJVU3hMUVVGTExFMUJSSFZETzBGQlJYQkVMSGxDUVVGVExFOUJRVTg3UVVGR2IwTXNZVUZCYUVRc1JVRkhUQ3hGUVVoTExFVkJSMFFzVjBGSVF5eEZRVWRaTEVsQlNGb3NSVUZIYTBJc1NVRkliRUlzUlVGSGQwSXNUVUZJZUVJc1EwRkJVanRCUVVsQkxHZENRVUZKTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhMUVVGcVFpeERRVUZLTEVWQlFUWkNPMEZCUTNwQ0xIVkNRVUZQTEV0QlFWQTdRVUZEU0R0QlFVTktPMEZCUTBvN1FVRkRSQ3hSUVVGSkxFOUJRVThzVVVGQlVDeExRVUZ2UWl4VFFVRjRRaXhGUVVGdFF6dEJRVU12UWl4WlFVRkpMRXRCUVVzc1RVRkJUQ3hIUVVGakxFOUJRVThzVVVGQmVrSXNSVUZCYlVNN1FVRkRMMElzYjBKQlFWRXNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xGZEJRVmNzYVVKQlFUVkNMRVZCUVN0RE8wRkJRMjVFTEhkQ1FVRlJMRXRCUVVzc1RVRkVjME03UVVGRmJrUXNlVUpCUVZNc1QwRkJUenRCUVVadFF5eGhRVUV2UXl4RlFVZE1MRVZCU0Vzc1JVRkhSQ3hYUVVoRExFVkJSMWtzU1VGSVdpeEZRVWRyUWl4SlFVaHNRaXhGUVVkM1FpeE5RVWg0UWl4RFFVRlNPMEZCU1VFc1owSkJRVWtzUzBGQlN5eFhRVUZNTEVOQlFXbENMRXRCUVdwQ0xFTkJRVW9zUlVGQk5rSTdRVUZEZWtJc2RVSkJRVThzUzBGQlVEdEJRVU5JTzBGQlEwbzdRVUZEU2p0QlFVTkVMRmRCUVU4c1NVRkJVRHRCUVVOSUxFTkJla0pFT3p0QlFUSkNRU3hwUWtGQmFVSXNVMEZCYWtJc1EwRkJNa0lzZDBKQlFUTkNMRWRCUVhORUxGTkJRVk1zZDBKQlFWUXNRMEZCYTBNc1NVRkJiRU1zUlVGQmQwTXNUVUZCZUVNc1JVRkJaMFE3UVVGRGJFY3NVVUZCU1N4UFFVRlBMRmRCUVZnc1JVRkJkMEk3UVVGRGNFSXNZVUZCU3l4SlFVRkpMRWxCUVVrc1EwRkJZaXhGUVVGblFpeEpRVUZKTEV0QlFVc3NUVUZCZWtJc1JVRkJhVU1zUjBGQmFrTXNSVUZCYzBNN1FVRkRiRU1zYVVKQlFVc3NTVUZCU1N4SlFVRkpMRWxCUVVrc1EwRkJha0lzUlVGQmIwSXNTVUZCU1N4TFFVRkxMRTFCUVRkQ0xFVkJRWEZETEVkQlFYSkRMRVZCUVRCRE8wRkJRM1JETEc5Q1FVRkpMR2xDUVVGcFFpeExRVUZMTEVOQlFVd3NRMEZCYWtJc1JVRkJNRUlzUzBGQlN5eERRVUZNTEVOQlFURkNMRU5CUVVvc1JVRkJkME03UVVGRGNFTXNkMEpCUVVrc1VVRkJVU3hMUVVGTExGZEJRVXdzUTBGQmFVSXNWMEZCVnl4WlFVRTFRaXhGUVVFd1F6dEJRVU5zUkN4blEwRkJVU3hEUVVRd1F6dEJRVVZzUkN4blEwRkJVVHRCUVVZd1F5eHhRa0ZCTVVNc1JVRkhWQ3hGUVVoVExFVkJSMHdzWTBGSVN5eEZRVWRYTEVsQlNGZ3NSVUZIYVVJc1NVRklha0lzUlVGSGRVSXNUVUZJZGtJc1EwRkJXanRCUVVsQkxIZENRVUZKTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhMUVVGcVFpeERRVUZLTEVWQlFUWkNPMEZCUTNwQ0xDdENRVUZQTEV0QlFWQTdRVUZEU0R0QlFVTktPMEZCUTBvN1FVRkRTanRCUVVOS08wRkJRMFFzVjBGQlR5eEpRVUZRTzBGQlEwZ3NRMEZxUWtRN08wRkJiVUpCTEdsQ1FVRnBRaXhUUVVGcVFpeERRVUV5UWl4clFrRkJNMElzUjBGQlowUXNVMEZCVXl4clFrRkJWQ3hEUVVFMFFpeEpRVUUxUWl4RlFVRnJReXhOUVVGc1F5eEZRVUV3UXl4bFFVRXhReXhGUVVFeVJEdEJRVU4yUnl4UlFVRkpMRTlCUVU4c1MwRkJVQ3hMUVVGcFFpeFRRVUZ5UWl4RlFVRm5RenRCUVVNMVFpeGxRVUZQTEVsQlFWQTdRVUZEU0R0QlFVTkVMRkZCUVVrc1MwRkJTaXhGUVVGWExFTkJRVmc3UVVGRFFTeFJRVUZKTEUxQlFVMHNUMEZCVGl4RFFVRmpMRTlCUVU4c1MwRkJja0lzUTBGQlNpeEZRVUZwUXp0QlFVTTNRaXhoUVVGTExFbEJRVWtzUTBGQlZDeEZRVUZaTEVsQlFVa3NTMEZCU3l4TlFVRnlRaXhGUVVFMlFpeEhRVUUzUWl4RlFVRnJRenRCUVVNNVFpeG5Ra0ZCU1N4SlFVRkpMRTlCUVU4c1MwRkJVQ3hEUVVGaExFMUJRWEpDTEVWQlFUWkNPMEZCUTNwQ0xHOUNRVUZKTEZGQlFWRXNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xFdEJRVXNzUTBGQlRDeERRVUZxUWl4RlFVRXdRaXhQUVVGUExFdEJRVkFzUTBGQllTeERRVUZpTEVOQlFURkNMRVZCUVRKRExFTkJRVU1zUTBGQlJDeERRVUV6UXl4RlFVRm5SQ3hEUVVGRExFOUJRVVFzUlVGQlZTeERRVUZXTEVOQlFXaEVMRVZCUVRoRUxHdENRVUZyUWl4SFFVRnNRaXhIUVVGM1FpeERRVUYwUml4RFFVRmFMRVZCUVhOSE8wRkJRMnhITERKQ1FVRlBMRXRCUVZBN1FVRkRTRHRCUVVOS0xHRkJTa1FzVFVGSlR5eEpRVUZKTEU5QlFVOHNaVUZCVUN4TFFVRXlRaXhUUVVFdlFpeEZRVUV3UXp0QlFVTTNReXh2UWtGQlNTeFBRVUZQTEU5QlFVOHNaVUZCWkN4TFFVRnJReXhUUVVGMFF5eEZRVUZwUkR0QlFVTTNReXgzUWtGQlNTeERRVUZETEU5QlFVOHNaVUZCV2l4RlFVRTJRanRCUVVONlFpeG5RMEZCVXl4TFFVRkxMRmRCUVV3c1EwRkJhVUlzVjBGQlZ5eHpRa0ZCTlVJc1JVRkJiMFFzUlVGQmNFUXNSVUZCZDBRc1RVRkJUU3hEUVVFNVJDeEZRVUZwUlN4clFrRkJha1VzUlVGQmNVWXNTVUZCY2tZc1JVRkJNa1lzU1VGQk0wWXNSVUZCYVVjc1RVRkJha2NzUTBGQlZEdEJRVU5CTERSQ1FVRkpMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeExRVUZxUWl4RFFVRktMRVZCUVRaQ08wRkJRM3BDTEcxRFFVRlBMRXRCUVZBN1FVRkRTRHRCUVVOS08wRkJRMG9zYVVKQlVFUXNUVUZQVHl4SlFVRkpMRkZCUVZFc1MwRkJTeXhYUVVGTUxFTkJRV2xDTEV0QlFVc3NRMEZCVEN4RFFVRnFRaXhGUVVFd1FpeFBRVUZQTEdWQlFXcERMRVZCUVd0RUxFTkJRVU1zUTBGQlJDeERRVUZzUkN4RlFVRjFSQ3hEUVVGRExHbENRVUZFTEVOQlFYWkVMRVZCUVRSRkxHdENRVUZyUWl4SFFVRnNRaXhIUVVGM1FpeERRVUZ3Unl4RFFVRmFMRVZCUVc5SU8wRkJRM1pJTERKQ1FVRlBMRXRCUVZBN1FVRkRTRHRCUVVOS08wRkJRMG83UVVGRFNpeExRVzVDUkN4TlFXMUNUenRCUVVOSUxHRkJRVXNzU1VGQlNTeERRVUZVTEVWQlFWa3NTVUZCU1N4TFFVRkxMRTFCUVhKQ0xFVkJRVFpDTEVkQlFUZENMRVZCUVd0RE8wRkJRemxDTEdkQ1FVRkpMRkZCUVZFc1MwRkJTeXhYUVVGTUxFTkJRV2xDTEV0QlFVc3NRMEZCVEN4RFFVRnFRaXhGUVVFd1FpeFBRVUZQTEV0QlFXcERMRVZCUVhkRExFTkJRVU1zUTBGQlJDeERRVUY0UXl4RlFVRTJReXhEUVVGRExFOUJRVVFzUTBGQk4wTXNSVUZCZDBRc2EwSkJRV3RDTEVkQlFXeENMRWRCUVhkQ0xFTkJRV2hHTEVOQlFWb3NSVUZCWjBjN1FVRkROVVlzZFVKQlFVOHNTMEZCVUR0QlFVTklPMEZCUTBvN1FVRkRTanRCUVVORUxGZEJRVThzU1VGQlVEdEJRVU5JTEVOQmFFTkVPenRCUVd0RFFTeHBRa0ZCYVVJc1UwRkJha0lzUTBGQk1rSXNZMEZCTTBJc1IwRkJORU1zVTBGQlV5eGpRVUZVTEVOQlFYZENMRWxCUVhoQ0xFVkJRVGhDTEUxQlFUbENMRVZCUVhORExHVkJRWFJETEVWQlFYVkVPMEZCUXk5R0xGRkJRVWtzVVVGQlR5eEpRVUZRTEhWRVFVRlBMRWxCUVZBc1QwRkJaMElzVVVGQmFFSXNTVUZCTkVJc1UwRkJVeXhKUVVGeVF5eEpRVUUyUXl4TlFVRk5MRTlCUVU0c1EwRkJZeXhKUVVGa0xFTkJRV3BFTEVWQlFYTkZPMEZCUTJ4RkxHVkJRVThzU1VGQlVEdEJRVU5JTzBGQlEwUXNWMEZCVHl4TFFVRkxMRGhDUVVGTUxFTkJRVzlETEVsQlFYQkRMRVZCUVRCRExFMUJRVEZETEVWQlFXdEVMR1ZCUVd4RUxFdEJRMEVzUzBGQlN5eG5RMEZCVEN4RFFVRnpReXhKUVVGMFF5eEZRVUUwUXl4TlFVRTFReXhGUVVGdlJDeGxRVUZ3UkN4RFFVUkJMRWxCUlVFc1MwRkJTeXgzUWtGQlRDeERRVUU0UWl4SlFVRTVRaXhGUVVGdlF5eE5RVUZ3UXl4RlFVRTBReXhsUVVFMVF5eERRVVpCTEVsQlIwRXNTMEZCU3l3d1FrRkJUQ3hEUVVGblF5eEpRVUZvUXl4RlFVRnpReXhOUVVGMFF5eEZRVUU0UXl4bFFVRTVReXhEUVVoQkxFbEJTVUVzU1VGS1VEdEJRVXRJTEVOQlZFUTdPMEZCVjBFc2FVSkJRV2xDTEZOQlFXcENMRU5CUVRKQ0xEaENRVUV6UWl4SFFVRTBSQ3hUUVVGVExEaENRVUZVTEVOQlFYZERMRWxCUVhoRExFVkJRVGhETEUxQlFUbERMRVZCUVhORU8wRkJRemxITEZGQlFVa3NUMEZCVHl4dlFrRkJXU3hKUVVGYUxFTkJRVmc3UVVGRFFTeFJRVUZKTEV0QlFVbzdRVUZEUVN4UlFVRkpMRTlCUVU4c1lVRkJVQ3hMUVVGNVFpeFRRVUUzUWl4RlFVRjNRenRCUVVOd1F5eFpRVUZKTEV0QlFVc3NUVUZCVEN4SFFVRmpMRTlCUVU4c1lVRkJla0lzUlVGQmQwTTdRVUZEY0VNc2IwSkJRVkVzUzBGQlN5eFhRVUZNTEVOQlFXbENMRmRCUVZjc2VVSkJRVFZDTEVWQlFYVkVPMEZCUXpORUxDdENRVUZsTEV0QlFVc3NUVUZFZFVNN1FVRkZNMFFzZVVKQlFWTXNUMEZCVHp0QlFVWXlReXhoUVVGMlJDeEZRVWRNTEVWQlNFc3NSVUZIUkN4blFrRklReXhGUVVkcFFpeEpRVWhxUWl4RlFVZDFRaXhKUVVoMlFpeEZRVWMyUWl4TlFVZzNRaXhEUVVGU08wRkJTVUVzWjBKQlFVa3NTMEZCU3l4WFFVRk1MRU5CUVdsQ0xFdEJRV3BDTEVOQlFVb3NSVUZCTmtJN1FVRkRla0lzZFVKQlFVOHNTMEZCVUR0QlFVTklPMEZCUTBvN1FVRkRTanRCUVVORUxGRkJRVWtzVDBGQlR5eGhRVUZRTEV0QlFYbENMRk5CUVRkQ0xFVkJRWGRETzBGQlEzQkRMRmxCUVVrc1MwRkJTeXhOUVVGTUxFZEJRV01zVDBGQlR5eGhRVUY2UWl4RlFVRjNRenRCUVVOd1F5eHZRa0ZCVVN4TFFVRkxMRmRCUVV3c1EwRkJhVUlzVjBGQlZ5eDVRa0ZCTlVJc1JVRkJkVVE3UVVGRE0wUXNLMEpCUVdVc1MwRkJTeXhOUVVSMVF6dEJRVVV6UkN4NVFrRkJVeXhQUVVGUE8wRkJSakpETEdGQlFYWkVMRVZCUjB3c1JVRklTeXhGUVVkRUxHZENRVWhETEVWQlIybENMRWxCU0dwQ0xFVkJSM1ZDTEVsQlNIWkNMRVZCUnpaQ0xFMUJTRGRDTEVOQlFWSTdRVUZKUVN4blFrRkJTU3hMUVVGTExGZEJRVXdzUTBGQmFVSXNTMEZCYWtJc1EwRkJTaXhGUVVFMlFqdEJRVU42UWl4MVFrRkJUeXhMUVVGUU8wRkJRMGc3UVVGRFNqdEJRVU5LTzBGQlEwUXNWMEZCVHl4SlFVRlFPMEZCUTBnc1EwRXhRa1E3TzBGQk5FSkJMR2xDUVVGcFFpeFRRVUZxUWl4RFFVRXlRaXhuUTBGQk0wSXNSMEZCT0VRc1UwRkJVeXhuUTBGQlZDeERRVUV3UXl4SlFVRXhReXhGUVVGblJDeE5RVUZvUkN4RlFVRjNSRHRCUVVOc1NDeFJRVUZKTEU5QlFVOHNVVUZCVUN4TFFVRnZRaXhUUVVGNFFpeEZRVUZ0UXp0QlFVTXZRaXhoUVVGTExFbEJRVWtzU1VGQlNTeERRVUZpTEVWQlFXZENMRWxCUVVrc1QwRkJUeXhSUVVGUUxFTkJRV2RDTEUxQlFYQkRMRVZCUVRSRExFZEJRVFZETEVWQlFXbEVPMEZCUXpkRExHZENRVUZKTEUxQlFVMHNUMEZCVHl4UlFVRlFMRU5CUVdkQ0xFTkJRV2hDTEVOQlFWWTdRVUZEUVN4blFrRkJTU3hMUVVGTExFZEJRVXdzVFVGQll5eFRRVUZzUWl4RlFVRTJRanRCUVVONlFpeHZRa0ZCU1N4UlFVRlJMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeFhRVUZYTEdWQlFUVkNMRVZCUVRaRExFVkJRVU1zUzBGQlN5eEhRVUZPTEVWQlFUZERMRVZCUVhsRUxFVkJRWHBFTEVWQlFUWkVMR1ZCUVdVc1EwRkJOVVVzUlVGQkswVXNTVUZCTDBVc1JVRkJjVVlzU1VGQmNrWXNSVUZCTWtZc1RVRkJNMFlzUTBGQldqdEJRVU5CTEc5Q1FVRkpMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeExRVUZxUWl4RFFVRktMRVZCUVRaQ08wRkJRM3BDTERKQ1FVRlBMRXRCUVZBN1FVRkRTRHRCUVVOS08wRkJRMG83UVVGRFNqdEJRVU5FTEZkQlFVOHNTVUZCVUR0QlFVTklMRU5CWWtRN08wRkJaVUVzYVVKQlFXbENMRk5CUVdwQ0xFTkJRVEpDTEhkQ1FVRXpRaXhIUVVGelJDeFRRVUZUTEhkQ1FVRlVMRU5CUVd0RExFbEJRV3hETEVWQlFYZERMRTFCUVhoRExFVkJRV2RFTEdWQlFXaEVMRVZCUVdsRk8wRkJRMjVJTEZGQlFVa3NTMEZCU2p0QlFVTkJMRk5CUVVzc1NVRkJTU3hIUVVGVUxFbEJRV2RDTEVsQlFXaENMRVZCUVhOQ08wRkJRMnhDTEZsQlFVa3NhVUpCUVdsQ0xHdENRVUZyUWl4SFFVRnNRaXhIUVVGM1FpeEpRVUZKTEU5QlFVb3NRMEZCV1N4SlFVRmFMRVZCUVd0Q0xFbEJRV3hDTEVWQlFYZENMRTlCUVhoQ0xFTkJRV2RETEV0QlFXaERMRVZCUVhWRExFbEJRWFpETEVOQlFUZERPMEZCUTBFc1dVRkJTU3hoUVVGaExFdEJRV3BDTzBGQlEwRXNXVUZCU1N4UFFVRlBMRlZCUVZBc1MwRkJjMElzVTBGQmRFSXNTVUZCYlVNc1QwRkJUeXhWUVVGUUxFTkJRV3RDTEVkQlFXeENMRTFCUVRKQ0xGTkJRV3hGTEVWQlFUWkZPMEZCUTNwRkxIbENRVUZoTEVsQlFXSTdRVUZEUVN4blFrRkJTU3hSUVVGUkxFdEJRVXNzVjBGQlRDeERRVUZwUWl4TFFVRkxMRWRCUVV3c1EwRkJha0lzUlVGQk5FSXNUMEZCVHl4VlFVRlFMRU5CUVd0Q0xFZEJRV3hDTEVOQlFUVkNMRVZCUVc5RUxFTkJRVU1zUjBGQlJDeERRVUZ3UkN4RlFVRXlSQ3hEUVVGRExGbEJRVVFzUlVGQlpTeEhRVUZtTEVOQlFUTkVMRVZCUVdkR0xHTkJRV2hHTEVOQlFWb3NSVUZCTmtjN1FVRkRla2NzZFVKQlFVOHNTMEZCVUR0QlFVTklPMEZCUTBvN1FVRkRSQ3haUVVGSkxFOUJRVThzYVVKQlFWQXNTMEZCTmtJc1UwRkJha01zUlVGQk5FTTdRVUZEZUVNc2FVSkJRVXNzU1VGQlNTeFZRVUZVTEVsQlFYVkNMRTlCUVU4c2FVSkJRVGxDTEVWQlFXbEVPMEZCUXpkRExHOUNRVUZKTEZOQlFWTXNTVUZCU1N4TlFVRktMRU5CUVZjc1ZVRkJXQ3hEUVVGaU8wRkJRMEVzYjBKQlFVa3NUMEZCVHl4SlFVRlFMRU5CUVZrc1IwRkJXaXhEUVVGS0xFVkJRWE5DTzBGQlEyeENMR2xEUVVGaExFbEJRV0k3UVVGRFFTeDNRa0ZCU1N4UlFVRlJMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeExRVUZMTEVkQlFVd3NRMEZCYWtJc1JVRkJORUlzVDBGQlR5eHBRa0ZCVUN4RFFVRjVRaXhWUVVGNlFpeERRVUUxUWl4RlFVRnJSU3hEUVVGRExFZEJRVVFzUTBGQmJFVXNSVUZCZVVVc1EwRkJReXh0UWtGQlJDeEZRVUZ6UWl4VlFVRjBRaXhEUVVGNlJTeEZRVUUwUnl4alFVRTFSeXhEUVVGYUxFVkJRWGxKTzBGQlEzSkpMQ3RDUVVGUExFdEJRVkE3UVVGRFNEdEJRVU5LTzBGQlEwbzdRVUZEU2p0QlFVTkVMRmxCUVVrc1EwRkJReXhWUVVGTUxFVkJRV2xDTzBGQlEySXNaMEpCUVVrc1QwRkJUeXh2UWtGQlVDeExRVUZuUXl4VFFVRndReXhGUVVFclF6dEJRVU16UXl4dlFrRkJTU3hMUVVGTExITkNRVUZVTEVWQlFXbERPMEZCUXpkQ0xIbENRVUZMTEd0Q1FVRk1MRU5CUVhkQ0xHTkJRWGhDTEVsQlFUQkRMRWxCUVRGRE8wRkJRMEVzTWtKQlFVOHNTMEZCU3l4dlFrRkJUQ3hEUVVFd1FpeGpRVUV4UWl4RFFVRlFPMEZCUTBnN1FVRkRSQ3h2UWtGQlNTeFBRVUZQTEU5QlFVOHNiMEpCUVdRc1MwRkJkVU1zVTBGQk0wTXNSVUZCYzBRN1FVRkRiRVFzZDBKQlFVa3NRMEZCUXl4UFFVRlBMRzlDUVVGYUxFVkJRV3RETzBGQlF6bENMR2REUVVGUkxFdEJRVXNzVjBGQlRDeERRVUZwUWl4WFFVRlhMRFJDUVVFMVFpeEZRVUV3UkN4RlFVRkRMRXRCUVVzc1IwRkJUaXhGUVVFeFJDeEZRVUZ6UlN4RlFVRjBSU3hGUVVFd1JTeDFRa0ZCTVVVc1JVRkJiVWNzU1VGQmJrY3NSVUZCZVVjc1NVRkJla2NzUlVGQkswY3NUVUZCTDBjc1JVRkJkVWdzVlVGQmRrZ3NRMEZCYTBrc1IwRkJiRWtzUlVGQmRVa3NTVUZCZGtrc1EwRkJVanRCUVVOQkxEUkNRVUZKTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhMUVVGcVFpeERRVUZLTEVWQlFUWkNPMEZCUTNwQ0xHMURRVUZQTEV0QlFWQTdRVUZEU0R0QlFVTktPMEZCUTBvc2FVSkJVRVFzVFVGUFR6dEJRVU5JTEhkQ1FVRkpMRkZCUVZFc1MwRkJTeXhYUVVGTUxFTkJRV2xDTEV0QlFVc3NSMEZCVEN4RFFVRnFRaXhGUVVFMFFpeFBRVUZQTEc5Q1FVRnVReXhGUVVGNVJDeERRVUZETEVkQlFVUXNRMEZCZWtRc1JVRkJaMFVzUTBGQlF5eHpRa0ZCUkN4RFFVRm9SU3hGUVVFd1JpeGpRVUV4Uml4RFFVRmFMRVZCUVhWSU8wRkJRMjVJTEN0Q1FVRlBMRXRCUVZBN1FVRkRTRHRCUVVOS08wRkJRMG9zWVVGcVFrUXNUVUZwUWs4c1NVRkJTU3hMUVVGTExITkNRVUZNTEVsQlFTdENMRU5CUVVNc1MwRkJTeXhyUWtGQlRDeERRVUYzUWl4alFVRjRRaXhEUVVGd1F5eEZRVUUyUlR0QlFVTm9SaXh4UWtGQlN5eHZRa0ZCVEN4RFFVRXdRaXhqUVVFeFFpeEpRVUUwUXl4SlFVRTFRenRCUVVOSU8wRkJRMG9zVTBGeVFrUXNUVUZ4UWs4c1NVRkJTU3hMUVVGTExITkNRVUZVTEVWQlFXbERPMEZCUTNCRExHbENRVUZMTEd0Q1FVRk1MRU5CUVhkQ0xHTkJRWGhDTEVsQlFUQkRMRWxCUVRGRE8wRkJRMEVzYlVKQlFVOHNTMEZCU3l4dlFrRkJUQ3hEUVVFd1FpeGpRVUV4UWl4RFFVRlFPMEZCUTBnN1FVRkRTanRCUVVORUxGZEJRVThzU1VGQlVEdEJRVU5JTEVOQmFrUkVPenRCUVcxRVFTeHBRa0ZCYVVJc1UwRkJha0lzUTBGQk1rSXNNRUpCUVROQ0xFZEJRWGRFTEZOQlFWTXNNRUpCUVZRc1EwRkJiME1zU1VGQmNFTXNSVUZCTUVNc1RVRkJNVU1zUlVGQmEwUXNaVUZCYkVRc1JVRkJiVVU3UVVGRGRrZ3NVVUZCU1N4TFFVRktPMEZCUTBFc1VVRkJTU3hQUVVGUExGbEJRVkFzUzBGQmQwSXNVMEZCTlVJc1JVRkJkVU03UVVGRGJrTXNZVUZCU3l4SlFVRkpMRTFCUVZRc1NVRkJiVUlzVDBGQlR5eFpRVUV4UWl4RlFVRjNRenRCUVVOd1F5eG5Ra0ZCU1N4TFFVRkxMRTFCUVV3c1RVRkJhVUlzVTBGQmNrSXNSVUZCWjBNN1FVRkROVUlzYjBKQlFVa3NUVUZCVFN4UFFVRlBMRmxCUVZBc1EwRkJiMElzVFVGQmNFSXNRMEZCVmp0QlFVTkJMRzlDUVVGSkxFOUJRVThzUjBGQlVDeExRVUZsTEZGQlFXNUNMRVZCUVRaQ08wRkJRM3BDTEhkQ1FVRkpMRXRCUVVzc1IwRkJUQ3hOUVVGakxGTkJRV3hDTEVWQlFUWkNPMEZCUTNwQ0xHZERRVUZSTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhYUVVGWExIRkNRVUUxUWl4RlFVRnRSRHRCUVVOMlJDeHBRMEZCU3l4TlFVUnJSRHRCUVVWMlJDeHhRMEZCVXp0QlFVWTRReXg1UWtGQmJrUXNSVUZIVEN4RlFVaExMRVZCUjBRc1JVRklReXhGUVVkSExFbEJTRWdzUlVGSFV5eEpRVWhVTEVWQlIyVXNUVUZJWml4RlFVZDFRaXhWUVVoMlFpeERRVWRyUXl4SlFVaHNReXhGUVVkM1F5eE5RVWg0UXl4RlFVZG5SQ3hWUVVob1JDeERRVWN5UkN4SlFVZ3pSQ3hGUVVkcFJTeGpRVWhxUlN4RFFVRlNPMEZCU1VFc05FSkJRVWtzUzBGQlN5eFhRVUZNTEVOQlFXbENMRXRCUVdwQ0xFTkJRVW9zUlVGQk5rSTdRVUZEZWtJc2JVTkJRVThzUzBGQlVEdEJRVU5JTzBGQlEwbzdRVUZEU2l4cFFrRldSQ3hOUVZWUExFbEJRVWtzVFVGQlRTeFBRVUZPTEVOQlFXTXNSMEZCWkN4RFFVRktMRVZCUVhkQ08wRkJRek5DTEhsQ1FVRkxMRWxCUVVrc1NVRkJTU3hEUVVGaUxFVkJRV2RDTEVsQlFVa3NTVUZCU1N4TlFVRjRRaXhGUVVGblF5eEhRVUZvUXl4RlFVRnhRenRCUVVOcVF5dzBRa0ZCU1N4alFVRmpMRWxCUVVrc1EwRkJTaXhEUVVGc1FqdEJRVU5CTERSQ1FVRkpMRXRCUVVzc1YwRkJUQ3hOUVVGelFpeFRRVUV4UWl4RlFVRnhRenRCUVVOcVF5eHZRMEZCVVN4TFFVRkxMRmRCUVV3c1EwRkJhVUlzVjBGQlZ5eHhRa0ZCTlVJc1JVRkJiVVE3UVVGRGRrUXNjVU5CUVVzc1RVRkVhMFE3UVVGRmRrUXNlVU5CUVZNN1FVRkdPRU1zTmtKQlFXNUVMRVZCUjB3c1JVRklTeXhGUVVkRUxFMUJRVTBzUTBGSVRDeEZRVWRSTEVsQlNGSXNSVUZIWXl4SlFVaGtMRVZCUjI5Q0xFMUJTSEJDTEVWQlJ6UkNMRlZCU0RWQ0xFTkJSM1ZETEVsQlNIWkRMRVZCUnpaRExFMUJTRGRETEVWQlIzRkVMRlZCU0hKRUxFTkJSMmRGTEVsQlNHaEZMRVZCUjNORkxHTkJTSFJGTEVOQlFWSTdRVUZKUVN4blEwRkJTU3hMUVVGTExGZEJRVXdzUTBGQmFVSXNTMEZCYWtJc1EwRkJTaXhGUVVFMlFqdEJRVU42UWl4MVEwRkJUeXhMUVVGUU8wRkJRMGc3UVVGRFNqdEJRVU5LTzBGQlEwb3NhVUpCWWswc1RVRmhRVHRCUVVOSUxIZENRVUZKTEZGQlFWRXNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xFbEJRV3BDTEVWQlFYVkNMRWRCUVhaQ0xFVkJRVFJDTEVWQlFUVkNMRVZCUVdkRExFTkJRVU1zWTBGQlJDeEZRVUZwUWl4TlFVRnFRaXhEUVVGb1F5eEZRVUV3UkN4bFFVRXhSQ3hEUVVGYUxFVkJRWGRHTzBGQlEzQkdMQ3RDUVVGUExFdEJRVkE3UVVGRFNEdEJRVU5LTzBGQlEwbzdRVUZEU2p0QlFVTktPMEZCUTBRc1YwRkJUeXhKUVVGUU8wRkJRMGdzUTBGMFEwUTdPMEZCZDBOQkxHbENRVUZwUWl4VFFVRnFRaXhEUVVFeVFpeHZRa0ZCTTBJc1IwRkJhMFFzVTBGQlV5eHZRa0ZCVkN4RFFVRTRRaXhKUVVFNVFpeEZRVUZ2UXl4TlFVRndReXhGUVVFMFF5eGxRVUUxUXl4RlFVRTJSRHRCUVVNelJ5eFhRVUZQTEV0QlFVc3NZVUZCVEN4RFFVRnRRaXhKUVVGdVFpeEZRVUY1UWl4TlFVRjZRaXhGUVVGcFF5eGxRVUZxUXl4TFFVTkJMRXRCUVVzc1lVRkJUQ3hEUVVGdFFpeEpRVUZ1UWl4RlFVRjVRaXhOUVVGNlFpeEZRVUZwUXl4bFFVRnFReXhEUVVSQkxFbEJSVUVzUzBGQlN5eGhRVUZNTEVOQlFXMUNMRWxCUVc1Q0xFVkJRWGxDTEUxQlFYcENMRVZCUVdsRExHVkJRV3BETEVOQlJrRXNTVUZIUVN4TFFVRkxMRmRCUVV3c1EwRkJhVUlzU1VGQmFrSXNSVUZCZFVJc1RVRkJka0lzUlVGQkswSXNaVUZCTDBJc1EwRklRU3hKUVVsQkxFbEJTbEE3UVVGTFNDeERRVTVFT3p0QlFWRkJMR2xDUVVGcFFpeFRRVUZxUWl4RFFVRXlRaXhoUVVFelFpeEhRVUV5UXl4VFFVRlRMR0ZCUVZRc1EwRkJkVUlzU1VGQmRrSXNSVUZCTmtJc1RVRkJOMElzUlVGQmNVTXNaVUZCY2tNc1JVRkJjMFE3UVVGRE4wWXNVVUZCU1N4UFFVRlBMRXRCUVZBc1MwRkJhVUlzVTBGQmNrSXNSVUZCWjBNN1FVRkROVUlzWlVGQlR5eEpRVUZRTzBGQlEwZzdRVUZEUkN4UlFVRkpMRXRCUVVvN1FVRkRRU3hUUVVGTExFbEJRVWtzU1VGQlNTeERRVUZpTEVWQlFXZENMRWxCUVVrc1QwRkJUeXhMUVVGUUxFTkJRV0VzVFVGQmFrTXNSVUZCZVVNc1IwRkJla01zUlVGQk9FTTdRVUZETVVNc1dVRkJTU3haUVVGWkxFOUJRVThzUzBGQlVDeERRVUZoTEVOQlFXSXNRMEZCYUVJN1FVRkRRU3haUVVGSkxGRkJRVkVzUzBGQlN5eFhRVUZNTEVOQlFXbENMRWxCUVdwQ0xFVkJRWFZDTEZOQlFYWkNMRVZCUVd0RExFVkJRV3hETEVWQlFYTkRMRU5CUVVNc1QwRkJSQ3hGUVVGVkxFTkJRVllzUTBGQmRFTXNSVUZCYjBRc1pVRkJjRVFzUTBGQldpeEZRVUZyUmp0QlFVTTVSU3h0UWtGQlR5eExRVUZRTzBGQlEwZzdRVUZEU2p0QlFVTkVMRmRCUVU4c1NVRkJVRHRCUVVOSUxFTkJXa1E3TzBGQlkwRXNhVUpCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMR0ZCUVROQ0xFZEJRVEpETEZOQlFWTXNZVUZCVkN4RFFVRjFRaXhKUVVGMlFpeEZRVUUyUWl4TlFVRTNRaXhGUVVGeFF5eGxRVUZ5UXl4RlFVRnpSRHRCUVVNM1JpeFJRVUZKTEU5QlFVOHNTMEZCVUN4TFFVRnBRaXhUUVVGeVFpeEZRVUZuUXp0QlFVTTFRaXhsUVVGUExFbEJRVkE3UVVGRFNEdEJRVU5FTEZGQlFVa3NVMEZCVXl4RlFVRmlPMEZCUTBFc1VVRkJTU3hyUWtGQmEwSXNTMEZCU3l4TlFVRk1MRU5CUVZrc1RVRkJiRU03UVVGRFFTeFJRVUZKTEhWQ1FVRktMRVZCUVRaQ0xIRkNRVUUzUWp0QlFVTkJMRkZCUVVrc1MwRkJTeXh6UWtGQlZDeEZRVUZwUXp0QlFVTTNRaXhyUTBGQk1FSXNTMEZCU3l4dlFrRkJMMEk3UVVGRFFTeG5RMEZCZDBJc1MwRkJTeXhyUWtGQk4wSTdRVUZEU0R0QlFVTkVMRkZCUVVrc1lVRkJZU3hKUVVGcVFqdEJRVU5CTEZOQlFVc3NTVUZCU1N4SlFVRkpMRU5CUVdJc1JVRkJaMElzU1VGQlNTeFBRVUZQTEV0QlFWQXNRMEZCWVN4TlFVRnFReXhGUVVGNVF5eEhRVUY2UXl4RlFVRTRRenRCUVVNeFF5eFpRVUZKTEV0QlFVc3NjMEpCUVZRc1JVRkJhVU03UVVGRE4wSXNhVUpCUVVzc2IwSkJRVXdzUjBGQk5FSXNSVUZCTlVJN1FVRkRRU3hwUWtGQlN5eHJRa0ZCVEN4SFFVRXdRaXhGUVVFeFFqdEJRVU5JTzBGQlEwUXNXVUZCU1N4WlFVRlpMRTlCUVU4c1MwRkJVQ3hEUVVGaExFTkJRV0lzUTBGQmFFSTdPMEZCUlVFc1dVRkJTU3hoUVVGaExFdEJRVXNzVFVGQlRDeERRVUZaTEUxQlFUZENPMEZCUTBFc1dVRkJTU3hSUVVGUkxFdEJRVXNzVjBGQlRDeERRVUZwUWl4SlFVRnFRaXhGUVVGMVFpeFRRVUYyUWl4RlFVRnJReXhGUVVGc1F5eEZRVUZ6UXl4RFFVRkRMRTlCUVVRc1JVRkJWU3hEUVVGV0xFTkJRWFJETEVWQlFXOUVMR1ZCUVhCRUxFTkJRVm83TzBGQlJVRXNXVUZCU1N4VlFVRlZMRWxCUVZZc1NVRkJhMElzWlVGQlpTeExRVUZMTEUxQlFVd3NRMEZCV1N4TlFVRnFSQ3hGUVVGNVJEdEJRVU55UkN4cFFrRkJTeXhOUVVGTUxFZEJRV01zUzBGQlN5eE5RVUZNTEVOQlFWa3NTMEZCV2l4RFFVRnJRaXhEUVVGc1FpeEZRVUZ4UWl4bFFVRnlRaXhEUVVGa096dEJRVVZCTEdkQ1FVRkpMRXRCUVVzc2MwSkJRVlFzUlVGQmFVTTdRVUZETjBJc2NVSkJRVXNzU1VGQlNTeFJRVUZVTEVsQlFYRkNMRXRCUVVzc2EwSkJRVEZDTEVWQlFUaERPMEZCUXpGRExEQkRRVUZ6UWl4UlFVRjBRaXhKUVVGclF5eEpRVUZzUXp0QlFVTkJMREpDUVVGUExIZENRVUYzUWl4UlFVRjRRaXhEUVVGUU8wRkJRMGc3UVVGRFJDeHhRa0ZCU3l4SlFVRkpMRlZCUVZRc1NVRkJkVUlzUzBGQlN5eHZRa0ZCTlVJc1JVRkJhMFE3UVVGRE9VTXNkMEpCUVVrc1EwRkJReXh6UWtGQmMwSXNWVUZCZEVJc1EwRkJUQ3hGUVVGM1F6dEJRVU53UXl4blJFRkJkMElzVlVGQmVFSXNTVUZCYzBNc1NVRkJkRU03UVVGRFNEdEJRVU5LTzBGQlEwUTdRVUZEUVN3MlFrRkJZU3hMUVVGaU8wRkJRMEU3UVVGRFNEczdRVUZGUkN4dFFrRkJUeXhKUVVGUU8wRkJRMGc3UVVGRFJDeFpRVUZKTEV0QlFVb3NSVUZCVnp0QlFVTlFMRzFDUVVGUExFbEJRVkFzUTBGQldTeE5RVUZOTEZWQlFVNHNRMEZCYVVJc1NVRkJha0lzUlVGQmRVSXNTMEZCU3l4RFFVRTFRaXhGUVVFclFpeFZRVUV2UWl4RFFVRXdReXhKUVVFeFF5eEZRVUZuUkN4UFFVRm9SQ3hEUVVGYU8wRkJRMGc3UVVGRFNqdEJRVU5FTEZGQlFVa3NTMEZCU3l4elFrRkJWQ3hGUVVGcFF6dEJRVU0zUWl4aFFVRkxMRzlDUVVGTUxFZEJRVFJDTEhWQ1FVRTFRanRCUVVOQkxHRkJRVXNzYTBKQlFVd3NSMEZCTUVJc2NVSkJRVEZDTzBGQlEwZzdRVUZEUkN4UlFVRkpMRlZCUVVvc1JVRkJaMEk3UVVGRFdpeHBRa0ZCVXl4UFFVRlBMRTFCUVZBc1EwRkJZeXhMUVVGTExFMUJRVXdzUTBGQldTeExRVUZhTEVOQlFXdENMR1ZCUVd4Q0xFTkJRV1FzUTBGQlZEdEJRVU5CTEdGQlFVc3NUVUZCVEN4SFFVRmpMRXRCUVVzc1RVRkJUQ3hEUVVGWkxFdEJRVm9zUTBGQmEwSXNRMEZCYkVJc1JVRkJjVUlzWlVGQmNrSXNRMEZCWkR0QlFVTkJMR1ZCUVU4c1MwRkJTeXhYUVVGTUxFTkJRV2xDTEZkQlFWY3NZMEZCTlVJc1JVRkJORU1zUlVGQk5VTXNSVUZCWjBRc1JVRkJhRVFzUlVGQmIwUXNVVUZCY0VRc1JVRkJPRVFzVFVGQk9VUXNSVUZCYzBVc1NVRkJkRVVzUlVGQk5FVXNUVUZCTlVVc1EwRkJVRHRCUVVOSU8wRkJRMG9zUTBGMlJFUTdPMEZCZVVSQkxHbENRVUZwUWl4VFFVRnFRaXhEUVVFeVFpeGhRVUV6UWl4SFFVRXlReXhUUVVGVExHRkJRVlFzUTBGQmRVSXNTVUZCZGtJc1JVRkJOa0lzVFVGQk4wSXNSVUZCY1VNc1pVRkJja01zUlVGQmMwUTdRVUZETjBZc1VVRkJTU3hQUVVGUExFdEJRVkFzUzBGQmFVSXNVMEZCY2tJc1JVRkJaME03UVVGRE5VSXNaVUZCVHl4SlFVRlFPMEZCUTBnN1FVRkRSQ3hSUVVGSkxHRkJRV0VzU1VGQmFrSTdRVUZEUVN4UlFVRkpMRk5CUVZNc1JVRkJZanRCUVVOQkxGRkJRVWtzYTBKQlFXdENMRXRCUVVzc1RVRkJUQ3hEUVVGWkxFMUJRV3hETzBGQlEwRXNVVUZCU1N4MVFrRkJTaXhGUVVFMlFpeHhRa0ZCTjBJN1FVRkRRU3hSUVVGSkxFdEJRVXNzYzBKQlFWUXNSVUZCYVVNN1FVRkROMElzYTBOQlFUQkNMRXRCUVVzc2IwSkJRUzlDTzBGQlEwRXNaME5CUVhkQ0xFdEJRVXNzYTBKQlFUZENPMEZCUTBnN1FVRkRSQ3hUUVVGTExFbEJRVWtzU1VGQlNTeERRVUZpTEVWQlFXZENMRWxCUVVrc1QwRkJUeXhMUVVGUUxFTkJRV0VzVFVGQmFrTXNSVUZCZVVNc1IwRkJla01zUlVGQk9FTTdRVUZETVVNc1dVRkJTU3hMUVVGTExITkNRVUZVTEVWQlFXbERPMEZCUXpkQ0xHbENRVUZMTEc5Q1FVRk1MRWRCUVRSQ0xFVkJRVFZDTzBGQlEwRXNhVUpCUVVzc2EwSkJRVXdzUjBGQk1FSXNSVUZCTVVJN1FVRkRTRHRCUVVORUxGbEJRVWtzV1VGQldTeFBRVUZQTEV0QlFWQXNRMEZCWVN4RFFVRmlMRU5CUVdoQ096dEJRVVZCTEZsQlFVa3NZVUZCWVN4TFFVRkxMRTFCUVV3c1EwRkJXU3hOUVVFM1FqdEJRVU5CTEZsQlFVa3NVVUZCVVN4TFFVRkxMRmRCUVV3c1EwRkJhVUlzU1VGQmFrSXNSVUZCZFVJc1UwRkJka0lzUlVGQmEwTXNSVUZCYkVNc1JVRkJjME1zUTBGQlF5eFBRVUZFTEVWQlFWVXNRMEZCVml4RFFVRjBReXhGUVVGdlJDeGxRVUZ3UkN4RFFVRmFPenRCUVVWQkxGbEJRVWtzVlVGQlZTeEpRVUZXTEVsQlFXdENMR1ZCUVdVc1MwRkJTeXhOUVVGTUxFTkJRVmtzVFVGQmFrUXNSVUZCZVVRN1FVRkRja1FzWjBKQlFVa3NaVUZCWlN4SlFVRnVRaXhGUVVGNVFqdEJRVU55UWl3MlFrRkJZU3hEUVVGaU8wRkJRMGdzWVVGR1JDeE5RVVZQTzBGQlEwZ3NjVUpCUVVzc1RVRkJUQ3hIUVVGakxFdEJRVXNzVFVGQlRDeERRVUZaTEV0QlFWb3NRMEZCYTBJc1EwRkJiRUlzUlVGQmNVSXNaVUZCY2tJc1EwRkJaRHRCUVVOQkxIVkNRVUZQTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhYUVVGWExHVkJRVFZDTEVWQlFUWkRPMEZCUTJoRUxEUkNRVUZSTEZWQlJIZERPMEZCUldoRUxEUkNRVUZSTzBGQlJuZERMR2xDUVVFM1F5eEZRVWRLTEVWQlNFa3NSVUZIUVN4UlFVaEJMRVZCUjFVc1NVRklWaXhGUVVkblFpeEpRVWhvUWl4RlFVZHpRaXhOUVVoMFFpeERRVUZRTzBGQlNVZzdRVUZEUkN4blFrRkJTU3hMUVVGTExITkNRVUZVTEVWQlFXbERPMEZCUXpkQ0xIRkNRVUZMTEVsQlFVa3NVVUZCVkN4SlFVRnhRaXhMUVVGTExHdENRVUV4UWl4RlFVRTRRenRCUVVNeFF5d3dRMEZCYzBJc1VVRkJkRUlzU1VGQmEwTXNTVUZCYkVNN1FVRkRRU3d5UWtGQlR5eDNRa0ZCZDBJc1VVRkJlRUlzUTBGQlVEdEJRVU5JTzBGQlEwUXNjVUpCUVVzc1NVRkJTU3hWUVVGVUxFbEJRWFZDTEV0QlFVc3NiMEpCUVRWQ0xFVkJRV3RFTzBGQlF6bERMSGRDUVVGSkxFTkJRVU1zYzBKQlFYTkNMRlZCUVhSQ0xFTkJRVXdzUlVGQmQwTTdRVUZEY0VNc1owUkJRWGRDTEZWQlFYaENMRWxCUVhORExFbEJRWFJETzBGQlEwZzdRVUZEU2p0QlFVTktPMEZCUTBvc1UwRnlRa1FzVFVGeFFrOHNTVUZCU1N4TFFVRktMRVZCUVZjN1FVRkRaQ3h0UWtGQlR5eEpRVUZRTEVOQlFWa3NTMEZCV2p0QlFVTklPMEZCUTBvN1FVRkRSQ3hSUVVGSkxFdEJRVXNzYzBKQlFWUXNSVUZCYVVNN1FVRkROMElzWVVGQlN5eHZRa0ZCVEN4SFFVRTBRaXgxUWtGQk5VSTdRVUZEUVN4aFFVRkxMR3RDUVVGTUxFZEJRVEJDTEhGQ1FVRXhRanRCUVVOSU8wRkJRMFFzVVVGQlNTeGxRVUZsTEVsQlFXNUNMRVZCUVhsQ08wRkJRM0pDTEdsQ1FVRlRMRTlCUVU4c1RVRkJVQ3hEUVVGakxFdEJRVXNzVFVGQlRDeERRVUZaTEV0QlFWb3NRMEZCYTBJc1pVRkJiRUlzUTBGQlpDeERRVUZVTzBGQlEwRXNZVUZCU3l4TlFVRk1MRWRCUVdNc1MwRkJTeXhOUVVGTUxFTkJRVmtzUzBGQldpeERRVUZyUWl4RFFVRnNRaXhGUVVGeFFpeGxRVUZ5UWl4RFFVRmtPMEZCUTBFc1pVRkJUeXhMUVVGTExGZEJRVXdzUTBGQmFVSXNWMEZCVnl4alFVRTFRaXhGUVVFMFF5eEZRVUUxUXl4RlFVRm5SQ3hGUVVGb1JDeEZRVUZ2UkN4UlFVRndSQ3hGUVVFNFJDeE5RVUU1UkN4RlFVRnpSU3hKUVVGMFJTeEZRVUUwUlN4TlFVRTFSU3hEUVVGUU8wRkJRMGdzUzBGS1JDeE5RVWxQTzBGQlEwZ3NZVUZCU3l4TlFVRk1MRWRCUVdNc1MwRkJTeXhOUVVGTUxFTkJRVmtzUzBGQldpeERRVUZyUWl4RFFVRnNRaXhGUVVGeFFpeGxRVUZ5UWl4RFFVRmtPMEZCUTBnN1FVRkRSQ3hYUVVGUExFbEJRVkE3UVVGRFNDeERRVE5FUkRzN1FVRTJSRUVzYVVKQlFXbENMRk5CUVdwQ0xFTkJRVEpDTEZkQlFUTkNMRWRCUVhsRExGTkJRVk1zVjBGQlZDeERRVUZ4UWl4SlFVRnlRaXhGUVVFeVFpeE5RVUV6UWl4RlFVRnRReXhsUVVGdVF5eEZRVUZ2UkR0QlFVTjZSaXhSUVVGSkxFOUJRVThzUjBGQlVDeExRVUZsTEZOQlFXNUNMRVZCUVRoQ08wRkJRekZDTEdWQlFVOHNTVUZCVUR0QlFVTklPMEZCUTBRc1VVRkJTU3huUWtGQlowSXNTMEZCU3l4TlFVRk1MRU5CUVZrc1RVRkJhRU03UVVGRFFTeFJRVUZKTEhWQ1FVRktMRVZCUVRaQ0xIRkNRVUUzUWp0QlFVTkJMRkZCUVVrc1MwRkJTeXh6UWtGQlZDeEZRVUZwUXp0QlFVTTNRaXhyUTBGQk1FSXNTMEZCU3l4dlFrRkJMMEk3UVVGRFFTeG5RMEZCZDBJc1MwRkJTeXhyUWtGQk4wSTdRVUZEUVN4aFFVRkxMRzlDUVVGTUxFZEJRVFJDTEVWQlFUVkNPMEZCUTBFc1lVRkJTeXhyUWtGQlRDeEhRVUV3UWl4RlFVRXhRanRCUVVOSU8wRkJRMFFzVVVGQlNTeFJRVUZSTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhKUVVGcVFpeEZRVUYxUWl4UFFVRlBMRWRCUVRsQ0xFVkJRVzFETEVsQlFXNURMRVZCUVhsRExFbEJRWHBETEVWQlFTdERMR1ZCUVM5RExFTkJRVm83UVVGRFFTeFJRVUZKTEZsQlFWa3NTMEZCU3l4TlFVRk1MRU5CUVZrc1MwRkJXaXhEUVVGclFpeGhRVUZzUWl4RFFVRm9RanRCUVVOQkxGTkJRVXNzVFVGQlRDeEhRVUZqTEV0QlFVc3NUVUZCVEN4RFFVRlpMRXRCUVZvc1EwRkJhMElzUTBGQmJFSXNSVUZCY1VJc1lVRkJja0lzUTBGQlpEdEJRVU5CTEZGQlFVa3NTMEZCU3l4elFrRkJWQ3hGUVVGcFF6dEJRVU0zUWl4aFFVRkxMRzlDUVVGTUxFZEJRVFJDTEhWQ1FVRTFRanRCUVVOQkxHRkJRVXNzYTBKQlFVd3NSMEZCTUVJc2NVSkJRVEZDTzBGQlEwZzdRVUZEUkN4UlFVRkpMRlZCUVZVc1NVRkJWaXhKUVVGclFpeFZRVUZWTEUxQlFWWXNTMEZCY1VJc1EwRkJNME1zUlVGQk9FTTdRVUZETVVNc1pVRkJUeXhMUVVGTExGZEJRVXdzUTBGQmFVSXNWMEZCVnl4VlFVRTFRaXhGUVVGM1F5eEZRVUY0UXl4RlFVRTBReXhGUVVFMVF5eEZRVUZuUkN4TlFVRm9SQ3hGUVVGM1JDeEpRVUY0UkN4RlFVRTRSQ3hKUVVFNVJDeEZRVUZ2UlN4TlFVRndSU3hEUVVGUU8wRkJRMGc3UVVGRFJDeFhRVUZQTEVsQlFWQTdRVUZEU0N4RFFYWkNSRHM3UVVGNVFrRXNhVUpCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMR3RDUVVFelFpeEhRVUZuUkN4VFFVRlRMRzlDUVVGVUxFTkJRVGhDTEVsQlFUbENMRVZCUVc5RExFMUJRWEJETEVWQlFUUkRMR1ZCUVRWRExFVkJRVFpFTzBGQlEzcEhMRkZCUVVrc1EwRkJReXhQUVVGUExFdEJRVm9zUlVGQmJVSTdRVUZEWml4bFFVRlBMRWxCUVZBN1FVRkRTRHRCUVVORUxGRkJRVWtzUzBGQlNqdEJRVU5CTEZOQlFVc3NTVUZCU1N4SlFVRkpMRU5CUVdJc1JVRkJaMElzU1VGQlNTeFBRVUZQTEV0QlFWQXNRMEZCWVN4TlFVRnFReXhGUVVGNVF5eEhRVUY2UXl4RlFVRTRRenRCUVVNeFF5eFpRVUZKTEUxQlFVMHNUMEZCVHl4TFFVRlFMRU5CUVdFc1EwRkJZaXhEUVVGV08wRkJRMEVzV1VGQlNTeEpRVUZKTEVkQlFVb3NTMEZCV1N4aFFVRm9RaXhGUVVFclFqdEJRVU16UWl4blFrRkJTU3hYUVVGWExFbEJRVWtzVjBGQlNpeERRVUZuUWl4SlFVRkpMRWxCUVhCQ0xFTkJRV1k3UVVGRFFTeG5Ra0ZCU1N4aFFVRmhMRWxCUVdwQ08wRkJRMEVzYVVKQlFVc3NTVUZCU1N4SlFVRkpMRU5CUVdJc1JVRkJaMElzU1VGQlNTeFRRVUZUTEZGQlFWUXNRMEZCYTBJc1RVRkJkRU1zUlVGQk9FTXNSMEZCT1VNc1JVRkJiVVE3UVVGREwwTXNiMEpCUVVrc1JVRkJSU3hUUVVGVExGRkJRVlFzUTBGQmEwSXNRMEZCYkVJc1MwRkJkMElzU1VGQk1VSXNRMEZCU2l4RlFVRnhRenRCUVVOcVF5eHBRMEZCWVN4TFFVRmlPMEZCUTBFN1FVRkRTRHRCUVVOS08wRkJRMFFzWjBKQlFVa3NWVUZCU2l4RlFVRm5RanRCUVVOYUxHOUNRVUZKTEZsQlFWa3NVMEZCVXl4alFVRlVMRU5CUVhkQ0xFbEJRWGhDTEVOQlFXaENPMEZCUTBFc2IwSkJRVWtzV1VGQldTeEZRVUZETEZGQlFWRXNVMEZCVkN4RlFVRm9RanRCUVVOQkxHOUNRVUZKTEZGQlFWRXNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xFbEJRV3BDTEVWQlFYVkNMRk5CUVhaQ0xFVkJRV3RETEVWQlFXeERMRVZCUVhORExFTkJRVU1zVDBGQlJDeEZRVUZWTEVOQlFWWXNRMEZCZEVNc1JVRkJiMFFzWlVGQmNFUXNRMEZCV2l4RlFVRnJSanRCUVVNNVJTd3lRa0ZCVHl4TFFVRlFPMEZCUTBnN1FVRkRTanRCUVVOS08wRkJRMG83UVVGRFNpeERRWHBDUkRzN1FVRXlRa0U3UVVGRFFUczdRVUZGUVN4VFFVRlRMRkZCUVZRc1EwRkJhMElzUjBGQmJFSXNSVUZCZFVJN1FVRkRia0lzVVVGQlNTeEpRVUZKTEU5QlFVOHNSMEZCVUN4RlFVRlpMRTlCUVZvc1EwRkJiMElzV1VGQmNFSXNSVUZCYTBNc1JVRkJiRU1zUlVGQmMwTXNTMEZCZEVNc1EwRkJORU1zYjBkQlFUVkRMRU5CUVZJN1FVRkRRVHRCUVVOQkxGZEJRVkVzU1VGQlNUdEJRVU5TTEdOQlFVMHNSVUZCUlN4RFFVRkdMRXRCUVZFc1JVRkVUanRCUVVWU0xHdENRVUZWTEVWQlFVVXNRMEZCUml4TFFVRlJMRVZCUmxZN1FVRkhVaXh0UWtGQlZ5eEZRVUZGTEVOQlFVWXNTMEZCVVN4RlFVaFlPMEZCU1ZJc1kwRkJUU3hGUVVGRkxFTkJRVVlzUzBGQlVTeEZRVXBPTzBGQlMxSXNhMEpCUVZVc1JVRkJSU3hEUVVGR0xFdEJRVkVzUlVGTVZqdEJRVTFTTEdOQlFVMHNSVUZCUlN4RFFVRkdMRXRCUVZFc1JVRk9UanRCUVU5U0xHdENRVUZWTEVWQlFVVXNRMEZCUml4TFFVRlJMRVZCVUZZN1FVRlJVaXhuUWtGQlVTeEZRVUZGTEVOQlFVWXNTMEZCVVN4RlFWSlNPMEZCVTFJc1kwRkJUU3hGUVVGRkxFTkJRVVlzUzBGQlVUdEJRVlJPTEV0QlFVb3NSMEZWU2l4SlFWWktPMEZCVjBnN08wRkJSVVFzVTBGQlV5eFZRVUZVTEVOQlFXOUNMRWxCUVhCQ0xFVkJRVEJDTEVsQlFURkNMRVZCUVdkRE8wRkJRVU03TzBGQlJUZENMR0ZCUVZNc2FVSkJRVlFzUTBGQk1rSXNTMEZCTTBJc1JVRkJhME03UVVGRE9VSXNXVUZCU1N4VFFVRlRMRVZCUVdJN1FVRkRRU3hqUVVGTkxFOUJRVTRzUTBGQll5eHBRa0ZCWkN4RlFVRnBReXhGUVVGcVF5eEZRVU5MTEU5QlJFd3NRMEZEWVN4blFrRkVZaXhGUVVNclFpeEhRVVF2UWl4RlFVVkxMRTlCUmt3c1EwRkZZU3hUUVVaaUxFVkJSWGRDTEUxQlJuaENMRVZCUjBzc1QwRklUQ3hEUVVkaExGbEJTR0lzUlVGSE1rSXNWVUZCVlN4RFFVRldMRVZCUVdFN1FVRkRhRU1zWjBKQlFVa3NUVUZCVFN4TFFVRldMRVZCUVdsQ08wRkJRMklzZFVKQlFVOHNSMEZCVUR0QlFVTklMR0ZCUmtRc1RVRkZUenRCUVVOSUxIVkNRVUZQTEVsQlFWQXNRMEZCV1N4RFFVRmFPMEZCUTBnN1FVRkRTaXhUUVZSTU8wRkJWVUVzWlVGQlR5eFBRVUZQTEVsQlFWQXNRMEZCV1N4RlFVRmFMRVZCUVdkQ0xFOUJRV2hDTEVOQlFYZENMRXRCUVhoQ0xFVkJRU3RDTEUxQlFVMHNUVUZCVGl4RFFVRmhMRU5CUVdJc1RVRkJiMElzUjBGQmNFSXNSMEZCTUVJc1IwRkJNVUlzUjBGQlowTXNSVUZCTDBRc1EwRkJVRHRCUVVOSU96dEJRVVZFTEZkQlFVOHNVMEZCVXl4UlFVRlJMRVZCUVdwQ0xFTkJRVkE3UVVGRFFTeFhRVUZQTEZOQlFWTXNVVUZCVVN4RlFVRnFRaXhEUVVGUU96dEJRVVZCTEZkQlFVOHNRMEZCUXl4SlFVRkVMRWxCUVZNc1EwRkJReXhKUVVGV0xFZEJRV2xDTEVsQlFXcENMRWRCUVhkQ0xFTkJRVU1zUzBGQlN5eFJRVUZNTEVsQlFXbENMRXRCUVVzc1VVRkJka0lzUzBGRE9VSXNTMEZCU3l4UlFVRk1MRWxCUVdsQ0xFdEJRVXNzVTBGQmRFSXNSMEZCYTBNc1MwRkJTeXhUUVVGMlF5eEhRVUZ0UkN4TFFVRkxMRk5CUkRGQ0xFbEJSUzlDTEd0Q1FVRnJRaXhMUVVGTExGRkJRVXdzU1VGQmFVSXNTMEZCU3l4VFFVRjBRaXhKUVVGdFF5eExRVUZMTEZGQlFVd3NRMEZCWXl4TlFVRmtMRU5CUVhGQ0xFTkJRWEpDTEUxQlFUUkNMRWRCUVM5RUxFZEJRWEZGTEV0QlFVc3NVVUZCTVVVc1IwRkJjMFlzUzBGQlN5eFJRVUZNTEVkQlFXbENMRU5CUVVNc1MwRkJTeXhUUVVGTUxFbEJRV3RDTEVOQlFVTXNTMEZCU3l4UlFVRjRRaXhIUVVGdFF5eEhRVUZ1UXl4SFFVRjVReXhGUVVFeFF5eEpRVUZuUkN4TFFVRkxMRkZCUVV3c1EwRkJZeXhMUVVGa0xFTkJRVzlDTEVOQlFYQkNMRVZCUVhWQ0xFdEJRVXNzVVVGQlRDeERRVUZqTEZkQlFXUXNRMEZCTUVJc1IwRkJNVUlzU1VGQmFVTXNRMEZCZUVRc1EwRkJhRVFzUjBGQk5rY3NTMEZCU3l4UlFVRnVTU3hIUVVFclNTeExRVUZMTEZGQlFUVlFMRU5CUml0Q0xFbEJSemxDTEV0QlFVc3NVVUZCVEN4SlFVRnBRaXhMUVVGTExGTkJRWFJDTEVsQlFXMURMRXRCUVVzc1VVRkJlRU1zUjBGQmJVUXNTMEZCU3l4TlFVRjRSQ3hIUVVGclJTeExRVUZMTEUxQlFVd3NTVUZCWlN4TFFVRkxMRTFCU0hoRUxFbEJTUzlDTEV0QlFVc3NTVUZLVER0QlFVdElPenRCUVVWRUxGTkJRVk1zWTBGQlZDeERRVUYzUWl4SFFVRjRRaXhGUVVFMlFqdEJRVU42UWl4WFFVRlBMRWxCUVVrc1MwRkJTaXhEUVVGVkxFZEJRVllzUlVGQlpTeERRVUZtTEVOQlFWQTdRVUZEU0RzN1FVRkZSQ3hUUVVGVExGVkJRVlFzUTBGQmIwSXNUVUZCY0VJc1JVRkJORUlzVDBGQk5VSXNSVUZCY1VNN1FVRkRha01zVVVGQlNTeFZRVUZWTEZGQlFVOHNUVUZCVUN4MVJFRkJUeXhOUVVGUUxFOUJRV3RDTEZGQlFXaERMRVZCUVRCRE8wRkJRM1JETEZsQlFVa3NXVUZCV1N4VFFVRm9RaXhGUVVFeVFqdEJRVU4yUWl4elFrRkJWU3hQUVVGUExFVkJRV3BDTzBGQlEwZ3NVMEZHUkN4TlFVVlBMRWxCUVVrc1QwRkJUeXhQUVVGUExFVkJRV1FzUzBGQmNVSXNVVUZCZWtJc1JVRkJiVU03UVVGRGRFTXNjMEpCUVZVc1YwRkJWeXhQUVVGWUxFVkJRVzlDTEU5QlFVOHNSVUZCTTBJc1EwRkJWanRCUVVOQkxHMUNRVUZQTEVWQlFWQXNSMEZCV1N4UFFVRmFPMEZCUTBnN1FVRkRSQ3haUVVGSkxFMUJRVTBzVDBGQlRpeERRVUZqTEUxQlFXUXNRMEZCU2l4RlFVRXlRanRCUVVOMlFpeHBRa0ZCU3l4SlFVRkpMRWxCUVVrc1EwRkJZaXhGUVVGblFpeEpRVUZKTEU5QlFVOHNUVUZCTTBJc1JVRkJiVU1zUjBGQmJrTXNSVUZCZDBNN1FVRkRjRU1zTWtKQlFWY3NUMEZCVHl4RFFVRlFMRU5CUVZnc1JVRkJjMElzVDBGQmRFSTdRVUZEU0R0QlFVTktMRk5CU2tRc1RVRkpUenRCUVVOSUxHZENRVUZKTEU5QlFVOHNUMEZCVHl4TlFVRlFMRU5CUVZBc1MwRkJNRUlzVVVGQk9VSXNSVUZCZDBNN1FVRkRjRU1zZFVKQlFVOHNUVUZCVUN4SlFVRnBRaXhYUVVGWExFOUJRVmdzUlVGQmIwSXNUMEZCVHl4TlFVRlFMRU5CUVhCQ0xFTkJRV3BDTzBGQlEwZzdRVUZEUkN4cFFrRkJTeXhKUVVGSkxFZEJRVlFzU1VGQlowSXNUVUZCYUVJc1JVRkJkMEk3UVVGRGNFSXNiMEpCUVVrc1VVRkJVU3hOUVVGYUxFVkJRVzlDTzBGQlEyaENMQ3RDUVVGWExFOUJRVThzUjBGQlVDeERRVUZZTEVWQlFYZENMRTlCUVhoQ08wRkJRMGc3UVVGRFNqdEJRVU5LTzBGQlEwbzdRVUZEU2pzN1FVRkZSQ3hUUVVGVExHOUNRVUZVTEVOQlFUaENMRkZCUVRsQ0xFVkJRWGRETzBGQlEzQkRMR1ZCUVZjc1dVRkJXU3hKUVVGMlFqczdRVUZGUVN4UlFVRkpMR2RDUVVGblFpeFZRVUZWTEZGQlFWWXNRMEZCY0VJN08wRkJSVUVzVjBGQlR5eFZRVUZWTEV0QlFWWXNSVUZCYVVJN1FVRkRjRUlzV1VGQlNTeHJRa0ZCYTBJc1kwRkJZeXhOUVVGTkxFbEJRWEJDTEV0QlFUWkNMSEZDUVVGeFFpeE5RVUZOTEVsQlFUTkNMRU5CUVc1RU8wRkJRMEVzV1VGQlNTeFBRVUZQTEdWQlFWQXNTMEZCTWtJc1VVRkJMMElzUlVGQmVVTTdRVUZEY2tNc2JVSkJRVThzZDBKQlFYZENMRTFCUVUwc1NVRkJPVUlzUjBGQmNVTXNTVUZCY2tNc1IwRkJORU1zZVVKQlFXVXNUVUZCVFN4aFFVRnlRaXhEUVVGdVJEdEJRVU5JTzBGQlEwUXNXVUZCU1N4blFrRkJaMElzVFVGQlRTeE5RVUV4UWp0QlFVTkJPMEZCUTBFc1pVRkJUeXhuUWtGQlowSXNUMEZCYUVJc1EwRkJkMElzWlVGQmVFSXNSVUZCZVVNc1ZVRkJWU3hMUVVGV0xFVkJRV2xDTEU5QlFXcENMRVZCUVRCQ08wRkJRM1JGTEdkQ1FVRkpMRmRCUVZjc1kwRkJZeXhQUVVGa0xFTkJRV1k3UVVGRFFTeHRRa0ZCVHl4UFFVRlBMRkZCUVZBc1MwRkJiMElzVVVGQmNFSXNTVUZCWjBNc1QwRkJUeXhSUVVGUUxFdEJRVzlDTEZGQlFYQkVMRWRCUVN0RUxGRkJRUzlFTEVkQlFUQkZMRXRCUVdwR08wRkJRMGdzVTBGSVRTeERRVUZRTzBGQlNVZ3NTMEZZUkR0QlFWbElPenRCUVVWRUxFbEJRVWtzWVVGQllUdEJRVU5pTEd0Q1FVRmpMRU5CUkVRN1FVRkZZaXh0UWtGQlpTeERRVVpHTzBGQlIySXNiMEpCUVdkQ0xFVkJTRWc3UVVGSllpeHZRa0ZCWjBJc1JVRktTRHRCUVV0aUxIRkNRVUZwUWl4RlFVeEtPMEZCVFdJc1owSkJRVmtzUlVGT1F6dEJRVTlpTzBGQlEwRXNkMEpCUVc5Q0xFZEJVbEE3UVVGVFlpeHZRa0ZCWjBJc1IwRlVTRHRCUVZWaUxEaENRVUV3UWl4SFFWWmlPMEZCVjJJc2IwSkJRV2RDTEVkQldFZzdRVUZaWWl3NFFrRkJNRUlzUjBGYVlqdEJRV0ZpTEhsQ1FVRnhRaXhIUVdKU08wRkJZMkk3UVVGRFFTeDVRa0ZCY1VJc1IwRm1VanRCUVdkQ1lpeDNRa0ZCYjBJc1IwRm9RbEE3UVVGcFFtSXNiMEpCUVdkQ0xFZEJha0pJTzBGQmEwSmlPMEZCUTBFc0swSkJRVEpDTEVkQmJrSmtPMEZCYjBKaUxDdENRVUV5UWl4SFFYQkNaRHRCUVhGQ1lpeHhRa0ZCYVVJc1IwRnlRa283UVVGelFtSXNhME5CUVRoQ0xFZEJkRUpxUWp0QlFYVkNZaXd5UWtGQmRVSXNSMEYyUWxZN1FVRjNRbUk3UVVGRFFTeDNRa0ZCYjBJc1IwRjZRbEE3UVVFd1FtSXNkVUpCUVcxQ0xFZEJNVUpPTzBGQk1rSmlMR3RDUVVGakxFZEJNMEpFTzBGQk5FSmlMRFJDUVVGM1FpeEhRVFZDV0R0QlFUWkNZanRCUVVOQkxHMUNRVUZsTEVkQk9VSkdPMEZCSzBKaUxHOUNRVUZuUWl4SFFTOUNTRHRCUVdkRFlqdEJRVU5CTEhkQ1FVRnZRaXhIUVdwRFVEdEJRV3REWWp0QlFVTkJMSE5DUVVGclFqdEJRVzVEVEN4RFFVRnFRanRCUVhGRFFTeEpRVUZKTEd0Q1FVRnJRaXhGUVVGMFFqdEJRVU5CTEV0QlFVc3NTVUZCU1N4SFFVRlVMRWxCUVdkQ0xGVkJRV2hDTEVWQlFUUkNPMEZCUTNoQ0xHOUNRVUZuUWl4WFFVRlhMRWRCUVZnc1EwRkJhRUlzU1VGQmJVTXNSMEZCYmtNN1FVRkRTRHRCUVVORUxFbEJRVWtzZFVKQlFYVkNPMEZCUTNaQ0xHdENRVUZqTERSRFFVUlRPMEZCUlhaQ0xHMUNRVUZsTERSQ1FVWlJPMEZCUjNaQ0xHOUNRVUZuUWl4blJFRklUenRCUVVsMlFpeHZRa0ZCWjBJc1owUkJTazg3UVVGTGRrSXNjVUpCUVdsQ0xEQkdRVXhOTzBGQlRYWkNMR2RDUVVGWkxHdERRVTVYTzBGQlQzWkNPMEZCUTBFc2QwSkJRVzlDTEdsRVFWSkhPMEZCVTNaQ0xHOUNRVUZuUWl3NFEwRlVUenRCUVZWMlFpdzRRa0ZCTUVJc2RVUkJWa2c3UVVGWGRrSXNiMEpCUVdkQ0xHbEVRVmhQTzBGQldYWkNMRGhDUVVFd1FpeDFSRUZhU0R0QlFXRjJRaXg1UWtGQmNVSXNjVU5CWWtVN1FVRmpka0k3UVVGRFFTeDVRa0ZCY1VJc2VVUkJaa1U3UVVGblFuWkNMSGRDUVVGdlFpeDNSRUZvUWtjN1FVRnBRblpDTEc5Q1FVRm5RaXd3UTBGcVFrODdRVUZyUW5aQ08wRkJRMEVzSzBKQlFUSkNMR2xGUVc1Q1NqdEJRVzlDZGtJc0swSkJRVEpDTEd0RlFYQkNTanRCUVhGQ2RrSXNjVUpCUVdsQ0xHdERRWEpDVFR0QlFYTkNka0lzYTBOQlFUaENMRzFEUVhSQ1VEdEJRWFZDZGtJc01rSkJRWFZDTEcxRlFYWkNRVHRCUVhkQ2RrSTdRVUZEUVN4M1FrRkJiMElzYTBSQmVrSkhPMEZCTUVKMlFpeDFRa0ZCYlVJc2FVUkJNVUpKTzBGQk1rSjJRaXhyUWtGQll5dzBSRUV6UWxNN1FVRTBRblpDTERSQ1FVRjNRaXc0UWtFMVFrUTdRVUUyUW5aQ08wRkJRMEVzYlVKQlFXVXNjME5CT1VKUk8wRkJLMEoyUWl4dlFrRkJaMElzYlVOQkwwSlBPMEZCWjBOMlFqdEJRVU5CTEhkQ1FVRnZRaXgzUWtGcVEwYzdRVUZyUTNaQ08wRkJRMEVzYzBKQlFXdENPMEZCYmtOTExFTkJRVE5DT3p0QlFYTkRRU3hUUVVGVExHVkJRVlFzUTBGQmVVSXNTVUZCZWtJc1JVRkJLMElzVFVGQkwwSXNSVUZCZFVNc1VVRkJka01zUlVGQmFVUXNWVUZCYWtRc1JVRkJOa1FzVTBGQk4wUXNSVUZCZDBVN1FVRkRjRVVzVlVGQlRTeEpRVUZPTEVOQlFWY3NTVUZCV0R0QlFVTkJMRkZCUVVrc1UwRkJVeXhUUVVGaUxFVkJRWGRDTzBGQlEzQkNMR05CUVUwc1NVRkJTU3hMUVVGS0xFTkJRVlVzTmtKQlFUWkNMRlZCUVhaRExFTkJRVTQ3UVVGRFNEdEJRVU5FTEZOQlFVc3NUMEZCVEN4SFFVRmxMRVZCUVdZN1FVRkRRU3hUUVVGTExFMUJRVXdzUjBGQll5eE5RVUZrTzBGQlEwRXNVMEZCU3l4SlFVRk1MRWRCUVZrc1NVRkJXanRCUVVOQkxGTkJRVXNzVVVGQlRDeEhRVUZuUWl4WlFVRlpMRVZCUVRWQ08wRkJRMEVzVTBGQlN5eFZRVUZNTEVkQlFXdENMR05CUVdNc1JVRkJhRU03UVVGRFFTeFRRVUZMTEZOQlFVd3NSMEZCYVVJc1lVRkJZU3hKUVVFNVFqczdRVUZGUVN4UlFVRkpMRTFCUVUwc1NVRkJTU3hMUVVGS0xFTkJRVlVzUzBGQlN5eFBRVUZtTEVOQlFWWTdRVUZEUVN4VFFVRkxMRXRCUVV3c1IwRkJZU3hKUVVGSkxFdEJRVW9zU1VGQllTeEpRVUZKTEZWQlFUbENPMEZCUTBFc1VVRkJTU3hEUVVGRExFdEJRVXNzUzBGQlZpeEZRVUZwUWp0QlFVTmlMRmxCUVVrN1FVRkRRU3hyUWtGQlRTeEhRVUZPTzBGQlEwZ3NVMEZHUkN4RFFVZEJMRTlCUVU4c1IwRkJVQ3hGUVVGWk8wRkJRMUlzYVVKQlFVc3NTMEZCVEN4SFFVRmhMRWxCUVVrc1MwRkJTaXhKUVVGaExFbEJRVWtzVlVGQk9VSTdRVUZEU0R0QlFVTktPMEZCUTBvN08wRkJSVVFzWjBKQlFXZENMRk5CUVdoQ0xFZEJRVFJDTEhOQ1FVRmpMRTFCUVUwc1UwRkJjRUlzUTBGQk5VSTdRVUZEUVN4blFrRkJaMElzVTBGQmFFSXNRMEZCTUVJc1YwRkJNVUlzUjBGQmQwTXNaVUZCZUVNN1FVRkRRU3huUWtGQlowSXNVMEZCYUVJc1EwRkJNRUlzU1VGQk1VSXNSMEZCYVVNc2FVSkJRV3BET3p0QlFVVkJMR2RDUVVGblFpeFRRVUZvUWl4RFFVRXdRaXhWUVVFeFFpeEhRVUYxUXl4VlFVRlZMRlZCUVZZc1JVRkJjMElzV1VGQmRFSXNSVUZCYjBNN1FVRkRka1VzVVVGQlNTeGxRVUZsTEVsQlFXNUNMRVZCUVhsQ08wRkJRM0pDTEhGQ1FVRmhMRmRCUVZjc1QwRkJXQ3hEUVVGdFFpeEpRVUZ1UWl4RlFVRjVRaXhKUVVGNlFpeEZRVUVyUWl4UFFVRXZRaXhEUVVGMVF5eExRVUYyUXl4RlFVRTRReXhKUVVFNVF5eERRVUZpTzBGQlEwRXNZVUZCU3l4UlFVRk1MRWRCUVdkQ0xFMUJRVTBzVlVGQlRpeEhRVUZ0UWl4TFFVRkxMRkZCUVhoRE8wRkJRMGc3UVVGRFJDeFJRVUZKTEdsQ1FVRnBRaXhKUVVGeVFpeEZRVUV5UWp0QlFVTjJRaXgxUWtGQlpTeGhRVUZoTEU5QlFXSXNRMEZCY1VJc1NVRkJja0lzUlVGQk1rSXNTVUZCTTBJc1JVRkJhVU1zVDBGQmFrTXNRMEZCZVVNc1MwRkJla01zUlVGQlowUXNTVUZCYUVRc1EwRkJaanRCUVVOQkxHRkJRVXNzVlVGQlRDeEhRVUZyUWl4TlFVRk5MRmxCUVU0c1IwRkJjVUlzUzBGQlN5eFZRVUUxUXp0QlFVTklPMEZCUTBRc1VVRkJTU3hMUVVGTExGTkJRVXdzUzBGQmJVSXNTVUZCZGtJc1JVRkJOa0k3UVVGRGVrSXNZVUZCU3l4SlFVRkpMRWxCUVVrc1EwRkJZaXhGUVVGblFpeEpRVUZKTEV0QlFVc3NVMEZCVEN4RFFVRmxMRTFCUVc1RExFVkJRVEpETEVkQlFUTkRMRVZCUVdkRU8wRkJRelZETEdsQ1FVRkxMRk5CUVV3c1EwRkJaU3hEUVVGbUxFVkJRV3RDTEZWQlFXeENMRU5CUVRaQ0xGVkJRVGRDTEVWQlFYbERMRmxCUVhwRE8wRkJRMGc3UVVGRFNqdEJRVU5FTEZkQlFVOHNTVUZCVUR0QlFVTklMRU5CWmtRN08wRkJhVUpCTEZOQlFWTXNXVUZCVkN4RFFVRnpRaXhQUVVGMFFpeEZRVUVyUWl4UFFVRXZRaXhGUVVGM1F6dEJRVU53UXl4UlFVRkpMRkZCUVZFc1UwRkJVaXhEUVVGclFpeERRVUZzUWl4RlFVRnhRaXhSUVVGUkxFMUJRVGRDTEUxQlFYbERMRTlCUVRkRExFVkJRWE5FTzBGQlEyeEVMRmxCUVVrc1dVRkJXU3hSUVVGUkxGTkJRVklzUTBGQmEwSXNVVUZCVVN4TlFVRXhRaXhEUVVGb1FqdEJRVU5CTEZsQlFVc3NVVUZCVVN4TlFVRlNMRWRCUVdsQ0xFTkJRV3BDTEVsQlFYTkNMRkZCUVZFc1RVRkJVaXhEUVVGbExGRkJRVkVzVFVGQlVpeEhRVUZwUWl4RFFVRm9ReXhOUVVGMVF5eEhRVUU1UkN4SlFVTkhMRlZCUVZVc1RVRkJWaXhEUVVGcFFpeERRVUZxUWl4TlFVRjNRaXhIUVVRelFpeEpRVVZITEZWQlFWVXNUVUZCVml4RFFVRnBRaXhEUVVGcVFpeE5RVUYzUWl4SFFVWXZRaXhGUVVWdlF6dEJRVU5vUXl4dFFrRkJUeXhKUVVGUU8wRkJRMGc3UVVGRFNqdEJRVU5FTEZkQlFVOHNTMEZCVUR0QlFVTklPenRCUVVWRUxFbEJRVWtzV1VGQldTeEZRVUZvUWpzN1FVRkZRU3hUUVVGVExGTkJRVlFzUTBGQmJVSXNVVUZCYmtJc1JVRkJOa0k3UVVGRGVrSXNVVUZCU1N4blFrRkJaMElzU1VGQlNTeG5Ra0ZCU2l4RlFVRndRanRCUVVOQkxGRkJRVWtzWlVGQlNqdEJRVU5CTEZGQlFVa3NiVUpCUVVvN1FVRkRRU3hSUVVGSkxFMUJRVTA3UVVGRFRpd3dRa0ZCYTBJc01FSkJRVlVzVVVGQlZpeEZRVUZ2UWp0QlFVTnNReXhuUWtGQlNTeFBRVUZQTEZGQlFWQXNTMEZCYjBJc1VVRkJlRUlzUlVGQmEwTTdRVUZET1VJc2RVSkJRVThzUzBGQlN5eFJRVUZNTEVOQlFXTXNVVUZCWkN4RFFVRlFPMEZCUTBnN1FVRkRSQ3hyUTBGQmMwSXNVVUZCZEVJN1FVRkRRU3h0UWtGQlR5eEpRVUZRTzBGQlEwZ3NVMEZRU3p0QlFWRk9MRzFDUVVGWExIRkNRVUZaTzBGQlEyNUNMREJDUVVGakxGTkJRV1FzUTBGQmQwSXNTMEZCZUVJc1EwRkJPRUlzWVVGQk9VSXNSVUZCTmtNc1UwRkJOME03UVVGRFNDeFRRVlpMTzBGQlYwNHNhMEpCUVZVc2EwSkJRVlVzU1VGQlZpeEZRVUZuUWp0QlFVTjBRaXhuUWtGQlNTeERRVUZETEVsQlFVd3NSVUZCVnp0QlFVTlFMSFZDUVVGUExHVkJRVkE3UVVGRFNEdEJRVU5FTEdkQ1FVRkpMRU5CUVVNc1ZVRkJWU3hKUVVGV0xFTkJRVXdzUlVGQmMwSTdRVUZEYkVJc2RVSkJRVThzUzBGQlN5eExRVUZNTEVOQlFWY3NSMEZCV0N4RlFVRm5RaXhEUVVGb1FpeERRVUZRTEVOQlFUSkNPMEZCUXpsQ08wRkJRMFFzWjBKQlFVa3NWVUZCVlN4SlFVRldMRU5CUVVvc1JVRkJjVUk3UVVGRGFrSXNhME5CUVd0Q0xFbEJRV3hDTzBGQlEwRXNkVUpCUVU4c1NVRkJVQ3hEUVVGaE8wRkJRMmhDTzBGQlEwUXNiVUpCUVU4c1MwRkJVRHRCUVVOSUxGTkJka0pMTzBGQmQwSk9MSEZDUVVGaExIRkNRVUZWTEVsQlFWWXNSVUZCWjBJc1ZVRkJhRUlzUlVGQk5FSTdRVUZEY2tNc1owSkJRVWtzUjBGQlNqdEJRVU5CTEdsQ1FVRkxMRWRCUVV3c1NVRkJXU3hWUVVGYUxFVkJRWGRDTzBGQlEzQkNMRzlDUVVGSkxGZEJRVmNzUjBGQldDeExRVUZ0UWl4RFFVRkRMRmRCUVZjc1YwRkJWeXhIUVVGWUxFTkJRVmdzUTBGQmVFSXNSVUZCY1VRN1FVRkRha1FzSzBKQlFWY3NWMEZCVnl4SFFVRllMRU5CUVZnc1NVRkJPRUlzVjBGQlZ5eEhRVUZZTEVOQlFUbENPMEZCUTBnN1FVRkRTanRCUVVORUxHZENRVUZKTEZkQlFWY3NTMEZCU3l4TFFVRk1MRU5CUVZjc1IwRkJXQ3hGUVVGblFpeERRVUZvUWl4RFFVRm1PMEZCUTBFc1owSkJRVWtzUTBGQlF5eFZRVUZWTEZGQlFWWXNRMEZCVEN4RlFVRXdRanRCUVVGRk8wRkJRM2hDTERCQ1FVRlZMRWxCUVZZc1NVRkJhMElzVlVGQmJFSTdRVUZEUVN3d1FrRkJWU3hSUVVGV0xFbEJRWE5DTEZWQlFYUkNPMEZCUTBnc1lVRklSQ3hOUVVkUE8wRkJRMGdzTUVKQlFWVXNTVUZCVml4SlFVRnJRaXh6UWtGQll5eFZRVUZWTEZGQlFWWXNRMEZCWkN4RFFVRnNRanRCUVVOQkxIRkNRVUZMTEVkQlFVd3NTVUZCV1N4VlFVRmFMRVZCUVhkQ08wRkJRM0JDTEhkQ1FVRkpMRTlCUVU4c1ZVRkJWU3hSUVVGV0xFVkJRVzlDTEVkQlFYQkNMRU5CUVZBc1MwRkJiME1zVjBGQmVFTXNSVUZCY1VRN1FVRkRha1FzYTBOQlFWVXNVVUZCVml4RlFVRnZRaXhIUVVGd1FpeEpRVUV5UWl4WFFVRlhMRWRCUVZnc1EwRkJNMEk3UVVGRFNEdEJRVU5FTERoQ1FVRlZMRWxCUVZZc1JVRkJaMElzUjBGQmFFSXNTVUZCZFVJc1YwRkJWeXhIUVVGWUxFTkJRWFpDTzBGQlEwZzdRVUZEU2p0QlFVTkVMRzFDUVVGUExFbEJRVkE3UVVGRFNDeFRRVGREU3p0QlFUaERUaXhyUWtGQlZTeHJRa0ZCVlN4UlFVRldMRVZCUVc5Q08wRkJRekZDTEdkQ1FVRkpMRk5CUVZNc1YwRkJZanRCUVVOQkxHZENRVUZKTEZGQlFVb3NSVUZCWXp0QlFVTldMSFZDUVVGUExGRkJRVkFzUTBGQlowSXNVVUZCYUVJN1FVRkRTRHRCUVVORUxHMUNRVUZQTEUxQlFWQTdRVUZEU0N4VFFYQkVTenRCUVhGRVRpeHJRa0ZCVlN4clFrRkJWU3hKUVVGV0xFVkJRV2RDTEUxQlFXaENMRVZCUVhkQ0xHTkJRWGhDTEVWQlFYZERMRzlDUVVGNFF5eEZRVUU0UkR0QlFVTndSU3huUWtGQlNTeE5RVUZOTEhGQ1FVRnhRaXhsUVVGeVFpeERRVUZXTzBGQlEwRXNaMEpCUVVrc1owSkJRV2RDTEhOQ1FVRnpRaXhWUVVGVkxFdEJRVllzUlVGQmFVSXNTVUZCYWtJc1JVRkJkVUlzVFVGQmRrSXNSVUZCSzBJN1FVRkRja1VzZFVKQlFVOHNiMEpCUVc5Q0xFdEJRWEJDTEVWQlFUSkNMRWxCUVROQ0xFVkJRV2xETEUxQlFXcERMRXRCUVRSRExFbEJRVWtzUzBGQlNpeEZRVUZYTEVsQlFWZ3NSVUZCYVVJc1RVRkJha0lzUTBGQmJrUTdRVUZEU0N4aFFVWnRRaXhIUVVWb1FpeEhRVVpLTzBGQlIwRXNaMEpCUVVrc1ZVRkJWU3hKUVVGSkxHZENRVUZLTEVOQlFYRkNMR0ZCUVhKQ0xFVkJRVzlETEV0QlFYQkRMRVZCUVRKRExHRkJRVE5ETEVWQlFUQkVMR05CUVRGRUxFVkJRVEJGTEc5Q1FVRXhSU3hEUVVGa08wRkJRMEVzWjBKQlFVa3NUMEZCVHl4TlFVRlFMRXRCUVd0Q0xGRkJRWFJDTEVWQlFXZERPMEZCUXpWQ0xIbENRVUZUTEVWQlFVTXNVVUZCVVN4TlFVRlVMRVZCUVZRN1FVRkRTRHRCUVVORUxHOUNRVUZSTEZOQlFWSXNRMEZCYTBJc1JVRkJiRUlzUlVGQmMwSXNUVUZCZEVJN1FVRkRRU3huUWtGQlNTeFJRVUZSTEZGQlFWRXNWMEZCVWl4RFFVRnZRaXhKUVVGd1FpeEZRVUV3UWl4TlFVRXhRaXhGUVVGclF5eEpRVUZzUXl4RlFVRjNReXhKUVVGNFF5eEZRVUU0UXl4RlFVRTVReXhEUVVGYU8wRkJRMEVzWjBKQlFVa3NRMEZCUXl4TFFVRkVMRWxCUVZVc2IwSkJRV1FzUlVGQmIwTTdRVUZEYUVNc2QwSkJRVkVzVVVGQlVTeHZRa0ZCVWl4RFFVRTJRaXhKUVVFM1FpeEZRVUZ0UXl4TlFVRnVReXhEUVVGU08wRkJRMGc3UVVGRFJDeHBRa0ZCU3l4TFFVRk1MRWRCUVdFc1MwRkJZanRCUVVOQkxHbENRVUZMTEU5QlFVd3NSMEZCWlN4UlFVRlJMRTlCUVhaQ08wRkJRMEVzYVVKQlFVc3NTMEZCVEN4SFFVRmpMRlZCUVZVc1NVRkJlRUk3UVVGRFFTeHRRa0ZCVHl4TFFVRkxMRXRCUVZvN1FVRkRTQ3hUUVhaRlN6dEJRWGRGVGl4M1FrRkJaMElzTUVKQlFWazdRVUZEZUVJc1owSkJRVWtzVTBGQlV5eEZRVUZpTzBGQlEwRXNhVUpCUVVzc1VVRkJUQ3hEUVVGakxFdEJRV1FzUTBGQmIwSXNUVUZCY0VJc1JVRkJORUlzVTBGQk5VSTdRVUZEUVN4dFFrRkJUeXhOUVVGUU8wRkJRMGdzVTBFMVJVczdRVUUyUlU0c01FSkJRV3RDTERCQ1FVRlZMRWxCUVZZc1JVRkJaMElzVFVGQmFFSXNSVUZCZDBJc1kwRkJlRUlzUlVGQmQwTXNiMEpCUVhoRExFVkJRVGhFTzBGQlF6VkZMR2RDUVVGSkxFMUJRVTBzY1VKQlFYRkNMR1ZCUVhKQ0xFTkJRVlk3UVVGRFFTeG5Ra0ZCU1N4blFrRkJaMElzYzBKQlFYTkNMRlZCUVZVc1MwRkJWaXhGUVVGcFFpeEpRVUZxUWl4RlFVRjFRaXhOUVVGMlFpeEZRVUVyUWp0QlFVTnlSU3gxUWtGQlR5eHZRa0ZCYjBJc1MwRkJjRUlzUlVGQk1rSXNTVUZCTTBJc1JVRkJhVU1zVFVGQmFrTXNTMEZCTkVNc1NVRkJTU3hMUVVGS0xFVkJRVmNzU1VGQldDeEZRVUZwUWl4TlFVRnFRaXhEUVVGdVJEdEJRVU5JTEdGQlJtMUNMRWRCUldoQ0xFZEJSa283UVVGSFFTeG5Ra0ZCU1N4VlFVRlZMRWxCUVVrc1owSkJRVW9zUTBGQmNVSXNZVUZCY2tJc1JVRkJiME1zU1VGQmNFTXNSVUZCTUVNc1lVRkJNVU1zUlVGQmVVUXNZMEZCZWtRc1JVRkJlVVVzYjBKQlFYcEZMRU5CUVdRN1FVRkRRU3huUWtGQlNTeFBRVUZQTEUxQlFWQXNTMEZCYTBJc1VVRkJkRUlzUlVGQlowTTdRVUZETlVJc2VVSkJRVk1zUlVGQlF5eFJRVUZSTEUxQlFWUXNSVUZCVkR0QlFVTklPMEZCUTBRc2IwSkJRVkVzVTBGQlVpeERRVUZyUWl4RlFVRnNRaXhGUVVGelFpeE5RVUYwUWp0QlFVTkJMRzlDUVVGUkxGZEJRVklzUTBGQmIwSXNTVUZCY0VJc1JVRkJNRUlzVFVGQk1VSXNSVUZCYTBNc1NVRkJiRU1zUlVGQmQwTXNTVUZCZUVNc1JVRkJPRU1zUlVGQk9VTTdRVUZEUVN4blFrRkJTU3h2UWtGQlNpeEZRVUV3UWp0QlFVTjBRaXgzUWtGQlVTeHZRa0ZCVWl4RFFVRTJRaXhKUVVFM1FpeEZRVUZ0UXl4TlFVRnVRenRCUVVOSU8wRkJRMFFzWjBKQlFVa3NVMEZCVXl4RlFVRmlPMEZCUTBFc2JVSkJRVThzVFVGQlVDeEhRVUZuUWl4UlFVRlJMRTFCUVhoQ08wRkJRMEVzYlVKQlFVOHNUMEZCVUN4SFFVRnBRaXhSUVVGUkxFOUJRWHBDTzBGQlEwRXNiVUpCUVU4c1MwRkJVQ3hIUVVGblFpeFBRVUZQTEUxQlFWQXNRMEZCWXl4TlFVRmtMRXRCUVhsQ0xFTkJRWHBETzBGQlEwRXNiVUpCUVU4c1RVRkJVRHRCUVVOSUxGTkJhRWRMTzBGQmFVZE9MRzFDUVVGWExIRkNRVUZaTzBGQlEyNUNMRzFDUVVGUExHTkJRV01zVTBGQlpDeERRVUYzUWl4TFFVRjRRaXhEUVVFNFFpeGhRVUU1UWl4RlFVRTJReXhUUVVFM1F5eERRVUZRTzBGQlEwZ3NVMEZ1UjBzN1FVRnZSMDRzYlVKQlFWY3NjVUpCUVZrN1FVRkRia0lzYlVKQlFVOHNZMEZCWXl4VFFVRmtMRU5CUVhkQ0xFdEJRWGhDTEVOQlFUaENMR0ZCUVRsQ0xFVkJRVFpETEZOQlFUZERMRU5CUVZBN1FVRkRTQ3hUUVhSSFN6dEJRWFZIVGl4elFrRkJZeXgzUWtGQldUdEJRVU4wUWl4dFFrRkJUeXhqUVVGakxGbEJRV1FzUTBGQk1rSXNTMEZCTTBJc1EwRkJhVU1zWVVGQmFrTXNSVUZCWjBRc1UwRkJhRVFzUTBGQlVEdEJRVU5JTEZOQmVrZExPMEZCTUVkT0xIVkNRVUZsTEhsQ1FVRlpPMEZCUTNaQ0xHMUNRVUZQTEdOQlFXTXNZVUZCWkN4RFFVRTBRaXhMUVVFMVFpeERRVUZyUXl4aFFVRnNReXhGUVVGcFJDeFRRVUZxUkN4RFFVRlFPMEZCUTBnc1UwRTFSMHM3UVVFMlIwNHNkMEpCUVdkQ0xEQkNRVUZaTzBGQlEzaENMRzFDUVVGUExHTkJRV01zWTBGQlpDeERRVUUyUWl4TFFVRTNRaXhEUVVGdFF5eGhRVUZ1UXl4RlFVRnJSQ3hUUVVGc1JDeERRVUZRTzBGQlEwZ3NVMEV2UjBzN1FVRm5TRTRzY1VKQlFXRXNkVUpCUVZrN1FVRkRja0lzTUVKQlFXTXNWMEZCWkN4RFFVRXdRaXhMUVVFeFFpeERRVUZuUXl4aFFVRm9ReXhGUVVFclF5eFRRVUV2UXp0QlFVTklMRk5CYkVoTE8wRkJiVWhPTEhWQ1FVRmxMSGxDUVVGWk8wRkJRM1pDTERCQ1FVRmpMR0ZCUVdRc1EwRkJORUlzUzBGQk5VSXNRMEZCYTBNc1lVRkJiRU1zUlVGQmFVUXNVMEZCYWtRN1FVRkRTQ3hUUVhKSVN6dEJRWE5JVGl4eFFrRkJZU3h4UWtGQlZTeFJRVUZXTEVWQlFXOUNMRlZCUVhCQ0xFVkJRV2RETEdOQlFXaERMRVZCUVdkRU8wRkJRM3BFTEdkQ1FVRkpMRTlCUVU4c1VVRkJVQ3hMUVVGdlFpeFJRVUZ3UWl4SlFVRm5ReXhEUVVGRExIRkNRVUZ4UWl4SlFVRnlRaXhEUVVFd1FpeFJRVUV4UWl4RFFVRnlReXhGUVVFd1JUdEJRVU4wUlN4elFrRkJUU3hKUVVGSkxFdEJRVW9zUTBGQlZTd3lSRUZCVml4RFFVRk9PMEZCUTBnN1FVRkRSQ3huUWtGQlNTeFBRVUZQTEZWQlFWQXNTMEZCYzBJc1VVRkJkRUlzU1VGQmEwTXNZVUZCWVN4RFFVRmlMRXRCUVcxQ0xFTkJRWEpFTEVsQlFUQkVMR0ZCUVdFc1MwRkJNMFVzUlVGQmEwWTdRVUZET1VVc2MwSkJRVTBzU1VGQlNTeExRVUZLTEVOQlFWVXNkME5CUVZZc1EwRkJUanRCUVVOSU8wRkJRMFFzWjBKQlFVa3NUMEZCVHl4WFFVRlhMRkZCUVZnc1EwRkJVQ3hMUVVGblF5eFhRVUZ3UXl4RlFVRnBSRHRCUVVNM1F5eHpRa0ZCVFN4SlFVRkpMRXRCUVVvc1EwRkJWU3cwUWtGQk5FSXNVVUZCTlVJc1IwRkJkVU1zVFVGQmRrTXNSMEZCWjBRc1YwRkJWeXhSUVVGWUxFTkJRVEZFTEVOQlFVNDdRVUZEU0R0QlFVTkVMR2RDUVVGSkxFOUJRVThzWjBKQlFXZENMRlZCUVdoQ0xFTkJRVkFzUzBGQmRVTXNWMEZCTTBNc1JVRkJkMFE3UVVGRGNFUXNjMEpCUVUwc1NVRkJTU3hMUVVGS0xFTkJRVlVzT0VKQlFUaENMR2RDUVVGblFpeFZRVUZvUWl4RFFVRTVRaXhIUVVFMFJDeE5RVUUxUkN4SFFVRnhSU3hWUVVFdlJTeERRVUZPTzBGQlEwZzdRVUZEUkN4MVFrRkJWeXhSUVVGWUxFbEJRWFZDTEZWQlFYWkNPMEZCUTBFc05FSkJRV2RDTEZWQlFXaENMRWxCUVRoQ0xGRkJRVGxDTzBGQlEwRXNhVU5CUVhGQ0xGRkJRWEpDTEVsQlFXbERMSEZDUVVGeFFpeFZRVUZ5UWl4SlFVRnRReXhqUVVGd1JUdEJRVU5CTEdsQ1FVRkxMRWxCUVVrc1VVRkJWQ3hKUVVGeFFpeFRRVUZ5UWl4RlFVRm5RenRCUVVNMVFpeHZRa0ZCU1N4WFFVRlhMRlZCUVZVc1VVRkJWaXhEUVVGbU8wRkJRMEVzYjBKQlFVa3NVMEZCVXl4UlFVRlVMRU5CUVVvc1JVRkJkMEk3UVVGRGNFSXNOa0pCUVZNc1ZVRkJWQ3hKUVVGMVFpeFRRVUZUTEZWQlFWUXNTMEZCZDBJc1UwRkJVeXhSUVVGVUxFTkJRUzlETzBGQlEwZzdRVUZEU2p0QlFVTktMRk5CTlVsTE8wRkJOa2xPTEdWQlFVOHNhVUpCUVZrN1FVRkRaaXd3UWtGQll5eExRVUZrTzBGQlEwRXNhVUpCUVVzc1MwRkJUQ3hIUVVGaExFbEJRV0k3UVVGRFFTeHBRa0ZCU3l4UFFVRk1MRWRCUVdVc1JVRkJaanRCUVVOQkxHbENRVUZMTEV0QlFVd3NSMEZCWVN4SlFVRmlPMEZCUTBnc1UwRnNTa3M3UVVGdFNrNHNhVUpCUVZNc1JVRnVTa2c3UVVGdlNrNHNaVUZCVHl4SlFYQktSRHRCUVhGS1RpeGxRVUZQTEVsQmNrcEVPMEZCYzBwT0xHOUNRVUZaTEZWQmRFcE9PMEZCZFVwT0xHOUNRVUZaTEZWQmRrcE9PMEZCZDBwT0xIZENRVUZuUWl4alFYaEtWanRCUVhsS1RpeHZRa0ZCV1R0QlFYcEtUaXhMUVVGV08wRkJNa3BCTEZGQlFVa3NVVUZCU2l4RFFVRmhMRmxCUVZrc1NVRkJla0k3UVVGRFFTeFhRVUZQTEVkQlFWQTdRVUZEU0RzN1FVRkZSRHRCUVVOQkxFbEJRVWtzVFVGQlRTeFhRVUZXTzBGQlEwRXNTVUZCU1N4WFFVRktMRU5CUVdkQ0xFOUJRV2hDTEVWQlFYbENMRzlDUVVGNlFqczdRVUZGUVR0QlFVTkJMRWxCUVVrc1IwRkJTaXhIUVVGVkxFZEJRVlk3UVVGRFFUdHJRa0ZEWlN4SE8wRkJRMlk3T3pzN096czdPenM3T3pzN096czdPenM3VVVOc2NFUm5RaXhUTEVkQlFVRXNVenRSUVhkQ1FTeFhMRWRCUVVFc1Z6dFJRV2RDUVN4WExFZEJRVUVzVnp0UlFWTkJMRk1zUjBGQlFTeFRPMUZCVlVFc2JVSXNSMEZCUVN4dFFqdFJRVlZCTEcxQ0xFZEJRVUVzYlVJN1VVRlhRU3huUWl4SFFVRkJMR2RDTzFGQmJVSkJMR1VzUjBGQlFTeGxPenM3TzBGQk0wbG9RanM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFYTkNRVHM3T3pzN1FVRkxRVHM3T3pzN096czdRVUZSUVRzN096czdRVUZMVHl4VFFVRlRMRk5CUVZRc1EwRkJiVUlzUjBGQmJrSXNSVUZCZDBJN08wRkJSVGRDTEUxQlFVa3NRMEZCUXl4SFFVRk1MRVZCUVZVc1RVRkJUU3hOUVVGTkxIZENRVUZPTEVOQlFVNDdPMEZCUlZZN1FVRkRRU3hOUVVGSkxFdEJRVXNzYzBaQlFWUTdRVUZEUVN4TlFVRkpMRkZCUVZFc1ZVRkJXanRCUVVOQkxFMUJRVWtzVVVGQlVTeEpRVUZKTEU5QlFVb3NRMEZCV1N4RlFVRmFMRVZCUVdkQ0xFdEJRV2hDTEVWQlFYVkNMRXRCUVhaQ0xFTkJRVFpDTEVkQlFUZENMRU5CUVZvN08wRkJSVUU3UVVGRFFTeE5RVUZKTEUxQlFVMHNRMEZCVGl4TlFVRmhMRWRCUVdwQ0xFVkJRWE5DTzBGQlEzQkNMRlZCUVUwc1EwRkJUaXhKUVVGWExFOUJRVmc3UVVGRFFTeFZRVUZOTEVOQlFVNHNTVUZCVnl4SFFVRllPMEZCUTBRN08wRkJSVVFzVFVGQlNTeFRRVUZUTzBGQlExZ3NWVUZCVFN4TlFVRk5MRU5CUVU0c1EwRkVTenRCUVVWWUxGbEJRVkVzVFVGQlRTeERRVUZPTEVOQlJrYzdRVUZIV0N4alFVRlZMRTFCUVUwc1EwRkJUanRCUVVoRExFZEJRV0k3TzBGQlRVRXNVMEZCVHl4TlFVRlFPMEZCUTBRN08wRkJSVTBzVTBGQlV5eFhRVUZVTEVOQlFYRkNMRXRCUVhKQ0xFVkJRVFJDTzBGQlEycERMRTFCUVVrc1dVRkJXU3hOUVVGTkxFOUJRVTRzUTBGQll5eEhRVUZrTEVOQlFXaENPenRCUVVWQkxFMUJRVWtzVTBGQlV6dEJRVU5ZTEdOQlFWVXNUVUZCVFN4VFFVRk9MRU5CUVdkQ0xFTkJRV2hDTEVWQlFXMUNMRk5CUVc1Q0xFTkJSRU03UVVGRldDeFpRVUZSTEUxQlFVMHNVMEZCVGl4RFFVRm5RaXhaUVVGWkxFTkJRVFZDTEVWQlFTdENMRTFCUVUwc1RVRkJja003UVVGR1J5eEhRVUZpT3p0QlFVdEJMRk5CUVU4c1RVRkJVRHRCUVVORU96dEJRVVZFT3pzN096dEJRVXRQTEZOQlFWTXNWMEZCVkN4RFFVRnhRaXhOUVVGeVFpeEZRVUUyUWp0QlFVTnNReXhUUVVGUExHOUNRVUZaTEUxQlFWb3NSVUZCYjBJc1RVRkJjRUlzUjBGQk5rSXNRMEZCTjBJc1IwRkJhVU1zUzBGQmFrTXNSMEZCZVVNc1NVRkJhRVE3UVVGRFJEczdRVUZGUkRzN096czdRVUZMVHl4VFFVRlRMRk5CUVZRc1EwRkJiVUlzUjBGQmJrSXNSVUZCZDBJN1FVRkROMEk3UVVGRFFTeE5RVUZKTEVkQlFVb3NSVUZCVXl4UFFVRlBMRXRCUVVzc1MwRkJUQ3hEUVVGWExIbENRVUZsTEVkQlFXWXNRMEZCV0N4RFFVRlFPMEZCUTFZN08wRkJSVVE3T3pzN08wRkJTMDhzVTBGQlV5eHRRa0ZCVkN4RFFVRTJRaXhUUVVFM1FpeEZRVUYzUXp0QlFVTTNReXhOUVVGSkxGbEJRVmtzVlVGQlZTeFBRVUZXTEVOQlFXdENMRWRCUVd4Q0xFTkJRV2hDTzBGQlEwRXNVMEZCVHl4WlFVRlpMRlZCUVZVc1UwRkJWaXhEUVVGdlFpeFpRVUZaTEVOQlFXaERMRVZCUVcxRExGVkJRVlVzVFVGQk4wTXNRMEZCV2l4SFFVRnRSU3hIUVVGdVJTeEhRVUY1UlN4VlFVRlZMRk5CUVZZc1EwRkJiMElzUTBGQmNFSXNSVUZCZFVJc1UwRkJka0lzUTBGQmFFWTdRVUZEUkRzN1FVRkZSRHM3T3pzN1FVRkxUeXhUUVVGVExHMUNRVUZVTEVOQlFUWkNMRTlCUVRkQ0xFVkJRWE5ETzBGQlF6TkRMRTFCUVVrc1RVRkJUU3hWUVVGVkxFOUJRVllzUTBGQlZqdEJRVU5CTEZOQlFVOHNTVUZCU1N4UlFVRktMRU5CUVdFc1QwRkJZaXhEUVVGeFFpeEhRVUZ5UWl4RlFVRXdRaXhGUVVFeFFpeEpRVUZuUXl4SFFVRm9ReXhIUVVGelF5eEpRVUZKTEUxQlFXcEVMRU5CUVhsRU8wRkJRekZFT3p0QlFVZEVPenM3T3p0QlFVdFBMRk5CUVZNc1owSkJRVlFzUTBGQk1FSXNWVUZCTVVJc1JVRkJjME03TzBGQlJUTkRPMEZCUTBFc1RVRkJTU3hYUVVGWExGTkJRVmdzUTBGQmNVSXNRMEZCY2tJc1JVRkJkMElzUTBGQmVFSXNUVUZCSzBJc1UwRkJia01zUlVGQk9FTTdRVUZETlVNc1VVRkJTU3hoUVVGaExGVkJRVlVzVlVGQlZpeERRVUZxUWpzN1FVRkZRVHRCUVVOQkxGRkJRVWtzVjBGQlZ5eE5RVUZZTEVsQlFYRkNMRmRCUVZjc1VVRkJjRU1zUlVGQk9FTTdRVUZETlVNc1lVRkJUeXhWUVVGUU8wRkJRMFFzUzBGR1JDeE5RVVZQTzBGQlEwd3NXVUZCVFN3eVFrRkJUanRCUVVORU96dEJRVVZJTzBGQlEwTXNSMEZZUkN4TlFWZFBPMEZCUTB3c1YwRkJUeXh2UWtGQmIwSXNWVUZCY0VJc1EwRkJVRHRCUVVORU8wRkJRMFk3TzBGQlJVMHNVMEZCVXl4bFFVRlVMRU5CUVhsQ0xFZEJRWHBDTEVWQlFUaENPMEZCUTI1RExFMUJRVWtzYTBKQlFXdENMRU5CUVVNc1dVRkJSQ3hGUVVGbExGTkJRV1lzUlVGQk1FSXNVVUZCTVVJc1JVRkJiME1zVTBGQmNFTXNRMEZCZEVJN1FVRkRRU3hOUVVGSkxGZEJRVmtzUjBGQlJDeERRVUZOTEV0QlFVNHNRMEZCV1N4TFFVRmFMRU5CUVdZN1FVRkRRU3hOUVVGSkxGbEJRVmtzVTBGQlV5eERRVUZVTEVOQlFXaENPenRCUVVWQkxGTkJRVThzWjBKQlFXZENMRTlCUVdoQ0xFTkJRWGRDTEZOQlFYaENMRTFCUVhWRExFTkJRVU1zUTBGQkwwTTdRVUZEUkNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lLR1oxYm1OMGFXOXVJR1VvZEN4dUxISXBlMloxYm1OMGFXOXVJSE1vYnl4MUtYdHBaaWdoYmx0dlhTbDdhV1lvSVhSYmIxMHBlM1poY2lCaFBYUjVjR1Z2WmlCeVpYRjFhWEpsUFQxY0ltWjFibU4wYVc5dVhDSW1KbkpsY1hWcGNtVTdhV1lvSVhVbUptRXBjbVYwZFhKdUlHRW9ieXdoTUNrN2FXWW9hU2x5WlhSMWNtNGdhU2h2TENFd0tUdDJZWElnWmoxdVpYY2dSWEp5YjNJb1hDSkRZVzV1YjNRZ1ptbHVaQ0J0YjJSMWJHVWdKMXdpSzI4clhDSW5YQ0lwTzNSb2NtOTNJR1l1WTI5a1pUMWNJazFQUkZWTVJWOU9UMVJmUms5VlRrUmNJaXhtZlhaaGNpQnNQVzViYjEwOWUyVjRjRzl5ZEhNNmUzMTlPM1JiYjExYk1GMHVZMkZzYkNoc0xtVjRjRzl5ZEhNc1puVnVZM1JwYjI0b1pTbDdkbUZ5SUc0OWRGdHZYVnN4WFZ0bFhUdHlaWFIxY200Z2N5aHVQMjQ2WlNsOUxHd3NiQzVsZUhCdmNuUnpMR1VzZEN4dUxISXBmWEpsZEhWeWJpQnVXMjlkTG1WNGNHOXlkSE45ZG1GeUlHazlkSGx3Wlc5bUlISmxjWFZwY21VOVBWd2lablZ1WTNScGIyNWNJaVltY21WeGRXbHlaVHRtYjNJb2RtRnlJRzg5TUR0dlBISXViR1Z1WjNSb08yOHJLeWx6S0hKYmIxMHBPM0psZEhWeWJpQnpmU2tpTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjYmx4dWNtVnhkV2x5WlNoY0ltTnZjbVV0YW5NdmMyaHBiVndpS1R0Y2JseHVjbVZ4ZFdseVpTaGNJbkpsWjJWdVpYSmhkRzl5TFhKMWJuUnBiV1V2Y25WdWRHbHRaVndpS1R0Y2JseHVjbVZ4ZFdseVpTaGNJbU52Y21VdGFuTXZabTR2Y21WblpYaHdMMlZ6WTJGd1pWd2lLVHRjYmx4dUx5b2daWE5zYVc1MElHMWhlQzFzWlc0NklEQWdLaTljYmx4dWFXWWdLR2RzYjJKaGJDNWZZbUZpWld4UWIyeDVabWxzYkNrZ2UxeHVJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0p2Ym14NUlHOXVaU0JwYm5OMFlXNWpaU0J2WmlCaVlXSmxiQzF3YjJ4NVptbHNiQ0JwY3lCaGJHeHZkMlZrWENJcE8xeHVmVnh1WjJ4dlltRnNMbDlpWVdKbGJGQnZiSGxtYVd4c0lEMGdkSEoxWlR0Y2JseHVMeThnVTJodmRXeGtJR0psSUhKbGJXOTJaV1FnYVc0Z2RHaGxJRzVsZUhRZ2JXRnFiM0lnY21Wc1pXRnpaVHBjYmx4dWRtRnlJRVJGUmtsT1JWOVFVazlRUlZKVVdTQTlJRndpWkdWbWFXNWxVSEp2Y0dWeWRIbGNJanRjYm1aMWJtTjBhVzl1SUdSbFptbHVaU2hQTENCclpYa3NJSFpoYkhWbEtTQjdYRzRnSUU5YmEyVjVYU0I4ZkNCUFltcGxZM1JiUkVWR1NVNUZYMUJTVDFCRlVsUlpYU2hQTENCclpYa3NJSHRjYmlBZ0lDQjNjbWwwWVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdkbUZzZFdVNklIWmhiSFZsWEc0Z0lIMHBPMXh1ZlZ4dVhHNWtaV1pwYm1Vb1UzUnlhVzVuTG5CeWIzUnZkSGx3WlN3Z1hDSndZV1JNWldaMFhDSXNJRndpWENJdWNHRmtVM1JoY25RcE8xeHVaR1ZtYVc1bEtGTjBjbWx1Wnk1d2NtOTBiM1I1Y0dVc0lGd2ljR0ZrVW1sbmFIUmNJaXdnWENKY0lpNXdZV1JGYm1RcE8xeHVYRzVjSW5CdmNDeHlaWFpsY25ObExITm9hV1owTEd0bGVYTXNkbUZzZFdWekxHVnVkSEpwWlhNc2FXNWtaWGhQWml4bGRtVnllU3h6YjIxbExHWnZja1ZoWTJnc2JXRndMR1pwYkhSbGNpeG1hVzVrTEdacGJtUkpibVJsZUN4cGJtTnNkV1JsY3l4cWIybHVMSE5zYVdObExHTnZibU5oZEN4d2RYTm9MSE53YkdsalpTeDFibk5vYVdaMExITnZjblFzYkdGemRFbHVaR1Y0VDJZc2NtVmtkV05sTEhKbFpIVmpaVkpwWjJoMExHTnZjSGxYYVhSb2FXNHNabWxzYkZ3aUxuTndiR2wwS0Z3aUxGd2lLUzVtYjNKRllXTm9LR1oxYm1OMGFXOXVJQ2hyWlhrcElIdGNiaUFnVzExYmEyVjVYU0FtSmlCa1pXWnBibVVvUVhKeVlYa3NJR3RsZVN3Z1JuVnVZM1JwYjI0dVkyRnNiQzVpYVc1a0tGdGRXMnRsZVYwcEtUdGNibjBwT3lJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2V5QmNJbVJsWm1GMWJIUmNJam9nY21WeGRXbHlaU2hjSW1OdmNtVXRhbk12YkdsaWNtRnllUzltYmk5cWMyOXVMM04wY21sdVoybG1lVndpS1N3Z1gxOWxjMDF2WkhWc1pUb2dkSEoxWlNCOU95SXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdleUJjSW1SbFptRjFiSFJjSWpvZ2NtVnhkV2x5WlNoY0ltTnZjbVV0YW5NdmJHbGljbUZ5ZVM5bWJpOXZZbXBsWTNRdllYTnphV2R1WENJcExDQmZYMlZ6VFc5a2RXeGxPaUIwY25WbElIMDdJaXdpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3SUZ3aVpHVm1ZWFZzZEZ3aU9pQnlaWEYxYVhKbEtGd2lZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjlpYW1WamRDOWpjbVZoZEdWY0lpa3NJRjlmWlhOTmIyUjFiR1U2SUhSeWRXVWdmVHNpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhzZ1hDSmtaV1poZFd4MFhDSTZJSEpsY1hWcGNtVW9YQ0pqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YjJKcVpXTjBMMlJsWm1sdVpTMXdjbTl3WlhKMGVWd2lLU3dnWDE5bGMwMXZaSFZzWlRvZ2RISjFaU0I5T3lJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2V5QmNJbVJsWm1GMWJIUmNJam9nY21WeGRXbHlaU2hjSW1OdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2WjJWMExYQnliM1J2ZEhsd1pTMXZabHdpS1N3Z1gxOWxjMDF2WkhWc1pUb2dkSEoxWlNCOU95SXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdleUJjSW1SbFptRjFiSFJjSWpvZ2NtVnhkV2x5WlNoY0ltTnZjbVV0YW5NdmJHbGljbUZ5ZVM5bWJpOXZZbXBsWTNRdmFYTXRabkp2ZW1WdVhDSXBMQ0JmWDJWelRXOWtkV3hsT2lCMGNuVmxJSDA3SWl3aWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN0lGd2laR1ZtWVhWc2RGd2lPaUJ5WlhGMWFYSmxLRndpWTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDI5aWFtVmpkQzlyWlhselhDSXBMQ0JmWDJWelRXOWtkV3hsT2lCMGNuVmxJSDA3SWl3aWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN0lGd2laR1ZtWVhWc2RGd2lPaUJ5WlhGMWFYSmxLRndpWTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDI5aWFtVmpkQzl6WlhRdGNISnZkRzkwZVhCbExXOW1YQ0lwTENCZlgyVnpUVzlrZFd4bE9pQjBjblZsSUgwN0lpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdJRndpWkdWbVlYVnNkRndpT2lCeVpYRjFhWEpsS0Z3aVkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwzQnliMjFwYzJWY0lpa3NJRjlmWlhOTmIyUjFiR1U2SUhSeWRXVWdmVHNpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhzZ1hDSmtaV1poZFd4MFhDSTZJSEpsY1hWcGNtVW9YQ0pqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YzNsdFltOXNYQ0lwTENCZlgyVnpUVzlrZFd4bE9pQjBjblZsSUgwN0lpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdJRndpWkdWbVlYVnNkRndpT2lCeVpYRjFhWEpsS0Z3aVkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwzTjViV0p2YkM5cGRHVnlZWFJ2Y2x3aUtTd2dYMTlsYzAxdlpIVnNaVG9nZEhKMVpTQjlPeUlzSWx3aWRYTmxJSE4wY21samRGd2lPMXh1WEc1bGVIQnZjblJ6TGw5ZlpYTk5iMlIxYkdVZ1BTQjBjblZsTzF4dVhHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQm1kVzVqZEdsdmJpQW9hVzV6ZEdGdVkyVXNJRU52Ym5OMGNuVmpkRzl5S1NCN1hHNGdJR2xtSUNnaEtHbHVjM1JoYm1ObElHbHVjM1JoYm1ObGIyWWdRMjl1YzNSeWRXTjBiM0lwS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lrTmhibTV2ZENCallXeHNJR0VnWTJ4aGMzTWdZWE1nWVNCbWRXNWpkR2x2Ymx3aUtUdGNiaUFnZlZ4dWZUc2lMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNibHh1Wlhod2IzSjBjeTVmWDJWelRXOWtkV3hsSUQwZ2RISjFaVHRjYmx4dWRtRnlJRjlrWldacGJtVlFjbTl3WlhKMGVTQTlJSEpsY1hWcGNtVW9YQ0l1TGk5amIzSmxMV3B6TDI5aWFtVmpkQzlrWldacGJtVXRjSEp2Y0dWeWRIbGNJaWs3WEc1Y2JuWmhjaUJmWkdWbWFXNWxVSEp2Y0dWeWRIa3lJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaGZaR1ZtYVc1bFVISnZjR1Z5ZEhrcE8xeHVYRzVtZFc1amRHbHZiaUJmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtHOWlhaWtnZXlCeVpYUjFjbTRnYjJKcUlDWW1JRzlpYWk1ZlgyVnpUVzlrZFd4bElEOGdiMkpxSURvZ2V5QmtaV1poZFd4ME9pQnZZbW9nZlRzZ2ZWeHVYRzVsZUhCdmNuUnpMbVJsWm1GMWJIUWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJR1oxYm1OMGFXOXVJR1JsWm1sdVpWQnliM0JsY25ScFpYTW9kR0Z5WjJWMExDQndjbTl3Y3lrZ2UxeHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2NISnZjSE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lIWmhjaUJrWlhOamNtbHdkRzl5SUQwZ2NISnZjSE5iYVYwN1hHNGdJQ0FnSUNCa1pYTmpjbWx3ZEc5eUxtVnVkVzFsY21GaWJHVWdQU0JrWlhOamNtbHdkRzl5TG1WdWRXMWxjbUZpYkdVZ2ZId2dabUZzYzJVN1hHNGdJQ0FnSUNCa1pYTmpjbWx3ZEc5eUxtTnZibVpwWjNWeVlXSnNaU0E5SUhSeWRXVTdYRzRnSUNBZ0lDQnBaaUFvWENKMllXeDFaVndpSUdsdUlHUmxjMk55YVhCMGIzSXBJR1JsYzJOeWFYQjBiM0l1ZDNKcGRHRmliR1VnUFNCMGNuVmxPMXh1SUNBZ0lDQWdLREFzSUY5a1pXWnBibVZRY205d1pYSjBlVEl1WkdWbVlYVnNkQ2tvZEdGeVoyVjBMQ0JrWlhOamNtbHdkRzl5TG10bGVTd2daR1Z6WTNKcGNIUnZjaWs3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJQ2hEYjI1emRISjFZM1J2Y2l3Z2NISnZkRzlRY205d2N5d2djM1JoZEdsalVISnZjSE1wSUh0Y2JpQWdJQ0JwWmlBb2NISnZkRzlRY205d2N5a2daR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5aERiMjV6ZEhKMVkzUnZjaTV3Y205MGIzUjVjR1VzSUhCeWIzUnZVSEp2Y0hNcE8xeHVJQ0FnSUdsbUlDaHpkR0YwYVdOUWNtOXdjeWtnWkdWbWFXNWxVSEp2Y0dWeWRHbGxjeWhEYjI1emRISjFZM1J2Y2l3Z2MzUmhkR2xqVUhKdmNITXBPMXh1SUNBZ0lISmxkSFZ5YmlCRGIyNXpkSEoxWTNSdmNqdGNiaUFnZlR0Y2JuMG9LVHNpTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjYmx4dVpYaHdiM0owY3k1ZlgyVnpUVzlrZFd4bElEMGdkSEoxWlR0Y2JseHVkbUZ5SUY5elpYUlFjbTkwYjNSNWNHVlBaaUE5SUhKbGNYVnBjbVVvWENJdUxpOWpiM0psTFdwekwyOWlhbVZqZEM5elpYUXRjSEp2ZEc5MGVYQmxMVzltWENJcE8xeHVYRzUyWVhJZ1gzTmxkRkJ5YjNSdmRIbHdaVTltTWlBOUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvWDNObGRGQnliM1J2ZEhsd1pVOW1LVHRjYmx4dWRtRnlJRjlqY21WaGRHVWdQU0J5WlhGMWFYSmxLRndpTGk0dlkyOXlaUzFxY3k5dlltcGxZM1F2WTNKbFlYUmxYQ0lwTzF4dVhHNTJZWElnWDJOeVpXRjBaVElnUFNCZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBLRjlqY21WaGRHVXBPMXh1WEc1MllYSWdYM1I1Y0dWdlpqSWdQU0J5WlhGMWFYSmxLRndpTGk0dmFHVnNjR1Z5Y3k5MGVYQmxiMlpjSWlrN1hHNWNiblpoY2lCZmRIbHdaVzltTXlBOUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvWDNSNWNHVnZaaklwTzF4dVhHNW1kVzVqZEdsdmJpQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0c5aWFpa2dleUJ5WlhSMWNtNGdiMkpxSUNZbUlHOWlhaTVmWDJWelRXOWtkV3hsSUQ4Z2IySnFJRG9nZXlCa1pXWmhkV3gwT2lCdlltb2dmVHNnZlZ4dVhHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQm1kVzVqZEdsdmJpQW9jM1ZpUTJ4aGMzTXNJSE4xY0dWeVEyeGhjM01wSUh0Y2JpQWdhV1lnS0hSNWNHVnZaaUJ6ZFhCbGNrTnNZWE56SUNFOVBTQmNJbVoxYm1OMGFXOXVYQ0lnSmlZZ2MzVndaWEpEYkdGemN5QWhQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pUZFhCbGNpQmxlSEJ5WlhOemFXOXVJRzExYzNRZ1pXbDBhR1Z5SUdKbElHNTFiR3dnYjNJZ1lTQm1kVzVqZEdsdmJpd2dibTkwSUZ3aUlDc2dLSFI1Y0dWdlppQnpkWEJsY2tOc1lYTnpJRDA5UFNCY0luVnVaR1ZtYVc1bFpGd2lJRDhnWENKMWJtUmxabWx1WldSY0lpQTZJQ2d3TENCZmRIbHdaVzltTXk1a1pXWmhkV3gwS1NoemRYQmxja05zWVhOektTa3BPMXh1SUNCOVhHNWNiaUFnYzNWaVEyeGhjM011Y0hKdmRHOTBlWEJsSUQwZ0tEQXNJRjlqY21WaGRHVXlMbVJsWm1GMWJIUXBLSE4xY0dWeVEyeGhjM01nSmlZZ2MzVndaWEpEYkdGemN5NXdjbTkwYjNSNWNHVXNJSHRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjam9nZTF4dUlDQWdJQ0FnZG1Gc2RXVTZJSE4xWWtOc1lYTnpMRnh1SUNBZ0lDQWdaVzUxYldWeVlXSnNaVG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQjNjbWwwWVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlZ4dUlDQWdJSDFjYmlBZ2ZTazdYRzRnSUdsbUlDaHpkWEJsY2tOc1lYTnpLU0JmYzJWMFVISnZkRzkwZVhCbFQyWXlMbVJsWm1GMWJIUWdQeUFvTUN3Z1gzTmxkRkJ5YjNSdmRIbHdaVTltTWk1a1pXWmhkV3gwS1NoemRXSkRiR0Z6Y3l3Z2MzVndaWEpEYkdGemN5a2dPaUJ6ZFdKRGJHRnpjeTVmWDNCeWIzUnZYMThnUFNCemRYQmxja05zWVhOek8xeHVmVHNpTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjYmx4dVpYaHdiM0owY3k1ZlgyVnpUVzlrZFd4bElEMGdkSEoxWlR0Y2JseHVkbUZ5SUY5MGVYQmxiMll5SUQwZ2NtVnhkV2x5WlNoY0lpNHVMMmhsYkhCbGNuTXZkSGx3Wlc5bVhDSXBPMXh1WEc1MllYSWdYM1I1Y0dWdlpqTWdQU0JmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtGOTBlWEJsYjJZeUtUdGNibHh1Wm5WdVkzUnBiMjRnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaHZZbW9wSUhzZ2NtVjBkWEp1SUc5aWFpQW1KaUJ2WW1vdVgxOWxjMDF2WkhWc1pTQS9JRzlpYWlBNklIc2daR1ZtWVhWc2REb2diMkpxSUgwN0lIMWNibHh1Wlhod2IzSjBjeTVrWldaaGRXeDBJRDBnWm5WdVkzUnBiMjRnS0hObGJHWXNJR05oYkd3cElIdGNiaUFnYVdZZ0tDRnpaV3htS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUZKbFptVnlaVzVqWlVWeWNtOXlLRndpZEdocGN5Qm9ZWE51SjNRZ1ltVmxiaUJwYm1sMGFXRnNhWE5sWkNBdElITjFjR1Z5S0NrZ2FHRnpiaWQwSUdKbFpXNGdZMkZzYkdWa1hDSXBPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJR05oYkd3Z0ppWWdLQ2gwZVhCbGIyWWdZMkZzYkNBOVBUMGdYQ0oxYm1SbFptbHVaV1JjSWlBL0lGd2lkVzVrWldacGJtVmtYQ0lnT2lBb01Dd2dYM1I1Y0dWdlpqTXVaR1ZtWVhWc2RDa29ZMkZzYkNrcElEMDlQU0JjSW05aWFtVmpkRndpSUh4OElIUjVjR1Z2WmlCallXeHNJRDA5UFNCY0ltWjFibU4wYVc5dVhDSXBJRDhnWTJGc2JDQTZJSE5sYkdZN1hHNTlPeUlzSWx3aWRYTmxJSE4wY21samRGd2lPMXh1WEc1bGVIQnZjblJ6TGw5ZlpYTk5iMlIxYkdVZ1BTQjBjblZsTzF4dVhHNTJZWElnWDJsMFpYSmhkRzl5SUQwZ2NtVnhkV2x5WlNoY0lpNHVMMk52Y21VdGFuTXZjM2x0WW05c0wybDBaWEpoZEc5eVhDSXBPMXh1WEc1MllYSWdYMmwwWlhKaGRHOXlNaUE5SUY5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUW9YMmwwWlhKaGRHOXlLVHRjYmx4dWRtRnlJRjl6ZVcxaWIyd2dQU0J5WlhGMWFYSmxLRndpTGk0dlkyOXlaUzFxY3k5emVXMWliMnhjSWlrN1hHNWNiblpoY2lCZmMzbHRZbTlzTWlBOUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvWDNONWJXSnZiQ2s3WEc1Y2JuWmhjaUJmZEhsd1pXOW1JRDBnZEhsd1pXOW1JRjl6ZVcxaWIyd3lMbVJsWm1GMWJIUWdQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpQW1KaUIwZVhCbGIyWWdYMmwwWlhKaGRHOXlNaTVrWldaaGRXeDBJRDA5UFNCY0luTjViV0p2YkZ3aUlEOGdablZ1WTNScGIyNGdLRzlpYWlrZ2V5QnlaWFIxY200Z2RIbHdaVzltSUc5aWFqc2dmU0E2SUdaMWJtTjBhVzl1SUNodlltb3BJSHNnY21WMGRYSnVJRzlpYWlBbUppQjBlWEJsYjJZZ1gzTjViV0p2YkRJdVpHVm1ZWFZzZENBOVBUMGdYQ0ptZFc1amRHbHZibHdpSUNZbUlHOWlhaTVqYjI1emRISjFZM1J2Y2lBOVBUMGdYM041YldKdmJESXVaR1ZtWVhWc2RDQS9JRndpYzNsdFltOXNYQ0lnT2lCMGVYQmxiMllnYjJKcU95QjlPMXh1WEc1bWRXNWpkR2x2YmlCZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBLRzlpYWlrZ2V5QnlaWFIxY200Z2IySnFJQ1ltSUc5aWFpNWZYMlZ6VFc5a2RXeGxJRDhnYjJKcUlEb2dleUJrWldaaGRXeDBPaUJ2WW1vZ2ZUc2dmVnh1WEc1bGVIQnZjblJ6TG1SbFptRjFiSFFnUFNCMGVYQmxiMllnWDNONWJXSnZiREl1WkdWbVlYVnNkQ0E5UFQwZ1hDSm1kVzVqZEdsdmJsd2lJQ1ltSUY5MGVYQmxiMllvWDJsMFpYSmhkRzl5TWk1a1pXWmhkV3gwS1NBOVBUMGdYQ0p6ZVcxaWIyeGNJaUEvSUdaMWJtTjBhVzl1SUNodlltb3BJSHRjYmlBZ2NtVjBkWEp1SUhSNWNHVnZaaUJ2WW1vZ1BUMDlJRndpZFc1a1pXWnBibVZrWENJZ1B5QmNJblZ1WkdWbWFXNWxaRndpSURvZ1gzUjVjR1Z2Wmlodlltb3BPMXh1ZlNBNklHWjFibU4wYVc5dUlDaHZZbW9wSUh0Y2JpQWdjbVYwZFhKdUlHOWlhaUFtSmlCMGVYQmxiMllnWDNONWJXSnZiREl1WkdWbVlYVnNkQ0E5UFQwZ1hDSm1kVzVqZEdsdmJsd2lJQ1ltSUc5aWFpNWpiMjV6ZEhKMVkzUnZjaUE5UFQwZ1gzTjViV0p2YkRJdVpHVm1ZWFZzZENBL0lGd2ljM2x0WW05c1hDSWdPaUIwZVhCbGIyWWdiMkpxSUQwOVBTQmNJblZ1WkdWbWFXNWxaRndpSUQ4Z1hDSjFibVJsWm1sdVpXUmNJaUE2SUY5MGVYQmxiMllvYjJKcUtUdGNibjA3SWl3aWNtVnhkV2x5WlNnbkxpNHZMaTR2Ylc5a2RXeGxjeTlqYjNKbExuSmxaMlY0Y0M1bGMyTmhjR1VuS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVnhkV2x5WlNnbkxpNHZMaTR2Ylc5a2RXeGxjeTlmWTI5eVpTY3BMbEpsWjBWNGNDNWxjMk5oY0dVN0lpd2lkbUZ5SUdOdmNtVWdJRDBnY21WeGRXbHlaU2duTGk0dkxpNHZiVzlrZFd4bGN5OWZZMjl5WlNjcFhHNGdJQ3dnSkVwVFQwNGdQU0JqYjNKbExrcFRUMDRnZkh3Z0tHTnZjbVV1U2xOUFRpQTlJSHR6ZEhKcGJtZHBabms2SUVwVFQwNHVjM1J5YVc1bmFXWjVmU2s3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUhOMGNtbHVaMmxtZVNocGRDbDdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMV3hwYm1VZ2JtOHRkVzUxYzJWa0xYWmhjbk5jYmlBZ2NtVjBkWEp1SUNSS1UwOU9Mbk4wY21sdVoybG1lUzVoY0hCc2VTZ2tTbE5QVGl3Z1lYSm5kVzFsYm5SektUdGNibjA3SWl3aWNtVnhkV2x5WlNnbkxpNHZMaTR2Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG1GemMybG5iaWNwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCeVpYRjFhWEpsS0NjdUxpOHVMaTl0YjJSMWJHVnpMMTlqYjNKbEp5a3VUMkpxWldOMExtRnpjMmxuYmpzaUxDSnlaWEYxYVhKbEtDY3VMaTh1TGk5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdVkzSmxZWFJsSnlrN1hHNTJZWElnSkU5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZYMk52Y21VbktTNVBZbXBsWTNRN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUlHTnlaV0YwWlNoUUxDQkVLWHRjYmlBZ2NtVjBkWEp1SUNSUFltcGxZM1F1WTNKbFlYUmxLRkFzSUVRcE8xeHVmVHNpTENKeVpYRjFhWEpsS0NjdUxpOHVMaTl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1WkdWbWFXNWxMWEJ5YjNCbGNuUjVKeWs3WEc1MllYSWdKRTlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR1THk0dUwyMXZaSFZzWlhNdlgyTnZjbVVuS1M1UFltcGxZM1E3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUdSbFptbHVaVkJ5YjNCbGNuUjVLR2wwTENCclpYa3NJR1JsYzJNcGUxeHVJQ0J5WlhSMWNtNGdKRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNocGRDd2dhMlY1TENCa1pYTmpLVHRjYm4wN0lpd2ljbVZ4ZFdseVpTZ25MaTR2TGk0dmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtZGxkQzF3Y205MGIzUjVjR1V0YjJZbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdjbVZ4ZFdseVpTZ25MaTR2TGk0dmJXOWtkV3hsY3k5ZlkyOXlaU2NwTGs5aWFtVmpkQzVuWlhSUWNtOTBiM1I1Y0dWUFpqc2lMQ0p5WlhGMWFYSmxLQ2N1TGk4dUxpOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVhWE10Wm5KdmVtVnVKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhKbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZYMk52Y21VbktTNVBZbXBsWTNRdWFYTkdjbTk2Wlc0N0lpd2ljbVZ4ZFdseVpTZ25MaTR2TGk0dmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtdGxlWE1uS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVnhkV2x5WlNnbkxpNHZMaTR2Ylc5a2RXeGxjeTlmWTI5eVpTY3BMazlpYW1WamRDNXJaWGx6T3lJc0luSmxjWFZwY21Vb0p5NHVMeTR1TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1elpYUXRjSEp2ZEc5MGVYQmxMVzltSnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlISmxjWFZwY21Vb0p5NHVMeTR1TDIxdlpIVnNaWE12WDJOdmNtVW5LUzVQWW1wbFkzUXVjMlYwVUhKdmRHOTBlWEJsVDJZN0lpd2ljbVZ4ZFdseVpTZ25MaTR2Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG5SdkxYTjBjbWx1WnljcE8xeHVjbVZ4ZFdseVpTZ25MaTR2Ylc5a2RXeGxjeTlsY3pZdWMzUnlhVzVuTG1sMFpYSmhkRzl5SnlrN1hHNXlaWEYxYVhKbEtDY3VMaTl0YjJSMWJHVnpMM2RsWWk1a2IyMHVhWFJsY21GaWJHVW5LVHRjYm5KbGNYVnBjbVVvSnk0dUwyMXZaSFZzWlhNdlpYTTJMbkJ5YjIxcGMyVW5LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnY21WeGRXbHlaU2duTGk0dmJXOWtkV3hsY3k5ZlkyOXlaU2NwTGxCeWIyMXBjMlU3SWl3aWNtVnhkV2x5WlNnbkxpNHZMaTR2Ylc5a2RXeGxjeTlsY3pZdWMzbHRZbTlzSnlrN1hHNXlaWEYxYVhKbEtDY3VMaTh1TGk5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdWRHOHRjM1J5YVc1bkp5azdYRzV5WlhGMWFYSmxLQ2N1TGk4dUxpOXRiMlIxYkdWekwyVnpOeTV6ZVcxaWIyd3VZWE41Ym1NdGFYUmxjbUYwYjNJbktUdGNibkpsY1hWcGNtVW9KeTR1THk0dUwyMXZaSFZzWlhNdlpYTTNMbk41YldKdmJDNXZZbk5sY25aaFlteGxKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhKbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZYMk52Y21VbktTNVRlVzFpYjJ3N0lpd2ljbVZ4ZFdseVpTZ25MaTR2TGk0dmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxtbDBaWEpoZEc5eUp5azdYRzV5WlhGMWFYSmxLQ2N1TGk4dUxpOXRiMlIxYkdWekwzZGxZaTVrYjIwdWFYUmxjbUZpYkdVbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdjbVZ4ZFdseVpTZ25MaTR2TGk0dmJXOWtkV3hsY3k5ZmQydHpMV1Y0ZENjcExtWW9KMmwwWlhKaGRHOXlKeWs3SWl3aWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUdsbUtIUjVjR1Z2WmlCcGRDQWhQU0FuWm5WdVkzUnBiMjRuS1hSb2NtOTNJRlI1Y0dWRmNuSnZjaWhwZENBcklDY2dhWE1nYm05MElHRWdablZ1WTNScGIyNGhKeWs3WEc0Z0lISmxkSFZ5YmlCcGREdGNibjA3SWl3aWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlncGV5QXZLaUJsYlhCMGVTQXFMeUI5T3lJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2FYUXNJRU52Ym5OMGNuVmpkRzl5TENCdVlXMWxMQ0JtYjNKaWFXUmtaVzVHYVdWc1pDbDdYRzRnSUdsbUtDRW9hWFFnYVc1emRHRnVZMlZ2WmlCRGIyNXpkSEoxWTNSdmNpa2dmSHdnS0dadmNtSnBaR1JsYmtacFpXeGtJQ0U5UFNCMWJtUmxabWx1WldRZ0ppWWdabTl5WW1sa1pHVnVSbWxsYkdRZ2FXNGdhWFFwS1h0Y2JpQWdJQ0IwYUhKdmR5QlVlWEJsUlhKeWIzSW9ibUZ0WlNBcklDYzZJR2x1WTI5eWNtVmpkQ0JwYm5adlkyRjBhVzl1SVNjcE8xeHVJQ0I5SUhKbGRIVnliaUJwZER0Y2JuMDdJaXdpZG1GeUlHbHpUMkpxWldOMElEMGdjbVZ4ZFdseVpTZ25MaTlmYVhNdGIySnFaV04wSnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHbDBLWHRjYmlBZ2FXWW9JV2x6VDJKcVpXTjBLR2wwS1NsMGFISnZkeUJVZVhCbFJYSnliM0lvYVhRZ0t5QW5JR2x6SUc1dmRDQmhiaUJ2WW1wbFkzUWhKeWs3WEc0Z0lISmxkSFZ5YmlCcGREdGNibjA3SWl3aUx5OGdabUZzYzJVZ0xUNGdRWEp5WVhramFXNWtaWGhQWmx4dUx5OGdkSEoxWlNBZ0xUNGdRWEp5WVhramFXNWpiSFZrWlhOY2JuWmhjaUIwYjBsUFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTFwYjJKcVpXTjBKeWxjYmlBZ0xDQjBiMHhsYm1kMGFDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXNaVzVuZEdnbktWeHVJQ0FzSUhSdlNXNWtaWGdnSUNBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFdsdVpHVjRKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0VsVFgwbE9RMHhWUkVWVEtYdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVLQ1IwYUdsekxDQmxiQ3dnWm5KdmJVbHVaR1Y0S1h0Y2JpQWdJQ0IyWVhJZ1R5QWdJQ0FnSUQwZ2RHOUpUMkpxWldOMEtDUjBhR2x6S1Z4dUlDQWdJQ0FnTENCc1pXNW5kR2dnUFNCMGIweGxibWQwYUNoUExteGxibWQwYUNsY2JpQWdJQ0FnSUN3Z2FXNWtaWGdnSUQwZ2RHOUpibVJsZUNobWNtOXRTVzVrWlhnc0lHeGxibWQwYUNsY2JpQWdJQ0FnSUN3Z2RtRnNkV1U3WEc0Z0lDQWdMeThnUVhKeVlYa2phVzVqYkhWa1pYTWdkWE5sY3lCVFlXMWxWbUZzZFdWYVpYSnZJR1Z4ZFdGc2FYUjVJR0ZzWjI5eWFYUm9iVnh1SUNBZ0lHbG1LRWxUWDBsT1EweFZSRVZUSUNZbUlHVnNJQ0U5SUdWc0tYZG9hV3hsS0d4bGJtZDBhQ0ErSUdsdVpHVjRLWHRjYmlBZ0lDQWdJSFpoYkhWbElEMGdUMXRwYm1SbGVDc3JYVHRjYmlBZ0lDQWdJR2xtS0haaGJIVmxJQ0U5SUhaaGJIVmxLWEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJQzh2SUVGeWNtRjVJM1J2U1c1a1pYZ2dhV2R1YjNKbGN5Qm9iMnhsY3l3Z1FYSnlZWGtqYVc1amJIVmtaWE1nTFNCdWIzUmNiaUFnSUNCOUlHVnNjMlVnWm05eUtEdHNaVzVuZEdnZ1BpQnBibVJsZURzZ2FXNWtaWGdyS3lscFppaEpVMTlKVGtOTVZVUkZVeUI4ZkNCcGJtUmxlQ0JwYmlCUEtYdGNiaUFnSUNBZ0lHbG1LRTliYVc1a1pYaGRJRDA5UFNCbGJDbHlaWFIxY200Z1NWTmZTVTVEVEZWRVJWTWdmSHdnYVc1a1pYZ2dmSHdnTUR0Y2JpQWdJQ0I5SUhKbGRIVnliaUFoU1ZOZlNVNURURlZFUlZNZ0ppWWdMVEU3WEc0Z0lIMDdYRzU5T3lJc0lpOHZJR2RsZEhScGJtY2dkR0ZuSUdaeWIyMGdNVGt1TVM0ekxqWWdUMkpxWldOMExuQnliM1J2ZEhsd1pTNTBiMU4wY21sdVp5Z3BYRzUyWVhJZ1kyOW1JRDBnY21WeGRXbHlaU2duTGk5ZlkyOW1KeWxjYmlBZ0xDQlVRVWNnUFNCeVpYRjFhWEpsS0NjdUwxOTNhM01uS1NnbmRHOVRkSEpwYm1kVVlXY25LVnh1SUNBdkx5QkZVek1nZDNKdmJtY2dhR1Z5WlZ4dUlDQXNJRUZTUnlBOUlHTnZaaWhtZFc1amRHbHZiaWdwZXlCeVpYUjFjbTRnWVhKbmRXMWxiblJ6T3lCOUtDa3BJRDA5SUNkQmNtZDFiV1Z1ZEhNbk8xeHVYRzR2THlCbVlXeHNZbUZqYXlCbWIzSWdTVVV4TVNCVFkzSnBjSFFnUVdOalpYTnpJRVJsYm1sbFpDQmxjbkp2Y2x4dWRtRnlJSFJ5ZVVkbGRDQTlJR1oxYm1OMGFXOXVLR2wwTENCclpYa3BlMXh1SUNCMGNua2dlMXh1SUNBZ0lISmxkSFZ5YmlCcGRGdHJaWGxkTzF4dUlDQjlJR05oZEdOb0tHVXBleUF2S2lCbGJYQjBlU0FxTHlCOVhHNTlPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnZG1GeUlFOHNJRlFzSUVJN1hHNGdJSEpsZEhWeWJpQnBkQ0E5UFQwZ2RXNWtaV1pwYm1Wa0lEOGdKMVZ1WkdWbWFXNWxaQ2NnT2lCcGRDQTlQVDBnYm5Wc2JDQS9JQ2RPZFd4c0oxeHVJQ0FnSUM4dklFQkFkRzlUZEhKcGJtZFVZV2NnWTJGelpWeHVJQ0FnSURvZ2RIbHdaVzltSUNoVUlEMGdkSEo1UjJWMEtFOGdQU0JQWW1wbFkzUW9hWFFwTENCVVFVY3BLU0E5UFNBbmMzUnlhVzVuSnlBL0lGUmNiaUFnSUNBdkx5QmlkV2xzZEdsdVZHRm5JR05oYzJWY2JpQWdJQ0E2SUVGU1J5QS9JR052WmloUEtWeHVJQ0FnSUM4dklFVlRNeUJoY21kMWJXVnVkSE1nWm1Gc2JHSmhZMnRjYmlBZ0lDQTZJQ2hDSUQwZ1kyOW1LRThwS1NBOVBTQW5UMkpxWldOMEp5QW1KaUIwZVhCbGIyWWdUeTVqWVd4c1pXVWdQVDBnSjJaMWJtTjBhVzl1SnlBL0lDZEJjbWQxYldWdWRITW5JRG9nUWp0Y2JuMDdJaXdpZG1GeUlIUnZVM1J5YVc1bklEMGdlMzB1ZEc5VGRISnBibWM3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCeVpYUjFjbTRnZEc5VGRISnBibWN1WTJGc2JDaHBkQ2t1YzJ4cFkyVW9PQ3dnTFRFcE8xeHVmVHNpTENKMllYSWdZMjl5WlNBOUlHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UzWmxjbk5wYjI0NklDY3lMalF1TUNkOU8xeHVhV1lvZEhsd1pXOW1JRjlmWlNBOVBTQW5iblZ0WW1WeUp5bGZYMlVnUFNCamIzSmxPeUF2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bElHNXZMWFZ1WkdWbUlpd2lMeThnYjNCMGFXOXVZV3dnTHlCemFXMXdiR1VnWTI5dWRHVjRkQ0JpYVc1a2FXNW5YRzUyWVhJZ1lVWjFibU4wYVc5dUlEMGdjbVZ4ZFdseVpTZ25MaTlmWVMxbWRXNWpkR2x2YmljcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaG1iaXdnZEdoaGRDd2diR1Z1WjNSb0tYdGNiaUFnWVVaMWJtTjBhVzl1S0dadUtUdGNiaUFnYVdZb2RHaGhkQ0E5UFQwZ2RXNWtaV1pwYm1Wa0tYSmxkSFZ5YmlCbWJqdGNiaUFnYzNkcGRHTm9LR3hsYm1kMGFDbDdYRzRnSUNBZ1kyRnpaU0F4T2lCeVpYUjFjbTRnWm5WdVkzUnBiMjRvWVNsN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm00dVkyRnNiQ2gwYUdGMExDQmhLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lHTmhjMlVnTWpvZ2NtVjBkWEp1SUdaMWJtTjBhVzl1S0dFc0lHSXBlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHWnVMbU5oYkd3b2RHaGhkQ3dnWVN3Z1lpazdYRzRnSUNBZ2ZUdGNiaUFnSUNCallYTmxJRE02SUhKbGRIVnliaUJtZFc1amRHbHZiaWhoTENCaUxDQmpLWHRjYmlBZ0lDQWdJSEpsZEhWeWJpQm1iaTVqWVd4c0tIUm9ZWFFzSUdFc0lHSXNJR01wTzF4dUlDQWdJSDA3WEc0Z0lIMWNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVLQzhxSUM0dUxtRnlaM01nS2k4cGUxeHVJQ0FnSUhKbGRIVnliaUJtYmk1aGNIQnNlU2gwYUdGMExDQmhjbWQxYldWdWRITXBPMXh1SUNCOU8xeHVmVHNpTENJdkx5QTNMakl1TVNCU1pYRjFhWEpsVDJKcVpXTjBRMjlsY21OcFlteGxLR0Z5WjNWdFpXNTBLVnh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhwZENsN1hHNGdJR2xtS0dsMElEMDlJSFZ1WkdWbWFXNWxaQ2wwYUhKdmR5QlVlWEJsUlhKeWIzSW9YQ0pEWVc0bmRDQmpZV3hzSUcxbGRHaHZaQ0J2YmlBZ1hDSWdLeUJwZENrN1hHNGdJSEpsZEhWeWJpQnBkRHRjYm4wN0lpd2lMeThnVkdoaGJtc25jeUJKUlRnZ1ptOXlJR2hwY3lCbWRXNXVlU0JrWldacGJtVlFjbTl3WlhKMGVWeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQWhjbVZ4ZFdseVpTZ25MaTlmWm1GcGJITW5LU2htZFc1amRHbHZiaWdwZTF4dUlDQnlaWFIxY200Z1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLSHQ5TENBbllTY3NJSHRuWlhRNklHWjFibU4wYVc5dUtDbDdJSEpsZEhWeWJpQTNPeUI5ZlNrdVlTQWhQU0EzTzF4dWZTazdJaXdpZG1GeUlHbHpUMkpxWldOMElEMGdjbVZ4ZFdseVpTZ25MaTlmYVhNdGIySnFaV04wSnlsY2JpQWdMQ0JrYjJOMWJXVnVkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyZHNiMkpoYkNjcExtUnZZM1Z0Wlc1MFhHNGdJQzh2SUdsdUlHOXNaQ0JKUlNCMGVYQmxiMllnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDQnBjeUFuYjJKcVpXTjBKMXh1SUNBc0lHbHpJRDBnYVhOUFltcGxZM1FvWkc5amRXMWxiblFwSUNZbUlHbHpUMkpxWldOMEtHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUhKbGRIVnliaUJwY3lBL0lHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvYVhRcElEb2dlMzA3WEc1OU95SXNJaTh2SUVsRklEZ3RJR1J2YmlkMElHVnVkVzBnWW5WbklHdGxlWE5jYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnS0Z4dUlDQW5ZMjl1YzNSeWRXTjBiM0lzYUdGelQzZHVVSEp2Y0dWeWRIa3NhWE5RY205MGIzUjVjR1ZQWml4d2NtOXdaWEowZVVselJXNTFiV1Z5WVdKc1pTeDBiMHh2WTJGc1pWTjBjbWx1Wnl4MGIxTjBjbWx1Wnl4MllXeDFaVTltSjF4dUtTNXpjR3hwZENnbkxDY3BPeUlzSWk4dklHRnNiQ0JsYm5WdFpYSmhZbXhsSUc5aWFtVmpkQ0JyWlhsekxDQnBibU5zZFdSbGN5QnplVzFpYjJ4elhHNTJZWElnWjJWMFMyVjVjeUE5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxclpYbHpKeWxjYmlBZ0xDQm5UMUJUSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV2R2Y0hNbktWeHVJQ0FzSUhCSlJTQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdGNHbGxKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnZG1GeUlISmxjM1ZzZENBZ0lDQWdQU0JuWlhSTFpYbHpLR2wwS1Z4dUlDQWdJQ3dnWjJWMFUzbHRZbTlzY3lBOUlHZFBVRk11Wmp0Y2JpQWdhV1lvWjJWMFUzbHRZbTlzY3lsN1hHNGdJQ0FnZG1GeUlITjViV0p2YkhNZ1BTQm5aWFJUZVcxaWIyeHpLR2wwS1Z4dUlDQWdJQ0FnTENCcGMwVnVkVzBnSUQwZ2NFbEZMbVpjYmlBZ0lDQWdJQ3dnYVNBZ0lDQWdJQ0E5SURCY2JpQWdJQ0FnSUN3Z2EyVjVPMXh1SUNBZ0lIZG9hV3hsS0hONWJXSnZiSE11YkdWdVozUm9JRDRnYVNscFppaHBjMFZ1ZFcwdVkyRnNiQ2hwZEN3Z2EyVjVJRDBnYzNsdFltOXNjMXRwS3l0ZEtTbHlaWE4xYkhRdWNIVnphQ2hyWlhrcE8xeHVJQ0I5SUhKbGRIVnliaUJ5WlhOMWJIUTdYRzU5T3lJc0luWmhjaUJuYkc5aVlXd2dJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW5iRzlpWVd3bktWeHVJQ0FzSUdOdmNtVWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMk52Y21VbktWeHVJQ0FzSUdOMGVDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMk4wZUNjcFhHNGdJQ3dnYUdsa1pTQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhR2xrWlNjcFhHNGdJQ3dnVUZKUFZFOVVXVkJGSUQwZ0ozQnliM1J2ZEhsd1pTYzdYRzVjYm5aaGNpQWtaWGh3YjNKMElEMGdablZ1WTNScGIyNG9kSGx3WlN3Z2JtRnRaU3dnYzI5MWNtTmxLWHRjYmlBZ2RtRnlJRWxUWDBaUFVrTkZSQ0E5SUhSNWNHVWdKaUFrWlhod2IzSjBMa1pjYmlBZ0lDQXNJRWxUWDBkTVQwSkJUQ0E5SUhSNWNHVWdKaUFrWlhod2IzSjBMa2RjYmlBZ0lDQXNJRWxUWDFOVVFWUkpReUE5SUhSNWNHVWdKaUFrWlhod2IzSjBMbE5jYmlBZ0lDQXNJRWxUWDFCU1QxUlBJQ0E5SUhSNWNHVWdKaUFrWlhod2IzSjBMbEJjYmlBZ0lDQXNJRWxUWDBKSlRrUWdJQ0E5SUhSNWNHVWdKaUFrWlhod2IzSjBMa0pjYmlBZ0lDQXNJRWxUWDFkU1FWQWdJQ0E5SUhSNWNHVWdKaUFrWlhod2IzSjBMbGRjYmlBZ0lDQXNJR1Y0Y0c5eWRITWdJQ0E5SUVsVFgwZE1UMEpCVENBL0lHTnZjbVVnT2lCamIzSmxXMjVoYldWZElIeDhJQ2hqYjNKbFcyNWhiV1ZkSUQwZ2UzMHBYRzRnSUNBZ0xDQmxlSEJRY205MGJ5QWdQU0JsZUhCdmNuUnpXMUJTVDFSUFZGbFFSVjFjYmlBZ0lDQXNJSFJoY21kbGRDQWdJQ0E5SUVsVFgwZE1UMEpCVENBL0lHZHNiMkpoYkNBNklFbFRYMU5VUVZSSlF5QS9JR2RzYjJKaGJGdHVZVzFsWFNBNklDaG5iRzlpWVd4YmJtRnRaVjBnZkh3Z2UzMHBXMUJTVDFSUFZGbFFSVjFjYmlBZ0lDQXNJR3RsZVN3Z2IzZHVMQ0J2ZFhRN1hHNGdJR2xtS0VsVFgwZE1UMEpCVENsemIzVnlZMlVnUFNCdVlXMWxPMXh1SUNCbWIzSW9hMlY1SUdsdUlITnZkWEpqWlNsN1hHNGdJQ0FnTHk4Z1kyOXVkR0ZwYm5NZ2FXNGdibUYwYVhabFhHNGdJQ0FnYjNkdUlEMGdJVWxUWDBaUFVrTkZSQ0FtSmlCMFlYSm5aWFFnSmlZZ2RHRnlaMlYwVzJ0bGVWMGdJVDA5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0JwWmlodmQyNGdKaVlnYTJWNUlHbHVJR1Y0Y0c5eWRITXBZMjl1ZEdsdWRXVTdYRzRnSUNBZ0x5OGdaWGh3YjNKMElHNWhkR2wyWlNCdmNpQndZWE56WldSY2JpQWdJQ0J2ZFhRZ1BTQnZkMjRnUHlCMFlYSm5aWFJiYTJWNVhTQTZJSE52ZFhKalpWdHJaWGxkTzF4dUlDQWdJQzh2SUhCeVpYWmxiblFnWjJ4dlltRnNJSEJ2Ykd4MWRHbHZiaUJtYjNJZ2JtRnRaWE53WVdObGMxeHVJQ0FnSUdWNGNHOXlkSE5iYTJWNVhTQTlJRWxUWDBkTVQwSkJUQ0FtSmlCMGVYQmxiMllnZEdGeVoyVjBXMnRsZVYwZ0lUMGdKMloxYm1OMGFXOXVKeUEvSUhOdmRYSmpaVnRyWlhsZFhHNGdJQ0FnTHk4Z1ltbHVaQ0IwYVcxbGNuTWdkRzhnWjJ4dlltRnNJR1p2Y2lCallXeHNJR1p5YjIwZ1pYaHdiM0owSUdOdmJuUmxlSFJjYmlBZ0lDQTZJRWxUWDBKSlRrUWdKaVlnYjNkdUlEOGdZM1I0S0c5MWRDd2daMnh2WW1Gc0tWeHVJQ0FnSUM4dklIZHlZWEFnWjJ4dlltRnNJR052Ym5OMGNuVmpkRzl5Y3lCbWIzSWdjSEpsZG1WdWRDQmphR0Z1WjJVZ2RHaGxiU0JwYmlCc2FXSnlZWEo1WEc0Z0lDQWdPaUJKVTE5WFVrRlFJQ1ltSUhSaGNtZGxkRnRyWlhsZElEMDlJRzkxZENBL0lDaG1kVzVqZEdsdmJpaERLWHRjYmlBZ0lDQWdJSFpoY2lCR0lEMGdablZ1WTNScGIyNG9ZU3dnWWl3Z1l5bDdYRzRnSUNBZ0lDQWdJR2xtS0hSb2FYTWdhVzV6ZEdGdVkyVnZaaUJES1h0Y2JpQWdJQ0FnSUNBZ0lDQnpkMmwwWTJnb1lYSm5kVzFsYm5SekxteGxibWQwYUNsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElEQTZJSEpsZEhWeWJpQnVaWGNnUXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ01Ub2djbVYwZFhKdUlHNWxkeUJES0dFcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQXlPaUJ5WlhSMWNtNGdibVYzSUVNb1lTd2dZaWs3WEc0Z0lDQWdJQ0FnSUNBZ2ZTQnlaWFIxY200Z2JtVjNJRU1vWVN3Z1lpd2dZeWs3WEc0Z0lDQWdJQ0FnSUgwZ2NtVjBkWEp1SUVNdVlYQndiSGtvZEdocGN5d2dZWEpuZFcxbGJuUnpLVHRjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0JHVzFCU1QxUlBWRmxRUlYwZ1BTQkRXMUJTVDFSUFZGbFFSVjA3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdSanRjYmlBZ0lDQXZMeUJ0WVd0bElITjBZWFJwWXlCMlpYSnphVzl1Y3lCbWIzSWdjSEp2ZEc5MGVYQmxJRzFsZEdodlpITmNiaUFnSUNCOUtTaHZkWFFwSURvZ1NWTmZVRkpQVkU4Z0ppWWdkSGx3Wlc5bUlHOTFkQ0E5UFNBblpuVnVZM1JwYjI0bklEOGdZM1I0S0VaMWJtTjBhVzl1TG1OaGJHd3NJRzkxZENrZ09pQnZkWFE3WEc0Z0lDQWdMeThnWlhod2IzSjBJSEJ5YjNSdklHMWxkR2h2WkhNZ2RHOGdZMjl5WlM0bFEwOU9VMVJTVlVOVVQxSWxMbTFsZEdodlpITXVKVTVCVFVVbFhHNGdJQ0FnYVdZb1NWTmZVRkpQVkU4cGUxeHVJQ0FnSUNBZ0tHVjRjRzl5ZEhNdWRtbHlkSFZoYkNCOGZDQW9aWGh3YjNKMGN5NTJhWEowZFdGc0lEMGdlMzBwS1Z0clpYbGRJRDBnYjNWME8xeHVJQ0FnSUNBZ0x5OGdaWGh3YjNKMElIQnliM1J2SUcxbGRHaHZaSE1nZEc4Z1kyOXlaUzRsUTA5T1UxUlNWVU5VVDFJbExuQnliM1J2ZEhsd1pTNGxUa0ZOUlNWY2JpQWdJQ0FnSUdsbUtIUjVjR1VnSmlBa1pYaHdiM0owTGxJZ0ppWWdaWGh3VUhKdmRHOGdKaVlnSVdWNGNGQnliM1J2VzJ0bGVWMHBhR2xrWlNobGVIQlFjbTkwYnl3Z2EyVjVMQ0J2ZFhRcE8xeHVJQ0FnSUgxY2JpQWdmVnh1ZlR0Y2JpOHZJSFI1Y0dVZ1ltbDBiV0Z3WEc0a1pYaHdiM0owTGtZZ1BTQXhPeUFnSUM4dklHWnZjbU5sWkZ4dUpHVjRjRzl5ZEM1SElEMGdNanNnSUNBdkx5Qm5iRzlpWVd4Y2JpUmxlSEJ2Y25RdVV5QTlJRFE3SUNBZ0x5OGdjM1JoZEdsalhHNGtaWGh3YjNKMExsQWdQU0E0T3lBZ0lDOHZJSEJ5YjNSdlhHNGtaWGh3YjNKMExrSWdQU0F4TmpzZ0lDOHZJR0pwYm1SY2JpUmxlSEJ2Y25RdVZ5QTlJRE15T3lBZ0x5OGdkM0poY0Z4dUpHVjRjRzl5ZEM1VklEMGdOalE3SUNBdkx5QnpZV1psWEc0a1pYaHdiM0owTGxJZ1BTQXhNamc3SUM4dklISmxZV3dnY0hKdmRHOGdiV1YwYUc5a0lHWnZjaUJnYkdsaWNtRnllV0FnWEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUNSbGVIQnZjblE3SWl3aWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlobGVHVmpLWHRjYmlBZ2RISjVJSHRjYmlBZ0lDQnlaWFIxY200Z0lTRmxlR1ZqS0NrN1hHNGdJSDBnWTJGMFkyZ29aU2w3WEc0Z0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lIMWNibjA3SWl3aWRtRnlJR04wZUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZM1I0SnlsY2JpQWdMQ0JqWVd4c0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmwwWlhJdFkyRnNiQ2NwWEc0Z0lDd2dhWE5CY25KaGVVbDBaWElnUFNCeVpYRjFhWEpsS0NjdUwxOXBjeTFoY25KaGVTMXBkR1Z5SnlsY2JpQWdMQ0JoYms5aWFtVmpkQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMkZ1TFc5aWFtVmpkQ2NwWEc0Z0lDd2dkRzlNWlc1bmRHZ2dJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTFzWlc1bmRHZ25LVnh1SUNBc0lHZGxkRWwwWlhKR2JpQWdJRDBnY21WeGRXbHlaU2duTGk5amIzSmxMbWRsZEMxcGRHVnlZWFJ2Y2kxdFpYUm9iMlFuS1Z4dUlDQXNJRUpTUlVGTElDQWdJQ0FnSUQwZ2UzMWNiaUFnTENCU1JWUlZVazRnSUNBZ0lDQTlJSHQ5TzF4dWRtRnlJR1Y0Y0c5eWRITWdQU0J0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwWlhKaFlteGxMQ0JsYm5SeWFXVnpMQ0JtYml3Z2RHaGhkQ3dnU1ZSRlVrRlVUMUlwZTF4dUlDQjJZWElnYVhSbGNrWnVJRDBnU1ZSRlVrRlVUMUlnUHlCbWRXNWpkR2x2YmlncGV5QnlaWFIxY200Z2FYUmxjbUZpYkdVN0lIMGdPaUJuWlhSSmRHVnlSbTRvYVhSbGNtRmliR1VwWEc0Z0lDQWdMQ0JtSUNBZ0lDQWdQU0JqZEhnb1ptNHNJSFJvWVhRc0lHVnVkSEpwWlhNZ1B5QXlJRG9nTVNsY2JpQWdJQ0FzSUdsdVpHVjRJQ0E5SURCY2JpQWdJQ0FzSUd4bGJtZDBhQ3dnYzNSbGNDd2dhWFJsY21GMGIzSXNJSEpsYzNWc2REdGNiaUFnYVdZb2RIbHdaVzltSUdsMFpYSkdiaUFoUFNBblpuVnVZM1JwYjI0bktYUm9jbTkzSUZSNWNHVkZjbkp2Y2locGRHVnlZV0pzWlNBcklDY2dhWE1nYm05MElHbDBaWEpoWW14bElTY3BPMXh1SUNBdkx5Qm1ZWE4wSUdOaGMyVWdabTl5SUdGeWNtRjVjeUIzYVhSb0lHUmxabUYxYkhRZ2FYUmxjbUYwYjNKY2JpQWdhV1lvYVhOQmNuSmhlVWwwWlhJb2FYUmxja1p1S1NsbWIzSW9iR1Z1WjNSb0lEMGdkRzlNWlc1bmRHZ29hWFJsY21GaWJHVXViR1Z1WjNSb0tUc2diR1Z1WjNSb0lENGdhVzVrWlhnN0lHbHVaR1Y0S3lzcGUxeHVJQ0FnSUhKbGMzVnNkQ0E5SUdWdWRISnBaWE1nUHlCbUtHRnVUMkpxWldOMEtITjBaWEFnUFNCcGRHVnlZV0pzWlZ0cGJtUmxlRjBwV3pCZExDQnpkR1Z3V3pGZEtTQTZJR1lvYVhSbGNtRmliR1ZiYVc1a1pYaGRLVHRjYmlBZ0lDQnBaaWh5WlhOMWJIUWdQVDA5SUVKU1JVRkxJSHg4SUhKbGMzVnNkQ0E5UFQwZ1VrVlVWVkpPS1hKbGRIVnliaUJ5WlhOMWJIUTdYRzRnSUgwZ1pXeHpaU0JtYjNJb2FYUmxjbUYwYjNJZ1BTQnBkR1Z5Um00dVkyRnNiQ2hwZEdWeVlXSnNaU2s3SUNFb2MzUmxjQ0E5SUdsMFpYSmhkRzl5TG01bGVIUW9LU2t1Wkc5dVpUc2dLWHRjYmlBZ0lDQnlaWE4xYkhRZ1BTQmpZV3hzS0dsMFpYSmhkRzl5TENCbUxDQnpkR1Z3TG5aaGJIVmxMQ0JsYm5SeWFXVnpLVHRjYmlBZ0lDQnBaaWh5WlhOMWJIUWdQVDA5SUVKU1JVRkxJSHg4SUhKbGMzVnNkQ0E5UFQwZ1VrVlVWVkpPS1hKbGRIVnliaUJ5WlhOMWJIUTdYRzRnSUgxY2JuMDdYRzVsZUhCdmNuUnpMa0pTUlVGTElDQTlJRUpTUlVGTE8xeHVaWGh3YjNKMGN5NVNSVlJWVWs0Z1BTQlNSVlJWVWs0N0lpd2lMeThnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNwc2IybHliMk5yTDJOdmNtVXRhbk12YVhOemRXVnpMemcySTJsemMzVmxZMjl0YldWdWRDMHhNVFUzTlRrd01qaGNiblpoY2lCbmJHOWlZV3dnUFNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhSNWNHVnZaaUIzYVc1a2IzY2dJVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdkMmx1Wkc5M0xrMWhkR2dnUFQwZ1RXRjBhRnh1SUNBL0lIZHBibVJ2ZHlBNklIUjVjR1Z2WmlCelpXeG1JQ0U5SUNkMWJtUmxabWx1WldRbklDWW1JSE5sYkdZdVRXRjBhQ0E5UFNCTllYUm9JRDhnYzJWc1ppQTZJRVoxYm1OMGFXOXVLQ2R5WlhSMWNtNGdkR2hwY3ljcEtDazdYRzVwWmloMGVYQmxiMllnWDE5bklEMDlJQ2R1ZFcxaVpYSW5LVjlmWnlBOUlHZHNiMkpoYkRzZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJHbHVaU0J1YnkxMWJtUmxaaUlzSW5aaGNpQm9ZWE5QZDI1UWNtOXdaWEowZVNBOUlIdDlMbWhoYzA5M2JsQnliM0JsY25SNU8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHBkQ3dnYTJWNUtYdGNiaUFnY21WMGRYSnVJR2hoYzA5M2JsQnliM0JsY25SNUxtTmhiR3dvYVhRc0lHdGxlU2s3WEc1OU95SXNJblpoY2lCa1VDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV1J3SnlsY2JpQWdMQ0JqY21WaGRHVkVaWE5qSUQwZ2NtVnhkV2x5WlNnbkxpOWZjSEp2Y0dWeWRIa3RaR1Z6WXljcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnlaWEYxYVhKbEtDY3VMMTlrWlhOamNtbHdkRzl5Y3ljcElEOGdablZ1WTNScGIyNG9iMkpxWldOMExDQnJaWGtzSUhaaGJIVmxLWHRjYmlBZ2NtVjBkWEp1SUdSUUxtWW9iMkpxWldOMExDQnJaWGtzSUdOeVpXRjBaVVJsYzJNb01Td2dkbUZzZFdVcEtUdGNibjBnT2lCbWRXNWpkR2x2YmlodlltcGxZM1FzSUd0bGVTd2dkbUZzZFdVcGUxeHVJQ0J2WW1wbFkzUmJhMlY1WFNBOUlIWmhiSFZsTzF4dUlDQnlaWFIxY200Z2IySnFaV04wTzF4dWZUc2lMQ0p0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSEpsY1hWcGNtVW9KeTR2WDJkc2IySmhiQ2NwTG1SdlkzVnRaVzUwSUNZbUlHUnZZM1Z0Wlc1MExtUnZZM1Z0Wlc1MFJXeGxiV1Z1ZERzaUxDSnRiMlIxYkdVdVpYaHdiM0owY3lBOUlDRnlaWEYxYVhKbEtDY3VMMTlrWlhOamNtbHdkRzl5Y3ljcElDWW1JQ0Z5WlhGMWFYSmxLQ2N1TDE5bVlXbHNjeWNwS0daMWJtTjBhVzl1S0NsN1hHNGdJSEpsZEhWeWJpQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvY21WeGRXbHlaU2duTGk5ZlpHOXRMV055WldGMFpTY3BLQ2RrYVhZbktTd2dKMkVuTENCN1oyVjBPaUJtZFc1amRHbHZiaWdwZXlCeVpYUjFjbTRnTnpzZ2ZYMHBMbUVnSVQwZ056dGNibjBwT3lJc0lpOHZJR1poYzNRZ1lYQndiSGtzSUdoMGRIQTZMeTlxYzNCbGNtWXViRzVyYVhRdVkyOXRMMlpoYzNRdFlYQndiSGt2TlZ4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlobWJpd2dZWEpuY3l3Z2RHaGhkQ2w3WEc0Z0lIWmhjaUIxYmlBOUlIUm9ZWFFnUFQwOUlIVnVaR1ZtYVc1bFpEdGNiaUFnYzNkcGRHTm9LR0Z5WjNNdWJHVnVaM1JvS1h0Y2JpQWdJQ0JqWVhObElEQTZJSEpsZEhWeWJpQjFiaUEvSUdadUtDbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBNklHWnVMbU5oYkd3b2RHaGhkQ2s3WEc0Z0lDQWdZMkZ6WlNBeE9pQnlaWFIxY200Z2RXNGdQeUJtYmloaGNtZHpXekJkS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRG9nWm00dVkyRnNiQ2gwYUdGMExDQmhjbWR6V3pCZEtUdGNiaUFnSUNCallYTmxJREk2SUhKbGRIVnliaUIxYmlBL0lHWnVLR0Z5WjNOYk1GMHNJR0Z5WjNOYk1WMHBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ09pQm1iaTVqWVd4c0tIUm9ZWFFzSUdGeVozTmJNRjBzSUdGeVozTmJNVjBwTzF4dUlDQWdJR05oYzJVZ016b2djbVYwZFhKdUlIVnVJRDhnWm00b1lYSm5jMXN3WFN3Z1lYSm5jMXN4WFN3Z1lYSm5jMXN5WFNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUdadUxtTmhiR3dvZEdoaGRDd2dZWEpuYzFzd1hTd2dZWEpuYzFzeFhTd2dZWEpuYzFzeVhTazdYRzRnSUNBZ1kyRnpaU0EwT2lCeVpYUjFjbTRnZFc0Z1B5Qm1iaWhoY21keld6QmRMQ0JoY21keld6RmRMQ0JoY21keld6SmRMQ0JoY21keld6TmRLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEb2dabTR1WTJGc2JDaDBhR0YwTENCaGNtZHpXekJkTENCaGNtZHpXekZkTENCaGNtZHpXekpkTENCaGNtZHpXek5kS1R0Y2JpQWdmU0J5WlhSMWNtNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdadUxtRndjR3g1S0hSb1lYUXNJR0Z5WjNNcE8xeHVmVHNpTENJdkx5Qm1ZV3hzWW1GamF5Qm1iM0lnYm05dUxXRnljbUY1TFd4cGEyVWdSVk16SUdGdVpDQnViMjR0Wlc1MWJXVnlZV0pzWlNCdmJHUWdWamdnYzNSeWFXNW5jMXh1ZG1GeUlHTnZaaUE5SUhKbGNYVnBjbVVvSnk0dlgyTnZaaWNwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCUFltcGxZM1FvSjNvbktTNXdjbTl3WlhKMGVVbHpSVzUxYldWeVlXSnNaU2d3S1NBL0lFOWlhbVZqZENBNklHWjFibU4wYVc5dUtHbDBLWHRjYmlBZ2NtVjBkWEp1SUdOdlppaHBkQ2tnUFQwZ0oxTjBjbWx1WnljZ1B5QnBkQzV6Y0d4cGRDZ25KeWtnT2lCUFltcGxZM1FvYVhRcE8xeHVmVHNpTENJdkx5QmphR1ZqYXlCdmJpQmtaV1poZFd4MElFRnljbUY1SUdsMFpYSmhkRzl5WEc1MllYSWdTWFJsY21GMGIzSnpJQ0E5SUhKbGNYVnBjbVVvSnk0dlgybDBaWEpoZEc5eWN5Y3BYRzRnSUN3Z1NWUkZVa0ZVVDFJZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNkcmN5Y3BLQ2RwZEdWeVlYUnZjaWNwWEc0Z0lDd2dRWEp5WVhsUWNtOTBieUE5SUVGeWNtRjVMbkJ5YjNSdmRIbHdaVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUhKbGRIVnliaUJwZENBaFBUMGdkVzVrWldacGJtVmtJQ1ltSUNoSmRHVnlZWFJ2Y25NdVFYSnlZWGtnUFQwOUlHbDBJSHg4SUVGeWNtRjVVSEp2ZEc5YlNWUkZVa0ZVVDFKZElEMDlQU0JwZENrN1hHNTlPeUlzSWk4dklEY3VNaTR5SUVselFYSnlZWGtvWVhKbmRXMWxiblFwWEc1MllYSWdZMjltSUQwZ2NtVnhkV2x5WlNnbkxpOWZZMjltSnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFRnljbUY1TG1selFYSnlZWGtnZkh3Z1puVnVZM1JwYjI0Z2FYTkJjbkpoZVNoaGNtY3BlMXh1SUNCeVpYUjFjbTRnWTI5bUtHRnlaeWtnUFQwZ0owRnljbUY1Snp0Y2JuMDdJaXdpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhwZENsN1hHNGdJSEpsZEhWeWJpQjBlWEJsYjJZZ2FYUWdQVDA5SUNkdlltcGxZM1FuSUQ4Z2FYUWdJVDA5SUc1MWJHd2dPaUIwZVhCbGIyWWdhWFFnUFQwOUlDZG1kVzVqZEdsdmJpYzdYRzU5T3lJc0lpOHZJR05oYkd3Z2MyOXRaWFJvYVc1bklHOXVJR2wwWlhKaGRHOXlJSE4wWlhBZ2QybDBhQ0J6WVdabElHTnNiM05wYm1jZ2IyNGdaWEp5YjNKY2JuWmhjaUJoYms5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRnVMVzlpYW1WamRDY3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhwZEdWeVlYUnZjaXdnWm00c0lIWmhiSFZsTENCbGJuUnlhV1Z6S1h0Y2JpQWdkSEo1SUh0Y2JpQWdJQ0J5WlhSMWNtNGdaVzUwY21sbGN5QS9JR1p1S0dGdVQySnFaV04wS0haaGJIVmxLVnN3WFN3Z2RtRnNkV1ZiTVYwcElEb2dabTRvZG1Gc2RXVXBPMXh1SUNBdkx5QTNMalF1TmlCSmRHVnlZWFJ2Y2tOc2IzTmxLR2wwWlhKaGRHOXlMQ0JqYjIxd2JHVjBhVzl1S1Z4dUlDQjlJR05oZEdOb0tHVXBlMXh1SUNBZ0lIWmhjaUJ5WlhRZ1BTQnBkR1Z5WVhSdmNsc25jbVYwZFhKdUoxMDdYRzRnSUNBZ2FXWW9jbVYwSUNFOVBTQjFibVJsWm1sdVpXUXBZVzVQWW1wbFkzUW9jbVYwTG1OaGJHd29hWFJsY21GMGIzSXBLVHRjYmlBZ0lDQjBhSEp2ZHlCbE8xeHVJQ0I5WEc1OU95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JuWmhjaUJqY21WaGRHVWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFqY21WaGRHVW5LVnh1SUNBc0lHUmxjMk55YVhCMGIzSWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZjSEp2Y0dWeWRIa3RaR1Z6WXljcFhHNGdJQ3dnYzJWMFZHOVRkSEpwYm1kVVlXY2dQU0J5WlhGMWFYSmxLQ2N1TDE5elpYUXRkRzh0YzNSeWFXNW5MWFJoWnljcFhHNGdJQ3dnU1hSbGNtRjBiM0pRY205MGIzUjVjR1VnUFNCN2ZUdGNibHh1THk4Z01qVXVNUzR5TGpFdU1TQWxTWFJsY21GMGIzSlFjbTkwYjNSNWNHVWxXMEJBYVhSbGNtRjBiM0pkS0NsY2JuSmxjWFZwY21Vb0p5NHZYMmhwWkdVbktTaEpkR1Z5WVhSdmNsQnliM1J2ZEhsd1pTd2djbVZ4ZFdseVpTZ25MaTlmZDJ0ekp5a29KMmwwWlhKaGRHOXlKeWtzSUdaMWJtTjBhVzl1S0NsN0lISmxkSFZ5YmlCMGFHbHpPeUI5S1R0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaERiMjV6ZEhKMVkzUnZjaXdnVGtGTlJTd2dibVY0ZENsN1hHNGdJRU52Ym5OMGNuVmpkRzl5TG5CeWIzUnZkSGx3WlNBOUlHTnlaV0YwWlNoSmRHVnlZWFJ2Y2xCeWIzUnZkSGx3WlN3Z2UyNWxlSFE2SUdSbGMyTnlhWEIwYjNJb01Td2dibVY0ZENsOUtUdGNiaUFnYzJWMFZHOVRkSEpwYm1kVVlXY29RMjl1YzNSeWRXTjBiM0lzSUU1QlRVVWdLeUFuSUVsMFpYSmhkRzl5SnlrN1hHNTlPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiblpoY2lCTVNVSlNRVkpaSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyeHBZbkpoY25rbktWeHVJQ0FzSUNSbGVIQnZjblFnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0J5WldSbFptbHVaU0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNKbFpHVm1hVzVsSnlsY2JpQWdMQ0JvYVdSbElDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJocFpHVW5LVnh1SUNBc0lHaGhjeUFnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhR0Z6SnlsY2JpQWdMQ0JKZEdWeVlYUnZjbk1nSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJsMFpYSmhkRzl5Y3ljcFhHNGdJQ3dnSkdsMFpYSkRjbVZoZEdVZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGRHVnlMV055WldGMFpTY3BYRzRnSUN3Z2MyVjBWRzlUZEhKcGJtZFVZV2NnUFNCeVpYRjFhWEpsS0NjdUwxOXpaWFF0ZEc4dGMzUnlhVzVuTFhSaFp5Y3BYRzRnSUN3Z1oyVjBVSEp2ZEc5MGVYQmxUMllnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFozQnZKeWxjYmlBZ0xDQkpWRVZTUVZSUFVpQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM2RyY3ljcEtDZHBkR1Z5WVhSdmNpY3BYRzRnSUN3Z1FsVkhSMWtnSUNBZ0lDQWdJQ0FnUFNBaEtGdGRMbXRsZVhNZ0ppWWdKMjVsZUhRbklHbHVJRnRkTG10bGVYTW9LU2tnTHk4Z1UyRm1ZWEpwSUdoaGN5QmlkV2RuZVNCcGRHVnlZWFJ2Y25NZ2R5OXZJR0J1WlhoMFlGeHVJQ0FzSUVaR1gwbFVSVkpCVkU5U0lDQWdJRDBnSjBCQWFYUmxjbUYwYjNJblhHNGdJQ3dnUzBWWlV5QWdJQ0FnSUNBZ0lDQWdQU0FuYTJWNWN5ZGNiaUFnTENCV1FVeFZSVk1nSUNBZ0lDQWdJQ0E5SUNkMllXeDFaWE1uTzF4dVhHNTJZWElnY21WMGRYSnVWR2hwY3lBOUlHWjFibU4wYVc5dUtDbDdJSEpsZEhWeWJpQjBhR2x6T3lCOU8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLRUpoYzJVc0lFNUJUVVVzSUVOdmJuTjBjblZqZEc5eUxDQnVaWGgwTENCRVJVWkJWVXhVTENCSlUxOVRSVlFzSUVaUFVrTkZSQ2w3WEc0Z0lDUnBkR1Z5UTNKbFlYUmxLRU52Ym5OMGNuVmpkRzl5TENCT1FVMUZMQ0J1WlhoMEtUdGNiaUFnZG1GeUlHZGxkRTFsZEdodlpDQTlJR1oxYm1OMGFXOXVLR3RwYm1RcGUxeHVJQ0FnSUdsbUtDRkNWVWRIV1NBbUppQnJhVzVrSUdsdUlIQnliM1J2S1hKbGRIVnliaUJ3Y205MGIxdHJhVzVrWFR0Y2JpQWdJQ0J6ZDJsMFkyZ29hMmx1WkNsN1hHNGdJQ0FnSUNCallYTmxJRXRGV1ZNNklISmxkSFZ5YmlCbWRXNWpkR2x2YmlCclpYbHpLQ2w3SUhKbGRIVnliaUJ1WlhjZ1EyOXVjM1J5ZFdOMGIzSW9kR2hwY3l3Z2EybHVaQ2s3SUgwN1hHNGdJQ0FnSUNCallYTmxJRlpCVEZWRlV6b2djbVYwZFhKdUlHWjFibU4wYVc5dUlIWmhiSFZsY3lncGV5QnlaWFIxY200Z2JtVjNJRU52Ym5OMGNuVmpkRzl5S0hSb2FYTXNJR3RwYm1RcE95QjlPMXh1SUNBZ0lIMGdjbVYwZFhKdUlHWjFibU4wYVc5dUlHVnVkSEpwWlhNb0tYc2djbVYwZFhKdUlHNWxkeUJEYjI1emRISjFZM1J2Y2loMGFHbHpMQ0JyYVc1a0tUc2dmVHRjYmlBZ2ZUdGNiaUFnZG1GeUlGUkJSeUFnSUNBZ0lDQWdQU0JPUVUxRklDc2dKeUJKZEdWeVlYUnZjaWRjYmlBZ0lDQXNJRVJGUmw5V1FVeFZSVk1nUFNCRVJVWkJWVXhVSUQwOUlGWkJURlZGVTF4dUlDQWdJQ3dnVmtGTVZVVlRYMEpWUnlBOUlHWmhiSE5sWEc0Z0lDQWdMQ0J3Y205MGJ5QWdJQ0FnSUQwZ1FtRnpaUzV3Y205MGIzUjVjR1ZjYmlBZ0lDQXNJQ1J1WVhScGRtVWdJQ0FnUFNCd2NtOTBiMXRKVkVWU1FWUlBVbDBnZkh3Z2NISnZkRzliUmtaZlNWUkZVa0ZVVDFKZElIeDhJRVJGUmtGVlRGUWdKaVlnY0hKdmRHOWJSRVZHUVZWTVZGMWNiaUFnSUNBc0lDUmtaV1poZFd4MElDQWdQU0FrYm1GMGFYWmxJSHg4SUdkbGRFMWxkR2h2WkNoRVJVWkJWVXhVS1Z4dUlDQWdJQ3dnSkdWdWRISnBaWE1nSUNBOUlFUkZSa0ZWVEZRZ1B5QWhSRVZHWDFaQlRGVkZVeUEvSUNSa1pXWmhkV3gwSURvZ1oyVjBUV1YwYUc5a0tDZGxiblJ5YVdWekp5a2dPaUIxYm1SbFptbHVaV1JjYmlBZ0lDQXNJQ1JoYm5sT1lYUnBkbVVnUFNCT1FVMUZJRDA5SUNkQmNuSmhlU2NnUHlCd2NtOTBieTVsYm5SeWFXVnpJSHg4SUNSdVlYUnBkbVVnT2lBa2JtRjBhWFpsWEc0Z0lDQWdMQ0J0WlhSb2IyUnpMQ0JyWlhrc0lFbDBaWEpoZEc5eVVISnZkRzkwZVhCbE8xeHVJQ0F2THlCR2FYZ2dibUYwYVhabFhHNGdJR2xtS0NSaGJubE9ZWFJwZG1VcGUxeHVJQ0FnSUVsMFpYSmhkRzl5VUhKdmRHOTBlWEJsSUQwZ1oyVjBVSEp2ZEc5MGVYQmxUMllvSkdGdWVVNWhkR2wyWlM1allXeHNLRzVsZHlCQ1lYTmxLU2s3WEc0Z0lDQWdhV1lvU1hSbGNtRjBiM0pRY205MGIzUjVjR1VnSVQwOUlFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVcGUxeHVJQ0FnSUNBZ0x5OGdVMlYwSUVCQWRHOVRkSEpwYm1kVVlXY2dkRzhnYm1GMGFYWmxJR2wwWlhKaGRHOXljMXh1SUNBZ0lDQWdjMlYwVkc5VGRISnBibWRVWVdjb1NYUmxjbUYwYjNKUWNtOTBiM1I1Y0dVc0lGUkJSeXdnZEhKMVpTazdYRzRnSUNBZ0lDQXZMeUJtYVhnZ1ptOXlJSE52YldVZ2IyeGtJR1Z1WjJsdVpYTmNiaUFnSUNBZ0lHbG1LQ0ZNU1VKU1FWSlpJQ1ltSUNGb1lYTW9TWFJsY21GMGIzSlFjbTkwYjNSNWNHVXNJRWxVUlZKQlZFOVNLU2xvYVdSbEtFbDBaWEpoZEc5eVVISnZkRzkwZVhCbExDQkpWRVZTUVZSUFVpd2djbVYwZFhKdVZHaHBjeWs3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJQzh2SUdacGVDQkJjbkpoZVNON2RtRnNkV1Z6TENCQVFHbDBaWEpoZEc5eWZTNXVZVzFsSUdsdUlGWTRJQzhnUmtaY2JpQWdhV1lvUkVWR1gxWkJURlZGVXlBbUppQWtibUYwYVhabElDWW1JQ1J1WVhScGRtVXVibUZ0WlNBaFBUMGdWa0ZNVlVWVEtYdGNiaUFnSUNCV1FVeFZSVk5mUWxWSElEMGdkSEoxWlR0Y2JpQWdJQ0FrWkdWbVlYVnNkQ0E5SUdaMWJtTjBhVzl1SUhaaGJIVmxjeWdwZXlCeVpYUjFjbTRnSkc1aGRHbDJaUzVqWVd4c0tIUm9hWE1wT3lCOU8xeHVJQ0I5WEc0Z0lDOHZJRVJsWm1sdVpTQnBkR1Z5WVhSdmNseHVJQ0JwWmlnb0lVeEpRbEpCVWxrZ2ZId2dSazlTUTBWRUtTQW1KaUFvUWxWSFIxa2dmSHdnVmtGTVZVVlRYMEpWUnlCOGZDQWhjSEp2ZEc5YlNWUkZVa0ZVVDFKZEtTbDdYRzRnSUNBZ2FHbGtaU2h3Y205MGJ5d2dTVlJGVWtGVVQxSXNJQ1JrWldaaGRXeDBLVHRjYmlBZ2ZWeHVJQ0F2THlCUWJIVm5JR1p2Y2lCc2FXSnlZWEo1WEc0Z0lFbDBaWEpoZEc5eWMxdE9RVTFGWFNBOUlDUmtaV1poZFd4ME8xeHVJQ0JKZEdWeVlYUnZjbk5iVkVGSFhTQWdQU0J5WlhSMWNtNVVhR2x6TzF4dUlDQnBaaWhFUlVaQlZVeFVLWHRjYmlBZ0lDQnRaWFJvYjJSeklEMGdlMXh1SUNBZ0lDQWdkbUZzZFdWek9pQWdSRVZHWDFaQlRGVkZVeUEvSUNSa1pXWmhkV3gwSURvZ1oyVjBUV1YwYUc5a0tGWkJURlZGVXlrc1hHNGdJQ0FnSUNCclpYbHpPaUFnSUNCSlUxOVRSVlFnSUNBZ0lEOGdKR1JsWm1GMWJIUWdPaUJuWlhSTlpYUm9iMlFvUzBWWlV5a3NYRzRnSUNBZ0lDQmxiblJ5YVdWek9pQWtaVzUwY21sbGMxeHVJQ0FnSUgwN1hHNGdJQ0FnYVdZb1JrOVNRMFZFS1dadmNpaHJaWGtnYVc0Z2JXVjBhRzlrY3lsN1hHNGdJQ0FnSUNCcFppZ2hLR3RsZVNCcGJpQndjbTkwYnlrcGNtVmtaV1pwYm1Vb2NISnZkRzhzSUd0bGVTd2diV1YwYUc5a2MxdHJaWGxkS1R0Y2JpQWdJQ0I5SUdWc2MyVWdKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsQWdLeUFrWlhod2IzSjBMa1lnS2lBb1FsVkhSMWtnZkh3Z1ZrRk1WVVZUWDBKVlJ5a3NJRTVCVFVVc0lHMWxkR2h2WkhNcE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdFpYUm9iMlJ6TzF4dWZUc2lMQ0oyWVhJZ1NWUkZVa0ZVVDFJZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmQydHpKeWtvSjJsMFpYSmhkRzl5SnlsY2JpQWdMQ0JUUVVaRlgwTk1UMU5KVGtjZ1BTQm1ZV3h6WlR0Y2JseHVkSEo1SUh0Y2JpQWdkbUZ5SUhKcGRHVnlJRDBnV3pkZFcwbFVSVkpCVkU5U1hTZ3BPMXh1SUNCeWFYUmxjbHNuY21WMGRYSnVKMTBnUFNCbWRXNWpkR2x2YmlncGV5QlRRVVpGWDBOTVQxTkpUa2NnUFNCMGNuVmxPeUI5TzF4dUlDQkJjbkpoZVM1bWNtOXRLSEpwZEdWeUxDQm1kVzVqZEdsdmJpZ3BleUIwYUhKdmR5QXlPeUI5S1R0Y2JuMGdZMkYwWTJnb1pTbDdJQzhxSUdWdGNIUjVJQ292SUgxY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaGxlR1ZqTENCemEybHdRMnh2YzJsdVp5bDdYRzRnSUdsbUtDRnphMmx3UTJ4dmMybHVaeUFtSmlBaFUwRkdSVjlEVEU5VFNVNUhLWEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdkbUZ5SUhOaFptVWdQU0JtWVd4elpUdGNiaUFnZEhKNUlIdGNiaUFnSUNCMllYSWdZWEp5SUNBOUlGczNYVnh1SUNBZ0lDQWdMQ0JwZEdWeUlEMGdZWEp5VzBsVVJWSkJWRTlTWFNncE8xeHVJQ0FnSUdsMFpYSXVibVY0ZENBOUlHWjFibU4wYVc5dUtDbDdJSEpsZEhWeWJpQjdaRzl1WlRvZ2MyRm1aU0E5SUhSeWRXVjlPeUI5TzF4dUlDQWdJR0Z5Y2x0SlZFVlNRVlJQVWwwZ1BTQm1kVzVqZEdsdmJpZ3BleUJ5WlhSMWNtNGdhWFJsY2pzZ2ZUdGNiaUFnSUNCbGVHVmpLR0Z5Y2lrN1hHNGdJSDBnWTJGMFkyZ29aU2w3SUM4cUlHVnRjSFI1SUNvdklIMWNiaUFnY21WMGRYSnVJSE5oWm1VN1hHNTlPeUlzSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvWkc5dVpTd2dkbUZzZFdVcGUxeHVJQ0J5WlhSMWNtNGdlM1poYkhWbE9pQjJZV3gxWlN3Z1pHOXVaVG9nSVNGa2IyNWxmVHRjYm4wN0lpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdmVHNpTENKMllYSWdaMlYwUzJWNWN5QWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFd0bGVYTW5LVnh1SUNBc0lIUnZTVTlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXbHZZbXBsWTNRbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9iMkpxWldOMExDQmxiQ2w3WEc0Z0lIWmhjaUJQSUNBZ0lDQWdQU0IwYjBsUFltcGxZM1FvYjJKcVpXTjBLVnh1SUNBZ0lDd2dhMlY1Y3lBZ0lEMGdaMlYwUzJWNWN5aFBLVnh1SUNBZ0lDd2diR1Z1WjNSb0lEMGdhMlY1Y3k1c1pXNW5kR2hjYmlBZ0lDQXNJR2x1WkdWNElDQTlJREJjYmlBZ0lDQXNJR3RsZVR0Y2JpQWdkMmhwYkdVb2JHVnVaM1JvSUQ0Z2FXNWtaWGdwYVdZb1QxdHJaWGtnUFNCclpYbHpXMmx1WkdWNEt5dGRYU0E5UFQwZ1pXd3BjbVYwZFhKdUlHdGxlVHRjYm4wN0lpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjBjblZsT3lJc0luWmhjaUJOUlZSQklDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzVnBaQ2NwS0NkdFpYUmhKeWxjYmlBZ0xDQnBjMDlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2WDJsekxXOWlhbVZqZENjcFhHNGdJQ3dnYUdGeklDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9ZWE1uS1Z4dUlDQXNJSE5sZEVSbGMyTWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdSd0p5a3VabHh1SUNBc0lHbGtJQ0FnSUNBZ0lEMGdNRHRjYm5aaGNpQnBjMFY0ZEdWdWMybGliR1VnUFNCUFltcGxZM1F1YVhORmVIUmxibk5wWW14bElIeDhJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lISmxkSFZ5YmlCMGNuVmxPMXh1ZlR0Y2JuWmhjaUJHVWtWRldrVWdQU0FoY21WeGRXbHlaU2duTGk5ZlptRnBiSE1uS1NobWRXNWpkR2x2YmlncGUxeHVJQ0J5WlhSMWNtNGdhWE5GZUhSbGJuTnBZbXhsS0U5aWFtVmpkQzV3Y21WMlpXNTBSWGgwWlc1emFXOXVjeWg3ZlNrcE8xeHVmU2s3WEc1MllYSWdjMlYwVFdWMFlTQTlJR1oxYm1OMGFXOXVLR2wwS1h0Y2JpQWdjMlYwUkdWell5aHBkQ3dnVFVWVVFTd2dlM1poYkhWbE9pQjdYRzRnSUNBZ2FUb2dKMDhuSUNzZ0t5dHBaQ3dnTHk4Z2IySnFaV04wSUVsRVhHNGdJQ0FnZHpvZ2UzMGdJQ0FnSUNBZ0lDQWdMeThnZDJWaGF5QmpiMnhzWldOMGFXOXVjeUJKUkhOY2JpQWdmWDBwTzF4dWZUdGNiblpoY2lCbVlYTjBTMlY1SUQwZ1puVnVZM1JwYjI0b2FYUXNJR055WldGMFpTbDdYRzRnSUM4dklISmxkSFZ5YmlCd2NtbHRhWFJwZG1VZ2QybDBhQ0J3Y21WbWFYaGNiaUFnYVdZb0lXbHpUMkpxWldOMEtHbDBLU2x5WlhSMWNtNGdkSGx3Wlc5bUlHbDBJRDA5SUNkemVXMWliMnduSUQ4Z2FYUWdPaUFvZEhsd1pXOW1JR2wwSUQwOUlDZHpkSEpwYm1jbklEOGdKMU1uSURvZ0oxQW5LU0FySUdsME8xeHVJQ0JwWmlnaGFHRnpLR2wwTENCTlJWUkJLU2w3WEc0Z0lDQWdMeThnWTJGdUozUWdjMlYwSUcxbGRHRmtZWFJoSUhSdklIVnVZMkYxWjJoMElHWnliM3BsYmlCdlltcGxZM1JjYmlBZ0lDQnBaaWdoYVhORmVIUmxibk5wWW14bEtHbDBLU2x5WlhSMWNtNGdKMFluTzF4dUlDQWdJQzh2SUc1dmRDQnVaV05sYzNOaGNua2dkRzhnWVdSa0lHMWxkR0ZrWVhSaFhHNGdJQ0FnYVdZb0lXTnlaV0YwWlNseVpYUjFjbTRnSjBVbk8xeHVJQ0FnSUM4dklHRmtaQ0J0YVhOemFXNW5JRzFsZEdGa1lYUmhYRzRnSUNBZ2MyVjBUV1YwWVNocGRDazdYRzRnSUM4dklISmxkSFZ5YmlCdlltcGxZM1FnU1VSY2JpQWdmU0J5WlhSMWNtNGdhWFJiVFVWVVFWMHVhVHRjYm4wN1hHNTJZWElnWjJWMFYyVmhheUE5SUdaMWJtTjBhVzl1S0dsMExDQmpjbVZoZEdVcGUxeHVJQ0JwWmlnaGFHRnpLR2wwTENCTlJWUkJLU2w3WEc0Z0lDQWdMeThnWTJGdUozUWdjMlYwSUcxbGRHRmtZWFJoSUhSdklIVnVZMkYxWjJoMElHWnliM3BsYmlCdlltcGxZM1JjYmlBZ0lDQnBaaWdoYVhORmVIUmxibk5wWW14bEtHbDBLU2x5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0F2THlCdWIzUWdibVZqWlhOellYSjVJSFJ2SUdGa1pDQnRaWFJoWkdGMFlWeHVJQ0FnSUdsbUtDRmpjbVZoZEdVcGNtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDOHZJR0ZrWkNCdGFYTnphVzVuSUcxbGRHRmtZWFJoWEc0Z0lDQWdjMlYwVFdWMFlTaHBkQ2s3WEc0Z0lDOHZJSEpsZEhWeWJpQm9ZWE5vSUhkbFlXc2dZMjlzYkdWamRHbHZibk1nU1VSelhHNGdJSDBnY21WMGRYSnVJR2wwVzAxRlZFRmRMbmM3WEc1OU8xeHVMeThnWVdSa0lHMWxkR0ZrWVhSaElHOXVJR1p5WldWNlpTMW1ZVzFwYkhrZ2JXVjBhRzlrY3lCallXeHNhVzVuWEc1MllYSWdiMjVHY21WbGVtVWdQU0JtZFc1amRHbHZiaWhwZENsN1hHNGdJR2xtS0VaU1JVVmFSU0FtSmlCdFpYUmhMazVGUlVRZ0ppWWdhWE5GZUhSbGJuTnBZbXhsS0dsMEtTQW1KaUFoYUdGektHbDBMQ0JOUlZSQktTbHpaWFJOWlhSaEtHbDBLVHRjYmlBZ2NtVjBkWEp1SUdsME8xeHVmVHRjYm5aaGNpQnRaWFJoSUQwZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN1hHNGdJRXRGV1RvZ0lDQWdJQ0JOUlZSQkxGeHVJQ0JPUlVWRU9pQWdJQ0FnWm1Gc2MyVXNYRzRnSUdaaGMzUkxaWGs2SUNCbVlYTjBTMlY1TEZ4dUlDQm5aWFJYWldGck9pQWdaMlYwVjJWaGF5eGNiaUFnYjI1R2NtVmxlbVU2SUc5dVJuSmxaWHBsWEc1OU95SXNJblpoY2lCbmJHOWlZV3dnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LVnh1SUNBc0lHMWhZM0p2ZEdGemF5QTlJSEpsY1hWcGNtVW9KeTR2WDNSaGMyc25LUzV6WlhSY2JpQWdMQ0JQWW5ObGNuWmxjaUFnUFNCbmJHOWlZV3d1VFhWMFlYUnBiMjVQWW5ObGNuWmxjaUI4ZkNCbmJHOWlZV3d1VjJWaVMybDBUWFYwWVhScGIyNVBZbk5sY25abGNseHVJQ0FzSUhCeWIyTmxjM01nSUNBOUlHZHNiMkpoYkM1d2NtOWpaWE56WEc0Z0lDd2dVSEp2YldselpTQWdJRDBnWjJ4dlltRnNMbEJ5YjIxcGMyVmNiaUFnTENCcGMwNXZaR1VnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlqYjJZbktTaHdjbTlqWlhOektTQTlQU0FuY0hKdlkyVnpjeWM3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b0tYdGNiaUFnZG1GeUlHaGxZV1FzSUd4aGMzUXNJRzV2ZEdsbWVUdGNibHh1SUNCMllYSWdabXgxYzJnZ1BTQm1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lIWmhjaUJ3WVhKbGJuUXNJR1p1TzF4dUlDQWdJR2xtS0dselRtOWtaU0FtSmlBb2NHRnlaVzUwSUQwZ2NISnZZMlZ6Y3k1a2IyMWhhVzRwS1hCaGNtVnVkQzVsZUdsMEtDazdYRzRnSUNBZ2QyaHBiR1VvYUdWaFpDbDdYRzRnSUNBZ0lDQm1iaUFnSUQwZ2FHVmhaQzVtYmp0Y2JpQWdJQ0FnSUdobFlXUWdQU0JvWldGa0xtNWxlSFE3WEc0Z0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQm1iaWdwTzF4dUlDQWdJQ0FnZlNCallYUmphQ2hsS1h0Y2JpQWdJQ0FnSUNBZ2FXWW9hR1ZoWkNsdWIzUnBabmtvS1R0Y2JpQWdJQ0FnSUNBZ1pXeHpaU0JzWVhOMElEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdJQ0IwYUhKdmR5QmxPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMGdiR0Z6ZENBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNCcFppaHdZWEpsYm5RcGNHRnlaVzUwTG1WdWRHVnlLQ2s3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdUbTlrWlM1cWMxeHVJQ0JwWmlocGMwNXZaR1VwZTF4dUlDQWdJRzV2ZEdsbWVTQTlJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0J3Y205alpYTnpMbTVsZUhSVWFXTnJLR1pzZFhOb0tUdGNiaUFnSUNCOU8xeHVJQ0F2THlCaWNtOTNjMlZ5Y3lCM2FYUm9JRTExZEdGMGFXOXVUMkp6WlhKMlpYSmNiaUFnZlNCbGJITmxJR2xtS0U5aWMyVnlkbVZ5S1h0Y2JpQWdJQ0IyWVhJZ2RHOW5aMnhsSUQwZ2RISjFaVnh1SUNBZ0lDQWdMQ0J1YjJSbElDQWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVlVaWGgwVG05a1pTZ25KeWs3WEc0Z0lDQWdibVYzSUU5aWMyVnlkbVZ5S0dac2RYTm9LUzV2WW5ObGNuWmxLRzV2WkdVc0lIdGphR0Z5WVdOMFpYSkVZWFJoT2lCMGNuVmxmU2s3SUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFd4cGJtVWdibTh0Ym1WM1hHNGdJQ0FnYm05MGFXWjVJRDBnWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUc1dlpHVXVaR0YwWVNBOUlIUnZaMmRzWlNBOUlDRjBiMmRuYkdVN1hHNGdJQ0FnZlR0Y2JpQWdMeThnWlc1MmFYSnZibTFsYm5SeklIZHBkR2dnYldGNVltVWdibTl1TFdOdmJYQnNaWFJsYkhrZ1kyOXljbVZqZEN3Z1luVjBJR1Y0YVhOMFpXNTBJRkJ5YjIxcGMyVmNiaUFnZlNCbGJITmxJR2xtS0ZCeWIyMXBjMlVnSmlZZ1VISnZiV2x6WlM1eVpYTnZiSFpsS1h0Y2JpQWdJQ0IyWVhJZ2NISnZiV2x6WlNBOUlGQnliMjFwYzJVdWNtVnpiMngyWlNncE8xeHVJQ0FnSUc1dmRHbG1lU0E5SUdaMWJtTjBhVzl1S0NsN1hHNGdJQ0FnSUNCd2NtOXRhWE5sTG5Sb1pXNG9abXgxYzJncE8xeHVJQ0FnSUgwN1hHNGdJQzh2SUdadmNpQnZkR2hsY2lCbGJuWnBjbTl1YldWdWRITWdMU0J0WVdOeWIzUmhjMnNnWW1GelpXUWdiMjQ2WEc0Z0lDOHZJQzBnYzJWMFNXMXRaV1JwWVhSbFhHNGdJQzh2SUMwZ1RXVnpjMkZuWlVOb1lXNXVaV3hjYmlBZ0x5OGdMU0IzYVc1a2IzY3VjRzl6ZEUxbGMzTmhaMXh1SUNBdkx5QXRJRzl1Y21WaFpIbHpkR0YwWldOb1lXNW5aVnh1SUNBdkx5QXRJSE5sZEZScGJXVnZkWFJjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J1YjNScFpua2dQU0JtZFc1amRHbHZiaWdwZTF4dUlDQWdJQ0FnTHk4Z2MzUnlZVzVuWlNCSlJTQXJJSGRsWW5CaFkyc2daR1YySUhObGNuWmxjaUJpZFdjZ0xTQjFjMlVnTG1OaGJHd29aMnh2WW1Gc0tWeHVJQ0FnSUNBZ2JXRmpjbTkwWVhOckxtTmhiR3dvWjJ4dlltRnNMQ0JtYkhWemFDazdYRzRnSUNBZ2ZUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpaG1iaWw3WEc0Z0lDQWdkbUZ5SUhSaGMyc2dQU0I3Wm00NklHWnVMQ0J1WlhoME9pQjFibVJsWm1sdVpXUjlPMXh1SUNBZ0lHbG1LR3hoYzNRcGJHRnpkQzV1WlhoMElEMGdkR0Z6YXp0Y2JpQWdJQ0JwWmlnaGFHVmhaQ2w3WEc0Z0lDQWdJQ0JvWldGa0lEMGdkR0Z6YXp0Y2JpQWdJQ0FnSUc1dmRHbG1lU2dwTzF4dUlDQWdJSDBnYkdGemRDQTlJSFJoYzJzN1hHNGdJSDA3WEc1OU95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JpOHZJREU1TGpFdU1pNHhJRTlpYW1WamRDNWhjM05wWjI0b2RHRnlaMlYwTENCemIzVnlZMlVzSUM0dUxpbGNiblpoY2lCblpYUkxaWGx6SUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMXJaWGx6SnlsY2JpQWdMQ0JuVDFCVElDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxbmIzQnpKeWxjYmlBZ0xDQndTVVVnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzF3YVdVbktWeHVJQ0FzSUhSdlQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YjJKcVpXTjBKeWxjYmlBZ0xDQkpUMkpxWldOMElDQTlJSEpsY1hWcGNtVW9KeTR2WDJsdlltcGxZM1FuS1Z4dUlDQXNJQ1JoYzNOcFoyNGdJRDBnVDJKcVpXTjBMbUZ6YzJsbmJqdGNibHh1THk4Z2MyaHZkV3hrSUhkdmNtc2dkMmwwYUNCemVXMWliMnh6SUdGdVpDQnphRzkxYkdRZ2FHRjJaU0JrWlhSbGNtMXBibWx6ZEdsaklIQnliM0JsY25SNUlHOXlaR1Z5SUNoV09DQmlkV2NwWEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUNFa1lYTnphV2R1SUh4OElISmxjWFZwY21Vb0p5NHZYMlpoYVd4ekp5a29ablZ1WTNScGIyNG9LWHRjYmlBZ2RtRnlJRUVnUFNCN2ZWeHVJQ0FnSUN3Z1FpQTlJSHQ5WEc0Z0lDQWdMQ0JUSUQwZ1UzbHRZbTlzS0NsY2JpQWdJQ0FzSUVzZ1BTQW5ZV0pqWkdWbVoyaHBhbXRzYlc1dmNIRnljM1FuTzF4dUlDQkJXMU5kSUQwZ056dGNiaUFnU3k1emNHeHBkQ2duSnlrdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlocktYc2dRbHRyWFNBOUlHczdJSDBwTzF4dUlDQnlaWFIxY200Z0pHRnpjMmxuYmloN2ZTd2dRU2xiVTEwZ0lUMGdOeUI4ZkNCUFltcGxZM1F1YTJWNWN5Z2tZWE56YVdkdUtIdDlMQ0JDS1NrdWFtOXBiaWduSnlrZ0lUMGdTenRjYm4wcElEOGdablZ1WTNScGIyNGdZWE56YVdkdUtIUmhjbWRsZEN3Z2MyOTFjbU5sS1hzZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJHbHVaU0J1YnkxMWJuVnpaV1F0ZG1GeWMxeHVJQ0IyWVhJZ1ZDQWdJQ0FnUFNCMGIwOWlhbVZqZENoMFlYSm5aWFFwWEc0Z0lDQWdMQ0JoVEdWdUlDQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHaGNiaUFnSUNBc0lHbHVaR1Y0SUQwZ01WeHVJQ0FnSUN3Z1oyVjBVM2x0WW05c2N5QTlJR2RQVUZNdVpseHVJQ0FnSUN3Z2FYTkZiblZ0SUNBZ0lDQTlJSEJKUlM1bU8xeHVJQ0IzYUdsc1pTaGhUR1Z1SUQ0Z2FXNWtaWGdwZTF4dUlDQWdJSFpoY2lCVElDQWdJQ0FnUFNCSlQySnFaV04wS0dGeVozVnRaVzUwYzF0cGJtUmxlQ3NyWFNsY2JpQWdJQ0FnSUN3Z2EyVjVjeUFnSUQwZ1oyVjBVM2x0WW05c2N5QS9JR2RsZEV0bGVYTW9VeWt1WTI5dVkyRjBLR2RsZEZONWJXSnZiSE1vVXlrcElEb2daMlYwUzJWNWN5aFRLVnh1SUNBZ0lDQWdMQ0JzWlc1bmRHZ2dQU0JyWlhsekxteGxibWQwYUZ4dUlDQWdJQ0FnTENCcUlDQWdJQ0FnUFNBd1hHNGdJQ0FnSUNBc0lHdGxlVHRjYmlBZ0lDQjNhR2xzWlNoc1pXNW5kR2dnUGlCcUtXbG1LR2x6Ulc1MWJTNWpZV3hzS0ZNc0lHdGxlU0E5SUd0bGVYTmJhaXNyWFNrcFZGdHJaWGxkSUQwZ1UxdHJaWGxkTzF4dUlDQjlJSEpsZEhWeWJpQlVPMXh1ZlNBNklDUmhjM05wWjI0N0lpd2lMeThnTVRrdU1TNHlMaklnTHlBeE5TNHlMak11TlNCUFltcGxZM1F1WTNKbFlYUmxLRThnV3l3Z1VISnZjR1Z5ZEdsbGMxMHBYRzUyWVhJZ1lXNVBZbXBsWTNRZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXZZbXBsWTNRbktWeHVJQ0FzSUdSUWN5QWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV1J3Y3ljcFhHNGdJQ3dnWlc1MWJVSjFaMHRsZVhNZ1BTQnlaWEYxYVhKbEtDY3VMMTlsYm5WdExXSjFaeTFyWlhsekp5bGNiaUFnTENCSlJWOVFVazlVVHlBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNOb1lYSmxaQzFyWlhrbktTZ25TVVZmVUZKUFZFOG5LVnh1SUNBc0lFVnRjSFI1SUNBZ0lDQWdJRDBnWm5WdVkzUnBiMjRvS1hzZ0x5b2daVzF3ZEhrZ0tpOGdmVnh1SUNBc0lGQlNUMVJQVkZsUVJTQWdJRDBnSjNCeWIzUnZkSGx3WlNjN1hHNWNiaTh2SUVOeVpXRjBaU0J2WW1wbFkzUWdkMmwwYUNCbVlXdGxJR0J1ZFd4c1lDQndjbTkwYjNSNWNHVTZJSFZ6WlNCcFpuSmhiV1VnVDJKcVpXTjBJSGRwZEdnZ1kyeGxZWEpsWkNCd2NtOTBiM1I1Y0dWY2JuWmhjaUJqY21WaGRHVkVhV04wSUQwZ1puVnVZM1JwYjI0b0tYdGNiaUFnTHk4Z1ZHaHlZWE5vTENCM1lYTjBaU0JoYm1RZ2MyOWtiMjE1T2lCSlJTQkhReUJpZFdkY2JpQWdkbUZ5SUdsbWNtRnRaU0E5SUhKbGNYVnBjbVVvSnk0dlgyUnZiUzFqY21WaGRHVW5LU2duYVdaeVlXMWxKeWxjYmlBZ0lDQXNJR2tnSUNBZ0lDQTlJR1Z1ZFcxQ2RXZExaWGx6TG14bGJtZDBhRnh1SUNBZ0lDd2diSFFnSUNBZ0lEMGdKenduWEc0Z0lDQWdMQ0JuZENBZ0lDQWdQU0FuUGlkY2JpQWdJQ0FzSUdsbWNtRnRaVVJ2WTNWdFpXNTBPMXh1SUNCcFpuSmhiV1V1YzNSNWJHVXVaR2x6Y0d4aGVTQTlJQ2R1YjI1bEp6dGNiaUFnY21WeGRXbHlaU2duTGk5ZmFIUnRiQ2NwTG1Gd2NHVnVaRU5vYVd4a0tHbG1jbUZ0WlNrN1hHNGdJR2xtY21GdFpTNXpjbU1nUFNBbmFtRjJZWE5qY21sd2REb25PeUF2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bElHNXZMWE5qY21sd2RDMTFjbXhjYmlBZ0x5OGdZM0psWVhSbFJHbGpkQ0E5SUdsbWNtRnRaUzVqYjI1MFpXNTBWMmx1Wkc5M0xrOWlhbVZqZER0Y2JpQWdMeThnYUhSdGJDNXlaVzF2ZG1WRGFHbHNaQ2hwWm5KaGJXVXBPMXh1SUNCcFpuSmhiV1ZFYjJOMWJXVnVkQ0E5SUdsbWNtRnRaUzVqYjI1MFpXNTBWMmx1Wkc5M0xtUnZZM1Z0Wlc1ME8xeHVJQ0JwWm5KaGJXVkViMk4xYldWdWRDNXZjR1Z1S0NrN1hHNGdJR2xtY21GdFpVUnZZM1Z0Wlc1MExuZHlhWFJsS0d4MElDc2dKM05qY21sd2RDY2dLeUJuZENBcklDZGtiMk4xYldWdWRDNUdQVTlpYW1WamRDY2dLeUJzZENBcklDY3ZjMk55YVhCMEp5QXJJR2QwS1R0Y2JpQWdhV1p5WVcxbFJHOWpkVzFsYm5RdVkyeHZjMlVvS1R0Y2JpQWdZM0psWVhSbFJHbGpkQ0E5SUdsbWNtRnRaVVJ2WTNWdFpXNTBMa1k3WEc0Z0lIZG9hV3hsS0drdExTbGtaV3hsZEdVZ1kzSmxZWFJsUkdsamRGdFFVazlVVDFSWlVFVmRXMlZ1ZFcxQ2RXZExaWGx6VzJsZFhUdGNiaUFnY21WMGRYSnVJR055WldGMFpVUnBZM1FvS1R0Y2JuMDdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVDJKcVpXTjBMbU55WldGMFpTQjhmQ0JtZFc1amRHbHZiaUJqY21WaGRHVW9UeXdnVUhKdmNHVnlkR2xsY3lsN1hHNGdJSFpoY2lCeVpYTjFiSFE3WEc0Z0lHbG1LRThnSVQwOUlHNTFiR3dwZTF4dUlDQWdJRVZ0Y0hSNVcxQlNUMVJQVkZsUVJWMGdQU0JoYms5aWFtVmpkQ2hQS1R0Y2JpQWdJQ0J5WlhOMWJIUWdQU0J1WlhjZ1JXMXdkSGs3WEc0Z0lDQWdSVzF3ZEhsYlVGSlBWRTlVV1ZCRlhTQTlJRzUxYkd3N1hHNGdJQ0FnTHk4Z1lXUmtJRndpWDE5d2NtOTBiMTlmWENJZ1ptOXlJRTlpYW1WamRDNW5aWFJRY205MGIzUjVjR1ZQWmlCd2IyeDVabWxzYkZ4dUlDQWdJSEpsYzNWc2RGdEpSVjlRVWs5VVQxMGdQU0JQTzF4dUlDQjlJR1ZzYzJVZ2NtVnpkV3gwSUQwZ1kzSmxZWFJsUkdsamRDZ3BPMXh1SUNCeVpYUjFjbTRnVUhKdmNHVnlkR2xsY3lBOVBUMGdkVzVrWldacGJtVmtJRDhnY21WemRXeDBJRG9nWkZCektISmxjM1ZzZEN3Z1VISnZjR1Z5ZEdsbGN5azdYRzU5TzF4dUlpd2lkbUZ5SUdGdVQySnFaV04wSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZllXNHRiMkpxWldOMEp5bGNiaUFnTENCSlJUaGZSRTlOWDBSRlJrbE9SU0E5SUhKbGNYVnBjbVVvSnk0dlgybGxPQzFrYjIwdFpHVm1hVzVsSnlsY2JpQWdMQ0IwYjFCeWFXMXBkR2wyWlNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxYQnlhVzFwZEdsMlpTY3BYRzRnSUN3Z1pGQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIazdYRzVjYm1WNGNHOXlkSE11WmlBOUlISmxjWFZwY21Vb0p5NHZYMlJsYzJOeWFYQjBiM0p6SnlrZ1B5QlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtnT2lCbWRXNWpkR2x2YmlCa1pXWnBibVZRY205d1pYSjBlU2hQTENCUUxDQkJkSFJ5YVdKMWRHVnpLWHRjYmlBZ1lXNVBZbXBsWTNRb1R5azdYRzRnSUZBZ1BTQjBiMUJ5YVcxcGRHbDJaU2hRTENCMGNuVmxLVHRjYmlBZ1lXNVBZbXBsWTNRb1FYUjBjbWxpZFhSbGN5azdYRzRnSUdsbUtFbEZPRjlFVDAxZlJFVkdTVTVGS1hSeWVTQjdYRzRnSUNBZ2NtVjBkWEp1SUdSUUtFOHNJRkFzSUVGMGRISnBZblYwWlhNcE8xeHVJQ0I5SUdOaGRHTm9LR1VwZXlBdktpQmxiWEIwZVNBcUx5QjlYRzRnSUdsbUtDZG5aWFFuSUdsdUlFRjBkSEpwWW5WMFpYTWdmSHdnSjNObGRDY2dhVzRnUVhSMGNtbGlkWFJsY3lsMGFISnZkeUJVZVhCbFJYSnliM0lvSjBGalkyVnpjMjl5Y3lCdWIzUWdjM1Z3Y0c5eWRHVmtJU2NwTzF4dUlDQnBaaWduZG1Gc2RXVW5JR2x1SUVGMGRISnBZblYwWlhNcFQxdFFYU0E5SUVGMGRISnBZblYwWlhNdWRtRnNkV1U3WEc0Z0lISmxkSFZ5YmlCUE8xeHVmVHNpTENKMllYSWdaRkFnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WkhBbktWeHVJQ0FzSUdGdVQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YjJKcVpXTjBKeWxjYmlBZ0xDQm5aWFJMWlhseklDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFyWlhsekp5azdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnY21WeGRXbHlaU2duTGk5ZlpHVnpZM0pwY0hSdmNuTW5LU0EvSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGFXVnpJRG9nWm5WdVkzUnBiMjRnWkdWbWFXNWxVSEp2Y0dWeWRHbGxjeWhQTENCUWNtOXdaWEowYVdWektYdGNiaUFnWVc1UFltcGxZM1FvVHlrN1hHNGdJSFpoY2lCclpYbHpJQ0FnUFNCblpYUkxaWGx6S0ZCeWIzQmxjblJwWlhNcFhHNGdJQ0FnTENCc1pXNW5kR2dnUFNCclpYbHpMbXhsYm1kMGFGeHVJQ0FnSUN3Z2FTQTlJREJjYmlBZ0lDQXNJRkE3WEc0Z0lIZG9hV3hsS0d4bGJtZDBhQ0ErSUdrcFpGQXVaaWhQTENCUUlEMGdhMlY1YzF0cEt5dGRMQ0JRY205d1pYSjBhV1Z6VzFCZEtUdGNiaUFnY21WMGRYSnVJRTg3WEc1OU95SXNJblpoY2lCd1NVVWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxd2FXVW5LVnh1SUNBc0lHTnlaV0YwWlVSbGMyTWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZjSEp2Y0dWeWRIa3RaR1Z6WXljcFhHNGdJQ3dnZEc5SlQySnFaV04wSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXBiMkpxWldOMEp5bGNiaUFnTENCMGIxQnlhVzFwZEdsMlpTQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMWEJ5YVcxcGRHbDJaU2NwWEc0Z0lDd2dhR0Z6SUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlvWVhNbktWeHVJQ0FzSUVsRk9GOUVUMDFmUkVWR1NVNUZJRDBnY21WeGRXbHlaU2duTGk5ZmFXVTRMV1J2YlMxa1pXWnBibVVuS1Z4dUlDQXNJR2RQVUVRZ0lDQWdJQ0FnSUNBZ0lEMGdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2p0Y2JseHVaWGh3YjNKMGN5NW1JRDBnY21WeGRXbHlaU2duTGk5ZlpHVnpZM0pwY0hSdmNuTW5LU0EvSUdkUFVFUWdPaUJtZFc1amRHbHZiaUJuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSW9UeXdnVUNsN1hHNGdJRThnUFNCMGIwbFBZbXBsWTNRb1R5azdYRzRnSUZBZ1BTQjBiMUJ5YVcxcGRHbDJaU2hRTENCMGNuVmxLVHRjYmlBZ2FXWW9TVVU0WDBSUFRWOUVSVVpKVGtVcGRISjVJSHRjYmlBZ0lDQnlaWFIxY200Z1owOVFSQ2hQTENCUUtUdGNiaUFnZlNCallYUmphQ2hsS1hzZ0x5b2daVzF3ZEhrZ0tpOGdmVnh1SUNCcFppaG9ZWE1vVHl3Z1VDa3BjbVYwZFhKdUlHTnlaV0YwWlVSbGMyTW9JWEJKUlM1bUxtTmhiR3dvVHl3Z1VDa3NJRTliVUYwcE8xeHVmVHNpTENJdkx5Qm1ZV3hzWW1GamF5Qm1iM0lnU1VVeE1TQmlkV2RuZVNCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbE9ZVzFsY3lCM2FYUm9JR2xtY21GdFpTQmhibVFnZDJsdVpHOTNYRzUyWVhJZ2RHOUpUMkpxWldOMElEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGFXOWlhbVZqZENjcFhHNGdJQ3dnWjA5UVRpQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXZHZjRzRuS1M1bVhHNGdJQ3dnZEc5VGRISnBibWNnSUQwZ2UzMHVkRzlUZEhKcGJtYzdYRzVjYm5aaGNpQjNhVzVrYjNkT1lXMWxjeUE5SUhSNWNHVnZaaUIzYVc1a2IzY2dQVDBnSjI5aWFtVmpkQ2NnSmlZZ2QybHVaRzkzSUNZbUlFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVTVoYldWelhHNGdJRDhnVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVRtRnRaWE1vZDJsdVpHOTNLU0E2SUZ0ZE8xeHVYRzUyWVhJZ1oyVjBWMmx1Wkc5M1RtRnRaWE1nUFNCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUhSeWVTQjdYRzRnSUNBZ2NtVjBkWEp1SUdkUFVFNG9hWFFwTzF4dUlDQjlJR05oZEdOb0tHVXBlMXh1SUNBZ0lISmxkSFZ5YmlCM2FXNWtiM2RPWVcxbGN5NXpiR2xqWlNncE8xeHVJQ0I5WEc1OU8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5NW1JRDBnWm5WdVkzUnBiMjRnWjJWMFQzZHVVSEp2Y0dWeWRIbE9ZVzFsY3locGRDbDdYRzRnSUhKbGRIVnliaUIzYVc1a2IzZE9ZVzFsY3lBbUppQjBiMU4wY21sdVp5NWpZV3hzS0dsMEtTQTlQU0FuVzI5aWFtVmpkQ0JYYVc1a2IzZGRKeUEvSUdkbGRGZHBibVJ2ZDA1aGJXVnpLR2wwS1NBNklHZFBVRTRvZEc5SlQySnFaV04wS0dsMEtTazdYRzU5TzF4dUlpd2lMeThnTVRrdU1TNHlMamNnTHlBeE5TNHlMak11TkNCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbE9ZVzFsY3loUEtWeHVkbUZ5SUNSclpYbHpJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRhMlY1Y3kxcGJuUmxjbTVoYkNjcFhHNGdJQ3dnYUdsa1pHVnVTMlY1Y3lBOUlISmxjWFZwY21Vb0p5NHZYMlZ1ZFcwdFluVm5MV3RsZVhNbktTNWpiMjVqWVhRb0oyeGxibWQwYUNjc0lDZHdjbTkwYjNSNWNHVW5LVHRjYmx4dVpYaHdiM0owY3k1bUlEMGdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTWdmSHdnWm5WdVkzUnBiMjRnWjJWMFQzZHVVSEp2Y0dWeWRIbE9ZVzFsY3loUEtYdGNiaUFnY21WMGRYSnVJQ1JyWlhsektFOHNJR2hwWkdSbGJrdGxlWE1wTzF4dWZUc2lMQ0psZUhCdmNuUnpMbVlnUFNCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbFRlVzFpYjJ4ek95SXNJaTh2SURFNUxqRXVNaTQ1SUM4Z01UVXVNaTR6TGpJZ1QySnFaV04wTG1kbGRGQnliM1J2ZEhsd1pVOW1LRThwWEc1MllYSWdhR0Z6SUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9ZWE1uS1Z4dUlDQXNJSFJ2VDJKcVpXTjBJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YjJKcVpXTjBKeWxjYmlBZ0xDQkpSVjlRVWs5VVR5QWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzTm9ZWEpsWkMxclpYa25LU2duU1VWZlVGSlBWRThuS1Z4dUlDQXNJRTlpYW1WamRGQnliM1J2SUQwZ1QySnFaV04wTG5CeWIzUnZkSGx3WlR0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlBZbXBsWTNRdVoyVjBVSEp2ZEc5MGVYQmxUMllnZkh3Z1puVnVZM1JwYjI0b1R5bDdYRzRnSUU4Z1BTQjBiMDlpYW1WamRDaFBLVHRjYmlBZ2FXWW9hR0Z6S0U4c0lFbEZYMUJTVDFSUEtTbHlaWFIxY200Z1QxdEpSVjlRVWs5VVQxMDdYRzRnSUdsbUtIUjVjR1Z2WmlCUExtTnZibk4wY25WamRHOXlJRDA5SUNkbWRXNWpkR2x2YmljZ0ppWWdUeUJwYm5OMFlXNWpaVzltSUU4dVkyOXVjM1J5ZFdOMGIzSXBlMXh1SUNBZ0lISmxkSFZ5YmlCUExtTnZibk4wY25WamRHOXlMbkJ5YjNSdmRIbHdaVHRjYmlBZ2ZTQnlaWFIxY200Z1R5QnBibk4wWVc1alpXOW1JRTlpYW1WamRDQS9JRTlpYW1WamRGQnliM1J2SURvZ2JuVnNiRHRjYm4wN0lpd2lkbUZ5SUdoaGN5QWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJoaGN5Y3BYRzRnSUN3Z2RHOUpUMkpxWldOMElDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRhVzlpYW1WamRDY3BYRzRnSUN3Z1lYSnlZWGxKYm1SbGVFOW1JRDBnY21WeGRXbHlaU2duTGk5ZllYSnlZWGt0YVc1amJIVmtaWE1uS1NobVlXeHpaU2xjYmlBZ0xDQkpSVjlRVWs5VVR5QWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXphR0Z5WldRdGEyVjVKeWtvSjBsRlgxQlNUMVJQSnlrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9iMkpxWldOMExDQnVZVzFsY3lsN1hHNGdJSFpoY2lCUElDQWdJQ0FnUFNCMGIwbFBZbXBsWTNRb2IySnFaV04wS1Z4dUlDQWdJQ3dnYVNBZ0lDQWdJRDBnTUZ4dUlDQWdJQ3dnY21WemRXeDBJRDBnVzExY2JpQWdJQ0FzSUd0bGVUdGNiaUFnWm05eUtHdGxlU0JwYmlCUEtXbG1LR3RsZVNBaFBTQkpSVjlRVWs5VVR5bG9ZWE1vVHl3Z2EyVjVLU0FtSmlCeVpYTjFiSFF1Y0hWemFDaHJaWGtwTzF4dUlDQXZMeUJFYjI0bmRDQmxiblZ0SUdKMVp5QW1JR2hwWkdSbGJpQnJaWGx6WEc0Z0lIZG9hV3hsS0c1aGJXVnpMbXhsYm1kMGFDQStJR2twYVdZb2FHRnpLRThzSUd0bGVTQTlJRzVoYldWelcya3JLMTBwS1h0Y2JpQWdJQ0IrWVhKeVlYbEpibVJsZUU5bUtISmxjM1ZzZEN3Z2EyVjVLU0I4ZkNCeVpYTjFiSFF1Y0hWemFDaHJaWGtwTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzU5T3lJc0lpOHZJREU1TGpFdU1pNHhOQ0F2SURFMUxqSXVNeTR4TkNCUFltcGxZM1F1YTJWNWN5aFBLVnh1ZG1GeUlDUnJaWGx6SUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFd0bGVYTXRhVzUwWlhKdVlXd25LVnh1SUNBc0lHVnVkVzFDZFdkTFpYbHpJRDBnY21WeGRXbHlaU2duTGk5ZlpXNTFiUzFpZFdjdGEyVjVjeWNwTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFOWlhbVZqZEM1clpYbHpJSHg4SUdaMWJtTjBhVzl1SUd0bGVYTW9UeWw3WEc0Z0lISmxkSFZ5YmlBa2EyVjVjeWhQTENCbGJuVnRRblZuUzJWNWN5azdYRzU5T3lJc0ltVjRjRzl5ZEhNdVppQTlJSHQ5TG5CeWIzQmxjblI1U1hORmJuVnRaWEpoWW14bE95SXNJaTh2SUcxdmMzUWdUMkpxWldOMElHMWxkR2h2WkhNZ1lua2dSVk0ySUhOb2IzVnNaQ0JoWTJObGNIUWdjSEpwYldsMGFYWmxjMXh1ZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lHTnZjbVVnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlqYjNKbEp5bGNiaUFnTENCbVlXbHNjeUFnSUQwZ2NtVnhkV2x5WlNnbkxpOWZabUZwYkhNbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9TMFZaTENCbGVHVmpLWHRjYmlBZ2RtRnlJR1p1SUNBOUlDaGpiM0psTGs5aWFtVmpkQ0I4ZkNCN2ZTbGJTMFZaWFNCOGZDQlBZbXBsWTNSYlMwVlpYVnh1SUNBZ0lDd2daWGh3SUQwZ2UzMDdYRzRnSUdWNGNGdExSVmxkSUQwZ1pYaGxZeWhtYmlrN1hHNGdJQ1JsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRJQ3NnSkdWNGNHOXlkQzVHSUNvZ1ptRnBiSE1vWm5WdVkzUnBiMjRvS1hzZ1ptNG9NU2s3SUgwcExDQW5UMkpxWldOMEp5d2daWGh3S1R0Y2JuMDdJaXdpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhpYVhSdFlYQXNJSFpoYkhWbEtYdGNiaUFnY21WMGRYSnVJSHRjYmlBZ0lDQmxiblZ0WlhKaFlteGxJQ0E2SUNFb1ltbDBiV0Z3SUNZZ01Ta3NYRzRnSUNBZ1kyOXVabWxuZFhKaFlteGxPaUFoS0dKcGRHMWhjQ0FtSURJcExGeHVJQ0FnSUhkeWFYUmhZbXhsSUNBZ0lEb2dJU2hpYVhSdFlYQWdKaUEwS1N4Y2JpQWdJQ0IyWVd4MVpTQWdJQ0FnSUNBNklIWmhiSFZsWEc0Z0lIMDdYRzU5T3lJc0luWmhjaUJvYVdSbElEMGdjbVZ4ZFdseVpTZ25MaTlmYUdsa1pTY3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWgwWVhKblpYUXNJSE55WXl3Z2MyRm1aU2w3WEc0Z0lHWnZjaWgyWVhJZ2EyVjVJR2x1SUhOeVl5bDdYRzRnSUNBZ2FXWW9jMkZtWlNBbUppQjBZWEpuWlhSYmEyVjVYU2wwWVhKblpYUmJhMlY1WFNBOUlITnlZMXRyWlhsZE8xeHVJQ0FnSUdWc2MyVWdhR2xrWlNoMFlYSm5aWFFzSUd0bGVTd2djM0pqVzJ0bGVWMHBPMXh1SUNCOUlISmxkSFZ5YmlCMFlYSm5aWFE3WEc1OU95SXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdjbVZ4ZFdseVpTZ25MaTlmYUdsa1pTY3BPeUlzSWk4dklGZHZjbXR6SUhkcGRHZ2dYMTl3Y205MGIxOWZJRzl1YkhrdUlFOXNaQ0IyT0NCallXNG5kQ0IzYjNKcklIZHBkR2dnYm5Wc2JDQndjbTkwYnlCdlltcGxZM1J6TGx4dUx5b2daWE5zYVc1MExXUnBjMkZpYkdVZ2JtOHRjSEp2ZEc4Z0tpOWNiblpoY2lCcGMwOWlhbVZqZENBOUlISmxjWFZwY21Vb0p5NHZYMmx6TFc5aWFtVmpkQ2NwWEc0Z0lDd2dZVzVQWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXZZbXBsWTNRbktUdGNiblpoY2lCamFHVmpheUE5SUdaMWJtTjBhVzl1S0U4c0lIQnliM1J2S1h0Y2JpQWdZVzVQWW1wbFkzUW9UeWs3WEc0Z0lHbG1LQ0ZwYzA5aWFtVmpkQ2h3Y205MGJ5a2dKaVlnY0hKdmRHOGdJVDA5SUc1MWJHd3BkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtIQnliM1J2SUNzZ1hDSTZJR05oYmlkMElITmxkQ0JoY3lCd2NtOTBiM1I1Y0dVaFhDSXBPMXh1ZlR0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UxeHVJQ0J6WlhRNklFOWlhbVZqZEM1elpYUlFjbTkwYjNSNWNHVlBaaUI4ZkNBb0oxOWZjSEp2ZEc5Zlh5Y2dhVzRnZTMwZ1B5QXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXNhVzVsWEc0Z0lDQWdablZ1WTNScGIyNG9kR1Z6ZEN3Z1luVm5aM2tzSUhObGRDbDdYRzRnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNCelpYUWdQU0J5WlhGMWFYSmxLQ2N1TDE5amRIZ25LU2hHZFc1amRHbHZiaTVqWVd4c0xDQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaMjl3WkNjcExtWW9UMkpxWldOMExuQnliM1J2ZEhsd1pTd2dKMTlmY0hKdmRHOWZYeWNwTG5ObGRDd2dNaWs3WEc0Z0lDQWdJQ0FnSUhObGRDaDBaWE4wTENCYlhTazdYRzRnSUNBZ0lDQWdJR0oxWjJkNUlEMGdJU2gwWlhOMElHbHVjM1JoYm1ObGIyWWdRWEp5WVhrcE8xeHVJQ0FnSUNBZ2ZTQmpZWFJqYUNobEtYc2dZblZuWjNrZ1BTQjBjblZsT3lCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnYzJWMFVISnZkRzkwZVhCbFQyWW9UeXdnY0hKdmRHOHBlMXh1SUNBZ0lDQWdJQ0JqYUdWamF5aFBMQ0J3Y205MGJ5azdYRzRnSUNBZ0lDQWdJR2xtS0dKMVoyZDVLVTh1WDE5d2NtOTBiMTlmSUQwZ2NISnZkRzg3WEc0Z0lDQWdJQ0FnSUdWc2MyVWdjMlYwS0U4c0lIQnliM1J2S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUU4N1hHNGdJQ0FnSUNCOU8xeHVJQ0FnSUgwb2UzMHNJR1poYkhObEtTQTZJSFZ1WkdWbWFXNWxaQ2tzWEc0Z0lHTm9aV05yT2lCamFHVmphMXh1ZlRzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdaMnh2WW1Gc0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW5iRzlpWVd3bktWeHVJQ0FzSUdOdmNtVWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWTI5eVpTY3BYRzRnSUN3Z1pGQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WkhBbktWeHVJQ0FzSUVSRlUwTlNTVkJVVDFKVElEMGdjbVZ4ZFdseVpTZ25MaTlmWkdWelkzSnBjSFJ2Y25NbktWeHVJQ0FzSUZOUVJVTkpSVk1nSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZDJ0ekp5a29KM053WldOcFpYTW5LVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmloTFJWa3BlMXh1SUNCMllYSWdReUE5SUhSNWNHVnZaaUJqYjNKbFcwdEZXVjBnUFQwZ0oyWjFibU4wYVc5dUp5QS9JR052Y21WYlMwVlpYU0E2SUdkc2IySmhiRnRMUlZsZE8xeHVJQ0JwWmloRVJWTkRVa2xRVkU5U1V5QW1KaUJESUNZbUlDRkRXMU5RUlVOSlJWTmRLV1JRTG1Zb1F5d2dVMUJGUTBsRlV5d2dlMXh1SUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNCblpYUTZJR1oxYm1OMGFXOXVLQ2w3SUhKbGRIVnliaUIwYUdsek95QjlYRzRnSUgwcE8xeHVmVHNpTENKMllYSWdaR1ZtSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXUndKeWt1Wmx4dUlDQXNJR2hoY3lBOUlISmxjWFZwY21Vb0p5NHZYMmhoY3ljcFhHNGdJQ3dnVkVGSElEMGdjbVZ4ZFdseVpTZ25MaTlmZDJ0ekp5a29KM1J2VTNSeWFXNW5WR0ZuSnlrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hWFFzSUhSaFp5d2djM1JoZENsN1hHNGdJR2xtS0dsMElDWW1JQ0ZvWVhNb2FYUWdQU0J6ZEdGMElEOGdhWFFnT2lCcGRDNXdjbTkwYjNSNWNHVXNJRlJCUnlrcFpHVm1LR2wwTENCVVFVY3NJSHRqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzSUhaaGJIVmxPaUIwWVdkOUtUdGNibjA3SWl3aWRtRnlJSE5vWVhKbFpDQTlJSEpsY1hWcGNtVW9KeTR2WDNOb1lYSmxaQ2NwS0NkclpYbHpKeWxjYmlBZ0xDQjFhV1FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkxYVdRbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hMlY1S1h0Y2JpQWdjbVYwZFhKdUlITm9ZWEpsWkZ0clpYbGRJSHg4SUNoemFHRnlaV1JiYTJWNVhTQTlJSFZwWkNoclpYa3BLVHRjYm4wN0lpd2lkbUZ5SUdkc2IySmhiQ0E5SUhKbGNYVnBjbVVvSnk0dlgyZHNiMkpoYkNjcFhHNGdJQ3dnVTBoQlVrVkVJRDBnSjE5ZlkyOXlaUzFxYzE5emFHRnlaV1JmWHlkY2JpQWdMQ0J6ZEc5eVpTQWdQU0JuYkc5aVlXeGJVMGhCVWtWRVhTQjhmQ0FvWjJ4dlltRnNXMU5JUVZKRlJGMGdQU0I3ZlNrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHdGxlU2w3WEc0Z0lISmxkSFZ5YmlCemRHOXlaVnRyWlhsZElIeDhJQ2h6ZEc5eVpWdHJaWGxkSUQwZ2UzMHBPMXh1ZlRzaUxDSXZMeUEzTGpNdU1qQWdVM0JsWTJsbGMwTnZibk4wY25WamRHOXlLRThzSUdSbFptRjFiSFJEYjI1emRISjFZM1J2Y2lsY2JuWmhjaUJoYms5aWFtVmpkQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWhiaTF2WW1wbFkzUW5LVnh1SUNBc0lHRkdkVzVqZEdsdmJpQTlJSEpsY1hWcGNtVW9KeTR2WDJFdFpuVnVZM1JwYjI0bktWeHVJQ0FzSUZOUVJVTkpSVk1nSUNBOUlISmxjWFZwY21Vb0p5NHZYM2RyY3ljcEtDZHpjR1ZqYVdWekp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLRThzSUVRcGUxeHVJQ0IyWVhJZ1F5QTlJR0Z1VDJKcVpXTjBLRThwTG1OdmJuTjBjblZqZEc5eUxDQlRPMXh1SUNCeVpYUjFjbTRnUXlBOVBUMGdkVzVrWldacGJtVmtJSHg4SUNoVElEMGdZVzVQWW1wbFkzUW9ReWxiVTFCRlEwbEZVMTBwSUQwOUlIVnVaR1ZtYVc1bFpDQS9JRVFnT2lCaFJuVnVZM1JwYjI0b1V5azdYRzU5T3lJc0luWmhjaUIwYjBsdWRHVm5aWElnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTFwYm5SbFoyVnlKeWxjYmlBZ0xDQmtaV1pwYm1Wa0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5a1pXWnBibVZrSnlrN1hHNHZMeUIwY25WbElDQXRQaUJUZEhKcGJtY2pZWFJjYmk4dklHWmhiSE5sSUMwK0lGTjBjbWx1WnlOamIyUmxVRzlwYm5SQmRGeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaFVUMTlUVkZKSlRrY3BlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRvZEdoaGRDd2djRzl6S1h0Y2JpQWdJQ0IyWVhJZ2N5QTlJRk4wY21sdVp5aGtaV1pwYm1Wa0tIUm9ZWFFwS1Z4dUlDQWdJQ0FnTENCcElEMGdkRzlKYm5SbFoyVnlLSEJ2Y3lsY2JpQWdJQ0FnSUN3Z2JDQTlJSE11YkdWdVozUm9YRzRnSUNBZ0lDQXNJR0VzSUdJN1hHNGdJQ0FnYVdZb2FTQThJREFnZkh3Z2FTQStQU0JzS1hKbGRIVnliaUJVVDE5VFZGSkpUa2NnUHlBbkp5QTZJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQmhJRDBnY3k1amFHRnlRMjlrWlVGMEtHa3BPMXh1SUNBZ0lISmxkSFZ5YmlCaElEd2dNSGhrT0RBd0lIeDhJR0VnUGlBd2VHUmlabVlnZkh3Z2FTQXJJREVnUFQwOUlHd2dmSHdnS0dJZ1BTQnpMbU5vWVhKRGIyUmxRWFFvYVNBcklERXBLU0E4SURCNFpHTXdNQ0I4ZkNCaUlENGdNSGhrWm1abVhHNGdJQ0FnSUNBL0lGUlBYMU5VVWtsT1J5QS9JSE11WTJoaGNrRjBLR2twSURvZ1lWeHVJQ0FnSUNBZ09pQlVUMTlUVkZKSlRrY2dQeUJ6TG5Oc2FXTmxLR2tzSUdrZ0t5QXlLU0E2SUNoaElDMGdNSGhrT0RBd0lEdzhJREV3S1NBcklDaGlJQzBnTUhoa1l6QXdLU0FySURCNE1UQXdNREE3WEc0Z0lIMDdYRzU5T3lJc0luWmhjaUJqZEhnZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpkSGduS1Z4dUlDQXNJR2x1ZG05clpTQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgybHVkbTlyWlNjcFhHNGdJQ3dnYUhSdGJDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhSFJ0YkNjcFhHNGdJQ3dnWTJWc0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaRzl0TFdOeVpXRjBaU2NwWEc0Z0lDd2daMnh2WW1Gc0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZloyeHZZbUZzSnlsY2JpQWdMQ0J3Y205alpYTnpJQ0FnSUNBZ0lDQWdJQ0FnUFNCbmJHOWlZV3d1Y0hKdlkyVnpjMXh1SUNBc0lITmxkRlJoYzJzZ0lDQWdJQ0FnSUNBZ0lDQTlJR2RzYjJKaGJDNXpaWFJKYlcxbFpHbGhkR1ZjYmlBZ0xDQmpiR1ZoY2xSaGMyc2dJQ0FnSUNBZ0lDQWdQU0JuYkc5aVlXd3VZMnhsWVhKSmJXMWxaR2xoZEdWY2JpQWdMQ0JOWlhOellXZGxRMmhoYm01bGJDQWdJQ0FnUFNCbmJHOWlZV3d1VFdWemMyRm5aVU5vWVc1dVpXeGNiaUFnTENCamIzVnVkR1Z5SUNBZ0lDQWdJQ0FnSUNBZ1BTQXdYRzRnSUN3Z2NYVmxkV1VnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdlMzFjYmlBZ0xDQlBUbEpGUVVSWlUxUkJWRVZEU0VGT1IwVWdQU0FuYjI1eVpXRmtlWE4wWVhSbFkyaGhibWRsSjF4dUlDQXNJR1JsWm1WeUxDQmphR0Z1Ym1Wc0xDQndiM0owTzF4dWRtRnlJSEoxYmlBOUlHWjFibU4wYVc5dUtDbDdYRzRnSUhaaGNpQnBaQ0E5SUN0MGFHbHpPMXh1SUNCcFppaHhkV1YxWlM1b1lYTlBkMjVRY205d1pYSjBlU2hwWkNrcGUxeHVJQ0FnSUhaaGNpQm1iaUE5SUhGMVpYVmxXMmxrWFR0Y2JpQWdJQ0JrWld4bGRHVWdjWFZsZFdWYmFXUmRPMXh1SUNBZ0lHWnVLQ2s3WEc0Z0lIMWNibjA3WEc1MllYSWdiR2x6ZEdWdVpYSWdQU0JtZFc1amRHbHZiaWhsZG1WdWRDbDdYRzRnSUhKMWJpNWpZV3hzS0dWMlpXNTBMbVJoZEdFcE8xeHVmVHRjYmk4dklFNXZaR1V1YW5NZ01DNDVLeUFtSUVsRk1UQXJJR2hoY3lCelpYUkpiVzFsWkdsaGRHVXNJRzkwYUdWeWQybHpaVHBjYm1sbUtDRnpaWFJVWVhOcklIeDhJQ0ZqYkdWaGNsUmhjMnNwZTF4dUlDQnpaWFJVWVhOcklEMGdablZ1WTNScGIyNGdjMlYwU1cxdFpXUnBZWFJsS0dadUtYdGNiaUFnSUNCMllYSWdZWEpuY3lBOUlGdGRMQ0JwSUQwZ01UdGNiaUFnSUNCM2FHbHNaU2hoY21kMWJXVnVkSE11YkdWdVozUm9JRDRnYVNsaGNtZHpMbkIxYzJnb1lYSm5kVzFsYm5Selcya3JLMTBwTzF4dUlDQWdJSEYxWlhWbFd5c3JZMjkxYm5SbGNsMGdQU0JtZFc1amRHbHZiaWdwZTF4dUlDQWdJQ0FnYVc1MmIydGxLSFI1Y0dWdlppQm1iaUE5UFNBblpuVnVZM1JwYjI0bklEOGdabTRnT2lCR2RXNWpkR2x2YmlobWJpa3NJR0Z5WjNNcE8xeHVJQ0FnSUgwN1hHNGdJQ0FnWkdWbVpYSW9ZMjkxYm5SbGNpazdYRzRnSUNBZ2NtVjBkWEp1SUdOdmRXNTBaWEk3WEc0Z0lIMDdYRzRnSUdOc1pXRnlWR0Z6YXlBOUlHWjFibU4wYVc5dUlHTnNaV0Z5U1cxdFpXUnBZWFJsS0dsa0tYdGNiaUFnSUNCa1pXeGxkR1VnY1hWbGRXVmJhV1JkTzF4dUlDQjlPMXh1SUNBdkx5Qk9iMlJsTG1weklEQXVPQzFjYmlBZ2FXWW9jbVZ4ZFdseVpTZ25MaTlmWTI5bUp5a29jSEp2WTJWemN5a2dQVDBnSjNCeWIyTmxjM01uS1h0Y2JpQWdJQ0JrWldabGNpQTlJR1oxYm1OMGFXOXVLR2xrS1h0Y2JpQWdJQ0FnSUhCeWIyTmxjM011Ym1WNGRGUnBZMnNvWTNSNEtISjFiaXdnYVdRc0lERXBLVHRjYmlBZ0lDQjlPMXh1SUNBdkx5QkNjbTkzYzJWeWN5QjNhWFJvSUUxbGMzTmhaMlZEYUdGdWJtVnNMQ0JwYm1Oc2RXUmxjeUJYWldKWGIzSnJaWEp6WEc0Z0lIMGdaV3h6WlNCcFppaE5aWE56WVdkbFEyaGhibTVsYkNsN1hHNGdJQ0FnWTJoaGJtNWxiQ0E5SUc1bGR5Qk5aWE56WVdkbFEyaGhibTVsYkR0Y2JpQWdJQ0J3YjNKMElDQWdJRDBnWTJoaGJtNWxiQzV3YjNKME1qdGNiaUFnSUNCamFHRnVibVZzTG5CdmNuUXhMbTl1YldWemMyRm5aU0E5SUd4cGMzUmxibVZ5TzF4dUlDQWdJR1JsWm1WeUlEMGdZM1I0S0hCdmNuUXVjRzl6ZEUxbGMzTmhaMlVzSUhCdmNuUXNJREVwTzF4dUlDQXZMeUJDY205M2MyVnljeUIzYVhSb0lIQnZjM1JOWlhOellXZGxMQ0J6YTJsd0lGZGxZbGR2Y210bGNuTmNiaUFnTHk4Z1NVVTRJR2hoY3lCd2IzTjBUV1Z6YzJGblpTd2dZblYwSUdsMEozTWdjM2x1WXlBbUlIUjVjR1Z2WmlCcGRITWdjRzl6ZEUxbGMzTmhaMlVnYVhNZ0oyOWlhbVZqZENkY2JpQWdmU0JsYkhObElHbG1LR2RzYjJKaGJDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUlDWW1JSFI1Y0dWdlppQndiM04wVFdWemMyRm5aU0E5UFNBblpuVnVZM1JwYjI0bklDWW1JQ0ZuYkc5aVlXd3VhVzF3YjNKMFUyTnlhWEIwY3lsN1hHNGdJQ0FnWkdWbVpYSWdQU0JtZFc1amRHbHZiaWhwWkNsN1hHNGdJQ0FnSUNCbmJHOWlZV3d1Y0c5emRFMWxjM05oWjJVb2FXUWdLeUFuSnl3Z0p5b25LVHRjYmlBZ0lDQjlPMXh1SUNBZ0lHZHNiMkpoYkM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkdFpYTnpZV2RsSnl3Z2JHbHpkR1Z1WlhJc0lHWmhiSE5sS1R0Y2JpQWdMeThnU1VVNExWeHVJQ0I5SUdWc2MyVWdhV1lvVDA1U1JVRkVXVk5VUVZSRlEwaEJUa2RGSUdsdUlHTmxiQ2duYzJOeWFYQjBKeWtwZTF4dUlDQWdJR1JsWm1WeUlEMGdablZ1WTNScGIyNG9hV1FwZTF4dUlDQWdJQ0FnYUhSdGJDNWhjSEJsYm1SRGFHbHNaQ2hqWld3b0ozTmpjbWx3ZENjcEtWdFBUbEpGUVVSWlUxUkJWRVZEU0VGT1IwVmRJRDBnWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUNBZ2FIUnRiQzV5WlcxdmRtVkRhR2xzWkNoMGFHbHpLVHRjYmlBZ0lDQWdJQ0FnY25WdUxtTmhiR3dvYVdRcE8xeHVJQ0FnSUNBZ2ZUdGNiaUFnSUNCOU8xeHVJQ0F2THlCU1pYTjBJRzlzWkNCaWNtOTNjMlZ5YzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUdSbFptVnlJRDBnWm5WdVkzUnBiMjRvYVdRcGUxeHVJQ0FnSUNBZ2MyVjBWR2x0Wlc5MWRDaGpkSGdvY25WdUxDQnBaQ3dnTVNrc0lEQXBPMXh1SUNBZ0lIMDdYRzRnSUgxY2JuMWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdlMXh1SUNCelpYUTZJQ0FnYzJWMFZHRnpheXhjYmlBZ1kyeGxZWEk2SUdOc1pXRnlWR0Z6YTF4dWZUc2lMQ0oyWVhJZ2RHOUpiblJsWjJWeUlEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGFXNTBaV2RsY2ljcFhHNGdJQ3dnYldGNElDQWdJQ0FnSUQwZ1RXRjBhQzV0WVhoY2JpQWdMQ0J0YVc0Z0lDQWdJQ0FnUFNCTllYUm9MbTFwYmp0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2FXNWtaWGdzSUd4bGJtZDBhQ2w3WEc0Z0lHbHVaR1Y0SUQwZ2RHOUpiblJsWjJWeUtHbHVaR1Y0S1R0Y2JpQWdjbVYwZFhKdUlHbHVaR1Y0SUR3Z01DQS9JRzFoZUNocGJtUmxlQ0FySUd4bGJtZDBhQ3dnTUNrZ09pQnRhVzRvYVc1a1pYZ3NJR3hsYm1kMGFDazdYRzU5T3lJc0lpOHZJRGN1TVM0MElGUnZTVzUwWldkbGNseHVkbUZ5SUdObGFXd2dJRDBnVFdGMGFDNWpaV2xzWEc0Z0lDd2dabXh2YjNJZ1BTQk5ZWFJvTG1ac2IyOXlPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhwZENsN1hHNGdJSEpsZEhWeWJpQnBjMDVoVGlocGRDQTlJQ3RwZENrZ1B5QXdJRG9nS0dsMElENGdNQ0EvSUdac2IyOXlJRG9nWTJWcGJDa29hWFFwTzF4dWZUc2lMQ0l2THlCMGJ5QnBibVJsZUdWa0lHOWlhbVZqZEN3Z2RHOVBZbXBsWTNRZ2QybDBhQ0JtWVd4c1ltRmpheUJtYjNJZ2JtOXVMV0Z5Y21GNUxXeHBhMlVnUlZNeklITjBjbWx1WjNOY2JuWmhjaUJKVDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk5ZmFXOWlhbVZqZENjcFhHNGdJQ3dnWkdWbWFXNWxaQ0E5SUhKbGNYVnBjbVVvSnk0dlgyUmxabWx1WldRbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQnlaWFIxY200Z1NVOWlhbVZqZENoa1pXWnBibVZrS0dsMEtTazdYRzU5T3lJc0lpOHZJRGN1TVM0eE5TQlViMHhsYm1kMGFGeHVkbUZ5SUhSdlNXNTBaV2RsY2lBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFdsdWRHVm5aWEluS1Z4dUlDQXNJRzFwYmlBZ0lDQWdJQ0E5SUUxaGRHZ3ViV2x1TzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUhKbGRIVnliaUJwZENBK0lEQWdQeUJ0YVc0b2RHOUpiblJsWjJWeUtHbDBLU3dnTUhneFptWm1abVptWm1abVptWm1aaWtnT2lBd095QXZMeUJ3YjNjb01pd2dOVE1wSUMwZ01TQTlQU0E1TURBM01UazVNalUwTnpRd09Ua3hYRzU5T3lJc0lpOHZJRGN1TVM0eE15QlViMDlpYW1WamRDaGhjbWQxYldWdWRDbGNiblpoY2lCa1pXWnBibVZrSUQwZ2NtVnhkV2x5WlNnbkxpOWZaR1ZtYVc1bFpDY3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhwZENsN1hHNGdJSEpsZEhWeWJpQlBZbXBsWTNRb1pHVm1hVzVsWkNocGRDa3BPMXh1ZlRzaUxDSXZMeUEzTGpFdU1TQlViMUJ5YVcxcGRHbDJaU2hwYm5CMWRDQmJMQ0JRY21WbVpYSnlaV1JVZVhCbFhTbGNiblpoY2lCcGMwOWlhbVZqZENBOUlISmxjWFZwY21Vb0p5NHZYMmx6TFc5aWFtVmpkQ2NwTzF4dUx5OGdhVzV6ZEdWaFpDQnZaaUIwYUdVZ1JWTTJJSE53WldNZ2RtVnljMmx2Yml3Z2QyVWdaR2xrYmlkMElHbHRjR3hsYldWdWRDQkFRSFJ2VUhKcGJXbDBhWFpsSUdOaGMyVmNiaTh2SUdGdVpDQjBhR1VnYzJWamIyNWtJR0Z5WjNWdFpXNTBJQzBnWm14aFp5QXRJSEJ5WldabGNuSmxaQ0IwZVhCbElHbHpJR0VnYzNSeWFXNW5YRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwTENCVEtYdGNiaUFnYVdZb0lXbHpUMkpxWldOMEtHbDBLU2x5WlhSMWNtNGdhWFE3WEc0Z0lIWmhjaUJtYml3Z2RtRnNPMXh1SUNCcFppaFRJQ1ltSUhSNWNHVnZaaUFvWm00Z1BTQnBkQzUwYjFOMGNtbHVaeWtnUFQwZ0oyWjFibU4wYVc5dUp5QW1KaUFoYVhOUFltcGxZM1FvZG1Gc0lEMGdabTR1WTJGc2JDaHBkQ2twS1hKbGRIVnliaUIyWVd3N1hHNGdJR2xtS0hSNWNHVnZaaUFvWm00Z1BTQnBkQzUyWVd4MVpVOW1LU0E5UFNBblpuVnVZM1JwYjI0bklDWW1JQ0ZwYzA5aWFtVmpkQ2gyWVd3Z1BTQm1iaTVqWVd4c0tHbDBLU2twY21WMGRYSnVJSFpoYkR0Y2JpQWdhV1lvSVZNZ0ppWWdkSGx3Wlc5bUlDaG1iaUE5SUdsMExuUnZVM1J5YVc1bktTQTlQU0FuWm5WdVkzUnBiMjRuSUNZbUlDRnBjMDlpYW1WamRDaDJZV3dnUFNCbWJpNWpZV3hzS0dsMEtTa3BjbVYwZFhKdUlIWmhiRHRjYmlBZ2RHaHliM2NnVkhsd1pVVnljbTl5S0Z3aVEyRnVKM1FnWTI5dWRtVnlkQ0J2WW1wbFkzUWdkRzhnY0hKcGJXbDBhWFpsSUhaaGJIVmxYQ0lwTzF4dWZUc2lMQ0oyWVhJZ2FXUWdQU0F3WEc0Z0lDd2djSGdnUFNCTllYUm9MbkpoYm1SdmJTZ3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhyWlhrcGUxeHVJQ0J5WlhSMWNtNGdKMU41YldKdmJDZ25MbU52Ym1OaGRDaHJaWGtnUFQwOUlIVnVaR1ZtYVc1bFpDQS9JQ2NuSURvZ2EyVjVMQ0FuS1Y4bkxDQW9LeXRwWkNBcklIQjRLUzUwYjFOMGNtbHVaeWd6TmlrcE8xeHVmVHNpTENKMllYSWdaMnh2WW1Gc0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LVnh1SUNBc0lHTnZjbVVnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZMjl5WlNjcFhHNGdJQ3dnVEVsQ1VrRlNXU0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5c2FXSnlZWEo1SnlsY2JpQWdMQ0IzYTNORmVIUWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNkcmN5MWxlSFFuS1Z4dUlDQXNJR1JsWm1sdVpWQnliM0JsY25SNUlEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV1J3SnlrdVpqdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9ibUZ0WlNsN1hHNGdJSFpoY2lBa1UzbHRZbTlzSUQwZ1kyOXlaUzVUZVcxaWIyd2dmSHdnS0dOdmNtVXVVM2x0WW05c0lEMGdURWxDVWtGU1dTQS9JSHQ5SURvZ1oyeHZZbUZzTGxONWJXSnZiQ0I4ZkNCN2ZTazdYRzRnSUdsbUtHNWhiV1V1WTJoaGNrRjBLREFwSUNFOUlDZGZKeUFtSmlBaEtHNWhiV1VnYVc0Z0pGTjViV0p2YkNrcFpHVm1hVzVsVUhKdmNHVnlkSGtvSkZONWJXSnZiQ3dnYm1GdFpTd2dlM1poYkhWbE9pQjNhM05GZUhRdVppaHVZVzFsS1gwcE8xeHVmVHNpTENKbGVIQnZjblJ6TG1ZZ1BTQnlaWEYxYVhKbEtDY3VMMTkzYTNNbktUc2lMQ0oyWVhJZ2MzUnZjbVVnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNOb1lYSmxaQ2NwS0NkM2EzTW5LVnh1SUNBc0lIVnBaQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MWFXUW5LVnh1SUNBc0lGTjViV0p2YkNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bmJHOWlZV3duS1M1VGVXMWliMnhjYmlBZ0xDQlZVMFZmVTFsTlFrOU1JRDBnZEhsd1pXOW1JRk41YldKdmJDQTlQU0FuWm5WdVkzUnBiMjRuTzF4dVhHNTJZWElnSkdWNGNHOXlkSE1nUFNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0c1aGJXVXBlMXh1SUNCeVpYUjFjbTRnYzNSdmNtVmJibUZ0WlYwZ2ZId2dLSE4wYjNKbFcyNWhiV1ZkSUQxY2JpQWdJQ0JWVTBWZlUxbE5RazlNSUNZbUlGTjViV0p2YkZ0dVlXMWxYU0I4ZkNBb1ZWTkZYMU5aVFVKUFRDQS9JRk41YldKdmJDQTZJSFZwWkNrb0oxTjViV0p2YkM0bklDc2dibUZ0WlNrcE8xeHVmVHRjYmx4dUpHVjRjRzl5ZEhNdWMzUnZjbVVnUFNCemRHOXlaVHNpTENKMllYSWdZMnhoYzNOdlppQWdJRDBnY21WeGRXbHlaU2duTGk5ZlkyeGhjM052WmljcFhHNGdJQ3dnU1ZSRlVrRlVUMUlnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkMnR6Snlrb0oybDBaWEpoZEc5eUp5bGNiaUFnTENCSmRHVnlZWFJ2Y25NZ1BTQnlaWEYxYVhKbEtDY3VMMTlwZEdWeVlYUnZjbk1uS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVnhkV2x5WlNnbkxpOWZZMjl5WlNjcExtZGxkRWwwWlhKaGRHOXlUV1YwYUc5a0lEMGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQnBaaWhwZENBaFBTQjFibVJsWm1sdVpXUXBjbVYwZFhKdUlHbDBXMGxVUlZKQlZFOVNYVnh1SUNBZ0lIeDhJR2wwV3lkQVFHbDBaWEpoZEc5eUoxMWNiaUFnSUNCOGZDQkpkR1Z5WVhSdmNuTmJZMnhoYzNOdlppaHBkQ2xkTzF4dWZUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNTJZWElnWVdSa1ZHOVZibk5qYjNCaFlteGxjeUE5SUhKbGNYVnBjbVVvSnk0dlgyRmtaQzEwYnkxMWJuTmpiM0JoWW14bGN5Y3BYRzRnSUN3Z2MzUmxjQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmwwWlhJdGMzUmxjQ2NwWEc0Z0lDd2dTWFJsY21GMGIzSnpJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJsMFpYSmhkRzl5Y3ljcFhHNGdJQ3dnZEc5SlQySnFaV04wSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMV2x2WW1wbFkzUW5LVHRjYmx4dUx5OGdNakl1TVM0ekxqUWdRWEp5WVhrdWNISnZkRzkwZVhCbExtVnVkSEpwWlhNb0tWeHVMeThnTWpJdU1TNHpMakV6SUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzVyWlhsektDbGNiaTh2SURJeUxqRXVNeTR5T1NCQmNuSmhlUzV3Y205MGIzUjVjR1V1ZG1Gc2RXVnpLQ2xjYmk4dklESXlMakV1TXk0ek1DQkJjbkpoZVM1d2NtOTBiM1I1Y0dWYlFFQnBkR1Z5WVhSdmNsMG9LVnh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGRHVnlMV1JsWm1sdVpTY3BLRUZ5Y21GNUxDQW5RWEp5WVhrbkxDQm1kVzVqZEdsdmJpaHBkR1Z5WVhSbFpDd2dhMmx1WkNsN1hHNGdJSFJvYVhNdVgzUWdQU0IwYjBsUFltcGxZM1FvYVhSbGNtRjBaV1FwT3lBdkx5QjBZWEpuWlhSY2JpQWdkR2hwY3k1ZmFTQTlJREE3SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHNWxlSFFnYVc1a1pYaGNiaUFnZEdocGN5NWZheUE5SUd0cGJtUTdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR3RwYm1SY2JpOHZJREl5TGpFdU5TNHlMakVnSlVGeWNtRjVTWFJsY21GMGIzSlFjbTkwYjNSNWNHVWxMbTVsZUhRb0tWeHVmU3dnWm5WdVkzUnBiMjRvS1h0Y2JpQWdkbUZ5SUU4Z0lDQWdJRDBnZEdocGN5NWZkRnh1SUNBZ0lDd2dhMmx1WkNBZ1BTQjBhR2x6TGw5clhHNGdJQ0FnTENCcGJtUmxlQ0E5SUhSb2FYTXVYMmtyS3p0Y2JpQWdhV1lvSVU4Z2ZId2dhVzVrWlhnZ1BqMGdUeTVzWlc1bmRHZ3BlMXh1SUNBZ0lIUm9hWE11WDNRZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUNBZ2NtVjBkWEp1SUhOMFpYQW9NU2s3WEc0Z0lIMWNiaUFnYVdZb2EybHVaQ0E5UFNBbmEyVjVjeWNnSUNseVpYUjFjbTRnYzNSbGNDZ3dMQ0JwYm1SbGVDazdYRzRnSUdsbUtHdHBibVFnUFQwZ0ozWmhiSFZsY3ljcGNtVjBkWEp1SUhOMFpYQW9NQ3dnVDF0cGJtUmxlRjBwTzF4dUlDQnlaWFIxY200Z2MzUmxjQ2d3TENCYmFXNWtaWGdzSUU5YmFXNWtaWGhkWFNrN1hHNTlMQ0FuZG1Gc2RXVnpKeWs3WEc1Y2JpOHZJR0Z5WjNWdFpXNTBjMHhwYzNSYlFFQnBkR1Z5WVhSdmNsMGdhWE1nSlVGeWNtRjVVSEp2ZEc5ZmRtRnNkV1Z6SlNBb09TNDBMalF1Tml3Z09TNDBMalF1TnlsY2JrbDBaWEpoZEc5eWN5NUJjbWQxYldWdWRITWdQU0JKZEdWeVlYUnZjbk11UVhKeVlYazdYRzVjYm1Ga1pGUnZWVzV6WTI5d1lXSnNaWE1vSjJ0bGVYTW5LVHRjYm1Ga1pGUnZWVzV6WTI5d1lXSnNaWE1vSjNaaGJIVmxjeWNwTzF4dVlXUmtWRzlWYm5OamIzQmhZbXhsY3lnblpXNTBjbWxsY3ljcE95SXNJaTh2SURFNUxqRXVNeTR4SUU5aWFtVmpkQzVoYzNOcFoyNG9kR0Z5WjJWMExDQnpiM1Z5WTJVcFhHNTJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeUFySUNSbGVIQnZjblF1Uml3Z0owOWlhbVZqZENjc0lIdGhjM05wWjI0NklISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMWhjM05wWjI0bktYMHBPeUlzSW5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmk4dklERTVMakV1TWk0eUlDOGdNVFV1TWk0ekxqVWdUMkpxWldOMExtTnlaV0YwWlNoUElGc3NJRkJ5YjNCbGNuUnBaWE5kS1Z4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNc0lDZFBZbXBsWTNRbkxDQjdZM0psWVhSbE9pQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRZM0psWVhSbEp5bDlLVHNpTENKMllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwTzF4dUx5OGdNVGt1TVM0eUxqUWdMeUF4TlM0eUxqTXVOaUJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1R5d2dVQ3dnUVhSMGNtbGlkWFJsY3lsY2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VElDc2dKR1Y0Y0c5eWRDNUdJQ29nSVhKbGNYVnBjbVVvSnk0dlgyUmxjMk55YVhCMGIzSnpKeWtzSUNkUFltcGxZM1FuTENCN1pHVm1hVzVsVUhKdmNHVnlkSGs2SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxa2NDY3BMbVo5S1RzaUxDSXZMeUF4T1M0eExqSXVPU0JQWW1wbFkzUXVaMlYwVUhKdmRHOTBlWEJsVDJZb1R5bGNiblpoY2lCMGIwOWlhbVZqZENBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTF2WW1wbFkzUW5LVnh1SUNBc0lDUm5aWFJRY205MGIzUjVjR1ZQWmlBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMW5jRzhuS1R0Y2JseHVjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMWE5oY0NjcEtDZG5aWFJRY205MGIzUjVjR1ZQWmljc0lHWjFibU4wYVc5dUtDbDdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJuWlhSUWNtOTBiM1I1Y0dWUFppaHBkQ2w3WEc0Z0lDQWdjbVYwZFhKdUlDUm5aWFJRY205MGIzUjVjR1ZQWmloMGIwOWlhbVZqZENocGRDa3BPMXh1SUNCOU8xeHVmU2s3SWl3aUx5OGdNVGt1TVM0eUxqRXlJRTlpYW1WamRDNXBjMFp5YjNwbGJpaFBLVnh1ZG1GeUlHbHpUMkpxWldOMElEMGdjbVZ4ZFdseVpTZ25MaTlmYVhNdGIySnFaV04wSnlrN1hHNWNibkpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzF6WVhBbktTZ25hWE5HY205NlpXNG5MQ0JtZFc1amRHbHZiaWdrYVhOR2NtOTZaVzRwZTF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z2FYTkdjbTk2Wlc0b2FYUXBlMXh1SUNBZ0lISmxkSFZ5YmlCcGMwOWlhbVZqZENocGRDa2dQeUFrYVhOR2NtOTZaVzRnUHlBa2FYTkdjbTk2Wlc0b2FYUXBJRG9nWm1Gc2MyVWdPaUIwY25WbE8xeHVJQ0I5TzF4dWZTazdJaXdpTHk4Z01Ua3VNUzR5TGpFMElFOWlhbVZqZEM1clpYbHpLRThwWEc1MllYSWdkRzlQWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXZZbXBsWTNRbktWeHVJQ0FzSUNSclpYbHpJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXdGxlWE1uS1R0Y2JseHVjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMWE5oY0NjcEtDZHJaWGx6Snl3Z1puVnVZM1JwYjI0b0tYdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJR3RsZVhNb2FYUXBlMXh1SUNBZ0lISmxkSFZ5YmlBa2EyVjVjeWgwYjA5aWFtVmpkQ2hwZENrcE8xeHVJQ0I5TzF4dWZTazdJaXdpTHk4Z01Ua3VNUzR6TGpFNUlFOWlhbVZqZEM1elpYUlFjbTkwYjNSNWNHVlBaaWhQTENCd2NtOTBieWxjYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWs3WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXl3Z0owOWlhbVZqZENjc0lIdHpaWFJRY205MGIzUjVjR1ZQWmpvZ2NtVnhkV2x5WlNnbkxpOWZjMlYwTFhCeWIzUnZKeWt1YzJWMGZTazdJaXdpSWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1ZG1GeUlFeEpRbEpCVWxrZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJ4cFluSmhjbmtuS1Z4dUlDQXNJR2RzYjJKaGJDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyZHNiMkpoYkNjcFhHNGdJQ3dnWTNSNElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZM1I0SnlsY2JpQWdMQ0JqYkdGemMyOW1JQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpiR0Z6YzI5bUp5bGNiaUFnTENBa1pYaHdiM0owSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lHbHpUMkpxWldOMElDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJsekxXOWlhbVZqZENjcFhHNGdJQ3dnWVVaMWJtTjBhVzl1SUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZUzFtZFc1amRHbHZiaWNwWEc0Z0lDd2dZVzVKYm5OMFlXNWpaU0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZllXNHRhVzV6ZEdGdVkyVW5LVnh1SUNBc0lHWnZjazltSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJadmNpMXZaaWNwWEc0Z0lDd2djM0JsWTJsbGMwTnZibk4wY25WamRHOXlJRDBnY21WeGRXbHlaU2duTGk5ZmMzQmxZMmxsY3kxamIyNXpkSEoxWTNSdmNpY3BYRzRnSUN3Z2RHRnpheUFnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEdGemF5Y3BMbk5sZEZ4dUlDQXNJRzFwWTNKdmRHRnpheUFnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyMXBZM0p2ZEdGemF5Y3BLQ2xjYmlBZ0xDQlFVazlOU1ZORklDQWdJQ0FnSUNBZ0lDQWdQU0FuVUhKdmJXbHpaU2RjYmlBZ0xDQlVlWEJsUlhKeWIzSWdJQ0FnSUNBZ0lDQWdQU0JuYkc5aVlXd3VWSGx3WlVWeWNtOXlYRzRnSUN3Z2NISnZZMlZ6Y3lBZ0lDQWdJQ0FnSUNBZ0lEMGdaMnh2WW1Gc0xuQnliMk5sYzNOY2JpQWdMQ0FrVUhKdmJXbHpaU0FnSUNBZ0lDQWdJQ0FnUFNCbmJHOWlZV3hiVUZKUFRVbFRSVjFjYmlBZ0xDQndjbTlqWlhOeklDQWdJQ0FnSUNBZ0lDQWdQU0JuYkc5aVlXd3VjSEp2WTJWemMxeHVJQ0FzSUdselRtOWtaU0FnSUNBZ0lDQWdJQ0FnSUNBOUlHTnNZWE56YjJZb2NISnZZMlZ6Y3lrZ1BUMGdKM0J5YjJObGMzTW5YRzRnSUN3Z1pXMXdkSGtnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdablZ1WTNScGIyNG9LWHNnTHlvZ1pXMXdkSGtnS2k4Z2ZWeHVJQ0FzSUVsdWRHVnlibUZzTENCSFpXNWxjbWxqVUhKdmJXbHpaVU5oY0dGaWFXeHBkSGtzSUZkeVlYQndaWEk3WEc1Y2JuWmhjaUJWVTBWZlRrRlVTVlpGSUQwZ0lTRm1kVzVqZEdsdmJpZ3BlMXh1SUNCMGNua2dlMXh1SUNBZ0lDOHZJR052Y25KbFkzUWdjM1ZpWTJ4aGMzTnBibWNnZDJsMGFDQkFRSE53WldOcFpYTWdjM1Z3Y0c5eWRGeHVJQ0FnSUhaaGNpQndjbTl0YVhObElDQWdJQ0E5SUNSUWNtOXRhWE5sTG5KbGMyOXNkbVVvTVNsY2JpQWdJQ0FnSUN3Z1JtRnJaVkJ5YjIxcGMyVWdQU0FvY0hKdmJXbHpaUzVqYjI1emRISjFZM1J2Y2lBOUlIdDlLVnR5WlhGMWFYSmxLQ2N1TDE5M2EzTW5LU2duYzNCbFkybGxjeWNwWFNBOUlHWjFibU4wYVc5dUtHVjRaV01wZXlCbGVHVmpLR1Z0Y0hSNUxDQmxiWEIwZVNrN0lIMDdYRzRnSUNBZ0x5OGdkVzVvWVc1a2JHVmtJSEpsYW1WamRHbHZibk1nZEhKaFkydHBibWNnYzNWd2NHOXlkQ3dnVG05a1pVcFRJRkJ5YjIxcGMyVWdkMmwwYUc5MWRDQnBkQ0JtWVdsc2N5QkFRSE53WldOcFpYTWdkR1Z6ZEZ4dUlDQWdJSEpsZEhWeWJpQW9hWE5PYjJSbElIeDhJSFI1Y0dWdlppQlFjbTl0YVhObFVtVnFaV04wYVc5dVJYWmxiblFnUFQwZ0oyWjFibU4wYVc5dUp5a2dKaVlnY0hKdmJXbHpaUzUwYUdWdUtHVnRjSFI1S1NCcGJuTjBZVzVqWlc5bUlFWmhhMlZRY205dGFYTmxPMXh1SUNCOUlHTmhkR05vS0dVcGV5QXZLaUJsYlhCMGVTQXFMeUI5WEc1OUtDazdYRzVjYmk4dklHaGxiSEJsY25OY2JuWmhjaUJ6WVcxbFEyOXVjM1J5ZFdOMGIzSWdQU0JtZFc1amRHbHZiaWhoTENCaUtYdGNiaUFnTHk4Z2QybDBhQ0JzYVdKeVlYSjVJSGR5WVhCd1pYSWdjM0JsWTJsaGJDQmpZWE5sWEc0Z0lISmxkSFZ5YmlCaElEMDlQU0JpSUh4OElHRWdQVDA5SUNSUWNtOXRhWE5sSUNZbUlHSWdQVDA5SUZkeVlYQndaWEk3WEc1OU8xeHVkbUZ5SUdselZHaGxibUZpYkdVZ1BTQm1kVzVqZEdsdmJpaHBkQ2w3WEc0Z0lIWmhjaUIwYUdWdU8xeHVJQ0J5WlhSMWNtNGdhWE5QWW1wbFkzUW9hWFFwSUNZbUlIUjVjR1Z2WmlBb2RHaGxiaUE5SUdsMExuUm9aVzRwSUQwOUlDZG1kVzVqZEdsdmJpY2dQeUIwYUdWdUlEb2dabUZzYzJVN1hHNTlPMXh1ZG1GeUlHNWxkMUJ5YjIxcGMyVkRZWEJoWW1sc2FYUjVJRDBnWm5WdVkzUnBiMjRvUXlsN1hHNGdJSEpsZEhWeWJpQnpZVzFsUTI5dWMzUnlkV04wYjNJb0pGQnliMjFwYzJVc0lFTXBYRzRnSUNBZ1B5QnVaWGNnVUhKdmJXbHpaVU5oY0dGaWFXeHBkSGtvUXlsY2JpQWdJQ0E2SUc1bGR5QkhaVzVsY21salVISnZiV2x6WlVOaGNHRmlhV3hwZEhrb1F5azdYRzU5TzF4dWRtRnlJRkJ5YjIxcGMyVkRZWEJoWW1sc2FYUjVJRDBnUjJWdVpYSnBZMUJ5YjIxcGMyVkRZWEJoWW1sc2FYUjVJRDBnWm5WdVkzUnBiMjRvUXlsN1hHNGdJSFpoY2lCeVpYTnZiSFpsTENCeVpXcGxZM1E3WEc0Z0lIUm9hWE11Y0hKdmJXbHpaU0E5SUc1bGR5QkRLR1oxYm1OMGFXOXVLQ1FrY21WemIyeDJaU3dnSkNSeVpXcGxZM1FwZTF4dUlDQWdJR2xtS0hKbGMyOXNkbVVnSVQwOUlIVnVaR1ZtYVc1bFpDQjhmQ0J5WldwbFkzUWdJVDA5SUhWdVpHVm1hVzVsWkNsMGFISnZkeUJVZVhCbFJYSnliM0lvSjBKaFpDQlFjbTl0YVhObElHTnZibk4wY25WamRHOXlKeWs3WEc0Z0lDQWdjbVZ6YjJ4MlpTQTlJQ1FrY21WemIyeDJaVHRjYmlBZ0lDQnlaV3BsWTNRZ0lEMGdKQ1J5WldwbFkzUTdYRzRnSUgwcE8xeHVJQ0IwYUdsekxuSmxjMjlzZG1VZ1BTQmhSblZ1WTNScGIyNG9jbVZ6YjJ4MlpTazdYRzRnSUhSb2FYTXVjbVZxWldOMElDQTlJR0ZHZFc1amRHbHZiaWh5WldwbFkzUXBPMXh1ZlR0Y2JuWmhjaUJ3WlhKbWIzSnRJRDBnWm5WdVkzUnBiMjRvWlhobFl5bDdYRzRnSUhSeWVTQjdYRzRnSUNBZ1pYaGxZeWdwTzF4dUlDQjlJR05oZEdOb0tHVXBlMXh1SUNBZ0lISmxkSFZ5YmlCN1pYSnliM0k2SUdWOU8xeHVJQ0I5WEc1OU8xeHVkbUZ5SUc1dmRHbG1lU0E5SUdaMWJtTjBhVzl1S0hCeWIyMXBjMlVzSUdselVtVnFaV04wS1h0Y2JpQWdhV1lvY0hKdmJXbHpaUzVmYmlseVpYUjFjbTQ3WEc0Z0lIQnliMjFwYzJVdVgyNGdQU0IwY25WbE8xeHVJQ0IyWVhJZ1kyaGhhVzRnUFNCd2NtOXRhWE5sTGw5ak8xeHVJQ0J0YVdOeWIzUmhjMnNvWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0IyWVhJZ2RtRnNkV1VnUFNCd2NtOXRhWE5sTGw5MlhHNGdJQ0FnSUNBc0lHOXJJQ0FnSUQwZ2NISnZiV2x6WlM1ZmN5QTlQU0F4WEc0Z0lDQWdJQ0FzSUdrZ0lDQWdJRDBnTUR0Y2JpQWdJQ0IyWVhJZ2NuVnVJRDBnWm5WdVkzUnBiMjRvY21WaFkzUnBiMjRwZTF4dUlDQWdJQ0FnZG1GeUlHaGhibVJzWlhJZ1BTQnZheUEvSUhKbFlXTjBhVzl1TG05cklEb2djbVZoWTNScGIyNHVabUZwYkZ4dUlDQWdJQ0FnSUNBc0lISmxjMjlzZG1VZ1BTQnlaV0ZqZEdsdmJpNXlaWE52YkhabFhHNGdJQ0FnSUNBZ0lDd2djbVZxWldOMElDQTlJSEpsWVdOMGFXOXVMbkpsYW1WamRGeHVJQ0FnSUNBZ0lDQXNJR1J2YldGcGJpQWdQU0J5WldGamRHbHZiaTVrYjIxaGFXNWNiaUFnSUNBZ0lDQWdMQ0J5WlhOMWJIUXNJSFJvWlc0N1hHNGdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0JwWmlob1lXNWtiR1Z5S1h0Y2JpQWdJQ0FnSUNBZ0lDQnBaaWdoYjJzcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZb2NISnZiV2x6WlM1ZmFDQTlQU0F5S1c5dVNHRnVaR3hsVlc1b1lXNWtiR1ZrS0hCeWIyMXBjMlVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjSEp2YldselpTNWZhQ0E5SURFN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUdsbUtHaGhibVJzWlhJZ1BUMDlJSFJ5ZFdVcGNtVnpkV3gwSUQwZ2RtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaWhrYjIxaGFXNHBaRzl0WVdsdUxtVnVkR1Z5S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhOMWJIUWdQU0JvWVc1a2JHVnlLSFpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUtHUnZiV0ZwYmlsa2IyMWhhVzR1WlhocGRDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQnBaaWh5WlhOMWJIUWdQVDA5SUhKbFlXTjBhVzl1TG5CeWIyMXBjMlVwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtGUjVjR1ZGY25KdmNpZ25VSEp2YldselpTMWphR0ZwYmlCamVXTnNaU2NwS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWW9kR2hsYmlBOUlHbHpWR2hsYm1GaWJHVW9jbVZ6ZFd4MEtTbDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHVnVMbU5oYkd3b2NtVnpkV3gwTENCeVpYTnZiSFpsTENCeVpXcGxZM1FwTzF4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCeVpYTnZiSFpsS0hKbGMzVnNkQ2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0J5WldwbFkzUW9kbUZzZFdVcE8xeHVJQ0FnSUNBZ2ZTQmpZWFJqYUNobEtYdGNiaUFnSUNBZ0lDQWdjbVZxWldOMEtHVXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzRnSUNBZ2QyaHBiR1VvWTJoaGFXNHViR1Z1WjNSb0lENGdhU2x5ZFc0b1kyaGhhVzViYVNzclhTazdJQzh2SUhaaGNtbGhZbXhsSUd4bGJtZDBhQ0F0SUdOaGJpZDBJSFZ6WlNCbWIzSkZZV05vWEc0Z0lDQWdjSEp2YldselpTNWZZeUE5SUZ0ZE8xeHVJQ0FnSUhCeWIyMXBjMlV1WDI0Z1BTQm1ZV3h6WlR0Y2JpQWdJQ0JwWmlocGMxSmxhbVZqZENBbUppQWhjSEp2YldselpTNWZhQ2x2YmxWdWFHRnVaR3hsWkNod2NtOXRhWE5sS1R0Y2JpQWdmU2s3WEc1OU8xeHVkbUZ5SUc5dVZXNW9ZVzVrYkdWa0lEMGdablZ1WTNScGIyNG9jSEp2YldselpTbDdYRzRnSUhSaGMyc3VZMkZzYkNobmJHOWlZV3dzSUdaMWJtTjBhVzl1S0NsN1hHNGdJQ0FnZG1GeUlIWmhiSFZsSUQwZ2NISnZiV2x6WlM1ZmRseHVJQ0FnSUNBZ0xDQmhZbkoxY0hRc0lHaGhibVJzWlhJc0lHTnZibk52YkdVN1hHNGdJQ0FnYVdZb2FYTlZibWhoYm1Sc1pXUW9jSEp2YldselpTa3BlMXh1SUNBZ0lDQWdZV0p5ZFhCMElEMGdjR1Z5Wm05eWJTaG1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lDQWdJQ0JwWmlocGMwNXZaR1VwZTF4dUlDQWdJQ0FnSUNBZ0lIQnliMk5sYzNNdVpXMXBkQ2duZFc1b1lXNWtiR1ZrVW1WcVpXTjBhVzl1Snl3Z2RtRnNkV1VzSUhCeWIyMXBjMlVwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZb2FHRnVaR3hsY2lBOUlHZHNiMkpoYkM1dmJuVnVhR0Z1Wkd4bFpISmxhbVZqZEdsdmJpbDdYRzRnSUNBZ0lDQWdJQ0FnYUdGdVpHeGxjaWg3Y0hKdmJXbHpaVG9nY0hKdmJXbHpaU3dnY21WaGMyOXVPaUIyWVd4MVpYMHBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lvS0dOdmJuTnZiR1VnUFNCbmJHOWlZV3d1WTI5dWMyOXNaU2tnSmlZZ1kyOXVjMjlzWlM1bGNuSnZjaWw3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWduVlc1b1lXNWtiR1ZrSUhCeWIyMXBjMlVnY21WcVpXTjBhVzl1Snl3Z2RtRnNkV1VwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDOHZJRUp5YjNkelpYSnpJSE5vYjNWc1pDQnViM1FnZEhKcFoyZGxjaUJnY21WcVpXTjBhVzl1U0dGdVpHeGxaR0FnWlhabGJuUWdhV1lnYVhRZ2QyRnpJR2hoYm1Sc1pXUWdhR1Z5WlN3Z1RtOWtaVXBUSUMwZ2MyaHZkV3hrWEc0Z0lDQWdJQ0J3Y205dGFYTmxMbDlvSUQwZ2FYTk9iMlJsSUh4OElHbHpWVzVvWVc1a2JHVmtLSEJ5YjIxcGMyVXBJRDhnTWlBNklERTdYRzRnSUNBZ2ZTQndjbTl0YVhObExsOWhJRDBnZFc1a1pXWnBibVZrTzF4dUlDQWdJR2xtS0dGaWNuVndkQ2wwYUhKdmR5QmhZbkoxY0hRdVpYSnliM0k3WEc0Z0lIMHBPMXh1ZlR0Y2JuWmhjaUJwYzFWdWFHRnVaR3hsWkNBOUlHWjFibU4wYVc5dUtIQnliMjFwYzJVcGUxeHVJQ0JwWmlod2NtOXRhWE5sTGw5b0lEMDlJREVwY21WMGRYSnVJR1poYkhObE8xeHVJQ0IyWVhJZ1kyaGhhVzRnUFNCd2NtOXRhWE5sTGw5aElIeDhJSEJ5YjIxcGMyVXVYMk5jYmlBZ0lDQXNJR2tnSUNBZ0lEMGdNRnh1SUNBZ0lDd2djbVZoWTNScGIyNDdYRzRnSUhkb2FXeGxLR05vWVdsdUxteGxibWQwYUNBK0lHa3BlMXh1SUNBZ0lISmxZV04wYVc5dUlEMGdZMmhoYVc1YmFTc3JYVHRjYmlBZ0lDQnBaaWh5WldGamRHbHZiaTVtWVdsc0lIeDhJQ0ZwYzFWdWFHRnVaR3hsWkNoeVpXRmpkR2x2Ymk1d2NtOXRhWE5sS1NseVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUgwZ2NtVjBkWEp1SUhSeWRXVTdYRzU5TzF4dWRtRnlJRzl1U0dGdVpHeGxWVzVvWVc1a2JHVmtJRDBnWm5WdVkzUnBiMjRvY0hKdmJXbHpaU2w3WEc0Z0lIUmhjMnN1WTJGc2JDaG5iRzlpWVd3c0lHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ2RtRnlJR2hoYm1Sc1pYSTdYRzRnSUNBZ2FXWW9hWE5PYjJSbEtYdGNiaUFnSUNBZ0lIQnliMk5sYzNNdVpXMXBkQ2duY21WcVpXTjBhVzl1U0dGdVpHeGxaQ2NzSUhCeWIyMXBjMlVwTzF4dUlDQWdJSDBnWld4elpTQnBaaWhvWVc1a2JHVnlJRDBnWjJ4dlltRnNMbTl1Y21WcVpXTjBhVzl1YUdGdVpHeGxaQ2w3WEc0Z0lDQWdJQ0JvWVc1a2JHVnlLSHR3Y205dGFYTmxPaUJ3Y205dGFYTmxMQ0J5WldGemIyNDZJSEJ5YjIxcGMyVXVYM1o5S1R0Y2JpQWdJQ0I5WEc0Z0lIMHBPMXh1ZlR0Y2JuWmhjaUFrY21WcVpXTjBJRDBnWm5WdVkzUnBiMjRvZG1Gc2RXVXBlMXh1SUNCMllYSWdjSEp2YldselpTQTlJSFJvYVhNN1hHNGdJR2xtS0hCeWIyMXBjMlV1WDJRcGNtVjBkWEp1TzF4dUlDQndjbTl0YVhObExsOWtJRDBnZEhKMVpUdGNiaUFnY0hKdmJXbHpaU0E5SUhCeWIyMXBjMlV1WDNjZ2ZId2djSEp2YldselpUc2dMeThnZFc1M2NtRndYRzRnSUhCeWIyMXBjMlV1WDNZZ1BTQjJZV3gxWlR0Y2JpQWdjSEp2YldselpTNWZjeUE5SURJN1hHNGdJR2xtS0NGd2NtOXRhWE5sTGw5aEtYQnliMjFwYzJVdVgyRWdQU0J3Y205dGFYTmxMbDlqTG5Oc2FXTmxLQ2s3WEc0Z0lHNXZkR2xtZVNod2NtOXRhWE5sTENCMGNuVmxLVHRjYm4wN1hHNTJZWElnSkhKbGMyOXNkbVVnUFNCbWRXNWpkR2x2YmloMllXeDFaU2w3WEc0Z0lIWmhjaUJ3Y205dGFYTmxJRDBnZEdocGMxeHVJQ0FnSUN3Z2RHaGxianRjYmlBZ2FXWW9jSEp2YldselpTNWZaQ2x5WlhSMWNtNDdYRzRnSUhCeWIyMXBjMlV1WDJRZ1BTQjBjblZsTzF4dUlDQndjbTl0YVhObElEMGdjSEp2YldselpTNWZkeUI4ZkNCd2NtOXRhWE5sT3lBdkx5QjFibmR5WVhCY2JpQWdkSEo1SUh0Y2JpQWdJQ0JwWmlod2NtOXRhWE5sSUQwOVBTQjJZV3gxWlNsMGFISnZkeUJVZVhCbFJYSnliM0lvWENKUWNtOXRhWE5sSUdOaGJpZDBJR0psSUhKbGMyOXNkbVZrSUdsMGMyVnNabHdpS1R0Y2JpQWdJQ0JwWmloMGFHVnVJRDBnYVhOVWFHVnVZV0pzWlNoMllXeDFaU2twZTF4dUlDQWdJQ0FnYldsamNtOTBZWE5yS0daMWJtTjBhVzl1S0NsN1hHNGdJQ0FnSUNBZ0lIWmhjaUIzY21Gd2NHVnlJRDBnZTE5M09pQndjbTl0YVhObExDQmZaRG9nWm1Gc2MyVjlPeUF2THlCM2NtRndYRzRnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdkR2hsYmk1allXeHNLSFpoYkhWbExDQmpkSGdvSkhKbGMyOXNkbVVzSUhkeVlYQndaWElzSURFcExDQmpkSGdvSkhKbGFtVmpkQ3dnZDNKaGNIQmxjaXdnTVNrcE8xeHVJQ0FnSUNBZ0lDQjlJR05oZEdOb0tHVXBlMXh1SUNBZ0lDQWdJQ0FnSUNSeVpXcGxZM1F1WTJGc2JDaDNjbUZ3Y0dWeUxDQmxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSEJ5YjIxcGMyVXVYM1lnUFNCMllXeDFaVHRjYmlBZ0lDQWdJSEJ5YjIxcGMyVXVYM01nUFNBeE8xeHVJQ0FnSUNBZ2JtOTBhV1o1S0hCeWIyMXBjMlVzSUdaaGJITmxLVHRjYmlBZ0lDQjlYRzRnSUgwZ1kyRjBZMmdvWlNsN1hHNGdJQ0FnSkhKbGFtVmpkQzVqWVd4c0tIdGZkem9nY0hKdmJXbHpaU3dnWDJRNklHWmhiSE5sZlN3Z1pTazdJQzh2SUhkeVlYQmNiaUFnZlZ4dWZUdGNibHh1THk4Z1kyOXVjM1J5ZFdOMGIzSWdjRzlzZVdacGJHeGNibWxtS0NGVlUwVmZUa0ZVU1ZaRktYdGNiaUFnTHk4Z01qVXVOQzR6TGpFZ1VISnZiV2x6WlNobGVHVmpkWFJ2Y2lsY2JpQWdKRkJ5YjIxcGMyVWdQU0JtZFc1amRHbHZiaUJRY205dGFYTmxLR1Y0WldOMWRHOXlLWHRjYmlBZ0lDQmhia2x1YzNSaGJtTmxLSFJvYVhNc0lDUlFjbTl0YVhObExDQlFVazlOU1ZORkxDQW5YMmduS1R0Y2JpQWdJQ0JoUm5WdVkzUnBiMjRvWlhobFkzVjBiM0lwTzF4dUlDQWdJRWx1ZEdWeWJtRnNMbU5oYkd3b2RHaHBjeWs3WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUdWNFpXTjFkRzl5S0dOMGVDZ2tjbVZ6YjJ4MlpTd2dkR2hwY3l3Z01Ta3NJR04wZUNna2NtVnFaV04wTENCMGFHbHpMQ0F4S1NrN1hHNGdJQ0FnZlNCallYUmphQ2hsY25JcGUxeHVJQ0FnSUNBZ0pISmxhbVZqZEM1allXeHNLSFJvYVhNc0lHVnljaWs3WEc0Z0lDQWdmVnh1SUNCOU8xeHVJQ0JKYm5SbGNtNWhiQ0E5SUdaMWJtTjBhVzl1SUZCeWIyMXBjMlVvWlhobFkzVjBiM0lwZTF4dUlDQWdJSFJvYVhNdVgyTWdQU0JiWFRzZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnUEMwZ1lYZGhhWFJwYm1jZ2NtVmhZM1JwYjI1elhHNGdJQ0FnZEdocGN5NWZZU0E5SUhWdVpHVm1hVzVsWkRzZ0lDQWdJQ0F2THlBOExTQmphR1ZqYTJWa0lHbHVJR2x6Vlc1b1lXNWtiR1ZrSUhKbFlXTjBhVzl1YzF4dUlDQWdJSFJvYVhNdVgzTWdQU0F3T3lBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnUEMwZ2MzUmhkR1ZjYmlBZ0lDQjBhR2x6TGw5a0lEMGdabUZzYzJVN0lDQWdJQ0FnSUNBZ0lDOHZJRHd0SUdSdmJtVmNiaUFnSUNCMGFHbHpMbDkySUQwZ2RXNWtaV1pwYm1Wa095QWdJQ0FnSUM4dklEd3RJSFpoYkhWbFhHNGdJQ0FnZEdocGN5NWZhQ0E5SURBN0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlBOExTQnlaV3BsWTNScGIyNGdjM1JoZEdVc0lEQWdMU0JrWldaaGRXeDBMQ0F4SUMwZ2FHRnVaR3hsWkN3Z01pQXRJSFZ1YUdGdVpHeGxaRnh1SUNBZ0lIUm9hWE11WDI0Z1BTQm1ZV3h6WlRzZ0lDQWdJQ0FnSUNBZ0x5OGdQQzBnYm05MGFXWjVYRzRnSUgwN1hHNGdJRWx1ZEdWeWJtRnNMbkJ5YjNSdmRIbHdaU0E5SUhKbGNYVnBjbVVvSnk0dlgzSmxaR1ZtYVc1bExXRnNiQ2NwS0NSUWNtOXRhWE5sTG5CeWIzUnZkSGx3WlN3Z2UxeHVJQ0FnSUM4dklESTFMalF1TlM0eklGQnliMjFwYzJVdWNISnZkRzkwZVhCbExuUm9aVzRvYjI1R2RXeG1hV3hzWldRc0lHOXVVbVZxWldOMFpXUXBYRzRnSUNBZ2RHaGxiam9nWm5WdVkzUnBiMjRnZEdobGJpaHZia1oxYkdacGJHeGxaQ3dnYjI1U1pXcGxZM1JsWkNsN1hHNGdJQ0FnSUNCMllYSWdjbVZoWTNScGIyNGdJQ0FnUFNCdVpYZFFjbTl0YVhObFEyRndZV0pwYkdsMGVTaHpjR1ZqYVdWelEyOXVjM1J5ZFdOMGIzSW9kR2hwY3l3Z0pGQnliMjFwYzJVcEtUdGNiaUFnSUNBZ0lISmxZV04wYVc5dUxtOXJJQ0FnSUNBOUlIUjVjR1Z2WmlCdmJrWjFiR1pwYkd4bFpDQTlQU0FuWm5WdVkzUnBiMjRuSUQ4Z2IyNUdkV3htYVd4c1pXUWdPaUIwY25WbE8xeHVJQ0FnSUNBZ2NtVmhZM1JwYjI0dVptRnBiQ0FnSUQwZ2RIbHdaVzltSUc5dVVtVnFaV04wWldRZ1BUMGdKMloxYm1OMGFXOXVKeUFtSmlCdmJsSmxhbVZqZEdWa08xeHVJQ0FnSUNBZ2NtVmhZM1JwYjI0dVpHOXRZV2x1SUQwZ2FYTk9iMlJsSUQ4Z2NISnZZMlZ6Y3k1a2IyMWhhVzRnT2lCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNCMGFHbHpMbDlqTG5CMWMyZ29jbVZoWTNScGIyNHBPMXh1SUNBZ0lDQWdhV1lvZEdocGN5NWZZU2wwYUdsekxsOWhMbkIxYzJnb2NtVmhZM1JwYjI0cE8xeHVJQ0FnSUNBZ2FXWW9kR2hwY3k1ZmN5bHViM1JwWm5rb2RHaHBjeXdnWm1Gc2MyVXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlISmxZV04wYVc5dUxuQnliMjFwYzJVN1hHNGdJQ0FnZlN4Y2JpQWdJQ0F2THlBeU5TNDBMalV1TVNCUWNtOXRhWE5sTG5CeWIzUnZkSGx3WlM1allYUmphQ2h2YmxKbGFtVmpkR1ZrS1Z4dUlDQWdJQ2RqWVhSamFDYzZJR1oxYm1OMGFXOXVLRzl1VW1WcVpXTjBaV1FwZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWRHaGxiaWgxYm1SbFptbHVaV1FzSUc5dVVtVnFaV04wWldRcE8xeHVJQ0FnSUgxY2JpQWdmU2s3WEc0Z0lGQnliMjFwYzJWRFlYQmhZbWxzYVhSNUlEMGdablZ1WTNScGIyNG9LWHRjYmlBZ0lDQjJZWElnY0hKdmJXbHpaU0FnUFNCdVpYY2dTVzUwWlhKdVlXdzdYRzRnSUNBZ2RHaHBjeTV3Y205dGFYTmxJRDBnY0hKdmJXbHpaVHRjYmlBZ0lDQjBhR2x6TG5KbGMyOXNkbVVnUFNCamRIZ29KSEpsYzI5c2RtVXNJSEJ5YjIxcGMyVXNJREVwTzF4dUlDQWdJSFJvYVhNdWNtVnFaV04wSUNBOUlHTjBlQ2drY21WcVpXTjBMQ0J3Y205dGFYTmxMQ0F4S1R0Y2JpQWdmVHRjYm4xY2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExrY2dLeUFrWlhod2IzSjBMbGNnS3lBa1pYaHdiM0owTGtZZ0tpQWhWVk5GWDA1QlZFbFdSU3dnZTFCeWIyMXBjMlU2SUNSUWNtOXRhWE5sZlNrN1hHNXlaWEYxYVhKbEtDY3VMMTl6WlhRdGRHOHRjM1J5YVc1bkxYUmhaeWNwS0NSUWNtOXRhWE5sTENCUVVrOU5TVk5GS1R0Y2JuSmxjWFZwY21Vb0p5NHZYM05sZEMxemNHVmphV1Z6Snlrb1VGSlBUVWxUUlNrN1hHNVhjbUZ3Y0dWeUlEMGdjbVZ4ZFdseVpTZ25MaTlmWTI5eVpTY3BXMUJTVDAxSlUwVmRPMXh1WEc0dkx5QnpkR0YwYVdOelhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5QXJJQ1JsZUhCdmNuUXVSaUFxSUNGVlUwVmZUa0ZVU1ZaRkxDQlFVazlOU1ZORkxDQjdYRzRnSUM4dklESTFMalF1TkM0MUlGQnliMjFwYzJVdWNtVnFaV04wS0hJcFhHNGdJSEpsYW1WamREb2dablZ1WTNScGIyNGdjbVZxWldOMEtISXBlMXh1SUNBZ0lIWmhjaUJqWVhCaFltbHNhWFI1SUQwZ2JtVjNVSEp2YldselpVTmhjR0ZpYVd4cGRIa29kR2hwY3lsY2JpQWdJQ0FnSUN3Z0pDUnlaV3BsWTNRZ0lDQTlJR05oY0dGaWFXeHBkSGt1Y21WcVpXTjBPMXh1SUNBZ0lDUWtjbVZxWldOMEtISXBPMXh1SUNBZ0lISmxkSFZ5YmlCallYQmhZbWxzYVhSNUxuQnliMjFwYzJVN1hHNGdJSDFjYm4wcE8xeHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTWdLeUFrWlhod2IzSjBMa1lnS2lBb1RFbENVa0ZTV1NCOGZDQWhWVk5GWDA1QlZFbFdSU2tzSUZCU1QwMUpVMFVzSUh0Y2JpQWdMeThnTWpVdU5DNDBMallnVUhKdmJXbHpaUzV5WlhOdmJIWmxLSGdwWEc0Z0lISmxjMjlzZG1VNklHWjFibU4wYVc5dUlISmxjMjlzZG1Vb2VDbDdYRzRnSUNBZ0x5OGdhVzV6ZEdGdVkyVnZaaUJwYm5OMFpXRmtJRzltSUdsdWRHVnlibUZzSUhOc2IzUWdZMmhsWTJzZ1ltVmpZWFZ6WlNCM1pTQnphRzkxYkdRZ1ptbDRJR2wwSUhkcGRHaHZkWFFnY21Wd2JHRmpaVzFsYm5RZ2JtRjBhWFpsSUZCeWIyMXBjMlVnWTI5eVpWeHVJQ0FnSUdsbUtIZ2dhVzV6ZEdGdVkyVnZaaUFrVUhKdmJXbHpaU0FtSmlCellXMWxRMjl1YzNSeWRXTjBiM0lvZUM1amIyNXpkSEoxWTNSdmNpd2dkR2hwY3lrcGNtVjBkWEp1SUhnN1hHNGdJQ0FnZG1GeUlHTmhjR0ZpYVd4cGRIa2dQU0J1WlhkUWNtOXRhWE5sUTJGd1lXSnBiR2wwZVNoMGFHbHpLVnh1SUNBZ0lDQWdMQ0FrSkhKbGMyOXNkbVVnSUQwZ1kyRndZV0pwYkdsMGVTNXlaWE52YkhabE8xeHVJQ0FnSUNRa2NtVnpiMngyWlNoNEtUdGNiaUFnSUNCeVpYUjFjbTRnWTJGd1lXSnBiR2wwZVM1d2NtOXRhWE5sTzF4dUlDQjlYRzU5S1R0Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VElDc2dKR1Y0Y0c5eWRDNUdJQ29nSVNoVlUwVmZUa0ZVU1ZaRklDWW1JSEpsY1hWcGNtVW9KeTR2WDJsMFpYSXRaR1YwWldOMEp5a29ablZ1WTNScGIyNG9hWFJsY2lsN1hHNGdJQ1JRY205dGFYTmxMbUZzYkNocGRHVnlLVnNuWTJGMFkyZ25YU2hsYlhCMGVTazdYRzU5S1Nrc0lGQlNUMDFKVTBVc0lIdGNiaUFnTHk4Z01qVXVOQzQwTGpFZ1VISnZiV2x6WlM1aGJHd29hWFJsY21GaWJHVXBYRzRnSUdGc2JEb2dablZ1WTNScGIyNGdZV3hzS0dsMFpYSmhZbXhsS1h0Y2JpQWdJQ0IyWVhJZ1F5QWdJQ0FnSUNBZ0lDQTlJSFJvYVhOY2JpQWdJQ0FnSUN3Z1kyRndZV0pwYkdsMGVTQTlJRzVsZDFCeWIyMXBjMlZEWVhCaFltbHNhWFI1S0VNcFhHNGdJQ0FnSUNBc0lISmxjMjlzZG1VZ0lDQWdQU0JqWVhCaFltbHNhWFI1TG5KbGMyOXNkbVZjYmlBZ0lDQWdJQ3dnY21WcVpXTjBJQ0FnSUNBOUlHTmhjR0ZpYVd4cGRIa3VjbVZxWldOME8xeHVJQ0FnSUhaaGNpQmhZbkoxY0hRZ1BTQndaWEptYjNKdEtHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ0lDQjJZWElnZG1Gc2RXVnpJQ0FnSUQwZ1cxMWNiaUFnSUNBZ0lDQWdMQ0JwYm1SbGVDQWdJQ0FnUFNBd1hHNGdJQ0FnSUNBZ0lDd2djbVZ0WVdsdWFXNW5JRDBnTVR0Y2JpQWdJQ0FnSUdadmNrOW1LR2wwWlhKaFlteGxMQ0JtWVd4elpTd2dablZ1WTNScGIyNG9jSEp2YldselpTbDdYRzRnSUNBZ0lDQWdJSFpoY2lBa2FXNWtaWGdnSUNBZ0lDQWdJRDBnYVc1a1pYZ3JLMXh1SUNBZ0lDQWdJQ0FnSUN3Z1lXeHlaV0ZrZVVOaGJHeGxaQ0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0IyWVd4MVpYTXVjSFZ6YUNoMWJtUmxabWx1WldRcE8xeHVJQ0FnSUNBZ0lDQnlaVzFoYVc1cGJtY3JLenRjYmlBZ0lDQWdJQ0FnUXk1eVpYTnZiSFpsS0hCeWIyMXBjMlVwTG5Sb1pXNG9ablZ1WTNScGIyNG9kbUZzZFdVcGUxeHVJQ0FnSUNBZ0lDQWdJR2xtS0dGc2NtVmhaSGxEWVd4c1pXUXBjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJR0ZzY21WaFpIbERZV3hzWldRZ0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQjJZV3gxWlhOYkpHbHVaR1Y0WFNBOUlIWmhiSFZsTzF4dUlDQWdJQ0FnSUNBZ0lDMHRjbVZ0WVdsdWFXNW5JSHg4SUhKbGMyOXNkbVVvZG1Gc2RXVnpLVHRjYmlBZ0lDQWdJQ0FnZlN3Z2NtVnFaV04wS1R0Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0xTMXlaVzFoYVc1cGJtY2dmSHdnY21WemIyeDJaU2gyWVd4MVpYTXBPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lHbG1LR0ZpY25Wd2RDbHlaV3BsWTNRb1lXSnlkWEIwTG1WeWNtOXlLVHRjYmlBZ0lDQnlaWFIxY200Z1kyRndZV0pwYkdsMGVTNXdjbTl0YVhObE8xeHVJQ0I5TEZ4dUlDQXZMeUF5TlM0MExqUXVOQ0JRY205dGFYTmxMbkpoWTJVb2FYUmxjbUZpYkdVcFhHNGdJSEpoWTJVNklHWjFibU4wYVc5dUlISmhZMlVvYVhSbGNtRmliR1VwZTF4dUlDQWdJSFpoY2lCRElDQWdJQ0FnSUNBZ0lEMGdkR2hwYzF4dUlDQWdJQ0FnTENCallYQmhZbWxzYVhSNUlEMGdibVYzVUhKdmJXbHpaVU5oY0dGaWFXeHBkSGtvUXlsY2JpQWdJQ0FnSUN3Z2NtVnFaV04wSUNBZ0lDQTlJR05oY0dGaWFXeHBkSGt1Y21WcVpXTjBPMXh1SUNBZ0lIWmhjaUJoWW5KMWNIUWdQU0J3WlhKbWIzSnRLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0JtYjNKUFppaHBkR1Z5WVdKc1pTd2dabUZzYzJVc0lHWjFibU4wYVc5dUtIQnliMjFwYzJVcGUxeHVJQ0FnSUNBZ0lDQkRMbkpsYzI5c2RtVW9jSEp2YldselpTa3VkR2hsYmloallYQmhZbWxzYVhSNUxuSmxjMjlzZG1Vc0lISmxhbVZqZENrN1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtUdGNiaUFnSUNCcFppaGhZbkoxY0hRcGNtVnFaV04wS0dGaWNuVndkQzVsY25KdmNpazdYRzRnSUNBZ2NtVjBkWEp1SUdOaGNHRmlhV3hwZEhrdWNISnZiV2x6WlR0Y2JpQWdmVnh1ZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJQ1JoZENBZ1BTQnlaWEYxYVhKbEtDY3VMMTl6ZEhKcGJtY3RZWFFuS1NoMGNuVmxLVHRjYmx4dUx5OGdNakV1TVM0ekxqSTNJRk4wY21sdVp5NXdjbTkwYjNSNWNHVmJRRUJwZEdWeVlYUnZjbDBvS1Z4dWNtVnhkV2x5WlNnbkxpOWZhWFJsY2kxa1pXWnBibVVuS1NoVGRISnBibWNzSUNkVGRISnBibWNuTENCbWRXNWpkR2x2YmlocGRHVnlZWFJsWkNsN1hHNGdJSFJvYVhNdVgzUWdQU0JUZEhKcGJtY29hWFJsY21GMFpXUXBPeUF2THlCMFlYSm5aWFJjYmlBZ2RHaHBjeTVmYVNBOUlEQTdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRzVsZUhRZ2FXNWtaWGhjYmk4dklESXhMakV1TlM0eUxqRWdKVk4wY21sdVowbDBaWEpoZEc5eVVISnZkRzkwZVhCbEpTNXVaWGgwS0NsY2JuMHNJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lIWmhjaUJQSUNBZ0lDQTlJSFJvYVhNdVgzUmNiaUFnSUNBc0lHbHVaR1Y0SUQwZ2RHaHBjeTVmYVZ4dUlDQWdJQ3dnY0c5cGJuUTdYRzRnSUdsbUtHbHVaR1Y0SUQ0OUlFOHViR1Z1WjNSb0tYSmxkSFZ5YmlCN2RtRnNkV1U2SUhWdVpHVm1hVzVsWkN3Z1pHOXVaVG9nZEhKMVpYMDdYRzRnSUhCdmFXNTBJRDBnSkdGMEtFOHNJR2x1WkdWNEtUdGNiaUFnZEdocGN5NWZhU0FyUFNCd2IybHVkQzVzWlc1bmRHZzdYRzRnSUhKbGRIVnliaUI3ZG1Gc2RXVTZJSEJ2YVc1MExDQmtiMjVsT2lCbVlXeHpaWDA3WEc1OUtUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNHZMeUJGUTAxQlUyTnlhWEIwSURZZ2MzbHRZbTlzY3lCemFHbHRYRzUyWVhJZ1oyeHZZbUZzSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW5iRzlpWVd3bktWeHVJQ0FzSUdoaGN5QWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmFHRnpKeWxjYmlBZ0xDQkVSVk5EVWtsUVZFOVNVeUFnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlJsYzJOeWFYQjBiM0p6SnlsY2JpQWdMQ0FrWlhod2IzSjBJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2djbVZrWldacGJtVWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl5WldSbFptbHVaU2NwWEc0Z0lDd2dUVVZVUVNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl0WlhSaEp5a3VTMFZaWEc0Z0lDd2dKR1poYVd4eklDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTltWVdsc2N5Y3BYRzRnSUN3Z2MyaGhjbVZrSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXphR0Z5WldRbktWeHVJQ0FzSUhObGRGUnZVM1J5YVc1blZHRm5JRDBnY21WeGRXbHlaU2duTGk5ZmMyVjBMWFJ2TFhOMGNtbHVaeTEwWVdjbktWeHVJQ0FzSUhWcFpDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRXbGtKeWxjYmlBZ0xDQjNhM01nSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM2RyY3ljcFhHNGdJQ3dnZDJ0elJYaDBJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5M2EzTXRaWGgwSnlsY2JpQWdMQ0IzYTNORVpXWnBibVVnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNkcmN5MWtaV1pwYm1VbktWeHVJQ0FzSUd0bGVVOW1JQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmEyVjViMlluS1Z4dUlDQXNJR1Z1ZFcxTFpYbHpJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlc1MWJTMXJaWGx6SnlsY2JpQWdMQ0JwYzBGeWNtRjVJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJsekxXRnljbUY1SnlsY2JpQWdMQ0JoYms5aWFtVmpkQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGdUxXOWlhbVZqZENjcFhHNGdJQ3dnZEc5SlQySnFaV04wSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXBiMkpxWldOMEp5bGNiaUFnTENCMGIxQnlhVzFwZEdsMlpTQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMWEJ5YVcxcGRHbDJaU2NwWEc0Z0lDd2dZM0psWVhSbFJHVnpZeUFnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl3Y205d1pYSjBlUzFrWlhOakp5bGNiaUFnTENCZlkzSmxZWFJsSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxamNtVmhkR1VuS1Z4dUlDQXNJR2RQVUU1RmVIUWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV2R2Y0c0dFpYaDBKeWxjYmlBZ0xDQWtSMDlRUkNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMW5iM0JrSnlsY2JpQWdMQ0FrUkZBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFrY0NjcFhHNGdJQ3dnSkd0bGVYTWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0YTJWNWN5Y3BYRzRnSUN3Z1owOVFSQ0FnSUNBZ0lDQWdJQ0FnUFNBa1IwOVFSQzVtWEc0Z0lDd2daRkFnSUNBZ0lDQWdJQ0FnSUNBZ1BTQWtSRkF1Wmx4dUlDQXNJR2RQVUU0Z0lDQWdJQ0FnSUNBZ0lEMGdaMDlRVGtWNGRDNW1YRzRnSUN3Z0pGTjViV0p2YkNBZ0lDQWdJQ0FnUFNCbmJHOWlZV3d1VTNsdFltOXNYRzRnSUN3Z0pFcFRUMDRnSUNBZ0lDQWdJQ0FnUFNCbmJHOWlZV3d1U2xOUFRseHVJQ0FzSUY5emRISnBibWRwWm5rZ0lDQWdJRDBnSkVwVFQwNGdKaVlnSkVwVFQwNHVjM1J5YVc1bmFXWjVYRzRnSUN3Z1VGSlBWRTlVV1ZCRklDQWdJQ0FnUFNBbmNISnZkRzkwZVhCbEoxeHVJQ0FzSUVoSlJFUkZUaUFnSUNBZ0lDQWdJRDBnZDJ0ektDZGZhR2xrWkdWdUp5bGNiaUFnTENCVVQxOVFVa2xOU1ZSSlZrVWdJQ0E5SUhkcmN5Z25kRzlRY21sdGFYUnBkbVVuS1Z4dUlDQXNJR2x6Ulc1MWJTQWdJQ0FnSUNBZ0lEMGdlMzB1Y0hKdmNHVnlkSGxKYzBWdWRXMWxjbUZpYkdWY2JpQWdMQ0JUZVcxaWIyeFNaV2RwYzNSeWVTQTlJSE5vWVhKbFpDZ25jM2x0WW05c0xYSmxaMmx6ZEhKNUp5bGNiaUFnTENCQmJHeFRlVzFpYjJ4eklDQWdJQ0E5SUhOb1lYSmxaQ2duYzNsdFltOXNjeWNwWEc0Z0lDd2dUMUJUZVcxaWIyeHpJQ0FnSUNBZ1BTQnphR0Z5WldRb0oyOXdMWE41YldKdmJITW5LVnh1SUNBc0lFOWlhbVZqZEZCeWIzUnZJQ0FnSUQwZ1QySnFaV04wVzFCU1QxUlBWRmxRUlYxY2JpQWdMQ0JWVTBWZlRrRlVTVlpGSUNBZ0lDQTlJSFI1Y0dWdlppQWtVM2x0WW05c0lEMDlJQ2RtZFc1amRHbHZiaWRjYmlBZ0xDQlJUMkpxWldOMElDQWdJQ0FnSUNBOUlHZHNiMkpoYkM1UlQySnFaV04wTzF4dUx5OGdSRzl1SjNRZ2RYTmxJSE5sZEhSbGNuTWdhVzRnVVhRZ1UyTnlhWEIwTENCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmVteHZhWEp2WTJzdlkyOXlaUzFxY3k5cGMzTjFaWE12TVRjelhHNTJZWElnYzJWMGRHVnlJRDBnSVZGUFltcGxZM1FnZkh3Z0lWRlBZbXBsWTNSYlVGSlBWRTlVV1ZCRlhTQjhmQ0FoVVU5aWFtVmpkRnRRVWs5VVQxUlpVRVZkTG1acGJtUkRhR2xzWkR0Y2JseHVMeThnWm1Gc2JHSmhZMnNnWm05eUlHOXNaQ0JCYm1SeWIybGtMQ0JvZEhSd2N6b3ZMMk52WkdVdVoyOXZaMnhsTG1OdmJTOXdMM1k0TDJsemMzVmxjeTlrWlhSaGFXdy9hV1E5TmpnM1hHNTJZWElnYzJWMFUzbHRZbTlzUkdWell5QTlJRVJGVTBOU1NWQlVUMUpUSUNZbUlDUm1ZV2xzY3lobWRXNWpkR2x2YmlncGUxeHVJQ0J5WlhSMWNtNGdYMk55WldGMFpTaGtVQ2g3ZlN3Z0oyRW5MQ0I3WEc0Z0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlncGV5QnlaWFIxY200Z1pGQW9kR2hwY3l3Z0oyRW5MQ0I3ZG1Gc2RXVTZJRGQ5S1M1aE95QjlYRzRnSUgwcEtTNWhJQ0U5SURjN1hHNTlLU0EvSUdaMWJtTjBhVzl1S0dsMExDQnJaWGtzSUVRcGUxeHVJQ0IyWVhJZ2NISnZkRzlFWlhOaklEMGdaMDlRUkNoUFltcGxZM1JRY205MGJ5d2dhMlY1S1R0Y2JpQWdhV1lvY0hKdmRHOUVaWE5qS1dSbGJHVjBaU0JQWW1wbFkzUlFjbTkwYjF0clpYbGRPMXh1SUNCa1VDaHBkQ3dnYTJWNUxDQkVLVHRjYmlBZ2FXWW9jSEp2ZEc5RVpYTmpJQ1ltSUdsMElDRTlQU0JQWW1wbFkzUlFjbTkwYnlsa1VDaFBZbXBsWTNSUWNtOTBieXdnYTJWNUxDQndjbTkwYjBSbGMyTXBPMXh1ZlNBNklHUlFPMXh1WEc1MllYSWdkM0poY0NBOUlHWjFibU4wYVc5dUtIUmhaeWw3WEc0Z0lIWmhjaUJ6ZVcwZ1BTQkJiR3hUZVcxaWIyeHpXM1JoWjEwZ1BTQmZZM0psWVhSbEtDUlRlVzFpYjJ4YlVGSlBWRTlVV1ZCRlhTazdYRzRnSUhONWJTNWZheUE5SUhSaFp6dGNiaUFnY21WMGRYSnVJSE41YlR0Y2JuMDdYRzVjYm5aaGNpQnBjMU41YldKdmJDQTlJRlZUUlY5T1FWUkpWa1VnSmlZZ2RIbHdaVzltSUNSVGVXMWliMnd1YVhSbGNtRjBiM0lnUFQwZ0ozTjViV0p2YkNjZ1B5Qm1kVzVqZEdsdmJpaHBkQ2w3WEc0Z0lISmxkSFZ5YmlCMGVYQmxiMllnYVhRZ1BUMGdKM041YldKdmJDYzdYRzU5SURvZ1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCeVpYUjFjbTRnYVhRZ2FXNXpkR0Z1WTJWdlppQWtVM2x0WW05c08xeHVmVHRjYmx4dWRtRnlJQ1JrWldacGJtVlFjbTl3WlhKMGVTQTlJR1oxYm1OMGFXOXVJR1JsWm1sdVpWQnliM0JsY25SNUtHbDBMQ0JyWlhrc0lFUXBlMXh1SUNCcFppaHBkQ0E5UFQwZ1QySnFaV04wVUhKdmRHOHBKR1JsWm1sdVpWQnliM0JsY25SNUtFOVFVM2x0WW05c2N5d2dhMlY1TENCRUtUdGNiaUFnWVc1UFltcGxZM1FvYVhRcE8xeHVJQ0JyWlhrZ1BTQjBiMUJ5YVcxcGRHbDJaU2hyWlhrc0lIUnlkV1VwTzF4dUlDQmhiazlpYW1WamRDaEVLVHRjYmlBZ2FXWW9hR0Z6S0VGc2JGTjViV0p2YkhNc0lHdGxlU2twZTF4dUlDQWdJR2xtS0NGRUxtVnVkVzFsY21GaWJHVXBlMXh1SUNBZ0lDQWdhV1lvSVdoaGN5aHBkQ3dnU0VsRVJFVk9LU2xrVUNocGRDd2dTRWxFUkVWT0xDQmpjbVZoZEdWRVpYTmpLREVzSUh0OUtTazdYRzRnSUNBZ0lDQnBkRnRJU1VSRVJVNWRXMnRsZVYwZ1BTQjBjblZsTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnBaaWhvWVhNb2FYUXNJRWhKUkVSRlRpa2dKaVlnYVhSYlNFbEVSRVZPWFZ0clpYbGRLV2wwVzBoSlJFUkZUbDFiYTJWNVhTQTlJR1poYkhObE8xeHVJQ0FnSUNBZ1JDQTlJRjlqY21WaGRHVW9SQ3dnZTJWdWRXMWxjbUZpYkdVNklHTnlaV0YwWlVSbGMyTW9NQ3dnWm1Gc2MyVXBmU2s3WEc0Z0lDQWdmU0J5WlhSMWNtNGdjMlYwVTNsdFltOXNSR1Z6WXlocGRDd2dhMlY1TENCRUtUdGNiaUFnZlNCeVpYUjFjbTRnWkZBb2FYUXNJR3RsZVN3Z1JDazdYRzU5TzF4dWRtRnlJQ1JrWldacGJtVlFjbTl3WlhKMGFXVnpJRDBnWm5WdVkzUnBiMjRnWkdWbWFXNWxVSEp2Y0dWeWRHbGxjeWhwZEN3Z1VDbDdYRzRnSUdGdVQySnFaV04wS0dsMEtUdGNiaUFnZG1GeUlHdGxlWE1nUFNCbGJuVnRTMlY1Y3loUUlEMGdkRzlKVDJKcVpXTjBLRkFwS1Z4dUlDQWdJQ3dnYVNBZ0lDQTlJREJjYmlBZ0lDQXNJR3dnUFNCclpYbHpMbXhsYm1kMGFGeHVJQ0FnSUN3Z2EyVjVPMXh1SUNCM2FHbHNaU2hzSUQ0Z2FTa2taR1ZtYVc1bFVISnZjR1Z5ZEhrb2FYUXNJR3RsZVNBOUlHdGxlWE5iYVNzclhTd2dVRnRyWlhsZEtUdGNiaUFnY21WMGRYSnVJR2wwTzF4dWZUdGNiblpoY2lBa1kzSmxZWFJsSUQwZ1puVnVZM1JwYjI0Z1kzSmxZWFJsS0dsMExDQlFLWHRjYmlBZ2NtVjBkWEp1SUZBZ1BUMDlJSFZ1WkdWbWFXNWxaQ0EvSUY5amNtVmhkR1VvYVhRcElEb2dKR1JsWm1sdVpWQnliM0JsY25ScFpYTW9YMk55WldGMFpTaHBkQ2tzSUZBcE8xeHVmVHRjYm5aaGNpQWtjSEp2Y0dWeWRIbEpjMFZ1ZFcxbGNtRmliR1VnUFNCbWRXNWpkR2x2YmlCd2NtOXdaWEowZVVselJXNTFiV1Z5WVdKc1pTaHJaWGtwZTF4dUlDQjJZWElnUlNBOUlHbHpSVzUxYlM1allXeHNLSFJvYVhNc0lHdGxlU0E5SUhSdlVISnBiV2wwYVhabEtHdGxlU3dnZEhKMVpTa3BPMXh1SUNCcFppaDBhR2x6SUQwOVBTQlBZbXBsWTNSUWNtOTBieUFtSmlCb1lYTW9RV3hzVTNsdFltOXNjeXdnYTJWNUtTQW1KaUFoYUdGektFOVFVM2x0WW05c2N5d2dhMlY1S1NseVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUhKbGRIVnliaUJGSUh4OElDRm9ZWE1vZEdocGN5d2dhMlY1S1NCOGZDQWhhR0Z6S0VGc2JGTjViV0p2YkhNc0lHdGxlU2tnZkh3Z2FHRnpLSFJvYVhNc0lFaEpSRVJGVGlrZ0ppWWdkR2hwYzF0SVNVUkVSVTVkVzJ0bGVWMGdQeUJGSURvZ2RISjFaVHRjYm4wN1hHNTJZWElnSkdkbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaUE5SUdaMWJtTjBhVzl1SUdkbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaWhwZEN3Z2EyVjVLWHRjYmlBZ2FYUWdJRDBnZEc5SlQySnFaV04wS0dsMEtUdGNiaUFnYTJWNUlEMGdkRzlRY21sdGFYUnBkbVVvYTJWNUxDQjBjblZsS1R0Y2JpQWdhV1lvYVhRZ1BUMDlJRTlpYW1WamRGQnliM1J2SUNZbUlHaGhjeWhCYkd4VGVXMWliMnh6TENCclpYa3BJQ1ltSUNGb1lYTW9UMUJUZVcxaWIyeHpMQ0JyWlhrcEtYSmxkSFZ5Ymp0Y2JpQWdkbUZ5SUVRZ1BTQm5UMUJFS0dsMExDQnJaWGtwTzF4dUlDQnBaaWhFSUNZbUlHaGhjeWhCYkd4VGVXMWliMnh6TENCclpYa3BJQ1ltSUNFb2FHRnpLR2wwTENCSVNVUkVSVTRwSUNZbUlHbDBXMGhKUkVSRlRsMWJhMlY1WFNrcFJDNWxiblZ0WlhKaFlteGxJRDBnZEhKMVpUdGNiaUFnY21WMGRYSnVJRVE3WEc1OU8xeHVkbUZ5SUNSblpYUlBkMjVRY205d1pYSjBlVTVoYldWeklEMGdablZ1WTNScGIyNGdaMlYwVDNkdVVISnZjR1Z5ZEhsT1lXMWxjeWhwZENsN1hHNGdJSFpoY2lCdVlXMWxjeUFnUFNCblQxQk9LSFJ2U1U5aWFtVmpkQ2hwZENrcFhHNGdJQ0FnTENCeVpYTjFiSFFnUFNCYlhWeHVJQ0FnSUN3Z2FTQWdJQ0FnSUQwZ01GeHVJQ0FnSUN3Z2EyVjVPMXh1SUNCM2FHbHNaU2h1WVcxbGN5NXNaVzVuZEdnZ1BpQnBLWHRjYmlBZ0lDQnBaaWdoYUdGektFRnNiRk41YldKdmJITXNJR3RsZVNBOUlHNWhiV1Z6VzJrcksxMHBJQ1ltSUd0bGVTQWhQU0JJU1VSRVJVNGdKaVlnYTJWNUlDRTlJRTFGVkVFcGNtVnpkV3gwTG5CMWMyZ29hMlY1S1R0Y2JpQWdmU0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVmVHRjYm5aaGNpQWtaMlYwVDNkdVVISnZjR1Z5ZEhsVGVXMWliMnh6SUQwZ1puVnVZM1JwYjI0Z1oyVjBUM2R1VUhKdmNHVnlkSGxUZVcxaWIyeHpLR2wwS1h0Y2JpQWdkbUZ5SUVsVFgwOVFJQ0E5SUdsMElEMDlQU0JQWW1wbFkzUlFjbTkwYjF4dUlDQWdJQ3dnYm1GdFpYTWdJRDBnWjA5UVRpaEpVMTlQVUNBL0lFOVFVM2x0WW05c2N5QTZJSFJ2U1U5aWFtVmpkQ2hwZENrcFhHNGdJQ0FnTENCeVpYTjFiSFFnUFNCYlhWeHVJQ0FnSUN3Z2FTQWdJQ0FnSUQwZ01GeHVJQ0FnSUN3Z2EyVjVPMXh1SUNCM2FHbHNaU2h1WVcxbGN5NXNaVzVuZEdnZ1BpQnBLWHRjYmlBZ0lDQnBaaWhvWVhNb1FXeHNVM2x0WW05c2N5d2dhMlY1SUQwZ2JtRnRaWE5iYVNzclhTa2dKaVlnS0VsVFgwOVFJRDhnYUdGektFOWlhbVZqZEZCeWIzUnZMQ0JyWlhrcElEb2dkSEoxWlNrcGNtVnpkV3gwTG5CMWMyZ29RV3hzVTNsdFltOXNjMXRyWlhsZEtUdGNiaUFnZlNCeVpYUjFjbTRnY21WemRXeDBPMXh1ZlR0Y2JseHVMeThnTVRrdU5DNHhMakVnVTNsdFltOXNLRnRrWlhOamNtbHdkR2x2YmwwcFhHNXBaaWdoVlZORlgwNUJWRWxXUlNsN1hHNGdJQ1JUZVcxaWIyd2dQU0JtZFc1amRHbHZiaUJUZVcxaWIyd29LWHRjYmlBZ0lDQnBaaWgwYUdseklHbHVjM1JoYm1ObGIyWWdKRk41YldKdmJDbDBhSEp2ZHlCVWVYQmxSWEp5YjNJb0oxTjViV0p2YkNCcGN5QnViM1FnWVNCamIyNXpkSEoxWTNSdmNpRW5LVHRjYmlBZ0lDQjJZWElnZEdGbklEMGdkV2xrS0dGeVozVnRaVzUwY3k1c1pXNW5kR2dnUGlBd0lEOGdZWEpuZFcxbGJuUnpXekJkSURvZ2RXNWtaV1pwYm1Wa0tUdGNiaUFnSUNCMllYSWdKSE5sZENBOUlHWjFibU4wYVc5dUtIWmhiSFZsS1h0Y2JpQWdJQ0FnSUdsbUtIUm9hWE1nUFQwOUlFOWlhbVZqZEZCeWIzUnZLU1J6WlhRdVkyRnNiQ2hQVUZONWJXSnZiSE1zSUhaaGJIVmxLVHRjYmlBZ0lDQWdJR2xtS0doaGN5aDBhR2x6TENCSVNVUkVSVTRwSUNZbUlHaGhjeWgwYUdselcwaEpSRVJGVGwwc0lIUmhaeWtwZEdocGMxdElTVVJFUlU1ZFczUmhaMTBnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJSE5sZEZONWJXSnZiRVJsYzJNb2RHaHBjeXdnZEdGbkxDQmpjbVZoZEdWRVpYTmpLREVzSUhaaGJIVmxLU2s3WEc0Z0lDQWdmVHRjYmlBZ0lDQnBaaWhFUlZORFVrbFFWRTlTVXlBbUppQnpaWFIwWlhJcGMyVjBVM2x0WW05c1JHVnpZeWhQWW1wbFkzUlFjbTkwYnl3Z2RHRm5MQ0I3WTI5dVptbG5kWEpoWW14bE9pQjBjblZsTENCelpYUTZJQ1J6WlhSOUtUdGNiaUFnSUNCeVpYUjFjbTRnZDNKaGNDaDBZV2NwTzF4dUlDQjlPMXh1SUNCeVpXUmxabWx1WlNna1UzbHRZbTlzVzFCU1QxUlBWRmxRUlYwc0lDZDBiMU4wY21sdVp5Y3NJR1oxYm1OMGFXOXVJSFJ2VTNSeWFXNW5LQ2w3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDJzN1hHNGdJSDBwTzF4dVhHNGdJQ1JIVDFCRUxtWWdQU0FrWjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlPMXh1SUNBa1JGQXVaaUFnSUQwZ0pHUmxabWx1WlZCeWIzQmxjblI1TzF4dUlDQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaMjl3YmljcExtWWdQU0JuVDFCT1JYaDBMbVlnUFNBa1oyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGN6dGNiaUFnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFhCcFpTY3BMbVlnSUQwZ0pIQnliM0JsY25SNVNYTkZiblZ0WlhKaFlteGxPMXh1SUNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFoyOXdjeWNwTG1ZZ1BTQWtaMlYwVDNkdVVISnZjR1Z5ZEhsVGVXMWliMnh6TzF4dVhHNGdJR2xtS0VSRlUwTlNTVkJVVDFKVElDWW1JQ0Z5WlhGMWFYSmxLQ2N1TDE5c2FXSnlZWEo1SnlrcGUxeHVJQ0FnSUhKbFpHVm1hVzVsS0U5aWFtVmpkRkJ5YjNSdkxDQW5jSEp2Y0dWeWRIbEpjMFZ1ZFcxbGNtRmliR1VuTENBa2NISnZjR1Z5ZEhsSmMwVnVkVzFsY21GaWJHVXNJSFJ5ZFdVcE8xeHVJQ0I5WEc1Y2JpQWdkMnR6UlhoMExtWWdQU0JtZFc1amRHbHZiaWh1WVcxbEtYdGNiaUFnSUNCeVpYUjFjbTRnZDNKaGNDaDNhM01vYm1GdFpTa3BPMXh1SUNCOVhHNTlYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVISUNzZ0pHVjRjRzl5ZEM1WElDc2dKR1Y0Y0c5eWRDNUdJQ29nSVZWVFJWOU9RVlJKVmtVc0lIdFRlVzFpYjJ3NklDUlRlVzFpYjJ4OUtUdGNibHh1Wm05eUtIWmhjaUJ6ZVcxaWIyeHpJRDBnS0Z4dUlDQXZMeUF4T1M0MExqSXVNaXdnTVRrdU5DNHlMak1zSURFNUxqUXVNaTQwTENBeE9TNDBMakl1Tml3Z01Ua3VOQzR5TGpnc0lERTVMalF1TWk0NUxDQXhPUzQwTGpJdU1UQXNJREU1TGpRdU1pNHhNU3dnTVRrdU5DNHlMakV5TENBeE9TNDBMakl1TVRNc0lERTVMalF1TWk0eE5GeHVJQ0FuYUdGelNXNXpkR0Z1WTJVc2FYTkRiMjVqWVhSVGNISmxZV1JoWW14bExHbDBaWEpoZEc5eUxHMWhkR05vTEhKbGNHeGhZMlVzYzJWaGNtTm9MSE53WldOcFpYTXNjM0JzYVhRc2RHOVFjbWx0YVhScGRtVXNkRzlUZEhKcGJtZFVZV2NzZFc1elkyOXdZV0pzWlhNblhHNHBMbk53YkdsMEtDY3NKeWtzSUdrZ1BTQXdPeUJ6ZVcxaWIyeHpMbXhsYm1kMGFDQStJR2s3SUNsM2EzTW9jM2x0WW05c2MxdHBLeXRkS1R0Y2JseHVabTl5S0haaGNpQnplVzFpYjJ4eklEMGdKR3RsZVhNb2QydHpMbk4wYjNKbEtTd2dhU0E5SURBN0lITjViV0p2YkhNdWJHVnVaM1JvSUQ0Z2FUc2dLWGRyYzBSbFptbHVaU2h6ZVcxaWIyeHpXMmtySzEwcE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeUFySUNSbGVIQnZjblF1UmlBcUlDRlZVMFZmVGtGVVNWWkZMQ0FuVTNsdFltOXNKeXdnZTF4dUlDQXZMeUF4T1M0MExqSXVNU0JUZVcxaWIyd3VabTl5S0d0bGVTbGNiaUFnSjJadmNpYzZJR1oxYm1OMGFXOXVLR3RsZVNsN1hHNGdJQ0FnY21WMGRYSnVJR2hoY3loVGVXMWliMnhTWldkcGMzUnllU3dnYTJWNUlDczlJQ2NuS1Z4dUlDQWdJQ0FnUHlCVGVXMWliMnhTWldkcGMzUnllVnRyWlhsZFhHNGdJQ0FnSUNBNklGTjViV0p2YkZKbFoybHpkSEo1VzJ0bGVWMGdQU0FrVTNsdFltOXNLR3RsZVNrN1hHNGdJSDBzWEc0Z0lDOHZJREU1TGpRdU1pNDFJRk41YldKdmJDNXJaWGxHYjNJb2MzbHRLVnh1SUNCclpYbEdiM0k2SUdaMWJtTjBhVzl1SUd0bGVVWnZjaWhyWlhrcGUxeHVJQ0FnSUdsbUtHbHpVM2x0WW05c0tHdGxlU2twY21WMGRYSnVJR3RsZVU5bUtGTjViV0p2YkZKbFoybHpkSEo1TENCclpYa3BPMXh1SUNBZ0lIUm9jbTkzSUZSNWNHVkZjbkp2Y2loclpYa2dLeUFuSUdseklHNXZkQ0JoSUhONWJXSnZiQ0VuS1R0Y2JpQWdmU3hjYmlBZ2RYTmxVMlYwZEdWeU9pQm1kVzVqZEdsdmJpZ3BleUJ6WlhSMFpYSWdQU0IwY25WbE95QjlMRnh1SUNCMWMyVlRhVzF3YkdVNklHWjFibU4wYVc5dUtDbDdJSE5sZEhSbGNpQTlJR1poYkhObE95QjlYRzU5S1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTWdLeUFrWlhod2IzSjBMa1lnS2lBaFZWTkZYMDVCVkVsV1JTd2dKMDlpYW1WamRDY3NJSHRjYmlBZ0x5OGdNVGt1TVM0eUxqSWdUMkpxWldOMExtTnlaV0YwWlNoUElGc3NJRkJ5YjNCbGNuUnBaWE5kS1Z4dUlDQmpjbVZoZEdVNklDUmpjbVZoZEdVc1hHNGdJQzh2SURFNUxqRXVNaTQwSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaFBMQ0JRTENCQmRIUnlhV0oxZEdWektWeHVJQ0JrWldacGJtVlFjbTl3WlhKMGVUb2dKR1JsWm1sdVpWQnliM0JsY25SNUxGeHVJQ0F2THlBeE9TNHhMakl1TXlCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRHbGxjeWhQTENCUWNtOXdaWEowYVdWektWeHVJQ0JrWldacGJtVlFjbTl3WlhKMGFXVnpPaUFrWkdWbWFXNWxVSEp2Y0dWeWRHbGxjeXhjYmlBZ0x5OGdNVGt1TVM0eUxqWWdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2loUExDQlFLVnh1SUNCblpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0k2SUNSblpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lzWEc0Z0lDOHZJREU1TGpFdU1pNDNJRTlpYW1WamRDNW5aWFJQZDI1UWNtOXdaWEowZVU1aGJXVnpLRThwWEc0Z0lHZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTTZJQ1JuWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6TEZ4dUlDQXZMeUF4T1M0eExqSXVPQ0JQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsVGVXMWliMnh6S0U4cFhHNGdJR2RsZEU5M2JsQnliM0JsY25SNVUzbHRZbTlzY3pvZ0pHZGxkRTkzYmxCeWIzQmxjblI1VTNsdFltOXNjMXh1ZlNrN1hHNWNiaTh2SURJMExqTXVNaUJLVTA5T0xuTjBjbWx1WjJsbWVTaDJZV3gxWlNCYkxDQnlaWEJzWVdObGNpQmJMQ0J6Y0dGalpWMWRLVnh1SkVwVFQwNGdKaVlnSkdWNGNHOXlkQ2drWlhod2IzSjBMbE1nS3lBa1pYaHdiM0owTGtZZ0tpQW9JVlZUUlY5T1FWUkpWa1VnZkh3Z0pHWmhhV3h6S0daMWJtTjBhVzl1S0NsN1hHNGdJSFpoY2lCVElEMGdKRk41YldKdmJDZ3BPMXh1SUNBdkx5Qk5VeUJGWkdkbElHTnZiblpsY25SeklITjViV0p2YkNCMllXeDFaWE1nZEc4Z1NsTlBUaUJoY3lCN2ZWeHVJQ0F2THlCWFpXSkxhWFFnWTI5dWRtVnlkSE1nYzNsdFltOXNJSFpoYkhWbGN5QjBieUJLVTA5T0lHRnpJRzUxYkd4Y2JpQWdMeThnVmpnZ2RHaHliM2R6SUc5dUlHSnZlR1ZrSUhONWJXSnZiSE5jYmlBZ2NtVjBkWEp1SUY5emRISnBibWRwWm5rb1cxTmRLU0FoUFNBblcyNTFiR3hkSnlCOGZDQmZjM1J5YVc1bmFXWjVLSHRoT2lCVGZTa2dJVDBnSjN0OUp5QjhmQ0JmYzNSeWFXNW5hV1o1S0U5aWFtVmpkQ2hUS1NrZ0lUMGdKM3Q5Snp0Y2JuMHBLU3dnSjBwVFQwNG5MQ0I3WEc0Z0lITjBjbWx1WjJsbWVUb2dablZ1WTNScGIyNGdjM1J5YVc1bmFXWjVLR2wwS1h0Y2JpQWdJQ0JwWmlocGRDQTlQVDBnZFc1a1pXWnBibVZrSUh4OElHbHpVM2x0WW05c0tHbDBLU2x5WlhSMWNtNDdJQzh2SUVsRk9DQnlaWFIxY201eklITjBjbWx1WnlCdmJpQjFibVJsWm1sdVpXUmNiaUFnSUNCMllYSWdZWEpuY3lBOUlGdHBkRjFjYmlBZ0lDQWdJQ3dnYVNBZ0lDQTlJREZjYmlBZ0lDQWdJQ3dnY21Wd2JHRmpaWElzSUNSeVpYQnNZV05sY2p0Y2JpQWdJQ0IzYUdsc1pTaGhjbWQxYldWdWRITXViR1Z1WjNSb0lENGdhU2xoY21kekxuQjFjMmdvWVhKbmRXMWxiblJ6VzJrcksxMHBPMXh1SUNBZ0lISmxjR3hoWTJWeUlEMGdZWEpuYzFzeFhUdGNiaUFnSUNCcFppaDBlWEJsYjJZZ2NtVndiR0ZqWlhJZ1BUMGdKMloxYm1OMGFXOXVKeWtrY21Wd2JHRmpaWElnUFNCeVpYQnNZV05sY2p0Y2JpQWdJQ0JwWmlna2NtVndiR0ZqWlhJZ2ZId2dJV2x6UVhKeVlYa29jbVZ3YkdGalpYSXBLWEpsY0d4aFkyVnlJRDBnWm5WdVkzUnBiMjRvYTJWNUxDQjJZV3gxWlNsN1hHNGdJQ0FnSUNCcFppZ2tjbVZ3YkdGalpYSXBkbUZzZFdVZ1BTQWtjbVZ3YkdGalpYSXVZMkZzYkNoMGFHbHpMQ0JyWlhrc0lIWmhiSFZsS1R0Y2JpQWdJQ0FnSUdsbUtDRnBjMU41YldKdmJDaDJZV3gxWlNrcGNtVjBkWEp1SUhaaGJIVmxPMXh1SUNBZ0lIMDdYRzRnSUNBZ1lYSm5jMXN4WFNBOUlISmxjR3hoWTJWeU8xeHVJQ0FnSUhKbGRIVnliaUJmYzNSeWFXNW5hV1o1TG1Gd2NHeDVLQ1JLVTA5T0xDQmhjbWR6S1R0Y2JpQWdmVnh1ZlNrN1hHNWNiaTh2SURFNUxqUXVNeTQwSUZONWJXSnZiQzV3Y205MGIzUjVjR1ZiUUVCMGIxQnlhVzFwZEdsMlpWMG9hR2x1ZENsY2JpUlRlVzFpYjJ4YlVGSlBWRTlVV1ZCRlhWdFVUMTlRVWtsTlNWUkpWa1ZkSUh4OElISmxjWFZwY21Vb0p5NHZYMmhwWkdVbktTZ2tVM2x0WW05c1cxQlNUMVJQVkZsUVJWMHNJRlJQWDFCU1NVMUpWRWxXUlN3Z0pGTjViV0p2YkZ0UVVrOVVUMVJaVUVWZExuWmhiSFZsVDJZcE8xeHVMeThnTVRrdU5DNHpMalVnVTNsdFltOXNMbkJ5YjNSdmRIbHdaVnRBUUhSdlUzUnlhVzVuVkdGblhWeHVjMlYwVkc5VGRISnBibWRVWVdjb0pGTjViV0p2YkN3Z0oxTjViV0p2YkNjcE8xeHVMeThnTWpBdU1pNHhMamtnVFdGMGFGdEFRSFJ2VTNSeWFXNW5WR0ZuWFZ4dWMyVjBWRzlUZEhKcGJtZFVZV2NvVFdGMGFDd2dKMDFoZEdnbkxDQjBjblZsS1R0Y2JpOHZJREkwTGpNdU15QktVMDlPVzBCQWRHOVRkSEpwYm1kVVlXZGRYRzV6WlhSVWIxTjBjbWx1WjFSaFp5aG5iRzlpWVd3dVNsTlBUaXdnSjBwVFQwNG5MQ0IwY25WbEtUc2lMQ0p5WlhGMWFYSmxLQ2N1TDE5M2EzTXRaR1ZtYVc1bEp5a29KMkZ6ZVc1alNYUmxjbUYwYjNJbktUc2lMQ0p5WlhGMWFYSmxLQ2N1TDE5M2EzTXRaR1ZtYVc1bEp5a29KMjlpYzJWeWRtRmliR1VuS1RzaUxDSnlaWEYxYVhKbEtDY3VMMlZ6Tmk1aGNuSmhlUzVwZEdWeVlYUnZjaWNwTzF4dWRtRnlJR2RzYjJKaGJDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LVnh1SUNBc0lHaHBaR1VnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9hV1JsSnlsY2JpQWdMQ0JKZEdWeVlYUnZjbk1nSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVhSbGNtRjBiM0p6SnlsY2JpQWdMQ0JVVDE5VFZGSkpUa2RmVkVGSElEMGdjbVZ4ZFdseVpTZ25MaTlmZDJ0ekp5a29KM1J2VTNSeWFXNW5WR0ZuSnlrN1hHNWNibVp2Y2loMllYSWdZMjlzYkdWamRHbHZibk1nUFNCYkowNXZaR1ZNYVhOMEp5d2dKMFJQVFZSdmEyVnVUR2x6ZENjc0lDZE5aV1JwWVV4cGMzUW5MQ0FuVTNSNWJHVlRhR1ZsZEV4cGMzUW5MQ0FuUTFOVFVuVnNaVXhwYzNRblhTd2dhU0E5SURBN0lHa2dQQ0ExT3lCcEt5c3BlMXh1SUNCMllYSWdUa0ZOUlNBZ0lDQWdJQ0E5SUdOdmJHeGxZM1JwYjI1elcybGRYRzRnSUNBZ0xDQkRiMnhzWldOMGFXOXVJRDBnWjJ4dlltRnNXMDVCVFVWZFhHNGdJQ0FnTENCd2NtOTBieUFnSUNBZ0lEMGdRMjlzYkdWamRHbHZiaUFtSmlCRGIyeHNaV04wYVc5dUxuQnliM1J2ZEhsd1pUdGNiaUFnYVdZb2NISnZkRzhnSmlZZ0lYQnliM1J2VzFSUFgxTlVVa2xPUjE5VVFVZGRLV2hwWkdVb2NISnZkRzhzSUZSUFgxTlVVa2xPUjE5VVFVY3NJRTVCVFVVcE8xeHVJQ0JKZEdWeVlYUnZjbk5iVGtGTlJWMGdQU0JKZEdWeVlYUnZjbk11UVhKeVlYazdYRzU5SWl3aWRtRnlJR052WmlBOUlISmxjWFZwY21Vb0p5NHZYMk52WmljcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHBkQ3dnYlhObktYdGNiaUFnYVdZb2RIbHdaVzltSUdsMElDRTlJQ2R1ZFcxaVpYSW5JQ1ltSUdOdlppaHBkQ2tnSVQwZ0owNTFiV0psY2ljcGRHaHliM2NnVkhsd1pVVnljbTl5S0cxelp5azdYRzRnSUhKbGRIVnliaUFyYVhRN1hHNTlPeUlzSWk4dklESXlMakV1TXk0ek1TQkJjbkpoZVM1d2NtOTBiM1I1Y0dWYlFFQjFibk5qYjNCaFlteGxjMTFjYm5aaGNpQlZUbE5EVDFCQlFreEZVeUE5SUhKbGNYVnBjbVVvSnk0dlgzZHJjeWNwS0NkMWJuTmpiM0JoWW14bGN5Y3BYRzRnSUN3Z1FYSnlZWGxRY205MGJ5QWdQU0JCY25KaGVTNXdjbTkwYjNSNWNHVTdYRzVwWmloQmNuSmhlVkJ5YjNSdlcxVk9VME5QVUVGQ1RFVlRYU0E5UFNCMWJtUmxabWx1WldRcGNtVnhkV2x5WlNnbkxpOWZhR2xrWlNjcEtFRnljbUY1VUhKdmRHOHNJRlZPVTBOUFVFRkNURVZUTENCN2ZTazdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR3RsZVNsN1hHNGdJRUZ5Y21GNVVISnZkRzliVlU1VFEwOVFRVUpNUlZOZFcydGxlVjBnUFNCMGNuVmxPMXh1ZlRzaUxDSXZMeUF5TWk0eExqTXVNeUJCY25KaGVTNXdjbTkwYjNSNWNHVXVZMjl3ZVZkcGRHaHBiaWgwWVhKblpYUXNJSE4wWVhKMExDQmxibVFnUFNCMGFHbHpMbXhsYm1kMGFDbGNiaWQxYzJVZ2MzUnlhV04wSnp0Y2JuWmhjaUIwYjA5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMVzlpYW1WamRDY3BYRzRnSUN3Z2RHOUpibVJsZUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxcGJtUmxlQ2NwWEc0Z0lDd2dkRzlNWlc1bmRHZ2dQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXNaVzVuZEdnbktUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JiWFM1amIzQjVWMmwwYUdsdUlIeDhJR1oxYm1OMGFXOXVJR052Y0hsWGFYUm9hVzRvZEdGeVoyVjBMeW85SURBcUx5d2djM1JoY25RdktqMGdNQ3dnWlc1a0lEMGdRR3hsYm1kMGFDb3ZLWHRjYmlBZ2RtRnlJRThnSUNBZ0lEMGdkRzlQWW1wbFkzUW9kR2hwY3lsY2JpQWdJQ0FzSUd4bGJpQWdJRDBnZEc5TVpXNW5kR2dvVHk1c1pXNW5kR2dwWEc0Z0lDQWdMQ0IwYnlBZ0lDQTlJSFJ2U1c1a1pYZ29kR0Z5WjJWMExDQnNaVzRwWEc0Z0lDQWdMQ0JtY205dElDQTlJSFJ2U1c1a1pYZ29jM1JoY25Rc0lHeGxiaWxjYmlBZ0lDQXNJR1Z1WkNBZ0lEMGdZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQStJRElnUHlCaGNtZDFiV1Z1ZEhOYk1sMGdPaUIxYm1SbFptbHVaV1JjYmlBZ0lDQXNJR052ZFc1MElEMGdUV0YwYUM1dGFXNG9LR1Z1WkNBOVBUMGdkVzVrWldacGJtVmtJRDhnYkdWdUlEb2dkRzlKYm1SbGVDaGxibVFzSUd4bGJpa3BJQzBnWm5KdmJTd2diR1Z1SUMwZ2RHOHBYRzRnSUNBZ0xDQnBibU1nSUNBOUlERTdYRzRnSUdsbUtHWnliMjBnUENCMGJ5QW1KaUIwYnlBOElHWnliMjBnS3lCamIzVnVkQ2w3WEc0Z0lDQWdhVzVqSUNBOUlDMHhPMXh1SUNBZ0lHWnliMjBnS3owZ1kyOTFiblFnTFNBeE8xeHVJQ0FnSUhSdklDQWdLejBnWTI5MWJuUWdMU0F4TzF4dUlDQjlYRzRnSUhkb2FXeGxLR052ZFc1MExTMGdQaUF3S1h0Y2JpQWdJQ0JwWmlobWNtOXRJR2x1SUU4cFQxdDBiMTBnUFNCUFcyWnliMjFkTzF4dUlDQWdJR1ZzYzJVZ1pHVnNaWFJsSUU5YmRHOWRPMXh1SUNBZ0lIUnZJQ0FnS3owZ2FXNWpPMXh1SUNBZ0lHWnliMjBnS3owZ2FXNWpPMXh1SUNCOUlISmxkSFZ5YmlCUE8xeHVmVHNpTENJdkx5QXlNaTR4TGpNdU5pQkJjbkpoZVM1d2NtOTBiM1I1Y0dVdVptbHNiQ2gyWVd4MVpTd2djM1JoY25RZ1BTQXdMQ0JsYm1RZ1BTQjBhR2x6TG14bGJtZDBhQ2xjYmlkMWMyVWdjM1J5YVdOMEp6dGNiblpoY2lCMGIwOWlhbVZqZENBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFc5aWFtVmpkQ2NwWEc0Z0lDd2dkRzlKYm1SbGVDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXBibVJsZUNjcFhHNGdJQ3dnZEc5TVpXNW5kR2dnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTFzWlc1bmRHZ25LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnWm1sc2JDaDJZV3gxWlNBdktpd2djM1JoY25RZ1BTQXdMQ0JsYm1RZ1BTQkFiR1Z1WjNSb0lDb3ZLWHRjYmlBZ2RtRnlJRThnSUNBZ0lDQTlJSFJ2VDJKcVpXTjBLSFJvYVhNcFhHNGdJQ0FnTENCc1pXNW5kR2dnUFNCMGIweGxibWQwYUNoUExteGxibWQwYUNsY2JpQWdJQ0FzSUdGTVpXNGdJQ0E5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2hjYmlBZ0lDQXNJR2x1WkdWNElDQTlJSFJ2U1c1a1pYZ29ZVXhsYmlBK0lERWdQeUJoY21kMWJXVnVkSE5iTVYwZ09pQjFibVJsWm1sdVpXUXNJR3hsYm1kMGFDbGNiaUFnSUNBc0lHVnVaQ0FnSUNBOUlHRk1aVzRnUGlBeUlEOGdZWEpuZFcxbGJuUnpXekpkSURvZ2RXNWtaV1pwYm1Wa1hHNGdJQ0FnTENCbGJtUlFiM01nUFNCbGJtUWdQVDA5SUhWdVpHVm1hVzVsWkNBL0lHeGxibWQwYUNBNklIUnZTVzVrWlhnb1pXNWtMQ0JzWlc1bmRHZ3BPMXh1SUNCM2FHbHNaU2hsYm1SUWIzTWdQaUJwYm1SbGVDbFBXMmx1WkdWNEt5dGRJRDBnZG1Gc2RXVTdYRzRnSUhKbGRIVnliaUJQTzF4dWZUc2lMQ0oyWVhJZ1ptOXlUMllnUFNCeVpYRjFhWEpsS0NjdUwxOW1iM0l0YjJZbktUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhwZEdWeUxDQkpWRVZTUVZSUFVpbDdYRzRnSUhaaGNpQnlaWE4xYkhRZ1BTQmJYVHRjYmlBZ1ptOXlUMllvYVhSbGNpd2dabUZzYzJVc0lISmxjM1ZzZEM1d2RYTm9MQ0J5WlhOMWJIUXNJRWxVUlZKQlZFOVNLVHRjYmlBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYm4wN1hHNGlMQ0l2THlBd0lDMCtJRUZ5Y21GNUkyWnZja1ZoWTJoY2JpOHZJREVnTFQ0Z1FYSnlZWGtqYldGd1hHNHZMeUF5SUMwK0lFRnljbUY1STJacGJIUmxjbHh1THk4Z015QXRQaUJCY25KaGVTTnpiMjFsWEc0dkx5QTBJQzArSUVGeWNtRjVJMlYyWlhKNVhHNHZMeUExSUMwK0lFRnljbUY1STJacGJtUmNiaTh2SURZZ0xUNGdRWEp5WVhralptbHVaRWx1WkdWNFhHNTJZWElnWTNSNElDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpkSGduS1Z4dUlDQXNJRWxQWW1wbFkzUWdJRDBnY21WeGRXbHlaU2duTGk5ZmFXOWlhbVZqZENjcFhHNGdJQ3dnZEc5UFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTF2WW1wbFkzUW5LVnh1SUNBc0lIUnZUR1Z1WjNSb0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGJHVnVaM1JvSnlsY2JpQWdMQ0JoYzJNZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRnljbUY1TFhOd1pXTnBaWE10WTNKbFlYUmxKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0ZSWlVFVXNJQ1JqY21WaGRHVXBlMXh1SUNCMllYSWdTVk5mVFVGUUlDQWdJQ0FnSUNBOUlGUlpVRVVnUFQwZ01WeHVJQ0FnSUN3Z1NWTmZSa2xNVkVWU0lDQWdJQ0E5SUZSWlVFVWdQVDBnTWx4dUlDQWdJQ3dnU1ZOZlUwOU5SU0FnSUNBZ0lDQTlJRlJaVUVVZ1BUMGdNMXh1SUNBZ0lDd2dTVk5mUlZaRlVsa2dJQ0FnSUNBOUlGUlpVRVVnUFQwZ05GeHVJQ0FnSUN3Z1NWTmZSa2xPUkY5SlRrUkZXQ0E5SUZSWlVFVWdQVDBnTmx4dUlDQWdJQ3dnVGs5ZlNFOU1SVk1nSUNBZ0lDQTlJRlJaVUVVZ1BUMGdOU0I4ZkNCSlUxOUdTVTVFWDBsT1JFVllYRzRnSUNBZ0xDQmpjbVZoZEdVZ0lDQWdJQ0FnSUQwZ0pHTnlaV0YwWlNCOGZDQmhjMk03WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2Ymlna2RHaHBjeXdnWTJGc2JHSmhZMnRtYml3Z2RHaGhkQ2w3WEc0Z0lDQWdkbUZ5SUU4Z0lDQWdJQ0E5SUhSdlQySnFaV04wS0NSMGFHbHpLVnh1SUNBZ0lDQWdMQ0J6Wld4bUlDQWdQU0JKVDJKcVpXTjBLRThwWEc0Z0lDQWdJQ0FzSUdZZ0lDQWdJQ0E5SUdOMGVDaGpZV3hzWW1GamEyWnVMQ0IwYUdGMExDQXpLVnh1SUNBZ0lDQWdMQ0JzWlc1bmRHZ2dQU0IwYjB4bGJtZDBhQ2h6Wld4bUxteGxibWQwYUNsY2JpQWdJQ0FnSUN3Z2FXNWtaWGdnSUQwZ01GeHVJQ0FnSUNBZ0xDQnlaWE4xYkhRZ1BTQkpVMTlOUVZBZ1B5QmpjbVZoZEdVb0pIUm9hWE1zSUd4bGJtZDBhQ2tnT2lCSlUxOUdTVXhVUlZJZ1B5QmpjbVZoZEdVb0pIUm9hWE1zSURBcElEb2dkVzVrWldacGJtVmtYRzRnSUNBZ0lDQXNJSFpoYkN3Z2NtVnpPMXh1SUNBZ0lHWnZjaWc3YkdWdVozUm9JRDRnYVc1a1pYZzdJR2x1WkdWNEt5c3BhV1lvVGs5ZlNFOU1SVk1nZkh3Z2FXNWtaWGdnYVc0Z2MyVnNaaWw3WEc0Z0lDQWdJQ0IyWVd3Z1BTQnpaV3htVzJsdVpHVjRYVHRjYmlBZ0lDQWdJSEpsY3lBOUlHWW9kbUZzTENCcGJtUmxlQ3dnVHlrN1hHNGdJQ0FnSUNCcFppaFVXVkJGS1h0Y2JpQWdJQ0FnSUNBZ2FXWW9TVk5mVFVGUUtYSmxjM1ZzZEZ0cGJtUmxlRjBnUFNCeVpYTTdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2JXRndYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2FXWW9jbVZ6S1hOM2FYUmphQ2hVV1ZCRktYdGNiaUFnSUNBZ0lDQWdJQ0JqWVhObElETTZJSEpsZEhWeWJpQjBjblZsT3lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjMjl0WlZ4dUlDQWdJQ0FnSUNBZ0lHTmhjMlVnTlRvZ2NtVjBkWEp1SUhaaGJEc2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCbWFXNWtYRzRnSUNBZ0lDQWdJQ0FnWTJGelpTQTJPaUJ5WlhSMWNtNGdhVzVrWlhnN0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR1pwYm1SSmJtUmxlRnh1SUNBZ0lDQWdJQ0FnSUdOaGMyVWdNam9nY21WemRXeDBMbkIxYzJnb2RtRnNLVHNnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJtYVd4MFpYSmNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1LRWxUWDBWV1JWSlpLWEpsZEhWeWJpQm1ZV3h6WlRzZ0lDQWdJQ0FnSUNBZ0x5OGdaWFpsY25sY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlFbFRYMFpKVGtSZlNVNUVSVmdnUHlBdE1TQTZJRWxUWDFOUFRVVWdmSHdnU1ZOZlJWWkZVbGtnUHlCSlUxOUZWa1ZTV1NBNklISmxjM1ZzZER0Y2JpQWdmVHRjYm4wN0lpd2lkbUZ5SUdGR2RXNWpkR2x2YmlBOUlISmxjWFZwY21Vb0p5NHZYMkV0Wm5WdVkzUnBiMjRuS1Z4dUlDQXNJSFJ2VDJKcVpXTjBJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMVzlpYW1WamRDY3BYRzRnSUN3Z1NVOWlhbVZqZENBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVc5aWFtVmpkQ2NwWEc0Z0lDd2dkRzlNWlc1bmRHZ2dJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRiR1Z1WjNSb0p5azdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvZEdoaGRDd2dZMkZzYkdKaFkydG1iaXdnWVV4bGJpd2diV1Z0Ynl3Z2FYTlNhV2RvZENsN1hHNGdJR0ZHZFc1amRHbHZiaWhqWVd4c1ltRmphMlp1S1R0Y2JpQWdkbUZ5SUU4Z0lDQWdJQ0E5SUhSdlQySnFaV04wS0hSb1lYUXBYRzRnSUNBZ0xDQnpaV3htSUNBZ1BTQkpUMkpxWldOMEtFOHBYRzRnSUNBZ0xDQnNaVzVuZEdnZ1BTQjBiMHhsYm1kMGFDaFBMbXhsYm1kMGFDbGNiaUFnSUNBc0lHbHVaR1Y0SUNBOUlHbHpVbWxuYUhRZ1B5QnNaVzVuZEdnZ0xTQXhJRG9nTUZ4dUlDQWdJQ3dnYVNBZ0lDQWdJRDBnYVhOU2FXZG9kQ0EvSUMweElEb2dNVHRjYmlBZ2FXWW9ZVXhsYmlBOElESXBabTl5S0RzN0tYdGNiaUFnSUNCcFppaHBibVJsZUNCcGJpQnpaV3htS1h0Y2JpQWdJQ0FnSUcxbGJXOGdQU0J6Wld4bVcybHVaR1Y0WFR0Y2JpQWdJQ0FnSUdsdVpHVjRJQ3M5SUdrN1hHNGdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQjlYRzRnSUNBZ2FXNWtaWGdnS3owZ2FUdGNiaUFnSUNCcFppaHBjMUpwWjJoMElEOGdhVzVrWlhnZ1BDQXdJRG9nYkdWdVozUm9JRHc5SUdsdVpHVjRLWHRjYmlBZ0lDQWdJSFJvY205M0lGUjVjR1ZGY25KdmNpZ25VbVZrZFdObElHOW1JR1Z0Y0hSNUlHRnljbUY1SUhkcGRHZ2dibThnYVc1cGRHbGhiQ0IyWVd4MVpTY3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQm1iM0lvTzJselVtbG5hSFFnUHlCcGJtUmxlQ0ErUFNBd0lEb2diR1Z1WjNSb0lENGdhVzVrWlhnN0lHbHVaR1Y0SUNzOUlHa3BhV1lvYVc1a1pYZ2dhVzRnYzJWc1ppbDdYRzRnSUNBZ2JXVnRieUE5SUdOaGJHeGlZV05yWm00b2JXVnRieXdnYzJWc1psdHBibVJsZUYwc0lHbHVaR1Y0TENCUEtUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z2JXVnRienRjYm4wN0lpd2lkbUZ5SUdselQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWE10YjJKcVpXTjBKeWxjYmlBZ0xDQnBjMEZ5Y21GNUlDQTlJSEpsY1hWcGNtVW9KeTR2WDJsekxXRnljbUY1SnlsY2JpQWdMQ0JUVUVWRFNVVlRJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzZHJjeWNwS0NkemNHVmphV1Z6SnlrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9iM0pwWjJsdVlXd3BlMXh1SUNCMllYSWdRenRjYmlBZ2FXWW9hWE5CY25KaGVTaHZjbWxuYVc1aGJDa3BlMXh1SUNBZ0lFTWdQU0J2Y21sbmFXNWhiQzVqYjI1emRISjFZM1J2Y2p0Y2JpQWdJQ0F2THlCamNtOXpjeTF5WldGc2JTQm1ZV3hzWW1GamExeHVJQ0FnSUdsbUtIUjVjR1Z2WmlCRElEMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ0tFTWdQVDA5SUVGeWNtRjVJSHg4SUdselFYSnlZWGtvUXk1d2NtOTBiM1I1Y0dVcEtTbERJRDBnZFc1a1pXWnBibVZrTzF4dUlDQWdJR2xtS0dselQySnFaV04wS0VNcEtYdGNiaUFnSUNBZ0lFTWdQU0JEVzFOUVJVTkpSVk5kTzF4dUlDQWdJQ0FnYVdZb1F5QTlQVDBnYm5Wc2JDbERJRDBnZFc1a1pXWnBibVZrTzF4dUlDQWdJSDFjYmlBZ2ZTQnlaWFIxY200Z1F5QTlQVDBnZFc1a1pXWnBibVZrSUQ4Z1FYSnlZWGtnT2lCRE8xeHVmVHNpTENJdkx5QTVMalF1TWk0eklFRnljbUY1VTNCbFkybGxjME55WldGMFpTaHZjbWxuYVc1aGJFRnljbUY1TENCc1pXNW5kR2dwWEc1MllYSWdjM0JsWTJsbGMwTnZibk4wY25WamRHOXlJRDBnY21WeGRXbHlaU2duTGk5ZllYSnlZWGt0YzNCbFkybGxjeTFqYjI1emRISjFZM1J2Y2ljcE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLRzl5YVdkcGJtRnNMQ0JzWlc1bmRHZ3BlMXh1SUNCeVpYUjFjbTRnYm1WM0lDaHpjR1ZqYVdWelEyOXVjM1J5ZFdOMGIzSW9iM0pwWjJsdVlXd3BLU2hzWlc1bmRHZ3BPMXh1ZlRzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdZVVoxYm1OMGFXOXVJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRXRablZ1WTNScGIyNG5LVnh1SUNBc0lHbHpUMkpxWldOMElDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGN5MXZZbXBsWTNRbktWeHVJQ0FzSUdsdWRtOXJaU0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlwYm5admEyVW5LVnh1SUNBc0lHRnljbUY1VTJ4cFkyVWdQU0JiWFM1emJHbGpaVnh1SUNBc0lHWmhZM1J2Y21sbGN5QWdQU0I3ZlR0Y2JseHVkbUZ5SUdOdmJuTjBjblZqZENBOUlHWjFibU4wYVc5dUtFWXNJR3hsYml3Z1lYSm5jeWw3WEc0Z0lHbG1LQ0VvYkdWdUlHbHVJR1poWTNSdmNtbGxjeWtwZTF4dUlDQWdJR1p2Y2loMllYSWdiaUE5SUZ0ZExDQnBJRDBnTURzZ2FTQThJR3hsYmpzZ2FTc3JLVzViYVYwZ1BTQW5ZVnNuSUNzZ2FTQXJJQ2RkSnp0Y2JpQWdJQ0JtWVdOMGIzSnBaWE5iYkdWdVhTQTlJRVoxYm1OMGFXOXVLQ2RHTEdFbkxDQW5jbVYwZFhKdUlHNWxkeUJHS0NjZ0t5QnVMbXB2YVc0b0p5d25LU0FySUNjcEp5azdYRzRnSUgwZ2NtVjBkWEp1SUdaaFkzUnZjbWxsYzF0c1pXNWRLRVlzSUdGeVozTXBPMXh1ZlR0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQkdkVzVqZEdsdmJpNWlhVzVrSUh4OElHWjFibU4wYVc5dUlHSnBibVFvZEdoaGRDQXZLaXdnWVhKbmN5NHVMaUFxTHlsN1hHNGdJSFpoY2lCbWJpQWdJQ0FnSUNBOUlHRkdkVzVqZEdsdmJpaDBhR2x6S1Z4dUlDQWdJQ3dnY0dGeWRFRnlaM01nUFNCaGNuSmhlVk5zYVdObExtTmhiR3dvWVhKbmRXMWxiblJ6TENBeEtUdGNiaUFnZG1GeUlHSnZkVzVrSUQwZ1puVnVZM1JwYjI0b0x5b2dZWEpuY3k0dUxpQXFMeWw3WEc0Z0lDQWdkbUZ5SUdGeVozTWdQU0J3WVhKMFFYSm5jeTVqYjI1allYUW9ZWEp5WVhsVGJHbGpaUzVqWVd4c0tHRnlaM1Z0Wlc1MGN5a3BPMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpJR2x1YzNSaGJtTmxiMllnWW05MWJtUWdQeUJqYjI1emRISjFZM1FvWm00c0lHRnlaM011YkdWdVozUm9MQ0JoY21kektTQTZJR2x1ZG05clpTaG1iaXdnWVhKbmN5d2dkR2hoZENrN1hHNGdJSDA3WEc0Z0lHbG1LR2x6VDJKcVpXTjBLR1p1TG5CeWIzUnZkSGx3WlNrcFltOTFibVF1Y0hKdmRHOTBlWEJsSUQwZ1ptNHVjSEp2ZEc5MGVYQmxPMXh1SUNCeVpYUjFjbTRnWW05MWJtUTdYRzU5T3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYm5aaGNpQmtVQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxa2NDY3BMbVpjYmlBZ0xDQmpjbVZoZEdVZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxamNtVmhkR1VuS1Z4dUlDQXNJSEpsWkdWbWFXNWxRV3hzSUQwZ2NtVnhkV2x5WlNnbkxpOWZjbVZrWldacGJtVXRZV3hzSnlsY2JpQWdMQ0JqZEhnZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMk4wZUNjcFhHNGdJQ3dnWVc1SmJuTjBZVzVqWlNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxcGJuTjBZVzVqWlNjcFhHNGdJQ3dnWkdWbWFXNWxaQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlrWldacGJtVmtKeWxjYmlBZ0xDQm1iM0pQWmlBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyWnZjaTF2WmljcFhHNGdJQ3dnSkdsMFpYSkVaV1pwYm1VZ1BTQnlaWEYxYVhKbEtDY3VMMTlwZEdWeUxXUmxabWx1WlNjcFhHNGdJQ3dnYzNSbGNDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlwZEdWeUxYTjBaWEFuS1Z4dUlDQXNJSE5sZEZOd1pXTnBaWE1nSUQwZ2NtVnhkV2x5WlNnbkxpOWZjMlYwTFhOd1pXTnBaWE1uS1Z4dUlDQXNJRVJGVTBOU1NWQlVUMUpUSUQwZ2NtVnhkV2x5WlNnbkxpOWZaR1Z6WTNKcGNIUnZjbk1uS1Z4dUlDQXNJR1poYzNSTFpYa2dJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiV1YwWVNjcExtWmhjM1JMWlhsY2JpQWdMQ0JUU1ZwRklDQWdJQ0FnSUNBOUlFUkZVME5TU1ZCVVQxSlRJRDhnSjE5ekp5QTZJQ2R6YVhwbEp6dGNibHh1ZG1GeUlHZGxkRVZ1ZEhKNUlEMGdablZ1WTNScGIyNG9kR2hoZEN3Z2EyVjVLWHRjYmlBZ0x5OGdabUZ6ZENCallYTmxYRzRnSUhaaGNpQnBibVJsZUNBOUlHWmhjM1JMWlhrb2EyVjVLU3dnWlc1MGNuazdYRzRnSUdsbUtHbHVaR1Y0SUNFOVBTQW5SaWNwY21WMGRYSnVJSFJvWVhRdVgybGJhVzVrWlhoZE8xeHVJQ0F2THlCbWNtOTZaVzRnYjJKcVpXTjBJR05oYzJWY2JpQWdabTl5S0dWdWRISjVJRDBnZEdoaGRDNWZaanNnWlc1MGNuazdJR1Z1ZEhKNUlEMGdaVzUwY25rdWJpbDdYRzRnSUNBZ2FXWW9aVzUwY25rdWF5QTlQU0JyWlhrcGNtVjBkWEp1SUdWdWRISjVPMXh1SUNCOVhHNTlPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUh0Y2JpQWdaMlYwUTI5dWMzUnlkV04wYjNJNklHWjFibU4wYVc5dUtIZHlZWEJ3WlhJc0lFNUJUVVVzSUVsVFgwMUJVQ3dnUVVSRVJWSXBlMXh1SUNBZ0lIWmhjaUJESUQwZ2QzSmhjSEJsY2lobWRXNWpkR2x2YmloMGFHRjBMQ0JwZEdWeVlXSnNaU2w3WEc0Z0lDQWdJQ0JoYmtsdWMzUmhibU5sS0hSb1lYUXNJRU1zSUU1QlRVVXNJQ2RmYVNjcE8xeHVJQ0FnSUNBZ2RHaGhkQzVmYVNBOUlHTnlaV0YwWlNodWRXeHNLVHNnTHk4Z2FXNWtaWGhjYmlBZ0lDQWdJSFJvWVhRdVgyWWdQU0IxYm1SbFptbHVaV1E3SUNBZ0lDOHZJR1pwY25OMElHVnVkSEo1WEc0Z0lDQWdJQ0IwYUdGMExsOXNJRDBnZFc1a1pXWnBibVZrT3lBZ0lDQXZMeUJzWVhOMElHVnVkSEo1WEc0Z0lDQWdJQ0IwYUdGMFcxTkpXa1ZkSUQwZ01Ec2dJQ0FnSUNBZ0lDQXZMeUJ6YVhwbFhHNGdJQ0FnSUNCcFppaHBkR1Z5WVdKc1pTQWhQU0IxYm1SbFptbHVaV1FwWm05eVQyWW9hWFJsY21GaWJHVXNJRWxUWDAxQlVDd2dkR2hoZEZ0QlJFUkZVbDBzSUhSb1lYUXBPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lISmxaR1ZtYVc1bFFXeHNLRU11Y0hKdmRHOTBlWEJsTENCN1hHNGdJQ0FnSUNBdkx5QXlNeTR4TGpNdU1TQk5ZWEF1Y0hKdmRHOTBlWEJsTG1Oc1pXRnlLQ2xjYmlBZ0lDQWdJQzh2SURJekxqSXVNeTR5SUZObGRDNXdjbTkwYjNSNWNHVXVZMnhsWVhJb0tWeHVJQ0FnSUNBZ1kyeGxZWEk2SUdaMWJtTjBhVzl1SUdOc1pXRnlLQ2w3WEc0Z0lDQWdJQ0FnSUdadmNpaDJZWElnZEdoaGRDQTlJSFJvYVhNc0lHUmhkR0VnUFNCMGFHRjBMbDlwTENCbGJuUnllU0E5SUhSb1lYUXVYMlk3SUdWdWRISjVPeUJsYm5SeWVTQTlJR1Z1ZEhKNUxtNHBlMXh1SUNBZ0lDQWdJQ0FnSUdWdWRISjVMbklnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUdsbUtHVnVkSEo1TG5BcFpXNTBjbmt1Y0NBOUlHVnVkSEo1TG5BdWJpQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnSUNCa1pXeGxkR1VnWkdGMFlWdGxiblJ5ZVM1cFhUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYUdGMExsOW1JRDBnZEdoaGRDNWZiQ0E5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ2RHaGhkRnRUU1ZwRlhTQTlJREE3WEc0Z0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnTHk4Z01qTXVNUzR6TGpNZ1RXRndMbkJ5YjNSdmRIbHdaUzVrWld4bGRHVW9hMlY1S1Z4dUlDQWdJQ0FnTHk4Z01qTXVNaTR6TGpRZ1UyVjBMbkJ5YjNSdmRIbHdaUzVrWld4bGRHVW9kbUZzZFdVcFhHNGdJQ0FnSUNBblpHVnNaWFJsSnpvZ1puVnVZM1JwYjI0b2EyVjVLWHRjYmlBZ0lDQWdJQ0FnZG1GeUlIUm9ZWFFnSUQwZ2RHaHBjMXh1SUNBZ0lDQWdJQ0FnSUN3Z1pXNTBjbmtnUFNCblpYUkZiblJ5ZVNoMGFHRjBMQ0JyWlhrcE8xeHVJQ0FnSUNBZ0lDQnBaaWhsYm5SeWVTbDdYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlHNWxlSFFnUFNCbGJuUnllUzV1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXNJSEJ5WlhZZ1BTQmxiblJ5ZVM1d08xeHVJQ0FnSUNBZ0lDQWdJR1JsYkdWMFpTQjBhR0YwTGw5cFcyVnVkSEo1TG1sZE8xeHVJQ0FnSUNBZ0lDQWdJR1Z1ZEhKNUxuSWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJR2xtS0hCeVpYWXBjSEpsZGk1dUlEMGdibVY0ZER0Y2JpQWdJQ0FnSUNBZ0lDQnBaaWh1WlhoMEtXNWxlSFF1Y0NBOUlIQnlaWFk3WEc0Z0lDQWdJQ0FnSUNBZ2FXWW9kR2hoZEM1ZlppQTlQU0JsYm5SeWVTbDBhR0YwTGw5bUlEMGdibVY0ZER0Y2JpQWdJQ0FnSUNBZ0lDQnBaaWgwYUdGMExsOXNJRDA5SUdWdWRISjVLWFJvWVhRdVgyd2dQU0J3Y21WMk8xeHVJQ0FnSUNBZ0lDQWdJSFJvWVhSYlUwbGFSVjB0TFR0Y2JpQWdJQ0FnSUNBZ2ZTQnlaWFIxY200Z0lTRmxiblJ5ZVR0Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBdkx5QXlNeTR5TGpNdU5pQlRaWFF1Y0hKdmRHOTBlWEJsTG1admNrVmhZMmdvWTJGc2JHSmhZMnRtYml3Z2RHaHBjMEZ5WnlBOUlIVnVaR1ZtYVc1bFpDbGNiaUFnSUNBZ0lDOHZJREl6TGpFdU15NDFJRTFoY0M1d2NtOTBiM1I1Y0dVdVptOXlSV0ZqYUNoallXeHNZbUZqYTJadUxDQjBhR2x6UVhKbklEMGdkVzVrWldacGJtVmtLVnh1SUNBZ0lDQWdabTl5UldGamFEb2dablZ1WTNScGIyNGdabTl5UldGamFDaGpZV3hzWW1GamEyWnVJQzhxTENCMGFHRjBJRDBnZFc1a1pXWnBibVZrSUNvdktYdGNiaUFnSUNBZ0lDQWdZVzVKYm5OMFlXNWpaU2gwYUdsekxDQkRMQ0FuWm05eVJXRmphQ2NwTzF4dUlDQWdJQ0FnSUNCMllYSWdaaUE5SUdOMGVDaGpZV3hzWW1GamEyWnVMQ0JoY21kMWJXVnVkSE11YkdWdVozUm9JRDRnTVNBL0lHRnlaM1Z0Wlc1MGMxc3hYU0E2SUhWdVpHVm1hVzVsWkN3Z015bGNiaUFnSUNBZ0lDQWdJQ0FzSUdWdWRISjVPMXh1SUNBZ0lDQWdJQ0IzYUdsc1pTaGxiblJ5ZVNBOUlHVnVkSEo1SUQ4Z1pXNTBjbmt1YmlBNklIUm9hWE11WDJZcGUxeHVJQ0FnSUNBZ0lDQWdJR1lvWlc1MGNua3VkaXdnWlc1MGNua3VheXdnZEdocGN5azdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2NtVjJaWEowSUhSdklIUm9aU0JzWVhOMElHVjRhWE4wYVc1bklHVnVkSEo1WEc0Z0lDQWdJQ0FnSUNBZ2QyaHBiR1VvWlc1MGNua2dKaVlnWlc1MGNua3VjaWxsYm5SeWVTQTlJR1Z1ZEhKNUxuQTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0F2THlBeU15NHhMak11TnlCTllYQXVjSEp2ZEc5MGVYQmxMbWhoY3loclpYa3BYRzRnSUNBZ0lDQXZMeUF5TXk0eUxqTXVOeUJUWlhRdWNISnZkRzkwZVhCbExtaGhjeWgyWVd4MVpTbGNiaUFnSUNBZ0lHaGhjem9nWm5WdVkzUnBiMjRnYUdGektHdGxlU2w3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFoSVdkbGRFVnVkSEo1S0hSb2FYTXNJR3RsZVNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJQ0FnYVdZb1JFVlRRMUpKVUZSUFVsTXBaRkFvUXk1d2NtOTBiM1I1Y0dVc0lDZHphWHBsSnl3Z2UxeHVJQ0FnSUNBZ1oyVjBPaUJtZFc1amRHbHZiaWdwZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWkdWbWFXNWxaQ2gwYUdselcxTkpXa1ZkS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JpQWdJQ0J5WlhSMWNtNGdRenRjYmlBZ2ZTeGNiaUFnWkdWbU9pQm1kVzVqZEdsdmJpaDBhR0YwTENCclpYa3NJSFpoYkhWbEtYdGNiaUFnSUNCMllYSWdaVzUwY25rZ1BTQm5aWFJGYm5SeWVTaDBhR0YwTENCclpYa3BYRzRnSUNBZ0lDQXNJSEJ5WlhZc0lHbHVaR1Y0TzF4dUlDQWdJQzh2SUdOb1lXNW5aU0JsZUdsemRHbHVaeUJsYm5SeWVWeHVJQ0FnSUdsbUtHVnVkSEo1S1h0Y2JpQWdJQ0FnSUdWdWRISjVMbllnUFNCMllXeDFaVHRjYmlBZ0lDQXZMeUJqY21WaGRHVWdibVYzSUdWdWRISjVYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhSb1lYUXVYMndnUFNCbGJuUnllU0E5SUh0Y2JpQWdJQ0FnSUNBZ2FUb2dhVzVrWlhnZ1BTQm1ZWE4wUzJWNUtHdGxlU3dnZEhKMVpTa3NJQzh2SUR3dElHbHVaR1Y0WEc0Z0lDQWdJQ0FnSUdzNklHdGxlU3dnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUE4TFNCclpYbGNiaUFnSUNBZ0lDQWdkam9nZG1Gc2RXVXNJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklEd3RJSFpoYkhWbFhHNGdJQ0FnSUNBZ0lIQTZJSEJ5WlhZZ1BTQjBhR0YwTGw5c0xDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlBOExTQndjbVYyYVc5MWN5QmxiblJ5ZVZ4dUlDQWdJQ0FnSUNCdU9pQjFibVJsWm1sdVpXUXNJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnUEMwZ2JtVjRkQ0JsYm5SeWVWeHVJQ0FnSUNBZ0lDQnlPaUJtWVd4elpTQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1BDMGdjbVZ0YjNabFpGeHVJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lHbG1LQ0YwYUdGMExsOW1LWFJvWVhRdVgyWWdQU0JsYm5SeWVUdGNiaUFnSUNBZ0lHbG1LSEJ5WlhZcGNISmxkaTV1SUQwZ1pXNTBjbms3WEc0Z0lDQWdJQ0IwYUdGMFcxTkpXa1ZkS3lzN1hHNGdJQ0FnSUNBdkx5QmhaR1FnZEc4Z2FXNWtaWGhjYmlBZ0lDQWdJR2xtS0dsdVpHVjRJQ0U5UFNBblJpY3BkR2hoZEM1ZmFWdHBibVJsZUYwZ1BTQmxiblJ5ZVR0Y2JpQWdJQ0I5SUhKbGRIVnliaUIwYUdGME8xeHVJQ0I5TEZ4dUlDQm5aWFJGYm5SeWVUb2daMlYwUlc1MGNua3NYRzRnSUhObGRGTjBjbTl1WnpvZ1puVnVZM1JwYjI0b1F5d2dUa0ZOUlN3Z1NWTmZUVUZRS1h0Y2JpQWdJQ0F2THlCaFpHUWdMbXRsZVhNc0lDNTJZV3gxWlhNc0lDNWxiblJ5YVdWekxDQmJRRUJwZEdWeVlYUnZjbDFjYmlBZ0lDQXZMeUF5TXk0eExqTXVOQ3dnTWpNdU1TNHpMamdzSURJekxqRXVNeTR4TVN3Z01qTXVNUzR6TGpFeUxDQXlNeTR5TGpNdU5Td2dNak11TWk0ekxqZ3NJREl6TGpJdU15NHhNQ3dnTWpNdU1pNHpMakV4WEc0Z0lDQWdKR2wwWlhKRVpXWnBibVVvUXl3Z1RrRk5SU3dnWm5WdVkzUnBiMjRvYVhSbGNtRjBaV1FzSUd0cGJtUXBlMXh1SUNBZ0lDQWdkR2hwY3k1ZmRDQTlJR2wwWlhKaGRHVmtPeUFnTHk4Z2RHRnlaMlYwWEc0Z0lDQWdJQ0IwYUdsekxsOXJJRDBnYTJsdVpEc2dJQ0FnSUNBdkx5QnJhVzVrWEc0Z0lDQWdJQ0IwYUdsekxsOXNJRDBnZFc1a1pXWnBibVZrT3lBdkx5QndjbVYyYVc5MWMxeHVJQ0FnSUgwc0lHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ0lDQjJZWElnZEdoaGRDQWdQU0IwYUdselhHNGdJQ0FnSUNBZ0lDd2dhMmx1WkNBZ1BTQjBhR0YwTGw5clhHNGdJQ0FnSUNBZ0lDd2daVzUwY25rZ1BTQjBhR0YwTGw5c08xeHVJQ0FnSUNBZ0x5OGdjbVYyWlhKMElIUnZJSFJvWlNCc1lYTjBJR1Y0YVhOMGFXNW5JR1Z1ZEhKNVhHNGdJQ0FnSUNCM2FHbHNaU2hsYm5SeWVTQW1KaUJsYm5SeWVTNXlLV1Z1ZEhKNUlEMGdaVzUwY25rdWNEdGNiaUFnSUNBZ0lDOHZJR2RsZENCdVpYaDBJR1Z1ZEhKNVhHNGdJQ0FnSUNCcFppZ2hkR2hoZEM1ZmRDQjhmQ0FoS0hSb1lYUXVYMndnUFNCbGJuUnllU0E5SUdWdWRISjVJRDhnWlc1MGNua3ViaUE2SUhSb1lYUXVYM1F1WDJZcEtYdGNiaUFnSUNBZ0lDQWdMeThnYjNJZ1ptbHVhWE5vSUhSb1pTQnBkR1Z5WVhScGIyNWNiaUFnSUNBZ0lDQWdkR2hoZEM1ZmRDQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE4wWlhBb01TazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQXZMeUJ5WlhSMWNtNGdjM1JsY0NCaWVTQnJhVzVrWEc0Z0lDQWdJQ0JwWmlocmFXNWtJRDA5SUNkclpYbHpKeUFnS1hKbGRIVnliaUJ6ZEdWd0tEQXNJR1Z1ZEhKNUxtc3BPMXh1SUNBZ0lDQWdhV1lvYTJsdVpDQTlQU0FuZG1Gc2RXVnpKeWx5WlhSMWNtNGdjM1JsY0Nnd0xDQmxiblJ5ZVM1MktUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCemRHVndLREFzSUZ0bGJuUnllUzVyTENCbGJuUnllUzUyWFNrN1hHNGdJQ0FnZlN3Z1NWTmZUVUZRSUQ4Z0oyVnVkSEpwWlhNbklEb2dKM1poYkhWbGN5Y2dMQ0FoU1ZOZlRVRlFMQ0IwY25WbEtUdGNibHh1SUNBZ0lDOHZJR0ZrWkNCYlFFQnpjR1ZqYVdWelhTd2dNak11TVM0eUxqSXNJREl6TGpJdU1pNHlYRzRnSUNBZ2MyVjBVM0JsWTJsbGN5aE9RVTFGS1R0Y2JpQWdmVnh1ZlRzaUxDSXZMeUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2UkdGMmFXUkNjblZoYm5RdlRXRndMVk5sZEM1d2NtOTBiM1I1Y0dVdWRHOUtVMDlPWEc1MllYSWdZMnhoYzNOdlppQTlJSEpsY1hWcGNtVW9KeTR2WDJOc1lYTnpiMlluS1Z4dUlDQXNJR1p5YjIwZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGNuSmhlUzFtY205dExXbDBaWEpoWW14bEp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLRTVCVFVVcGUxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdkRzlLVTA5T0tDbDdYRzRnSUNBZ2FXWW9ZMnhoYzNOdlppaDBhR2x6S1NBaFBTQk9RVTFGS1hSb2NtOTNJRlI1Y0dWRmNuSnZjaWhPUVUxRklDc2dYQ0lqZEc5S1UwOU9JR2x6YmlkMElHZGxibVZ5YVdOY0lpazdYRzRnSUNBZ2NtVjBkWEp1SUdaeWIyMG9kR2hwY3lrN1hHNGdJSDA3WEc1OU95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JuWmhjaUJ5WldSbFptbHVaVUZzYkNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzSmxaR1ZtYVc1bExXRnNiQ2NwWEc0Z0lDd2daMlYwVjJWaGF5QWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dFpYUmhKeWt1WjJWMFYyVmhhMXh1SUNBc0lHRnVUMkpxWldOMElDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVc0dGIySnFaV04wSnlsY2JpQWdMQ0JwYzA5aWFtVmpkQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgybHpMVzlpYW1WamRDY3BYRzRnSUN3Z1lXNUpibk4wWVc1alpTQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxcGJuTjBZVzVqWlNjcFhHNGdJQ3dnWm05eVQyWWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW1iM0l0YjJZbktWeHVJQ0FzSUdOeVpXRjBaVUZ5Y21GNVRXVjBhRzlrSUQwZ2NtVnhkV2x5WlNnbkxpOWZZWEp5WVhrdGJXVjBhRzlrY3ljcFhHNGdJQ3dnSkdoaGN5QWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9ZWE1uS1Z4dUlDQXNJR0Z5Y21GNVJtbHVaQ0FnSUNBZ0lDQWdJRDBnWTNKbFlYUmxRWEp5WVhsTlpYUm9iMlFvTlNsY2JpQWdMQ0JoY25KaGVVWnBibVJKYm1SbGVDQWdJQ0E5SUdOeVpXRjBaVUZ5Y21GNVRXVjBhRzlrS0RZcFhHNGdJQ3dnYVdRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNBd08xeHVYRzR2THlCbVlXeHNZbUZqYXlCbWIzSWdkVzVqWVhWbmFIUWdabkp2ZW1WdUlHdGxlWE5jYm5aaGNpQjFibU5oZFdkb2RFWnliM3BsYmxOMGIzSmxJRDBnWm5WdVkzUnBiMjRvZEdoaGRDbDdYRzRnSUhKbGRIVnliaUIwYUdGMExsOXNJSHg4SUNoMGFHRjBMbDlzSUQwZ2JtVjNJRlZ1WTJGMVoyaDBSbkp2ZW1WdVUzUnZjbVVwTzF4dWZUdGNiblpoY2lCVmJtTmhkV2RvZEVaeWIzcGxibE4wYjNKbElEMGdablZ1WTNScGIyNG9LWHRjYmlBZ2RHaHBjeTVoSUQwZ1cxMDdYRzU5TzF4dWRtRnlJR1pwYm1SVmJtTmhkV2RvZEVaeWIzcGxiaUE5SUdaMWJtTjBhVzl1S0hOMGIzSmxMQ0JyWlhrcGUxeHVJQ0J5WlhSMWNtNGdZWEp5WVhsR2FXNWtLSE4wYjNKbExtRXNJR1oxYm1OMGFXOXVLR2wwS1h0Y2JpQWdJQ0J5WlhSMWNtNGdhWFJiTUYwZ1BUMDlJR3RsZVR0Y2JpQWdmU2s3WEc1OU8xeHVWVzVqWVhWbmFIUkdjbTk2Wlc1VGRHOXlaUzV3Y205MGIzUjVjR1VnUFNCN1hHNGdJR2RsZERvZ1puVnVZM1JwYjI0b2EyVjVLWHRjYmlBZ0lDQjJZWElnWlc1MGNua2dQU0JtYVc1a1ZXNWpZWFZuYUhSR2NtOTZaVzRvZEdocGN5d2dhMlY1S1R0Y2JpQWdJQ0JwWmlobGJuUnllU2x5WlhSMWNtNGdaVzUwY25sYk1WMDdYRzRnSUgwc1hHNGdJR2hoY3pvZ1puVnVZM1JwYjI0b2EyVjVLWHRjYmlBZ0lDQnlaWFIxY200Z0lTRm1hVzVrVlc1allYVm5hSFJHY205NlpXNG9kR2hwY3l3Z2EyVjVLVHRjYmlBZ2ZTeGNiaUFnYzJWME9pQm1kVzVqZEdsdmJpaHJaWGtzSUhaaGJIVmxLWHRjYmlBZ0lDQjJZWElnWlc1MGNua2dQU0JtYVc1a1ZXNWpZWFZuYUhSR2NtOTZaVzRvZEdocGN5d2dhMlY1S1R0Y2JpQWdJQ0JwWmlobGJuUnllU2xsYm5SeWVWc3hYU0E5SUhaaGJIVmxPMXh1SUNBZ0lHVnNjMlVnZEdocGN5NWhMbkIxYzJnb1cydGxlU3dnZG1Gc2RXVmRLVHRjYmlBZ2ZTeGNiaUFnSjJSbGJHVjBaU2M2SUdaMWJtTjBhVzl1S0d0bGVTbDdYRzRnSUNBZ2RtRnlJR2x1WkdWNElEMGdZWEp5WVhsR2FXNWtTVzVrWlhnb2RHaHBjeTVoTENCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUNBZ0lDQnlaWFIxY200Z2FYUmJNRjBnUFQwOUlHdGxlVHRjYmlBZ0lDQjlLVHRjYmlBZ0lDQnBaaWgrYVc1a1pYZ3BkR2hwY3k1aExuTndiR2xqWlNocGJtUmxlQ3dnTVNrN1hHNGdJQ0FnY21WMGRYSnVJQ0VoZm1sdVpHVjRPMXh1SUNCOVhHNTlPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUh0Y2JpQWdaMlYwUTI5dWMzUnlkV04wYjNJNklHWjFibU4wYVc5dUtIZHlZWEJ3WlhJc0lFNUJUVVVzSUVsVFgwMUJVQ3dnUVVSRVJWSXBlMXh1SUNBZ0lIWmhjaUJESUQwZ2QzSmhjSEJsY2lobWRXNWpkR2x2YmloMGFHRjBMQ0JwZEdWeVlXSnNaU2w3WEc0Z0lDQWdJQ0JoYmtsdWMzUmhibU5sS0hSb1lYUXNJRU1zSUU1QlRVVXNJQ2RmYVNjcE8xeHVJQ0FnSUNBZ2RHaGhkQzVmYVNBOUlHbGtLeXM3SUNBZ0lDQWdMeThnWTI5c2JHVmpkR2x2YmlCcFpGeHVJQ0FnSUNBZ2RHaGhkQzVmYkNBOUlIVnVaR1ZtYVc1bFpEc2dMeThnYkdWaGF5QnpkRzl5WlNCbWIzSWdkVzVqWVhWbmFIUWdabkp2ZW1WdUlHOWlhbVZqZEhOY2JpQWdJQ0FnSUdsbUtHbDBaWEpoWW14bElDRTlJSFZ1WkdWbWFXNWxaQ2xtYjNKUFppaHBkR1Z5WVdKc1pTd2dTVk5mVFVGUUxDQjBhR0YwVzBGRVJFVlNYU3dnZEdoaGRDazdYRzRnSUNBZ2ZTazdYRzRnSUNBZ2NtVmtaV1pwYm1WQmJHd29ReTV3Y205MGIzUjVjR1VzSUh0Y2JpQWdJQ0FnSUM4dklESXpMak11TXk0eUlGZGxZV3ROWVhBdWNISnZkRzkwZVhCbExtUmxiR1YwWlNoclpYa3BYRzRnSUNBZ0lDQXZMeUF5TXk0MExqTXVNeUJYWldGclUyVjBMbkJ5YjNSdmRIbHdaUzVrWld4bGRHVW9kbUZzZFdVcFhHNGdJQ0FnSUNBblpHVnNaWFJsSnpvZ1puVnVZM1JwYjI0b2EyVjVLWHRjYmlBZ0lDQWdJQ0FnYVdZb0lXbHpUMkpxWldOMEtHdGxlU2twY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjJZWElnWkdGMFlTQTlJR2RsZEZkbFlXc29hMlY1S1R0Y2JpQWdJQ0FnSUNBZ2FXWW9aR0YwWVNBOVBUMGdkSEoxWlNseVpYUjFjbTRnZFc1allYVm5hSFJHY205NlpXNVRkRzl5WlNoMGFHbHpLVnNuWkdWc1pYUmxKMTBvYTJWNUtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHUmhkR0VnSmlZZ0pHaGhjeWhrWVhSaExDQjBhR2x6TGw5cEtTQW1KaUJrWld4bGRHVWdaR0YwWVZ0MGFHbHpMbDlwWFR0Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBdkx5QXlNeTR6TGpNdU5DQlhaV0ZyVFdGd0xuQnliM1J2ZEhsd1pTNW9ZWE1vYTJWNUtWeHVJQ0FnSUNBZ0x5OGdNak11TkM0ekxqUWdWMlZoYTFObGRDNXdjbTkwYjNSNWNHVXVhR0Z6S0haaGJIVmxLVnh1SUNBZ0lDQWdhR0Z6T2lCbWRXNWpkR2x2YmlCb1lYTW9hMlY1S1h0Y2JpQWdJQ0FnSUNBZ2FXWW9JV2x6VDJKcVpXTjBLR3RsZVNrcGNtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0IyWVhJZ1pHRjBZU0E5SUdkbGRGZGxZV3NvYTJWNUtUdGNiaUFnSUNBZ0lDQWdhV1lvWkdGMFlTQTlQVDBnZEhKMVpTbHlaWFIxY200Z2RXNWpZWFZuYUhSR2NtOTZaVzVUZEc5eVpTaDBhR2x6S1M1b1lYTW9hMlY1S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdSaGRHRWdKaVlnSkdoaGN5aGtZWFJoTENCMGFHbHpMbDlwS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JpQWdJQ0J5WlhSMWNtNGdRenRjYmlBZ2ZTeGNiaUFnWkdWbU9pQm1kVzVqZEdsdmJpaDBhR0YwTENCclpYa3NJSFpoYkhWbEtYdGNiaUFnSUNCMllYSWdaR0YwWVNBOUlHZGxkRmRsWVdzb1lXNVBZbXBsWTNRb2EyVjVLU3dnZEhKMVpTazdYRzRnSUNBZ2FXWW9aR0YwWVNBOVBUMGdkSEoxWlNsMWJtTmhkV2RvZEVaeWIzcGxibE4wYjNKbEtIUm9ZWFFwTG5ObGRDaHJaWGtzSUhaaGJIVmxLVHRjYmlBZ0lDQmxiSE5sSUdSaGRHRmJkR2hoZEM1ZmFWMGdQU0IyWVd4MVpUdGNiaUFnSUNCeVpYUjFjbTRnZEdoaGREdGNiaUFnZlN4Y2JpQWdkV1p6ZEc5eVpUb2dkVzVqWVhWbmFIUkdjbTk2Wlc1VGRHOXlaVnh1ZlRzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdaMnh2WW1Gc0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bmJHOWlZV3duS1Z4dUlDQXNJQ1JsZUhCdmNuUWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0J5WldSbFptbHVaU0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzSmxaR1ZtYVc1bEp5bGNiaUFnTENCeVpXUmxabWx1WlVGc2JDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM0psWkdWbWFXNWxMV0ZzYkNjcFhHNGdJQ3dnYldWMFlTQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXRaWFJoSnlsY2JpQWdMQ0JtYjNKUFppQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyWnZjaTF2WmljcFhHNGdJQ3dnWVc1SmJuTjBZVzVqWlNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWhiaTFwYm5OMFlXNWpaU2NwWEc0Z0lDd2dhWE5QWW1wbFkzUWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGN5MXZZbXBsWTNRbktWeHVJQ0FzSUdaaGFXeHpJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZabUZwYkhNbktWeHVJQ0FzSUNScGRHVnlSR1YwWldOMElDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWFJsY2kxa1pYUmxZM1FuS1Z4dUlDQXNJSE5sZEZSdlUzUnlhVzVuVkdGbklDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmMyVjBMWFJ2TFhOMGNtbHVaeTEwWVdjbktWeHVJQ0FzSUdsdWFHVnlhWFJKWmxKbGNYVnBjbVZrSUQwZ2NtVnhkV2x5WlNnbkxpOWZhVzVvWlhKcGRDMXBaaTF5WlhGMWFYSmxaQ2NwTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtFNUJUVVVzSUhkeVlYQndaWElzSUcxbGRHaHZaSE1zSUdOdmJXMXZiaXdnU1ZOZlRVRlFMQ0JKVTE5WFJVRkxLWHRjYmlBZ2RtRnlJRUpoYzJVZ0lEMGdaMnh2WW1Gc1cwNUJUVVZkWEc0Z0lDQWdMQ0JESUNBZ0lDQTlJRUpoYzJWY2JpQWdJQ0FzSUVGRVJFVlNJRDBnU1ZOZlRVRlFJRDhnSjNObGRDY2dPaUFuWVdSa0oxeHVJQ0FnSUN3Z2NISnZkRzhnUFNCRElDWW1JRU11Y0hKdmRHOTBlWEJsWEc0Z0lDQWdMQ0JQSUNBZ0lDQTlJSHQ5TzF4dUlDQjJZWElnWm1sNFRXVjBhRzlrSUQwZ1puVnVZM1JwYjI0b1MwVlpLWHRjYmlBZ0lDQjJZWElnWm00Z1BTQndjbTkwYjF0TFJWbGRPMXh1SUNBZ0lISmxaR1ZtYVc1bEtIQnliM1J2TENCTFJWa3NYRzRnSUNBZ0lDQkxSVmtnUFQwZ0oyUmxiR1YwWlNjZ1B5Qm1kVzVqZEdsdmJpaGhLWHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRWxUWDFkRlFVc2dKaVlnSVdselQySnFaV04wS0dFcElEOGdabUZzYzJVZ09pQm1iaTVqWVd4c0tIUm9hWE1zSUdFZ1BUMDlJREFnUHlBd0lEb2dZU2s3WEc0Z0lDQWdJQ0I5SURvZ1MwVlpJRDA5SUNkb1lYTW5JRDhnWm5WdVkzUnBiMjRnYUdGektHRXBlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdTVk5mVjBWQlN5QW1KaUFoYVhOUFltcGxZM1FvWVNrZ1B5Qm1ZV3h6WlNBNklHWnVMbU5oYkd3b2RHaHBjeXdnWVNBOVBUMGdNQ0EvSURBZ09pQmhLVHRjYmlBZ0lDQWdJSDBnT2lCTFJWa2dQVDBnSjJkbGRDY2dQeUJtZFc1amRHbHZiaUJuWlhRb1lTbDdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQkpVMTlYUlVGTElDWW1JQ0ZwYzA5aWFtVmpkQ2hoS1NBL0lIVnVaR1ZtYVc1bFpDQTZJR1p1TG1OaGJHd29kR2hwY3l3Z1lTQTlQVDBnTUNBL0lEQWdPaUJoS1R0Y2JpQWdJQ0FnSUgwZ09pQkxSVmtnUFQwZ0oyRmtaQ2NnUHlCbWRXNWpkR2x2YmlCaFpHUW9ZU2w3SUdadUxtTmhiR3dvZEdocGN5d2dZU0E5UFQwZ01DQS9JREFnT2lCaEtUc2djbVYwZFhKdUlIUm9hWE03SUgxY2JpQWdJQ0FnSUNBZ09pQm1kVzVqZEdsdmJpQnpaWFFvWVN3Z1lpbDdJR1p1TG1OaGJHd29kR2hwY3l3Z1lTQTlQVDBnTUNBL0lEQWdPaUJoTENCaUtUc2djbVYwZFhKdUlIUm9hWE03SUgxY2JpQWdJQ0FwTzF4dUlDQjlPMXh1SUNCcFppaDBlWEJsYjJZZ1F5QWhQU0FuWm5WdVkzUnBiMjRuSUh4OElDRW9TVk5mVjBWQlN5QjhmQ0J3Y205MGJ5NW1iM0pGWVdOb0lDWW1JQ0ZtWVdsc2N5aG1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lHNWxkeUJES0NrdVpXNTBjbWxsY3lncExtNWxlSFFvS1R0Y2JpQWdmU2twS1h0Y2JpQWdJQ0F2THlCamNtVmhkR1VnWTI5c2JHVmpkR2x2YmlCamIyNXpkSEoxWTNSdmNseHVJQ0FnSUVNZ1BTQmpiMjF0YjI0dVoyVjBRMjl1YzNSeWRXTjBiM0lvZDNKaGNIQmxjaXdnVGtGTlJTd2dTVk5mVFVGUUxDQkJSRVJGVWlrN1hHNGdJQ0FnY21Wa1pXWnBibVZCYkd3b1F5NXdjbTkwYjNSNWNHVXNJRzFsZEdodlpITXBPMXh1SUNBZ0lHMWxkR0V1VGtWRlJDQTlJSFJ5ZFdVN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2RtRnlJR2x1YzNSaGJtTmxJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2JtVjNJRU5jYmlBZ0lDQWdJQzh2SUdWaGNteDVJR2x0Y0d4bGJXVnVkR0YwYVc5dWN5QnViM1FnYzNWd2NHOXlkSE1nWTJoaGFXNXBibWRjYmlBZ0lDQWdJQ3dnU0VGVFRsUmZRMGhCU1U1SlRrY2dJQ0FnSUNBZ1BTQnBibk4wWVc1alpWdEJSRVJGVWwwb1NWTmZWMFZCU3lBL0lIdDlJRG9nTFRBc0lERXBJQ0U5SUdsdWMzUmhibU5sWEc0Z0lDQWdJQ0F2THlCV09DQitJQ0JEYUhKdmJXbDFiU0EwTUMwZ2QyVmhheTFqYjJ4c1pXTjBhVzl1Y3lCMGFISnZkM01nYjI0Z2NISnBiV2wwYVhabGN5d2dZblYwSUhOb2IzVnNaQ0J5WlhSMWNtNGdabUZzYzJWY2JpQWdJQ0FnSUN3Z1ZFaFNUMWRUWDA5T1gxQlNTVTFKVkVsV1JWTWdQU0JtWVdsc2N5aG1kVzVqZEdsdmJpZ3BleUJwYm5OMFlXNWpaUzVvWVhNb01TazdJSDBwWEc0Z0lDQWdJQ0F2THlCdGIzTjBJR1ZoY214NUlHbHRjR3hsYldWdWRHRjBhVzl1Y3lCa2IyVnpiaWQwSUhOMWNIQnZjblJ6SUdsMFpYSmhZbXhsY3l3Z2JXOXpkQ0J0YjJSbGNtNGdMU0J1YjNRZ1kyeHZjMlVnYVhRZ1kyOXljbVZqZEd4NVhHNGdJQ0FnSUNBc0lFRkRRMFZRVkY5SlZFVlNRVUpNUlZNZ0lDQWdJRDBnSkdsMFpYSkVaWFJsWTNRb1puVnVZM1JwYjI0b2FYUmxjaWw3SUc1bGR5QkRLR2wwWlhJcE95QjlLU0F2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bElHNXZMVzVsZDF4dUlDQWdJQ0FnTHk4Z1ptOXlJR1ZoY214NUlHbHRjR3hsYldWdWRHRjBhVzl1Y3lBdE1DQmhibVFnS3pBZ2JtOTBJSFJvWlNCellXMWxYRzRnSUNBZ0lDQXNJRUpWUjBkWlgxcEZVazhnUFNBaFNWTmZWMFZCU3lBbUppQm1ZV2xzY3lobWRXNWpkR2x2YmlncGUxeHVJQ0FnSUNBZ0lDQXZMeUJXT0NCK0lFTm9jbTl0YVhWdElEUXlMU0JtWVdsc2N5QnZibXg1SUhkcGRHZ2dOU3NnWld4bGJXVnVkSE5jYmlBZ0lDQWdJQ0FnZG1GeUlDUnBibk4wWVc1alpTQTlJRzVsZHlCREtDbGNiaUFnSUNBZ0lDQWdJQ0FzSUdsdVpHVjRJQ0FnSUNBOUlEVTdYRzRnSUNBZ0lDQWdJSGRvYVd4bEtHbHVaR1Y0TFMwcEpHbHVjM1JoYm1ObFcwRkVSRVZTWFNocGJtUmxlQ3dnYVc1a1pYZ3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdJU1JwYm5OMFlXNWpaUzVvWVhNb0xUQXBPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdhV1lvSVVGRFEwVlFWRjlKVkVWU1FVSk1SVk1wZXlCY2JpQWdJQ0FnSUVNZ1BTQjNjbUZ3Y0dWeUtHWjFibU4wYVc5dUtIUmhjbWRsZEN3Z2FYUmxjbUZpYkdVcGUxeHVJQ0FnSUNBZ0lDQmhia2x1YzNSaGJtTmxLSFJoY21kbGRDd2dReXdnVGtGTlJTazdYRzRnSUNBZ0lDQWdJSFpoY2lCMGFHRjBJRDBnYVc1b1pYSnBkRWxtVW1WeGRXbHlaV1FvYm1WM0lFSmhjMlVzSUhSaGNtZGxkQ3dnUXlrN1hHNGdJQ0FnSUNBZ0lHbG1LR2wwWlhKaFlteGxJQ0U5SUhWdVpHVm1hVzVsWkNsbWIzSlBaaWhwZEdWeVlXSnNaU3dnU1ZOZlRVRlFMQ0IwYUdGMFcwRkVSRVZTWFN3Z2RHaGhkQ2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdGME8xeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQkRMbkJ5YjNSdmRIbHdaU0E5SUhCeWIzUnZPMXh1SUNBZ0lDQWdjSEp2ZEc4dVkyOXVjM1J5ZFdOMGIzSWdQU0JETzF4dUlDQWdJSDFjYmlBZ0lDQnBaaWhVU0ZKUFYxTmZUMDVmVUZKSlRVbFVTVlpGVXlCOGZDQkNWVWRIV1Y5YVJWSlBLWHRjYmlBZ0lDQWdJR1pwZUUxbGRHaHZaQ2duWkdWc1pYUmxKeWs3WEc0Z0lDQWdJQ0JtYVhoTlpYUm9iMlFvSjJoaGN5Y3BPMXh1SUNBZ0lDQWdTVk5mVFVGUUlDWW1JR1pwZUUxbGRHaHZaQ2duWjJWMEp5azdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUtFSlZSMGRaWDFwRlVrOGdmSHdnU0VGVFRsUmZRMGhCU1U1SlRrY3BabWw0VFdWMGFHOWtLRUZFUkVWU0tUdGNiaUFnSUNBdkx5QjNaV0ZySUdOdmJHeGxZM1JwYjI1eklITm9iM1ZzWkNCdWIzUWdZMjl1ZEdGcGJuTWdMbU5zWldGeUlHMWxkR2h2WkZ4dUlDQWdJR2xtS0VsVFgxZEZRVXNnSmlZZ2NISnZkRzh1WTJ4bFlYSXBaR1ZzWlhSbElIQnliM1J2TG1Oc1pXRnlPMXh1SUNCOVhHNWNiaUFnYzJWMFZHOVRkSEpwYm1kVVlXY29ReXdnVGtGTlJTazdYRzVjYmlBZ1QxdE9RVTFGWFNBOUlFTTdYRzRnSUNSbGVIQnZjblFvSkdWNGNHOXlkQzVISUNzZ0pHVjRjRzl5ZEM1WElDc2dKR1Y0Y0c5eWRDNUdJQ29nS0VNZ0lUMGdRbUZ6WlNrc0lFOHBPMXh1WEc0Z0lHbG1LQ0ZKVTE5WFJVRkxLV052YlcxdmJpNXpaWFJUZEhKdmJtY29ReXdnVGtGTlJTd2dTVk5mVFVGUUtUdGNibHh1SUNCeVpYUjFjbTRnUXp0Y2JuMDdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVkbUZ5SUNSa1pXWnBibVZRY205d1pYSjBlU0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxa2NDY3BYRzRnSUN3Z1kzSmxZWFJsUkdWell5QWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZjSEp2Y0dWeWRIa3RaR1Z6WXljcE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLRzlpYW1WamRDd2dhVzVrWlhnc0lIWmhiSFZsS1h0Y2JpQWdhV1lvYVc1a1pYZ2dhVzRnYjJKcVpXTjBLU1JrWldacGJtVlFjbTl3WlhKMGVTNW1LRzlpYW1WamRDd2dhVzVrWlhnc0lHTnlaV0YwWlVSbGMyTW9NQ3dnZG1Gc2RXVXBLVHRjYmlBZ1pXeHpaU0J2WW1wbFkzUmJhVzVrWlhoZElEMGdkbUZzZFdVN1hHNTlPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiblpoY2lCaGJrOWlhbVZqZENBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGdUxXOWlhbVZqZENjcFhHNGdJQ3dnZEc5UWNtbHRhWFJwZG1VZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxd2NtbHRhWFJwZG1VbktWeHVJQ0FzSUU1VlRVSkZVaUFnSUNBZ0lEMGdKMjUxYldKbGNpYzdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvYUdsdWRDbDdYRzRnSUdsbUtHaHBiblFnSVQwOUlDZHpkSEpwYm1jbklDWW1JR2hwYm5RZ0lUMDlJRTVWVFVKRlVpQW1KaUJvYVc1MElDRTlQU0FuWkdWbVlYVnNkQ2NwZEdoeWIzY2dWSGx3WlVWeWNtOXlLQ2RKYm1OdmNuSmxZM1FnYUdsdWRDY3BPMXh1SUNCeVpYUjFjbTRnZEc5UWNtbHRhWFJwZG1Vb1lXNVBZbXBsWTNRb2RHaHBjeWtzSUdocGJuUWdJVDBnVGxWTlFrVlNLVHRjYm4wN0lpd2lkbUZ5SUdkc2IySmhiQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmRzYjJKaGJDY3BYRzRnSUN3Z1kyOXlaU0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWTI5eVpTY3BYRzRnSUN3Z2FHbGtaU0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYUdsa1pTY3BYRzRnSUN3Z2NtVmtaV1pwYm1VZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmY21Wa1pXWnBibVVuS1Z4dUlDQXNJR04wZUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyTjBlQ2NwWEc0Z0lDd2dVRkpQVkU5VVdWQkZJRDBnSjNCeWIzUnZkSGx3WlNjN1hHNWNiblpoY2lBa1pYaHdiM0owSUQwZ1puVnVZM1JwYjI0b2RIbHdaU3dnYm1GdFpTd2djMjkxY21ObEtYdGNiaUFnZG1GeUlFbFRYMFpQVWtORlJDQTlJSFI1Y0dVZ0ppQWtaWGh3YjNKMExrWmNiaUFnSUNBc0lFbFRYMGRNVDBKQlRDQTlJSFI1Y0dVZ0ppQWtaWGh3YjNKMExrZGNiaUFnSUNBc0lFbFRYMU5VUVZSSlF5QTlJSFI1Y0dVZ0ppQWtaWGh3YjNKMExsTmNiaUFnSUNBc0lFbFRYMUJTVDFSUElDQTlJSFI1Y0dVZ0ppQWtaWGh3YjNKMExsQmNiaUFnSUNBc0lFbFRYMEpKVGtRZ0lDQTlJSFI1Y0dVZ0ppQWtaWGh3YjNKMExrSmNiaUFnSUNBc0lIUmhjbWRsZENBZ0lDQTlJRWxUWDBkTVQwSkJUQ0EvSUdkc2IySmhiQ0E2SUVsVFgxTlVRVlJKUXlBL0lHZHNiMkpoYkZ0dVlXMWxYU0I4ZkNBb1oyeHZZbUZzVzI1aGJXVmRJRDBnZTMwcElEb2dLR2RzYjJKaGJGdHVZVzFsWFNCOGZDQjdmU2xiVUZKUFZFOVVXVkJGWFZ4dUlDQWdJQ3dnWlhod2IzSjBjeUFnSUQwZ1NWTmZSMHhQUWtGTUlEOGdZMjl5WlNBNklHTnZjbVZiYm1GdFpWMGdmSHdnS0dOdmNtVmJibUZ0WlYwZ1BTQjdmU2xjYmlBZ0lDQXNJR1Y0Y0ZCeWIzUnZJQ0E5SUdWNGNHOXlkSE5iVUZKUFZFOVVXVkJGWFNCOGZDQW9aWGh3YjNKMGMxdFFVazlVVDFSWlVFVmRJRDBnZTMwcFhHNGdJQ0FnTENCclpYa3NJRzkzYml3Z2IzVjBMQ0JsZUhBN1hHNGdJR2xtS0VsVFgwZE1UMEpCVENsemIzVnlZMlVnUFNCdVlXMWxPMXh1SUNCbWIzSW9hMlY1SUdsdUlITnZkWEpqWlNsN1hHNGdJQ0FnTHk4Z1kyOXVkR0ZwYm5NZ2FXNGdibUYwYVhabFhHNGdJQ0FnYjNkdUlEMGdJVWxUWDBaUFVrTkZSQ0FtSmlCMFlYSm5aWFFnSmlZZ2RHRnlaMlYwVzJ0bGVWMGdJVDA5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0F2THlCbGVIQnZjblFnYm1GMGFYWmxJRzl5SUhCaGMzTmxaRnh1SUNBZ0lHOTFkQ0E5SUNodmQyNGdQeUIwWVhKblpYUWdPaUJ6YjNWeVkyVXBXMnRsZVYwN1hHNGdJQ0FnTHk4Z1ltbHVaQ0IwYVcxbGNuTWdkRzhnWjJ4dlltRnNJR1p2Y2lCallXeHNJR1p5YjIwZ1pYaHdiM0owSUdOdmJuUmxlSFJjYmlBZ0lDQmxlSEFnUFNCSlUxOUNTVTVFSUNZbUlHOTNiaUEvSUdOMGVDaHZkWFFzSUdkc2IySmhiQ2tnT2lCSlUxOVFVazlVVHlBbUppQjBlWEJsYjJZZ2IzVjBJRDA5SUNkbWRXNWpkR2x2YmljZ1B5QmpkSGdvUm5WdVkzUnBiMjR1WTJGc2JDd2diM1YwS1NBNklHOTFkRHRjYmlBZ0lDQXZMeUJsZUhSbGJtUWdaMnh2WW1Gc1hHNGdJQ0FnYVdZb2RHRnlaMlYwS1hKbFpHVm1hVzVsS0hSaGNtZGxkQ3dnYTJWNUxDQnZkWFFzSUhSNWNHVWdKaUFrWlhod2IzSjBMbFVwTzF4dUlDQWdJQzh2SUdWNGNHOXlkRnh1SUNBZ0lHbG1LR1Y0Y0c5eWRITmJhMlY1WFNBaFBTQnZkWFFwYUdsa1pTaGxlSEJ2Y25SekxDQnJaWGtzSUdWNGNDazdYRzRnSUNBZ2FXWW9TVk5mVUZKUFZFOGdKaVlnWlhod1VISnZkRzliYTJWNVhTQWhQU0J2ZFhRcFpYaHdVSEp2ZEc5YmEyVjVYU0E5SUc5MWREdGNiaUFnZlZ4dWZUdGNibWRzYjJKaGJDNWpiM0psSUQwZ1kyOXlaVHRjYmk4dklIUjVjR1VnWW1sMGJXRndYRzRrWlhod2IzSjBMa1lnUFNBeE95QWdJQzh2SUdadmNtTmxaRnh1SkdWNGNHOXlkQzVISUQwZ01qc2dJQ0F2THlCbmJHOWlZV3hjYmlSbGVIQnZjblF1VXlBOUlEUTdJQ0FnTHk4Z2MzUmhkR2xqWEc0a1pYaHdiM0owTGxBZ1BTQTRPeUFnSUM4dklIQnliM1J2WEc0a1pYaHdiM0owTGtJZ1BTQXhOanNnSUM4dklHSnBibVJjYmlSbGVIQnZjblF1VnlBOUlETXlPeUFnTHk4Z2QzSmhjRnh1SkdWNGNHOXlkQzVWSUQwZ05qUTdJQ0F2THlCellXWmxYRzRrWlhod2IzSjBMbElnUFNBeE1qZzdJQzh2SUhKbFlXd2djSEp2ZEc4Z2JXVjBhRzlrSUdadmNpQmdiR2xpY21GeWVXQWdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJQ1JsZUhCdmNuUTdJaXdpZG1GeUlFMUJWRU5JSUQwZ2NtVnhkV2x5WlNnbkxpOWZkMnR6Snlrb0oyMWhkR05vSnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtFdEZXU2w3WEc0Z0lIWmhjaUJ5WlNBOUlDOHVMenRjYmlBZ2RISjVJSHRjYmlBZ0lDQW5MeTR2SjF0TFJWbGRLSEpsS1R0Y2JpQWdmU0JqWVhSamFDaGxLWHRjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnY21WYlRVRlVRMGhkSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdJU2N2TGk4blcwdEZXVjBvY21VcE8xeHVJQ0FnSUgwZ1kyRjBZMmdvWmlsN0lDOHFJR1Z0Y0hSNUlDb3ZJSDFjYmlBZ2ZTQnlaWFIxY200Z2RISjFaVHRjYm4wN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJR2hwWkdVZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmFHbGtaU2NwWEc0Z0lDd2djbVZrWldacGJtVWdQU0J5WlhGMWFYSmxLQ2N1TDE5eVpXUmxabWx1WlNjcFhHNGdJQ3dnWm1GcGJITWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW1ZV2xzY3ljcFhHNGdJQ3dnWkdWbWFXNWxaQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWtaV1pwYm1Wa0p5bGNiaUFnTENCM2EzTWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM2RyY3ljcE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLRXRGV1N3Z2JHVnVaM1JvTENCbGVHVmpLWHRjYmlBZ2RtRnlJRk5aVFVKUFRDQWdJRDBnZDJ0ektFdEZXU2xjYmlBZ0lDQXNJR1p1Y3lBZ0lDQWdJRDBnWlhobFl5aGtaV1pwYm1Wa0xDQlRXVTFDVDB3c0lDY25XMHRGV1YwcFhHNGdJQ0FnTENCemRISm1iaUFnSUNBOUlHWnVjMXN3WFZ4dUlDQWdJQ3dnY25obWJpQWdJQ0FnUFNCbWJuTmJNVjA3WEc0Z0lHbG1LR1poYVd4ektHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ2RtRnlJRThnUFNCN2ZUdGNiaUFnSUNCUFcxTlpUVUpQVEYwZ1BTQm1kVzVqZEdsdmJpZ3BleUJ5WlhSMWNtNGdOenNnZlR0Y2JpQWdJQ0J5WlhSMWNtNGdKeWRiUzBWWlhTaFBLU0FoUFNBM08xeHVJQ0I5S1NsN1hHNGdJQ0FnY21Wa1pXWnBibVVvVTNSeWFXNW5MbkJ5YjNSdmRIbHdaU3dnUzBWWkxDQnpkSEptYmlrN1hHNGdJQ0FnYUdsa1pTaFNaV2RGZUhBdWNISnZkRzkwZVhCbExDQlRXVTFDVDB3c0lHeGxibWQwYUNBOVBTQXlYRzRnSUNBZ0lDQXZMeUF5TVM0eUxqVXVPQ0JTWldkRmVIQXVjSEp2ZEc5MGVYQmxXMEJBY21Wd2JHRmpaVjBvYzNSeWFXNW5MQ0J5WlhCc1lXTmxWbUZzZFdVcFhHNGdJQ0FnSUNBdkx5QXlNUzR5TGpVdU1URWdVbVZuUlhod0xuQnliM1J2ZEhsd1pWdEFRSE53YkdsMFhTaHpkSEpwYm1jc0lHeHBiV2wwS1Z4dUlDQWdJQ0FnUHlCbWRXNWpkR2x2YmloemRISnBibWNzSUdGeVp5bDdJSEpsZEhWeWJpQnllR1p1TG1OaGJHd29jM1J5YVc1bkxDQjBhR2x6TENCaGNtY3BPeUI5WEc0Z0lDQWdJQ0F2THlBeU1TNHlMalV1TmlCU1pXZEZlSEF1Y0hKdmRHOTBlWEJsVzBCQWJXRjBZMmhkS0hOMGNtbHVaeWxjYmlBZ0lDQWdJQzh2SURJeExqSXVOUzQ1SUZKbFowVjRjQzV3Y205MGIzUjVjR1ZiUUVCelpXRnlZMmhkS0hOMGNtbHVaeWxjYmlBZ0lDQWdJRG9nWm5WdVkzUnBiMjRvYzNSeWFXNW5LWHNnY21WMGRYSnVJSEo0Wm00dVkyRnNiQ2h6ZEhKcGJtY3NJSFJvYVhNcE95QjlYRzRnSUNBZ0tUdGNiaUFnZlZ4dWZUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNHZMeUF5TVM0eUxqVXVNeUJuWlhRZ1VtVm5SWGh3TG5CeWIzUnZkSGx3WlM1bWJHRm5jMXh1ZG1GeUlHRnVUMkpxWldOMElEMGdjbVZ4ZFdseVpTZ25MaTlmWVc0dGIySnFaV04wSnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtDbDdYRzRnSUhaaGNpQjBhR0YwSUNBZ1BTQmhiazlpYW1WamRDaDBhR2x6S1Z4dUlDQWdJQ3dnY21WemRXeDBJRDBnSnljN1hHNGdJR2xtS0hSb1lYUXVaMnh2WW1Gc0tTQWdJQ0FnY21WemRXeDBJQ3M5SUNkbkp6dGNiaUFnYVdZb2RHaGhkQzVwWjI1dmNtVkRZWE5sS1NCeVpYTjFiSFFnS3owZ0oya25PMXh1SUNCcFppaDBhR0YwTG0xMWJIUnBiR2x1WlNrZ0lISmxjM1ZzZENBclBTQW5iU2M3WEc0Z0lHbG1LSFJvWVhRdWRXNXBZMjlrWlNrZ0lDQWdjbVZ6ZFd4MElDczlJQ2QxSnp0Y2JpQWdhV1lvZEdoaGRDNXpkR2xqYTNrcElDQWdJQ0J5WlhOMWJIUWdLejBnSjNrbk8xeHVJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVmVHNpTENKMllYSWdhWE5QWW1wbFkzUWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlwY3kxdlltcGxZM1FuS1Z4dUlDQXNJSE5sZEZCeWIzUnZkSGx3WlU5bUlEMGdjbVZ4ZFdseVpTZ25MaTlmYzJWMExYQnliM1J2SnlrdWMyVjBPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWgwYUdGMExDQjBZWEpuWlhRc0lFTXBlMXh1SUNCMllYSWdVQ3dnVXlBOUlIUmhjbWRsZEM1amIyNXpkSEoxWTNSdmNqdGNiaUFnYVdZb1V5QWhQVDBnUXlBbUppQjBlWEJsYjJZZ1V5QTlQU0FuWm5WdVkzUnBiMjRuSUNZbUlDaFFJRDBnVXk1d2NtOTBiM1I1Y0dVcElDRTlQU0JETG5CeWIzUnZkSGx3WlNBbUppQnBjMDlpYW1WamRDaFFLU0FtSmlCelpYUlFjbTkwYjNSNWNHVlBaaWw3WEc0Z0lDQWdjMlYwVUhKdmRHOTBlWEJsVDJZb2RHaGhkQ3dnVUNrN1hHNGdJSDBnY21WMGRYSnVJSFJvWVhRN1hHNTlPeUlzSWk4dklESXdMakV1TWk0eklFNTFiV0psY2k1cGMwbHVkR1ZuWlhJb2JuVnRZbVZ5S1Z4dWRtRnlJR2x6VDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk5ZmFYTXRiMkpxWldOMEp5bGNiaUFnTENCbWJHOXZjaUFnSUNBOUlFMWhkR2d1Wm14dmIzSTdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVJR2x6U1c1MFpXZGxjaWhwZENsN1hHNGdJSEpsZEhWeWJpQWhhWE5QWW1wbFkzUW9hWFFwSUNZbUlHbHpSbWx1YVhSbEtHbDBLU0FtSmlCbWJHOXZjaWhwZENrZ1BUMDlJR2wwTzF4dWZUc2lMQ0l2THlBM0xqSXVPQ0JKYzFKbFowVjRjQ2hoY21kMWJXVnVkQ2xjYm5aaGNpQnBjMDlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2WDJsekxXOWlhbVZqZENjcFhHNGdJQ3dnWTI5bUlDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpiMlluS1Z4dUlDQXNJRTFCVkVOSUlDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmQydHpKeWtvSjIxaGRHTm9KeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnZG1GeUlHbHpVbVZuUlhod08xeHVJQ0J5WlhSMWNtNGdhWE5QWW1wbFkzUW9hWFFwSUNZbUlDZ29hWE5TWldkRmVIQWdQU0JwZEZ0TlFWUkRTRjBwSUNFOVBTQjFibVJsWm1sdVpXUWdQeUFoSVdselVtVm5SWGh3SURvZ1kyOW1LR2wwS1NBOVBTQW5VbVZuUlhod0p5azdYRzU5T3lJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1ptRnNjMlU3SWl3aUx5OGdNakF1TWk0eUxqRTBJRTFoZEdndVpYaHdiVEVvZUNsY2JuWmhjaUFrWlhod2JURWdQU0JOWVhSb0xtVjRjRzB4TzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNBb0lTUmxlSEJ0TVZ4dUlDQXZMeUJQYkdRZ1JrWWdZblZuWEc0Z0lIeDhJQ1JsZUhCdE1TZ3hNQ2tnUGlBeU1qQXlOUzQwTmpVM09UUTRNRFkzTVRrZ2ZId2dKR1Y0Y0cweEtERXdLU0E4SURJeU1ESTFMalEyTlRjNU5EZ3dOamN4TmpVeE5qaGNiaUFnTHk4Z1ZHOXlJRUp5YjNkelpYSWdZblZuWEc0Z0lIeDhJQ1JsZUhCdE1TZ3RNbVV0TVRjcElDRTlJQzB5WlMweE4xeHVLU0EvSUdaMWJtTjBhVzl1SUdWNGNHMHhLSGdwZTF4dUlDQnlaWFIxY200Z0tIZ2dQU0FyZUNrZ1BUMGdNQ0EvSUhnZ09pQjRJRDRnTFRGbExUWWdKaVlnZUNBOElERmxMVFlnUHlCNElDc2dlQ0FxSUhnZ0x5QXlJRG9nVFdGMGFDNWxlSEFvZUNrZ0xTQXhPMXh1ZlNBNklDUmxlSEJ0TVRzaUxDSXZMeUF5TUM0eUxqSXVNakFnVFdGMGFDNXNiMmN4Y0NoNEtWeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQk5ZWFJvTG14dlp6RndJSHg4SUdaMWJtTjBhVzl1SUd4dlp6RndLSGdwZTF4dUlDQnlaWFIxY200Z0tIZ2dQU0FyZUNrZ1BpQXRNV1V0T0NBbUppQjRJRHdnTVdVdE9DQS9JSGdnTFNCNElDb2dlQ0F2SURJZ09pQk5ZWFJvTG14dlp5Z3hJQ3NnZUNrN1hHNTlPeUlzSWk4dklESXdMakl1TWk0eU9DQk5ZWFJvTG5OcFoyNG9lQ2xjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVFdGMGFDNXphV2R1SUh4OElHWjFibU4wYVc5dUlITnBaMjRvZUNsN1hHNGdJSEpsZEhWeWJpQW9lQ0E5SUN0NEtTQTlQU0F3SUh4OElIZ2dJVDBnZUNBL0lIZ2dPaUI0SUR3Z01DQS9JQzB4SURvZ01UdGNibjA3SWl3aWRtRnlJRTFoY0NBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDJWek5pNXRZWEFuS1Z4dUlDQXNJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJSE5vWVhKbFpDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5emFHRnlaV1FuS1NnbmJXVjBZV1JoZEdFbktWeHVJQ0FzSUhOMGIzSmxJQ0FnUFNCemFHRnlaV1F1YzNSdmNtVWdmSHdnS0hOb1lYSmxaQzV6ZEc5eVpTQTlJRzVsZHlBb2NtVnhkV2x5WlNnbkxpOWxjell1ZDJWaGF5MXRZWEFuS1NrcE8xeHVYRzUyWVhJZ1oyVjBUM0pEY21WaGRHVk5aWFJoWkdGMFlVMWhjQ0E5SUdaMWJtTjBhVzl1S0hSaGNtZGxkQ3dnZEdGeVoyVjBTMlY1TENCamNtVmhkR1VwZTF4dUlDQjJZWElnZEdGeVoyVjBUV1YwWVdSaGRHRWdQU0J6ZEc5eVpTNW5aWFFvZEdGeVoyVjBLVHRjYmlBZ2FXWW9JWFJoY21kbGRFMWxkR0ZrWVhSaEtYdGNiaUFnSUNCcFppZ2hZM0psWVhSbEtYSmxkSFZ5YmlCMWJtUmxabWx1WldRN1hHNGdJQ0FnYzNSdmNtVXVjMlYwS0hSaGNtZGxkQ3dnZEdGeVoyVjBUV1YwWVdSaGRHRWdQU0J1WlhjZ1RXRndLVHRjYmlBZ2ZWeHVJQ0IyWVhJZ2EyVjVUV1YwWVdSaGRHRWdQU0IwWVhKblpYUk5aWFJoWkdGMFlTNW5aWFFvZEdGeVoyVjBTMlY1S1R0Y2JpQWdhV1lvSVd0bGVVMWxkR0ZrWVhSaEtYdGNiaUFnSUNCcFppZ2hZM0psWVhSbEtYSmxkSFZ5YmlCMWJtUmxabWx1WldRN1hHNGdJQ0FnZEdGeVoyVjBUV1YwWVdSaGRHRXVjMlYwS0hSaGNtZGxkRXRsZVN3Z2EyVjVUV1YwWVdSaGRHRWdQU0J1WlhjZ1RXRndLVHRjYmlBZ2ZTQnlaWFIxY200Z2EyVjVUV1YwWVdSaGRHRTdYRzU5TzF4dWRtRnlJRzl5WkdsdVlYSjVTR0Z6VDNkdVRXVjBZV1JoZEdFZ1BTQm1kVzVqZEdsdmJpaE5aWFJoWkdGMFlVdGxlU3dnVHl3Z1VDbDdYRzRnSUhaaGNpQnRaWFJoWkdGMFlVMWhjQ0E5SUdkbGRFOXlRM0psWVhSbFRXVjBZV1JoZEdGTllYQW9UeXdnVUN3Z1ptRnNjMlVwTzF4dUlDQnlaWFIxY200Z2JXVjBZV1JoZEdGTllYQWdQVDA5SUhWdVpHVm1hVzVsWkNBL0lHWmhiSE5sSURvZ2JXVjBZV1JoZEdGTllYQXVhR0Z6S0UxbGRHRmtZWFJoUzJWNUtUdGNibjA3WEc1MllYSWdiM0prYVc1aGNubEhaWFJQZDI1TlpYUmhaR0YwWVNBOUlHWjFibU4wYVc5dUtFMWxkR0ZrWVhSaFMyVjVMQ0JQTENCUUtYdGNiaUFnZG1GeUlHMWxkR0ZrWVhSaFRXRndJRDBnWjJWMFQzSkRjbVZoZEdWTlpYUmhaR0YwWVUxaGNDaFBMQ0JRTENCbVlXeHpaU2s3WEc0Z0lISmxkSFZ5YmlCdFpYUmhaR0YwWVUxaGNDQTlQVDBnZFc1a1pXWnBibVZrSUQ4Z2RXNWtaV1pwYm1Wa0lEb2diV1YwWVdSaGRHRk5ZWEF1WjJWMEtFMWxkR0ZrWVhSaFMyVjVLVHRjYm4wN1hHNTJZWElnYjNKa2FXNWhjbmxFWldacGJtVlBkMjVOWlhSaFpHRjBZU0E5SUdaMWJtTjBhVzl1S0UxbGRHRmtZWFJoUzJWNUxDQk5aWFJoWkdGMFlWWmhiSFZsTENCUExDQlFLWHRjYmlBZ1oyVjBUM0pEY21WaGRHVk5aWFJoWkdGMFlVMWhjQ2hQTENCUUxDQjBjblZsS1M1elpYUW9UV1YwWVdSaGRHRkxaWGtzSUUxbGRHRmtZWFJoVm1Gc2RXVXBPMXh1ZlR0Y2JuWmhjaUJ2Y21ScGJtRnllVTkzYmsxbGRHRmtZWFJoUzJWNWN5QTlJR1oxYm1OMGFXOXVLSFJoY21kbGRDd2dkR0Z5WjJWMFMyVjVLWHRjYmlBZ2RtRnlJRzFsZEdGa1lYUmhUV0Z3SUQwZ1oyVjBUM0pEY21WaGRHVk5aWFJoWkdGMFlVMWhjQ2gwWVhKblpYUXNJSFJoY21kbGRFdGxlU3dnWm1Gc2MyVXBYRzRnSUNBZ0xDQnJaWGx6SUNBZ0lDQWdJQ0E5SUZ0ZE8xeHVJQ0JwWmlodFpYUmhaR0YwWVUxaGNDbHRaWFJoWkdGMFlVMWhjQzVtYjNKRllXTm9LR1oxYm1OMGFXOXVLRjhzSUd0bGVTbDdJR3RsZVhNdWNIVnphQ2hyWlhrcE95QjlLVHRjYmlBZ2NtVjBkWEp1SUd0bGVYTTdYRzU5TzF4dWRtRnlJSFJ2VFdWMFlVdGxlU0E5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnY21WMGRYSnVJR2wwSUQwOVBTQjFibVJsWm1sdVpXUWdmSHdnZEhsd1pXOW1JR2wwSUQwOUlDZHplVzFpYjJ3bklEOGdhWFFnT2lCVGRISnBibWNvYVhRcE8xeHVmVHRjYm5aaGNpQmxlSEFnUFNCbWRXNWpkR2x2YmloUEtYdGNiaUFnSkdWNGNHOXlkQ2drWlhod2IzSjBMbE1zSUNkU1pXWnNaV04wSnl3Z1R5azdYRzU5TzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlIdGNiaUFnYzNSdmNtVTZJSE4wYjNKbExGeHVJQ0J0WVhBNklHZGxkRTl5UTNKbFlYUmxUV1YwWVdSaGRHRk5ZWEFzWEc0Z0lHaGhjem9nYjNKa2FXNWhjbmxJWVhOUGQyNU5aWFJoWkdGMFlTeGNiaUFnWjJWME9pQnZjbVJwYm1GeWVVZGxkRTkzYmsxbGRHRmtZWFJoTEZ4dUlDQnpaWFE2SUc5eVpHbHVZWEo1UkdWbWFXNWxUM2R1VFdWMFlXUmhkR0VzWEc0Z0lHdGxlWE02SUc5eVpHbHVZWEo1VDNkdVRXVjBZV1JoZEdGTFpYbHpMRnh1SUNCclpYazZJSFJ2VFdWMFlVdGxlU3hjYmlBZ1pYaHdPaUJsZUhCY2JuMDdJaXdpTHk4Z1JtOXlZMlZrSUhKbGNHeGhZMlZ0Wlc1MElIQnliM1J2ZEhsd1pTQmhZMk5sYzNOdmNuTWdiV1YwYUc5a2MxeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnlaWEYxYVhKbEtDY3VMMTlzYVdKeVlYSjVKeWw4ZkNBaGNtVnhkV2x5WlNnbkxpOWZabUZwYkhNbktTaG1kVzVqZEdsdmJpZ3BlMXh1SUNCMllYSWdTeUE5SUUxaGRHZ3VjbUZ1Wkc5dEtDazdYRzRnSUM4dklFbHVJRVpHSUhSb2NtOTNjeUJ2Ym14NUlHUmxabWx1WlNCdFpYUm9iMlJ6WEc0Z0lGOWZaR1ZtYVc1bFUyVjBkR1Z5WDE4dVkyRnNiQ2h1ZFd4c0xDQkxMQ0JtZFc1amRHbHZiaWdwZXlBdktpQmxiWEIwZVNBcUwzMHBPMXh1SUNCa1pXeGxkR1VnY21WeGRXbHlaU2duTGk5ZloyeHZZbUZzSnlsYlMxMDdYRzU5S1RzaUxDSjJZWElnWjJWMFMyVjVjeUFnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXdGxlWE1uS1Z4dUlDQXNJSFJ2U1U5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMV2x2WW1wbFkzUW5LVnh1SUNBc0lHbHpSVzUxYlNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzF3YVdVbktTNW1PMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhwYzBWdWRISnBaWE1wZTF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0b2FYUXBlMXh1SUNBZ0lIWmhjaUJQSUNBZ0lDQWdQU0IwYjBsUFltcGxZM1FvYVhRcFhHNGdJQ0FnSUNBc0lHdGxlWE1nSUNBOUlHZGxkRXRsZVhNb1R5bGNiaUFnSUNBZ0lDd2diR1Z1WjNSb0lEMGdhMlY1Y3k1c1pXNW5kR2hjYmlBZ0lDQWdJQ3dnYVNBZ0lDQWdJRDBnTUZ4dUlDQWdJQ0FnTENCeVpYTjFiSFFnUFNCYlhWeHVJQ0FnSUNBZ0xDQnJaWGs3WEc0Z0lDQWdkMmhwYkdVb2JHVnVaM1JvSUQ0Z2FTbHBaaWhwYzBWdWRXMHVZMkZzYkNoUExDQnJaWGtnUFNCclpYbHpXMmtySzEwcEtYdGNiaUFnSUNBZ0lISmxjM1ZzZEM1d2RYTm9LR2x6Ulc1MGNtbGxjeUEvSUZ0clpYa3NJRTliYTJWNVhWMGdPaUJQVzJ0bGVWMHBPMXh1SUNBZ0lIMGdjbVYwZFhKdUlISmxjM1ZzZER0Y2JpQWdmVHRjYm4wN0lpd2lMeThnWVd4c0lHOWlhbVZqZENCclpYbHpMQ0JwYm1Oc2RXUmxjeUJ1YjI0dFpXNTFiV1Z5WVdKc1pTQmhibVFnYzNsdFltOXNjMXh1ZG1GeUlHZFBVRTRnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV2R2Y0c0bktWeHVJQ0FzSUdkUFVGTWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXZHZjSE1uS1Z4dUlDQXNJR0Z1VDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk5ZllXNHRiMkpxWldOMEp5bGNiaUFnTENCU1pXWnNaV04wSUNBOUlISmxjWFZwY21Vb0p5NHZYMmRzYjJKaGJDY3BMbEpsWm14bFkzUTdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRkpsWm14bFkzUWdKaVlnVW1WbWJHVmpkQzV2ZDI1TFpYbHpJSHg4SUdaMWJtTjBhVzl1SUc5M2JrdGxlWE1vYVhRcGUxeHVJQ0IyWVhJZ2EyVjVjeUFnSUNBZ0lDQTlJR2RQVUU0dVppaGhiazlpYW1WamRDaHBkQ2twWEc0Z0lDQWdMQ0JuWlhSVGVXMWliMnh6SUQwZ1owOVFVeTVtTzF4dUlDQnlaWFIxY200Z1oyVjBVM2x0WW05c2N5QS9JR3RsZVhNdVkyOXVZMkYwS0dkbGRGTjViV0p2YkhNb2FYUXBLU0E2SUd0bGVYTTdYRzU5T3lJc0luWmhjaUFrY0dGeWMyVkdiRzloZENBOUlISmxjWFZwY21Vb0p5NHZYMmRzYjJKaGJDY3BMbkJoY25ObFJteHZZWFJjYmlBZ0xDQWtkSEpwYlNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzTjBjbWx1WnkxMGNtbHRKeWt1ZEhKcGJUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0F4SUM4Z0pIQmhjbk5sUm14dllYUW9jbVZ4ZFdseVpTZ25MaTlmYzNSeWFXNW5MWGR6SnlrZ0t5QW5MVEFuS1NBaFBUMGdMVWx1Wm1sdWFYUjVJRDhnWm5WdVkzUnBiMjRnY0dGeWMyVkdiRzloZENoemRISXBlMXh1SUNCMllYSWdjM1J5YVc1bklEMGdKSFJ5YVcwb1UzUnlhVzVuS0hOMGNpa3NJRE1wWEc0Z0lDQWdMQ0J5WlhOMWJIUWdQU0FrY0dGeWMyVkdiRzloZENoemRISnBibWNwTzF4dUlDQnlaWFIxY200Z2NtVnpkV3gwSUQwOVBTQXdJQ1ltSUhOMGNtbHVaeTVqYUdGeVFYUW9NQ2tnUFQwZ0p5MG5JRDhnTFRBZ09pQnlaWE4xYkhRN1hHNTlJRG9nSkhCaGNuTmxSbXh2WVhRN0lpd2lkbUZ5SUNSd1lYSnpaVWx1ZENBOUlISmxjWFZwY21Vb0p5NHZYMmRzYjJKaGJDY3BMbkJoY25ObFNXNTBYRzRnSUN3Z0pIUnlhVzBnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYzNSeWFXNW5MWFJ5YVcwbktTNTBjbWx0WEc0Z0lDd2dkM01nSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmMzUnlhVzVuTFhkekp5bGNiaUFnTENCb1pYZ2dJQ0FnSUNBZ1BTQXZYbHRjWEMwclhUOHdXM2hZWFM4N1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdKSEJoY25ObFNXNTBLSGR6SUNzZ0p6QTRKeWtnSVQwOUlEZ2dmSHdnSkhCaGNuTmxTVzUwS0hkeklDc2dKekI0TVRZbktTQWhQVDBnTWpJZ1B5Qm1kVzVqZEdsdmJpQndZWEp6WlVsdWRDaHpkSElzSUhKaFpHbDRLWHRjYmlBZ2RtRnlJSE4wY21sdVp5QTlJQ1IwY21sdEtGTjBjbWx1WnloemRISXBMQ0F6S1R0Y2JpQWdjbVYwZFhKdUlDUndZWEp6WlVsdWRDaHpkSEpwYm1jc0lDaHlZV1JwZUNBK1BqNGdNQ2tnZkh3Z0tHaGxlQzUwWlhOMEtITjBjbWx1WnlrZ1B5QXhOaUE2SURFd0tTazdYRzU5SURvZ0pIQmhjbk5sU1c1ME95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JuWmhjaUJ3WVhSb0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXdZWFJvSnlsY2JpQWdMQ0JwYm5admEyVWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXBiblp2YTJVbktWeHVJQ0FzSUdGR2RXNWpkR2x2YmlBOUlISmxjWFZwY21Vb0p5NHZYMkV0Wm5WdVkzUnBiMjRuS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b0x5b2dMaTR1Y0dGeVozTWdLaThwZTF4dUlDQjJZWElnWm00Z0lDQWdJRDBnWVVaMWJtTjBhVzl1S0hSb2FYTXBYRzRnSUNBZ0xDQnNaVzVuZEdnZ1BTQmhjbWQxYldWdWRITXViR1Z1WjNSb1hHNGdJQ0FnTENCd1lYSm5jeUFnUFNCQmNuSmhlU2hzWlc1bmRHZ3BYRzRnSUNBZ0xDQnBJQ0FnSUNBZ1BTQXdYRzRnSUNBZ0xDQmZJQ0FnSUNBZ1BTQndZWFJvTGw5Y2JpQWdJQ0FzSUdodmJHUmxjaUE5SUdaaGJITmxPMXh1SUNCM2FHbHNaU2hzWlc1bmRHZ2dQaUJwS1dsbUtDaHdZWEpuYzF0cFhTQTlJR0Z5WjNWdFpXNTBjMXRwS3l0ZEtTQTlQVDBnWHlsb2IyeGtaWElnUFNCMGNuVmxPMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRvTHlvZ0xpNHVZWEpuY3lBcUx5bDdYRzRnSUNBZ2RtRnlJSFJvWVhRZ1BTQjBhR2x6WEc0Z0lDQWdJQ0FzSUdGTVpXNGdQU0JoY21kMWJXVnVkSE11YkdWdVozUm9YRzRnSUNBZ0lDQXNJR29nUFNBd0xDQnJJRDBnTUN3Z1lYSm5jenRjYmlBZ0lDQnBaaWdoYUc5c1pHVnlJQ1ltSUNGaFRHVnVLWEpsZEhWeWJpQnBiblp2YTJVb1ptNHNJSEJoY21kekxDQjBhR0YwS1R0Y2JpQWdJQ0JoY21keklEMGdjR0Z5WjNNdWMyeHBZMlVvS1R0Y2JpQWdJQ0JwWmlob2IyeGtaWElwWm05eUtEdHNaVzVuZEdnZ1BpQnFPeUJxS3lzcGFXWW9ZWEpuYzF0cVhTQTlQVDBnWHlsaGNtZHpXMnBkSUQwZ1lYSm5kVzFsYm5Selcyc3JLMTA3WEc0Z0lDQWdkMmhwYkdVb1lVeGxiaUErSUdzcFlYSm5jeTV3ZFhOb0tHRnlaM1Z0Wlc1MGMxdHJLeXRkS1R0Y2JpQWdJQ0J5WlhSMWNtNGdhVzUyYjJ0bEtHWnVMQ0JoY21kekxDQjBhR0YwS1R0Y2JpQWdmVHRjYm4wN0lpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LVHNpTENKMllYSWdjbVZrWldacGJtVWdQU0J5WlhGMWFYSmxLQ2N1TDE5eVpXUmxabWx1WlNjcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaDBZWEpuWlhRc0lITnlZeXdnYzJGbVpTbDdYRzRnSUdadmNpaDJZWElnYTJWNUlHbHVJSE55WXlseVpXUmxabWx1WlNoMFlYSm5aWFFzSUd0bGVTd2djM0pqVzJ0bGVWMHNJSE5oWm1VcE8xeHVJQ0J5WlhSMWNtNGdkR0Z5WjJWME8xeHVmVHNpTENKMllYSWdaMnh2WW1Gc0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZloyeHZZbUZzSnlsY2JpQWdMQ0JvYVdSbElDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9hV1JsSnlsY2JpQWdMQ0JvWVhNZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9ZWE1uS1Z4dUlDQXNJRk5TUXlBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzVnBaQ2NwS0NkemNtTW5LVnh1SUNBc0lGUlBYMU5VVWtsT1J5QTlJQ2QwYjFOMGNtbHVaeWRjYmlBZ0xDQWtkRzlUZEhKcGJtY2dQU0JHZFc1amRHbHZibHRVVDE5VFZGSkpUa2RkWEc0Z0lDd2dWRkJNSUNBZ0lDQWdJRDBnS0NjbklDc2dKSFJ2VTNSeWFXNW5LUzV6Y0d4cGRDaFVUMTlUVkZKSlRrY3BPMXh1WEc1eVpYRjFhWEpsS0NjdUwxOWpiM0psSnlrdWFXNXpjR1ZqZEZOdmRYSmpaU0E5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnY21WMGRYSnVJQ1IwYjFOMGNtbHVaeTVqWVd4c0tHbDBLVHRjYm4wN1hHNWNiaWh0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLRThzSUd0bGVTd2dkbUZzTENCellXWmxLWHRjYmlBZ2RtRnlJR2x6Um5WdVkzUnBiMjRnUFNCMGVYQmxiMllnZG1Gc0lEMDlJQ2RtZFc1amRHbHZiaWM3WEc0Z0lHbG1LR2x6Um5WdVkzUnBiMjRwYUdGektIWmhiQ3dnSjI1aGJXVW5LU0I4ZkNCb2FXUmxLSFpoYkN3Z0oyNWhiV1VuTENCclpYa3BPMXh1SUNCcFppaFBXMnRsZVYwZ1BUMDlJSFpoYkNseVpYUjFjbTQ3WEc0Z0lHbG1LR2x6Um5WdVkzUnBiMjRwYUdGektIWmhiQ3dnVTFKREtTQjhmQ0JvYVdSbEtIWmhiQ3dnVTFKRExDQlBXMnRsZVYwZ1B5QW5KeUFySUU5YmEyVjVYU0E2SUZSUVRDNXFiMmx1S0ZOMGNtbHVaeWhyWlhrcEtTazdYRzRnSUdsbUtFOGdQVDA5SUdkc2IySmhiQ2w3WEc0Z0lDQWdUMXRyWlhsZElEMGdkbUZzTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUdsbUtDRnpZV1psS1h0Y2JpQWdJQ0FnSUdSbGJHVjBaU0JQVzJ0bGVWMDdYRzRnSUNBZ0lDQm9hV1JsS0U4c0lHdGxlU3dnZG1Gc0tUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnYVdZb1QxdHJaWGxkS1U5YmEyVjVYU0E5SUhaaGJEdGNiaUFnSUNBZ0lHVnNjMlVnYUdsa1pTaFBMQ0JyWlhrc0lIWmhiQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNHZMeUJoWkdRZ1ptRnJaU0JHZFc1amRHbHZiaU4wYjFOMGNtbHVaeUJtYjNJZ1kyOXljbVZqZENCM2IzSnJJSGR5WVhCd1pXUWdiV1YwYUc5a2N5QXZJR052Ym5OMGNuVmpkRzl5Y3lCM2FYUm9JRzFsZEdodlpITWdiR2xyWlNCTWIwUmhjMmdnYVhOT1lYUnBkbVZjYm4wcEtFWjFibU4wYVc5dUxuQnliM1J2ZEhsd1pTd2dWRTlmVTFSU1NVNUhMQ0JtZFc1amRHbHZiaUIwYjFOMGNtbHVaeWdwZTF4dUlDQnlaWFIxY200Z2RIbHdaVzltSUhSb2FYTWdQVDBnSjJaMWJtTjBhVzl1SnlBbUppQjBhR2x6VzFOU1ExMGdmSHdnSkhSdlUzUnlhVzVuTG1OaGJHd29kR2hwY3lrN1hHNTlLVHNpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0hKbFowVjRjQ3dnY21Wd2JHRmpaU2w3WEc0Z0lIWmhjaUJ5WlhCc1lXTmxjaUE5SUhKbGNHeGhZMlVnUFQwOUlFOWlhbVZqZENoeVpYQnNZV05sS1NBL0lHWjFibU4wYVc5dUtIQmhjblFwZTF4dUlDQWdJSEpsZEhWeWJpQnlaWEJzWVdObFczQmhjblJkTzF4dUlDQjlJRG9nY21Wd2JHRmpaVHRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnSUNCeVpYUjFjbTRnVTNSeWFXNW5LR2wwS1M1eVpYQnNZV05sS0hKbFowVjRjQ3dnY21Wd2JHRmpaWElwTzF4dUlDQjlPMXh1ZlRzaUxDSXZMeUEzTGpJdU9TQlRZVzFsVm1Gc2RXVW9lQ3dnZVNsY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1QySnFaV04wTG1seklIeDhJR1oxYm1OMGFXOXVJR2x6S0hnc0lIa3BlMXh1SUNCeVpYUjFjbTRnZUNBOVBUMGdlU0EvSUhnZ0lUMDlJREFnZkh3Z01TQXZJSGdnUFQwOUlERWdMeUI1SURvZ2VDQWhQU0I0SUNZbUlIa2dJVDBnZVR0Y2JuMDdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVkbUZ5SUdkc2IySmhiQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWjJ4dlltRnNKeWxjYmlBZ0xDQmtVQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxa2NDY3BYRzRnSUN3Z1JFVlRRMUpKVUZSUFVsTWdQU0J5WlhGMWFYSmxLQ2N1TDE5a1pYTmpjbWx3ZEc5eWN5Y3BYRzRnSUN3Z1UxQkZRMGxGVXlBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5M2EzTW5LU2duYzNCbFkybGxjeWNwTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtFdEZXU2w3WEc0Z0lIWmhjaUJESUQwZ1oyeHZZbUZzVzB0RldWMDdYRzRnSUdsbUtFUkZVME5TU1ZCVVQxSlRJQ1ltSUVNZ0ppWWdJVU5iVTFCRlEwbEZVMTBwWkZBdVppaERMQ0JUVUVWRFNVVlRMQ0I3WEc0Z0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRvS1hzZ2NtVjBkWEp1SUhSb2FYTTdJSDFjYmlBZ2ZTazdYRzU5T3lJc0luWmhjaUJtWVdsc2N5QTlJSEpsY1hWcGNtVW9KeTR2WDJaaGFXeHpKeWs3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2JXVjBhRzlrTENCaGNtY3BlMXh1SUNCeVpYUjFjbTRnSVNGdFpYUm9iMlFnSmlZZ1ptRnBiSE1vWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0JoY21jZ1B5QnRaWFJvYjJRdVkyRnNiQ2h1ZFd4c0xDQm1kVzVqZEdsdmJpZ3BlMzBzSURFcElEb2diV1YwYUc5a0xtTmhiR3dvYm5Wc2JDazdYRzRnSUgwcE8xeHVmVHNpTENJdkx5Qm9aV3h3WlhJZ1ptOXlJRk4wY21sdVp5TjdjM1JoY25SelYybDBhQ3dnWlc1a2MxZHBkR2dzSUdsdVkyeDFaR1Z6ZlZ4dWRtRnlJR2x6VW1WblJYaHdJRDBnY21WeGRXbHlaU2duTGk5ZmFYTXRjbVZuWlhod0p5bGNiaUFnTENCa1pXWnBibVZrSUNBOUlISmxjWFZwY21Vb0p5NHZYMlJsWm1sdVpXUW5LVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmloMGFHRjBMQ0J6WldGeVkyaFRkSEpwYm1jc0lFNUJUVVVwZTF4dUlDQnBaaWhwYzFKbFowVjRjQ2h6WldGeVkyaFRkSEpwYm1jcEtYUm9jbTkzSUZSNWNHVkZjbkp2Y2lnblUzUnlhVzVuSXljZ0t5Qk9RVTFGSUNzZ1hDSWdaRzlsYzI0bmRDQmhZMk5sY0hRZ2NtVm5aWGdoWENJcE8xeHVJQ0J5WlhSMWNtNGdVM1J5YVc1bktHUmxabWx1WldRb2RHaGhkQ2twTzF4dWZUc2lMQ0oyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z1ptRnBiSE1nSUNBOUlISmxjWFZwY21Vb0p5NHZYMlpoYVd4ekp5bGNiaUFnTENCa1pXWnBibVZrSUQwZ2NtVnhkV2x5WlNnbkxpOWZaR1ZtYVc1bFpDY3BYRzRnSUN3Z2NYVnZkQ0FnSUNBOUlDOWNJaTluTzF4dUx5OGdRaTR5TGpNdU1pNHhJRU55WldGMFpVaFVUVXdvYzNSeWFXNW5MQ0IwWVdjc0lHRjBkSEpwWW5WMFpTd2dkbUZzZFdVcFhHNTJZWElnWTNKbFlYUmxTRlJOVENBOUlHWjFibU4wYVc5dUtITjBjbWx1Wnl3Z2RHRm5MQ0JoZEhSeWFXSjFkR1VzSUhaaGJIVmxLU0I3WEc0Z0lIWmhjaUJUSUNBOUlGTjBjbWx1Wnloa1pXWnBibVZrS0hOMGNtbHVaeWtwWEc0Z0lDQWdMQ0J3TVNBOUlDYzhKeUFySUhSaFp6dGNiaUFnYVdZb1lYUjBjbWxpZFhSbElDRTlQU0FuSnlsd01TQXJQU0FuSUNjZ0t5QmhkSFJ5YVdKMWRHVWdLeUFuUFZ3aUp5QXJJRk4wY21sdVp5aDJZV3gxWlNrdWNtVndiR0ZqWlNoeGRXOTBMQ0FuSm5GMWIzUTdKeWtnS3lBblhDSW5PMXh1SUNCeVpYUjFjbTRnY0RFZ0t5QW5QaWNnS3lCVElDc2dKend2SnlBcklIUmhaeUFySUNjK0p6dGNibjA3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0U1QlRVVXNJR1Y0WldNcGUxeHVJQ0IyWVhJZ1R5QTlJSHQ5TzF4dUlDQlBXMDVCVFVWZElEMGdaWGhsWXloamNtVmhkR1ZJVkUxTUtUdGNiaUFnSkdWNGNHOXlkQ2drWlhod2IzSjBMbEFnS3lBa1pYaHdiM0owTGtZZ0tpQm1ZV2xzY3lobWRXNWpkR2x2YmlncGUxeHVJQ0FnSUhaaGNpQjBaWE4wSUQwZ0p5ZGJUa0ZOUlYwb0oxd2lKeWs3WEc0Z0lDQWdjbVYwZFhKdUlIUmxjM1FnSVQwOUlIUmxjM1F1ZEc5TWIzZGxja05oYzJVb0tTQjhmQ0IwWlhOMExuTndiR2wwS0NkY0lpY3BMbXhsYm1kMGFDQStJRE03WEc0Z0lIMHBMQ0FuVTNSeWFXNW5KeXdnVHlrN1hHNTlPeUlzSWk4dklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOTBZek01TDNCeWIzQnZjMkZzTFhOMGNtbHVaeTF3WVdRdGMzUmhjblF0Wlc1a1hHNTJZWElnZEc5TVpXNW5kR2dnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTFzWlc1bmRHZ25LVnh1SUNBc0lISmxjR1ZoZENBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYzNSeWFXNW5MWEpsY0dWaGRDY3BYRzRnSUN3Z1pHVm1hVzVsWkNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlrWldacGJtVmtKeWs3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2RHaGhkQ3dnYldGNFRHVnVaM1JvTENCbWFXeHNVM1J5YVc1bkxDQnNaV1owS1h0Y2JpQWdkbUZ5SUZNZ0lDQWdJQ0FnSUNBZ0lDQTlJRk4wY21sdVp5aGtaV1pwYm1Wa0tIUm9ZWFFwS1Z4dUlDQWdJQ3dnYzNSeWFXNW5UR1Z1WjNSb0lEMGdVeTVzWlc1bmRHaGNiaUFnSUNBc0lHWnBiR3hUZEhJZ0lDQWdJQ0E5SUdacGJHeFRkSEpwYm1jZ1BUMDlJSFZ1WkdWbWFXNWxaQ0EvSUNjZ0p5QTZJRk4wY21sdVp5aG1hV3hzVTNSeWFXNW5LVnh1SUNBZ0lDd2dhVzUwVFdGNFRHVnVaM1JvSUQwZ2RHOU1aVzVuZEdnb2JXRjRUR1Z1WjNSb0tUdGNiaUFnYVdZb2FXNTBUV0Y0VEdWdVozUm9JRHc5SUhOMGNtbHVaMHhsYm1kMGFDQjhmQ0JtYVd4c1UzUnlJRDA5SUNjbktYSmxkSFZ5YmlCVE8xeHVJQ0IyWVhJZ1ptbHNiRXhsYmlBOUlHbHVkRTFoZUV4bGJtZDBhQ0F0SUhOMGNtbHVaMHhsYm1kMGFGeHVJQ0FnSUN3Z2MzUnlhVzVuUm1sc2JHVnlJRDBnY21Wd1pXRjBMbU5oYkd3b1ptbHNiRk4wY2l3Z1RXRjBhQzVqWldsc0tHWnBiR3hNWlc0Z0x5Qm1hV3hzVTNSeUxteGxibWQwYUNrcE8xeHVJQ0JwWmloemRISnBibWRHYVd4c1pYSXViR1Z1WjNSb0lENGdabWxzYkV4bGJpbHpkSEpwYm1kR2FXeHNaWElnUFNCemRISnBibWRHYVd4c1pYSXVjMnhwWTJVb01Dd2dabWxzYkV4bGJpazdYRzRnSUhKbGRIVnliaUJzWldaMElEOGdjM1J5YVc1blJtbHNiR1Z5SUNzZ1V5QTZJRk1nS3lCemRISnBibWRHYVd4c1pYSTdYRzU5TzF4dUlpd2lKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJSFJ2U1c1MFpXZGxjaUE5SUhKbGNYVnBjbVVvSnk0dlgzUnZMV2x1ZEdWblpYSW5LVnh1SUNBc0lHUmxabWx1WldRZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJSbFptbHVaV1FuS1R0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpQnlaWEJsWVhRb1kyOTFiblFwZTF4dUlDQjJZWElnYzNSeUlEMGdVM1J5YVc1bktHUmxabWx1WldRb2RHaHBjeWtwWEc0Z0lDQWdMQ0J5WlhNZ1BTQW5KMXh1SUNBZ0lDd2diaUFnSUQwZ2RHOUpiblJsWjJWeUtHTnZkVzUwS1R0Y2JpQWdhV1lvYmlBOElEQWdmSHdnYmlBOVBTQkpibVpwYm1sMGVTbDBhSEp2ZHlCU1lXNW5aVVZ5Y205eUtGd2lRMjkxYm5RZ1kyRnVKM1FnWW1VZ2JtVm5ZWFJwZG1WY0lpazdYRzRnSUdadmNpZzdiaUErSURBN0lDaHVJRDQrUGowZ01Ta2dKaVlnS0hOMGNpQXJQU0J6ZEhJcEtXbG1LRzRnSmlBeEtYSmxjeUFyUFNCemRISTdYRzRnSUhKbGRIVnliaUJ5WlhNN1hHNTlPeUlzSW5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQmtaV1pwYm1Wa0lEMGdjbVZ4ZFdseVpTZ25MaTlmWkdWbWFXNWxaQ2NwWEc0Z0lDd2dabUZwYkhNZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJaaGFXeHpKeWxjYmlBZ0xDQnpjR0ZqWlhNZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYzNSeWFXNW5MWGR6SnlsY2JpQWdMQ0J6Y0dGalpTQWdJRDBnSjFzbklDc2djM0JoWTJWeklDc2dKMTBuWEc0Z0lDd2dibTl1SUNBZ0lDQTlJQ2RjWEhVeU1EQmlYRngxTURBNE5TZGNiaUFnTENCc2RISnBiU0FnSUQwZ1VtVm5SWGh3S0NkZUp5QXJJSE53WVdObElDc2djM0JoWTJVZ0t5QW5LaWNwWEc0Z0lDd2djblJ5YVcwZ0lDQTlJRkpsWjBWNGNDaHpjR0ZqWlNBcklITndZV05sSUNzZ0p5b2tKeWs3WEc1Y2JuWmhjaUJsZUhCdmNuUmxjaUE5SUdaMWJtTjBhVzl1S0V0RldTd2daWGhsWXl3Z1FVeEpRVk1wZTF4dUlDQjJZWElnWlhod0lDQWdQU0I3ZlR0Y2JpQWdkbUZ5SUVaUFVrTkZJRDBnWm1GcGJITW9ablZ1WTNScGIyNG9LWHRjYmlBZ0lDQnlaWFIxY200Z0lTRnpjR0ZqWlhOYlMwVlpYU2dwSUh4OElHNXZibHRMUlZsZEtDa2dJVDBnYm05dU8xeHVJQ0I5S1R0Y2JpQWdkbUZ5SUdadUlEMGdaWGh3VzB0RldWMGdQU0JHVDFKRFJTQS9JR1Y0WldNb2RISnBiU2tnT2lCemNHRmpaWE5iUzBWWlhUdGNiaUFnYVdZb1FVeEpRVk1wWlhod1cwRk1TVUZUWFNBOUlHWnVPMXh1SUNBa1pYaHdiM0owS0NSbGVIQnZjblF1VUNBcklDUmxlSEJ2Y25RdVJpQXFJRVpQVWtORkxDQW5VM1J5YVc1bkp5d2daWGh3S1R0Y2JuMDdYRzVjYmk4dklERWdMVDRnVTNSeWFXNW5JM1J5YVcxTVpXWjBYRzR2THlBeUlDMCtJRk4wY21sdVp5TjBjbWx0VW1sbmFIUmNiaTh2SURNZ0xUNGdVM1J5YVc1bkkzUnlhVzFjYm5aaGNpQjBjbWx0SUQwZ1pYaHdiM0owWlhJdWRISnBiU0E5SUdaMWJtTjBhVzl1S0hOMGNtbHVaeXdnVkZsUVJTbDdYRzRnSUhOMGNtbHVaeUE5SUZOMGNtbHVaeWhrWldacGJtVmtLSE4wY21sdVp5a3BPMXh1SUNCcFppaFVXVkJGSUNZZ01TbHpkSEpwYm1jZ1BTQnpkSEpwYm1jdWNtVndiR0ZqWlNoc2RISnBiU3dnSnljcE8xeHVJQ0JwWmloVVdWQkZJQ1lnTWlsemRISnBibWNnUFNCemRISnBibWN1Y21Wd2JHRmpaU2h5ZEhKcGJTd2dKeWNwTzF4dUlDQnlaWFIxY200Z2MzUnlhVzVuTzF4dWZUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JsZUhCdmNuUmxjanNpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUNkY1hIZ3dPVnhjZURCQlhGeDRNRUpjWEhnd1ExeGNlREJFWEZ4NE1qQmNYSGhCTUZ4Y2RURTJPREJjWEhVeE9EQkZYRngxTWpBd01GeGNkVEl3TURGY1hIVXlNREF5WEZ4MU1qQXdNeWNnSzF4dUlDQW5YRngxTWpBd05GeGNkVEl3TURWY1hIVXlNREEyWEZ4MU1qQXdOMXhjZFRJd01EaGNYSFV5TURBNVhGeDFNakF3UVZ4Y2RUSXdNa1pjWEhVeU1EVkdYRngxTXpBd01GeGNkVEl3TWpoY1hIVXlNREk1WEZ4MVJrVkdSaWM3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1YVdZb2NtVnhkV2x5WlNnbkxpOWZaR1Z6WTNKcGNIUnZjbk1uS1NsN1hHNGdJSFpoY2lCTVNVSlNRVkpaSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYkdsaWNtRnllU2NwWEc0Z0lDQWdMQ0JuYkc5aVlXd2dJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaMnh2WW1Gc0p5bGNiaUFnSUNBc0lHWmhhV3h6SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bVlXbHNjeWNwWEc0Z0lDQWdMQ0FrWlhod2IzSjBJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnSUNBc0lDUjBlWEJsWkNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGVYQmxaQ2NwWEc0Z0lDQWdMQ0FrWW5WbVptVnlJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkSGx3WldRdFluVm1abVZ5SnlsY2JpQWdJQ0FzSUdOMGVDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlqZEhnbktWeHVJQ0FnSUN3Z1lXNUpibk4wWVc1alpTQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGdUxXbHVjM1JoYm1ObEp5bGNiaUFnSUNBc0lIQnliM0JsY25SNVJHVnpZeUFnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5d2NtOXdaWEowZVMxa1pYTmpKeWxjYmlBZ0lDQXNJR2hwWkdVZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9hV1JsSnlsY2JpQWdJQ0FzSUhKbFpHVm1hVzVsUVd4c0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl5WldSbFptbHVaUzFoYkd3bktWeHVJQ0FnSUN3Z2RHOUpiblJsWjJWeUlDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXbHVkR1ZuWlhJbktWeHVJQ0FnSUN3Z2RHOU1aVzVuZEdnZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXeGxibWQwYUNjcFhHNGdJQ0FnTENCMGIwbHVaR1Y0SUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGFXNWtaWGduS1Z4dUlDQWdJQ3dnZEc5UWNtbHRhWFJwZG1VZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFhCeWFXMXBkR2wyWlNjcFhHNGdJQ0FnTENCb1lYTWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYUdGekp5bGNiaUFnSUNBc0lITmhiV1VnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5ellXMWxMWFpoYkhWbEp5bGNiaUFnSUNBc0lHTnNZWE56YjJZZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5amJHRnpjMjltSnlsY2JpQWdJQ0FzSUdselQySnFaV04wSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlwY3kxdlltcGxZM1FuS1Z4dUlDQWdJQ3dnZEc5UFltcGxZM1FnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFc5aWFtVmpkQ2NwWEc0Z0lDQWdMQ0JwYzBGeWNtRjVTWFJsY2lBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWE10WVhKeVlYa3RhWFJsY2ljcFhHNGdJQ0FnTENCamNtVmhkR1VnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV055WldGMFpTY3BYRzRnSUNBZ0xDQm5aWFJRY205MGIzUjVjR1ZQWmlBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdkd2J5Y3BYRzRnSUNBZ0xDQm5UMUJPSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdkdmNHNG5LUzVtWEc0Z0lDQWdMQ0JuWlhSSmRHVnlSbTRnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWpiM0psTG1kbGRDMXBkR1Z5WVhSdmNpMXRaWFJvYjJRbktWeHVJQ0FnSUN3Z2RXbGtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNWcFpDY3BYRzRnSUNBZ0xDQjNhM01nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmQydHpKeWxjYmlBZ0lDQXNJR055WldGMFpVRnljbUY1VFdWMGFHOWtJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWhjbkpoZVMxdFpYUm9iMlJ6SnlsY2JpQWdJQ0FzSUdOeVpXRjBaVUZ5Y21GNVNXNWpiSFZrWlhNZ1BTQnlaWEYxYVhKbEtDY3VMMTloY25KaGVTMXBibU5zZFdSbGN5Y3BYRzRnSUNBZ0xDQnpjR1ZqYVdWelEyOXVjM1J5ZFdOMGIzSWdJRDBnY21WeGRXbHlaU2duTGk5ZmMzQmxZMmxsY3kxamIyNXpkSEoxWTNSdmNpY3BYRzRnSUNBZ0xDQkJjbkpoZVVsMFpYSmhkRzl5Y3lBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5bGN6WXVZWEp5WVhrdWFYUmxjbUYwYjNJbktWeHVJQ0FnSUN3Z1NYUmxjbUYwYjNKeklDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJsMFpYSmhkRzl5Y3ljcFhHNGdJQ0FnTENBa2FYUmxja1JsZEdWamRDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVhSbGNpMWtaWFJsWTNRbktWeHVJQ0FnSUN3Z2MyVjBVM0JsWTJsbGN5QWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNObGRDMXpjR1ZqYVdWekp5bGNiaUFnSUNBc0lHRnljbUY1Um1sc2JDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGNuSmhlUzFtYVd4c0p5bGNiaUFnSUNBc0lHRnljbUY1UTI5d2VWZHBkR2hwYmlBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGNuSmhlUzFqYjNCNUxYZHBkR2hwYmljcFhHNGdJQ0FnTENBa1JGQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV1J3SnlsY2JpQWdJQ0FzSUNSSFQxQkVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaMjl3WkNjcFhHNGdJQ0FnTENCa1VDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdKRVJRTG1aY2JpQWdJQ0FzSUdkUFVFUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQWtSMDlRUkM1bVhHNGdJQ0FnTENCU1lXNW5aVVZ5Y205eUlDQWdJQ0FnSUNBZ0lEMGdaMnh2WW1Gc0xsSmhibWRsUlhKeWIzSmNiaUFnSUNBc0lGUjVjR1ZGY25KdmNpQWdJQ0FnSUNBZ0lDQWdQU0JuYkc5aVlXd3VWSGx3WlVWeWNtOXlYRzRnSUNBZ0xDQlZhVzUwT0VGeWNtRjVJQ0FnSUNBZ0lDQWdJRDBnWjJ4dlltRnNMbFZwYm5RNFFYSnlZWGxjYmlBZ0lDQXNJRUZTVWtGWlgwSlZSa1pGVWlBZ0lDQWdJQ0FnUFNBblFYSnlZWGxDZFdabVpYSW5YRzRnSUNBZ0xDQlRTRUZTUlVSZlFsVkdSa1ZTSUNBZ0lDQWdJRDBnSjFOb1lYSmxaQ2NnS3lCQlVsSkJXVjlDVlVaR1JWSmNiaUFnSUNBc0lFSlpWRVZUWDFCRlVsOUZURVZOUlU1VUlDQWdQU0FuUWxsVVJWTmZVRVZTWDBWTVJVMUZUbFFuWEc0Z0lDQWdMQ0JRVWs5VVQxUlpVRVVnSUNBZ0lDQWdJQ0FnSUQwZ0ozQnliM1J2ZEhsd1pTZGNiaUFnSUNBc0lFRnljbUY1VUhKdmRHOGdJQ0FnSUNBZ0lDQWdQU0JCY25KaGVWdFFVazlVVDFSWlVFVmRYRzRnSUNBZ0xDQWtRWEp5WVhsQ2RXWm1aWElnSUNBZ0lDQWdJRDBnSkdKMVptWmxjaTVCY25KaGVVSjFabVpsY2x4dUlDQWdJQ3dnSkVSaGRHRldhV1YzSUNBZ0lDQWdJQ0FnSUNBOUlDUmlkV1ptWlhJdVJHRjBZVlpwWlhkY2JpQWdJQ0FzSUdGeWNtRjVSbTl5UldGamFDQWdJQ0FnSUNBZ1BTQmpjbVZoZEdWQmNuSmhlVTFsZEdodlpDZ3dLVnh1SUNBZ0lDd2dZWEp5WVhsR2FXeDBaWElnSUNBZ0lDQWdJQ0E5SUdOeVpXRjBaVUZ5Y21GNVRXVjBhRzlrS0RJcFhHNGdJQ0FnTENCaGNuSmhlVk52YldVZ0lDQWdJQ0FnSUNBZ0lEMGdZM0psWVhSbFFYSnlZWGxOWlhSb2IyUW9NeWxjYmlBZ0lDQXNJR0Z5Y21GNVJYWmxjbmtnSUNBZ0lDQWdJQ0FnUFNCamNtVmhkR1ZCY25KaGVVMWxkR2h2WkNnMEtWeHVJQ0FnSUN3Z1lYSnlZWGxHYVc1a0lDQWdJQ0FnSUNBZ0lDQTlJR055WldGMFpVRnljbUY1VFdWMGFHOWtLRFVwWEc0Z0lDQWdMQ0JoY25KaGVVWnBibVJKYm1SbGVDQWdJQ0FnSUQwZ1kzSmxZWFJsUVhKeVlYbE5aWFJvYjJRb05pbGNiaUFnSUNBc0lHRnljbUY1U1c1amJIVmtaWE1nSUNBZ0lDQWdQU0JqY21WaGRHVkJjbkpoZVVsdVkyeDFaR1Z6S0hSeWRXVXBYRzRnSUNBZ0xDQmhjbkpoZVVsdVpHVjRUMllnSUNBZ0lDQWdJRDBnWTNKbFlYUmxRWEp5WVhsSmJtTnNkV1JsY3lobVlXeHpaU2xjYmlBZ0lDQXNJR0Z5Y21GNVZtRnNkV1Z6SUNBZ0lDQWdJQ0FnUFNCQmNuSmhlVWwwWlhKaGRHOXljeTUyWVd4MVpYTmNiaUFnSUNBc0lHRnljbUY1UzJWNWN5QWdJQ0FnSUNBZ0lDQWdQU0JCY25KaGVVbDBaWEpoZEc5eWN5NXJaWGx6WEc0Z0lDQWdMQ0JoY25KaGVVVnVkSEpwWlhNZ0lDQWdJQ0FnSUQwZ1FYSnlZWGxKZEdWeVlYUnZjbk11Wlc1MGNtbGxjMXh1SUNBZ0lDd2dZWEp5WVhsTVlYTjBTVzVrWlhoUFppQWdJQ0E5SUVGeWNtRjVVSEp2ZEc4dWJHRnpkRWx1WkdWNFQyWmNiaUFnSUNBc0lHRnljbUY1VW1Wa2RXTmxJQ0FnSUNBZ0lDQWdQU0JCY25KaGVWQnliM1J2TG5KbFpIVmpaVnh1SUNBZ0lDd2dZWEp5WVhsU1pXUjFZMlZTYVdkb2RDQWdJQ0E5SUVGeWNtRjVVSEp2ZEc4dWNtVmtkV05sVW1sbmFIUmNiaUFnSUNBc0lHRnljbUY1U205cGJpQWdJQ0FnSUNBZ0lDQWdQU0JCY25KaGVWQnliM1J2TG1wdmFXNWNiaUFnSUNBc0lHRnljbUY1VTI5eWRDQWdJQ0FnSUNBZ0lDQWdQU0JCY25KaGVWQnliM1J2TG5OdmNuUmNiaUFnSUNBc0lHRnljbUY1VTJ4cFkyVWdJQ0FnSUNBZ0lDQWdQU0JCY25KaGVWQnliM1J2TG5Oc2FXTmxYRzRnSUNBZ0xDQmhjbkpoZVZSdlUzUnlhVzVuSUNBZ0lDQWdJRDBnUVhKeVlYbFFjbTkwYnk1MGIxTjBjbWx1WjF4dUlDQWdJQ3dnWVhKeVlYbFViMHh2WTJGc1pWTjBjbWx1WnlBOUlFRnljbUY1VUhKdmRHOHVkRzlNYjJOaGJHVlRkSEpwYm1kY2JpQWdJQ0FzSUVsVVJWSkJWRTlTSUNBZ0lDQWdJQ0FnSUNBZ1BTQjNhM01vSjJsMFpYSmhkRzl5SnlsY2JpQWdJQ0FzSUZSQlJ5QWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQjNhM01vSjNSdlUzUnlhVzVuVkdGbkp5bGNiaUFnSUNBc0lGUlpVRVZFWDBOUFRsTlVVbFZEVkU5U0lDQWdQU0IxYVdRb0ozUjVjR1ZrWDJOdmJuTjBjblZqZEc5eUp5bGNiaUFnSUNBc0lFUkZSbDlEVDA1VFZGSlZRMVJQVWlBZ0lDQWdQU0IxYVdRb0oyUmxabDlqYjI1emRISjFZM1J2Y2ljcFhHNGdJQ0FnTENCQlRFeGZRMDlPVTFSU1ZVTlVUMUpUSUNBZ0lEMGdKSFI1Y0dWa0xrTlBUbE5VVWx4dUlDQWdJQ3dnVkZsUVJVUmZRVkpTUVZrZ0lDQWdJQ0FnSUNBOUlDUjBlWEJsWkM1VVdWQkZSRnh1SUNBZ0lDd2dWa2xGVnlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUNSMGVYQmxaQzVXU1VWWFhHNGdJQ0FnTENCWFVrOU9SMTlNUlU1SFZFZ2dJQ0FnSUNBZ0lEMGdKMWR5YjI1bklHeGxibWQwYUNFbk8xeHVYRzRnSUhaaGNpQWtiV0Z3SUQwZ1kzSmxZWFJsUVhKeVlYbE5aWFJvYjJRb01Td2dablZ1WTNScGIyNG9UeXdnYkdWdVozUm9LWHRjYmlBZ0lDQnlaWFIxY200Z1lXeHNiMk5oZEdVb2MzQmxZMmxsYzBOdmJuTjBjblZqZEc5eUtFOHNJRTliUkVWR1gwTlBUbE5VVWxWRFZFOVNYU2tzSUd4bGJtZDBhQ2s3WEc0Z0lIMHBPMXh1WEc0Z0lIWmhjaUJNU1ZSVVRFVmZSVTVFU1VGT0lEMGdabUZwYkhNb1puVnVZM1JwYjI0b0tYdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGVnBiblE0UVhKeVlYa29ibVYzSUZWcGJuUXhOa0Z5Y21GNUtGc3hYU2t1WW5WbVptVnlLVnN3WFNBOVBUMGdNVHRjYmlBZ2ZTazdYRzVjYmlBZ2RtRnlJRVpQVWtORlJGOVRSVlFnUFNBaElWVnBiblE0UVhKeVlYa2dKaVlnSVNGVmFXNTBPRUZ5Y21GNVcxQlNUMVJQVkZsUVJWMHVjMlYwSUNZbUlHWmhhV3h6S0daMWJtTjBhVzl1S0NsN1hHNGdJQ0FnYm1WM0lGVnBiblE0UVhKeVlYa29NU2t1YzJWMEtIdDlLVHRjYmlBZ2ZTazdYRzVjYmlBZ2RtRnlJSE4wY21samRGUnZUR1Z1WjNSb0lEMGdablZ1WTNScGIyNG9hWFFzSUZOQlRVVXBlMXh1SUNBZ0lHbG1LR2wwSUQwOVBTQjFibVJsWm1sdVpXUXBkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtGZFNUMDVIWDB4RlRrZFVTQ2s3WEc0Z0lDQWdkbUZ5SUc1MWJXSmxjaUE5SUN0cGRGeHVJQ0FnSUNBZ0xDQnNaVzVuZEdnZ1BTQjBiMHhsYm1kMGFDaHBkQ2s3WEc0Z0lDQWdhV1lvVTBGTlJTQW1KaUFoYzJGdFpTaHVkVzFpWlhJc0lHeGxibWQwYUNrcGRHaHliM2NnVW1GdVoyVkZjbkp2Y2loWFVrOU9SMTlNUlU1SFZFZ3BPMXh1SUNBZ0lISmxkSFZ5YmlCc1pXNW5kR2c3WEc0Z0lIMDdYRzVjYmlBZ2RtRnlJSFJ2VDJabWMyVjBJRDBnWm5WdVkzUnBiMjRvYVhRc0lFSlpWRVZUS1h0Y2JpQWdJQ0IyWVhJZ2IyWm1jMlYwSUQwZ2RHOUpiblJsWjJWeUtHbDBLVHRjYmlBZ0lDQnBaaWh2Wm1aelpYUWdQQ0F3SUh4OElHOW1abk5sZENBbElFSlpWRVZUS1hSb2NtOTNJRkpoYm1kbFJYSnliM0lvSjFkeWIyNW5JRzltWm5ObGRDRW5LVHRjYmlBZ0lDQnlaWFIxY200Z2IyWm1jMlYwTzF4dUlDQjlPMXh1WEc0Z0lIWmhjaUIyWVd4cFpHRjBaU0E5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnSUNCcFppaHBjMDlpYW1WamRDaHBkQ2tnSmlZZ1ZGbFFSVVJmUVZKU1FWa2dhVzRnYVhRcGNtVjBkWEp1SUdsME8xeHVJQ0FnSUhSb2NtOTNJRlI1Y0dWRmNuSnZjaWhwZENBcklDY2dhWE1nYm05MElHRWdkSGx3WldRZ1lYSnlZWGtoSnlrN1hHNGdJSDA3WEc1Y2JpQWdkbUZ5SUdGc2JHOWpZWFJsSUQwZ1puVnVZM1JwYjI0b1F5d2diR1Z1WjNSb0tYdGNiaUFnSUNCcFppZ2hLR2x6VDJKcVpXTjBLRU1wSUNZbUlGUlpVRVZFWDBOUFRsTlVVbFZEVkU5U0lHbHVJRU1wS1h0Y2JpQWdJQ0FnSUhSb2NtOTNJRlI1Y0dWRmNuSnZjaWduU1hRZ2FYTWdibTkwSUdFZ2RIbHdaV1FnWVhKeVlYa2dZMjl1YzNSeWRXTjBiM0loSnlrN1hHNGdJQ0FnZlNCeVpYUjFjbTRnYm1WM0lFTW9iR1Z1WjNSb0tUdGNiaUFnZlR0Y2JseHVJQ0IyWVhJZ2MzQmxZMmxsYzBaeWIyMU1hWE4wSUQwZ1puVnVZM1JwYjI0b1R5d2diR2x6ZENsN1hHNGdJQ0FnY21WMGRYSnVJR1p5YjIxTWFYTjBLSE53WldOcFpYTkRiMjV6ZEhKMVkzUnZjaWhQTENCUFcwUkZSbDlEVDA1VFZGSlZRMVJQVWwwcExDQnNhWE4wS1R0Y2JpQWdmVHRjYmx4dUlDQjJZWElnWm5KdmJVeHBjM1FnUFNCbWRXNWpkR2x2YmloRExDQnNhWE4wS1h0Y2JpQWdJQ0IyWVhJZ2FXNWtaWGdnSUQwZ01GeHVJQ0FnSUNBZ0xDQnNaVzVuZEdnZ1BTQnNhWE4wTG14bGJtZDBhRnh1SUNBZ0lDQWdMQ0J5WlhOMWJIUWdQU0JoYkd4dlkyRjBaU2hETENCc1pXNW5kR2dwTzF4dUlDQWdJSGRvYVd4bEtHeGxibWQwYUNBK0lHbHVaR1Y0S1hKbGMzVnNkRnRwYm1SbGVGMGdQU0JzYVhOMFcybHVaR1Y0S3l0ZE8xeHVJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzRnSUgwN1hHNWNiaUFnZG1GeUlHRmtaRWRsZEhSbGNpQTlJR1oxYm1OMGFXOXVLR2wwTENCclpYa3NJR2x1ZEdWeWJtRnNLWHRjYmlBZ0lDQmtVQ2hwZEN3Z2EyVjVMQ0I3WjJWME9pQm1kVzVqZEdsdmJpZ3BleUJ5WlhSMWNtNGdkR2hwY3k1ZlpGdHBiblJsY201aGJGMDdJSDE5S1R0Y2JpQWdmVHRjYmx4dUlDQjJZWElnSkdaeWIyMGdQU0JtZFc1amRHbHZiaUJtY205dEtITnZkWEpqWlNBdktpd2diV0Z3Wm00c0lIUm9hWE5CY21jZ0tpOHBlMXh1SUNBZ0lIWmhjaUJQSUNBZ0lDQWdJRDBnZEc5UFltcGxZM1FvYzI5MWNtTmxLVnh1SUNBZ0lDQWdMQ0JoVEdWdUlDQWdJRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhRnh1SUNBZ0lDQWdMQ0J0WVhCbWJpQWdJRDBnWVV4bGJpQStJREVnUHlCaGNtZDFiV1Z1ZEhOYk1WMGdPaUIxYm1SbFptbHVaV1JjYmlBZ0lDQWdJQ3dnYldGd2NHbHVaeUE5SUcxaGNHWnVJQ0U5UFNCMWJtUmxabWx1WldSY2JpQWdJQ0FnSUN3Z2FYUmxja1p1SUNBOUlHZGxkRWwwWlhKR2JpaFBLVnh1SUNBZ0lDQWdMQ0JwTENCc1pXNW5kR2dzSUhaaGJIVmxjeXdnY21WemRXeDBMQ0J6ZEdWd0xDQnBkR1Z5WVhSdmNqdGNiaUFnSUNCcFppaHBkR1Z5Um00Z0lUMGdkVzVrWldacGJtVmtJQ1ltSUNGcGMwRnljbUY1U1hSbGNpaHBkR1Z5Um00cEtYdGNiaUFnSUNBZ0lHWnZjaWhwZEdWeVlYUnZjaUE5SUdsMFpYSkdiaTVqWVd4c0tFOHBMQ0IyWVd4MVpYTWdQU0JiWFN3Z2FTQTlJREE3SUNFb2MzUmxjQ0E5SUdsMFpYSmhkRzl5TG01bGVIUW9LU2t1Wkc5dVpUc2dhU3NyS1h0Y2JpQWdJQ0FnSUNBZ2RtRnNkV1Z6TG5CMWMyZ29jM1JsY0M1MllXeDFaU2s3WEc0Z0lDQWdJQ0I5SUU4Z1BTQjJZV3gxWlhNN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtS0cxaGNIQnBibWNnSmlZZ1lVeGxiaUErSURJcGJXRndabTRnUFNCamRIZ29iV0Z3Wm00c0lHRnlaM1Z0Wlc1MGMxc3lYU3dnTWlrN1hHNGdJQ0FnWm05eUtHa2dQU0F3TENCc1pXNW5kR2dnUFNCMGIweGxibWQwYUNoUExteGxibWQwYUNrc0lISmxjM1ZzZENBOUlHRnNiRzlqWVhSbEtIUm9hWE1zSUd4bGJtZDBhQ2s3SUd4bGJtZDBhQ0ErSUdrN0lHa3JLeWw3WEc0Z0lDQWdJQ0J5WlhOMWJIUmJhVjBnUFNCdFlYQndhVzVuSUQ4Z2JXRndabTRvVDF0cFhTd2dhU2tnT2lCUFcybGRPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnY21WemRXeDBPMXh1SUNCOU8xeHVYRzRnSUhaaGNpQWtiMllnUFNCbWRXNWpkR2x2YmlCdlppZ3ZLaTR1TG1sMFpXMXpLaThwZTF4dUlDQWdJSFpoY2lCcGJtUmxlQ0FnUFNBd1hHNGdJQ0FnSUNBc0lHeGxibWQwYUNBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdoY2JpQWdJQ0FnSUN3Z2NtVnpkV3gwSUQwZ1lXeHNiMk5oZEdVb2RHaHBjeXdnYkdWdVozUm9LVHRjYmlBZ0lDQjNhR2xzWlNoc1pXNW5kR2dnUGlCcGJtUmxlQ2x5WlhOMWJIUmJhVzVrWlhoZElEMGdZWEpuZFcxbGJuUnpXMmx1WkdWNEt5dGRPMXh1SUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFE3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdhVTlUSUZOaFptRnlhU0EyTG5nZ1ptRnBiSE1nYUdWeVpWeHVJQ0IyWVhJZ1ZFOWZURTlEUVV4RlgwSlZSeUE5SUNFaFZXbHVkRGhCY25KaGVTQW1KaUJtWVdsc2N5aG1kVzVqZEdsdmJpZ3BleUJoY25KaGVWUnZURzlqWVd4bFUzUnlhVzVuTG1OaGJHd29ibVYzSUZWcGJuUTRRWEp5WVhrb01Ta3BPeUI5S1R0Y2JseHVJQ0IyWVhJZ0pIUnZURzlqWVd4bFUzUnlhVzVuSUQwZ1puVnVZM1JwYjI0Z2RHOU1iMk5oYkdWVGRISnBibWNvS1h0Y2JpQWdJQ0J5WlhSMWNtNGdZWEp5WVhsVWIweHZZMkZzWlZOMGNtbHVaeTVoY0hCc2VTaFVUMTlNVDBOQlRFVmZRbFZISUQ4Z1lYSnlZWGxUYkdsalpTNWpZV3hzS0haaGJHbGtZWFJsS0hSb2FYTXBLU0E2SUhaaGJHbGtZWFJsS0hSb2FYTXBMQ0JoY21kMWJXVnVkSE1wTzF4dUlDQjlPMXh1WEc0Z0lIWmhjaUJ3Y205MGJ5QTlJSHRjYmlBZ0lDQmpiM0I1VjJsMGFHbHVPaUJtZFc1amRHbHZiaUJqYjNCNVYybDBhR2x1S0hSaGNtZGxkQ3dnYzNSaGNuUWdMeW9zSUdWdVpDQXFMeWw3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZWEp5WVhsRGIzQjVWMmwwYUdsdUxtTmhiR3dvZG1Gc2FXUmhkR1VvZEdocGN5a3NJSFJoY21kbGRDd2djM1JoY25Rc0lHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BpQXlJRDhnWVhKbmRXMWxiblJ6V3pKZElEb2dkVzVrWldacGJtVmtLVHRjYmlBZ0lDQjlMRnh1SUNBZ0lHVjJaWEo1T2lCbWRXNWpkR2x2YmlCbGRtVnllU2hqWVd4c1ltRmphMlp1SUM4cUxDQjBhR2x6UVhKbklDb3ZLWHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmhjbkpoZVVWMlpYSjVLSFpoYkdsa1lYUmxLSFJvYVhNcExDQmpZV3hzWW1GamEyWnVMQ0JoY21kMWJXVnVkSE11YkdWdVozUm9JRDRnTVNBL0lHRnlaM1Z0Wlc1MGMxc3hYU0E2SUhWdVpHVm1hVzVsWkNrN1hHNGdJQ0FnZlN4Y2JpQWdJQ0JtYVd4c09pQm1kVzVqZEdsdmJpQm1hV3hzS0haaGJIVmxJQzhxTENCemRHRnlkQ3dnWlc1a0lDb3ZLWHNnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0YkdsdVpTQnVieTExYm5WelpXUXRkbUZ5YzF4dUlDQWdJQ0FnY21WMGRYSnVJR0Z5Y21GNVJtbHNiQzVoY0hCc2VTaDJZV3hwWkdGMFpTaDBhR2x6S1N3Z1lYSm5kVzFsYm5SektUdGNiaUFnSUNCOUxGeHVJQ0FnSUdacGJIUmxjam9nWm5WdVkzUnBiMjRnWm1sc2RHVnlLR05oYkd4aVlXTnJabTRnTHlvc0lIUm9hWE5CY21jZ0tpOHBlMXh1SUNBZ0lDQWdjbVYwZFhKdUlITndaV05wWlhOR2NtOXRUR2x6ZENoMGFHbHpMQ0JoY25KaGVVWnBiSFJsY2loMllXeHBaR0YwWlNoMGFHbHpLU3dnWTJGc2JHSmhZMnRtYml4Y2JpQWdJQ0FnSUNBZ1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lERWdQeUJoY21kMWJXVnVkSE5iTVYwZ09pQjFibVJsWm1sdVpXUXBLVHRjYmlBZ0lDQjlMRnh1SUNBZ0lHWnBibVE2SUdaMWJtTjBhVzl1SUdacGJtUW9jSEpsWkdsallYUmxJQzhxTENCMGFHbHpRWEpuSUNvdktYdGNiaUFnSUNBZ0lISmxkSFZ5YmlCaGNuSmhlVVpwYm1Rb2RtRnNhV1JoZEdVb2RHaHBjeWtzSUhCeVpXUnBZMkYwWlN3Z1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lERWdQeUJoY21kMWJXVnVkSE5iTVYwZ09pQjFibVJsWm1sdVpXUXBPMXh1SUNBZ0lIMHNYRzRnSUNBZ1ptbHVaRWx1WkdWNE9pQm1kVzVqZEdsdmJpQm1hVzVrU1c1a1pYZ29jSEpsWkdsallYUmxJQzhxTENCMGFHbHpRWEpuSUNvdktYdGNiaUFnSUNBZ0lISmxkSFZ5YmlCaGNuSmhlVVpwYm1SSmJtUmxlQ2gyWVd4cFpHRjBaU2gwYUdsektTd2djSEpsWkdsallYUmxMQ0JoY21kMWJXVnVkSE11YkdWdVozUm9JRDRnTVNBL0lHRnlaM1Z0Wlc1MGMxc3hYU0E2SUhWdVpHVm1hVzVsWkNrN1hHNGdJQ0FnZlN4Y2JpQWdJQ0JtYjNKRllXTm9PaUJtZFc1amRHbHZiaUJtYjNKRllXTm9LR05oYkd4aVlXTnJabTRnTHlvc0lIUm9hWE5CY21jZ0tpOHBlMXh1SUNBZ0lDQWdZWEp5WVhsR2IzSkZZV05vS0haaGJHbGtZWFJsS0hSb2FYTXBMQ0JqWVd4c1ltRmphMlp1TENCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUQ0Z01TQS9JR0Z5WjNWdFpXNTBjMXN4WFNBNklIVnVaR1ZtYVc1bFpDazdYRzRnSUNBZ2ZTeGNiaUFnSUNCcGJtUmxlRTltT2lCbWRXNWpkR2x2YmlCcGJtUmxlRTltS0hObFlYSmphRVZzWlcxbGJuUWdMeW9zSUdaeWIyMUpibVJsZUNBcUx5bDdYRzRnSUNBZ0lDQnlaWFIxY200Z1lYSnlZWGxKYm1SbGVFOW1LSFpoYkdsa1lYUmxLSFJvYVhNcExDQnpaV0Z5WTJoRmJHVnRaVzUwTENCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUQ0Z01TQS9JR0Z5WjNWdFpXNTBjMXN4WFNBNklIVnVaR1ZtYVc1bFpDazdYRzRnSUNBZ2ZTeGNiaUFnSUNCcGJtTnNkV1JsY3pvZ1puVnVZM1JwYjI0Z2FXNWpiSFZrWlhNb2MyVmhjbU5vUld4bGJXVnVkQ0F2S2l3Z1puSnZiVWx1WkdWNElDb3ZLWHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmhjbkpoZVVsdVkyeDFaR1Z6S0haaGJHbGtZWFJsS0hSb2FYTXBMQ0J6WldGeVkyaEZiR1Z0Wlc1MExDQmhjbWQxYldWdWRITXViR1Z1WjNSb0lENGdNU0EvSUdGeVozVnRaVzUwYzFzeFhTQTZJSFZ1WkdWbWFXNWxaQ2s3WEc0Z0lDQWdmU3hjYmlBZ0lDQnFiMmx1T2lCbWRXNWpkR2x2YmlCcWIybHVLSE5sY0dGeVlYUnZjaWw3SUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFd4cGJtVWdibTh0ZFc1MWMyVmtMWFpoY25OY2JpQWdJQ0FnSUhKbGRIVnliaUJoY25KaGVVcHZhVzR1WVhCd2JIa29kbUZzYVdSaGRHVW9kR2hwY3lrc0lHRnlaM1Z0Wlc1MGN5azdYRzRnSUNBZ2ZTeGNiaUFnSUNCc1lYTjBTVzVrWlhoUFpqb2dablZ1WTNScGIyNGdiR0Z6ZEVsdVpHVjRUMllvYzJWaGNtTm9SV3hsYldWdWRDQXZLaXdnWm5KdmJVbHVaR1Y0SUNvdktYc2dMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRiR2x1WlNCdWJ5MTFiblZ6WldRdGRtRnljMXh1SUNBZ0lDQWdjbVYwZFhKdUlHRnljbUY1VEdGemRFbHVaR1Y0VDJZdVlYQndiSGtvZG1Gc2FXUmhkR1VvZEdocGN5a3NJR0Z5WjNWdFpXNTBjeWs3WEc0Z0lDQWdmU3hjYmlBZ0lDQnRZWEE2SUdaMWJtTjBhVzl1SUcxaGNDaHRZWEJtYmlBdktpd2dkR2hwYzBGeVp5QXFMeWw3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdKRzFoY0NoMllXeHBaR0YwWlNoMGFHbHpLU3dnYldGd1ptNHNJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQaUF4SUQ4Z1lYSm5kVzFsYm5Seld6RmRJRG9nZFc1a1pXWnBibVZrS1R0Y2JpQWdJQ0I5TEZ4dUlDQWdJSEpsWkhWalpUb2dablZ1WTNScGIyNGdjbVZrZFdObEtHTmhiR3hpWVdOclptNGdMeW9zSUdsdWFYUnBZV3hXWVd4MVpTQXFMeWw3SUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFd4cGJtVWdibTh0ZFc1MWMyVmtMWFpoY25OY2JpQWdJQ0FnSUhKbGRIVnliaUJoY25KaGVWSmxaSFZqWlM1aGNIQnNlU2gyWVd4cFpHRjBaU2gwYUdsektTd2dZWEpuZFcxbGJuUnpLVHRjYmlBZ0lDQjlMRnh1SUNBZ0lISmxaSFZqWlZKcFoyaDBPaUJtZFc1amRHbHZiaUJ5WldSMVkyVlNhV2RvZENoallXeHNZbUZqYTJadUlDOHFMQ0JwYm1sMGFXRnNWbUZzZFdVZ0tpOHBleUF2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bElHNXZMWFZ1ZFhObFpDMTJZWEp6WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZWEp5WVhsU1pXUjFZMlZTYVdkb2RDNWhjSEJzZVNoMllXeHBaR0YwWlNoMGFHbHpLU3dnWVhKbmRXMWxiblJ6S1R0Y2JpQWdJQ0I5TEZ4dUlDQWdJSEpsZG1WeWMyVTZJR1oxYm1OMGFXOXVJSEpsZG1WeWMyVW9LWHRjYmlBZ0lDQWdJSFpoY2lCMGFHRjBJQ0FnUFNCMGFHbHpYRzRnSUNBZ0lDQWdJQ3dnYkdWdVozUm9JRDBnZG1Gc2FXUmhkR1VvZEdoaGRDa3ViR1Z1WjNSb1hHNGdJQ0FnSUNBZ0lDd2diV2xrWkd4bElEMGdUV0YwYUM1bWJHOXZjaWhzWlc1bmRHZ2dMeUF5S1Z4dUlDQWdJQ0FnSUNBc0lHbHVaR1Y0SUNBOUlEQmNiaUFnSUNBZ0lDQWdMQ0IyWVd4MVpUdGNiaUFnSUNBZ0lIZG9hV3hsS0dsdVpHVjRJRHdnYldsa1pHeGxLWHRjYmlBZ0lDQWdJQ0FnZG1Gc2RXVWdJQ0FnSUNBZ0lDQTlJSFJvWVhSYmFXNWtaWGhkTzF4dUlDQWdJQ0FnSUNCMGFHRjBXMmx1WkdWNEt5dGRJRDBnZEdoaGRGc3RMV3hsYm1kMGFGMDdYRzRnSUNBZ0lDQWdJSFJvWVhSYmJHVnVaM1JvWFNBZ1BTQjJZV3gxWlR0Y2JpQWdJQ0FnSUgwZ2NtVjBkWEp1SUhSb1lYUTdYRzRnSUNBZ2ZTeGNiaUFnSUNCemIyMWxPaUJtZFc1amRHbHZiaUJ6YjIxbEtHTmhiR3hpWVdOclptNGdMeW9zSUhSb2FYTkJjbWNnS2k4cGUxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdGeWNtRjVVMjl0WlNoMllXeHBaR0YwWlNoMGFHbHpLU3dnWTJGc2JHSmhZMnRtYml3Z1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lERWdQeUJoY21kMWJXVnVkSE5iTVYwZ09pQjFibVJsWm1sdVpXUXBPMXh1SUNBZ0lIMHNYRzRnSUNBZ2MyOXlkRG9nWm5WdVkzUnBiMjRnYzI5eWRDaGpiMjF3WVhKbFptNHBlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHRnljbUY1VTI5eWRDNWpZV3hzS0haaGJHbGtZWFJsS0hSb2FYTXBMQ0JqYjIxd1lYSmxabTRwTzF4dUlDQWdJSDBzWEc0Z0lDQWdjM1ZpWVhKeVlYazZJR1oxYm1OMGFXOXVJSE4xWW1GeWNtRjVLR0psWjJsdUxDQmxibVFwZTF4dUlDQWdJQ0FnZG1GeUlFOGdJQ0FnSUNBOUlIWmhiR2xrWVhSbEtIUm9hWE1wWEc0Z0lDQWdJQ0FnSUN3Z2JHVnVaM1JvSUQwZ1R5NXNaVzVuZEdoY2JpQWdJQ0FnSUNBZ0xDQWtZbVZuYVc0Z1BTQjBiMGx1WkdWNEtHSmxaMmx1TENCc1pXNW5kR2dwTzF4dUlDQWdJQ0FnY21WMGRYSnVJRzVsZHlBb2MzQmxZMmxsYzBOdmJuTjBjblZqZEc5eUtFOHNJRTliUkVWR1gwTlBUbE5VVWxWRFZFOVNYU2twS0Z4dUlDQWdJQ0FnSUNCUExtSjFabVpsY2l4Y2JpQWdJQ0FnSUNBZ1R5NWllWFJsVDJabWMyVjBJQ3NnSkdKbFoybHVJQ29nVHk1Q1dWUkZVMTlRUlZKZlJVeEZUVVZPVkN4Y2JpQWdJQ0FnSUNBZ2RHOU1aVzVuZEdnb0tHVnVaQ0E5UFQwZ2RXNWtaV1pwYm1Wa0lEOGdiR1Z1WjNSb0lEb2dkRzlKYm1SbGVDaGxibVFzSUd4bGJtZDBhQ2twSUMwZ0pHSmxaMmx1S1Z4dUlDQWdJQ0FnS1R0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzVjYmlBZ2RtRnlJQ1J6YkdsalpTQTlJR1oxYm1OMGFXOXVJSE5zYVdObEtITjBZWEowTENCbGJtUXBlMXh1SUNBZ0lISmxkSFZ5YmlCemNHVmphV1Z6Um5KdmJVeHBjM1FvZEdocGN5d2dZWEp5WVhsVGJHbGpaUzVqWVd4c0tIWmhiR2xrWVhSbEtIUm9hWE1wTENCemRHRnlkQ3dnWlc1a0tTazdYRzRnSUgwN1hHNWNiaUFnZG1GeUlDUnpaWFFnUFNCbWRXNWpkR2x2YmlCelpYUW9ZWEp5WVhsTWFXdGxJQzhxTENCdlptWnpaWFFnS2k4cGUxeHVJQ0FnSUhaaGJHbGtZWFJsS0hSb2FYTXBPMXh1SUNBZ0lIWmhjaUJ2Wm1aelpYUWdQU0IwYjA5bVpuTmxkQ2hoY21kMWJXVnVkSE5iTVYwc0lERXBYRzRnSUNBZ0lDQXNJR3hsYm1kMGFDQTlJSFJvYVhNdWJHVnVaM1JvWEc0Z0lDQWdJQ0FzSUhOeVl5QWdJQ0E5SUhSdlQySnFaV04wS0dGeWNtRjVUR2xyWlNsY2JpQWdJQ0FnSUN3Z2JHVnVJQ0FnSUQwZ2RHOU1aVzVuZEdnb2MzSmpMbXhsYm1kMGFDbGNiaUFnSUNBZ0lDd2dhVzVrWlhnZ0lEMGdNRHRjYmlBZ0lDQnBaaWhzWlc0Z0t5QnZabVp6WlhRZ1BpQnNaVzVuZEdncGRHaHliM2NnVW1GdVoyVkZjbkp2Y2loWFVrOU9SMTlNUlU1SFZFZ3BPMXh1SUNBZ0lIZG9hV3hsS0dsdVpHVjRJRHdnYkdWdUtYUm9hWE5iYjJabWMyVjBJQ3NnYVc1a1pYaGRJRDBnYzNKalcybHVaR1Y0S3l0ZE8xeHVJQ0I5TzF4dVhHNGdJSFpoY2lBa2FYUmxjbUYwYjNKeklEMGdlMXh1SUNBZ0lHVnVkSEpwWlhNNklHWjFibU4wYVc5dUlHVnVkSEpwWlhNb0tYdGNiaUFnSUNBZ0lISmxkSFZ5YmlCaGNuSmhlVVZ1ZEhKcFpYTXVZMkZzYkNoMllXeHBaR0YwWlNoMGFHbHpLU2s3WEc0Z0lDQWdmU3hjYmlBZ0lDQnJaWGx6T2lCbWRXNWpkR2x2YmlCclpYbHpLQ2w3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZWEp5WVhsTFpYbHpMbU5oYkd3b2RtRnNhV1JoZEdVb2RHaHBjeWtwTzF4dUlDQWdJSDBzWEc0Z0lDQWdkbUZzZFdWek9pQm1kVzVqZEdsdmJpQjJZV3gxWlhNb0tYdGNiaUFnSUNBZ0lISmxkSFZ5YmlCaGNuSmhlVlpoYkhWbGN5NWpZV3hzS0haaGJHbGtZWFJsS0hSb2FYTXBLVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnZG1GeUlHbHpWRUZKYm1SbGVDQTlJR1oxYm1OMGFXOXVLSFJoY21kbGRDd2dhMlY1S1h0Y2JpQWdJQ0J5WlhSMWNtNGdhWE5QWW1wbFkzUW9kR0Z5WjJWMEtWeHVJQ0FnSUNBZ0ppWWdkR0Z5WjJWMFcxUlpVRVZFWDBGU1VrRlpYVnh1SUNBZ0lDQWdKaVlnZEhsd1pXOW1JR3RsZVNBaFBTQW5jM2x0WW05c0oxeHVJQ0FnSUNBZ0ppWWdhMlY1SUdsdUlIUmhjbWRsZEZ4dUlDQWdJQ0FnSmlZZ1UzUnlhVzVuS0N0clpYa3BJRDA5SUZOMGNtbHVaeWhyWlhrcE8xeHVJQ0I5TzF4dUlDQjJZWElnSkdkbGRFUmxjMk1nUFNCbWRXNWpkR2x2YmlCblpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lvZEdGeVoyVjBMQ0JyWlhrcGUxeHVJQ0FnSUhKbGRIVnliaUJwYzFSQlNXNWtaWGdvZEdGeVoyVjBMQ0JyWlhrZ1BTQjBiMUJ5YVcxcGRHbDJaU2hyWlhrc0lIUnlkV1VwS1Z4dUlDQWdJQ0FnUHlCd2NtOXdaWEowZVVSbGMyTW9NaXdnZEdGeVoyVjBXMnRsZVYwcFhHNGdJQ0FnSUNBNklHZFBVRVFvZEdGeVoyVjBMQ0JyWlhrcE8xeHVJQ0I5TzF4dUlDQjJZWElnSkhObGRFUmxjMk1nUFNCbWRXNWpkR2x2YmlCa1pXWnBibVZRY205d1pYSjBlU2gwWVhKblpYUXNJR3RsZVN3Z1pHVnpZeWw3WEc0Z0lDQWdhV1lvYVhOVVFVbHVaR1Y0S0hSaGNtZGxkQ3dnYTJWNUlEMGdkRzlRY21sdGFYUnBkbVVvYTJWNUxDQjBjblZsS1NsY2JpQWdJQ0FnSUNZbUlHbHpUMkpxWldOMEtHUmxjMk1wWEc0Z0lDQWdJQ0FtSmlCb1lYTW9aR1Z6WXl3Z0ozWmhiSFZsSnlsY2JpQWdJQ0FnSUNZbUlDRm9ZWE1vWkdWell5d2dKMmRsZENjcFhHNGdJQ0FnSUNBbUppQWhhR0Z6S0dSbGMyTXNJQ2R6WlhRbktWeHVJQ0FnSUNBZ0x5OGdWRTlFVHpvZ1lXUmtJSFpoYkdsa1lYUnBiMjRnWkdWelkzSnBjSFJ2Y2lCM0wyOGdZMkZzYkdsdVp5QmhZMk5sYzNOdmNuTmNiaUFnSUNBZ0lDWW1JQ0ZrWlhOakxtTnZibVpwWjNWeVlXSnNaVnh1SUNBZ0lDQWdKaVlnS0NGb1lYTW9aR1Z6WXl3Z0ozZHlhWFJoWW14bEp5a2dmSHdnWkdWell5NTNjbWwwWVdKc1pTbGNiaUFnSUNBZ0lDWW1JQ2doYUdGektHUmxjMk1zSUNkbGJuVnRaWEpoWW14bEp5a2dmSHdnWkdWell5NWxiblZ0WlhKaFlteGxLVnh1SUNBZ0lDbDdYRzRnSUNBZ0lDQjBZWEpuWlhSYmEyVjVYU0E5SUdSbGMyTXVkbUZzZFdVN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdGeVoyVjBPMXh1SUNBZ0lIMGdaV3h6WlNCeVpYUjFjbTRnWkZBb2RHRnlaMlYwTENCclpYa3NJR1JsYzJNcE8xeHVJQ0I5TzF4dVhHNGdJR2xtS0NGQlRFeGZRMDlPVTFSU1ZVTlVUMUpUS1h0Y2JpQWdJQ0FrUjA5UVJDNW1JRDBnSkdkbGRFUmxjMk03WEc0Z0lDQWdKRVJRTG1ZZ0lDQTlJQ1J6WlhSRVpYTmpPMXh1SUNCOVhHNWNiaUFnSkdWNGNHOXlkQ2drWlhod2IzSjBMbE1nS3lBa1pYaHdiM0owTGtZZ0tpQWhRVXhNWDBOUFRsTlVVbFZEVkU5U1V5d2dKMDlpYW1WamRDY3NJSHRjYmlBZ0lDQm5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJNklDUm5aWFJFWlhOakxGeHVJQ0FnSUdSbFptbHVaVkJ5YjNCbGNuUjVPaUFnSUNBZ0lDQWdJQ0FnSkhObGRFUmxjMk5jYmlBZ2ZTazdYRzVjYmlBZ2FXWW9abUZwYkhNb1puVnVZM1JwYjI0b0tYc2dZWEp5WVhsVWIxTjBjbWx1Wnk1allXeHNLSHQ5S1RzZ2ZTa3BlMXh1SUNBZ0lHRnljbUY1Vkc5VGRISnBibWNnUFNCaGNuSmhlVlJ2VEc5allXeGxVM1J5YVc1bklEMGdablZ1WTNScGIyNGdkRzlUZEhKcGJtY29LWHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmhjbkpoZVVwdmFXNHVZMkZzYkNoMGFHbHpLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0IyWVhJZ0pGUjVjR1ZrUVhKeVlYbFFjbTkwYjNSNWNHVWtJRDBnY21Wa1pXWnBibVZCYkd3b2UzMHNJSEJ5YjNSdktUdGNiaUFnY21Wa1pXWnBibVZCYkd3b0pGUjVjR1ZrUVhKeVlYbFFjbTkwYjNSNWNHVWtMQ0FrYVhSbGNtRjBiM0p6S1R0Y2JpQWdhR2xrWlNna1ZIbHdaV1JCY25KaGVWQnliM1J2ZEhsd1pTUXNJRWxVUlZKQlZFOVNMQ0FrYVhSbGNtRjBiM0p6TG5aaGJIVmxjeWs3WEc0Z0lISmxaR1ZtYVc1bFFXeHNLQ1JVZVhCbFpFRnljbUY1VUhKdmRHOTBlWEJsSkN3Z2UxeHVJQ0FnSUhOc2FXTmxPaUFnSUNBZ0lDQWdJQ0FrYzJ4cFkyVXNYRzRnSUNBZ2MyVjBPaUFnSUNBZ0lDQWdJQ0FnSUNSelpYUXNYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSTZJQ0FnSUdaMWJtTjBhVzl1S0NsN0lDOHFJRzV2YjNBZ0tpOGdmU3hjYmlBZ0lDQjBiMU4wY21sdVp6b2dJQ0FnSUNBZ1lYSnlZWGxVYjFOMGNtbHVaeXhjYmlBZ0lDQjBiMHh2WTJGc1pWTjBjbWx1WnpvZ0pIUnZURzlqWVd4bFUzUnlhVzVuWEc0Z0lIMHBPMXh1SUNCaFpHUkhaWFIwWlhJb0pGUjVjR1ZrUVhKeVlYbFFjbTkwYjNSNWNHVWtMQ0FuWW5WbVptVnlKeXdnSjJJbktUdGNiaUFnWVdSa1IyVjBkR1Z5S0NSVWVYQmxaRUZ5Y21GNVVISnZkRzkwZVhCbEpDd2dKMko1ZEdWUFptWnpaWFFuTENBbmJ5Y3BPMXh1SUNCaFpHUkhaWFIwWlhJb0pGUjVjR1ZrUVhKeVlYbFFjbTkwYjNSNWNHVWtMQ0FuWW5sMFpVeGxibWQwYUNjc0lDZHNKeWs3WEc0Z0lHRmtaRWRsZEhSbGNpZ2tWSGx3WldSQmNuSmhlVkJ5YjNSdmRIbHdaU1FzSUNkc1pXNW5kR2duTENBblpTY3BPMXh1SUNCa1VDZ2tWSGx3WldSQmNuSmhlVkJ5YjNSdmRIbHdaU1FzSUZSQlJ5d2dlMXh1SUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRvS1hzZ2NtVjBkWEp1SUhSb2FYTmJWRmxRUlVSZlFWSlNRVmxkT3lCOVhHNGdJSDBwTzF4dVhHNGdJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9TMFZaTENCQ1dWUkZVeXdnZDNKaGNIQmxjaXdnUTB4QlRWQkZSQ2w3WEc0Z0lDQWdRMHhCVFZCRlJDQTlJQ0VoUTB4QlRWQkZSRHRjYmlBZ0lDQjJZWElnVGtGTlJTQWdJQ0FnSUNBOUlFdEZXU0FySUNoRFRFRk5VRVZFSUQ4Z0owTnNZVzF3WldRbklEb2dKeWNwSUNzZ0owRnljbUY1SjF4dUlDQWdJQ0FnTENCSlUwNVVYMVZKVGxRNElEMGdUa0ZOUlNBaFBTQW5WV2x1ZERoQmNuSmhlU2RjYmlBZ0lDQWdJQ3dnUjBWVVZFVlNJQ0FnSUNBOUlDZG5aWFFuSUNzZ1MwVlpYRzRnSUNBZ0lDQXNJRk5GVkZSRlVpQWdJQ0FnUFNBbmMyVjBKeUFySUV0RldWeHVJQ0FnSUNBZ0xDQlVlWEJsWkVGeWNtRjVJRDBnWjJ4dlltRnNXMDVCVFVWZFhHNGdJQ0FnSUNBc0lFSmhjMlVnSUNBZ0lDQWdQU0JVZVhCbFpFRnljbUY1SUh4OElIdDlYRzRnSUNBZ0lDQXNJRlJCUXlBZ0lDQWdJQ0FnUFNCVWVYQmxaRUZ5Y21GNUlDWW1JR2RsZEZCeWIzUnZkSGx3WlU5bUtGUjVjR1ZrUVhKeVlYa3BYRzRnSUNBZ0lDQXNJRVpQVWtORlJDQWdJQ0FnUFNBaFZIbHdaV1JCY25KaGVTQjhmQ0FoSkhSNWNHVmtMa0ZDVmx4dUlDQWdJQ0FnTENCUElDQWdJQ0FnSUNBZ0lEMGdlMzFjYmlBZ0lDQWdJQ3dnVkhsd1pXUkJjbkpoZVZCeWIzUnZkSGx3WlNBOUlGUjVjR1ZrUVhKeVlYa2dKaVlnVkhsd1pXUkJjbkpoZVZ0UVVrOVVUMVJaVUVWZE8xeHVJQ0FnSUhaaGNpQm5aWFIwWlhJZ1BTQm1kVzVqZEdsdmJpaDBhR0YwTENCcGJtUmxlQ2w3WEc0Z0lDQWdJQ0IyWVhJZ1pHRjBZU0E5SUhSb1lYUXVYMlE3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdaR0YwWVM1MlcwZEZWRlJGVWwwb2FXNWtaWGdnS2lCQ1dWUkZVeUFySUdSaGRHRXVieXdnVEVsVVZFeEZYMFZPUkVsQlRpazdYRzRnSUNBZ2ZUdGNiaUFnSUNCMllYSWdjMlYwZEdWeUlEMGdablZ1WTNScGIyNG9kR2hoZEN3Z2FXNWtaWGdzSUhaaGJIVmxLWHRjYmlBZ0lDQWdJSFpoY2lCa1lYUmhJRDBnZEdoaGRDNWZaRHRjYmlBZ0lDQWdJR2xtS0VOTVFVMVFSVVFwZG1Gc2RXVWdQU0FvZG1Gc2RXVWdQU0JOWVhSb0xuSnZkVzVrS0haaGJIVmxLU2tnUENBd0lEOGdNQ0E2SUhaaGJIVmxJRDRnTUhobVppQS9JREI0Wm1ZZ09pQjJZV3gxWlNBbUlEQjRabVk3WEc0Z0lDQWdJQ0JrWVhSaExuWmJVMFZVVkVWU1hTaHBibVJsZUNBcUlFSlpWRVZUSUNzZ1pHRjBZUzV2TENCMllXeDFaU3dnVEVsVVZFeEZYMFZPUkVsQlRpazdYRzRnSUNBZ2ZUdGNiaUFnSUNCMllYSWdZV1JrUld4bGJXVnVkQ0E5SUdaMWJtTjBhVzl1S0hSb1lYUXNJR2x1WkdWNEtYdGNiaUFnSUNBZ0lHUlFLSFJvWVhRc0lHbHVaR1Y0TENCN1hHNGdJQ0FnSUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1oyVjBkR1Z5S0hSb2FYTXNJR2x1WkdWNEtUdGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnYzJWME9pQm1kVzVqZEdsdmJpaDJZV3gxWlNsN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlITmxkSFJsY2loMGFHbHpMQ0JwYm1SbGVDd2dkbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0JsYm5WdFpYSmhZbXhsT2lCMGNuVmxYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lHbG1LRVpQVWtORlJDbDdYRzRnSUNBZ0lDQlVlWEJsWkVGeWNtRjVJRDBnZDNKaGNIQmxjaWhtZFc1amRHbHZiaWgwYUdGMExDQmtZWFJoTENBa2IyWm1jMlYwTENBa2JHVnVaM1JvS1h0Y2JpQWdJQ0FnSUNBZ1lXNUpibk4wWVc1alpTaDBhR0YwTENCVWVYQmxaRUZ5Y21GNUxDQk9RVTFGTENBblgyUW5LVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHbHVaR1Y0SUNBOUlEQmNiaUFnSUNBZ0lDQWdJQ0FzSUc5bVpuTmxkQ0E5SURCY2JpQWdJQ0FnSUNBZ0lDQXNJR0oxWm1abGNpd2dZbmwwWlV4bGJtZDBhQ3dnYkdWdVozUm9MQ0JyYkdGemN6dGNiaUFnSUNBZ0lDQWdhV1lvSVdselQySnFaV04wS0dSaGRHRXBLWHRjYmlBZ0lDQWdJQ0FnSUNCc1pXNW5kR2dnSUNBZ0lEMGdjM1J5YVdOMFZHOU1aVzVuZEdnb1pHRjBZU3dnZEhKMVpTbGNiaUFnSUNBZ0lDQWdJQ0JpZVhSbFRHVnVaM1JvSUQwZ2JHVnVaM1JvSUNvZ1FsbFVSVk03WEc0Z0lDQWdJQ0FnSUNBZ1luVm1abVZ5SUNBZ0lDQTlJRzVsZHlBa1FYSnlZWGxDZFdabVpYSW9ZbmwwWlV4bGJtZDBhQ2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmloa1lYUmhJR2x1YzNSaGJtTmxiMllnSkVGeWNtRjVRblZtWm1WeUlIeDhJQ2hyYkdGemN5QTlJR05zWVhOemIyWW9aR0YwWVNrcElEMDlJRUZTVWtGWlgwSlZSa1pGVWlCOGZDQnJiR0Z6Y3lBOVBTQlRTRUZTUlVSZlFsVkdSa1ZTS1h0Y2JpQWdJQ0FnSUNBZ0lDQmlkV1ptWlhJZ1BTQmtZWFJoTzF4dUlDQWdJQ0FnSUNBZ0lHOW1abk5sZENBOUlIUnZUMlptYzJWMEtDUnZabVp6WlhRc0lFSlpWRVZUS1R0Y2JpQWdJQ0FnSUNBZ0lDQjJZWElnSkd4bGJpQTlJR1JoZEdFdVlubDBaVXhsYm1kMGFEdGNiaUFnSUNBZ0lDQWdJQ0JwWmlna2JHVnVaM1JvSUQwOVBTQjFibVJsWm1sdVpXUXBlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWW9KR3hsYmlBbElFSlpWRVZUS1hSb2NtOTNJRkpoYm1kbFJYSnliM0lvVjFKUFRrZGZURVZPUjFSSUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdKNWRHVk1aVzVuZEdnZ1BTQWtiR1Z1SUMwZ2IyWm1jMlYwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lvWW5sMFpVeGxibWQwYUNBOElEQXBkR2h5YjNjZ1VtRnVaMlZGY25KdmNpaFhVazlPUjE5TVJVNUhWRWdwTzF4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpZVhSbFRHVnVaM1JvSUQwZ2RHOU1aVzVuZEdnb0pHeGxibWQwYUNrZ0tpQkNXVlJGVXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtS0dKNWRHVk1aVzVuZEdnZ0t5QnZabVp6WlhRZ1BpQWtiR1Z1S1hSb2NtOTNJRkpoYm1kbFJYSnliM0lvVjFKUFRrZGZURVZPUjFSSUtUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2JHVnVaM1JvSUQwZ1lubDBaVXhsYm1kMGFDQXZJRUpaVkVWVE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWW9WRmxRUlVSZlFWSlNRVmtnYVc0Z1pHRjBZU2w3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaeWIyMU1hWE4wS0ZSNWNHVmtRWEp5WVhrc0lHUmhkR0VwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBa1puSnZiUzVqWVd4c0tGUjVjR1ZrUVhKeVlYa3NJR1JoZEdFcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2hwWkdVb2RHaGhkQ3dnSjE5a0p5d2dlMXh1SUNBZ0lDQWdJQ0FnSUdJNklHSjFabVpsY2l4Y2JpQWdJQ0FnSUNBZ0lDQnZPaUJ2Wm1aelpYUXNYRzRnSUNBZ0lDQWdJQ0FnYkRvZ1lubDBaVXhsYm1kMGFDeGNiaUFnSUNBZ0lDQWdJQ0JsT2lCc1pXNW5kR2dzWEc0Z0lDQWdJQ0FnSUNBZ2Rqb2dibVYzSUNSRVlYUmhWbWxsZHloaWRXWm1aWElwWEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjNhR2xzWlNocGJtUmxlQ0E4SUd4bGJtZDBhQ2xoWkdSRmJHVnRaVzUwS0hSb1lYUXNJR2x1WkdWNEt5c3BPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0JVZVhCbFpFRnljbUY1VUhKdmRHOTBlWEJsSUQwZ1ZIbHdaV1JCY25KaGVWdFFVazlVVDFSWlVFVmRJRDBnWTNKbFlYUmxLQ1JVZVhCbFpFRnljbUY1VUhKdmRHOTBlWEJsSkNrN1hHNGdJQ0FnSUNCb2FXUmxLRlI1Y0dWa1FYSnlZWGxRY205MGIzUjVjR1VzSUNkamIyNXpkSEoxWTNSdmNpY3NJRlI1Y0dWa1FYSnlZWGtwTzF4dUlDQWdJSDBnWld4elpTQnBaaWdoSkdsMFpYSkVaWFJsWTNRb1puVnVZM1JwYjI0b2FYUmxjaWw3WEc0Z0lDQWdJQ0F2THlCV09DQjNiM0pyY3lCM2FYUm9JR2wwWlhKaGRHOXljeXdnWW5WMElHWmhhV3h6SUdsdUlHMWhibmtnYjNSb1pYSWdZMkZ6WlhOY2JpQWdJQ0FnSUM4dklHaDBkSEJ6T2k4dlkyOWtaUzVuYjI5bmJHVXVZMjl0TDNBdmRqZ3ZhWE56ZFdWekwyUmxkR0ZwYkQ5cFpEMDBOVFV5WEc0Z0lDQWdJQ0J1WlhjZ1ZIbHdaV1JCY25KaGVTaHVkV3hzS1RzZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJHbHVaU0J1YnkxdVpYZGNiaUFnSUNBZ0lHNWxkeUJVZVhCbFpFRnljbUY1S0dsMFpYSXBPeUF2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bElHNXZMVzVsZDF4dUlDQWdJSDBzSUhSeWRXVXBLWHRjYmlBZ0lDQWdJRlI1Y0dWa1FYSnlZWGtnUFNCM2NtRndjR1Z5S0daMWJtTjBhVzl1S0hSb1lYUXNJR1JoZEdFc0lDUnZabVp6WlhRc0lDUnNaVzVuZEdncGUxeHVJQ0FnSUNBZ0lDQmhia2x1YzNSaGJtTmxLSFJvWVhRc0lGUjVjR1ZrUVhKeVlYa3NJRTVCVFVVcE8xeHVJQ0FnSUNBZ0lDQjJZWElnYTJ4aGMzTTdYRzRnSUNBZ0lDQWdJQzh2SUdCM2MyQWdiVzlrZFd4bElHSjFaeXdnZEdWdGNHOXlZWEpwYkhrZ2NtVnRiM1psSUhaaGJHbGtZWFJwYjI0Z2JHVnVaM1JvSUdadmNpQlZhVzUwT0VGeWNtRjVYRzRnSUNBZ0lDQWdJQzh2SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5M1pXSnpiMk5yWlhSekwzZHpMM0IxYkd3dk5qUTFYRzRnSUNBZ0lDQWdJR2xtS0NGcGMwOWlhbVZqZENoa1lYUmhLU2x5WlhSMWNtNGdibVYzSUVKaGMyVW9jM1J5YVdOMFZHOU1aVzVuZEdnb1pHRjBZU3dnU1ZOT1ZGOVZTVTVVT0NrcE8xeHVJQ0FnSUNBZ0lDQnBaaWhrWVhSaElHbHVjM1JoYm1ObGIyWWdKRUZ5Y21GNVFuVm1abVZ5SUh4OElDaHJiR0Z6Y3lBOUlHTnNZWE56YjJZb1pHRjBZU2twSUQwOUlFRlNVa0ZaWDBKVlJrWkZVaUI4ZkNCcmJHRnpjeUE5UFNCVFNFRlNSVVJmUWxWR1JrVlNLWHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnSkd4bGJtZDBhQ0FoUFQwZ2RXNWtaV1pwYm1Wa1hHNGdJQ0FnSUNBZ0lDQWdJQ0EvSUc1bGR5QkNZWE5sS0dSaGRHRXNJSFJ2VDJabWMyVjBLQ1J2Wm1aelpYUXNJRUpaVkVWVEtTd2dKR3hsYm1kMGFDbGNiaUFnSUNBZ0lDQWdJQ0FnSURvZ0pHOW1abk5sZENBaFBUMGdkVzVrWldacGJtVmtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEOGdibVYzSUVKaGMyVW9aR0YwWVN3Z2RHOVBabVp6WlhRb0pHOW1abk5sZEN3Z1FsbFVSVk1wS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUc1bGR5QkNZWE5sS0dSaGRHRXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUtGUlpVRVZFWDBGU1VrRlpJR2x1SUdSaGRHRXBjbVYwZFhKdUlHWnliMjFNYVhOMEtGUjVjR1ZrUVhKeVlYa3NJR1JoZEdFcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0pHWnliMjB1WTJGc2JDaFVlWEJsWkVGeWNtRjVMQ0JrWVhSaEtUdGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdZWEp5WVhsR2IzSkZZV05vS0ZSQlF5QWhQVDBnUm5WdVkzUnBiMjR1Y0hKdmRHOTBlWEJsSUQ4Z1owOVFUaWhDWVhObEtTNWpiMjVqWVhRb1owOVFUaWhVUVVNcEtTQTZJR2RQVUU0b1FtRnpaU2tzSUdaMWJtTjBhVzl1S0d0bGVTbDdYRzRnSUNBZ0lDQWdJR2xtS0NFb2EyVjVJR2x1SUZSNWNHVmtRWEp5WVhrcEtXaHBaR1VvVkhsd1pXUkJjbkpoZVN3Z2EyVjVMQ0JDWVhObFcydGxlVjBwTzF4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCVWVYQmxaRUZ5Y21GNVcxQlNUMVJQVkZsUVJWMGdQU0JVZVhCbFpFRnljbUY1VUhKdmRHOTBlWEJsTzF4dUlDQWdJQ0FnYVdZb0lVeEpRbEpCVWxrcFZIbHdaV1JCY25KaGVWQnliM1J2ZEhsd1pTNWpiMjV6ZEhKMVkzUnZjaUE5SUZSNWNHVmtRWEp5WVhrN1hHNGdJQ0FnZlZ4dUlDQWdJSFpoY2lBa2JtRjBhWFpsU1hSbGNtRjBiM0lnSUNBOUlGUjVjR1ZrUVhKeVlYbFFjbTkwYjNSNWNHVmJTVlJGVWtGVVQxSmRYRzRnSUNBZ0lDQXNJRU5QVWxKRlExUmZTVlJGVWw5T1FVMUZJRDBnSVNFa2JtRjBhWFpsU1hSbGNtRjBiM0lnSmlZZ0tDUnVZWFJwZG1WSmRHVnlZWFJ2Y2k1dVlXMWxJRDA5SUNkMllXeDFaWE1uSUh4OElDUnVZWFJwZG1WSmRHVnlZWFJ2Y2k1dVlXMWxJRDA5SUhWdVpHVm1hVzVsWkNsY2JpQWdJQ0FnSUN3Z0pHbDBaWEpoZEc5eUlDQWdJQ0FnSUNBZ1BTQWthWFJsY21GMGIzSnpMblpoYkhWbGN6dGNiaUFnSUNCb2FXUmxLRlI1Y0dWa1FYSnlZWGtzSUZSWlVFVkVYME5QVGxOVVVsVkRWRTlTTENCMGNuVmxLVHRjYmlBZ0lDQm9hV1JsS0ZSNWNHVmtRWEp5WVhsUWNtOTBiM1I1Y0dVc0lGUlpVRVZFWDBGU1VrRlpMQ0JPUVUxRktUdGNiaUFnSUNCb2FXUmxLRlI1Y0dWa1FYSnlZWGxRY205MGIzUjVjR1VzSUZaSlJWY3NJSFJ5ZFdVcE8xeHVJQ0FnSUdocFpHVW9WSGx3WldSQmNuSmhlVkJ5YjNSdmRIbHdaU3dnUkVWR1gwTlBUbE5VVWxWRFZFOVNMQ0JVZVhCbFpFRnljbUY1S1R0Y2JseHVJQ0FnSUdsbUtFTk1RVTFRUlVRZ1B5QnVaWGNnVkhsd1pXUkJjbkpoZVNneEtWdFVRVWRkSUNFOUlFNUJUVVVnT2lBaEtGUkJSeUJwYmlCVWVYQmxaRUZ5Y21GNVVISnZkRzkwZVhCbEtTbDdYRzRnSUNBZ0lDQmtVQ2hVZVhCbFpFRnljbUY1VUhKdmRHOTBlWEJsTENCVVFVY3NJSHRjYmlBZ0lDQWdJQ0FnWjJWME9pQm1kVzVqZEdsdmJpZ3BleUJ5WlhSMWNtNGdUa0ZOUlRzZ2ZWeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1QxdE9RVTFGWFNBOUlGUjVjR1ZrUVhKeVlYazdYRzVjYmlBZ0lDQWtaWGh3YjNKMEtDUmxlSEJ2Y25RdVJ5QXJJQ1JsZUhCdmNuUXVWeUFySUNSbGVIQnZjblF1UmlBcUlDaFVlWEJsWkVGeWNtRjVJQ0U5SUVKaGMyVXBMQ0JQS1R0Y2JseHVJQ0FnSUNSbGVIQnZjblFvSkdWNGNHOXlkQzVUTENCT1FVMUZMQ0I3WEc0Z0lDQWdJQ0JDV1ZSRlUxOVFSVkpmUlV4RlRVVk9WRG9nUWxsVVJWTXNYRzRnSUNBZ0lDQm1jbTl0T2lBa1puSnZiU3hjYmlBZ0lDQWdJRzltT2lBa2IyWmNiaUFnSUNCOUtUdGNibHh1SUNBZ0lHbG1LQ0VvUWxsVVJWTmZVRVZTWDBWTVJVMUZUbFFnYVc0Z1ZIbHdaV1JCY25KaGVWQnliM1J2ZEhsd1pTa3BhR2xrWlNoVWVYQmxaRUZ5Y21GNVVISnZkRzkwZVhCbExDQkNXVlJGVTE5UVJWSmZSVXhGVFVWT1ZDd2dRbGxVUlZNcE8xeHVYRzRnSUNBZ0pHVjRjRzl5ZENna1pYaHdiM0owTGxBc0lFNUJUVVVzSUhCeWIzUnZLVHRjYmx4dUlDQWdJSE5sZEZOd1pXTnBaWE1vVGtGTlJTazdYRzVjYmlBZ0lDQWtaWGh3YjNKMEtDUmxlSEJ2Y25RdVVDQXJJQ1JsZUhCdmNuUXVSaUFxSUVaUFVrTkZSRjlUUlZRc0lFNUJUVVVzSUh0elpYUTZJQ1J6WlhSOUtUdGNibHh1SUNBZ0lDUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1UUlDc2dKR1Y0Y0c5eWRDNUdJQ29nSVVOUFVsSkZRMVJmU1ZSRlVsOU9RVTFGTENCT1FVMUZMQ0FrYVhSbGNtRjBiM0p6S1R0Y2JseHVJQ0FnSUNSbGVIQnZjblFvSkdWNGNHOXlkQzVRSUNzZ0pHVjRjRzl5ZEM1R0lDb2dLRlI1Y0dWa1FYSnlZWGxRY205MGIzUjVjR1V1ZEc5VGRISnBibWNnSVQwZ1lYSnlZWGxVYjFOMGNtbHVaeWtzSUU1QlRVVXNJSHQwYjFOMGNtbHVaem9nWVhKeVlYbFViMU4wY21sdVozMHBPMXh1WEc0Z0lDQWdKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsQWdLeUFrWlhod2IzSjBMa1lnS2lCbVlXbHNjeWhtZFc1amRHbHZiaWdwZTF4dUlDQWdJQ0FnYm1WM0lGUjVjR1ZrUVhKeVlYa29NU2t1YzJ4cFkyVW9LVHRjYmlBZ0lDQjlLU3dnVGtGTlJTd2dlM05zYVdObE9pQWtjMnhwWTJWOUtUdGNibHh1SUNBZ0lDUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1UUlDc2dKR1Y0Y0c5eWRDNUdJQ29nS0daaGFXeHpLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdXekVzSURKZExuUnZURzlqWVd4bFUzUnlhVzVuS0NrZ0lUMGdibVYzSUZSNWNHVmtRWEp5WVhrb1d6RXNJREpkS1M1MGIweHZZMkZzWlZOMGNtbHVaeWdwWEc0Z0lDQWdmU2tnZkh3Z0lXWmhhV3h6S0daMWJtTjBhVzl1S0NsN1hHNGdJQ0FnSUNCVWVYQmxaRUZ5Y21GNVVISnZkRzkwZVhCbExuUnZURzlqWVd4bFUzUnlhVzVuTG1OaGJHd29XekVzSURKZEtUdGNiaUFnSUNCOUtTa3NJRTVCVFVVc0lIdDBiMHh2WTJGc1pWTjBjbWx1WnpvZ0pIUnZURzlqWVd4bFUzUnlhVzVuZlNrN1hHNWNiaUFnSUNCSmRHVnlZWFJ2Y25OYlRrRk5SVjBnUFNCRFQxSlNSVU5VWDBsVVJWSmZUa0ZOUlNBL0lDUnVZWFJwZG1WSmRHVnlZWFJ2Y2lBNklDUnBkR1Z5WVhSdmNqdGNiaUFnSUNCcFppZ2hURWxDVWtGU1dTQW1KaUFoUTA5U1VrVkRWRjlKVkVWU1gwNUJUVVVwYUdsa1pTaFVlWEJsWkVGeWNtRjVVSEp2ZEc5MGVYQmxMQ0JKVkVWU1FWUlBVaXdnSkdsMFpYSmhkRzl5S1R0Y2JpQWdmVHRjYm4wZ1pXeHpaU0J0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLQ2w3SUM4cUlHVnRjSFI1SUNvdklIMDdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVkbUZ5SUdkc2IySmhiQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZloyeHZZbUZzSnlsY2JpQWdMQ0JFUlZORFVrbFFWRTlTVXlBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJSbGMyTnlhWEIwYjNKekp5bGNiaUFnTENCTVNVSlNRVkpaSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyeHBZbkpoY25rbktWeHVJQ0FzSUNSMGVYQmxaQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRIbHdaV1FuS1Z4dUlDQXNJR2hwWkdVZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYUdsa1pTY3BYRzRnSUN3Z2NtVmtaV1pwYm1WQmJHd2dJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXlaV1JsWm1sdVpTMWhiR3duS1Z4dUlDQXNJR1poYVd4eklDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWm1GcGJITW5LVnh1SUNBc0lHRnVTVzV6ZEdGdVkyVWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YVc1emRHRnVZMlVuS1Z4dUlDQXNJSFJ2U1c1MFpXZGxjaUFnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGFXNTBaV2RsY2ljcFhHNGdJQ3dnZEc5TVpXNW5kR2dnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXNaVzVuZEdnbktWeHVJQ0FzSUdkUFVFNGdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdkdmNHNG5LUzVtWEc0Z0lDd2daRkFnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaSEFuS1M1bVhHNGdJQ3dnWVhKeVlYbEdhV3hzSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGNuSmhlUzFtYVd4c0p5bGNiaUFnTENCelpYUlViMU4wY21sdVoxUmhaeUE5SUhKbGNYVnBjbVVvSnk0dlgzTmxkQzEwYnkxemRISnBibWN0ZEdGbkp5bGNiaUFnTENCQlVsSkJXVjlDVlVaR1JWSWdJQ0E5SUNkQmNuSmhlVUoxWm1abGNpZGNiaUFnTENCRVFWUkJYMVpKUlZjZ0lDQWdJQ0E5SUNkRVlYUmhWbWxsZHlkY2JpQWdMQ0JRVWs5VVQxUlpVRVVnSUNBZ0lDQTlJQ2R3Y205MGIzUjVjR1VuWEc0Z0lDd2dWMUpQVGtkZlRFVk9SMVJJSUNBZ1BTQW5WM0p2Ym1jZ2JHVnVaM1JvSVNkY2JpQWdMQ0JYVWs5T1IxOUpUa1JGV0NBZ0lDQTlJQ2RYY205dVp5QnBibVJsZUNFblhHNGdJQ3dnSkVGeWNtRjVRblZtWm1WeUlDQWdQU0JuYkc5aVlXeGJRVkpTUVZsZlFsVkdSa1ZTWFZ4dUlDQXNJQ1JFWVhSaFZtbGxkeUFnSUNBZ0lEMGdaMnh2WW1Gc1cwUkJWRUZmVmtsRlYxMWNiaUFnTENCTllYUm9JQ0FnSUNBZ0lDQWdJQ0E5SUdkc2IySmhiQzVOWVhSb1hHNGdJQ3dnVW1GdVoyVkZjbkp2Y2lBZ0lDQWdQU0JuYkc5aVlXd3VVbUZ1WjJWRmNuSnZjbHh1SUNBc0lFbHVabWx1YVhSNUlDQWdJQ0FnSUQwZ1oyeHZZbUZzTGtsdVptbHVhWFI1WEc0Z0lDd2dRbUZ6WlVKMVptWmxjaUFnSUNBZ1BTQWtRWEp5WVhsQ2RXWm1aWEpjYmlBZ0xDQmhZbk1nSUNBZ0lDQWdJQ0FnSUNBOUlFMWhkR2d1WVdKelhHNGdJQ3dnY0c5M0lDQWdJQ0FnSUNBZ0lDQWdQU0JOWVhSb0xuQnZkMXh1SUNBc0lHWnNiMjl5SUNBZ0lDQWdJQ0FnSUQwZ1RXRjBhQzVtYkc5dmNseHVJQ0FzSUd4dlp5QWdJQ0FnSUNBZ0lDQWdJRDBnVFdGMGFDNXNiMmRjYmlBZ0xDQk1UaklnSUNBZ0lDQWdJQ0FnSUNBOUlFMWhkR2d1VEU0eVhHNGdJQ3dnUWxWR1JrVlNJQ0FnSUNBZ0lDQWdQU0FuWW5WbVptVnlKMXh1SUNBc0lFSlpWRVZmVEVWT1IxUklJQ0FnSUQwZ0oySjVkR1ZNWlc1bmRHZ25YRzRnSUN3Z1FsbFVSVjlQUmtaVFJWUWdJQ0FnUFNBbllubDBaVTltWm5ObGRDZGNiaUFnTENBa1FsVkdSa1ZTSUNBZ0lDQWdJQ0E5SUVSRlUwTlNTVkJVVDFKVElEOGdKMTlpSnlBNklFSlZSa1pGVWx4dUlDQXNJQ1JNUlU1SFZFZ2dJQ0FnSUNBZ0lEMGdSRVZUUTFKSlVGUlBVbE1nUHlBblgyd25JRG9nUWxsVVJWOU1SVTVIVkVoY2JpQWdMQ0FrVDBaR1UwVlVJQ0FnSUNBZ0lDQTlJRVJGVTBOU1NWQlVUMUpUSUQ4Z0oxOXZKeUE2SUVKWlZFVmZUMFpHVTBWVU8xeHVYRzR2THlCSlJVVkZOelUwSUdOdmJuWmxjbk5wYjI1eklHSmhjMlZrSUc5dUlHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOW1aWEp2YzNNdmFXVmxaVGMxTkZ4dWRtRnlJSEJoWTJ0SlJVVkZOelUwSUQwZ1puVnVZM1JwYjI0b2RtRnNkV1VzSUcxTVpXNHNJRzVDZVhSbGN5bDdYRzRnSUhaaGNpQmlkV1ptWlhJZ1BTQkJjbkpoZVNodVFubDBaWE1wWEc0Z0lDQWdMQ0JsVEdWdUlDQWdQU0J1UW5sMFpYTWdLaUE0SUMwZ2JVeGxiaUF0SURGY2JpQWdJQ0FzSUdWTllYZ2dJQ0E5SUNneElEdzhJR1ZNWlc0cElDMGdNVnh1SUNBZ0lDd2daVUpwWVhNZ0lEMGdaVTFoZUNBK1BpQXhYRzRnSUNBZ0xDQnlkQ0FnSUNBZ1BTQnRUR1Z1SUQwOVBTQXlNeUEvSUhCdmR5Z3lMQ0F0TWpRcElDMGdjRzkzS0RJc0lDMDNOeWtnT2lBd1hHNGdJQ0FnTENCcElDQWdJQ0FnUFNBd1hHNGdJQ0FnTENCeklDQWdJQ0FnUFNCMllXeDFaU0E4SURBZ2ZId2dkbUZzZFdVZ1BUMDlJREFnSmlZZ01TQXZJSFpoYkhWbElEd2dNQ0EvSURFZ09pQXdYRzRnSUNBZ0xDQmxMQ0J0TENCak8xeHVJQ0IyWVd4MVpTQTlJR0ZpY3loMllXeDFaU2xjYmlBZ2FXWW9kbUZzZFdVZ0lUMGdkbUZzZFdVZ2ZId2dkbUZzZFdVZ1BUMDlJRWx1Wm1sdWFYUjVLWHRjYmlBZ0lDQnRJRDBnZG1Gc2RXVWdJVDBnZG1Gc2RXVWdQeUF4SURvZ01EdGNiaUFnSUNCbElEMGdaVTFoZUR0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNCbElEMGdabXh2YjNJb2JHOW5LSFpoYkhWbEtTQXZJRXhPTWlrN1hHNGdJQ0FnYVdZb2RtRnNkV1VnS2lBb1l5QTlJSEJ2ZHlneUxDQXRaU2twSUR3Z01TbDdYRzRnSUNBZ0lDQmxMUzA3WEc0Z0lDQWdJQ0JqSUNvOUlESTdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUtHVWdLeUJsUW1saGN5QStQU0F4S1h0Y2JpQWdJQ0FnSUhaaGJIVmxJQ3M5SUhKMElDOGdZenRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RtRnNkV1VnS3owZ2NuUWdLaUJ3YjNjb01pd2dNU0F0SUdWQ2FXRnpLVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWW9kbUZzZFdVZ0tpQmpJRDQ5SURJcGUxeHVJQ0FnSUNBZ1pTc3JPMXh1SUNBZ0lDQWdZeUF2UFNBeU8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlobElDc2daVUpwWVhNZ1BqMGdaVTFoZUNsN1hHNGdJQ0FnSUNCdElEMGdNRHRjYmlBZ0lDQWdJR1VnUFNCbFRXRjRPMXh1SUNBZ0lIMGdaV3h6WlNCcFppaGxJQ3NnWlVKcFlYTWdQajBnTVNsN1hHNGdJQ0FnSUNCdElEMGdLSFpoYkhWbElDb2dZeUF0SURFcElDb2djRzkzS0RJc0lHMU1aVzRwTzF4dUlDQWdJQ0FnWlNBOUlHVWdLeUJsUW1saGN6dGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnYlNBOUlIWmhiSFZsSUNvZ2NHOTNLRElzSUdWQ2FXRnpJQzBnTVNrZ0tpQndiM2NvTWl3Z2JVeGxiaWs3WEc0Z0lDQWdJQ0JsSUQwZ01EdGNiaUFnSUNCOVhHNGdJSDFjYmlBZ1ptOXlLRHNnYlV4bGJpQStQU0E0T3lCaWRXWm1aWEpiYVNzclhTQTlJRzBnSmlBeU5UVXNJRzBnTHowZ01qVTJMQ0J0VEdWdUlDMDlJRGdwTzF4dUlDQmxJRDBnWlNBOFBDQnRUR1Z1SUh3Z2JUdGNiaUFnWlV4bGJpQXJQU0J0VEdWdU8xeHVJQ0JtYjNJb095QmxUR1Z1SUQ0Z01Ec2dZblZtWm1WeVcya3JLMTBnUFNCbElDWWdNalUxTENCbElDODlJREkxTml3Z1pVeGxiaUF0UFNBNEtUdGNiaUFnWW5WbVptVnlXeTB0YVYwZ2ZEMGdjeUFxSURFeU9EdGNiaUFnY21WMGRYSnVJR0oxWm1abGNqdGNibjA3WEc1MllYSWdkVzV3WVdOclNVVkZSVGMxTkNBOUlHWjFibU4wYVc5dUtHSjFabVpsY2l3Z2JVeGxiaXdnYmtKNWRHVnpLWHRjYmlBZ2RtRnlJR1ZNWlc0Z0lEMGdia0o1ZEdWeklDb2dPQ0F0SUcxTVpXNGdMU0F4WEc0Z0lDQWdMQ0JsVFdGNElDQTlJQ2d4SUR3OElHVk1aVzRwSUMwZ01WeHVJQ0FnSUN3Z1pVSnBZWE1nUFNCbFRXRjRJRDQrSURGY2JpQWdJQ0FzSUc1Q2FYUnpJRDBnWlV4bGJpQXRJRGRjYmlBZ0lDQXNJR2tnSUNBZ0lEMGdia0o1ZEdWeklDMGdNVnh1SUNBZ0lDd2djeUFnSUNBZ1BTQmlkV1ptWlhKYmFTMHRYVnh1SUNBZ0lDd2daU0FnSUNBZ1BTQnpJQ1lnTVRJM1hHNGdJQ0FnTENCdE8xeHVJQ0J6SUQ0K1BTQTNPMXh1SUNCbWIzSW9PeUJ1UW1sMGN5QStJREE3SUdVZ1BTQmxJQ29nTWpVMklDc2dZblZtWm1WeVcybGRMQ0JwTFMwc0lHNUNhWFJ6SUMwOUlEZ3BPMXh1SUNCdElEMGdaU0FtSUNneElEdzhJQzF1UW1sMGN5a2dMU0F4TzF4dUlDQmxJRDQrUFNBdGJrSnBkSE03WEc0Z0lHNUNhWFJ6SUNzOUlHMU1aVzQ3WEc0Z0lHWnZjaWc3SUc1Q2FYUnpJRDRnTURzZ2JTQTlJRzBnS2lBeU5UWWdLeUJpZFdabVpYSmJhVjBzSUdrdExTd2dia0pwZEhNZ0xUMGdPQ2s3WEc0Z0lHbG1LR1VnUFQwOUlEQXBlMXh1SUNBZ0lHVWdQU0F4SUMwZ1pVSnBZWE03WEc0Z0lIMGdaV3h6WlNCcFppaGxJRDA5UFNCbFRXRjRLWHRjYmlBZ0lDQnlaWFIxY200Z2JTQS9JRTVoVGlBNklITWdQeUF0U1c1bWFXNXBkSGtnT2lCSmJtWnBibWwwZVR0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNCdElEMGdiU0FySUhCdmR5Z3lMQ0J0VEdWdUtUdGNiaUFnSUNCbElEMGdaU0F0SUdWQ2FXRnpPMXh1SUNCOUlISmxkSFZ5YmlBb2N5QS9JQzB4SURvZ01Ta2dLaUJ0SUNvZ2NHOTNLRElzSUdVZ0xTQnRUR1Z1S1R0Y2JuMDdYRzVjYm5aaGNpQjFibkJoWTJ0Sk16SWdQU0JtZFc1amRHbHZiaWhpZVhSbGN5bDdYRzRnSUhKbGRIVnliaUJpZVhSbGMxc3pYU0E4UENBeU5DQjhJR0o1ZEdWeld6SmRJRHc4SURFMklId2dZbmwwWlhOYk1WMGdQRHdnT0NCOElHSjVkR1Z6V3pCZE8xeHVmVHRjYm5aaGNpQndZV05yU1RnZ1BTQm1kVzVqZEdsdmJpaHBkQ2w3WEc0Z0lISmxkSFZ5YmlCYmFYUWdKaUF3ZUdabVhUdGNibjA3WEc1MllYSWdjR0ZqYTBreE5pQTlJR1oxYm1OMGFXOXVLR2wwS1h0Y2JpQWdjbVYwZFhKdUlGdHBkQ0FtSURCNFptWXNJR2wwSUQ0K0lEZ2dKaUF3ZUdabVhUdGNibjA3WEc1MllYSWdjR0ZqYTBrek1pQTlJR1oxYm1OMGFXOXVLR2wwS1h0Y2JpQWdjbVYwZFhKdUlGdHBkQ0FtSURCNFptWXNJR2wwSUQ0K0lEZ2dKaUF3ZUdabUxDQnBkQ0ErUGlBeE5pQW1JREI0Wm1Zc0lHbDBJRDQrSURJMElDWWdNSGhtWmwwN1hHNTlPMXh1ZG1GeUlIQmhZMnRHTmpRZ1BTQm1kVzVqZEdsdmJpaHBkQ2w3WEc0Z0lISmxkSFZ5YmlCd1lXTnJTVVZGUlRjMU5DaHBkQ3dnTlRJc0lEZ3BPMXh1ZlR0Y2JuWmhjaUJ3WVdOclJqTXlJRDBnWm5WdVkzUnBiMjRvYVhRcGUxeHVJQ0J5WlhSMWNtNGdjR0ZqYTBsRlJVVTNOVFFvYVhRc0lESXpMQ0EwS1R0Y2JuMDdYRzVjYm5aaGNpQmhaR1JIWlhSMFpYSWdQU0JtZFc1amRHbHZiaWhETENCclpYa3NJR2x1ZEdWeWJtRnNLWHRjYmlBZ1pGQW9RMXRRVWs5VVQxUlpVRVZkTENCclpYa3NJSHRuWlhRNklHWjFibU4wYVc5dUtDbDdJSEpsZEhWeWJpQjBhR2x6VzJsdWRHVnlibUZzWFRzZ2ZYMHBPMXh1ZlR0Y2JseHVkbUZ5SUdkbGRDQTlJR1oxYm1OMGFXOXVLSFpwWlhjc0lHSjVkR1Z6TENCcGJtUmxlQ3dnYVhOTWFYUjBiR1ZGYm1ScFlXNHBlMXh1SUNCMllYSWdiblZ0U1c1a1pYZ2dQU0FyYVc1a1pYaGNiaUFnSUNBc0lHbHVkRWx1WkdWNElEMGdkRzlKYm5SbFoyVnlLRzUxYlVsdVpHVjRLVHRjYmlBZ2FXWW9iblZ0U1c1a1pYZ2dJVDBnYVc1MFNXNWtaWGdnZkh3Z2FXNTBTVzVrWlhnZ1BDQXdJSHg4SUdsdWRFbHVaR1Y0SUNzZ1lubDBaWE1nUGlCMmFXVjNXeVJNUlU1SFZFaGRLWFJvY205M0lGSmhibWRsUlhKeWIzSW9WMUpQVGtkZlNVNUVSVmdwTzF4dUlDQjJZWElnYzNSdmNtVWdQU0IyYVdWM1d5UkNWVVpHUlZKZExsOWlYRzRnSUNBZ0xDQnpkR0Z5ZENBOUlHbHVkRWx1WkdWNElDc2dkbWxsZDFza1QwWkdVMFZVWFZ4dUlDQWdJQ3dnY0dGamF5QWdQU0J6ZEc5eVpTNXpiR2xqWlNoemRHRnlkQ3dnYzNSaGNuUWdLeUJpZVhSbGN5azdYRzRnSUhKbGRIVnliaUJwYzB4cGRIUnNaVVZ1WkdsaGJpQS9JSEJoWTJzZ09pQndZV05yTG5KbGRtVnljMlVvS1R0Y2JuMDdYRzUyWVhJZ2MyVjBJRDBnWm5WdVkzUnBiMjRvZG1sbGR5d2dZbmwwWlhNc0lHbHVaR1Y0TENCamIyNTJaWEp6YVc5dUxDQjJZV3gxWlN3Z2FYTk1hWFIwYkdWRmJtUnBZVzRwZTF4dUlDQjJZWElnYm5WdFNXNWtaWGdnUFNBcmFXNWtaWGhjYmlBZ0lDQXNJR2x1ZEVsdVpHVjRJRDBnZEc5SmJuUmxaMlZ5S0c1MWJVbHVaR1Y0S1R0Y2JpQWdhV1lvYm5WdFNXNWtaWGdnSVQwZ2FXNTBTVzVrWlhnZ2ZId2dhVzUwU1c1a1pYZ2dQQ0F3SUh4OElHbHVkRWx1WkdWNElDc2dZbmwwWlhNZ1BpQjJhV1YzV3lSTVJVNUhWRWhkS1hSb2NtOTNJRkpoYm1kbFJYSnliM0lvVjFKUFRrZGZTVTVFUlZncE8xeHVJQ0IyWVhJZ2MzUnZjbVVnUFNCMmFXVjNXeVJDVlVaR1JWSmRMbDlpWEc0Z0lDQWdMQ0J6ZEdGeWRDQTlJR2x1ZEVsdVpHVjRJQ3NnZG1sbGQxc2tUMFpHVTBWVVhWeHVJQ0FnSUN3Z2NHRmpheUFnUFNCamIyNTJaWEp6YVc5dUtDdDJZV3gxWlNrN1hHNGdJR1p2Y2loMllYSWdhU0E5SURBN0lHa2dQQ0JpZVhSbGN6c2dhU3NyS1hOMGIzSmxXM04wWVhKMElDc2dhVjBnUFNCd1lXTnJXMmx6VEdsMGRHeGxSVzVrYVdGdUlEOGdhU0E2SUdKNWRHVnpJQzBnYVNBdElERmRPMXh1ZlR0Y2JseHVkbUZ5SUhaaGJHbGtZWFJsUVhKeVlYbENkV1ptWlhKQmNtZDFiV1Z1ZEhNZ1BTQm1kVzVqZEdsdmJpaDBhR0YwTENCc1pXNW5kR2dwZTF4dUlDQmhia2x1YzNSaGJtTmxLSFJvWVhRc0lDUkJjbkpoZVVKMVptWmxjaXdnUVZKU1FWbGZRbFZHUmtWU0tUdGNiaUFnZG1GeUlHNTFiV0psY2t4bGJtZDBhQ0E5SUN0c1pXNW5kR2hjYmlBZ0lDQXNJR0o1ZEdWTVpXNW5kR2dnSUNBOUlIUnZUR1Z1WjNSb0tHNTFiV0psY2t4bGJtZDBhQ2s3WEc0Z0lHbG1LRzUxYldKbGNreGxibWQwYUNBaFBTQmllWFJsVEdWdVozUm9LWFJvY205M0lGSmhibWRsUlhKeWIzSW9WMUpQVGtkZlRFVk9SMVJJS1R0Y2JpQWdjbVYwZFhKdUlHSjVkR1ZNWlc1bmRHZzdYRzU5TzF4dVhHNXBaaWdoSkhSNWNHVmtMa0ZDVmlsN1hHNGdJQ1JCY25KaGVVSjFabVpsY2lBOUlHWjFibU4wYVc5dUlFRnljbUY1UW5WbVptVnlLR3hsYm1kMGFDbDdYRzRnSUNBZ2RtRnlJR0o1ZEdWTVpXNW5kR2dnUFNCMllXeHBaR0YwWlVGeWNtRjVRblZtWm1WeVFYSm5kVzFsYm5SektIUm9hWE1zSUd4bGJtZDBhQ2s3WEc0Z0lDQWdkR2hwY3k1ZllpQWdJQ0FnSUNBOUlHRnljbUY1Um1sc2JDNWpZV3hzS0VGeWNtRjVLR0o1ZEdWTVpXNW5kR2dwTENBd0tUdGNiaUFnSUNCMGFHbHpXeVJNUlU1SFZFaGRJRDBnWW5sMFpVeGxibWQwYUR0Y2JpQWdmVHRjYmx4dUlDQWtSR0YwWVZacFpYY2dQU0JtZFc1amRHbHZiaUJFWVhSaFZtbGxkeWhpZFdabVpYSXNJR0o1ZEdWUFptWnpaWFFzSUdKNWRHVk1aVzVuZEdncGUxeHVJQ0FnSUdGdVNXNXpkR0Z1WTJVb2RHaHBjeXdnSkVSaGRHRldhV1YzTENCRVFWUkJYMVpKUlZjcE8xeHVJQ0FnSUdGdVNXNXpkR0Z1WTJVb1luVm1abVZ5TENBa1FYSnlZWGxDZFdabVpYSXNJRVJCVkVGZlZrbEZWeWs3WEc0Z0lDQWdkbUZ5SUdKMVptWmxja3hsYm1kMGFDQTlJR0oxWm1abGNsc2tURVZPUjFSSVhWeHVJQ0FnSUNBZ0xDQnZabVp6WlhRZ0lDQWdJQ0FnUFNCMGIwbHVkR1ZuWlhJb1lubDBaVTltWm5ObGRDazdYRzRnSUNBZ2FXWW9iMlptYzJWMElEd2dNQ0I4ZkNCdlptWnpaWFFnUGlCaWRXWm1aWEpNWlc1bmRHZ3BkR2h5YjNjZ1VtRnVaMlZGY25KdmNpZ25WM0p2Ym1jZ2IyWm1jMlYwSVNjcE8xeHVJQ0FnSUdKNWRHVk1aVzVuZEdnZ1BTQmllWFJsVEdWdVozUm9JRDA5UFNCMWJtUmxabWx1WldRZ1B5QmlkV1ptWlhKTVpXNW5kR2dnTFNCdlptWnpaWFFnT2lCMGIweGxibWQwYUNoaWVYUmxUR1Z1WjNSb0tUdGNiaUFnSUNCcFppaHZabVp6WlhRZ0t5QmllWFJsVEdWdVozUm9JRDRnWW5WbVptVnlUR1Z1WjNSb0tYUm9jbTkzSUZKaGJtZGxSWEp5YjNJb1YxSlBUa2RmVEVWT1IxUklLVHRjYmlBZ0lDQjBhR2x6V3lSQ1ZVWkdSVkpkSUQwZ1luVm1abVZ5TzF4dUlDQWdJSFJvYVhOYkpFOUdSbE5GVkYwZ1BTQnZabVp6WlhRN1hHNGdJQ0FnZEdocGMxc2tURVZPUjFSSVhTQTlJR0o1ZEdWTVpXNW5kR2c3WEc0Z0lIMDdYRzVjYmlBZ2FXWW9SRVZUUTFKSlVGUlBVbE1wZTF4dUlDQWdJR0ZrWkVkbGRIUmxjaWdrUVhKeVlYbENkV1ptWlhJc0lFSlpWRVZmVEVWT1IxUklMQ0FuWDJ3bktUdGNiaUFnSUNCaFpHUkhaWFIwWlhJb0pFUmhkR0ZXYVdWM0xDQkNWVVpHUlZJc0lDZGZZaWNwTzF4dUlDQWdJR0ZrWkVkbGRIUmxjaWdrUkdGMFlWWnBaWGNzSUVKWlZFVmZURVZPUjFSSUxDQW5YMnduS1R0Y2JpQWdJQ0JoWkdSSFpYUjBaWElvSkVSaGRHRldhV1YzTENCQ1dWUkZYMDlHUmxORlZDd2dKMTl2SnlrN1hHNGdJSDFjYmx4dUlDQnlaV1JsWm1sdVpVRnNiQ2drUkdGMFlWWnBaWGRiVUZKUFZFOVVXVkJGWFN3Z2UxeHVJQ0FnSUdkbGRFbHVkRGc2SUdaMWJtTjBhVzl1SUdkbGRFbHVkRGdvWW5sMFpVOW1abk5sZENsN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWjJWMEtIUm9hWE1zSURFc0lHSjVkR1ZQWm1aelpYUXBXekJkSUR3OElESTBJRDQrSURJME8xeHVJQ0FnSUgwc1hHNGdJQ0FnWjJWMFZXbHVkRGc2SUdaMWJtTjBhVzl1SUdkbGRGVnBiblE0S0dKNWRHVlBabVp6WlhRcGUxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdkbGRDaDBhR2x6TENBeExDQmllWFJsVDJabWMyVjBLVnN3WFR0Y2JpQWdJQ0I5TEZ4dUlDQWdJR2RsZEVsdWRERTJPaUJtZFc1amRHbHZiaUJuWlhSSmJuUXhOaWhpZVhSbFQyWm1jMlYwSUM4cUxDQnNhWFIwYkdWRmJtUnBZVzRnS2k4cGUxeHVJQ0FnSUNBZ2RtRnlJR0o1ZEdWeklEMGdaMlYwS0hSb2FYTXNJRElzSUdKNWRHVlBabVp6WlhRc0lHRnlaM1Z0Wlc1MGMxc3hYU2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdLR0o1ZEdWeld6RmRJRHc4SURnZ2ZDQmllWFJsYzFzd1hTa2dQRHdnTVRZZ1BqNGdNVFk3WEc0Z0lDQWdmU3hjYmlBZ0lDQm5aWFJWYVc1ME1UWTZJR1oxYm1OMGFXOXVJR2RsZEZWcGJuUXhOaWhpZVhSbFQyWm1jMlYwSUM4cUxDQnNhWFIwYkdWRmJtUnBZVzRnS2k4cGUxeHVJQ0FnSUNBZ2RtRnlJR0o1ZEdWeklEMGdaMlYwS0hSb2FYTXNJRElzSUdKNWRHVlBabVp6WlhRc0lHRnlaM1Z0Wlc1MGMxc3hYU2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZbmwwWlhOYk1WMGdQRHdnT0NCOElHSjVkR1Z6V3pCZE8xeHVJQ0FnSUgwc1hHNGdJQ0FnWjJWMFNXNTBNekk2SUdaMWJtTjBhVzl1SUdkbGRFbHVkRE15S0dKNWRHVlBabVp6WlhRZ0x5b3NJR3hwZEhSc1pVVnVaR2xoYmlBcUx5bDdYRzRnSUNBZ0lDQnlaWFIxY200Z2RXNXdZV05yU1RNeUtHZGxkQ2gwYUdsekxDQTBMQ0JpZVhSbFQyWm1jMlYwTENCaGNtZDFiV1Z1ZEhOYk1WMHBLVHRjYmlBZ0lDQjlMRnh1SUNBZ0lHZGxkRlZwYm5Rek1qb2dablZ1WTNScGIyNGdaMlYwVldsdWRETXlLR0o1ZEdWUFptWnpaWFFnTHlvc0lHeHBkSFJzWlVWdVpHbGhiaUFxTHlsN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZFc1d1lXTnJTVE15S0dkbGRDaDBhR2x6TENBMExDQmllWFJsVDJabWMyVjBMQ0JoY21kMWJXVnVkSE5iTVYwcEtTQStQajRnTUR0Y2JpQWdJQ0I5TEZ4dUlDQWdJR2RsZEVac2IyRjBNekk2SUdaMWJtTjBhVzl1SUdkbGRFWnNiMkYwTXpJb1lubDBaVTltWm5ObGRDQXZLaXdnYkdsMGRHeGxSVzVrYVdGdUlDb3ZLWHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjFibkJoWTJ0SlJVVkZOelUwS0dkbGRDaDBhR2x6TENBMExDQmllWFJsVDJabWMyVjBMQ0JoY21kMWJXVnVkSE5iTVYwcExDQXlNeXdnTkNrN1hHNGdJQ0FnZlN4Y2JpQWdJQ0JuWlhSR2JHOWhkRFkwT2lCbWRXNWpkR2x2YmlCblpYUkdiRzloZERZMEtHSjVkR1ZQWm1aelpYUWdMeW9zSUd4cGRIUnNaVVZ1WkdsaGJpQXFMeWw3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkVzV3WVdOclNVVkZSVGMxTkNoblpYUW9kR2hwY3l3Z09Dd2dZbmwwWlU5bVpuTmxkQ3dnWVhKbmRXMWxiblJ6V3pGZEtTd2dOVElzSURncE8xeHVJQ0FnSUgwc1hHNGdJQ0FnYzJWMFNXNTBPRG9nWm5WdVkzUnBiMjRnYzJWMFNXNTBPQ2hpZVhSbFQyWm1jMlYwTENCMllXeDFaU2w3WEc0Z0lDQWdJQ0J6WlhRb2RHaHBjeXdnTVN3Z1lubDBaVTltWm5ObGRDd2djR0ZqYTBrNExDQjJZV3gxWlNrN1hHNGdJQ0FnZlN4Y2JpQWdJQ0J6WlhSVmFXNTBPRG9nWm5WdVkzUnBiMjRnYzJWMFZXbHVkRGdvWW5sMFpVOW1abk5sZEN3Z2RtRnNkV1VwZTF4dUlDQWdJQ0FnYzJWMEtIUm9hWE1zSURFc0lHSjVkR1ZQWm1aelpYUXNJSEJoWTJ0Sk9Dd2dkbUZzZFdVcE8xeHVJQ0FnSUgwc1hHNGdJQ0FnYzJWMFNXNTBNVFk2SUdaMWJtTjBhVzl1SUhObGRFbHVkREUyS0dKNWRHVlBabVp6WlhRc0lIWmhiSFZsSUM4cUxDQnNhWFIwYkdWRmJtUnBZVzRnS2k4cGUxeHVJQ0FnSUNBZ2MyVjBLSFJvYVhNc0lESXNJR0o1ZEdWUFptWnpaWFFzSUhCaFkydEpNVFlzSUhaaGJIVmxMQ0JoY21kMWJXVnVkSE5iTWwwcE8xeHVJQ0FnSUgwc1hHNGdJQ0FnYzJWMFZXbHVkREUyT2lCbWRXNWpkR2x2YmlCelpYUlZhVzUwTVRZb1lubDBaVTltWm5ObGRDd2dkbUZzZFdVZ0x5b3NJR3hwZEhSc1pVVnVaR2xoYmlBcUx5bDdYRzRnSUNBZ0lDQnpaWFFvZEdocGN5d2dNaXdnWW5sMFpVOW1abk5sZEN3Z2NHRmphMGt4Tml3Z2RtRnNkV1VzSUdGeVozVnRaVzUwYzFzeVhTazdYRzRnSUNBZ2ZTeGNiaUFnSUNCelpYUkpiblF6TWpvZ1puVnVZM1JwYjI0Z2MyVjBTVzUwTXpJb1lubDBaVTltWm5ObGRDd2dkbUZzZFdVZ0x5b3NJR3hwZEhSc1pVVnVaR2xoYmlBcUx5bDdYRzRnSUNBZ0lDQnpaWFFvZEdocGN5d2dOQ3dnWW5sMFpVOW1abk5sZEN3Z2NHRmphMGt6TWl3Z2RtRnNkV1VzSUdGeVozVnRaVzUwYzFzeVhTazdYRzRnSUNBZ2ZTeGNiaUFnSUNCelpYUlZhVzUwTXpJNklHWjFibU4wYVc5dUlITmxkRlZwYm5Rek1paGllWFJsVDJabWMyVjBMQ0IyWVd4MVpTQXZLaXdnYkdsMGRHeGxSVzVrYVdGdUlDb3ZLWHRjYmlBZ0lDQWdJSE5sZENoMGFHbHpMQ0EwTENCaWVYUmxUMlptYzJWMExDQndZV05yU1RNeUxDQjJZV3gxWlN3Z1lYSm5kVzFsYm5Seld6SmRLVHRjYmlBZ0lDQjlMRnh1SUNBZ0lITmxkRVpzYjJGME16STZJR1oxYm1OMGFXOXVJSE5sZEVac2IyRjBNeklvWW5sMFpVOW1abk5sZEN3Z2RtRnNkV1VnTHlvc0lHeHBkSFJzWlVWdVpHbGhiaUFxTHlsN1hHNGdJQ0FnSUNCelpYUW9kR2hwY3l3Z05Dd2dZbmwwWlU5bVpuTmxkQ3dnY0dGamEwWXpNaXdnZG1Gc2RXVXNJR0Z5WjNWdFpXNTBjMXN5WFNrN1hHNGdJQ0FnZlN4Y2JpQWdJQ0J6WlhSR2JHOWhkRFkwT2lCbWRXNWpkR2x2YmlCelpYUkdiRzloZERZMEtHSjVkR1ZQWm1aelpYUXNJSFpoYkhWbElDOHFMQ0JzYVhSMGJHVkZibVJwWVc0Z0tpOHBlMXh1SUNBZ0lDQWdjMlYwS0hSb2FYTXNJRGdzSUdKNWRHVlBabVp6WlhRc0lIQmhZMnRHTmpRc0lIWmhiSFZsTENCaGNtZDFiV1Z1ZEhOYk1sMHBPMXh1SUNBZ0lIMWNiaUFnZlNrN1hHNTlJR1ZzYzJVZ2UxeHVJQ0JwWmlnaFptRnBiSE1vWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0J1WlhjZ0pFRnljbUY1UW5WbVptVnlPeUFnSUNBZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJHbHVaU0J1YnkxdVpYZGNiaUFnZlNrZ2ZId2dJV1poYVd4ektHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ2JtVjNJQ1JCY25KaGVVSjFabVpsY2lndU5TazdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMV3hwYm1VZ2JtOHRibVYzWEc0Z0lIMHBLWHRjYmlBZ0lDQWtRWEp5WVhsQ2RXWm1aWElnUFNCbWRXNWpkR2x2YmlCQmNuSmhlVUoxWm1abGNpaHNaVzVuZEdncGUxeHVJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QkNZWE5sUW5WbVptVnlLSFpoYkdsa1lYUmxRWEp5WVhsQ2RXWm1aWEpCY21kMWJXVnVkSE1vZEdocGN5d2diR1Z1WjNSb0tTazdYRzRnSUNBZ2ZUdGNiaUFnSUNCMllYSWdRWEp5WVhsQ2RXWm1aWEpRY205MGJ5QTlJQ1JCY25KaGVVSjFabVpsY2x0UVVrOVVUMVJaVUVWZElEMGdRbUZ6WlVKMVptWmxjbHRRVWs5VVQxUlpVRVZkTzF4dUlDQWdJR1p2Y2loMllYSWdhMlY1Y3lBOUlHZFBVRTRvUW1GelpVSjFabVpsY2lrc0lHb2dQU0F3TENCclpYazdJR3RsZVhNdWJHVnVaM1JvSUQ0Z2Fqc2dLWHRjYmlBZ0lDQWdJR2xtS0NFb0tHdGxlU0E5SUd0bGVYTmJhaXNyWFNrZ2FXNGdKRUZ5Y21GNVFuVm1abVZ5S1Nsb2FXUmxLQ1JCY25KaGVVSjFabVpsY2l3Z2EyVjVMQ0JDWVhObFFuVm1abVZ5VzJ0bGVWMHBPMXh1SUNBZ0lIMDdYRzRnSUNBZ2FXWW9JVXhKUWxKQlVsa3BRWEp5WVhsQ2RXWm1aWEpRY205MGJ5NWpiMjV6ZEhKMVkzUnZjaUE5SUNSQmNuSmhlVUoxWm1abGNqdGNiaUFnZlZ4dUlDQXZMeUJwVDFNZ1UyRm1ZWEpwSURjdWVDQmlkV2RjYmlBZ2RtRnlJSFpwWlhjZ1BTQnVaWGNnSkVSaGRHRldhV1YzS0c1bGR5QWtRWEp5WVhsQ2RXWm1aWElvTWlrcFhHNGdJQ0FnTENBa2MyVjBTVzUwT0NBOUlDUkVZWFJoVm1sbGQxdFFVazlVVDFSWlVFVmRMbk5sZEVsdWREZzdYRzRnSUhacFpYY3VjMlYwU1c1ME9DZ3dMQ0F5TVRRM05EZ3pOalE0S1R0Y2JpQWdkbWxsZHk1elpYUkpiblE0S0RFc0lESXhORGMwT0RNMk5Ea3BPMXh1SUNCcFppaDJhV1YzTG1kbGRFbHVkRGdvTUNrZ2ZId2dJWFpwWlhjdVoyVjBTVzUwT0NneEtTbHlaV1JsWm1sdVpVRnNiQ2drUkdGMFlWWnBaWGRiVUZKUFZFOVVXVkJGWFN3Z2UxeHVJQ0FnSUhObGRFbHVkRGc2SUdaMWJtTjBhVzl1SUhObGRFbHVkRGdvWW5sMFpVOW1abk5sZEN3Z2RtRnNkV1VwZTF4dUlDQWdJQ0FnSkhObGRFbHVkRGd1WTJGc2JDaDBhR2x6TENCaWVYUmxUMlptYzJWMExDQjJZV3gxWlNBOFBDQXlOQ0ErUGlBeU5DazdYRzRnSUNBZ2ZTeGNiaUFnSUNCelpYUlZhVzUwT0RvZ1puVnVZM1JwYjI0Z2MyVjBWV2x1ZERnb1lubDBaVTltWm5ObGRDd2dkbUZzZFdVcGUxeHVJQ0FnSUNBZ0pITmxkRWx1ZERndVkyRnNiQ2gwYUdsekxDQmllWFJsVDJabWMyVjBMQ0IyWVd4MVpTQThQQ0F5TkNBK1BpQXlOQ2s3WEc0Z0lDQWdmVnh1SUNCOUxDQjBjblZsS1R0Y2JuMWNibk5sZEZSdlUzUnlhVzVuVkdGbktDUkJjbkpoZVVKMVptWmxjaXdnUVZKU1FWbGZRbFZHUmtWU0tUdGNibk5sZEZSdlUzUnlhVzVuVkdGbktDUkVZWFJoVm1sbGR5d2dSRUZVUVY5V1NVVlhLVHRjYm1ocFpHVW9KRVJoZEdGV2FXVjNXMUJTVDFSUFZGbFFSVjBzSUNSMGVYQmxaQzVXU1VWWExDQjBjblZsS1R0Y2JtVjRjRzl5ZEhOYlFWSlNRVmxmUWxWR1JrVlNYU0E5SUNSQmNuSmhlVUoxWm1abGNqdGNibVY0Y0c5eWRITmJSRUZVUVY5V1NVVlhYU0E5SUNSRVlYUmhWbWxsZHpzaUxDSjJZWElnWjJ4dlltRnNJRDBnY21WeGRXbHlaU2duTGk5ZloyeHZZbUZzSnlsY2JpQWdMQ0JvYVdSbElDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5b2FXUmxKeWxjYmlBZ0xDQjFhV1FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkxYVdRbktWeHVJQ0FzSUZSWlVFVkVJQ0E5SUhWcFpDZ25kSGx3WldSZllYSnlZWGtuS1Z4dUlDQXNJRlpKUlZjZ0lDQTlJSFZwWkNnbmRtbGxkeWNwWEc0Z0lDd2dRVUpXSUNBZ0lEMGdJU0VvWjJ4dlltRnNMa0Z5Y21GNVFuVm1abVZ5SUNZbUlHZHNiMkpoYkM1RVlYUmhWbWxsZHlsY2JpQWdMQ0JEVDA1VFZGSWdQU0JCUWxaY2JpQWdMQ0JwSUQwZ01Dd2diQ0E5SURrc0lGUjVjR1ZrTzF4dVhHNTJZWElnVkhsd1pXUkJjbkpoZVVOdmJuTjBjblZqZEc5eWN5QTlJQ2hjYmlBZ0owbHVkRGhCY25KaGVTeFZhVzUwT0VGeWNtRjVMRlZwYm5RNFEyeGhiWEJsWkVGeWNtRjVMRWx1ZERFMlFYSnlZWGtzVldsdWRERTJRWEp5WVhrc1NXNTBNekpCY25KaGVTeFZhVzUwTXpKQmNuSmhlU3hHYkc5aGRETXlRWEp5WVhrc1JteHZZWFEyTkVGeWNtRjVKMXh1S1M1emNHeHBkQ2duTENjcE8xeHVYRzUzYUdsc1pTaHBJRHdnYkNsN1hHNGdJR2xtS0ZSNWNHVmtJRDBnWjJ4dlltRnNXMVI1Y0dWa1FYSnlZWGxEYjI1emRISjFZM1J2Y25OYmFTc3JYVjBwZTF4dUlDQWdJR2hwWkdVb1ZIbHdaV1F1Y0hKdmRHOTBlWEJsTENCVVdWQkZSQ3dnZEhKMVpTazdYRzRnSUNBZ2FHbGtaU2hVZVhCbFpDNXdjbTkwYjNSNWNHVXNJRlpKUlZjc0lIUnlkV1VwTzF4dUlDQjlJR1ZzYzJVZ1EwOU9VMVJTSUQwZ1ptRnNjMlU3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdlMXh1SUNCQlFsWTZJQ0FnSUVGQ1ZpeGNiaUFnUTA5T1UxUlNPaUJEVDA1VFZGSXNYRzRnSUZSWlVFVkVPaUFnVkZsUVJVUXNYRzRnSUZaSlJWYzZJQ0FnVmtsRlYxeHVmVHNpTENJdkx5Qm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZZbVZ1YW1GdGFXNW5jaTlTWlhoRmVIQXVaWE5qWVhCbFhHNTJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnSkhKbElDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzSmxjR3hoWTJWeUp5a29MMXRjWEZ4Y1hpUXFLejh1S0NsOFcxeGNYWHQ5WFM5bkxDQW5YRnhjWENRbUp5azdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUTENBblVtVm5SWGh3Snl3Z2UyVnpZMkZ3WlRvZ1puVnVZM1JwYjI0Z1pYTmpZWEJsS0dsMEtYc2djbVYwZFhKdUlDUnlaU2hwZENrN0lIMTlLVHRjYmlJc0lpOHZJREl5TGpFdU15NHpJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNWpiM0I1VjJsMGFHbHVLSFJoY21kbGRDd2djM1JoY25Rc0lHVnVaQ0E5SUhSb2FYTXViR1Z1WjNSb0tWeHVkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbEFzSUNkQmNuSmhlU2NzSUh0amIzQjVWMmwwYUdsdU9pQnlaWEYxYVhKbEtDY3VMMTloY25KaGVTMWpiM0I1TFhkcGRHaHBiaWNwZlNrN1hHNWNibkpsY1hWcGNtVW9KeTR2WDJGa1pDMTBieTExYm5OamIzQmhZbXhsY3ljcEtDZGpiM0I1VjJsMGFHbHVKeWs3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1ZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lDUmxkbVZ5ZVNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloY25KaGVTMXRaWFJvYjJSekp5a29OQ2s3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1UUlDc2dKR1Y0Y0c5eWRDNUdJQ29nSVhKbGNYVnBjbVVvSnk0dlgzTjBjbWxqZEMxdFpYUm9iMlFuS1NoYlhTNWxkbVZ5ZVN3Z2RISjFaU2tzSUNkQmNuSmhlU2NzSUh0Y2JpQWdMeThnTWpJdU1TNHpMalVnTHlBeE5TNDBMalF1TVRZZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG1WMlpYSjVLR05oYkd4aVlXTnJabTRnV3l3Z2RHaHBjMEZ5WjEwcFhHNGdJR1YyWlhKNU9pQm1kVzVqZEdsdmJpQmxkbVZ5ZVNoallXeHNZbUZqYTJadUlDOHFJQ3dnZEdocGMwRnlaeUFxTHlsN1hHNGdJQ0FnY21WMGRYSnVJQ1JsZG1WeWVTaDBhR2x6TENCallXeHNZbUZqYTJadUxDQmhjbWQxYldWdWRITmJNVjBwTzF4dUlDQjlYRzU5S1RzaUxDSXZMeUF5TWk0eExqTXVOaUJCY25KaGVTNXdjbTkwYjNSNWNHVXVabWxzYkNoMllXeDFaU3dnYzNSaGNuUWdQU0F3TENCbGJtUWdQU0IwYUdsekxteGxibWQwYUNsY2JuWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlrN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVFMQ0FuUVhKeVlYa25MQ0I3Wm1sc2JEb2djbVZ4ZFdseVpTZ25MaTlmWVhKeVlYa3RabWxzYkNjcGZTazdYRzVjYm5KbGNYVnBjbVVvSnk0dlgyRmtaQzEwYnkxMWJuTmpiM0JoWW14bGN5Y3BLQ2RtYVd4c0p5azdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUNSbWFXeDBaWElnUFNCeVpYRjFhWEpsS0NjdUwxOWhjbkpoZVMxdFpYUm9iMlJ6Snlrb01pazdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVRSUNzZ0pHVjRjRzl5ZEM1R0lDb2dJWEpsY1hWcGNtVW9KeTR2WDNOMGNtbGpkQzF0WlhSb2IyUW5LU2hiWFM1bWFXeDBaWElzSUhSeWRXVXBMQ0FuUVhKeVlYa25MQ0I3WEc0Z0lDOHZJREl5TGpFdU15NDNJQzhnTVRVdU5DNDBMakl3SUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzVtYVd4MFpYSW9ZMkZzYkdKaFkydG1iaUJiTENCMGFHbHpRWEpuWFNsY2JpQWdabWxzZEdWeU9pQm1kVzVqZEdsdmJpQm1hV3gwWlhJb1kyRnNiR0poWTJ0bWJpQXZLaUFzSUhSb2FYTkJjbWNnS2k4cGUxeHVJQ0FnSUhKbGRIVnliaUFrWm1sc2RHVnlLSFJvYVhNc0lHTmhiR3hpWVdOclptNHNJR0Z5WjNWdFpXNTBjMXN4WFNrN1hHNGdJSDFjYm4wcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JpOHZJREl5TGpFdU15NDVJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNW1hVzVrU1c1a1pYZ29jSEpsWkdsallYUmxMQ0IwYUdselFYSm5JRDBnZFc1a1pXWnBibVZrS1Z4dWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJQ1JtYVc1a0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGNuSmhlUzF0WlhSb2IyUnpKeWtvTmlsY2JpQWdMQ0JMUlZrZ0lDQWdJRDBnSjJacGJtUkpibVJsZUNkY2JpQWdMQ0JtYjNKalpXUWdJRDBnZEhKMVpUdGNiaTh2SUZOb2IzVnNaRzRuZENCemEybHdJR2h2YkdWelhHNXBaaWhMUlZrZ2FXNGdXMTBwUVhKeVlYa29NU2xiUzBWWlhTaG1kVzVqZEdsdmJpZ3BleUJtYjNKalpXUWdQU0JtWVd4elpUc2dmU2s3WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VUNBcklDUmxlSEJ2Y25RdVJpQXFJR1p2Y21ObFpDd2dKMEZ5Y21GNUp5d2dlMXh1SUNCbWFXNWtTVzVrWlhnNklHWjFibU4wYVc5dUlHWnBibVJKYm1SbGVDaGpZV3hzWW1GamEyWnVMeW9zSUhSb1lYUWdQU0IxYm1SbFptbHVaV1FnS2k4cGUxeHVJQ0FnSUhKbGRIVnliaUFrWm1sdVpDaDBhR2x6TENCallXeHNZbUZqYTJadUxDQmhjbWQxYldWdWRITXViR1Z1WjNSb0lENGdNU0EvSUdGeVozVnRaVzUwYzFzeFhTQTZJSFZ1WkdWbWFXNWxaQ2s3WEc0Z0lIMWNibjBwTzF4dWNtVnhkV2x5WlNnbkxpOWZZV1JrTFhSdkxYVnVjMk52Y0dGaWJHVnpKeWtvUzBWWktUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNHZMeUF5TWk0eExqTXVPQ0JCY25KaGVTNXdjbTkwYjNSNWNHVXVabWx1WkNod2NtVmthV05oZEdVc0lIUm9hWE5CY21jZ1BTQjFibVJsWm1sdVpXUXBYRzUyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z0pHWnBibVFnSUNBOUlISmxjWFZwY21Vb0p5NHZYMkZ5Y21GNUxXMWxkR2h2WkhNbktTZzFLVnh1SUNBc0lFdEZXU0FnSUNBZ1BTQW5abWx1WkNkY2JpQWdMQ0JtYjNKalpXUWdJRDBnZEhKMVpUdGNiaTh2SUZOb2IzVnNaRzRuZENCemEybHdJR2h2YkdWelhHNXBaaWhMUlZrZ2FXNGdXMTBwUVhKeVlYa29NU2xiUzBWWlhTaG1kVzVqZEdsdmJpZ3BleUJtYjNKalpXUWdQU0JtWVd4elpUc2dmU2s3WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VUNBcklDUmxlSEJ2Y25RdVJpQXFJR1p2Y21ObFpDd2dKMEZ5Y21GNUp5d2dlMXh1SUNCbWFXNWtPaUJtZFc1amRHbHZiaUJtYVc1a0tHTmhiR3hpWVdOclptNHZLaXdnZEdoaGRDQTlJSFZ1WkdWbWFXNWxaQ0FxTHlsN1hHNGdJQ0FnY21WMGRYSnVJQ1JtYVc1a0tIUm9hWE1zSUdOaGJHeGlZV05yWm00c0lHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BpQXhJRDhnWVhKbmRXMWxiblJ6V3pGZElEb2dkVzVrWldacGJtVmtLVHRjYmlBZ2ZWeHVmU2s3WEc1eVpYRjFhWEpsS0NjdUwxOWhaR1F0ZEc4dGRXNXpZMjl3WVdKc1pYTW5LU2hMUlZrcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JuWmhjaUFrWlhod2IzSjBJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnSkdadmNrVmhZMmdnUFNCeVpYRjFhWEpsS0NjdUwxOWhjbkpoZVMxdFpYUm9iMlJ6Snlrb01DbGNiaUFnTENCVFZGSkpRMVFnSUNBOUlISmxjWFZwY21Vb0p5NHZYM04wY21samRDMXRaWFJvYjJRbktTaGJYUzVtYjNKRllXTm9MQ0IwY25WbEtUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbEFnS3lBa1pYaHdiM0owTGtZZ0tpQWhVMVJTU1VOVUxDQW5RWEp5WVhrbkxDQjdYRzRnSUM4dklESXlMakV1TXk0eE1DQXZJREUxTGpRdU5DNHhPQ0JCY25KaGVTNXdjbTkwYjNSNWNHVXVabTl5UldGamFDaGpZV3hzWW1GamEyWnVJRnNzSUhSb2FYTkJjbWRkS1Z4dUlDQm1iM0pGWVdOb09pQm1kVzVqZEdsdmJpQm1iM0pGWVdOb0tHTmhiR3hpWVdOclptNGdMeW9nTENCMGFHbHpRWEpuSUNvdktYdGNiaUFnSUNCeVpYUjFjbTRnSkdadmNrVmhZMmdvZEdocGN5d2dZMkZzYkdKaFkydG1iaXdnWVhKbmRXMWxiblJ6V3pGZEtUdGNiaUFnZlZ4dWZTazdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVkbUZ5SUdOMGVDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlkzUjRKeWxjYmlBZ0xDQWtaWGh3YjNKMElDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z2RHOVBZbXBsWTNRZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTF2WW1wbFkzUW5LVnh1SUNBc0lHTmhiR3dnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWFJsY2kxallXeHNKeWxjYmlBZ0xDQnBjMEZ5Y21GNVNYUmxjaUFnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmx6TFdGeWNtRjVMV2wwWlhJbktWeHVJQ0FzSUhSdlRHVnVaM1JvSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRiR1Z1WjNSb0p5bGNiaUFnTENCamNtVmhkR1ZRY205d1pYSjBlU0E5SUhKbGNYVnBjbVVvSnk0dlgyTnlaV0YwWlMxd2NtOXdaWEowZVNjcFhHNGdJQ3dnWjJWMFNYUmxja1p1SUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDJOdmNtVXVaMlYwTFdsMFpYSmhkRzl5TFcxbGRHaHZaQ2NwTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5QXJJQ1JsZUhCdmNuUXVSaUFxSUNGeVpYRjFhWEpsS0NjdUwxOXBkR1Z5TFdSbGRHVmpkQ2NwS0daMWJtTjBhVzl1S0dsMFpYSXBleUJCY25KaGVTNW1jbTl0S0dsMFpYSXBPeUI5S1N3Z0owRnljbUY1Snl3Z2UxeHVJQ0F2THlBeU1pNHhMakl1TVNCQmNuSmhlUzVtY205dEtHRnljbUY1VEdsclpTd2diV0Z3Wm00Z1BTQjFibVJsWm1sdVpXUXNJSFJvYVhOQmNtY2dQU0IxYm1SbFptbHVaV1FwWEc0Z0lHWnliMjA2SUdaMWJtTjBhVzl1SUdaeWIyMG9ZWEp5WVhsTWFXdGxMeW9zSUcxaGNHWnVJRDBnZFc1a1pXWnBibVZrTENCMGFHbHpRWEpuSUQwZ2RXNWtaV1pwYm1Wa0tpOHBlMXh1SUNBZ0lIWmhjaUJQSUNBZ0lDQWdJRDBnZEc5UFltcGxZM1FvWVhKeVlYbE1hV3RsS1Z4dUlDQWdJQ0FnTENCRElDQWdJQ0FnSUQwZ2RIbHdaVzltSUhSb2FYTWdQVDBnSjJaMWJtTjBhVzl1SnlBL0lIUm9hWE1nT2lCQmNuSmhlVnh1SUNBZ0lDQWdMQ0JoVEdWdUlDQWdJRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhRnh1SUNBZ0lDQWdMQ0J0WVhCbWJpQWdJRDBnWVV4bGJpQStJREVnUHlCaGNtZDFiV1Z1ZEhOYk1WMGdPaUIxYm1SbFptbHVaV1JjYmlBZ0lDQWdJQ3dnYldGd2NHbHVaeUE5SUcxaGNHWnVJQ0U5UFNCMWJtUmxabWx1WldSY2JpQWdJQ0FnSUN3Z2FXNWtaWGdnSUNBOUlEQmNiaUFnSUNBZ0lDd2dhWFJsY2tadUlDQTlJR2RsZEVsMFpYSkdiaWhQS1Z4dUlDQWdJQ0FnTENCc1pXNW5kR2dzSUhKbGMzVnNkQ3dnYzNSbGNDd2dhWFJsY21GMGIzSTdYRzRnSUNBZ2FXWW9iV0Z3Y0dsdVp5bHRZWEJtYmlBOUlHTjBlQ2h0WVhCbWJpd2dZVXhsYmlBK0lESWdQeUJoY21kMWJXVnVkSE5iTWwwZ09pQjFibVJsWm1sdVpXUXNJRElwTzF4dUlDQWdJQzh2SUdsbUlHOWlhbVZqZENCcGMyNG5kQ0JwZEdWeVlXSnNaU0J2Y2lCcGRDZHpJR0Z5Y21GNUlIZHBkR2dnWkdWbVlYVnNkQ0JwZEdWeVlYUnZjaUF0SUhWelpTQnphVzF3YkdVZ1kyRnpaVnh1SUNBZ0lHbG1LR2wwWlhKR2JpQWhQU0IxYm1SbFptbHVaV1FnSmlZZ0lTaERJRDA5SUVGeWNtRjVJQ1ltSUdselFYSnlZWGxKZEdWeUtHbDBaWEpHYmlrcEtYdGNiaUFnSUNBZ0lHWnZjaWhwZEdWeVlYUnZjaUE5SUdsMFpYSkdiaTVqWVd4c0tFOHBMQ0J5WlhOMWJIUWdQU0J1WlhjZ1F6c2dJU2h6ZEdWd0lEMGdhWFJsY21GMGIzSXVibVY0ZENncEtTNWtiMjVsT3lCcGJtUmxlQ3NyS1h0Y2JpQWdJQ0FnSUNBZ1kzSmxZWFJsVUhKdmNHVnlkSGtvY21WemRXeDBMQ0JwYm1SbGVDd2diV0Z3Y0dsdVp5QS9JR05oYkd3b2FYUmxjbUYwYjNJc0lHMWhjR1p1TENCYmMzUmxjQzUyWVd4MVpTd2dhVzVrWlhoZExDQjBjblZsS1NBNklITjBaWEF1ZG1Gc2RXVXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCc1pXNW5kR2dnUFNCMGIweGxibWQwYUNoUExteGxibWQwYUNrN1hHNGdJQ0FnSUNCbWIzSW9jbVZ6ZFd4MElEMGdibVYzSUVNb2JHVnVaM1JvS1RzZ2JHVnVaM1JvSUQ0Z2FXNWtaWGc3SUdsdVpHVjRLeXNwZTF4dUlDQWdJQ0FnSUNCamNtVmhkR1ZRY205d1pYSjBlU2h5WlhOMWJIUXNJR2x1WkdWNExDQnRZWEJ3YVc1bklEOGdiV0Z3Wm00b1QxdHBibVJsZUYwc0lHbHVaR1Y0S1NBNklFOWJhVzVrWlhoZEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnY21WemRXeDBMbXhsYm1kMGFDQTlJR2x1WkdWNE8xeHVJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzRnSUgxY2JuMHBPMXh1SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1ZG1GeUlDUmxlSEJ2Y25RZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUNScGJtUmxlRTltSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGNuSmhlUzFwYm1Oc2RXUmxjeWNwS0daaGJITmxLVnh1SUNBc0lDUnVZWFJwZG1VZ0lDQWdJQ0FnUFNCYlhTNXBibVJsZUU5bVhHNGdJQ3dnVGtWSFFWUkpWa1ZmV2tWU1R5QTlJQ0VoSkc1aGRHbDJaU0FtSmlBeElDOGdXekZkTG1sdVpHVjRUMllvTVN3Z0xUQXBJRHdnTUR0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsQWdLeUFrWlhod2IzSjBMa1lnS2lBb1RrVkhRVlJKVmtWZldrVlNUeUI4ZkNBaGNtVnhkV2x5WlNnbkxpOWZjM1J5YVdOMExXMWxkR2h2WkNjcEtDUnVZWFJwZG1VcEtTd2dKMEZ5Y21GNUp5d2dlMXh1SUNBdkx5QXlNaTR4TGpNdU1URWdMeUF4TlM0MExqUXVNVFFnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbWx1WkdWNFQyWW9jMlZoY21Ob1JXeGxiV1Z1ZENCYkxDQm1jbTl0U1c1a1pYaGRLVnh1SUNCcGJtUmxlRTltT2lCbWRXNWpkR2x2YmlCcGJtUmxlRTltS0hObFlYSmphRVZzWlcxbGJuUWdMeW9zSUdaeWIyMUpibVJsZUNBOUlEQWdLaThwZTF4dUlDQWdJSEpsZEhWeWJpQk9SVWRCVkVsV1JWOWFSVkpQWEc0Z0lDQWdJQ0F2THlCamIyNTJaWEowSUMwd0lIUnZJQ3N3WEc0Z0lDQWdJQ0EvSUNSdVlYUnBkbVV1WVhCd2JIa29kR2hwY3l3Z1lYSm5kVzFsYm5SektTQjhmQ0F3WEc0Z0lDQWdJQ0E2SUNScGJtUmxlRTltS0hSb2FYTXNJSE5sWVhKamFFVnNaVzFsYm5Rc0lHRnlaM1Z0Wlc1MGMxc3hYU2s3WEc0Z0lIMWNibjBwT3lJc0lpOHZJREl5TGpFdU1pNHlJQzhnTVRVdU5DNHpMaklnUVhKeVlYa3VhWE5CY25KaGVTaGhjbWNwWEc1MllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5d2dKMEZ5Y21GNUp5d2dlMmx6UVhKeVlYazZJSEpsY1hWcGNtVW9KeTR2WDJsekxXRnljbUY1SnlsOUtUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNHZMeUF5TWk0eExqTXVNVE1nUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbXB2YVc0b2MyVndZWEpoZEc5eUtWeHVkbUZ5SUNSbGVIQnZjblFnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z2RHOUpUMkpxWldOMElEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGFXOWlhbVZqZENjcFhHNGdJQ3dnWVhKeVlYbEtiMmx1SUQwZ1cxMHVhbTlwYmp0Y2JseHVMeThnWm1Gc2JHSmhZMnNnWm05eUlHNXZkQ0JoY25KaGVTMXNhV3RsSUhOMGNtbHVaM05jYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVRSUNzZ0pHVjRjRzl5ZEM1R0lDb2dLSEpsY1hWcGNtVW9KeTR2WDJsdlltcGxZM1FuS1NBaFBTQlBZbXBsWTNRZ2ZId2dJWEpsY1hWcGNtVW9KeTR2WDNOMGNtbGpkQzF0WlhSb2IyUW5LU2hoY25KaGVVcHZhVzRwS1N3Z0owRnljbUY1Snl3Z2UxeHVJQ0JxYjJsdU9pQm1kVzVqZEdsdmJpQnFiMmx1S0hObGNHRnlZWFJ2Y2lsN1hHNGdJQ0FnY21WMGRYSnVJR0Z5Y21GNVNtOXBiaTVqWVd4c0tIUnZTVTlpYW1WamRDaDBhR2x6S1N3Z2MyVndZWEpoZEc5eUlEMDlQU0IxYm1SbFptbHVaV1FnUHlBbkxDY2dPaUJ6WlhCaGNtRjBiM0lwTzF4dUlDQjlYRzU5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdKR1Y0Y0c5eWRDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z2RHOUpUMkpxWldOMElDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMV2x2WW1wbFkzUW5LVnh1SUNBc0lIUnZTVzUwWldkbGNpQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTFwYm5SbFoyVnlKeWxjYmlBZ0xDQjBiMHhsYm1kMGFDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YkdWdVozUm9KeWxjYmlBZ0xDQWtibUYwYVhabElDQWdJQ0FnSUQwZ1cxMHViR0Z6ZEVsdVpHVjRUMlpjYmlBZ0xDQk9SVWRCVkVsV1JWOWFSVkpQSUQwZ0lTRWtibUYwYVhabElDWW1JREVnTHlCYk1WMHViR0Z6ZEVsdVpHVjRUMllvTVN3Z0xUQXBJRHdnTUR0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsQWdLeUFrWlhod2IzSjBMa1lnS2lBb1RrVkhRVlJKVmtWZldrVlNUeUI4ZkNBaGNtVnhkV2x5WlNnbkxpOWZjM1J5YVdOMExXMWxkR2h2WkNjcEtDUnVZWFJwZG1VcEtTd2dKMEZ5Y21GNUp5d2dlMXh1SUNBdkx5QXlNaTR4TGpNdU1UUWdMeUF4TlM0MExqUXVNVFVnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbXhoYzNSSmJtUmxlRTltS0hObFlYSmphRVZzWlcxbGJuUWdXeXdnWm5KdmJVbHVaR1Y0WFNsY2JpQWdiR0Z6ZEVsdVpHVjRUMlk2SUdaMWJtTjBhVzl1SUd4aGMzUkpibVJsZUU5bUtITmxZWEpqYUVWc1pXMWxiblFnTHlvc0lHWnliMjFKYm1SbGVDQTlJRUJiS2kweFhTQXFMeWw3WEc0Z0lDQWdMeThnWTI5dWRtVnlkQ0F0TUNCMGJ5QXJNRnh1SUNBZ0lHbG1LRTVGUjBGVVNWWkZYMXBGVWs4cGNtVjBkWEp1SUNSdVlYUnBkbVV1WVhCd2JIa29kR2hwY3l3Z1lYSm5kVzFsYm5SektTQjhmQ0F3TzF4dUlDQWdJSFpoY2lCUElDQWdJQ0FnUFNCMGIwbFBZbXBsWTNRb2RHaHBjeWxjYmlBZ0lDQWdJQ3dnYkdWdVozUm9JRDBnZEc5TVpXNW5kR2dvVHk1c1pXNW5kR2dwWEc0Z0lDQWdJQ0FzSUdsdVpHVjRJQ0E5SUd4bGJtZDBhQ0F0SURFN1hHNGdJQ0FnYVdZb1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lERXBhVzVrWlhnZ1BTQk5ZWFJvTG0xcGJpaHBibVJsZUN3Z2RHOUpiblJsWjJWeUtHRnlaM1Z0Wlc1MGMxc3hYU2twTzF4dUlDQWdJR2xtS0dsdVpHVjRJRHdnTUNscGJtUmxlQ0E5SUd4bGJtZDBhQ0FySUdsdVpHVjRPMXh1SUNBZ0lHWnZjaWc3YVc1a1pYZ2dQajBnTURzZ2FXNWtaWGd0TFNscFppaHBibVJsZUNCcGJpQlBLV2xtS0U5YmFXNWtaWGhkSUQwOVBTQnpaV0Z5WTJoRmJHVnRaVzUwS1hKbGRIVnliaUJwYm1SbGVDQjhmQ0F3TzF4dUlDQWdJSEpsZEhWeWJpQXRNVHRjYmlBZ2ZWeHVmU2s3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1ZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lDUnRZWEFnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloY25KaGVTMXRaWFJvYjJSekp5a29NU2s3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1UUlDc2dKR1Y0Y0c5eWRDNUdJQ29nSVhKbGNYVnBjbVVvSnk0dlgzTjBjbWxqZEMxdFpYUm9iMlFuS1NoYlhTNXRZWEFzSUhSeWRXVXBMQ0FuUVhKeVlYa25MQ0I3WEc0Z0lDOHZJREl5TGpFdU15NHhOU0F2SURFMUxqUXVOQzR4T1NCQmNuSmhlUzV3Y205MGIzUjVjR1V1YldGd0tHTmhiR3hpWVdOclptNGdXeXdnZEdocGMwRnlaMTBwWEc0Z0lHMWhjRG9nWm5WdVkzUnBiMjRnYldGd0tHTmhiR3hpWVdOclptNGdMeW9nTENCMGFHbHpRWEpuSUNvdktYdGNiaUFnSUNCeVpYUjFjbTRnSkcxaGNDaDBhR2x6TENCallXeHNZbUZqYTJadUxDQmhjbWQxYldWdWRITmJNVjBwTzF4dUlDQjlYRzU5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdKR1Y0Y0c5eWRDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lHTnlaV0YwWlZCeWIzQmxjblI1SUQwZ2NtVnhkV2x5WlNnbkxpOWZZM0psWVhSbExYQnliM0JsY25SNUp5azdYRzVjYmk4dklGZGxZa3RwZENCQmNuSmhlUzV2WmlCcGMyNG5kQ0JuWlc1bGNtbGpYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeUFySUNSbGVIQnZjblF1UmlBcUlISmxjWFZwY21Vb0p5NHZYMlpoYVd4ekp5a29ablZ1WTNScGIyNG9LWHRjYmlBZ1puVnVZM1JwYjI0Z1JpZ3BlMzFjYmlBZ2NtVjBkWEp1SUNFb1FYSnlZWGt1YjJZdVkyRnNiQ2hHS1NCcGJuTjBZVzVqWlc5bUlFWXBPMXh1ZlNrc0lDZEJjbkpoZVNjc0lIdGNiaUFnTHk4Z01qSXVNUzR5TGpNZ1FYSnlZWGt1YjJZb0lDNHVMbWwwWlcxektWeHVJQ0J2WmpvZ1puVnVZM1JwYjI0Z2IyWW9MeW9nTGk0dVlYSm5jeUFxTHlsN1hHNGdJQ0FnZG1GeUlHbHVaR1Y0SUNBOUlEQmNiaUFnSUNBZ0lDd2dZVXhsYmlBZ0lEMGdZWEpuZFcxbGJuUnpMbXhsYm1kMGFGeHVJQ0FnSUNBZ0xDQnlaWE4xYkhRZ1BTQnVaWGNnS0hSNWNHVnZaaUIwYUdseklEMDlJQ2RtZFc1amRHbHZiaWNnUHlCMGFHbHpJRG9nUVhKeVlYa3BLR0ZNWlc0cE8xeHVJQ0FnSUhkb2FXeGxLR0ZNWlc0Z1BpQnBibVJsZUNsamNtVmhkR1ZRY205d1pYSjBlU2h5WlhOMWJIUXNJR2x1WkdWNExDQmhjbWQxYldWdWRITmJhVzVrWlhncksxMHBPMXh1SUNBZ0lISmxjM1ZzZEM1c1pXNW5kR2dnUFNCaFRHVnVPMXh1SUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFE3WEc0Z0lIMWNibjBwT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQWtjbVZrZFdObElEMGdjbVZ4ZFdseVpTZ25MaTlmWVhKeVlYa3RjbVZrZFdObEp5azdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVRSUNzZ0pHVjRjRzl5ZEM1R0lDb2dJWEpsY1hWcGNtVW9KeTR2WDNOMGNtbGpkQzF0WlhSb2IyUW5LU2hiWFM1eVpXUjFZMlZTYVdkb2RDd2dkSEoxWlNrc0lDZEJjbkpoZVNjc0lIdGNiaUFnTHk4Z01qSXVNUzR6TGpFNUlDOGdNVFV1TkM0MExqSXlJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNXlaV1IxWTJWU2FXZG9kQ2hqWVd4c1ltRmphMlp1SUZzc0lHbHVhWFJwWVd4V1lXeDFaVjBwWEc0Z0lISmxaSFZqWlZKcFoyaDBPaUJtZFc1amRHbHZiaUJ5WldSMVkyVlNhV2RvZENoallXeHNZbUZqYTJadUlDOHFJQ3dnYVc1cGRHbGhiRlpoYkhWbElDb3ZLWHRjYmlBZ0lDQnlaWFIxY200Z0pISmxaSFZqWlNoMGFHbHpMQ0JqWVd4c1ltRmphMlp1TENCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvTENCaGNtZDFiV1Z1ZEhOYk1WMHNJSFJ5ZFdVcE8xeHVJQ0I5WEc1OUtUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNTJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnSkhKbFpIVmpaU0E5SUhKbGNYVnBjbVVvSnk0dlgyRnljbUY1TFhKbFpIVmpaU2NwTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVVDQXJJQ1JsZUhCdmNuUXVSaUFxSUNGeVpYRjFhWEpsS0NjdUwxOXpkSEpwWTNRdGJXVjBhRzlrSnlrb1cxMHVjbVZrZFdObExDQjBjblZsS1N3Z0owRnljbUY1Snl3Z2UxeHVJQ0F2THlBeU1pNHhMak11TVRnZ0x5QXhOUzQwTGpRdU1qRWdRWEp5WVhrdWNISnZkRzkwZVhCbExuSmxaSFZqWlNoallXeHNZbUZqYTJadUlGc3NJR2x1YVhScFlXeFdZV3gxWlYwcFhHNGdJSEpsWkhWalpUb2dablZ1WTNScGIyNGdjbVZrZFdObEtHTmhiR3hpWVdOclptNGdMeW9nTENCcGJtbDBhV0ZzVm1Gc2RXVWdLaThwZTF4dUlDQWdJSEpsZEhWeWJpQWtjbVZrZFdObEtIUm9hWE1zSUdOaGJHeGlZV05yWm00c0lHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnc0lHRnlaM1Z0Wlc1MGMxc3hYU3dnWm1Gc2MyVXBPMXh1SUNCOVhHNTlLVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzUyWVhJZ0pHVjRjRzl5ZENBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2dhSFJ0YkNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyaDBiV3duS1Z4dUlDQXNJR052WmlBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpiMlluS1Z4dUlDQXNJSFJ2U1c1a1pYZ2dJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTFwYm1SbGVDY3BYRzRnSUN3Z2RHOU1aVzVuZEdnZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXeGxibWQwYUNjcFhHNGdJQ3dnWVhKeVlYbFRiR2xqWlNBOUlGdGRMbk5zYVdObE8xeHVYRzR2THlCbVlXeHNZbUZqYXlCbWIzSWdibTkwSUdGeWNtRjVMV3hwYTJVZ1JWTXpJSE4wY21sdVozTWdZVzVrSUVSUFRTQnZZbXBsWTNSelhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVVDQXJJQ1JsZUhCdmNuUXVSaUFxSUhKbGNYVnBjbVVvSnk0dlgyWmhhV3h6Snlrb1puVnVZM1JwYjI0b0tYdGNiaUFnYVdZb2FIUnRiQ2xoY25KaGVWTnNhV05sTG1OaGJHd29hSFJ0YkNrN1hHNTlLU3dnSjBGeWNtRjVKeXdnZTF4dUlDQnpiR2xqWlRvZ1puVnVZM1JwYjI0Z2MyeHBZMlVvWW1WbmFXNHNJR1Z1WkNsN1hHNGdJQ0FnZG1GeUlHeGxiaUFnSUQwZ2RHOU1aVzVuZEdnb2RHaHBjeTVzWlc1bmRHZ3BYRzRnSUNBZ0lDQXNJR3RzWVhOeklEMGdZMjltS0hSb2FYTXBPMXh1SUNBZ0lHVnVaQ0E5SUdWdVpDQTlQVDBnZFc1a1pXWnBibVZrSUQ4Z2JHVnVJRG9nWlc1a08xeHVJQ0FnSUdsbUtHdHNZWE56SUQwOUlDZEJjbkpoZVNjcGNtVjBkWEp1SUdGeWNtRjVVMnhwWTJVdVkyRnNiQ2gwYUdsekxDQmlaV2RwYml3Z1pXNWtLVHRjYmlBZ0lDQjJZWElnYzNSaGNuUWdJRDBnZEc5SmJtUmxlQ2hpWldkcGJpd2diR1Z1S1Z4dUlDQWdJQ0FnTENCMWNGUnZJQ0FnUFNCMGIwbHVaR1Y0S0dWdVpDd2diR1Z1S1Z4dUlDQWdJQ0FnTENCemFYcGxJQ0FnUFNCMGIweGxibWQwYUNoMWNGUnZJQzBnYzNSaGNuUXBYRzRnSUNBZ0lDQXNJR05zYjI1bFpDQTlJRUZ5Y21GNUtITnBlbVVwWEc0Z0lDQWdJQ0FzSUdrZ0lDQWdJQ0E5SURBN1hHNGdJQ0FnWm05eUtEc2dhU0E4SUhOcGVtVTdJR2tyS3lsamJHOXVaV1JiYVYwZ1BTQnJiR0Z6Y3lBOVBTQW5VM1J5YVc1bkoxeHVJQ0FnSUNBZ1B5QjBhR2x6TG1Ob1lYSkJkQ2h6ZEdGeWRDQXJJR2twWEc0Z0lDQWdJQ0E2SUhSb2FYTmJjM1JoY25RZ0t5QnBYVHRjYmlBZ0lDQnlaWFIxY200Z1kyeHZibVZrTzF4dUlDQjlYRzU5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2dKSE52YldVZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGeWNtRjVMVzFsZEdodlpITW5LU2d6S1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsQWdLeUFrWlhod2IzSjBMa1lnS2lBaGNtVnhkV2x5WlNnbkxpOWZjM1J5YVdOMExXMWxkR2h2WkNjcEtGdGRMbk52YldVc0lIUnlkV1VwTENBblFYSnlZWGtuTENCN1hHNGdJQzh2SURJeUxqRXVNeTR5TXlBdklERTFMalF1TkM0eE55QkJjbkpoZVM1d2NtOTBiM1I1Y0dVdWMyOXRaU2hqWVd4c1ltRmphMlp1SUZzc0lIUm9hWE5CY21kZEtWeHVJQ0J6YjIxbE9pQm1kVzVqZEdsdmJpQnpiMjFsS0dOaGJHeGlZV05yWm00Z0x5b2dMQ0IwYUdselFYSm5JQ292S1h0Y2JpQWdJQ0J5WlhSMWNtNGdKSE52YldVb2RHaHBjeXdnWTJGc2JHSmhZMnRtYml3Z1lYSm5kVzFsYm5Seld6RmRLVHRjYmlBZ2ZWeHVmU2s3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1ZG1GeUlDUmxlSEJ2Y25RZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2dZVVoxYm1OMGFXOXVJRDBnY21WeGRXbHlaU2duTGk5ZllTMW1kVzVqZEdsdmJpY3BYRzRnSUN3Z2RHOVBZbXBsWTNRZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGIySnFaV04wSnlsY2JpQWdMQ0JtWVdsc2N5QWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW1ZV2xzY3ljcFhHNGdJQ3dnSkhOdmNuUWdJQ0FnSUQwZ1cxMHVjMjl5ZEZ4dUlDQXNJSFJsYzNRZ0lDQWdJQ0E5SUZzeExDQXlMQ0F6WFR0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsQWdLeUFrWlhod2IzSjBMa1lnS2lBb1ptRnBiSE1vWm5WdVkzUnBiMjRvS1h0Y2JpQWdMeThnU1VVNExWeHVJQ0IwWlhOMExuTnZjblFvZFc1a1pXWnBibVZrS1R0Y2JuMHBJSHg4SUNGbVlXbHNjeWhtZFc1amRHbHZiaWdwZTF4dUlDQXZMeUJXT0NCaWRXZGNiaUFnZEdWemRDNXpiM0owS0c1MWJHd3BPMXh1SUNBdkx5QlBiR1FnVjJWaVMybDBYRzU5S1NCOGZDQWhjbVZ4ZFdseVpTZ25MaTlmYzNSeWFXTjBMVzFsZEdodlpDY3BLQ1J6YjNKMEtTa3NJQ2RCY25KaGVTY3NJSHRjYmlBZ0x5OGdNakl1TVM0ekxqSTFJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNXpiM0owS0dOdmJYQmhjbVZtYmlsY2JpQWdjMjl5ZERvZ1puVnVZM1JwYjI0Z2MyOXlkQ2hqYjIxd1lYSmxabTRwZTF4dUlDQWdJSEpsZEhWeWJpQmpiMjF3WVhKbFptNGdQVDA5SUhWdVpHVm1hVzVsWkZ4dUlDQWdJQ0FnUHlBa2MyOXlkQzVqWVd4c0tIUnZUMkpxWldOMEtIUm9hWE1wS1Z4dUlDQWdJQ0FnT2lBa2MyOXlkQzVqWVd4c0tIUnZUMkpxWldOMEtIUm9hWE1wTENCaFJuVnVZM1JwYjI0b1kyOXRjR0Z5WldadUtTazdYRzRnSUgxY2JuMHBPeUlzSW5KbGNYVnBjbVVvSnk0dlgzTmxkQzF6Y0dWamFXVnpKeWtvSjBGeWNtRjVKeWs3SWl3aUx5OGdNakF1TXk0ekxqRWdMeUF4TlM0NUxqUXVOQ0JFWVhSbExtNXZkeWdwWEc1MllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5d2dKMFJoZEdVbkxDQjdibTkzT2lCbWRXNWpkR2x2YmlncGV5QnlaWFIxY200Z2JtVjNJRVJoZEdVb0tTNW5aWFJVYVcxbEtDazdJSDE5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc0dkx5QXlNQzR6TGpRdU16WWdMeUF4TlM0NUxqVXVORE1nUkdGMFpTNXdjbTkwYjNSNWNHVXVkRzlKVTA5VGRISnBibWNvS1Z4dWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJR1poYVd4eklDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bVlXbHNjeWNwWEc0Z0lDd2daMlYwVkdsdFpTQTlJRVJoZEdVdWNISnZkRzkwZVhCbExtZGxkRlJwYldVN1hHNWNiblpoY2lCc2VpQTlJR1oxYm1OMGFXOXVLRzUxYlNsN1hHNGdJSEpsZEhWeWJpQnVkVzBnUGlBNUlEOGdiblZ0SURvZ0p6QW5JQ3NnYm5WdE8xeHVmVHRjYmx4dUx5OGdVR2hoYm5SdmJVcFRJQzhnYjJ4a0lGZGxZa3RwZENCb1lYTWdZU0JpY205clpXNGdhVzF3YkdWdFpXNTBZWFJwYjI1elhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVVDQXJJQ1JsZUhCdmNuUXVSaUFxSUNobVlXbHNjeWhtZFc1amRHbHZiaWdwZTF4dUlDQnlaWFIxY200Z2JtVjNJRVJoZEdVb0xUVmxNVE1nTFNBeEtTNTBiMGxUVDFOMGNtbHVaeWdwSUNFOUlDY3dNemcxTFRBM0xUSTFWREEzT2pBMk9qTTVMams1T1Zvbk8xeHVmU2tnZkh3Z0lXWmhhV3h6S0daMWJtTjBhVzl1S0NsN1hHNGdJRzVsZHlCRVlYUmxLRTVoVGlrdWRHOUpVMDlUZEhKcGJtY29LVHRjYm4wcEtTd2dKMFJoZEdVbkxDQjdYRzRnSUhSdlNWTlBVM1J5YVc1bk9pQm1kVzVqZEdsdmJpQjBiMGxUVDFOMGNtbHVaeWdwZTF4dUlDQWdJR2xtS0NGcGMwWnBibWwwWlNoblpYUlVhVzFsTG1OaGJHd29kR2hwY3lrcEtYUm9jbTkzSUZKaGJtZGxSWEp5YjNJb0owbHVkbUZzYVdRZ2RHbHRaU0IyWVd4MVpTY3BPMXh1SUNBZ0lIWmhjaUJrSUQwZ2RHaHBjMXh1SUNBZ0lDQWdMQ0I1SUQwZ1pDNW5aWFJWVkVOR2RXeHNXV1ZoY2lncFhHNGdJQ0FnSUNBc0lHMGdQU0JrTG1kbGRGVlVRMDFwYkd4cGMyVmpiMjVrY3lncFhHNGdJQ0FnSUNBc0lITWdQU0I1SUR3Z01DQS9JQ2N0SnlBNklIa2dQaUE1T1RrNUlEOGdKeXNuSURvZ0p5YzdYRzRnSUNBZ2NtVjBkWEp1SUhNZ0t5QW9KekF3TURBd0p5QXJJRTFoZEdndVlXSnpLSGtwS1M1emJHbGpaU2h6SUQ4Z0xUWWdPaUF0TkNrZ0sxeHVJQ0FnSUNBZ0p5MG5JQ3NnYkhvb1pDNW5aWFJWVkVOTmIyNTBhQ2dwSUNzZ01Ta2dLeUFuTFNjZ0t5QnNlaWhrTG1kbGRGVlVRMFJoZEdVb0tTa2dLMXh1SUNBZ0lDQWdKMVFuSUNzZ2JIb29aQzVuWlhSVlZFTkliM1Z5Y3lncEtTQXJJQ2M2SnlBcklHeDZLR1F1WjJWMFZWUkRUV2x1ZFhSbGN5Z3BLU0FyWEc0Z0lDQWdJQ0FuT2ljZ0t5QnNlaWhrTG1kbGRGVlVRMU5sWTI5dVpITW9LU2tnS3lBbkxpY2dLeUFvYlNBK0lEazVJRDhnYlNBNklDY3dKeUFySUd4NktHMHBLU0FySUNkYUp6dGNiaUFnZlZ4dWZTazdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVkbUZ5SUNSbGVIQnZjblFnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQjBiMDlpYW1WamRDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMVzlpYW1WamRDY3BYRzRnSUN3Z2RHOVFjbWx0YVhScGRtVWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXdjbWx0YVhScGRtVW5LVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxBZ0t5QWtaWGh3YjNKMExrWWdLaUJ5WlhGMWFYSmxLQ2N1TDE5bVlXbHNjeWNwS0daMWJtTjBhVzl1S0NsN1hHNGdJSEpsZEhWeWJpQnVaWGNnUkdGMFpTaE9ZVTRwTG5SdlNsTlBUaWdwSUNFOVBTQnVkV3hzSUh4OElFUmhkR1V1Y0hKdmRHOTBlWEJsTG5SdlNsTlBUaTVqWVd4c0tIdDBiMGxUVDFOMGNtbHVaem9nWm5WdVkzUnBiMjRvS1hzZ2NtVjBkWEp1SURFN0lIMTlLU0FoUFQwZ01UdGNibjBwTENBblJHRjBaU2NzSUh0Y2JpQWdkRzlLVTA5T09pQm1kVzVqZEdsdmJpQjBiMHBUVDA0b2EyVjVLWHRjYmlBZ0lDQjJZWElnVHlBZ1BTQjBiMDlpYW1WamRDaDBhR2x6S1Z4dUlDQWdJQ0FnTENCd2RpQTlJSFJ2VUhKcGJXbDBhWFpsS0U4cE8xeHVJQ0FnSUhKbGRIVnliaUIwZVhCbGIyWWdjSFlnUFQwZ0oyNTFiV0psY2ljZ0ppWWdJV2x6Um1sdWFYUmxLSEIyS1NBL0lHNTFiR3dnT2lCUExuUnZTVk5QVTNSeWFXNW5LQ2s3WEc0Z0lIMWNibjBwT3lJc0luWmhjaUJVVDE5UVVrbE5TVlJKVmtVZ1BTQnlaWEYxYVhKbEtDY3VMMTkzYTNNbktTZ25kRzlRY21sdGFYUnBkbVVuS1Z4dUlDQXNJSEJ5YjNSdklDQWdJQ0FnSUNBOUlFUmhkR1V1Y0hKdmRHOTBlWEJsTzF4dVhHNXBaaWdoS0ZSUFgxQlNTVTFKVkVsV1JTQnBiaUJ3Y205MGJ5a3BjbVZ4ZFdseVpTZ25MaTlmYUdsa1pTY3BLSEJ5YjNSdkxDQlVUMTlRVWtsTlNWUkpWa1VzSUhKbGNYVnBjbVVvSnk0dlgyUmhkR1V0ZEc4dGNISnBiV2wwYVhabEp5a3BPeUlzSW5aaGNpQkVZWFJsVUhKdmRHOGdJQ0FnUFNCRVlYUmxMbkJ5YjNSdmRIbHdaVnh1SUNBc0lFbE9Wa0ZNU1VSZlJFRlVSU0E5SUNkSmJuWmhiR2xrSUVSaGRHVW5YRzRnSUN3Z1ZFOWZVMVJTU1U1SElDQWdJRDBnSjNSdlUzUnlhVzVuSjF4dUlDQXNJQ1IwYjFOMGNtbHVaeUFnSUNBOUlFUmhkR1ZRY205MGIxdFVUMTlUVkZKSlRrZGRYRzRnSUN3Z1oyVjBWR2x0WlNBZ0lDQWdJRDBnUkdGMFpWQnliM1J2TG1kbGRGUnBiV1U3WEc1cFppaHVaWGNnUkdGMFpTaE9ZVTRwSUNzZ0p5Y2dJVDBnU1U1V1FVeEpSRjlFUVZSRktYdGNiaUFnY21WeGRXbHlaU2duTGk5ZmNtVmtaV1pwYm1VbktTaEVZWFJsVUhKdmRHOHNJRlJQWDFOVVVrbE9SeXdnWm5WdVkzUnBiMjRnZEc5VGRISnBibWNvS1h0Y2JpQWdJQ0IyWVhJZ2RtRnNkV1VnUFNCblpYUlVhVzFsTG1OaGJHd29kR2hwY3lrN1hHNGdJQ0FnY21WMGRYSnVJSFpoYkhWbElEMDlQU0IyWVd4MVpTQS9JQ1IwYjFOMGNtbHVaeTVqWVd4c0tIUm9hWE1wSURvZ1NVNVdRVXhKUkY5RVFWUkZPMXh1SUNCOUtUdGNibjBpTENJdkx5QXhPUzR5TGpNdU1pQXZJREUxTGpNdU5DNDFJRVoxYm1OMGFXOXVMbkJ5YjNSdmRIbHdaUzVpYVc1a0tIUm9hWE5CY21jc0lHRnlaM011TGk0cFhHNTJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVQ3dnSjBaMWJtTjBhVzl1Snl3Z2UySnBibVE2SUhKbGNYVnBjbVVvSnk0dlgySnBibVFuS1gwcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JuWmhjaUJwYzA5aWFtVmpkQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJsekxXOWlhbVZqZENjcFhHNGdJQ3dnWjJWMFVISnZkRzkwZVhCbFQyWWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WjNCdkp5bGNiaUFnTENCSVFWTmZTVTVUVkVGT1EwVWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzZHJjeWNwS0Nkb1lYTkpibk4wWVc1alpTY3BYRzRnSUN3Z1JuVnVZM1JwYjI1UWNtOTBieUFnUFNCR2RXNWpkR2x2Ymk1d2NtOTBiM1I1Y0dVN1hHNHZMeUF4T1M0eUxqTXVOaUJHZFc1amRHbHZiaTV3Y205MGIzUjVjR1ZiUUVCb1lYTkpibk4wWVc1alpWMG9WaWxjYm1sbUtDRW9TRUZUWDBsT1UxUkJUa05GSUdsdUlFWjFibU4wYVc5dVVISnZkRzhwS1hKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxa2NDY3BMbVlvUm5WdVkzUnBiMjVRY205MGJ5d2dTRUZUWDBsT1UxUkJUa05GTENCN2RtRnNkV1U2SUdaMWJtTjBhVzl1S0U4cGUxeHVJQ0JwWmloMGVYQmxiMllnZEdocGN5QWhQU0FuWm5WdVkzUnBiMjRuSUh4OElDRnBjMDlpYW1WamRDaFBLU2x5WlhSMWNtNGdabUZzYzJVN1hHNGdJR2xtS0NGcGMwOWlhbVZqZENoMGFHbHpMbkJ5YjNSdmRIbHdaU2twY21WMGRYSnVJRThnYVc1emRHRnVZMlZ2WmlCMGFHbHpPMXh1SUNBdkx5Qm1iM0lnWlc1MmFYSnZibTFsYm5RZ2R5OXZJRzVoZEdsMlpTQmdRRUJvWVhOSmJuTjBZVzVqWldBZ2JHOW5hV01nWlc1dmRXZG9JR0JwYm5OMFlXNWpaVzltWUN3Z1luVjBJR0ZrWkNCMGFHbHpPbHh1SUNCM2FHbHNaU2hQSUQwZ1oyVjBVSEp2ZEc5MGVYQmxUMllvVHlrcGFXWW9kR2hwY3k1d2NtOTBiM1I1Y0dVZ1BUMDlJRThwY21WMGRYSnVJSFJ5ZFdVN1hHNGdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JuMTlLVHNpTENKMllYSWdaRkFnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxa2NDY3BMbVpjYmlBZ0xDQmpjbVZoZEdWRVpYTmpJRDBnY21WeGRXbHlaU2duTGk5ZmNISnZjR1Z5ZEhrdFpHVnpZeWNwWEc0Z0lDd2dhR0Z6SUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyaGhjeWNwWEc0Z0lDd2dSbEJ5YjNSdklDQWdJQ0E5SUVaMWJtTjBhVzl1TG5CeWIzUnZkSGx3WlZ4dUlDQXNJRzVoYldWU1JTQWdJQ0FnUFNBdlhseGNjeXBtZFc1amRHbHZiaUFvVzE0Z0tGMHFLUzljYmlBZ0xDQk9RVTFGSUNBZ0lDQWdJRDBnSjI1aGJXVW5PMXh1WEc1MllYSWdhWE5GZUhSbGJuTnBZbXhsSUQwZ1QySnFaV04wTG1selJYaDBaVzV6YVdKc1pTQjhmQ0JtZFc1amRHbHZiaWdwZTF4dUlDQnlaWFIxY200Z2RISjFaVHRjYm4wN1hHNWNiaTh2SURFNUxqSXVOQzR5SUc1aGJXVmNiazVCVFVVZ2FXNGdSbEJ5YjNSdklIeDhJSEpsY1hWcGNtVW9KeTR2WDJSbGMyTnlhWEIwYjNKekp5a2dKaVlnWkZBb1JsQnliM1J2TENCT1FVMUZMQ0I3WEc0Z0lHTnZibVpwWjNWeVlXSnNaVG9nZEhKMVpTeGNiaUFnWjJWME9pQm1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0IyWVhJZ2RHaGhkQ0E5SUhSb2FYTmNiaUFnSUNBZ0lDQWdMQ0J1WVcxbElEMGdLQ2NuSUNzZ2RHaGhkQ2t1YldGMFkyZ29ibUZ0WlZKRktWc3hYVHRjYmlBZ0lDQWdJR2hoY3loMGFHRjBMQ0JPUVUxRktTQjhmQ0FoYVhORmVIUmxibk5wWW14bEtIUm9ZWFFwSUh4OElHUlFLSFJvWVhRc0lFNUJUVVVzSUdOeVpXRjBaVVJsYzJNb05Td2dibUZ0WlNrcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUc1aGJXVTdYRzRnSUNBZ2ZTQmpZWFJqYUNobEtYdGNiaUFnSUNBZ0lISmxkSFZ5YmlBbkp6dGNiaUFnSUNCOVhHNGdJSDFjYm4wcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JuWmhjaUJ6ZEhKdmJtY2dQU0J5WlhGMWFYSmxLQ2N1TDE5amIyeHNaV04wYVc5dUxYTjBjbTl1WnljcE8xeHVYRzR2THlBeU15NHhJRTFoY0NCUFltcGxZM1J6WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhKbGNYVnBjbVVvSnk0dlgyTnZiR3hsWTNScGIyNG5LU2duVFdGd0p5d2dablZ1WTNScGIyNG9aMlYwS1h0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlFMWhjQ2dwZXlCeVpYUjFjbTRnWjJWMEtIUm9hWE1zSUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUGlBd0lEOGdZWEpuZFcxbGJuUnpXekJkSURvZ2RXNWtaV1pwYm1Wa0tUc2dmVHRjYm4wc0lIdGNiaUFnTHk4Z01qTXVNUzR6TGpZZ1RXRndMbkJ5YjNSdmRIbHdaUzVuWlhRb2EyVjVLVnh1SUNCblpYUTZJR1oxYm1OMGFXOXVJR2RsZENoclpYa3BlMXh1SUNBZ0lIWmhjaUJsYm5SeWVTQTlJSE4wY205dVp5NW5aWFJGYm5SeWVTaDBhR2x6TENCclpYa3BPMXh1SUNBZ0lISmxkSFZ5YmlCbGJuUnllU0FtSmlCbGJuUnllUzUyTzF4dUlDQjlMRnh1SUNBdkx5QXlNeTR4TGpNdU9TQk5ZWEF1Y0hKdmRHOTBlWEJsTG5ObGRDaHJaWGtzSUhaaGJIVmxLVnh1SUNCelpYUTZJR1oxYm1OMGFXOXVJSE5sZENoclpYa3NJSFpoYkhWbEtYdGNiaUFnSUNCeVpYUjFjbTRnYzNSeWIyNW5MbVJsWmloMGFHbHpMQ0JyWlhrZ1BUMDlJREFnUHlBd0lEb2dhMlY1TENCMllXeDFaU2s3WEc0Z0lIMWNibjBzSUhOMGNtOXVaeXdnZEhKMVpTazdJaXdpTHk4Z01qQXVNaTR5TGpNZ1RXRjBhQzVoWTI5emFDaDRLVnh1ZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lHeHZaekZ3SUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl0WVhSb0xXeHZaekZ3SnlsY2JpQWdMQ0J6Y1hKMElDQWdJRDBnVFdGMGFDNXpjWEowWEc0Z0lDd2dKR0ZqYjNOb0lDQTlJRTFoZEdndVlXTnZjMmc3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VElDc2dKR1Y0Y0c5eWRDNUdJQ29nSVNna1lXTnZjMmhjYmlBZ0x5OGdWamdnWW5Wbk9pQm9kSFJ3Y3pvdkwyTnZaR1V1WjI5dloyeGxMbU52YlM5d0wzWTRMMmx6YzNWbGN5OWtaWFJoYVd3L2FXUTlNelV3T1Z4dUlDQW1KaUJOWVhSb0xtWnNiMjl5S0NSaFkyOXphQ2hPZFcxaVpYSXVUVUZZWDFaQlRGVkZLU2tnUFQwZ056RXdYRzRnSUM4dklGUnZjaUJDY205M2MyVnlJR0oxWnpvZ1RXRjBhQzVoWTI5emFDaEpibVpwYm1sMGVTa2dMVDRnVG1GT0lGeHVJQ0FtSmlBa1lXTnZjMmdvU1c1bWFXNXBkSGtwSUQwOUlFbHVabWx1YVhSNVhHNHBMQ0FuVFdGMGFDY3NJSHRjYmlBZ1lXTnZjMmc2SUdaMWJtTjBhVzl1SUdGamIzTm9LSGdwZTF4dUlDQWdJSEpsZEhWeWJpQW9lQ0E5SUN0NEtTQThJREVnUHlCT1lVNGdPaUI0SUQ0Z09UUTVNRFl5TmpVdU5qSTBNalV4TlRaY2JpQWdJQ0FnSUQ4Z1RXRjBhQzVzYjJjb2VDa2dLeUJOWVhSb0xreE9NbHh1SUNBZ0lDQWdPaUJzYjJjeGNDaDRJQzBnTVNBcklITnhjblFvZUNBdElERXBJQ29nYzNGeWRDaDRJQ3NnTVNrcE8xeHVJQ0I5WEc1OUtUc2lMQ0l2THlBeU1DNHlMakl1TlNCTllYUm9MbUZ6YVc1b0tIZ3BYRzUyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z0pHRnphVzVvSUNBOUlFMWhkR2d1WVhOcGJtZzdYRzVjYm1aMWJtTjBhVzl1SUdGemFXNW9LSGdwZTF4dUlDQnlaWFIxY200Z0lXbHpSbWx1YVhSbEtIZ2dQU0FyZUNrZ2ZId2dlQ0E5UFNBd0lEOGdlQ0E2SUhnZ1BDQXdJRDhnTFdGemFXNW9LQzE0S1NBNklFMWhkR2d1Ykc5bktIZ2dLeUJOWVhSb0xuTnhjblFvZUNBcUlIZ2dLeUF4S1NrN1hHNTlYRzVjYmk4dklGUnZjaUJDY205M2MyVnlJR0oxWnpvZ1RXRjBhQzVoYzJsdWFDZ3dLU0F0UGlBdE1DQmNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRJQ3NnSkdWNGNHOXlkQzVHSUNvZ0lTZ2tZWE5wYm1nZ0ppWWdNU0F2SUNSaGMybHVhQ2d3S1NBK0lEQXBMQ0FuVFdGMGFDY3NJSHRoYzJsdWFEb2dZWE5wYm1oOUtUc2lMQ0l2THlBeU1DNHlMakl1TnlCTllYUm9MbUYwWVc1b0tIZ3BYRzUyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z0pHRjBZVzVvSUNBOUlFMWhkR2d1WVhSaGJtZzdYRzVjYmk4dklGUnZjaUJDY205M2MyVnlJR0oxWnpvZ1RXRjBhQzVoZEdGdWFDZ3RNQ2tnTFQ0Z01DQmNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRJQ3NnSkdWNGNHOXlkQzVHSUNvZ0lTZ2tZWFJoYm1nZ0ppWWdNU0F2SUNSaGRHRnVhQ2d0TUNrZ1BDQXdLU3dnSjAxaGRHZ25MQ0I3WEc0Z0lHRjBZVzVvT2lCbWRXNWpkR2x2YmlCaGRHRnVhQ2g0S1h0Y2JpQWdJQ0J5WlhSMWNtNGdLSGdnUFNBcmVDa2dQVDBnTUNBL0lIZ2dPaUJOWVhSb0xteHZaeWdvTVNBcklIZ3BJQzhnS0RFZ0xTQjRLU2tnTHlBeU8xeHVJQ0I5WEc1OUtUc2lMQ0l2THlBeU1DNHlMakl1T1NCTllYUm9MbU5pY25Rb2VDbGNiblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENCemFXZHVJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiV0YwYUMxemFXZHVKeWs3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VExDQW5UV0YwYUNjc0lIdGNiaUFnWTJKeWREb2dablZ1WTNScGIyNGdZMkp5ZENoNEtYdGNiaUFnSUNCeVpYUjFjbTRnYzJsbmJpaDRJRDBnSzNncElDb2dUV0YwYUM1d2IzY29UV0YwYUM1aFluTW9lQ2tzSURFZ0x5QXpLVHRjYmlBZ2ZWeHVmU2s3SWl3aUx5OGdNakF1TWk0eUxqRXhJRTFoZEdndVkyeDZNeklvZUNsY2JuWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlrN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRMQ0FuVFdGMGFDY3NJSHRjYmlBZ1kyeDZNekk2SUdaMWJtTjBhVzl1SUdOc2VqTXlLSGdwZTF4dUlDQWdJSEpsZEhWeWJpQW9lQ0ErUGo0OUlEQXBJRDhnTXpFZ0xTQk5ZWFJvTG1ac2IyOXlLRTFoZEdndWJHOW5LSGdnS3lBd0xqVXBJQ29nVFdGMGFDNU1UMGN5UlNrZ09pQXpNanRjYmlBZ2ZWeHVmU2s3SWl3aUx5OGdNakF1TWk0eUxqRXlJRTFoZEdndVkyOXphQ2g0S1Z4dWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJR1Y0Y0NBZ0lDQWdQU0JOWVhSb0xtVjRjRHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNc0lDZE5ZWFJvSnl3Z2UxeHVJQ0JqYjNOb09pQm1kVzVqZEdsdmJpQmpiM05vS0hncGUxeHVJQ0FnSUhKbGRIVnliaUFvWlhod0tIZ2dQU0FyZUNrZ0t5QmxlSEFvTFhncEtTQXZJREk3WEc0Z0lIMWNibjBwT3lJc0lpOHZJREl3TGpJdU1pNHhOQ0JOWVhSb0xtVjRjRzB4S0hncFhHNTJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnSkdWNGNHMHhJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyMWhkR2d0Wlhod2JURW5LVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNZ0t5QWtaWGh3YjNKMExrWWdLaUFvSkdWNGNHMHhJQ0U5SUUxaGRHZ3VaWGh3YlRFcExDQW5UV0YwYUNjc0lIdGxlSEJ0TVRvZ0pHVjRjRzB4ZlNrN0lpd2lMeThnTWpBdU1pNHlMakUySUUxaGRHZ3Vabkp2ZFc1a0tIZ3BYRzUyWVhJZ0pHVjRjRzl5ZENBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQnphV2R1SUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dFlYUm9MWE5wWjI0bktWeHVJQ0FzSUhCdmR5QWdJQ0FnSUNBOUlFMWhkR2d1Y0c5M1hHNGdJQ3dnUlZCVFNVeFBUaUFnSUQwZ2NHOTNLRElzSUMwMU1pbGNiaUFnTENCRlVGTkpURTlPTXpJZ1BTQndiM2NvTWl3Z0xUSXpLVnh1SUNBc0lFMUJXRE15SUNBZ0lDQTlJSEJ2ZHlneUxDQXhNamNwSUNvZ0tESWdMU0JGVUZOSlRFOU9NeklwWEc0Z0lDd2dUVWxPTXpJZ0lDQWdJRDBnY0c5M0tESXNJQzB4TWpZcE8xeHVYRzUyWVhJZ2NtOTFibVJVYVdWelZHOUZkbVZ1SUQwZ1puVnVZM1JwYjI0b2JpbDdYRzRnSUhKbGRIVnliaUJ1SUNzZ01TQXZJRVZRVTBsTVQwNGdMU0F4SUM4Z1JWQlRTVXhQVGp0Y2JuMDdYRzVjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNc0lDZE5ZWFJvSnl3Z2UxeHVJQ0JtY205MWJtUTZJR1oxYm1OMGFXOXVJR1p5YjNWdVpDaDRLWHRjYmlBZ0lDQjJZWElnSkdGaWN5QWdQU0JOWVhSb0xtRmljeWg0S1Z4dUlDQWdJQ0FnTENBa2MybG5iaUE5SUhOcFoyNG9lQ2xjYmlBZ0lDQWdJQ3dnWVN3Z2NtVnpkV3gwTzF4dUlDQWdJR2xtS0NSaFluTWdQQ0JOU1U0ek1pbHlaWFIxY200Z0pITnBaMjRnS2lCeWIzVnVaRlJwWlhOVWIwVjJaVzRvSkdGaWN5QXZJRTFKVGpNeUlDOGdSVkJUU1V4UFRqTXlLU0FxSUUxSlRqTXlJQ29nUlZCVFNVeFBUak15TzF4dUlDQWdJR0VnUFNBb01TQXJJRVZRVTBsTVQwNHpNaUF2SUVWUVUwbE1UMDRwSUNvZ0pHRmljenRjYmlBZ0lDQnlaWE4xYkhRZ1BTQmhJQzBnS0dFZ0xTQWtZV0p6S1R0Y2JpQWdJQ0JwWmloeVpYTjFiSFFnUGlCTlFWZ3pNaUI4ZkNCeVpYTjFiSFFnSVQwZ2NtVnpkV3gwS1hKbGRIVnliaUFrYzJsbmJpQXFJRWx1Wm1sdWFYUjVPMXh1SUNBZ0lISmxkSFZ5YmlBa2MybG5iaUFxSUhKbGMzVnNkRHRjYmlBZ2ZWeHVmU2s3SWl3aUx5OGdNakF1TWk0eUxqRTNJRTFoZEdndWFIbHdiM1FvVzNaaGJIVmxNVnNzSUhaaGJIVmxNbHNzSU9LQXBpQmRYVjBwWEc1MllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2dZV0p6SUNBZ0lDQTlJRTFoZEdndVlXSnpPMXh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXl3Z0owMWhkR2duTENCN1hHNGdJR2g1Y0c5ME9pQm1kVzVqZEdsdmJpQm9lWEJ2ZENoMllXeDFaVEVzSUhaaGJIVmxNaWw3SUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFd4cGJtVWdibTh0ZFc1MWMyVmtMWFpoY25OY2JpQWdJQ0IyWVhJZ2MzVnRJQ0E5SURCY2JpQWdJQ0FnSUN3Z2FTQWdJQ0E5SURCY2JpQWdJQ0FnSUN3Z1lVeGxiaUE5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2hjYmlBZ0lDQWdJQ3dnYkdGeVp5QTlJREJjYmlBZ0lDQWdJQ3dnWVhKbkxDQmthWFk3WEc0Z0lDQWdkMmhwYkdVb2FTQThJR0ZNWlc0cGUxeHVJQ0FnSUNBZ1lYSm5JRDBnWVdKektHRnlaM1Z0Wlc1MGMxdHBLeXRkS1R0Y2JpQWdJQ0FnSUdsbUtHeGhjbWNnUENCaGNtY3BlMXh1SUNBZ0lDQWdJQ0JrYVhZZ0lEMGdiR0Z5WnlBdklHRnlaenRjYmlBZ0lDQWdJQ0FnYzNWdElDQTlJSE4xYlNBcUlHUnBkaUFxSUdScGRpQXJJREU3WEc0Z0lDQWdJQ0FnSUd4aGNtY2dQU0JoY21jN1hHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZb1lYSm5JRDRnTUNsN1hHNGdJQ0FnSUNBZ0lHUnBkaUFnUFNCaGNtY2dMeUJzWVhKbk8xeHVJQ0FnSUNBZ0lDQnpkVzBnS3owZ1pHbDJJQ29nWkdsMk8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUhOMWJTQXJQU0JoY21jN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnNZWEpuSUQwOVBTQkpibVpwYm1sMGVTQS9JRWx1Wm1sdWFYUjVJRG9nYkdGeVp5QXFJRTFoZEdndWMzRnlkQ2h6ZFcwcE8xeHVJQ0I5WEc1OUtUc2lMQ0l2THlBeU1DNHlMakl1TVRnZ1RXRjBhQzVwYlhWc0tIZ3NJSGtwWEc1MllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2dKR2x0ZFd3Z0lDQTlJRTFoZEdndWFXMTFiRHRjYmx4dUx5OGdjMjl0WlNCWFpXSkxhWFFnZG1WeWMybHZibk1nWm1GcGJITWdkMmwwYUNCaWFXY2diblZ0WW1WeWN5d2djMjl0WlNCb1lYTWdkM0p2Ym1jZ1lYSnBkSGxjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUSUNzZ0pHVjRjRzl5ZEM1R0lDb2djbVZ4ZFdseVpTZ25MaTlmWm1GcGJITW5LU2htZFc1amRHbHZiaWdwZTF4dUlDQnlaWFIxY200Z0pHbHRkV3dvTUhobVptWm1abVptWml3Z05Ta2dJVDBnTFRVZ2ZId2dKR2x0ZFd3dWJHVnVaM1JvSUNFOUlESTdYRzU5S1N3Z0owMWhkR2duTENCN1hHNGdJR2x0ZFd3NklHWjFibU4wYVc5dUlHbHRkV3dvZUN3Z2VTbDdYRzRnSUNBZ2RtRnlJRlZKVGxReE5pQTlJREI0Wm1abVpseHVJQ0FnSUNBZ0xDQjRiaUE5SUN0NFhHNGdJQ0FnSUNBc0lIbHVJRDBnSzNsY2JpQWdJQ0FnSUN3Z2VHd2dQU0JWU1U1VU1UWWdKaUI0Ymx4dUlDQWdJQ0FnTENCNWJDQTlJRlZKVGxReE5pQW1JSGx1TzF4dUlDQWdJSEpsZEhWeWJpQXdJSHdnZUd3Z0tpQjViQ0FySUNnb1ZVbE9WREUySUNZZ2VHNGdQajQrSURFMktTQXFJSGxzSUNzZ2VHd2dLaUFvVlVsT1ZERTJJQ1lnZVc0Z1BqNCtJREUyS1NBOFBDQXhOaUErUGo0Z01DazdYRzRnSUgxY2JuMHBPeUlzSWk4dklESXdMakl1TWk0eU1TQk5ZWFJvTG14dlp6RXdLSGdwWEc1MllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5d2dKMDFoZEdnbkxDQjdYRzRnSUd4dlp6RXdPaUJtZFc1amRHbHZiaUJzYjJjeE1DaDRLWHRjYmlBZ0lDQnlaWFIxY200Z1RXRjBhQzVzYjJjb2VDa2dMeUJOWVhSb0xreE9NVEE3WEc0Z0lIMWNibjBwT3lJc0lpOHZJREl3TGpJdU1pNHlNQ0JOWVhSb0xteHZaekZ3S0hncFhHNTJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeXdnSjAxaGRHZ25MQ0I3Ykc5bk1YQTZJSEpsY1hWcGNtVW9KeTR2WDIxaGRHZ3RiRzluTVhBbktYMHBPeUlzSWk4dklESXdMakl1TWk0eU1pQk5ZWFJvTG14dlp6SW9lQ2xjYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWs3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VExDQW5UV0YwYUNjc0lIdGNiaUFnYkc5bk1qb2dablZ1WTNScGIyNGdiRzluTWloNEtYdGNiaUFnSUNCeVpYUjFjbTRnVFdGMGFDNXNiMmNvZUNrZ0x5Qk5ZWFJvTGt4T01qdGNiaUFnZlZ4dWZTazdJaXdpTHk4Z01qQXVNaTR5TGpJNElFMWhkR2d1YzJsbmJpaDRLVnh1ZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNc0lDZE5ZWFJvSnl3Z2UzTnBaMjQ2SUhKbGNYVnBjbVVvSnk0dlgyMWhkR2d0YzJsbmJpY3BmU2s3SWl3aUx5OGdNakF1TWk0eUxqTXdJRTFoZEdndWMybHVhQ2g0S1Z4dWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJR1Y0Y0cweElDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dFlYUm9MV1Y0Y0cweEp5bGNiaUFnTENCbGVIQWdJQ0FnSUQwZ1RXRjBhQzVsZUhBN1hHNWNiaTh2SUZZNElHNWxZWElnUTJoeWIyMXBkVzBnTXpnZ2FHRnpJR0VnY0hKdllteGxiU0IzYVhSb0lIWmxjbmtnYzIxaGJHd2diblZ0WW1WeWMxeHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTWdLeUFrWlhod2IzSjBMa1lnS2lCeVpYRjFhWEpsS0NjdUwxOW1ZV2xzY3ljcEtHWjFibU4wYVc5dUtDbDdYRzRnSUhKbGRIVnliaUFoVFdGMGFDNXphVzVvS0MweVpTMHhOeWtnSVQwZ0xUSmxMVEUzTzF4dWZTa3NJQ2ROWVhSb0p5d2dlMXh1SUNCemFXNW9PaUJtZFc1amRHbHZiaUJ6YVc1b0tIZ3BlMXh1SUNBZ0lISmxkSFZ5YmlCTllYUm9MbUZpY3loNElEMGdLM2dwSUR3Z01WeHVJQ0FnSUNBZ1B5QW9aWGh3YlRFb2VDa2dMU0JsZUhCdE1TZ3RlQ2twSUM4Z01seHVJQ0FnSUNBZ09pQW9aWGh3S0hnZ0xTQXhLU0F0SUdWNGNDZ3RlQ0F0SURFcEtTQXFJQ2hOWVhSb0xrVWdMeUF5S1R0Y2JpQWdmVnh1ZlNrN0lpd2lMeThnTWpBdU1pNHlMak16SUUxaGRHZ3VkR0Z1YUNoNEtWeHVkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUdWNGNHMHhJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXRZWFJvTFdWNGNHMHhKeWxjYmlBZ0xDQmxlSEFnSUNBZ0lEMGdUV0YwYUM1bGVIQTdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUTENBblRXRjBhQ2NzSUh0Y2JpQWdkR0Z1YURvZ1puVnVZM1JwYjI0Z2RHRnVhQ2g0S1h0Y2JpQWdJQ0IyWVhJZ1lTQTlJR1Y0Y0cweEtIZ2dQU0FyZUNsY2JpQWdJQ0FnSUN3Z1lpQTlJR1Y0Y0cweEtDMTRLVHRjYmlBZ0lDQnlaWFIxY200Z1lTQTlQU0JKYm1acGJtbDBlU0EvSURFZ09pQmlJRDA5SUVsdVptbHVhWFI1SUQ4Z0xURWdPaUFvWVNBdElHSXBJQzhnS0dWNGNDaDRLU0FySUdWNGNDZ3RlQ2twTzF4dUlDQjlYRzU5S1RzaUxDSXZMeUF5TUM0eUxqSXVNelFnVFdGMGFDNTBjblZ1WXloNEtWeHVkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1zSUNkTllYUm9KeXdnZTF4dUlDQjBjblZ1WXpvZ1puVnVZM1JwYjI0Z2RISjFibU1vYVhRcGUxeHVJQ0FnSUhKbGRIVnliaUFvYVhRZ1BpQXdJRDhnVFdGMGFDNW1iRzl2Y2lBNklFMWhkR2d1WTJWcGJDa29hWFFwTzF4dUlDQjlYRzU5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdaMnh2WW1Gc0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bmJHOWlZV3duS1Z4dUlDQXNJR2hoY3lBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmFHRnpKeWxjYmlBZ0xDQmpiMllnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJOdlppY3BYRzRnSUN3Z2FXNW9aWEpwZEVsbVVtVnhkV2x5WldRZ1BTQnlaWEYxYVhKbEtDY3VMMTlwYm1obGNtbDBMV2xtTFhKbGNYVnBjbVZrSnlsY2JpQWdMQ0IwYjFCeWFXMXBkR2wyWlNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMWEJ5YVcxcGRHbDJaU2NwWEc0Z0lDd2dabUZwYkhNZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bVlXbHNjeWNwWEc0Z0lDd2daMDlRVGlBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WjI5d2JpY3BMbVpjYmlBZ0xDQm5UMUJFSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFuYjNCa0p5a3VabHh1SUNBc0lHUlFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV1J3SnlrdVpseHVJQ0FzSUNSMGNtbHRJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZjM1J5YVc1bkxYUnlhVzBuS1M1MGNtbHRYRzRnSUN3Z1RsVk5Ra1ZTSUNBZ0lDQWdJQ0FnSUNBZ1BTQW5UblZ0WW1WeUoxeHVJQ0FzSUNST2RXMWlaWElnSUNBZ0lDQWdJQ0FnSUQwZ1oyeHZZbUZzVzA1VlRVSkZVbDFjYmlBZ0xDQkNZWE5sSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJQ1JPZFcxaVpYSmNiaUFnTENCd2NtOTBieUFnSUNBZ0lDQWdJQ0FnSUNBOUlDUk9kVzFpWlhJdWNISnZkRzkwZVhCbFhHNGdJQzh2SUU5d1pYSmhJSDR4TWlCb1lYTWdZbkp2YTJWdUlFOWlhbVZqZENOMGIxTjBjbWx1WjF4dUlDQXNJRUpTVDB0RlRsOURUMFlnSUNBZ0lDQWdJRDBnWTI5bUtISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMWpjbVZoZEdVbktTaHdjbTkwYnlrcElEMDlJRTVWVFVKRlVseHVJQ0FzSUZSU1NVMGdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ0ozUnlhVzBuSUdsdUlGTjBjbWx1Wnk1d2NtOTBiM1I1Y0dVN1hHNWNiaTh2SURjdU1TNHpJRlJ2VG5WdFltVnlLR0Z5WjNWdFpXNTBLVnh1ZG1GeUlIUnZUblZ0WW1WeUlEMGdablZ1WTNScGIyNG9ZWEpuZFcxbGJuUXBlMXh1SUNCMllYSWdhWFFnUFNCMGIxQnlhVzFwZEdsMlpTaGhjbWQxYldWdWRDd2dabUZzYzJVcE8xeHVJQ0JwWmloMGVYQmxiMllnYVhRZ1BUMGdKM04wY21sdVp5Y2dKaVlnYVhRdWJHVnVaM1JvSUQ0Z01pbDdYRzRnSUNBZ2FYUWdQU0JVVWtsTklEOGdhWFF1ZEhKcGJTZ3BJRG9nSkhSeWFXMG9hWFFzSURNcE8xeHVJQ0FnSUhaaGNpQm1hWEp6ZENBOUlHbDBMbU5vWVhKRGIyUmxRWFFvTUNsY2JpQWdJQ0FnSUN3Z2RHaHBjbVFzSUhKaFpHbDRMQ0J0WVhoRGIyUmxPMXh1SUNBZ0lHbG1LR1pwY25OMElEMDlQU0EwTXlCOGZDQm1hWEp6ZENBOVBUMGdORFVwZTF4dUlDQWdJQ0FnZEdocGNtUWdQU0JwZEM1amFHRnlRMjlrWlVGMEtESXBPMXh1SUNBZ0lDQWdhV1lvZEdocGNtUWdQVDA5SURnNElIeDhJSFJvYVhKa0lEMDlQU0F4TWpBcGNtVjBkWEp1SUU1aFRqc2dMeThnVG5WdFltVnlLQ2NyTUhneEp5a2djMmh2ZFd4a0lHSmxJRTVoVGl3Z2IyeGtJRlk0SUdacGVGeHVJQ0FnSUgwZ1pXeHpaU0JwWmlobWFYSnpkQ0E5UFQwZ05EZ3BlMXh1SUNBZ0lDQWdjM2RwZEdOb0tHbDBMbU5vWVhKRGIyUmxRWFFvTVNrcGUxeHVJQ0FnSUNBZ0lDQmpZWE5sSURZMklEb2dZMkZ6WlNBNU9DQWdPaUJ5WVdScGVDQTlJREk3SUcxaGVFTnZaR1VnUFNBME9Uc2dZbkpsWVdzN0lDOHZJR1poYzNRZ1pYRjFZV3dnTDE0d1lsc3dNVjBySkM5cFhHNGdJQ0FnSUNBZ0lHTmhjMlVnTnprZ09pQmpZWE5sSURFeE1TQTZJSEpoWkdsNElEMGdPRHNnYldGNFEyOWtaU0E5SURVMU95QmljbVZoYXpzZ0x5OGdabUZ6ZENCbGNYVmhiQ0F2WGpCdld6QXROMTBySkM5cFhHNGdJQ0FnSUNBZ0lHUmxabUYxYkhRZ09pQnlaWFIxY200Z0sybDBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdabTl5S0haaGNpQmthV2RwZEhNZ1BTQnBkQzV6YkdsalpTZ3lLU3dnYVNBOUlEQXNJR3dnUFNCa2FXZHBkSE11YkdWdVozUm9MQ0JqYjJSbE95QnBJRHdnYkRzZ2FTc3JLWHRjYmlBZ0lDQWdJQ0FnWTI5a1pTQTlJR1JwWjJsMGN5NWphR0Z5UTI5a1pVRjBLR2twTzF4dUlDQWdJQ0FnSUNBdkx5QndZWEp6WlVsdWRDQndZWEp6WlhNZ1lTQnpkSEpwYm1jZ2RHOGdZU0JtYVhKemRDQjFibUYyWVdsc1lXSnNaU0J6ZVcxaWIyeGNiaUFnSUNBZ0lDQWdMeThnWW5WMElGUnZUblZ0WW1WeUlITm9iM1ZzWkNCeVpYUjFjbTRnVG1GT0lHbG1JR0VnYzNSeWFXNW5JR052Ym5SaGFXNXpJSFZ1WVhaaGFXeGhZbXhsSUhONWJXSnZiSE5jYmlBZ0lDQWdJQ0FnYVdZb1kyOWtaU0E4SURRNElIeDhJR052WkdVZ1BpQnRZWGhEYjJSbEtYSmxkSFZ5YmlCT1lVNDdYRzRnSUNBZ0lDQjlJSEpsZEhWeWJpQndZWEp6WlVsdWRDaGthV2RwZEhNc0lISmhaR2w0S1R0Y2JpQWdJQ0I5WEc0Z0lIMGdjbVYwZFhKdUlDdHBkRHRjYm4wN1hHNWNibWxtS0NFa1RuVnRZbVZ5S0NjZ01HOHhKeWtnZkh3Z0lTUk9kVzFpWlhJb0p6QmlNU2NwSUh4OElDUk9kVzFpWlhJb0p5c3dlREVuS1NsN1hHNGdJQ1JPZFcxaVpYSWdQU0JtZFc1amRHbHZiaUJPZFcxaVpYSW9kbUZzZFdVcGUxeHVJQ0FnSUhaaGNpQnBkQ0E5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUENBeElEOGdNQ0E2SUhaaGJIVmxYRzRnSUNBZ0lDQXNJSFJvWVhRZ1BTQjBhR2x6TzF4dUlDQWdJSEpsZEhWeWJpQjBhR0YwSUdsdWMzUmhibU5sYjJZZ0pFNTFiV0psY2x4dUlDQWdJQ0FnTHk4Z1kyaGxZMnNnYjI0Z01TNHVZMjl1YzNSeWRXTjBiM0lvWm05dktTQmpZWE5sWEc0Z0lDQWdJQ0FtSmlBb1FsSlBTMFZPWDBOUFJpQS9JR1poYVd4ektHWjFibU4wYVc5dUtDbDdJSEJ5YjNSdkxuWmhiSFZsVDJZdVkyRnNiQ2gwYUdGMEtUc2dmU2tnT2lCamIyWW9kR2hoZENrZ0lUMGdUbFZOUWtWU0tWeHVJQ0FnSUNBZ0lDQS9JR2x1YUdWeWFYUkpabEpsY1hWcGNtVmtLRzVsZHlCQ1lYTmxLSFJ2VG5WdFltVnlLR2wwS1Nrc0lIUm9ZWFFzSUNST2RXMWlaWElwSURvZ2RHOU9kVzFpWlhJb2FYUXBPMXh1SUNCOU8xeHVJQ0JtYjNJb2RtRnlJR3RsZVhNZ1BTQnlaWEYxYVhKbEtDY3VMMTlrWlhOamNtbHdkRzl5Y3ljcElEOGdaMDlRVGloQ1lYTmxLU0E2SUNoY2JpQWdJQ0F2THlCRlV6TTZYRzRnSUNBZ0owMUJXRjlXUVV4VlJTeE5TVTVmVmtGTVZVVXNUbUZPTEU1RlIwRlVTVlpGWDBsT1JrbE9TVlJaTEZCUFUwbFVTVlpGWDBsT1JrbE9TVlJaTENjZ0sxeHVJQ0FnSUM4dklFVlROaUFvYVc0Z1kyRnpaU3dnYVdZZ2JXOWtkV3hsY3lCM2FYUm9JRVZUTmlCT2RXMWlaWElnYzNSaGRHbGpjeUJ5WlhGMWFYSmxaQ0JpWldadmNtVXBPbHh1SUNBZ0lDZEZVRk5KVEU5T0xHbHpSbWx1YVhSbExHbHpTVzUwWldkbGNpeHBjMDVoVGl4cGMxTmhabVZKYm5SbFoyVnlMRTFCV0Y5VFFVWkZYMGxPVkVWSFJWSXNKeUFyWEc0Z0lDQWdKMDFKVGw5VFFVWkZYMGxPVkVWSFJWSXNjR0Z5YzJWR2JHOWhkQ3h3WVhKelpVbHVkQ3hwYzBsdWRHVm5aWEluWEc0Z0lDa3VjM0JzYVhRb0p5d25LU3dnYWlBOUlEQXNJR3RsZVRzZ2EyVjVjeTVzWlc1bmRHZ2dQaUJxT3lCcUt5c3BlMXh1SUNBZ0lHbG1LR2hoY3loQ1lYTmxMQ0JyWlhrZ1BTQnJaWGx6VzJwZEtTQW1KaUFoYUdGektDUk9kVzFpWlhJc0lHdGxlU2twZTF4dUlDQWdJQ0FnWkZBb0pFNTFiV0psY2l3Z2EyVjVMQ0JuVDFCRUtFSmhjMlVzSUd0bGVTa3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQWtUblZ0WW1WeUxuQnliM1J2ZEhsd1pTQTlJSEJ5YjNSdk8xeHVJQ0J3Y205MGJ5NWpiMjV6ZEhKMVkzUnZjaUE5SUNST2RXMWlaWEk3WEc0Z0lISmxjWFZwY21Vb0p5NHZYM0psWkdWbWFXNWxKeWtvWjJ4dlltRnNMQ0JPVlUxQ1JWSXNJQ1JPZFcxaVpYSXBPMXh1ZlNJc0lpOHZJREl3TGpFdU1pNHhJRTUxYldKbGNpNUZVRk5KVEU5T1hHNTJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeXdnSjA1MWJXSmxjaWNzSUh0RlVGTkpURTlPT2lCTllYUm9MbkJ2ZHlneUxDQXROVElwZlNrN0lpd2lMeThnTWpBdU1TNHlMaklnVG5WdFltVnlMbWx6Um1sdWFYUmxLRzUxYldKbGNpbGNiblpoY2lBa1pYaHdiM0owSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lGOXBjMFpwYm1sMFpTQTlJSEpsY1hWcGNtVW9KeTR2WDJkc2IySmhiQ2NwTG1selJtbHVhWFJsTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5d2dKMDUxYldKbGNpY3NJSHRjYmlBZ2FYTkdhVzVwZEdVNklHWjFibU4wYVc5dUlHbHpSbWx1YVhSbEtHbDBLWHRjYmlBZ0lDQnlaWFIxY200Z2RIbHdaVzltSUdsMElEMDlJQ2R1ZFcxaVpYSW5JQ1ltSUY5cGMwWnBibWwwWlNocGRDazdYRzRnSUgxY2JuMHBPeUlzSWk4dklESXdMakV1TWk0eklFNTFiV0psY2k1cGMwbHVkR1ZuWlhJb2JuVnRZbVZ5S1Z4dWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTXNJQ2RPZFcxaVpYSW5MQ0I3YVhOSmJuUmxaMlZ5T2lCeVpYRjFhWEpsS0NjdUwxOXBjeTFwYm5SbFoyVnlKeWw5S1RzaUxDSXZMeUF5TUM0eExqSXVOQ0JPZFcxaVpYSXVhWE5PWVU0b2JuVnRZbVZ5S1Z4dWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTXNJQ2RPZFcxaVpYSW5MQ0I3WEc0Z0lHbHpUbUZPT2lCbWRXNWpkR2x2YmlCcGMwNWhUaWh1ZFcxaVpYSXBlMXh1SUNBZ0lISmxkSFZ5YmlCdWRXMWlaWElnSVQwZ2JuVnRZbVZ5TzF4dUlDQjlYRzU5S1RzaUxDSXZMeUF5TUM0eExqSXVOU0JPZFcxaVpYSXVhWE5UWVdabFNXNTBaV2RsY2lodWRXMWlaWElwWEc1MllYSWdKR1Y0Y0c5eWRDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0JwYzBsdWRHVm5aWElnUFNCeVpYRjFhWEpsS0NjdUwxOXBjeTFwYm5SbFoyVnlKeWxjYmlBZ0xDQmhZbk1nSUNBZ0lDQWdQU0JOWVhSb0xtRmljenRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNc0lDZE9kVzFpWlhJbkxDQjdYRzRnSUdselUyRm1aVWx1ZEdWblpYSTZJR1oxYm1OMGFXOXVJR2x6VTJGbVpVbHVkR1ZuWlhJb2JuVnRZbVZ5S1h0Y2JpQWdJQ0J5WlhSMWNtNGdhWE5KYm5SbFoyVnlLRzUxYldKbGNpa2dKaVlnWVdKektHNTFiV0psY2lrZ1BEMGdNSGd4Wm1abVptWm1abVptWm1abVpqdGNiaUFnZlZ4dWZTazdJaXdpTHk4Z01qQXVNUzR5TGpZZ1RuVnRZbVZ5TGsxQldGOVRRVVpGWDBsT1ZFVkhSVkpjYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWs3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VExDQW5UblZ0WW1WeUp5d2dlMDFCV0Y5VFFVWkZYMGxPVkVWSFJWSTZJREI0TVdabVptWm1abVptWm1abVptWjlLVHNpTENJdkx5QXlNQzR4TGpJdU1UQWdUblZ0WW1WeUxrMUpUbDlUUVVaRlgwbE9WRVZIUlZKY2JuWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlrN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRMQ0FuVG5WdFltVnlKeXdnZTAxSlRsOVRRVVpGWDBsT1ZFVkhSVkk2SUMwd2VERm1abVptWm1abVptWm1abVptZlNrN0lpd2lkbUZ5SUNSbGVIQnZjblFnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQWtjR0Z5YzJWR2JHOWhkQ0E5SUhKbGNYVnBjbVVvSnk0dlgzQmhjbk5sTFdac2IyRjBKeWs3WEc0dkx5QXlNQzR4TGpJdU1USWdUblZ0WW1WeUxuQmhjbk5sUm14dllYUW9jM1J5YVc1bktWeHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTWdLeUFrWlhod2IzSjBMa1lnS2lBb1RuVnRZbVZ5TG5CaGNuTmxSbXh2WVhRZ0lUMGdKSEJoY25ObFJteHZZWFFwTENBblRuVnRZbVZ5Snl3Z2UzQmhjbk5sUm14dllYUTZJQ1J3WVhKelpVWnNiMkYwZlNrN0lpd2lkbUZ5SUNSbGVIQnZjblFnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z0pIQmhjbk5sU1c1MElEMGdjbVZ4ZFdseVpTZ25MaTlmY0dGeWMyVXRhVzUwSnlrN1hHNHZMeUF5TUM0eExqSXVNVE1nVG5WdFltVnlMbkJoY25ObFNXNTBLSE4wY21sdVp5d2djbUZrYVhncFhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5QXJJQ1JsZUhCdmNuUXVSaUFxSUNoT2RXMWlaWEl1Y0dGeWMyVkpiblFnSVQwZ0pIQmhjbk5sU1c1MEtTd2dKMDUxYldKbGNpY3NJSHR3WVhKelpVbHVkRG9nSkhCaGNuTmxTVzUwZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJQ1JsZUhCdmNuUWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z2RHOUpiblJsWjJWeUlDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRhVzUwWldkbGNpY3BYRzRnSUN3Z1lVNTFiV0psY2xaaGJIVmxJRDBnY21WeGRXbHlaU2duTGk5ZllTMXVkVzFpWlhJdGRtRnNkV1VuS1Z4dUlDQXNJSEpsY0dWaGRDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM04wY21sdVp5MXlaWEJsWVhRbktWeHVJQ0FzSUNSMGIwWnBlR1ZrSUNBZ0lDQTlJREV1TG5SdlJtbDRaV1JjYmlBZ0xDQm1iRzl2Y2lBZ0lDQWdJQ0FnUFNCTllYUm9MbVpzYjI5eVhHNGdJQ3dnWkdGMFlTQWdJQ0FnSUNBZ0lEMGdXekFzSURBc0lEQXNJREFzSURBc0lEQmRYRzRnSUN3Z1JWSlNUMUlnSUNBZ0lDQWdJRDBnSjA1MWJXSmxjaTUwYjBacGVHVmtPaUJwYm1OdmNuSmxZM1FnYVc1MmIyTmhkR2x2YmlFblhHNGdJQ3dnV2tWU1R5QWdJQ0FnSUNBZ0lEMGdKekFuTzF4dVhHNTJZWElnYlhWc2RHbHdiSGtnUFNCbWRXNWpkR2x2YmlodUxDQmpLWHRjYmlBZ2RtRnlJR2tnSUQwZ0xURmNiaUFnSUNBc0lHTXlJRDBnWXp0Y2JpQWdkMmhwYkdVb0t5dHBJRHdnTmlsN1hHNGdJQ0FnWXpJZ0t6MGdiaUFxSUdSaGRHRmJhVjA3WEc0Z0lDQWdaR0YwWVZ0cFhTQTlJR015SUNVZ01XVTNPMXh1SUNBZ0lHTXlJRDBnWm14dmIzSW9ZeklnTHlBeFpUY3BPMXh1SUNCOVhHNTlPMXh1ZG1GeUlHUnBkbWxrWlNBOUlHWjFibU4wYVc5dUtHNHBlMXh1SUNCMllYSWdhU0E5SURaY2JpQWdJQ0FzSUdNZ1BTQXdPMXh1SUNCM2FHbHNaU2d0TFdrZ1BqMGdNQ2w3WEc0Z0lDQWdZeUFyUFNCa1lYUmhXMmxkTzF4dUlDQWdJR1JoZEdGYmFWMGdQU0JtYkc5dmNpaGpJQzhnYmlrN1hHNGdJQ0FnWXlBOUlDaGpJQ1VnYmlrZ0tpQXhaVGM3WEc0Z0lIMWNibjA3WEc1MllYSWdiblZ0Vkc5VGRISnBibWNnUFNCbWRXNWpkR2x2YmlncGUxeHVJQ0IyWVhJZ2FTQTlJRFpjYmlBZ0lDQXNJSE1nUFNBbkp6dGNiaUFnZDJocGJHVW9MUzFwSUQ0OUlEQXBlMXh1SUNBZ0lHbG1LSE1nSVQwOUlDY25JSHg4SUdrZ1BUMDlJREFnZkh3Z1pHRjBZVnRwWFNBaFBUMGdNQ2w3WEc0Z0lDQWdJQ0IyWVhJZ2RDQTlJRk4wY21sdVp5aGtZWFJoVzJsZEtUdGNiaUFnSUNBZ0lITWdQU0J6SUQwOVBTQW5KeUEvSUhRZ09pQnpJQ3NnY21Wd1pXRjBMbU5oYkd3b1drVlNUeXdnTnlBdElIUXViR1Z1WjNSb0tTQXJJSFE3WEc0Z0lDQWdmVnh1SUNCOUlISmxkSFZ5YmlCek8xeHVmVHRjYm5aaGNpQndiM2NnUFNCbWRXNWpkR2x2YmloNExDQnVMQ0JoWTJNcGUxeHVJQ0J5WlhSMWNtNGdiaUE5UFQwZ01DQS9JR0ZqWXlBNklHNGdKU0F5SUQwOVBTQXhJRDhnY0c5M0tIZ3NJRzRnTFNBeExDQmhZMk1nS2lCNEtTQTZJSEJ2ZHloNElDb2dlQ3dnYmlBdklESXNJR0ZqWXlrN1hHNTlPMXh1ZG1GeUlHeHZaeUE5SUdaMWJtTjBhVzl1S0hncGUxeHVJQ0IyWVhJZ2JpQWdQU0F3WEc0Z0lDQWdMQ0I0TWlBOUlIZzdYRzRnSUhkb2FXeGxLSGd5SUQ0OUlEUXdPVFlwZTF4dUlDQWdJRzRnS3owZ01USTdYRzRnSUNBZ2VESWdMejBnTkRBNU5qdGNiaUFnZlZ4dUlDQjNhR2xzWlNoNE1pQStQU0F5S1h0Y2JpQWdJQ0J1SUNBclBTQXhPMXh1SUNBZ0lIZ3lJQzg5SURJN1hHNGdJSDBnY21WMGRYSnVJRzQ3WEc1OU8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVQ0FySUNSbGVIQnZjblF1UmlBcUlDZ2hJU1IwYjBacGVHVmtJQ1ltSUNoY2JpQWdNQzR3TURBd09DNTBiMFpwZUdWa0tETXBJQ0U5UFNBbk1DNHdNREFuSUh4OFhHNGdJREF1T1M1MGIwWnBlR1ZrS0RBcElDRTlQU0FuTVNjZ2ZIeGNiaUFnTVM0eU5UVXVkRzlHYVhobFpDZ3lLU0FoUFQwZ0p6RXVNalVuSUh4OFhHNGdJREV3TURBd01EQXdNREF3TURBd01EQXhNamd1TG5SdlJtbDRaV1FvTUNrZ0lUMDlJQ2N4TURBd01EQXdNREF3TURBd01EQXdNVEk0SjF4dUtTQjhmQ0FoY21WeGRXbHlaU2duTGk5ZlptRnBiSE1uS1NobWRXNWpkR2x2YmlncGUxeHVJQ0F2THlCV09DQitJRUZ1WkhKdmFXUWdOQzR6TFZ4dUlDQWtkRzlHYVhobFpDNWpZV3hzS0h0OUtUdGNibjBwS1N3Z0owNTFiV0psY2ljc0lIdGNiaUFnZEc5R2FYaGxaRG9nWm5WdVkzUnBiMjRnZEc5R2FYaGxaQ2htY21GamRHbHZia1JwWjJsMGN5bDdYRzRnSUNBZ2RtRnlJSGdnUFNCaFRuVnRZbVZ5Vm1Gc2RXVW9kR2hwY3l3Z1JWSlNUMUlwWEc0Z0lDQWdJQ0FzSUdZZ1BTQjBiMGx1ZEdWblpYSW9abkpoWTNScGIyNUVhV2RwZEhNcFhHNGdJQ0FnSUNBc0lITWdQU0FuSjF4dUlDQWdJQ0FnTENCdElEMGdXa1ZTVDF4dUlDQWdJQ0FnTENCbExDQjZMQ0JxTENCck8xeHVJQ0FnSUdsbUtHWWdQQ0F3SUh4OElHWWdQaUF5TUNsMGFISnZkeUJTWVc1blpVVnljbTl5S0VWU1VrOVNLVHRjYmlBZ0lDQnBaaWg0SUNFOUlIZ3BjbVYwZFhKdUlDZE9ZVTRuTzF4dUlDQWdJR2xtS0hnZ1BEMGdMVEZsTWpFZ2ZId2dlQ0ErUFNBeFpUSXhLWEpsZEhWeWJpQlRkSEpwYm1jb2VDazdYRzRnSUNBZ2FXWW9lQ0E4SURBcGUxeHVJQ0FnSUNBZ2N5QTlJQ2N0Snp0Y2JpQWdJQ0FnSUhnZ1BTQXRlRHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWW9lQ0ErSURGbExUSXhLWHRjYmlBZ0lDQWdJR1VnUFNCc2IyY29lQ0FxSUhCdmR5Z3lMQ0EyT1N3Z01Ta3BJQzBnTmprN1hHNGdJQ0FnSUNCNklEMGdaU0E4SURBZ1B5QjRJQ29nY0c5M0tESXNJQzFsTENBeEtTQTZJSGdnTHlCd2IzY29NaXdnWlN3Z01TazdYRzRnSUNBZ0lDQjZJQ285SURCNE1UQXdNREF3TURBd01EQXdNREE3WEc0Z0lDQWdJQ0JsSUQwZ05USWdMU0JsTzF4dUlDQWdJQ0FnYVdZb1pTQStJREFwZTF4dUlDQWdJQ0FnSUNCdGRXeDBhWEJzZVNnd0xDQjZLVHRjYmlBZ0lDQWdJQ0FnYWlBOUlHWTdYRzRnSUNBZ0lDQWdJSGRvYVd4bEtHb2dQajBnTnlsN1hHNGdJQ0FnSUNBZ0lDQWdiWFZzZEdsd2JIa29NV1UzTENBd0tUdGNiaUFnSUNBZ0lDQWdJQ0JxSUMwOUlEYzdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYlhWc2RHbHdiSGtvY0c5M0tERXdMQ0JxTENBeEtTd2dNQ2s3WEc0Z0lDQWdJQ0FnSUdvZ1BTQmxJQzBnTVR0Y2JpQWdJQ0FnSUNBZ2QyaHBiR1VvYWlBK1BTQXlNeWw3WEc0Z0lDQWdJQ0FnSUNBZ1pHbDJhV1JsS0RFZ1BEd2dNak1wTzF4dUlDQWdJQ0FnSUNBZ0lHb2dMVDBnTWpNN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaR2wyYVdSbEtERWdQRHdnYWlrN1hHNGdJQ0FnSUNBZ0lHMTFiSFJwY0d4NUtERXNJREVwTzF4dUlDQWdJQ0FnSUNCa2FYWnBaR1VvTWlrN1hHNGdJQ0FnSUNBZ0lHMGdQU0J1ZFcxVWIxTjBjbWx1WnlncE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2JYVnNkR2x3Ykhrb01Dd2dlaWs3WEc0Z0lDQWdJQ0FnSUcxMWJIUnBjR3g1S0RFZ1BEd2dMV1VzSURBcE8xeHVJQ0FnSUNBZ0lDQnRJRDBnYm5WdFZHOVRkSEpwYm1jb0tTQXJJSEpsY0dWaGRDNWpZV3hzS0ZwRlVrOHNJR1lwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnBaaWhtSUQ0Z01DbDdYRzRnSUNBZ0lDQnJJRDBnYlM1c1pXNW5kR2c3WEc0Z0lDQWdJQ0J0SUQwZ2N5QXJJQ2hySUR3OUlHWWdQeUFuTUM0bklDc2djbVZ3WldGMExtTmhiR3dvV2tWU1R5d2daaUF0SUdzcElDc2diU0E2SUcwdWMyeHBZMlVvTUN3Z2F5QXRJR1lwSUNzZ0p5NG5JQ3NnYlM1emJHbGpaU2hySUMwZ1ppa3BPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCdElEMGdjeUFySUcwN1hHNGdJQ0FnZlNCeVpYUjFjbTRnYlR0Y2JpQWdmVnh1ZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJQ1JsZUhCdmNuUWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z0pHWmhhV3h6SUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlptRnBiSE1uS1Z4dUlDQXNJR0ZPZFcxaVpYSldZV3gxWlNBOUlISmxjWFZwY21Vb0p5NHZYMkV0Ym5WdFltVnlMWFpoYkhWbEp5bGNiaUFnTENBa2RHOVFjbVZqYVhOcGIyNGdQU0F4TGk1MGIxQnlaV05wYzJsdmJqdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbEFnS3lBa1pYaHdiM0owTGtZZ0tpQW9KR1poYVd4ektHWjFibU4wYVc5dUtDbDdYRzRnSUM4dklFbEZOeTFjYmlBZ2NtVjBkWEp1SUNSMGIxQnlaV05wYzJsdmJpNWpZV3hzS0RFc0lIVnVaR1ZtYVc1bFpDa2dJVDA5SUNjeEp6dGNibjBwSUh4OElDRWtabUZwYkhNb1puVnVZM1JwYjI0b0tYdGNiaUFnTHk4Z1ZqZ2dmaUJCYm1SeWIybGtJRFF1TXkxY2JpQWdKSFJ2VUhKbFkybHphVzl1TG1OaGJHd29lMzBwTzF4dWZTa3BMQ0FuVG5WdFltVnlKeXdnZTF4dUlDQjBiMUJ5WldOcGMybHZiam9nWm5WdVkzUnBiMjRnZEc5UWNtVmphWE5wYjI0b2NISmxZMmx6YVc5dUtYdGNiaUFnSUNCMllYSWdkR2hoZENBOUlHRk9kVzFpWlhKV1lXeDFaU2gwYUdsekxDQW5UblZ0WW1WeUkzUnZVSEpsWTJsemFXOXVPaUJwYm1OdmNuSmxZM1FnYVc1MmIyTmhkR2x2YmlFbktUdGNiaUFnSUNCeVpYUjFjbTRnY0hKbFkybHphVzl1SUQwOVBTQjFibVJsWm1sdVpXUWdQeUFrZEc5UWNtVmphWE5wYjI0dVkyRnNiQ2gwYUdGMEtTQTZJQ1IwYjFCeVpXTnBjMmx2Ymk1allXeHNLSFJvWVhRc0lIQnlaV05wYzJsdmJpazdJRnh1SUNCOVhHNTlLVHNpTENKMllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwTzF4dUx5OGdNVGt1TVM0eUxqTWdMeUF4TlM0eUxqTXVOeUJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5aFBMQ0JRY205d1pYSjBhV1Z6S1Z4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNZ0t5QWtaWGh3YjNKMExrWWdLaUFoY21WeGRXbHlaU2duTGk5ZlpHVnpZM0pwY0hSdmNuTW5LU3dnSjA5aWFtVmpkQ2NzSUh0a1pXWnBibVZRY205d1pYSjBhV1Z6T2lCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFpIQnpKeWw5S1RzaUxDSXZMeUF4T1M0eExqSXVOU0JQWW1wbFkzUXVabkpsWlhwbEtFOHBYRzUyWVhJZ2FYTlBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMMTlwY3kxdlltcGxZM1FuS1Z4dUlDQXNJRzFsZEdFZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmJXVjBZU2NwTG05dVJuSmxaWHBsTzF4dVhHNXlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRjMkZ3Snlrb0oyWnlaV1Y2WlNjc0lHWjFibU4wYVc5dUtDUm1jbVZsZW1VcGUxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdabkpsWlhwbEtHbDBLWHRjYmlBZ0lDQnlaWFIxY200Z0pHWnlaV1Y2WlNBbUppQnBjMDlpYW1WamRDaHBkQ2tnUHlBa1puSmxaWHBsS0cxbGRHRW9hWFFwS1NBNklHbDBPMXh1SUNCOU8xeHVmU2s3SWl3aUx5OGdNVGt1TVM0eUxqWWdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2loUExDQlFLVnh1ZG1GeUlIUnZTVTlpYW1WamRDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxcGIySnFaV04wSnlsY2JpQWdMQ0FrWjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdkdmNHUW5LUzVtTzF4dVhHNXlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRjMkZ3Snlrb0oyZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2ljc0lHWjFibU4wYVc5dUtDbDdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSW9hWFFzSUd0bGVTbDdYRzRnSUNBZ2NtVjBkWEp1SUNSblpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lvZEc5SlQySnFaV04wS0dsMEtTd2dhMlY1S1R0Y2JpQWdmVHRjYm4wcE95SXNJaTh2SURFNUxqRXVNaTQzSUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6S0U4cFhHNXlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRjMkZ3Snlrb0oyZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTW5MQ0JtZFc1amRHbHZiaWdwZTF4dUlDQnlaWFIxY200Z2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXZHZjRzR0WlhoMEp5a3VaanRjYm4wcE95SXNJaTh2SURFNUxqRXVNaTR4TVNCUFltcGxZM1F1YVhORmVIUmxibk5wWW14bEtFOHBYRzUyWVhJZ2FYTlBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMMTlwY3kxdlltcGxZM1FuS1R0Y2JseHVjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMWE5oY0NjcEtDZHBjMFY0ZEdWdWMybGliR1VuTENCbWRXNWpkR2x2Ymlna2FYTkZlSFJsYm5OcFlteGxLWHRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUdselJYaDBaVzV6YVdKc1pTaHBkQ2w3WEc0Z0lDQWdjbVYwZFhKdUlHbHpUMkpxWldOMEtHbDBLU0EvSUNScGMwVjRkR1Z1YzJsaWJHVWdQeUFrYVhORmVIUmxibk5wWW14bEtHbDBLU0E2SUhSeWRXVWdPaUJtWVd4elpUdGNiaUFnZlR0Y2JuMHBPeUlzSWk4dklERTVMakV1TWk0eE15QlBZbXBsWTNRdWFYTlRaV0ZzWldRb1R5bGNiblpoY2lCcGMwOWlhbVZqZENBOUlISmxjWFZwY21Vb0p5NHZYMmx6TFc5aWFtVmpkQ2NwTzF4dVhHNXlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRjMkZ3Snlrb0oybHpVMlZoYkdWa0p5d2dablZ1WTNScGIyNG9KR2x6VTJWaGJHVmtLWHRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUdselUyVmhiR1ZrS0dsMEtYdGNiaUFnSUNCeVpYUjFjbTRnYVhOUFltcGxZM1FvYVhRcElEOGdKR2x6VTJWaGJHVmtJRDhnSkdselUyVmhiR1ZrS0dsMEtTQTZJR1poYkhObElEb2dkSEoxWlR0Y2JpQWdmVHRjYm4wcE95SXNJaTh2SURFNUxqRXVNeTR4TUNCUFltcGxZM1F1YVhNb2RtRnNkV1V4TENCMllXeDFaVElwWEc1MllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwTzF4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNc0lDZFBZbXBsWTNRbkxDQjdhWE02SUhKbGNYVnBjbVVvSnk0dlgzTmhiV1V0ZG1Gc2RXVW5LWDBwT3lJc0lpOHZJREU1TGpFdU1pNHhOU0JQWW1wbFkzUXVjSEpsZG1WdWRFVjRkR1Z1YzJsdmJuTW9UeWxjYm5aaGNpQnBjMDlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2WDJsekxXOWlhbVZqZENjcFhHNGdJQ3dnYldWMFlTQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXRaWFJoSnlrdWIyNUdjbVZsZW1VN1hHNWNibkpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzF6WVhBbktTZ25jSEpsZG1WdWRFVjRkR1Z1YzJsdmJuTW5MQ0JtZFc1amRHbHZiaWdrY0hKbGRtVnVkRVY0ZEdWdWMybHZibk1wZTF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z2NISmxkbVZ1ZEVWNGRHVnVjMmx2Ym5Nb2FYUXBlMXh1SUNBZ0lISmxkSFZ5YmlBa2NISmxkbVZ1ZEVWNGRHVnVjMmx2Ym5NZ0ppWWdhWE5QWW1wbFkzUW9hWFFwSUQ4Z0pIQnlaWFpsYm5SRmVIUmxibk5wYjI1ektHMWxkR0VvYVhRcEtTQTZJR2wwTzF4dUlDQjlPMXh1ZlNrN0lpd2lMeThnTVRrdU1TNHlMakUzSUU5aWFtVmpkQzV6WldGc0tFOHBYRzUyWVhJZ2FYTlBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMMTlwY3kxdlltcGxZM1FuS1Z4dUlDQXNJRzFsZEdFZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmJXVjBZU2NwTG05dVJuSmxaWHBsTzF4dVhHNXlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRjMkZ3Snlrb0ozTmxZV3duTENCbWRXNWpkR2x2Ymlna2MyVmhiQ2w3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCelpXRnNLR2wwS1h0Y2JpQWdJQ0J5WlhSMWNtNGdKSE5sWVd3Z0ppWWdhWE5QWW1wbFkzUW9hWFFwSUQ4Z0pITmxZV3dvYldWMFlTaHBkQ2twSURvZ2FYUTdYRzRnSUgwN1hHNTlLVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzR2THlBeE9TNHhMak11TmlCUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG5SdlUzUnlhVzVuS0NsY2JuWmhjaUJqYkdGemMyOW1JRDBnY21WeGRXbHlaU2duTGk5ZlkyeGhjM052WmljcFhHNGdJQ3dnZEdWemRDQWdJQ0E5SUh0OU8xeHVkR1Z6ZEZ0eVpYRjFhWEpsS0NjdUwxOTNhM01uS1NnbmRHOVRkSEpwYm1kVVlXY25LVjBnUFNBbmVpYzdYRzVwWmloMFpYTjBJQ3NnSnljZ0lUMGdKMXR2WW1wbFkzUWdlbDBuS1h0Y2JpQWdjbVZ4ZFdseVpTZ25MaTlmY21Wa1pXWnBibVVuS1NoUFltcGxZM1F1Y0hKdmRHOTBlWEJsTENBbmRHOVRkSEpwYm1jbkxDQm1kVzVqZEdsdmJpQjBiMU4wY21sdVp5Z3BlMXh1SUNBZ0lISmxkSFZ5YmlBblcyOWlhbVZqZENBbklDc2dZMnhoYzNOdlppaDBhR2x6S1NBcklDZGRKenRjYmlBZ2ZTd2dkSEoxWlNrN1hHNTlJaXdpZG1GeUlDUmxlSEJ2Y25RZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0FrY0dGeWMyVkdiRzloZENBOUlISmxjWFZwY21Vb0p5NHZYM0JoY25ObExXWnNiMkYwSnlrN1hHNHZMeUF4T0M0eUxqUWdjR0Z5YzJWR2JHOWhkQ2h6ZEhKcGJtY3BYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVSeUFySUNSbGVIQnZjblF1UmlBcUlDaHdZWEp6WlVac2IyRjBJQ0U5SUNSd1lYSnpaVVpzYjJGMEtTd2dlM0JoY25ObFJteHZZWFE2SUNSd1lYSnpaVVpzYjJGMGZTazdJaXdpZG1GeUlDUmxlSEJ2Y25RZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2dKSEJoY25ObFNXNTBJRDBnY21WeGRXbHlaU2duTGk5ZmNHRnljMlV0YVc1MEp5azdYRzR2THlBeE9DNHlMalVnY0dGeWMyVkpiblFvYzNSeWFXNW5MQ0J5WVdScGVDbGNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNUhJQ3NnSkdWNGNHOXlkQzVHSUNvZ0tIQmhjbk5sU1c1MElDRTlJQ1J3WVhKelpVbHVkQ2tzSUh0d1lYSnpaVWx1ZERvZ0pIQmhjbk5sU1c1MGZTazdJaXdpTHk4Z01qWXVNUzR4SUZKbFpteGxZM1F1WVhCd2JIa29kR0Z5WjJWMExDQjBhR2x6UVhKbmRXMWxiblFzSUdGeVozVnRaVzUwYzB4cGMzUXBYRzUyWVhJZ0pHVjRjRzl5ZENBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQmhSblZ1WTNScGIyNGdQU0J5WlhGMWFYSmxLQ2N1TDE5aExXWjFibU4wYVc5dUp5bGNiaUFnTENCaGJrOWlhbVZqZENBZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxdlltcGxZM1FuS1Z4dUlDQXNJSEpCY0hCc2VTQWdJQ0E5SUNoeVpYRjFhWEpsS0NjdUwxOW5iRzlpWVd3bktTNVNaV1pzWldOMElIeDhJSHQ5S1M1aGNIQnNlVnh1SUNBc0lHWkJjSEJzZVNBZ0lDQTlJRVoxYm1OMGFXOXVMbUZ3Y0d4NU8xeHVMeThnVFZNZ1JXUm5aU0JoY21kMWJXVnVkSE5NYVhOMElHRnlaM1Z0Wlc1MElHbHpJRzl3ZEdsdmJtRnNYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeUFySUNSbGVIQnZjblF1UmlBcUlDRnlaWEYxYVhKbEtDY3VMMTltWVdsc2N5Y3BLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lISkJjSEJzZVNobWRXNWpkR2x2YmlncGUzMHBPMXh1ZlNrc0lDZFNaV1pzWldOMEp5d2dlMXh1SUNCaGNIQnNlVG9nWm5WdVkzUnBiMjRnWVhCd2JIa29kR0Z5WjJWMExDQjBhR2x6UVhKbmRXMWxiblFzSUdGeVozVnRaVzUwYzB4cGMzUXBlMXh1SUNBZ0lIWmhjaUJVSUQwZ1lVWjFibU4wYVc5dUtIUmhjbWRsZENsY2JpQWdJQ0FnSUN3Z1RDQTlJR0Z1VDJKcVpXTjBLR0Z5WjNWdFpXNTBjMHhwYzNRcE8xeHVJQ0FnSUhKbGRIVnliaUJ5UVhCd2JIa2dQeUJ5UVhCd2JIa29WQ3dnZEdocGMwRnlaM1Z0Wlc1MExDQk1LU0E2SUdaQmNIQnNlUzVqWVd4c0tGUXNJSFJvYVhOQmNtZDFiV1Z1ZEN3Z1RDazdYRzRnSUgxY2JuMHBPeUlzSWk4dklESTJMakV1TWlCU1pXWnNaV04wTG1OdmJuTjBjblZqZENoMFlYSm5aWFFzSUdGeVozVnRaVzUwYzB4cGMzUWdXeXdnYm1WM1ZHRnlaMlYwWFNsY2JuWmhjaUFrWlhod2IzSjBJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENCamNtVmhkR1VnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV055WldGMFpTY3BYRzRnSUN3Z1lVWjFibU4wYVc5dUlDQTlJSEpsY1hWcGNtVW9KeTR2WDJFdFpuVnVZM1JwYjI0bktWeHVJQ0FzSUdGdVQySnFaV04wSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxdlltcGxZM1FuS1Z4dUlDQXNJR2x6VDJKcVpXTjBJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXBjeTF2WW1wbFkzUW5LVnh1SUNBc0lHWmhhV3h6SUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bVlXbHNjeWNwWEc0Z0lDd2dZbWx1WkNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgySnBibVFuS1Z4dUlDQXNJSEpEYjI1emRISjFZM1FnUFNBb2NtVnhkV2x5WlNnbkxpOWZaMnh2WW1Gc0p5a3VVbVZtYkdWamRDQjhmQ0I3ZlNrdVkyOXVjM1J5ZFdOME8xeHVYRzR2THlCTlV5QkZaR2RsSUhOMWNIQnZjblJ6SUc5dWJIa2dNaUJoY21kMWJXVnVkSE1nWVc1a0lHRnlaM1Z0Wlc1MGMweHBjM1FnWVhKbmRXMWxiblFnYVhNZ2IzQjBhVzl1WVd4Y2JpOHZJRVpHSUU1cFoyaDBiSGtnYzJWMGN5QjBhR2x5WkNCaGNtZDFiV1Z1ZENCaGN5QmdibVYzTG5SaGNtZGxkR0FzSUdKMWRDQmtiMlZ6SUc1dmRDQmpjbVZoZEdVZ1lIUm9hWE5nSUdaeWIyMGdhWFJjYm5aaGNpQk9SVmRmVkVGU1IwVlVYMEpWUnlBOUlHWmhhV3h6S0daMWJtTjBhVzl1S0NsN1hHNGdJR1oxYm1OMGFXOXVJRVlvS1h0OVhHNGdJSEpsZEhWeWJpQWhLSEpEYjI1emRISjFZM1FvWm5WdVkzUnBiMjRvS1h0OUxDQmJYU3dnUmlrZ2FXNXpkR0Z1WTJWdlppQkdLVHRjYm4wcE8xeHVkbUZ5SUVGU1IxTmZRbFZISUQwZ0lXWmhhV3h6S0daMWJtTjBhVzl1S0NsN1hHNGdJSEpEYjI1emRISjFZM1FvWm5WdVkzUnBiMjRvS1h0OUtUdGNibjBwTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5QXJJQ1JsZUhCdmNuUXVSaUFxSUNoT1JWZGZWRUZTUjBWVVgwSlZSeUI4ZkNCQlVrZFRYMEpWUnlrc0lDZFNaV1pzWldOMEp5d2dlMXh1SUNCamIyNXpkSEoxWTNRNklHWjFibU4wYVc5dUlHTnZibk4wY25WamRDaFVZWEpuWlhRc0lHRnlaM01nTHlvc0lHNWxkMVJoY21kbGRDb3ZLWHRjYmlBZ0lDQmhSblZ1WTNScGIyNG9WR0Z5WjJWMEtUdGNiaUFnSUNCaGJrOWlhbVZqZENoaGNtZHpLVHRjYmlBZ0lDQjJZWElnYm1WM1ZHRnlaMlYwSUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYUNBOElETWdQeUJVWVhKblpYUWdPaUJoUm5WdVkzUnBiMjRvWVhKbmRXMWxiblJ6V3pKZEtUdGNiaUFnSUNCcFppaEJVa2RUWDBKVlJ5QW1KaUFoVGtWWFgxUkJVa2RGVkY5Q1ZVY3BjbVYwZFhKdUlISkRiMjV6ZEhKMVkzUW9WR0Z5WjJWMExDQmhjbWR6TENCdVpYZFVZWEpuWlhRcE8xeHVJQ0FnSUdsbUtGUmhjbWRsZENBOVBTQnVaWGRVWVhKblpYUXBlMXh1SUNBZ0lDQWdMeThnZHk5dklHRnNkR1Z5WldRZ2JtVjNWR0Z5WjJWMExDQnZjSFJwYldsNllYUnBiMjRnWm05eUlEQXROQ0JoY21kMWJXVnVkSE5jYmlBZ0lDQWdJSE4zYVhSamFDaGhjbWR6TG14bGJtZDBhQ2w3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdNRG9nY21WMGRYSnVJRzVsZHlCVVlYSm5aWFE3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdNVG9nY21WMGRYSnVJRzVsZHlCVVlYSm5aWFFvWVhKbmMxc3dYU2s3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdNam9nY21WMGRYSnVJRzVsZHlCVVlYSm5aWFFvWVhKbmMxc3dYU3dnWVhKbmMxc3hYU2s3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdNem9nY21WMGRYSnVJRzVsZHlCVVlYSm5aWFFvWVhKbmMxc3dYU3dnWVhKbmMxc3hYU3dnWVhKbmMxc3lYU2s3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdORG9nY21WMGRYSnVJRzVsZHlCVVlYSm5aWFFvWVhKbmMxc3dYU3dnWVhKbmMxc3hYU3dnWVhKbmMxc3lYU3dnWVhKbmMxc3pYU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0F2THlCM0wyOGdZV3gwWlhKbFpDQnVaWGRVWVhKblpYUXNJR3h2ZENCdlppQmhjbWQxYldWdWRITWdZMkZ6WlZ4dUlDQWdJQ0FnZG1GeUlDUmhjbWR6SUQwZ1cyNTFiR3hkTzF4dUlDQWdJQ0FnSkdGeVozTXVjSFZ6YUM1aGNIQnNlU2drWVhKbmN5d2dZWEpuY3lrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lDaGlhVzVrTG1Gd2NHeDVLRlJoY21kbGRDd2dKR0Z5WjNNcEtUdGNiaUFnSUNCOVhHNGdJQ0FnTHk4Z2QybDBhQ0JoYkhSbGNtVmtJRzVsZDFSaGNtZGxkQ3dnYm05MElITjFjSEJ2Y25RZ1luVnBiSFF0YVc0Z1kyOXVjM1J5ZFdOMGIzSnpYRzRnSUNBZ2RtRnlJSEJ5YjNSdklDQWdJRDBnYm1WM1ZHRnlaMlYwTG5CeWIzUnZkSGx3WlZ4dUlDQWdJQ0FnTENCcGJuTjBZVzVqWlNBOUlHTnlaV0YwWlNocGMwOWlhbVZqZENod2NtOTBieWtnUHlCd2NtOTBieUE2SUU5aWFtVmpkQzV3Y205MGIzUjVjR1VwWEc0Z0lDQWdJQ0FzSUhKbGMzVnNkQ0FnSUQwZ1JuVnVZM1JwYjI0dVlYQndiSGt1WTJGc2JDaFVZWEpuWlhRc0lHbHVjM1JoYm1ObExDQmhjbWR6S1R0Y2JpQWdJQ0J5WlhSMWNtNGdhWE5QWW1wbFkzUW9jbVZ6ZFd4MEtTQS9JSEpsYzNWc2RDQTZJR2x1YzNSaGJtTmxPMXh1SUNCOVhHNTlLVHNpTENJdkx5QXlOaTR4TGpNZ1VtVm1iR1ZqZEM1a1pXWnBibVZRY205d1pYSjBlU2gwWVhKblpYUXNJSEJ5YjNCbGNuUjVTMlY1TENCaGRIUnlhV0oxZEdWektWeHVkbUZ5SUdSUUlDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV1J3SnlsY2JpQWdMQ0FrWlhod2IzSjBJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z1lXNVBZbXBsWTNRZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXZZbXBsWTNRbktWeHVJQ0FzSUhSdlVISnBiV2wwYVhabElEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGNISnBiV2wwYVhabEp5azdYRzVjYmk4dklFMVRJRVZrWjJVZ2FHRnpJR0p5YjJ0bGJpQlNaV1pzWldOMExtUmxabWx1WlZCeWIzQmxjblI1SUMwZ2RHaHliM2RwYm1jZ2FXNXpkR1ZoWkNCdlppQnlaWFIxY201cGJtY2dabUZzYzJWY2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VElDc2dKR1Y0Y0c5eWRDNUdJQ29nY21WeGRXbHlaU2duTGk5ZlptRnBiSE1uS1NobWRXNWpkR2x2YmlncGUxeHVJQ0JTWldac1pXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHUlFMbVlvZTMwc0lERXNJSHQyWVd4MVpUb2dNWDBwTENBeExDQjdkbUZzZFdVNklESjlLVHRjYm4wcExDQW5VbVZtYkdWamRDY3NJSHRjYmlBZ1pHVm1hVzVsVUhKdmNHVnlkSGs2SUdaMWJtTjBhVzl1SUdSbFptbHVaVkJ5YjNCbGNuUjVLSFJoY21kbGRDd2djSEp2Y0dWeWRIbExaWGtzSUdGMGRISnBZblYwWlhNcGUxeHVJQ0FnSUdGdVQySnFaV04wS0hSaGNtZGxkQ2s3WEc0Z0lDQWdjSEp2Y0dWeWRIbExaWGtnUFNCMGIxQnlhVzFwZEdsMlpTaHdjbTl3WlhKMGVVdGxlU3dnZEhKMVpTazdYRzRnSUNBZ1lXNVBZbXBsWTNRb1lYUjBjbWxpZFhSbGN5azdYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJR1JRTG1Zb2RHRnlaMlYwTENCd2NtOXdaWEowZVV0bGVTd2dZWFIwY21saWRYUmxjeWs3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0I5SUdOaGRHTm9LR1VwZTF4dUlDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUgxY2JpQWdmVnh1ZlNrN0lpd2lMeThnTWpZdU1TNDBJRkpsWm14bFkzUXVaR1ZzWlhSbFVISnZjR1Z5ZEhrb2RHRnlaMlYwTENCd2NtOXdaWEowZVV0bGVTbGNiblpoY2lBa1pYaHdiM0owSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z1owOVFSQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaMjl3WkNjcExtWmNiaUFnTENCaGJrOWlhbVZqZENBOUlISmxjWFZwY21Vb0p5NHZYMkZ1TFc5aWFtVmpkQ2NwTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5d2dKMUpsWm14bFkzUW5MQ0I3WEc0Z0lHUmxiR1YwWlZCeWIzQmxjblI1T2lCbWRXNWpkR2x2YmlCa1pXeGxkR1ZRY205d1pYSjBlU2gwWVhKblpYUXNJSEJ5YjNCbGNuUjVTMlY1S1h0Y2JpQWdJQ0IyWVhJZ1pHVnpZeUE5SUdkUFVFUW9ZVzVQWW1wbFkzUW9kR0Z5WjJWMEtTd2djSEp2Y0dWeWRIbExaWGtwTzF4dUlDQWdJSEpsZEhWeWJpQmtaWE5qSUNZbUlDRmtaWE5qTG1OdmJtWnBaM1Z5WVdKc1pTQS9JR1poYkhObElEb2daR1ZzWlhSbElIUmhjbWRsZEZ0d2NtOXdaWEowZVV0bGVWMDdYRzRnSUgxY2JuMHBPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiaTh2SURJMkxqRXVOU0JTWldac1pXTjBMbVZ1ZFcxbGNtRjBaU2gwWVhKblpYUXBYRzUyWVhJZ0pHVjRjRzl5ZENBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lHRnVUMkpxWldOMElEMGdjbVZ4ZFdseVpTZ25MaTlmWVc0dGIySnFaV04wSnlrN1hHNTJZWElnUlc1MWJXVnlZWFJsSUQwZ1puVnVZM1JwYjI0b2FYUmxjbUYwWldRcGUxeHVJQ0IwYUdsekxsOTBJRDBnWVc1UFltcGxZM1FvYVhSbGNtRjBaV1FwT3lBdkx5QjBZWEpuWlhSY2JpQWdkR2hwY3k1ZmFTQTlJREE3SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2JtVjRkQ0JwYm1SbGVGeHVJQ0IyWVhJZ2EyVjVjeUE5SUhSb2FYTXVYMnNnUFNCYlhTQWdJQ0FnSUNBdkx5QnJaWGx6WEc0Z0lDQWdMQ0JyWlhrN1hHNGdJR1p2Y2loclpYa2dhVzRnYVhSbGNtRjBaV1FwYTJWNWN5NXdkWE5vS0d0bGVTazdYRzU5TzF4dWNtVnhkV2x5WlNnbkxpOWZhWFJsY2kxamNtVmhkR1VuS1NoRmJuVnRaWEpoZEdVc0lDZFBZbXBsWTNRbkxDQm1kVzVqZEdsdmJpZ3BlMXh1SUNCMllYSWdkR2hoZENBOUlIUm9hWE5jYmlBZ0lDQXNJR3RsZVhNZ1BTQjBhR0YwTGw5clhHNGdJQ0FnTENCclpYazdYRzRnSUdSdklIdGNiaUFnSUNCcFppaDBhR0YwTGw5cElENDlJR3RsZVhNdWJHVnVaM1JvS1hKbGRIVnliaUI3ZG1Gc2RXVTZJSFZ1WkdWbWFXNWxaQ3dnWkc5dVpUb2dkSEoxWlgwN1hHNGdJSDBnZDJocGJHVW9JU2dvYTJWNUlEMGdhMlY1YzF0MGFHRjBMbDlwS3l0ZEtTQnBiaUIwYUdGMExsOTBLU2s3WEc0Z0lISmxkSFZ5YmlCN2RtRnNkV1U2SUd0bGVTd2daRzl1WlRvZ1ptRnNjMlY5TzF4dWZTazdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUTENBblVtVm1iR1ZqZENjc0lIdGNiaUFnWlc1MWJXVnlZWFJsT2lCbWRXNWpkR2x2YmlCbGJuVnRaWEpoZEdVb2RHRnlaMlYwS1h0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUVWdWRXMWxjbUYwWlNoMFlYSm5aWFFwTzF4dUlDQjlYRzU5S1RzaUxDSXZMeUF5Tmk0eExqY2dVbVZtYkdWamRDNW5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJb2RHRnlaMlYwTENCd2NtOXdaWEowZVV0bGVTbGNiblpoY2lCblQxQkVJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMW5iM0JrSnlsY2JpQWdMQ0FrWlhod2IzSjBJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnWVc1UFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOWhiaTF2WW1wbFkzUW5LVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNc0lDZFNaV1pzWldOMEp5d2dlMXh1SUNCblpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0k2SUdaMWJtTjBhVzl1SUdkbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaWgwWVhKblpYUXNJSEJ5YjNCbGNuUjVTMlY1S1h0Y2JpQWdJQ0J5WlhSMWNtNGdaMDlRUkM1bUtHRnVUMkpxWldOMEtIUmhjbWRsZENrc0lIQnliM0JsY25SNVMyVjVLVHRjYmlBZ2ZWeHVmU2s3SWl3aUx5OGdNall1TVM0NElGSmxabXhsWTNRdVoyVjBVSEp2ZEc5MGVYQmxUMllvZEdGeVoyVjBLVnh1ZG1GeUlDUmxlSEJ2Y25RZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQm5aWFJRY205MGJ5QTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFuY0c4bktWeHVJQ0FzSUdGdVQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YjJKcVpXTjBKeWs3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VExDQW5VbVZtYkdWamRDY3NJSHRjYmlBZ1oyVjBVSEp2ZEc5MGVYQmxUMlk2SUdaMWJtTjBhVzl1SUdkbGRGQnliM1J2ZEhsd1pVOW1LSFJoY21kbGRDbDdYRzRnSUNBZ2NtVjBkWEp1SUdkbGRGQnliM1J2S0dGdVQySnFaV04wS0hSaGNtZGxkQ2twTzF4dUlDQjlYRzU5S1RzaUxDSXZMeUF5Tmk0eExqWWdVbVZtYkdWamRDNW5aWFFvZEdGeVoyVjBMQ0J3Y205d1pYSjBlVXRsZVNCYkxDQnlaV05sYVhabGNsMHBYRzUyWVhJZ1owOVFSQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFoyOXdaQ2NwWEc0Z0lDd2daMlYwVUhKdmRHOTBlWEJsVDJZZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaM0J2SnlsY2JpQWdMQ0JvWVhNZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJoaGN5Y3BYRzRnSUN3Z0pHVjRjRzl5ZENBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUdselQySnFaV04wSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmFYTXRiMkpxWldOMEp5bGNiaUFnTENCaGJrOWlhbVZqZENBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRnVMVzlpYW1WamRDY3BPMXh1WEc1bWRXNWpkR2x2YmlCblpYUW9kR0Z5WjJWMExDQndjbTl3WlhKMGVVdGxlUzhxTENCeVpXTmxhWFpsY2lvdktYdGNiaUFnZG1GeUlISmxZMlZwZG1WeUlEMGdZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQThJRE1nUHlCMFlYSm5aWFFnT2lCaGNtZDFiV1Z1ZEhOYk1sMWNiaUFnSUNBc0lHUmxjMk1zSUhCeWIzUnZPMXh1SUNCcFppaGhiazlpYW1WamRDaDBZWEpuWlhRcElEMDlQU0J5WldObGFYWmxjaWx5WlhSMWNtNGdkR0Z5WjJWMFczQnliM0JsY25SNVMyVjVYVHRjYmlBZ2FXWW9aR1Z6WXlBOUlHZFBVRVF1WmloMFlYSm5aWFFzSUhCeWIzQmxjblI1UzJWNUtTbHlaWFIxY200Z2FHRnpLR1JsYzJNc0lDZDJZV3gxWlNjcFhHNGdJQ0FnUHlCa1pYTmpMblpoYkhWbFhHNGdJQ0FnT2lCa1pYTmpMbWRsZENBaFBUMGdkVzVrWldacGJtVmtYRzRnSUNBZ0lDQS9JR1JsYzJNdVoyVjBMbU5oYkd3b2NtVmpaV2wyWlhJcFhHNGdJQ0FnSUNBNklIVnVaR1ZtYVc1bFpEdGNiaUFnYVdZb2FYTlBZbXBsWTNRb2NISnZkRzhnUFNCblpYUlFjbTkwYjNSNWNHVlBaaWgwWVhKblpYUXBLU2x5WlhSMWNtNGdaMlYwS0hCeWIzUnZMQ0J3Y205d1pYSjBlVXRsZVN3Z2NtVmpaV2wyWlhJcE8xeHVmVnh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXl3Z0oxSmxabXhsWTNRbkxDQjdaMlYwT2lCblpYUjlLVHNpTENJdkx5QXlOaTR4TGprZ1VtVm1iR1ZqZEM1b1lYTW9kR0Z5WjJWMExDQndjbTl3WlhKMGVVdGxlU2xjYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWs3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VExDQW5VbVZtYkdWamRDY3NJSHRjYmlBZ2FHRnpPaUJtZFc1amRHbHZiaUJvWVhNb2RHRnlaMlYwTENCd2NtOXdaWEowZVV0bGVTbDdYRzRnSUNBZ2NtVjBkWEp1SUhCeWIzQmxjblI1UzJWNUlHbHVJSFJoY21kbGREdGNiaUFnZlZ4dWZTazdJaXdpTHk4Z01qWXVNUzR4TUNCU1pXWnNaV04wTG1selJYaDBaVzV6YVdKc1pTaDBZWEpuWlhRcFhHNTJZWElnSkdWNGNHOXlkQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2dZVzVQWW1wbFkzUWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMkZ1TFc5aWFtVmpkQ2NwWEc0Z0lDd2dKR2x6UlhoMFpXNXphV0pzWlNBOUlFOWlhbVZqZEM1cGMwVjRkR1Z1YzJsaWJHVTdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUTENBblVtVm1iR1ZqZENjc0lIdGNiaUFnYVhORmVIUmxibk5wWW14bE9pQm1kVzVqZEdsdmJpQnBjMFY0ZEdWdWMybGliR1VvZEdGeVoyVjBLWHRjYmlBZ0lDQmhiazlpYW1WamRDaDBZWEpuWlhRcE8xeHVJQ0FnSUhKbGRIVnliaUFrYVhORmVIUmxibk5wWW14bElEOGdKR2x6UlhoMFpXNXphV0pzWlNoMFlYSm5aWFFwSURvZ2RISjFaVHRjYmlBZ2ZWeHVmU2s3SWl3aUx5OGdNall1TVM0eE1TQlNaV1pzWldOMExtOTNia3RsZVhNb2RHRnlaMlYwS1Z4dWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTXNJQ2RTWldac1pXTjBKeXdnZTI5M2JrdGxlWE02SUhKbGNYVnBjbVVvSnk0dlgyOTNiaTFyWlhsekp5bDlLVHNpTENJdkx5QXlOaTR4TGpFeUlGSmxabXhsWTNRdWNISmxkbVZ1ZEVWNGRHVnVjMmx2Ym5Nb2RHRnlaMlYwS1Z4dWRtRnlJQ1JsZUhCdmNuUWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnWVc1UFltcGxZM1FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YjJKcVpXTjBKeWxjYmlBZ0xDQWtjSEpsZG1WdWRFVjRkR1Z1YzJsdmJuTWdQU0JQWW1wbFkzUXVjSEpsZG1WdWRFVjRkR1Z1YzJsdmJuTTdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUTENBblVtVm1iR1ZqZENjc0lIdGNiaUFnY0hKbGRtVnVkRVY0ZEdWdWMybHZibk02SUdaMWJtTjBhVzl1SUhCeVpYWmxiblJGZUhSbGJuTnBiMjV6S0hSaGNtZGxkQ2w3WEc0Z0lDQWdZVzVQWW1wbFkzUW9kR0Z5WjJWMEtUdGNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdhV1lvSkhCeVpYWmxiblJGZUhSbGJuTnBiMjV6S1NSd2NtVjJaVzUwUlhoMFpXNXphVzl1Y3loMFlYSm5aWFFwTzF4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnZlNCallYUmphQ2hsS1h0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNCOVhHNGdJSDFjYm4wcE95SXNJaTh2SURJMkxqRXVNVFFnVW1WbWJHVmpkQzV6WlhSUWNtOTBiM1I1Y0dWUFppaDBZWEpuWlhRc0lIQnliM1J2S1Z4dWRtRnlJQ1JsZUhCdmNuUWdJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0J6WlhSUWNtOTBieUE5SUhKbGNYVnBjbVVvSnk0dlgzTmxkQzF3Y205MGJ5Y3BPMXh1WEc1cFppaHpaWFJRY205MGJ5a2taWGh3YjNKMEtDUmxlSEJ2Y25RdVV5d2dKMUpsWm14bFkzUW5MQ0I3WEc0Z0lITmxkRkJ5YjNSdmRIbHdaVTltT2lCbWRXNWpkR2x2YmlCelpYUlFjbTkwYjNSNWNHVlBaaWgwWVhKblpYUXNJSEJ5YjNSdktYdGNiaUFnSUNCelpYUlFjbTkwYnk1amFHVmpheWgwWVhKblpYUXNJSEJ5YjNSdktUdGNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdjMlYwVUhKdmRHOHVjMlYwS0hSaGNtZGxkQ3dnY0hKdmRHOHBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdmU0JqWVhSamFDaGxLWHRjYmlBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0I5WEc0Z0lIMWNibjBwT3lJc0lpOHZJREkyTGpFdU1UTWdVbVZtYkdWamRDNXpaWFFvZEdGeVoyVjBMQ0J3Y205d1pYSjBlVXRsZVN3Z1ZpQmJMQ0J5WldObGFYWmxjbDBwWEc1MllYSWdaRkFnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaSEFuS1Z4dUlDQXNJR2RQVUVRZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV2R2Y0dRbktWeHVJQ0FzSUdkbGRGQnliM1J2ZEhsd1pVOW1JRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdkd2J5Y3BYRzRnSUN3Z2FHRnpJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9ZWE1uS1Z4dUlDQXNJQ1JsZUhCdmNuUWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQmpjbVZoZEdWRVpYTmpJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM0J5YjNCbGNuUjVMV1JsYzJNbktWeHVJQ0FzSUdGdVQySnFaV04wSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZllXNHRiMkpxWldOMEp5bGNiaUFnTENCcGMwOWlhbVZqZENBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgybHpMVzlpYW1WamRDY3BPMXh1WEc1bWRXNWpkR2x2YmlCelpYUW9kR0Z5WjJWMExDQndjbTl3WlhKMGVVdGxlU3dnVmk4cUxDQnlaV05sYVhabGNpb3ZLWHRjYmlBZ2RtRnlJSEpsWTJWcGRtVnlJRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0E4SURRZ1B5QjBZWEpuWlhRZ09pQmhjbWQxYldWdWRITmJNMTFjYmlBZ0lDQXNJRzkzYmtSbGMyTWdJRDBnWjA5UVJDNW1LR0Z1VDJKcVpXTjBLSFJoY21kbGRDa3NJSEJ5YjNCbGNuUjVTMlY1S1Z4dUlDQWdJQ3dnWlhocGMzUnBibWRFWlhOamNtbHdkRzl5TENCd2NtOTBienRjYmlBZ2FXWW9JVzkzYmtSbGMyTXBlMXh1SUNBZ0lHbG1LR2x6VDJKcVpXTjBLSEJ5YjNSdklEMGdaMlYwVUhKdmRHOTBlWEJsVDJZb2RHRnlaMlYwS1NrcGUxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhObGRDaHdjbTkwYnl3Z2NISnZjR1Z5ZEhsTFpYa3NJRllzSUhKbFkyVnBkbVZ5S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdiM2R1UkdWell5QTlJR055WldGMFpVUmxjMk1vTUNrN1hHNGdJSDFjYmlBZ2FXWW9hR0Z6S0c5M2JrUmxjMk1zSUNkMllXeDFaU2NwS1h0Y2JpQWdJQ0JwWmlodmQyNUVaWE5qTG5keWFYUmhZbXhsSUQwOVBTQm1ZV3h6WlNCOGZDQWhhWE5QWW1wbFkzUW9jbVZqWldsMlpYSXBLWEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0JsZUdsemRHbHVaMFJsYzJOeWFYQjBiM0lnUFNCblQxQkVMbVlvY21WalpXbDJaWElzSUhCeWIzQmxjblI1UzJWNUtTQjhmQ0JqY21WaGRHVkVaWE5qS0RBcE8xeHVJQ0FnSUdWNGFYTjBhVzVuUkdWelkzSnBjSFJ2Y2k1MllXeDFaU0E5SUZZN1hHNGdJQ0FnWkZBdVppaHlaV05sYVhabGNpd2djSEp2Y0dWeWRIbExaWGtzSUdWNGFYTjBhVzVuUkdWelkzSnBjSFJ2Y2lrN1hHNGdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUc5M2JrUmxjMk11YzJWMElEMDlQU0IxYm1SbFptbHVaV1FnUHlCbVlXeHpaU0E2SUNodmQyNUVaWE5qTG5ObGRDNWpZV3hzS0hKbFkyVnBkbVZ5TENCV0tTd2dkSEoxWlNrN1hHNTlYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUTENBblVtVm1iR1ZqZENjc0lIdHpaWFE2SUhObGRIMHBPeUlzSW5aaGNpQm5iRzlpWVd3Z0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJkc2IySmhiQ2NwWEc0Z0lDd2dhVzVvWlhKcGRFbG1VbVZ4ZFdseVpXUWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGJtaGxjbWwwTFdsbUxYSmxjWFZwY21Wa0p5bGNiaUFnTENCa1VDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMWtjQ2NwTG1aY2JpQWdMQ0JuVDFCT0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxbmIzQnVKeWt1Wmx4dUlDQXNJR2x6VW1WblJYaHdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmFYTXRjbVZuWlhod0p5bGNiaUFnTENBa1pteGhaM01nSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlpzWVdkekp5bGNiaUFnTENBa1VtVm5SWGh3SUNBZ0lDQWdJQ0FnSUNBOUlHZHNiMkpoYkM1U1pXZEZlSEJjYmlBZ0xDQkNZWE5sSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJQ1JTWldkRmVIQmNiaUFnTENCd2NtOTBieUFnSUNBZ0lDQWdJQ0FnSUNBOUlDUlNaV2RGZUhBdWNISnZkRzkwZVhCbFhHNGdJQ3dnY21VeElDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNBdllTOW5YRzRnSUN3Z2NtVXlJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQXZZUzluWEc0Z0lDOHZJRndpYm1WM1hDSWdZM0psWVhSbGN5QmhJRzVsZHlCdlltcGxZM1FzSUc5c1pDQjNaV0pyYVhRZ1luVm5aM2tnYUdWeVpWeHVJQ0FzSUVOUFVsSkZRMVJmVGtWWElDQWdJQ0FnSUQwZ2JtVjNJQ1JTWldkRmVIQW9jbVV4S1NBaFBUMGdjbVV4TzF4dVhHNXBaaWh5WlhGMWFYSmxLQ2N1TDE5a1pYTmpjbWx3ZEc5eWN5Y3BJQ1ltSUNnaFEwOVNVa1ZEVkY5T1JWY2dmSHdnY21WeGRXbHlaU2duTGk5ZlptRnBiSE1uS1NobWRXNWpkR2x2YmlncGUxeHVJQ0J5WlRKYmNtVnhkV2x5WlNnbkxpOWZkMnR6Snlrb0oyMWhkR05vSnlsZElEMGdabUZzYzJVN1hHNGdJQzh2SUZKbFowVjRjQ0JqYjI1emRISjFZM1J2Y2lCallXNGdZV3gwWlhJZ1pteGhaM01nWVc1a0lFbHpVbVZuUlhod0lIZHZjbXR6SUdOdmNuSmxZM1FnZDJsMGFDQkFRRzFoZEdOb1hHNGdJSEpsZEhWeWJpQWtVbVZuUlhod0tISmxNU2tnSVQwZ2NtVXhJSHg4SUNSU1pXZEZlSEFvY21VeUtTQTlQU0J5WlRJZ2ZId2dKRkpsWjBWNGNDaHlaVEVzSUNkcEp5a2dJVDBnSnk5aEwya25PMXh1ZlNrcEtYdGNiaUFnSkZKbFowVjRjQ0E5SUdaMWJtTjBhVzl1SUZKbFowVjRjQ2h3TENCbUtYdGNiaUFnSUNCMllYSWdkR2xTUlNBOUlIUm9hWE1nYVc1emRHRnVZMlZ2WmlBa1VtVm5SWGh3WEc0Z0lDQWdJQ0FzSUhCcFVrVWdQU0JwYzFKbFowVjRjQ2h3S1Z4dUlDQWdJQ0FnTENCbWFWVWdJRDBnWmlBOVBUMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lISmxkSFZ5YmlBaGRHbFNSU0FtSmlCd2FWSkZJQ1ltSUhBdVkyOXVjM1J5ZFdOMGIzSWdQVDA5SUNSU1pXZEZlSEFnSmlZZ1ptbFZJRDhnY0Z4dUlDQWdJQ0FnT2lCcGJtaGxjbWwwU1daU1pYRjFhWEpsWkNoRFQxSlNSVU5VWDA1RlYxeHVJQ0FnSUNBZ0lDQS9JRzVsZHlCQ1lYTmxLSEJwVWtVZ0ppWWdJV1pwVlNBL0lIQXVjMjkxY21ObElEb2djQ3dnWmlsY2JpQWdJQ0FnSUNBZ09pQkNZWE5sS0Nod2FWSkZJRDBnY0NCcGJuTjBZVzVqWlc5bUlDUlNaV2RGZUhBcElEOGdjQzV6YjNWeVkyVWdPaUJ3TENCd2FWSkZJQ1ltSUdacFZTQS9JQ1JtYkdGbmN5NWpZV3hzS0hBcElEb2daaWxjYmlBZ0lDQWdJQ3dnZEdsU1JTQS9JSFJvYVhNZ09pQndjbTkwYnl3Z0pGSmxaMFY0Y0NrN1hHNGdJSDA3WEc0Z0lIWmhjaUJ3Y205NGVTQTlJR1oxYm1OMGFXOXVLR3RsZVNsN1hHNGdJQ0FnYTJWNUlHbHVJQ1JTWldkRmVIQWdmSHdnWkZBb0pGSmxaMFY0Y0N3Z2EyVjVMQ0I3WEc0Z0lDQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtDbDdJSEpsZEhWeWJpQkNZWE5sVzJ0bGVWMDdJSDBzWEc0Z0lDQWdJQ0J6WlhRNklHWjFibU4wYVc5dUtHbDBLWHNnUW1GelpWdHJaWGxkSUQwZ2FYUTdJSDFjYmlBZ0lDQjlLVHRjYmlBZ2ZUdGNiaUFnWm05eUtIWmhjaUJyWlhseklEMGdaMDlRVGloQ1lYTmxLU3dnYVNBOUlEQTdJR3RsZVhNdWJHVnVaM1JvSUQ0Z2FUc2dLWEJ5YjNoNUtHdGxlWE5iYVNzclhTazdYRzRnSUhCeWIzUnZMbU52Ym5OMGNuVmpkRzl5SUQwZ0pGSmxaMFY0Y0R0Y2JpQWdKRkpsWjBWNGNDNXdjbTkwYjNSNWNHVWdQU0J3Y205MGJ6dGNiaUFnY21WeGRXbHlaU2duTGk5ZmNtVmtaV1pwYm1VbktTaG5iRzlpWVd3c0lDZFNaV2RGZUhBbkxDQWtVbVZuUlhod0tUdGNibjFjYmx4dWNtVnhkV2x5WlNnbkxpOWZjMlYwTFhOd1pXTnBaWE1uS1NnblVtVm5SWGh3SnlrN0lpd2lMeThnTWpFdU1pNDFMak1nWjJWMElGSmxaMFY0Y0M1d2NtOTBiM1I1Y0dVdVpteGhaM01vS1Z4dWFXWW9jbVZ4ZFdseVpTZ25MaTlmWkdWelkzSnBjSFJ2Y25NbktTQW1KaUF2TGk5bkxtWnNZV2R6SUNFOUlDZG5KeWx5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WkhBbktTNW1LRkpsWjBWNGNDNXdjbTkwYjNSNWNHVXNJQ2RtYkdGbmN5Y3NJSHRjYmlBZ1kyOXVabWxuZFhKaFlteGxPaUIwY25WbExGeHVJQ0JuWlhRNklISmxjWFZwY21Vb0p5NHZYMlpzWVdkekp5bGNibjBwT3lJc0lpOHZJRUJBYldGMFkyZ2diRzluYVdOY2JuSmxjWFZwY21Vb0p5NHZYMlpwZUMxeVpTMTNhM01uS1NnbmJXRjBZMmduTENBeExDQm1kVzVqZEdsdmJpaGtaV1pwYm1Wa0xDQk5RVlJEU0N3Z0pHMWhkR05vS1h0Y2JpQWdMeThnTWpFdU1TNHpMakV4SUZOMGNtbHVaeTV3Y205MGIzUjVjR1V1YldGMFkyZ29jbVZuWlhod0tWeHVJQ0J5WlhSMWNtNGdXMloxYm1OMGFXOXVJRzFoZEdOb0tISmxaMlY0Y0NsN1hHNGdJQ0FnSjNWelpTQnpkSEpwWTNRbk8xeHVJQ0FnSUhaaGNpQlBJQ0E5SUdSbFptbHVaV1FvZEdocGN5bGNiaUFnSUNBZ0lDd2dabTRnUFNCeVpXZGxlSEFnUFQwZ2RXNWtaV1pwYm1Wa0lEOGdkVzVrWldacGJtVmtJRG9nY21WblpYaHdXMDFCVkVOSVhUdGNiaUFnSUNCeVpYUjFjbTRnWm00Z0lUMDlJSFZ1WkdWbWFXNWxaQ0EvSUdadUxtTmhiR3dvY21WblpYaHdMQ0JQS1NBNklHNWxkeUJTWldkRmVIQW9jbVZuWlhod0tWdE5RVlJEU0Ywb1UzUnlhVzVuS0U4cEtUdGNiaUFnZlN3Z0pHMWhkR05vWFR0Y2JuMHBPeUlzSWk4dklFQkFjbVZ3YkdGalpTQnNiMmRwWTF4dWNtVnhkV2x5WlNnbkxpOWZabWw0TFhKbExYZHJjeWNwS0NkeVpYQnNZV05sSnl3Z01pd2dablZ1WTNScGIyNG9aR1ZtYVc1bFpDd2dVa1ZRVEVGRFJTd2dKSEpsY0d4aFkyVXBlMXh1SUNBdkx5QXlNUzR4TGpNdU1UUWdVM1J5YVc1bkxuQnliM1J2ZEhsd1pTNXlaWEJzWVdObEtITmxZWEpqYUZaaGJIVmxMQ0J5WlhCc1lXTmxWbUZzZFdVcFhHNGdJSEpsZEhWeWJpQmJablZ1WTNScGIyNGdjbVZ3YkdGalpTaHpaV0Z5WTJoV1lXeDFaU3dnY21Wd2JHRmpaVlpoYkhWbEtYdGNiaUFnSUNBbmRYTmxJSE4wY21samRDYzdYRzRnSUNBZ2RtRnlJRThnSUQwZ1pHVm1hVzVsWkNoMGFHbHpLVnh1SUNBZ0lDQWdMQ0JtYmlBOUlITmxZWEpqYUZaaGJIVmxJRDA5SUhWdVpHVm1hVzVsWkNBL0lIVnVaR1ZtYVc1bFpDQTZJSE5sWVhKamFGWmhiSFZsVzFKRlVFeEJRMFZkTzF4dUlDQWdJSEpsZEhWeWJpQm1iaUFoUFQwZ2RXNWtaV1pwYm1Wa1hHNGdJQ0FnSUNBL0lHWnVMbU5oYkd3b2MyVmhjbU5vVm1Gc2RXVXNJRThzSUhKbGNHeGhZMlZXWVd4MVpTbGNiaUFnSUNBZ0lEb2dKSEpsY0d4aFkyVXVZMkZzYkNoVGRISnBibWNvVHlrc0lITmxZWEpqYUZaaGJIVmxMQ0J5WlhCc1lXTmxWbUZzZFdVcE8xeHVJQ0I5TENBa2NtVndiR0ZqWlYwN1hHNTlLVHNpTENJdkx5QkFRSE5sWVhKamFDQnNiMmRwWTF4dWNtVnhkV2x5WlNnbkxpOWZabWw0TFhKbExYZHJjeWNwS0NkelpXRnlZMmduTENBeExDQm1kVzVqZEdsdmJpaGtaV1pwYm1Wa0xDQlRSVUZTUTBnc0lDUnpaV0Z5WTJncGUxeHVJQ0F2THlBeU1TNHhMak11TVRVZ1UzUnlhVzVuTG5CeWIzUnZkSGx3WlM1elpXRnlZMmdvY21WblpYaHdLVnh1SUNCeVpYUjFjbTRnVzJaMWJtTjBhVzl1SUhObFlYSmphQ2h5WldkbGVIQXBlMXh1SUNBZ0lDZDFjMlVnYzNSeWFXTjBKenRjYmlBZ0lDQjJZWElnVHlBZ1BTQmtaV1pwYm1Wa0tIUm9hWE1wWEc0Z0lDQWdJQ0FzSUdadUlEMGdjbVZuWlhod0lEMDlJSFZ1WkdWbWFXNWxaQ0EvSUhWdVpHVm1hVzVsWkNBNklISmxaMlY0Y0Z0VFJVRlNRMGhkTzF4dUlDQWdJSEpsZEhWeWJpQm1iaUFoUFQwZ2RXNWtaV1pwYm1Wa0lEOGdabTR1WTJGc2JDaHlaV2RsZUhBc0lFOHBJRG9nYm1WM0lGSmxaMFY0Y0NoeVpXZGxlSEFwVzFORlFWSkRTRjBvVTNSeWFXNW5LRThwS1R0Y2JpQWdmU3dnSkhObFlYSmphRjA3WEc1OUtUc2lMQ0l2THlCQVFITndiR2wwSUd4dloybGpYRzV5WlhGMWFYSmxLQ2N1TDE5bWFYZ3RjbVV0ZDJ0ekp5a29KM053YkdsMEp5d2dNaXdnWm5WdVkzUnBiMjRvWkdWbWFXNWxaQ3dnVTFCTVNWUXNJQ1J6Y0d4cGRDbDdYRzRnSUNkMWMyVWdjM1J5YVdOMEp6dGNiaUFnZG1GeUlHbHpVbVZuUlhod0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGN5MXlaV2RsZUhBbktWeHVJQ0FnSUN3Z1gzTndiR2wwSUNBZ0lDQTlJQ1J6Y0d4cGRGeHVJQ0FnSUN3Z0pIQjFjMmdnSUNBZ0lDQTlJRnRkTG5CMWMyaGNiaUFnSUNBc0lDUlRVRXhKVkNBZ0lDQWdQU0FuYzNCc2FYUW5YRzRnSUNBZ0xDQk1SVTVIVkVnZ0lDQWdJRDBnSjJ4bGJtZDBhQ2RjYmlBZ0lDQXNJRXhCVTFSZlNVNUVSVmdnUFNBbmJHRnpkRWx1WkdWNEp6dGNiaUFnYVdZb1hHNGdJQ0FnSjJGaVltTW5XeVJUVUV4SlZGMG9MeWhpS1NvdktWc3hYU0E5UFNBbll5Y2dmSHhjYmlBZ0lDQW5kR1Z6ZENkYkpGTlFURWxVWFNndktEODZLUzhzSUMweEtWdE1SVTVIVkVoZElDRTlJRFFnZkh4Y2JpQWdJQ0FuWVdJbld5UlRVRXhKVkYwb0x5Zy9PbUZpS1NvdktWdE1SVTVIVkVoZElDRTlJRElnZkh4Y2JpQWdJQ0FuTGlkYkpGTlFURWxVWFNndktDNC9LU2d1UHlrdktWdE1SVTVIVkVoZElDRTlJRFFnZkh4Y2JpQWdJQ0FuTGlkYkpGTlFURWxVWFNndktDa29LUzhwVzB4RlRrZFVTRjBnUGlBeElIeDhYRzRnSUNBZ0p5ZGJKRk5RVEVsVVhTZ3ZMajh2S1Z0TVJVNUhWRWhkWEc0Z0lDbDdYRzRnSUNBZ2RtRnlJRTVRUTBjZ1BTQXZLQ2svUHk4dVpYaGxZeWduSnlsYk1WMGdQVDA5SUhWdVpHVm1hVzVsWkRzZ0x5OGdibTl1Y0dGeWRHbGphWEJoZEdsdVp5QmpZWEIwZFhKcGJtY2daM0p2ZFhCY2JpQWdJQ0F2THlCaVlYTmxaQ0J2YmlCbGN6VXRjMmhwYlNCcGJYQnNaVzFsYm5SaGRHbHZiaXdnYm1WbFpDQjBieUJ5WlhkdmNtc2dhWFJjYmlBZ0lDQWtjM0JzYVhRZ1BTQm1kVzVqZEdsdmJpaHpaWEJoY21GMGIzSXNJR3hwYldsMEtYdGNiaUFnSUNBZ0lIWmhjaUJ6ZEhKcGJtY2dQU0JUZEhKcGJtY29kR2hwY3lrN1hHNGdJQ0FnSUNCcFppaHpaWEJoY21GMGIzSWdQVDA5SUhWdVpHVm1hVzVsWkNBbUppQnNhVzFwZENBOVBUMGdNQ2x5WlhSMWNtNGdXMTA3WEc0Z0lDQWdJQ0F2THlCSlppQmdjMlZ3WVhKaGRHOXlZQ0JwY3lCdWIzUWdZU0J5WldkbGVDd2dkWE5sSUc1aGRHbDJaU0J6Y0d4cGRGeHVJQ0FnSUNBZ2FXWW9JV2x6VW1WblJYaHdLSE5sY0dGeVlYUnZjaWtwY21WMGRYSnVJRjl6Y0d4cGRDNWpZV3hzS0hOMGNtbHVaeXdnYzJWd1lYSmhkRzl5TENCc2FXMXBkQ2s3WEc0Z0lDQWdJQ0IyWVhJZ2IzVjBjSFYwSUQwZ1cxMDdYRzRnSUNBZ0lDQjJZWElnWm14aFozTWdQU0FvYzJWd1lYSmhkRzl5TG1sbmJtOXlaVU5oYzJVZ1B5QW5hU2NnT2lBbkp5a2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0hObGNHRnlZWFJ2Y2k1dGRXeDBhV3hwYm1VZ1B5QW5iU2NnT2lBbkp5a2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0hObGNHRnlZWFJ2Y2k1MWJtbGpiMlJsSUQ4Z0ozVW5JRG9nSnljcElDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2h6WlhCaGNtRjBiM0l1YzNScFkydDVJRDhnSjNrbklEb2dKeWNwTzF4dUlDQWdJQ0FnZG1GeUlHeGhjM1JNWVhOMFNXNWtaWGdnUFNBd08xeHVJQ0FnSUNBZ2RtRnlJSE53YkdsMFRHbHRhWFFnUFNCc2FXMXBkQ0E5UFQwZ2RXNWtaV1pwYm1Wa0lEOGdOREk1TkRrMk56STVOU0E2SUd4cGJXbDBJRDQrUGlBd08xeHVJQ0FnSUNBZ0x5OGdUV0ZyWlNCZ1oyeHZZbUZzWUNCaGJtUWdZWFp2YVdRZ1lHeGhjM1JKYm1SbGVHQWdhWE56ZFdWeklHSjVJSGR2Y210cGJtY2dkMmwwYUNCaElHTnZjSGxjYmlBZ0lDQWdJSFpoY2lCelpYQmhjbUYwYjNKRGIzQjVJRDBnYm1WM0lGSmxaMFY0Y0NoelpYQmhjbUYwYjNJdWMyOTFjbU5sTENCbWJHRm5jeUFySUNkbkp5azdYRzRnSUNBZ0lDQjJZWElnYzJWd1lYSmhkRzl5TWl3Z2JXRjBZMmdzSUd4aGMzUkpibVJsZUN3Z2JHRnpkRXhsYm1kMGFDd2dhVHRjYmlBZ0lDQWdJQzh2SUVSdlpYTnVKM1FnYm1WbFpDQm1iR0ZuY3lCbmVTd2dZblYwSUhSb1pYa2daRzl1SjNRZ2FIVnlkRnh1SUNBZ0lDQWdhV1lvSVU1UVEwY3BjMlZ3WVhKaGRHOXlNaUE5SUc1bGR5QlNaV2RGZUhBb0oxNG5JQ3NnYzJWd1lYSmhkRzl5UTI5d2VTNXpiM1Z5WTJVZ0t5QW5KQ2cvSVZ4Y1hGeHpLU2NzSUdac1lXZHpLVHRjYmlBZ0lDQWdJSGRvYVd4bEtHMWhkR05vSUQwZ2MyVndZWEpoZEc5eVEyOXdlUzVsZUdWaktITjBjbWx1WnlrcGUxeHVJQ0FnSUNBZ0lDQXZMeUJnYzJWd1lYSmhkRzl5UTI5d2VTNXNZWE4wU1c1a1pYaGdJR2x6SUc1dmRDQnlaV3hwWVdKc1pTQmpjbTl6Y3kxaWNtOTNjMlZ5WEc0Z0lDQWdJQ0FnSUd4aGMzUkpibVJsZUNBOUlHMWhkR05vTG1sdVpHVjRJQ3NnYldGMFkyaGJNRjFiVEVWT1IxUklYVHRjYmlBZ0lDQWdJQ0FnYVdZb2JHRnpkRWx1WkdWNElENGdiR0Z6ZEV4aGMzUkpibVJsZUNsN1hHNGdJQ0FnSUNBZ0lDQWdiM1YwY0hWMExuQjFjMmdvYzNSeWFXNW5Mbk5zYVdObEtHeGhjM1JNWVhOMFNXNWtaWGdzSUcxaGRHTm9MbWx1WkdWNEtTazdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1JtbDRJR0p5YjNkelpYSnpJSGRvYjNObElHQmxlR1ZqWUNCdFpYUm9iMlJ6SUdSdmJpZDBJR052Ym5OcGMzUmxiblJzZVNCeVpYUjFjbTRnWUhWdVpHVm1hVzVsWkdBZ1ptOXlJRTVRUTBkY2JpQWdJQ0FnSUNBZ0lDQnBaaWdoVGxCRFJ5QW1KaUJ0WVhSamFGdE1SVTVIVkVoZElENGdNU2x0WVhSamFGc3dYUzV5WlhCc1lXTmxLSE5sY0dGeVlYUnZjaklzSUdaMWJtTjBhVzl1S0NsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2FTQTlJREU3SUdrZ1BDQmhjbWQxYldWdWRITmJURVZPUjFSSVhTQXRJREk3SUdrckt5bHBaaWhoY21kMWJXVnVkSE5iYVYwZ1BUMDlJSFZ1WkdWbWFXNWxaQ2x0WVhSamFGdHBYU0E5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNCcFppaHRZWFJqYUZ0TVJVNUhWRWhkSUQ0Z01TQW1KaUJ0WVhSamFDNXBibVJsZUNBOElITjBjbWx1WjF0TVJVNUhWRWhkS1NSd2RYTm9MbUZ3Y0d4NUtHOTFkSEIxZEN3Z2JXRjBZMmd1YzJ4cFkyVW9NU2twTzF4dUlDQWdJQ0FnSUNBZ0lHeGhjM1JNWlc1bmRHZ2dQU0J0WVhSamFGc3dYVnRNUlU1SFZFaGRPMXh1SUNBZ0lDQWdJQ0FnSUd4aGMzUk1ZWE4wU1c1a1pYZ2dQU0JzWVhOMFNXNWtaWGc3WEc0Z0lDQWdJQ0FnSUNBZ2FXWW9iM1YwY0hWMFcweEZUa2RVU0YwZ1BqMGdjM0JzYVhSTWFXMXBkQ2xpY21WaGF6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmloelpYQmhjbUYwYjNKRGIzQjVXMHhCVTFSZlNVNUVSVmhkSUQwOVBTQnRZWFJqYUM1cGJtUmxlQ2x6WlhCaGNtRjBiM0pEYjNCNVcweEJVMVJmU1U1RVJWaGRLeXM3SUM4dklFRjJiMmxrSUdGdUlHbHVabWx1YVhSbElHeHZiM0JjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtS0d4aGMzUk1ZWE4wU1c1a1pYZ2dQVDA5SUhOMGNtbHVaMXRNUlU1SFZFaGRLWHRjYmlBZ0lDQWdJQ0FnYVdZb2JHRnpkRXhsYm1kMGFDQjhmQ0FoYzJWd1lYSmhkRzl5UTI5d2VTNTBaWE4wS0NjbktTbHZkWFJ3ZFhRdWNIVnphQ2duSnlrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnYjNWMGNIVjBMbkIxYzJnb2MzUnlhVzVuTG5Oc2FXTmxLR3hoYzNSTVlYTjBTVzVrWlhncEtUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdmRYUndkWFJiVEVWT1IxUklYU0ErSUhOd2JHbDBUR2x0YVhRZ1B5QnZkWFJ3ZFhRdWMyeHBZMlVvTUN3Z2MzQnNhWFJNYVcxcGRDa2dPaUJ2ZFhSd2RYUTdYRzRnSUNBZ2ZUdGNiaUFnTHk4Z1EyaGhhM0poTENCV09GeHVJQ0I5SUdWc2MyVWdhV1lvSnpBbld5UlRVRXhKVkYwb2RXNWtaV1pwYm1Wa0xDQXdLVnRNUlU1SFZFaGRLWHRjYmlBZ0lDQWtjM0JzYVhRZ1BTQm1kVzVqZEdsdmJpaHpaWEJoY21GMGIzSXNJR3hwYldsMEtYdGNiaUFnSUNBZ0lISmxkSFZ5YmlCelpYQmhjbUYwYjNJZ1BUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlCc2FXMXBkQ0E5UFQwZ01DQS9JRnRkSURvZ1gzTndiR2wwTG1OaGJHd29kR2hwY3l3Z2MyVndZWEpoZEc5eUxDQnNhVzFwZENrN1hHNGdJQ0FnZlR0Y2JpQWdmVnh1SUNBdkx5QXlNUzR4TGpNdU1UY2dVM1J5YVc1bkxuQnliM1J2ZEhsd1pTNXpjR3hwZENoelpYQmhjbUYwYjNJc0lHeHBiV2wwS1Z4dUlDQnlaWFIxY200Z1cyWjFibU4wYVc5dUlITndiR2wwS0hObGNHRnlZWFJ2Y2l3Z2JHbHRhWFFwZTF4dUlDQWdJSFpoY2lCUElDQTlJR1JsWm1sdVpXUW9kR2hwY3lsY2JpQWdJQ0FnSUN3Z1ptNGdQU0J6WlhCaGNtRjBiM0lnUFQwZ2RXNWtaV1pwYm1Wa0lEOGdkVzVrWldacGJtVmtJRG9nYzJWd1lYSmhkRzl5VzFOUVRFbFVYVHRjYmlBZ0lDQnlaWFIxY200Z1ptNGdJVDA5SUhWdVpHVm1hVzVsWkNBL0lHWnVMbU5oYkd3b2MyVndZWEpoZEc5eUxDQlBMQ0JzYVcxcGRDa2dPaUFrYzNCc2FYUXVZMkZzYkNoVGRISnBibWNvVHlrc0lITmxjR0Z5WVhSdmNpd2diR2x0YVhRcE8xeHVJQ0I5TENBa2MzQnNhWFJkTzF4dWZTazdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVjbVZ4ZFdseVpTZ25MaTlsY3pZdWNtVm5aWGh3TG1ac1lXZHpKeWs3WEc1MllYSWdZVzVQWW1wbFkzUWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWhiaTF2WW1wbFkzUW5LVnh1SUNBc0lDUm1iR0ZuY3lBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlpteGhaM01uS1Z4dUlDQXNJRVJGVTBOU1NWQlVUMUpUSUQwZ2NtVnhkV2x5WlNnbkxpOWZaR1Z6WTNKcGNIUnZjbk1uS1Z4dUlDQXNJRlJQWDFOVVVrbE9SeUFnSUQwZ0ozUnZVM1J5YVc1bkoxeHVJQ0FzSUNSMGIxTjBjbWx1WnlBZ0lEMGdMeTR2VzFSUFgxTlVVa2xPUjEwN1hHNWNiblpoY2lCa1pXWnBibVVnUFNCbWRXNWpkR2x2YmlobWJpbDdYRzRnSUhKbGNYVnBjbVVvSnk0dlgzSmxaR1ZtYVc1bEp5a29VbVZuUlhod0xuQnliM1J2ZEhsd1pTd2dWRTlmVTFSU1NVNUhMQ0JtYml3Z2RISjFaU2s3WEc1OU8xeHVYRzR2THlBeU1TNHlMalV1TVRRZ1VtVm5SWGh3TG5CeWIzUnZkSGx3WlM1MGIxTjBjbWx1WnlncFhHNXBaaWh5WlhGMWFYSmxLQ2N1TDE5bVlXbHNjeWNwS0daMWJtTjBhVzl1S0NsN0lISmxkSFZ5YmlBa2RHOVRkSEpwYm1jdVkyRnNiQ2g3YzI5MWNtTmxPaUFuWVNjc0lHWnNZV2R6T2lBbllpZDlLU0FoUFNBbkwyRXZZaWM3SUgwcEtYdGNiaUFnWkdWbWFXNWxLR1oxYm1OMGFXOXVJSFJ2VTNSeWFXNW5LQ2w3WEc0Z0lDQWdkbUZ5SUZJZ1BTQmhiazlpYW1WamRDaDBhR2x6S1R0Y2JpQWdJQ0J5WlhSMWNtNGdKeThuTG1OdmJtTmhkQ2hTTG5OdmRYSmpaU3dnSnk4bkxGeHVJQ0FnSUNBZ0oyWnNZV2R6SnlCcGJpQlNJRDhnVWk1bWJHRm5jeUE2SUNGRVJWTkRVa2xRVkU5U1V5QW1KaUJTSUdsdWMzUmhibU5sYjJZZ1VtVm5SWGh3SUQ4Z0pHWnNZV2R6TG1OaGJHd29VaWtnT2lCMWJtUmxabWx1WldRcE8xeHVJQ0I5S1R0Y2JpOHZJRVpHTkRRdElGSmxaMFY0Y0NOMGIxTjBjbWx1WnlCb1lYTWdZU0IzY205dVp5QnVZVzFsWEc1OUlHVnNjMlVnYVdZb0pIUnZVM1J5YVc1bkxtNWhiV1VnSVQwZ1ZFOWZVMVJTU1U1SEtYdGNiaUFnWkdWbWFXNWxLR1oxYm1OMGFXOXVJSFJ2VTNSeWFXNW5LQ2w3WEc0Z0lDQWdjbVYwZFhKdUlDUjBiMU4wY21sdVp5NWpZV3hzS0hSb2FYTXBPMXh1SUNCOUtUdGNibjBpTENJbmRYTmxJSE4wY21samRDYzdYRzUyWVhJZ2MzUnliMjVuSUQwZ2NtVnhkV2x5WlNnbkxpOWZZMjlzYkdWamRHbHZiaTF6ZEhKdmJtY25LVHRjYmx4dUx5OGdNak11TWlCVFpYUWdUMkpxWldOMGMxeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnlaWEYxYVhKbEtDY3VMMTlqYjJ4c1pXTjBhVzl1Snlrb0oxTmxkQ2NzSUdaMWJtTjBhVzl1S0dkbGRDbDdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJUWlhRb0tYc2djbVYwZFhKdUlHZGxkQ2gwYUdsekxDQmhjbWQxYldWdWRITXViR1Z1WjNSb0lENGdNQ0EvSUdGeVozVnRaVzUwYzFzd1hTQTZJSFZ1WkdWbWFXNWxaQ2s3SUgwN1hHNTlMQ0I3WEc0Z0lDOHZJREl6TGpJdU15NHhJRk5sZEM1d2NtOTBiM1I1Y0dVdVlXUmtLSFpoYkhWbEtWeHVJQ0JoWkdRNklHWjFibU4wYVc5dUlHRmtaQ2gyWVd4MVpTbDdYRzRnSUNBZ2NtVjBkWEp1SUhOMGNtOXVaeTVrWldZb2RHaHBjeXdnZG1Gc2RXVWdQU0IyWVd4MVpTQTlQVDBnTUNBL0lEQWdPaUIyWVd4MVpTd2dkbUZzZFdVcE8xeHVJQ0I5WEc1OUxDQnpkSEp2Ym1jcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JpOHZJRUl1TWk0ekxqSWdVM1J5YVc1bkxuQnliM1J2ZEhsd1pTNWhibU5vYjNJb2JtRnRaU2xjYm5KbGNYVnBjbVVvSnk0dlgzTjBjbWx1Wnkxb2RHMXNKeWtvSjJGdVkyaHZjaWNzSUdaMWJtTjBhVzl1S0dOeVpXRjBaVWhVVFV3cGUxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdZVzVqYUc5eUtHNWhiV1VwZTF4dUlDQWdJSEpsZEhWeWJpQmpjbVZoZEdWSVZFMU1LSFJvYVhNc0lDZGhKeXdnSjI1aGJXVW5MQ0J1WVcxbEtUdGNiaUFnZlZ4dWZTazdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVMeThnUWk0eUxqTXVNeUJUZEhKcGJtY3VjSEp2ZEc5MGVYQmxMbUpwWnlncFhHNXlaWEYxYVhKbEtDY3VMMTl6ZEhKcGJtY3RhSFJ0YkNjcEtDZGlhV2NuTENCbWRXNWpkR2x2YmloamNtVmhkR1ZJVkUxTUtYdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJR0pwWnlncGUxeHVJQ0FnSUhKbGRIVnliaUJqY21WaGRHVklWRTFNS0hSb2FYTXNJQ2RpYVdjbkxDQW5KeXdnSnljcE8xeHVJQ0I5WEc1OUtUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNHZMeUJDTGpJdU15NDBJRk4wY21sdVp5NXdjbTkwYjNSNWNHVXVZbXhwYm1zb0tWeHVjbVZ4ZFdseVpTZ25MaTlmYzNSeWFXNW5MV2gwYld3bktTZ25ZbXhwYm1zbkxDQm1kVzVqZEdsdmJpaGpjbVZoZEdWSVZFMU1LWHRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUdKc2FXNXJLQ2w3WEc0Z0lDQWdjbVYwZFhKdUlHTnlaV0YwWlVoVVRVd29kR2hwY3l3Z0oySnNhVzVySnl3Z0p5Y3NJQ2NuS1R0Y2JpQWdmVnh1ZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dUx5OGdRaTR5TGpNdU5TQlRkSEpwYm1jdWNISnZkRzkwZVhCbExtSnZiR1FvS1Z4dWNtVnhkV2x5WlNnbkxpOWZjM1J5YVc1bkxXaDBiV3duS1NnblltOXNaQ2NzSUdaMWJtTjBhVzl1S0dOeVpXRjBaVWhVVFV3cGUxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdZbTlzWkNncGUxeHVJQ0FnSUhKbGRIVnliaUJqY21WaGRHVklWRTFNS0hSb2FYTXNJQ2RpSnl3Z0p5Y3NJQ2NuS1R0Y2JpQWdmVnh1ZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJQ1JoZENBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5emRISnBibWN0WVhRbktTaG1ZV3h6WlNrN1hHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVVDd2dKMU4wY21sdVp5Y3NJSHRjYmlBZ0x5OGdNakV1TVM0ekxqTWdVM1J5YVc1bkxuQnliM1J2ZEhsd1pTNWpiMlJsVUc5cGJuUkJkQ2h3YjNNcFhHNGdJR052WkdWUWIybHVkRUYwT2lCbWRXNWpkR2x2YmlCamIyUmxVRzlwYm5SQmRDaHdiM01wZTF4dUlDQWdJSEpsZEhWeWJpQWtZWFFvZEdocGN5d2djRzl6S1R0Y2JpQWdmVnh1ZlNrN0lpd2lMeThnTWpFdU1TNHpMallnVTNSeWFXNW5MbkJ5YjNSdmRIbHdaUzVsYm1SelYybDBhQ2h6WldGeVkyaFRkSEpwYm1jZ1d5d2daVzVrVUc5emFYUnBiMjVkS1Z4dUozVnpaU0J6ZEhKcFkzUW5PMXh1ZG1GeUlDUmxlSEJ2Y25RZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2dkRzlNWlc1bmRHZ2dJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRiR1Z1WjNSb0p5bGNiaUFnTENCamIyNTBaWGgwSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl6ZEhKcGJtY3RZMjl1ZEdWNGRDY3BYRzRnSUN3Z1JVNUVVMTlYU1ZSSUlEMGdKMlZ1WkhOWGFYUm9KMXh1SUNBc0lDUmxibVJ6VjJsMGFDQTlJQ2NuVzBWT1JGTmZWMGxVU0YwN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVFJQ3NnSkdWNGNHOXlkQzVHSUNvZ2NtVnhkV2x5WlNnbkxpOWZabUZwYkhNdGFYTXRjbVZuWlhod0p5a29SVTVFVTE5WFNWUklLU3dnSjFOMGNtbHVaeWNzSUh0Y2JpQWdaVzVrYzFkcGRHZzZJR1oxYm1OMGFXOXVJR1Z1WkhOWGFYUm9LSE5sWVhKamFGTjBjbWx1WnlBdktpd2daVzVrVUc5emFYUnBiMjRnUFNCQWJHVnVaM1JvSUNvdktYdGNiaUFnSUNCMllYSWdkR2hoZENBOUlHTnZiblJsZUhRb2RHaHBjeXdnYzJWaGNtTm9VM1J5YVc1bkxDQkZUa1JUWDFkSlZFZ3BYRzRnSUNBZ0lDQXNJR1Z1WkZCdmMybDBhVzl1SUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lERWdQeUJoY21kMWJXVnVkSE5iTVYwZ09pQjFibVJsWm1sdVpXUmNiaUFnSUNBZ0lDd2diR1Z1SUNBZ0lEMGdkRzlNWlc1bmRHZ29kR2hoZEM1c1pXNW5kR2dwWEc0Z0lDQWdJQ0FzSUdWdVpDQWdJQ0E5SUdWdVpGQnZjMmwwYVc5dUlEMDlQU0IxYm1SbFptbHVaV1FnUHlCc1pXNGdPaUJOWVhSb0xtMXBiaWgwYjB4bGJtZDBhQ2hsYm1SUWIzTnBkR2x2Ymlrc0lHeGxiaWxjYmlBZ0lDQWdJQ3dnYzJWaGNtTm9JRDBnVTNSeWFXNW5LSE5sWVhKamFGTjBjbWx1WnlrN1hHNGdJQ0FnY21WMGRYSnVJQ1JsYm1SelYybDBhRnh1SUNBZ0lDQWdQeUFrWlc1a2MxZHBkR2d1WTJGc2JDaDBhR0YwTENCelpXRnlZMmdzSUdWdVpDbGNiaUFnSUNBZ0lEb2dkR2hoZEM1emJHbGpaU2hsYm1RZ0xTQnpaV0Z5WTJndWJHVnVaM1JvTENCbGJtUXBJRDA5UFNCelpXRnlZMmc3WEc0Z0lIMWNibjBwT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmk4dklFSXVNaTR6TGpZZ1UzUnlhVzVuTG5CeWIzUnZkSGx3WlM1bWFYaGxaQ2dwWEc1eVpYRjFhWEpsS0NjdUwxOXpkSEpwYm1jdGFIUnRiQ2NwS0NkbWFYaGxaQ2NzSUdaMWJtTjBhVzl1S0dOeVpXRjBaVWhVVFV3cGUxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdabWw0WldRb0tYdGNiaUFnSUNCeVpYUjFjbTRnWTNKbFlYUmxTRlJOVENoMGFHbHpMQ0FuZEhRbkxDQW5KeXdnSnljcE8xeHVJQ0I5WEc1OUtUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNHZMeUJDTGpJdU15NDNJRk4wY21sdVp5NXdjbTkwYjNSNWNHVXVabTl1ZEdOdmJHOXlLR052Ykc5eUtWeHVjbVZ4ZFdseVpTZ25MaTlmYzNSeWFXNW5MV2gwYld3bktTZ25abTl1ZEdOdmJHOXlKeXdnWm5WdVkzUnBiMjRvWTNKbFlYUmxTRlJOVENsN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQm1iMjUwWTI5c2IzSW9ZMjlzYjNJcGUxeHVJQ0FnSUhKbGRIVnliaUJqY21WaGRHVklWRTFNS0hSb2FYTXNJQ2RtYjI1MEp5d2dKMk52Ykc5eUp5d2dZMjlzYjNJcE8xeHVJQ0I5WEc1OUtUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNHZMeUJDTGpJdU15NDRJRk4wY21sdVp5NXdjbTkwYjNSNWNHVXVabTl1ZEhOcGVtVW9jMmw2WlNsY2JuSmxjWFZwY21Vb0p5NHZYM04wY21sdVp5MW9kRzFzSnlrb0oyWnZiblJ6YVhwbEp5d2dablZ1WTNScGIyNG9ZM0psWVhSbFNGUk5UQ2w3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCbWIyNTBjMmw2WlNoemFYcGxLWHRjYmlBZ0lDQnlaWFIxY200Z1kzSmxZWFJsU0ZSTlRDaDBhR2x6TENBblptOXVkQ2NzSUNkemFYcGxKeXdnYzJsNlpTazdYRzRnSUgxY2JuMHBPeUlzSW5aaGNpQWtaWGh3YjNKMElDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z2RHOUpibVJsZUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTFwYm1SbGVDY3BYRzRnSUN3Z1puSnZiVU5vWVhKRGIyUmxJQ0FnUFNCVGRISnBibWN1Wm5KdmJVTm9ZWEpEYjJSbFhHNGdJQ3dnSkdaeWIyMURiMlJsVUc5cGJuUWdQU0JUZEhKcGJtY3Vabkp2YlVOdlpHVlFiMmx1ZER0Y2JseHVMeThnYkdWdVozUm9JSE5vYjNWc1pDQmlaU0F4TENCdmJHUWdSa1lnY0hKdllteGxiVnh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1nS3lBa1pYaHdiM0owTGtZZ0tpQW9JU0VrWm5KdmJVTnZaR1ZRYjJsdWRDQW1KaUFrWm5KdmJVTnZaR1ZRYjJsdWRDNXNaVzVuZEdnZ0lUMGdNU2tzSUNkVGRISnBibWNuTENCN1hHNGdJQzh2SURJeExqRXVNaTR5SUZOMGNtbHVaeTVtY205dFEyOWtaVkJ2YVc1MEtDNHVMbU52WkdWUWIybHVkSE1wWEc0Z0lHWnliMjFEYjJSbFVHOXBiblE2SUdaMWJtTjBhVzl1SUdaeWIyMURiMlJsVUc5cGJuUW9lQ2w3SUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFd4cGJtVWdibTh0ZFc1MWMyVmtMWFpoY25OY2JpQWdJQ0IyWVhJZ2NtVnpJQ0E5SUZ0ZFhHNGdJQ0FnSUNBc0lHRk1aVzRnUFNCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvWEc0Z0lDQWdJQ0FzSUdrZ0lDQWdQU0F3WEc0Z0lDQWdJQ0FzSUdOdlpHVTdYRzRnSUNBZ2QyaHBiR1VvWVV4bGJpQStJR2twZTF4dUlDQWdJQ0FnWTI5a1pTQTlJQ3RoY21kMWJXVnVkSE5iYVNzclhUdGNiaUFnSUNBZ0lHbG1LSFJ2U1c1a1pYZ29ZMjlrWlN3Z01IZ3hNR1ptWm1ZcElDRTlQU0JqYjJSbEtYUm9jbTkzSUZKaGJtZGxSWEp5YjNJb1kyOWtaU0FySUNjZ2FYTWdibTkwSUdFZ2RtRnNhV1FnWTI5a1pTQndiMmx1ZENjcE8xeHVJQ0FnSUNBZ2NtVnpMbkIxYzJnb1kyOWtaU0E4SURCNE1UQXdNREJjYmlBZ0lDQWdJQ0FnUHlCbWNtOXRRMmhoY2tOdlpHVW9ZMjlrWlNsY2JpQWdJQ0FnSUNBZ09pQm1jbTl0UTJoaGNrTnZaR1VvS0NoamIyUmxJQzA5SURCNE1UQXdNREFwSUQ0K0lERXdLU0FySURCNFpEZ3dNQ3dnWTI5a1pTQWxJREI0TkRBd0lDc2dNSGhrWXpBd0tWeHVJQ0FnSUNBZ0tUdGNiaUFnSUNCOUlISmxkSFZ5YmlCeVpYTXVhbTlwYmlnbkp5azdYRzRnSUgxY2JuMHBPeUlzSWk4dklESXhMakV1TXk0M0lGTjBjbWx1Wnk1d2NtOTBiM1I1Y0dVdWFXNWpiSFZrWlhNb2MyVmhjbU5vVTNSeWFXNW5MQ0J3YjNOcGRHbHZiaUE5SURBcFhHNG5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdKR1Y0Y0c5eWRDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJR052Ym5SbGVIUWdJRDBnY21WeGRXbHlaU2duTGk5ZmMzUnlhVzVuTFdOdmJuUmxlSFFuS1Z4dUlDQXNJRWxPUTB4VlJFVlRJRDBnSjJsdVkyeDFaR1Z6Snp0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsQWdLeUFrWlhod2IzSjBMa1lnS2lCeVpYRjFhWEpsS0NjdUwxOW1ZV2xzY3kxcGN5MXlaV2RsZUhBbktTaEpUa05NVlVSRlV5a3NJQ2RUZEhKcGJtY25MQ0I3WEc0Z0lHbHVZMngxWkdWek9pQm1kVzVqZEdsdmJpQnBibU5zZFdSbGN5aHpaV0Z5WTJoVGRISnBibWNnTHlvc0lIQnZjMmwwYVc5dUlEMGdNQ0FxTHlsN1hHNGdJQ0FnY21WMGRYSnVJQ0VoZm1OdmJuUmxlSFFvZEdocGN5d2djMlZoY21Ob1UzUnlhVzVuTENCSlRrTk1WVVJGVXlsY2JpQWdJQ0FnSUM1cGJtUmxlRTltS0hObFlYSmphRk4wY21sdVp5d2dZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQStJREVnUHlCaGNtZDFiV1Z1ZEhOYk1WMGdPaUIxYm1SbFptbHVaV1FwTzF4dUlDQjlYRzU5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc0dkx5QkNMakl1TXk0NUlGTjBjbWx1Wnk1d2NtOTBiM1I1Y0dVdWFYUmhiR2xqY3lncFhHNXlaWEYxYVhKbEtDY3VMMTl6ZEhKcGJtY3RhSFJ0YkNjcEtDZHBkR0ZzYVdOekp5d2dablZ1WTNScGIyNG9ZM0psWVhSbFNGUk5UQ2w3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCcGRHRnNhV056S0NsN1hHNGdJQ0FnY21WMGRYSnVJR055WldGMFpVaFVUVXdvZEdocGN5d2dKMmtuTENBbkp5d2dKeWNwTzF4dUlDQjlYRzU5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc0dkx5QkNMakl1TXk0eE1DQlRkSEpwYm1jdWNISnZkRzkwZVhCbExteHBibXNvZFhKc0tWeHVjbVZ4ZFdseVpTZ25MaTlmYzNSeWFXNW5MV2gwYld3bktTZ25iR2x1YXljc0lHWjFibU4wYVc5dUtHTnlaV0YwWlVoVVRVd3BlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnYkdsdWF5aDFjbXdwZTF4dUlDQWdJSEpsZEhWeWJpQmpjbVZoZEdWSVZFMU1LSFJvYVhNc0lDZGhKeXdnSjJoeVpXWW5MQ0IxY213cE8xeHVJQ0I5WEc1OUtUc2lMQ0oyWVhJZ0pHVjRjRzl5ZENBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQjBiMGxQWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXBiMkpxWldOMEp5bGNiaUFnTENCMGIweGxibWQwYUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxc1pXNW5kR2duS1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTXNJQ2RUZEhKcGJtY25MQ0I3WEc0Z0lDOHZJREl4TGpFdU1pNDBJRk4wY21sdVp5NXlZWGNvWTJGc2JGTnBkR1VzSUM0dUxuTjFZbk4wYVhSMWRHbHZibk1wWEc0Z0lISmhkem9nWm5WdVkzUnBiMjRnY21GM0tHTmhiR3hUYVhSbEtYdGNiaUFnSUNCMllYSWdkSEJzSUNBOUlIUnZTVTlpYW1WamRDaGpZV3hzVTJsMFpTNXlZWGNwWEc0Z0lDQWdJQ0FzSUd4bGJpQWdQU0IwYjB4bGJtZDBhQ2gwY0d3dWJHVnVaM1JvS1Z4dUlDQWdJQ0FnTENCaFRHVnVJRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhRnh1SUNBZ0lDQWdMQ0J5WlhNZ0lEMGdXMTFjYmlBZ0lDQWdJQ3dnYVNBZ0lDQTlJREE3WEc0Z0lDQWdkMmhwYkdVb2JHVnVJRDRnYVNsN1hHNGdJQ0FnSUNCeVpYTXVjSFZ6YUNoVGRISnBibWNvZEhCc1cya3JLMTBwS1R0Y2JpQWdJQ0FnSUdsbUtHa2dQQ0JoVEdWdUtYSmxjeTV3ZFhOb0tGTjBjbWx1WnloaGNtZDFiV1Z1ZEhOYmFWMHBLVHRjYmlBZ0lDQjlJSEpsZEhWeWJpQnlaWE11YW05cGJpZ25KeWs3WEc0Z0lIMWNibjBwT3lJc0luWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlrN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVFMQ0FuVTNSeWFXNW5KeXdnZTF4dUlDQXZMeUF5TVM0eExqTXVNVE1nVTNSeWFXNW5MbkJ5YjNSdmRIbHdaUzV5WlhCbFlYUW9ZMjkxYm5RcFhHNGdJSEpsY0dWaGREb2djbVZ4ZFdseVpTZ25MaTlmYzNSeWFXNW5MWEpsY0dWaGRDY3BYRzU5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc0dkx5QkNMakl1TXk0eE1TQlRkSEpwYm1jdWNISnZkRzkwZVhCbExuTnRZV3hzS0NsY2JuSmxjWFZwY21Vb0p5NHZYM04wY21sdVp5MW9kRzFzSnlrb0ozTnRZV3hzSnl3Z1puVnVZM1JwYjI0b1kzSmxZWFJsU0ZSTlRDbDdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJ6YldGc2JDZ3BlMXh1SUNBZ0lISmxkSFZ5YmlCamNtVmhkR1ZJVkUxTUtIUm9hWE1zSUNkemJXRnNiQ2NzSUNjbkxDQW5KeWs3WEc0Z0lIMWNibjBwT3lJc0lpOHZJREl4TGpFdU15NHhPQ0JUZEhKcGJtY3VjSEp2ZEc5MGVYQmxMbk4wWVhKMGMxZHBkR2dvYzJWaGNtTm9VM1J5YVc1bklGc3NJSEJ2YzJsMGFXOXVJRjBwWEc0bmRYTmxJSE4wY21samRDYzdYRzUyWVhJZ0pHVjRjRzl5ZENBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJSFJ2VEdWdVozUm9JQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YkdWdVozUm9KeWxjYmlBZ0xDQmpiMjUwWlhoMElDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzTjBjbWx1WnkxamIyNTBaWGgwSnlsY2JpQWdMQ0JUVkVGU1ZGTmZWMGxVU0NBOUlDZHpkR0Z5ZEhOWGFYUm9KMXh1SUNBc0lDUnpkR0Z5ZEhOWGFYUm9JRDBnSnlkYlUxUkJVbFJUWDFkSlZFaGRPMXh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VUNBcklDUmxlSEJ2Y25RdVJpQXFJSEpsY1hWcGNtVW9KeTR2WDJaaGFXeHpMV2x6TFhKbFoyVjRjQ2NwS0ZOVVFWSlVVMTlYU1ZSSUtTd2dKMU4wY21sdVp5Y3NJSHRjYmlBZ2MzUmhjblJ6VjJsMGFEb2dablZ1WTNScGIyNGdjM1JoY25SelYybDBhQ2h6WldGeVkyaFRkSEpwYm1jZ0x5b3NJSEJ2YzJsMGFXOXVJRDBnTUNBcUx5bDdYRzRnSUNBZ2RtRnlJSFJvWVhRZ0lDQTlJR052Ym5SbGVIUW9kR2hwY3l3Z2MyVmhjbU5vVTNSeWFXNW5MQ0JUVkVGU1ZGTmZWMGxVU0NsY2JpQWdJQ0FnSUN3Z2FXNWtaWGdnSUQwZ2RHOU1aVzVuZEdnb1RXRjBhQzV0YVc0b1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lERWdQeUJoY21kMWJXVnVkSE5iTVYwZ09pQjFibVJsWm1sdVpXUXNJSFJvWVhRdWJHVnVaM1JvS1NsY2JpQWdJQ0FnSUN3Z2MyVmhjbU5vSUQwZ1UzUnlhVzVuS0hObFlYSmphRk4wY21sdVp5azdYRzRnSUNBZ2NtVjBkWEp1SUNSemRHRnlkSE5YYVhSb1hHNGdJQ0FnSUNBL0lDUnpkR0Z5ZEhOWGFYUm9MbU5oYkd3b2RHaGhkQ3dnYzJWaGNtTm9MQ0JwYm1SbGVDbGNiaUFnSUNBZ0lEb2dkR2hoZEM1emJHbGpaU2hwYm1SbGVDd2dhVzVrWlhnZ0t5QnpaV0Z5WTJndWJHVnVaM1JvS1NBOVBUMGdjMlZoY21Ob08xeHVJQ0I5WEc1OUtUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNHZMeUJDTGpJdU15NHhNaUJUZEhKcGJtY3VjSEp2ZEc5MGVYQmxMbk4wY21sclpTZ3BYRzV5WlhGMWFYSmxLQ2N1TDE5emRISnBibWN0YUhSdGJDY3BLQ2R6ZEhKcGEyVW5MQ0JtZFc1amRHbHZiaWhqY21WaGRHVklWRTFNS1h0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlITjBjbWxyWlNncGUxeHVJQ0FnSUhKbGRIVnliaUJqY21WaGRHVklWRTFNS0hSb2FYTXNJQ2R6ZEhKcGEyVW5MQ0FuSnl3Z0p5Y3BPMXh1SUNCOVhHNTlLVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzR2THlCQ0xqSXVNeTR4TXlCVGRISnBibWN1Y0hKdmRHOTBlWEJsTG5OMVlpZ3BYRzV5WlhGMWFYSmxLQ2N1TDE5emRISnBibWN0YUhSdGJDY3BLQ2R6ZFdJbkxDQm1kVzVqZEdsdmJpaGpjbVZoZEdWSVZFMU1LWHRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUhOMVlpZ3BlMXh1SUNBZ0lISmxkSFZ5YmlCamNtVmhkR1ZJVkUxTUtIUm9hWE1zSUNkemRXSW5MQ0FuSnl3Z0p5Y3BPMXh1SUNCOVhHNTlLVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzR2THlCQ0xqSXVNeTR4TkNCVGRISnBibWN1Y0hKdmRHOTBlWEJsTG5OMWNDZ3BYRzV5WlhGMWFYSmxLQ2N1TDE5emRISnBibWN0YUhSdGJDY3BLQ2R6ZFhBbkxDQm1kVzVqZEdsdmJpaGpjbVZoZEdWSVZFMU1LWHRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUhOMWNDZ3BlMXh1SUNBZ0lISmxkSFZ5YmlCamNtVmhkR1ZJVkUxTUtIUm9hWE1zSUNkemRYQW5MQ0FuSnl3Z0p5Y3BPMXh1SUNCOVhHNTlLVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzR2THlBeU1TNHhMak11TWpVZ1UzUnlhVzVuTG5CeWIzUnZkSGx3WlM1MGNtbHRLQ2xjYm5KbGNYVnBjbVVvSnk0dlgzTjBjbWx1WnkxMGNtbHRKeWtvSjNSeWFXMG5MQ0JtZFc1amRHbHZiaWdrZEhKcGJTbDdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUIwY21sdEtDbDdYRzRnSUNBZ2NtVjBkWEp1SUNSMGNtbHRLSFJvYVhNc0lETXBPMXh1SUNCOU8xeHVmU2s3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1ZG1GeUlDUmxlSEJ2Y25RZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnSkhSNWNHVmtJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEhsd1pXUW5LVnh1SUNBc0lHSjFabVpsY2lBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUjVjR1ZrTFdKMVptWmxjaWNwWEc0Z0lDd2dZVzVQWW1wbFkzUWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YjJKcVpXTjBKeWxjYmlBZ0xDQjBiMGx1WkdWNElDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTFwYm1SbGVDY3BYRzRnSUN3Z2RHOU1aVzVuZEdnZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRiR1Z1WjNSb0p5bGNiaUFnTENCcGMwOWlhbVZqZENBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGN5MXZZbXBsWTNRbktWeHVJQ0FzSUVGeWNtRjVRblZtWm1WeUlDQTlJSEpsY1hWcGNtVW9KeTR2WDJkc2IySmhiQ2NwTGtGeWNtRjVRblZtWm1WeVhHNGdJQ3dnYzNCbFkybGxjME52Ym5OMGNuVmpkRzl5SUQwZ2NtVnhkV2x5WlNnbkxpOWZjM0JsWTJsbGN5MWpiMjV6ZEhKMVkzUnZjaWNwWEc0Z0lDd2dKRUZ5Y21GNVFuVm1abVZ5SUQwZ1luVm1abVZ5TGtGeWNtRjVRblZtWm1WeVhHNGdJQ3dnSkVSaGRHRldhV1YzSUNBZ0lEMGdZblZtWm1WeUxrUmhkR0ZXYVdWM1hHNGdJQ3dnSkdselZtbGxkeUFnSUNBZ0lEMGdKSFI1Y0dWa0xrRkNWaUFtSmlCQmNuSmhlVUoxWm1abGNpNXBjMVpwWlhkY2JpQWdMQ0FrYzJ4cFkyVWdJQ0FnSUNBZ1BTQWtRWEp5WVhsQ2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5Oc2FXTmxYRzRnSUN3Z1ZrbEZWeUFnSUNBZ0lDQWdJRDBnSkhSNWNHVmtMbFpKUlZkY2JpQWdMQ0JCVWxKQldWOUNWVVpHUlZJZ1BTQW5RWEp5WVhsQ2RXWm1aWEluTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVJ5QXJJQ1JsZUhCdmNuUXVWeUFySUNSbGVIQnZjblF1UmlBcUlDaEJjbkpoZVVKMVptWmxjaUFoUFQwZ0pFRnljbUY1UW5WbVptVnlLU3dnZTBGeWNtRjVRblZtWm1WeU9pQWtRWEp5WVhsQ2RXWm1aWEo5S1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTWdLeUFrWlhod2IzSjBMa1lnS2lBaEpIUjVjR1ZrTGtOUFRsTlVVaXdnUVZKU1FWbGZRbFZHUmtWU0xDQjdYRzRnSUM4dklESTBMakV1TXk0eElFRnljbUY1UW5WbVptVnlMbWx6Vm1sbGR5aGhjbWNwWEc0Z0lHbHpWbWxsZHpvZ1puVnVZM1JwYjI0Z2FYTldhV1YzS0dsMEtYdGNiaUFnSUNCeVpYUjFjbTRnSkdselZtbGxkeUFtSmlBa2FYTldhV1YzS0dsMEtTQjhmQ0JwYzA5aWFtVmpkQ2hwZENrZ0ppWWdWa2xGVnlCcGJpQnBkRHRjYmlBZ2ZWeHVmU2s3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1UUlDc2dKR1Y0Y0c5eWRDNVZJQ3NnSkdWNGNHOXlkQzVHSUNvZ2NtVnhkV2x5WlNnbkxpOWZabUZwYkhNbktTaG1kVzVqZEdsdmJpZ3BlMXh1SUNCeVpYUjFjbTRnSVc1bGR5QWtRWEp5WVhsQ2RXWm1aWElvTWlrdWMyeHBZMlVvTVN3Z2RXNWtaV1pwYm1Wa0tTNWllWFJsVEdWdVozUm9PMXh1ZlNrc0lFRlNVa0ZaWDBKVlJrWkZVaXdnZTF4dUlDQXZMeUF5TkM0eExqUXVNeUJCY25KaGVVSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWMyeHBZMlVvYzNSaGNuUXNJR1Z1WkNsY2JpQWdjMnhwWTJVNklHWjFibU4wYVc5dUlITnNhV05sS0hOMFlYSjBMQ0JsYm1RcGUxeHVJQ0FnSUdsbUtDUnpiR2xqWlNBaFBUMGdkVzVrWldacGJtVmtJQ1ltSUdWdVpDQTlQVDBnZFc1a1pXWnBibVZrS1hKbGRIVnliaUFrYzJ4cFkyVXVZMkZzYkNoaGJrOWlhbVZqZENoMGFHbHpLU3dnYzNSaGNuUXBPeUF2THlCR1JpQm1hWGhjYmlBZ0lDQjJZWElnYkdWdUlDQWdJRDBnWVc1UFltcGxZM1FvZEdocGN5a3VZbmwwWlV4bGJtZDBhRnh1SUNBZ0lDQWdMQ0JtYVhKemRDQWdQU0IwYjBsdVpHVjRLSE4wWVhKMExDQnNaVzRwWEc0Z0lDQWdJQ0FzSUdacGJtRnNJQ0E5SUhSdlNXNWtaWGdvWlc1a0lEMDlQU0IxYm1SbFptbHVaV1FnUHlCc1pXNGdPaUJsYm1Rc0lHeGxiaWxjYmlBZ0lDQWdJQ3dnY21WemRXeDBJRDBnYm1WM0lDaHpjR1ZqYVdWelEyOXVjM1J5ZFdOMGIzSW9kR2hwY3l3Z0pFRnljbUY1UW5WbVptVnlLU2tvZEc5TVpXNW5kR2dvWm1sdVlXd2dMU0JtYVhKemRDa3BYRzRnSUNBZ0lDQXNJSFpwWlhkVElDQTlJRzVsZHlBa1JHRjBZVlpwWlhjb2RHaHBjeWxjYmlBZ0lDQWdJQ3dnZG1sbGQxUWdJRDBnYm1WM0lDUkVZWFJoVm1sbGR5aHlaWE4xYkhRcFhHNGdJQ0FnSUNBc0lHbHVaR1Y0SUNBOUlEQTdYRzRnSUNBZ2QyaHBiR1VvWm1seWMzUWdQQ0JtYVc1aGJDbDdYRzRnSUNBZ0lDQjJhV1YzVkM1elpYUlZhVzUwT0NocGJtUmxlQ3NyTENCMmFXVjNVeTVuWlhSVmFXNTBPQ2htYVhKemRDc3JLU2s3WEc0Z0lDQWdmU0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0I5WEc1OUtUdGNibHh1Y21WeGRXbHlaU2duTGk5ZmMyVjBMWE53WldOcFpYTW5LU2hCVWxKQldWOUNWVVpHUlZJcE95SXNJblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5azdYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVSeUFySUNSbGVIQnZjblF1VnlBcklDUmxlSEJ2Y25RdVJpQXFJQ0Z5WlhGMWFYSmxLQ2N1TDE5MGVYQmxaQ2NwTGtGQ1Zpd2dlMXh1SUNCRVlYUmhWbWxsZHpvZ2NtVnhkV2x5WlNnbkxpOWZkSGx3WldRdFluVm1abVZ5SnlrdVJHRjBZVlpwWlhkY2JuMHBPeUlzSW5KbGNYVnBjbVVvSnk0dlgzUjVjR1ZrTFdGeWNtRjVKeWtvSjBac2IyRjBNekluTENBMExDQm1kVzVqZEdsdmJpaHBibWwwS1h0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlFWnNiMkYwTXpKQmNuSmhlU2hrWVhSaExDQmllWFJsVDJabWMyVjBMQ0JzWlc1bmRHZ3BlMXh1SUNBZ0lISmxkSFZ5YmlCcGJtbDBLSFJvYVhNc0lHUmhkR0VzSUdKNWRHVlBabVp6WlhRc0lHeGxibWQwYUNrN1hHNGdJSDA3WEc1OUtUc2lMQ0p5WlhGMWFYSmxLQ2N1TDE5MGVYQmxaQzFoY25KaGVTY3BLQ2RHYkc5aGREWTBKeXdnT0N3Z1puVnVZM1JwYjI0b2FXNXBkQ2w3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCR2JHOWhkRFkwUVhKeVlYa29aR0YwWVN3Z1lubDBaVTltWm5ObGRDd2diR1Z1WjNSb0tYdGNiaUFnSUNCeVpYUjFjbTRnYVc1cGRDaDBhR2x6TENCa1lYUmhMQ0JpZVhSbFQyWm1jMlYwTENCc1pXNW5kR2dwTzF4dUlDQjlPMXh1ZlNrN0lpd2ljbVZ4ZFdseVpTZ25MaTlmZEhsd1pXUXRZWEp5WVhrbktTZ25TVzUwTVRZbkxDQXlMQ0JtZFc1amRHbHZiaWhwYm1sMEtYdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJRWx1ZERFMlFYSnlZWGtvWkdGMFlTd2dZbmwwWlU5bVpuTmxkQ3dnYkdWdVozUm9LWHRjYmlBZ0lDQnlaWFIxY200Z2FXNXBkQ2gwYUdsekxDQmtZWFJoTENCaWVYUmxUMlptYzJWMExDQnNaVzVuZEdncE8xeHVJQ0I5TzF4dWZTazdJaXdpY21WeGRXbHlaU2duTGk5ZmRIbHdaV1F0WVhKeVlYa25LU2duU1c1ME16SW5MQ0EwTENCbWRXNWpkR2x2YmlocGJtbDBLWHRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUVsdWRETXlRWEp5WVhrb1pHRjBZU3dnWW5sMFpVOW1abk5sZEN3Z2JHVnVaM1JvS1h0Y2JpQWdJQ0J5WlhSMWNtNGdhVzVwZENoMGFHbHpMQ0JrWVhSaExDQmllWFJsVDJabWMyVjBMQ0JzWlc1bmRHZ3BPMXh1SUNCOU8xeHVmU2s3SWl3aWNtVnhkV2x5WlNnbkxpOWZkSGx3WldRdFlYSnlZWGtuS1NnblNXNTBPQ2NzSURFc0lHWjFibU4wYVc5dUtHbHVhWFFwZTF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z1NXNTBPRUZ5Y21GNUtHUmhkR0VzSUdKNWRHVlBabVp6WlhRc0lHeGxibWQwYUNsN1hHNGdJQ0FnY21WMGRYSnVJR2x1YVhRb2RHaHBjeXdnWkdGMFlTd2dZbmwwWlU5bVpuTmxkQ3dnYkdWdVozUm9LVHRjYmlBZ2ZUdGNibjBwT3lJc0luSmxjWFZwY21Vb0p5NHZYM1I1Y0dWa0xXRnljbUY1Snlrb0oxVnBiblF4Tmljc0lESXNJR1oxYm1OMGFXOXVLR2x1YVhRcGUxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdWV2x1ZERFMlFYSnlZWGtvWkdGMFlTd2dZbmwwWlU5bVpuTmxkQ3dnYkdWdVozUm9LWHRjYmlBZ0lDQnlaWFIxY200Z2FXNXBkQ2gwYUdsekxDQmtZWFJoTENCaWVYUmxUMlptYzJWMExDQnNaVzVuZEdncE8xeHVJQ0I5TzF4dWZTazdJaXdpY21WeGRXbHlaU2duTGk5ZmRIbHdaV1F0WVhKeVlYa25LU2duVldsdWRETXlKeXdnTkN3Z1puVnVZM1JwYjI0b2FXNXBkQ2w3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCVmFXNTBNekpCY25KaGVTaGtZWFJoTENCaWVYUmxUMlptYzJWMExDQnNaVzVuZEdncGUxeHVJQ0FnSUhKbGRIVnliaUJwYm1sMEtIUm9hWE1zSUdSaGRHRXNJR0o1ZEdWUFptWnpaWFFzSUd4bGJtZDBhQ2s3WEc0Z0lIMDdYRzU5S1RzaUxDSnlaWEYxYVhKbEtDY3VMMTkwZVhCbFpDMWhjbkpoZVNjcEtDZFZhVzUwT0Njc0lERXNJR1oxYm1OMGFXOXVLR2x1YVhRcGUxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdWV2x1ZERoQmNuSmhlU2hrWVhSaExDQmllWFJsVDJabWMyVjBMQ0JzWlc1bmRHZ3BlMXh1SUNBZ0lISmxkSFZ5YmlCcGJtbDBLSFJvYVhNc0lHUmhkR0VzSUdKNWRHVlBabVp6WlhRc0lHeGxibWQwYUNrN1hHNGdJSDA3WEc1OUtUc2lMQ0p5WlhGMWFYSmxLQ2N1TDE5MGVYQmxaQzFoY25KaGVTY3BLQ2RWYVc1ME9DY3NJREVzSUdaMWJtTjBhVzl1S0dsdWFYUXBlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnVldsdWREaERiR0Z0Y0dWa1FYSnlZWGtvWkdGMFlTd2dZbmwwWlU5bVpuTmxkQ3dnYkdWdVozUm9LWHRjYmlBZ0lDQnlaWFIxY200Z2FXNXBkQ2gwYUdsekxDQmtZWFJoTENCaWVYUmxUMlptYzJWMExDQnNaVzVuZEdncE8xeHVJQ0I5TzF4dWZTd2dkSEoxWlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJR1ZoWTJnZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMkZ5Y21GNUxXMWxkR2h2WkhNbktTZ3dLVnh1SUNBc0lISmxaR1ZtYVc1bElDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzSmxaR1ZtYVc1bEp5bGNiaUFnTENCdFpYUmhJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dFpYUmhKeWxjYmlBZ0xDQmhjM05wWjI0Z0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFlYTnphV2R1SnlsY2JpQWdMQ0IzWldGcklDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlqYjJ4c1pXTjBhVzl1TFhkbFlXc25LVnh1SUNBc0lHbHpUMkpxWldOMElDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgybHpMVzlpYW1WamRDY3BYRzRnSUN3Z1oyVjBWMlZoYXlBZ0lDQWdJRDBnYldWMFlTNW5aWFJYWldGclhHNGdJQ3dnYVhORmVIUmxibk5wWW14bElEMGdUMkpxWldOMExtbHpSWGgwWlc1emFXSnNaVnh1SUNBc0lIVnVZMkYxWjJoMFJuSnZlbVZ1VTNSdmNtVWdQU0IzWldGckxuVm1jM1J2Y21WY2JpQWdMQ0IwYlhBZ0lDQWdJQ0FnSUNBZ1BTQjdmVnh1SUNBc0lFbHVkR1Z5Ym1Gc1RXRndPMXh1WEc1MllYSWdkM0poY0hCbGNpQTlJR1oxYm1OMGFXOXVLR2RsZENsN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQlhaV0ZyVFdGd0tDbDdYRzRnSUNBZ2NtVjBkWEp1SUdkbGRDaDBhR2x6TENCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUQ0Z01DQS9JR0Z5WjNWdFpXNTBjMXN3WFNBNklIVnVaR1ZtYVc1bFpDazdYRzRnSUgwN1hHNTlPMXh1WEc1MllYSWdiV1YwYUc5a2N5QTlJSHRjYmlBZ0x5OGdNak11TXk0ekxqTWdWMlZoYTAxaGNDNXdjbTkwYjNSNWNHVXVaMlYwS0d0bGVTbGNiaUFnWjJWME9pQm1kVzVqZEdsdmJpQm5aWFFvYTJWNUtYdGNiaUFnSUNCcFppaHBjMDlpYW1WamRDaHJaWGtwS1h0Y2JpQWdJQ0FnSUhaaGNpQmtZWFJoSUQwZ1oyVjBWMlZoYXloclpYa3BPMXh1SUNBZ0lDQWdhV1lvWkdGMFlTQTlQVDBnZEhKMVpTbHlaWFIxY200Z2RXNWpZWFZuYUhSR2NtOTZaVzVUZEc5eVpTaDBhR2x6S1M1blpYUW9hMlY1S1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUJrWVhSaElEOGdaR0YwWVZ0MGFHbHpMbDlwWFNBNklIVnVaR1ZtYVc1bFpEdGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lDOHZJREl6TGpNdU15NDFJRmRsWVd0TllYQXVjSEp2ZEc5MGVYQmxMbk5sZENoclpYa3NJSFpoYkhWbEtWeHVJQ0J6WlhRNklHWjFibU4wYVc5dUlITmxkQ2hyWlhrc0lIWmhiSFZsS1h0Y2JpQWdJQ0J5WlhSMWNtNGdkMlZoYXk1a1pXWW9kR2hwY3l3Z2EyVjVMQ0IyWVd4MVpTazdYRzRnSUgxY2JuMDdYRzVjYmk4dklESXpMak1nVjJWaGEwMWhjQ0JQWW1wbFkzUnpYRzUyWVhJZ0pGZGxZV3ROWVhBZ1BTQnRiMlIxYkdVdVpYaHdiM0owY3lBOUlISmxjWFZwY21Vb0p5NHZYMk52Ykd4bFkzUnBiMjRuS1NnblYyVmhhMDFoY0Njc0lIZHlZWEJ3WlhJc0lHMWxkR2h2WkhNc0lIZGxZV3NzSUhSeWRXVXNJSFJ5ZFdVcE8xeHVYRzR2THlCSlJURXhJRmRsWVd0TllYQWdabkp2ZW1WdUlHdGxlWE1nWm1sNFhHNXBaaWh1WlhjZ0pGZGxZV3ROWVhBb0tTNXpaWFFvS0U5aWFtVmpkQzVtY21WbGVtVWdmSHdnVDJKcVpXTjBLU2gwYlhBcExDQTNLUzVuWlhRb2RHMXdLU0FoUFNBM0tYdGNiaUFnU1c1MFpYSnVZV3hOWVhBZ1BTQjNaV0ZyTG1kbGRFTnZibk4wY25WamRHOXlLSGR5WVhCd1pYSXBPMXh1SUNCaGMzTnBaMjRvU1c1MFpYSnVZV3hOWVhBdWNISnZkRzkwZVhCbExDQnRaWFJvYjJSektUdGNiaUFnYldWMFlTNU9SVVZFSUQwZ2RISjFaVHRjYmlBZ1pXRmphQ2hiSjJSbGJHVjBaU2NzSUNkb1lYTW5MQ0FuWjJWMEp5d2dKM05sZENkZExDQm1kVzVqZEdsdmJpaHJaWGtwZTF4dUlDQWdJSFpoY2lCd2NtOTBieUFnUFNBa1YyVmhhMDFoY0M1d2NtOTBiM1I1Y0dWY2JpQWdJQ0FnSUN3Z2JXVjBhRzlrSUQwZ2NISnZkRzliYTJWNVhUdGNiaUFnSUNCeVpXUmxabWx1WlNod2NtOTBieXdnYTJWNUxDQm1kVzVqZEdsdmJpaGhMQ0JpS1h0Y2JpQWdJQ0FnSUM4dklITjBiM0psSUdaeWIzcGxiaUJ2WW1wbFkzUnpJRzl1SUdsdWRHVnlibUZzSUhkbFlXdHRZWEFnYzJocGJWeHVJQ0FnSUNBZ2FXWW9hWE5QWW1wbFkzUW9ZU2tnSmlZZ0lXbHpSWGgwWlc1emFXSnNaU2hoS1NsN1hHNGdJQ0FnSUNBZ0lHbG1LQ0YwYUdsekxsOW1LWFJvYVhNdVgyWWdQU0J1WlhjZ1NXNTBaWEp1WVd4TllYQTdYRzRnSUNBZ0lDQWdJSFpoY2lCeVpYTjFiSFFnUFNCMGFHbHpMbDltVzJ0bGVWMG9ZU3dnWWlrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCclpYa2dQVDBnSjNObGRDY2dQeUIwYUdseklEb2djbVZ6ZFd4ME8xeHVJQ0FnSUNBZ0x5OGdjM1J2Y21VZ1lXeHNJSFJvWlNCeVpYTjBJRzl1SUc1aGRHbDJaU0IzWldGcmJXRndYRzRnSUNBZ0lDQjlJSEpsZEhWeWJpQnRaWFJvYjJRdVkyRnNiQ2gwYUdsekxDQmhMQ0JpS1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmU2s3WEc1OUlpd2lKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJSGRsWVdzZ1BTQnlaWEYxYVhKbEtDY3VMMTlqYjJ4c1pXTjBhVzl1TFhkbFlXc25LVHRjYmx4dUx5OGdNak11TkNCWFpXRnJVMlYwSUU5aWFtVmpkSE5jYm5KbGNYVnBjbVVvSnk0dlgyTnZiR3hsWTNScGIyNG5LU2duVjJWaGExTmxkQ2NzSUdaMWJtTjBhVzl1S0dkbGRDbDdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJYWldGclUyVjBLQ2w3SUhKbGRIVnliaUJuWlhRb2RHaHBjeXdnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0ErSURBZ1B5QmhjbWQxYldWdWRITmJNRjBnT2lCMWJtUmxabWx1WldRcE95QjlPMXh1ZlN3Z2UxeHVJQ0F2THlBeU15NDBMak11TVNCWFpXRnJVMlYwTG5CeWIzUnZkSGx3WlM1aFpHUW9kbUZzZFdVcFhHNGdJR0ZrWkRvZ1puVnVZM1JwYjI0Z1lXUmtLSFpoYkhWbEtYdGNiaUFnSUNCeVpYUjFjbTRnZDJWaGF5NWtaV1lvZEdocGN5d2dkbUZzZFdVc0lIUnlkV1VwTzF4dUlDQjlYRzU5TENCM1pXRnJMQ0JtWVd4elpTd2dkSEoxWlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dUx5OGdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM1JqTXprdlFYSnlZWGt1Y0hKdmRHOTBlWEJsTG1sdVkyeDFaR1Z6WEc1MllYSWdKR1Y0Y0c5eWRDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0FrYVc1amJIVmtaWE1nUFNCeVpYRjFhWEpsS0NjdUwxOWhjbkpoZVMxcGJtTnNkV1JsY3ljcEtIUnlkV1VwTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVVDd2dKMEZ5Y21GNUp5d2dlMXh1SUNCcGJtTnNkV1JsY3pvZ1puVnVZM1JwYjI0Z2FXNWpiSFZrWlhNb1pXd2dMeW9zSUdaeWIyMUpibVJsZUNBOUlEQWdLaThwZTF4dUlDQWdJSEpsZEhWeWJpQWthVzVqYkhWa1pYTW9kR2hwY3l3Z1pXd3NJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQaUF4SUQ4Z1lYSm5kVzFsYm5Seld6RmRJRG9nZFc1a1pXWnBibVZrS1R0Y2JpQWdmVnh1ZlNrN1hHNWNibkpsY1hWcGNtVW9KeTR2WDJGa1pDMTBieTExYm5OamIzQmhZbXhsY3ljcEtDZHBibU5zZFdSbGN5Y3BPeUlzSWk4dklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXlkMkZzWkhKdmJpOTBZek01TFc1dmRHVnpMMkpzYjJJdmJXRnpkR1Z5TDJWek5pOHlNREUwTFRBNUwzTmxjSFF0TWpVdWJXUWpOVEV3TFdkc2IySmhiR0Z6WVhBdFptOXlMV1Z1Y1hWbGRXbHVaeTFoTFcxcFkzSnZkR0Z6YTF4dWRtRnlJQ1JsZUhCdmNuUWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnYldsamNtOTBZWE5ySUQwZ2NtVnhkV2x5WlNnbkxpOWZiV2xqY205MFlYTnJKeWtvS1Z4dUlDQXNJSEJ5YjJObGMzTWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyZHNiMkpoYkNjcExuQnliMk5sYzNOY2JpQWdMQ0JwYzA1dlpHVWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpiMlluS1Nod2NtOWpaWE56S1NBOVBTQW5jSEp2WTJWemN5YzdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVITENCN1hHNGdJR0Z6WVhBNklHWjFibU4wYVc5dUlHRnpZWEFvWm00cGUxeHVJQ0FnSUhaaGNpQmtiMjFoYVc0Z1BTQnBjMDV2WkdVZ0ppWWdjSEp2WTJWemN5NWtiMjFoYVc0N1hHNGdJQ0FnYldsamNtOTBZWE5yS0dSdmJXRnBiaUEvSUdSdmJXRnBiaTVpYVc1a0tHWnVLU0E2SUdadUtUdGNiaUFnZlZ4dWZTazdJaXdpTHk4Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwyeHFhR0Z5WWk5d2NtOXdiM05oYkMxcGN5MWxjbkp2Y2x4dWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJR052WmlBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5amIyWW5LVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNc0lDZEZjbkp2Y2ljc0lIdGNiaUFnYVhORmNuSnZjam9nWm5WdVkzUnBiMjRnYVhORmNuSnZjaWhwZENsN1hHNGdJQ0FnY21WMGRYSnVJR052WmlocGRDa2dQVDA5SUNkRmNuSnZjaWM3WEc0Z0lIMWNibjBwT3lJc0lpOHZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzlFWVhacFpFSnlkV0Z1ZEM5TllYQXRVMlYwTG5CeWIzUnZkSGx3WlM1MGIwcFRUMDVjYm5aaGNpQWtaWGh3YjNKMElDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVVDQXJJQ1JsZUhCdmNuUXVVaXdnSjAxaGNDY3NJSHQwYjBwVFQwNDZJSEpsY1hWcGNtVW9KeTR2WDJOdmJHeGxZM1JwYjI0dGRHOHRhbk52YmljcEtDZE5ZWEFuS1gwcE95SXNJaTh2SUdoMGRIQnpPaTh2WjJsemRDNW5hWFJvZFdJdVkyOXRMMEp5Wlc1a1lXNUZhV05vTHpReU9UUmtOV015TVRKaE5tUXlNalUwTnpBelhHNTJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeXdnSjAxaGRHZ25MQ0I3WEc0Z0lHbGhaR1JvT2lCbWRXNWpkR2x2YmlCcFlXUmthQ2g0TUN3Z2VERXNJSGt3TENCNU1TbDdYRzRnSUNBZ2RtRnlJQ1I0TUNBOUlIZ3dJRDQrUGlBd1hHNGdJQ0FnSUNBc0lDUjRNU0E5SUhneElENCtQaUF3WEc0Z0lDQWdJQ0FzSUNSNU1DQTlJSGt3SUQ0K1BpQXdPMXh1SUNBZ0lISmxkSFZ5YmlBa2VERWdLeUFvZVRFZ1BqNCtJREFwSUNzZ0tDZ2tlREFnSmlBa2VUQWdmQ0FvSkhnd0lId2dKSGt3S1NBbUlING9KSGd3SUNzZ0pIa3dJRDQrUGlBd0tTa2dQajQrSURNeEtTQjhJREE3WEc0Z0lIMWNibjBwT3lJc0lpOHZJR2gwZEhCek9pOHZaMmx6ZEM1bmFYUm9kV0l1WTI5dEwwSnlaVzVrWVc1RmFXTm9MelF5T1RSa05XTXlNVEpoTm1ReU1qVTBOekF6WEc1MllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5d2dKMDFoZEdnbkxDQjdYRzRnSUdsdGRXeG9PaUJtZFc1amRHbHZiaUJwYlhWc2FDaDFMQ0IyS1h0Y2JpQWdJQ0IyWVhJZ1ZVbE9WREUySUQwZ01IaG1abVptWEc0Z0lDQWdJQ0FzSUNSMUlEMGdLM1ZjYmlBZ0lDQWdJQ3dnSkhZZ1BTQXJkbHh1SUNBZ0lDQWdMQ0IxTUNBOUlDUjFJQ1lnVlVsT1ZERTJYRzRnSUNBZ0lDQXNJSFl3SUQwZ0pIWWdKaUJWU1U1VU1UWmNiaUFnSUNBZ0lDd2dkVEVnUFNBa2RTQStQaUF4Tmx4dUlDQWdJQ0FnTENCMk1TQTlJQ1IySUQ0K0lERTJYRzRnSUNBZ0lDQXNJSFFnSUQwZ0tIVXhJQ29nZGpBZ1BqNCtJREFwSUNzZ0tIVXdJQ29nZGpBZ1BqNCtJREUyS1R0Y2JpQWdJQ0J5WlhSMWNtNGdkVEVnS2lCMk1TQXJJQ2gwSUQ0K0lERTJLU0FySUNnb2RUQWdLaUIyTVNBK1BqNGdNQ2tnS3lBb2RDQW1JRlZKVGxReE5pa2dQajRnTVRZcE8xeHVJQ0I5WEc1OUtUc2lMQ0l2THlCb2RIUndjem92TDJkcGMzUXVaMmwwYUhWaUxtTnZiUzlDY21WdVpHRnVSV2xqYUM4ME1qazBaRFZqTWpFeVlUWmtNakkxTkRjd00xeHVkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1zSUNkTllYUm9KeXdnZTF4dUlDQnBjM1ZpYURvZ1puVnVZM1JwYjI0Z2FYTjFZbWdvZURBc0lIZ3hMQ0I1TUN3Z2VURXBlMXh1SUNBZ0lIWmhjaUFrZURBZ1BTQjRNQ0ErUGo0Z01GeHVJQ0FnSUNBZ0xDQWtlREVnUFNCNE1TQStQajRnTUZ4dUlDQWdJQ0FnTENBa2VUQWdQU0I1TUNBK1BqNGdNRHRjYmlBZ0lDQnlaWFIxY200Z0pIZ3hJQzBnS0hreElENCtQaUF3S1NBdElDZ29maVI0TUNBbUlDUjVNQ0I4SUg0b0pIZ3dJRjRnSkhrd0tTQW1JQ1I0TUNBdElDUjVNQ0ErUGo0Z01Da2dQajQrSURNeEtTQjhJREE3WEc0Z0lIMWNibjBwT3lJc0lpOHZJR2gwZEhCek9pOHZaMmx6ZEM1bmFYUm9kV0l1WTI5dEwwSnlaVzVrWVc1RmFXTm9MelF5T1RSa05XTXlNVEpoTm1ReU1qVTBOekF6WEc1MllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5d2dKMDFoZEdnbkxDQjdYRzRnSUhWdGRXeG9PaUJtZFc1amRHbHZiaUIxYlhWc2FDaDFMQ0IyS1h0Y2JpQWdJQ0IyWVhJZ1ZVbE9WREUySUQwZ01IaG1abVptWEc0Z0lDQWdJQ0FzSUNSMUlEMGdLM1ZjYmlBZ0lDQWdJQ3dnSkhZZ1BTQXJkbHh1SUNBZ0lDQWdMQ0IxTUNBOUlDUjFJQ1lnVlVsT1ZERTJYRzRnSUNBZ0lDQXNJSFl3SUQwZ0pIWWdKaUJWU1U1VU1UWmNiaUFnSUNBZ0lDd2dkVEVnUFNBa2RTQStQajRnTVRaY2JpQWdJQ0FnSUN3Z2RqRWdQU0FrZGlBK1BqNGdNVFpjYmlBZ0lDQWdJQ3dnZENBZ1BTQW9kVEVnS2lCMk1DQStQajRnTUNrZ0t5QW9kVEFnS2lCMk1DQStQajRnTVRZcE8xeHVJQ0FnSUhKbGRIVnliaUIxTVNBcUlIWXhJQ3NnS0hRZ1BqNCtJREUyS1NBcklDZ29kVEFnS2lCMk1TQStQajRnTUNrZ0t5QW9kQ0FtSUZWSlRsUXhOaWtnUGo0K0lERTJLVHRjYmlBZ2ZWeHVmU2s3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1ZG1GeUlDUmxlSEJ2Y25RZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z2RHOVBZbXBsWTNRZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YjJKcVpXTjBKeWxjYmlBZ0xDQmhSblZ1WTNScGIyNGdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloTFdaMWJtTjBhVzl1SnlsY2JpQWdMQ0FrWkdWbWFXNWxVSEp2Y0dWeWRIa2dQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WkhBbktUdGNibHh1THk4Z1FpNHlMakl1TWlCUFltcGxZM1F1Y0hKdmRHOTBlWEJsTGw5ZlpHVm1hVzVsUjJWMGRHVnlYMThvVUN3Z1oyVjBkR1Z5S1Z4dWNtVnhkV2x5WlNnbkxpOWZaR1Z6WTNKcGNIUnZjbk1uS1NBbUppQWtaWGh3YjNKMEtDUmxlSEJ2Y25RdVVDQXJJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFtYjNKalpXUXRjR0Z0Snlrc0lDZFBZbXBsWTNRbkxDQjdYRzRnSUY5ZlpHVm1hVzVsUjJWMGRHVnlYMTg2SUdaMWJtTjBhVzl1SUY5ZlpHVm1hVzVsUjJWMGRHVnlYMThvVUN3Z1oyVjBkR1Z5S1h0Y2JpQWdJQ0FrWkdWbWFXNWxVSEp2Y0dWeWRIa3VaaWgwYjA5aWFtVmpkQ2gwYUdsektTd2dVQ3dnZTJkbGREb2dZVVoxYm1OMGFXOXVLR2RsZEhSbGNpa3NJR1Z1ZFcxbGNtRmliR1U2SUhSeWRXVXNJR052Ym1acFozVnlZV0pzWlRvZ2RISjFaWDBwTzF4dUlDQjlYRzU5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdKR1Y0Y0c5eWRDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQjBiMDlpYW1WamRDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxdlltcGxZM1FuS1Z4dUlDQXNJR0ZHZFc1amRHbHZiaUFnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJFdFpuVnVZM1JwYjI0bktWeHVJQ0FzSUNSa1pXWnBibVZRY205d1pYSjBlU0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxa2NDY3BPMXh1WEc0dkx5QkNMakl1TWk0eklFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdVgxOWtaV1pwYm1WVFpYUjBaWEpmWHloUUxDQnpaWFIwWlhJcFhHNXlaWEYxYVhKbEtDY3VMMTlrWlhOamNtbHdkRzl5Y3ljcElDWW1JQ1JsZUhCdmNuUW9KR1Y0Y0c5eWRDNVFJQ3NnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdadmNtTmxaQzF3WVcwbktTd2dKMDlpYW1WamRDY3NJSHRjYmlBZ1gxOWtaV1pwYm1WVFpYUjBaWEpmWHpvZ1puVnVZM1JwYjI0Z1gxOWtaV1pwYm1WVFpYUjBaWEpmWHloUUxDQnpaWFIwWlhJcGUxeHVJQ0FnSUNSa1pXWnBibVZRY205d1pYSjBlUzVtS0hSdlQySnFaV04wS0hSb2FYTXBMQ0JRTENCN2MyVjBPaUJoUm5WdVkzUnBiMjRvYzJWMGRHVnlLU3dnWlc1MWJXVnlZV0pzWlRvZ2RISjFaU3dnWTI5dVptbG5kWEpoWW14bE9pQjBjblZsZlNrN1hHNGdJSDFjYm4wcE95SXNJaTh2SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5MFl6TTVMM0J5YjNCdmMyRnNMVzlpYW1WamRDMTJZV3gxWlhNdFpXNTBjbWxsYzF4dWRtRnlJQ1JsZUhCdmNuUWdJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0FrWlc1MGNtbGxjeUE5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxMGJ5MWhjbkpoZVNjcEtIUnlkV1VwTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5d2dKMDlpYW1WamRDY3NJSHRjYmlBZ1pXNTBjbWxsY3pvZ1puVnVZM1JwYjI0Z1pXNTBjbWxsY3locGRDbDdYRzRnSUNBZ2NtVjBkWEp1SUNSbGJuUnlhV1Z6S0dsMEtUdGNiaUFnZlZ4dWZTazdJaXdpTHk4Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzUmpNemt2Y0hKdmNHOXpZV3d0YjJKcVpXTjBMV2RsZEc5M2JuQnliM0JsY25SNVpHVnpZM0pwY0hSdmNuTmNiblpoY2lBa1pYaHdiM0owSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnYjNkdVMyVjVjeUFnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dmQyNHRhMlY1Y3ljcFhHNGdJQ3dnZEc5SlQySnFaV04wSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXBiMkpxWldOMEp5bGNiaUFnTENCblQxQkVJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxbmIzQmtKeWxjYmlBZ0xDQmpjbVZoZEdWUWNtOXdaWEowZVNBOUlISmxjWFZwY21Vb0p5NHZYMk55WldGMFpTMXdjbTl3WlhKMGVTY3BPMXh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXl3Z0owOWlhbVZqZENjc0lIdGNiaUFnWjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXljem9nWm5WdVkzUnBiMjRnWjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXljeWh2WW1wbFkzUXBlMXh1SUNBZ0lIWmhjaUJQSUNBZ0lDQWdJRDBnZEc5SlQySnFaV04wS0c5aWFtVmpkQ2xjYmlBZ0lDQWdJQ3dnWjJWMFJHVnpZeUE5SUdkUFVFUXVabHh1SUNBZ0lDQWdMQ0JyWlhseklDQWdJRDBnYjNkdVMyVjVjeWhQS1Z4dUlDQWdJQ0FnTENCeVpYTjFiSFFnSUQwZ2UzMWNiaUFnSUNBZ0lDd2dhU0FnSUNBZ0lDQTlJREJjYmlBZ0lDQWdJQ3dnYTJWNU8xeHVJQ0FnSUhkb2FXeGxLR3RsZVhNdWJHVnVaM1JvSUQ0Z2FTbGpjbVZoZEdWUWNtOXdaWEowZVNoeVpYTjFiSFFzSUd0bGVTQTlJR3RsZVhOYmFTc3JYU3dnWjJWMFJHVnpZeWhQTENCclpYa3BLVHRjYmlBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dUlDQjlYRzU5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdKR1Y0Y0c5eWRDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQjBiMDlpYW1WamRDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxdlltcGxZM1FuS1Z4dUlDQXNJSFJ2VUhKcGJXbDBhWFpsSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxYQnlhVzFwZEdsMlpTY3BYRzRnSUN3Z1oyVjBVSEp2ZEc5MGVYQmxUMllnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXZHdieWNwWEc0Z0lDd2daMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUlEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV2R2Y0dRbktTNW1PMXh1WEc0dkx5QkNMakl1TWk0MElFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdVgxOXNiMjlyZFhCSFpYUjBaWEpmWHloUUtWeHVjbVZ4ZFdseVpTZ25MaTlmWkdWelkzSnBjSFJ2Y25NbktTQW1KaUFrWlhod2IzSjBLQ1JsZUhCdmNuUXVVQ0FySUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxbWIzSmpaV1F0Y0dGdEp5a3NJQ2RQWW1wbFkzUW5MQ0I3WEc0Z0lGOWZiRzl2YTNWd1IyVjBkR1Z5WDE4NklHWjFibU4wYVc5dUlGOWZiRzl2YTNWd1IyVjBkR1Z5WDE4b1VDbDdYRzRnSUNBZ2RtRnlJRThnUFNCMGIwOWlhbVZqZENoMGFHbHpLVnh1SUNBZ0lDQWdMQ0JMSUQwZ2RHOVFjbWx0YVhScGRtVW9VQ3dnZEhKMVpTbGNiaUFnSUNBZ0lDd2dSRHRjYmlBZ0lDQmtieUI3WEc0Z0lDQWdJQ0JwWmloRUlEMGdaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUtFOHNJRXNwS1hKbGRIVnliaUJFTG1kbGREdGNiaUFnSUNCOUlIZG9hV3hsS0U4Z1BTQm5aWFJRY205MGIzUjVjR1ZQWmloUEtTazdYRzRnSUgxY2JuMHBPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiblpoY2lBa1pYaHdiM0owSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUhSdlQySnFaV04wSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMVzlpYW1WamRDY3BYRzRnSUN3Z2RHOVFjbWx0YVhScGRtVWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0Y0hKcGJXbDBhWFpsSnlsY2JpQWdMQ0JuWlhSUWNtOTBiM1I1Y0dWUFppQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WjNCdkp5bGNiaUFnTENCblpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFoyOXdaQ2NwTG1ZN1hHNWNiaTh2SUVJdU1pNHlMalVnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVmWDJ4dmIydDFjRk5sZEhSbGNsOWZLRkFwWEc1eVpYRjFhWEpsS0NjdUwxOWtaWE5qY21sd2RHOXljeWNwSUNZbUlDUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1UUlDc2djbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV1p2Y21ObFpDMXdZVzBuS1N3Z0owOWlhbVZqZENjc0lIdGNiaUFnWDE5c2IyOXJkWEJUWlhSMFpYSmZYem9nWm5WdVkzUnBiMjRnWDE5c2IyOXJkWEJUWlhSMFpYSmZYeWhRS1h0Y2JpQWdJQ0IyWVhJZ1R5QTlJSFJ2VDJKcVpXTjBLSFJvYVhNcFhHNGdJQ0FnSUNBc0lFc2dQU0IwYjFCeWFXMXBkR2wyWlNoUUxDQjBjblZsS1Z4dUlDQWdJQ0FnTENCRU8xeHVJQ0FnSUdSdklIdGNiaUFnSUNBZ0lHbG1LRVFnUFNCblpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lvVHl3Z1N5a3BjbVYwZFhKdUlFUXVjMlYwTzF4dUlDQWdJSDBnZDJocGJHVW9UeUE5SUdkbGRGQnliM1J2ZEhsd1pVOW1LRThwS1R0Y2JpQWdmVnh1ZlNrN0lpd2lMeThnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNSak16a3ZjSEp2Y0c5ellXd3RiMkpxWldOMExYWmhiSFZsY3kxbGJuUnlhV1Z6WEc1MllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2dKSFpoYkhWbGN5QTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzEwYnkxaGNuSmhlU2NwS0daaGJITmxLVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNc0lDZFBZbXBsWTNRbkxDQjdYRzRnSUhaaGJIVmxjem9nWm5WdVkzUnBiMjRnZG1Gc2RXVnpLR2wwS1h0Y2JpQWdJQ0J5WlhSMWNtNGdKSFpoYkhWbGN5aHBkQ2s3WEc0Z0lIMWNibjBwT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmk4dklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOTZaVzV3WVhKemFXNW5MMlZ6TFc5aWMyVnlkbUZpYkdWY2JuWmhjaUFrWlhod2IzSjBJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z1oyeHZZbUZzSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bmJHOWlZV3duS1Z4dUlDQXNJR052Y21VZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZMjl5WlNjcFhHNGdJQ3dnYldsamNtOTBZWE5ySUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl0YVdOeWIzUmhjMnNuS1NncFhHNGdJQ3dnVDBKVFJWSldRVUpNUlNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkzYTNNbktTZ25iMkp6WlhKMllXSnNaU2NwWEc0Z0lDd2dZVVoxYm1OMGFXOXVJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWhMV1oxYm1OMGFXOXVKeWxjYmlBZ0xDQmhiazlpYW1WamRDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRnVMVzlpYW1WamRDY3BYRzRnSUN3Z1lXNUpibk4wWVc1alpTQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXBibk4wWVc1alpTY3BYRzRnSUN3Z2NtVmtaV1pwYm1WQmJHd2dQU0J5WlhGMWFYSmxLQ2N1TDE5eVpXUmxabWx1WlMxaGJHd25LVnh1SUNBc0lHaHBaR1VnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmFHbGtaU2NwWEc0Z0lDd2dabTl5VDJZZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW1iM0l0YjJZbktWeHVJQ0FzSUZKRlZGVlNUaUFnSUNBZ0lEMGdabTl5VDJZdVVrVlVWVkpPTzF4dVhHNTJZWElnWjJWMFRXVjBhRzlrSUQwZ1puVnVZM1JwYjI0b1ptNHBlMXh1SUNCeVpYUjFjbTRnWm00Z1BUMGdiblZzYkNBL0lIVnVaR1ZtYVc1bFpDQTZJR0ZHZFc1amRHbHZiaWhtYmlrN1hHNTlPMXh1WEc1MllYSWdZMnhsWVc1MWNGTjFZbk5qY21sd2RHbHZiaUE5SUdaMWJtTjBhVzl1S0hOMVluTmpjbWx3ZEdsdmJpbDdYRzRnSUhaaGNpQmpiR1ZoYm5Wd0lEMGdjM1ZpYzJOeWFYQjBhVzl1TGw5ak8xeHVJQ0JwWmloamJHVmhiblZ3S1h0Y2JpQWdJQ0J6ZFdKelkzSnBjSFJwYjI0dVgyTWdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdZMnhsWVc1MWNDZ3BPMXh1SUNCOVhHNTlPMXh1WEc1MllYSWdjM1ZpYzJOeWFYQjBhVzl1UTJ4dmMyVmtJRDBnWm5WdVkzUnBiMjRvYzNWaWMyTnlhWEIwYVc5dUtYdGNiaUFnY21WMGRYSnVJSE4xWW5OamNtbHdkR2x2Ymk1ZmJ5QTlQVDBnZFc1a1pXWnBibVZrTzF4dWZUdGNibHh1ZG1GeUlHTnNiM05sVTNWaWMyTnlhWEIwYVc5dUlEMGdablZ1WTNScGIyNG9jM1ZpYzJOeWFYQjBhVzl1S1h0Y2JpQWdhV1lvSVhOMVluTmpjbWx3ZEdsdmJrTnNiM05sWkNoemRXSnpZM0pwY0hScGIyNHBLWHRjYmlBZ0lDQnpkV0p6WTNKcGNIUnBiMjR1WDI4Z1BTQjFibVJsWm1sdVpXUTdYRzRnSUNBZ1kyeGxZVzUxY0ZOMVluTmpjbWx3ZEdsdmJpaHpkV0p6WTNKcGNIUnBiMjRwTzF4dUlDQjlYRzU5TzF4dVhHNTJZWElnVTNWaWMyTnlhWEIwYVc5dUlEMGdablZ1WTNScGIyNG9iMkp6WlhKMlpYSXNJSE4xWW5OamNtbGlaWElwZTF4dUlDQmhiazlpYW1WamRDaHZZbk5sY25abGNpazdYRzRnSUhSb2FYTXVYMk1nUFNCMWJtUmxabWx1WldRN1hHNGdJSFJvYVhNdVgyOGdQU0J2WW5ObGNuWmxjanRjYmlBZ2IySnpaWEoyWlhJZ1BTQnVaWGNnVTNWaWMyTnlhWEIwYVc5dVQySnpaWEoyWlhJb2RHaHBjeWs3WEc0Z0lIUnllU0I3WEc0Z0lDQWdkbUZ5SUdOc1pXRnVkWEFnSUNBZ0lDQTlJSE4xWW5OamNtbGlaWElvYjJKelpYSjJaWElwWEc0Z0lDQWdJQ0FzSUhOMVluTmpjbWx3ZEdsdmJpQTlJR05zWldGdWRYQTdYRzRnSUNBZ2FXWW9ZMnhsWVc1MWNDQWhQU0J1ZFd4c0tYdGNiaUFnSUNBZ0lHbG1LSFI1Y0dWdlppQmpiR1ZoYm5Wd0xuVnVjM1ZpYzJOeWFXSmxJRDA5UFNBblpuVnVZM1JwYjI0bktXTnNaV0Z1ZFhBZ1BTQm1kVzVqZEdsdmJpZ3BleUJ6ZFdKelkzSnBjSFJwYjI0dWRXNXpkV0p6WTNKcFltVW9LVHNnZlR0Y2JpQWdJQ0FnSUdWc2MyVWdZVVoxYm1OMGFXOXVLR05zWldGdWRYQXBPMXh1SUNBZ0lDQWdkR2hwY3k1Zll5QTlJR05zWldGdWRYQTdYRzRnSUNBZ2ZWeHVJQ0I5SUdOaGRHTm9LR1VwZTF4dUlDQWdJRzlpYzJWeWRtVnlMbVZ5Y205eUtHVXBPMXh1SUNBZ0lISmxkSFZ5Ymp0Y2JpQWdmU0JwWmloemRXSnpZM0pwY0hScGIyNURiRzl6WldRb2RHaHBjeWtwWTJ4bFlXNTFjRk4xWW5OamNtbHdkR2x2YmloMGFHbHpLVHRjYm4wN1hHNWNibE4xWW5OamNtbHdkR2x2Ymk1d2NtOTBiM1I1Y0dVZ1BTQnlaV1JsWm1sdVpVRnNiQ2g3ZlN3Z2UxeHVJQ0IxYm5OMVluTmpjbWxpWlRvZ1puVnVZM1JwYjI0Z2RXNXpkV0p6WTNKcFltVW9LWHNnWTJ4dmMyVlRkV0p6WTNKcGNIUnBiMjRvZEdocGN5azdJSDFjYm4wcE8xeHVYRzUyWVhJZ1UzVmljMk55YVhCMGFXOXVUMkp6WlhKMlpYSWdQU0JtZFc1amRHbHZiaWh6ZFdKelkzSnBjSFJwYjI0cGUxeHVJQ0IwYUdsekxsOXpJRDBnYzNWaWMyTnlhWEIwYVc5dU8xeHVmVHRjYmx4dVUzVmljMk55YVhCMGFXOXVUMkp6WlhKMlpYSXVjSEp2ZEc5MGVYQmxJRDBnY21Wa1pXWnBibVZCYkd3b2UzMHNJSHRjYmlBZ2JtVjRkRG9nWm5WdVkzUnBiMjRnYm1WNGRDaDJZV3gxWlNsN1hHNGdJQ0FnZG1GeUlITjFZbk5qY21sd2RHbHZiaUE5SUhSb2FYTXVYM003WEc0Z0lDQWdhV1lvSVhOMVluTmpjbWx3ZEdsdmJrTnNiM05sWkNoemRXSnpZM0pwY0hScGIyNHBLWHRjYmlBZ0lDQWdJSFpoY2lCdlluTmxjblpsY2lBOUlITjFZbk5qY21sd2RHbHZiaTVmYnp0Y2JpQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCdElEMGdaMlYwVFdWMGFHOWtLRzlpYzJWeWRtVnlMbTVsZUhRcE8xeHVJQ0FnSUNBZ0lDQnBaaWh0S1hKbGRIVnliaUJ0TG1OaGJHd29iMkp6WlhKMlpYSXNJSFpoYkhWbEtUdGNiaUFnSUNBZ0lIMGdZMkYwWTJnb1pTbDdYRzRnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdZMnh2YzJWVGRXSnpZM0pwY0hScGIyNG9jM1ZpYzJOeWFYQjBhVzl1S1R0Y2JpQWdJQ0FnSUNBZ2ZTQm1hVzVoYkd4NUlIdGNiaUFnSUNBZ0lDQWdJQ0IwYUhKdmR5QmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOUxGeHVJQ0JsY25KdmNqb2dablZ1WTNScGIyNGdaWEp5YjNJb2RtRnNkV1VwZTF4dUlDQWdJSFpoY2lCemRXSnpZM0pwY0hScGIyNGdQU0IwYUdsekxsOXpPMXh1SUNBZ0lHbG1LSE4xWW5OamNtbHdkR2x2YmtOc2IzTmxaQ2h6ZFdKelkzSnBjSFJwYjI0cEtYUm9jbTkzSUhaaGJIVmxPMXh1SUNBZ0lIWmhjaUJ2WW5ObGNuWmxjaUE5SUhOMVluTmpjbWx3ZEdsdmJpNWZienRjYmlBZ0lDQnpkV0p6WTNKcGNIUnBiMjR1WDI4Z1BTQjFibVJsWm1sdVpXUTdYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJSFpoY2lCdElEMGdaMlYwVFdWMGFHOWtLRzlpYzJWeWRtVnlMbVZ5Y205eUtUdGNiaUFnSUNBZ0lHbG1LQ0Z0S1hSb2NtOTNJSFpoYkhWbE8xeHVJQ0FnSUNBZ2RtRnNkV1VnUFNCdExtTmhiR3dvYjJKelpYSjJaWElzSUhaaGJIVmxLVHRjYmlBZ0lDQjlJR05oZEdOb0tHVXBlMXh1SUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ1kyeGxZVzUxY0ZOMVluTmpjbWx3ZEdsdmJpaHpkV0p6WTNKcGNIUnBiMjRwTzF4dUlDQWdJQ0FnZlNCbWFXNWhiR3g1SUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnWlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5SUdOc1pXRnVkWEJUZFdKelkzSnBjSFJwYjI0b2MzVmljMk55YVhCMGFXOXVLVHRjYmlBZ0lDQnlaWFIxY200Z2RtRnNkV1U3WEc0Z0lIMHNYRzRnSUdOdmJYQnNaWFJsT2lCbWRXNWpkR2x2YmlCamIyMXdiR1YwWlNoMllXeDFaU2w3WEc0Z0lDQWdkbUZ5SUhOMVluTmpjbWx3ZEdsdmJpQTlJSFJvYVhNdVgzTTdYRzRnSUNBZ2FXWW9JWE4xWW5OamNtbHdkR2x2YmtOc2IzTmxaQ2h6ZFdKelkzSnBjSFJwYjI0cEtYdGNiaUFnSUNBZ0lIWmhjaUJ2WW5ObGNuWmxjaUE5SUhOMVluTmpjbWx3ZEdsdmJpNWZienRjYmlBZ0lDQWdJSE4xWW5OamNtbHdkR2x2Ymk1ZmJ5QTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ0SUQwZ1oyVjBUV1YwYUc5a0tHOWljMlZ5ZG1WeUxtTnZiWEJzWlhSbEtUdGNiaUFnSUNBZ0lDQWdkbUZzZFdVZ1BTQnRJRDhnYlM1allXeHNLRzlpYzJWeWRtVnlMQ0IyWVd4MVpTa2dPaUIxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0I5SUdOaGRHTm9LR1VwZTF4dUlDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUdOc1pXRnVkWEJUZFdKelkzSnBjSFJwYjI0b2MzVmljMk55YVhCMGFXOXVLVHRjYmlBZ0lDQWdJQ0FnZlNCbWFXNWhiR3g1SUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCbE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlJR05zWldGdWRYQlRkV0p6WTNKcGNIUnBiMjRvYzNWaWMyTnlhWEIwYVc5dUtUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMllXeDFaVHRjYmlBZ0lDQjlYRzRnSUgxY2JuMHBPMXh1WEc1MllYSWdKRTlpYzJWeWRtRmliR1VnUFNCbWRXNWpkR2x2YmlCUFluTmxjblpoWW14bEtITjFZbk5qY21saVpYSXBlMXh1SUNCaGJrbHVjM1JoYm1ObEtIUm9hWE1zSUNSUFluTmxjblpoWW14bExDQW5UMkp6WlhKMllXSnNaU2NzSUNkZlppY3BMbDltSUQwZ1lVWjFibU4wYVc5dUtITjFZbk5qY21saVpYSXBPMXh1ZlR0Y2JseHVjbVZrWldacGJtVkJiR3dvSkU5aWMyVnlkbUZpYkdVdWNISnZkRzkwZVhCbExDQjdYRzRnSUhOMVluTmpjbWxpWlRvZ1puVnVZM1JwYjI0Z2MzVmljMk55YVdKbEtHOWljMlZ5ZG1WeUtYdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGTjFZbk5qY21sd2RHbHZiaWh2WW5ObGNuWmxjaXdnZEdocGN5NWZaaWs3WEc0Z0lIMHNYRzRnSUdadmNrVmhZMmc2SUdaMWJtTjBhVzl1SUdadmNrVmhZMmdvWm00cGUxeHVJQ0FnSUhaaGNpQjBhR0YwSUQwZ2RHaHBjenRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJQ2hqYjNKbExsQnliMjFwYzJVZ2ZId2daMnh2WW1Gc0xsQnliMjFwYzJVcEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENsN1hHNGdJQ0FnSUNCaFJuVnVZM1JwYjI0b1ptNHBPMXh1SUNBZ0lDQWdkbUZ5SUhOMVluTmpjbWx3ZEdsdmJpQTlJSFJvWVhRdWMzVmljMk55YVdKbEtIdGNiaUFnSUNBZ0lDQWdibVY0ZENBNklHWjFibU4wYVc5dUtIWmhiSFZsS1h0Y2JpQWdJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWnVLSFpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0I5SUdOaGRHTm9LR1VwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MzVmljMk55YVhCMGFXOXVMblZ1YzNWaWMyTnlhV0psS0NrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCbGNuSnZjam9nY21WcVpXTjBMRnh1SUNBZ0lDQWdJQ0JqYjIxd2JHVjBaVG9nY21WemIyeDJaVnh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibjBwTzF4dVhHNXlaV1JsWm1sdVpVRnNiQ2drVDJKelpYSjJZV0pzWlN3Z2UxeHVJQ0JtY205dE9pQm1kVzVqZEdsdmJpQm1jbTl0S0hncGUxeHVJQ0FnSUhaaGNpQkRJRDBnZEhsd1pXOW1JSFJvYVhNZ1BUMDlJQ2RtZFc1amRHbHZiaWNnUHlCMGFHbHpJRG9nSkU5aWMyVnlkbUZpYkdVN1hHNGdJQ0FnZG1GeUlHMWxkR2h2WkNBOUlHZGxkRTFsZEdodlpDaGhiazlpYW1WamRDaDRLVnRQUWxORlVsWkJRa3hGWFNrN1hHNGdJQ0FnYVdZb2JXVjBhRzlrS1h0Y2JpQWdJQ0FnSUhaaGNpQnZZbk5sY25aaFlteGxJRDBnWVc1UFltcGxZM1FvYldWMGFHOWtMbU5oYkd3b2VDa3BPMXh1SUNBZ0lDQWdjbVYwZFhKdUlHOWljMlZ5ZG1GaWJHVXVZMjl1YzNSeWRXTjBiM0lnUFQwOUlFTWdQeUJ2WW5ObGNuWmhZbXhsSURvZ2JtVjNJRU1vWm5WdVkzUnBiMjRvYjJKelpYSjJaWElwZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYjJKelpYSjJZV0pzWlM1emRXSnpZM0pwWW1Vb2IySnpaWEoyWlhJcE8xeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1F5aG1kVzVqZEdsdmJpaHZZbk5sY25abGNpbDdYRzRnSUNBZ0lDQjJZWElnWkc5dVpTQTlJR1poYkhObE8xeHVJQ0FnSUNBZ2JXbGpjbTkwWVhOcktHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ0lDQWdJR2xtS0NGa2IyNWxLWHRjYmlBZ0lDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWW9abTl5VDJZb2VDd2dabUZzYzJVc0lHWjFibU4wYVc5dUtHbDBLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiMkp6WlhKMlpYSXVibVY0ZENocGRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1LR1J2Ym1VcGNtVjBkWEp1SUZKRlZGVlNUanRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBJRDA5UFNCU1JWUlZVazRwY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1kyRjBZMmdvWlNsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmloa2IyNWxLWFJvY205M0lHVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCdlluTmxjblpsY2k1bGNuSnZjaWhsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdJQ0I5SUc5aWMyVnlkbVZ5TG1OdmJYQnNaWFJsS0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlHWjFibU4wYVc5dUtDbDdJR1J2Ym1VZ1BTQjBjblZsT3lCOU8xeHVJQ0FnSUgwcE8xeHVJQ0I5TEZ4dUlDQnZaam9nWm5WdVkzUnBiMjRnYjJZb0tYdGNiaUFnSUNCbWIzSW9kbUZ5SUdrZ1BTQXdMQ0JzSUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYUN3Z2FYUmxiWE1nUFNCQmNuSmhlU2hzS1RzZ2FTQThJR3c3S1dsMFpXMXpXMmxkSUQwZ1lYSm5kVzFsYm5Selcya3JLMTA3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUFvZEhsd1pXOW1JSFJvYVhNZ1BUMDlJQ2RtZFc1amRHbHZiaWNnUHlCMGFHbHpJRG9nSkU5aWMyVnlkbUZpYkdVcEtHWjFibU4wYVc5dUtHOWljMlZ5ZG1WeUtYdGNiaUFnSUNBZ0lIWmhjaUJrYjI1bElEMGdabUZzYzJVN1hHNGdJQ0FnSUNCdGFXTnliM1JoYzJzb1puVnVZM1JwYjI0b0tYdGNiaUFnSUNBZ0lDQWdhV1lvSVdSdmJtVXBlMXh1SUNBZ0lDQWdJQ0FnSUdadmNpaDJZWElnYVNBOUlEQTdJR2tnUENCcGRHVnRjeTVzWlc1bmRHZzdJQ3NyYVNsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2WW5ObGNuWmxjaTV1WlhoMEtHbDBaVzF6VzJsZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUtHUnZibVVwY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0FnSUgwZ2IySnpaWEoyWlhJdVkyOXRjR3hsZEdVb0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNG9LWHNnWkc5dVpTQTlJSFJ5ZFdVN0lIMDdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JuMHBPMXh1WEc1b2FXUmxLQ1JQWW5ObGNuWmhZbXhsTG5CeWIzUnZkSGx3WlN3Z1QwSlRSVkpXUVVKTVJTd2dablZ1WTNScGIyNG9LWHNnY21WMGRYSnVJSFJvYVhNN0lIMHBPMXh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1Unl3Z2UwOWljMlZ5ZG1GaWJHVTZJQ1JQWW5ObGNuWmhZbXhsZlNrN1hHNWNibkpsY1hWcGNtVW9KeTR2WDNObGRDMXpjR1ZqYVdWekp5a29KMDlpYzJWeWRtRmliR1VuS1RzaUxDSjJZWElnYldWMFlXUmhkR0VnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyMWxkR0ZrWVhSaEp5bGNiaUFnTENCaGJrOWlhbVZqZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YjJKcVpXTjBKeWxjYmlBZ0xDQjBiMDFsZEdGTFpYa2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdiV1YwWVdSaGRHRXVhMlY1WEc0Z0lDd2diM0prYVc1aGNubEVaV1pwYm1WUGQyNU5aWFJoWkdGMFlTQTlJRzFsZEdGa1lYUmhMbk5sZER0Y2JseHViV1YwWVdSaGRHRXVaWGh3S0h0a1pXWnBibVZOWlhSaFpHRjBZVG9nWm5WdVkzUnBiMjRnWkdWbWFXNWxUV1YwWVdSaGRHRW9iV1YwWVdSaGRHRkxaWGtzSUcxbGRHRmtZWFJoVm1Gc2RXVXNJSFJoY21kbGRDd2dkR0Z5WjJWMFMyVjVLWHRjYmlBZ2IzSmthVzVoY25sRVpXWnBibVZQZDI1TlpYUmhaR0YwWVNodFpYUmhaR0YwWVV0bGVTd2diV1YwWVdSaGRHRldZV3gxWlN3Z1lXNVBZbXBsWTNRb2RHRnlaMlYwS1N3Z2RHOU5aWFJoUzJWNUtIUmhjbWRsZEV0bGVTa3BPMXh1ZlgwcE95SXNJblpoY2lCdFpYUmhaR0YwWVNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmJXVjBZV1JoZEdFbktWeHVJQ0FzSUdGdVQySnFaV04wSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXZZbXBsWTNRbktWeHVJQ0FzSUhSdlRXVjBZVXRsZVNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J0WlhSaFpHRjBZUzVyWlhsY2JpQWdMQ0JuWlhSUGNrTnlaV0YwWlUxbGRHRmtZWFJoVFdGd0lEMGdiV1YwWVdSaGRHRXViV0Z3WEc0Z0lDd2djM1J2Y21VZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlHMWxkR0ZrWVhSaExuTjBiM0psTzF4dVhHNXRaWFJoWkdGMFlTNWxlSEFvZTJSbGJHVjBaVTFsZEdGa1lYUmhPaUJtZFc1amRHbHZiaUJrWld4bGRHVk5aWFJoWkdGMFlTaHRaWFJoWkdGMFlVdGxlU3dnZEdGeVoyVjBJQzhxTENCMFlYSm5aWFJMWlhrZ0tpOHBlMXh1SUNCMllYSWdkR0Z5WjJWMFMyVjVJQ0FnUFNCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUR3Z015QS9JSFZ1WkdWbWFXNWxaQ0E2SUhSdlRXVjBZVXRsZVNoaGNtZDFiV1Z1ZEhOYk1sMHBYRzRnSUNBZ0xDQnRaWFJoWkdGMFlVMWhjQ0E5SUdkbGRFOXlRM0psWVhSbFRXVjBZV1JoZEdGTllYQW9ZVzVQWW1wbFkzUW9kR0Z5WjJWMEtTd2dkR0Z5WjJWMFMyVjVMQ0JtWVd4elpTazdYRzRnSUdsbUtHMWxkR0ZrWVhSaFRXRndJRDA5UFNCMWJtUmxabWx1WldRZ2ZId2dJVzFsZEdGa1lYUmhUV0Z3V3lka1pXeGxkR1VuWFNodFpYUmhaR0YwWVV0bGVTa3BjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQnBaaWh0WlhSaFpHRjBZVTFoY0M1emFYcGxLWEpsZEhWeWJpQjBjblZsTzF4dUlDQjJZWElnZEdGeVoyVjBUV1YwWVdSaGRHRWdQU0J6ZEc5eVpTNW5aWFFvZEdGeVoyVjBLVHRjYmlBZ2RHRnlaMlYwVFdWMFlXUmhkR0ZiSjJSbGJHVjBaU2RkS0hSaGNtZGxkRXRsZVNrN1hHNGdJSEpsZEhWeWJpQWhJWFJoY21kbGRFMWxkR0ZrWVhSaExuTnBlbVVnZkh3Z2MzUnZjbVZiSjJSbGJHVjBaU2RkS0hSaGNtZGxkQ2s3WEc1OWZTazdJaXdpZG1GeUlGTmxkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWxjell1YzJWMEp5bGNiaUFnTENCbWNtOXRJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRnljbUY1TFdaeWIyMHRhWFJsY21GaWJHVW5LVnh1SUNBc0lHMWxkR0ZrWVhSaElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiV1YwWVdSaGRHRW5LVnh1SUNBc0lHRnVUMkpxWldOMElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YjJKcVpXTjBKeWxjYmlBZ0xDQm5aWFJRY205MGIzUjVjR1ZQWmlBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMW5jRzhuS1Z4dUlDQXNJRzl5WkdsdVlYSjVUM2R1VFdWMFlXUmhkR0ZMWlhseklEMGdiV1YwWVdSaGRHRXVhMlY1YzF4dUlDQXNJSFJ2VFdWMFlVdGxlU0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdiV1YwWVdSaGRHRXVhMlY1TzF4dVhHNTJZWElnYjNKa2FXNWhjbmxOWlhSaFpHRjBZVXRsZVhNZ1BTQm1kVzVqZEdsdmJpaFBMQ0JRS1h0Y2JpQWdkbUZ5SUc5TFpYbHpJQ0E5SUc5eVpHbHVZWEo1VDNkdVRXVjBZV1JoZEdGTFpYbHpLRThzSUZBcFhHNGdJQ0FnTENCd1lYSmxiblFnUFNCblpYUlFjbTkwYjNSNWNHVlBaaWhQS1R0Y2JpQWdhV1lvY0dGeVpXNTBJRDA5UFNCdWRXeHNLWEpsZEhWeWJpQnZTMlY1Y3p0Y2JpQWdkbUZ5SUhCTFpYbHpJQ0E5SUc5eVpHbHVZWEo1VFdWMFlXUmhkR0ZMWlhsektIQmhjbVZ1ZEN3Z1VDazdYRzRnSUhKbGRIVnliaUJ3UzJWNWN5NXNaVzVuZEdnZ1B5QnZTMlY1Y3k1c1pXNW5kR2dnUHlCbWNtOXRLRzVsZHlCVFpYUW9iMHRsZVhNdVkyOXVZMkYwS0hCTFpYbHpLU2twSURvZ2NFdGxlWE1nT2lCdlMyVjVjenRjYm4wN1hHNWNibTFsZEdGa1lYUmhMbVY0Y0NoN1oyVjBUV1YwWVdSaGRHRkxaWGx6T2lCbWRXNWpkR2x2YmlCblpYUk5aWFJoWkdGMFlVdGxlWE1vZEdGeVoyVjBJQzhxTENCMFlYSm5aWFJMWlhrZ0tpOHBlMXh1SUNCeVpYUjFjbTRnYjNKa2FXNWhjbmxOWlhSaFpHRjBZVXRsZVhNb1lXNVBZbXBsWTNRb2RHRnlaMlYwS1N3Z1lYSm5kVzFsYm5SekxteGxibWQwYUNBOElESWdQeUIxYm1SbFptbHVaV1FnT2lCMGIwMWxkR0ZMWlhrb1lYSm5kVzFsYm5Seld6RmRLU2s3WEc1OWZTazdJaXdpZG1GeUlHMWxkR0ZrWVhSaElDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXRaWFJoWkdGMFlTY3BYRzRnSUN3Z1lXNVBZbXBsWTNRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRnVMVzlpYW1WamRDY3BYRzRnSUN3Z1oyVjBVSEp2ZEc5MGVYQmxUMllnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxbmNHOG5LVnh1SUNBc0lHOXlaR2x1WVhKNVNHRnpUM2R1VFdWMFlXUmhkR0VnUFNCdFpYUmhaR0YwWVM1b1lYTmNiaUFnTENCdmNtUnBibUZ5ZVVkbGRFOTNiazFsZEdGa1lYUmhJRDBnYldWMFlXUmhkR0V1WjJWMFhHNGdJQ3dnZEc5TlpYUmhTMlY1SUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJRzFsZEdGa1lYUmhMbXRsZVR0Y2JseHVkbUZ5SUc5eVpHbHVZWEo1UjJWMFRXVjBZV1JoZEdFZ1BTQm1kVzVqZEdsdmJpaE5aWFJoWkdGMFlVdGxlU3dnVHl3Z1VDbDdYRzRnSUhaaGNpQm9ZWE5QZDI0Z1BTQnZjbVJwYm1GeWVVaGhjMDkzYmsxbGRHRmtZWFJoS0UxbGRHRmtZWFJoUzJWNUxDQlBMQ0JRS1R0Y2JpQWdhV1lvYUdGelQzZHVLWEpsZEhWeWJpQnZjbVJwYm1GeWVVZGxkRTkzYmsxbGRHRmtZWFJoS0UxbGRHRmtZWFJoUzJWNUxDQlBMQ0JRS1R0Y2JpQWdkbUZ5SUhCaGNtVnVkQ0E5SUdkbGRGQnliM1J2ZEhsd1pVOW1LRThwTzF4dUlDQnlaWFIxY200Z2NHRnlaVzUwSUNFOVBTQnVkV3hzSUQ4Z2IzSmthVzVoY25sSFpYUk5aWFJoWkdGMFlTaE5aWFJoWkdGMFlVdGxlU3dnY0dGeVpXNTBMQ0JRS1NBNklIVnVaR1ZtYVc1bFpEdGNibjA3WEc1Y2JtMWxkR0ZrWVhSaExtVjRjQ2g3WjJWMFRXVjBZV1JoZEdFNklHWjFibU4wYVc5dUlHZGxkRTFsZEdGa1lYUmhLRzFsZEdGa1lYUmhTMlY1TENCMFlYSm5aWFFnTHlvc0lIUmhjbWRsZEV0bGVTQXFMeWw3WEc0Z0lISmxkSFZ5YmlCdmNtUnBibUZ5ZVVkbGRFMWxkR0ZrWVhSaEtHMWxkR0ZrWVhSaFMyVjVMQ0JoYms5aWFtVmpkQ2gwWVhKblpYUXBMQ0JoY21kMWJXVnVkSE11YkdWdVozUm9JRHdnTXlBL0lIVnVaR1ZtYVc1bFpDQTZJSFJ2VFdWMFlVdGxlU2hoY21kMWJXVnVkSE5iTWwwcEtUdGNibjE5S1RzaUxDSjJZWElnYldWMFlXUmhkR0VnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dFpYUmhaR0YwWVNjcFhHNGdJQ3dnWVc1UFltcGxZM1FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXZZbXBsWTNRbktWeHVJQ0FzSUc5eVpHbHVZWEo1VDNkdVRXVjBZV1JoZEdGTFpYbHpJRDBnYldWMFlXUmhkR0V1YTJWNWMxeHVJQ0FzSUhSdlRXVjBZVXRsZVNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnYldWMFlXUmhkR0V1YTJWNU8xeHVYRzV0WlhSaFpHRjBZUzVsZUhBb2UyZGxkRTkzYmsxbGRHRmtZWFJoUzJWNWN6b2dablZ1WTNScGIyNGdaMlYwVDNkdVRXVjBZV1JoZEdGTFpYbHpLSFJoY21kbGRDQXZLaXdnZEdGeVoyVjBTMlY1SUNvdktYdGNiaUFnY21WMGRYSnVJRzl5WkdsdVlYSjVUM2R1VFdWMFlXUmhkR0ZMWlhsektHRnVUMkpxWldOMEtIUmhjbWRsZENrc0lHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BDQXlJRDhnZFc1a1pXWnBibVZrSURvZ2RHOU5aWFJoUzJWNUtHRnlaM1Z0Wlc1MGMxc3hYU2twTzF4dWZYMHBPeUlzSW5aaGNpQnRaWFJoWkdGMFlTQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiV1YwWVdSaGRHRW5LVnh1SUNBc0lHRnVUMkpxWldOMElDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWhiaTF2WW1wbFkzUW5LVnh1SUNBc0lHOXlaR2x1WVhKNVIyVjBUM2R1VFdWMFlXUmhkR0VnUFNCdFpYUmhaR0YwWVM1blpYUmNiaUFnTENCMGIwMWxkR0ZMWlhrZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnYldWMFlXUmhkR0V1YTJWNU8xeHVYRzV0WlhSaFpHRjBZUzVsZUhBb2UyZGxkRTkzYmsxbGRHRmtZWFJoT2lCbWRXNWpkR2x2YmlCblpYUlBkMjVOWlhSaFpHRjBZU2h0WlhSaFpHRjBZVXRsZVN3Z2RHRnlaMlYwSUM4cUxDQjBZWEpuWlhSTFpYa2dLaThwZTF4dUlDQnlaWFIxY200Z2IzSmthVzVoY25sSFpYUlBkMjVOWlhSaFpHRjBZU2h0WlhSaFpHRjBZVXRsZVN3Z1lXNVBZbXBsWTNRb2RHRnlaMlYwS1Z4dUlDQWdJQ3dnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0E4SURNZ1B5QjFibVJsWm1sdVpXUWdPaUIwYjAxbGRHRkxaWGtvWVhKbmRXMWxiblJ6V3pKZEtTazdYRzU5ZlNrN0lpd2lkbUZ5SUcxbGRHRmtZWFJoSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dFpYUmhaR0YwWVNjcFhHNGdJQ3dnWVc1UFltcGxZM1FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGdUxXOWlhbVZqZENjcFhHNGdJQ3dnWjJWMFVISnZkRzkwZVhCbFQyWWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFuY0c4bktWeHVJQ0FzSUc5eVpHbHVZWEo1U0dGelQzZHVUV1YwWVdSaGRHRWdQU0J0WlhSaFpHRjBZUzVvWVhOY2JpQWdMQ0IwYjAxbGRHRkxaWGtnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdiV1YwWVdSaGRHRXVhMlY1TzF4dVhHNTJZWElnYjNKa2FXNWhjbmxJWVhOTlpYUmhaR0YwWVNBOUlHWjFibU4wYVc5dUtFMWxkR0ZrWVhSaFMyVjVMQ0JQTENCUUtYdGNiaUFnZG1GeUlHaGhjMDkzYmlBOUlHOXlaR2x1WVhKNVNHRnpUM2R1VFdWMFlXUmhkR0VvVFdWMFlXUmhkR0ZMWlhrc0lFOHNJRkFwTzF4dUlDQnBaaWhvWVhOUGQyNHBjbVYwZFhKdUlIUnlkV1U3WEc0Z0lIWmhjaUJ3WVhKbGJuUWdQU0JuWlhSUWNtOTBiM1I1Y0dWUFppaFBLVHRjYmlBZ2NtVjBkWEp1SUhCaGNtVnVkQ0FoUFQwZ2JuVnNiQ0EvSUc5eVpHbHVZWEo1U0dGelRXVjBZV1JoZEdFb1RXVjBZV1JoZEdGTFpYa3NJSEJoY21WdWRDd2dVQ2tnT2lCbVlXeHpaVHRjYm4wN1hHNWNibTFsZEdGa1lYUmhMbVY0Y0NoN2FHRnpUV1YwWVdSaGRHRTZJR1oxYm1OMGFXOXVJR2hoYzAxbGRHRmtZWFJoS0cxbGRHRmtZWFJoUzJWNUxDQjBZWEpuWlhRZ0x5b3NJSFJoY21kbGRFdGxlU0FxTHlsN1hHNGdJSEpsZEhWeWJpQnZjbVJwYm1GeWVVaGhjMDFsZEdGa1lYUmhLRzFsZEdGa1lYUmhTMlY1TENCaGJrOWlhbVZqZENoMFlYSm5aWFFwTENCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUR3Z015QS9JSFZ1WkdWbWFXNWxaQ0E2SUhSdlRXVjBZVXRsZVNoaGNtZDFiV1Z1ZEhOYk1sMHBLVHRjYm4xOUtUc2lMQ0oyWVhJZ2JXVjBZV1JoZEdFZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyMWxkR0ZrWVhSaEp5bGNiaUFnTENCaGJrOWlhbVZqZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZllXNHRiMkpxWldOMEp5bGNiaUFnTENCdmNtUnBibUZ5ZVVoaGMwOTNiazFsZEdGa1lYUmhJRDBnYldWMFlXUmhkR0V1YUdGelhHNGdJQ3dnZEc5TlpYUmhTMlY1SUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJRzFsZEdGa1lYUmhMbXRsZVR0Y2JseHViV1YwWVdSaGRHRXVaWGh3S0h0b1lYTlBkMjVOWlhSaFpHRjBZVG9nWm5WdVkzUnBiMjRnYUdGelQzZHVUV1YwWVdSaGRHRW9iV1YwWVdSaGRHRkxaWGtzSUhSaGNtZGxkQ0F2S2l3Z2RHRnlaMlYwUzJWNUlDb3ZLWHRjYmlBZ2NtVjBkWEp1SUc5eVpHbHVZWEo1U0dGelQzZHVUV1YwWVdSaGRHRW9iV1YwWVdSaGRHRkxaWGtzSUdGdVQySnFaV04wS0hSaGNtZGxkQ2xjYmlBZ0lDQXNJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQQ0F6SUQ4Z2RXNWtaV1pwYm1Wa0lEb2dkRzlOWlhSaFMyVjVLR0Z5WjNWdFpXNTBjMXN5WFNrcE8xeHVmWDBwT3lJc0luWmhjaUJ0WlhSaFpHRjBZU0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmJXVjBZV1JoZEdFbktWeHVJQ0FzSUdGdVQySnFaV04wSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWhiaTF2WW1wbFkzUW5LVnh1SUNBc0lHRkdkVzVqZEdsdmJpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloTFdaMWJtTjBhVzl1SnlsY2JpQWdMQ0IwYjAxbGRHRkxaWGtnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnYldWMFlXUmhkR0V1YTJWNVhHNGdJQ3dnYjNKa2FXNWhjbmxFWldacGJtVlBkMjVOWlhSaFpHRjBZU0E5SUcxbGRHRmtZWFJoTG5ObGREdGNibHh1YldWMFlXUmhkR0V1Wlhod0tIdHRaWFJoWkdGMFlUb2dablZ1WTNScGIyNGdiV1YwWVdSaGRHRW9iV1YwWVdSaGRHRkxaWGtzSUcxbGRHRmtZWFJoVm1Gc2RXVXBlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnWkdWamIzSmhkRzl5S0hSaGNtZGxkQ3dnZEdGeVoyVjBTMlY1S1h0Y2JpQWdJQ0J2Y21ScGJtRnllVVJsWm1sdVpVOTNiazFsZEdGa1lYUmhLRnh1SUNBZ0lDQWdiV1YwWVdSaGRHRkxaWGtzSUcxbGRHRmtZWFJoVm1Gc2RXVXNYRzRnSUNBZ0lDQW9kR0Z5WjJWMFMyVjVJQ0U5UFNCMWJtUmxabWx1WldRZ1B5QmhiazlpYW1WamRDQTZJR0ZHZFc1amRHbHZiaWtvZEdGeVoyVjBLU3hjYmlBZ0lDQWdJSFJ2VFdWMFlVdGxlU2gwWVhKblpYUkxaWGtwWEc0Z0lDQWdLVHRjYmlBZ2ZUdGNibjE5S1RzaUxDSXZMeUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2UkdGMmFXUkNjblZoYm5RdlRXRndMVk5sZEM1d2NtOTBiM1I1Y0dVdWRHOUtVMDlPWEc1MllYSWdKR1Y0Y0c5eWRDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsQWdLeUFrWlhod2IzSjBMbElzSUNkVFpYUW5MQ0I3ZEc5S1UwOU9PaUJ5WlhGMWFYSmxLQ2N1TDE5amIyeHNaV04wYVc5dUxYUnZMV3B6YjI0bktTZ25VMlYwSnlsOUtUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNHZMeUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2YldGMGFHbGhjMko1Ym1WdWN5OVRkSEpwYm1jdWNISnZkRzkwZVhCbExtRjBYRzUyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z0pHRjBJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM04wY21sdVp5MWhkQ2NwS0hSeWRXVXBPMXh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VUN3Z0oxTjBjbWx1Wnljc0lIdGNiaUFnWVhRNklHWjFibU4wYVc5dUlHRjBLSEJ2Y3lsN1hHNGdJQ0FnY21WMGRYSnVJQ1JoZENoMGFHbHpMQ0J3YjNNcE8xeHVJQ0I5WEc1OUtUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNHZMeUJvZEhSd2N6b3ZMM1JqTXprdVoybDBhSFZpTG1sdkwxTjBjbWx1Wnk1d2NtOTBiM1I1Y0dVdWJXRjBZMmhCYkd3dlhHNTJZWElnSkdWNGNHOXlkQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lHUmxabWx1WldRZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlpHVm1hVzVsWkNjcFhHNGdJQ3dnZEc5TVpXNW5kR2dnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxc1pXNW5kR2duS1Z4dUlDQXNJR2x6VW1WblJYaHdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWE10Y21WblpYaHdKeWxjYmlBZ0xDQm5aWFJHYkdGbmN5QWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyWnNZV2R6SnlsY2JpQWdMQ0JTWldkRmVIQlFjbTkwYnlBOUlGSmxaMFY0Y0M1d2NtOTBiM1I1Y0dVN1hHNWNiblpoY2lBa1VtVm5SWGh3VTNSeWFXNW5TWFJsY21GMGIzSWdQU0JtZFc1amRHbHZiaWh5WldkbGVIQXNJSE4wY21sdVp5bDdYRzRnSUhSb2FYTXVYM0lnUFNCeVpXZGxlSEE3WEc0Z0lIUm9hWE11WDNNZ1BTQnpkSEpwYm1jN1hHNTlPMXh1WEc1eVpYRjFhWEpsS0NjdUwxOXBkR1Z5TFdOeVpXRjBaU2NwS0NSU1pXZEZlSEJUZEhKcGJtZEpkR1Z5WVhSdmNpd2dKMUpsWjBWNGNDQlRkSEpwYm1jbkxDQm1kVzVqZEdsdmJpQnVaWGgwS0NsN1hHNGdJSFpoY2lCdFlYUmphQ0E5SUhSb2FYTXVYM0l1WlhobFl5aDBhR2x6TGw5ektUdGNiaUFnY21WMGRYSnVJSHQyWVd4MVpUb2diV0YwWTJnc0lHUnZibVU2SUcxaGRHTm9JRDA5UFNCdWRXeHNmVHRjYm4wcE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVQ3dnSjFOMGNtbHVaeWNzSUh0Y2JpQWdiV0YwWTJoQmJHdzZJR1oxYm1OMGFXOXVJRzFoZEdOb1FXeHNLSEpsWjJWNGNDbDdYRzRnSUNBZ1pHVm1hVzVsWkNoMGFHbHpLVHRjYmlBZ0lDQnBaaWdoYVhOU1pXZEZlSEFvY21WblpYaHdLU2wwYUhKdmR5QlVlWEJsUlhKeWIzSW9jbVZuWlhod0lDc2dKeUJwY3lCdWIzUWdZU0J5WldkbGVIQWhKeWs3WEc0Z0lDQWdkbUZ5SUZNZ0lDQWdJRDBnVTNSeWFXNW5LSFJvYVhNcFhHNGdJQ0FnSUNBc0lHWnNZV2R6SUQwZ0oyWnNZV2R6SnlCcGJpQlNaV2RGZUhCUWNtOTBieUEvSUZOMGNtbHVaeWh5WldkbGVIQXVabXhoWjNNcElEb2daMlYwUm14aFozTXVZMkZzYkNoeVpXZGxlSEFwWEc0Z0lDQWdJQ0FzSUhKNElDQWdJRDBnYm1WM0lGSmxaMFY0Y0NoeVpXZGxlSEF1YzI5MWNtTmxMQ0IrWm14aFozTXVhVzVrWlhoUFppZ25aeWNwSUQ4Z1pteGhaM01nT2lBblp5Y2dLeUJtYkdGbmN5azdYRzRnSUNBZ2NuZ3ViR0Z6ZEVsdVpHVjRJRDBnZEc5TVpXNW5kR2dvY21WblpYaHdMbXhoYzNSSmJtUmxlQ2s3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUFrVW1WblJYaHdVM1J5YVc1blNYUmxjbUYwYjNJb2NuZ3NJRk1wTzF4dUlDQjlYRzU5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc0dkx5Qm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZkR016T1M5d2NtOXdiM05oYkMxemRISnBibWN0Y0dGa0xYTjBZWEowTFdWdVpGeHVkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUNSd1lXUWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXpkSEpwYm1jdGNHRmtKeWs3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1UUxDQW5VM1J5YVc1bkp5d2dlMXh1SUNCd1lXUkZibVE2SUdaMWJtTjBhVzl1SUhCaFpFVnVaQ2h0WVhoTVpXNW5kR2dnTHlvc0lHWnBiR3hUZEhKcGJtY2dQU0FuSUNjZ0tpOHBlMXh1SUNBZ0lISmxkSFZ5YmlBa2NHRmtLSFJvYVhNc0lHMWhlRXhsYm1kMGFDd2dZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQStJREVnUHlCaGNtZDFiV1Z1ZEhOYk1WMGdPaUIxYm1SbFptbHVaV1FzSUdaaGJITmxLVHRjYmlBZ2ZWeHVmU2s3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1THk4Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzUmpNemt2Y0hKdmNHOXpZV3d0YzNSeWFXNW5MWEJoWkMxemRHRnlkQzFsYm1SY2JuWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0FrY0dGa0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmMzUnlhVzVuTFhCaFpDY3BPMXh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VUN3Z0oxTjBjbWx1Wnljc0lIdGNiaUFnY0dGa1UzUmhjblE2SUdaMWJtTjBhVzl1SUhCaFpGTjBZWEowS0cxaGVFeGxibWQwYUNBdktpd2dabWxzYkZOMGNtbHVaeUE5SUNjZ0p5QXFMeWw3WEc0Z0lDQWdjbVYwZFhKdUlDUndZV1FvZEdocGN5d2diV0Y0VEdWdVozUm9MQ0JoY21kMWJXVnVkSE11YkdWdVozUm9JRDRnTVNBL0lHRnlaM1Z0Wlc1MGMxc3hYU0E2SUhWdVpHVm1hVzVsWkN3Z2RISjFaU2s3WEc0Z0lIMWNibjBwT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmk4dklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXpaV0p0WVhKclltRm5aUzlsWTIxaGMyTnlhWEIwTFhOMGNtbHVaeTFzWldaMExYSnBaMmgwTFhSeWFXMWNibkpsY1hWcGNtVW9KeTR2WDNOMGNtbHVaeTEwY21sdEp5a29KM1J5YVcxTVpXWjBKeXdnWm5WdVkzUnBiMjRvSkhSeWFXMHBlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnZEhKcGJVeGxablFvS1h0Y2JpQWdJQ0J5WlhSMWNtNGdKSFJ5YVcwb2RHaHBjeXdnTVNrN1hHNGdJSDA3WEc1OUxDQW5kSEpwYlZOMFlYSjBKeWs3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1THk4Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzTmxZbTFoY210aVlXZGxMMlZqYldGelkzSnBjSFF0YzNSeWFXNW5MV3hsWm5RdGNtbG5hSFF0ZEhKcGJWeHVjbVZ4ZFdseVpTZ25MaTlmYzNSeWFXNW5MWFJ5YVcwbktTZ25kSEpwYlZKcFoyaDBKeXdnWm5WdVkzUnBiMjRvSkhSeWFXMHBlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnZEhKcGJWSnBaMmgwS0NsN1hHNGdJQ0FnY21WMGRYSnVJQ1IwY21sdEtIUm9hWE1zSURJcE8xeHVJQ0I5TzF4dWZTd2dKM1J5YVcxRmJtUW5LVHNpTENJdkx5Qm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZiR3BvWVhKaUwzQnliM0J2YzJGc0xXZHNiMkpoYkZ4dWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTXNJQ2RUZVhOMFpXMG5MQ0I3WjJ4dlltRnNPaUJ5WlhGMWFYSmxLQ2N1TDE5bmJHOWlZV3duS1gwcE95SXNJblpoY2lBa2FYUmxjbUYwYjNKeklDQWdJRDBnY21WeGRXbHlaU2duTGk5bGN6WXVZWEp5WVhrdWFYUmxjbUYwYjNJbktWeHVJQ0FzSUhKbFpHVm1hVzVsSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5eVpXUmxabWx1WlNjcFhHNGdJQ3dnWjJ4dlltRnNJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJkc2IySmhiQ2NwWEc0Z0lDd2dhR2xrWlNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmhwWkdVbktWeHVJQ0FzSUVsMFpYSmhkRzl5Y3lBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGRHVnlZWFJ2Y25NbktWeHVJQ0FzSUhkcmN5QWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5M2EzTW5LVnh1SUNBc0lFbFVSVkpCVkU5U0lDQWdJQ0FnUFNCM2EzTW9KMmwwWlhKaGRHOXlKeWxjYmlBZ0xDQlVUMTlUVkZKSlRrZGZWRUZISUQwZ2QydHpLQ2QwYjFOMGNtbHVaMVJoWnljcFhHNGdJQ3dnUVhKeVlYbFdZV3gxWlhNZ0lDQTlJRWwwWlhKaGRHOXljeTVCY25KaGVUdGNibHh1Wm05eUtIWmhjaUJqYjJ4c1pXTjBhVzl1Y3lBOUlGc25UbTlrWlV4cGMzUW5MQ0FuUkU5TlZHOXJaVzVNYVhOMEp5d2dKMDFsWkdsaFRHbHpkQ2NzSUNkVGRIbHNaVk5vWldWMFRHbHpkQ2NzSUNkRFUxTlNkV3hsVEdsemRDZGRMQ0JwSUQwZ01Ec2dhU0E4SURVN0lHa3JLeWw3WEc0Z0lIWmhjaUJPUVUxRklDQWdJQ0FnSUQwZ1kyOXNiR1ZqZEdsdmJuTmJhVjFjYmlBZ0lDQXNJRU52Ykd4bFkzUnBiMjRnUFNCbmJHOWlZV3hiVGtGTlJWMWNiaUFnSUNBc0lIQnliM1J2SUNBZ0lDQWdQU0JEYjJ4c1pXTjBhVzl1SUNZbUlFTnZiR3hsWTNScGIyNHVjSEp2ZEc5MGVYQmxYRzRnSUNBZ0xDQnJaWGs3WEc0Z0lHbG1LSEJ5YjNSdktYdGNiaUFnSUNCcFppZ2hjSEp2ZEc5YlNWUkZVa0ZVVDFKZEtXaHBaR1VvY0hKdmRHOHNJRWxVUlZKQlZFOVNMQ0JCY25KaGVWWmhiSFZsY3lrN1hHNGdJQ0FnYVdZb0lYQnliM1J2VzFSUFgxTlVVa2xPUjE5VVFVZGRLV2hwWkdVb2NISnZkRzhzSUZSUFgxTlVVa2xPUjE5VVFVY3NJRTVCVFVVcE8xeHVJQ0FnSUVsMFpYSmhkRzl5YzF0T1FVMUZYU0E5SUVGeWNtRjVWbUZzZFdWek8xeHVJQ0FnSUdadmNpaHJaWGtnYVc0Z0pHbDBaWEpoZEc5eWN5bHBaaWdoY0hKdmRHOWJhMlY1WFNseVpXUmxabWx1WlNod2NtOTBieXdnYTJWNUxDQWthWFJsY21GMGIzSnpXMnRsZVYwc0lIUnlkV1VwTzF4dUlDQjlYRzU5SWl3aWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJQ1IwWVhOcklDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MFlYTnJKeWs3WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1UnlBcklDUmxlSEJ2Y25RdVFpd2dlMXh1SUNCelpYUkpiVzFsWkdsaGRHVTZJQ0FnSkhSaGMyc3VjMlYwTEZ4dUlDQmpiR1ZoY2tsdGJXVmthV0YwWlRvZ0pIUmhjMnN1WTJ4bFlYSmNibjBwT3lJc0lpOHZJR2xsT1MwZ2MyVjBWR2x0Wlc5MWRDQW1JSE5sZEVsdWRHVnlkbUZzSUdGa1pHbDBhVzl1WVd3Z2NHRnlZVzFsZEdWeWN5Qm1hWGhjYm5aaGNpQm5iRzlpWVd3Z0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZloyeHZZbUZzSnlsY2JpQWdMQ0FrWlhod2IzSjBJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENCcGJuWnZhMlVnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVc1MmIydGxKeWxjYmlBZ0xDQndZWEowYVdGc0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmNHRnlkR2xoYkNjcFhHNGdJQ3dnYm1GMmFXZGhkRzl5SUNBOUlHZHNiMkpoYkM1dVlYWnBaMkYwYjNKY2JpQWdMQ0JOVTBsRklDQWdJQ0FnSUQwZ0lTRnVZWFpwWjJGMGIzSWdKaVlnTDAxVFNVVWdMbHhjTGk4dWRHVnpkQ2h1WVhacFoyRjBiM0l1ZFhObGNrRm5aVzUwS1RzZ0x5OGdQQzBnWkdseWRIa2dhV1U1TFNCamFHVmphMXh1ZG1GeUlIZHlZWEFnUFNCbWRXNWpkR2x2YmloelpYUXBlMXh1SUNCeVpYUjFjbTRnVFZOSlJTQS9JR1oxYm1OMGFXOXVLR1p1TENCMGFXMWxJQzhxTENBdUxpNWhjbWR6SUNvdktYdGNiaUFnSUNCeVpYUjFjbTRnYzJWMEtHbHVkbTlyWlNoY2JpQWdJQ0FnSUhCaGNuUnBZV3dzWEc0Z0lDQWdJQ0JiWFM1emJHbGpaUzVqWVd4c0tHRnlaM1Z0Wlc1MGN5d2dNaWtzWEc0Z0lDQWdJQ0IwZVhCbGIyWWdabTRnUFQwZ0oyWjFibU4wYVc5dUp5QS9JR1p1SURvZ1JuVnVZM1JwYjI0b1ptNHBYRzRnSUNBZ0tTd2dkR2x0WlNrN1hHNGdJSDBnT2lCelpYUTdYRzU5TzF4dUpHVjRjRzl5ZENna1pYaHdiM0owTGtjZ0t5QWtaWGh3YjNKMExrSWdLeUFrWlhod2IzSjBMa1lnS2lCTlUwbEZMQ0I3WEc0Z0lITmxkRlJwYldWdmRYUTZJQ0IzY21Gd0tHZHNiMkpoYkM1elpYUlVhVzFsYjNWMEtTeGNiaUFnYzJWMFNXNTBaWEoyWVd3NklIZHlZWEFvWjJ4dlltRnNMbk5sZEVsdWRHVnlkbUZzS1Z4dWZTazdJaXdpY21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXplVzFpYjJ3bktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG1OeVpXRjBaU2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVaR1ZtYVc1bExYQnliM0JsY25SNUp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1a1pXWnBibVV0Y0hKdmNHVnlkR2xsY3ljcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1WjJWMExXOTNiaTF3Y205d1pYSjBlUzFrWlhOamNtbHdkRzl5SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVuWlhRdGNISnZkRzkwZVhCbExXOW1KeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNXJaWGx6SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVuWlhRdGIzZHVMWEJ5YjNCbGNuUjVMVzVoYldWekp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1bWNtVmxlbVVuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbk5sWVd3bktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG5CeVpYWmxiblF0WlhoMFpXNXphVzl1Y3ljcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1YVhNdFpuSnZlbVZ1SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVwY3kxelpXRnNaV1FuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbWx6TFdWNGRHVnVjMmxpYkdVbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG1GemMybG5iaWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVhWE1uS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbk5sZEMxd2NtOTBiM1I1Y0dVdGIyWW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExuUnZMWE4wY21sdVp5Y3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNW1kVzVqZEdsdmJpNWlhVzVrSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG1aMWJtTjBhVzl1TG01aGJXVW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVablZ1WTNScGIyNHVhR0Z6TFdsdWMzUmhibU5sSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5CaGNuTmxMV2x1ZENjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1d1lYSnpaUzFtYkc5aGRDY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXVkVzFpWlhJdVkyOXVjM1J5ZFdOMGIzSW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXViblZ0WW1WeUxuUnZMV1pwZUdWa0p5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtNTFiV0psY2k1MGJ5MXdjbVZqYVhOcGIyNG5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXViblZ0WW1WeUxtVndjMmxzYjI0bktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWJuVnRZbVZ5TG1sekxXWnBibWwwWlNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1dWRXMWlaWEl1YVhNdGFXNTBaV2RsY2ljcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1dWRXMWlaWEl1YVhNdGJtRnVKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbTUxYldKbGNpNXBjeTF6WVdabExXbHVkR1ZuWlhJbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWJuVnRZbVZ5TG0xaGVDMXpZV1psTFdsdWRHVm5aWEluS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1Ym5WdFltVnlMbTFwYmkxellXWmxMV2x1ZEdWblpYSW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXViblZ0WW1WeUxuQmhjbk5sTFdac2IyRjBKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbTUxYldKbGNpNXdZWEp6WlMxcGJuUW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXViV0YwYUM1aFkyOXphQ2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV0WVhSb0xtRnphVzVvSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG0xaGRHZ3VZWFJoYm1nbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWJXRjBhQzVqWW5KMEp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtMWhkR2d1WTJ4Nk16SW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXViV0YwYUM1amIzTm9KeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbTFoZEdndVpYaHdiVEVuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1YldGMGFDNW1jbTkxYm1RbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWJXRjBhQzVvZVhCdmRDY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXRZWFJvTG1sdGRXd25LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXViV0YwYUM1c2IyY3hNQ2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV0WVhSb0xteHZaekZ3SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG0xaGRHZ3ViRzluTWljcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1dFlYUm9Mbk5wWjI0bktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWJXRjBhQzV6YVc1b0p5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtMWhkR2d1ZEdGdWFDY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXRZWFJvTG5SeWRXNWpKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbk4wY21sdVp5NW1jbTl0TFdOdlpHVXRjRzlwYm5RbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWMzUnlhVzVuTG5KaGR5Y3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXpkSEpwYm1jdWRISnBiU2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV6ZEhKcGJtY3VhWFJsY21GMGIzSW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxtTnZaR1V0Y0c5cGJuUXRZWFFuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1YzNSeWFXNW5MbVZ1WkhNdGQybDBhQ2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV6ZEhKcGJtY3VhVzVqYkhWa1pYTW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxuSmxjR1ZoZENjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1emRISnBibWN1YzNSaGNuUnpMWGRwZEdnbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWMzUnlhVzVuTG1GdVkyaHZjaWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV6ZEhKcGJtY3VZbWxuSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5OMGNtbHVaeTVpYkdsdWF5Y3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXpkSEpwYm1jdVltOXNaQ2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV6ZEhKcGJtY3VabWw0WldRbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWMzUnlhVzVuTG1admJuUmpiMnh2Y2ljcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1emRISnBibWN1Wm05dWRITnBlbVVuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1YzNSeWFXNW5MbWwwWVd4cFkzTW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxteHBibXNuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1YzNSeWFXNW5Mbk50WVd4c0p5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1emRISnBhMlVuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1YzNSeWFXNW5Mbk4xWWljcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1emRISnBibWN1YzNWd0p5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtUmhkR1V1Ym05M0p5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtUmhkR1V1ZEc4dGFuTnZiaWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTVrWVhSbExuUnZMV2x6YnkxemRISnBibWNuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1WkdGMFpTNTBieTF6ZEhKcGJtY25LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVaR0YwWlM1MGJ5MXdjbWx0YVhScGRtVW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVZWEp5WVhrdWFYTXRZWEp5WVhrbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdVlYSnlZWGt1Wm5KdmJTY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNWhjbkpoZVM1dlppY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNWhjbkpoZVM1cWIybHVKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbUZ5Y21GNUxuTnNhV05sSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG1GeWNtRjVMbk52Y25RbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdVlYSnlZWGt1Wm05eUxXVmhZMmduS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1WVhKeVlYa3ViV0Z3SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG1GeWNtRjVMbVpwYkhSbGNpY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNWhjbkpoZVM1emIyMWxKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbUZ5Y21GNUxtVjJaWEo1SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG1GeWNtRjVMbkpsWkhWalpTY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNWhjbkpoZVM1eVpXUjFZMlV0Y21sbmFIUW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVZWEp5WVhrdWFXNWtaWGd0YjJZbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdVlYSnlZWGt1YkdGemRDMXBibVJsZUMxdlppY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNWhjbkpoZVM1amIzQjVMWGRwZEdocGJpY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNWhjbkpoZVM1bWFXeHNKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbUZ5Y21GNUxtWnBibVFuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1WVhKeVlYa3VabWx1WkMxcGJtUmxlQ2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTVoY25KaGVTNXpjR1ZqYVdWekp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtRnljbUY1TG1sMFpYSmhkRzl5SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5KbFoyVjRjQzVqYjI1emRISjFZM1J2Y2ljcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1eVpXZGxlSEF1ZEc4dGMzUnlhVzVuSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5KbFoyVjRjQzVtYkdGbmN5Y3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXlaV2RsZUhBdWJXRjBZMmduS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1Y21WblpYaHdMbkpsY0d4aFkyVW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVjbVZuWlhod0xuTmxZWEpqYUNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1eVpXZGxlSEF1YzNCc2FYUW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVjSEp2YldselpTY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXRZWEFuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1YzJWMEp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuZGxZV3N0YldGd0p5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuZGxZV3N0YzJWMEp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuUjVjR1ZrTG1GeWNtRjVMV0oxWm1abGNpY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNTBlWEJsWkM1a1lYUmhMWFpwWlhjbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWRIbHdaV1F1YVc1ME9DMWhjbkpoZVNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1MGVYQmxaQzUxYVc1ME9DMWhjbkpoZVNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1MGVYQmxaQzUxYVc1ME9DMWpiR0Z0Y0dWa0xXRnljbUY1SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5SNWNHVmtMbWx1ZERFMkxXRnljbUY1SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5SNWNHVmtMblZwYm5ReE5pMWhjbkpoZVNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1MGVYQmxaQzVwYm5Rek1pMWhjbkpoZVNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1MGVYQmxaQzUxYVc1ME16SXRZWEp5WVhrbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWRIbHdaV1F1Wm14dllYUXpNaTFoY25KaGVTY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNTBlWEJsWkM1bWJHOWhkRFkwTFdGeWNtRjVKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbkpsWm14bFkzUXVZWEJ3YkhrbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWNtVm1iR1ZqZEM1amIyNXpkSEoxWTNRbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWNtVm1iR1ZqZEM1a1pXWnBibVV0Y0hKdmNHVnlkSGtuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1Y21WbWJHVmpkQzVrWld4bGRHVXRjSEp2Y0dWeWRIa25LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVjbVZtYkdWamRDNWxiblZ0WlhKaGRHVW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVjbVZtYkdWamRDNW5aWFFuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1Y21WbWJHVmpkQzVuWlhRdGIzZHVMWEJ5YjNCbGNuUjVMV1JsYzJOeWFYQjBiM0luS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1Y21WbWJHVmpkQzVuWlhRdGNISnZkRzkwZVhCbExXOW1KeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbkpsWm14bFkzUXVhR0Z6SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5KbFpteGxZM1F1YVhNdFpYaDBaVzV6YVdKc1pTY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXlaV1pzWldOMExtOTNiaTFyWlhsekp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuSmxabXhsWTNRdWNISmxkbVZ1ZEMxbGVIUmxibk5wYjI1ekp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuSmxabXhsWTNRdWMyVjBKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbkpsWm14bFkzUXVjMlYwTFhCeWIzUnZkSGx3WlMxdlppY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek55NWhjbkpoZVM1cGJtTnNkV1JsY3ljcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tnk1emRISnBibWN1WVhRbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pjdWMzUnlhVzVuTG5CaFpDMXpkR0Z5ZENjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tnk1emRISnBibWN1Y0dGa0xXVnVaQ2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOeTV6ZEhKcGJtY3VkSEpwYlMxc1pXWjBKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTNMbk4wY21sdVp5NTBjbWx0TFhKcFoyaDBKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTNMbk4wY21sdVp5NXRZWFJqYUMxaGJHd25LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6Y3VjM2x0WW05c0xtRnplVzVqTFdsMFpYSmhkRzl5SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0zTG5ONWJXSnZiQzV2WW5ObGNuWmhZbXhsSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0zTG05aWFtVmpkQzVuWlhRdGIzZHVMWEJ5YjNCbGNuUjVMV1JsYzJOeWFYQjBiM0p6SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0zTG05aWFtVmpkQzUyWVd4MVpYTW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6Y3ViMkpxWldOMExtVnVkSEpwWlhNbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pjdWIySnFaV04wTG1SbFptbHVaUzFuWlhSMFpYSW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6Y3ViMkpxWldOMExtUmxabWx1WlMxelpYUjBaWEluS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjemN1YjJKcVpXTjBMbXh2YjJ0MWNDMW5aWFIwWlhJbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pjdWIySnFaV04wTG14dmIydDFjQzF6WlhSMFpYSW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6Y3ViV0Z3TG5SdkxXcHpiMjRuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjemN1YzJWMExuUnZMV3B6YjI0bktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pjdWMzbHpkR1Z0TG1kc2IySmhiQ2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOeTVsY25KdmNpNXBjeTFsY25KdmNpY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek55NXRZWFJvTG1saFpHUm9KeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTNMbTFoZEdndWFYTjFZbWduS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjemN1YldGMGFDNXBiWFZzYUNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tnk1dFlYUm9MblZ0ZFd4b0p5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNM0xuSmxabXhsWTNRdVpHVm1hVzVsTFcxbGRHRmtZWFJoSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0zTG5KbFpteGxZM1F1WkdWc1pYUmxMVzFsZEdGa1lYUmhKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTNMbkpsWm14bFkzUXVaMlYwTFcxbGRHRmtZWFJoSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0zTG5KbFpteGxZM1F1WjJWMExXMWxkR0ZrWVhSaExXdGxlWE1uS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjemN1Y21WbWJHVmpkQzVuWlhRdGIzZHVMVzFsZEdGa1lYUmhKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTNMbkpsWm14bFkzUXVaMlYwTFc5M2JpMXRaWFJoWkdGMFlTMXJaWGx6SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0zTG5KbFpteGxZM1F1YUdGekxXMWxkR0ZrWVhSaEp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNM0xuSmxabXhsWTNRdWFHRnpMVzkzYmkxdFpYUmhaR0YwWVNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tnk1eVpXWnNaV04wTG0xbGRHRmtZWFJoSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0zTG1GellYQW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6Y3ViMkp6WlhKMllXSnNaU2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwzZGxZaTUwYVcxbGNuTW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5M1pXSXVhVzF0WldScFlYUmxKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdmQyVmlMbVJ2YlM1cGRHVnlZV0pzWlNjcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZYMk52Y21VbktUc2lMQ0l2THlCemFHbHRJR1p2Y2lCMWMybHVaeUJ3Y205alpYTnpJR2x1SUdKeWIzZHpaWEpjYm5aaGNpQndjbTlqWlhOeklEMGdiVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdmVHRjYmx4dUx5OGdZMkZqYUdWa0lHWnliMjBnZDJoaGRHVjJaWElnWjJ4dlltRnNJR2x6SUhCeVpYTmxiblFnYzI4Z2RHaGhkQ0IwWlhOMElISjFibTVsY25NZ2RHaGhkQ0J6ZEhWaUlHbDBYRzR2THlCa2IyNG5kQ0JpY21WaGF5QjBhR2x1WjNNdUlDQkNkWFFnZDJVZ2JtVmxaQ0IwYnlCM2NtRndJR2wwSUdsdUlHRWdkSEo1SUdOaGRHTm9JR2x1SUdOaGMyVWdhWFFnYVhOY2JpOHZJSGR5WVhCd1pXUWdhVzRnYzNSeWFXTjBJRzF2WkdVZ1kyOWtaU0IzYUdsamFDQmtiMlZ6YmlkMElHUmxabWx1WlNCaGJua2daMnh2WW1Gc2N5NGdJRWwwSjNNZ2FXNXphV1JsSUdGY2JpOHZJR1oxYm1OMGFXOXVJR0psWTJGMWMyVWdkSEo1TDJOaGRHTm9aWE1nWkdWdmNIUnBiV2w2WlNCcGJpQmpaWEowWVdsdUlHVnVaMmx1WlhNdVhHNWNiblpoY2lCallXTm9aV1JUWlhSVWFXMWxiM1YwTzF4dWRtRnlJR05oWTJobFpFTnNaV0Z5VkdsdFpXOTFkRHRjYmx4dUtHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNCallXTm9aV1JUWlhSVWFXMWxiM1YwSUQwZ2MyVjBWR2x0Wlc5MWREdGNiaUFnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJR05oWTJobFpGTmxkRlJwYldWdmRYUWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KM05sZEZScGJXVnZkWFFnYVhNZ2JtOTBJR1JsWm1sdVpXUW5LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNCallXTm9aV1JEYkdWaGNsUnBiV1Z2ZFhRZ1BTQmpiR1ZoY2xScGJXVnZkWFE3WEc0Z0lDQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJQ0FnSUNCallXTm9aV1JEYkdWaGNsUnBiV1Z2ZFhRZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oyTnNaV0Z5VkdsdFpXOTFkQ0JwY3lCdWIzUWdaR1ZtYVc1bFpDY3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1ZlNBb0tTbGNibVoxYm1OMGFXOXVJSEoxYmxScGJXVnZkWFFvWm5WdUtTQjdYRzRnSUNBZ2FXWWdLR05oWTJobFpGTmxkRlJwYldWdmRYUWdQVDA5SUhObGRGUnBiV1Z2ZFhRcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITmxkRlJwYldWdmRYUW9ablZ1TENBd0tUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWTJGamFHVmtVMlYwVkdsdFpXOTFkQzVqWVd4c0tHNTFiR3dzSUdaMWJpd2dNQ2s3WEc0Z0lDQWdmVnh1ZlZ4dVpuVnVZM1JwYjI0Z2NuVnVRMnhsWVhKVWFXMWxiM1YwS0cxaGNtdGxjaWtnZTF4dUlDQWdJR2xtSUNoallXTm9aV1JEYkdWaGNsUnBiV1Z2ZFhRZ1BUMDlJR05zWldGeVZHbHRaVzkxZENrZ2UxeHVJQ0FnSUNBZ0lDQmpiR1ZoY2xScGJXVnZkWFFvYldGeWEyVnlLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQmpZV05vWldSRGJHVmhjbFJwYldWdmRYUXVZMkZzYkNodWRXeHNMQ0J0WVhKclpYSXBPMXh1SUNBZ0lIMWNibjFjYm5aaGNpQnhkV1YxWlNBOUlGdGRPMXh1ZG1GeUlHUnlZV2x1YVc1bklEMGdabUZzYzJVN1hHNTJZWElnWTNWeWNtVnVkRkYxWlhWbE8xeHVkbUZ5SUhGMVpYVmxTVzVrWlhnZ1BTQXRNVHRjYmx4dVpuVnVZM1JwYjI0Z1kyeGxZVzVWY0U1bGVIUlVhV05yS0NrZ2UxeHVJQ0FnSUdsbUlDZ2haSEpoYVc1cGJtY2dmSHdnSVdOMWNuSmxiblJSZFdWMVpTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVJQ0FnSUdSeVlXbHVhVzVuSUQwZ1ptRnNjMlU3WEc0Z0lDQWdhV1lnS0dOMWNuSmxiblJSZFdWMVpTNXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdjWFZsZFdVZ1BTQmpkWEp5Wlc1MFVYVmxkV1V1WTI5dVkyRjBLSEYxWlhWbEtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCeGRXVjFaVWx1WkdWNElEMGdMVEU3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2h4ZFdWMVpTNXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdaSEpoYVc1UmRXVjFaU2dwTzF4dUlDQWdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdaSEpoYVc1UmRXVjFaU2dwSUh0Y2JpQWdJQ0JwWmlBb1pISmhhVzVwYm1jcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JpQWdJQ0IyWVhJZ2RHbHRaVzkxZENBOUlISjFibFJwYldWdmRYUW9ZMnhsWVc1VmNFNWxlSFJVYVdOcktUdGNiaUFnSUNCa2NtRnBibWx1WnlBOUlIUnlkV1U3WEc1Y2JpQWdJQ0IyWVhJZ2JHVnVJRDBnY1hWbGRXVXViR1Z1WjNSb08xeHVJQ0FnSUhkb2FXeGxLR3hsYmlrZ2UxeHVJQ0FnSUNBZ0lDQmpkWEp5Wlc1MFVYVmxkV1VnUFNCeGRXVjFaVHRjYmlBZ0lDQWdJQ0FnY1hWbGRXVWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ2QyaHBiR1VnS0NzcmNYVmxkV1ZKYm1SbGVDQThJR3hsYmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTjFjbkpsYm5SUmRXVjFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOMWNuSmxiblJSZFdWMVpWdHhkV1YxWlVsdVpHVjRYUzV5ZFc0b0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnhkV1YxWlVsdVpHVjRJRDBnTFRFN1hHNGdJQ0FnSUNBZ0lHeGxiaUE5SUhGMVpYVmxMbXhsYm1kMGFEdGNiaUFnSUNCOVhHNGdJQ0FnWTNWeWNtVnVkRkYxWlhWbElEMGdiblZzYkR0Y2JpQWdJQ0JrY21GcGJtbHVaeUE5SUdaaGJITmxPMXh1SUNBZ0lISjFia05zWldGeVZHbHRaVzkxZENoMGFXMWxiM1YwS1R0Y2JuMWNibHh1Y0hKdlkyVnpjeTV1WlhoMFZHbGpheUE5SUdaMWJtTjBhVzl1SUNobWRXNHBJSHRjYmlBZ0lDQjJZWElnWVhKbmN5QTlJRzVsZHlCQmNuSmhlU2hoY21kMWJXVnVkSE11YkdWdVozUm9JQzBnTVNrN1hHNGdJQ0FnYVdZZ0tHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BpQXhLU0I3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXhPeUJwSUR3Z1lYSm5kVzFsYm5SekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhjbWR6VzJrZ0xTQXhYU0E5SUdGeVozVnRaVzUwYzF0cFhUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCeGRXVjFaUzV3ZFhOb0tHNWxkeUJKZEdWdEtHWjFiaXdnWVhKbmN5a3BPMXh1SUNBZ0lHbG1JQ2h4ZFdWMVpTNXNaVzVuZEdnZ1BUMDlJREVnSmlZZ0lXUnlZV2x1YVc1bktTQjdYRzRnSUNBZ0lDQWdJSEoxYmxScGJXVnZkWFFvWkhKaGFXNVJkV1YxWlNrN1hHNGdJQ0FnZlZ4dWZUdGNibHh1THk4Z2RqZ2diR2xyWlhNZ2NISmxaR2xqZEdsaWJHVWdiMkpxWldOMGMxeHVablZ1WTNScGIyNGdTWFJsYlNobWRXNHNJR0Z5Y21GNUtTQjdYRzRnSUNBZ2RHaHBjeTVtZFc0Z1BTQm1kVzQ3WEc0Z0lDQWdkR2hwY3k1aGNuSmhlU0E5SUdGeWNtRjVPMXh1ZlZ4dVNYUmxiUzV3Y205MGIzUjVjR1V1Y25WdUlEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJSFJvYVhNdVpuVnVMbUZ3Y0d4NUtHNTFiR3dzSUhSb2FYTXVZWEp5WVhrcE8xeHVmVHRjYm5CeWIyTmxjM011ZEdsMGJHVWdQU0FuWW5KdmQzTmxjaWM3WEc1d2NtOWpaWE56TG1KeWIzZHpaWElnUFNCMGNuVmxPMXh1Y0hKdlkyVnpjeTVsYm5ZZ1BTQjdmVHRjYm5CeWIyTmxjM011WVhKbmRpQTlJRnRkTzF4dWNISnZZMlZ6Y3k1MlpYSnphVzl1SUQwZ0p5YzdJQzh2SUdWdGNIUjVJSE4wY21sdVp5QjBieUJoZG05cFpDQnlaV2RsZUhBZ2FYTnpkV1Z6WEc1d2NtOWpaWE56TG5abGNuTnBiMjV6SUQwZ2UzMDdYRzVjYm1aMWJtTjBhVzl1SUc1dmIzQW9LU0I3ZlZ4dVhHNXdjbTlqWlhOekxtOXVJRDBnYm05dmNEdGNibkJ5YjJObGMzTXVZV1JrVEdsemRHVnVaWElnUFNCdWIyOXdPMXh1Y0hKdlkyVnpjeTV2Ym1ObElEMGdibTl2Y0R0Y2JuQnliMk5sYzNNdWIyWm1JRDBnYm05dmNEdGNibkJ5YjJObGMzTXVjbVZ0YjNabFRHbHpkR1Z1WlhJZ1BTQnViMjl3TzF4dWNISnZZMlZ6Y3k1eVpXMXZkbVZCYkd4TWFYTjBaVzVsY25NZ1BTQnViMjl3TzF4dWNISnZZMlZ6Y3k1bGJXbDBJRDBnYm05dmNEdGNibHh1Y0hKdlkyVnpjeTVpYVc1a2FXNW5JRDBnWm5WdVkzUnBiMjRnS0c1aGJXVXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0ozQnliMk5sYzNNdVltbHVaR2x1WnlCcGN5QnViM1FnYzNWd2NHOXlkR1ZrSnlrN1hHNTlPMXh1WEc1d2NtOWpaWE56TG1OM1pDQTlJR1oxYm1OMGFXOXVJQ2dwSUhzZ2NtVjBkWEp1SUNjdkp5QjlPMXh1Y0hKdlkyVnpjeTVqYUdScGNpQTlJR1oxYm1OMGFXOXVJQ2hrYVhJcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjNCeWIyTmxjM011WTJoa2FYSWdhWE1nYm05MElITjFjSEJ2Y25SbFpDY3BPMXh1ZlR0Y2JuQnliMk5sYzNNdWRXMWhjMnNnUFNCbWRXNWpkR2x2YmlncElIc2djbVYwZFhKdUlEQTdJSDA3WEc0aUxDSXZLaXBjYmlBcUlFTnZjSGx5YVdkb2RDQW9ZeWtnTWpBeE5Dd2dSbUZqWldKdmIyc3NJRWx1WXk1Y2JpQXFJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0Z0tseHVJQ29nVkdocGN5QnpiM1Z5WTJVZ1kyOWtaU0JwY3lCc2FXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FsTkVMWE4wZVd4bElHeHBZMlZ1YzJVZ1ptOTFibVFnYVc0Z2RHaGxYRzRnS2lCb2RIUndjem92TDNKaGR5NW5hWFJvZFdJdVkyOXRMMlpoWTJWaWIyOXJMM0psWjJWdVpYSmhkRzl5TDIxaGMzUmxjaTlNU1VORlRsTkZJR1pwYkdVdUlFRnVYRzRnS2lCaFpHUnBkR2x2Ym1Gc0lHZHlZVzUwSUc5bUlIQmhkR1Z1ZENCeWFXZG9kSE1nWTJGdUlHSmxJR1p2ZFc1a0lHbHVJSFJvWlNCUVFWUkZUbFJUSUdacGJHVWdhVzVjYmlBcUlIUm9aU0J6WVcxbElHUnBjbVZqZEc5eWVTNWNiaUFxTDF4dVhHNGhLR1oxYm1OMGFXOXVLR2RzYjJKaGJDa2dlMXh1SUNCY0luVnpaU0J6ZEhKcFkzUmNJanRjYmx4dUlDQjJZWElnYUdGelQzZHVJRDBnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVUdGNiaUFnZG1GeUlIVnVaR1ZtYVc1bFpEc2dMeThnVFc5eVpTQmpiMjF3Y21WemMybGliR1VnZEdoaGJpQjJiMmxrSURBdVhHNGdJSFpoY2lBa1UzbHRZbTlzSUQwZ2RIbHdaVzltSUZONWJXSnZiQ0E5UFQwZ1hDSm1kVzVqZEdsdmJsd2lJRDhnVTNsdFltOXNJRG9nZTMwN1hHNGdJSFpoY2lCcGRHVnlZWFJ2Y2xONWJXSnZiQ0E5SUNSVGVXMWliMnd1YVhSbGNtRjBiM0lnZkh3Z1hDSkFRR2wwWlhKaGRHOXlYQ0k3WEc0Z0lIWmhjaUIwYjFOMGNtbHVaMVJoWjFONWJXSnZiQ0E5SUNSVGVXMWliMnd1ZEc5VGRISnBibWRVWVdjZ2ZId2dYQ0pBUUhSdlUzUnlhVzVuVkdGblhDSTdYRzVjYmlBZ2RtRnlJR2x1VFc5a2RXeGxJRDBnZEhsd1pXOW1JRzF2WkhWc1pTQTlQVDBnWENKdlltcGxZM1JjSWp0Y2JpQWdkbUZ5SUhKMWJuUnBiV1VnUFNCbmJHOWlZV3d1Y21WblpXNWxjbUYwYjNKU2RXNTBhVzFsTzF4dUlDQnBaaUFvY25WdWRHbHRaU2tnZTF4dUlDQWdJR2xtSUNocGJrMXZaSFZzWlNrZ2UxeHVJQ0FnSUNBZ0x5OGdTV1lnY21WblpXNWxjbUYwYjNKU2RXNTBhVzFsSUdseklHUmxabWx1WldRZ1oyeHZZbUZzYkhrZ1lXNWtJSGRsSjNKbElHbHVJR0VnYlc5a2RXeGxMRnh1SUNBZ0lDQWdMeThnYldGclpTQjBhR1VnWlhod2IzSjBjeUJ2WW1wbFkzUWdhV1JsYm5ScFkyRnNJSFJ2SUhKbFoyVnVaWEpoZEc5eVVuVnVkR2x0WlM1Y2JpQWdJQ0FnSUcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnY25WdWRHbHRaVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5OGdSRzl1SjNRZ1ltOTBhR1Z5SUdWMllXeDFZWFJwYm1jZ2RHaGxJSEpsYzNRZ2IyWWdkR2hwY3lCbWFXeGxJR2xtSUhSb1pTQnlkVzUwYVcxbElIZGhjMXh1SUNBZ0lDOHZJR0ZzY21WaFpIa2daR1ZtYVc1bFpDQm5iRzlpWVd4c2VTNWNiaUFnSUNCeVpYUjFjbTQ3WEc0Z0lIMWNibHh1SUNBdkx5QkVaV1pwYm1VZ2RHaGxJSEoxYm5ScGJXVWdaMnh2WW1Gc2JIa2dLR0Z6SUdWNGNHVmpkR1ZrSUdKNUlHZGxibVZ5WVhSbFpDQmpiMlJsS1NCaGN5QmxhWFJvWlhKY2JpQWdMeThnYlc5a2RXeGxMbVY0Y0c5eWRITWdLR2xtSUhkbEozSmxJR2x1SUdFZ2JXOWtkV3hsS1NCdmNpQmhJRzVsZHl3Z1pXMXdkSGtnYjJKcVpXTjBMbHh1SUNCeWRXNTBhVzFsSUQwZ1oyeHZZbUZzTG5KbFoyVnVaWEpoZEc5eVVuVnVkR2x0WlNBOUlHbHVUVzlrZFd4bElEOGdiVzlrZFd4bExtVjRjRzl5ZEhNZ09pQjdmVHRjYmx4dUlDQm1kVzVqZEdsdmJpQjNjbUZ3S0dsdWJtVnlSbTRzSUc5MWRHVnlSbTRzSUhObGJHWXNJSFJ5ZVV4dlkzTk1hWE4wS1NCN1hHNGdJQ0FnTHk4Z1NXWWdiM1YwWlhKR2JpQndjbTkyYVdSbFpDd2dkR2hsYmlCdmRYUmxja1p1TG5CeWIzUnZkSGx3WlNCcGJuTjBZVzVqWlc5bUlFZGxibVZ5WVhSdmNpNWNiaUFnSUNCMllYSWdaMlZ1WlhKaGRHOXlJRDBnVDJKcVpXTjBMbU55WldGMFpTZ29iM1YwWlhKR2JpQjhmQ0JIWlc1bGNtRjBiM0lwTG5CeWIzUnZkSGx3WlNrN1hHNGdJQ0FnZG1GeUlHTnZiblJsZUhRZ1BTQnVaWGNnUTI5dWRHVjRkQ2gwY25sTWIyTnpUR2x6ZENCOGZDQmJYU2s3WEc1Y2JpQWdJQ0F2THlCVWFHVWdMbDlwYm5admEyVWdiV1YwYUc5a0lIVnVhV1pwWlhNZ2RHaGxJR2x0Y0d4bGJXVnVkR0YwYVc5dWN5QnZaaUIwYUdVZ0xtNWxlSFFzWEc0Z0lDQWdMeThnTG5Sb2NtOTNMQ0JoYm1RZ0xuSmxkSFZ5YmlCdFpYUm9iMlJ6TGx4dUlDQWdJR2RsYm1WeVlYUnZjaTVmYVc1MmIydGxJRDBnYldGclpVbHVkbTlyWlUxbGRHaHZaQ2hwYm01bGNrWnVMQ0J6Wld4bUxDQmpiMjUwWlhoMEtUdGNibHh1SUNBZ0lISmxkSFZ5YmlCblpXNWxjbUYwYjNJN1hHNGdJSDFjYmlBZ2NuVnVkR2x0WlM1M2NtRndJRDBnZDNKaGNEdGNibHh1SUNBdkx5QlVjbmt2WTJGMFkyZ2dhR1ZzY0dWeUlIUnZJRzFwYm1sdGFYcGxJR1JsYjNCMGFXMXBlbUYwYVc5dWN5NGdVbVYwZFhKdWN5QmhJR052YlhCc1pYUnBiMjVjYmlBZ0x5OGdjbVZqYjNKa0lHeHBhMlVnWTI5dWRHVjRkQzUwY25sRmJuUnlhV1Z6VzJsZExtTnZiWEJzWlhScGIyNHVJRlJvYVhNZ2FXNTBaWEptWVdObElHTnZkV3hrWEc0Z0lDOHZJR2hoZG1VZ1ltVmxiaUFvWVc1a0lIZGhjeUJ3Y21WMmFXOTFjMng1S1NCa1pYTnBaMjVsWkNCMGJ5QjBZV3RsSUdFZ1kyeHZjM1Z5WlNCMGJ5QmlaVnh1SUNBdkx5QnBiblp2YTJWa0lIZHBkR2h2ZFhRZ1lYSm5kVzFsYm5SekxDQmlkWFFnYVc0Z1lXeHNJSFJvWlNCallYTmxjeUIzWlNCallYSmxJR0ZpYjNWMElIZGxYRzRnSUM4dklHRnNjbVZoWkhrZ2FHRjJaU0JoYmlCbGVHbHpkR2x1WnlCdFpYUm9iMlFnZDJVZ2QyRnVkQ0IwYnlCallXeHNMQ0J6YnlCMGFHVnlaU2R6SUc1dklHNWxaV1JjYmlBZ0x5OGdkRzhnWTNKbFlYUmxJR0VnYm1WM0lHWjFibU4wYVc5dUlHOWlhbVZqZEM0Z1YyVWdZMkZ1SUdWMlpXNGdaMlYwSUdGM1lYa2dkMmwwYUNCaGMzTjFiV2x1WjF4dUlDQXZMeUIwYUdVZ2JXVjBhRzlrSUhSaGEyVnpJR1Y0WVdOMGJIa2diMjVsSUdGeVozVnRaVzUwTENCemFXNWpaU0IwYUdGMElHaGhjSEJsYm5NZ2RHOGdZbVVnZEhKMVpWeHVJQ0F2THlCcGJpQmxkbVZ5ZVNCallYTmxMQ0J6YnlCM1pTQmtiMjRuZENCb1lYWmxJSFJ2SUhSdmRXTm9JSFJvWlNCaGNtZDFiV1Z1ZEhNZ2IySnFaV04wTGlCVWFHVmNiaUFnTHk4Z2IyNXNlU0JoWkdScGRHbHZibUZzSUdGc2JHOWpZWFJwYjI0Z2NtVnhkV2x5WldRZ2FYTWdkR2hsSUdOdmJYQnNaWFJwYjI0Z2NtVmpiM0prTENCM2FHbGphRnh1SUNBdkx5Qm9ZWE1nWVNCemRHRmliR1VnYzJoaGNHVWdZVzVrSUhOdklHaHZjR1ZtZFd4c2VTQnphRzkxYkdRZ1ltVWdZMmhsWVhBZ2RHOGdZV3hzYjJOaGRHVXVYRzRnSUdaMWJtTjBhVzl1SUhSeWVVTmhkR05vS0dadUxDQnZZbW9zSUdGeVp5a2dlMXh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdleUIwZVhCbE9pQmNJbTV2Y20xaGJGd2lMQ0JoY21jNklHWnVMbU5oYkd3b2IySnFMQ0JoY21jcElIMDdYRzRnSUNBZ2ZTQmpZWFJqYUNBb1pYSnlLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdleUIwZVhCbE9pQmNJblJvY205M1hDSXNJR0Z5WnpvZ1pYSnlJSDA3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnZG1GeUlFZGxibE4wWVhSbFUzVnpjR1Z1WkdWa1UzUmhjblFnUFNCY0luTjFjM0JsYm1SbFpGTjBZWEowWENJN1hHNGdJSFpoY2lCSFpXNVRkR0YwWlZOMWMzQmxibVJsWkZscFpXeGtJRDBnWENKemRYTndaVzVrWldSWmFXVnNaRndpTzF4dUlDQjJZWElnUjJWdVUzUmhkR1ZGZUdWamRYUnBibWNnUFNCY0ltVjRaV04xZEdsdVoxd2lPMXh1SUNCMllYSWdSMlZ1VTNSaGRHVkRiMjF3YkdWMFpXUWdQU0JjSW1OdmJYQnNaWFJsWkZ3aU8xeHVYRzRnSUM4dklGSmxkSFZ5Ym1sdVp5QjBhR2x6SUc5aWFtVmpkQ0JtY205dElIUm9aU0JwYm01bGNrWnVJR2hoY3lCMGFHVWdjMkZ0WlNCbFptWmxZM1FnWVhOY2JpQWdMeThnWW5KbFlXdHBibWNnYjNWMElHOW1JSFJvWlNCa2FYTndZWFJqYUNCemQybDBZMmdnYzNSaGRHVnRaVzUwTGx4dUlDQjJZWElnUTI5dWRHbHVkV1ZUWlc1MGFXNWxiQ0E5SUh0OU8xeHVYRzRnSUM4dklFUjFiVzE1SUdOdmJuTjBjblZqZEc5eUlHWjFibU4wYVc5dWN5QjBhR0YwSUhkbElIVnpaU0JoY3lCMGFHVWdMbU52Ym5OMGNuVmpkRzl5SUdGdVpGeHVJQ0F2THlBdVkyOXVjM1J5ZFdOMGIzSXVjSEp2ZEc5MGVYQmxJSEJ5YjNCbGNuUnBaWE1nWm05eUlHWjFibU4wYVc5dWN5QjBhR0YwSUhKbGRIVnliaUJIWlc1bGNtRjBiM0pjYmlBZ0x5OGdiMkpxWldOMGN5NGdSbTl5SUdaMWJHd2djM0JsWXlCamIyMXdiR2xoYm1ObExDQjViM1VnYldGNUlIZHBjMmdnZEc4Z1kyOXVabWxuZFhKbElIbHZkWEpjYmlBZ0x5OGdiV2x1YVdacFpYSWdibTkwSUhSdklHMWhibWRzWlNCMGFHVWdibUZ0WlhNZ2IyWWdkR2hsYzJVZ2RIZHZJR1oxYm1OMGFXOXVjeTVjYmlBZ1puVnVZM1JwYjI0Z1IyVnVaWEpoZEc5eUtDa2dlMzFjYmlBZ1puVnVZM1JwYjI0Z1IyVnVaWEpoZEc5eVJuVnVZM1JwYjI0b0tTQjdmVnh1SUNCbWRXNWpkR2x2YmlCSFpXNWxjbUYwYjNKR2RXNWpkR2x2YmxCeWIzUnZkSGx3WlNncElIdDlYRzVjYmlBZ2RtRnlJRWR3SUQwZ1IyVnVaWEpoZEc5eVJuVnVZM1JwYjI1UWNtOTBiM1I1Y0dVdWNISnZkRzkwZVhCbElEMGdSMlZ1WlhKaGRHOXlMbkJ5YjNSdmRIbHdaVHRjYmlBZ1IyVnVaWEpoZEc5eVJuVnVZM1JwYjI0dWNISnZkRzkwZVhCbElEMGdSM0F1WTI5dWMzUnlkV04wYjNJZ1BTQkhaVzVsY21GMGIzSkdkVzVqZEdsdmJsQnliM1J2ZEhsd1pUdGNiaUFnUjJWdVpYSmhkRzl5Um5WdVkzUnBiMjVRY205MGIzUjVjR1V1WTI5dWMzUnlkV04wYjNJZ1BTQkhaVzVsY21GMGIzSkdkVzVqZEdsdmJqdGNiaUFnUjJWdVpYSmhkRzl5Um5WdVkzUnBiMjVRY205MGIzUjVjR1ZiZEc5VGRISnBibWRVWVdkVGVXMWliMnhkSUQwZ1IyVnVaWEpoZEc5eVJuVnVZM1JwYjI0dVpHbHpjR3hoZVU1aGJXVWdQU0JjSWtkbGJtVnlZWFJ2Y2taMWJtTjBhVzl1WENJN1hHNWNiaUFnTHk4Z1NHVnNjR1Z5SUdadmNpQmtaV1pwYm1sdVp5QjBhR1VnTG01bGVIUXNJQzUwYUhKdmR5d2dZVzVrSUM1eVpYUjFjbTRnYldWMGFHOWtjeUJ2WmlCMGFHVmNiaUFnTHk4Z1NYUmxjbUYwYjNJZ2FXNTBaWEptWVdObElHbHVJSFJsY20xeklHOW1JR0VnYzJsdVoyeGxJQzVmYVc1MmIydGxJRzFsZEdodlpDNWNiaUFnWm5WdVkzUnBiMjRnWkdWbWFXNWxTWFJsY21GMGIzSk5aWFJvYjJSektIQnliM1J2ZEhsd1pTa2dlMXh1SUNBZ0lGdGNJbTVsZUhSY0lpd2dYQ0owYUhKdmQxd2lMQ0JjSW5KbGRIVnlibHdpWFM1bWIzSkZZV05vS0daMWJtTjBhVzl1S0cxbGRHaHZaQ2tnZTF4dUlDQWdJQ0FnY0hKdmRHOTBlWEJsVzIxbGRHaHZaRjBnUFNCbWRXNWpkR2x2YmloaGNtY3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgybHVkbTlyWlNodFpYUm9iMlFzSUdGeVp5azdYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnY25WdWRHbHRaUzVwYzBkbGJtVnlZWFJ2Y2taMWJtTjBhVzl1SUQwZ1puVnVZM1JwYjI0b1oyVnVSblZ1S1NCN1hHNGdJQ0FnZG1GeUlHTjBiM0lnUFNCMGVYQmxiMllnWjJWdVJuVnVJRDA5UFNCY0ltWjFibU4wYVc5dVhDSWdKaVlnWjJWdVJuVnVMbU52Ym5OMGNuVmpkRzl5TzF4dUlDQWdJSEpsZEhWeWJpQmpkRzl5WEc0Z0lDQWdJQ0EvSUdOMGIzSWdQVDA5SUVkbGJtVnlZWFJ2Y2taMWJtTjBhVzl1SUh4OFhHNGdJQ0FnSUNBZ0lDOHZJRVp2Y2lCMGFHVWdibUYwYVhabElFZGxibVZ5WVhSdmNrWjFibU4wYVc5dUlHTnZibk4wY25WamRHOXlMQ0IwYUdVZ1ltVnpkQ0IzWlNCallXNWNiaUFnSUNBZ0lDQWdMeThnWkc4Z2FYTWdkRzhnWTJobFkyc2dhWFJ6SUM1dVlXMWxJSEJ5YjNCbGNuUjVMbHh1SUNBZ0lDQWdJQ0FvWTNSdmNpNWthWE53YkdGNVRtRnRaU0I4ZkNCamRHOXlMbTVoYldVcElEMDlQU0JjSWtkbGJtVnlZWFJ2Y2taMWJtTjBhVzl1WENKY2JpQWdJQ0FnSURvZ1ptRnNjMlU3WEc0Z0lIMDdYRzVjYmlBZ2NuVnVkR2x0WlM1dFlYSnJJRDBnWm5WdVkzUnBiMjRvWjJWdVJuVnVLU0I3WEc0Z0lDQWdhV1lnS0U5aWFtVmpkQzV6WlhSUWNtOTBiM1I1Y0dWUFppa2dlMXh1SUNBZ0lDQWdUMkpxWldOMExuTmxkRkJ5YjNSdmRIbHdaVTltS0dkbGJrWjFiaXdnUjJWdVpYSmhkRzl5Um5WdVkzUnBiMjVRY205MGIzUjVjR1VwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQm5aVzVHZFc0dVgxOXdjbTkwYjE5ZklEMGdSMlZ1WlhKaGRHOXlSblZ1WTNScGIyNVFjbTkwYjNSNWNHVTdYRzRnSUNBZ0lDQnBaaUFvSVNoMGIxTjBjbWx1WjFSaFoxTjViV0p2YkNCcGJpQm5aVzVHZFc0cEtTQjdYRzRnSUNBZ0lDQWdJR2RsYmtaMWJsdDBiMU4wY21sdVoxUmhaMU41YldKdmJGMGdQU0JjSWtkbGJtVnlZWFJ2Y2taMWJtTjBhVzl1WENJN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJR2RsYmtaMWJpNXdjbTkwYjNSNWNHVWdQU0JQWW1wbFkzUXVZM0psWVhSbEtFZHdLVHRjYmlBZ0lDQnlaWFIxY200Z1oyVnVSblZ1TzF4dUlDQjlPMXh1WEc0Z0lDOHZJRmRwZEdocGJpQjBhR1VnWW05a2VTQnZaaUJoYm5rZ1lYTjVibU1nWm5WdVkzUnBiMjRzSUdCaGQyRnBkQ0I0WUNCcGN5QjBjbUZ1YzJadmNtMWxaQ0IwYjF4dUlDQXZMeUJnZVdsbGJHUWdjbVZuWlc1bGNtRjBiM0pTZFc1MGFXMWxMbUYzY21Gd0tIZ3BZQ3dnYzI4Z2RHaGhkQ0IwYUdVZ2NuVnVkR2x0WlNCallXNGdkR1Z6ZEZ4dUlDQXZMeUJnZG1Gc2RXVWdhVzV6ZEdGdVkyVnZaaUJCZDJGcGRFRnlaM1Z0Wlc1MFlDQjBieUJrWlhSbGNtMXBibVVnYVdZZ2RHaGxJSGxwWld4a1pXUWdkbUZzZFdVZ2FYTmNiaUFnTHk4Z2JXVmhiblFnZEc4Z1ltVWdZWGRoYVhSbFpDNGdVMjl0WlNCdFlYa2dZMjl1YzJsa1pYSWdkR2hsSUc1aGJXVWdiMllnZEdocGN5QnRaWFJvYjJRZ2RHOXZYRzRnSUM4dklHTjFkR1Z6ZVN3Z1luVjBJSFJvWlhrZ1lYSmxJR04xY20xMVpHZGxiMjV6TGx4dUlDQnlkVzUwYVcxbExtRjNjbUZ3SUQwZ1puVnVZM1JwYjI0b1lYSm5LU0I3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJCZDJGcGRFRnlaM1Z0Wlc1MEtHRnlaeWs3WEc0Z0lIMDdYRzVjYmlBZ1puVnVZM1JwYjI0Z1FYZGhhWFJCY21kMWJXVnVkQ2hoY21jcElIdGNiaUFnSUNCMGFHbHpMbUZ5WnlBOUlHRnlaenRjYmlBZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUVGemVXNWpTWFJsY21GMGIzSW9aMlZ1WlhKaGRHOXlLU0I3WEc0Z0lDQWdablZ1WTNScGIyNGdhVzUyYjJ0bEtHMWxkR2h2WkN3Z1lYSm5MQ0J5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjYmlBZ0lDQWdJSFpoY2lCeVpXTnZjbVFnUFNCMGNubERZWFJqYUNoblpXNWxjbUYwYjNKYmJXVjBhRzlrWFN3Z1oyVnVaWEpoZEc5eUxDQmhjbWNwTzF4dUlDQWdJQ0FnYVdZZ0tISmxZMjl5WkM1MGVYQmxJRDA5UFNCY0luUm9jbTkzWENJcElIdGNiaUFnSUNBZ0lDQWdjbVZxWldOMEtISmxZMjl5WkM1aGNtY3BPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhKbGMzVnNkQ0E5SUhKbFkyOXlaQzVoY21jN1hHNGdJQ0FnSUNBZ0lIWmhjaUIyWVd4MVpTQTlJSEpsYzNWc2RDNTJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFpoYkhWbElHbHVjM1JoYm1ObGIyWWdRWGRoYVhSQmNtZDFiV1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQlFjbTl0YVhObExuSmxjMjlzZG1Vb2RtRnNkV1V1WVhKbktTNTBhR1Z1S0daMWJtTjBhVzl1S0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBiblp2YTJVb1hDSnVaWGgwWENJc0lIWmhiSFZsTENCeVpYTnZiSFpsTENCeVpXcGxZM1FwTzF4dUlDQWdJQ0FnSUNBZ0lIMHNJR1oxYm1OMGFXOXVLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1MmIydGxLRndpZEdoeWIzZGNJaXdnWlhKeUxDQnlaWE52YkhabExDQnlaV3BsWTNRcE8xeHVJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGQnliMjFwYzJVdWNtVnpiMngyWlNoMllXeDFaU2t1ZEdobGJpaG1kVzVqZEdsdmJpaDFibmR5WVhCd1pXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QlhhR1Z1SUdFZ2VXbGxiR1JsWkNCUWNtOXRhWE5sSUdseklISmxjMjlzZG1Wa0xDQnBkSE1nWm1sdVlXd2dkbUZzZFdVZ1ltVmpiMjFsYzF4dUlDQWdJQ0FnSUNBZ0lDOHZJSFJvWlNBdWRtRnNkV1VnYjJZZ2RHaGxJRkJ5YjIxcGMyVThlM1poYkhWbExHUnZibVY5UGlCeVpYTjFiSFFnWm05eUlIUm9aVnh1SUNBZ0lDQWdJQ0FnSUM4dklHTjFjbkpsYm5RZ2FYUmxjbUYwYVc5dUxpQkpaaUIwYUdVZ1VISnZiV2x6WlNCcGN5QnlaV3BsWTNSbFpDd2dhRzkzWlhabGNpd2dkR2hsWEc0Z0lDQWdJQ0FnSUNBZ0x5OGdjbVZ6ZFd4MElHWnZjaUIwYUdseklHbDBaWEpoZEdsdmJpQjNhV3hzSUdKbElISmxhbVZqZEdWa0lIZHBkR2dnZEdobElITmhiV1ZjYmlBZ0lDQWdJQ0FnSUNBdkx5QnlaV0Z6YjI0dUlFNXZkR1VnZEdoaGRDQnlaV3BsWTNScGIyNXpJRzltSUhscFpXeGtaV1FnVUhKdmJXbHpaWE1nWVhKbElHNXZkRnh1SUNBZ0lDQWdJQ0FnSUM4dklIUm9jbTkzYmlCaVlXTnJJR2x1ZEc4Z2RHaGxJR2RsYm1WeVlYUnZjaUJtZFc1amRHbHZiaXdnWVhNZ2FYTWdkR2hsSUdOaGMyVmNiaUFnSUNBZ0lDQWdJQ0F2THlCM2FHVnVJR0Z1SUdGM1lXbDBaV1FnVUhKdmJXbHpaU0JwY3lCeVpXcGxZM1JsWkM0Z1ZHaHBjeUJrYVdabVpYSmxibU5sSUdsdVhHNGdJQ0FnSUNBZ0lDQWdMeThnWW1Wb1lYWnBiM0lnWW1WMGQyVmxiaUI1YVdWc1pDQmhibVFnWVhkaGFYUWdhWE1nYVcxd2IzSjBZVzUwTENCaVpXTmhkWE5sSUdsMFhHNGdJQ0FnSUNBZ0lDQWdMeThnWVd4c2IzZHpJSFJvWlNCamIyNXpkVzFsY2lCMGJ5QmtaV05wWkdVZ2QyaGhkQ0IwYnlCa2J5QjNhWFJvSUhSb1pTQjVhV1ZzWkdWa1hHNGdJQ0FnSUNBZ0lDQWdMeThnY21WcVpXTjBhVzl1SUNoemQyRnNiRzkzSUdsMElHRnVaQ0JqYjI1MGFXNTFaU3dnYldGdWRXRnNiSGtnTG5Sb2NtOTNJR2wwSUdKaFkydGNiaUFnSUNBZ0lDQWdJQ0F2THlCcGJuUnZJSFJvWlNCblpXNWxjbUYwYjNJc0lHRmlZVzVrYjI0Z2FYUmxjbUYwYVc5dUxDQjNhR0YwWlhabGNpa3VJRmRwZEdoY2JpQWdJQ0FnSUNBZ0lDQXZMeUJoZDJGcGRDd2dZbmtnWTI5dWRISmhjM1FzSUhSb1pYSmxJR2x6SUc1dklHOXdjRzl5ZEhWdWFYUjVJSFJ2SUdWNFlXMXBibVVnZEdobFhHNGdJQ0FnSUNBZ0lDQWdMeThnY21WcVpXTjBhVzl1SUhKbFlYTnZiaUJ2ZFhSemFXUmxJSFJvWlNCblpXNWxjbUYwYjNJZ1puVnVZM1JwYjI0c0lITnZJSFJvWlZ4dUlDQWdJQ0FnSUNBZ0lDOHZJRzl1YkhrZ2IzQjBhVzl1SUdseklIUnZJSFJvY205M0lHbDBJR1p5YjIwZ2RHaGxJR0YzWVdsMElHVjRjSEpsYzNOcGIyNHNJR0Z1WkZ4dUlDQWdJQ0FnSUNBZ0lDOHZJR3hsZENCMGFHVWdaMlZ1WlhKaGRHOXlJR1oxYm1OMGFXOXVJR2hoYm1Sc1pTQjBhR1VnWlhoalpYQjBhVzl1TGx4dUlDQWdJQ0FnSUNBZ0lISmxjM1ZzZEM1MllXeDFaU0E5SUhWdWQzSmhjSEJsWkR0Y2JpQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtISmxjM1ZzZENrN1hHNGdJQ0FnSUNBZ0lIMHNJSEpsYW1WamRDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQndjbTlqWlhOeklEMDlQU0JjSW05aWFtVmpkRndpSUNZbUlIQnliMk5sYzNNdVpHOXRZV2x1S1NCN1hHNGdJQ0FnSUNCcGJuWnZhMlVnUFNCd2NtOWpaWE56TG1SdmJXRnBiaTVpYVc1a0tHbHVkbTlyWlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlIQnlaWFpwYjNWelVISnZiV2x6WlR0Y2JseHVJQ0FnSUdaMWJtTjBhVzl1SUdWdWNYVmxkV1VvYldWMGFHOWtMQ0JoY21jcElIdGNiaUFnSUNBZ0lHWjFibU4wYVc5dUlHTmhiR3hKYm5admEyVlhhWFJvVFdWMGFHOWtRVzVrUVhKbktDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU3dnY21WcVpXTjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXNTJiMnRsS0cxbGRHaHZaQ3dnWVhKbkxDQnlaWE52YkhabExDQnlaV3BsWTNRcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnY21WMGRYSnVJSEJ5WlhacGIzVnpVSEp2YldselpTQTlYRzRnSUNBZ0lDQWdJQzh2SUVsbUlHVnVjWFZsZFdVZ2FHRnpJR0psWlc0Z1kyRnNiR1ZrSUdKbFptOXlaU3dnZEdobGJpQjNaU0IzWVc1MElIUnZJSGRoYVhRZ2RXNTBhV3hjYmlBZ0lDQWdJQ0FnTHk4Z1lXeHNJSEJ5WlhacGIzVnpJRkJ5YjIxcGMyVnpJR2hoZG1VZ1ltVmxiaUJ5WlhOdmJIWmxaQ0JpWldadmNtVWdZMkZzYkdsdVp5QnBiblp2YTJVc1hHNGdJQ0FnSUNBZ0lDOHZJSE52SUhSb1lYUWdjbVZ6ZFd4MGN5QmhjbVVnWVd4M1lYbHpJR1JsYkdsMlpYSmxaQ0JwYmlCMGFHVWdZMjl5Y21WamRDQnZjbVJsY2k0Z1NXWmNiaUFnSUNBZ0lDQWdMeThnWlc1eGRXVjFaU0JvWVhNZ2JtOTBJR0psWlc0Z1kyRnNiR1ZrSUdKbFptOXlaU3dnZEdobGJpQnBkQ0JwY3lCcGJYQnZjblJoYm5RZ2RHOWNiaUFnSUNBZ0lDQWdMeThnWTJGc2JDQnBiblp2YTJVZ2FXMXRaV1JwWVhSbGJIa3NJSGRwZEdodmRYUWdkMkZwZEdsdVp5QnZiaUJoSUdOaGJHeGlZV05ySUhSdklHWnBjbVVzWEc0Z0lDQWdJQ0FnSUM4dklITnZJSFJvWVhRZ2RHaGxJR0Z6ZVc1aklHZGxibVZ5WVhSdmNpQm1kVzVqZEdsdmJpQm9ZWE1nZEdobElHOXdjRzl5ZEhWdWFYUjVJSFJ2SUdSdlhHNGdJQ0FnSUNBZ0lDOHZJR0Z1ZVNCdVpXTmxjM05oY25rZ2MyVjBkWEFnYVc0Z1lTQndjbVZrYVdOMFlXSnNaU0IzWVhrdUlGUm9hWE1nY0hKbFpHbGpkR0ZpYVd4cGRIbGNiaUFnSUNBZ0lDQWdMeThnYVhNZ2QyaDVJSFJvWlNCUWNtOXRhWE5sSUdOdmJuTjBjblZqZEc5eUlITjVibU5vY205dWIzVnpiSGtnYVc1MmIydGxjeUJwZEhOY2JpQWdJQ0FnSUNBZ0x5OGdaWGhsWTNWMGIzSWdZMkZzYkdKaFkyc3NJR0Z1WkNCM2FIa2dZWE41Ym1NZ1puVnVZM1JwYjI1eklITjVibU5vY205dWIzVnpiSGxjYmlBZ0lDQWdJQ0FnTHk4Z1pYaGxZM1YwWlNCamIyUmxJR0psWm05eVpTQjBhR1VnWm1seWMzUWdZWGRoYVhRdUlGTnBibU5sSUhkbElHbHRjR3hsYldWdWRDQnphVzF3YkdWY2JpQWdJQ0FnSUNBZ0x5OGdZWE41Ym1NZ1puVnVZM1JwYjI1eklHbHVJSFJsY20xeklHOW1JR0Z6ZVc1aklHZGxibVZ5WVhSdmNuTXNJR2wwSUdseklHVnpjR1ZqYVdGc2JIbGNiaUFnSUNBZ0lDQWdMeThnYVcxd2IzSjBZVzUwSUhSdklHZGxkQ0IwYUdseklISnBaMmgwTENCbGRtVnVJSFJvYjNWbmFDQnBkQ0J5WlhGMWFYSmxjeUJqWVhKbExseHVJQ0FnSUNBZ0lDQndjbVYyYVc5MWMxQnliMjFwYzJVZ1B5QndjbVYyYVc5MWMxQnliMjFwYzJVdWRHaGxiaWhjYmlBZ0lDQWdJQ0FnSUNCallXeHNTVzUyYjJ0bFYybDBhRTFsZEdodlpFRnVaRUZ5Wnl4Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJCZG05cFpDQndjbTl3WVdkaGRHbHVaeUJtWVdsc2RYSmxjeUIwYnlCUWNtOXRhWE5sY3lCeVpYUjFjbTVsWkNCaWVTQnNZWFJsY2x4dUlDQWdJQ0FnSUNBZ0lDOHZJR2x1ZG05allYUnBiMjV6SUc5bUlIUm9aU0JwZEdWeVlYUnZjaTVjYmlBZ0lDQWdJQ0FnSUNCallXeHNTVzUyYjJ0bFYybDBhRTFsZEdodlpFRnVaRUZ5WjF4dUlDQWdJQ0FnSUNBcElEb2dZMkZzYkVsdWRtOXJaVmRwZEdoTlpYUm9iMlJCYm1SQmNtY29LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJFWldacGJtVWdkR2hsSUhWdWFXWnBaV1FnYUdWc2NHVnlJRzFsZEdodlpDQjBhR0YwSUdseklIVnpaV1FnZEc4Z2FXMXdiR1Z0Wlc1MElDNXVaWGgwTEZ4dUlDQWdJQzh2SUM1MGFISnZkeXdnWVc1a0lDNXlaWFIxY200Z0tITmxaU0JrWldacGJtVkpkR1Z5WVhSdmNrMWxkR2h2WkhNcExseHVJQ0FnSUhSb2FYTXVYMmx1ZG05clpTQTlJR1Z1Y1hWbGRXVTdYRzRnSUgxY2JseHVJQ0JrWldacGJtVkpkR1Z5WVhSdmNrMWxkR2h2WkhNb1FYTjVibU5KZEdWeVlYUnZjaTV3Y205MGIzUjVjR1VwTzF4dVhHNGdJQzh2SUU1dmRHVWdkR2hoZENCemFXMXdiR1VnWVhONWJtTWdablZ1WTNScGIyNXpJR0Z5WlNCcGJYQnNaVzFsYm5SbFpDQnZiaUIwYjNBZ2IyWmNiaUFnTHk4Z1FYTjVibU5KZEdWeVlYUnZjaUJ2WW1wbFkzUnpPeUIwYUdWNUlHcDFjM1FnY21WMGRYSnVJR0VnVUhKdmJXbHpaU0JtYjNJZ2RHaGxJSFpoYkhWbElHOW1YRzRnSUM4dklIUm9aU0JtYVc1aGJDQnlaWE4xYkhRZ2NISnZaSFZqWldRZ1lua2dkR2hsSUdsMFpYSmhkRzl5TGx4dUlDQnlkVzUwYVcxbExtRnplVzVqSUQwZ1puVnVZM1JwYjI0b2FXNXVaWEpHYml3Z2IzVjBaWEpHYml3Z2MyVnNaaXdnZEhKNVRHOWpjMHhwYzNRcElIdGNiaUFnSUNCMllYSWdhWFJsY2lBOUlHNWxkeUJCYzNsdVkwbDBaWEpoZEc5eUtGeHVJQ0FnSUNBZ2QzSmhjQ2hwYm01bGNrWnVMQ0J2ZFhSbGNrWnVMQ0J6Wld4bUxDQjBjbmxNYjJOelRHbHpkQ2xjYmlBZ0lDQXBPMXh1WEc0Z0lDQWdjbVYwZFhKdUlISjFiblJwYldVdWFYTkhaVzVsY21GMGIzSkdkVzVqZEdsdmJpaHZkWFJsY2tadUtWeHVJQ0FnSUNBZ1B5QnBkR1Z5SUM4dklFbG1JRzkxZEdWeVJtNGdhWE1nWVNCblpXNWxjbUYwYjNJc0lISmxkSFZ5YmlCMGFHVWdablZzYkNCcGRHVnlZWFJ2Y2k1Y2JpQWdJQ0FnSURvZ2FYUmxjaTV1WlhoMEtDa3VkR2hsYmlobWRXNWpkR2x2YmloeVpYTjFiSFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTG1SdmJtVWdQeUJ5WlhOMWJIUXVkbUZzZFdVZ09pQnBkR1Z5TG01bGVIUW9LVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJSDA3WEc1Y2JpQWdablZ1WTNScGIyNGdiV0ZyWlVsdWRtOXJaVTFsZEdodlpDaHBibTVsY2tadUxDQnpaV3htTENCamIyNTBaWGgwS1NCN1hHNGdJQ0FnZG1GeUlITjBZWFJsSUQwZ1IyVnVVM1JoZEdWVGRYTndaVzVrWldSVGRHRnlkRHRjYmx4dUlDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQnBiblp2YTJVb2JXVjBhRzlrTENCaGNtY3BJSHRjYmlBZ0lDQWdJR2xtSUNoemRHRjBaU0E5UFQwZ1IyVnVVM1JoZEdWRmVHVmpkWFJwYm1jcElIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lSMlZ1WlhKaGRHOXlJR2x6SUdGc2NtVmhaSGtnY25WdWJtbHVaMXdpS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLSE4wWVhSbElEMDlQU0JIWlc1VGRHRjBaVU52YlhCc1pYUmxaQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9iV1YwYUc5a0lEMDlQU0JjSW5Sb2NtOTNYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCaGNtYzdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBdkx5QkNaU0JtYjNKbmFYWnBibWNzSUhCbGNpQXlOUzR6TGpNdU15NHpJRzltSUhSb1pTQnpjR1ZqT2x4dUlDQWdJQ0FnSUNBdkx5Qm9kSFJ3Y3pvdkwzQmxiM0JzWlM1dGIzcHBiR3hoTG05eVp5OSthbTl5Wlc1a2IzSm1aaTlsY3pZdFpISmhablF1YUhSdGJDTnpaV010WjJWdVpYSmhkRzl5Y21WemRXMWxYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmtiMjVsVW1WemRXeDBLQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhkb2FXeGxJQ2gwY25WbEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCa1pXeGxaMkYwWlNBOUlHTnZiblJsZUhRdVpHVnNaV2RoZEdVN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hrWld4bFoyRjBaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h0WlhSb2IyUWdQVDA5SUZ3aWNtVjBkWEp1WENJZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0tHMWxkR2h2WkNBOVBUMGdYQ0owYUhKdmQxd2lJQ1ltSUdSbGJHVm5ZWFJsTG1sMFpYSmhkRzl5VzIxbGRHaHZaRjBnUFQwOUlIVnVaR1ZtYVc1bFpDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRUVnY21WMGRYSnVJRzl5SUhSb2NtOTNJQ2gzYUdWdUlIUm9aU0JrWld4bFoyRjBaU0JwZEdWeVlYUnZjaUJvWVhNZ2JtOGdkR2h5YjNkY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUcxbGRHaHZaQ2tnWVd4M1lYbHpJSFJsY20xcGJtRjBaWE1nZEdobElIbHBaV3hrS2lCc2IyOXdMbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR1Y0ZEM1a1pXeGxaMkYwWlNBOUlHNTFiR3c3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVsbUlIUm9aU0JrWld4bFoyRjBaU0JwZEdWeVlYUnZjaUJvWVhNZ1lTQnlaWFIxY200Z2JXVjBhRzlrTENCbmFYWmxJR2wwSUdGY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdOb1lXNWpaU0IwYnlCamJHVmhiaUIxY0M1Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCeVpYUjFjbTVOWlhSb2IyUWdQU0JrWld4bFoyRjBaUzVwZEdWeVlYUnZjbHRjSW5KbGRIVnlibHdpWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpYUjFjbTVOWlhSb2IyUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhKbFkyOXlaQ0E5SUhSeWVVTmhkR05vS0hKbGRIVnliazFsZEdodlpDd2daR1ZzWldkaGRHVXVhWFJsY21GMGIzSXNJR0Z5WnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlaV052Y21RdWRIbHdaU0E5UFQwZ1hDSjBhSEp2ZDF3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnU1dZZ2RHaGxJSEpsZEhWeWJpQnRaWFJvYjJRZ2RHaHlaWGNnWVc0Z1pYaGpaWEIwYVc5dUxDQnNaWFFnZEdoaGRGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR1Y0WTJWd2RHbHZiaUJ3Y21WMllXbHNJRzkyWlhJZ2RHaGxJRzl5YVdkcGJtRnNJSEpsZEhWeWJpQnZjaUIwYUhKdmR5NWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRaWFJvYjJRZ1BTQmNJblJvY205M1hDSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWEpuSUQwZ2NtVmpiM0prTG1GeVp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JXVjBhRzlrSUQwOVBTQmNJbkpsZEhWeWJsd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUVOdmJuUnBiblZsSUhkcGRHZ2dkR2hsSUc5MWRHVnlJSEpsZEhWeWJpd2dibTkzSUhSb1lYUWdkR2hsSUdSbGJHVm5ZWFJsWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdsMFpYSmhkRzl5SUdoaGN5QmlaV1Z1SUhSbGNtMXBibUYwWldRdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJSFpoY2lCeVpXTnZjbVFnUFNCMGNubERZWFJqYUNoY2JpQWdJQ0FnSUNBZ0lDQWdJR1JsYkdWbllYUmxMbWwwWlhKaGRHOXlXMjFsZEdodlpGMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCa1pXeGxaMkYwWlM1cGRHVnlZWFJ2Y2l4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0Z5WjF4dUlDQWdJQ0FnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9jbVZqYjNKa0xuUjVjR1VnUFQwOUlGd2lkR2h5YjNkY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR1Y0ZEM1a1pXeGxaMkYwWlNBOUlHNTFiR3c3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUV4cGEyVWdjbVYwZFhKdWFXNW5JR2RsYm1WeVlYUnZjaTUwYUhKdmR5aDFibU5oZFdkb2RDa3NJR0oxZENCM2FYUm9iM1YwSUhSb1pWeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2IzWmxjbWhsWVdRZ2IyWWdZVzRnWlhoMGNtRWdablZ1WTNScGIyNGdZMkZzYkM1Y2JpQWdJQ0FnSUNBZ0lDQWdJRzFsZEdodlpDQTlJRndpZEdoeWIzZGNJanRjYmlBZ0lDQWdJQ0FnSUNBZ0lHRnlaeUE5SUhKbFkyOXlaQzVoY21jN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MGFXNTFaVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0F2THlCRVpXeGxaMkYwWlNCblpXNWxjbUYwYjNJZ2NtRnVJR0Z1WkNCb1lXNWtiR1ZrSUdsMGN5QnZkMjRnWlhoalpYQjBhVzl1Y3lCemIxeHVJQ0FnSUNBZ0lDQWdJQzh2SUhKbFoyRnlaR3hsYzNNZ2IyWWdkMmhoZENCMGFHVWdiV1YwYUc5a0lIZGhjeXdnZDJVZ1kyOXVkR2x1ZFdVZ1lYTWdhV1lnYVhRZ2FYTmNiaUFnSUNBZ0lDQWdJQ0F2THlCY0ltNWxlSFJjSWlCM2FYUm9JR0Z1SUhWdVpHVm1hVzVsWkNCaGNtY3VYRzRnSUNBZ0lDQWdJQ0FnYldWMGFHOWtJRDBnWENKdVpYaDBYQ0k3WEc0Z0lDQWdJQ0FnSUNBZ1lYSm5JRDBnZFc1a1pXWnBibVZrTzF4dVhHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUdsdVptOGdQU0J5WldOdmNtUXVZWEpuTzF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hwYm1adkxtUnZibVVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5SbGVIUmJaR1ZzWldkaGRHVXVjbVZ6ZFd4MFRtRnRaVjBnUFNCcGJtWnZMblpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRHVjRkQzV1WlhoMElEMGdaR1ZzWldkaGRHVXVibVY0ZEV4dll6dGNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUmhkR1VnUFNCSFpXNVRkR0YwWlZOMWMzQmxibVJsWkZscFpXeGtPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdsdVptODdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdZMjl1ZEdWNGRDNWtaV3hsWjJGMFpTQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwWmlBb2JXVjBhRzlrSUQwOVBTQmNJbTVsZUhSY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUM4dklGTmxkSFJwYm1jZ1kyOXVkR1Y0ZEM1ZmMyVnVkQ0JtYjNJZ2JHVm5ZV041SUhOMWNIQnZjblFnYjJZZ1FtRmlaV3duYzF4dUlDQWdJQ0FnSUNBZ0lDOHZJR1oxYm1OMGFXOXVMbk5sYm5RZ2FXMXdiR1Z0Wlc1MFlYUnBiMjR1WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVkR1Y0ZEM1elpXNTBJRDBnWTI5dWRHVjRkQzVmYzJWdWRDQTlJR0Z5Wnp0Y2JseHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLRzFsZEdodlpDQTlQVDBnWENKMGFISnZkMXdpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hOMFlYUmxJRDA5UFNCSFpXNVRkR0YwWlZOMWMzQmxibVJsWkZOMFlYSjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkR0YwWlNBOUlFZGxibE4wWVhSbFEyOXRjR3hsZEdWa08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dZWEpuTzF4dUlDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaGpiMjUwWlhoMExtUnBjM0JoZEdOb1JYaGpaWEIwYVc5dUtHRnlaeWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVsbUlIUm9aU0JrYVhOd1lYUmphR1ZrSUdWNFkyVndkR2x2YmlCM1lYTWdZMkYxWjJoMElHSjVJR0VnWTJGMFkyZ2dZbXh2WTJzc1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCMGFHVnVJR3hsZENCMGFHRjBJR05oZEdOb0lHSnNiMk5ySUdoaGJtUnNaU0IwYUdVZ1pYaGpaWEIwYVc5dUlHNXZjbTFoYkd4NUxseHVJQ0FnSUNBZ0lDQWdJQ0FnYldWMGFHOWtJRDBnWENKdVpYaDBYQ0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhjbWNnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2JXVjBhRzlrSUQwOVBTQmNJbkpsZEhWeWJsd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVkR1Y0ZEM1aFluSjFjSFFvWENKeVpYUjFjbTVjSWl3Z1lYSm5LVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lITjBZWFJsSUQwZ1IyVnVVM1JoZEdWRmVHVmpkWFJwYm1jN1hHNWNiaUFnSUNBZ0lDQWdkbUZ5SUhKbFkyOXlaQ0E5SUhSeWVVTmhkR05vS0dsdWJtVnlSbTRzSUhObGJHWXNJR052Ym5SbGVIUXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2NtVmpiM0prTG5SNWNHVWdQVDA5SUZ3aWJtOXliV0ZzWENJcElIdGNiaUFnSUNBZ0lDQWdJQ0F2THlCSlppQmhiaUJsZUdObGNIUnBiMjRnYVhNZ2RHaHliM2R1SUdaeWIyMGdhVzV1WlhKR2Jpd2dkMlVnYkdWaGRtVWdjM1JoZEdVZ1BUMDlYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1IyVnVVM1JoZEdWRmVHVmpkWFJwYm1jZ1lXNWtJR3h2YjNBZ1ltRmpheUJtYjNJZ1lXNXZkR2hsY2lCcGJuWnZZMkYwYVc5dUxseHVJQ0FnSUNBZ0lDQWdJSE4wWVhSbElEMGdZMjl1ZEdWNGRDNWtiMjVsWEc0Z0lDQWdJQ0FnSUNBZ0lDQS9JRWRsYmxOMFlYUmxRMjl0Y0d4bGRHVmtYRzRnSUNBZ0lDQWdJQ0FnSUNBNklFZGxibE4wWVhSbFUzVnpjR1Z1WkdWa1dXbGxiR1E3WEc1Y2JpQWdJQ0FnSUNBZ0lDQjJZWElnYVc1bWJ5QTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCeVpXTnZjbVF1WVhKbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWkc5dVpUb2dZMjl1ZEdWNGRDNWtiMjVsWEc0Z0lDQWdJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHlaV052Y21RdVlYSm5JRDA5UFNCRGIyNTBhVzUxWlZObGJuUnBibVZzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1kyOXVkR1Y0ZEM1a1pXeGxaMkYwWlNBbUppQnRaWFJvYjJRZ1BUMDlJRndpYm1WNGRGd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUVSbGJHbGlaWEpoZEdWc2VTQm1iM0puWlhRZ2RHaGxJR3hoYzNRZ2MyVnVkQ0IyWVd4MVpTQnpieUIwYUdGMElIZGxJR1J2YmlkMFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHRmpZMmxrWlc1MFlXeHNlU0J3WVhOeklHbDBJRzl1SUhSdklIUm9aU0JrWld4bFoyRjBaUzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZWEpuSUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdhVzVtYnp0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoeVpXTnZjbVF1ZEhsd1pTQTlQVDBnWENKMGFISnZkMXdpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjM1JoZEdVZ1BTQkhaVzVUZEdGMFpVTnZiWEJzWlhSbFpEdGNiaUFnSUNBZ0lDQWdJQ0F2THlCRWFYTndZWFJqYUNCMGFHVWdaWGhqWlhCMGFXOXVJR0o1SUd4dmIzQnBibWNnWW1GamF5QmhjbTkxYm1RZ2RHOGdkR2hsWEc0Z0lDQWdJQ0FnSUNBZ0x5OGdZMjl1ZEdWNGRDNWthWE53WVhSamFFVjRZMlZ3ZEdsdmJpaGhjbWNwSUdOaGJHd2dZV0p2ZG1VdVhHNGdJQ0FnSUNBZ0lDQWdiV1YwYUc5a0lEMGdYQ0owYUhKdmQxd2lPMXh1SUNBZ0lDQWdJQ0FnSUdGeVp5QTlJSEpsWTI5eVpDNWhjbWM3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dUlDQjlYRzVjYmlBZ0x5OGdSR1ZtYVc1bElFZGxibVZ5WVhSdmNpNXdjbTkwYjNSNWNHVXVlMjVsZUhRc2RHaHliM2NzY21WMGRYSnVmU0JwYmlCMFpYSnRjeUJ2WmlCMGFHVmNiaUFnTHk4Z2RXNXBabWxsWkNBdVgybHVkbTlyWlNCb1pXeHdaWElnYldWMGFHOWtMbHh1SUNCa1pXWnBibVZKZEdWeVlYUnZjazFsZEdodlpITW9SM0FwTzF4dVhHNGdJRWR3VzJsMFpYSmhkRzl5VTNsdFltOXNYU0E5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0I5TzF4dVhHNGdJRWR3VzNSdlUzUnlhVzVuVkdGblUzbHRZbTlzWFNBOUlGd2lSMlZ1WlhKaGRHOXlYQ0k3WEc1Y2JpQWdSM0F1ZEc5VGRISnBibWNnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNCeVpYUjFjbTRnWENKYmIySnFaV04wSUVkbGJtVnlZWFJ2Y2wxY0lqdGNiaUFnZlR0Y2JseHVJQ0JtZFc1amRHbHZiaUJ3ZFhOb1ZISjVSVzUwY25rb2JHOWpjeWtnZTF4dUlDQWdJSFpoY2lCbGJuUnllU0E5SUhzZ2RISjVURzlqT2lCc2IyTnpXekJkSUgwN1hHNWNiaUFnSUNCcFppQW9NU0JwYmlCc2IyTnpLU0I3WEc0Z0lDQWdJQ0JsYm5SeWVTNWpZWFJqYUV4dll5QTlJR3h2WTNOYk1WMDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLRElnYVc0Z2JHOWpjeWtnZTF4dUlDQWdJQ0FnWlc1MGNua3VabWx1WVd4c2VVeHZZeUE5SUd4dlkzTmJNbDA3WEc0Z0lDQWdJQ0JsYm5SeWVTNWhablJsY2t4dll5QTlJR3h2WTNOYk0xMDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RHaHBjeTUwY25sRmJuUnlhV1Z6TG5CMWMyZ29aVzUwY25rcE8xeHVJQ0I5WEc1Y2JpQWdablZ1WTNScGIyNGdjbVZ6WlhSVWNubEZiblJ5ZVNobGJuUnllU2tnZTF4dUlDQWdJSFpoY2lCeVpXTnZjbVFnUFNCbGJuUnllUzVqYjIxd2JHVjBhVzl1SUh4OElIdDlPMXh1SUNBZ0lISmxZMjl5WkM1MGVYQmxJRDBnWENKdWIzSnRZV3hjSWp0Y2JpQWdJQ0JrWld4bGRHVWdjbVZqYjNKa0xtRnlaenRjYmlBZ0lDQmxiblJ5ZVM1amIyMXdiR1YwYVc5dUlEMGdjbVZqYjNKa08xeHVJQ0I5WEc1Y2JpQWdablZ1WTNScGIyNGdRMjl1ZEdWNGRDaDBjbmxNYjJOelRHbHpkQ2tnZTF4dUlDQWdJQzh2SUZSb1pTQnliMjkwSUdWdWRISjVJRzlpYW1WamRDQW9aV1ptWldOMGFYWmxiSGtnWVNCMGNua2djM1JoZEdWdFpXNTBJSGRwZEdodmRYUWdZU0JqWVhSamFGeHVJQ0FnSUM4dklHOXlJR0VnWm1sdVlXeHNlU0JpYkc5amF5a2daMmwyWlhNZ2RYTWdZU0J3YkdGalpTQjBieUJ6ZEc5eVpTQjJZV3gxWlhNZ2RHaHliM2R1SUdaeWIyMWNiaUFnSUNBdkx5QnNiMk5oZEdsdmJuTWdkMmhsY21VZ2RHaGxjbVVnYVhNZ2JtOGdaVzVqYkc5emFXNW5JSFJ5ZVNCemRHRjBaVzFsYm5RdVhHNGdJQ0FnZEdocGN5NTBjbmxGYm5SeWFXVnpJRDBnVzNzZ2RISjVURzlqT2lCY0luSnZiM1JjSWlCOVhUdGNiaUFnSUNCMGNubE1iMk56VEdsemRDNW1iM0pGWVdOb0tIQjFjMmhVY25sRmJuUnllU3dnZEdocGN5azdYRzRnSUNBZ2RHaHBjeTV5WlhObGRDaDBjblZsS1R0Y2JpQWdmVnh1WEc0Z0lISjFiblJwYldVdWEyVjVjeUE5SUdaMWJtTjBhVzl1S0c5aWFtVmpkQ2tnZTF4dUlDQWdJSFpoY2lCclpYbHpJRDBnVzEwN1hHNGdJQ0FnWm05eUlDaDJZWElnYTJWNUlHbHVJRzlpYW1WamRDa2dlMXh1SUNBZ0lDQWdhMlY1Y3k1d2RYTm9LR3RsZVNrN1hHNGdJQ0FnZlZ4dUlDQWdJR3RsZVhNdWNtVjJaWEp6WlNncE8xeHVYRzRnSUNBZ0x5OGdVbUYwYUdWeUlIUm9ZVzRnY21WMGRYSnVhVzVuSUdGdUlHOWlhbVZqZENCM2FYUm9JR0VnYm1WNGRDQnRaWFJvYjJRc0lIZGxJR3RsWlhCY2JpQWdJQ0F2THlCMGFHbHVaM01nYzJsdGNHeGxJR0Z1WkNCeVpYUjFjbTRnZEdobElHNWxlSFFnWm5WdVkzUnBiMjRnYVhSelpXeG1MbHh1SUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCdVpYaDBLQ2tnZTF4dUlDQWdJQ0FnZDJocGJHVWdLR3RsZVhNdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJyWlhrZ1BTQnJaWGx6TG5CdmNDZ3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb2EyVjVJR2x1SUc5aWFtVmpkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHNWxlSFF1ZG1Gc2RXVWdQU0JyWlhrN1hHNGdJQ0FnSUNBZ0lDQWdibVY0ZEM1a2IyNWxJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZUhRN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdMeThnVkc4Z1lYWnZhV1FnWTNKbFlYUnBibWNnWVc0Z1lXUmthWFJwYjI1aGJDQnZZbXBsWTNRc0lIZGxJR3AxYzNRZ2FHRnVaeUIwYUdVZ0xuWmhiSFZsWEc0Z0lDQWdJQ0F2THlCaGJtUWdMbVJ2Ym1VZ2NISnZjR1Z5ZEdsbGN5QnZabVlnZEdobElHNWxlSFFnWm5WdVkzUnBiMjRnYjJKcVpXTjBJR2wwYzJWc1ppNGdWR2hwYzF4dUlDQWdJQ0FnTHk4Z1lXeHpieUJsYm5OMWNtVnpJSFJvWVhRZ2RHaGxJRzFwYm1sbWFXVnlJSGRwYkd3Z2JtOTBJR0Z1YjI1NWJXbDZaU0IwYUdVZ1puVnVZM1JwYjI0dVhHNGdJQ0FnSUNCdVpYaDBMbVJ2Ym1VZ1BTQjBjblZsTzF4dUlDQWdJQ0FnY21WMGRYSnVJRzVsZUhRN1hHNGdJQ0FnZlR0Y2JpQWdmVHRjYmx4dUlDQm1kVzVqZEdsdmJpQjJZV3gxWlhNb2FYUmxjbUZpYkdVcElIdGNiaUFnSUNCcFppQW9hWFJsY21GaWJHVXBJSHRjYmlBZ0lDQWdJSFpoY2lCcGRHVnlZWFJ2Y2sxbGRHaHZaQ0E5SUdsMFpYSmhZbXhsVzJsMFpYSmhkRzl5VTNsdFltOXNYVHRjYmlBZ0lDQWdJR2xtSUNocGRHVnlZWFJ2Y2sxbGRHaHZaQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYVhSbGNtRjBiM0pOWlhSb2IyUXVZMkZzYkNocGRHVnlZV0pzWlNrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdhWFJsY21GaWJHVXVibVY0ZENBOVBUMGdYQ0ptZFc1amRHbHZibHdpS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCcGRHVnlZV0pzWlR0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLQ0ZwYzA1aFRpaHBkR1Z5WVdKc1pTNXNaVzVuZEdncEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCcElEMGdMVEVzSUc1bGVIUWdQU0JtZFc1amRHbHZiaUJ1WlhoMEtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhkb2FXeGxJQ2dySzJrZ1BDQnBkR1Z5WVdKc1pTNXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaG9ZWE5QZDI0dVkyRnNiQ2hwZEdWeVlXSnNaU3dnYVNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JtVjRkQzUyWVd4MVpTQTlJR2wwWlhKaFlteGxXMmxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlhoMExtUnZibVVnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNWxlSFE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdibVY0ZEM1MllXeDFaU0E5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ0lDQnVaWGgwTG1SdmJtVWdQU0IwY25WbE8xeHVYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZUhRN1hHNGdJQ0FnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZUhRdWJtVjRkQ0E5SUc1bGVIUTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdVbVYwZFhKdUlHRnVJR2wwWlhKaGRHOXlJSGRwZEdnZ2JtOGdkbUZzZFdWekxseHVJQ0FnSUhKbGRIVnliaUI3SUc1bGVIUTZJR1J2Ym1WU1pYTjFiSFFnZlR0Y2JpQWdmVnh1SUNCeWRXNTBhVzFsTG5aaGJIVmxjeUE5SUhaaGJIVmxjenRjYmx4dUlDQm1kVzVqZEdsdmJpQmtiMjVsVW1WemRXeDBLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjdJSFpoYkhWbE9pQjFibVJsWm1sdVpXUXNJR1J2Ym1VNklIUnlkV1VnZlR0Y2JpQWdmVnh1WEc0Z0lFTnZiblJsZUhRdWNISnZkRzkwZVhCbElEMGdlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlPaUJEYjI1MFpYaDBMRnh1WEc0Z0lDQWdjbVZ6WlhRNklHWjFibU4wYVc5dUtITnJhWEJVWlcxd1VtVnpaWFFwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVjSEpsZGlBOUlEQTdYRzRnSUNBZ0lDQjBhR2x6TG01bGVIUWdQU0F3TzF4dUlDQWdJQ0FnTHk4Z1VtVnpaWFIwYVc1bklHTnZiblJsZUhRdVgzTmxiblFnWm05eUlHeGxaMkZqZVNCemRYQndiM0owSUc5bUlFSmhZbVZzSjNOY2JpQWdJQ0FnSUM4dklHWjFibU4wYVc5dUxuTmxiblFnYVcxd2JHVnRaVzUwWVhScGIyNHVYRzRnSUNBZ0lDQjBhR2x6TG5ObGJuUWdQU0IwYUdsekxsOXpaVzUwSUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ2RHaHBjeTVrYjI1bElEMGdabUZzYzJVN1hHNGdJQ0FnSUNCMGFHbHpMbVJsYkdWbllYUmxJRDBnYm5Wc2JEdGNibHh1SUNBZ0lDQWdkR2hwY3k1MGNubEZiblJ5YVdWekxtWnZja1ZoWTJnb2NtVnpaWFJVY25sRmJuUnllU2s3WEc1Y2JpQWdJQ0FnSUdsbUlDZ2hjMnRwY0ZSbGJYQlNaWE5sZENrZ2UxeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnVZVzFsSUdsdUlIUm9hWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJPYjNRZ2MzVnlaU0JoWW05MWRDQjBhR1VnYjNCMGFXMWhiQ0J2Y21SbGNpQnZaaUIwYUdWelpTQmpiMjVrYVhScGIyNXpPbHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHVZVzFsTG1Ob1lYSkJkQ2d3S1NBOVBUMGdYQ0owWENJZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FHRnpUM2R1TG1OaGJHd29kR2hwY3l3Z2JtRnRaU2tnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSVdselRtRk9LQ3R1WVcxbExuTnNhV05sS0RFcEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjMXR1WVcxbFhTQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ2MzUnZjRG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbVJ2Ym1VZ1BTQjBjblZsTzF4dVhHNGdJQ0FnSUNCMllYSWdjbTl2ZEVWdWRISjVJRDBnZEdocGN5NTBjbmxGYm5SeWFXVnpXekJkTzF4dUlDQWdJQ0FnZG1GeUlISnZiM1JTWldOdmNtUWdQU0J5YjI5MFJXNTBjbmt1WTI5dGNHeGxkR2x2Ymp0Y2JpQWdJQ0FnSUdsbUlDaHliMjkwVW1WamIzSmtMblI1Y0dVZ1BUMDlJRndpZEdoeWIzZGNJaWtnZTF4dUlDQWdJQ0FnSUNCMGFISnZkeUJ5YjI5MFVtVmpiM0prTG1GeVp6dGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y25aaGJEdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ1pHbHpjR0YwWTJoRmVHTmxjSFJwYjI0NklHWjFibU4wYVc5dUtHVjRZMlZ3ZEdsdmJpa2dlMXh1SUNBZ0lDQWdhV1lnS0hSb2FYTXVaRzl1WlNrZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCbGVHTmxjSFJwYjI0N1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lIWmhjaUJqYjI1MFpYaDBJRDBnZEdocGN6dGNiaUFnSUNBZ0lHWjFibU4wYVc5dUlHaGhibVJzWlNoc2IyTXNJR05oZFdkb2RDa2dlMXh1SUNBZ0lDQWdJQ0J5WldOdmNtUXVkSGx3WlNBOUlGd2lkR2h5YjNkY0lqdGNiaUFnSUNBZ0lDQWdjbVZqYjNKa0xtRnlaeUE5SUdWNFkyVndkR2x2Ymp0Y2JpQWdJQ0FnSUNBZ1kyOXVkR1Y0ZEM1dVpYaDBJRDBnYkc5ak8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0lTRmpZWFZuYUhRN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0IwYUdsekxuUnllVVZ1ZEhKcFpYTXViR1Z1WjNSb0lDMGdNVHNnYVNBK1BTQXdPeUF0TFdrcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdWdWRISjVJRDBnZEdocGN5NTBjbmxGYm5SeWFXVnpXMmxkTzF4dUlDQWdJQ0FnSUNCMllYSWdjbVZqYjNKa0lEMGdaVzUwY25rdVkyOXRjR3hsZEdsdmJqdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb1pXNTBjbmt1ZEhKNVRHOWpJRDA5UFNCY0luSnZiM1JjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQzh2SUVWNFkyVndkR2x2YmlCMGFISnZkMjRnYjNWMGMybGtaU0J2WmlCaGJua2dkSEo1SUdKc2IyTnJJSFJvWVhRZ1kyOTFiR1FnYUdGdVpHeGxYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2FYUXNJSE52SUhObGRDQjBhR1VnWTI5dGNHeGxkR2x2YmlCMllXeDFaU0J2WmlCMGFHVWdaVzUwYVhKbElHWjFibU4wYVc5dUlIUnZYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2RHaHliM2NnZEdobElHVjRZMlZ3ZEdsdmJpNWNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdhR0Z1Wkd4bEtGd2laVzVrWENJcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHVnVkSEo1TG5SeWVVeHZZeUE4UFNCMGFHbHpMbkJ5WlhZcElIdGNiaUFnSUNBZ0lDQWdJQ0IyWVhJZ2FHRnpRMkYwWTJnZ1BTQm9ZWE5QZDI0dVkyRnNiQ2hsYm5SeWVTd2dYQ0pqWVhSamFFeHZZMXdpS1R0Y2JpQWdJQ0FnSUNBZ0lDQjJZWElnYUdGelJtbHVZV3hzZVNBOUlHaGhjMDkzYmk1allXeHNLR1Z1ZEhKNUxDQmNJbVpwYm1Gc2JIbE1iMk5jSWlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2FHRnpRMkYwWTJnZ0ppWWdhR0Z6Um1sdVlXeHNlU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVjSEpsZGlBOElHVnVkSEo1TG1OaGRHTm9URzlqS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJvWVc1a2JHVW9aVzUwY25rdVkyRjBZMmhNYjJNc0lIUnlkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2gwYUdsekxuQnlaWFlnUENCbGJuUnllUzVtYVc1aGJHeDVURzlqS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJvWVc1a2JHVW9aVzUwY25rdVptbHVZV3hzZVV4dll5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0doaGMwTmhkR05vS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV3Y21WMklEd2daVzUwY25rdVkyRjBZMmhNYjJNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdoaGJtUnNaU2hsYm5SeWVTNWpZWFJqYUV4dll5d2dkSEoxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR2hoYzBacGJtRnNiSGtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbkJ5WlhZZ1BDQmxiblJ5ZVM1bWFXNWhiR3g1VEc5aktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCb1lXNWtiR1VvWlc1MGNua3VabWx1WVd4c2VVeHZZeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lkSEo1SUhOMFlYUmxiV1Z1ZENCM2FYUm9iM1YwSUdOaGRHTm9JRzl5SUdacGJtRnNiSGxjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYmx4dUlDQWdJR0ZpY25Wd2REb2dablZ1WTNScGIyNG9kSGx3WlN3Z1lYSm5LU0I3WEc0Z0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ2RHaHBjeTUwY25sRmJuUnlhV1Z6TG14bGJtZDBhQ0F0SURFN0lHa2dQajBnTURzZ0xTMXBLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmxiblJ5ZVNBOUlIUm9hWE11ZEhKNVJXNTBjbWxsYzF0cFhUdGNiaUFnSUNBZ0lDQWdhV1lnS0dWdWRISjVMblJ5ZVV4dll5QThQU0IwYUdsekxuQnlaWFlnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJR2hoYzA5M2JpNWpZV3hzS0dWdWRISjVMQ0JjSW1acGJtRnNiSGxNYjJOY0lpa2dKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y0hKbGRpQThJR1Z1ZEhKNUxtWnBibUZzYkhsTWIyTXBJSHRjYmlBZ0lDQWdJQ0FnSUNCMllYSWdabWx1WVd4c2VVVnVkSEo1SUQwZ1pXNTBjbms3WEc0Z0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLR1pwYm1Gc2JIbEZiblJ5ZVNBbUpseHVJQ0FnSUNBZ0lDQWdJQ2gwZVhCbElEMDlQU0JjSW1KeVpXRnJYQ0lnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdkSGx3WlNBOVBUMGdYQ0pqYjI1MGFXNTFaVndpS1NBbUpseHVJQ0FnSUNBZ0lDQWdJR1pwYm1Gc2JIbEZiblJ5ZVM1MGNubE1iMk1nUEQwZ1lYSm5JQ1ltWEc0Z0lDQWdJQ0FnSUNBZ1lYSm5JRHc5SUdacGJtRnNiSGxGYm5SeWVTNW1hVzVoYkd4NVRHOWpLU0I3WEc0Z0lDQWdJQ0FnSUM4dklFbG5ibTl5WlNCMGFHVWdabWx1WVd4c2VTQmxiblJ5ZVNCcFppQmpiMjUwY205c0lHbHpJRzV2ZENCcWRXMXdhVzVuSUhSdklHRmNiaUFnSUNBZ0lDQWdMeThnYkc5allYUnBiMjRnYjNWMGMybGtaU0IwYUdVZ2RISjVMMk5oZEdOb0lHSnNiMk5yTGx4dUlDQWdJQ0FnSUNCbWFXNWhiR3g1Ulc1MGNua2dQU0J1ZFd4c08xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQjJZWElnY21WamIzSmtJRDBnWm1sdVlXeHNlVVZ1ZEhKNUlEOGdabWx1WVd4c2VVVnVkSEo1TG1OdmJYQnNaWFJwYjI0Z09pQjdmVHRjYmlBZ0lDQWdJSEpsWTI5eVpDNTBlWEJsSUQwZ2RIbHdaVHRjYmlBZ0lDQWdJSEpsWTI5eVpDNWhjbWNnUFNCaGNtYzdYRzVjYmlBZ0lDQWdJR2xtSUNobWFXNWhiR3g1Ulc1MGNua3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXVaWGgwSUQwZ1ptbHVZV3hzZVVWdWRISjVMbVpwYm1Gc2JIbE1iMk03WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZiWEJzWlhSbEtISmxZMjl5WkNrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lISmxkSFZ5YmlCRGIyNTBhVzUxWlZObGJuUnBibVZzTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JqYjIxd2JHVjBaVG9nWm5WdVkzUnBiMjRvY21WamIzSmtMQ0JoWm5SbGNreHZZeWtnZTF4dUlDQWdJQ0FnYVdZZ0tISmxZMjl5WkM1MGVYQmxJRDA5UFNCY0luUm9jbTkzWENJcElIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ2NtVmpiM0prTG1GeVp6dGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdhV1lnS0hKbFkyOXlaQzUwZVhCbElEMDlQU0JjSW1KeVpXRnJYQ0lnZkh4Y2JpQWdJQ0FnSUNBZ0lDQnlaV052Y21RdWRIbHdaU0E5UFQwZ1hDSmpiMjUwYVc1MVpWd2lLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVibVY0ZENBOUlISmxZMjl5WkM1aGNtYzdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSEpsWTI5eVpDNTBlWEJsSUQwOVBTQmNJbkpsZEhWeWJsd2lLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjblpoYkNBOUlISmxZMjl5WkM1aGNtYzdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJtVjRkQ0E5SUZ3aVpXNWtYQ0k3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hKbFkyOXlaQzUwZVhCbElEMDlQU0JjSW01dmNtMWhiRndpSUNZbUlHRm1kR1Z5VEc5aktTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJtVjRkQ0E5SUdGbWRHVnlURzlqTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JtYVc1cGMyZzZJR1oxYm1OMGFXOXVLR1pwYm1Gc2JIbE1iMk1wSUh0Y2JpQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQjBhR2x6TG5SeWVVVnVkSEpwWlhNdWJHVnVaM1JvSUMwZ01Uc2dhU0ErUFNBd095QXRMV2twSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1Z1ZEhKNUlEMGdkR2hwY3k1MGNubEZiblJ5YVdWelcybGRPMXh1SUNBZ0lDQWdJQ0JwWmlBb1pXNTBjbmt1Wm1sdVlXeHNlVXh2WXlBOVBUMGdabWx1WVd4c2VVeHZZeWtnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WTI5dGNHeGxkR1VvWlc1MGNua3VZMjl0Y0d4bGRHbHZiaXdnWlc1MGNua3VZV1owWlhKTWIyTXBPMXh1SUNBZ0lDQWdJQ0FnSUhKbGMyVjBWSEo1Ulc1MGNua29aVzUwY25rcE8xeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQkRiMjUwYVc1MVpWTmxiblJwYm1Wc08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lGd2lZMkYwWTJoY0lqb2dablZ1WTNScGIyNG9kSEo1VEc5aktTQjdYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnZEdocGN5NTBjbmxGYm5SeWFXVnpMbXhsYm1kMGFDQXRJREU3SUdrZ1BqMGdNRHNnTFMxcEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCbGJuUnllU0E5SUhSb2FYTXVkSEo1Ulc1MGNtbGxjMXRwWFR0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1Z1ZEhKNUxuUnllVXh2WXlBOVBUMGdkSEo1VEc5aktTQjdYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlISmxZMjl5WkNBOUlHVnVkSEo1TG1OdmJYQnNaWFJwYjI0N1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hKbFkyOXlaQzUwZVhCbElEMDlQU0JjSW5Sb2NtOTNYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMGFISnZkMjRnUFNCeVpXTnZjbVF1WVhKbk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WelpYUlVjbmxGYm5SeWVTaGxiblJ5ZVNrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUhKdmQyNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnTHk4Z1ZHaGxJR052Ym5SbGVIUXVZMkYwWTJnZ2JXVjBhRzlrSUcxMWMzUWdiMjVzZVNCaVpTQmpZV3hzWldRZ2QybDBhQ0JoSUd4dlkyRjBhVzl1WEc0Z0lDQWdJQ0F2THlCaGNtZDFiV1Z1ZENCMGFHRjBJR052Y25KbGMzQnZibVJ6SUhSdklHRWdhMjV2ZDI0Z1kyRjBZMmdnWW14dlkyc3VYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSnBiR3hsWjJGc0lHTmhkR05vSUdGMGRHVnRjSFJjSWlrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUdSbGJHVm5ZWFJsV1dsbGJHUTZJR1oxYm1OMGFXOXVLR2wwWlhKaFlteGxMQ0J5WlhOMWJIUk9ZVzFsTENCdVpYaDBURzlqS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbVJsYkdWbllYUmxJRDBnZTF4dUlDQWdJQ0FnSUNCcGRHVnlZWFJ2Y2pvZ2RtRnNkV1Z6S0dsMFpYSmhZbXhsS1N4Y2JpQWdJQ0FnSUNBZ2NtVnpkV3gwVG1GdFpUb2djbVZ6ZFd4MFRtRnRaU3hjYmlBZ0lDQWdJQ0FnYm1WNGRFeHZZem9nYm1WNGRFeHZZMXh1SUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnY21WMGRYSnVJRU52Ym5ScGJuVmxVMlZ1ZEdsdVpXdzdYRzRnSUNBZ2ZWeHVJQ0I5TzF4dWZTa29YRzRnSUM4dklFRnRiMjVuSUhSb1pTQjJZWEpwYjNWeklIUnlhV05yY3lCbWIzSWdiMkowWVdsdWFXNW5JR0VnY21WbVpYSmxibU5sSUhSdklIUm9aU0JuYkc5aVlXeGNiaUFnTHk4Z2IySnFaV04wTENCMGFHbHpJSE5sWlcxeklIUnZJR0psSUhSb1pTQnRiM04wSUhKbGJHbGhZbXhsSUhSbFkyaHVhWEYxWlNCMGFHRjBJR1J2WlhNZ2JtOTBYRzRnSUM4dklIVnpaU0JwYm1ScGNtVmpkQ0JsZG1Gc0lDaDNhR2xqYUNCMmFXOXNZWFJsY3lCRGIyNTBaVzUwSUZObFkzVnlhWFI1SUZCdmJHbGplU2t1WEc0Z0lIUjVjR1Z2WmlCbmJHOWlZV3dnUFQwOUlGd2liMkpxWldOMFhDSWdQeUJuYkc5aVlXd2dPbHh1SUNCMGVYQmxiMllnZDJsdVpHOTNJRDA5UFNCY0ltOWlhbVZqZEZ3aUlEOGdkMmx1Wkc5M0lEcGNiaUFnZEhsd1pXOW1JSE5sYkdZZ1BUMDlJRndpYjJKcVpXTjBYQ0lnUHlCelpXeG1JRG9nZEdocGMxeHVLVHRjYmlJc0lpOHFLbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJRVkNCSmJtOTJZY09udzZOdklHVWdVMmx6ZEdWdFlYTWdVMEZjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnU1U1RlUwTXRTVVJjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVVZWUFFrbFRJRTVGVkZkUFVrdFRJRk5NWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVaU1FWVk9TRTlHUlZJdFIwVlRSVXhNVTBOSVFVWlVJRnBWVWlCR1QwVlNSRVZTVlU1SElFUkZVaUJCVGtkRlYwRk9SRlJGVGlCR1QxSlRRMGhWVGtjZ1JTNVdYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRTlTUVU1SFJTQlRRVnh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJFWlhWMGMyTm9aU0JVWld4bGEyOXRJRUZIWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVGd2FYcGxaVnh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJVUlVOSVRrbFRRMGhGSUZWT1NWWkZVbE5KVkVGVUlFSkZVa3hKVGx4dUtseHVLaUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVWdYQ0pNYVdObGJuTmxYQ0lwTzF4dUtpQjViM1VnYldGNUlHNXZkQ0IxYzJVZ2RHaHBjeUJtYVd4bElHVjRZMlZ3ZENCcGJpQmpiMjF3YkdsaGJtTmxJSGRwZEdnZ2RHaGxJRXhwWTJWdWMyVXVYRzRxSUZsdmRTQnRZWGtnYjJKMFlXbHVJR0VnWTI5d2VTQnZaaUIwYUdVZ1RHbGpaVzV6WlNCaGRGeHVLbHh1S2lBZ0lHaDBkSEE2THk5M2QzY3VZWEJoWTJobExtOXlaeTlzYVdObGJuTmxjeTlNU1VORlRsTkZMVEl1TUZ4dUtseHVLaUJWYm14bGMzTWdjbVZ4ZFdseVpXUWdZbmtnWVhCd2JHbGpZV0pzWlNCc1lYY2diM0lnWVdkeVpXVmtJSFJ2SUdsdUlIZHlhWFJwYm1jc0lITnZablIzWVhKbFhHNHFJR1JwYzNSeWFXSjFkR1ZrSUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sSUdseklHUnBjM1J5YVdKMWRHVmtJRzl1SUdGdUlGd2lRVk1nU1ZOY0lpQkNRVk5KVXl4Y2Jpb2dWMGxVU0U5VlZDQlhRVkpTUVU1VVNVVlRJRTlTSUVOUFRrUkpWRWxQVGxNZ1QwWWdRVTVaSUV0SlRrUXNJR1ZwZEdobGNpQmxlSEJ5WlhOeklHOXlJR2x0Y0d4cFpXUXVYRzRxSUZObFpTQjBhR1VnVEdsalpXNXpaU0JtYjNJZ2RHaGxJSE53WldOcFptbGpJR3hoYm1kMVlXZGxJR2R2ZG1WeWJtbHVaeUJ3WlhKdGFYTnphVzl1Y3lCaGJtUmNiaW9nYkdsdGFYUmhkR2x2Ym5NZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVdVhHNHFLaTljYmx4dUx5OGdSR2x6ZEhKcFluVjBhVzl1SUdacGJHVWdabTl5SUUxbGMzTmhaMlZHWVdOMGIzSjVMbXB6SUZ4dUx5OGdkbVZ5YzJsdmJqb2dNQzR6TGpCY2JpOHZJRXhoYzNRZ1luVnBiR1E2SUZSb2RTQktkV3dnTWpFZ01qQXhOaUF4TlRvek1Ub3lOQ0JIVFZRck1ERXdNQ0FvVjBWVFZDbGNibHh1SVdaMWJtTjBhVzl1S0dVcGUybG1LRndpYjJKcVpXTjBYQ0k5UFhSNWNHVnZaaUJsZUhCdmNuUnpKaVpjSW5WdVpHVm1hVzVsWkZ3aUlUMTBlWEJsYjJZZ2JXOWtkV3hsS1cxdlpIVnNaUzVsZUhCdmNuUnpQV1VvS1R0bGJITmxJR2xtS0Z3aVpuVnVZM1JwYjI1Y0lqMDlkSGx3Wlc5bUlHUmxabWx1WlNZbVpHVm1hVzVsTG1GdFpDbGtaV1pwYm1Vb1cxMHNaU2s3Wld4elpYdDJZWElnZER0MFBWd2lkVzVrWldacGJtVmtYQ0loUFhSNWNHVnZaaUIzYVc1a2IzYy9kMmx1Wkc5M09sd2lkVzVrWldacGJtVmtYQ0loUFhSNWNHVnZaaUJuYkc5aVlXdy9aMnh2WW1Gc09sd2lkVzVrWldacGJtVmtYQ0loUFhSNWNHVnZaaUJ6Wld4bVAzTmxiR1k2ZEdocGN5eDBMazFsYzNOaFoyVkdZV04wYjNKNVBXVW9LWDE5S0daMWJtTjBhVzl1S0NsN2RtRnlJR1U3Y21WMGRYSnVJR1oxYm1OMGFXOXVJSFFvWlN4eUxHNHBlMloxYm1OMGFXOXVJRzhvWVN4ektYdHBaaWdoY2x0aFhTbDdhV1lvSVdWYllWMHBlM1poY2lCMVBWd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1JSEpsY1hWcGNtVW1KbkpsY1hWcGNtVTdhV1lvSVhNbUpuVXBjbVYwZFhKdUlIVW9ZU3doTUNrN2FXWW9hU2x5WlhSMWNtNGdhU2hoTENFd0tUdDJZWElnYkQxdVpYY2dSWEp5YjNJb1hDSkRZVzV1YjNRZ1ptbHVaQ0J0YjJSMWJHVWdKMXdpSzJFclhDSW5YQ0lwTzNSb2NtOTNJR3d1WTI5a1pUMWNJazFQUkZWTVJWOU9UMVJmUms5VlRrUmNJaXhzZlhaaGNpQmpQWEpiWVYwOWUyVjRjRzl5ZEhNNmUzMTlPMlZiWVYxYk1GMHVZMkZzYkNoakxtVjRjRzl5ZEhNc1puVnVZM1JwYjI0b2RDbDdkbUZ5SUhJOVpWdGhYVnN4WFZ0MFhUdHlaWFIxY200Z2J5aHlQM0k2ZENsOUxHTXNZeTVsZUhCdmNuUnpMSFFzWlN4eUxHNHBmWEpsZEhWeWJpQnlXMkZkTG1WNGNHOXlkSE45Wm05eUtIWmhjaUJwUFZ3aVpuVnVZM1JwYjI1Y0lqMDlkSGx3Wlc5bUlISmxjWFZwY21VbUpuSmxjWFZwY21Vc1lUMHdPMkU4Ymk1c1pXNW5kR2c3WVNzcktXOG9ibHRoWFNrN2NtVjBkWEp1SUc5OUtIc3hPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkQzVsZUhCdmNuUnpQWHRjSW1SbFptRjFiSFJjSWpwbEtGd2lZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjlpYW1WamRDOWpjbVZoZEdWY0lpa3NYMTlsYzAxdlpIVnNaVG9oTUgxOUxIdGNJbU52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTl2WW1wbFkzUXZZM0psWVhSbFhDSTZNVGQ5WFN3eU9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RDNWxlSEJ2Y25SelBYdGNJbVJsWm1GMWJIUmNJanBsS0Z3aVkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwyOWlhbVZqZEM5a1pXWnBibVV0Y0hKdmNHVnlkSGxjSWlrc1gxOWxjMDF2WkhWc1pUb2hNSDE5TEh0Y0ltTnZjbVV0YW5NdmJHbGljbUZ5ZVM5bWJpOXZZbXBsWTNRdlpHVm1hVzVsTFhCeWIzQmxjblI1WENJNk1UaDlYU3d6T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZEM1bGVIQnZjblJ6UFh0Y0ltUmxabUYxYkhSY0lqcGxLRndpWTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDI5aWFtVmpkQzltY21WbGVtVmNJaWtzWDE5bGMwMXZaSFZzWlRvaE1IMTlMSHRjSW1OdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2Wm5KbFpYcGxYQ0k2TVRsOVhTdzBPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkQzVsZUhCdmNuUnpQWHRjSW1SbFptRjFiSFJjSWpwbEtGd2lZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjlpYW1WamRDOW5aWFF0YjNkdUxYQnliM0JsY25SNUxXUmxjMk55YVhCMGIzSmNJaWtzWDE5bGMwMXZaSFZzWlRvaE1IMTlMSHRjSW1OdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2WjJWMExXOTNiaTF3Y205d1pYSjBlUzFrWlhOamNtbHdkRzl5WENJNk1qQjlYU3cxT2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZEM1bGVIQnZjblJ6UFh0Y0ltUmxabUYxYkhSY0lqcGxLRndpWTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDI5aWFtVmpkQzluWlhRdGNISnZkRzkwZVhCbExXOW1YQ0lwTEY5ZlpYTk5iMlIxYkdVNklUQjlmU3g3WENKamIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dmIySnFaV04wTDJkbGRDMXdjbTkwYjNSNWNHVXRiMlpjSWpveU1YMWRMRFk2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQwTG1WNGNHOXlkSE05ZTF3aVpHVm1ZWFZzZEZ3aU9tVW9YQ0pqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YjJKcVpXTjBMMnRsZVhOY0lpa3NYMTlsYzAxdlpIVnNaVG9oTUgxOUxIdGNJbU52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTl2WW1wbFkzUXZhMlY1YzF3aU9qSXlmVjBzTnpwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNRdVpYaHdiM0owY3oxN1hDSmtaV1poZFd4MFhDSTZaU2hjSW1OdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2YzJWMExYQnliM1J2ZEhsd1pTMXZabHdpS1N4ZlgyVnpUVzlrZFd4bE9pRXdmWDBzZTF3aVkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwyOWlhbVZqZEM5elpYUXRjSEp2ZEc5MGVYQmxMVzltWENJNk1qTjlYU3c0T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZEM1bGVIQnZjblJ6UFh0Y0ltUmxabUYxYkhSY0lqcGxLRndpWTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDNONWJXSnZiRndpS1N4ZlgyVnpUVzlrZFd4bE9pRXdmWDBzZTF3aVkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwzTjViV0p2YkZ3aU9qSTBmVjBzT1RwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNRdVpYaHdiM0owY3oxN1hDSmtaV1poZFd4MFhDSTZaU2hjSW1OdmNtVXRhbk12YkdsaWNtRnllUzltYmk5emVXMWliMnd2YVhSbGNtRjBiM0pjSWlrc1gxOWxjMDF2WkhWc1pUb2hNSDE5TEh0Y0ltTnZjbVV0YW5NdmJHbGljbUZ5ZVM5bWJpOXplVzFpYjJ3dmFYUmxjbUYwYjNKY0lqb3lOWDFkTERFd09sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN1hDSjFjMlVnYzNSeWFXTjBYQ0k3Y2k1ZlgyVnpUVzlrZFd4bFBTRXdMSEpiWENKa1pXWmhkV3gwWENKZFBXWjFibU4wYVc5dUtHVXNkQ2w3YVdZb0lTaGxJR2x1YzNSaGJtTmxiMllnZENrcGRHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGNJa05oYm01dmRDQmpZV3hzSUdFZ1kyeGhjM01nWVhNZ1lTQm1kVzVqZEdsdmJsd2lLWDE5TEh0OVhTd3hNVHBiWm5WdVkzUnBiMjRvWlN4MExISXBlMXdpZFhObElITjBjbWxqZEZ3aU8yWjFibU4wYVc5dUlHNG9aU2w3Y21WMGRYSnVJR1VtSm1VdVgxOWxjMDF2WkhWc1pUOWxPbnRjSW1SbFptRjFiSFJjSWpwbGZYMXlMbDlmWlhOTmIyUjFiR1U5SVRBN2RtRnlJRzg5WlNoY0lpNHVMMk52Y21VdGFuTXZiMkpxWldOMEwyUmxabWx1WlMxd2NtOXdaWEowZVZ3aUtTeHBQVzRvYnlrN2NsdGNJbVJsWm1GMWJIUmNJbDA5Wm5WdVkzUnBiMjRvS1h0bWRXNWpkR2x2YmlCbEtHVXNkQ2w3Wm05eUtIWmhjaUJ5UFRBN2NqeDBMbXhsYm1kMGFEdHlLeXNwZTNaaGNpQnVQWFJiY2wwN2JpNWxiblZ0WlhKaFlteGxQVzR1Wlc1MWJXVnlZV0pzWlh4OElURXNiaTVqYjI1bWFXZDFjbUZpYkdVOUlUQXNYQ0oyWVd4MVpWd2lhVzRnYmlZbUtHNHVkM0pwZEdGaWJHVTlJVEFwTENnd0xHbGJYQ0prWldaaGRXeDBYQ0pkS1NobExHNHVhMlY1TEc0cGZYMXlaWFIxY200Z1puVnVZM1JwYjI0b2RDeHlMRzRwZTNKbGRIVnliaUJ5SmlabEtIUXVjSEp2ZEc5MGVYQmxMSElwTEc0bUptVW9kQ3h1S1N4MGZYMG9LWDBzZTF3aUxpNHZZMjl5WlMxcWN5OXZZbXBsWTNRdlpHVm1hVzVsTFhCeWIzQmxjblI1WENJNk1uMWRMREV5T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3WENKMWMyVWdjM1J5YVdOMFhDSTdablZ1WTNScGIyNGdiaWhsS1h0eVpYUjFjbTRnWlNZbVpTNWZYMlZ6VFc5a2RXeGxQMlU2ZTF3aVpHVm1ZWFZzZEZ3aU9tVjlmWEl1WDE5bGMwMXZaSFZzWlQwaE1EdDJZWElnYnoxbEtGd2lMaTR2WTI5eVpTMXFjeTl2WW1wbFkzUXZaMlYwTFhCeWIzUnZkSGx3WlMxdlpsd2lLU3hwUFc0b2J5a3NZVDFsS0Z3aUxpNHZZMjl5WlMxcWN5OXZZbXBsWTNRdloyVjBMVzkzYmkxd2NtOXdaWEowZVMxa1pYTmpjbWx3ZEc5eVhDSXBMSE05YmloaEtUdHlXMXdpWkdWbVlYVnNkRndpWFQxbWRXNWpkR2x2YmlCMUtHVXNkQ3h5S1h0dWRXeHNQVDA5WlNZbUtHVTlSblZ1WTNScGIyNHVjSEp2ZEc5MGVYQmxLVHQyWVhJZ2JqMG9NQ3h6VzF3aVpHVm1ZWFZzZEZ3aVhTa29aU3gwS1R0cFppaDJiMmxrSURBOVBUMXVLWHQyWVhJZ2J6MG9NQ3hwVzF3aVpHVm1ZWFZzZEZ3aVhTa29aU2s3Y21WMGRYSnVJRzUxYkd3OVBUMXZQM1p2YVdRZ01EcDFLRzhzZEN4eUtYMXBaaWhjSW5aaGJIVmxYQ0pwYmlCdUtYSmxkSFZ5YmlCdUxuWmhiSFZsTzNaaGNpQmhQVzR1WjJWME8ybG1LSFp2YVdRZ01DRTlQV0VwY21WMGRYSnVJR0V1WTJGc2JDaHlLWDE5TEh0Y0lpNHVMMk52Y21VdGFuTXZiMkpxWldOMEwyZGxkQzF2ZDI0dGNISnZjR1Z5ZEhrdFpHVnpZM0pwY0hSdmNsd2lPalFzWENJdUxpOWpiM0psTFdwekwyOWlhbVZqZEM5blpYUXRjSEp2ZEc5MGVYQmxMVzltWENJNk5YMWRMREV6T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3WENKMWMyVWdjM1J5YVdOMFhDSTdablZ1WTNScGIyNGdiaWhsS1h0eVpYUjFjbTRnWlNZbVpTNWZYMlZ6VFc5a2RXeGxQMlU2ZTF3aVpHVm1ZWFZzZEZ3aU9tVjlmWEl1WDE5bGMwMXZaSFZzWlQwaE1EdDJZWElnYnoxbEtGd2lMaTR2WTI5eVpTMXFjeTl2WW1wbFkzUXZjMlYwTFhCeWIzUnZkSGx3WlMxdlpsd2lLU3hwUFc0b2J5a3NZVDFsS0Z3aUxpNHZZMjl5WlMxcWN5OXZZbXBsWTNRdlkzSmxZWFJsWENJcExITTliaWhoS1N4MVBXVW9YQ0l1TGk5b1pXeHdaWEp6TDNSNWNHVnZabHdpS1N4c1BXNG9kU2s3Y2x0Y0ltUmxabUYxYkhSY0lsMDlablZ1WTNScGIyNG9aU3gwS1h0cFppaGNJbVoxYm1OMGFXOXVYQ0loUFhSNWNHVnZaaUIwSmladWRXeHNJVDA5ZENsMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtGd2lVM1Z3WlhJZ1pYaHdjbVZ6YzJsdmJpQnRkWE4wSUdWcGRHaGxjaUJpWlNCdWRXeHNJRzl5SUdFZ1puVnVZM1JwYjI0c0lHNXZkQ0JjSWlzb1hDSjFibVJsWm1sdVpXUmNJajA5ZEhsd1pXOW1JSFEvWENKMWJtUmxabWx1WldSY0lqb29NQ3hzVzF3aVpHVm1ZWFZzZEZ3aVhTa29kQ2twS1R0bExuQnliM1J2ZEhsd1pUMG9NQ3h6VzF3aVpHVm1ZWFZzZEZ3aVhTa29kQ1ltZEM1d2NtOTBiM1I1Y0dVc2UyTnZibk4wY25WamRHOXlPbnQyWVd4MVpUcGxMR1Z1ZFcxbGNtRmliR1U2SVRFc2QzSnBkR0ZpYkdVNklUQXNZMjl1Wm1sbmRYSmhZbXhsT2lFd2ZYMHBMSFFtSmlocFcxd2laR1ZtWVhWc2RGd2lYVDhvTUN4cFcxd2laR1ZtWVhWc2RGd2lYU2tvWlN4MEtUcGxMbDlmY0hKdmRHOWZYejEwS1gxOUxIdGNJaTR1TDJOdmNtVXRhbk12YjJKcVpXTjBMMk55WldGMFpWd2lPakVzWENJdUxpOWpiM0psTFdwekwyOWlhbVZqZEM5elpYUXRjSEp2ZEc5MGVYQmxMVzltWENJNk55eGNJaTR1TDJobGJIQmxjbk12ZEhsd1pXOW1YQ0k2TVRWOVhTd3hORHBiWm5WdVkzUnBiMjRvWlN4MExISXBlMXdpZFhObElITjBjbWxqZEZ3aU8yWjFibU4wYVc5dUlHNG9aU2w3Y21WMGRYSnVJR1VtSm1VdVgxOWxjMDF2WkhWc1pUOWxPbnRjSW1SbFptRjFiSFJjSWpwbGZYMXlMbDlmWlhOTmIyUjFiR1U5SVRBN2RtRnlJRzg5WlNoY0lpNHVMMmhsYkhCbGNuTXZkSGx3Wlc5bVhDSXBMR2s5YmlodktUdHlXMXdpWkdWbVlYVnNkRndpWFQxbWRXNWpkR2x2YmlobExIUXBlMmxtS0NGbEtYUm9jbTkzSUc1bGR5QlNaV1psY21WdVkyVkZjbkp2Y2loY0luUm9hWE1nYUdGemJpZDBJR0psWlc0Z2FXNXBkR2xoYkdselpXUWdMU0J6ZFhCbGNpZ3BJR2hoYzI0bmRDQmlaV1Z1SUdOaGJHeGxaRndpS1R0eVpYUjFjbTRoZEh4OFhDSnZZbXBsWTNSY0lpRTlQU2hjSW5WdVpHVm1hVzVsWkZ3aVBUMTBlWEJsYjJZZ2REOWNJblZ1WkdWbWFXNWxaRndpT2lnd0xHbGJYQ0prWldaaGRXeDBYQ0pkS1NoMEtTa21KbHdpWm5WdVkzUnBiMjVjSWlFOWRIbHdaVzltSUhRL1pUcDBmWDBzZTF3aUxpNHZhR1ZzY0dWeWN5OTBlWEJsYjJaY0lqb3hOWDFkTERFMU9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN1hDSjFjMlVnYzNSeWFXTjBYQ0k3Wm5WdVkzUnBiMjRnYmlobEtYdHlaWFIxY200Z1pTWW1aUzVmWDJWelRXOWtkV3hsUDJVNmUxd2laR1ZtWVhWc2RGd2lPbVY5ZlhJdVgxOWxjMDF2WkhWc1pUMGhNRHQyWVhJZ2J6MWxLRndpTGk0dlkyOXlaUzFxY3k5emVXMWliMnd2YVhSbGNtRjBiM0pjSWlrc2FUMXVLRzhwTEdFOVpTaGNJaTR1TDJOdmNtVXRhbk12YzNsdFltOXNYQ0lwTEhNOWJpaGhLU3gxUFZ3aVpuVnVZM1JwYjI1Y0lqMDlkSGx3Wlc5bUlITmJYQ0prWldaaGRXeDBYQ0pkSmlaY0luTjViV0p2YkZ3aVBUMTBlWEJsYjJZZ2FWdGNJbVJsWm1GMWJIUmNJbDAvWm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUhSNWNHVnZaaUJsZlRwbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z1pTWW1YQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnYzF0Y0ltUmxabUYxYkhSY0lsMG1KbVV1WTI5dWMzUnlkV04wYjNJOVBUMXpXMXdpWkdWbVlYVnNkRndpWFQ5Y0luTjViV0p2YkZ3aU9uUjVjR1Z2WmlCbGZUdHlXMXdpWkdWbVlYVnNkRndpWFQxY0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQnpXMXdpWkdWbVlYVnNkRndpWFNZbVhDSnplVzFpYjJ4Y0lqMDlQWFVvYVZ0Y0ltUmxabUYxYkhSY0lsMHBQMloxYm1OMGFXOXVLR1VwZTNKbGRIVnlibHdpZFc1a1pXWnBibVZrWENJOVBYUjVjR1Z2WmlCbFAxd2lkVzVrWldacGJtVmtYQ0k2ZFNobEtYMDZablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJR1VtSmx3aVpuVnVZM1JwYjI1Y0lqMDlkSGx3Wlc5bUlITmJYQ0prWldaaGRXeDBYQ0pkSmlabExtTnZibk4wY25WamRHOXlQVDA5YzF0Y0ltUmxabUYxYkhSY0lsMC9YQ0p6ZVcxaWIyeGNJanBjSW5WdVpHVm1hVzVsWkZ3aVBUMTBlWEJsYjJZZ1pUOWNJblZ1WkdWbWFXNWxaRndpT25Vb1pTbDlmU3g3WENJdUxpOWpiM0psTFdwekwzTjViV0p2YkZ3aU9qZ3NYQ0l1TGk5amIzSmxMV3B6TDNONWJXSnZiQzlwZEdWeVlYUnZjbHdpT2psOVhTd3hOanBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1F1Wlhod2IzSjBjejFsS0Z3aWNtVm5aVzVsY21GMGIzSXRjblZ1ZEdsdFpWd2lLWDBzZTF3aWNtVm5aVzVsY21GMGIzSXRjblZ1ZEdsdFpWd2lPams1ZlYwc01UYzZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdGxLRndpTGk0dkxpNHZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbU55WldGMFpWd2lLVHQyWVhJZ2JqMWxLRndpTGk0dkxpNHZiVzlrZFd4bGN5OWZZMjl5WlZ3aUtTNVBZbXBsWTNRN2RDNWxlSEJ2Y25SelBXWjFibU4wYVc5dUtHVXNkQ2w3Y21WMGRYSnVJRzR1WTNKbFlYUmxLR1VzZENsOWZTeDdYQ0l1TGk4dUxpOXRiMlIxYkdWekwxOWpiM0psWENJNk16RXNYQ0l1TGk4dUxpOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVZM0psWVhSbFhDSTZPRFY5WFN3eE9EcGJablZ1WTNScGIyNG9aU3gwTEhJcGUyVW9YQ0l1TGk4dUxpOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVaR1ZtYVc1bExYQnliM0JsY25SNVhDSXBPM1poY2lCdVBXVW9YQ0l1TGk4dUxpOXRiMlIxYkdWekwxOWpiM0psWENJcExrOWlhbVZqZER0MExtVjRjRzl5ZEhNOVpuVnVZM1JwYjI0b1pTeDBMSElwZTNKbGRIVnliaUJ1TG1SbFptbHVaVkJ5YjNCbGNuUjVLR1VzZEN4eUtYMTlMSHRjSWk0dUx5NHVMMjF2WkhWc1pYTXZYMk52Y21WY0lqb3pNU3hjSWk0dUx5NHVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVrWldacGJtVXRjSEp2Y0dWeWRIbGNJam80Tm4xZExERTVPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdaU2hjSWk0dUx5NHVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVtY21WbGVtVmNJaWtzZEM1bGVIQnZjblJ6UFdVb1hDSXVMaTh1TGk5dGIyUjFiR1Z6TDE5amIzSmxYQ0lwTGs5aWFtVmpkQzVtY21WbGVtVjlMSHRjSWk0dUx5NHVMMjF2WkhWc1pYTXZYMk52Y21WY0lqb3pNU3hjSWk0dUx5NHVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVtY21WbGVtVmNJam80TjMxZExESXdPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdaU2hjSWk0dUx5NHVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVuWlhRdGIzZHVMWEJ5YjNCbGNuUjVMV1JsYzJOeWFYQjBiM0pjSWlrN2RtRnlJRzQ5WlNoY0lpNHVMeTR1TDIxdlpIVnNaWE12WDJOdmNtVmNJaWt1VDJKcVpXTjBPM1F1Wlhod2IzSjBjejFtZFc1amRHbHZiaWhsTEhRcGUzSmxkSFZ5YmlCdUxtZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2lobExIUXBmWDBzZTF3aUxpNHZMaTR2Ylc5a2RXeGxjeTlmWTI5eVpWd2lPak14TEZ3aUxpNHZMaTR2Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG1kbGRDMXZkMjR0Y0hKdmNHVnlkSGt0WkdWelkzSnBjSFJ2Y2x3aU9qZzRmVjBzTWpFNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0bEtGd2lMaTR2TGk0dmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtZGxkQzF3Y205MGIzUjVjR1V0YjJaY0lpa3NkQzVsZUhCdmNuUnpQV1VvWENJdUxpOHVMaTl0YjJSMWJHVnpMMTlqYjNKbFhDSXBMazlpYW1WamRDNW5aWFJRY205MGIzUjVjR1ZQWm4wc2Uxd2lMaTR2TGk0dmJXOWtkV3hsY3k5ZlkyOXlaVndpT2pNeExGd2lMaTR2TGk0dmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtZGxkQzF3Y205MGIzUjVjR1V0YjJaY0lqbzRPWDFkTERJeU9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN1pTaGNJaTR1THk0dUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNXJaWGx6WENJcExIUXVaWGh3YjNKMGN6MWxLRndpTGk0dkxpNHZiVzlrZFd4bGN5OWZZMjl5WlZ3aUtTNVBZbXBsWTNRdWEyVjVjMzBzZTF3aUxpNHZMaTR2Ylc5a2RXeGxjeTlmWTI5eVpWd2lPak14TEZ3aUxpNHZMaTR2Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG10bGVYTmNJam81TUgxZExESXpPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdaU2hjSWk0dUx5NHVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzV6WlhRdGNISnZkRzkwZVhCbExXOW1YQ0lwTEhRdVpYaHdiM0owY3oxbEtGd2lMaTR2TGk0dmJXOWtkV3hsY3k5ZlkyOXlaVndpS1M1UFltcGxZM1F1YzJWMFVISnZkRzkwZVhCbFQyWjlMSHRjSWk0dUx5NHVMMjF2WkhWc1pYTXZYMk52Y21WY0lqb3pNU3hjSWk0dUx5NHVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzV6WlhRdGNISnZkRzkwZVhCbExXOW1YQ0k2T1RGOVhTd3lORHBiWm5WdVkzUnBiMjRvWlN4MExISXBlMlVvWENJdUxpOHVMaTl0YjJSMWJHVnpMMlZ6Tmk1emVXMWliMnhjSWlrc1pTaGNJaTR1THk0dUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNTBieTF6ZEhKcGJtZGNJaWtzWlNoY0lpNHVMeTR1TDIxdlpIVnNaWE12WlhNM0xuTjViV0p2YkM1aGMzbHVZeTFwZEdWeVlYUnZjbHdpS1N4bEtGd2lMaTR2TGk0dmJXOWtkV3hsY3k5bGN6Y3VjM2x0WW05c0xtOWljMlZ5ZG1GaWJHVmNJaWtzZEM1bGVIQnZjblJ6UFdVb1hDSXVMaTh1TGk5dGIyUjFiR1Z6TDE5amIzSmxYQ0lwTGxONWJXSnZiSDBzZTF3aUxpNHZMaTR2Ylc5a2RXeGxjeTlmWTI5eVpWd2lPak14TEZ3aUxpNHZMaTR2Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG5SdkxYTjBjbWx1WjF3aU9qa3lMRndpTGk0dkxpNHZiVzlrZFd4bGN5OWxjell1YzNsdFltOXNYQ0k2T1RRc1hDSXVMaTh1TGk5dGIyUjFiR1Z6TDJWek55NXplVzFpYjJ3dVlYTjVibU10YVhSbGNtRjBiM0pjSWpvNU5TeGNJaTR1THk0dUwyMXZaSFZzWlhNdlpYTTNMbk41YldKdmJDNXZZbk5sY25aaFlteGxYQ0k2T1RaOVhTd3lOVHBiWm5WdVkzUnBiMjRvWlN4MExISXBlMlVvWENJdUxpOHVMaTl0YjJSMWJHVnpMMlZ6Tmk1emRISnBibWN1YVhSbGNtRjBiM0pjSWlrc1pTaGNJaTR1THk0dUwyMXZaSFZzWlhNdmQyVmlMbVJ2YlM1cGRHVnlZV0pzWlZ3aUtTeDBMbVY0Y0c5eWRITTlaU2hjSWk0dUx5NHVMMjF2WkhWc1pYTXZYM2RyY3kxbGVIUmNJaWt1WmloY0ltbDBaWEpoZEc5eVhDSXBmU3g3WENJdUxpOHVMaTl0YjJSMWJHVnpMMTkzYTNNdFpYaDBYQ0k2T0RJc1hDSXVMaTh1TGk5dGIyUjFiR1Z6TDJWek5pNXpkSEpwYm1jdWFYUmxjbUYwYjNKY0lqbzVNeXhjSWk0dUx5NHVMMjF2WkhWc1pYTXZkMlZpTG1SdmJTNXBkR1Z5WVdKc1pWd2lPamszZlYwc01qWTZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDBMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU2w3YVdZb1hDSm1kVzVqZEdsdmJsd2lJVDEwZVhCbGIyWWdaU2wwYUhKdmR5QlVlWEJsUlhKeWIzSW9aU3RjSWlCcGN5QnViM1FnWVNCbWRXNWpkR2x2YmlGY0lpazdjbVYwZFhKdUlHVjlmU3g3ZlYwc01qYzZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDBMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9LWHQ5ZlN4N2ZWMHNNamc2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMWxLRndpTGk5ZmFYTXRiMkpxWldOMFhDSXBPM1F1Wlhod2IzSjBjejFtZFc1amRHbHZiaWhsS1h0cFppZ2hiaWhsS1NsMGFISnZkeUJVZVhCbFJYSnliM0lvWlN0Y0lpQnBjeUJ1YjNRZ1lXNGdiMkpxWldOMElWd2lLVHR5WlhSMWNtNGdaWDE5TEh0Y0lpNHZYMmx6TFc5aWFtVmpkRndpT2pRM2ZWMHNNams2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMWxLRndpTGk5ZmRHOHRhVzlpYW1WamRGd2lLU3h2UFdVb1hDSXVMMTkwYnkxc1pXNW5kR2hjSWlrc2FUMWxLRndpTGk5ZmRHOHRhVzVrWlhoY0lpazdkQzVsZUhCdmNuUnpQV1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJtZFc1amRHbHZiaWgwTEhJc1lTbDdkbUZ5SUhNc2RUMXVLSFFwTEd3OWJ5aDFMbXhsYm1kMGFDa3NZejFwS0dFc2JDazdhV1lvWlNZbWNpRTljaWw3Wm05eUtEdHNQbU03S1dsbUtITTlkVnRqS3l0ZExITWhQWE1wY21WMGRYSnVJVEI5Wld4elpTQm1iM0lvTzJ3K1l6dGpLeXNwYVdZb0tHVjhmR01nYVc0Z2RTa21KblZiWTEwOVBUMXlLWEpsZEhWeWJpQmxmSHhqZkh3d08zSmxkSFZ5YmlGbEppWXRNWDE5ZlN4N1hDSXVMMTkwYnkxcGJtUmxlRndpT2pjMExGd2lMaTlmZEc4dGFXOWlhbVZqZEZ3aU9qYzJMRndpTGk5ZmRHOHRiR1Z1WjNSb1hDSTZOemQ5WFN3ek1EcGJablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFh0OUxuUnZVM1J5YVc1bk8zUXVaWGh3YjNKMGN6MW1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdiaTVqWVd4c0tHVXBMbk5zYVdObEtEZ3NMVEVwZlgwc2UzMWRMRE14T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDlkQzVsZUhCdmNuUnpQWHQyWlhKemFXOXVPbHdpTWk0MExqQmNJbjA3WENKdWRXMWlaWEpjSWowOWRIbHdaVzltSUY5ZlpTWW1LRjlmWlQxdUtYMHNlMzFkTERNeU9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5WlNoY0lpNHZYMkV0Wm5WdVkzUnBiMjVjSWlrN2RDNWxlSEJ2Y25SelBXWjFibU4wYVc5dUtHVXNkQ3h5S1h0cFppaHVLR1VwTEhadmFXUWdNRDA5UFhRcGNtVjBkWEp1SUdVN2MzZHBkR05vS0hJcGUyTmhjMlVnTVRweVpYUjFjbTRnWm5WdVkzUnBiMjRvY2lsN2NtVjBkWEp1SUdVdVkyRnNiQ2gwTEhJcGZUdGpZWE5sSURJNmNtVjBkWEp1SUdaMWJtTjBhVzl1S0hJc2JpbDdjbVYwZFhKdUlHVXVZMkZzYkNoMExISXNiaWw5TzJOaGMyVWdNenB5WlhSMWNtNGdablZ1WTNScGIyNG9jaXh1TEc4cGUzSmxkSFZ5YmlCbExtTmhiR3dvZEN4eUxHNHNieWw5ZlhKbGRIVnliaUJtZFc1amRHbHZiaWdwZTNKbGRIVnliaUJsTG1Gd2NHeDVLSFFzWVhKbmRXMWxiblJ6S1gxOWZTeDdYQ0l1TDE5aExXWjFibU4wYVc5dVhDSTZNalo5WFN3ek16cGJablZ1WTNScGIyNG9aU3gwTEhJcGUzUXVaWGh3YjNKMGN6MW1kVzVqZEdsdmJpaGxLWHRwWmloMmIybGtJREE5UFdVcGRHaHliM2NnVkhsd1pVVnljbTl5S0Z3aVEyRnVKM1FnWTJGc2JDQnRaWFJvYjJRZ2IyNGdJRndpSzJVcE8zSmxkSFZ5YmlCbGZYMHNlMzFkTERNME9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RDNWxlSEJ2Y25SelBTRmxLRndpTGk5ZlptRnBiSE5jSWlrb1puVnVZM1JwYjI0b0tYdHlaWFIxY200Z055RTlUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0h0OUxGd2lZVndpTEh0blpYUTZablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdOMzE5S1M1aGZTbDlMSHRjSWk0dlgyWmhhV3h6WENJNk16bDlYU3d6TlRwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQV1VvWENJdUwxOXBjeTF2WW1wbFkzUmNJaWtzYnoxbEtGd2lMaTlmWjJ4dlltRnNYQ0lwTG1SdlkzVnRaVzUwTEdrOWJpaHZLU1ltYmlodkxtTnlaV0YwWlVWc1pXMWxiblFwTzNRdVpYaHdiM0owY3oxbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z2FUOXZMbU55WldGMFpVVnNaVzFsYm5Rb1pTazZlMzE5ZlN4N1hDSXVMMTluYkc5aVlXeGNJam8wTUN4Y0lpNHZYMmx6TFc5aWFtVmpkRndpT2pRM2ZWMHNNelk2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQwTG1WNGNHOXlkSE05WENKamIyNXpkSEoxWTNSdmNpeG9ZWE5QZDI1UWNtOXdaWEowZVN4cGMxQnliM1J2ZEhsd1pVOW1MSEJ5YjNCbGNuUjVTWE5GYm5WdFpYSmhZbXhsTEhSdlRHOWpZV3hsVTNSeWFXNW5MSFJ2VTNSeWFXNW5MSFpoYkhWbFQyWmNJaTV6Y0d4cGRDaGNJaXhjSWlsOUxIdDlYU3d6TnpwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQV1VvWENJdUwxOXZZbXBsWTNRdGEyVjVjMXdpS1N4dlBXVW9YQ0l1TDE5dlltcGxZM1F0WjI5d2Mxd2lLU3hwUFdVb1hDSXVMMTl2WW1wbFkzUXRjR2xsWENJcE8zUXVaWGh3YjNKMGN6MW1kVzVqZEdsdmJpaGxLWHQyWVhJZ2REMXVLR1VwTEhJOWJ5NW1PMmxtS0hJcFptOXlLSFpoY2lCaExITTljaWhsS1N4MVBXa3VaaXhzUFRBN2N5NXNaVzVuZEdnK2JEc3BkUzVqWVd4c0tHVXNZVDF6VzJ3cksxMHBKaVowTG5CMWMyZ29ZU2s3Y21WMGRYSnVJSFI5ZlN4N1hDSXVMMTl2WW1wbFkzUXRaMjl3YzF3aU9qWXhMRndpTGk5ZmIySnFaV04wTFd0bGVYTmNJam8yTkN4Y0lpNHZYMjlpYW1WamRDMXdhV1ZjSWpvMk5YMWRMRE00T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDlaU2hjSWk0dlgyZHNiMkpoYkZ3aUtTeHZQV1VvWENJdUwxOWpiM0psWENJcExHazlaU2hjSWk0dlgyTjBlRndpS1N4aFBXVW9YQ0l1TDE5b2FXUmxYQ0lwTEhNOVhDSndjbTkwYjNSNWNHVmNJaXgxUFdaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JDeGpMR1lzY0QxbEpuVXVSaXhrUFdVbWRTNUhMR2c5WlNaMUxsTXNlVDFsSm5VdVVDeHRQV1VtZFM1Q0xIWTlaU1oxTGxjc1h6MWtQMjg2YjF0MFhYeDhLRzliZEYwOWUzMHBMR0k5WDF0elhTeG5QV1EvYmpwb1AyNWJkRjA2S0c1YmRGMThmSHQ5S1Z0elhUdGtKaVlvY2oxMEtUdG1iM0lvYkNCcGJpQnlLV005SVhBbUptY21Kblp2YVdRZ01DRTlQV2RiYkYwc1l5WW1iQ0JwYmlCZmZId29aajFqUDJkYmJGMDZjbHRzWFN4ZlcyeGRQV1FtSmx3aVpuVnVZM1JwYjI1Y0lpRTlkSGx3Wlc5bUlHZGJiRjAvY2x0c1hUcHRKaVpqUDJrb1ppeHVLVHAySmlablcyeGRQVDFtUDJaMWJtTjBhVzl1S0dVcGUzWmhjaUIwUFdaMWJtTjBhVzl1S0hRc2NpeHVLWHRwWmloMGFHbHpJR2x1YzNSaGJtTmxiMllnWlNsN2MzZHBkR05vS0dGeVozVnRaVzUwY3k1c1pXNW5kR2dwZTJOaGMyVWdNRHB5WlhSMWNtNGdibVYzSUdVN1kyRnpaU0F4T25KbGRIVnliaUJ1WlhjZ1pTaDBLVHRqWVhObElESTZjbVYwZFhKdUlHNWxkeUJsS0hRc2NpbDljbVYwZFhKdUlHNWxkeUJsS0hRc2NpeHVLWDF5WlhSMWNtNGdaUzVoY0hCc2VTaDBhR2x6TEdGeVozVnRaVzUwY3lsOU8zSmxkSFZ5YmlCMFczTmRQV1ZiYzEwc2RIMG9aaWs2ZVNZbVhDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdaajlwS0VaMWJtTjBhVzl1TG1OaGJHd3NaaWs2Wml4NUppWW9LRjh1ZG1seWRIVmhiSHg4S0Y4dWRtbHlkSFZoYkQxN2ZTa3BXMnhkUFdZc1pTWjFMbEltSm1JbUppRmlXMnhkSmlaaEtHSXNiQ3htS1NrcGZUdDFMa1k5TVN4MUxrYzlNaXgxTGxNOU5DeDFMbEE5T0N4MUxrSTlNVFlzZFM1WFBUTXlMSFV1VlQwMk5DeDFMbEk5TVRJNExIUXVaWGh3YjNKMGN6MTFmU3g3WENJdUwxOWpiM0psWENJNk16RXNYQ0l1TDE5amRIaGNJam96TWl4Y0lpNHZYMmRzYjJKaGJGd2lPalF3TEZ3aUxpOWZhR2xrWlZ3aU9qUXlmVjBzTXprNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MExtVjRjRzl5ZEhNOVpuVnVZM1JwYjI0b1pTbDdkSEo1ZTNKbGRIVnliaUVoWlNncGZXTmhkR05vS0hRcGUzSmxkSFZ5YmlFd2ZYMTlMSHQ5WFN3ME1EcGJablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFhRdVpYaHdiM0owY3oxY0luVnVaR1ZtYVc1bFpGd2lJVDEwZVhCbGIyWWdkMmx1Wkc5M0ppWjNhVzVrYjNjdVRXRjBhRDA5VFdGMGFEOTNhVzVrYjNjNlhDSjFibVJsWm1sdVpXUmNJaUU5ZEhsd1pXOW1JSE5sYkdZbUpuTmxiR1l1VFdGMGFEMDlUV0YwYUQ5elpXeG1Pa1oxYm1OMGFXOXVLRndpY21WMGRYSnVJSFJvYVhOY0lpa29LVHRjSW01MWJXSmxjbHdpUFQxMGVYQmxiMllnWDE5bkppWW9YMTluUFc0cGZTeDdmVjBzTkRFNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajE3ZlM1b1lYTlBkMjVRY205d1pYSjBlVHQwTG1WNGNHOXlkSE05Wm5WdVkzUnBiMjRvWlN4MEtYdHlaWFIxY200Z2JpNWpZV3hzS0dVc2RDbDlmU3g3ZlYwc05ESTZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxbEtGd2lMaTlmYjJKcVpXTjBMV1J3WENJcExHODlaU2hjSWk0dlgzQnliM0JsY25SNUxXUmxjMk5jSWlrN2RDNWxlSEJ2Y25SelBXVW9YQ0l1TDE5a1pYTmpjbWx3ZEc5eWMxd2lLVDltZFc1amRHbHZiaWhsTEhRc2NpbDdjbVYwZFhKdUlHNHVaaWhsTEhRc2J5Z3hMSElwS1gwNlpuVnVZM1JwYjI0b1pTeDBMSElwZTNKbGRIVnliaUJsVzNSZFBYSXNaWDE5TEh0Y0lpNHZYMlJsYzJOeWFYQjBiM0p6WENJNk16UXNYQ0l1TDE5dlltcGxZM1F0WkhCY0lqbzFOaXhjSWk0dlgzQnliM0JsY25SNUxXUmxjMk5jSWpvMk4zMWRMRFF6T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZEM1bGVIQnZjblJ6UFdVb1hDSXVMMTluYkc5aVlXeGNJaWt1Wkc5amRXMWxiblFtSm1SdlkzVnRaVzUwTG1SdlkzVnRaVzUwUld4bGJXVnVkSDBzZTF3aUxpOWZaMnh2WW1Gc1hDSTZOREI5WFN3ME5EcGJablZ1WTNScGIyNG9aU3gwTEhJcGUzUXVaWGh3YjNKMGN6MGhaU2hjSWk0dlgyUmxjMk55YVhCMGIzSnpYQ0lwSmlZaFpTaGNJaTR2WDJaaGFXeHpYQ0lwS0daMWJtTjBhVzl1S0NsN2NtVjBkWEp1SURjaFBVOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsS0Z3aUxpOWZaRzl0TFdOeVpXRjBaVndpS1NoY0ltUnBkbHdpS1N4Y0ltRmNJaXg3WjJWME9tWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlEZDlmU2t1WVgwcGZTeDdYQ0l1TDE5a1pYTmpjbWx3ZEc5eWMxd2lPak0wTEZ3aUxpOWZaRzl0TFdOeVpXRjBaVndpT2pNMUxGd2lMaTlmWm1GcGJITmNJam96T1gxZExEUTFPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OVpTaGNJaTR2WDJOdlpsd2lLVHQwTG1WNGNHOXlkSE05VDJKcVpXTjBLRndpZWx3aUtTNXdjbTl3WlhKMGVVbHpSVzUxYldWeVlXSnNaU2d3S1Q5UFltcGxZM1E2Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1WENKVGRISnBibWRjSWowOWJpaGxLVDlsTG5Od2JHbDBLRndpWENJcE9rOWlhbVZqZENobEtYMTlMSHRjSWk0dlgyTnZabHdpT2pNd2ZWMHNORFk2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMWxLRndpTGk5ZlkyOW1YQ0lwTzNRdVpYaHdiM0owY3oxQmNuSmhlUzVwYzBGeWNtRjVmSHhtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTVjSWtGeWNtRjVYQ0k5UFc0b1pTbDlmU3g3WENJdUwxOWpiMlpjSWpvek1IMWRMRFEzT2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZEM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0dVcGUzSmxkSFZ5Ymx3aWIySnFaV04wWENJOVBYUjVjR1Z2WmlCbFAyNTFiR3doUFQxbE9sd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1JR1Y5ZlN4N2ZWMHNORGc2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHRjSW5WelpTQnpkSEpwWTNSY0lqdDJZWElnYmoxbEtGd2lMaTlmYjJKcVpXTjBMV055WldGMFpWd2lLU3h2UFdVb1hDSXVMMTl3Y205d1pYSjBlUzFrWlhOalhDSXBMR2s5WlNoY0lpNHZYM05sZEMxMGJ5MXpkSEpwYm1jdGRHRm5YQ0lwTEdFOWUzMDdaU2hjSWk0dlgyaHBaR1ZjSWlrb1lTeGxLRndpTGk5ZmQydHpYQ0lwS0Z3aWFYUmxjbUYwYjNKY0lpa3NablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdkR2hwYzMwcExIUXVaWGh3YjNKMGN6MW1kVzVqZEdsdmJpaGxMSFFzY2lsN1pTNXdjbTkwYjNSNWNHVTliaWhoTEh0dVpYaDBPbThvTVN4eUtYMHBMR2tvWlN4MEsxd2lJRWwwWlhKaGRHOXlYQ0lwZlgwc2Uxd2lMaTlmYUdsa1pWd2lPalF5TEZ3aUxpOWZiMkpxWldOMExXTnlaV0YwWlZ3aU9qVTFMRndpTGk5ZmNISnZjR1Z5ZEhrdFpHVnpZMXdpT2pZM0xGd2lMaTlmYzJWMExYUnZMWE4wY21sdVp5MTBZV2RjSWpvM01DeGNJaTR2WDNkcmMxd2lPamd6ZlYwc05EazZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdGNJblZ6WlNCemRISnBZM1JjSWp0MllYSWdiajFsS0Z3aUxpOWZiR2xpY21GeWVWd2lLU3h2UFdVb1hDSXVMMTlsZUhCdmNuUmNJaWtzYVQxbEtGd2lMaTlmY21Wa1pXWnBibVZjSWlrc1lUMWxLRndpTGk5ZmFHbGtaVndpS1N4elBXVW9YQ0l1TDE5b1lYTmNJaWtzZFQxbEtGd2lMaTlmYVhSbGNtRjBiM0p6WENJcExHdzlaU2hjSWk0dlgybDBaWEl0WTNKbFlYUmxYQ0lwTEdNOVpTaGNJaTR2WDNObGRDMTBieTF6ZEhKcGJtY3RkR0ZuWENJcExHWTlaU2hjSWk0dlgyOWlhbVZqZEMxbmNHOWNJaWtzY0QxbEtGd2lMaTlmZDJ0elhDSXBLRndpYVhSbGNtRjBiM0pjSWlrc1pEMGhLRnRkTG10bGVYTW1KbHdpYm1WNGRGd2lhVzViWFM1clpYbHpLQ2twTEdnOVhDSkFRR2wwWlhKaGRHOXlYQ0lzZVQxY0ltdGxlWE5jSWl4dFBWd2lkbUZzZFdWelhDSXNkajFtZFc1amRHbHZiaWdwZTNKbGRIVnliaUIwYUdsemZUdDBMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU3gwTEhJc1h5eGlMR2NzUlNsN2JDaHlMSFFzWHlrN2RtRnlJR29zZHl4UExFMDlablZ1WTNScGIyNG9aU2w3YVdZb0lXUW1KbVVnYVc0Z1VpbHlaWFIxY200Z1VsdGxYVHR6ZDJsMFkyZ29aU2w3WTJGelpTQjVPbkpsZEhWeWJpQm1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQnVaWGNnY2loMGFHbHpMR1VwZlR0allYTmxJRzA2Y21WMGRYSnVJR1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJRzVsZHlCeUtIUm9hWE1zWlNsOWZYSmxkSFZ5YmlCbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCdVpYY2djaWgwYUdsekxHVXBmWDBzZUQxMEsxd2lJRWwwWlhKaGRHOXlYQ0lzVUQxaVBUMXRMR3M5SVRFc1VqMWxMbkJ5YjNSdmRIbHdaU3hUUFZKYmNGMThmRkpiYUYxOGZHSW1KbEpiWWwwc1FUMVRmSHhOS0dJcExGUTlZajlRUDAwb1hDSmxiblJ5YVdWelhDSXBPa0U2ZG05cFpDQXdMRTQ5WENKQmNuSmhlVndpUFQxMFAxSXVaVzUwY21sbGMzeDhVenBUTzJsbUtFNG1KaWhQUFdZb1RpNWpZV3hzS0c1bGR5QmxLU2tzVHlFOVBVOWlhbVZqZEM1d2NtOTBiM1I1Y0dVbUppaGpLRThzZUN3aE1Da3Nibng4Y3loUExIQXBmSHhoS0U4c2NDeDJLU2twTEZBbUpsTW1KbE11Ym1GdFpTRTlQVzBtSmloclBTRXdMRUU5Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnVXk1allXeHNLSFJvYVhNcGZTa3NiaVltSVVWOGZDRmtKaVloYXlZbVVsdHdYWHg4WVNoU0xIQXNRU2tzZFZ0MFhUMUJMSFZiZUYwOWRpeGlLV2xtS0dvOWUzWmhiSFZsY3pwUVAwRTZUU2h0S1N4clpYbHpPbWMvUVRwTktIa3BMR1Z1ZEhKcFpYTTZWSDBzUlNsbWIzSW9keUJwYmlCcUtYY2dhVzRnVW54OGFTaFNMSGNzYWx0M1hTazdaV3h6WlNCdktHOHVVQ3R2TGtZcUtHUjhmR3NwTEhRc2FpazdjbVYwZFhKdUlHcDlmU3g3WENJdUwxOWxlSEJ2Y25SY0lqb3pPQ3hjSWk0dlgyaGhjMXdpT2pReExGd2lMaTlmYUdsa1pWd2lPalF5TEZ3aUxpOWZhWFJsY2kxamNtVmhkR1ZjSWpvME9DeGNJaTR2WDJsMFpYSmhkRzl5YzF3aU9qVXhMRndpTGk5ZmJHbGljbUZ5ZVZ3aU9qVXpMRndpTGk5ZmIySnFaV04wTFdkd2Ixd2lPall5TEZ3aUxpOWZjbVZrWldacGJtVmNJam8yT0N4Y0lpNHZYM05sZEMxMGJ5MXpkSEpwYm1jdGRHRm5YQ0k2TnpBc1hDSXVMMTkzYTNOY0lqbzRNMzFkTERVd09sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RDNWxlSEJ2Y25SelBXWjFibU4wYVc5dUtHVXNkQ2w3Y21WMGRYSnVlM1poYkhWbE9uUXNaRzl1WlRvaElXVjlmWDBzZTMxZExEVXhPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkQzVsZUhCdmNuUnpQWHQ5ZlN4N2ZWMHNOVEk2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMWxLRndpTGk5ZmIySnFaV04wTFd0bGVYTmNJaWtzYnoxbEtGd2lMaTlmZEc4dGFXOWlhbVZqZEZ3aUtUdDBMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU3gwS1h0bWIzSW9kbUZ5SUhJc2FUMXZLR1VwTEdFOWJpaHBLU3h6UFdFdWJHVnVaM1JvTEhVOU1EdHpQblU3S1dsbUtHbGJjajFoVzNVcksxMWRQVDA5ZENseVpYUjFjbTRnY24xOUxIdGNJaTR2WDI5aWFtVmpkQzFyWlhselhDSTZOalFzWENJdUwxOTBieTFwYjJKcVpXTjBYQ0k2TnpaOVhTdzFNenBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1F1Wlhod2IzSjBjejBoTUgwc2UzMWRMRFUwT2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDlaU2hjSWk0dlgzVnBaRndpS1NoY0ltMWxkR0ZjSWlrc2J6MWxLRndpTGk5ZmFYTXRiMkpxWldOMFhDSXBMR2s5WlNoY0lpNHZYMmhoYzF3aUtTeGhQV1VvWENJdUwxOXZZbXBsWTNRdFpIQmNJaWt1Wml4elBUQXNkVDFQWW1wbFkzUXVhWE5GZUhSbGJuTnBZbXhsZkh4bWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlFd2ZTeHNQU0ZsS0Z3aUxpOWZabUZwYkhOY0lpa29ablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdkU2hQWW1wbFkzUXVjSEpsZG1WdWRFVjRkR1Z1YzJsdmJuTW9lMzBwS1gwcExHTTlablZ1WTNScGIyNG9aU2w3WVNobExHNHNlM1poYkhWbE9udHBPbHdpVDF3aUt5QXJLM01zZHpwN2ZYMTlLWDBzWmoxbWRXNWpkR2x2YmlobExIUXBlMmxtS0NGdktHVXBLWEpsZEhWeWJsd2ljM2x0WW05c1hDSTlQWFI1Y0dWdlppQmxQMlU2S0Z3aWMzUnlhVzVuWENJOVBYUjVjR1Z2WmlCbFAxd2lVMXdpT2x3aVVGd2lLU3RsTzJsbUtDRnBLR1VzYmlrcGUybG1LQ0YxS0dVcEtYSmxkSFZ5Ymx3aVJsd2lPMmxtS0NGMEtYSmxkSFZ5Ymx3aVJWd2lPMk1vWlNsOWNtVjBkWEp1SUdWYmJsMHVhWDBzY0QxbWRXNWpkR2x2YmlobExIUXBlMmxtS0NGcEtHVXNiaWtwZTJsbUtDRjFLR1VwS1hKbGRIVnliaUV3TzJsbUtDRjBLWEpsZEhWeWJpRXhPMk1vWlNsOWNtVjBkWEp1SUdWYmJsMHVkMzBzWkQxbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z2JDWW1hQzVPUlVWRUppWjFLR1VwSmlZaGFTaGxMRzRwSmlaaktHVXBMR1Y5TEdnOWRDNWxlSEJ2Y25SelBYdExSVms2Yml4T1JVVkVPaUV4TEdaaGMzUkxaWGs2Wml4blpYUlhaV0ZyT25Bc2IyNUdjbVZsZW1VNlpIMTlMSHRjSWk0dlgyWmhhV3h6WENJNk16a3NYQ0l1TDE5b1lYTmNJam8wTVN4Y0lpNHZYMmx6TFc5aWFtVmpkRndpT2pRM0xGd2lMaTlmYjJKcVpXTjBMV1J3WENJNk5UWXNYQ0l1TDE5MWFXUmNJam80TUgxZExEVTFPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OVpTaGNJaTR2WDJGdUxXOWlhbVZqZEZ3aUtTeHZQV1VvWENJdUwxOXZZbXBsWTNRdFpIQnpYQ0lwTEdrOVpTaGNJaTR2WDJWdWRXMHRZblZuTFd0bGVYTmNJaWtzWVQxbEtGd2lMaTlmYzJoaGNtVmtMV3RsZVZ3aUtTaGNJa2xGWDFCU1QxUlBYQ0lwTEhNOVpuVnVZM1JwYjI0b0tYdDlMSFU5WENKd2NtOTBiM1I1Y0dWY0lpeHNQV1oxYm1OMGFXOXVLQ2w3ZG1GeUlIUXNjajFsS0Z3aUxpOWZaRzl0TFdOeVpXRjBaVndpS1NoY0ltbG1jbUZ0WlZ3aUtTeHVQV2t1YkdWdVozUm9MRzg5WENJK1hDSTdabTl5S0hJdWMzUjViR1V1WkdsemNHeGhlVDFjSW01dmJtVmNJaXhsS0Z3aUxpOWZhSFJ0YkZ3aUtTNWhjSEJsYm1SRGFHbHNaQ2h5S1N4eUxuTnlZejFjSW1waGRtRnpZM0pwY0hRNlhDSXNkRDF5TG1OdmJuUmxiblJYYVc1a2IzY3VaRzlqZFcxbGJuUXNkQzV2Y0dWdUtDa3NkQzUzY21sMFpTaGNJanh6WTNKcGNIUStaRzlqZFcxbGJuUXVSajFQWW1wbFkzUThMM05qY21sd2RGd2lLMjhwTEhRdVkyeHZjMlVvS1N4c1BYUXVSanR1TFMwN0tXUmxiR1YwWlNCc1czVmRXMmxiYmwxZE8zSmxkSFZ5YmlCc0tDbDlPM1F1Wlhod2IzSjBjejFQWW1wbFkzUXVZM0psWVhSbGZIeG1kVzVqZEdsdmJpaGxMSFFwZTNaaGNpQnlPM0psZEhWeWJpQnVkV3hzSVQwOVpUOG9jMXQxWFQxdUtHVXBMSEk5Ym1WM0lITXNjMXQxWFQxdWRXeHNMSEpiWVYwOVpTazZjajFzS0Nrc2RtOXBaQ0F3UFQwOWREOXlPbThvY2l4MEtYMTlMSHRjSWk0dlgyRnVMVzlpYW1WamRGd2lPakk0TEZ3aUxpOWZaRzl0TFdOeVpXRjBaVndpT2pNMUxGd2lMaTlmWlc1MWJTMWlkV2N0YTJWNWMxd2lPak0yTEZ3aUxpOWZhSFJ0YkZ3aU9qUXpMRndpTGk5ZmIySnFaV04wTFdSd2Mxd2lPalUzTEZ3aUxpOWZjMmhoY21Wa0xXdGxlVndpT2pjeGZWMHNOVFk2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMWxLRndpTGk5ZllXNHRiMkpxWldOMFhDSXBMRzg5WlNoY0lpNHZYMmxsT0Mxa2IyMHRaR1ZtYVc1bFhDSXBMR2s5WlNoY0lpNHZYM1J2TFhCeWFXMXBkR2wyWlZ3aUtTeGhQVTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVR0eUxtWTlaU2hjSWk0dlgyUmxjMk55YVhCMGIzSnpYQ0lwUDA5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVUcG1kVzVqZEdsdmJpaGxMSFFzY2lsN2FXWW9iaWhsS1N4MFBXa29kQ3doTUNrc2JpaHlLU3h2S1hSeWVYdHlaWFIxY200Z1lTaGxMSFFzY2lsOVkyRjBZMmdvY3lsN2ZXbG1LRndpWjJWMFhDSnBiaUJ5Zkh4Y0luTmxkRndpYVc0Z2NpbDBhSEp2ZHlCVWVYQmxSWEp5YjNJb1hDSkJZMk5sYzNOdmNuTWdibTkwSUhOMWNIQnZjblJsWkNGY0lpazdjbVYwZFhKdVhDSjJZV3gxWlZ3aWFXNGdjaVltS0dWYmRGMDljaTUyWVd4MVpTa3NaWDE5TEh0Y0lpNHZYMkZ1TFc5aWFtVmpkRndpT2pJNExGd2lMaTlmWkdWelkzSnBjSFJ2Y25OY0lqb3pOQ3hjSWk0dlgybGxPQzFrYjIwdFpHVm1hVzVsWENJNk5EUXNYQ0l1TDE5MGJ5MXdjbWx0YVhScGRtVmNJam8zT1gxZExEVTNPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OVpTaGNJaTR2WDI5aWFtVmpkQzFrY0Z3aUtTeHZQV1VvWENJdUwxOWhiaTF2WW1wbFkzUmNJaWtzYVQxbEtGd2lMaTlmYjJKcVpXTjBMV3RsZVhOY0lpazdkQzVsZUhCdmNuUnpQV1VvWENJdUwxOWtaWE5qY21sd2RHOXljMXdpS1Q5UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRHbGxjenBtZFc1amRHbHZiaWhsTEhRcGUyOG9aU2s3Wm05eUtIWmhjaUJ5TEdFOWFTaDBLU3h6UFdFdWJHVnVaM1JvTEhVOU1EdHpQblU3S1c0dVppaGxMSEk5WVZ0MUt5dGRMSFJiY2wwcE8zSmxkSFZ5YmlCbGZYMHNlMXdpTGk5ZllXNHRiMkpxWldOMFhDSTZNamdzWENJdUwxOWtaWE5qY21sd2RHOXljMXdpT2pNMExGd2lMaTlmYjJKcVpXTjBMV1J3WENJNk5UWXNYQ0l1TDE5dlltcGxZM1F0YTJWNWMxd2lPalkwZlYwc05UZzZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxbEtGd2lMaTlmYjJKcVpXTjBMWEJwWlZ3aUtTeHZQV1VvWENJdUwxOXdjbTl3WlhKMGVTMWtaWE5qWENJcExHazlaU2hjSWk0dlgzUnZMV2x2WW1wbFkzUmNJaWtzWVQxbEtGd2lMaTlmZEc4dGNISnBiV2wwYVhabFhDSXBMSE05WlNoY0lpNHZYMmhoYzF3aUtTeDFQV1VvWENJdUwxOXBaVGd0Wkc5dExXUmxabWx1WlZ3aUtTeHNQVTlpYW1WamRDNW5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJN2NpNW1QV1VvWENJdUwxOWtaWE5qY21sd2RHOXljMXdpS1Q5c09tWjFibU4wYVc5dUtHVXNkQ2w3YVdZb1pUMXBLR1VwTEhROVlTaDBMQ0V3S1N4MUtYUnllWHR5WlhSMWNtNGdiQ2hsTEhRcGZXTmhkR05vS0hJcGUzMXBaaWh6S0dVc2RDa3BjbVYwZFhKdUlHOG9JVzR1Wmk1allXeHNLR1VzZENrc1pWdDBYU2w5ZlN4N1hDSXVMMTlrWlhOamNtbHdkRzl5YzF3aU9qTTBMRndpTGk5ZmFHRnpYQ0k2TkRFc1hDSXVMMTlwWlRndFpHOXRMV1JsWm1sdVpWd2lPalEwTEZ3aUxpOWZiMkpxWldOMExYQnBaVndpT2pZMUxGd2lMaTlmY0hKdmNHVnlkSGt0WkdWelkxd2lPalkzTEZ3aUxpOWZkRzh0YVc5aWFtVmpkRndpT2pjMkxGd2lMaTlmZEc4dGNISnBiV2wwYVhabFhDSTZOemw5WFN3MU9UcGJablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFdVb1hDSXVMMTkwYnkxcGIySnFaV04wWENJcExHODlaU2hjSWk0dlgyOWlhbVZqZEMxbmIzQnVYQ0lwTG1Zc2FUMTdmUzUwYjFOMGNtbHVaeXhoUFZ3aWIySnFaV04wWENJOVBYUjVjR1Z2WmlCM2FXNWtiM2NtSm5kcGJtUnZkeVltVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVRtRnRaWE0vVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVRtRnRaWE1vZDJsdVpHOTNLVHBiWFN4elBXWjFibU4wYVc5dUtHVXBlM1J5ZVh0eVpYUjFjbTRnYnlobEtYMWpZWFJqYUNoMEtYdHlaWFIxY200Z1lTNXpiR2xqWlNncGZYMDdkQzVsZUhCdmNuUnpMbVk5Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUdFbUpsd2lXMjlpYW1WamRDQlhhVzVrYjNkZFhDSTlQV2t1WTJGc2JDaGxLVDl6S0dVcE9tOG9iaWhsS1NsOWZTeDdYQ0l1TDE5dlltcGxZM1F0WjI5d2Jsd2lPall3TEZ3aUxpOWZkRzh0YVc5aWFtVmpkRndpT2pjMmZWMHNOakE2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMWxLRndpTGk5ZmIySnFaV04wTFd0bGVYTXRhVzUwWlhKdVlXeGNJaWtzYnoxbEtGd2lMaTlmWlc1MWJTMWlkV2N0YTJWNWMxd2lLUzVqYjI1allYUW9YQ0pzWlc1bmRHaGNJaXhjSW5CeWIzUnZkSGx3WlZ3aUtUdHlMbVk5VDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVRtRnRaWE44ZkdaMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCdUtHVXNieWw5ZlN4N1hDSXVMMTlsYm5WdExXSjFaeTFyWlhselhDSTZNellzWENJdUwxOXZZbXBsWTNRdGEyVjVjeTFwYm5SbGNtNWhiRndpT2pZemZWMHNOakU2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHR5TG1ZOVQySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVVM2x0WW05c2MzMHNlMzFkTERZeU9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5WlNoY0lpNHZYMmhoYzF3aUtTeHZQV1VvWENJdUwxOTBieTF2WW1wbFkzUmNJaWtzYVQxbEtGd2lMaTlmYzJoaGNtVmtMV3RsZVZ3aUtTaGNJa2xGWDFCU1QxUlBYQ0lwTEdFOVQySnFaV04wTG5CeWIzUnZkSGx3WlR0MExtVjRjRzl5ZEhNOVQySnFaV04wTG1kbGRGQnliM1J2ZEhsd1pVOW1mSHhtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnWlQxdktHVXBMRzRvWlN4cEtUOWxXMmxkT2x3aVpuVnVZM1JwYjI1Y0lqMDlkSGx3Wlc5bUlHVXVZMjl1YzNSeWRXTjBiM0ltSm1VZ2FXNXpkR0Z1WTJWdlppQmxMbU52Ym5OMGNuVmpkRzl5UDJVdVkyOXVjM1J5ZFdOMGIzSXVjSEp2ZEc5MGVYQmxPbVVnYVc1emRHRnVZMlZ2WmlCUFltcGxZM1EvWVRwdWRXeHNmWDBzZTF3aUxpOWZhR0Z6WENJNk5ERXNYQ0l1TDE5emFHRnlaV1F0YTJWNVhDSTZOekVzWENJdUwxOTBieTF2WW1wbFkzUmNJam8zT0gxZExEWXpPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OVpTaGNJaTR2WDJoaGMxd2lLU3h2UFdVb1hDSXVMMTkwYnkxcGIySnFaV04wWENJcExHazlaU2hjSWk0dlgyRnljbUY1TFdsdVkyeDFaR1Z6WENJcEtDRXhLU3hoUFdVb1hDSXVMMTl6YUdGeVpXUXRhMlY1WENJcEtGd2lTVVZmVUZKUFZFOWNJaWs3ZEM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0dVc2RDbDdkbUZ5SUhJc2N6MXZLR1VwTEhVOU1DeHNQVnRkTzJadmNpaHlJR2x1SUhNcGNpRTlZU1ltYmloekxISXBKaVpzTG5CMWMyZ29jaWs3Wm05eUtEdDBMbXhsYm1kMGFENTFPeWx1S0hNc2NqMTBXM1VySzEwcEppWW9mbWtvYkN4eUtYeDhiQzV3ZFhOb0tISXBLVHR5WlhSMWNtNGdiSDE5TEh0Y0lpNHZYMkZ5Y21GNUxXbHVZMngxWkdWelhDSTZNamtzWENJdUwxOW9ZWE5jSWpvME1TeGNJaTR2WDNOb1lYSmxaQzFyWlhsY0lqbzNNU3hjSWk0dlgzUnZMV2x2WW1wbFkzUmNJam8zTm4xZExEWTBPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OVpTaGNJaTR2WDI5aWFtVmpkQzFyWlhsekxXbHVkR1Z5Ym1Gc1hDSXBMRzg5WlNoY0lpNHZYMlZ1ZFcwdFluVm5MV3RsZVhOY0lpazdkQzVsZUhCdmNuUnpQVTlpYW1WamRDNXJaWGx6Zkh4bWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z2JpaGxMRzhwZlgwc2Uxd2lMaTlmWlc1MWJTMWlkV2N0YTJWNWMxd2lPak0yTEZ3aUxpOWZiMkpxWldOMExXdGxlWE10YVc1MFpYSnVZV3hjSWpvMk0zMWRMRFkxT2x0bWRXNWpkR2x2YmlobExIUXNjaWw3Y2k1bVBYdDlMbkJ5YjNCbGNuUjVTWE5GYm5WdFpYSmhZbXhsZlN4N2ZWMHNOalk2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMWxLRndpTGk5ZlpYaHdiM0owWENJcExHODlaU2hjSWk0dlgyTnZjbVZjSWlrc2FUMWxLRndpTGk5ZlptRnBiSE5jSWlrN2RDNWxlSEJ2Y25SelBXWjFibU4wYVc5dUtHVXNkQ2w3ZG1GeUlISTlLRzh1VDJKcVpXTjBmSHg3ZlNsYlpWMThmRTlpYW1WamRGdGxYU3hoUFh0OU8yRmJaVjA5ZENoeUtTeHVLRzR1VXl0dUxrWXFhU2htZFc1amRHbHZiaWdwZTNJb01TbDlLU3hjSWs5aWFtVmpkRndpTEdFcGZYMHNlMXdpTGk5ZlkyOXlaVndpT2pNeExGd2lMaTlmWlhod2IzSjBYQ0k2TXpnc1hDSXVMMTltWVdsc2Mxd2lPak01ZlYwc05qYzZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDBMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU3gwS1h0eVpYUjFjbTU3Wlc1MWJXVnlZV0pzWlRvaEtERW1aU2tzWTI5dVptbG5kWEpoWW14bE9pRW9NaVpsS1N4M2NtbDBZV0pzWlRvaEtEUW1aU2tzZG1Gc2RXVTZkSDE5ZlN4N2ZWMHNOamc2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQwTG1WNGNHOXlkSE05WlNoY0lpNHZYMmhwWkdWY0lpbDlMSHRjSWk0dlgyaHBaR1ZjSWpvME1uMWRMRFk1T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDlaU2hjSWk0dlgybHpMVzlpYW1WamRGd2lLU3h2UFdVb1hDSXVMMTloYmkxdlltcGxZM1JjSWlrc2FUMW1kVzVqZEdsdmJpaGxMSFFwZTJsbUtHOG9aU2tzSVc0b2RDa21KbTUxYkd3aFBUMTBLWFJvY205M0lGUjVjR1ZGY25KdmNpaDBLMXdpT2lCallXNG5kQ0J6WlhRZ1lYTWdjSEp2ZEc5MGVYQmxJVndpS1gwN2RDNWxlSEJ2Y25SelBYdHpaWFE2VDJKcVpXTjBMbk5sZEZCeWIzUnZkSGx3WlU5bWZId29YQ0pmWDNCeWIzUnZYMTljSW1sdWUzMC9ablZ1WTNScGIyNG9kQ3h5TEc0cGUzUnllWHR1UFdVb1hDSXVMMTlqZEhoY0lpa29SblZ1WTNScGIyNHVZMkZzYkN4bEtGd2lMaTlmYjJKcVpXTjBMV2R2Y0dSY0lpa3VaaWhQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMRndpWDE5d2NtOTBiMTlmWENJcExuTmxkQ3d5S1N4dUtIUXNXMTBwTEhJOUlTaDBJR2x1YzNSaGJtTmxiMllnUVhKeVlYa3BmV05oZEdOb0tHOHBlM0k5SVRCOWNtVjBkWEp1SUdaMWJtTjBhVzl1S0dVc2RDbDdjbVYwZFhKdUlHa29aU3gwS1N4eVAyVXVYMTl3Y205MGIxOWZQWFE2YmlobExIUXBMR1Y5ZlNoN2ZTd2hNU2s2ZG05cFpDQXdLU3hqYUdWamF6cHBmWDBzZTF3aUxpOWZZVzR0YjJKcVpXTjBYQ0k2TWpnc1hDSXVMMTlqZEhoY0lqb3pNaXhjSWk0dlgybHpMVzlpYW1WamRGd2lPalEzTEZ3aUxpOWZiMkpxWldOMExXZHZjR1JjSWpvMU9IMWRMRGN3T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDlaU2hjSWk0dlgyOWlhbVZqZEMxa2NGd2lLUzVtTEc4OVpTaGNJaTR2WDJoaGMxd2lLU3hwUFdVb1hDSXVMMTkzYTNOY0lpa29YQ0owYjFOMGNtbHVaMVJoWjF3aUtUdDBMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU3gwTEhJcGUyVW1KaUZ2S0dVOWNqOWxPbVV1Y0hKdmRHOTBlWEJsTEdrcEppWnVLR1VzYVN4N1kyOXVabWxuZFhKaFlteGxPaUV3TEhaaGJIVmxPblI5S1gxOUxIdGNJaTR2WDJoaGMxd2lPalF4TEZ3aUxpOWZiMkpxWldOMExXUndYQ0k2TlRZc1hDSXVMMTkzYTNOY0lqbzRNMzFkTERjeE9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5WlNoY0lpNHZYM05vWVhKbFpGd2lLU2hjSW10bGVYTmNJaWtzYnoxbEtGd2lMaTlmZFdsa1hDSXBPM1F1Wlhod2IzSjBjejFtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnYmx0bFhYeDhLRzViWlYwOWJ5aGxLU2w5ZlN4N1hDSXVMMTl6YUdGeVpXUmNJam8zTWl4Y0lpNHZYM1ZwWkZ3aU9qZ3dmVjBzTnpJNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajFsS0Z3aUxpOWZaMnh2WW1Gc1hDSXBMRzg5WENKZlgyTnZjbVV0YW5OZmMyaGhjbVZrWDE5Y0lpeHBQVzViYjExOGZDaHVXMjlkUFh0OUtUdDBMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJR2xiWlYxOGZDaHBXMlZkUFh0OUtYMTlMSHRjSWk0dlgyZHNiMkpoYkZ3aU9qUXdmVjBzTnpNNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajFsS0Z3aUxpOWZkRzh0YVc1MFpXZGxjbHdpS1N4dlBXVW9YQ0l1TDE5a1pXWnBibVZrWENJcE8zUXVaWGh3YjNKMGN6MW1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdablZ1WTNScGIyNG9kQ3h5S1h0MllYSWdhU3hoTEhNOVUzUnlhVzVuS0c4b2RDa3BMSFU5YmloeUtTeHNQWE11YkdWdVozUm9PM0psZEhWeWJpQjFQREI4ZkhVK1BXdy9aVDljSWx3aU9uWnZhV1FnTURvb2FUMXpMbU5vWVhKRGIyUmxRWFFvZFNrc2FUdzFOVEk1Tm54OGFUNDFOak14T1h4OGRTc3hQVDA5Ykh4OEtHRTljeTVqYUdGeVEyOWtaVUYwS0hVck1Ta3BQRFUyTXpJd2ZIeGhQalUzTXpRelAyVS9jeTVqYUdGeVFYUW9kU2s2YVRwbFAzTXVjMnhwWTJVb2RTeDFLeklwT2locExUVTFNamsyUER3eE1Da3JLR0V0TlRZek1qQXBLelkxTlRNMktYMTlmU3g3WENJdUwxOWtaV1pwYm1Wa1hDSTZNek1zWENJdUwxOTBieTFwYm5SbFoyVnlYQ0k2TnpWOVhTdzNORHBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdVBXVW9YQ0l1TDE5MGJ5MXBiblJsWjJWeVhDSXBMRzg5VFdGMGFDNXRZWGdzYVQxTllYUm9MbTFwYmp0MExtVjRjRzl5ZEhNOVpuVnVZM1JwYjI0b1pTeDBLWHR5WlhSMWNtNGdaVDF1S0dVcExHVThNRDl2S0dVcmRDd3dLVHBwS0dVc2RDbDlmU3g3WENJdUwxOTBieTFwYm5SbFoyVnlYQ0k2TnpWOVhTdzNOVHBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdVBVMWhkR2d1WTJWcGJDeHZQVTFoZEdndVpteHZiM0k3ZEM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCcGMwNWhUaWhsUFN0bEtUOHdPaWhsUGpBL2J6cHVLU2hsS1gxOUxIdDlYU3czTmpwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQV1VvWENJdUwxOXBiMkpxWldOMFhDSXBMRzg5WlNoY0lpNHZYMlJsWm1sdVpXUmNJaWs3ZEM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCdUtHOG9aU2twZlgwc2Uxd2lMaTlmWkdWbWFXNWxaRndpT2pNekxGd2lMaTlmYVc5aWFtVmpkRndpT2pRMWZWMHNOemM2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMWxLRndpTGk5ZmRHOHRhVzUwWldkbGNsd2lLU3h2UFUxaGRHZ3ViV2x1TzNRdVpYaHdiM0owY3oxbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z1pUNHdQMjhvYmlobEtTdzVNREEzTVRrNU1qVTBOelF3T1RreEtUb3dmWDBzZTF3aUxpOWZkRzh0YVc1MFpXZGxjbHdpT2pjMWZWMHNOemc2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMWxLRndpTGk5ZlpHVm1hVzVsWkZ3aUtUdDBMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJRTlpYW1WamRDaHVLR1VwS1gxOUxIdGNJaTR2WDJSbFptbHVaV1JjSWpvek0zMWRMRGM1T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDlaU2hjSWk0dlgybHpMVzlpYW1WamRGd2lLVHQwTG1WNGNHOXlkSE05Wm5WdVkzUnBiMjRvWlN4MEtYdHBaaWdoYmlobEtTbHlaWFIxY200Z1pUdDJZWElnY2l4dk8ybG1LSFFtSmx3aVpuVnVZM1JwYjI1Y0lqMDlkSGx3Wlc5bUtISTlaUzUwYjFOMGNtbHVaeWttSmlGdUtHODljaTVqWVd4c0tHVXBLU2x5WlhSMWNtNGdienRwWmloY0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppaHlQV1V1ZG1Gc2RXVlBaaWttSmlGdUtHODljaTVqWVd4c0tHVXBLU2x5WlhSMWNtNGdienRwWmlnaGRDWW1YQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllvY2oxbExuUnZVM1J5YVc1bktTWW1JVzRvYnoxeUxtTmhiR3dvWlNrcEtYSmxkSFZ5YmlCdk8zUm9jbTkzSUZSNWNHVkZjbkp2Y2loY0lrTmhiaWQwSUdOdmJuWmxjblFnYjJKcVpXTjBJSFJ2SUhCeWFXMXBkR2wyWlNCMllXeDFaVndpS1gxOUxIdGNJaTR2WDJsekxXOWlhbVZqZEZ3aU9qUTNmVjBzT0RBNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajB3TEc4OVRXRjBhQzV5WVc1a2IyMG9LVHQwTG1WNGNHOXlkSE05Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1WENKVGVXMWliMndvWENJdVkyOXVZMkYwS0hadmFXUWdNRDA5UFdVL1hDSmNJanBsTEZ3aUtWOWNJaXdvS3l0dUsyOHBMblJ2VTNSeWFXNW5LRE0yS1NsOWZTeDdmVjBzT0RFNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajFsS0Z3aUxpOWZaMnh2WW1Gc1hDSXBMRzg5WlNoY0lpNHZYMk52Y21WY0lpa3NhVDFsS0Z3aUxpOWZiR2xpY21GeWVWd2lLU3hoUFdVb1hDSXVMMTkzYTNNdFpYaDBYQ0lwTEhNOVpTaGNJaTR2WDI5aWFtVmpkQzFrY0Z3aUtTNW1PM1F1Wlhod2IzSjBjejFtZFc1amRHbHZiaWhsS1h0MllYSWdkRDF2TGxONWJXSnZiSHg4S0c4dVUzbHRZbTlzUFdrL2UzMDZiaTVUZVcxaWIyeDhmSHQ5S1R0Y0lsOWNJajA5WlM1amFHRnlRWFFvTUNsOGZHVWdhVzRnZEh4OGN5aDBMR1VzZTNaaGJIVmxPbUV1WmlobEtYMHBmWDBzZTF3aUxpOWZZMjl5WlZ3aU9qTXhMRndpTGk5ZloyeHZZbUZzWENJNk5EQXNYQ0l1TDE5c2FXSnlZWEo1WENJNk5UTXNYQ0l1TDE5dlltcGxZM1F0WkhCY0lqbzFOaXhjSWk0dlgzZHJjeTFsZUhSY0lqbzRNbjFkTERneU9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2NpNW1QV1VvWENJdUwxOTNhM05jSWlsOUxIdGNJaTR2WDNkcmMxd2lPamd6ZlYwc09ETTZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxbEtGd2lMaTlmYzJoaGNtVmtYQ0lwS0Z3aWQydHpYQ0lwTEc4OVpTaGNJaTR2WDNWcFpGd2lLU3hwUFdVb1hDSXVMMTluYkc5aVlXeGNJaWt1VTNsdFltOXNMR0U5WENKbWRXNWpkR2x2Ymx3aVBUMTBlWEJsYjJZZ2FTeHpQWFF1Wlhod2IzSjBjejFtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnYmx0bFhYeDhLRzViWlYwOVlTWW1hVnRsWFh4OEtHRS9hVHB2S1NoY0lsTjViV0p2YkM1Y0lpdGxLU2w5TzNNdWMzUnZjbVU5Ym4wc2Uxd2lMaTlmWjJ4dlltRnNYQ0k2TkRBc1hDSXVMMTl6YUdGeVpXUmNJam8zTWl4Y0lpNHZYM1ZwWkZ3aU9qZ3dmVjBzT0RRNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0Y0luVnpaU0J6ZEhKcFkzUmNJanQyWVhJZ2JqMWxLRndpTGk5ZllXUmtMWFJ2TFhWdWMyTnZjR0ZpYkdWelhDSXBMRzg5WlNoY0lpNHZYMmwwWlhJdGMzUmxjRndpS1N4cFBXVW9YQ0l1TDE5cGRHVnlZWFJ2Y25OY0lpa3NZVDFsS0Z3aUxpOWZkRzh0YVc5aWFtVmpkRndpS1R0MExtVjRjRzl5ZEhNOVpTaGNJaTR2WDJsMFpYSXRaR1ZtYVc1bFhDSXBLRUZ5Y21GNUxGd2lRWEp5WVhsY0lpeG1kVzVqZEdsdmJpaGxMSFFwZTNSb2FYTXVYM1E5WVNobEtTeDBhR2x6TGw5cFBUQXNkR2hwY3k1ZmF6MTBmU3htZFc1amRHbHZiaWdwZTNaaGNpQmxQWFJvYVhNdVgzUXNkRDEwYUdsekxsOXJMSEk5ZEdocGN5NWZhU3NyTzNKbGRIVnliaUZsZkh4eVBqMWxMbXhsYm1kMGFEOG9kR2hwY3k1ZmREMTJiMmxrSURBc2J5Z3hLU2s2WENKclpYbHpYQ0k5UFhRL2J5Z3dMSElwT2x3aWRtRnNkV1Z6WENJOVBYUS9ieWd3TEdWYmNsMHBPbThvTUN4YmNpeGxXM0pkWFNsOUxGd2lkbUZzZFdWelhDSXBMR2t1UVhKbmRXMWxiblJ6UFdrdVFYSnlZWGtzYmloY0ltdGxlWE5jSWlrc2JpaGNJblpoYkhWbGMxd2lLU3h1S0Z3aVpXNTBjbWxsYzF3aUtYMHNlMXdpTGk5ZllXUmtMWFJ2TFhWdWMyTnZjR0ZpYkdWelhDSTZNamNzWENJdUwxOXBkR1Z5TFdSbFptbHVaVndpT2pRNUxGd2lMaTlmYVhSbGNpMXpkR1Z3WENJNk5UQXNYQ0l1TDE5cGRHVnlZWFJ2Y25OY0lqbzFNU3hjSWk0dlgzUnZMV2x2WW1wbFkzUmNJam8zTm4xZExEZzFPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OVpTaGNJaTR2WDJWNGNHOXlkRndpS1R0dUtHNHVVeXhjSWs5aWFtVmpkRndpTEh0amNtVmhkR1U2WlNoY0lpNHZYMjlpYW1WamRDMWpjbVZoZEdWY0lpbDlLWDBzZTF3aUxpOWZaWGh3YjNKMFhDSTZNemdzWENJdUwxOXZZbXBsWTNRdFkzSmxZWFJsWENJNk5UVjlYU3c0TmpwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQV1VvWENJdUwxOWxlSEJ2Y25SY0lpazdiaWh1TGxNcmJpNUdLaUZsS0Z3aUxpOWZaR1Z6WTNKcGNIUnZjbk5jSWlrc1hDSlBZbXBsWTNSY0lpeDdaR1ZtYVc1bFVISnZjR1Z5ZEhrNlpTaGNJaTR2WDI5aWFtVmpkQzFrY0Z3aUtTNW1mU2w5TEh0Y0lpNHZYMlJsYzJOeWFYQjBiM0p6WENJNk16UXNYQ0l1TDE5bGVIQnZjblJjSWpvek9DeGNJaTR2WDI5aWFtVmpkQzFrY0Z3aU9qVTJmVjBzT0RjNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajFsS0Z3aUxpOWZhWE10YjJKcVpXTjBYQ0lwTEc4OVpTaGNJaTR2WDIxbGRHRmNJaWt1YjI1R2NtVmxlbVU3WlNoY0lpNHZYMjlpYW1WamRDMXpZWEJjSWlrb1hDSm1jbVZsZW1WY0lpeG1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdablZ1WTNScGIyNG9kQ2w3Y21WMGRYSnVJR1VtSm00b2RDay9aU2h2S0hRcEtUcDBmWDBwZlN4N1hDSXVMMTlwY3kxdlltcGxZM1JjSWpvME55eGNJaTR2WDIxbGRHRmNJam8xTkN4Y0lpNHZYMjlpYW1WamRDMXpZWEJjSWpvMk5uMWRMRGc0T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDlaU2hjSWk0dlgzUnZMV2x2WW1wbFkzUmNJaWtzYnoxbEtGd2lMaTlmYjJKcVpXTjBMV2R2Y0dSY0lpa3VaanRsS0Z3aUxpOWZiMkpxWldOMExYTmhjRndpS1NoY0ltZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2x3aUxHWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlHWjFibU4wYVc5dUtHVXNkQ2w3Y21WMGRYSnVJRzhvYmlobEtTeDBLWDE5S1gwc2Uxd2lMaTlmYjJKcVpXTjBMV2R2Y0dSY0lqbzFPQ3hjSWk0dlgyOWlhbVZqZEMxellYQmNJam8yTml4Y0lpNHZYM1J2TFdsdlltcGxZM1JjSWpvM05uMWRMRGc1T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDlaU2hjSWk0dlgzUnZMVzlpYW1WamRGd2lLU3h2UFdVb1hDSXVMMTl2WW1wbFkzUXRaM0J2WENJcE8yVW9YQ0l1TDE5dlltcGxZM1F0YzJGd1hDSXBLRndpWjJWMFVISnZkRzkwZVhCbFQyWmNJaXhtZFc1amRHbHZiaWdwZTNKbGRIVnliaUJtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnYnlodUtHVXBLWDE5S1gwc2Uxd2lMaTlmYjJKcVpXTjBMV2R3YjF3aU9qWXlMRndpTGk5ZmIySnFaV04wTFhOaGNGd2lPalkyTEZ3aUxpOWZkRzh0YjJKcVpXTjBYQ0k2TnpoOVhTdzVNRHBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdVBXVW9YQ0l1TDE5MGJ5MXZZbXBsWTNSY0lpa3NiejFsS0Z3aUxpOWZiMkpxWldOMExXdGxlWE5jSWlrN1pTaGNJaTR2WDI5aWFtVmpkQzF6WVhCY0lpa29YQ0pyWlhselhDSXNablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJRzhvYmlobEtTbDlmU2w5TEh0Y0lpNHZYMjlpYW1WamRDMXJaWGx6WENJNk5qUXNYQ0l1TDE5dlltcGxZM1F0YzJGd1hDSTZOallzWENJdUwxOTBieTF2WW1wbFkzUmNJam8zT0gxZExEa3hPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OVpTaGNJaTR2WDJWNGNHOXlkRndpS1R0dUtHNHVVeXhjSWs5aWFtVmpkRndpTEh0elpYUlFjbTkwYjNSNWNHVlBaanBsS0Z3aUxpOWZjMlYwTFhCeWIzUnZYQ0lwTG5ObGRIMHBmU3g3WENJdUwxOWxlSEJ2Y25SY0lqb3pPQ3hjSWk0dlgzTmxkQzF3Y205MGIxd2lPalk1ZlYwc09USTZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDlMSHQ5WFN3NU16cGJablZ1WTNScGIyNG9aU3gwTEhJcGUxd2lkWE5sSUhOMGNtbGpkRndpTzNaaGNpQnVQV1VvWENJdUwxOXpkSEpwYm1jdFlYUmNJaWtvSVRBcE8yVW9YQ0l1TDE5cGRHVnlMV1JsWm1sdVpWd2lLU2hUZEhKcGJtY3NYQ0pUZEhKcGJtZGNJaXhtZFc1amRHbHZiaWhsS1h0MGFHbHpMbDkwUFZOMGNtbHVaeWhsS1N4MGFHbHpMbDlwUFRCOUxHWjFibU4wYVc5dUtDbDdkbUZ5SUdVc2REMTBhR2x6TGw5MExISTlkR2hwY3k1ZmFUdHlaWFIxY200Z2NqNDlkQzVzWlc1bmRHZy9lM1poYkhWbE9uWnZhV1FnTUN4a2IyNWxPaUV3ZlRvb1pUMXVLSFFzY2lrc2RHaHBjeTVmYVNzOVpTNXNaVzVuZEdnc2UzWmhiSFZsT21Vc1pHOXVaVG9oTVgwcGZTbDlMSHRjSWk0dlgybDBaWEl0WkdWbWFXNWxYQ0k2TkRrc1hDSXVMMTl6ZEhKcGJtY3RZWFJjSWpvM00zMWRMRGswT2x0bWRXNWpkR2x2YmlobExIUXNjaWw3WENKMWMyVWdjM1J5YVdOMFhDSTdkbUZ5SUc0OVpTaGNJaTR2WDJkc2IySmhiRndpS1N4dlBXVW9YQ0l1TDE5b1lYTmNJaWtzYVQxbEtGd2lMaTlmWkdWelkzSnBjSFJ2Y25OY0lpa3NZVDFsS0Z3aUxpOWZaWGh3YjNKMFhDSXBMSE05WlNoY0lpNHZYM0psWkdWbWFXNWxYQ0lwTEhVOVpTaGNJaTR2WDIxbGRHRmNJaWt1UzBWWkxHdzlaU2hjSWk0dlgyWmhhV3h6WENJcExHTTlaU2hjSWk0dlgzTm9ZWEpsWkZ3aUtTeG1QV1VvWENJdUwxOXpaWFF0ZEc4dGMzUnlhVzVuTFhSaFoxd2lLU3h3UFdVb1hDSXVMMTkxYVdSY0lpa3NaRDFsS0Z3aUxpOWZkMnR6WENJcExHZzlaU2hjSWk0dlgzZHJjeTFsZUhSY0lpa3NlVDFsS0Z3aUxpOWZkMnR6TFdSbFptbHVaVndpS1N4dFBXVW9YQ0l1TDE5clpYbHZabHdpS1N4MlBXVW9YQ0l1TDE5bGJuVnRMV3RsZVhOY0lpa3NYejFsS0Z3aUxpOWZhWE10WVhKeVlYbGNJaWtzWWoxbEtGd2lMaTlmWVc0dGIySnFaV04wWENJcExHYzlaU2hjSWk0dlgzUnZMV2x2WW1wbFkzUmNJaWtzUlQxbEtGd2lMaTlmZEc4dGNISnBiV2wwYVhabFhDSXBMR285WlNoY0lpNHZYM0J5YjNCbGNuUjVMV1JsYzJOY0lpa3NkejFsS0Z3aUxpOWZiMkpxWldOMExXTnlaV0YwWlZ3aUtTeFBQV1VvWENJdUwxOXZZbXBsWTNRdFoyOXdiaTFsZUhSY0lpa3NUVDFsS0Z3aUxpOWZiMkpxWldOMExXZHZjR1JjSWlrc2VEMWxLRndpTGk5ZmIySnFaV04wTFdSd1hDSXBMRkE5WlNoY0lpNHZYMjlpYW1WamRDMXJaWGx6WENJcExHczlUUzVtTEZJOWVDNW1MRk05VHk1bUxFRTliaTVUZVcxaWIyd3NWRDF1TGtwVFQwNHNUajFVSmlaVUxuTjBjbWx1WjJsbWVTeEpQVndpY0hKdmRHOTBlWEJsWENJc1ZUMWtLRndpWDJocFpHUmxibHdpS1N4RFBXUW9YQ0owYjFCeWFXMXBkR2wyWlZ3aUtTeE1QWHQ5TG5CeWIzQmxjblI1U1hORmJuVnRaWEpoWW14bExFWTlZeWhjSW5ONWJXSnZiQzF5WldkcGMzUnllVndpS1N4Q1BXTW9YQ0p6ZVcxaWIyeHpYQ0lwTEVROVl5aGNJbTl3TFhONWJXSnZiSE5jSWlrc1J6MVBZbXBsWTNSYlNWMHNTejFjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCQkxGazliaTVSVDJKcVpXTjBMSEU5SVZsOGZDRlpXMGxkZkh3aFdWdEpYUzVtYVc1a1EyaHBiR1FzZWoxcEppWnNLR1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJRGNoUFhjb1VpaDdmU3hjSW1GY0lpeDdaMlYwT21aMWJtTjBhVzl1S0NsN2NtVjBkWEp1SUZJb2RHaHBjeXhjSW1GY0lpeDdkbUZzZFdVNk4zMHBMbUY5ZlNrcExtRjlLVDltZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OWF5aEhMSFFwTzI0bUptUmxiR1YwWlNCSFczUmRMRklvWlN4MExISXBMRzRtSm1VaFBUMUhKaVpTS0Vjc2RDeHVLWDA2VWl4WFBXWjFibU4wYVc5dUtHVXBlM1poY2lCMFBVSmJaVjA5ZHloQlcwbGRLVHR5WlhSMWNtNGdkQzVmYXoxbExIUjlMRWc5U3lZbVhDSnplVzFpYjJ4Y0lqMDlkSGx3Wlc5bUlFRXVhWFJsY21GMGIzSS9ablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVYQ0p6ZVcxaWIyeGNJajA5ZEhsd1pXOW1JR1Y5T21aMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCbElHbHVjM1JoYm1ObGIyWWdRWDBzVmoxbWRXNWpkR2x2YmlobExIUXNjaWw3Y21WMGRYSnVJR1U5UFQxSEppWldLRVFzZEN4eUtTeGlLR1VwTEhROVJTaDBMQ0V3S1N4aUtISXBMRzhvUWl4MEtUOG9jaTVsYm5WdFpYSmhZbXhsUHlodktHVXNWU2ttSm1WYlZWMWJkRjBtSmlobFcxVmRXM1JkUFNFeEtTeHlQWGNvY2l4N1pXNTFiV1Z5WVdKc1pUcHFLREFzSVRFcGZTa3BPaWh2S0dVc1ZTbDhmRklvWlN4VkxHb29NU3g3ZlNrcExHVmJWVjFiZEYwOUlUQXBMSG9vWlN4MExISXBLVHBTS0dVc2RDeHlLWDBzU2oxbWRXNWpkR2x2YmlobExIUXBlMklvWlNrN1ptOXlLSFpoY2lCeUxHNDlkaWgwUFdjb2RDa3BMRzg5TUN4cFBXNHViR1Z1WjNSb08yaytienNwVmlobExISTlibHR2S3l0ZExIUmJjbDBwTzNKbGRIVnliaUJsZlN3a1BXWjFibU4wYVc5dUtHVXNkQ2w3Y21WMGRYSnVJSFp2YVdRZ01EMDlQWFEvZHlobEtUcEtLSGNvWlNrc2RDbDlMRmc5Wm5WdVkzUnBiMjRvWlNsN2RtRnlJSFE5VEM1allXeHNLSFJvYVhNc1pUMUZLR1VzSVRBcEtUdHlaWFIxY200aEtIUm9hWE05UFQxSEppWnZLRUlzWlNrbUppRnZLRVFzWlNrcEppWW9JU2gwZkh3aGJ5aDBhR2x6TEdVcGZId2hieWhDTEdVcGZIeHZLSFJvYVhNc1ZTa21KblJvYVhOYlZWMWJaVjBwZkh4MEtYMHNVVDFtZFc1amRHbHZiaWhsTEhRcGUybG1LR1U5WnlobEtTeDBQVVVvZEN3aE1Da3NaU0U5UFVkOGZDRnZLRUlzZENsOGZHOG9SQ3gwS1NsN2RtRnlJSEk5YXlobExIUXBPM0psZEhWeWJpRnlmSHdoYnloQ0xIUXBmSHh2S0dVc1ZTa21KbVZiVlYxYmRGMThmQ2h5TG1WdWRXMWxjbUZpYkdVOUlUQXBMSEo5ZlN4YVBXWjFibU4wYVc5dUtHVXBlMlp2Y2loMllYSWdkQ3h5UFZNb1p5aGxLU2tzYmoxYlhTeHBQVEE3Y2k1c1pXNW5kR2crYVRzcGJ5aENMSFE5Y2x0cEt5dGRLWHg4ZEQwOVZYeDhkRDA5ZFh4OGJpNXdkWE5vS0hRcE8zSmxkSFZ5YmlCdWZTeGxaVDFtZFc1amRHbHZiaWhsS1h0bWIzSW9kbUZ5SUhRc2NqMWxQVDA5Unl4dVBWTW9jajlFT21jb1pTa3BMR2s5VzEwc1lUMHdPMjR1YkdWdVozUm9QbUU3S1NGdktFSXNkRDF1VzJFcksxMHBmSHh5SmlZaGJ5aEhMSFFwZkh4cExuQjFjMmdvUWx0MFhTazdjbVYwZFhKdUlHbDlPMHQ4ZkNoQlBXWjFibU4wYVc5dUtDbDdhV1lvZEdocGN5QnBibk4wWVc1alpXOW1JRUVwZEdoeWIzY2dWSGx3WlVWeWNtOXlLRndpVTNsdFltOXNJR2x6SUc1dmRDQmhJR052Ym5OMGNuVmpkRzl5SVZ3aUtUdDJZWElnWlQxd0tHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnK01EOWhjbWQxYldWdWRITmJNRjA2ZG05cFpDQXdLU3gwUFdaMWJtTjBhVzl1S0hJcGUzUm9hWE05UFQxSEppWjBMbU5oYkd3b1JDeHlLU3h2S0hSb2FYTXNWU2ttSm04b2RHaHBjMXRWWFN4bEtTWW1LSFJvYVhOYlZWMWJaVjA5SVRFcExIb29kR2hwY3l4bExHb29NU3h5S1NsOU8zSmxkSFZ5YmlCcEppWnhKaVo2S0Vjc1pTeDdZMjl1Wm1sbmRYSmhZbXhsT2lFd0xITmxkRHAwZlNrc1Z5aGxLWDBzY3loQlcwbGRMRndpZEc5VGRISnBibWRjSWl4bWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCMGFHbHpMbDlyZlNrc1RTNW1QVkVzZUM1bVBWWXNaU2hjSWk0dlgyOWlhbVZqZEMxbmIzQnVYQ0lwTG1ZOVR5NW1QVm9zWlNoY0lpNHZYMjlpYW1WamRDMXdhV1ZjSWlrdVpqMVlMR1VvWENJdUwxOXZZbXBsWTNRdFoyOXdjMXdpS1M1bVBXVmxMR2ttSmlGbEtGd2lMaTlmYkdsaWNtRnllVndpS1NZbWN5aEhMRndpY0hKdmNHVnlkSGxKYzBWdWRXMWxjbUZpYkdWY0lpeFlMQ0V3S1N4b0xtWTlablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJRmNvWkNobEtTbDlLU3hoS0dFdVJ5dGhMbGNyWVM1R0tpRkxMSHRUZVcxaWIydzZRWDBwTzJadmNpaDJZWElnZEdVOVhDSm9ZWE5KYm5OMFlXNWpaU3hwYzBOdmJtTmhkRk53Y21WaFpHRmliR1VzYVhSbGNtRjBiM0lzYldGMFkyZ3NjbVZ3YkdGalpTeHpaV0Z5WTJnc2MzQmxZMmxsY3l4emNHeHBkQ3gwYjFCeWFXMXBkR2wyWlN4MGIxTjBjbWx1WjFSaFp5eDFibk5qYjNCaFlteGxjMXdpTG5Od2JHbDBLRndpTEZ3aUtTeHlaVDB3TzNSbExteGxibWQwYUQ1eVpUc3BaQ2gwWlZ0eVpTc3JYU2s3Wm05eUtIWmhjaUIwWlQxUUtHUXVjM1J2Y21VcExISmxQVEE3ZEdVdWJHVnVaM1JvUG5KbE95bDVLSFJsVzNKbEt5dGRLVHRoS0dFdVV5dGhMa1lxSVVzc1hDSlRlVzFpYjJ4Y0lpeDdYQ0ptYjNKY0lqcG1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdieWhHTEdVclBWd2lYQ0lwUDBaYlpWMDZSbHRsWFQxQktHVXBmU3hyWlhsR2IzSTZablZ1WTNScGIyNG9aU2w3YVdZb1NDaGxLU2x5WlhSMWNtNGdiU2hHTEdVcE8zUm9jbTkzSUZSNWNHVkZjbkp2Y2lobEsxd2lJR2x6SUc1dmRDQmhJSE41YldKdmJDRmNJaWw5TEhWelpWTmxkSFJsY2pwbWRXNWpkR2x2YmlncGUzRTlJVEI5TEhWelpWTnBiWEJzWlRwbWRXNWpkR2x2YmlncGUzRTlJVEY5ZlNrc1lTaGhMbE1yWVM1R0tpRkxMRndpVDJKcVpXTjBYQ0lzZTJOeVpXRjBaVG9rTEdSbFptbHVaVkJ5YjNCbGNuUjVPbFlzWkdWbWFXNWxVSEp2Y0dWeWRHbGxjenBLTEdkbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjanBSTEdkbGRFOTNibEJ5YjNCbGNuUjVUbUZ0WlhNNldpeG5aWFJQZDI1UWNtOXdaWEowZVZONWJXSnZiSE02WldWOUtTeFVKaVpoS0dFdVV5dGhMa1lxS0NGTGZIeHNLR1oxYm1OMGFXOXVLQ2w3ZG1GeUlHVTlRU2dwTzNKbGRIVnlibHdpVzI1MWJHeGRYQ0loUFU0b1cyVmRLWHg4WENKN2ZWd2lJVDFPS0h0aE9tVjlLWHg4WENKN2ZWd2lJVDFPS0U5aWFtVmpkQ2hsS1NsOUtTa3NYQ0pLVTA5T1hDSXNlM04wY21sdVoybG1lVHBtZFc1amRHbHZiaWhsS1h0cFppaDJiMmxrSURBaFBUMWxKaVloU0NobEtTbDdabTl5S0haaGNpQjBMSElzYmoxYlpWMHNiejB4TzJGeVozVnRaVzUwY3k1c1pXNW5kR2crYnpzcGJpNXdkWE5vS0dGeVozVnRaVzUwYzF0dkt5dGRLVHR5WlhSMWNtNGdkRDF1V3pGZExGd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1JSFFtSmloeVBYUXBMQ0Z5SmlaZktIUXBmSHdvZEQxbWRXNWpkR2x2YmlobExIUXBlMmxtS0hJbUppaDBQWEl1WTJGc2JDaDBhR2x6TEdVc2RDa3BMQ0ZJS0hRcEtYSmxkSFZ5YmlCMGZTa3NibHN4WFQxMExFNHVZWEJ3Ykhrb1ZDeHVLWDE5ZlNrc1FWdEpYVnREWFh4OFpTaGNJaTR2WDJocFpHVmNJaWtvUVZ0SlhTeERMRUZiU1YwdWRtRnNkV1ZQWmlrc1ppaEJMRndpVTNsdFltOXNYQ0lwTEdZb1RXRjBhQ3hjSWsxaGRHaGNJaXdoTUNrc1ppaHVMa3BUVDA0c1hDSktVMDlPWENJc0lUQXBmU3g3WENJdUwxOWhiaTF2WW1wbFkzUmNJam95T0N4Y0lpNHZYMlJsYzJOeWFYQjBiM0p6WENJNk16UXNYQ0l1TDE5bGJuVnRMV3RsZVhOY0lqb3pOeXhjSWk0dlgyVjRjRzl5ZEZ3aU9qTTRMRndpTGk5ZlptRnBiSE5jSWpvek9TeGNJaTR2WDJkc2IySmhiRndpT2pRd0xGd2lMaTlmYUdGelhDSTZOREVzWENJdUwxOW9hV1JsWENJNk5ESXNYQ0l1TDE5cGN5MWhjbkpoZVZ3aU9qUTJMRndpTGk5ZmEyVjViMlpjSWpvMU1peGNJaTR2WDJ4cFluSmhjbmxjSWpvMU15eGNJaTR2WDIxbGRHRmNJam8xTkN4Y0lpNHZYMjlpYW1WamRDMWpjbVZoZEdWY0lqbzFOU3hjSWk0dlgyOWlhbVZqZEMxa2NGd2lPalUyTEZ3aUxpOWZiMkpxWldOMExXZHZjR1JjSWpvMU9DeGNJaTR2WDI5aWFtVmpkQzFuYjNCdVhDSTZOakFzWENJdUwxOXZZbXBsWTNRdFoyOXdiaTFsZUhSY0lqbzFPU3hjSWk0dlgyOWlhbVZqZEMxbmIzQnpYQ0k2TmpFc1hDSXVMMTl2WW1wbFkzUXRhMlY1YzF3aU9qWTBMRndpTGk5ZmIySnFaV04wTFhCcFpWd2lPalkxTEZ3aUxpOWZjSEp2Y0dWeWRIa3RaR1Z6WTF3aU9qWTNMRndpTGk5ZmNtVmtaV1pwYm1WY0lqbzJPQ3hjSWk0dlgzTmxkQzEwYnkxemRISnBibWN0ZEdGblhDSTZOekFzWENJdUwxOXphR0Z5WldSY0lqbzNNaXhjSWk0dlgzUnZMV2x2WW1wbFkzUmNJam8zTml4Y0lpNHZYM1J2TFhCeWFXMXBkR2wyWlZ3aU9qYzVMRndpTGk5ZmRXbGtYQ0k2T0RBc1hDSXVMMTkzYTNOY0lqbzRNeXhjSWk0dlgzZHJjeTFrWldacGJtVmNJam80TVN4Y0lpNHZYM2RyY3kxbGVIUmNJam80TW4xZExEazFPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdaU2hjSWk0dlgzZHJjeTFrWldacGJtVmNJaWtvWENKaGMzbHVZMGwwWlhKaGRHOXlYQ0lwZlN4N1hDSXVMMTkzYTNNdFpHVm1hVzVsWENJNk9ERjlYU3c1TmpwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTJVb1hDSXVMMTkzYTNNdFpHVm1hVzVsWENJcEtGd2liMkp6WlhKMllXSnNaVndpS1gwc2Uxd2lMaTlmZDJ0ekxXUmxabWx1WlZ3aU9qZ3hmVjBzT1RjNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0bEtGd2lMaTlsY3pZdVlYSnlZWGt1YVhSbGNtRjBiM0pjSWlrN1ptOXlLSFpoY2lCdVBXVW9YQ0l1TDE5bmJHOWlZV3hjSWlrc2J6MWxLRndpTGk5ZmFHbGtaVndpS1N4cFBXVW9YQ0l1TDE5cGRHVnlZWFJ2Y25OY0lpa3NZVDFsS0Z3aUxpOWZkMnR6WENJcEtGd2lkRzlUZEhKcGJtZFVZV2RjSWlrc2N6MWJYQ0pPYjJSbFRHbHpkRndpTEZ3aVJFOU5WRzlyWlc1TWFYTjBYQ0lzWENKTlpXUnBZVXhwYzNSY0lpeGNJbE4wZVd4bFUyaGxaWFJNYVhOMFhDSXNYQ0pEVTFOU2RXeGxUR2x6ZEZ3aVhTeDFQVEE3ZFR3MU8zVXJLeWw3ZG1GeUlHdzljMXQxWFN4alBXNWJiRjBzWmoxakppWmpMbkJ5YjNSdmRIbHdaVHRtSmlZaFpsdGhYU1ltYnlobUxHRXNiQ2tzYVZ0c1hUMXBMa0Z5Y21GNWZYMHNlMXdpTGk5ZloyeHZZbUZzWENJNk5EQXNYQ0l1TDE5b2FXUmxYQ0k2TkRJc1hDSXVMMTlwZEdWeVlYUnZjbk5jSWpvMU1TeGNJaTR2WDNkcmMxd2lPamd6TEZ3aUxpOWxjell1WVhKeVlYa3VhWFJsY21GMGIzSmNJam80TkgxZExEazRPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdablZ1WTNScGIyNGdiaWdwZTNBbUptTW1KaWh3UFNFeExHTXViR1Z1WjNSb1AyWTlZeTVqYjI1allYUW9aaWs2WkQwdE1TeG1MbXhsYm1kMGFDWW1ieWdwS1gxbWRXNWpkR2x2YmlCdktDbDdhV1lvSVhBcGUzWmhjaUJsUFhNb2JpazdjRDBoTUR0bWIzSW9kbUZ5SUhROVppNXNaVzVuZEdnN2REc3BlMlp2Y2loalBXWXNaajFiWFRzcksyUThkRHNwWXlZbVkxdGtYUzV5ZFc0b0tUdGtQUzB4TEhROVppNXNaVzVuZEdoOVl6MXVkV3hzTEhBOUlURXNkU2hsS1gxOVpuVnVZM1JwYjI0Z2FTaGxMSFFwZTNSb2FYTXVablZ1UFdVc2RHaHBjeTVoY25KaGVUMTBmV1oxYm1OMGFXOXVJR0VvS1h0OWRtRnlJSE1zZFN4c1BYUXVaWGh3YjNKMGN6MTdmVHNoWm5WdVkzUnBiMjRvS1h0MGNubDdjejF6WlhSVWFXMWxiM1YwZldOaGRHTm9LR1VwZTNNOVpuVnVZM1JwYjI0b0tYdDBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSnpaWFJVYVcxbGIzVjBJR2x6SUc1dmRDQmtaV1pwYm1Wa1hDSXBmWDEwY25sN2RUMWpiR1ZoY2xScGJXVnZkWFI5WTJGMFkyZ29aU2w3ZFQxbWRXNWpkR2x2YmlncGUzUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0ltTnNaV0Z5VkdsdFpXOTFkQ0JwY3lCdWIzUWdaR1ZtYVc1bFpGd2lLWDE5ZlNncE8zWmhjaUJqTEdZOVcxMHNjRDBoTVN4a1BTMHhPMnd1Ym1WNGRGUnBZMnM5Wm5WdVkzUnBiMjRvWlNsN2RtRnlJSFE5Ym1WM0lFRnljbUY1S0dGeVozVnRaVzUwY3k1c1pXNW5kR2d0TVNrN2FXWW9ZWEpuZFcxbGJuUnpMbXhsYm1kMGFENHhLV1p2Y2loMllYSWdjajB4TzNJOFlYSm5kVzFsYm5SekxteGxibWQwYUR0eUt5c3BkRnR5TFRGZFBXRnlaM1Z0Wlc1MGMxdHlYVHRtTG5CMWMyZ29ibVYzSUdrb1pTeDBLU2tzTVNFOVBXWXViR1Z1WjNSb2ZIeHdmSHh6S0c4c01DbDlMR2t1Y0hKdmRHOTBlWEJsTG5KMWJqMW1kVzVqZEdsdmJpZ3BlM1JvYVhNdVpuVnVMbUZ3Y0d4NUtHNTFiR3dzZEdocGN5NWhjbkpoZVNsOUxHd3VkR2wwYkdVOVhDSmljbTkzYzJWeVhDSXNiQzVpY205M2MyVnlQU0V3TEd3dVpXNTJQWHQ5TEd3dVlYSm5kajFiWFN4c0xuWmxjbk5wYjI0OVhDSmNJaXhzTG5abGNuTnBiMjV6UFh0OUxHd3ViMjQ5WVN4c0xtRmtaRXhwYzNSbGJtVnlQV0VzYkM1dmJtTmxQV0VzYkM1dlptWTlZU3hzTG5KbGJXOTJaVXhwYzNSbGJtVnlQV0VzYkM1eVpXMXZkbVZCYkd4TWFYTjBaVzVsY25NOVlTeHNMbVZ0YVhROVlTeHNMbUpwYm1ScGJtYzlablZ1WTNScGIyNG9aU2w3ZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpY0hKdlkyVnpjeTVpYVc1a2FXNW5JR2x6SUc1dmRDQnpkWEJ3YjNKMFpXUmNJaWw5TEd3dVkzZGtQV1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVYQ0l2WENKOUxHd3VZMmhrYVhJOVpuVnVZM1JwYjI0b1pTbDdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2ljSEp2WTJWemN5NWphR1JwY2lCcGN5QnViM1FnYzNWd2NHOXlkR1ZrWENJcGZTeHNMblZ0WVhOclBXWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlEQjlmU3g3ZlYwc09UazZXMloxYm1OMGFXOXVLR1VzZEN4eUtYc29ablZ1WTNScGIyNG9jaWw3ZG1GeUlHNDlYQ0p2WW1wbFkzUmNJajA5ZEhsd1pXOW1JSEkvY2pwY0ltOWlhbVZqZEZ3aVBUMTBlWEJsYjJZZ2QybHVaRzkzUDNkcGJtUnZkenBjSW05aWFtVmpkRndpUFQxMGVYQmxiMllnYzJWc1pqOXpaV3htT25Sb2FYTXNiejF1TG5KbFoyVnVaWEpoZEc5eVVuVnVkR2x0WlNZbVQySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVUbUZ0WlhNb2Jpa3VhVzVrWlhoUFppaGNJbkpsWjJWdVpYSmhkRzl5VW5WdWRHbHRaVndpS1Q0OU1DeHBQVzhtSm00dWNtVm5aVzVsY21GMGIzSlNkVzUwYVcxbE8ybG1LRzR1Y21WblpXNWxjbUYwYjNKU2RXNTBhVzFsUFhadmFXUWdNQ3gwTG1WNGNHOXlkSE05WlNoY0lpNHZjblZ1ZEdsdFpWd2lLU3h2S1c0dWNtVm5aVzVsY21GMGIzSlNkVzUwYVcxbFBXazdaV3h6WlNCMGNubDdaR1ZzWlhSbElHNHVjbVZuWlc1bGNtRjBiM0pTZFc1MGFXMWxmV05oZEdOb0tHRXBlMjR1Y21WblpXNWxjbUYwYjNKU2RXNTBhVzFsUFhadmFXUWdNSDE5S1M1allXeHNLSFJvYVhNc1hDSjFibVJsWm1sdVpXUmNJaUU5ZEhsd1pXOW1JR2RzYjJKaGJEOW5iRzlpWVd3NlhDSjFibVJsWm1sdVpXUmNJaUU5ZEhsd1pXOW1JSE5sYkdZL2MyVnNaanBjSW5WdVpHVm1hVzVsWkZ3aUlUMTBlWEJsYjJZZ2QybHVaRzkzUDNkcGJtUnZkenA3ZlNsOUxIdGNJaTR2Y25WdWRHbHRaVndpT2pFd01IMWRMREV3TURwYlpuVnVZM1JwYjI0b1pTeDBMSElwZXlobWRXNWpkR2x2YmlobExISXBleUZtZFc1amRHbHZiaWh5S1h0Y0luVnpaU0J6ZEhKcFkzUmNJanRtZFc1amRHbHZiaUJ1S0dVc2RDeHlMRzRwZTNaaGNpQnZQVTlpYW1WamRDNWpjbVZoZEdVb0tIUjhmR2twTG5CeWIzUnZkSGx3WlNrc1lUMXVaWGNnYUNodWZIeGJYU2s3Y21WMGRYSnVJRzh1WDJsdWRtOXJaVDFtS0dVc2NpeGhLU3h2ZldaMWJtTjBhVzl1SUc4b1pTeDBMSElwZTNSeWVYdHlaWFIxY201N2RIbHdaVHBjSW01dmNtMWhiRndpTEdGeVp6cGxMbU5oYkd3b2RDeHlLWDE5WTJGMFkyZ29iaWw3Y21WMGRYSnVlM1I1Y0dVNlhDSjBhSEp2ZDF3aUxHRnlaenB1ZlgxOVpuVnVZM1JwYjI0Z2FTZ3BlMzFtZFc1amRHbHZiaUJoS0NsN2ZXWjFibU4wYVc5dUlITW9LWHQ5Wm5WdVkzUnBiMjRnZFNobEtYdGJYQ0p1WlhoMFhDSXNYQ0owYUhKdmQxd2lMRndpY21WMGRYSnVYQ0pkTG1admNrVmhZMmdvWm5WdVkzUnBiMjRvZENsN1pWdDBYVDFtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnZEdocGN5NWZhVzUyYjJ0bEtIUXNaU2w5ZlNsOVpuVnVZM1JwYjI0Z2JDaGxLWHQwYUdsekxtRnlaejFsZldaMWJtTjBhVzl1SUdNb2RDbDdablZ1WTNScGIyNGdjaWhsTEc0c2FTeGhLWHQyWVhJZ2N6MXZLSFJiWlYwc2RDeHVLVHRwWmloY0luUm9jbTkzWENJaFBUMXpMblI1Y0dVcGUzWmhjaUIxUFhNdVlYSm5MR005ZFM1MllXeDFaVHR5WlhSMWNtNGdZeUJwYm5OMFlXNWpaVzltSUd3L1VISnZiV2x6WlM1eVpYTnZiSFpsS0dNdVlYSm5LUzUwYUdWdUtHWjFibU4wYVc5dUtHVXBlM0lvWENKdVpYaDBYQ0lzWlN4cExHRXBmU3htZFc1amRHbHZiaWhsS1h0eUtGd2lkR2h5YjNkY0lpeGxMR2tzWVNsOUtUcFFjbTl0YVhObExuSmxjMjlzZG1Vb1l5a3VkR2hsYmlobWRXNWpkR2x2YmlobEtYdDFMblpoYkhWbFBXVXNhU2gxS1gwc1lTbDlZU2h6TG1GeVp5bDlablZ1WTNScGIyNGdiaWhsTEhRcGUyWjFibU4wYVc5dUlHNG9LWHR5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvYml4dktYdHlLR1VzZEN4dUxHOHBmU2w5Y21WMGRYSnVJR2s5YVQ5cExuUm9aVzRvYml4dUtUcHVLQ2w5WENKdlltcGxZM1JjSWowOWRIbHdaVzltSUdVbUptVXVaRzl0WVdsdUppWW9jajFsTG1SdmJXRnBiaTVpYVc1a0tISXBLVHQyWVhJZ2FUdDBhR2x6TGw5cGJuWnZhMlU5Ym4xbWRXNWpkR2x2YmlCbUtHVXNkQ3h5S1h0MllYSWdiajFQTzNKbGRIVnliaUJtZFc1amRHbHZiaWhwTEdFcGUybG1LRzQ5UFQxNEtYUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0lrZGxibVZ5WVhSdmNpQnBjeUJoYkhKbFlXUjVJSEoxYm01cGJtZGNJaWs3YVdZb2JqMDlQVkFwZTJsbUtGd2lkR2h5YjNkY0lqMDlQV2twZEdoeWIzY2dZVHR5WlhSMWNtNGdiU2dwZldadmNpZzdPeWw3ZG1GeUlITTljaTVrWld4bFoyRjBaVHRwWmloektYdHBaaWhjSW5KbGRIVnlibHdpUFQwOWFYeDhYQ0owYUhKdmQxd2lQVDA5YVNZbWN5NXBkR1Z5WVhSdmNsdHBYVDA5UFhZcGUzSXVaR1ZzWldkaGRHVTliblZzYkR0MllYSWdkVDF6TG1sMFpYSmhkRzl5VzF3aWNtVjBkWEp1WENKZE8ybG1LSFVwZTNaaGNpQnNQVzhvZFN4ekxtbDBaWEpoZEc5eUxHRXBPMmxtS0Z3aWRHaHliM2RjSWowOVBXd3VkSGx3WlNsN2FUMWNJblJvY205M1hDSXNZVDFzTG1GeVp6dGpiMjUwYVc1MVpYMTlhV1lvWENKeVpYUjFjbTVjSWowOVBXa3BZMjl1ZEdsdWRXVjlkbUZ5SUd3OWJ5aHpMbWwwWlhKaGRHOXlXMmxkTEhNdWFYUmxjbUYwYjNJc1lTazdhV1lvWENKMGFISnZkMXdpUFQwOWJDNTBlWEJsS1h0eUxtUmxiR1ZuWVhSbFBXNTFiR3dzYVQxY0luUm9jbTkzWENJc1lUMXNMbUZ5Wnp0amIyNTBhVzUxWlgxcFBWd2libVY0ZEZ3aUxHRTlkanQyWVhJZ1l6MXNMbUZ5Wnp0cFppZ2hZeTVrYjI1bEtYSmxkSFZ5YmlCdVBVMHNZenR5VzNNdWNtVnpkV3gwVG1GdFpWMDlZeTUyWVd4MVpTeHlMbTVsZUhROWN5NXVaWGgwVEc5akxISXVaR1ZzWldkaGRHVTliblZzYkgxcFppaGNJbTVsZUhSY0lqMDlQV2twY2k1elpXNTBQWEl1WDNObGJuUTlZVHRsYkhObElHbG1LRndpZEdoeWIzZGNJajA5UFdrcGUybG1LRzQ5UFQxUEtYUm9jbTkzSUc0OVVDeGhPM0l1WkdsemNHRjBZMmhGZUdObGNIUnBiMjRvWVNrbUppaHBQVndpYm1WNGRGd2lMR0U5ZGlsOVpXeHpaVndpY21WMGRYSnVYQ0k5UFQxcEppWnlMbUZpY25Wd2RDaGNJbkpsZEhWeWJsd2lMR0VwTzI0OWVEdDJZWElnYkQxdktHVXNkQ3h5S1R0cFppaGNJbTV2Y20xaGJGd2lQVDA5YkM1MGVYQmxLWHR1UFhJdVpHOXVaVDlRT2swN2RtRnlJR005ZTNaaGJIVmxPbXd1WVhKbkxHUnZibVU2Y2k1a2IyNWxmVHRwWmloc0xtRnlaeUU5UFdzcGNtVjBkWEp1SUdNN2NpNWtaV3hsWjJGMFpTWW1YQ0p1WlhoMFhDSTlQVDFwSmlZb1lUMTJLWDFsYkhObFhDSjBhSEp2ZDF3aVBUMDliQzUwZVhCbEppWW9iajFRTEdrOVhDSjBhSEp2ZDF3aUxHRTliQzVoY21jcGZYMTlablZ1WTNScGIyNGdjQ2hsS1h0MllYSWdkRDE3ZEhKNVRHOWpPbVZiTUYxOU96RWdhVzRnWlNZbUtIUXVZMkYwWTJoTWIyTTlaVnN4WFNrc01pQnBiaUJsSmlZb2RDNW1hVzVoYkd4NVRHOWpQV1ZiTWwwc2RDNWhablJsY2t4dll6MWxXek5kS1N4MGFHbHpMblJ5ZVVWdWRISnBaWE11Y0hWemFDaDBLWDFtZFc1amRHbHZiaUJrS0dVcGUzWmhjaUIwUFdVdVkyOXRjR3hsZEdsdmJueDhlMzA3ZEM1MGVYQmxQVndpYm05eWJXRnNYQ0lzWkdWc1pYUmxJSFF1WVhKbkxHVXVZMjl0Y0d4bGRHbHZiajEwZldaMWJtTjBhVzl1SUdnb1pTbDdkR2hwY3k1MGNubEZiblJ5YVdWelBWdDdkSEo1VEc5ak9sd2ljbTl2ZEZ3aWZWMHNaUzVtYjNKRllXTm9LSEFzZEdocGN5a3NkR2hwY3k1eVpYTmxkQ2doTUNsOVpuVnVZM1JwYjI0Z2VTaGxLWHRwWmlobEtYdDJZWElnZEQxbFcyZGRPMmxtS0hRcGNtVjBkWEp1SUhRdVkyRnNiQ2hsS1R0cFppaGNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUJsTG01bGVIUXBjbVYwZFhKdUlHVTdhV1lvSVdselRtRk9LR1V1YkdWdVozUm9LU2w3ZG1GeUlISTlMVEVzYmoxbWRXNWpkR2x2YmlCdktDbDdabTl5S0RzckszSThaUzVzWlc1bmRHZzdLV2xtS0Y4dVkyRnNiQ2hsTEhJcEtYSmxkSFZ5YmlCdkxuWmhiSFZsUFdWYmNsMHNieTVrYjI1bFBTRXhMRzg3Y21WMGRYSnVJRzh1ZG1Gc2RXVTlkaXh2TG1SdmJtVTlJVEFzYjMwN2NtVjBkWEp1SUc0dWJtVjRkRDF1ZlgxeVpYUjFjbTU3Ym1WNGREcHRmWDFtZFc1amRHbHZiaUJ0S0NsN2NtVjBkWEp1ZTNaaGJIVmxPbllzWkc5dVpUb2hNSDE5ZG1GeUlIWXNYejFQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbWhoYzA5M2JsQnliM0JsY25SNUxHSTlYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnVTNsdFltOXNQMU41YldKdmJEcDdmU3huUFdJdWFYUmxjbUYwYjNKOGZGd2lRRUJwZEdWeVlYUnZjbHdpTEVVOVlpNTBiMU4wY21sdVoxUmhaM3g4WENKQVFIUnZVM1J5YVc1blZHRm5YQ0lzYWoxY0ltOWlhbVZqZEZ3aVBUMTBlWEJsYjJZZ2RDeDNQWEl1Y21WblpXNWxjbUYwYjNKU2RXNTBhVzFsTzJsbUtIY3BjbVYwZFhKdUlIWnZhV1FvYWlZbUtIUXVaWGh3YjNKMGN6MTNLU2s3ZHoxeUxuSmxaMlZ1WlhKaGRHOXlVblZ1ZEdsdFpUMXFQM1F1Wlhod2IzSjBjenA3ZlN4M0xuZHlZWEE5Ymp0MllYSWdUejFjSW5OMWMzQmxibVJsWkZOMFlYSjBYQ0lzVFQxY0luTjFjM0JsYm1SbFpGbHBaV3hrWENJc2VEMWNJbVY0WldOMWRHbHVaMXdpTEZBOVhDSmpiMjF3YkdWMFpXUmNJaXhyUFh0OUxGSTljeTV3Y205MGIzUjVjR1U5YVM1d2NtOTBiM1I1Y0dVN1lTNXdjbTkwYjNSNWNHVTlVaTVqYjI1emRISjFZM1J2Y2oxekxGeHVjeTVqYjI1emRISjFZM1J2Y2oxaExITmJSVjA5WVM1a2FYTndiR0Y1VG1GdFpUMWNJa2RsYm1WeVlYUnZja1oxYm1OMGFXOXVYQ0lzZHk1cGMwZGxibVZ5WVhSdmNrWjFibU4wYVc5dVBXWjFibU4wYVc5dUtHVXBlM1poY2lCMFBWd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1JR1VtSm1VdVkyOXVjM1J5ZFdOMGIzSTdjbVYwZFhKdUlTRjBKaVlvZEQwOVBXRjhmRndpUjJWdVpYSmhkRzl5Um5WdVkzUnBiMjVjSWowOVBTaDBMbVJwYzNCc1lYbE9ZVzFsZkh4MExtNWhiV1VwS1gwc2R5NXRZWEpyUFdaMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCUFltcGxZM1F1YzJWMFVISnZkRzkwZVhCbFQyWS9UMkpxWldOMExuTmxkRkJ5YjNSdmRIbHdaVTltS0dVc2N5azZLR1V1WDE5d2NtOTBiMTlmUFhNc1JTQnBiaUJsZkh3b1pWdEZYVDFjSWtkbGJtVnlZWFJ2Y2taMWJtTjBhVzl1WENJcEtTeGxMbkJ5YjNSdmRIbHdaVDFQWW1wbFkzUXVZM0psWVhSbEtGSXBMR1Y5TEhjdVlYZHlZWEE5Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUc1bGR5QnNLR1VwZlN4MUtHTXVjSEp2ZEc5MGVYQmxLU3gzTG1GemVXNWpQV1oxYm1OMGFXOXVLR1VzZEN4eUxHOHBlM1poY2lCcFBXNWxkeUJqS0c0b1pTeDBMSElzYnlrcE8zSmxkSFZ5YmlCM0xtbHpSMlZ1WlhKaGRHOXlSblZ1WTNScGIyNG9kQ2svYVRwcExtNWxlSFFvS1M1MGFHVnVLR1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJsTG1SdmJtVS9aUzUyWVd4MVpUcHBMbTVsZUhRb0tYMHBmU3gxS0ZJcExGSmJaMTA5Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnZEdocGMzMHNVbHRGWFQxY0lrZGxibVZ5WVhSdmNsd2lMRkl1ZEc5VGRISnBibWM5Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTVjSWx0dlltcGxZM1FnUjJWdVpYSmhkRzl5WFZ3aWZTeDNMbXRsZVhNOVpuVnVZM1JwYjI0b1pTbDdkbUZ5SUhROVcxMDdabTl5S0haaGNpQnlJR2x1SUdVcGRDNXdkWE5vS0hJcE8zSmxkSFZ5YmlCMExuSmxkbVZ5YzJVb0tTeG1kVzVqZEdsdmJpQnVLQ2w3Wm05eUtEdDBMbXhsYm1kMGFEc3BlM1poY2lCeVBYUXVjRzl3S0NrN2FXWW9jaUJwYmlCbEtYSmxkSFZ5YmlCdUxuWmhiSFZsUFhJc2JpNWtiMjVsUFNFeExHNTljbVYwZFhKdUlHNHVaRzl1WlQwaE1DeHVmWDBzZHk1MllXeDFaWE05ZVN4b0xuQnliM1J2ZEhsd1pUMTdZMjl1YzNSeWRXTjBiM0k2YUN4eVpYTmxkRHBtZFc1amRHbHZiaWhsS1h0cFppaDBhR2x6TG5CeVpYWTlNQ3gwYUdsekxtNWxlSFE5TUN4MGFHbHpMbk5sYm5ROWRHaHBjeTVmYzJWdWREMTJMSFJvYVhNdVpHOXVaVDBoTVN4MGFHbHpMbVJsYkdWbllYUmxQVzUxYkd3c2RHaHBjeTUwY25sRmJuUnlhV1Z6TG1admNrVmhZMmdvWkNrc0lXVXBabTl5S0haaGNpQjBJR2x1SUhSb2FYTXBYQ0owWENJOVBUMTBMbU5vWVhKQmRDZ3dLU1ltWHk1allXeHNLSFJvYVhNc2RDa21KaUZwYzA1aFRpZ3JkQzV6YkdsalpTZ3hLU2ttSmloMGFHbHpXM1JkUFhZcGZTeHpkRzl3T21aMWJtTjBhVzl1S0NsN2RHaHBjeTVrYjI1bFBTRXdPM1poY2lCbFBYUm9hWE11ZEhKNVJXNTBjbWxsYzFzd1hTeDBQV1V1WTI5dGNHeGxkR2x2Ymp0cFppaGNJblJvY205M1hDSTlQVDEwTG5SNWNHVXBkR2h5YjNjZ2RDNWhjbWM3Y21WMGRYSnVJSFJvYVhNdWNuWmhiSDBzWkdsemNHRjBZMmhGZUdObGNIUnBiMjQ2Wm5WdVkzUnBiMjRvWlNsN1puVnVZM1JwYjI0Z2RDaDBMRzRwZTNKbGRIVnliaUJwTG5SNWNHVTlYQ0owYUhKdmQxd2lMR2t1WVhKblBXVXNjaTV1WlhoMFBYUXNJU0Z1ZldsbUtIUm9hWE11Wkc5dVpTbDBhSEp2ZHlCbE8yWnZjaWgyWVhJZ2NqMTBhR2x6TEc0OWRHaHBjeTUwY25sRmJuUnlhV1Z6TG14bGJtZDBhQzB4TzI0K1BUQTdMUzF1S1h0MllYSWdiejEwYUdsekxuUnllVVZ1ZEhKcFpYTmJibDBzYVQxdkxtTnZiWEJzWlhScGIyNDdhV1lvWENKeWIyOTBYQ0k5UFQxdkxuUnllVXh2WXlseVpYUjFjbTRnZENoY0ltVnVaRndpS1R0cFppaHZMblJ5ZVV4dll6dzlkR2hwY3k1d2NtVjJLWHQyWVhJZ1lUMWZMbU5oYkd3b2J5eGNJbU5oZEdOb1RHOWpYQ0lwTEhNOVh5NWpZV3hzS0c4c1hDSm1hVzVoYkd4NVRHOWpYQ0lwTzJsbUtHRW1Kbk1wZTJsbUtIUm9hWE11Y0hKbGRqeHZMbU5oZEdOb1RHOWpLWEpsZEhWeWJpQjBLRzh1WTJGMFkyaE1iMk1zSVRBcE8ybG1LSFJvYVhNdWNISmxkanh2TG1acGJtRnNiSGxNYjJNcGNtVjBkWEp1SUhRb2J5NW1hVzVoYkd4NVRHOWpLWDFsYkhObElHbG1LR0VwZTJsbUtIUm9hWE11Y0hKbGRqeHZMbU5oZEdOb1RHOWpLWEpsZEhWeWJpQjBLRzh1WTJGMFkyaE1iMk1zSVRBcGZXVnNjMlY3YVdZb0lYTXBkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lkSEo1SUhOMFlYUmxiV1Z1ZENCM2FYUm9iM1YwSUdOaGRHTm9JRzl5SUdacGJtRnNiSGxjSWlrN2FXWW9kR2hwY3k1d2NtVjJQRzh1Wm1sdVlXeHNlVXh2WXlseVpYUjFjbTRnZENodkxtWnBibUZzYkhsTWIyTXBmWDE5ZlN4aFluSjFjSFE2Wm5WdVkzUnBiMjRvWlN4MEtYdG1iM0lvZG1GeUlISTlkR2hwY3k1MGNubEZiblJ5YVdWekxteGxibWQwYUMweE8zSStQVEE3TFMxeUtYdDJZWElnYmoxMGFHbHpMblJ5ZVVWdWRISnBaWE5iY2wwN2FXWW9iaTUwY25sTWIyTThQWFJvYVhNdWNISmxkaVltWHk1allXeHNLRzRzWENKbWFXNWhiR3g1VEc5alhDSXBKaVowYUdsekxuQnlaWFk4Ymk1bWFXNWhiR3g1VEc5aktYdDJZWElnYnoxdU8ySnlaV0ZyZlgxdkppWW9YQ0ppY21WaGExd2lQVDA5Wlh4OFhDSmpiMjUwYVc1MVpWd2lQVDA5WlNrbUptOHVkSEo1VEc5alBEMTBKaVowUEQxdkxtWnBibUZzYkhsTWIyTW1KaWh2UFc1MWJHd3BPM1poY2lCcFBXOC9ieTVqYjIxd2JHVjBhVzl1T250OU8zSmxkSFZ5YmlCcExuUjVjR1U5WlN4cExtRnlaejEwTEc4L2RHaHBjeTV1WlhoMFBXOHVabWx1WVd4c2VVeHZZenAwYUdsekxtTnZiWEJzWlhSbEtHa3BMR3Q5TEdOdmJYQnNaWFJsT21aMWJtTjBhVzl1S0dVc2RDbDdhV1lvWENKMGFISnZkMXdpUFQwOVpTNTBlWEJsS1hSb2NtOTNJR1V1WVhKbk8xd2lZbkpsWVd0Y0lqMDlQV1V1ZEhsd1pYeDhYQ0pqYjI1MGFXNTFaVndpUFQwOVpTNTBlWEJsUDNSb2FYTXVibVY0ZEQxbExtRnlaenBjSW5KbGRIVnlibHdpUFQwOVpTNTBlWEJsUHloMGFHbHpMbkoyWVd3OVpTNWhjbWNzZEdocGN5NXVaWGgwUFZ3aVpXNWtYQ0lwT2x3aWJtOXliV0ZzWENJOVBUMWxMblI1Y0dVbUpuUW1KaWgwYUdsekxtNWxlSFE5ZENsOUxHWnBibWx6YURwbWRXNWpkR2x2YmlobEtYdG1iM0lvZG1GeUlIUTlkR2hwY3k1MGNubEZiblJ5YVdWekxteGxibWQwYUMweE8zUStQVEE3TFMxMEtYdDJZWElnY2oxMGFHbHpMblJ5ZVVWdWRISnBaWE5iZEYwN2FXWW9jaTVtYVc1aGJHeDVURzlqUFQwOVpTbHlaWFIxY200Z2RHaHBjeTVqYjIxd2JHVjBaU2h5TG1OdmJYQnNaWFJwYjI0c2NpNWhablJsY2t4dll5a3NaQ2h5S1N4cmZYMHNYQ0pqWVhSamFGd2lPbVoxYm1OMGFXOXVLR1VwZTJadmNpaDJZWElnZEQxMGFHbHpMblJ5ZVVWdWRISnBaWE11YkdWdVozUm9MVEU3ZEQ0OU1Ec3RMWFFwZTNaaGNpQnlQWFJvYVhNdWRISjVSVzUwY21sbGMxdDBYVHRwWmloeUxuUnllVXh2WXowOVBXVXBlM1poY2lCdVBYSXVZMjl0Y0d4bGRHbHZianRwWmloY0luUm9jbTkzWENJOVBUMXVMblI1Y0dVcGUzWmhjaUJ2UFc0dVlYSm5PMlFvY2lsOWNtVjBkWEp1SUc5OWZYUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0ltbHNiR1ZuWVd3Z1kyRjBZMmdnWVhSMFpXMXdkRndpS1gwc1pHVnNaV2RoZEdWWmFXVnNaRHBtZFc1amRHbHZiaWhsTEhRc2NpbDdjbVYwZFhKdUlIUm9hWE11WkdWc1pXZGhkR1U5ZTJsMFpYSmhkRzl5T25rb1pTa3NjbVZ6ZFd4MFRtRnRaVHAwTEc1bGVIUk1iMk02Y24wc2EzMTlmU2hjSW05aWFtVmpkRndpUFQxMGVYQmxiMllnY2o5eU9sd2liMkpxWldOMFhDSTlQWFI1Y0dWdlppQjNhVzVrYjNjL2QybHVaRzkzT2x3aWIySnFaV04wWENJOVBYUjVjR1Z2WmlCelpXeG1QM05sYkdZNmRHaHBjeWw5S1M1allXeHNLSFJvYVhNc1pTaGNJbDl3Y205alpYTnpYQ0lwTEZ3aWRXNWtaV1pwYm1Wa1hDSWhQWFI1Y0dWdlppQm5iRzlpWVd3L1oyeHZZbUZzT2x3aWRXNWtaV1pwYm1Wa1hDSWhQWFI1Y0dWdlppQnpaV3htUDNObGJHWTZYQ0oxYm1SbFptbHVaV1JjSWlFOWRIbHdaVzltSUhkcGJtUnZkejkzYVc1a2IzYzZlMzBwZlN4N1gzQnliMk5sYzNNNk9UaDlYU3d4TURFNlcyWjFibU4wYVc5dUtIUXNjaXh1S1hzaFpuVnVZM1JwYjI0b2RDeHVLWHRjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCbEppWmxMbUZ0WkQ5bEtGdGRMRzRwT2x3aWRXNWtaV1pwYm1Wa1hDSWhQWFI1Y0dWdlppQnlKaVp5TG1WNGNHOXlkSE0vY2k1bGVIQnZjblJ6UFc0b0tUcDBMblIyTkQxdUtDbDlLSFJvYVhNc1puVnVZM1JwYjI0b0tYdG1kVzVqZEdsdmJpQmxLR1VwZTNKbGRIVnliaUJsYm1OdlpHVlZVa2tvWlNrdWNtVndiR0ZqWlNndkpUSTFXekF0T1YxYk1DMDVYUzluTEdaMWJtTjBhVzl1S0dVcGUzSmxkSFZ5Ymx3aUpWd2lLMlV1YzNWaWMzUnlhVzVuS0RNcGZTbDlablZ1WTNScGIyNGdkQ2gwS1h0MllYSWdjajFjSWx3aU8zQmJkQzVqYUdGeVFYUW9NQ2xkSmlZb2NqMTBMbU5vWVhKQmRDZ3dLU3gwUFhRdWMzVmljM1J5YVc1bktERXBLVHQyWVhJZ2JqMWNJbHdpTEc4OVhDSmNJaXhwUFNFd0xHRTlJVEVzY3owaE1UdGNJaXRjSWowOVBYSS9hVDBoTVRwY0lpNWNJajA5UFhJL0tHODlYQ0l1WENJc2JqMWNJaTVjSWlrNlhDSXZYQ0k5UFQxeVB5aHZQVndpTDF3aUxHNDlYQ0l2WENJcE9sd2lJMXdpUFQwOWNqOG9iejFjSWlOY0lpeHBQU0V4S1RwY0lqdGNJajA5UFhJL0tHODlYQ0k3WENJc2JqMWNJanRjSWl4aFBTRXdMSE05SVRBcE9sd2lQMXdpUFQwOWNqOG9iejFjSWo5Y0lpeHVQVndpSmx3aUxHRTlJVEFwT2x3aUpsd2lQVDA5Y2lZbUtHODlYQ0ltWENJc2JqMWNJaVpjSWl4aFBTRXdLVHRtYjNJb2RtRnlJSFU5VzEwc2JEMTBMbk53YkdsMEtGd2lMRndpS1N4alBWdGRMR1k5ZTMwc2FEMHdPMmc4YkM1c1pXNW5kR2c3YUNzcktYdDJZWElnZVQxc1cyaGRMRzA5Ym5Wc2JEdHBaaWg1TG1sdVpHVjRUMllvWENJNlhDSXBJVDA5TFRFcGUzWmhjaUIyUFhrdWMzQnNhWFFvWENJNlhDSXBPM2s5ZGxzd1hTeHRQWEJoY25ObFNXNTBLSFpiTVYwc01UQXBmV1p2Y2loMllYSWdYejE3ZlR0a1cza3VZMmhoY2tGMEtIa3ViR1Z1WjNSb0xURXBYVHNwWDF0NUxtTm9ZWEpCZENoNUxteGxibWQwYUMweEtWMDlJVEFzZVQxNUxuTjFZbk4wY21sdVp5Z3dMSGt1YkdWdVozUm9MVEVwTzNaaGNpQmlQWHQwY25WdVkyRjBaVHB0TEc1aGJXVTZlU3h6ZFdabWFXTmxjenBmZlR0akxuQjFjMmdvWWlrc1psdDVYVDFpTEhVdWNIVnphQ2g1S1gxMllYSWdaejFtZFc1amRHbHZiaWgwS1h0bWIzSW9kbUZ5SUhJOVhDSmNJaXgxUFRBc2JEMHdPMnc4WXk1c1pXNW5kR2c3YkNzcktYdDJZWElnWmoxalcyeGRMSEE5ZENobUxtNWhiV1VwTzJsbUtHNTFiR3c5UFQxd2ZIeDJiMmxrSURBOVBUMXdmSHhCY25KaGVTNXBjMEZ5Y21GNUtIQXBKaVl3UFQwOWNDNXNaVzVuZEdoOGZGd2liMkpxWldOMFhDSTlQWFI1Y0dWdlppQndKaVl3UFQwOVQySnFaV04wTG10bGVYTW9jQ2t1YkdWdVozUm9LWFVyS3p0bGJITmxJR2xtS0hJclBXdzlQVDExUDI4NmJueDhYQ0lzWENJc1FYSnlZWGt1YVhOQmNuSmhlU2h3S1NsN1lTWW1LSElyUFdZdWJtRnRaU3RjSWoxY0lpazdabTl5S0haaGNpQmtQVEE3WkR4d0xteGxibWQwYUR0a0t5c3BaRDR3SmlZb2NpczlaaTV6ZFdabWFXTmxjMXRjSWlwY0lsMC9ibng4WENJc1hDSTZYQ0lzWENJc1ppNXpkV1ptYVdObGMxdGNJaXBjSWwwbUptRW1KaWh5S3oxbUxtNWhiV1VyWENJOVhDSXBLU3h5S3oxcFAyVnVZMjlrWlZWU1NVTnZiWEJ2Ym1WdWRDaHdXMlJkS1M1eVpYQnNZV05sS0M4aEwyY3NYQ0lsTWpGY0lpazZaU2h3VzJSZEtYMWxiSE5sSUdsbUtGd2liMkpxWldOMFhDSTlQWFI1Y0dWdlppQndLWHRoSmlZaFppNXpkV1ptYVdObGMxdGNJaXBjSWwwbUppaHlLejFtTG01aGJXVXJYQ0k5WENJcE8zWmhjaUJvUFNFd08yWnZjaWgyWVhJZ2VTQnBiaUJ3S1doOGZDaHlLejFtTG5OMVptWnBZMlZ6VzF3aUtsd2lYVDl1Zkh4Y0lpeGNJanBjSWl4Y0lpa3NhRDBoTVN4eUt6MXBQMlZ1WTI5a1pWVlNTVU52YlhCdmJtVnVkQ2g1S1M1eVpYQnNZV05sS0M4aEwyY3NYQ0lsTWpGY0lpazZaU2g1S1N4eUt6MW1Mbk4xWm1acFkyVnpXMXdpS2x3aVhUOWNJajFjSWpwY0lpeGNJaXh5S3oxcFAyVnVZMjlrWlZWU1NVTnZiWEJ2Ym1WdWRDaHdXM2xkS1M1eVpYQnNZV05sS0M4aEwyY3NYQ0lsTWpGY0lpazZaU2h3VzNsZEtYMWxiSE5sSUdFbUppaHlLejFtTG01aGJXVXNjeVltWENKY0lqMDlQWEI4ZkNoeUt6MWNJajFjSWlrcExHNTFiR3doUFdZdWRISjFibU5oZEdVbUppaHdQWEF1YzNWaWMzUnlhVzVuS0RBc1ppNTBjblZ1WTJGMFpTa3BMSElyUFdrL1pXNWpiMlJsVlZKSlEyOXRjRzl1Wlc1MEtIQXBMbkpsY0d4aFkyVW9MeUV2Wnl4Y0lpVXlNVndpS1RwbEtIQXBmWEpsZEhWeWJpQnlmVHR5WlhSMWNtNGdaeTUyWVhKT1lXMWxjejExTEh0d2NtVm1hWGc2Ynl4emRXSnpkR2wwZFhScGIyNDZaMzE5Wm5WdVkzUnBiMjRnY2lobEtYdHBaaWdoS0hSb2FYTWdhVzV6ZEdGdVkyVnZaaUJ5S1NseVpYUjFjbTRnYm1WM0lISW9aU2s3Wm05eUtIWmhjaUJ1UFdVdWMzQnNhWFFvWENKN1hDSXBMRzg5VzI0dWMyaHBablFvS1Ywc2FUMWJYU3hoUFZ0ZExITTlXMTA3Ymk1c1pXNW5kR2crTURzcGUzWmhjaUIxUFc0dWMyaHBablFvS1N4c1BYVXVjM0JzYVhRb1hDSjlYQ0lwV3pCZExHTTlkUzV6ZFdKemRISnBibWNvYkM1c1pXNW5kR2dyTVNrc1pqMTBLR3dwTzJFdWNIVnphQ2htTG5OMVluTjBhWFIxZEdsdmJpa3NhUzV3ZFhOb0tHWXVjSEpsWm1sNEtTeHZMbkIxYzJnb1l5a3NjejF6TG1OdmJtTmhkQ2htTG5OMVluTjBhWFIxZEdsdmJpNTJZWEpPWVcxbGN5bDlkR2hwY3k1bWFXeHNQV1oxYm1OMGFXOXVLR1VwZTJadmNpaDJZWElnZEQxdld6QmRMSEk5TUR0eVBHRXViR1Z1WjNSb08zSXJLeWw3ZG1GeUlHNDlZVnR5WFR0MEt6MXVLR1VwTEhRclBXOWJjaXN4WFgxeVpYUjFjbTRnZEgwc2RHaHBjeTUyWVhKT1lXMWxjejF6TEhSb2FYTXVkR1Z0Y0d4aGRHVTlaWDFtZFc1amRHbHZiaUJ1S0dVc2RDbDdhV1lvWlQwOVBYUXBjbVYwZFhKdUlUQTdhV1lvWlNZbWRDWW1YQ0p2WW1wbFkzUmNJajA5ZEhsd1pXOW1JR1VtSmx3aWIySnFaV04wWENJOVBYUjVjR1Z2WmlCMEtYdHBaaWhCY25KaGVTNXBjMEZ5Y21GNUtHVXBJVDA5UVhKeVlYa3VhWE5CY25KaGVTaDBLU2x5WlhSMWNtNGhNVHRwWmloQmNuSmhlUzVwYzBGeWNtRjVLR1VwS1h0cFppaGxMbXhsYm1kMGFDRTlQWFF1YkdWdVozUm9LWEpsZEhWeWJpRXhPMlp2Y2loMllYSWdjajB3TzNJOFpTNXNaVzVuZEdnN2Npc3JLV2xtS0NGdUtHVmJjbDBzZEZ0eVhTa3BjbVYwZFhKdUlURjlaV3h6Wlh0MllYSWdienRtYjNJb2J5QnBiaUJsS1dsbUtIWnZhV1FnTUQwOVBYUmJiMTBtSm5admFXUWdNQ0U5UFdWYmIxMHBjbVYwZFhKdUlURTdabTl5S0c4Z2FXNGdkQ2xwWmloMmIybGtJREE5UFQxbFcyOWRKaVoyYjJsa0lEQWhQVDEwVzI5ZEtYSmxkSFZ5YmlFeE8yWnZjaWh2SUdsdUlHVXBhV1lvSVc0b1pWdHZYU3gwVzI5ZEtTbHlaWFIxY200aE1YMXlaWFIxY200aE1IMXlaWFIxY200aE1YMW1kVzVqZEdsdmJpQnZLR1VwZTNaaGNpQjBQVk4wY21sdVp5aGxLUzV5WlhCc1lXTmxLQzllWEZ4ekszeGNYSE1ySkM5bkxGd2lYQ0lwTG0xaGRHTm9LQzllS0Z0ZU9seGNMejhqWFNzNktUOG9YRnd2WEZ3dktEODZXMTQ2UUYwcUtEODZPbHRlT2tCZEtpay9RQ2svS0NoYlhqcGNYQzgvSTEwcUtTZy9Pam9vWEZ4a0tpa3BQeWtwUHloYlhqOGpYU29wS0Z4Y1AxdGVJMTBxS1Q4b0kxdGNYSE5jWEZOZEtpay9MeWs3Y21WMGRYSnVJSFEvZTJoeVpXWTZkRnN3WFh4OFhDSmNJaXh3Y205MGIyTnZiRHAwV3pGZGZIeGNJbHdpTEdGMWRHaHZjbWwwZVRwMFd6SmRmSHhjSWx3aUxHaHZjM1E2ZEZzelhYeDhYQ0pjSWl4b2IzTjBibUZ0WlRwMFd6UmRmSHhjSWx3aUxIQnZjblE2ZEZzMVhYeDhYQ0pjSWl4d1lYUm9ibUZ0WlRwMFd6WmRmSHhjSWx3aUxITmxZWEpqYURwMFd6ZGRmSHhjSWx3aUxHaGhjMmc2ZEZzNFhYeDhYQ0pjSW4wNmJuVnNiSDFtZFc1amRHbHZiaUJwS0dVc2RDbDdablZ1WTNScGIyNGdjaWhsS1h0MllYSWdkRDFiWFR0eVpYUjFjbTRnWlM1eVpYQnNZV05sS0M5ZUtGeGNMbHhjTGo4b1hGd3ZmQ1FwS1NzdkxGd2lYQ0lwTG5KbGNHeGhZMlVvTDF4Y0x5aGNYQzRvWEZ3dmZDUXBLU3N2Wnl4Y0lpOWNJaWt1Y21Wd2JHRmpaU2d2WEZ3dlhGd3VYRnd1SkM4c1hDSXZMaTR2WENJcExuSmxjR3hoWTJVb0wxeGNMejliWGx4Y0wxMHFMMmNzWm5WdVkzUnBiMjRvWlNsN1hDSXZMaTVjSWowOVBXVS9kQzV3YjNBb0tUcDBMbkIxYzJnb1pTbDlLU3gwTG1wdmFXNG9YQ0pjSWlrdWNtVndiR0ZqWlNndlhseGNMeThzWENJdlhDSTlQVDFsTG1Ob1lYSkJkQ2d3S1Q5Y0lpOWNJanBjSWx3aUtYMXlaWFIxY200Z2REMXZLSFI4ZkZ3aVhDSXBMR1U5YnlobGZIeGNJbHdpS1N4MEppWmxQeWgwTG5CeWIzUnZZMjlzZkh4bExuQnliM1J2WTI5c0tTc29kQzV3Y205MGIyTnZiSHg4ZEM1aGRYUm9iM0pwZEhrL2RDNWhkWFJvYjNKcGRIazZaUzVoZFhSb2IzSnBkSGtwSzNJb2RDNXdjbTkwYjJOdmJIeDhkQzVoZFhSb2IzSnBkSGw4ZkZ3aUwxd2lQVDA5ZEM1d1lYUm9ibUZ0WlM1amFHRnlRWFFvTUNrL2RDNXdZWFJvYm1GdFpUcDBMbkJoZEdodVlXMWxQeWhsTG1GMWRHaHZjbWwwZVNZbUlXVXVjR0YwYUc1aGJXVS9YQ0l2WENJNlhDSmNJaWtyWlM1d1lYUm9ibUZ0WlM1emJHbGpaU2d3TEdVdWNHRjBhRzVoYldVdWJHRnpkRWx1WkdWNFQyWW9YQ0l2WENJcEt6RXBLM1F1Y0dGMGFHNWhiV1U2WlM1d1lYUm9ibUZ0WlNrcktIUXVjSEp2ZEc5amIyeDhmSFF1WVhWMGFHOXlhWFI1Zkh4MExuQmhkR2h1WVcxbFAzUXVjMlZoY21Ob09uUXVjMlZoY21Ob2ZIeGxMbk5sWVhKamFDa3JkQzVvWVhOb09tNTFiR3g5Wm5WdVkzUnBiMjRnWVNobEtYdHlaWFIxY200Z1pTNXpjR3hwZENoY0lpTmNJaWxiTUYxOVpuVnVZM1JwYjI0Z2N5aGxMSFFwZTJsbUtHVW1KbHdpYjJKcVpXTjBYQ0k5UFhSNWNHVnZaaUJsS1dsbUtIWnZhV1FnTUQwOVBYUS9kRDFsTG1sa09sd2ljM1J5YVc1blhDSTlQWFI1Y0dWdlppQmxMbWxrSmlZb2REMXBLSFFzWlM1cFpDa3NaUzVwWkQxMEtTeEJjbkpoZVM1cGMwRnljbUY1S0dVcEtXWnZjaWgyWVhJZ2NqMHdPM0k4WlM1c1pXNW5kR2c3Y2lzcktYTW9aVnR5WFN4MEtUdGxiSE5sZTF3aWMzUnlhVzVuWENJOVBYUjVjR1Z2WmlCbExpUnlaV1ltSmlobExpUnlaV1k5YVNoMExHVXVKSEpsWmlrcE8yWnZjaWgyWVhJZ2JpQnBiaUJsS1Z3aVpXNTFiVndpSVQwOWJpWW1jeWhsVzI1ZExIUXBmWDFtZFc1amRHbHZiaUIxS0dVcGUyVTlaWHg4WENKbGJsd2lPM1poY2lCMFBVVmJaVjA3Y21WMGRYSnVJR1oxYm1OMGFXOXVLR1VwZTNaaGNpQnlQWFJiWlM1amIyUmxYWHg4WjF0bExtTnZaR1ZkTzJsbUtGd2ljM1J5YVc1blhDSWhQWFI1Y0dWdlppQnlLWEpsZEhWeWJsd2lWVzVyYm05M2JpQmxjbkp2Y2lCamIyUmxJRndpSzJVdVkyOWtaU3RjSWpvZ1hDSXJTbE5QVGk1emRISnBibWRwWm5rb1pTNXRaWE56WVdkbFVHRnlZVzF6S1R0MllYSWdiajFsTG5CaGNtRnRjenR5WlhSMWNtNGdjaTV5WlhCc1lXTmxLQzljWEhzb1cxNTdmVjBxS1Z4Y2ZTOW5MR1oxYm1OMGFXOXVLR1VzZENsN2RtRnlJSEk5Ymx0MFhUdHlaWFIxY201Y0luTjBjbWx1WjF3aVBUMTBlWEJsYjJZZ2NueDhYQ0p1ZFcxaVpYSmNJajA5ZEhsd1pXOW1JSEkvY2pwbGZTbDlmV1oxYm1OMGFXOXVJR3dvWlN4MExISXNiaXh2S1h0cFppaEZjbkp2Y2k1allXeHNLSFJvYVhNcExIWnZhV1FnTUQwOVBXVXBkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lUbThnWlhKeWIzSWdZMjlrWlNCemRYQndiR2xsWkRvZ1hDSXJiaWs3ZEdocGN5NXRaWE56WVdkbFBWd2lYQ0lzZEdocGN5NXdZWEpoYlhNOWRDeDBhR2x6TG1OdlpHVTlaU3gwYUdsekxtUmhkR0ZRWVhSb1BYSjhmRndpWENJc2RHaHBjeTV6WTJobGJXRlFZWFJvUFc1OGZGd2lYQ0lzZEdocGN5NXpkV0pGY25KdmNuTTliM3g4Ym5Wc2JEdDJZWElnYVQxdVpYY2dSWEp5YjNJb2RHaHBjeTV0WlhOellXZGxLVHRwWmloMGFHbHpMbk4wWVdOclBXa3VjM1JoWTJ0OGZHa3VjM1JoWTJ0MGNtRmpaU3doZEdocGN5NXpkR0ZqYXlsMGNubDdkR2h5YjNjZ2FYMWpZWFJqYUNocEtYdDBhR2x6TG5OMFlXTnJQV2t1YzNSaFkydDhmR2t1YzNSaFkydDBjbUZqWlgxOVpuVnVZM1JwYjI0Z1l5aGxMSFFwZTJsbUtIUXVjM1ZpYzNSeWFXNW5LREFzWlM1c1pXNW5kR2dwUFQwOVpTbDdkbUZ5SUhJOWRDNXpkV0p6ZEhKcGJtY29aUzVzWlc1bmRHZ3BPMmxtS0hRdWJHVnVaM1JvUGpBbUpsd2lMMXdpUFQwOWRDNWphR0Z5UVhRb1pTNXNaVzVuZEdndE1TbDhmRndpSTF3aVBUMDljaTVqYUdGeVFYUW9NQ2w4ZkZ3aVAxd2lQVDA5Y2k1amFHRnlRWFFvTUNrcGNtVjBkWEp1SVRCOWNtVjBkWEp1SVRGOVpuVnVZM1JwYjI0Z1ppaGxLWHQyWVhJZ2RDeHlMRzQ5Ym1WM0lHZ3NiejE3YzJWMFJYSnliM0pTWlhCdmNuUmxjanBtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTVjSW5OMGNtbHVaMXdpUFQxMGVYQmxiMllnWlQ5MGFHbHpMbXhoYm1kMVlXZGxLR1VwT2loeVBXVXNJVEFwZlN4aFpHUkdiM0p0WVhRNlpuVnVZM1JwYjI0b0tYdHVMbUZrWkVadmNtMWhkQzVoY0hCc2VTaHVMR0Z5WjNWdFpXNTBjeWw5TEd4aGJtZDFZV2RsT21aMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCbFB5aEZXMlZkZkh3b1pUMWxMbk53YkdsMEtGd2lMVndpS1Zzd1hTa3NJU0ZGVzJWZEppWW9kRDFsTEdVcEtUcDBmU3hoWkdSTVlXNW5kV0ZuWlRwbWRXNWpkR2x2YmlobExIUXBlM1poY2lCeU8yWnZjaWh5SUdsdUlIWXBkRnR5WFNZbUlYUmJkbHR5WFYwbUppaDBXM1piY2wxZFBYUmJjbDBwTzNaaGNpQnVQV1V1YzNCc2FYUW9YQ0l0WENJcFd6QmRPMmxtS0VWYmJsMHBlMFZiWlYwOVQySnFaV04wTG1OeVpXRjBaU2hGVzI1ZEtUdG1iM0lvY2lCcGJpQjBLVndpZFc1a1pXWnBibVZrWENJOVBYUjVjR1Z2WmlCRlcyNWRXM0pkSmlZb1JWdHVYVnR5WFQxMFczSmRLU3hGVzJWZFczSmRQWFJiY2wxOVpXeHpaU0JGVzJWZFBYUXNSVnR1WFQxME8zSmxkSFZ5YmlCMGFHbHpmU3htY21WemFFRndhVHBtZFc1amRHbHZiaWhsS1h0MllYSWdkRDFtS0NrN2NtVjBkWEp1SUdVbUpuUXViR0Z1WjNWaFoyVW9aU2tzZEgwc2RtRnNhV1JoZEdVNlpuVnVZM1JwYjI0b1pTeHZMR2tzWVNsN2RtRnlJSE05ZFNoMEtTeHNQWEkvWm5WdVkzUnBiMjRvWlN4MExHNHBlM0psZEhWeWJpQnlLR1VzZEN4dUtYeDhjeWhsTEhRc2JpbDlPbk1zWXoxdVpYY2dhQ2h1TENnaE1Ta3NiQ3hwTEdFcE8xd2ljM1J5YVc1blhDSTlQWFI1Y0dWdlppQnZKaVlvYnoxN0pISmxaanB2ZlNrc1l5NWhaR1JUWTJobGJXRW9YQ0pjSWl4dktUdDJZWElnWmoxakxuWmhiR2xrWVhSbFFXeHNLR1VzYnl4dWRXeHNMRzUxYkd3c1hDSmNJaWs3Y21WMGRYSnVJV1ltSm1FbUppaG1QV011WW1GdVZXNXJibTkzYmxCeWIzQmxjblJwWlhNb1pTeHZLU2tzZEdocGN5NWxjbkp2Y2oxbUxIUm9hWE11YldsemMybHVaejFqTG0xcGMzTnBibWNzZEdocGN5NTJZV3hwWkQxdWRXeHNQVDA5Wml4MGFHbHpMblpoYkdsa2ZTeDJZV3hwWkdGMFpWSmxjM1ZzZERwbWRXNWpkR2x2YmlncGUzWmhjaUJsUFh0OU8zSmxkSFZ5YmlCMGFHbHpMblpoYkdsa1lYUmxMbUZ3Y0d4NUtHVXNZWEpuZFcxbGJuUnpLU3hsZlN4MllXeHBaR0YwWlUxMWJIUnBjR3hsT21aMWJtTjBhVzl1S0dVc2J5eHBMR0VwZTNaaGNpQnpQWFVvZENrc2JEMXlQMloxYm1OMGFXOXVLR1VzZEN4dUtYdHlaWFIxY200Z2NpaGxMSFFzYmlsOGZITW9aU3gwTEc0cGZUcHpMR005Ym1WM0lHZ29iaXdvSVRBcExHd3NhU3hoS1R0Y0luTjBjbWx1WjF3aVBUMTBlWEJsYjJZZ2J5WW1LRzg5ZXlSeVpXWTZiMzBwTEdNdVlXUmtVMk5vWlcxaEtGd2lYQ0lzYnlrc1l5NTJZV3hwWkdGMFpVRnNiQ2hsTEc4c2JuVnNiQ3h1ZFd4c0xGd2lYQ0lwTEdFbUptTXVZbUZ1Vlc1cmJtOTNibEJ5YjNCbGNuUnBaWE1vWlN4dktUdDJZWElnWmoxN2ZUdHlaWFIxY200Z1ppNWxjbkp2Y25NOVl5NWxjbkp2Y25Nc1ppNXRhWE56YVc1blBXTXViV2x6YzJsdVp5eG1MblpoYkdsa1BUQTlQVDFtTG1WeWNtOXljeTVzWlc1bmRHZ3NabjBzWVdSa1UyTm9aVzFoT21aMWJtTjBhVzl1S0NsN2NtVjBkWEp1SUc0dVlXUmtVMk5vWlcxaExtRndjR3g1S0c0c1lYSm5kVzFsYm5SektYMHNaMlYwVTJOb1pXMWhPbVoxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJRzR1WjJWMFUyTm9aVzFoTG1Gd2NHeDVLRzRzWVhKbmRXMWxiblJ6S1gwc1oyVjBVMk5vWlcxaFRXRndPbVoxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJRzR1WjJWMFUyTm9aVzFoVFdGd0xtRndjR3g1S0c0c1lYSm5kVzFsYm5SektYMHNaMlYwVTJOb1pXMWhWWEpwY3pwbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCdUxtZGxkRk5qYUdWdFlWVnlhWE11WVhCd2JIa29iaXhoY21kMWJXVnVkSE1wZlN4blpYUk5hWE56YVc1blZYSnBjenBtZFc1amRHbHZiaWdwZTNKbGRIVnliaUJ1TG1kbGRFMXBjM05wYm1kVmNtbHpMbUZ3Y0d4NUtHNHNZWEpuZFcxbGJuUnpLWDBzWkhKdmNGTmphR1Z0WVhNNlpuVnVZM1JwYjI0b0tYdHVMbVJ5YjNCVFkyaGxiV0Z6TG1Gd2NHeDVLRzRzWVhKbmRXMWxiblJ6S1gwc1pHVm1hVzVsUzJWNWQyOXlaRHBtZFc1amRHbHZiaWdwZTI0dVpHVm1hVzVsUzJWNWQyOXlaQzVoY0hCc2VTaHVMR0Z5WjNWdFpXNTBjeWw5TEdSbFptbHVaVVZ5Y205eU9tWjFibU4wYVc5dUtHVXNkQ3h5S1h0cFppaGNJbk4wY21sdVoxd2lJVDEwZVhCbGIyWWdaWHg4SVM5ZVcwRXRXbDByS0Y5YlFTMWFYU3NwS2lRdkxuUmxjM1FvWlNrcGRHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVEyOWtaU0J1WVcxbElHMTFjM1FnWW1VZ1lTQnpkSEpwYm1jZ2FXNGdWVkJRUlZKZlEwRlRSVjlYU1ZSSVgxVk9SRVZTVTBOUFVrVlRYQ0lwTzJsbUtGd2liblZ0WW1WeVhDSWhQWFI1Y0dWdlppQjBmSHgwSlRFaFBUMHdmSHgwUERGbE5DbDBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSkRiMlJsSUc1MWJXSmxjaUJ0ZFhOMElHSmxJR0Z1SUdsdWRHVm5aWElnUGlBeE1EQXdNRndpS1R0cFppaGNJblZ1WkdWbWFXNWxaRndpSVQxMGVYQmxiMllnZGx0bFhTbDBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSkZjbkp2Y2lCaGJISmxZV1I1SUdSbFptbHVaV1E2SUZ3aUsyVXJYQ0lnWVhNZ1hDSXJkbHRsWFNrN2FXWW9YQ0oxYm1SbFptbHVaV1JjSWlFOWRIbHdaVzltSUY5YmRGMHBkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lSWEp5YjNJZ1kyOWtaU0JoYkhKbFlXUjVJSFZ6WldRNklGd2lLMTliZEYwclhDSWdZWE1nWENJcmRDazdkbHRsWFQxMExGOWJkRjA5WlN4blcyVmRQV2RiZEYwOWNqdG1iM0lvZG1GeUlHNGdhVzRnUlNsN2RtRnlJRzg5UlZ0dVhUdHZXMlZkSmlZb2IxdDBYVDF2VzNSZGZIeHZXMlZkS1gxOUxISmxjMlYwT21aMWJtTjBhVzl1S0NsN2JpNXlaWE5sZENncExIUm9hWE11WlhKeWIzSTliblZzYkN4MGFHbHpMbTFwYzNOcGJtYzlXMTBzZEdocGN5NTJZV3hwWkQwaE1IMHNiV2x6YzJsdVp6cGJYU3hsY25KdmNqcHVkV3hzTEhaaGJHbGtPaUV3TEc1dmNtMVRZMmhsYldFNmN5eHlaWE52YkhabFZYSnNPbWtzWjJWMFJHOWpkVzFsYm5SVmNtazZZU3hsY25KdmNrTnZaR1Z6T25aOU8zSmxkSFZ5YmlCdkxteGhibWQxWVdkbEtHVjhmRndpWlc1Y0lpa3NiMzFQWW1wbFkzUXVhMlY1YzN4OEtFOWlhbVZqZEM1clpYbHpQV1oxYm1OMGFXOXVLQ2w3ZG1GeUlHVTlUMkpxWldOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVN4MFBTRjdkRzlUZEhKcGJtYzZiblZzYkgwdWNISnZjR1Z5ZEhsSmMwVnVkVzFsY21GaWJHVW9YQ0owYjFOMGNtbHVaMXdpS1N4eVBWdGNJblJ2VTNSeWFXNW5YQ0lzWENKMGIweHZZMkZzWlZOMGNtbHVaMXdpTEZ3aWRtRnNkV1ZQWmx3aUxGd2lhR0Z6VDNkdVVISnZjR1Z5ZEhsY0lpeGNJbWx6VUhKdmRHOTBlWEJsVDJaY0lpeGNJbkJ5YjNCbGNuUjVTWE5GYm5WdFpYSmhZbXhsWENJc1hDSmpiMjV6ZEhKMVkzUnZjbHdpWFN4dVBYSXViR1Z1WjNSb08zSmxkSFZ5YmlCbWRXNWpkR2x2YmlodktYdHBaaWhjSW05aWFtVmpkRndpSVQxMGVYQmxiMllnYnlZbVhDSm1kVzVqZEdsdmJsd2lJVDEwZVhCbGIyWWdiM3g4Ym5Wc2JEMDlQVzhwZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lrOWlhbVZqZEM1clpYbHpJR05oYkd4bFpDQnZiaUJ1YjI0dGIySnFaV04wWENJcE8zWmhjaUJwUFZ0ZE8yWnZjaWgyWVhJZ1lTQnBiaUJ2S1dVdVkyRnNiQ2h2TEdFcEppWnBMbkIxYzJnb1lTazdhV1lvZENsbWIzSW9kbUZ5SUhNOU1EdHpQRzQ3Y3lzcktXVXVZMkZzYkNodkxISmJjMTBwSmlacExuQjFjMmdvY2x0elhTazdjbVYwZFhKdUlHbDlmU2dwS1N4UFltcGxZM1F1WTNKbFlYUmxmSHdvVDJKcVpXTjBMbU55WldGMFpUMW1kVzVqZEdsdmJpZ3BlMloxYm1OMGFXOXVJR1VvS1h0OWNtVjBkWEp1SUdaMWJtTjBhVzl1S0hRcGUybG1LREVoUFQxaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvS1hSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSWs5aWFtVmpkQzVqY21WaGRHVWdhVzF3YkdWdFpXNTBZWFJwYjI0Z2IyNXNlU0JoWTJObGNIUnpJRzl1WlNCd1lYSmhiV1YwWlhJdVhDSXBPM0psZEhWeWJpQmxMbkJ5YjNSdmRIbHdaVDEwTEc1bGR5QmxmWDBvS1Nrc1FYSnlZWGt1YVhOQmNuSmhlWHg4S0VGeWNtRjVMbWx6UVhKeVlYazlablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVYQ0piYjJKcVpXTjBJRUZ5Y21GNVhWd2lQVDA5VDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaeTVqWVd4c0tHVXBmU2tzUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbWx1WkdWNFQyWjhmQ2hCY25KaGVTNXdjbTkwYjNSNWNHVXVhVzVrWlhoUFpqMW1kVzVqZEdsdmJpaGxLWHRwWmlodWRXeHNQVDA5ZEdocGN5bDBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlPM1poY2lCMFBVOWlhbVZqZENoMGFHbHpLU3h5UFhRdWJHVnVaM1JvUGo0K01EdHBaaWd3UFQwOWNpbHlaWFIxY200dE1UdDJZWElnYmowd08ybG1LR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZytNU1ltS0c0OVRuVnRZbVZ5S0dGeVozVnRaVzUwYzFzeFhTa3NiaUU5UFc0L2JqMHdPakFoUFQxdUppWnVJVDA5TVM4d0ppWnVJVDA5TFNneEx6QXBKaVlvYmowb2JqNHdmSHd0TVNrcVRXRjBhQzVtYkc5dmNpaE5ZWFJvTG1GaWN5aHVLU2twS1N4dVBqMXlLWEpsZEhWeWJpMHhPMlp2Y2loMllYSWdiejF1UGowd1AyNDZUV0YwYUM1dFlYZ29jaTFOWVhSb0xtRmljeWh1S1N3d0tUdHZQSEk3YnlzcktXbG1LRzhnYVc0Z2RDWW1kRnR2WFQwOVBXVXBjbVYwZFhKdUlHODdjbVYwZFhKdUxURjlLU3hQWW1wbFkzUXVhWE5HY205NlpXNThmQ2hQWW1wbFkzUXVhWE5HY205NlpXNDlablZ1WTNScGIyNG9aU2w3Wm05eUtIWmhjaUIwUFZ3aWRIWTBYM1JsYzNSZlpuSnZlbVZ1WDJ0bGVWd2lPMlV1YUdGelQzZHVVSEp2Y0dWeWRIa29kQ2s3S1hRclBVMWhkR2d1Y21GdVpHOXRLQ2s3ZEhKNWUzSmxkSFZ5YmlCbFczUmRQU0V3TEdSbGJHVjBaU0JsVzNSZExDRXhmV05oZEdOb0tISXBlM0psZEhWeWJpRXdmWDBwTzNaaGNpQndQWHRjSWl0Y0lqb2hNQ3hjSWlOY0lqb2hNQ3hjSWk1Y0lqb2hNQ3hjSWk5Y0lqb2hNQ3hjSWp0Y0lqb2hNQ3hjSWo5Y0lqb2hNQ3hjSWlaY0lqb2hNSDBzWkQxN1hDSXFYQ0k2SVRCOU8zSXVjSEp2ZEc5MGVYQmxQWHQwYjFOMGNtbHVaenBtZFc1amRHbHZiaWdwZTNKbGRIVnliaUIwYUdsekxuUmxiWEJzWVhSbGZTeG1hV3hzUm5KdmJVOWlhbVZqZERwbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z2RHaHBjeTVtYVd4c0tHWjFibU4wYVc5dUtIUXBlM0psZEhWeWJpQmxXM1JkZlNsOWZUdDJZWElnYUQxbWRXNWpkR2x2YmlobExIUXNjaXh1TEc4cGUybG1LSFJvYVhNdWJXbHpjMmx1WnoxYlhTeDBhR2x6TG0xcGMzTnBibWROWVhBOWUzMHNkR2hwY3k1bWIzSnRZWFJXWVd4cFpHRjBiM0p6UFdVL1QySnFaV04wTG1OeVpXRjBaU2hsTG1admNtMWhkRlpoYkdsa1lYUnZjbk1wT250OUxIUm9hWE11YzJOb1pXMWhjejFsUDA5aWFtVmpkQzVqY21WaGRHVW9aUzV6WTJobGJXRnpLVHA3ZlN4MGFHbHpMbU52Ykd4bFkzUk5kV3gwYVhCc1pUMTBMSFJvYVhNdVpYSnliM0p6UFZ0ZExIUm9hWE11YUdGdVpHeGxSWEp5YjNJOWREOTBhR2x6TG1OdmJHeGxZM1JGY25KdmNqcDBhR2x6TG5KbGRIVnlia1Z5Y205eUxHNG1KaWgwYUdsekxtTm9aV05yVW1WamRYSnphWFpsUFNFd0xIUm9hWE11YzJOaGJtNWxaRDFiWFN4MGFHbHpMbk5qWVc1dVpXUkdjbTk2Wlc0OVcxMHNkR2hwY3k1elkyRnVibVZrUm5KdmVtVnVVMk5vWlcxaGN6MWJYU3gwYUdsekxuTmpZVzV1WldSR2NtOTZaVzVXWVd4cFpHRjBhVzl1UlhKeWIzSnpQVnRkTEhSb2FYTXVkbUZzYVdSaGRHVmtVMk5vWlcxaGMwdGxlVDFjSW5SMk5GOTJZV3hwWkdGMGFXOXVYMmxrWENJc2RHaHBjeTUyWVd4cFpHRjBhVzl1UlhKeWIzSnpTMlY1UFZ3aWRIWTBYM1poYkdsa1lYUnBiMjVmWlhKeWIzSnpYMmxrWENJcExHOG1KaWgwYUdsekxuUnlZV05yVlc1cmJtOTNibEJ5YjNCbGNuUnBaWE05SVRBc2RHaHBjeTVyYm05M2JsQnliM0JsY25SNVVHRjBhSE05ZTMwc2RHaHBjeTUxYm10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3oxN2ZTa3NkR2hwY3k1bGNuSnZjbEpsY0c5eWRHVnlQWEo4ZkhVb1hDSmxibHdpS1N4Y0luTjBjbWx1WjF3aVBUMTBlWEJsYjJZZ2RHaHBjeTVsY25KdmNsSmxjRzl5ZEdWeUtYUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0ltUmxZblZuWENJcE8ybG1LSFJvYVhNdVpHVm1hVzVsWkV0bGVYZHZjbVJ6UFh0OUxHVXBabTl5S0haaGNpQnBJR2x1SUdVdVpHVm1hVzVsWkV0bGVYZHZjbVJ6S1hSb2FYTXVaR1ZtYVc1bFpFdGxlWGR2Y21SelcybGRQV1V1WkdWbWFXNWxaRXRsZVhkdmNtUnpXMmxkTG5Oc2FXTmxLREFwZlR0b0xuQnliM1J2ZEhsd1pTNWtaV1pwYm1WTFpYbDNiM0prUFdaMWJtTjBhVzl1S0dVc2RDbDdkR2hwY3k1a1pXWnBibVZrUzJWNWQyOXlaSE5iWlYwOWRHaHBjeTVrWldacGJtVmtTMlY1ZDI5eVpITmJaVjE4ZkZ0ZExIUm9hWE11WkdWbWFXNWxaRXRsZVhkdmNtUnpXMlZkTG5CMWMyZ29kQ2w5TEdndWNISnZkRzkwZVhCbExtTnlaV0YwWlVWeWNtOXlQV1oxYm1OMGFXOXVLR1VzZEN4eUxHNHNieXhwTEdFcGUzWmhjaUJ6UFc1bGR5QnNLR1VzZEN4eUxHNHNieWs3Y21WMGRYSnVJSE11YldWemMyRm5aVDEwYUdsekxtVnljbTl5VW1Wd2IzSjBaWElvY3l4cExHRXBMSE45TEdndWNISnZkRzkwZVhCbExuSmxkSFZ5YmtWeWNtOXlQV1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJsZlN4b0xuQnliM1J2ZEhsd1pTNWpiMnhzWldOMFJYSnliM0k5Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUdVbUpuUm9hWE11WlhKeWIzSnpMbkIxYzJnb1pTa3NiblZzYkgwc2FDNXdjbTkwYjNSNWNHVXVjSEpsWm1sNFJYSnliM0p6UFdaMWJtTjBhVzl1S0dVc2RDeHlLWHRtYjNJb2RtRnlJRzQ5WlR0dVBIUm9hWE11WlhKeWIzSnpMbXhsYm1kMGFEdHVLeXNwZEdocGN5NWxjbkp2Y25OYmJsMDlkR2hwY3k1bGNuSnZjbk5iYmwwdWNISmxabWw0VjJsMGFDaDBMSElwTzNKbGRIVnliaUIwYUdsemZTeG9MbkJ5YjNSdmRIbHdaUzVpWVc1VmJtdHViM2R1VUhKdmNHVnlkR2xsY3oxbWRXNWpkR2x2YmlobExIUXBlMlp2Y2loMllYSWdjaUJwYmlCMGFHbHpMblZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6S1h0MllYSWdiajEwYUdsekxtTnlaV0YwWlVWeWNtOXlLSFl1VlU1TFRrOVhUbDlRVWs5UVJWSlVXU3g3Y0dGMGFEcHlmU3h5TEZ3aVhDSXNiblZzYkN4bExIUXBMRzg5ZEdocGN5NW9ZVzVrYkdWRmNuSnZjaWh1S1R0cFppaHZLWEpsZEhWeWJpQnZmWEpsZEhWeWJpQnVkV3hzZlN4b0xuQnliM1J2ZEhsd1pTNWhaR1JHYjNKdFlYUTlablZ1WTNScGIyNG9aU3gwS1h0cFppaGNJbTlpYW1WamRGd2lQVDEwZVhCbGIyWWdaU2w3Wm05eUtIWmhjaUJ5SUdsdUlHVXBkR2hwY3k1aFpHUkdiM0p0WVhRb2NpeGxXM0pkS1R0eVpYUjFjbTRnZEdocGMzMTBhR2x6TG1admNtMWhkRlpoYkdsa1lYUnZjbk5iWlYwOWRIMHNhQzV3Y205MGIzUjVjR1V1Y21WemIyeDJaVkpsWm5NOVpuVnVZM1JwYjI0b1pTeDBLWHRwWmloMmIybGtJREFoUFQxbExpUnlaV1lwZTJsbUtIUTlkSHg4ZTMwc2RGdGxMaVJ5WldaZEtYSmxkSFZ5YmlCMGFHbHpMbU55WldGMFpVVnljbTl5S0hZdVEwbFNRMVZNUVZKZlVrVkdSVkpGVGtORkxIdDFjbXh6T2s5aWFtVmpkQzVyWlhsektIUXBMbXB2YVc0b1hDSXNJRndpS1gwc1hDSmNJaXhjSWx3aUxHNTFiR3dzZG05cFpDQXdMR1VwTzNSYlpTNGtjbVZtWFQwaE1DeGxQWFJvYVhNdVoyVjBVMk5vWlcxaEtHVXVKSEpsWml4MEtYMXlaWFIxY200Z1pYMHNhQzV3Y205MGIzUjVjR1V1WjJWMFUyTm9aVzFoUFdaMWJtTjBhVzl1S0dVc2RDbDdkbUZ5SUhJN2FXWW9kbTlwWkNBd0lUMDlkR2hwY3k1elkyaGxiV0Z6VzJWZEtYSmxkSFZ5YmlCeVBYUm9hWE11YzJOb1pXMWhjMXRsWFN4MGFHbHpMbkpsYzI5c2RtVlNaV1p6S0hJc2RDazdkbUZ5SUc0OVpTeHZQVndpWENJN2FXWW9aUzVwYm1SbGVFOW1LRndpSTF3aUtTRTlQUzB4SmlZb2J6MWxMbk4xWW5OMGNtbHVaeWhsTG1sdVpHVjRUMllvWENJalhDSXBLekVwTEc0OVpTNXpkV0p6ZEhKcGJtY29NQ3hsTG1sdVpHVjRUMllvWENJalhDSXBLU2tzWENKdlltcGxZM1JjSWowOWRIbHdaVzltSUhSb2FYTXVjMk5vWlcxaGMxdHVYU2w3Y2oxMGFHbHpMbk5qYUdWdFlYTmJibDA3ZG1GeUlHazlaR1ZqYjJSbFZWSkpRMjl0Y0c5dVpXNTBLRzhwTzJsbUtGd2lYQ0k5UFQxcEtYSmxkSFZ5YmlCMGFHbHpMbkpsYzI5c2RtVlNaV1p6S0hJc2RDazdhV1lvWENJdlhDSWhQVDFwTG1Ob1lYSkJkQ2d3S1NseVpYUjFjbTQ3Wm05eUtIWmhjaUJoUFdrdWMzQnNhWFFvWENJdlhDSXBMbk5zYVdObEtERXBMSE05TUR0elBHRXViR1Z1WjNSb08zTXJLeWw3ZG1GeUlIVTlZVnR6WFM1eVpYQnNZV05sS0M5K01TOW5MRndpTDF3aUtTNXlaWEJzWVdObEtDOStNQzluTEZ3aWZsd2lLVHRwWmloMmIybGtJREE5UFQxeVczVmRLWHR5UFhadmFXUWdNRHRpY21WaGEzMXlQWEpiZFYxOWFXWW9kbTlwWkNBd0lUMDljaWx5WlhSMWNtNGdkR2hwY3k1eVpYTnZiSFpsVW1WbWN5aHlMSFFwZlhadmFXUWdNRDA5UFhSb2FYTXViV2x6YzJsdVoxdHVYU1ltS0hSb2FYTXViV2x6YzJsdVp5NXdkWE5vS0c0cExIUm9hWE11YldsemMybHVaMXR1WFQxdUxIUm9hWE11YldsemMybHVaMDFoY0Z0dVhUMXVLWDBzYUM1d2NtOTBiM1I1Y0dVdWMyVmhjbU5vVTJOb1pXMWhjejFtZFc1amRHbHZiaWhsTEhRcGUybG1LRUZ5Y21GNUxtbHpRWEp5WVhrb1pTa3BabTl5S0haaGNpQnlQVEE3Y2p4bExteGxibWQwYUR0eUt5c3BkR2hwY3k1elpXRnlZMmhUWTJobGJXRnpLR1ZiY2wwc2RDazdaV3h6WlNCcFppaGxKaVpjSW05aWFtVmpkRndpUFQxMGVYQmxiMllnWlNsN1hDSnpkSEpwYm1kY0lqMDlkSGx3Wlc5bUlHVXVhV1FtSm1Nb2RDeGxMbWxrS1NZbWRtOXBaQ0F3UFQwOWRHaHBjeTV6WTJobGJXRnpXMlV1YVdSZEppWW9kR2hwY3k1elkyaGxiV0Z6VzJVdWFXUmRQV1VwTzJadmNpaDJZWElnYmlCcGJpQmxLV2xtS0Z3aVpXNTFiVndpSVQwOWJpbHBaaWhjSW05aWFtVmpkRndpUFQxMGVYQmxiMllnWlZ0dVhTbDBhR2x6TG5ObFlYSmphRk5qYUdWdFlYTW9aVnR1WFN4MEtUdGxiSE5sSUdsbUtGd2lKSEpsWmx3aVBUMDliaWw3ZG1GeUlHODlZU2hsVzI1ZEtUdHZKaVoyYjJsa0lEQTlQVDEwYUdsekxuTmphR1Z0WVhOYmIxMG1Kblp2YVdRZ01EMDlQWFJvYVhNdWJXbHpjMmx1WjAxaGNGdHZYU1ltS0hSb2FYTXViV2x6YzJsdVowMWhjRnR2WFQxdktYMTlmU3hvTG5CeWIzUnZkSGx3WlM1aFpHUlRZMmhsYldFOVpuVnVZM1JwYjI0b1pTeDBLWHRwWmloY0luTjBjbWx1WjF3aUlUMTBlWEJsYjJZZ1pYeDhYQ0oxYm1SbFptbHVaV1JjSWowOWRIbHdaVzltSUhRcGUybG1LRndpYjJKcVpXTjBYQ0loUFhSNWNHVnZaaUJsZkh4Y0luTjBjbWx1WjF3aUlUMTBlWEJsYjJZZ1pTNXBaQ2x5WlhSMWNtNDdkRDFsTEdVOWRDNXBaSDFsUFQwOVlTaGxLU3RjSWlOY0lpWW1LR1U5WVNobEtTa3NkR2hwY3k1elkyaGxiV0Z6VzJWZFBYUXNaR1ZzWlhSbElIUm9hWE11YldsemMybHVaMDFoY0Z0bFhTeHpLSFFzWlNrc2RHaHBjeTV6WldGeVkyaFRZMmhsYldGektIUXNaU2w5TEdndWNISnZkRzkwZVhCbExtZGxkRk5qYUdWdFlVMWhjRDFtZFc1amRHbHZiaWdwZTNaaGNpQmxQWHQ5TzJadmNpaDJZWElnZENCcGJpQjBhR2x6TG5OamFHVnRZWE1wWlZ0MFhUMTBhR2x6TG5OamFHVnRZWE5iZEYwN2NtVjBkWEp1SUdWOUxHZ3VjSEp2ZEc5MGVYQmxMbWRsZEZOamFHVnRZVlZ5YVhNOVpuVnVZM1JwYjI0b1pTbDdkbUZ5SUhROVcxMDdabTl5S0haaGNpQnlJR2x1SUhSb2FYTXVjMk5vWlcxaGN5bGxKaVloWlM1MFpYTjBLSElwZkh4MExuQjFjMmdvY2lrN2NtVjBkWEp1SUhSOUxHZ3VjSEp2ZEc5MGVYQmxMbWRsZEUxcGMzTnBibWRWY21selBXWjFibU4wYVc5dUtHVXBlM1poY2lCMFBWdGRPMlp2Y2loMllYSWdjaUJwYmlCMGFHbHpMbTFwYzNOcGJtZE5ZWEFwWlNZbUlXVXVkR1Z6ZENoeUtYeDhkQzV3ZFhOb0tISXBPM0psZEhWeWJpQjBmU3hvTG5CeWIzUnZkSGx3WlM1a2NtOXdVMk5vWlcxaGN6MW1kVzVqZEdsdmJpZ3BlM1JvYVhNdWMyTm9aVzFoY3oxN2ZTeDBhR2x6TG5KbGMyVjBLQ2w5TEdndWNISnZkRzkwZVhCbExuSmxjMlYwUFdaMWJtTjBhVzl1S0NsN2RHaHBjeTV0YVhOemFXNW5QVnRkTEhSb2FYTXViV2x6YzJsdVowMWhjRDE3ZlN4MGFHbHpMbVZ5Y205eWN6MWJYWDBzYUM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWQmJHdzlablZ1WTNScGIyNG9aU3gwTEhJc2JpeHZLWHQyWVhJZ2FUdHBaaWgwUFhSb2FYTXVjbVZ6YjJ4MlpWSmxabk1vZENrc0lYUXBjbVYwZFhKdUlHNTFiR3c3YVdZb2RDQnBibk4wWVc1alpXOW1JR3dwY21WMGRYSnVJSFJvYVhNdVpYSnliM0p6TG5CMWMyZ29kQ2tzZER0MllYSWdZU3h6UFhSb2FYTXVaWEp5YjNKekxteGxibWQwYUN4MVBXNTFiR3dzWXoxdWRXeHNPMmxtS0hSb2FYTXVZMmhsWTJ0U1pXTjFjbk5wZG1VbUptVW1KbHdpYjJKcVpXTjBYQ0k5UFhSNWNHVnZaaUJsS1h0cFppaHBQU0YwYUdsekxuTmpZVzV1WldRdWJHVnVaM1JvTEdWYmRHaHBjeTUyWVd4cFpHRjBaV1JUWTJobGJXRnpTMlY1WFNsN2RtRnlJR1k5WlZ0MGFHbHpMblpoYkdsa1lYUmxaRk5qYUdWdFlYTkxaWGxkTG1sdVpHVjRUMllvZENrN2FXWW9aaUU5UFMweEtYSmxkSFZ5YmlCMGFHbHpMbVZ5Y205eWN6MTBhR2x6TG1WeWNtOXljeTVqYjI1allYUW9aVnQwYUdsekxuWmhiR2xrWVhScGIyNUZjbkp2Y25OTFpYbGRXMlpkS1N4dWRXeHNmV2xtS0U5aWFtVmpkQzVwYzBaeWIzcGxiaWhsS1NZbUtHRTlkR2hwY3k1elkyRnVibVZrUm5KdmVtVnVMbWx1WkdWNFQyWW9aU2tzWVNFOVBTMHhLU2w3ZG1GeUlIQTlkR2hwY3k1elkyRnVibVZrUm5KdmVtVnVVMk5vWlcxaGMxdGhYUzVwYm1SbGVFOW1LSFFwTzJsbUtIQWhQVDB0TVNseVpYUjFjbTRnZEdocGN5NWxjbkp2Y25NOWRHaHBjeTVsY25KdmNuTXVZMjl1WTJGMEtIUm9hWE11YzJOaGJtNWxaRVp5YjNwbGJsWmhiR2xrWVhScGIyNUZjbkp2Y25OYllWMWJjRjBwTEc1MWJHeDlhV1lvZEdocGN5NXpZMkZ1Ym1Wa0xuQjFjMmdvWlNrc1QySnFaV04wTG1selJuSnZlbVZ1S0dVcEtXRTlQVDB0TVNZbUtHRTlkR2hwY3k1elkyRnVibVZrUm5KdmVtVnVMbXhsYm1kMGFDeDBhR2x6TG5OallXNXVaV1JHY205NlpXNHVjSFZ6YUNobEtTeDBhR2x6TG5OallXNXVaV1JHY205NlpXNVRZMmhsYldGekxuQjFjMmdvVzEwcEtTeDFQWFJvYVhNdWMyTmhibTVsWkVaeWIzcGxibE5qYUdWdFlYTmJZVjB1YkdWdVozUm9MSFJvYVhNdWMyTmhibTVsWkVaeWIzcGxibE5qYUdWdFlYTmJZVjFiZFYwOWRDeDBhR2x6TG5OallXNXVaV1JHY205NlpXNVdZV3hwWkdGMGFXOXVSWEp5YjNKelcyRmRXM1ZkUFZ0ZE8yVnNjMlY3YVdZb0lXVmJkR2hwY3k1MllXeHBaR0YwWldSVFkyaGxiV0Z6UzJWNVhTbDBjbmw3VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVXNkR2hwY3k1MllXeHBaR0YwWldSVFkyaGxiV0Z6UzJWNUxIdDJZV3gxWlRwYlhTeGpiMjVtYVdkMWNtRmliR1U2SVRCOUtTeFBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlN4MGFHbHpMblpoYkdsa1lYUnBiMjVGY25KdmNuTkxaWGtzZTNaaGJIVmxPbHRkTEdOdmJtWnBaM1Z5WVdKc1pUb2hNSDBwZldOaGRHTm9LR1FwZTJWYmRHaHBjeTUyWVd4cFpHRjBaV1JUWTJobGJXRnpTMlY1WFQxYlhTeGxXM1JvYVhNdWRtRnNhV1JoZEdsdmJrVnljbTl5YzB0bGVWMDlXMTE5WXoxbFczUm9hWE11ZG1Gc2FXUmhkR1ZrVTJOb1pXMWhjMHRsZVYwdWJHVnVaM1JvTEdWYmRHaHBjeTUyWVd4cFpHRjBaV1JUWTJobGJXRnpTMlY1WFZ0alhUMTBMR1ZiZEdocGN5NTJZV3hwWkdGMGFXOXVSWEp5YjNKelMyVjVYVnRqWFQxYlhYMTlkbUZ5SUdnOWRHaHBjeTVsY25KdmNuTXViR1Z1WjNSb0xIazlkR2hwY3k1MllXeHBaR0YwWlVKaGMybGpLR1VzZEN4dktYeDhkR2hwY3k1MllXeHBaR0YwWlU1MWJXVnlhV01vWlN4MExHOHBmSHgwYUdsekxuWmhiR2xrWVhSbFUzUnlhVzVuS0dVc2RDeHZLWHg4ZEdocGN5NTJZV3hwWkdGMFpVRnljbUY1S0dVc2RDeHZLWHg4ZEdocGN5NTJZV3hwWkdGMFpVOWlhbVZqZENobExIUXNieWw4ZkhSb2FYTXVkbUZzYVdSaGRHVkRiMjFpYVc1aGRHbHZibk1vWlN4MExHOHBmSHgwYUdsekxuWmhiR2xrWVhSbFNIbHdaWEp0WldScFlTaGxMSFFzYnlsOGZIUm9hWE11ZG1Gc2FXUmhkR1ZHYjNKdFlYUW9aU3gwTEc4cGZIeDBhR2x6TG5aaGJHbGtZWFJsUkdWbWFXNWxaRXRsZVhkdmNtUnpLR1VzZEN4dktYeDhiblZzYkR0cFppaHBLWHRtYjNJb08zUm9hWE11YzJOaGJtNWxaQzVzWlc1bmRHZzdLWHQyWVhJZ2JUMTBhR2x6TG5OallXNXVaV1F1Y0c5d0tDazdaR1ZzWlhSbElHMWJkR2hwY3k1MllXeHBaR0YwWldSVFkyaGxiV0Z6UzJWNVhYMTBhR2x6TG5OallXNXVaV1JHY205NlpXNDlXMTBzZEdocGN5NXpZMkZ1Ym1Wa1JuSnZlbVZ1VTJOb1pXMWhjejFiWFgxcFppaDVmSHhvSVQwOWRHaHBjeTVsY25KdmNuTXViR1Z1WjNSb0tXWnZjaWc3Y2lZbWNpNXNaVzVuZEdoOGZHNG1KbTR1YkdWdVozUm9PeWw3ZG1GeUlIWTljaVltY2k1c1pXNW5kR2cvWENKY0lpdHlMbkJ2Y0NncE9tNTFiR3dzWHoxdUppWnVMbXhsYm1kMGFEOWNJbHdpSzI0dWNHOXdLQ2s2Ym5Wc2JEdDVKaVlvZVQxNUxuQnlaV1pwZUZkcGRHZ29kaXhmS1Nrc2RHaHBjeTV3Y21WbWFYaEZjbkp2Y25Nb2FDeDJMRjhwZlhKbGRIVnliaUJ1ZFd4c0lUMDlkVDkwYUdsekxuTmpZVzV1WldSR2NtOTZaVzVXWVd4cFpHRjBhVzl1UlhKeWIzSnpXMkZkVzNWZFBYUm9hWE11WlhKeWIzSnpMbk5zYVdObEtITXBPbTUxYkd3aFBUMWpKaVlvWlZ0MGFHbHpMblpoYkdsa1lYUnBiMjVGY25KdmNuTkxaWGxkVzJOZFBYUm9hWE11WlhKeWIzSnpMbk5zYVdObEtITXBLU3gwYUdsekxtaGhibVJzWlVWeWNtOXlLSGtwZlN4b0xuQnliM1J2ZEhsd1pTNTJZV3hwWkdGMFpVWnZjbTFoZEQxbWRXNWpkR2x2YmlobExIUXBlMmxtS0Z3aWMzUnlhVzVuWENJaFBYUjVjR1Z2WmlCMExtWnZjbTFoZEh4OElYUm9hWE11Wm05eWJXRjBWbUZzYVdSaGRHOXljMXQwTG1admNtMWhkRjBwY21WMGRYSnVJRzUxYkd3N2RtRnlJSEk5ZEdocGN5NW1iM0p0WVhSV1lXeHBaR0YwYjNKelczUXVabTl5YldGMFhTNWpZV3hzS0c1MWJHd3NaU3gwS1R0eVpYUjFjbTVjSW5OMGNtbHVaMXdpUFQxMGVYQmxiMllnY254OFhDSnVkVzFpWlhKY0lqMDlkSGx3Wlc5bUlISS9kR2hwY3k1amNtVmhkR1ZGY25KdmNpaDJMa1pQVWsxQlZGOURWVk5VVDAwc2UyMWxjM05oWjJVNmNuMHNYQ0pjSWl4Y0lpOW1iM0p0WVhSY0lpeHVkV3hzTEdVc2RDazZjaVltWENKdlltcGxZM1JjSWowOWRIbHdaVzltSUhJL2RHaHBjeTVqY21WaGRHVkZjbkp2Y2loMkxrWlBVazFCVkY5RFZWTlVUMDBzZTIxbGMzTmhaMlU2Y2k1dFpYTnpZV2RsZkh4Y0lqOWNJbjBzY2k1a1lYUmhVR0YwYUh4OFhDSmNJaXh5TG5OamFHVnRZVkJoZEdoOGZGd2lMMlp2Y20xaGRGd2lMRzUxYkd3c1pTeDBLVHB1ZFd4c2ZTeG9MbkJ5YjNSdmRIbHdaUzUyWVd4cFpHRjBaVVJsWm1sdVpXUkxaWGwzYjNKa2N6MW1kVzVqZEdsdmJpaGxMSFFzY2lsN1ptOXlLSFpoY2lCdUlHbHVJSFJvYVhNdVpHVm1hVzVsWkV0bGVYZHZjbVJ6S1dsbUtGd2lkVzVrWldacGJtVmtYQ0loUFhSNWNHVnZaaUIwVzI1ZEtXWnZjaWgyWVhJZ2J6MTBhR2x6TG1SbFptbHVaV1JMWlhsM2IzSmtjMXR1WFN4cFBUQTdhVHh2TG14bGJtZDBhRHRwS3lzcGUzWmhjaUJoUFc5YmFWMHNjejFoS0dVc2RGdHVYU3gwTEhJcE8ybG1LRndpYzNSeWFXNW5YQ0k5UFhSNWNHVnZaaUJ6Zkh4Y0ltNTFiV0psY2x3aVBUMTBlWEJsYjJZZ2N5bHlaWFIxY200Z2RHaHBjeTVqY21WaGRHVkZjbkp2Y2loMkxrdEZXVmRQVWtSZlExVlRWRTlOTEh0clpYazZiaXh0WlhOellXZGxPbk45TEZ3aVhDSXNYQ0pjSWl4dWRXeHNMR1VzZENrdWNISmxabWw0VjJsMGFDaHVkV3hzTEc0cE8ybG1LSE1tSmx3aWIySnFaV04wWENJOVBYUjVjR1Z2WmlCektYdDJZWElnZFQxekxtTnZaR1U3YVdZb1hDSnpkSEpwYm1kY0lqMDlkSGx3Wlc5bUlIVXBlMmxtS0NGMlczVmRLWFJvY205M0lHNWxkeUJGY25KdmNpaGNJbFZ1WkdWbWFXNWxaQ0JsY25KdmNpQmpiMlJsSUNoMWMyVWdaR1ZtYVc1bFJYSnliM0lwT2lCY0lpdDFLVHQxUFhaYmRWMTlaV3h6WlZ3aWJuVnRZbVZ5WENJaFBYUjVjR1Z2WmlCMUppWW9kVDEyTGt0RldWZFBVa1JmUTFWVFZFOU5LVHQyWVhJZ2JEMWNJbTlpYW1WamRGd2lQVDEwZVhCbGIyWWdjeTV0WlhOellXZGxQM011YldWemMyRm5aVHA3YTJWNU9tNHNiV1Z6YzJGblpUcHpMbTFsYzNOaFoyVjhmRndpUDF3aWZTeGpQWE11YzJOb1pXMWhVR0YwYUh4OFhDSXZYQ0lyYmk1eVpYQnNZV05sS0M5K0wyY3NYQ0orTUZ3aUtTNXlaWEJzWVdObEtDOWNYQzh2Wnl4Y0luNHhYQ0lwTzNKbGRIVnliaUIwYUdsekxtTnlaV0YwWlVWeWNtOXlLSFVzYkN4ekxtUmhkR0ZRWVhSb2ZIeHVkV3hzTEdNc2JuVnNiQ3hsTEhRcGZYMXlaWFIxY200Z2JuVnNiSDBzYUM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWQ1lYTnBZejFtZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0N2NtVjBkWEp1S0c0OWRHaHBjeTUyWVd4cFpHRjBaVlI1Y0dVb1pTeDBMSElwS1Q5dUxuQnlaV1pwZUZkcGRHZ29iblZzYkN4Y0luUjVjR1ZjSWlrNktHNDlkR2hwY3k1MllXeHBaR0YwWlVWdWRXMG9aU3gwTEhJcEtUOXVMbkJ5WldacGVGZHBkR2dvYm5Wc2JDeGNJblI1Y0dWY0lpazZiblZzYkgwc2FDNXdjbTkwYjNSNWNHVXVkbUZzYVdSaGRHVlVlWEJsUFdaMWJtTjBhVzl1S0dVc2RDbDdhV1lvZG05cFpDQXdQVDA5ZEM1MGVYQmxLWEpsZEhWeWJpQnVkV3hzTzNaaGNpQnlQWFI1Y0dWdlppQmxPMjUxYkd3OVBUMWxQM0k5WENKdWRXeHNYQ0k2UVhKeVlYa3VhWE5CY25KaGVTaGxLU1ltS0hJOVhDSmhjbkpoZVZ3aUtUdDJZWElnYmoxMExuUjVjR1U3UVhKeVlYa3VhWE5CY25KaGVTaHVLWHg4S0c0OVcyNWRLVHRtYjNJb2RtRnlJRzg5TUR0dlBHNHViR1Z1WjNSb08yOHJLeWw3ZG1GeUlHazlibHR2WFR0cFppaHBQVDA5Y254OFhDSnBiblJsWjJWeVhDSTlQVDFwSmlaY0ltNTFiV0psY2x3aVBUMDljaVltWlNVeFBUMDlNQ2x5WlhSMWNtNGdiblZzYkgxeVpYUjFjbTRnZEdocGN5NWpjbVZoZEdWRmNuSnZjaWgyTGtsT1ZrRk1TVVJmVkZsUVJTeDdkSGx3WlRweUxHVjRjR1ZqZEdWa09tNHVhbTlwYmloY0lpOWNJaWw5TEZ3aVhDSXNYQ0pjSWl4dWRXeHNMR1VzZENsOUxHZ3VjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxSVzUxYlQxbWRXNWpkR2x2YmlobExIUXBlMmxtS0hadmFXUWdNRDA5UFhSYlhDSmxiblZ0WENKZEtYSmxkSFZ5YmlCdWRXeHNPMlp2Y2loMllYSWdjajB3TzNJOGRGdGNJbVZ1ZFcxY0lsMHViR1Z1WjNSb08zSXJLeWw3ZG1GeUlHODlkRnRjSW1WdWRXMWNJbDFiY2wwN2FXWW9iaWhsTEc4cEtYSmxkSFZ5YmlCdWRXeHNmWEpsZEhWeWJpQjBhR2x6TG1OeVpXRjBaVVZ5Y205eUtIWXVSVTVWVFY5TlNWTk5RVlJEU0N4N2RtRnNkV1U2WENKMWJtUmxabWx1WldSY0lpRTlkSGx3Wlc5bUlFcFRUMDQvU2xOUFRpNXpkSEpwYm1kcFpua29aU2s2Wlgwc1hDSmNJaXhjSWx3aUxHNTFiR3dzWlN4MEtYMHNhQzV3Y205MGIzUjVjR1V1ZG1Gc2FXUmhkR1ZPZFcxbGNtbGpQV1oxYm1OMGFXOXVLR1VzZEN4eUtYdHlaWFIxY200Z2RHaHBjeTUyWVd4cFpHRjBaVTExYkhScGNHeGxUMllvWlN4MExISXBmSHgwYUdsekxuWmhiR2xrWVhSbFRXbHVUV0Y0S0dVc2RDeHlLWHg4ZEdocGN5NTJZV3hwWkdGMFpVNWhUaWhsTEhRc2NpbDhmRzUxYkd4OU8zWmhjaUI1UFUxaGRHZ3VjRzkzS0RJc0xUVXhLU3h0UFRFdGVUdG9MbkJ5YjNSdmRIbHdaUzUyWVd4cFpHRjBaVTExYkhScGNHeGxUMlk5Wm5WdVkzUnBiMjRvWlN4MEtYdDJZWElnY2oxMExtMTFiSFJwY0d4bFQyWjhmSFF1WkdsMmFYTnBZbXhsUW5rN2FXWW9kbTlwWkNBd1BUMDljaWx5WlhSMWNtNGdiblZzYkR0cFppaGNJbTUxYldKbGNsd2lQVDEwZVhCbGIyWWdaU2w3ZG1GeUlHNDlaUzl5SlRFN2FXWW9iajQ5ZVNZbWJqeHRLWEpsZEhWeWJpQjBhR2x6TG1OeVpXRjBaVVZ5Y205eUtIWXVUbFZOUWtWU1gwMVZURlJKVUV4RlgwOUdMSHQyWVd4MVpUcGxMRzExYkhScGNHeGxUMlk2Y24wc1hDSmNJaXhjSWx3aUxHNTFiR3dzWlN4MEtYMXlaWFIxY200Z2JuVnNiSDBzYUM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWTmFXNU5ZWGc5Wm5WdVkzUnBiMjRvWlN4MEtYdHBaaWhjSW01MWJXSmxjbHdpSVQxMGVYQmxiMllnWlNseVpYUjFjbTRnYm5Wc2JEdHBaaWgyYjJsa0lEQWhQVDEwTG0xcGJtbHRkVzBwZTJsbUtHVThkQzV0YVc1cGJYVnRLWEpsZEhWeWJpQjBhR2x6TG1OeVpXRjBaVVZ5Y205eUtIWXVUbFZOUWtWU1gwMUpUa2xOVlUwc2UzWmhiSFZsT21Vc2JXbHVhVzExYlRwMExtMXBibWx0ZFcxOUxGd2lYQ0lzWENJdmJXbHVhVzExYlZ3aUxHNTFiR3dzWlN4MEtUdHBaaWgwTG1WNFkyeDFjMmwyWlUxcGJtbHRkVzBtSm1VOVBUMTBMbTFwYm1sdGRXMHBjbVYwZFhKdUlIUm9hWE11WTNKbFlYUmxSWEp5YjNJb2RpNU9WVTFDUlZKZlRVbE9TVTFWVFY5RldFTk1WVk5KVmtVc2UzWmhiSFZsT21Vc2JXbHVhVzExYlRwMExtMXBibWx0ZFcxOUxGd2lYQ0lzWENJdlpYaGpiSFZ6YVhabFRXbHVhVzExYlZ3aUxHNTFiR3dzWlN4MEtYMXBaaWgyYjJsa0lEQWhQVDEwTG0xaGVHbHRkVzBwZTJsbUtHVStkQzV0WVhocGJYVnRLWEpsZEhWeWJpQjBhR2x6TG1OeVpXRjBaVVZ5Y205eUtIWXVUbFZOUWtWU1gwMUJXRWxOVlUwc2UzWmhiSFZsT21Vc2JXRjRhVzExYlRwMExtMWhlR2x0ZFcxOUxGd2lYQ0lzWENJdmJXRjRhVzExYlZ3aUxHNTFiR3dzWlN4MEtUdHBaaWgwTG1WNFkyeDFjMmwyWlUxaGVHbHRkVzBtSm1VOVBUMTBMbTFoZUdsdGRXMHBjbVYwZFhKdUlIUm9hWE11WTNKbFlYUmxSWEp5YjNJb2RpNU9WVTFDUlZKZlRVRllTVTFWVFY5RldFTk1WVk5KVmtVc2UzWmhiSFZsT21Vc2JXRjRhVzExYlRwMExtMWhlR2x0ZFcxOUxGd2lYQ0lzWENJdlpYaGpiSFZ6YVhabFRXRjRhVzExYlZ3aUxHNTFiR3dzWlN4MEtYMXlaWFIxY200Z2JuVnNiSDBzYUM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWT1lVNDlablZ1WTNScGIyNG9aU3gwS1h0eVpYUjFjbTVjSW01MWJXSmxjbHdpSVQxMGVYQmxiMllnWlQ5dWRXeHNPbWx6VG1GT0tHVXBQVDA5SVRCOGZHVTlQVDB4THpCOGZHVTlQVDB0S0RFdk1Day9kR2hwY3k1amNtVmhkR1ZGY25KdmNpaDJMazVWVFVKRlVsOU9UMVJmUVY5T1ZVMUNSVklzZTNaaGJIVmxPbVY5TEZ3aVhDSXNYQ0l2ZEhsd1pWd2lMRzUxYkd3c1pTeDBLVHB1ZFd4c2ZTeG9MbkJ5YjNSdmRIbHdaUzUyWVd4cFpHRjBaVk4wY21sdVp6MW1kVzVqZEdsdmJpaGxMSFFzY2lsN2NtVjBkWEp1SUhSb2FYTXVkbUZzYVdSaGRHVlRkSEpwYm1kTVpXNW5kR2dvWlN4MExISXBmSHgwYUdsekxuWmhiR2xrWVhSbFUzUnlhVzVuVUdGMGRHVnliaWhsTEhRc2NpbDhmRzUxYkd4OUxHZ3VjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxVM1J5YVc1blRHVnVaM1JvUFdaMWJtTjBhVzl1S0dVc2RDbDdjbVYwZFhKdVhDSnpkSEpwYm1kY0lpRTlkSGx3Wlc5bUlHVS9iblZzYkRwMmIybGtJREFoUFQxMExtMXBia3hsYm1kMGFDWW1aUzVzWlc1bmRHZzhkQzV0YVc1TVpXNW5kR2cvZEdocGN5NWpjbVZoZEdWRmNuSnZjaWgyTGxOVVVrbE9SMTlNUlU1SFZFaGZVMGhQVWxRc2UyeGxibWQwYURwbExteGxibWQwYUN4dGFXNXBiWFZ0T25RdWJXbHVUR1Z1WjNSb2ZTeGNJbHdpTEZ3aUwyMXBia3hsYm1kMGFGd2lMRzUxYkd3c1pTeDBLVHAyYjJsa0lEQWhQVDEwTG0xaGVFeGxibWQwYUNZbVpTNXNaVzVuZEdnK2RDNXRZWGhNWlc1bmRHZy9kR2hwY3k1amNtVmhkR1ZGY25KdmNpaDJMbE5VVWtsT1IxOU1SVTVIVkVoZlRFOU9SeXg3YkdWdVozUm9PbVV1YkdWdVozUm9MRzFoZUdsdGRXMDZkQzV0WVhoTVpXNW5kR2g5TEZ3aVhDSXNYQ0l2YldGNFRHVnVaM1JvWENJc2JuVnNiQ3hsTEhRcE9tNTFiR3g5TEdndWNISnZkRzkwZVhCbExuWmhiR2xrWVhSbFUzUnlhVzVuVUdGMGRHVnliajFtZFc1amRHbHZiaWhsTEhRcGUybG1LRndpYzNSeWFXNW5YQ0loUFhSNWNHVnZaaUJsZkh4Y0luTjBjbWx1WjF3aUlUMTBlWEJsYjJZZ2RDNXdZWFIwWlhKdUppWWhLSFF1Y0dGMGRHVnliaUJwYm5OMFlXNWpaVzltSUZKbFowVjRjQ2twY21WMGRYSnVJRzUxYkd3N2RtRnlJSEk3YVdZb2RDNXdZWFIwWlhKdUlHbHVjM1JoYm1ObGIyWWdVbVZuUlhod0tYSTlkQzV3WVhSMFpYSnVPMlZzYzJWN2RtRnlJRzRzYnoxY0lsd2lMR2s5ZEM1d1lYUjBaWEp1TG0xaGRHTm9LQzllWEZ3dktDNHJLVnhjTHloYmFXMW5YU29wSkM4cE8yay9LRzQ5YVZzeFhTeHZQV2xiTWwwcE9tNDlkQzV3WVhSMFpYSnVMSEk5Ym1WM0lGSmxaMFY0Y0NodUxHOHBmWEpsZEhWeWJpQnlMblJsYzNRb1pTay9iblZzYkRwMGFHbHpMbU55WldGMFpVVnljbTl5S0hZdVUxUlNTVTVIWDFCQlZGUkZVazRzZTNCaGRIUmxjbTQ2ZEM1d1lYUjBaWEp1ZlN4Y0lsd2lMRndpTDNCaGRIUmxjbTVjSWl4dWRXeHNMR1VzZENsOUxHZ3VjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxRWEp5WVhrOVpuVnVZM1JwYjI0b1pTeDBMSElwZTNKbGRIVnliaUJCY25KaGVTNXBjMEZ5Y21GNUtHVXBQM1JvYVhNdWRtRnNhV1JoZEdWQmNuSmhlVXhsYm1kMGFDaGxMSFFzY2lsOGZIUm9hWE11ZG1Gc2FXUmhkR1ZCY25KaGVWVnVhWEYxWlVsMFpXMXpLR1VzZEN4eUtYeDhkR2hwY3k1MllXeHBaR0YwWlVGeWNtRjVTWFJsYlhNb1pTeDBMSElwZkh4dWRXeHNPbTUxYkd4OUxHZ3VjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxRWEp5WVhsTVpXNW5kR2c5Wm5WdVkzUnBiMjRvWlN4MEtYdDJZWElnY2p0eVpYUjFjbTRnZG05cFpDQXdJVDA5ZEM1dGFXNUpkR1Z0Y3lZbVpTNXNaVzVuZEdnOGRDNXRhVzVKZEdWdGN5WW1LSEk5ZEdocGN5NWpjbVZoZEdWRmNuSnZjaWgyTGtGU1VrRlpYMHhGVGtkVVNGOVRTRTlTVkN4N2JHVnVaM1JvT21VdWJHVnVaM1JvTEcxcGJtbHRkVzA2ZEM1dGFXNUpkR1Z0YzMwc1hDSmNJaXhjSWk5dGFXNUpkR1Z0YzF3aUxHNTFiR3dzWlN4MEtTeDBhR2x6TG1oaGJtUnNaVVZ5Y205eUtISXBLVDl5T25admFXUWdNQ0U5UFhRdWJXRjRTWFJsYlhNbUptVXViR1Z1WjNSb1BuUXViV0Y0U1hSbGJYTW1KaWh5UFhSb2FYTXVZM0psWVhSbFJYSnliM0lvZGk1QlVsSkJXVjlNUlU1SFZFaGZURTlPUnl4N2JHVnVaM1JvT21VdWJHVnVaM1JvTEcxaGVHbHRkVzA2ZEM1dFlYaEpkR1Z0YzMwc1hDSmNJaXhjSWk5dFlYaEpkR1Z0YzF3aUxHNTFiR3dzWlN4MEtTeDBhR2x6TG1oaGJtUnNaVVZ5Y205eUtISXBLVDl5T201MWJHeDlMR2d1Y0hKdmRHOTBlWEJsTG5aaGJHbGtZWFJsUVhKeVlYbFZibWx4ZFdWSmRHVnRjejFtZFc1amRHbHZiaWhsTEhRcGUybG1LSFF1ZFc1cGNYVmxTWFJsYlhNcFptOXlLSFpoY2lCeVBUQTdjanhsTG14bGJtZDBhRHR5S3lzcFptOXlLSFpoY2lCdlBYSXJNVHR2UEdVdWJHVnVaM1JvTzI4ckt5bHBaaWh1S0dWYmNsMHNaVnR2WFNrcGUzWmhjaUJwUFhSb2FYTXVZM0psWVhSbFJYSnliM0lvZGk1QlVsSkJXVjlWVGtsUlZVVXNlMjFoZEdOb01UcHlMRzFoZEdOb01qcHZmU3hjSWx3aUxGd2lMM1Z1YVhGMVpVbDBaVzF6WENJc2JuVnNiQ3hsTEhRcE8ybG1LSFJvYVhNdWFHRnVaR3hsUlhKeWIzSW9hU2twY21WMGRYSnVJR2w5Y21WMGRYSnVJRzUxYkd4OUxHZ3VjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxRWEp5WVhsSmRHVnRjejFtZFc1amRHbHZiaWhsTEhRc2NpbDdhV1lvZG05cFpDQXdQVDA5ZEM1cGRHVnRjeWx5WlhSMWNtNGdiblZzYkR0MllYSWdiaXh2TzJsbUtFRnljbUY1TG1selFYSnlZWGtvZEM1cGRHVnRjeWtwZTJadmNpaHZQVEE3Ynp4bExteGxibWQwYUR0dkt5c3BhV1lvYnp4MExtbDBaVzF6TG14bGJtZDBhQ2w3YVdZb2JqMTBhR2x6TG5aaGJHbGtZWFJsUVd4c0tHVmJiMTBzZEM1cGRHVnRjMXR2WFN4YmIxMHNXMXdpYVhSbGJYTmNJaXh2WFN4eUsxd2lMMXdpSzI4cEtYSmxkSFZ5YmlCdWZXVnNjMlVnYVdZb2RtOXBaQ0F3SVQwOWRDNWhaR1JwZEdsdmJtRnNTWFJsYlhNcGFXWW9YQ0ppYjI5c1pXRnVYQ0k5UFhSNWNHVnZaaUIwTG1Ga1pHbDBhVzl1WVd4SmRHVnRjeWw3YVdZb0lYUXVZV1JrYVhScGIyNWhiRWwwWlcxekppWW9iajEwYUdsekxtTnlaV0YwWlVWeWNtOXlLSFl1UVZKU1FWbGZRVVJFU1ZSSlQwNUJURjlKVkVWTlV5eDdmU3hjSWk5Y0lpdHZMRndpTDJGa1pHbDBhVzl1WVd4SmRHVnRjMXdpTEc1MWJHd3NaU3gwS1N4MGFHbHpMbWhoYm1Sc1pVVnljbTl5S0c0cEtTbHlaWFIxY200Z2JuMWxiSE5sSUdsbUtHNDlkR2hwY3k1MllXeHBaR0YwWlVGc2JDaGxXMjlkTEhRdVlXUmthWFJwYjI1aGJFbDBaVzF6TEZ0dlhTeGJYQ0poWkdScGRHbHZibUZzU1hSbGJYTmNJbDBzY2l0Y0lpOWNJaXR2S1NseVpYUjFjbTRnYm4xbGJITmxJR1p2Y2lodlBUQTdienhsTG14bGJtZDBhRHR2S3lzcGFXWW9iajEwYUdsekxuWmhiR2xrWVhSbFFXeHNLR1ZiYjEwc2RDNXBkR1Z0Y3l4YmIxMHNXMXdpYVhSbGJYTmNJbDBzY2l0Y0lpOWNJaXR2S1NseVpYUjFjbTRnYmp0eVpYUjFjbTRnYm5Wc2JIMHNhQzV3Y205MGIzUjVjR1V1ZG1Gc2FXUmhkR1ZQWW1wbFkzUTlablZ1WTNScGIyNG9aU3gwTEhJcGUzSmxkSFZ5Ymx3aWIySnFaV04wWENJaFBYUjVjR1Z2WmlCbGZIeHVkV3hzUFQwOVpYeDhRWEp5WVhrdWFYTkJjbkpoZVNobEtUOXVkV3hzT25Sb2FYTXVkbUZzYVdSaGRHVlBZbXBsWTNSTmFXNU5ZWGhRY205d1pYSjBhV1Z6S0dVc2RDeHlLWHg4ZEdocGN5NTJZV3hwWkdGMFpVOWlhbVZqZEZKbGNYVnBjbVZrVUhKdmNHVnlkR2xsY3lobExIUXNjaWw4ZkhSb2FYTXVkbUZzYVdSaGRHVlBZbXBsWTNSUWNtOXdaWEowYVdWektHVXNkQ3h5S1h4OGRHaHBjeTUyWVd4cFpHRjBaVTlpYW1WamRFUmxjR1Z1WkdWdVkybGxjeWhsTEhRc2NpbDhmRzUxYkd4OUxHZ3VjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxUMkpxWldOMFRXbHVUV0Y0VUhKdmNHVnlkR2xsY3oxbWRXNWpkR2x2YmlobExIUXBlM1poY2lCeUxHNDlUMkpxWldOMExtdGxlWE1vWlNrN2NtVjBkWEp1SUhadmFXUWdNQ0U5UFhRdWJXbHVVSEp2Y0dWeWRHbGxjeVltYmk1c1pXNW5kR2c4ZEM1dGFXNVFjbTl3WlhKMGFXVnpKaVlvY2oxMGFHbHpMbU55WldGMFpVVnljbTl5S0hZdVQwSktSVU5VWDFCU1QxQkZVbFJKUlZOZlRVbE9TVTFWVFN4N2NISnZjR1Z5ZEhsRGIzVnVkRHB1TG14bGJtZDBhQ3h0YVc1cGJYVnRPblF1YldsdVVISnZjR1Z5ZEdsbGMzMHNYQ0pjSWl4Y0lpOXRhVzVRY205d1pYSjBhV1Z6WENJc2JuVnNiQ3hsTEhRcExIUm9hWE11YUdGdVpHeGxSWEp5YjNJb2Npa3BQM0k2ZG05cFpDQXdJVDA5ZEM1dFlYaFFjbTl3WlhKMGFXVnpKaVp1TG14bGJtZDBhRDUwTG0xaGVGQnliM0JsY25ScFpYTW1KaWh5UFhSb2FYTXVZM0psWVhSbFJYSnliM0lvZGk1UFFrcEZRMVJmVUZKUFVFVlNWRWxGVTE5TlFWaEpUVlZOTEh0d2NtOXdaWEowZVVOdmRXNTBPbTR1YkdWdVozUm9MRzFoZUdsdGRXMDZkQzV0WVhoUWNtOXdaWEowYVdWemZTeGNJbHdpTEZ3aUwyMWhlRkJ5YjNCbGNuUnBaWE5jSWl4dWRXeHNMR1VzZENrc2RHaHBjeTVvWVc1a2JHVkZjbkp2Y2loeUtTay9janB1ZFd4c2ZTeG9MbkJ5YjNSdmRIbHdaUzUyWVd4cFpHRjBaVTlpYW1WamRGSmxjWFZwY21Wa1VISnZjR1Z5ZEdsbGN6MW1kVzVqZEdsdmJpaGxMSFFwZTJsbUtIWnZhV1FnTUNFOVBYUXVjbVZ4ZFdseVpXUXBabTl5S0haaGNpQnlQVEE3Y2p4MExuSmxjWFZwY21Wa0xteGxibWQwYUR0eUt5c3BlM1poY2lCdVBYUXVjbVZ4ZFdseVpXUmJjbDA3YVdZb2RtOXBaQ0F3UFQwOVpWdHVYU2w3ZG1GeUlHODlkR2hwY3k1amNtVmhkR1ZGY25KdmNpaDJMazlDU2tWRFZGOVNSVkZWU1ZKRlJDeDdhMlY1T201OUxGd2lYQ0lzWENJdmNtVnhkV2x5WldRdlhDSXJjaXh1ZFd4c0xHVXNkQ2s3YVdZb2RHaHBjeTVvWVc1a2JHVkZjbkp2Y2lodktTbHlaWFIxY200Z2IzMTljbVYwZFhKdUlHNTFiR3g5TEdndWNISnZkRzkwZVhCbExuWmhiR2xrWVhSbFQySnFaV04wVUhKdmNHVnlkR2xsY3oxbWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDdabTl5S0haaGNpQnZJR2x1SUdVcGUzWmhjaUJwUFhJclhDSXZYQ0lyYnk1eVpYQnNZV05sS0M5K0wyY3NYQ0orTUZ3aUtTNXlaWEJzWVdObEtDOWNYQzh2Wnl4Y0luNHhYQ0lwTEdFOUlURTdhV1lvZG05cFpDQXdJVDA5ZEM1d2NtOXdaWEowYVdWekppWjJiMmxrSURBaFBUMTBMbkJ5YjNCbGNuUnBaWE5iYjEwbUppaGhQU0V3TEc0OWRHaHBjeTUyWVd4cFpHRjBaVUZzYkNobFcyOWRMSFF1Y0hKdmNHVnlkR2xsYzF0dlhTeGJiMTBzVzF3aWNISnZjR1Z5ZEdsbGMxd2lMRzlkTEdrcEtTbHlaWFIxY200Z2JqdHBaaWgyYjJsa0lEQWhQVDEwTG5CaGRIUmxjbTVRY205d1pYSjBhV1Z6S1dadmNpaDJZWElnY3lCcGJpQjBMbkJoZEhSbGNtNVFjbTl3WlhKMGFXVnpLWHQyWVhJZ2RUMXVaWGNnVW1WblJYaHdLSE1wTzJsbUtIVXVkR1Z6ZENodktTWW1LR0U5SVRBc2JqMTBhR2x6TG5aaGJHbGtZWFJsUVd4c0tHVmJiMTBzZEM1d1lYUjBaWEp1VUhKdmNHVnlkR2xsYzF0elhTeGJiMTBzVzF3aWNHRjBkR1Z5YmxCeWIzQmxjblJwWlhOY0lpeHpYU3hwS1NrcGNtVjBkWEp1SUc1OWFXWW9ZU2wwYUdsekxuUnlZV05yVlc1cmJtOTNibEJ5YjNCbGNuUnBaWE1tSmloMGFHbHpMbXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jMXRwWFQwaE1DeGtaV3hsZEdVZ2RHaHBjeTUxYm10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvYzF0cFhTazdaV3h6WlNCcFppaDJiMmxrSURBaFBUMTBMbUZrWkdsMGFXOXVZV3hRY205d1pYSjBhV1Z6S1h0cFppaDBhR2x6TG5SeVlXTnJWVzVyYm05M2JsQnliM0JsY25ScFpYTW1KaWgwYUdsekxtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2MxdHBYVDBoTUN4a1pXeGxkR1VnZEdocGN5NTFibXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jMXRwWFNrc1hDSmliMjlzWldGdVhDSTlQWFI1Y0dWdlppQjBMbUZrWkdsMGFXOXVZV3hRY205d1pYSjBhV1Z6S1h0cFppZ2hkQzVoWkdScGRHbHZibUZzVUhKdmNHVnlkR2xsY3lZbUtHNDlkR2hwY3k1amNtVmhkR1ZGY25KdmNpaDJMazlDU2tWRFZGOUJSRVJKVkVsUFRrRk1YMUJTVDFCRlVsUkpSVk1zZTJ0bGVUcHZmU3hjSWx3aUxGd2lMMkZrWkdsMGFXOXVZV3hRY205d1pYSjBhV1Z6WENJc2JuVnNiQ3hsTEhRcExuQnlaV1pwZUZkcGRHZ29ieXh1ZFd4c0tTeDBhR2x6TG1oaGJtUnNaVVZ5Y205eUtHNHBLU2x5WlhSMWNtNGdibjFsYkhObElHbG1LRzQ5ZEdocGN5NTJZV3hwWkdGMFpVRnNiQ2hsVzI5ZExIUXVZV1JrYVhScGIyNWhiRkJ5YjNCbGNuUnBaWE1zVzI5ZExGdGNJbUZrWkdsMGFXOXVZV3hRY205d1pYSjBhV1Z6WENKZExHa3BLWEpsZEhWeWJpQnVmV1ZzYzJVZ2RHaHBjeTUwY21GamExVnVhMjV2ZDI1UWNtOXdaWEowYVdWekppWWhkR2hwY3k1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhOYmFWMG1KaWgwYUdsekxuVnVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpXMmxkUFNFd0tYMXlaWFIxY200Z2JuVnNiSDBzYUM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWUFltcGxZM1JFWlhCbGJtUmxibU5wWlhNOVpuVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVPMmxtS0hadmFXUWdNQ0U5UFhRdVpHVndaVzVrWlc1amFXVnpLV1p2Y2loMllYSWdieUJwYmlCMExtUmxjR1Z1WkdWdVkybGxjeWxwWmloMmIybGtJREFoUFQxbFcyOWRLWHQyWVhJZ2FUMTBMbVJsY0dWdVpHVnVZMmxsYzF0dlhUdHBaaWhjSW5OMGNtbHVaMXdpUFQxMGVYQmxiMllnYVNsN2FXWW9kbTlwWkNBd1BUMDlaVnRwWFNZbUtHNDlkR2hwY3k1amNtVmhkR1ZGY25KdmNpaDJMazlDU2tWRFZGOUVSVkJGVGtSRlRrTlpYMHRGV1N4N2EyVjVPbThzYldsemMybHVaenBwZlN4Y0lsd2lMRndpWENJc2JuVnNiQ3hsTEhRcExuQnlaV1pwZUZkcGRHZ29iblZzYkN4dktTNXdjbVZtYVhoWGFYUm9LRzUxYkd3c1hDSmtaWEJsYm1SbGJtTnBaWE5jSWlrc2RHaHBjeTVvWVc1a2JHVkZjbkp2Y2lodUtTa3BjbVYwZFhKdUlHNTlaV3h6WlNCcFppaEJjbkpoZVM1cGMwRnljbUY1S0drcEtXWnZjaWgyWVhJZ1lUMHdPMkU4YVM1c1pXNW5kR2c3WVNzcktYdDJZWElnY3oxcFcyRmRPMmxtS0hadmFXUWdNRDA5UFdWYmMxMG1KaWh1UFhSb2FYTXVZM0psWVhSbFJYSnliM0lvZGk1UFFrcEZRMVJmUkVWUVJVNUVSVTVEV1Y5TFJWa3NlMnRsZVRwdkxHMXBjM05wYm1jNmMzMHNYQ0pjSWl4Y0lpOWNJaXRoTEc1MWJHd3NaU3gwS1M1d2NtVm1hWGhYYVhSb0tHNTFiR3dzYnlrdWNISmxabWw0VjJsMGFDaHVkV3hzTEZ3aVpHVndaVzVrWlc1amFXVnpYQ0lwTEhSb2FYTXVhR0Z1Wkd4bFJYSnliM0lvYmlrcEtYSmxkSFZ5YmlCdWZXVnNjMlVnYVdZb2JqMTBhR2x6TG5aaGJHbGtZWFJsUVd4c0tHVXNhU3hiWFN4YlhDSmtaWEJsYm1SbGJtTnBaWE5jSWl4dlhTeHlLU2x5WlhSMWNtNGdibjF5WlhSMWNtNGdiblZzYkgwc2FDNXdjbTkwYjNSNWNHVXVkbUZzYVdSaGRHVkRiMjFpYVc1aGRHbHZibk05Wm5WdVkzUnBiMjRvWlN4MExISXBlM0psZEhWeWJpQjBhR2x6TG5aaGJHbGtZWFJsUVd4c1QyWW9aU3gwTEhJcGZIeDBhR2x6TG5aaGJHbGtZWFJsUVc1NVQyWW9aU3gwTEhJcGZIeDBhR2x6TG5aaGJHbGtZWFJsVDI1bFQyWW9aU3gwTEhJcGZIeDBhR2x6TG5aaGJHbGtZWFJsVG05MEtHVXNkQ3h5S1h4OGJuVnNiSDBzYUM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWQmJHeFBaajFtZFc1amRHbHZiaWhsTEhRc2NpbDdhV1lvZG05cFpDQXdQVDA5ZEM1aGJHeFBaaWx5WlhSMWNtNGdiblZzYkR0bWIzSW9kbUZ5SUc0c2J6MHdPMjg4ZEM1aGJHeFBaaTVzWlc1bmRHZzdieXNyS1h0MllYSWdhVDEwTG1Gc2JFOW1XMjlkTzJsbUtHNDlkR2hwY3k1MllXeHBaR0YwWlVGc2JDaGxMR2tzVzEwc1cxd2lZV3hzVDJaY0lpeHZYU3h5S1NseVpYUjFjbTRnYm4xeVpYUjFjbTRnYm5Wc2JIMHNhQzV3Y205MGIzUjVjR1V1ZG1Gc2FXUmhkR1ZCYm5sUFpqMW1kVzVqZEdsdmJpaGxMSFFzY2lsN2FXWW9kbTlwWkNBd1BUMDlkQzVoYm5sUFppbHlaWFIxY200Z2JuVnNiRHQyWVhJZ2JpeHZMR2s5VzEwc1lUMTBhR2x6TG1WeWNtOXljeTVzWlc1bmRHZzdkR2hwY3k1MGNtRmphMVZ1YTI1dmQyNVFjbTl3WlhKMGFXVnpKaVlvYmoxMGFHbHpMblZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6TEc4OWRHaHBjeTVyYm05M2JsQnliM0JsY25SNVVHRjBhSE1wTzJadmNpaDJZWElnY3owaE1DeDFQVEE3ZFR4MExtRnVlVTltTG14bGJtZDBhRHQxS3lzcGUzUm9hWE11ZEhKaFkydFZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5WW1LSFJvYVhNdWRXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITTllMzBzZEdocGN5NXJibTkzYmxCeWIzQmxjblI1VUdGMGFITTllMzBwTzNaaGNpQnNQWFF1WVc1NVQyWmJkVjBzWXoxMGFHbHpMbVZ5Y205eWN5NXNaVzVuZEdnc1pqMTBhR2x6TG5aaGJHbGtZWFJsUVd4c0tHVXNiQ3hiWFN4YlhDSmhibmxQWmx3aUxIVmRMSElwTzJsbUtHNTFiR3c5UFQxbUppWmpQVDA5ZEdocGN5NWxjbkp2Y25NdWJHVnVaM1JvS1h0cFppaDBhR2x6TG1WeWNtOXljejEwYUdsekxtVnljbTl5Y3k1emJHbGpaU2d3TEdFcExIUm9hWE11ZEhKaFkydFZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5bDdabTl5S0haaGNpQndJR2x1SUhSb2FYTXVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpLVzliY0YwOUlUQXNaR1ZzWlhSbElHNWJjRjA3Wm05eUtIWmhjaUJrSUdsdUlIUm9hWE11ZFc1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhNcGIxdGtYWHg4S0c1YlpGMDlJVEFwTzNNOUlURTdZMjl1ZEdsdWRXVjljbVYwZFhKdUlHNTFiR3g5WmlZbWFTNXdkWE5vS0dZdWNISmxabWw0VjJsMGFDaHVkV3hzTEZ3aVhDSXJkU2t1Y0hKbFptbDRWMmwwYUNodWRXeHNMRndpWVc1NVQyWmNJaWtwZlhKbGRIVnliaUIwYUdsekxuUnlZV05yVlc1cmJtOTNibEJ5YjNCbGNuUnBaWE1tSmloMGFHbHpMblZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6UFc0c2RHaHBjeTVyYm05M2JsQnliM0JsY25SNVVHRjBhSE05Ynlrc2N6OG9hVDFwTG1OdmJtTmhkQ2gwYUdsekxtVnljbTl5Y3k1emJHbGpaU2hoS1Nrc2RHaHBjeTVsY25KdmNuTTlkR2hwY3k1bGNuSnZjbk11YzJ4cFkyVW9NQ3hoS1N4MGFHbHpMbU55WldGMFpVVnljbTl5S0hZdVFVNVpYMDlHWDAxSlUxTkpUa2NzZTMwc1hDSmNJaXhjSWk5aGJubFBabHdpTEdrc1pTeDBLU2s2ZG05cFpDQXdmU3hvTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlU5dVpVOW1QV1oxYm1OMGFXOXVLR1VzZEN4eUtYdHBaaWgyYjJsa0lEQTlQVDEwTG05dVpVOW1LWEpsZEhWeWJpQnVkV3hzTzNaaGNpQnVMRzhzYVQxdWRXeHNMR0U5VzEwc2N6MTBhR2x6TG1WeWNtOXljeTVzWlc1bmRHZzdkR2hwY3k1MGNtRmphMVZ1YTI1dmQyNVFjbTl3WlhKMGFXVnpKaVlvYmoxMGFHbHpMblZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6TEc4OWRHaHBjeTVyYm05M2JsQnliM0JsY25SNVVHRjBhSE1wTzJadmNpaDJZWElnZFQwd08zVThkQzV2Ym1WUFppNXNaVzVuZEdnN2RTc3JLWHQwYUdsekxuUnlZV05yVlc1cmJtOTNibEJ5YjNCbGNuUnBaWE1tSmloMGFHbHpMblZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6UFh0OUxIUm9hWE11YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6UFh0OUtUdDJZWElnYkQxMExtOXVaVTltVzNWZExHTTlkR2hwY3k1bGNuSnZjbk11YkdWdVozUm9MR1k5ZEdocGN5NTJZV3hwWkdGMFpVRnNiQ2hsTEd3c1cxMHNXMXdpYjI1bFQyWmNJaXgxWFN4eUtUdHBaaWh1ZFd4c1BUMDlaaVltWXowOVBYUm9hWE11WlhKeWIzSnpMbXhsYm1kMGFDbDdhV1lvYm5Wc2JDRTlQV2twY21WMGRYSnVJSFJvYVhNdVpYSnliM0p6UFhSb2FYTXVaWEp5YjNKekxuTnNhV05sS0RBc2N5a3NkR2hwY3k1amNtVmhkR1ZGY25KdmNpaDJMazlPUlY5UFJsOU5WVXhVU1ZCTVJTeDdhVzVrWlhneE9ta3NhVzVrWlhneU9uVjlMRndpWENJc1hDSXZiMjVsVDJaY0lpeHVkV3hzTEdVc2RDazdhV1lvYVQxMUxIUm9hWE11ZEhKaFkydFZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5bDdabTl5S0haaGNpQndJR2x1SUhSb2FYTXVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpLVzliY0YwOUlUQXNaR1ZzWlhSbElHNWJjRjA3Wm05eUtIWmhjaUJrSUdsdUlIUm9hWE11ZFc1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhNcGIxdGtYWHg4S0c1YlpGMDlJVEFwZlgxbGJITmxJR1ltSm1FdWNIVnphQ2htS1gxeVpYUjFjbTRnZEdocGN5NTBjbUZqYTFWdWEyNXZkMjVRY205d1pYSjBhV1Z6SmlZb2RHaHBjeTUxYm10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3oxdUxIUm9hWE11YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6UFc4cExHNTFiR3c5UFQxcFB5aGhQV0V1WTI5dVkyRjBLSFJvYVhNdVpYSnliM0p6TG5Oc2FXTmxLSE1wS1N4MGFHbHpMbVZ5Y205eWN6MTBhR2x6TG1WeWNtOXljeTV6YkdsalpTZ3dMSE1wTEhSb2FYTXVZM0psWVhSbFJYSnliM0lvZGk1UFRrVmZUMFpmVFVsVFUwbE9SeXg3ZlN4Y0lsd2lMRndpTDI5dVpVOW1YQ0lzWVN4bExIUXBLVG9vZEdocGN5NWxjbkp2Y25NOWRHaHBjeTVsY25KdmNuTXVjMnhwWTJVb01DeHpLU3h1ZFd4c0tYMHNhQzV3Y205MGIzUjVjR1V1ZG1Gc2FXUmhkR1ZPYjNROVpuVnVZM1JwYjI0b1pTeDBMSElwZTJsbUtIWnZhV1FnTUQwOVBYUXVibTkwS1hKbGRIVnliaUJ1ZFd4c08zWmhjaUJ1TEc4c2FUMTBhR2x6TG1WeWNtOXljeTVzWlc1bmRHZzdkR2hwY3k1MGNtRmphMVZ1YTI1dmQyNVFjbTl3WlhKMGFXVnpKaVlvYmoxMGFHbHpMblZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6TEc4OWRHaHBjeTVyYm05M2JsQnliM0JsY25SNVVHRjBhSE1zZEdocGN5NTFibXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jejE3ZlN4MGFHbHpMbXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jejE3ZlNrN2RtRnlJR0U5ZEdocGN5NTJZV3hwWkdGMFpVRnNiQ2hsTEhRdWJtOTBMRzUxYkd3c2JuVnNiQ3h5S1N4elBYUm9hWE11WlhKeWIzSnpMbk5zYVdObEtHa3BPM0psZEhWeWJpQjBhR2x6TG1WeWNtOXljejEwYUdsekxtVnljbTl5Y3k1emJHbGpaU2d3TEdrcExIUm9hWE11ZEhKaFkydFZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5WW1LSFJvYVhNdWRXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITTliaXgwYUdsekxtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N6MXZLU3h1ZFd4c1BUMDlZU1ltTUQwOVBYTXViR1Z1WjNSb1AzUm9hWE11WTNKbFlYUmxSWEp5YjNJb2RpNU9UMVJmVUVGVFUwVkVMSHQ5TEZ3aVhDSXNYQ0l2Ym05MFhDSXNiblZzYkN4bExIUXBPbTUxYkd4OUxHZ3VjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxTSGx3WlhKdFpXUnBZVDFtZFc1amRHbHZiaWhsTEhRc2JpbDdhV1lvSVhRdWJHbHVhM01wY21WMGRYSnVJRzUxYkd3N1ptOXlLSFpoY2lCdkxHazlNRHRwUEhRdWJHbHVhM011YkdWdVozUm9PMmtyS3lsN2RtRnlJR0U5ZEM1c2FXNXJjMXRwWFR0cFppaGNJbVJsYzJOeWFXSmxaR0o1WENJOVBUMWhMbkpsYkNsN1ptOXlLSFpoY2lCelBXNWxkeUJ5S0dFdWFISmxaaWtzZFQwaE1DeHNQVEE3YkR4ekxuWmhjazVoYldWekxteGxibWQwYUR0c0t5c3BhV1lvSVNoekxuWmhjazVoYldWelcyeGRhVzRnWlNrcGUzVTlJVEU3WW5KbFlXdDlhV1lvZFNsN2RtRnlJR005Y3k1bWFXeHNSbkp2YlU5aWFtVmpkQ2hsS1N4bVBYc2tjbVZtT21OOU8ybG1LRzg5ZEdocGN5NTJZV3hwWkdGMFpVRnNiQ2hsTEdZc1cxMHNXMXdpYkdsdWEzTmNJaXhwWFN4dUtTbHlaWFIxY200Z2IzMTlmWDA3ZG1GeUlIWTllMGxPVmtGTVNVUmZWRmxRUlRvd0xFVk9WVTFmVFVsVFRVRlVRMGc2TVN4QlRsbGZUMFpmVFVsVFUwbE9Sem94TUN4UFRrVmZUMFpmVFVsVFUwbE9Sem94TVN4UFRrVmZUMFpmVFZWTVZFbFFURVU2TVRJc1RrOVVYMUJCVTFORlJEb3hNeXhPVlUxQ1JWSmZUVlZNVkVsUVRFVmZUMFk2TVRBd0xFNVZUVUpGVWw5TlNVNUpUVlZOT2pFd01TeE9WVTFDUlZKZlRVbE9TVTFWVFY5RldFTk1WVk5KVmtVNk1UQXlMRTVWVFVKRlVsOU5RVmhKVFZWTk9qRXdNeXhPVlUxQ1JWSmZUVUZZU1UxVlRWOUZXRU5NVlZOSlZrVTZNVEEwTEU1VlRVSkZVbDlPVDFSZlFWOU9WVTFDUlZJNk1UQTFMRk5VVWtsT1IxOU1SVTVIVkVoZlUwaFBVbFE2TWpBd0xGTlVVa2xPUjE5TVJVNUhWRWhmVEU5T1J6b3lNREVzVTFSU1NVNUhYMUJCVkZSRlVrNDZNakF5TEU5Q1NrVkRWRjlRVWs5UVJWSlVTVVZUWDAxSlRrbE5WVTA2TXpBd0xFOUNTa1ZEVkY5UVVrOVFSVkpVU1VWVFgwMUJXRWxOVlUwNk16QXhMRTlDU2tWRFZGOVNSVkZWU1ZKRlJEb3pNRElzVDBKS1JVTlVYMEZFUkVsVVNVOU9RVXhmVUZKUFVFVlNWRWxGVXpvek1ETXNUMEpLUlVOVVgwUkZVRVZPUkVWT1ExbGZTMFZaT2pNd05DeEJVbEpCV1Y5TVJVNUhWRWhmVTBoUFVsUTZOREF3TEVGU1VrRlpYMHhGVGtkVVNGOU1UMDVIT2pRd01TeEJVbEpCV1Y5VlRrbFJWVVU2TkRBeUxFRlNVa0ZaWDBGRVJFbFVTVTlPUVV4ZlNWUkZUVk02TkRBekxFWlBVazFCVkY5RFZWTlVUMDA2TlRBd0xFdEZXVmRQVWtSZlExVlRWRTlOT2pVd01TeERTVkpEVlV4QlVsOVNSVVpGVWtWT1EwVTZOakF3TEZWT1MwNVBWMDVmVUZKUFVFVlNWRms2TVdVemZTeGZQWHQ5TzJadmNpaDJZWElnWWlCcGJpQjJLVjliZGx0aVhWMDlZanQyWVhJZ1p6MTdTVTVXUVV4SlJGOVVXVkJGT2x3aVNXNTJZV3hwWkNCMGVYQmxPaUI3ZEhsd1pYMGdLR1Y0Y0dWamRHVmtJSHRsZUhCbFkzUmxaSDBwWENJc1JVNVZUVjlOU1ZOTlFWUkRTRHBjSWs1dklHVnVkVzBnYldGMFkyZ2dabTl5T2lCN2RtRnNkV1Y5WENJc1FVNVpYMDlHWDAxSlUxTkpUa2M2SjBSaGRHRWdaRzlsY3lCdWIzUWdiV0YwWTJnZ1lXNTVJSE5qYUdWdFlYTWdabkp2YlNCY0ltRnVlVTltWENJbkxFOU9SVjlQUmw5TlNWTlRTVTVIT2lkRVlYUmhJR1J2WlhNZ2JtOTBJRzFoZEdOb0lHRnVlU0J6WTJobGJXRnpJR1p5YjIwZ1hDSnZibVZQWmx3aUp5eFBUa1ZmVDBaZlRWVk1WRWxRVEVVNkowUmhkR0VnYVhNZ2RtRnNhV1FnWVdkaGFXNXpkQ0J0YjNKbElIUm9ZVzRnYjI1bElITmphR1Z0WVNCbWNtOXRJRndpYjI1bFQyWmNJam9nYVc1a2FXTmxjeUI3YVc1a1pYZ3hmU0JoYm1RZ2UybHVaR1Y0TW4wbkxFNVBWRjlRUVZOVFJVUTZKMFJoZEdFZ2JXRjBZMmhsY3lCelkyaGxiV0VnWm5KdmJTQmNJbTV2ZEZ3aUp5eE9WVTFDUlZKZlRWVk1WRWxRVEVWZlQwWTZYQ0pXWVd4MVpTQjdkbUZzZFdWOUlHbHpJRzV2ZENCaElHMTFiSFJwY0d4bElHOW1JSHR0ZFd4MGFYQnNaVTltZlZ3aUxFNVZUVUpGVWw5TlNVNUpUVlZOT2x3aVZtRnNkV1VnZTNaaGJIVmxmU0JwY3lCc1pYTnpJSFJvWVc0Z2JXbHVhVzExYlNCN2JXbHVhVzExYlgxY0lpeE9WVTFDUlZKZlRVbE9TVTFWVFY5RldFTk1WVk5KVmtVNlhDSldZV3gxWlNCN2RtRnNkV1Y5SUdseklHVnhkV0ZzSUhSdklHVjRZMngxYzJsMlpTQnRhVzVwYlhWdElIdHRhVzVwYlhWdGZWd2lMRTVWVFVKRlVsOU5RVmhKVFZWTk9sd2lWbUZzZFdVZ2UzWmhiSFZsZlNCcGN5Qm5jbVZoZEdWeUlIUm9ZVzRnYldGNGFXMTFiU0I3YldGNGFXMTFiWDFjSWl4T1ZVMUNSVkpmVFVGWVNVMVZUVjlGV0VOTVZWTkpWa1U2WENKV1lXeDFaU0I3ZG1Gc2RXVjlJR2x6SUdWeGRXRnNJSFJ2SUdWNFkyeDFjMmwyWlNCdFlYaHBiWFZ0SUh0dFlYaHBiWFZ0ZlZ3aUxFNVZUVUpGVWw5T1QxUmZRVjlPVlUxQ1JWSTZYQ0pXWVd4MVpTQjdkbUZzZFdWOUlHbHpJRzV2ZENCaElIWmhiR2xrSUc1MWJXSmxjbHdpTEZOVVVrbE9SMTlNUlU1SFZFaGZVMGhQVWxRNlhDSlRkSEpwYm1jZ2FYTWdkRzl2SUhOb2IzSjBJQ2g3YkdWdVozUm9mU0JqYUdGeWN5a3NJRzFwYm1sdGRXMGdlMjFwYm1sdGRXMTlYQ0lzVTFSU1NVNUhYMHhGVGtkVVNGOU1UMDVIT2x3aVUzUnlhVzVuSUdseklIUnZieUJzYjI1bklDaDdiR1Z1WjNSb2ZTQmphR0Z5Y3lrc0lHMWhlR2x0ZFcwZ2UyMWhlR2x0ZFcxOVhDSXNVMVJTU1U1SFgxQkJWRlJGVWs0NlhDSlRkSEpwYm1jZ1pHOWxjeUJ1YjNRZ2JXRjBZMmdnY0dGMGRHVnliam9nZTNCaGRIUmxjbTU5WENJc1QwSktSVU5VWDFCU1QxQkZVbFJKUlZOZlRVbE9TVTFWVFRwY0lsUnZieUJtWlhjZ2NISnZjR1Z5ZEdsbGN5QmtaV1pwYm1Wa0lDaDdjSEp2Y0dWeWRIbERiM1Z1ZEgwcExDQnRhVzVwYlhWdElIdHRhVzVwYlhWdGZWd2lMRTlDU2tWRFZGOVFVazlRUlZKVVNVVlRYMDFCV0VsTlZVMDZYQ0pVYjI4Z2JXRnVlU0J3Y205d1pYSjBhV1Z6SUdSbFptbHVaV1FnS0h0d2NtOXdaWEowZVVOdmRXNTBmU2tzSUcxaGVHbHRkVzBnZTIxaGVHbHRkVzE5WENJc1QwSktSVU5VWDFKRlVWVkpVa1ZFT2x3aVRXbHpjMmx1WnlCeVpYRjFhWEpsWkNCd2NtOXdaWEowZVRvZ2UydGxlWDFjSWl4UFFrcEZRMVJmUVVSRVNWUkpUMDVCVEY5UVVrOVFSVkpVU1VWVE9sd2lRV1JrYVhScGIyNWhiQ0J3Y205d1pYSjBhV1Z6SUc1dmRDQmhiR3h2ZDJWa1hDSXNUMEpLUlVOVVgwUkZVRVZPUkVWT1ExbGZTMFZaT2x3aVJHVndaVzVrWlc1amVTQm1ZV2xzWldRZ0xTQnJaWGtnYlhWemRDQmxlR2x6ZERvZ2UyMXBjM05wYm1kOUlDaGtkV1VnZEc4Z2EyVjVPaUI3YTJWNWZTbGNJaXhCVWxKQldWOU1SVTVIVkVoZlUwaFBVbFE2WENKQmNuSmhlU0JwY3lCMGIyOGdjMmh2Y25RZ0tIdHNaVzVuZEdoOUtTd2diV2x1YVcxMWJTQjdiV2x1YVcxMWJYMWNJaXhCVWxKQldWOU1SVTVIVkVoZlRFOU9SenBjSWtGeWNtRjVJR2x6SUhSdmJ5QnNiMjVuSUNoN2JHVnVaM1JvZlNrc0lHMWhlR2x0ZFcwZ2UyMWhlR2x0ZFcxOVhDSXNRVkpTUVZsZlZVNUpVVlZGT2x3aVFYSnlZWGtnYVhSbGJYTWdZWEpsSUc1dmRDQjFibWx4ZFdVZ0tHbHVaR2xqWlhNZ2UyMWhkR05vTVgwZ1lXNWtJSHR0WVhSamFESjlLVndpTEVGU1VrRlpYMEZFUkVsVVNVOU9RVXhmU1ZSRlRWTTZYQ0pCWkdScGRHbHZibUZzSUdsMFpXMXpJRzV2ZENCaGJHeHZkMlZrWENJc1JrOVNUVUZVWDBOVlUxUlBUVHBjSWtadmNtMWhkQ0IyWVd4cFpHRjBhVzl1SUdaaGFXeGxaQ0FvZTIxbGMzTmhaMlY5S1Z3aUxFdEZXVmRQVWtSZlExVlRWRTlOT2x3aVMyVjVkMjl5WkNCbVlXbHNaV1E2SUh0clpYbDlJQ2g3YldWemMyRm5aWDBwWENJc1EwbFNRMVZNUVZKZlVrVkdSVkpGVGtORk9sd2lRMmx5WTNWc1lYSWdKSEpsWm5NNklIdDFjbXh6ZlZ3aUxGVk9TMDVQVjA1ZlVGSlBVRVZTVkZrNlhDSlZibXR1YjNkdUlIQnliM0JsY25SNUlDaHViM1FnYVc0Z2MyTm9aVzFoS1Z3aWZUdHNMbkJ5YjNSdmRIbHdaVDFQWW1wbFkzUXVZM0psWVhSbEtFVnljbTl5TG5CeWIzUnZkSGx3WlNrc2JDNXdjbTkwYjNSNWNHVXVZMjl1YzNSeWRXTjBiM0k5YkN4c0xuQnliM1J2ZEhsd1pTNXVZVzFsUFZ3aVZtRnNhV1JoZEdsdmJrVnljbTl5WENJc2JDNXdjbTkwYjNSNWNHVXVjSEpsWm1sNFYybDBhRDFtZFc1amRHbHZiaWhsTEhRcGUybG1LRzUxYkd3aFBUMWxKaVlvWlQxbExuSmxjR3hoWTJVb0wzNHZaeXhjSW40d1hDSXBMbkpsY0d4aFkyVW9MMXhjTHk5bkxGd2lmakZjSWlrc2RHaHBjeTVrWVhSaFVHRjBhRDFjSWk5Y0lpdGxLM1JvYVhNdVpHRjBZVkJoZEdncExHNTFiR3doUFQxMEppWW9kRDEwTG5KbGNHeGhZMlVvTDM0dlp5eGNJbjR3WENJcExuSmxjR3hoWTJVb0wxeGNMeTluTEZ3aWZqRmNJaWtzZEdocGN5NXpZMmhsYldGUVlYUm9QVndpTDF3aUszUXJkR2hwY3k1elkyaGxiV0ZRWVhSb0tTeHVkV3hzSVQwOWRHaHBjeTV6ZFdKRmNuSnZjbk1wWm05eUtIWmhjaUJ5UFRBN2NqeDBhR2x6TG5OMVlrVnljbTl5Y3k1c1pXNW5kR2c3Y2lzcktYUm9hWE11YzNWaVJYSnliM0p6VzNKZExuQnlaV1pwZUZkcGRHZ29aU3gwS1R0eVpYUjFjbTRnZEdocGMzMDdkbUZ5SUVVOWUzMHNhajFtS0NrN2NtVjBkWEp1SUdvdVlXUmtUR0Z1WjNWaFoyVW9YQ0psYmkxbllsd2lMR2NwTEdvdWRIWTBQV29zYW4wcGZTeDdmVjBzTVRBeU9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN1hDSjFjMlVnYzNSeWFXTjBYQ0k3Wm5WdVkzUnBiMjRnYmlobEtYdHlaWFIxY200Z1pTWW1aUzVmWDJWelRXOWtkV3hsUDJVNmUxd2laR1ZtWVhWc2RGd2lPbVY5ZlU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaHlMRndpWDE5bGMwMXZaSFZzWlZ3aUxIdDJZV3gxWlRvaE1IMHBMSEl1VFdWemMyRm5aVVpoWTNSdmNuazlkbTlwWkNBd08zWmhjaUJ2UFdVb1hDSXVMMjFsYzNOaFoyVXRabUZqZEc5eWVTOU5aWE56WVdkbFJtRmpkRzl5ZVZ3aUtTeHBQVzRvYnlrN2NpNU5aWE56WVdkbFJtRmpkRzl5ZVQxcFcxd2laR1ZtWVhWc2RGd2lYVHRjYm4wc2Uxd2lMaTl0WlhOellXZGxMV1poWTNSdmNua3ZUV1Z6YzJGblpVWmhZM1J2Y25sY0lqb3hNRFY5WFN3eE1ETTZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdGNJblZ6WlNCemRISnBZM1JjSWp0bWRXNWpkR2x2YmlCdUtHVXBlM0psZEhWeWJpQmxKaVpsTGw5ZlpYTk5iMlIxYkdVL1pUcDdYQ0prWldaaGRXeDBYQ0k2WlgxOVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLSElzWENKZlgyVnpUVzlrZFd4bFhDSXNlM1poYkhWbE9pRXdmU2tzY2k1TlpYTnpZV2RsVkhsd1pUMXlMazFsYzNOaFoyVTlkbTlwWkNBd08zWmhjaUJ2UFdVb1hDSmlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12WTJ4aGMzTkRZV3hzUTJobFkydGNJaWtzYVQxdUtHOHBMR0U5WlNoY0ltSmhZbVZzTFhKMWJuUnBiV1V2YUdWc2NHVnljeTlqY21WaGRHVkRiR0Z6YzF3aUtTeHpQVzRvWVNrc2RUMXlMazFsYzNOaFoyVTlablZ1WTNScGIyNG9LWHRtZFc1amRHbHZiaUJsS0hRc2NpeHVMRzhzWVNsN0tEQXNhVnRjSW1SbFptRjFiSFJjSWwwcEtIUm9hWE1zWlNrc2RHaHBjeTVwWkQxMExIUm9hWE11Wm5KdmJUMXlMSFJvYVhNdWRHODliaXgwYUdsekxuUjVjR1U5Ynl4MGFHbHpMbUp2WkhrOVlYMXlaWFIxY200b01DeHpXMXdpWkdWbVlYVnNkRndpWFNrb1pTeGJlMnRsZVRwY0ltRnpjMlZ5ZEVsa1pXNTBhWFI1WENJc2RtRnNkV1U2Wm5WdVkzUnBiMjRvWlN4MEtYdHBaaWdoWlh4OElYUXBkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2liV1Z6YzJGblpTd2dkRzlyWlc0Z2RHOGdZbVVnY21WdGIzWmxaQ3dnWVc1a0lHRnpjMlZ5ZEdWa1NXUmxiblJwZEhrZ2JYVnpkQ0JpWlNCd2NtOTJhV1JsWkZ3aUtUdDJZWElnY2oxMGFHbHpMbUp2WkhrN2NtVjBkWEp1SUhJdWFXUlViMnRsYmoxdWRXeHNMSEl1WVhOelpYSjBaV1JKWkdWdWRHbDBlVDEwTEhSb2FYTXVZbTlrZVQxeUxIUm9hWE45ZlN4N2EyVjVPbHdpWVdSa1NXUlViMnRsYmx3aUxIWmhiSFZsT21aMWJtTjBhVzl1S0dVcGUybG1LQ0ZsS1hSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSW0xbGMzTmhaMlVzSUhSdmEyVnVJSFJ2SUdKbElHRmtaR1ZrTENCdGRYTjBJR0psSUhCeWIzWnBaR1ZrWENJcE8zWmhjaUIwUFhSb2FYTXVZbTlrZVR0eVpYUjFjbTRnZEM1cFpGUnZhMlZ1UFdVc2RHaHBjeTVpYjJSNVBYUXNkR2hwYzMxOUxIdHJaWGs2WENKaFpHUkJZMk5sYzNOVWIydGxibHdpTEhaaGJIVmxPbVoxYm1OMGFXOXVLR1VwZTJsbUtDRmxLWFJvY205M0lHNWxkeUJGY25KdmNpaGNJbTFsYzNOaFoyVXNJSFJ2YTJWdUlIUnZJR0psSUdGa1pHVmtMQ0J0ZFhOMElHSmxJSEJ5YjNacFpHVmtYQ0lwTzNaaGNpQjBQWFJvYVhNdVltOWtlVHR5WlhSMWNtNGdkQzVoWTJObGMzTlViMnRsYmoxbExIUm9hWE11WW05a2VUMTBMSFJvYVhOOWZWMHBMR1Y5S0NrN2NpNU5aWE56WVdkbFZIbHdaVDE3UTFKRlFWUkZPbHdpWTNKbFlYUmxYQ0lzVWtWQlJEcGNJbkpsWVdSY0lpeFZVRVJCVkVVNlhDSjFjR1JoZEdWY0lpeEVSVXhGVkVVNlhDSmtaV3hsZEdWY0lpeFRWVUpUUTFKSlFrVTZYQ0p6ZFdKelkzSnBZbVZjSWl4VlRsTlZRbE5EVWtsQ1JUcGNJblZ1YzNWaWMyTnlhV0psWENJc1VrVlRVRTlPVTBVNlhDSnlaWE53YjI1elpWd2lMRVpQVWxkQlVrUTZYQ0ptYjNKM1lYSmtYQ0lzUlZoRlExVlVSVHBjSW1WNFpXTjFkR1ZjSW4wN2NsdGNJbVJsWm1GMWJIUmNJbDA5ZFgwc2Uxd2lZbUZpWld3dGNuVnVkR2x0WlM5b1pXeHdaWEp6TDJOc1lYTnpRMkZzYkVOb1pXTnJYQ0k2TVRBc1hDSmlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12WTNKbFlYUmxRMnhoYzNOY0lqb3hNWDFkTERFd05EcGJablZ1WTNScGIyNG9aU3gwTEhJcGUxd2lkWE5sSUhOMGNtbGpkRndpTzJaMWJtTjBhVzl1SUc0b1pTbDdjbVYwZFhKdUlHVW1KbVV1WDE5bGMwMXZaSFZzWlQ5bE9udGNJbVJsWm1GMWJIUmNJanBsZlgxbWRXNWpkR2x2YmlCdktHVXBlM1poY2lCMFBTZ3dMSFZiWENKa1pXWmhkV3gwWENKZEtTaGxLUzV5WldSMVkyVW9ablZ1WTNScGIyNG9kQ3h5S1h0eVpYUjFjbTRnZEZ0bFczSmRYVDF5TEhSOUxIdDlLVHR5WlhSMWNtNG9NQ3hoVzF3aVpHVm1ZWFZzZEZ3aVhTa29LREFzZFZ0Y0ltUmxabUYxYkhSY0lsMHBLR1VwTG5KbFpIVmpaU2htZFc1amRHbHZiaWgwTEhJcGUzSmxkSFZ5YmlCMFczSmRQV1ZiY2wwc2RIMHNablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJSFJiWlYxOUtTbDlUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0hJc1hDSmZYMlZ6VFc5a2RXeGxYQ0lzZTNaaGJIVmxPaUV3ZlNrc2NpNVZVRVJCVkVWZlQxQkZVa0ZVU1U5T1BYSXVRVlJVVWtsQ1ZWUkZYMVJaVUVVOWNpNVNSVUZUVDA1ZlVFaFNRVk5GUFhJdVVrVlRVRTlPVTBWZlEwOUVSVDF5TGtWNFpXTjFkR1ZOWlhOellXZGxRbTlrZVQxeUxsSmxjM0J2Ym5ObFRXVnpjMkZuWlVKdlpIazljaTVHYjNKM1lYSmtUV1Z6YzJGblpVSnZaSGs5Y2k1VmNHUmhkR1ZOWlhOellXZGxRbTlrZVQxeUxrUmxiR1YwWlUxbGMzTmhaMlZDYjJSNVBYSXVVbVZoWkUxbGMzTmhaMlZDYjJSNVBYSXVRM0psWVhSbFRXVnpjMkZuWlVKdlpIazljaTVOWlhOellXZGxRbTlrZVQxMmIybGtJREE3ZG1GeUlHazlaU2hjSW1KaFltVnNMWEoxYm5ScGJXVXZZMjl5WlMxcWN5OXZZbXBsWTNRdlpuSmxaWHBsWENJcExHRTliaWhwS1N4elBXVW9YQ0ppWVdKbGJDMXlkVzUwYVcxbEwyTnZjbVV0YW5NdmIySnFaV04wTDJ0bGVYTmNJaWtzZFQxdUtITXBMR3c5WlNoY0ltSmhZbVZzTFhKMWJuUnBiV1V2WTI5eVpTMXFjeTl2WW1wbFkzUXZaMlYwTFhCeWIzUnZkSGx3WlMxdlpsd2lLU3hqUFc0b2JDa3NaajFsS0Z3aVltRmlaV3d0Y25WdWRHbHRaUzlvWld4d1pYSnpMM0J2YzNOcFlteGxRMjl1YzNSeWRXTjBiM0pTWlhSMWNtNWNJaWtzY0QxdUtHWXBMR1E5WlNoY0ltSmhZbVZzTFhKMWJuUnBiV1V2YUdWc2NHVnljeTlwYm1obGNtbDBjMXdpS1N4b1BXNG9aQ2tzZVQxbEtGd2lZbUZpWld3dGNuVnVkR2x0WlM5b1pXeHdaWEp6TDJOc1lYTnpRMkZzYkVOb1pXTnJYQ0lwTEcwOWJpaDVLU3gyUFdVb1hDSmlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12WTNKbFlYUmxRMnhoYzNOY0lpa3NYejF1S0hZcE8zSXVSVzUxYlQxdk8zWmhjaUJpUFhJdVRXVnpjMkZuWlVKdlpIazlablZ1WTNScGIyNG9LWHRtZFc1amRHbHZiaUJsS0hRc2NpeHVMRzhzYVNsN0tEQXNiVnRjSW1SbFptRjFiSFJjSWwwcEtIUm9hWE1zWlNrc2RHaHBjeTVwWkZSdmEyVnVQWFFzZEdocGN5NWhZMk5sYzNOVWIydGxiajF5TEhSb2FYTXVjbVZ6YjNWeVkyVTliaXgwYUdsekxuTmphR1Z0WVQxdkxIUm9hWE11WVhOelpYSjBaV1JKWkdWdWRHbDBlVDFwZlhKbGRIVnliaWd3TEY5YlhDSmtaV1poZFd4MFhDSmRLU2hsTEZ0N2EyVjVPbHdpWVdSa1ZtbGhYQ0lzZG1Gc2RXVTZablZ1WTNScGIyNG9aU2w3YVdZb0lXVXBkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lkbWxoSUZWU1RDQjBieUJpWlNCaFpHUmxaQ3dnYlhWemRDQmlaU0J3Y205MmFXUmxaRndpS1R0eVpYUjFjbTRnZEdocGN5NTJhV0U5WlN4MGFHbHpmWDFkS1N4bGZTZ3BMR2M5S0hJdVEzSmxZWFJsVFdWemMyRm5aVUp2WkhrOVpuVnVZM1JwYjI0b1pTbDdablZ1WTNScGIyNGdkQ2hsTEhJc2JpeHZMR2tzWVN4ektYdHBaaWdvTUN4dFcxd2laR1ZtWVhWc2RGd2lYU2tvZEdocGN5eDBLU3doWlNsMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKVWFHVWdkbUZzZFdVZ2NHRnlZVzFsZEdWeUlHbHpJRzUxYkd4Y0lpazdkbUZ5SUhVOUtEQXNjRnRjSW1SbFptRjFiSFJjSWwwcEtIUm9hWE1zS0RBc1kxdGNJbVJsWm1GMWJIUmNJbDBwS0hRcExtTmhiR3dvZEdocGN5eHVMRzhzYVN4aExITXNZU3h6S1NrN2NtVjBkWEp1SUhVdWRtRnNkV1U5WlN4eUppWW9kUzV3YjJ4cFkzazljaWtzZFgxeVpYUjFjbTRvTUN4b1cxd2laR1ZtWVhWc2RGd2lYU2tvZEN4bEtTeDBmU2hpS1N4eUxsSmxZV1JOWlhOellXZGxRbTlrZVQxbWRXNWpkR2x2YmlobEtYdG1kVzVqZEdsdmJpQjBLR1VzY2l4dUxHOHNhU3hoTEhNc2RTbDdLREFzYlZ0Y0ltUmxabUYxYkhSY0lsMHBLSFJvYVhNc2RDazdkbUZ5SUd3OUtEQXNjRnRjSW1SbFptRjFiSFJjSWwwcEtIUm9hWE1zS0RBc1kxdGNJbVJsWm1GMWJIUmNJbDBwS0hRcExtTmhiR3dvZEdocGN5eGxMSElzYml4dkxHa3BLVHR5WlhSMWNtNGdZU1ltS0d3dVlYUjBjbWxpZFhSbFBXRXBMSE1tSmloc0xtTnlhWFJsY21saFUzbHVkR0Y0UFhNcExIVW1KaWhzTG1OeWFYUmxjbWxoUFhVcExHeDljbVYwZFhKdUtEQXNhRnRjSW1SbFptRjFiSFJjSWwwcEtIUXNaU2tzZEgwb1lpa3NjaTVFWld4bGRHVk5aWE56WVdkbFFtOWtlVDFtZFc1amRHbHZiaWhsS1h0bWRXNWpkR2x2YmlCMEtHVXNjaXh1TEc4c2FTeGhLWHRwWmlnb01DeHRXMXdpWkdWbVlYVnNkRndpWFNrb2RHaHBjeXgwS1N4dUlHbHVjM1JoYm1ObGIyWWdRWEp5WVhrcGUzWmhjaUJ6UFNnd0xIQmJYQ0prWldaaGRXeDBYQ0pkS1NoMGFHbHpMQ2d3TEdOYlhDSmtaV1poZFd4MFhDSmRLU2gwS1M1allXeHNLSFJvYVhNc1pTeHlMRzUxYkd3c2J5eHBLU2s3Y3k1amFHbHNaSEpsYmxKbGMyOTFjbU5sY3oxdWZXVnNjMlVnZG1GeUlITTlLREFzY0Z0Y0ltUmxabUYxYkhSY0lsMHBLSFJvYVhNc0tEQXNZMXRjSW1SbFptRjFiSFJjSWwwcEtIUXBMbU5oYkd3b2RHaHBjeXhsTEhJc2JpeHZMR2twS1R0eVpYUjFjbTRnWVNZbUtITXVZWFIwY21saWRYUmxQV0VwTENnd0xIQmJYQ0prWldaaGRXeDBYQ0pkS1NoektYMXlaWFIxY200b01DeG9XMXdpWkdWbVlYVnNkRndpWFNrb2RDeGxLU3gwZlNoaUtTeHlMbFZ3WkdGMFpVMWxjM05oWjJWQ2IyUjVQV1oxYm1OMGFXOXVLR1VwZTJaMWJtTjBhVzl1SUhRb1pTeHlMRzRzYnl4cExHRXNjeWw3S0RBc2JWdGNJbVJsWm1GMWJIUmNJbDBwS0hSb2FYTXNkQ2s3ZG1GeUlIVTlLREFzY0Z0Y0ltUmxabUYxYkhSY0lsMHBLSFJvYVhNc0tEQXNZMXRjSW1SbFptRjFiSFJjSWwwcEtIUXBMbU5oYkd3b2RHaHBjeXhsTEhJc2JpeHZMR2twS1R0eVpYUjFjbTRnZFM1aGRIUnlhV0oxZEdVOVlTeDFMblpoYkhWbFBYTXNkWDF5WlhSMWNtNG9NQ3hvVzF3aVpHVm1ZWFZzZEZ3aVhTa29kQ3hsS1N3b01DeGZXMXdpWkdWbVlYVnNkRndpWFNrb2RDeGJlMnRsZVRwY0ltRmtaRUYwZEhKcFluVjBaVlI1Y0dWY0lpeDJZV3gxWlRwbWRXNWpkR2x2YmlobEtYdGxKaVlvZEdocGN5NWhkSFJ5YVdKMWRHVlVlWEJsUFdVcGZYMHNlMnRsZVRwY0ltRmtaRTl3WlhKaGRHbHZibHdpTEhaaGJIVmxPbVoxYm1OMGFXOXVLR1VwZTJVbUppaDBhR2x6TG05d1pYSmhkR2x2YmoxbEtYMTlYU2tzZEgwb1lpa3NjaTVHYjNKM1lYSmtUV1Z6YzJGblpVSnZaSGs5Wm5WdVkzUnBiMjRvWlNsN1puVnVZM1JwYjI0Z2RDaGxMSElzYml4dkxHa3NZU2w3S0RBc2JWdGNJbVJsWm1GMWJIUmNJbDBwS0hSb2FYTXNkQ2s3ZG1GeUlITTlLREFzY0Z0Y0ltUmxabUYxYkhSY0lsMHBLSFJvYVhNc0tEQXNZMXRjSW1SbFptRjFiSFJjSWwwcEtIUXBMbU5oYkd3b2RHaHBjeXhsTEhJc2JpeHZMR2twS1R0eVpYUjFjbTRnY3k1dFpYTnpZV2RsUFdFc2MzMXlaWFIxY200b01DeG9XMXdpWkdWbVlYVnNkRndpWFNrb2RDeGxLU3gwZlNoaUtTeHlMbEpsYzNCdmJuTmxUV1Z6YzJGblpVSnZaSGs5Wm5WdVkzUnBiMjRvWlNsN1puVnVZM1JwYjI0Z2RDaGxMSElzYml4dkxHa3BleWd3TEcxYlhDSmtaV1poZFd4MFhDSmRLU2gwYUdsekxIUXBPM1poY2lCaFBTZ3dMSEJiWENKa1pXWmhkV3gwWENKZEtTaDBhR2x6TENnd0xHTmJYQ0prWldaaGRXeDBYQ0pkS1NoMEtTNWpZV3hzS0hSb2FYTXNaU3h5TEc0cEtUdHlaWFIxY200Z2J5WW1LR0V1WTI5a1pUMXZMR0V1WkdWelkzSnBjSFJwYjI0OVoxdHZYU2tzYVNZbUtHRXVkbUZzZFdVOWFTa3NZWDF5WlhSMWNtNG9NQ3hvVzF3aVpHVm1ZWFZzZEZ3aVhTa29kQ3hsS1N4MGZTaGlLU3h5TGtWNFpXTjFkR1ZOWlhOellXZGxRbTlrZVQxbWRXNWpkR2x2YmlobEtYdG1kVzVqZEdsdmJpQjBLR1VzY2l4dUxHOHNhU3hoTEhNcGV5Z3dMRzFiWENKa1pXWmhkV3gwWENKZEtTaDBhR2x6TEhRcE8zWmhjaUIxUFNnd0xIQmJYQ0prWldaaGRXeDBYQ0pkS1NoMGFHbHpMQ2d3TEdOYlhDSmtaV1poZFd4MFhDSmRLU2gwS1M1allXeHNLSFJvYVhNc1pTeHlMRzRzYnl4cEtTazdjbVYwZFhKdUlIVXViV1YwYUc5a1BXRXNjeVltS0hNZ2FXNXpkR0Z1WTJWdlppQkJjbkpoZVQ5MUxuQmhjbUZ0Y3oxek9uVXVjR0Z5WVcxelBWdHpYU2tzZFgxeVpYUjFjbTRvTUN4b1cxd2laR1ZtWVhWc2RGd2lYU2tvZEN4bEtTeDBmU2hpS1N4eUxsSkZVMUJQVGxORlgwTlBSRVU5YnloN01UQXdPbHdpTVRBd1hDSXNNVEF4T2x3aU1UQXhYQ0lzTWpBd09sd2lNakF3WENJc01qQXhPbHdpTWpBeFhDSXNNakF5T2x3aU1qQXlYQ0lzTWpBek9sd2lNakF6WENJc01qQTBPbHdpTWpBMFhDSXNNakExT2x3aU1qQTFYQ0lzTWpBMk9sd2lNakEyWENJc016QXdPbHdpTXpBd1hDSXNNekF4T2x3aU16QXhYQ0lzTXpBeU9sd2lNekF5WENJc016QXpPbHdpTXpBelhDSXNNekEwT2x3aU16QTBYQ0lzTXpBMU9sd2lNekExWENJc016QTNPbHdpTXpBM1hDSXNOREF3T2x3aU5EQXdYQ0lzTkRBeE9sd2lOREF4WENJc05EQXlPbHdpTkRBeVhDSXNOREF6T2x3aU5EQXpYQ0lzTkRBME9sd2lOREEwWENJc05EQTFPbHdpTkRBMVhDSXNOREEyT2x3aU5EQTJYQ0lzTkRBM09sd2lOREEzWENJc05EQTRPbHdpTkRBNFhDSXNOREE1T2x3aU5EQTVYQ0lzTkRFd09sd2lOREV3WENJc05ERXhPbHdpTkRFeFhDSXNOREV5T2x3aU5ERXlYQ0lzTkRFek9sd2lOREV6WENJc05ERTBPbHdpTkRFMFhDSXNOREUxT2x3aU5ERTFYQ0lzTkRFMk9sd2lOREUyWENJc05ERTNPbHdpTkRFM1hDSXNOREkyT2x3aU5ESTJYQ0lzTlRBd09sd2lOVEF3WENJc05UQXhPbHdpTlRBeFhDSXNOVEF5T2x3aU5UQXlYQ0lzTlRBek9sd2lOVEF6WENJc05UQTBPbHdpTlRBMFhDSXNOVEExT2x3aU5UQTFYQ0o5S1N4eUxsSkZRVk5QVGw5UVNGSkJVMFU5YnloN01UQXdPbHdpUTI5dWRHbHVkV1ZjSWl3eE1ERTZYQ0pUZDJsMFkyaHBibWNnVUhKdmRHOWpiMnh6WENJc01qQXdPbHdpVDB0Y0lpd3lNREU2WENKRGNtVmhkR1ZrWENJc01qQXlPbHdpUVdOalpYQjBaV1JjSWl3eU1ETTZYQ0pPYjI0dFFYVjBhRzl5YVhSaGRHbDJaU0JKYm1admNtMWhkR2x2Ymx3aUxESXdORHBjSWs1dklFTnZiblJsYm5SY0lpd3lNRFU2WENKU1pYTmxkQ0JEYjI1MFpXNTBYQ0lzTWpBMk9sd2lVR0Z5ZEdsaGJDQkRiMjUwWlc1MFhDSXNNekF3T2x3aVRYVnNkR2x3YkdVZ1EyaHZhV05sYzF3aUxETXdNVHBjSWsxdmRtVmtJRkJsY20xaGJtVnVkR3g1WENJc016QXlPbHdpUm05MWJtUmNJaXd6TURNNlhDSlRaV1VnVDNSb1pYSmNJaXd6TURRNlhDSk9iM1FnVFc5a2FXWnBaV1JjSWl3ek1EVTZYQ0pWYzJVZ1VISnZlSGxjSWl3ek1EYzZYQ0pVWlcxd2IzSmhjbmtnVW1Wa2FYSmxZM1JjSWl3ME1EQTZYQ0pDWVdRZ1VtVnhkV1Z6ZEZ3aUxEUXdNVHBjSWxWdVlYVjBhRzl5YVhwbFpGd2lMRFF3TWpwY0lsQmhlVzFsYm5RZ1VtVnhkV2x5WldSY0lpdzBNRE02WENKR2IzSmlhV1JrWlc1Y0lpdzBNRFE2WENKT2IzUWdSbTkxYm1SY0lpdzBNRFU2WENKTlpYUm9iMlFnVG05MElFRnNiRzkzWldSY0lpdzBNRFk2WENKT2IzUWdRV05qWlhCMFlXSnNaVndpTERRd056cGNJbEJ5YjNoNUlFRjFkR2hsYm5ScFkyRjBhVzl1SUZKbGNYVnBjbVZrWENJc05EQTRPbHdpVW1WeGRXVnpkQ0JVYVcxbGIzVjBYQ0lzTkRBNU9sd2lRMjl1Wm14cFkzUmNJaXcwTVRBNlhDSkhiMjVsWENJc05ERXhPbHdpVEdWdVozUm9JRkpsY1hWcGNtVmtYQ0lzTkRFeU9sd2lVSEpsWTI5dVpHbDBhVzl1SUVaaGFXeGxaRndpTERReE16cGNJbEJoZVd4dllXUWdWRzl2SUV4aGNtZGxYQ0lzTkRFME9sd2lVbVZ4ZFdWemRDMVZVa2tnVkc5dklFeHZibWRjSWl3ME1UVTZYQ0pWYm5OMWNIQnZjblJsWkNCTlpXUnBZU0JVZVhCbFhDSXNOREUyT2x3aVVtRnVaMlVnVG05MElGTmhkR2x6Wm1saFlteGxYQ0lzTkRFM09sd2lSWGh3WldOMFlYUnBiMjRnUm1GcGJHVmtYQ0lzTkRJMk9sd2lWWEJuY21Ga1pTQlNaWEYxYVhKbFpGd2lMRFV3TURwY0lrbHVkR1Z5Ym1Gc0lGTmxjblpsY2lCRmNuSnZjbHdpTERVd01UcGNJazV2ZENCSmJYQnNaVzFsYm5SbFpGd2lMRFV3TWpwY0lrSmhaQ0JIWVhSbGQyRjVYQ0lzTlRBek9sd2lVMlZ5ZG1salpTQlZibUYyWVdsc1lXSnNaVndpTERVd05EcGNJa2RoZEdWM1lYa2dWR2x0WlMxdmRYUmNJaXcxTURVNlhDSklWRlJRSUZabGNuTnBiMjRnVG05MElGTjFjSEJ2Y25SbFpGd2lmU2twTzNJdVFWUlVVa2xDVlZSRlgxUlpVRVU5YnloN1QwSktSVU5VT2x3aVQwSktSVU5VWENJc1FWSlNRVms2WENKQlVsSkJXVndpZlNrc2NpNVZVRVJCVkVWZlQxQkZVa0ZVU1U5T1BXOG9lMEZFUkRwY0lrRkVSRndpTEZKRlRVOVdSVHBjSWxKRlRVOVdSVndpZlNrN2NsdGNJbVJsWm1GMWJIUmNJbDA5WW4wc2Uxd2lZbUZpWld3dGNuVnVkR2x0WlM5amIzSmxMV3B6TDI5aWFtVmpkQzltY21WbGVtVmNJam96TEZ3aVltRmlaV3d0Y25WdWRHbHRaUzlqYjNKbExXcHpMMjlpYW1WamRDOW5aWFF0Y0hKdmRHOTBlWEJsTFc5bVhDSTZOU3hjSW1KaFltVnNMWEoxYm5ScGJXVXZZMjl5WlMxcWN5OXZZbXBsWTNRdmEyVjVjMXdpT2pZc1hDSmlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12WTJ4aGMzTkRZV3hzUTJobFkydGNJam94TUN4Y0ltSmhZbVZzTFhKMWJuUnBiV1V2YUdWc2NHVnljeTlqY21WaGRHVkRiR0Z6YzF3aU9qRXhMRndpWW1GaVpXd3RjblZ1ZEdsdFpTOW9aV3h3WlhKekwybHVhR1Z5YVhSelhDSTZNVE1zWENKaVlXSmxiQzF5ZFc1MGFXMWxMMmhsYkhCbGNuTXZjRzl6YzJsaWJHVkRiMjV6ZEhKMVkzUnZjbEpsZEhWeWJsd2lPakUwZlYwc01UQTFPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdYQ0oxYzJVZ2MzUnlhV04wWENJN1puVnVZM1JwYjI0Z2JpaGxLWHR5WlhSMWNtNGdaU1ltWlM1ZlgyVnpUVzlrZFd4bFAyVTZlMXdpWkdWbVlYVnNkRndpT21WOWZVOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2h5TEZ3aVgxOWxjMDF2WkhWc1pWd2lMSHQyWVd4MVpUb2hNSDBwTEhJdVNXUkhaVzVsY21GMGIzSTlkbTlwWkNBd08zWmhjaUJ2UFdVb1hDSmlZV0psYkMxeWRXNTBhVzFsTDNKbFoyVnVaWEpoZEc5eVhDSXBMR2s5YmlodktTeGhQV1VvWENKaVlXSmxiQzF5ZFc1MGFXMWxMMk52Y21VdGFuTXZiMkpxWldOMEwyZGxkQzF3Y205MGIzUjVjR1V0YjJaY0lpa3NjejF1S0dFcExIVTlaU2hjSW1KaFltVnNMWEoxYm5ScGJXVXZhR1ZzY0dWeWN5OWpiR0Z6YzBOaGJHeERhR1ZqYTF3aUtTeHNQVzRvZFNrc1l6MWxLRndpWW1GaVpXd3RjblZ1ZEdsdFpTOW9aV3h3WlhKekwyTnlaV0YwWlVOc1lYTnpYQ0lwTEdZOWJpaGpLU3h3UFdVb1hDSmlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12Y0c5emMybGliR1ZEYjI1emRISjFZM1J2Y2xKbGRIVnlibHdpS1N4a1BXNG9jQ2tzYUQxbEtGd2lZbUZpWld3dGNuVnVkR2x0WlM5b1pXeHdaWEp6TDJkbGRGd2lLU3g1UFc0b2FDa3NiVDFsS0Z3aVltRmlaV3d0Y25WdWRHbHRaUzlvWld4d1pYSnpMMmx1YUdWeWFYUnpYQ0lwTEhZOWJpaHRLU3hmUFdVb1hDSXVMaTl5WlZSSVNVNUxUMkpxWldOMEwxSmxkR2hwYm10UFltcGxZM1F1YW5OY0lpa3NZajF1S0Y4cExHYzlaU2hjSWk0dlRXVnpjMkZuWlM1cWMxd2lLU3hGUFc0b1p5a3NhajFsS0Z3aUxpOU5aWE56WVdkbFFtOWtlUzVxYzF3aUtTeDNQV1oxYm1OMGFXOXVLR1VwZTJaMWJtTjBhVzl1SUhRb1pTeHlLWHNvTUN4c1cxd2laR1ZtWVhWc2RGd2lYU2tvZEdocGN5eDBLVHQyWVhJZ2JqMG9NQ3hrVzF3aVpHVm1ZWFZzZEZ3aVhTa29kR2hwY3l3b01DeHpXMXdpWkdWbVlYVnNkRndpWFNrb2RDa3VZMkZzYkNoMGFHbHpMR1VzY2lrcE8zSmxkSFZ5YmlCdUxtMTVSMlZ1WlhKaGRHOXlQU2h1WlhjZ1R5a3VhV1JOWVd0bGNpZ3BMRzU5Y21WMGRYSnVLREFzZGx0Y0ltUmxabUYxYkhSY0lsMHBLSFFzWlNrc0tEQXNabHRjSW1SbFptRjFiSFJjSWwwcEtIUXNXM3RyWlhrNlhDSjJZV3hwWkdGMFpWd2lMSFpoYkhWbE9tWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpZ3dMSGxiWENKa1pXWmhkV3gwWENKZEtTZ29NQ3h6VzF3aVpHVm1ZWFZzZEZ3aVhTa29kQzV3Y205MGIzUjVjR1VwTEZ3aWRtRnNhV1JoZEdWY0lpeDBhR2x6S1M1allXeHNLSFJvYVhNc1pTbDlmU3g3YTJWNU9sd2lZM0psWVhSbFEzSmxZWFJsVFdWemMyRm5aVkpsY1hWbGMzUmNJaXgyWVd4MVpUcG1kVzVqZEdsdmJpaGxMSFFzY2l4dUtYdHBaaWdoWlh4OElYUjhmQ0Z5S1hSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSW1aeWIyMHNJSFJ2TENCaGJtUWdkbUZzZFdVZ2IyWWdiMkpxWldOMElIUnZJR0psSUdOeVpXRjBaV1FnVFZWVFZDQmlaU0J6Y0dWamFXWnBaV1JjSWlrN2RtRnlJRzg5ZEdocGN5NXRlVWRsYm1WeVlYUnZjaTV1WlhoMEtDa3VkbUZzZFdVc2FUMXVaWGNnYWk1RGNtVmhkR1ZOWlhOellXZGxRbTlrZVNoeUxHNHNiblZzYkN4dWRXeHNMRzUxYkd3c2JuVnNiQ3h1ZFd4c0tTeGhQVzVsZHlCRlcxd2laR1ZtWVhWc2RGd2lYU2h2TEdVc2RDeG5MazFsYzNOaFoyVlVlWEJsTGtOU1JVRlVSU3hwS1R0eVpYUjFjbTRnWVgxOUxIdHJaWGs2WENKamNtVmhkR1ZHYjNKM1lYSmtUV1Z6YzJGblpWSmxjWFZsYzNSY0lpeDJZV3gxWlRwbWRXNWpkR2x2YmlobExIUXNjaWw3YVdZb0lXVjhmQ0YwZkh3aGNpbDBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSm1jbTl0TENCMGJ5d2dZVzVrSUcxbGMzTmhaMlVnZEc4Z1ptOXlkMkZ5WkNCTlZWTlVJR0psSUhOd1pXTnBabWxsWkZ3aUtUdDJZWElnYmoxMGFHbHpMbTE1UjJWdVpYSmhkRzl5TG01bGVIUW9LUzUyWVd4MVpTeHZQVzVsZHlCcUxrWnZjbmRoY21STlpYTnpZV2RsUW05a2VTaHVkV3hzTEc1MWJHd3NiblZzYkN4dWRXeHNMRzUxYkd3c2Npa3NhVDF1WlhjZ1JWdGNJbVJsWm1GMWJIUmNJbDBvYml4bExIUXNaeTVOWlhOellXZGxWSGx3WlM1R1QxSlhRVkpFTEc4cE8zSmxkSFZ5YmlCcGZYMHNlMnRsZVRwY0ltTnlaV0YwWlVSbGJHVjBaVTFsYzNOaFoyVlNaWEYxWlhOMFhDSXNkbUZzZFdVNlpuVnVZM1JwYjI0b1pTeDBMSElzYmlsN2FXWW9JV1Y4ZkNGMEtYUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0ltWnliMjBnWVc1a0lIUnZJSEJoY21GdFpYUmxjbk1nVFZWVFZDQmlaU0J6Y0dWamFXWnBaV1JjSWlrN2RtRnlJRzg5ZEdocGN5NXRlVWRsYm1WeVlYUnZjaTV1WlhoMEtDa3VkbUZzZFdVc2FUMXVaWGNnYWk1RVpXeGxkR1ZOWlhOellXZGxRbTlrZVNodWRXeHNMRzUxYkd3c2NpeHVMRzUxYkd3c2JuVnNiQ2tzWVQxdVpYY2dSVnRjSW1SbFptRjFiSFJjSWwwb2J5eGxMSFFzWnk1TlpYTnpZV2RsVkhsd1pTNUVSVXhGVkVVc2FTazdjbVYwZFhKdUlHRjlmU3g3YTJWNU9sd2lZM0psWVhSbFZYQmtZWFJsVFdWemMyRm5aVkpsY1hWbGMzUmNJaXgyWVd4MVpUcG1kVzVqZEdsdmJpaGxMSFFzY2l4dUxHOHBlMmxtS0NGbGZId2hkSHg4SVhJcGRHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVpuSnZiU3dnWVc1a0lIUnZJR0Z1WkNCMllXeDFaU0JOVlZOVUlHSmxJSE53WldOcFptbGxaRndpS1R0MllYSWdhVDEwYUdsekxtMTVSMlZ1WlhKaGRHOXlMbTVsZUhRb0tTNTJZV3gxWlN4aFBXNWxkeUJxTGxWd1pHRjBaVTFsYzNOaFoyVkNiMlI1S0c1MWJHd3NiblZzYkN4dUxHNTFiR3dzYm5Wc2JDeHZMSElwTEhNOWJtVjNJRVZiWENKa1pXWmhkV3gwWENKZEtHa3NaU3gwTEdjdVRXVnpjMkZuWlZSNWNHVXVWVkJFUVZSRkxHRXBPM0psZEhWeWJpQnpmWDBzZTJ0bGVUcGNJbU55WldGMFpWSmxZV1JOWlhOellXZGxVbVZ4ZFdWemRGd2lMSFpoYkhWbE9tWjFibU4wYVc5dUtHVXNkQ3h5TEc0cGUybG1LQ0ZsZkh3aGRIeDhJWElwZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpWm5KdmJTd2dkRzhnWVc1a0lIUm9aU0J5WlhOdmRYSmpaU0IwYnlCeVpXRmtJR1p5YjIwZ1RWVlRWQ0JpWlNCemNHVmphV1pwWldSY0lpazdkbUZ5SUc4OWRHaHBjeTV0ZVVkbGJtVnlZWFJ2Y2k1dVpYaDBLQ2t1ZG1Gc2RXVXNhVDF1WlhjZ2FpNVNaV0ZrVFdWemMyRm5aVUp2Wkhrb2JuVnNiQ3h1ZFd4c0xISXNiblZzYkN4dWRXeHNMRzRzYm5Wc2JDeHVkV3hzS1N4aFBXNWxkeUJGVzF3aVpHVm1ZWFZzZEZ3aVhTaHZMR1VzZEN4bkxrMWxjM05oWjJWVWVYQmxMbEpGUVVRc2FTazdjbVYwZFhKdUlHRjlmU3g3YTJWNU9sd2lZM0psWVhSbFUzVmljMk55YVdKbFRXVnpjMkZuWlZKbGNYVmxjM1JjSWl4MllXeDFaVHBtZFc1amRHbHZiaWhsTEhRc2NpbDdhV1lvSVdWOGZDRjBmSHdoY2lsMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKbWNtOXRMQ0IwYnlCaGJtUWdkR2hsSUhKbGMyOTFjbU5sSUhSdklITjFZbk5qY21saVpTQjBieUJOVlZOVUlHSmxJSE53WldOcFptbGxaRndpS1R0MllYSWdiajEwYUdsekxtMTVSMlZ1WlhKaGRHOXlMbTVsZUhRb0tTNTJZV3gxWlN4dlBXNWxkeUJxTGsxbGMzTmhaMlZDYjJSNUtHNTFiR3dzYm5Wc2JDeHlMRzUxYkd3c2JuVnNiQ2tzYVQxdVpYY2dSVnRjSW1SbFptRjFiSFJjSWwwb2JpeGxMSFFzWnk1TlpYTnpZV2RsVkhsd1pTNVRWVUpUUTFKSlFrVXNieWs3Y21WMGRYSnVJR2w5ZlN4N2EyVjVPbHdpWTNKbFlYUmxWVzV6ZFdKelkzSnBZbVZOWlhOellXZGxVbVZ4ZFdWemRGd2lMSFpoYkhWbE9tWjFibU4wYVc5dUtHVXNkQ3h5S1h0cFppZ2haWHg4SVhSOGZDRnlLWFJvY205M0lHNWxkeUJGY25KdmNpaGNJbVp5YjIwc0lIUnZJR0Z1WkNCMGFHVWdjbVZ6YjNWeVkyVWdkRzhnYzNWaWMyTnlhV0psSUhSdklFMVZVMVFnWW1VZ2MzQmxZMmxtYVdWa1hDSXBPM1poY2lCdVBYUm9hWE11YlhsSFpXNWxjbUYwYjNJdWJtVjRkQ2dwTG5aaGJIVmxMRzg5Ym1WM0lHb3VUV1Z6YzJGblpVSnZaSGtvYm5Wc2JDeHVkV3hzTEhJc2JuVnNiQ3h1ZFd4c0tTeHBQVzVsZHlCRlcxd2laR1ZtWVhWc2RGd2lYU2h1TEdVc2RDeG5MazFsYzNOaFoyVlVlWEJsTGxWT1UxVkNVME5TU1VKRkxHOHBPM0psZEhWeWJpQnBmWDBzZTJ0bGVUcGNJbU55WldGMFpVVjRaV04xZEdWTlpYTnpZV2RsVW1WeGRXVnpkRndpTEhaaGJIVmxPbVoxYm1OMGFXOXVLR1VzZEN4eUxHNHBlMmxtS0NGbGZId2hkSHg4SVhJcGRHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVpuSnZiU3dnZEc4Z1lXNWtJSFJvWlNCdFpYUm9iMlFnZEc4Z1pYaGxZM1YwWlNCTlZWTlVJR0psSUhOd1pXTnBabWxsWkZ3aUtUdDJZWElnYnoxMGFHbHpMbTE1UjJWdVpYSmhkRzl5TG01bGVIUW9LUzUyWVd4MVpTeHBQVzVsZHlCcUxrVjRaV04xZEdWTlpYTnpZV2RsUW05a2VTaHVkV3hzTEc1MWJHd3NiblZzYkN4dWRXeHNMRzUxYkd3c2NpeHVLU3hoUFc1bGR5QkZXMXdpWkdWbVlYVnNkRndpWFNodkxHVXNkQ3huTGsxbGMzTmhaMlZVZVhCbExrVllSVU5WVkVVc2FTazdjbVYwZFhKdUlHRjlmU3g3YTJWNU9sd2lZM0psWVhSbFRXVnpjMkZuWlZKbGMzQnZibk5sWENJc2RtRnNkV1U2Wm5WdVkzUnBiMjRvWlN4MExISXNiaWw3YVdZb0lYUXBkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2ljbVZ6Y0c5dWMyVWdRMjlrWlNCTlZWTlVJR0psSUhOd1pXTnBabWxsWkZ3aUtUdDJZWElnYnoxdVpYY2dhaTVTWlhOd2IyNXpaVTFsYzNOaFoyVkNiMlI1S0c1MWJHd3NiblZzYkN4dWRXeHNMSFFzY2l4dUtUdHlaWFIxY200Z2JtVjNJRVZiWENKa1pXWmhkV3gwWENKZEtHVXVhV1FzWlM1MGJ5eGxMbVp5YjIwc1p5NU5aWE56WVdkbFZIbHdaUzVTUlZOUVQwNVRSU3h2S1gxOUxIdHJaWGs2WENKblpXNWxjbUYwWlUxbGMzTmhaMlZTWlhOd2IyNXpaVndpTEhaaGJIVmxPbVoxYm1OMGFXOXVLR1VzZEN4eUtYdHBaaWdoWlh4OElYUXBkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2liV1Z6YzJGblpTQmhibVFnY21WemNHOXVjMlVnWTI5a1pTQk5WVk5VSUdKbElITndaV05wWm1sbFpGd2lLVHQyWVhJZ2JqMWxMbUp2Wkhrc2J6MXVMbWxrVkc5clpXNHNhVDF1TG1GalkyVnpjMVJ2YTJWdUxHRTliaTV5WlhOdmRYSmpaU3h6UFc1bGR5QnFMbEpsYzNCdmJuTmxUV1Z6YzJGblpVSnZaSGtvYnl4cExHRXNkQ3h5S1N4MVBYUm9hWE11YlhsSFpXNWxjbUYwYjNJdWJtVjRkQ2dwTG5aaGJIVmxPM0psZEhWeWJpQnVaWGNnUlZ0Y0ltUmxabUYxYkhSY0lsMG9kU3hsTG5SdkxHVXVabkp2YlN4bkxrMWxjM05oWjJWVWVYQmxMbEpGVTFCUFRsTkZMSE1wZlgxZEtTeDBmU2hpVzF3aVpHVm1ZWFZzZEZ3aVhTa3NUejF5TGtsa1IyVnVaWEpoZEc5eVBXWjFibU4wYVc5dUtDbDdablZ1WTNScGIyNGdaU2dwZXlnd0xHeGJYQ0prWldaaGRXeDBYQ0pkS1NoMGFHbHpMR1VwZlhKbGRIVnliaWd3TEdaYlhDSmtaV1poZFd4MFhDSmRLU2hsTEZ0N2EyVjVPbHdpYVdSTllXdGxjbHdpTEhaaGJIVmxPbWxiWENKa1pXWmhkV3gwWENKZExtMWhjbXNvWm5WdVkzUnBiMjRnZENncGUzWmhjaUJsTzNKbGRIVnliaUJwVzF3aVpHVm1ZWFZzZEZ3aVhTNTNjbUZ3S0daMWJtTjBhVzl1S0hRcGUyWnZjaWc3T3lsemQybDBZMmdvZEM1d2NtVjJQWFF1Ym1WNGRDbDdZMkZ6WlNBd09tVTlNVHRqWVhObElERTZhV1lvSVNobFBERmxOaWtwZTNRdWJtVjRkRDAyTzJKeVpXRnJmWEpsZEhWeWJpQjBMbTVsZUhROU5DeGxLeXM3WTJGelpTQTBPblF1Ym1WNGREMHhPMkp5WldGck8yTmhjMlVnTmpwallYTmxYQ0psYm1SY0lqcHlaWFIxY200Z2RDNXpkRzl3S0NsOWZTeDBMSFJvYVhNcGZTbDlYU2tzWlgwb0tUdHlXMXdpWkdWbVlYVnNkRndpWFQxM2ZTeDdYQ0l1TGk5eVpWUklTVTVMVDJKcVpXTjBMMUpsZEdocGJtdFBZbXBsWTNRdWFuTmNJam94TURZc1hDSXVMMDFsYzNOaFoyVXVhbk5jSWpveE1ETXNYQ0l1TDAxbGMzTmhaMlZDYjJSNUxtcHpYQ0k2TVRBMExGd2lZbUZpWld3dGNuVnVkR2x0WlM5amIzSmxMV3B6TDI5aWFtVmpkQzluWlhRdGNISnZkRzkwZVhCbExXOW1YQ0k2TlN4Y0ltSmhZbVZzTFhKMWJuUnBiV1V2YUdWc2NHVnljeTlqYkdGemMwTmhiR3hEYUdWamExd2lPakV3TEZ3aVltRmlaV3d0Y25WdWRHbHRaUzlvWld4d1pYSnpMMk55WldGMFpVTnNZWE56WENJNk1URXNYQ0ppWVdKbGJDMXlkVzUwYVcxbEwyaGxiSEJsY25NdloyVjBYQ0k2TVRJc1hDSmlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12YVc1b1pYSnBkSE5jSWpveE15eGNJbUpoWW1Wc0xYSjFiblJwYldVdmFHVnNjR1Z5Y3k5d2IzTnphV0pzWlVOdmJuTjBjblZqZEc5eVVtVjBkWEp1WENJNk1UUXNYQ0ppWVdKbGJDMXlkVzUwYVcxbEwzSmxaMlZ1WlhKaGRHOXlYQ0k2TVRaOVhTd3hNRFk2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHRjSW5WelpTQnpkSEpwWTNSY0lqdG1kVzVqZEdsdmJpQnVLR1VwZTNKbGRIVnliaUJsSmlabExsOWZaWE5OYjJSMWJHVS9aVHA3WENKa1pXWmhkV3gwWENJNlpYMTlUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0hJc1hDSmZYMlZ6VFc5a2RXeGxYQ0lzZTNaaGJIVmxPaUV3ZlNrc2NpNVNaWFJvYVc1clQySnFaV04wUFhadmFXUWdNRHQyWVhJZ2J6MWxLRndpWW1GaVpXd3RjblZ1ZEdsdFpTOW9aV3h3WlhKekwyTnNZWE56UTJGc2JFTm9aV05yWENJcExHazliaWh2S1N4aFBXVW9YQ0ppWVdKbGJDMXlkVzUwYVcxbEwyaGxiSEJsY25NdlkzSmxZWFJsUTJ4aGMzTmNJaWtzY3oxdUtHRXBMSFU5WlNoY0luUjJORndpS1N4c1BXNG9kU2tzWXoxeUxsSmxkR2hwYm10UFltcGxZM1E5Wm5WdVkzUnBiMjRvS1h0bWRXNWpkR2x2YmlCbEtIUXNjaWw3S0RBc2FWdGNJbVJsWm1GMWJIUmNJbDBwS0hSb2FYTXNaU2s3ZEdocGN5NTJZV3hwWkdGMGFXOXVQWFFzZEdocGN5NXpZMmhsYldFOWNuMXlaWFIxY200b01DeHpXMXdpWkdWbVlYVnNkRndpWFNrb1pTeGJlMnRsZVRwY0luWmhiR2xrWVhSbFhDSXNkbUZzZFdVNlpuVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlTRjBhR2x6TG5OamFHVnRZU1ltYkZ0Y0ltUmxabUYxYkhSY0lsMHVkbUZzYVdSaGRHVW9aU3gwYUdsekxuTmphR1Z0WVNsOWZWMHBMR1Y5S0NrN2NsdGNJbVJsWm1GMWJIUmNJbDA5WTMwc2Uxd2lZbUZpWld3dGNuVnVkR2x0WlM5b1pXeHdaWEp6TDJOc1lYTnpRMkZzYkVOb1pXTnJYQ0k2TVRBc1hDSmlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12WTNKbFlYUmxRMnhoYzNOY0lqb3hNU3gwZGpRNk1UQXhmVjE5TEh0OUxGc3hNREpkS1NneE1ESXBmU2s3WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMU5aWE56WVdkbFJtRmpkRzl5ZVM1cWN5NXRZWEJjYmlJc0lpOHFLbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJRVkNCSmJtOTJZY09udzZOdklHVWdVMmx6ZEdWdFlYTWdVMEZjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnU1U1RlUwTXRTVVJjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVVZWUFFrbFRJRTVGVkZkUFVrdFRJRk5NWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVaU1FWVk9TRTlHUlZJdFIwVlRSVXhNVTBOSVFVWlVJRnBWVWlCR1QwVlNSRVZTVlU1SElFUkZVaUJCVGtkRlYwRk9SRlJGVGlCR1QxSlRRMGhWVGtjZ1JTNVdYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRTlTUVU1SFJTQlRRVnh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJFWlhWMGMyTm9aU0JVWld4bGEyOXRJRUZIWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVGd2FYcGxaVnh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJVUlVOSVRrbFRRMGhGSUZWT1NWWkZVbE5KVkVGVUlFSkZVa3hKVGx4dUtseHVLaUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVWdYQ0pNYVdObGJuTmxYQ0lwTzF4dUtpQjViM1VnYldGNUlHNXZkQ0IxYzJVZ2RHaHBjeUJtYVd4bElHVjRZMlZ3ZENCcGJpQmpiMjF3YkdsaGJtTmxJSGRwZEdnZ2RHaGxJRXhwWTJWdWMyVXVYRzRxSUZsdmRTQnRZWGtnYjJKMFlXbHVJR0VnWTI5d2VTQnZaaUIwYUdVZ1RHbGpaVzV6WlNCaGRGeHVLbHh1S2lBZ0lHaDBkSEE2THk5M2QzY3VZWEJoWTJobExtOXlaeTlzYVdObGJuTmxjeTlNU1VORlRsTkZMVEl1TUZ4dUtseHVLaUJWYm14bGMzTWdjbVZ4ZFdseVpXUWdZbmtnWVhCd2JHbGpZV0pzWlNCc1lYY2diM0lnWVdkeVpXVmtJSFJ2SUdsdUlIZHlhWFJwYm1jc0lITnZablIzWVhKbFhHNHFJR1JwYzNSeWFXSjFkR1ZrSUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sSUdseklHUnBjM1J5YVdKMWRHVmtJRzl1SUdGdUlGd2lRVk1nU1ZOY0lpQkNRVk5KVXl4Y2Jpb2dWMGxVU0U5VlZDQlhRVkpTUVU1VVNVVlRJRTlTSUVOUFRrUkpWRWxQVGxNZ1QwWWdRVTVaSUV0SlRrUXNJR1ZwZEdobGNpQmxlSEJ5WlhOeklHOXlJR2x0Y0d4cFpXUXVYRzRxSUZObFpTQjBhR1VnVEdsalpXNXpaU0JtYjNJZ2RHaGxJSE53WldOcFptbGpJR3hoYm1kMVlXZGxJR2R2ZG1WeWJtbHVaeUJ3WlhKdGFYTnphVzl1Y3lCaGJtUmNiaW9nYkdsdGFYUmhkR2x2Ym5NZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVdVhHNHFLaTljYmx4dUx5OGdSR2x6ZEhKcFluVjBhVzl1SUdacGJHVWdabTl5SUZCbGNuTnBjM1JsYm1ObFRXRnVZV2RsY2k1cWN5QmNiaTh2SUhabGNuTnBiMjQ2SURBdU15NHdYRzR2THlCTVlYTjBJR0oxYVd4a09pQlVhSFVnU25Wc0lESXhJREl3TVRZZ01UVTZNekU2TWpNZ1IwMVVLekF4TURBZ0tGZEZVMVFwWEc1Y2JpRm1kVzVqZEdsdmJpaGxLWHRwWmloY0ltOWlhbVZqZEZ3aVBUMTBlWEJsYjJZZ1pYaHdiM0owY3lZbVhDSjFibVJsWm1sdVpXUmNJaUU5ZEhsd1pXOW1JRzF2WkhWc1pTbHRiMlIxYkdVdVpYaHdiM0owY3oxbEtDazdaV3h6WlNCcFppaGNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUJrWldacGJtVW1KbVJsWm1sdVpTNWhiV1FwWkdWbWFXNWxLRnRkTEdVcE8yVnNjMlY3ZG1GeUlIUTdkRDFjSW5WdVpHVm1hVzVsWkZ3aUlUMTBlWEJsYjJZZ2QybHVaRzkzUDNkcGJtUnZkenBjSW5WdVpHVm1hVzVsWkZ3aUlUMTBlWEJsYjJZZ1oyeHZZbUZzUDJkc2IySmhiRHBjSW5WdVpHVm1hVzVsWkZ3aUlUMTBlWEJsYjJZZ2MyVnNaajl6Wld4bU9uUm9hWE1zZEM1UVpYSnphWE4wWlc1alpVMWhibUZuWlhJOVpTZ3BmWDBvWm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnWm5WdVkzUnBiMjRnWlNoMExHNHNjaWw3Wm5WdVkzUnBiMjRnYVNoekxHRXBlMmxtS0NGdVczTmRLWHRwWmlnaGRGdHpYU2w3ZG1GeUlIVTlYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnY21WeGRXbHlaU1ltY21WeGRXbHlaVHRwWmlnaFlTWW1kU2x5WlhSMWNtNGdkU2h6TENFd0tUdHBaaWh2S1hKbGRIVnliaUJ2S0hNc0lUQXBPM1poY2lCbVBXNWxkeUJGY25KdmNpaGNJa05oYm01dmRDQm1hVzVrSUcxdlpIVnNaU0FuWENJcmN5dGNJaWRjSWlrN2RHaHliM2NnWmk1amIyUmxQVndpVFU5RVZVeEZYMDVQVkY5R1QxVk9SRndpTEdaOWRtRnlJR005Ymx0elhUMTdaWGh3YjNKMGN6cDdmWDA3ZEZ0elhWc3dYUzVqWVd4c0tHTXVaWGh3YjNKMGN5eG1kVzVqZEdsdmJpaGxLWHQyWVhJZ2JqMTBXM05kV3pGZFcyVmRPM0psZEhWeWJpQnBLRzQvYmpwbEtYMHNZeXhqTG1WNGNHOXlkSE1zWlN4MExHNHNjaWw5Y21WMGRYSnVJRzViYzEwdVpYaHdiM0owYzMxbWIzSW9kbUZ5SUc4OVhDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdjbVZ4ZFdseVpTWW1jbVZ4ZFdseVpTeHpQVEE3Y3p4eUxteGxibWQwYUR0ekt5c3BhU2h5VzNOZEtUdHlaWFIxY200Z2FYMG9lekU2VzJaMWJtTjBhVzl1S0dVc2RDeHVLWHQwTG1WNGNHOXlkSE05ZTF3aVpHVm1ZWFZzZEZ3aU9tVW9YQ0pqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YW5OdmJpOXpkSEpwYm1kcFpubGNJaWtzWDE5bGMwMXZaSFZzWlRvaE1IMTlMSHRjSW1OdmNtVXRhbk12YkdsaWNtRnllUzltYmk5cWMyOXVMM04wY21sdVoybG1lVndpT2psOVhTd3lPbHRtZFc1amRHbHZiaWhsTEhRc2JpbDdYQ0oxYzJVZ2MzUnlhV04wWENJN1puVnVZM1JwYjI0Z2NpZ3BlMlp2Y2loMllYSWdaVDFjSWtGQ1EwUkZSa2RJU1VwTFRFMU9UMUJSVWxOVVZWWlhXRmxhWVdKalpHVm1aMmhwYW10c2JXNXZjSEZ5YzNSMWRuZDRlWG93TVRJek5EVTJOemc1S3k5Y0lpeDBQVEFzYmoxbExteGxibWQwYUR0MFBHNDdLeXQwS1hWYmRGMDlaVnQwWFN4bVcyVXVZMmhoY2tOdlpHVkJkQ2gwS1YwOWREdG1XMXdpTFZ3aUxtTm9ZWEpEYjJSbFFYUW9NQ2xkUFRZeUxHWmJYQ0pmWENJdVkyaGhja052WkdWQmRDZ3dLVjA5TmpOOVpuVnVZM1JwYjI0Z2FTaGxLWHQyWVhJZ2RDeHVMSElzYVN4dkxITXNZVDFsTG14bGJtZDBhRHRwWmloaEpUUStNQ2wwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0pKYm5aaGJHbGtJSE4wY21sdVp5NGdUR1Z1WjNSb0lHMTFjM1FnWW1VZ1lTQnRkV3gwYVhCc1pTQnZaaUEwWENJcE8yODlYQ0k5WENJOVBUMWxXMkV0TWwwL01qcGNJajFjSWowOVBXVmJZUzB4WFQ4eE9qQXNjejF1WlhjZ1l5Z3pLbUV2TkMxdktTeHlQVzgrTUQ5aExUUTZZVHQyWVhJZ2RUMHdPMlp2Y2loMFBUQXNiajB3TzNROGNqdDBLejAwTEc0clBUTXBhVDFtVzJVdVkyaGhja052WkdWQmRDaDBLVjA4UERFNGZHWmJaUzVqYUdGeVEyOWtaVUYwS0hRck1TbGRQRHd4TW54bVcyVXVZMmhoY2tOdlpHVkJkQ2gwS3pJcFhUdzhObnhtVzJVdVkyaGhja052WkdWQmRDaDBLek1wWFN4elczVXJLMTA5YVQ0K01UWW1NalUxTEhOYmRTc3JYVDFwUGo0NEpqSTFOU3h6VzNVcksxMDlNalUxSm1rN2NtVjBkWEp1SURJOVBUMXZQeWhwUFdaYlpTNWphR0Z5UTI5a1pVRjBLSFFwWFR3OE1ueG1XMlV1WTJoaGNrTnZaR1ZCZENoMEt6RXBYVDQrTkN4elczVXJLMTA5TWpVMUpta3BPakU5UFQxdkppWW9hVDFtVzJVdVkyaGhja052WkdWQmRDaDBLVjA4UERFd2ZHWmJaUzVqYUdGeVEyOWtaVUYwS0hRck1TbGRQRHcwZkdaYlpTNWphR0Z5UTI5a1pVRjBLSFFyTWlsZFBqNHlMSE5iZFNzclhUMXBQajQ0SmpJMU5TeHpXM1VySzEwOU1qVTFKbWtwTEhOOVpuVnVZM1JwYjI0Z2J5aGxLWHR5WlhSMWNtNGdkVnRsUGo0eE9DWTJNMTByZFZ0bFBqNHhNaVkyTTEwcmRWdGxQajQySmpZelhTdDFXell6Sm1WZGZXWjFibU4wYVc5dUlITW9aU3gwTEc0cGUyWnZjaWgyWVhJZ2NpeHBQVnRkTEhNOWREdHpQRzQ3Y3lzOU15bHlQU2hsVzNOZFBEd3hOaWtyS0dWYmN5c3hYVHc4T0NrclpWdHpLekpkTEdrdWNIVnphQ2h2S0hJcEtUdHlaWFIxY200Z2FTNXFiMmx1S0Z3aVhDSXBmV1oxYm1OMGFXOXVJR0VvWlNsN1ptOXlLSFpoY2lCMExHNDlaUzVzWlc1bmRHZ3NjajF1SlRNc2FUMWNJbHdpTEc4OVcxMHNZVDB4TmpNNE15eG1QVEFzWXoxdUxYSTdaanhqTzJZclBXRXBieTV3ZFhOb0tITW9aU3htTEdZcllUNWpQMk02Wml0aEtTazdjbVYwZFhKdUlERTlQVDF5UHloMFBXVmJiaTB4WFN4cEt6MTFXM1ErUGpKZExHa3JQWFZiZER3OE5DWTJNMTBzYVNzOVhDSTlQVndpS1RveVBUMDljaVltS0hROUtHVmJiaTB5WFR3OE9Da3JaVnR1TFRGZExHa3JQWFZiZEQ0K01UQmRMR2tyUFhWYmRENCtOQ1kyTTEwc2FTczlkVnQwUER3eUpqWXpYU3hwS3oxY0lqMWNJaWtzYnk1d2RYTm9LR2twTEc4dWFtOXBiaWhjSWx3aUtYMXVMblJ2UW5sMFpVRnljbUY1UFdrc2JpNW1jbTl0UW5sMFpVRnljbUY1UFdFN2RtRnlJSFU5VzEwc1pqMWJYU3hqUFZ3aWRXNWtaV1pwYm1Wa1hDSWhQWFI1Y0dWdlppQlZhVzUwT0VGeWNtRjVQMVZwYm5RNFFYSnlZWGs2UVhKeVlYazdjaWdwZlN4N2ZWMHNNenBiWm5WdVkzUnBiMjRvWlN4MExHNHBlMzBzZTMxZExEUTZXMloxYm1OMGFXOXVLR1VzZEN4dUtYdGhjbWQxYldWdWRITmJORjFiTTExYk1GMHVZWEJ3Ykhrb2JpeGhjbWQxYldWdWRITXBmU3g3WkhWd09qTjlYU3cxT2x0bWRXNWpkR2x2YmlobExIUXNiaWw3Wm5WdVkzUnBiMjRnY2lobExIUXBlM0psZEhWeWJpQndMbWx6Vlc1a1pXWnBibVZrS0hRcFAxd2lYQ0lyZERwd0xtbHpUblZ0WW1WeUtIUXBKaVloYVhOR2FXNXBkR1VvZENrL2RDNTBiMU4wY21sdVp5Z3BPbkF1YVhOR2RXNWpkR2x2YmloMEtYeDhjQzVwYzFKbFowVjRjQ2gwS1Q5MExuUnZVM1J5YVc1bktDazZkSDFtZFc1amRHbHZiaUJwS0dVc2RDbDdjbVYwZFhKdUlIQXVhWE5UZEhKcGJtY29aU2svWlM1c1pXNW5kR2c4ZEQ5bE9tVXVjMnhwWTJVb01DeDBLVHBsZldaMWJtTjBhVzl1SUc4b1pTbDdjbVYwZFhKdUlHa29TbE5QVGk1emRISnBibWRwWm5rb1pTNWhZM1IxWVd3c2Npa3NNVEk0S1N0Y0lpQmNJaXRsTG05d1pYSmhkRzl5SzF3aUlGd2lLMmtvU2xOUFRpNXpkSEpwYm1kcFpua29aUzVsZUhCbFkzUmxaQ3h5S1N3eE1qZ3BmV1oxYm1OMGFXOXVJSE1vWlN4MExHNHNjaXhwS1h0MGFISnZkeUJ1WlhjZ2VTNUJjM05sY25ScGIyNUZjbkp2Y2loN2JXVnpjMkZuWlRwdUxHRmpkSFZoYkRwbExHVjRjR1ZqZEdWa09uUXNiM0JsY21GMGIzSTZjaXh6ZEdGamExTjBZWEowUm5WdVkzUnBiMjQ2YVgwcGZXWjFibU4wYVc5dUlHRW9aU3gwS1h0bGZIeHpLR1VzSVRBc2RDeGNJajA5WENJc2VTNXZheWw5Wm5WdVkzUnBiMjRnZFNobExIUXBlMmxtS0dVOVBUMTBLWEpsZEhWeWJpRXdPMmxtS0hBdWFYTkNkV1ptWlhJb1pTa21KbkF1YVhOQ2RXWm1aWElvZENrcGUybG1LR1V1YkdWdVozUm9JVDEwTG14bGJtZDBhQ2x5WlhSMWNtNGhNVHRtYjNJb2RtRnlJRzQ5TUR0dVBHVXViR1Z1WjNSb08yNHJLeWxwWmlobFcyNWRJVDA5ZEZ0dVhTbHlaWFIxY200aE1UdHlaWFIxY200aE1IMXlaWFIxY200Z2NDNXBjMFJoZEdVb1pTa21KbkF1YVhORVlYUmxLSFFwUDJVdVoyVjBWR2x0WlNncFBUMDlkQzVuWlhSVWFXMWxLQ2s2Y0M1cGMxSmxaMFY0Y0NobEtTWW1jQzVwYzFKbFowVjRjQ2gwS1Q5bExuTnZkWEpqWlQwOVBYUXVjMjkxY21ObEppWmxMbWRzYjJKaGJEMDlQWFF1WjJ4dlltRnNKaVpsTG0xMWJIUnBiR2x1WlQwOVBYUXViWFZzZEdsc2FXNWxKaVpsTG14aGMzUkpibVJsZUQwOVBYUXViR0Z6ZEVsdVpHVjRKaVpsTG1sbmJtOXlaVU5oYzJVOVBUMTBMbWxuYm05eVpVTmhjMlU2Y0M1cGMwOWlhbVZqZENobEtYeDhjQzVwYzA5aWFtVmpkQ2gwS1Q5aktHVXNkQ2s2WlQwOWRIMW1kVzVqZEdsdmJpQm1LR1VwZTNKbGRIVnlibHdpVzI5aWFtVmpkQ0JCY21kMWJXVnVkSE5kWENJOVBVOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWRHOVRkSEpwYm1jdVkyRnNiQ2hsS1gxbWRXNWpkR2x2YmlCaktHVXNkQ2w3YVdZb2NDNXBjMDUxYkd4UGNsVnVaR1ZtYVc1bFpDaGxLWHg4Y0M1cGMwNTFiR3hQY2xWdVpHVm1hVzVsWkNoMEtTbHlaWFIxY200aE1UdHBaaWhsTG5CeWIzUnZkSGx3WlNFOVBYUXVjSEp2ZEc5MGVYQmxLWEpsZEhWeWJpRXhPMmxtS0hBdWFYTlFjbWx0YVhScGRtVW9aU2w4ZkhBdWFYTlFjbWx0YVhScGRtVW9kQ2twY21WMGRYSnVJR1U5UFQxME8zWmhjaUJ1UFdZb1pTa3NjajFtS0hRcE8ybG1LRzRtSmlGeWZId2hiaVltY2lseVpYUjFjbTRoTVR0cFppaHVLWEpsZEhWeWJpQmxQV1F1WTJGc2JDaGxLU3gwUFdRdVkyRnNiQ2gwS1N4MUtHVXNkQ2s3ZG1GeUlHa3NieXh6UFY4b1pTa3NZVDFmS0hRcE8ybG1LSE11YkdWdVozUm9JVDFoTG14bGJtZDBhQ2x5WlhSMWNtNGhNVHRtYjNJb2N5NXpiM0owS0Nrc1lTNXpiM0owS0Nrc2J6MXpMbXhsYm1kMGFDMHhPMjgrUFRBN2J5MHRLV2xtS0hOYmIxMGhQV0ZiYjEwcGNtVjBkWEp1SVRFN1ptOXlLRzg5Y3k1c1pXNW5kR2d0TVR0dlBqMHdPMjh0TFNscFppaHBQWE5iYjEwc0lYVW9aVnRwWFN4MFcybGRLU2x5WlhSMWNtNGhNVHR5WlhSMWNtNGhNSDFtZFc1amRHbHZiaUJzS0dVc2RDbDdjbVYwZFhKdUlTZ2haWHg4SVhRcEppWW9YQ0piYjJKcVpXTjBJRkpsWjBWNGNGMWNJajA5VDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaeTVqWVd4c0tIUXBQM1F1ZEdWemRDaGxLVHBsSUdsdWMzUmhibU5sYjJZZ2RIeDhkQzVqWVd4c0tIdDlMR1VwUFQwOUlUQXBmV1oxYm1OMGFXOXVJR2dvWlN4MExHNHNjaWw3ZG1GeUlHazdjQzVwYzFOMGNtbHVaeWh1S1NZbUtISTliaXh1UFc1MWJHd3BPM1J5ZVh0MEtDbDlZMkYwWTJnb2J5bDdhVDF2ZldsbUtISTlLRzRtSm00dWJtRnRaVDljSWlBb1hDSXJiaTV1WVcxbEsxd2lLUzVjSWpwY0lpNWNJaWtyS0hJL1hDSWdYQ0lyY2pwY0lpNWNJaWtzWlNZbUlXa21Kbk1vYVN4dUxGd2lUV2x6YzJsdVp5QmxlSEJsWTNSbFpDQmxlR05sY0hScGIyNWNJaXR5S1N3aFpTWW1iQ2hwTEc0cEppWnpLR2tzYml4Y0lrZHZkQ0IxYm5kaGJuUmxaQ0JsZUdObGNIUnBiMjVjSWl0eUtTeGxKaVpwSmladUppWWhiQ2hwTEc0cGZId2haU1ltYVNsMGFISnZkeUJwZlhaaGNpQndQV1VvWENKMWRHbHNMMXdpS1N4a1BVRnljbUY1TG5CeWIzUnZkSGx3WlM1emJHbGpaU3huUFU5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3NlVDEwTG1WNGNHOXlkSE05WVR0NUxrRnpjMlZ5ZEdsdmJrVnljbTl5UFdaMWJtTjBhVzl1S0dVcGUzUm9hWE11Ym1GdFpUMWNJa0Z6YzJWeWRHbHZia1Z5Y205eVhDSXNkR2hwY3k1aFkzUjFZV3c5WlM1aFkzUjFZV3dzZEdocGN5NWxlSEJsWTNSbFpEMWxMbVY0Y0dWamRHVmtMSFJvYVhNdWIzQmxjbUYwYjNJOVpTNXZjR1Z5WVhSdmNpeGxMbTFsYzNOaFoyVS9LSFJvYVhNdWJXVnpjMkZuWlQxbExtMWxjM05oWjJVc2RHaHBjeTVuWlc1bGNtRjBaV1JOWlhOellXZGxQU0V4S1Rvb2RHaHBjeTV0WlhOellXZGxQVzhvZEdocGN5a3NkR2hwY3k1blpXNWxjbUYwWldSTlpYTnpZV2RsUFNFd0tUdDJZWElnZEQxbExuTjBZV05yVTNSaGNuUkdkVzVqZEdsdmJueDhjenRwWmloRmNuSnZjaTVqWVhCMGRYSmxVM1JoWTJ0VWNtRmpaU2xGY25KdmNpNWpZWEIwZFhKbFUzUmhZMnRVY21GalpTaDBhR2x6TEhRcE8yVnNjMlY3ZG1GeUlHNDlibVYzSUVWeWNtOXlPMmxtS0c0dWMzUmhZMnNwZTNaaGNpQnlQVzR1YzNSaFkyc3NhVDEwTG01aGJXVXNZVDF5TG1sdVpHVjRUMllvWENKY1hHNWNJaXRwS1R0cFppaGhQajB3S1h0MllYSWdkVDF5TG1sdVpHVjRUMllvWENKY1hHNWNJaXhoS3pFcE8zSTljaTV6ZFdKemRISnBibWNvZFNzeEtYMTBhR2x6TG5OMFlXTnJQWEo5Zlgwc2NDNXBibWhsY21sMGN5aDVMa0Z6YzJWeWRHbHZia1Z5Y205eUxFVnljbTl5S1N4NUxtWmhhV3c5Y3l4NUxtOXJQV0VzZVM1bGNYVmhiRDFtZFc1amRHbHZiaWhsTEhRc2JpbDdaU0U5ZENZbWN5aGxMSFFzYml4Y0lqMDlYQ0lzZVM1bGNYVmhiQ2w5TEhrdWJtOTBSWEYxWVd3OVpuVnVZM1JwYjI0b1pTeDBMRzRwZTJVOVBYUW1Kbk1vWlN4MExHNHNYQ0loUFZ3aUxIa3VibTkwUlhGMVlXd3BmU3g1TG1SbFpYQkZjWFZoYkQxbWRXNWpkR2x2YmlobExIUXNiaWw3ZFNobExIUXBmSHh6S0dVc2RDeHVMRndpWkdWbGNFVnhkV0ZzWENJc2VTNWtaV1Z3UlhGMVlXd3BmU3g1TG01dmRFUmxaWEJGY1hWaGJEMW1kVzVqZEdsdmJpaGxMSFFzYmlsN2RTaGxMSFFwSmlaektHVXNkQ3h1TEZ3aWJtOTBSR1ZsY0VWeGRXRnNYQ0lzZVM1dWIzUkVaV1Z3UlhGMVlXd3BmU3g1TG5OMGNtbGpkRVZ4ZFdGc1BXWjFibU4wYVc5dUtHVXNkQ3h1S1h0bElUMDlkQ1ltY3lobExIUXNiaXhjSWowOVBWd2lMSGt1YzNSeWFXTjBSWEYxWVd3cGZTeDVMbTV2ZEZOMGNtbGpkRVZ4ZFdGc1BXWjFibU4wYVc5dUtHVXNkQ3h1S1h0bFBUMDlkQ1ltY3lobExIUXNiaXhjSWlFOVBWd2lMSGt1Ym05MFUzUnlhV04wUlhGMVlXd3BmU3g1VzF3aWRHaHliM2R6WENKZFBXWjFibU4wYVc5dUtHVXNkQ3h1S1h0b0xtRndjR3g1S0hSb2FYTXNXeUV3WFM1amIyNWpZWFFvWkM1allXeHNLR0Z5WjNWdFpXNTBjeWtwS1gwc2VTNWtiMlZ6VG05MFZHaHliM2M5Wm5WdVkzUnBiMjRvWlN4MEtYdG9MbUZ3Y0d4NUtIUm9hWE1zV3lFeFhTNWpiMjVqWVhRb1pDNWpZV3hzS0dGeVozVnRaVzUwY3lrcEtYMHNlUzVwWmtWeWNtOXlQV1oxYm1OMGFXOXVLR1VwZTJsbUtHVXBkR2h5YjNjZ1pYMDdkbUZ5SUY4OVQySnFaV04wTG10bGVYTjhmR1oxYm1OMGFXOXVLR1VwZTNaaGNpQjBQVnRkTzJadmNpaDJZWElnYmlCcGJpQmxLV2N1WTJGc2JDaGxMRzRwSmlaMExuQjFjMmdvYmlrN2NtVjBkWEp1SUhSOWZTeDdYQ0oxZEdsc0wxd2lPalEwZlYwc05qcGJablZ1WTNScGIyNG9aU3gwTEc0cGV5aG1kVzVqZEdsdmJpaDBLWHRjSW5WelpTQnpkSEpwWTNSY0lqdDJZWElnY2oxbEtGd2lZblZtWm1WeVhDSXBMR2s5Y2k1Q2RXWm1aWElzYnoxeUxsTnNiM2RDZFdabVpYSXNjejF5TG10TllYaE1aVzVuZEdoOGZESXhORGMwT0RNMk5EYzdiaTVoYkd4dll6MW1kVzVqZEdsdmJpaGxMSFFzYmlsN2FXWW9YQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnYVM1aGJHeHZZeWx5WlhSMWNtNGdhUzVoYkd4dll5aGxMSFFzYmlrN2FXWW9YQ0p1ZFcxaVpYSmNJajA5ZEhsd1pXOW1JRzRwZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0ltVnVZMjlrYVc1bklHMTFjM1FnYm05MElHSmxJRzUxYldKbGNsd2lLVHRwWmloY0ltNTFiV0psY2x3aUlUMTBlWEJsYjJZZ1pTbDBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLRndpYzJsNlpTQnRkWE4wSUdKbElHRWdiblZ0WW1WeVhDSXBPMmxtS0dVK2N5bDBhSEp2ZHlCdVpYY2dVbUZ1WjJWRmNuSnZjaWhjSW5OcGVtVWdhWE1nZEc5dklHeGhjbWRsWENJcE8zWmhjaUJ5UFc0c2J6MTBPM1p2YVdRZ01EMDlQVzhtSmloeVBYWnZhV1FnTUN4dlBUQXBPM1poY2lCaFBXNWxkeUJwS0dVcE8ybG1LRndpYzNSeWFXNW5YQ0k5UFhSNWNHVnZaaUJ2S1dadmNpaDJZWElnZFQxdVpYY2dhU2h2TEhJcExHWTlkUzVzWlc1bmRHZ3NZejB0TVRzcksyTThaVHNwWVZ0alhUMTFXMk1sWmwwN1pXeHpaU0JoTG1acGJHd29ieWs3Y21WMGRYSnVJR0Y5TEc0dVlXeHNiMk5WYm5OaFptVTlablZ1WTNScGIyNG9aU2w3YVdZb1hDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdhUzVoYkd4dlkxVnVjMkZtWlNseVpYUjFjbTRnYVM1aGJHeHZZMVZ1YzJGbVpTaGxLVHRwWmloY0ltNTFiV0psY2x3aUlUMTBlWEJsYjJZZ1pTbDBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLRndpYzJsNlpTQnRkWE4wSUdKbElHRWdiblZ0WW1WeVhDSXBPMmxtS0dVK2N5bDBhSEp2ZHlCdVpYY2dVbUZ1WjJWRmNuSnZjaWhjSW5OcGVtVWdhWE1nZEc5dklHeGhjbWRsWENJcE8zSmxkSFZ5YmlCdVpYY2dhU2hsS1gwc2JpNW1jbTl0UFdaMWJtTjBhVzl1S0dVc2JpeHlLWHRwWmloY0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQnBMbVp5YjIwbUppZ2hkQzVWYVc1ME9FRnljbUY1Zkh4VmFXNTBPRUZ5Y21GNUxtWnliMjBoUFQxcExtWnliMjBwS1hKbGRIVnliaUJwTG1aeWIyMG9aU3h1TEhJcE8ybG1LRndpYm5WdFltVnlYQ0k5UFhSNWNHVnZaaUJsS1hSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0oxd2lkbUZzZFdWY0lpQmhjbWQxYldWdWRDQnRkWE4wSUc1dmRDQmlaU0JoSUc1MWJXSmxjaWNwTzJsbUtGd2ljM1J5YVc1blhDSTlQWFI1Y0dWdlppQmxLWEpsZEhWeWJpQnVaWGNnYVNobExHNHBPMmxtS0Z3aWRXNWtaV1pwYm1Wa1hDSWhQWFI1Y0dWdlppQkJjbkpoZVVKMVptWmxjaVltWlNCcGJuTjBZVzVqWlc5bUlFRnljbUY1UW5WbVptVnlLWHQyWVhJZ2J6MXVPMmxtS0RFOVBUMWhjbWQxYldWdWRITXViR1Z1WjNSb0tYSmxkSFZ5YmlCdVpYY2dhU2hsS1R0Y0luVnVaR1ZtYVc1bFpGd2lQVDEwZVhCbGIyWWdieVltS0c4OU1DazdkbUZ5SUhNOWNqdHBaaWhjSW5WdVpHVm1hVzVsWkZ3aVBUMTBlWEJsYjJZZ2N5WW1LSE05WlM1aWVYUmxUR1Z1WjNSb0xXOHBMRzgrUFdVdVlubDBaVXhsYm1kMGFDbDBhSEp2ZHlCdVpYY2dVbUZ1WjJWRmNuSnZjaWhjSWlkdlptWnpaWFFuSUdseklHOTFkQ0J2WmlCaWIzVnVaSE5jSWlrN2FXWW9jejVsTG1KNWRHVk1aVzVuZEdndGJ5bDBhSEp2ZHlCdVpYY2dVbUZ1WjJWRmNuSnZjaWhjSWlkc1pXNW5kR2duSUdseklHOTFkQ0J2WmlCaWIzVnVaSE5jSWlrN2NtVjBkWEp1SUc1bGR5QnBLR1V1YzJ4cFkyVW9ieXh2SzNNcEtYMXBaaWhwTG1selFuVm1abVZ5S0dVcEtYdDJZWElnWVQxdVpYY2dhU2hsTG14bGJtZDBhQ2s3Y21WMGRYSnVJR1V1WTI5d2VTaGhMREFzTUN4bExteGxibWQwYUNrc1lYMXBaaWhsS1h0cFppaEJjbkpoZVM1cGMwRnljbUY1S0dVcGZIeGNJblZ1WkdWbWFXNWxaRndpSVQxMGVYQmxiMllnUVhKeVlYbENkV1ptWlhJbUptVXVZblZtWm1WeUlHbHVjM1JoYm1ObGIyWWdRWEp5WVhsQ2RXWm1aWEo4ZkZ3aWJHVnVaM1JvWENKcGJpQmxLWEpsZEhWeWJpQnVaWGNnYVNobEtUdHBaaWhjSWtKMVptWmxjbHdpUFQwOVpTNTBlWEJsSmlaQmNuSmhlUzVwYzBGeWNtRjVLR1V1WkdGMFlTa3BjbVYwZFhKdUlHNWxkeUJwS0dVdVpHRjBZU2w5ZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lrWnBjbk4wSUdGeVozVnRaVzUwSUcxMWMzUWdZbVVnWVNCemRISnBibWNzSUVKMVptWmxjaXdnUVhKeVlYbENkV1ptWlhJc0lFRnljbUY1TENCdmNpQmhjbkpoZVMxc2FXdGxJRzlpYW1WamRDNWNJaWw5TEc0dVlXeHNiMk5WYm5OaFptVlRiRzkzUFdaMWJtTjBhVzl1S0dVcGUybG1LRndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUdrdVlXeHNiMk5WYm5OaFptVlRiRzkzS1hKbGRIVnliaUJwTG1Gc2JHOWpWVzV6WVdabFUyeHZkeWhsS1R0cFppaGNJbTUxYldKbGNsd2lJVDEwZVhCbGIyWWdaU2wwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0Z3aWMybDZaU0J0ZFhOMElHSmxJR0VnYm5WdFltVnlYQ0lwTzJsbUtHVStQWE1wZEdoeWIzY2dibVYzSUZKaGJtZGxSWEp5YjNJb1hDSnphWHBsSUdseklIUnZieUJzWVhKblpWd2lLVHR5WlhSMWNtNGdibVYzSUc4b1pTbDlmU2t1WTJGc2JDaDBhR2x6TEZ3aWRXNWtaV1pwYm1Wa1hDSWhQWFI1Y0dWdlppQm5iRzlpWVd3L1oyeHZZbUZzT2x3aWRXNWtaV1pwYm1Wa1hDSWhQWFI1Y0dWdlppQnpaV3htUDNObGJHWTZYQ0oxYm1SbFptbHVaV1JjSWlFOWRIbHdaVzltSUhkcGJtUnZkejkzYVc1a2IzYzZlMzBwZlN4N1luVm1abVZ5T2pkOVhTdzNPbHRtZFc1amRHbHZiaWhsTEhRc2JpbDdLR1oxYm1OMGFXOXVLSFFwZTF3aWRYTmxJSE4wY21samRGd2lPMloxYm1OMGFXOXVJSElvS1h0MGNubDdkbUZ5SUdVOWJtVjNJRlZwYm5RNFFYSnlZWGtvTVNrN2NtVjBkWEp1SUdVdVgxOXdjbTkwYjE5ZlBYdGZYM0J5YjNSdlgxODZWV2x1ZERoQmNuSmhlUzV3Y205MGIzUjVjR1VzWm05dk9tWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlEUXlmWDBzTkRJOVBUMWxMbVp2YnlncEppWmNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUJsTG5OMVltRnljbUY1SmlZd1BUMDlaUzV6ZFdKaGNuSmhlU2d4TERFcExtSjVkR1ZNWlc1bmRHaDlZMkYwWTJnb2RDbDdjbVYwZFhKdUlURjlmV1oxYm1OMGFXOXVJR2tvS1h0eVpYUjFjbTRnY3k1VVdWQkZSRjlCVWxKQldWOVRWVkJRVDFKVVB6SXhORGMwT0RNMk5EYzZNVEEzTXpjME1UZ3lNMzFtZFc1amRHbHZiaUJ2S0dVc2RDbDdhV1lvYVNncFBIUXBkR2h5YjNjZ2JtVjNJRkpoYm1kbFJYSnliM0lvWENKSmJuWmhiR2xrSUhSNWNHVmtJR0Z5Y21GNUlHeGxibWQwYUZ3aUtUdHlaWFIxY200Z2N5NVVXVkJGUkY5QlVsSkJXVjlUVlZCUVQxSlVQeWhsUFc1bGR5QlZhVzUwT0VGeWNtRjVLSFFwTEdVdVgxOXdjbTkwYjE5ZlBYTXVjSEp2ZEc5MGVYQmxLVG9vYm5Wc2JEMDlQV1VtSmlobFBXNWxkeUJ6S0hRcEtTeGxMbXhsYm1kMGFEMTBLU3hsZldaMWJtTjBhVzl1SUhNb1pTeDBMRzRwZTJsbUtDRW9jeTVVV1ZCRlJGOUJVbEpCV1Y5VFZWQlFUMUpVZkh4MGFHbHpJR2x1YzNSaGJtTmxiMllnY3lrcGNtVjBkWEp1SUc1bGR5QnpLR1VzZEN4dUtUdHBaaWhjSW01MWJXSmxjbHdpUFQxMGVYQmxiMllnWlNsN2FXWW9YQ0p6ZEhKcGJtZGNJajA5ZEhsd1pXOW1JSFFwZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpU1dZZ1pXNWpiMlJwYm1jZ2FYTWdjM0JsWTJsbWFXVmtJSFJvWlc0Z2RHaGxJR1pwY25OMElHRnlaM1Z0Wlc1MElHMTFjM1FnWW1VZ1lTQnpkSEpwYm1kY0lpazdjbVYwZFhKdUlHTW9kR2hwY3l4bEtYMXlaWFIxY200Z1lTaDBhR2x6TEdVc2RDeHVLWDFtZFc1amRHbHZiaUJoS0dVc2RDeHVMSElwZTJsbUtGd2liblZ0WW1WeVhDSTlQWFI1Y0dWdlppQjBLWFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjF3aWRtRnNkV1ZjSWlCaGNtZDFiV1Z1ZENCdGRYTjBJRzV2ZENCaVpTQmhJRzUxYldKbGNpY3BPM0psZEhWeWJsd2lkVzVrWldacGJtVmtYQ0loUFhSNWNHVnZaaUJCY25KaGVVSjFabVpsY2lZbWRDQnBibk4wWVc1alpXOW1JRUZ5Y21GNVFuVm1abVZ5UDNBb1pTeDBMRzRzY2lrNlhDSnpkSEpwYm1kY0lqMDlkSGx3Wlc5bUlIUS9iQ2hsTEhRc2JpazZaQ2hsTEhRcGZXWjFibU4wYVc5dUlIVW9aU2w3YVdZb1hDSnVkVzFpWlhKY0lpRTlkSGx3Wlc5bUlHVXBkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduWENKemFYcGxYQ0lnWVhKbmRXMWxiblFnYlhWemRDQmlaU0JoSUc1MWJXSmxjaWNwZldaMWJtTjBhVzl1SUdZb1pTeDBMRzRzY2lsN2NtVjBkWEp1SUhVb2RDa3NkRHc5TUQ5dktHVXNkQ2s2ZG05cFpDQXdJVDA5Ymo5Y0luTjBjbWx1WjF3aVBUMTBlWEJsYjJZZ2NqOXZLR1VzZENrdVptbHNiQ2h1TEhJcE9tOG9aU3gwS1M1bWFXeHNLRzRwT204b1pTeDBLWDFtZFc1amRHbHZiaUJqS0dVc2RDbDdhV1lvZFNoMEtTeGxQVzhvWlN4MFBEQS9NRG93Zkdjb2RDa3BMQ0Z6TGxSWlVFVkVYMEZTVWtGWlgxTlZVRkJQVWxRcFptOXlLSFpoY2lCdVBUQTdiangwT3lzcmJpbGxXMjVkUFRBN2NtVjBkWEp1SUdWOVpuVnVZM1JwYjI0Z2JDaGxMSFFzYmlsN2FXWW9YQ0p6ZEhKcGJtZGNJajA5ZEhsd1pXOW1JRzRtSmx3aVhDSWhQVDF1Zkh3b2JqMWNJblYwWmpoY0lpa3NJWE11YVhORmJtTnZaR2x1WnlodUtTbDBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLQ2RjSW1WdVkyOWthVzVuWENJZ2JYVnpkQ0JpWlNCaElIWmhiR2xrSUhOMGNtbHVaeUJsYm1OdlpHbHVaeWNwTzNaaGNpQnlQVEI4WHloMExHNHBPM0psZEhWeWJpQmxQVzhvWlN4eUtTeGxMbmR5YVhSbEtIUXNiaWtzWlgxbWRXNWpkR2x2YmlCb0tHVXNkQ2w3ZG1GeUlHNDlNSHhuS0hRdWJHVnVaM1JvS1R0bFBXOG9aU3h1S1R0bWIzSW9kbUZ5SUhJOU1EdHlQRzQ3Y2lzOU1TbGxXM0pkUFRJMU5TWjBXM0pkTzNKbGRIVnliaUJsZldaMWJtTjBhVzl1SUhBb1pTeDBMRzRzY2lsN2FXWW9kQzVpZVhSbFRHVnVaM1JvTEc0OE1IeDhkQzVpZVhSbFRHVnVaM1JvUEc0cGRHaHliM2NnYm1WM0lGSmhibWRsUlhKeWIzSW9YQ0luYjJabWMyVjBKeUJwY3lCdmRYUWdiMllnWW05MWJtUnpYQ0lwTzJsbUtIUXVZbmwwWlV4bGJtZDBhRHh1S3loeWZId3dLU2wwYUhKdmR5QnVaWGNnVW1GdVoyVkZjbkp2Y2loY0lpZHNaVzVuZEdnbklHbHpJRzkxZENCdlppQmliM1Z1WkhOY0lpazdjbVYwZFhKdUlIUTlkbTlwWkNBd1BUMDljajl1WlhjZ1ZXbHVkRGhCY25KaGVTaDBMRzRwT201bGR5QlZhVzUwT0VGeWNtRjVLSFFzYml4eUtTeHpMbFJaVUVWRVgwRlNVa0ZaWDFOVlVGQlBVbFEvS0dVOWRDeGxMbDlmY0hKdmRHOWZYejF6TG5CeWIzUnZkSGx3WlNrNlpUMW9LR1VzZENrc1pYMW1kVzVqZEdsdmJpQmtLR1VzZENsN2FXWW9jeTVwYzBKMVptWmxjaWgwS1NsN2RtRnlJRzQ5TUh4bktIUXViR1Z1WjNSb0tUdHlaWFIxY200Z1pUMXZLR1VzYmlrc01EMDlQV1V1YkdWdVozUm9QMlU2S0hRdVkyOXdlU2hsTERBc01DeHVLU3hsS1gxcFppaDBLWHRwWmloY0luVnVaR1ZtYVc1bFpGd2lJVDEwZVhCbGIyWWdRWEp5WVhsQ2RXWm1aWEltSm5RdVluVm1abVZ5SUdsdWMzUmhibU5sYjJZZ1FYSnlZWGxDZFdabVpYSjhmRndpYkdWdVozUm9YQ0pwYmlCMEtYSmxkSFZ5Ymx3aWJuVnRZbVZ5WENJaFBYUjVjR1Z2WmlCMExteGxibWQwYUh4OFdDaDBMbXhsYm1kMGFDay9ieWhsTERBcE9tZ29aU3gwS1R0cFppaGNJa0oxWm1abGNsd2lQVDA5ZEM1MGVYQmxKaVlrS0hRdVpHRjBZU2twY21WMGRYSnVJR2dvWlN4MExtUmhkR0VwZlhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSkdhWEp6ZENCaGNtZDFiV1Z1ZENCdGRYTjBJR0psSUdFZ2MzUnlhVzVuTENCQ2RXWm1aWElzSUVGeWNtRjVRblZtWm1WeUxDQkJjbkpoZVN3Z2IzSWdZWEp5WVhrdGJHbHJaU0J2WW1wbFkzUXVYQ0lwZldaMWJtTjBhVzl1SUdjb1pTbDdhV1lvWlQ0OWFTZ3BLWFJvY205M0lHNWxkeUJTWVc1blpVVnljbTl5S0Z3aVFYUjBaVzF3ZENCMGJ5QmhiR3h2WTJGMFpTQkNkV1ptWlhJZ2JHRnlaMlZ5SUhSb1lXNGdiV0Y0YVcxMWJTQnphWHBsT2lBd2VGd2lLMmtvS1M1MGIxTjBjbWx1WnlneE5pa3JYQ0lnWW5sMFpYTmNJaWs3Y21WMGRYSnVJREI4WlgxbWRXNWpkR2x2YmlCNUtHVXBlM0psZEhWeWJpdGxJVDFsSmlZb1pUMHdLU3h6TG1Gc2JHOWpLQ3RsS1gxbWRXNWpkR2x2YmlCZktHVXNkQ2w3YVdZb2N5NXBjMEoxWm1abGNpaGxLU2x5WlhSMWNtNGdaUzVzWlc1bmRHZzdhV1lvWENKMWJtUmxabWx1WldSY0lpRTlkSGx3Wlc5bUlFRnljbUY1UW5WbVptVnlKaVpjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCQmNuSmhlVUoxWm1abGNpNXBjMVpwWlhjbUppaEJjbkpoZVVKMVptWmxjaTVwYzFacFpYY29aU2w4ZkdVZ2FXNXpkR0Z1WTJWdlppQkJjbkpoZVVKMVptWmxjaWtwY21WMGRYSnVJR1V1WW5sMFpVeGxibWQwYUR0Y0luTjBjbWx1WjF3aUlUMTBlWEJsYjJZZ1pTWW1LR1U5WENKY0lpdGxLVHQyWVhJZ2JqMWxMbXhsYm1kMGFEdHBaaWd3UFQwOWJpbHlaWFIxY200Z01EdG1iM0lvZG1GeUlISTlJVEU3T3lsemQybDBZMmdvZENsN1kyRnpaVndpWVhOamFXbGNJanBqWVhObFhDSmlhVzVoY25sY0lqcGpZWE5sWENKeVlYZGNJanBqWVhObFhDSnlZWGR6WENJNmNtVjBkWEp1SUc0N1kyRnpaVndpZFhSbU9Gd2lPbU5oYzJWY0luVjBaaTA0WENJNlkyRnpaU0IyYjJsa0lEQTZjbVYwZFhKdUlIRW9aU2t1YkdWdVozUm9PMk5oYzJWY0luVmpjekpjSWpwallYTmxYQ0oxWTNNdE1sd2lPbU5oYzJWY0luVjBaakUyYkdWY0lqcGpZWE5sWENKMWRHWXRNVFpzWlZ3aU9uSmxkSFZ5YmlBeUttNDdZMkZ6WlZ3aWFHVjRYQ0k2Y21WMGRYSnVJRzQrUGo0eE8yTmhjMlZjSW1KaGMyVTJORndpT25KbGRIVnliaUJYS0dVcExteGxibWQwYUR0a1pXWmhkV3gwT21sbUtISXBjbVYwZFhKdUlIRW9aU2t1YkdWdVozUm9PM1E5S0Z3aVhDSXJkQ2t1ZEc5TWIzZGxja05oYzJVb0tTeHlQU0V3ZlgxbWRXNWpkR2x2YmlCMktHVXNkQ3h1S1h0MllYSWdjajBoTVR0cFppZ29kbTlwWkNBd1BUMDlkSHg4ZER3d0tTWW1LSFE5TUNrc2RENTBhR2x6TG14bGJtZDBhQ2x5WlhSMWNtNWNJbHdpTzJsbUtDaDJiMmxrSURBOVBUMXVmSHh1UG5Sb2FYTXViR1Z1WjNSb0tTWW1LRzQ5ZEdocGN5NXNaVzVuZEdncExHNDhQVEFwY21WMGRYSnVYQ0pjSWp0cFppaHVQajQrUFRBc2RENCtQajB3TEc0OFBYUXBjbVYwZFhKdVhDSmNJanRtYjNJb1pYeDhLR1U5WENKMWRHWTRYQ0lwT3pzcGMzZHBkR05vS0dVcGUyTmhjMlZjSW1obGVGd2lPbkpsZEhWeWJpQkRLSFJvYVhNc2RDeHVLVHRqWVhObFhDSjFkR1k0WENJNlkyRnpaVndpZFhSbUxUaGNJanB5WlhSMWNtNGdTU2gwYUdsekxIUXNiaWs3WTJGelpWd2lZWE5qYVdsY0lqcHlaWFIxY200Z1RpaDBhR2x6TEhRc2JpazdZMkZ6WlZ3aVltbHVZWEo1WENJNmNtVjBkWEp1SUZBb2RHaHBjeXgwTEc0cE8yTmhjMlZjSW1KaGMyVTJORndpT25KbGRIVnliaUJVS0hSb2FYTXNkQ3h1S1R0allYTmxYQ0oxWTNNeVhDSTZZMkZ6WlZ3aWRXTnpMVEpjSWpwallYTmxYQ0oxZEdZeE5teGxYQ0k2WTJGelpWd2lkWFJtTFRFMmJHVmNJanB5WlhSMWNtNGdUU2gwYUdsekxIUXNiaWs3WkdWbVlYVnNkRHBwWmloeUtYUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pWYm10dWIzZHVJR1Z1WTI5a2FXNW5PaUJjSWl0bEtUdGxQU2hsSzF3aVhDSXBMblJ2VEc5M1pYSkRZWE5sS0Nrc2NqMGhNSDE5Wm5WdVkzUnBiMjRnYlNobExIUXNiaWw3ZG1GeUlISTlaVnQwWFR0bFczUmRQV1ZiYmwwc1pWdHVYVDF5ZldaMWJtTjBhVzl1SUVVb1pTeDBMRzRzY2lsN1puVnVZM1JwYjI0Z2FTaGxMSFFwZTNKbGRIVnliaUF4UFQwOWJ6OWxXM1JkT21VdWNtVmhaRlZKYm5ReE5rSkZLSFFxYnlsOWRtRnlJRzg5TVN4elBXVXViR1Z1WjNSb0xHRTlkQzVzWlc1bmRHZzdhV1lvZG05cFpDQXdJVDA5Y2lZbUtISTlVM1J5YVc1bktISXBMblJ2VEc5M1pYSkRZWE5sS0Nrc1hDSjFZM015WENJOVBUMXlmSHhjSW5WamN5MHlYQ0k5UFQxeWZIeGNJblYwWmpFMmJHVmNJajA5UFhKOGZGd2lkWFJtTFRFMmJHVmNJajA5UFhJcEtYdHBaaWhsTG14bGJtZDBhRHd5Zkh4MExteGxibWQwYUR3eUtYSmxkSFZ5YmkweE8yODlNaXh6THoweUxHRXZQVElzYmk4OU1uMW1iM0lvZG1GeUlIVTlMVEVzWmoxdU8yWThjenNySzJZcGFXWW9hU2hsTEdZcFBUMDlhU2gwTEhVOVBUMHRNVDh3T21ZdGRTa3BlMmxtS0hVOVBUMHRNU1ltS0hVOVppa3NaaTExS3pFOVBUMWhLWEpsZEhWeWJpQjFLbTk5Wld4elpTQjFJVDA5TFRFbUppaG1MVDFtTFhVcExIVTlMVEU3Y21WMGRYSnVMVEY5Wm5WdVkzUnBiMjRnZHlobExIUXNiaXh5S1h0dVBVNTFiV0psY2lodUtYeDhNRHQyWVhJZ2FUMWxMbXhsYm1kMGFDMXVPM0kvS0hJOVRuVnRZbVZ5S0hJcExISSthU1ltS0hJOWFTa3BPbkk5YVR0MllYSWdiejEwTG14bGJtZDBhRHRwWmlodkpUSWhQVDB3S1hSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSWtsdWRtRnNhV1FnYUdWNElITjBjbWx1WjF3aUtUdHlQbTh2TWlZbUtISTlieTh5S1R0bWIzSW9kbUZ5SUhNOU1EdHpQSEk3S3l0ektYdDJZWElnWVQxd1lYSnpaVWx1ZENoMExuTjFZbk4wY2lneUtuTXNNaWtzTVRZcE8ybG1LR2x6VG1GT0tHRXBLWEpsZEhWeWJpQnpPMlZiYml0elhUMWhmWEpsZEhWeWJpQnpmV1oxYm1OMGFXOXVJR0lvWlN4MExHNHNjaWw3Y21WMGRYSnVJRllvY1NoMExHVXViR1Z1WjNSb0xXNHBMR1VzYml4eUtYMW1kVzVqZEdsdmJpQlRLR1VzZEN4dUxISXBlM0psZEhWeWJpQldLRXNvZENrc1pTeHVMSElwZldaMWJtTjBhVzl1SUU4b1pTeDBMRzRzY2lsN2NtVjBkWEp1SUZNb1pTeDBMRzRzY2lsOVpuVnVZM1JwYjI0Z1VpaGxMSFFzYml4eUtYdHlaWFIxY200Z1ZpaFhLSFFwTEdVc2JpeHlLWDFtZFc1amRHbHZiaUJCS0dVc2RDeHVMSElwZTNKbGRIVnliaUJXS0hvb2RDeGxMbXhsYm1kMGFDMXVLU3hsTEc0c2NpbDlablZ1WTNScGIyNGdWQ2hsTEhRc2JpbDdjbVYwZFhKdUlEQTlQVDEwSmladVBUMDlaUzVzWlc1bmRHZy9TaTVtY205dFFubDBaVUZ5Y21GNUtHVXBPa291Wm5KdmJVSjVkR1ZCY25KaGVTaGxMbk5zYVdObEtIUXNiaWtwZldaMWJtTjBhVzl1SUVrb1pTeDBMRzRwZTI0OVRXRjBhQzV0YVc0b1pTNXNaVzVuZEdnc2JpazdabTl5S0haaGNpQnlQVnRkTEdrOWREdHBQRzQ3S1h0MllYSWdiejFsVzJsZExITTliblZzYkN4aFBXOCtNak01UHpRNmJ6NHlNak0vTXpwdlBqRTVNVDh5T2pFN2FXWW9hU3RoUEQxdUtYdDJZWElnZFN4bUxHTXNiRHR6ZDJsMFkyZ29ZU2w3WTJGelpTQXhPbTg4TVRJNEppWW9jejF2S1R0aWNtVmhhenRqWVhObElESTZkVDFsVzJrck1WMHNNVEk0UFQwOUtERTVNaVoxS1NZbUtHdzlLRE14Sm04cFBEdzJmRFl6Sm5Vc2JENHhNamNtSmloelBXd3BLVHRpY21WaGF6dGpZWE5sSURNNmRUMWxXMmtyTVYwc1pqMWxXMmtyTWwwc01USTRQVDA5S0RFNU1pWjFLU1ltTVRJNFBUMDlLREU1TWlabUtTWW1LR3c5S0RFMUptOHBQRHd4TW53b05qTW1kU2s4UERaOE5qTW1aaXhzUGpJd05EY21KaWhzUERVMU1qazJmSHhzUGpVM016UXpLU1ltS0hNOWJDa3BPMkp5WldGck8yTmhjMlVnTkRwMVBXVmJhU3N4WFN4bVBXVmJhU3N5WFN4alBXVmJhU3N6WFN3eE1qZzlQVDBvTVRreUpuVXBKaVl4TWpnOVBUMG9NVGt5Sm1ZcEppWXhNamc5UFQwb01Ua3lKbU1wSmlZb2JEMG9NVFVtYnlrOFBERTRmQ2cyTXlaMUtUdzhNVEo4S0RZekptWXBQRHcyZkRZekptTXNiRDQyTlRVek5TWW1iRHd4TVRFME1URXlKaVlvY3oxc0tTbDlmVzUxYkd3OVBUMXpQeWh6UFRZMU5UTXpMR0U5TVNrNmN6NDJOVFV6TlNZbUtITXRQVFkxTlRNMkxISXVjSFZ6YUNoelBqNCtNVEFtTVRBeU0zdzFOVEk1Tmlrc2N6MDFOak15TUh3eE1ESXpKbk1wTEhJdWNIVnphQ2h6S1N4cEt6MWhmWEpsZEhWeWJpQk1LSElwZldaMWJtTjBhVzl1SUV3b1pTbDdkbUZ5SUhROVpTNXNaVzVuZEdnN2FXWW9kRHc5V2lseVpYUjFjbTRnVTNSeWFXNW5MbVp5YjIxRGFHRnlRMjlrWlM1aGNIQnNlU2hUZEhKcGJtY3NaU2s3Wm05eUtIWmhjaUJ1UFZ3aVhDSXNjajB3TzNJOGREc3BiaXM5VTNSeWFXNW5MbVp5YjIxRGFHRnlRMjlrWlM1aGNIQnNlU2hUZEhKcGJtY3NaUzV6YkdsalpTaHlMSElyUFZvcEtUdHlaWFIxY200Z2JuMW1kVzVqZEdsdmJpQk9LR1VzZEN4dUtYdDJZWElnY2oxY0lsd2lPMjQ5VFdGMGFDNXRhVzRvWlM1c1pXNW5kR2dzYmlrN1ptOXlLSFpoY2lCcFBYUTdhVHh1T3lzcmFTbHlLejFUZEhKcGJtY3Vabkp2YlVOb1lYSkRiMlJsS0RFeU55WmxXMmxkS1R0eVpYUjFjbTRnY24xbWRXNWpkR2x2YmlCUUtHVXNkQ3h1S1h0MllYSWdjajFjSWx3aU8yNDlUV0YwYUM1dGFXNG9aUzVzWlc1bmRHZ3NiaWs3Wm05eUtIWmhjaUJwUFhRN2FUeHVPeXNyYVNseUt6MVRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxLR1ZiYVYwcE8zSmxkSFZ5YmlCeWZXWjFibU4wYVc5dUlFTW9aU3gwTEc0cGUzWmhjaUJ5UFdVdWJHVnVaM1JvT3lnaGRIeDhkRHd3S1NZbUtIUTlNQ2tzS0NGdWZIeHVQREI4Zkc0K2Npa21KaWh1UFhJcE8yWnZjaWgyWVhJZ2FUMWNJbHdpTEc4OWREdHZQRzQ3S3l0dktXa3JQVWdvWlZ0dlhTazdjbVYwZFhKdUlHbDlablZ1WTNScGIyNGdUU2hsTEhRc2JpbDdabTl5S0haaGNpQnlQV1V1YzJ4cFkyVW9kQ3h1S1N4cFBWd2lYQ0lzYnowd08yODhjaTVzWlc1bmRHZzdieXM5TWlscEt6MVRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxLSEpiYjEwck1qVTJLbkpiYnlzeFhTazdjbVYwZFhKdUlHbDlablZ1WTNScGIyNGdlQ2hsTEhRc2JpbDdhV1lvWlNVeElUMDlNSHg4WlR3d0tYUm9jbTkzSUc1bGR5QlNZVzVuWlVWeWNtOXlLRndpYjJabWMyVjBJR2x6SUc1dmRDQjFhVzUwWENJcE8ybG1LR1VyZEQ1dUtYUm9jbTkzSUc1bGR5QlNZVzVuWlVWeWNtOXlLRndpVkhKNWFXNW5JSFJ2SUdGalkyVnpjeUJpWlhsdmJtUWdZblZtWm1WeUlHeGxibWQwYUZ3aUtYMW1kVzVqZEdsdmJpQkVLR1VzZEN4dUxISXNhU3h2S1h0cFppZ2hjeTVwYzBKMVptWmxjaWhsS1NsMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZGNJbUoxWm1abGNsd2lJR0Z5WjNWdFpXNTBJRzExYzNRZ1ltVWdZU0JDZFdabVpYSWdhVzV6ZEdGdVkyVW5LVHRwWmloMFBtbDhmSFE4YnlsMGFISnZkeUJ1WlhjZ1VtRnVaMlZGY25KdmNpZ25YQ0oyWVd4MVpWd2lJR0Z5WjNWdFpXNTBJR2x6SUc5MWRDQnZaaUJpYjNWdVpITW5LVHRwWmlodUszSStaUzVzWlc1bmRHZ3BkR2h5YjNjZ2JtVjNJRkpoYm1kbFJYSnliM0lvWENKSmJtUmxlQ0J2ZFhRZ2IyWWdjbUZ1WjJWY0lpbDlablZ1WTNScGIyNGdhaWhsTEhRc2JpeHlLWHQwUERBbUppaDBQVFkxTlRNMUszUXJNU2s3Wm05eUtIWmhjaUJwUFRBc2J6MU5ZWFJvTG0xcGJpaGxMbXhsYm1kMGFDMXVMRElwTzJrOGJ6c3JLMmtwWlZ0dUsybGRQU2gwSmpJMU5UdzhPQ29vY2o5cE9qRXRhU2twUGo0K09Db29jajlwT2pFdGFTbDlablZ1WTNScGIyNGdWU2hsTEhRc2JpeHlLWHQwUERBbUppaDBQVFF5T1RRNU5qY3lPVFVyZENzeEtUdG1iM0lvZG1GeUlHazlNQ3h2UFUxaGRHZ3ViV2x1S0dVdWJHVnVaM1JvTFc0c05DazdhVHh2T3lzcmFTbGxXMjRyYVYwOWRENCtQamdxS0hJL2FUb3pMV2twSmpJMU5YMW1kVzVqZEdsdmJpQnJLR1VzZEN4dUxISXNhU3h2S1h0cFppaHVLM0krWlM1c1pXNW5kR2dwZEdoeWIzY2dibVYzSUZKaGJtZGxSWEp5YjNJb1hDSkpibVJsZUNCdmRYUWdiMllnY21GdVoyVmNJaWs3YVdZb2Jqd3dLWFJvY205M0lHNWxkeUJTWVc1blpVVnljbTl5S0Z3aVNXNWtaWGdnYjNWMElHOW1JSEpoYm1kbFhDSXBmV1oxYm1OMGFXOXVJRUlvWlN4MExHNHNjaXhwS1h0eVpYUjFjbTRnYVh4OGF5aGxMSFFzYml3MExETXVOREF5T0RJek5EWTJNemcxTWpnNE5tVXpPQ3d0TXk0ME1ESTRNak0wTmpZek9EVXlPRGcyWlRNNEtTeFJMbmR5YVhSbEtHVXNkQ3h1TEhJc01qTXNOQ2tzYmlzMGZXWjFibU4wYVc5dUlFY29aU3gwTEc0c2NpeHBLWHR5WlhSMWNtNGdhWHg4YXlobExIUXNiaXc0TERFdU56azNOamt6TVRNME9EWXlNekUxTjJVek1EZ3NMVEV1TnprM05qa3pNVE0wT0RZeU16RTFOMlV6TURncExGRXVkM0pwZEdVb1pTeDBMRzRzY2l3MU1pdzRLU3h1S3poOVpuVnVZM1JwYjI0Z1JpaGxLWHRwWmlobFBWa29aU2t1Y21Wd2JHRmpaU2hsWlN4Y0lsd2lLU3hsTG14bGJtZDBhRHd5S1hKbGRIVnlibHdpWENJN1ptOXlLRHRsTG14bGJtZDBhQ1UwSVQwOU1Ec3BaU3M5WENJOVhDSTdjbVYwZFhKdUlHVjlablZ1WTNScGIyNGdXU2hsS1h0eVpYUjFjbTRnWlM1MGNtbHRQMlV1ZEhKcGJTZ3BPbVV1Y21Wd2JHRmpaU2d2WGx4Y2N5dDhYRnh6S3lRdlp5eGNJbHdpS1gxbWRXNWpkR2x2YmlCSUtHVXBlM0psZEhWeWJpQmxQREUyUDF3aU1Gd2lLMlV1ZEc5VGRISnBibWNvTVRZcE9tVXVkRzlUZEhKcGJtY29NVFlwZldaMWJtTjBhVzl1SUhFb1pTeDBLWHQwUFhSOGZERXZNRHRtYjNJb2RtRnlJRzRzY2oxbExteGxibWQwYUN4cFBXNTFiR3dzYnoxYlhTeHpQVEE3Y3p4eU95c3JjeWw3YVdZb2JqMWxMbU5vWVhKRGIyUmxRWFFvY3lrc2JqNDFOVEk1TlNZbWJqdzFOek0wTkNsN2FXWW9JV2twZTJsbUtHNCtOVFl6TVRrcGV5aDBMVDB6S1Q0dE1TWW1ieTV3ZFhOb0tESXpPU3d4T1RFc01UZzVLVHRqYjI1MGFXNTFaWDFwWmloekt6RTlQVDF5S1hzb2RDMDlNeWsrTFRFbUptOHVjSFZ6YUNneU16a3NNVGt4TERFNE9TazdZMjl1ZEdsdWRXVjlhVDF1TzJOdmJuUnBiblZsZldsbUtHNDhOVFl6TWpBcGV5aDBMVDB6S1Q0dE1TWW1ieTV3ZFhOb0tESXpPU3d4T1RFc01UZzVLU3hwUFc0N1kyOXVkR2x1ZFdWOWJqMG9hUzAxTlRJNU5qdzhNVEI4YmkwMU5qTXlNQ2tyTmpVMU16WjlaV3h6WlNCcEppWW9kQzA5TXlrK0xURW1KbTh1Y0hWemFDZ3lNemtzTVRreExERTRPU2s3YVdZb2FUMXVkV3hzTEc0OE1USTRLWHRwWmlnb2RDMDlNU2s4TUNsaWNtVmhhenR2TG5CMWMyZ29iaWw5Wld4elpTQnBaaWh1UERJd05EZ3BlMmxtS0NoMExUMHlLVHd3S1dKeVpXRnJPMjh1Y0hWemFDaHVQajQyZkRFNU1pdzJNeVp1ZkRFeU9DbDlaV3h6WlNCcFppaHVQRFkxTlRNMktYdHBaaWdvZEMwOU15azhNQ2xpY21WaGF6dHZMbkIxYzJnb2JqNCtNVEo4TWpJMExHNCtQalltTmpOOE1USTRMRFl6Sm01OE1USTRLWDFsYkhObGUybG1LQ0VvYmp3eE1URTBNVEV5S1NsMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKSmJuWmhiR2xrSUdOdlpHVWdjRzlwYm5SY0lpazdhV1lvS0hRdFBUUXBQREFwWW5KbFlXczdieTV3ZFhOb0tHNCtQakU0ZkRJME1DeHVQajR4TWlZMk0zd3hNamdzYmo0K05pWTJNM3d4TWpnc05qTW1ibnd4TWpncGZYMXlaWFIxY200Z2IzMW1kVzVqZEdsdmJpQkxLR1VwZTJadmNpaDJZWElnZEQxYlhTeHVQVEE3Ymp4bExteGxibWQwYURzcksyNHBkQzV3ZFhOb0tESTFOU1psTG1Ob1lYSkRiMlJsUVhRb2Jpa3BPM0psZEhWeWJpQjBmV1oxYm1OMGFXOXVJSG9vWlN4MEtYdG1iM0lvZG1GeUlHNHNjaXhwTEc4OVcxMHNjejB3TzNNOFpTNXNaVzVuZEdnbUppRW9LSFF0UFRJcFBEQXBPeXNyY3lsdVBXVXVZMmhoY2tOdlpHVkJkQ2h6S1N4eVBXNCtQamdzYVQxdUpUSTFOaXh2TG5CMWMyZ29hU2tzYnk1d2RYTm9LSElwTzNKbGRIVnliaUJ2ZldaMWJtTjBhVzl1SUZjb1pTbDdjbVYwZFhKdUlFb3VkRzlDZVhSbFFYSnlZWGtvUmlobEtTbDlablZ1WTNScGIyNGdWaWhsTEhRc2JpeHlLWHRtYjNJb2RtRnlJR2s5TUR0cFBISW1KaUVvYVN0dVBqMTBMbXhsYm1kMGFIeDhhVDQ5WlM1c1pXNW5kR2dwT3lzcmFTbDBXMmtyYmwwOVpWdHBYVHR5WlhSMWNtNGdhWDFtZFc1amRHbHZiaUJZS0dVcGUzSmxkSFZ5YmlCbElUMDlaWDEyWVhJZ1NqMWxLRndpWW1GelpUWTBMV3B6WENJcExGRTlaU2hjSW1sbFpXVTNOVFJjSWlrc0pEMWxLRndpYVhOaGNuSmhlVndpS1R0dUxrSjFabVpsY2oxekxHNHVVMnh2ZDBKMVptWmxjajE1TEc0dVNVNVRVRVZEVkY5TlFWaGZRbGxVUlZNOU5UQXNjeTVVV1ZCRlJGOUJVbEpCV1Y5VFZWQlFUMUpVUFhadmFXUWdNQ0U5UFhRdVZGbFFSVVJmUVZKU1FWbGZVMVZRVUU5U1ZEOTBMbFJaVUVWRVgwRlNVa0ZaWDFOVlVGQlBVbFE2Y2lncExHNHVhMDFoZUV4bGJtZDBhRDFwS0Nrc2N5NXdiMjlzVTJsNlpUMDRNVGt5TEhNdVgyRjFaMjFsYm5ROVpuVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlHVXVYMTl3Y205MGIxOWZQWE11Y0hKdmRHOTBlWEJsTEdWOUxITXVabkp2YlQxbWRXNWpkR2x2YmlobExIUXNiaWw3Y21WMGRYSnVJR0VvYm5Wc2JDeGxMSFFzYmlsOUxITXVWRmxRUlVSZlFWSlNRVmxmVTFWUVVFOVNWQ1ltS0hNdWNISnZkRzkwZVhCbExsOWZjSEp2ZEc5Zlh6MVZhVzUwT0VGeWNtRjVMbkJ5YjNSdmRIbHdaU3h6TGw5ZmNISnZkRzlmWHoxVmFXNTBPRUZ5Y21GNUxGd2lkVzVrWldacGJtVmtYQ0loUFhSNWNHVnZaaUJUZVcxaWIyd21KbE41YldKdmJDNXpjR1ZqYVdWekppWnpXMU41YldKdmJDNXpjR1ZqYVdWelhUMDlQWE1tSms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaHpMRk41YldKdmJDNXpjR1ZqYVdWekxIdDJZV3gxWlRwdWRXeHNMR052Ym1acFozVnlZV0pzWlRvaE1IMHBLU3h6TG1Gc2JHOWpQV1oxYm1OMGFXOXVLR1VzZEN4dUtYdHlaWFIxY200Z1ppaHVkV3hzTEdVc2RDeHVLWDBzY3k1aGJHeHZZMVZ1YzJGbVpUMW1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdZeWh1ZFd4c0xHVXBmU3h6TG1Gc2JHOWpWVzV6WVdabFUyeHZkejFtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnWXlodWRXeHNMR1VwZlN4ekxtbHpRblZtWm1WeVBXWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpRW9iblZzYkQwOVpYeDhJV1V1WDJselFuVm1abVZ5S1gwc2N5NWpiMjF3WVhKbFBXWjFibU4wYVc5dUtHVXNkQ2w3YVdZb0lYTXVhWE5DZFdabVpYSW9aU2w4ZkNGekxtbHpRblZtWm1WeUtIUXBLWFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKQmNtZDFiV1Z1ZEhNZ2JYVnpkQ0JpWlNCQ2RXWm1aWEp6WENJcE8ybG1LR1U5UFQxMEtYSmxkSFZ5YmlBd08yWnZjaWgyWVhJZ2JqMWxMbXhsYm1kMGFDeHlQWFF1YkdWdVozUm9MR2s5TUN4dlBVMWhkR2d1YldsdUtHNHNjaWs3YVR4dk95c3JhU2xwWmlobFcybGRJVDA5ZEZ0cFhTbDdiajFsVzJsZExISTlkRnRwWFR0aWNtVmhhMzF5WlhSMWNtNGdianh5UHkweE9uSThiajh4T2pCOUxITXVhWE5GYm1OdlpHbHVaejFtZFc1amRHbHZiaWhsS1h0emQybDBZMmdvVTNSeWFXNW5LR1VwTG5SdlRHOTNaWEpEWVhObEtDa3BlMk5oYzJWY0ltaGxlRndpT21OaGMyVmNJblYwWmpoY0lqcGpZWE5sWENKMWRHWXRPRndpT21OaGMyVmNJbUZ6WTJscFhDSTZZMkZ6WlZ3aVltbHVZWEo1WENJNlkyRnpaVndpWW1GelpUWTBYQ0k2WTJGelpWd2ljbUYzWENJNlkyRnpaVndpZFdOek1sd2lPbU5oYzJWY0luVmpjeTB5WENJNlkyRnpaVndpZFhSbU1UWnNaVndpT21OaGMyVmNJblYwWmkweE5teGxYQ0k2Y21WMGRYSnVJVEE3WkdWbVlYVnNkRHB5WlhSMWNtNGhNWDE5TEhNdVkyOXVZMkYwUFdaMWJtTjBhVzl1S0dVc2RDbDdhV1lvSVNRb1pTa3BkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduWENKc2FYTjBYQ0lnWVhKbmRXMWxiblFnYlhWemRDQmlaU0JoYmlCQmNuSmhlU0J2WmlCQ2RXWm1aWEp6SnlrN2FXWW9NRDA5UFdVdWJHVnVaM1JvS1hKbGRIVnliaUJ6TG1Gc2JHOWpLREFwTzNaaGNpQnVPMmxtS0hadmFXUWdNRDA5UFhRcFptOXlLSFE5TUN4dVBUQTdianhsTG14bGJtZDBhRHNySzI0cGRDczlaVnR1WFM1c1pXNW5kR2c3ZG1GeUlISTljeTVoYkd4dlkxVnVjMkZtWlNoMEtTeHBQVEE3Wm05eUtHNDlNRHR1UEdVdWJHVnVaM1JvT3lzcmJpbDdkbUZ5SUc4OVpWdHVYVHRwWmlnaGN5NXBjMEoxWm1abGNpaHZLU2wwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkY0lteHBjM1JjSWlCaGNtZDFiV1Z1ZENCdGRYTjBJR0psSUdGdUlFRnljbUY1SUc5bUlFSjFabVpsY25NbktUdHZMbU52Y0hrb2NpeHBLU3hwS3oxdkxteGxibWQwYUgxeVpYUjFjbTRnY24wc2N5NWllWFJsVEdWdVozUm9QVjhzY3k1d2NtOTBiM1I1Y0dVdVgybHpRblZtWm1WeVBTRXdMSE11Y0hKdmRHOTBlWEJsTG5OM1lYQXhOajFtZFc1amRHbHZiaWdwZTNaaGNpQmxQWFJvYVhNdWJHVnVaM1JvTzJsbUtHVWxNaUU5UFRBcGRHaHliM2NnYm1WM0lGSmhibWRsUlhKeWIzSW9YQ0pDZFdabVpYSWdjMmw2WlNCdGRYTjBJR0psSUdFZ2JYVnNkR2x3YkdVZ2IyWWdNVFl0WW1sMGMxd2lLVHRtYjNJb2RtRnlJSFE5TUR0MFBHVTdkQ3M5TWlsdEtIUm9hWE1zZEN4MEt6RXBPM0psZEhWeWJpQjBhR2x6ZlN4ekxuQnliM1J2ZEhsd1pTNXpkMkZ3TXpJOVpuVnVZM1JwYjI0b0tYdDJZWElnWlQxMGFHbHpMbXhsYm1kMGFEdHBaaWhsSlRRaFBUMHdLWFJvY205M0lHNWxkeUJTWVc1blpVVnljbTl5S0Z3aVFuVm1abVZ5SUhOcGVtVWdiWFZ6ZENCaVpTQmhJRzExYkhScGNHeGxJRzltSURNeUxXSnBkSE5jSWlrN1ptOXlLSFpoY2lCMFBUQTdkRHhsTzNRclBUUXBiU2gwYUdsekxIUXNkQ3N6S1N4dEtIUm9hWE1zZENzeExIUXJNaWs3Y21WMGRYSnVJSFJvYVhOOUxITXVjSEp2ZEc5MGVYQmxMblJ2VTNSeWFXNW5QV1oxYm1OMGFXOXVLQ2w3ZG1GeUlHVTlNSHgwYUdsekxteGxibWQwYUR0eVpYUjFjbTRnTUQwOVBXVS9YQ0pjSWpvd1BUMDlZWEpuZFcxbGJuUnpMbXhsYm1kMGFEOUpLSFJvYVhNc01DeGxLVHAyTG1Gd2NHeDVLSFJvYVhNc1lYSm5kVzFsYm5SektYMHNjeTV3Y205MGIzUjVjR1V1WlhGMVlXeHpQV1oxYm1OMGFXOXVLR1VwZTJsbUtDRnpMbWx6UW5WbVptVnlLR1VwS1hSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSkJjbWQxYldWdWRDQnRkWE4wSUdKbElHRWdRblZtWm1WeVhDSXBPM0psZEhWeWJpQjBhR2x6UFQwOVpYeDhNRDA5UFhNdVkyOXRjR0Z5WlNoMGFHbHpMR1VwZlN4ekxuQnliM1J2ZEhsd1pTNXBibk53WldOMFBXWjFibU4wYVc5dUtDbDdkbUZ5SUdVOVhDSmNJaXgwUFc0dVNVNVRVRVZEVkY5TlFWaGZRbGxVUlZNN2NtVjBkWEp1SUhSb2FYTXViR1Z1WjNSb1BqQW1KaWhsUFhSb2FYTXVkRzlUZEhKcGJtY29YQ0pvWlhoY0lpd3dMSFFwTG0xaGRHTm9LQzh1ZXpKOUwyY3BMbXB2YVc0b1hDSWdYQ0lwTEhSb2FYTXViR1Z1WjNSb1BuUW1KaWhsS3oxY0lpQXVMaTRnWENJcEtTeGNJanhDZFdabVpYSWdYQ0lyWlN0Y0lqNWNJbjBzY3k1d2NtOTBiM1I1Y0dVdVkyOXRjR0Z5WlQxbWRXNWpkR2x2YmlobExIUXNiaXh5TEdrcGUybG1LQ0Z6TG1selFuVm1abVZ5S0dVcEtYUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pCY21kMWJXVnVkQ0J0ZFhOMElHSmxJR0VnUW5WbVptVnlYQ0lwTzJsbUtIWnZhV1FnTUQwOVBYUW1KaWgwUFRBcExIWnZhV1FnTUQwOVBXNG1KaWh1UFdVL1pTNXNaVzVuZEdnNk1Da3NkbTlwWkNBd1BUMDljaVltS0hJOU1Da3NkbTlwWkNBd1BUMDlhU1ltS0drOWRHaHBjeTVzWlc1bmRHZ3BMSFE4TUh4OGJqNWxMbXhsYm1kMGFIeDhjand3Zkh4cFBuUm9hWE11YkdWdVozUm9LWFJvY205M0lHNWxkeUJTWVc1blpVVnljbTl5S0Z3aWIzVjBJRzltSUhKaGJtZGxJR2x1WkdWNFhDSXBPMmxtS0hJK1BXa21KblErUFc0cGNtVjBkWEp1SURBN2FXWW9jajQ5YVNseVpYUjFjbTR0TVR0cFppaDBQajF1S1hKbGRIVnliaUF4TzJsbUtIUStQajQ5TUN4dVBqNCtQVEFzY2o0K1BqMHdMR2srUGo0OU1DeDBhR2x6UFQwOVpTbHlaWFIxY200Z01EdG1iM0lvZG1GeUlHODlhUzF5TEdFOWJpMTBMSFU5VFdGMGFDNXRhVzRvYnl4aEtTeG1QWFJvYVhNdWMyeHBZMlVvY2l4cEtTeGpQV1V1YzJ4cFkyVW9kQ3h1S1N4c1BUQTdiRHgxT3lzcmJDbHBaaWhtVzJ4ZElUMDlZMXRzWFNsN2J6MW1XMnhkTEdFOVkxdHNYVHRpY21WaGEzMXlaWFIxY200Z2J6eGhQeTB4T21FOGJ6OHhPakI5TEhNdWNISnZkRzkwZVhCbExtbHVaR1Y0VDJZOVpuVnVZM1JwYjI0b1pTeDBMRzRwZTJsbUtGd2ljM1J5YVc1blhDSTlQWFI1Y0dWdlppQjBQeWh1UFhRc2REMHdLVHAwUGpJeE5EYzBPRE0yTkRjL2REMHlNVFEzTkRnek5qUTNPblE4TFRJeE5EYzBPRE0yTkRnbUppaDBQUzB5TVRRM05EZ3pOalE0S1N4MFBqNDlNQ3d3UFQwOWRHaHBjeTVzWlc1bmRHZ3BjbVYwZFhKdUxURTdhV1lvZEQ0OWRHaHBjeTVzWlc1bmRHZ3BjbVYwZFhKdUxURTdhV1lvZER3d0ppWW9kRDFOWVhSb0xtMWhlQ2gwYUdsekxteGxibWQwYUN0MExEQXBLU3hjSW5OMGNtbHVaMXdpUFQxMGVYQmxiMllnWlNZbUtHVTljeTVtY205dEtHVXNiaWtwTEhNdWFYTkNkV1ptWlhJb1pTa3BjbVYwZFhKdUlEQTlQVDFsTG14bGJtZDBhRDh0TVRwRktIUm9hWE1zWlN4MExHNHBPMmxtS0Z3aWJuVnRZbVZ5WENJOVBYUjVjR1Z2WmlCbEtYSmxkSFZ5YmlCekxsUlpVRVZFWDBGU1VrRlpYMU5WVUZCUFVsUW1KbHdpWm5WdVkzUnBiMjVjSWowOVBWVnBiblE0UVhKeVlYa3VjSEp2ZEc5MGVYQmxMbWx1WkdWNFQyWS9WV2x1ZERoQmNuSmhlUzV3Y205MGIzUjVjR1V1YVc1a1pYaFBaaTVqWVd4c0tIUm9hWE1zWlN4MEtUcEZLSFJvYVhNc1cyVmRMSFFzYmlrN2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGNJblpoYkNCdGRYTjBJR0psSUhOMGNtbHVaeXdnYm5WdFltVnlJRzl5SUVKMVptWmxjbHdpS1gwc2N5NXdjbTkwYjNSNWNHVXVhVzVqYkhWa1pYTTlablZ1WTNScGIyNG9aU3gwTEc0cGUzSmxkSFZ5YmlCMGFHbHpMbWx1WkdWNFQyWW9aU3gwTEc0cElUMDlMVEY5TEhNdWNISnZkRzkwZVhCbExuZHlhWFJsUFdaMWJtTjBhVzl1S0dVc2RDeHVMSElwZTJsbUtIWnZhV1FnTUQwOVBYUXBjajFjSW5WMFpqaGNJaXh1UFhSb2FYTXViR1Z1WjNSb0xIUTlNRHRsYkhObElHbG1LSFp2YVdRZ01EMDlQVzRtSmx3aWMzUnlhVzVuWENJOVBYUjVjR1Z2WmlCMEtYSTlkQ3h1UFhSb2FYTXViR1Z1WjNSb0xIUTlNRHRsYkhObGUybG1LQ0ZwYzBacGJtbDBaU2gwS1NsMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKQ2RXWm1aWEl1ZDNKcGRHVW9jM1J5YVc1bkxDQmxibU52WkdsdVp5d2diMlptYzJWMFd5d2diR1Z1WjNSb1hTa2dhWE1nYm04Z2JHOXVaMlZ5SUhOMWNIQnZjblJsWkZ3aUtUdDBQVEI4ZEN4cGMwWnBibWwwWlNodUtUOG9iajB3Zkc0c2RtOXBaQ0F3UFQwOWNpWW1LSEk5WENKMWRHWTRYQ0lwS1Rvb2NqMXVMRzQ5ZG05cFpDQXdLWDEyWVhJZ2FUMTBhR2x6TG14bGJtZDBhQzEwTzJsbUtDaDJiMmxrSURBOVBUMXVmSHh1UG1rcEppWW9iajFwS1N4bExteGxibWQwYUQ0d0ppWW9iand3Zkh4MFBEQXBmSHgwUG5Sb2FYTXViR1Z1WjNSb0tYUm9jbTkzSUc1bGR5QlNZVzVuWlVWeWNtOXlLRndpUVhSMFpXMXdkQ0IwYnlCM2NtbDBaU0J2ZFhSemFXUmxJR0oxWm1abGNpQmliM1Z1WkhOY0lpazdjbng4S0hJOVhDSjFkR1k0WENJcE8yWnZjaWgyWVhJZ2J6MGhNVHM3S1hOM2FYUmphQ2h5S1h0allYTmxYQ0pvWlhoY0lqcHlaWFIxY200Z2R5aDBhR2x6TEdVc2RDeHVLVHRqWVhObFhDSjFkR1k0WENJNlkyRnpaVndpZFhSbUxUaGNJanB5WlhSMWNtNGdZaWgwYUdsekxHVXNkQ3h1S1R0allYTmxYQ0poYzJOcGFWd2lPbkpsZEhWeWJpQlRLSFJvYVhNc1pTeDBMRzRwTzJOaGMyVmNJbUpwYm1GeWVWd2lPbkpsZEhWeWJpQlBLSFJvYVhNc1pTeDBMRzRwTzJOaGMyVmNJbUpoYzJVMk5Gd2lPbkpsZEhWeWJpQlNLSFJvYVhNc1pTeDBMRzRwTzJOaGMyVmNJblZqY3pKY0lqcGpZWE5sWENKMVkzTXRNbHdpT21OaGMyVmNJblYwWmpFMmJHVmNJanBqWVhObFhDSjFkR1l0TVRac1pWd2lPbkpsZEhWeWJpQkJLSFJvYVhNc1pTeDBMRzRwTzJSbFptRjFiSFE2YVdZb2J5bDBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLRndpVlc1cmJtOTNiaUJsYm1OdlpHbHVaem9nWENJcmNpazdjajBvWENKY0lpdHlLUzUwYjB4dmQyVnlRMkZ6WlNncExHODlJVEI5ZlN4ekxuQnliM1J2ZEhsd1pTNTBiMHBUVDA0OVpuVnVZM1JwYjI0b0tYdHlaWFIxY201N2RIbHdaVHBjSWtKMVptWmxjbHdpTEdSaGRHRTZRWEp5WVhrdWNISnZkRzkwZVhCbExuTnNhV05sTG1OaGJHd29kR2hwY3k1ZllYSnlmSHgwYUdsekxEQXBmWDA3ZG1GeUlGbzlOREE1Tmp0ekxuQnliM1J2ZEhsd1pTNXpiR2xqWlQxbWRXNWpkR2x2YmlobExIUXBlM1poY2lCdVBYUm9hWE11YkdWdVozUm9PMlU5Zm41bExIUTlkbTlwWkNBd1BUMDlkRDl1T241K2RDeGxQREEvS0dVclBXNHNaVHd3SmlZb1pUMHdLU2s2WlQ1dUppWW9aVDF1S1N4MFBEQS9LSFFyUFc0c2REd3dKaVlvZEQwd0tTazZkRDV1SmlZb2REMXVLU3gwUEdVbUppaDBQV1VwTzNaaGNpQnlPMmxtS0hNdVZGbFFSVVJmUVZKU1FWbGZVMVZRVUU5U1ZDbHlQWFJvYVhNdWMzVmlZWEp5WVhrb1pTeDBLU3h5TGw5ZmNISnZkRzlmWHoxekxuQnliM1J2ZEhsd1pUdGxiSE5sZTNaaGNpQnBQWFF0WlR0eVBXNWxkeUJ6S0drc0tIWnZhV1FnTUNrcE8yWnZjaWgyWVhJZ2J6MHdPMjg4YVRzcksyOHBjbHR2WFQxMGFHbHpXMjhyWlYxOWNtVjBkWEp1SUhKOUxITXVjSEp2ZEc5MGVYQmxMbkpsWVdSVlNXNTBURVU5Wm5WdVkzUnBiMjRvWlN4MExHNHBlMlU5TUh4bExIUTlNSHgwTEc1OGZIZ29aU3gwTEhSb2FYTXViR1Z1WjNSb0tUdG1iM0lvZG1GeUlISTlkR2hwYzF0bFhTeHBQVEVzYnowd095c3JiengwSmlZb2FTbzlNalUyS1RzcGNpczlkR2hwYzF0bEsyOWRLbWs3Y21WMGRYSnVJSEo5TEhNdWNISnZkRzkwZVhCbExuSmxZV1JWU1c1MFFrVTlablZ1WTNScGIyNG9aU3gwTEc0cGUyVTlNSHhsTEhROU1IeDBMRzU4Zkhnb1pTeDBMSFJvYVhNdWJHVnVaM1JvS1R0bWIzSW9kbUZ5SUhJOWRHaHBjMXRsS3kwdGRGMHNhVDB4TzNRK01DWW1LR2txUFRJMU5pazdLWElyUFhSb2FYTmJaU3N0TFhSZEttazdjbVYwZFhKdUlISjlMSE11Y0hKdmRHOTBlWEJsTG5KbFlXUlZTVzUwT0QxbWRXNWpkR2x2YmlobExIUXBlM0psZEhWeWJpQjBmSHg0S0dVc01TeDBhR2x6TG14bGJtZDBhQ2tzZEdocGMxdGxYWDBzY3k1d2NtOTBiM1I1Y0dVdWNtVmhaRlZKYm5ReE5reEZQV1oxYm1OMGFXOXVLR1VzZENsN2NtVjBkWEp1SUhSOGZIZ29aU3d5TEhSb2FYTXViR1Z1WjNSb0tTeDBhR2x6VzJWZGZIUm9hWE5iWlNzeFhUdzhPSDBzY3k1d2NtOTBiM1I1Y0dVdWNtVmhaRlZKYm5ReE5rSkZQV1oxYm1OMGFXOXVLR1VzZENsN2NtVjBkWEp1SUhSOGZIZ29aU3d5TEhSb2FYTXViR1Z1WjNSb0tTeDBhR2x6VzJWZFBEdzRmSFJvYVhOYlpTc3hYWDBzY3k1d2NtOTBiM1I1Y0dVdWNtVmhaRlZKYm5Rek1reEZQV1oxYm1OMGFXOXVLR1VzZENsN2NtVjBkWEp1SUhSOGZIZ29aU3cwTEhSb2FYTXViR1Z1WjNSb0tTd29kR2hwYzF0bFhYeDBhR2x6VzJVck1WMDhQRGg4ZEdocGMxdGxLekpkUER3eE5pa3JNVFkzTnpjeU1UWXFkR2hwYzF0bEt6TmRmU3h6TG5CeWIzUnZkSGx3WlM1eVpXRmtWVWx1ZERNeVFrVTlablZ1WTNScGIyNG9aU3gwS1h0eVpYUjFjbTRnZEh4OGVDaGxMRFFzZEdocGN5NXNaVzVuZEdncExERTJOemMzTWpFMktuUm9hWE5iWlYwcktIUm9hWE5iWlNzeFhUdzhNVFo4ZEdocGMxdGxLekpkUER3NGZIUm9hWE5iWlNzelhTbDlMSE11Y0hKdmRHOTBlWEJsTG5KbFlXUkpiblJNUlQxbWRXNWpkR2x2YmlobExIUXNiaWw3WlQwd2ZHVXNkRDB3ZkhRc2JueDhlQ2hsTEhRc2RHaHBjeTVzWlc1bmRHZ3BPMlp2Y2loMllYSWdjajEwYUdselcyVmRMR2s5TVN4dlBUQTdLeXR2UEhRbUppaHBLajB5TlRZcE95bHlLejEwYUdselcyVXJiMTBxYVR0eVpYUjFjbTRnYVNvOU1USTRMSEkrUFdrbUppaHlMVDFOWVhSb0xuQnZkeWd5TERncWRDa3BMSEo5TEhNdWNISnZkRzkwZVhCbExuSmxZV1JKYm5SQ1JUMW1kVzVqZEdsdmJpaGxMSFFzYmlsN1pUMHdmR1VzZEQwd2ZIUXNibng4ZUNobExIUXNkR2hwY3k1c1pXNW5kR2dwTzJadmNpaDJZWElnY2oxMExHazlNU3h2UFhSb2FYTmJaU3N0TFhKZE8zSStNQ1ltS0drcVBUSTFOaWs3S1c4clBYUm9hWE5iWlNzdExYSmRLbWs3Y21WMGRYSnVJR2txUFRFeU9DeHZQajFwSmlZb2J5MDlUV0YwYUM1d2IzY29NaXc0S25RcEtTeHZmU3h6TG5CeWIzUnZkSGx3WlM1eVpXRmtTVzUwT0QxbWRXNWpkR2x2YmlobExIUXBlM0psZEhWeWJpQjBmSHg0S0dVc01TeDBhR2x6TG14bGJtZDBhQ2tzTVRJNEpuUm9hWE5iWlYwL0tESTFOUzEwYUdselcyVmRLekVwS2kweE9uUm9hWE5iWlYxOUxITXVjSEp2ZEc5MGVYQmxMbkpsWVdSSmJuUXhOa3hGUFdaMWJtTjBhVzl1S0dVc2RDbDdkSHg4ZUNobExESXNkR2hwY3k1c1pXNW5kR2dwTzNaaGNpQnVQWFJvYVhOYlpWMThkR2hwYzF0bEt6RmRQRHc0TzNKbGRIVnliaUF6TWpjMk9DWnVQelF5T1RRNU1ERTNOakI4YmpwdWZTeHpMbkJ5YjNSdmRIbHdaUzV5WldGa1NXNTBNVFpDUlQxbWRXNWpkR2x2YmlobExIUXBlM1I4Zkhnb1pTd3lMSFJvYVhNdWJHVnVaM1JvS1R0MllYSWdiajEwYUdselcyVXJNVjE4ZEdocGMxdGxYVHc4T0R0eVpYUjFjbTRnTXpJM05qZ21iajgwTWprME9UQXhOell3Zkc0NmJuMHNjeTV3Y205MGIzUjVjR1V1Y21WaFpFbHVkRE15VEVVOVpuVnVZM1JwYjI0b1pTeDBLWHR5WlhSMWNtNGdkSHg4ZUNobExEUXNkR2hwY3k1c1pXNW5kR2dwTEhSb2FYTmJaVjE4ZEdocGMxdGxLekZkUER3NGZIUm9hWE5iWlNzeVhUdzhNVFo4ZEdocGMxdGxLek5kUER3eU5IMHNjeTV3Y205MGIzUjVjR1V1Y21WaFpFbHVkRE15UWtVOVpuVnVZM1JwYjI0b1pTeDBLWHR5WlhSMWNtNGdkSHg4ZUNobExEUXNkR2hwY3k1c1pXNW5kR2dwTEhSb2FYTmJaVjA4UERJMGZIUm9hWE5iWlNzeFhUdzhNVFo4ZEdocGMxdGxLekpkUER3NGZIUm9hWE5iWlNzelhYMHNjeTV3Y205MGIzUjVjR1V1Y21WaFpFWnNiMkYwVEVVOVpuVnVZM1JwYjI0b1pTeDBLWHR5WlhSMWNtNGdkSHg4ZUNobExEUXNkR2hwY3k1c1pXNW5kR2dwTEZFdWNtVmhaQ2gwYUdsekxHVXNJVEFzTWpNc05DbDlMSE11Y0hKdmRHOTBlWEJsTG5KbFlXUkdiRzloZEVKRlBXWjFibU4wYVc5dUtHVXNkQ2w3Y21WMGRYSnVJSFI4Zkhnb1pTdzBMSFJvYVhNdWJHVnVaM1JvS1N4UkxuSmxZV1FvZEdocGN5eGxMQ0V4TERJekxEUXBmU3h6TG5CeWIzUnZkSGx3WlM1eVpXRmtSRzkxWW14bFRFVTlablZ1WTNScGIyNG9aU3gwS1h0eVpYUjFjbTRnZEh4OGVDaGxMRGdzZEdocGN5NXNaVzVuZEdncExGRXVjbVZoWkNoMGFHbHpMR1VzSVRBc05USXNPQ2w5TEhNdWNISnZkRzkwZVhCbExuSmxZV1JFYjNWaWJHVkNSVDFtZFc1amRHbHZiaWhsTEhRcGUzSmxkSFZ5YmlCMGZIeDRLR1VzT0N4MGFHbHpMbXhsYm1kMGFDa3NVUzV5WldGa0tIUm9hWE1zWlN3aE1TdzFNaXc0S1gwc2N5NXdjbTkwYjNSNWNHVXVkM0pwZEdWVlNXNTBURVU5Wm5WdVkzUnBiMjRvWlN4MExHNHNjaWw3YVdZb1pUMHJaU3gwUFRCOGRDeHVQVEI4Yml3aGNpbDdkbUZ5SUdrOVRXRjBhQzV3YjNjb01pdzRLbTRwTFRFN1JDaDBhR2x6TEdVc2RDeHVMR2tzTUNsOWRtRnlJRzg5TVN4elBUQTdabTl5S0hSb2FYTmJkRjA5TWpVMUptVTdLeXR6UEc0bUppaHZLajB5TlRZcE95bDBhR2x6VzNRcmMxMDlaUzl2SmpJMU5UdHlaWFIxY200Z2RDdHVmU3h6TG5CeWIzUnZkSGx3WlM1M2NtbDBaVlZKYm5SQ1JUMW1kVzVqZEdsdmJpaGxMSFFzYml4eUtYdHBaaWhsUFN0bExIUTlNSHgwTEc0OU1IeHVMQ0Z5S1h0MllYSWdhVDFOWVhSb0xuQnZkeWd5TERncWJpa3RNVHRFS0hSb2FYTXNaU3gwTEc0c2FTd3dLWDEyWVhJZ2J6MXVMVEVzY3oweE8yWnZjaWgwYUdselczUXJiMTA5TWpVMUptVTdMUzF2UGowd0ppWW9jeW85TWpVMktUc3BkR2hwYzF0MEsyOWRQV1V2Y3lZeU5UVTdjbVYwZFhKdUlIUXJibjBzY3k1d2NtOTBiM1I1Y0dVdWQzSnBkR1ZWU1c1ME9EMW1kVzVqZEdsdmJpaGxMSFFzYmlsN2NtVjBkWEp1SUdVOUsyVXNkRDB3ZkhRc2JueDhSQ2gwYUdsekxHVXNkQ3d4TERJMU5Td3dLU3h6TGxSWlVFVkVYMEZTVWtGWlgxTlZVRkJQVWxSOGZDaGxQVTFoZEdndVpteHZiM0lvWlNrcExIUm9hWE5iZEYwOU1qVTFKbVVzZENzeGZTeHpMbkJ5YjNSdmRIbHdaUzUzY21sMFpWVkpiblF4Tmt4RlBXWjFibU4wYVc5dUtHVXNkQ3h1S1h0eVpYUjFjbTRnWlQwclpTeDBQVEI4ZEN4dWZIeEVLSFJvYVhNc1pTeDBMRElzTmpVMU16VXNNQ2tzY3k1VVdWQkZSRjlCVWxKQldWOVRWVkJRVDFKVVB5aDBhR2x6VzNSZFBUSTFOU1psTEhSb2FYTmJkQ3N4WFQxbFBqNCtPQ2s2YWloMGFHbHpMR1VzZEN3aE1Da3NkQ3N5ZlN4ekxuQnliM1J2ZEhsd1pTNTNjbWwwWlZWSmJuUXhOa0pGUFdaMWJtTjBhVzl1S0dVc2RDeHVLWHR5WlhSMWNtNGdaVDByWlN4MFBUQjhkQ3h1Zkh4RUtIUm9hWE1zWlN4MExESXNOalUxTXpVc01Da3NjeTVVV1ZCRlJGOUJVbEpCV1Y5VFZWQlFUMUpVUHloMGFHbHpXM1JkUFdVK1BqNDRMSFJvYVhOYmRDc3hYVDB5TlRVbVpTazZhaWgwYUdsekxHVXNkQ3doTVNrc2RDc3lmU3h6TG5CeWIzUnZkSGx3WlM1M2NtbDBaVlZKYm5Rek1reEZQV1oxYm1OMGFXOXVLR1VzZEN4dUtYdHlaWFIxY200Z1pUMHJaU3gwUFRCOGRDeHVmSHhFS0hSb2FYTXNaU3gwTERRc05ESTVORGsyTnpJNU5Td3dLU3h6TGxSWlVFVkVYMEZTVWtGWlgxTlZVRkJQVWxRL0tIUm9hWE5iZENzelhUMWxQajQrTWpRc2RHaHBjMXQwS3pKZFBXVStQajR4Tml4MGFHbHpXM1FyTVYwOVpUNCtQamdzZEdocGMxdDBYVDB5TlRVbVpTazZWU2gwYUdsekxHVXNkQ3doTUNrc2RDczBmU3h6TG5CeWIzUnZkSGx3WlM1M2NtbDBaVlZKYm5Rek1rSkZQV1oxYm1OMGFXOXVLR1VzZEN4dUtYdHlaWFIxY200Z1pUMHJaU3gwUFRCOGRDeHVmSHhFS0hSb2FYTXNaU3gwTERRc05ESTVORGsyTnpJNU5Td3dLU3h6TGxSWlVFVkVYMEZTVWtGWlgxTlZVRkJQVWxRL0tIUm9hWE5iZEYwOVpUNCtQakkwTEhSb2FYTmJkQ3N4WFQxbFBqNCtNVFlzZEdocGMxdDBLekpkUFdVK1BqNDRMSFJvYVhOYmRDc3pYVDB5TlRVbVpTazZWU2gwYUdsekxHVXNkQ3doTVNrc2RDczBmU3h6TG5CeWIzUnZkSGx3WlM1M2NtbDBaVWx1ZEV4RlBXWjFibU4wYVc5dUtHVXNkQ3h1TEhJcGUybG1LR1U5SzJVc2REMHdmSFFzSVhJcGUzWmhjaUJwUFUxaGRHZ3VjRzkzS0RJc09DcHVMVEVwTzBRb2RHaHBjeXhsTEhRc2JpeHBMVEVzTFdrcGZYWmhjaUJ2UFRBc2N6MHhMR0U5TUR0bWIzSW9kR2hwYzF0MFhUMHlOVFVtWlRzcksyODhiaVltS0hNcVBUSTFOaWs3S1dVOE1DWW1NRDA5UFdFbUpqQWhQVDEwYUdselczUXJieTB4WFNZbUtHRTlNU2tzZEdocGMxdDBLMjlkUFNobEwzTStQakFwTFdFbU1qVTFPM0psZEhWeWJpQjBLMjU5TEhNdWNISnZkRzkwZVhCbExuZHlhWFJsU1c1MFFrVTlablZ1WTNScGIyNG9aU3gwTEc0c2NpbDdhV1lvWlQwclpTeDBQVEI4ZEN3aGNpbDdkbUZ5SUdrOVRXRjBhQzV3YjNjb01pdzRLbTR0TVNrN1JDaDBhR2x6TEdVc2RDeHVMR2t0TVN3dGFTbDlkbUZ5SUc4OWJpMHhMSE05TVN4aFBUQTdabTl5S0hSb2FYTmJkQ3R2WFQweU5UVW1aVHN0TFc4K1BUQW1KaWh6S2oweU5UWXBPeWxsUERBbUpqQTlQVDFoSmlZd0lUMDlkR2hwYzF0MEsyOHJNVjBtSmloaFBURXBMSFJvYVhOYmRDdHZYVDBvWlM5elBqNHdLUzFoSmpJMU5UdHlaWFIxY200Z2RDdHVmU3h6TG5CeWIzUnZkSGx3WlM1M2NtbDBaVWx1ZERnOVpuVnVZM1JwYjI0b1pTeDBMRzRwZTNKbGRIVnliaUJsUFN0bExIUTlNSHgwTEc1OGZFUW9kR2hwY3l4bExIUXNNU3d4TWpjc0xURXlPQ2tzY3k1VVdWQkZSRjlCVWxKQldWOVRWVkJRVDFKVWZId29aVDFOWVhSb0xtWnNiMjl5S0dVcEtTeGxQREFtSmlobFBUSTFOU3RsS3pFcExIUm9hWE5iZEYwOU1qVTFKbVVzZENzeGZTeHpMbkJ5YjNSdmRIbHdaUzUzY21sMFpVbHVkREUyVEVVOVpuVnVZM1JwYjI0b1pTeDBMRzRwZTNKbGRIVnliaUJsUFN0bExIUTlNSHgwTEc1OGZFUW9kR2hwY3l4bExIUXNNaXd6TWpjMk55d3RNekkzTmpncExITXVWRmxRUlVSZlFWSlNRVmxmVTFWUVVFOVNWRDhvZEdocGMxdDBYVDB5TlRVbVpTeDBhR2x6VzNRck1WMDlaVDQrUGpncE9tb29kR2hwY3l4bExIUXNJVEFwTEhRck1uMHNjeTV3Y205MGIzUjVjR1V1ZDNKcGRHVkpiblF4TmtKRlBXWjFibU4wYVc5dUtHVXNkQ3h1S1h0eVpYUjFjbTRnWlQwclpTeDBQVEI4ZEN4dWZIeEVLSFJvYVhNc1pTeDBMRElzTXpJM05qY3NMVE15TnpZNEtTeHpMbFJaVUVWRVgwRlNVa0ZaWDFOVlVGQlBVbFEvS0hSb2FYTmJkRjA5WlQ0K1BqZ3NkR2hwYzF0MEt6RmRQVEkxTlNabEtUcHFLSFJvYVhNc1pTeDBMQ0V4S1N4MEt6SjlMSE11Y0hKdmRHOTBlWEJsTG5keWFYUmxTVzUwTXpKTVJUMW1kVzVqZEdsdmJpaGxMSFFzYmlsN2NtVjBkWEp1SUdVOUsyVXNkRDB3ZkhRc2JueDhSQ2gwYUdsekxHVXNkQ3cwTERJeE5EYzBPRE0yTkRjc0xUSXhORGMwT0RNMk5EZ3BMSE11VkZsUVJVUmZRVkpTUVZsZlUxVlFVRTlTVkQ4b2RHaHBjMXQwWFQweU5UVW1aU3gwYUdselczUXJNVjA5WlQ0K1BqZ3NkR2hwYzF0MEt6SmRQV1UrUGo0eE5peDBhR2x6VzNRck0xMDlaVDQrUGpJMEtUcFZLSFJvYVhNc1pTeDBMQ0V3S1N4MEt6UjlMSE11Y0hKdmRHOTBlWEJsTG5keWFYUmxTVzUwTXpKQ1JUMW1kVzVqZEdsdmJpaGxMSFFzYmlsN2NtVjBkWEp1SUdVOUsyVXNkRDB3ZkhRc2JueDhSQ2gwYUdsekxHVXNkQ3cwTERJeE5EYzBPRE0yTkRjc0xUSXhORGMwT0RNMk5EZ3BMR1U4TUNZbUtHVTlOREk1TkRrMk56STVOU3RsS3pFcExITXVWRmxRUlVSZlFWSlNRVmxmVTFWUVVFOVNWRDhvZEdocGMxdDBYVDFsUGo0K01qUXNkR2hwYzF0MEt6RmRQV1UrUGo0eE5peDBhR2x6VzNRck1sMDlaVDQrUGpnc2RHaHBjMXQwS3pOZFBUSTFOU1psS1RwVktIUm9hWE1zWlN4MExDRXhLU3gwS3pSOUxITXVjSEp2ZEc5MGVYQmxMbmR5YVhSbFJteHZZWFJNUlQxbWRXNWpkR2x2YmlobExIUXNiaWw3Y21WMGRYSnVJRUlvZEdocGN5eGxMSFFzSVRBc2JpbDlMSE11Y0hKdmRHOTBlWEJsTG5keWFYUmxSbXh2WVhSQ1JUMW1kVzVqZEdsdmJpaGxMSFFzYmlsN2NtVjBkWEp1SUVJb2RHaHBjeXhsTEhRc0lURXNiaWw5TEhNdWNISnZkRzkwZVhCbExuZHlhWFJsUkc5MVlteGxURVU5Wm5WdVkzUnBiMjRvWlN4MExHNHBlM0psZEhWeWJpQkhLSFJvYVhNc1pTeDBMQ0V3TEc0cGZTeHpMbkJ5YjNSdmRIbHdaUzUzY21sMFpVUnZkV0pzWlVKRlBXWjFibU4wYVc5dUtHVXNkQ3h1S1h0eVpYUjFjbTRnUnloMGFHbHpMR1VzZEN3aE1TeHVLWDBzY3k1d2NtOTBiM1I1Y0dVdVkyOXdlVDFtZFc1amRHbHZiaWhsTEhRc2JpeHlLWHRwWmlodWZId29iajB3S1N4eWZId3dQVDA5Y254OEtISTlkR2hwY3k1c1pXNW5kR2dwTEhRK1BXVXViR1Z1WjNSb0ppWW9kRDFsTG14bGJtZDBhQ2tzZEh4OEtIUTlNQ2tzY2o0d0ppWnlQRzRtSmloeVBXNHBMSEk5UFQxdUtYSmxkSFZ5YmlBd08ybG1LREE5UFQxbExteGxibWQwYUh4OE1EMDlQWFJvYVhNdWJHVnVaM1JvS1hKbGRIVnliaUF3TzJsbUtIUThNQ2wwYUhKdmR5QnVaWGNnVW1GdVoyVkZjbkp2Y2loY0luUmhjbWRsZEZOMFlYSjBJRzkxZENCdlppQmliM1Z1WkhOY0lpazdhV1lvYmp3d2ZIeHVQajEwYUdsekxteGxibWQwYUNsMGFISnZkeUJ1WlhjZ1VtRnVaMlZGY25KdmNpaGNJbk52ZFhKalpWTjBZWEowSUc5MWRDQnZaaUJpYjNWdVpITmNJaWs3YVdZb2Nqd3dLWFJvY205M0lHNWxkeUJTWVc1blpVVnljbTl5S0Z3aWMyOTFjbU5sUlc1a0lHOTFkQ0J2WmlCaWIzVnVaSE5jSWlrN2NqNTBhR2x6TG14bGJtZDBhQ1ltS0hJOWRHaHBjeTVzWlc1bmRHZ3BMR1V1YkdWdVozUm9MWFE4Y2kxdUppWW9jajFsTG14bGJtZDBhQzEwSzI0cE8zWmhjaUJwTEc4OWNpMXVPMmxtS0hSb2FYTTlQVDFsSmladVBIUW1KblE4Y2lsbWIzSW9hVDF2TFRFN2FUNDlNRHN0TFdrcFpWdHBLM1JkUFhSb2FYTmJhU3R1WFR0bGJITmxJR2xtS0c4OE1XVXpmSHdoY3k1VVdWQkZSRjlCVWxKQldWOVRWVkJRVDFKVUtXWnZjaWhwUFRBN2FUeHZPeXNyYVNsbFcya3JkRjA5ZEdocGMxdHBLMjVkTzJWc2MyVWdWV2x1ZERoQmNuSmhlUzV3Y205MGIzUjVjR1V1YzJWMExtTmhiR3dvWlN4MGFHbHpMbk4xWW1GeWNtRjVLRzRzYml0dktTeDBLVHR5WlhSMWNtNGdiMzBzY3k1d2NtOTBiM1I1Y0dVdVptbHNiRDFtZFc1amRHbHZiaWhsTEhRc2JpeHlLWHRwWmloY0luTjBjbWx1WjF3aVBUMTBlWEJsYjJZZ1pTbDdhV1lvWENKemRISnBibWRjSWowOWRIbHdaVzltSUhRL0tISTlkQ3gwUFRBc2JqMTBhR2x6TG14bGJtZDBhQ2s2WENKemRISnBibWRjSWowOWRIbHdaVzltSUc0bUppaHlQVzRzYmoxMGFHbHpMbXhsYm1kMGFDa3NNVDA5UFdVdWJHVnVaM1JvS1h0MllYSWdhVDFsTG1Ob1lYSkRiMlJsUVhRb01DazdhVHd5TlRZbUppaGxQV2twZldsbUtIWnZhV1FnTUNFOVBYSW1KbHdpYzNSeWFXNW5YQ0loUFhSNWNHVnZaaUJ5S1hSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSmxibU52WkdsdVp5QnRkWE4wSUdKbElHRWdjM1J5YVc1blhDSXBPMmxtS0Z3aWMzUnlhVzVuWENJOVBYUjVjR1Z2WmlCeUppWWhjeTVwYzBWdVkyOWthVzVuS0hJcEtYUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pWYm10dWIzZHVJR1Z1WTI5a2FXNW5PaUJjSWl0eUtYMWxiSE5sWENKdWRXMWlaWEpjSWowOWRIbHdaVzltSUdVbUppaGxQVEkxTlNabEtUdHBaaWgwUERCOGZIUm9hWE11YkdWdVozUm9QSFI4ZkhSb2FYTXViR1Z1WjNSb1BHNHBkR2h5YjNjZ2JtVjNJRkpoYm1kbFJYSnliM0lvWENKUGRYUWdiMllnY21GdVoyVWdhVzVrWlhoY0lpazdhV1lvYmp3OWRDbHlaWFIxY200Z2RHaHBjenQwUGo0K1BUQXNiajEyYjJsa0lEQTlQVDF1UDNSb2FYTXViR1Z1WjNSb09tNCtQajR3TEdWOGZDaGxQVEFwTzNaaGNpQnZPMmxtS0Z3aWJuVnRZbVZ5WENJOVBYUjVjR1Z2WmlCbEtXWnZjaWh2UFhRN2J6eHVPeXNyYnlsMGFHbHpXMjlkUFdVN1pXeHpaWHQyWVhJZ1lUMXpMbWx6UW5WbVptVnlLR1VwUDJVNmNTaHVaWGNnY3lobExISXBMblJ2VTNSeWFXNW5LQ2twTEhVOVlTNXNaVzVuZEdnN1ptOXlLRzg5TUR0dlBHNHRkRHNySzI4cGRHaHBjMXR2SzNSZFBXRmJieVYxWFgxeVpYUjFjbTRnZEdocGMzMDdkbUZ5SUdWbFBTOWJYaXRjWEM4d0xUbEJMVnBoTFhvdFgxMHZaMzBwTG1OaGJHd29kR2hwY3l4Y0luVnVaR1ZtYVc1bFpGd2lJVDEwZVhCbGIyWWdaMnh2WW1Gc1AyZHNiMkpoYkRwY0luVnVaR1ZtYVc1bFpGd2lJVDEwZVhCbGIyWWdjMlZzWmo5elpXeG1PbHdpZFc1a1pXWnBibVZrWENJaFBYUjVjR1Z2WmlCM2FXNWtiM2MvZDJsdVpHOTNPbnQ5S1gwc2Uxd2lZbUZ6WlRZMExXcHpYQ0k2TWl4cFpXVmxOelUwT2pFM0xHbHpZWEp5WVhrNk1qRjlYU3c0T2x0bWRXNWpkR2x2YmlobExIUXNiaWw3ZEM1bGVIQnZjblJ6UFh0UFgxSkVUMDVNV1Rvd0xFOWZWMUpQVGt4Wk9qRXNUMTlTUkZkU09qSXNVMTlKUmsxVU9qWXhORFF3TEZOZlNVWlNSVWM2TXpJM05qZ3NVMTlKUmtSSlVqb3hOak00TkN4VFgwbEdRMGhTT2pneE9USXNVMTlKUmtKTVN6b3lORFUzTml4VFgwbEdTVVpQT2pRd09UWXNVMTlKUmt4T1N6bzBNRGsyTUN4VFgwbEdVMDlEU3pvME9URTFNaXhQWDBOU1JVRlVPalV4TWl4UFgwVllRMHc2TWpBME9DeFBYMDVQUTFSVVdUb3hNekV3TnpJc1QxOVVVbFZPUXpveE1ESTBMRTlmUVZCUVJVNUVPamdzVDE5RVNWSkZRMVJQVWxrNk1UQTBPRFUzTml4UFgwNVBSazlNVEU5WE9qSTFOaXhQWDFOWlRrTTZNVEk0TEU5ZlUxbE5URWxPU3pveU1EazNNVFV5TEU5ZlRrOU9Ra3hQUTBzNk5DeFRYMGxTVjFoVk9qUTBPQ3hUWDBsU1ZWTlNPakkxTml4VFgwbFhWVk5TT2pFeU9DeFRYMGxZVlZOU09qWTBMRk5mU1ZKWFdFYzZOVFlzVTE5SlVrZFNVRG96TWl4VFgwbFhSMUpRT2pFMkxGTmZTVmhIVWxBNk9DeFRYMGxTVjFoUE9qY3NVMTlKVWs5VVNEbzBMRk5mU1ZkUFZFZzZNaXhUWDBsWVQxUklPakVzUlRKQ1NVYzZOeXhGUVVORFJWTTZNVE1zUlVGRVJGSkpUbFZUUlRvME9DeEZRVVJFVWs1UFZFRldRVWxNT2pRNUxFVkJSazVQVTFWUVVFOVNWRG8wTnl4RlFVZEJTVTQ2TXpVc1JVRk1Va1ZCUkZrNk16Y3NSVUpCUkVZNk9TeEZRa0ZFVFZOSE9qazBMRVZDVlZOWk9qRTJMRVZEUVU1RFJVeEZSRG80T1N4RlEwaEpURVE2TVRBc1JVTlBUazVCUWs5U1ZFVkVPalV6TEVWRFQwNU9Va1ZHVlZORlJEbzJNU3hGUTA5T1RsSkZVMFZVT2pVMExFVkVSVUZFVEVzNk1URXNSVVJGVTFSQlJFUlNVa1ZST2pNNUxFVkVUMDA2TXpNc1JVUlJWVTlVT2pZNUxFVkZXRWxUVkRveE55eEZSa0ZWVEZRNk1UUXNSVVpDU1VjNk1qY3NSVWhQVTFSVlRsSkZRVU5JT2pZMUxFVkpSRkpOT2prd0xFVkpURk5GVVRvNU1peEZTVTVRVWs5SFVrVlRVem96Tml4RlNVNVVVam8wTEVWSlRsWkJURG95TWl4RlNVODZOU3hGU1ZORFQwNU9PalUyTEVWSlUwUkpVam95TVN4RlRFOVBVRG8yTWl4RlRVWkpURVU2TWpRc1JVMU1TVTVMT2pNeExFVk5VMGRUU1ZwRk9qUXdMRVZOVlV4VVNVaFBVRG81TlN4RlRrRk5SVlJQVDB4UFRrYzZOak1zUlU1RlZFUlBWMDQ2TlRBc1JVNUZWRkpGVTBWVU9qVXlMRVZPUlZSVlRsSkZRVU5JT2pVeExFVk9Sa2xNUlRveU15eEZUazlDVlVaVE9qVTFMRVZPVDBSQlZFRTZPVFlzUlU1UFJFVldPakU1TEVWT1QwVk9WRG95TEVWT1QwVllSVU02T0N4RlRrOU1RMHM2Tnpjc1JVNVBURWxPU3pvNU55eEZUazlOUlUwNk1USXNSVTVQVFZOSE9qa3hMRVZPVDFCU1QxUlBUMUJVT2pReUxFVk9UMU5RUXpveU9DeEZUazlUVWpvNU9DeEZUazlUVkZJNk9Ua3NSVTVQVTFsVE9qYzRMRVZPVDFSRFQwNU9PalUzTEVWT1QxUkVTVkk2TWpBc1JVNVBWRVZOVUZSWk9qWTJMRVZPVDFSVFQwTkxPak00TEVWT1QxUlRWVkE2TkRVc1JVNVBWRlJaT2pJMUxFVk9XRWxQT2pZc1JVOVFUazlVVTFWUVVEb3hNRElzUlU5V1JWSkdURTlYT2pnMExFVlFSVkpOT2pFc1JWQkpVRVU2TXpJc1JWQlNUMVJQT2pFd01DeEZVRkpQVkU5T1QxTlZVRkJQVWxRNk5ETXNSVkJTVDFSUFZGbFFSVG8wTVN4RlVrRk9SMFU2TXpRc1JWSlBSbE02TXpBc1JWTlFTVkJGT2pJNUxFVlRVa05JT2pNc1JWTlVRVXhGT2pjd0xFVlVTVTFGT2pFd01TeEZWRWxOUlVSUFZWUTZOakFzUlZSWVZFSlRXVG95Tml4RlYwOVZURVJDVEU5RFN6b3pOU3hGV0VSRlZqb3hPQ3hUU1VkSVZWQTZNU3hUU1VkSlRsUTZNaXhUU1VkUlZVbFVPak1zVTBsSFNVeE1PalFzVTBsSFZGSkJVRG8xTEZOSlIwRkNVbFE2Tml4VFNVZEpUMVE2Tml4VFNVZENWVk02TVRBc1UwbEhSbEJGT2pnc1UwbEhTMGxNVERvNUxGTkpSMVZUVWpFNk16QXNVMGxIVTBWSFZqb3hNU3hUU1VkVlUxSXlPak14TEZOSlIxQkpVRVU2TVRNc1UwbEhRVXhTVFRveE5DeFRTVWRVUlZKTk9qRTFMRk5KUjBOSVRFUTZNakFzVTBsSFEwOU9WRG94T1N4VFNVZFRWRTlRT2pFM0xGTkpSMVJUVkZBNk1UZ3NVMGxIVkZSSlRqb3lNU3hUU1VkVVZFOVZPakl5TEZOSlIxVlNSem94Tml4VFNVZFlRMUJWT2pJMExGTkpSMWhHVTFvNk1qVXNVMGxIVmxSQlRGSk5PakkyTEZOSlIxQlNUMFk2TWpjc1UwbEhWMGxPUTBnNk1qZ3NVMGxIU1U4Nk1qTXNVMGxIVTFsVE9qRXlMRk5UVEY5UFVGOUJURXc2TWpFME56UTROamN4T1N4VFUweGZUMUJmUVV4TVQxZGZWVTVUUVVaRlgweEZSMEZEV1Y5U1JVNUZSMDlVU1VGVVNVOU9PakkyTWpFME5DeFRVMHhmVDFCZlEwbFFTRVZTWDFORlVsWkZVbDlRVWtWR1JWSkZUa05GT2pReE9UUXpNRFFzVTFOTVgwOVFYME5KVTBOUFgwRk9XVU5QVGs1RlExUTZNekkzTmpnc1UxTk1YMDlRWDBOUFQwdEpSVjlGV0VOSVFVNUhSVG80TVRreUxGTlRURjlQVUY5RFVsbFFWRTlRVWs5ZlZFeFRSVmhVWDBKVlJ6b3lNVFEzTkRnek5qUTRMRk5UVEY5UFVGOUVUMDVVWDBsT1UwVlNWRjlGVFZCVVdWOUdVa0ZIVFVWT1ZGTTZNakEwT0N4VFUweGZUMUJmUlZCSVJVMUZVa0ZNWDFKVFFUb3dMRk5UVEY5UFVGOU1SVWRCUTFsZlUwVlNWa1ZTWDBOUFRrNUZRMVE2TkN4VFUweGZUMUJmVFVsRFVrOVRUMFpVWDBKSlIxOVRVMHhXTTE5Q1ZVWkdSVkk2TXpJc1UxTk1YMDlRWDAxSlExSlBVMDlHVkY5VFJWTlRYMGxFWDBKVlJ6b3hMRk5UVEY5UFVGOU5VMGxGWDFOVFRGWXlYMUpUUVY5UVFVUkVTVTVIT2pBc1UxTk1YMDlRWDA1RlZGTkRRVkJGWDBOQlgwUk9YMEpWUnpvMU16WTROekE1TVRJc1UxTk1YMDlRWDA1RlZGTkRRVkJGWDBOSVFVeE1SVTVIUlY5Q1ZVYzZNaXhUVTB4ZlQxQmZUa1ZVVTBOQlVFVmZSRVZOVDE5RFNWQklSVkpmUTBoQlRrZEZYMEpWUnpveE1EY3pOelF4T0RJMExGTlRURjlQVUY5T1JWUlRRMEZRUlY5U1JWVlRSVjlEU1ZCSVJWSmZRMGhCVGtkRlgwSlZSem80TEZOVFRGOVBVRjlPVDE5RFQwMVFVa1ZUVTBsUFRqb3hNekV3TnpJc1UxTk1YMDlRWDA1UFgxRlZSVkpaWDAxVVZUbzBNRGsyTEZOVFRGOVBVRjlPVDE5VFJWTlRTVTlPWDFKRlUxVk5VRlJKVDA1ZlQwNWZVa1ZPUlVkUFZFbEJWRWxQVGpvMk5UVXpOaXhUVTB4ZlQxQmZUazlmVTFOTWRqSTZNVFkzTnpjeU1UWXNVMU5NWDA5UVgwNVBYMU5UVEhZek9qTXpOVFUwTkRNeUxGTlRURjlQVUY5T1QxOVVTVU5MUlZRNk1UWXpPRFFzVTFOTVgwOVFYMDVQWDFSTVUzWXhPalkzTVRBNE9EWTBMRk5UVEY5UFVGOU9UMTlVVEZOMk1WOHhPakkyT0RRek5UUTFOaXhUVTB4ZlQxQmZUazlmVkV4VGRqRmZNam94TXpReU1UYzNNamdzVTFOTVgwOVFYMUJMUTFNeFgwTklSVU5MWHpFNk1DeFRVMHhmVDFCZlVFdERVekZmUTBoRlEwdGZNam93TEZOVFRGOVBVRjlUU1U1SFRFVmZSRWhmVlZORk9qRXdORGcxTnpZc1UxTk1YMDlRWDFOSlRrZE1SVjlGUTBSSVgxVlRSVG8xTWpReU9EZ3NVMU5NWDA5UVgxTlRURVZCV1Y4d09EQmZRMHhKUlU1VVgwUklYMEpWUnpveE1qZ3NVMU5NWDA5UVgxTlRURkpGUmpKZlVrVlZVMFZmUTBWU1ZGOVVXVkJGWDBKVlJ6b3dMRk5UVEY5UFVGOVVURk5mUWt4UFEwdGZVRUZFUkVsT1IxOUNWVWM2TlRFeUxGTlRURjlQVUY5VVRGTmZSRFZmUWxWSE9qSTFOaXhUVTB4ZlQxQmZWRXhUWDFKUFRFeENRVU5MWDBKVlJ6bzRNemc0TmpBNExFVk9SMGxPUlY5TlJWUklUMFJmUkZOQk9qSXNSVTVIU1U1RlgwMUZWRWhQUkY5RVNEbzBMRVZPUjBsT1JWOU5SVlJJVDBSZlVrRk9SRG80TEVWT1IwbE9SVjlOUlZSSVQwUmZSVU5FU0RveE5peEZUa2RKVGtWZlRVVlVTRTlFWDBWRFJGTkJPak15TEVWT1IwbE9SVjlOUlZSSVQwUmZRMGxRU0VWU1V6bzJOQ3hGVGtkSlRrVmZUVVZVU0U5RVgwUkpSMFZUVkZNNk1USTRMRVZPUjBsT1JWOU5SVlJJVDBSZlUxUlBVa1U2TWpVMkxFVk9SMGxPUlY5TlJWUklUMFJmVUV0RldWOU5SVlJJVXpvMU1USXNSVTVIU1U1RlgwMUZWRWhQUkY5UVMwVlpYMEZUVGpGZlRVVlVTRk02TVRBeU5DeEZUa2RKVGtWZlRVVlVTRTlFWDBGTVREbzJOVFV6TlN4RlRrZEpUa1ZmVFVWVVNFOUVYMDVQVGtVNk1DeEVTRjlEU0VWRFMxOVFYMDVQVkY5VFFVWkZYMUJTU1UxRk9qSXNSRWhmUTBoRlEwdGZVRjlPVDFSZlVGSkpUVVU2TVN4RVNGOVZUa0ZDVEVWZlZFOWZRMGhGUTB0ZlIwVk9SVkpCVkU5U09qUXNSRWhmVGs5VVgxTlZTVlJCUWt4RlgwZEZUa1ZTUVZSUFVqbzRMRTVRVGw5RlRrRkNURVZFT2pFc1VsTkJYMUJMUTFNeFgxQkJSRVJKVGtjNk1TeFNVMEZmVTFOTVZqSXpYMUJCUkVSSlRrYzZNaXhTVTBGZlRrOWZVRUZFUkVsT1J6b3pMRkpUUVY5UVMwTlRNVjlQUVVWUVgxQkJSRVJKVGtjNk5DeFNVMEZmV0Rrek1WOVFRVVJFU1U1SE9qVXNVbE5CWDFCTFExTXhYMUJUVTE5UVFVUkVTVTVIT2pZc1VFOUpUbFJmUTA5T1ZrVlNVMGxQVGw5RFQwMVFVa1ZUVTBWRU9qSXNVRTlKVGxSZlEwOU9Wa1ZTVTBsUFRsOVZUa05QVFZCU1JWTlRSVVE2TkN4UVQwbE9WRjlEVDA1V1JWSlRTVTlPWDBoWlFsSkpSRG8yTEVaZlQwczZNQ3hTWDA5TE9qUXNWMTlQU3pveUxGaGZUMHM2TVN4VlZsOVZSRkJmVWtWVlUwVkJSRVJTT2pSOWZTeDdmVjBzT1RwYlpuVnVZM1JwYjI0b1pTeDBMRzRwZTNaaGNpQnlQV1VvWENJdUxpOHVMaTl0YjJSMWJHVnpMMTlqYjNKbFhDSXBMR2s5Y2k1S1UwOU9mSHdvY2k1S1UwOU9QWHR6ZEhKcGJtZHBabms2U2xOUFRpNXpkSEpwYm1kcFpubDlLVHQwTG1WNGNHOXlkSE05Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUdrdWMzUnlhVzVuYVdaNUxtRndjR3g1S0drc1lYSm5kVzFsYm5SektYMTlMSHRjSWk0dUx5NHVMMjF2WkhWc1pYTXZYMk52Y21WY0lqb3hNSDFkTERFd09sdG1kVzVqZEdsdmJpaGxMSFFzYmlsN2RtRnlJSEk5ZEM1bGVIQnZjblJ6UFh0MlpYSnphVzl1T2x3aU1pNDBMakJjSW4wN1hDSnVkVzFpWlhKY0lqMDlkSGx3Wlc5bUlGOWZaU1ltS0Y5ZlpUMXlLWDBzZTMxZExERXhPbHRtZFc1amRHbHZiaWhsTEhRc2JpbDdLR1oxYm1OMGFXOXVLR1VwZTJaMWJtTjBhVzl1SUhRb1pTbDdjbVYwZFhKdUlFRnljbUY1TG1selFYSnlZWGsvUVhKeVlYa3VhWE5CY25KaGVTaGxLVHBjSWx0dlltcGxZM1FnUVhKeVlYbGRYQ0k5UFQxNUtHVXBmV1oxYm1OMGFXOXVJSElvWlNsN2NtVjBkWEp1WENKaWIyOXNaV0Z1WENJOVBYUjVjR1Z2WmlCbGZXWjFibU4wYVc5dUlHa29aU2w3Y21WMGRYSnVJRzUxYkd3OVBUMWxmV1oxYm1OMGFXOXVJRzhvWlNsN2NtVjBkWEp1SUc1MWJHdzlQV1Y5Wm5WdVkzUnBiMjRnY3lobEtYdHlaWFIxY201Y0ltNTFiV0psY2x3aVBUMTBlWEJsYjJZZ1pYMW1kVzVqZEdsdmJpQmhLR1VwZTNKbGRIVnlibHdpYzNSeWFXNW5YQ0k5UFhSNWNHVnZaaUJsZldaMWJtTjBhVzl1SUhVb1pTbDdjbVYwZFhKdVhDSnplVzFpYjJ4Y0lqMDlkSGx3Wlc5bUlHVjlablZ1WTNScGIyNGdaaWhsS1h0eVpYUjFjbTRnZG05cFpDQXdQVDA5WlgxbWRXNWpkR2x2YmlCaktHVXBlM0psZEhWeWJsd2lXMjlpYW1WamRDQlNaV2RGZUhCZFhDSTlQVDE1S0dVcGZXWjFibU4wYVc5dUlHd29aU2w3Y21WMGRYSnVYQ0p2WW1wbFkzUmNJajA5ZEhsd1pXOW1JR1VtSm01MWJHd2hQVDFsZldaMWJtTjBhVzl1SUdnb1pTbDdjbVYwZFhKdVhDSmJiMkpxWldOMElFUmhkR1ZkWENJOVBUMTVLR1VwZldaMWJtTjBhVzl1SUhBb1pTbDdjbVYwZFhKdVhDSmJiMkpxWldOMElFVnljbTl5WFZ3aVBUMDllU2hsS1h4OFpTQnBibk4wWVc1alpXOW1JRVZ5Y205eWZXWjFibU4wYVc5dUlHUW9aU2w3Y21WMGRYSnVYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnWlgxbWRXNWpkR2x2YmlCbktHVXBlM0psZEhWeWJpQnVkV3hzUFQwOVpYeDhYQ0ppYjI5c1pXRnVYQ0k5UFhSNWNHVnZaaUJsZkh4Y0ltNTFiV0psY2x3aVBUMTBlWEJsYjJZZ1pYeDhYQ0p6ZEhKcGJtZGNJajA5ZEhsd1pXOW1JR1Y4ZkZ3aWMzbHRZbTlzWENJOVBYUjVjR1Z2WmlCbGZIeGNJblZ1WkdWbWFXNWxaRndpUFQxMGVYQmxiMllnWlgxbWRXNWpkR2x2YmlCNUtHVXBlM0psZEhWeWJpQlBZbXBsWTNRdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bkxtTmhiR3dvWlNsOWJpNXBjMEZ5Y21GNVBYUXNiaTVwYzBKdmIyeGxZVzQ5Y2l4dUxtbHpUblZzYkQxcExHNHVhWE5PZFd4c1QzSlZibVJsWm1sdVpXUTlieXh1TG1selRuVnRZbVZ5UFhNc2JpNXBjMU4wY21sdVp6MWhMRzR1YVhOVGVXMWliMnc5ZFN4dUxtbHpWVzVrWldacGJtVmtQV1lzYmk1cGMxSmxaMFY0Y0QxakxHNHVhWE5QWW1wbFkzUTliQ3h1TG1selJHRjBaVDFvTEc0dWFYTkZjbkp2Y2oxd0xHNHVhWE5HZFc1amRHbHZiajFrTEc0dWFYTlFjbWx0YVhScGRtVTlaeXh1TG1selFuVm1abVZ5UFdVdWFYTkNkV1ptWlhKOUtTNWpZV3hzS0hSb2FYTXNlMmx6UW5WbVptVnlPbVVvWENJdUxpOHVMaTlwY3kxaWRXWm1aWEl2YVc1a1pYZ3Vhbk5jSWlsOUtYMHNlMXdpTGk0dkxpNHZhWE10WW5WbVptVnlMMmx1WkdWNExtcHpYQ0k2TWpCOVhTd3hNanBiWm5WdVkzUnBiMjRvWlN4MExHNHBlMloxYm1OMGFXOXVJSElvS1h0MGFHbHpMbDlsZG1WdWRITTlkR2hwY3k1ZlpYWmxiblJ6Zkh4N2ZTeDBhR2x6TGw5dFlYaE1hWE4wWlc1bGNuTTlkR2hwY3k1ZmJXRjRUR2x6ZEdWdVpYSnpmSHgyYjJsa0lEQjlablZ1WTNScGIyNGdhU2hsS1h0eVpYUjFjbTVjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCbGZXWjFibU4wYVc5dUlHOG9aU2w3Y21WMGRYSnVYQ0p1ZFcxaVpYSmNJajA5ZEhsd1pXOW1JR1Y5Wm5WdVkzUnBiMjRnY3lobEtYdHlaWFIxY201Y0ltOWlhbVZqZEZ3aVBUMTBlWEJsYjJZZ1pTWW1iblZzYkNFOVBXVjlablZ1WTNScGIyNGdZU2hsS1h0eVpYUjFjbTRnZG05cFpDQXdQVDA5WlgxMExtVjRjRzl5ZEhNOWNpeHlMa1YyWlc1MFJXMXBkSFJsY2oxeUxISXVjSEp2ZEc5MGVYQmxMbDlsZG1WdWRITTlkbTlwWkNBd0xISXVjSEp2ZEc5MGVYQmxMbDl0WVhoTWFYTjBaVzVsY25NOWRtOXBaQ0F3TEhJdVpHVm1ZWFZzZEUxaGVFeHBjM1JsYm1WeWN6MHhNQ3h5TG5CeWIzUnZkSGx3WlM1elpYUk5ZWGhNYVhOMFpXNWxjbk05Wm5WdVkzUnBiMjRvWlNsN2FXWW9JVzhvWlNsOGZHVThNSHg4YVhOT1lVNG9aU2twZEdoeWIzY2dWSGx3WlVWeWNtOXlLRndpYmlCdGRYTjBJR0psSUdFZ2NHOXphWFJwZG1VZ2JuVnRZbVZ5WENJcE8xeHVjbVYwZFhKdUlIUm9hWE11WDIxaGVFeHBjM1JsYm1WeWN6MWxMSFJvYVhOOUxISXVjSEp2ZEc5MGVYQmxMbVZ0YVhROVpuVnVZM1JwYjI0b1pTbDdkbUZ5SUhRc2JpeHlMRzhzZFN4bU8ybG1LSFJvYVhNdVgyVjJaVzUwYzN4OEtIUm9hWE11WDJWMlpXNTBjejE3ZlNrc1hDSmxjbkp2Y2x3aVBUMDlaU1ltS0NGMGFHbHpMbDlsZG1WdWRITXVaWEp5YjNKOGZITW9kR2hwY3k1ZlpYWmxiblJ6TG1WeWNtOXlLU1ltSVhSb2FYTXVYMlYyWlc1MGN5NWxjbkp2Y2k1c1pXNW5kR2dwS1h0cFppaDBQV0Z5WjNWdFpXNTBjMXN4WFN4MElHbHVjM1JoYm1ObGIyWWdSWEp5YjNJcGRHaHliM2NnZER0MllYSWdZejF1WlhjZ1JYSnliM0lvSjFWdVkyRjFaMmgwTENCMWJuTndaV05wWm1sbFpDQmNJbVZ5Y205eVhDSWdaWFpsYm5RdUlDZ25LM1FyWENJcFhDSXBPM1JvY205M0lHTXVZMjl1ZEdWNGREMTBMR045YVdZb2JqMTBhR2x6TGw5bGRtVnVkSE5iWlYwc1lTaHVLU2x5WlhSMWNtNGhNVHRwWmlocEtHNHBLWE4zYVhSamFDaGhjbWQxYldWdWRITXViR1Z1WjNSb0tYdGpZWE5sSURFNmJpNWpZV3hzS0hSb2FYTXBPMkp5WldGck8yTmhjMlVnTWpwdUxtTmhiR3dvZEdocGN5eGhjbWQxYldWdWRITmJNVjBwTzJKeVpXRnJPMk5oYzJVZ016cHVMbU5oYkd3b2RHaHBjeXhoY21kMWJXVnVkSE5iTVYwc1lYSm5kVzFsYm5Seld6SmRLVHRpY21WaGF6dGtaV1poZFd4ME9tODlRWEp5WVhrdWNISnZkRzkwZVhCbExuTnNhV05sTG1OaGJHd29ZWEpuZFcxbGJuUnpMREVwTEc0dVlYQndiSGtvZEdocGN5eHZLWDFsYkhObElHbG1LSE1vYmlrcFptOXlLRzg5UVhKeVlYa3VjSEp2ZEc5MGVYQmxMbk5zYVdObExtTmhiR3dvWVhKbmRXMWxiblJ6TERFcExHWTliaTV6YkdsalpTZ3BMSEk5Wmk1c1pXNW5kR2dzZFQwd08zVThjanQxS3lzcFpsdDFYUzVoY0hCc2VTaDBhR2x6TEc4cE8zSmxkSFZ5YmlFd2ZTeHlMbkJ5YjNSdmRIbHdaUzVoWkdSTWFYTjBaVzVsY2oxbWRXNWpkR2x2YmlobExIUXBlM1poY2lCdU8ybG1LQ0ZwS0hRcEtYUm9jbTkzSUZSNWNHVkZjbkp2Y2loY0lteHBjM1JsYm1WeUlHMTFjM1FnWW1VZ1lTQm1kVzVqZEdsdmJsd2lLVHR5WlhSMWNtNGdkR2hwY3k1ZlpYWmxiblJ6Zkh3b2RHaHBjeTVmWlhabGJuUnpQWHQ5S1N4MGFHbHpMbDlsZG1WdWRITXVibVYzVEdsemRHVnVaWEltSm5Sb2FYTXVaVzFwZENoY0ltNWxkMHhwYzNSbGJtVnlYQ0lzWlN4cEtIUXViR2x6ZEdWdVpYSXBQM1F1YkdsemRHVnVaWEk2ZENrc2RHaHBjeTVmWlhabGJuUnpXMlZkUDNNb2RHaHBjeTVmWlhabGJuUnpXMlZkS1Q5MGFHbHpMbDlsZG1WdWRITmJaVjB1Y0hWemFDaDBLVHAwYUdsekxsOWxkbVZ1ZEhOYlpWMDlXM1JvYVhNdVgyVjJaVzUwYzF0bFhTeDBYVHAwYUdsekxsOWxkbVZ1ZEhOYlpWMDlkQ3h6S0hSb2FYTXVYMlYyWlc1MGMxdGxYU2ttSmlGMGFHbHpMbDlsZG1WdWRITmJaVjB1ZDJGeWJtVmtKaVlvYmoxaEtIUm9hWE11WDIxaGVFeHBjM1JsYm1WeWN5ay9jaTVrWldaaGRXeDBUV0Y0VEdsemRHVnVaWEp6T25Sb2FYTXVYMjFoZUV4cGMzUmxibVZ5Y3l4dUppWnVQakFtSm5Sb2FYTXVYMlYyWlc1MGMxdGxYUzVzWlc1bmRHZytiaVltS0hSb2FYTXVYMlYyWlc1MGMxdGxYUzUzWVhKdVpXUTlJVEFzWTI5dWMyOXNaUzVsY25KdmNpaGNJaWh1YjJSbEtTQjNZWEp1YVc1bk9pQndiM056YVdKc1pTQkZkbVZ1ZEVWdGFYUjBaWElnYldWdGIzSjVJR3hsWVdzZ1pHVjBaV04wWldRdUlDVmtJR3hwYzNSbGJtVnljeUJoWkdSbFpDNGdWWE5sSUdWdGFYUjBaWEl1YzJWMFRXRjRUR2x6ZEdWdVpYSnpLQ2tnZEc4Z2FXNWpjbVZoYzJVZ2JHbHRhWFF1WENJc2RHaHBjeTVmWlhabGJuUnpXMlZkTG14bGJtZDBhQ2tzWENKbWRXNWpkR2x2Ymx3aVBUMTBlWEJsYjJZZ1kyOXVjMjlzWlM1MGNtRmpaU1ltWTI5dWMyOXNaUzUwY21GalpTZ3BLU2tzZEdocGMzMHNjaTV3Y205MGIzUjVjR1V1YjI0OWNpNXdjbTkwYjNSNWNHVXVZV1JrVEdsemRHVnVaWElzY2k1d2NtOTBiM1I1Y0dVdWIyNWpaVDFtZFc1amRHbHZiaWhsTEhRcGUyWjFibU4wYVc5dUlHNG9LWHQwYUdsekxuSmxiVzkyWlV4cGMzUmxibVZ5S0dVc2Jpa3Njbng4S0hJOUlUQXNkQzVoY0hCc2VTaDBhR2x6TEdGeVozVnRaVzUwY3lrcGZXbG1LQ0ZwS0hRcEtYUm9jbTkzSUZSNWNHVkZjbkp2Y2loY0lteHBjM1JsYm1WeUlHMTFjM1FnWW1VZ1lTQm1kVzVqZEdsdmJsd2lLVHQyWVhJZ2NqMGhNVHR5WlhSMWNtNGdiaTVzYVhOMFpXNWxjajEwTEhSb2FYTXViMjRvWlN4dUtTeDBhR2x6ZlN4eUxuQnliM1J2ZEhsd1pTNXlaVzF2ZG1WTWFYTjBaVzVsY2oxbWRXNWpkR2x2YmlobExIUXBlM1poY2lCdUxISXNieXhoTzJsbUtDRnBLSFFwS1hSb2NtOTNJRlI1Y0dWRmNuSnZjaWhjSW14cGMzUmxibVZ5SUcxMWMzUWdZbVVnWVNCbWRXNWpkR2x2Ymx3aUtUdHBaaWdoZEdocGN5NWZaWFpsYm5SemZId2hkR2hwY3k1ZlpYWmxiblJ6VzJWZEtYSmxkSFZ5YmlCMGFHbHpPMmxtS0c0OWRHaHBjeTVmWlhabGJuUnpXMlZkTEc4OWJpNXNaVzVuZEdnc2NqMHRNU3h1UFQwOWRIeDhhU2h1TG14cGMzUmxibVZ5S1NZbWJpNXNhWE4wWlc1bGNqMDlQWFFwWkdWc1pYUmxJSFJvYVhNdVgyVjJaVzUwYzF0bFhTeDBhR2x6TGw5bGRtVnVkSE11Y21WdGIzWmxUR2x6ZEdWdVpYSW1KblJvYVhNdVpXMXBkQ2hjSW5KbGJXOTJaVXhwYzNSbGJtVnlYQ0lzWlN4MEtUdGxiSE5sSUdsbUtITW9iaWtwZTJadmNpaGhQVzg3WVMwdElENHdPeWxwWmlodVcyRmRQVDA5ZEh4OGJsdGhYUzVzYVhOMFpXNWxjaVltYmx0aFhTNXNhWE4wWlc1bGNqMDlQWFFwZTNJOVlUdGljbVZoYTMxcFppaHlQREFwY21WMGRYSnVJSFJvYVhNN01UMDlQVzR1YkdWdVozUm9QeWh1TG14bGJtZDBhRDB3TEdSbGJHVjBaU0IwYUdsekxsOWxkbVZ1ZEhOYlpWMHBPbTR1YzNCc2FXTmxLSElzTVNrc2RHaHBjeTVmWlhabGJuUnpMbkpsYlc5MlpVeHBjM1JsYm1WeUppWjBhR2x6TG1WdGFYUW9YQ0p5WlcxdmRtVk1hWE4wWlc1bGNsd2lMR1VzZENsOWNtVjBkWEp1SUhSb2FYTjlMSEl1Y0hKdmRHOTBlWEJsTG5KbGJXOTJaVUZzYkV4cGMzUmxibVZ5Y3oxbWRXNWpkR2x2YmlobEtYdDJZWElnZEN4dU8ybG1LQ0YwYUdsekxsOWxkbVZ1ZEhNcGNtVjBkWEp1SUhSb2FYTTdhV1lvSVhSb2FYTXVYMlYyWlc1MGN5NXlaVzF2ZG1WTWFYTjBaVzVsY2lseVpYUjFjbTRnTUQwOVBXRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnL2RHaHBjeTVmWlhabGJuUnpQWHQ5T25Sb2FYTXVYMlYyWlc1MGMxdGxYU1ltWkdWc1pYUmxJSFJvYVhNdVgyVjJaVzUwYzF0bFhTeDBhR2x6TzJsbUtEQTlQVDFoY21kMWJXVnVkSE11YkdWdVozUm9LWHRtYjNJb2RDQnBiaUIwYUdsekxsOWxkbVZ1ZEhNcFhDSnlaVzF2ZG1WTWFYTjBaVzVsY2x3aUlUMDlkQ1ltZEdocGN5NXlaVzF2ZG1WQmJHeE1hWE4wWlc1bGNuTW9kQ2s3Y21WMGRYSnVJSFJvYVhNdWNtVnRiM1psUVd4c1RHbHpkR1Z1WlhKektGd2ljbVZ0YjNabFRHbHpkR1Z1WlhKY0lpa3NkR2hwY3k1ZlpYWmxiblJ6UFh0OUxIUm9hWE45YVdZb2JqMTBhR2x6TGw5bGRtVnVkSE5iWlYwc2FTaHVLU2wwYUdsekxuSmxiVzkyWlV4cGMzUmxibVZ5S0dVc2JpazdaV3h6WlNCcFppaHVLV1p2Y2lnN2JpNXNaVzVuZEdnN0tYUm9hWE11Y21WdGIzWmxUR2x6ZEdWdVpYSW9aU3h1VzI0dWJHVnVaM1JvTFRGZEtUdHlaWFIxY200Z1pHVnNaWFJsSUhSb2FYTXVYMlYyWlc1MGMxdGxYU3gwYUdsemZTeHlMbkJ5YjNSdmRIbHdaUzVzYVhOMFpXNWxjbk05Wm5WdVkzUnBiMjRvWlNsN2RtRnlJSFE3Y21WMGRYSnVJSFE5ZEdocGN5NWZaWFpsYm5SekppWjBhR2x6TGw5bGRtVnVkSE5iWlYwL2FTaDBhR2x6TGw5bGRtVnVkSE5iWlYwcFAxdDBhR2x6TGw5bGRtVnVkSE5iWlYxZE9uUm9hWE11WDJWMlpXNTBjMXRsWFM1emJHbGpaU2dwT2x0ZGZTeHlMbkJ5YjNSdmRIbHdaUzVzYVhOMFpXNWxja052ZFc1MFBXWjFibU4wYVc5dUtHVXBlMmxtS0hSb2FYTXVYMlYyWlc1MGN5bDdkbUZ5SUhROWRHaHBjeTVmWlhabGJuUnpXMlZkTzJsbUtHa29kQ2twY21WMGRYSnVJREU3YVdZb2RDbHlaWFIxY200Z2RDNXNaVzVuZEdoOWNtVjBkWEp1SURCOUxISXViR2x6ZEdWdVpYSkRiM1Z1ZEQxbWRXNWpkR2x2YmlobExIUXBlM0psZEhWeWJpQmxMbXhwYzNSbGJtVnlRMjkxYm5Rb2RDbDlmU3g3ZlYwc01UTTZXMloxYm1OMGFXOXVLR1VzZEN4dUtYdGNJblZ6WlNCemRISnBZM1JjSWp0bWRXNWpkR2x2YmlCeUtHVXBlMmxtS0c1MWJHdzlQVDFsZkh4Y0ltOWlhbVZqZEZ3aUlUMTBlWEJsYjJZZ1pTbHlaWFIxY200Z1pUdHBaaWhsSUdsdWMzUmhibU5sYjJZZ1QySnFaV04wS1haaGNpQjBQWHRmWDNCeWIzUnZYMTg2WlM1ZlgzQnliM1J2WDE5OU8yVnNjMlVnZG1GeUlIUTlUMkpxWldOMExtTnlaV0YwWlNodWRXeHNLVHR5WlhSMWNtNGdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTW9aU2t1Wm05eVJXRmphQ2htZFc1amRHbHZiaWh1S1h0UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29kQ3h1TEU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSW9aU3h1S1NsOUtTeDBmWFpoY2lCcFBXVW9YQ0ptYzF3aUtUdDBMbVY0Y0c5eWRITTljaWhwS1gwc2UyWnpPalI5WFN3eE5EcGJablZ1WTNScGIyNG9aU3gwTEc0cGV5aG1kVzVqZEdsdmJpaHVLWHRtZFc1amRHbHZiaUJ5S0NsN2ZXWjFibU4wYVc5dUlHa29aU2w3Wm5WdVkzUnBiMjRnZENobExIUXNiaWw3Wm5WdVkzUnBiMjRnY2lobExIUXNiaWw3Y21WMGRYSnVJSFlvWlN4MExHWjFibU4wYVc5dUtHa3BleUZwZkh4Y0lrVk5Sa2xNUlZ3aUlUMDlhUzVqYjJSbEppWmNJa1ZPUmtsTVJWd2lJVDA5YVM1amIyUmxQeWhjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCdUppWnVMbUZ3Y0d4NUtIUm9hWE1zWVhKbmRXMWxiblJ6S1N4ektDa3BPbThvVzNJc1cyVXNkQ3h1WFYwcGZTbDljbVYwZFhKdVhDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdkQ1ltS0c0OWRDeDBQVzUxYkd3cExISW9aU3gwTEc0cGZXWjFibU4wYVc5dUlISW9aU3gwTEc0c2NpbDdablZ1WTNScGIyNGdhU2hsTEhRc2JpeHlLWHR5WlhSMWNtNGdiU2hsTEhRc2JpeG1kVzVqZEdsdmJpaGhLWHNoWVh4OFhDSkZUVVpKVEVWY0lpRTlQV0V1WTI5a1pTWW1YQ0pGVGtaSlRFVmNJaUU5UFdFdVkyOWtaVDhvWENKbWRXNWpkR2x2Ymx3aVBUMTBlWEJsYjJZZ2NpWW1jaTVoY0hCc2VTaDBhR2x6TEdGeVozVnRaVzUwY3lrc2N5Z3BLVHB2S0Z0cExGdGxMSFFzYml4eVhWMHBmU2w5Y21WMGRYSnVYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnYmlZbUtISTliaXh1UFc1MWJHd3BMR2tvWlN4MExHNHNjaWw5Wm5WdVkzUnBiMjRnWVNobExIUXNiaXh5S1h0bWRXNWpkR2x2YmlCcEtHVXNkQ3h1TEhJcGUzSmxkSFZ5YmlCRktHVXNkQ3h1TEdaMWJtTjBhVzl1S0dFcGV5RmhmSHhjSWtWTlJrbE1SVndpSVQwOVlTNWpiMlJsSmlaY0lrVk9Sa2xNUlZ3aUlUMDlZUzVqYjJSbFB5aGNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUJ5SmlaeUxtRndjR3g1S0hSb2FYTXNZWEpuZFcxbGJuUnpLU3h6S0NrcE9tOG9XMmtzVzJVc2RDeHVMSEpkWFNsOUtYMXlaWFIxY201Y0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQnVKaVlvY2oxdUxHNDliblZzYkNrc2FTaGxMSFFzYml4eUtYMW1kVzVqZEdsdmJpQmpLR1VzZENsN1puVnVZM1JwYjI0Z2JpZ3BlM0psZEhWeWJpQjNLR1VzWm5WdVkzUnBiMjRvY2l4cEtYdHBKaVpwTG5OdmNuUW1KbWt1YzI5eWRDZ3BMQ0Z5Zkh4Y0lrVk5Sa2xNUlZ3aUlUMDljaTVqYjJSbEppWmNJa1ZPUmtsTVJWd2lJVDA5Y2k1amIyUmxQeWhjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCMEppWjBMbUZ3Y0d4NUtIUm9hWE1zWVhKbmRXMWxiblJ6S1N4ektDa3BPbThvVzI0c1cyVXNkRjFkS1gwcGZYSmxkSFZ5YmlCdUtHVXNkQ2w5Wm5WdVkzUnBiMjRnYkNobExIUXBlM0psZEhWeWJpQjBhR2x6SUdsdWMzUmhibU5sYjJZZ2JEOG9VeTVoY0hCc2VTaDBhR2x6TEdGeVozVnRaVzUwY3lrc2RHaHBjeWs2YkM1aGNIQnNlU2hQWW1wbFkzUXVZM0psWVhSbEtHd3VjSEp2ZEc5MGVYQmxLU3hoY21kMWJXVnVkSE1wZldaMWJtTjBhVzl1SUdnb0tYdDJZWElnWlQxMGFHbHpPMThvWlM1d1lYUm9MR1V1Wm14aFozTXNaUzV0YjJSbExHWjFibU4wYVc5dUtIUXNiaWw3ZEQ4b1pTNWhkWFJ2UTJ4dmMyVW1KbVV1WkdWemRISnZlU2dwTEdVdVpXMXBkQ2hjSW1WeWNtOXlYQ0lzZENrcE9paGxMbVprUFc0c1pTNWxiV2wwS0Z3aWIzQmxibHdpTEc0cExHVXVjbVZoWkNncEtYMHBmV1oxYm1OMGFXOXVJSEFvWlN4MEtYdHlaWFIxY200Z2RHaHBjeUJwYm5OMFlXNWpaVzltSUhBL0tFOHVZWEJ3Ykhrb2RHaHBjeXhoY21kMWJXVnVkSE1wTEhSb2FYTXBPbkF1WVhCd2JIa29UMkpxWldOMExtTnlaV0YwWlNod0xuQnliM1J2ZEhsd1pTa3NZWEpuZFcxbGJuUnpLWDFtZFc1amRHbHZiaUJrS0NsN2RtRnlJR1U5ZEdocGN6dGZLR1V1Y0dGMGFDeGxMbVpzWVdkekxHVXViVzlrWlN4bWRXNWpkR2x2YmloMExHNHBlM1EvS0dVdVpHVnpkSEp2ZVNncExHVXVaVzFwZENoY0ltVnljbTl5WENJc2RDa3BPaWhsTG1aa1BXNHNaUzVsYldsMEtGd2liM0JsYmx3aUxHNHBLWDBwZldaMWJtTjBhVzl1SUdjb1pTeDBLWHR5WlhSMWNtNGdibVYzSUd3b1pTeDBLWDFtZFc1amRHbHZiaUI1S0dVc2RDbDdjbVYwZFhKdUlHNWxkeUJ3S0dVc2RDbDlablZ1WTNScGIyNGdYeWhsTEhRc2JpeHlLWHRtZFc1amRHbHZiaUJwS0dVc2RDeHVMSElwZTNKbGRIVnliaUJTS0dVc2RDeHVMR1oxYm1OMGFXOXVLR0VzZFNsN0lXRjhmRndpUlUxR1NVeEZYQ0loUFQxaExtTnZaR1VtSmx3aVJVNUdTVXhGWENJaFBUMWhMbU52WkdVL0tGd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1JSEltSm5JdVlYQndiSGtvZEdocGN5eGhjbWQxYldWdWRITXBMSE1vS1NrNmJ5aGJhU3hiWlN4MExHNHNjbDFkS1gwcGZYSmxkSFZ5Ymx3aVpuVnVZM1JwYjI1Y0lqMDlkSGx3Wlc5bUlHNG1KaWh5UFc0c2JqMXVkV3hzS1N4cEtHVXNkQ3h1TEhJcGZYVW9aU2tzWlM1bmNtRmpaV1oxYkdsbWVUMXBMR1V1Um1sc1pWSmxZV1JUZEhKbFlXMDliQ3hsTGtacGJHVlhjbWwwWlZOMGNtVmhiVDF3TEdVdVkzSmxZWFJsVW1WaFpGTjBjbVZoYlQxbkxHVXVZM0psWVhSbFYzSnBkR1ZUZEhKbFlXMDllVHQyWVhJZ2RqMWxMbkpsWVdSR2FXeGxPMlV1Y21WaFpFWnBiR1U5ZER0MllYSWdiVDFsTG5keWFYUmxSbWxzWlR0bExuZHlhWFJsUm1sc1pUMXlPM1poY2lCRlBXVXVZWEJ3Wlc1a1JtbHNaVHRGSmlZb1pTNWhjSEJsYm1SR2FXeGxQV0VwTzNaaGNpQjNQV1V1Y21WaFpHUnBjanRwWmlobExuSmxZV1JrYVhJOVl5eGNJbll3TGpoY0lqMDlQVzR1ZG1WeWMybHZiaTV6ZFdKemRISW9NQ3cwS1NsN2RtRnlJR0k5WmlobEtUdHNQV0l1VW1WaFpGTjBjbVZoYlN4d1BXSXVWM0pwZEdWVGRISmxZVzE5ZG1GeUlGTTlaUzVTWldGa1UzUnlaV0Z0TzJ3dWNISnZkRzkwZVhCbFBVOWlhbVZqZEM1amNtVmhkR1VvVXk1d2NtOTBiM1I1Y0dVcExHd3VjSEp2ZEc5MGVYQmxMbTl3Wlc0OWFEdDJZWElnVHoxbExsZHlhWFJsVTNSeVpXRnRPM0F1Y0hKdmRHOTBlWEJsUFU5aWFtVmpkQzVqY21WaGRHVW9UeTV3Y205MGIzUjVjR1VwTEhBdWNISnZkRzkwZVhCbExtOXdaVzQ5WkN4bExsSmxZV1JUZEhKbFlXMDliQ3hsTGxkeWFYUmxVM1J5WldGdFBYQTdkbUZ5SUZJOVpTNXZjR1Z1TzNKbGRIVnliaUJsTG05d1pXNDlYeXhsZldaMWJtTjBhVzl1SUc4b1pTbDdhQ2hjSWtWT1VWVkZWVVZjSWl4bFd6QmRMbTVoYldVc1pWc3hYU2tzWXk1d2RYTm9LR1VwZldaMWJtTjBhVzl1SUhNb0tYdDJZWElnWlQxakxuTm9hV1owS0NrN1pTWW1LR2dvWENKU1JWUlNXVndpTEdWYk1GMHVibUZ0WlN4bFd6RmRLU3hsV3pCZExtRndjR3g1S0c1MWJHd3NaVnN4WFNrcGZYWmhjaUJoUFdVb1hDSm1jMXdpS1N4MVBXVW9YQ0l1TDNCdmJIbG1hV3hzY3k1cWMxd2lLU3htUFdVb1hDSXVMMnhsWjJGamVTMXpkSEpsWVcxekxtcHpYQ0lwTEdNOVcxMHNiRDFsS0Z3aWRYUnBiRndpS1N4b1BYSTdiQzVrWldKMVoyeHZaejlvUFd3dVpHVmlkV2RzYjJjb1hDSm5abk0wWENJcE9pOWNYR0puWm5NMFhGeGlMMmt1ZEdWemRDaHVMbVZ1ZGk1T1QwUkZYMFJGUWxWSGZIeGNJbHdpS1NZbUtHZzlablZ1WTNScGIyNG9LWHQyWVhJZ1pUMXNMbVp2Y20xaGRDNWhjSEJzZVNoc0xHRnlaM1Z0Wlc1MGN5azdaVDFjSWtkR1V6UTZJRndpSzJVdWMzQnNhWFFvTDF4Y2JpOHBMbXB2YVc0b1hDSmNYRzVIUmxNME9pQmNJaWtzWTI5dWMyOXNaUzVsY25KdmNpaGxLWDBwTEM5Y1hHSm5abk0wWEZ4aUwya3VkR1Z6ZENodUxtVnVkaTVPVDBSRlgwUkZRbFZIZkh4Y0lsd2lLU1ltYmk1dmJpaGNJbVY0YVhSY0lpeG1kVzVqZEdsdmJpZ3BlMmdvWXlrc1pTaGNJbUZ6YzJWeWRGd2lLUzVsY1hWaGJDaGpMbXhsYm1kMGFDd3dLWDBwTEhRdVpYaHdiM0owY3oxcEtHVW9YQ0l1TDJaekxtcHpYQ0lwS1N4dUxtVnVkaTVVUlZOVVgwZFNRVU5GUmxWTVgwWlRYMGRNVDBKQlRGOVFRVlJEU0NZbUtIUXVaWGh3YjNKMGN6MXBLR0VwS1N4MExtVjRjRzl5ZEhNdVkyeHZjMlU5WVM1amJHOXpaVDFtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnWm5WdVkzUnBiMjRvZEN4dUtYdHlaWFIxY200Z1pTNWpZV3hzS0dFc2RDeG1kVzVqZEdsdmJpaGxLWHRsZkh4ektDa3NYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnYmlZbWJpNWhjSEJzZVNoMGFHbHpMR0Z5WjNWdFpXNTBjeWw5S1gxOUtHRXVZMnh2YzJVcExIUXVaWGh3YjNKMGN5NWpiRzl6WlZONWJtTTlZUzVqYkc5elpWTjVibU05Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUdaMWJtTjBhVzl1S0hRcGUzWmhjaUJ1UFdVdVlYQndiSGtvWVN4aGNtZDFiV1Z1ZEhNcE8zSmxkSFZ5YmlCektDa3NibjE5S0dFdVkyeHZjMlZUZVc1aktYMHBMbU5oYkd3b2RHaHBjeXhsS0Z3aVgzQnliMk5sYzNOY0lpa3BmU3g3WENJdUwyWnpMbXB6WENJNk1UTXNYQ0l1TDJ4bFoyRmplUzF6ZEhKbFlXMXpMbXB6WENJNk1UVXNYQ0l1TDNCdmJIbG1hV3hzY3k1cWMxd2lPakUyTEY5d2NtOWpaWE56T2pJMUxHRnpjMlZ5ZERvMUxHWnpPalFzZFhScGJEbzBOSDFkTERFMU9sdG1kVzVqZEdsdmJpaGxMSFFzYmlsN0tHWjFibU4wYVc5dUtHNHBlMloxYm1OMGFXOXVJSElvWlNsN1puVnVZM1JwYjI0Z2RDaHlMRzhwZTJsbUtDRW9kR2hwY3lCcGJuTjBZVzVqWlc5bUlIUXBLWEpsZEhWeWJpQnVaWGNnZENoeUxHOHBPMmt1WTJGc2JDaDBhR2x6S1R0MllYSWdjejEwYUdsek8zUm9hWE11Y0dGMGFEMXlMSFJvYVhNdVptUTliblZzYkN4MGFHbHpMbkpsWVdSaFlteGxQU0V3TEhSb2FYTXVjR0YxYzJWa1BTRXhMSFJvYVhNdVpteGhaM005WENKeVhDSXNkR2hwY3k1dGIyUmxQVFF6T0N4MGFHbHpMbUoxWm1abGNsTnBlbVU5TmpVMU16WXNiejF2Zkh4N2ZUdG1iM0lvZG1GeUlHRTlUMkpxWldOMExtdGxlWE1vYnlrc2RUMHdMR1k5WVM1c1pXNW5kR2c3ZFR4bU8zVXJLeWw3ZG1GeUlHTTlZVnQxWFR0MGFHbHpXMk5kUFc5YlkxMTlhV1lvZEdocGN5NWxibU52WkdsdVp5WW1kR2hwY3k1elpYUkZibU52WkdsdVp5aDBhR2x6TG1WdVkyOWthVzVuS1N4MmIybGtJREFoUFQxMGFHbHpMbk4wWVhKMEtYdHBaaWhjSW01MWJXSmxjbHdpSVQxMGVYQmxiMllnZEdocGN5NXpkR0Z5ZENsMGFISnZkeUJVZVhCbFJYSnliM0lvWENKemRHRnlkQ0J0ZFhOMElHSmxJR0VnVG5WdFltVnlYQ0lwTzJsbUtIWnZhV1FnTUQwOVBYUm9hWE11Wlc1a0tYUm9hWE11Wlc1a1BURXZNRHRsYkhObElHbG1LRndpYm5WdFltVnlYQ0loUFhSNWNHVnZaaUIwYUdsekxtVnVaQ2wwYUhKdmR5QlVlWEJsUlhKeWIzSW9YQ0psYm1RZ2JYVnpkQ0JpWlNCaElFNTFiV0psY2x3aUtUdHBaaWgwYUdsekxuTjBZWEowUG5Sb2FYTXVaVzVrS1hSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSW5OMFlYSjBJRzExYzNRZ1ltVWdQRDBnWlc1a1hDSXBPM1JvYVhNdWNHOXpQWFJvYVhNdWMzUmhjblI5Y21WMGRYSnVJRzUxYkd3aFBUMTBhR2x6TG1aa1AzWnZhV1FnYmk1dVpYaDBWR2xqYXlobWRXNWpkR2x2YmlncGUzTXVYM0psWVdRb0tYMHBPblp2YVdRZ1pTNXZjR1Z1S0hSb2FYTXVjR0YwYUN4MGFHbHpMbVpzWVdkekxIUm9hWE11Ylc5a1pTeG1kVzVqZEdsdmJpaGxMSFFwZTNKbGRIVnliaUJsUHloekxtVnRhWFFvWENKbGNuSnZjbHdpTEdVcExIWnZhV1FvY3k1eVpXRmtZV0pzWlQwaE1Ta3BPaWh6TG1aa1BYUXNjeTVsYldsMEtGd2liM0JsYmx3aUxIUXBMSFp2YVdRZ2N5NWZjbVZoWkNncEtYMHBmV1oxYm1OMGFXOXVJSElvZEN4dUtYdHBaaWdoS0hSb2FYTWdhVzV6ZEdGdVkyVnZaaUJ5S1NseVpYUjFjbTRnYm1WM0lISW9kQ3h1S1R0cExtTmhiR3dvZEdocGN5a3NkR2hwY3k1d1lYUm9QWFFzZEdocGN5NW1aRDF1ZFd4c0xIUm9hWE11ZDNKcGRHRmliR1U5SVRBc2RHaHBjeTVtYkdGbmN6MWNJbmRjSWl4MGFHbHpMbVZ1WTI5a2FXNW5QVndpWW1sdVlYSjVYQ0lzZEdocGN5NXRiMlJsUFRRek9DeDBhR2x6TG1KNWRHVnpWM0pwZEhSbGJqMHdMRzQ5Ym54OGUzMDdabTl5S0haaGNpQnZQVTlpYW1WamRDNXJaWGx6S0c0cExITTlNQ3hoUFc4dWJHVnVaM1JvTzNNOFlUdHpLeXNwZTNaaGNpQjFQVzliYzEwN2RHaHBjMXQxWFQxdVczVmRmV2xtS0hadmFXUWdNQ0U5UFhSb2FYTXVjM1JoY25RcGUybG1LRndpYm5WdFltVnlYQ0loUFhSNWNHVnZaaUIwYUdsekxuTjBZWEowS1hSb2NtOTNJRlI1Y0dWRmNuSnZjaWhjSW5OMFlYSjBJRzExYzNRZ1ltVWdZU0JPZFcxaVpYSmNJaWs3YVdZb2RHaHBjeTV6ZEdGeWREd3dLWFJvY205M0lHNWxkeUJGY25KdmNpaGNJbk4wWVhKMElHMTFjM1FnWW1VZ1BqMGdlbVZ5YjF3aUtUdDBhR2x6TG5CdmN6MTBhR2x6TG5OMFlYSjBmWFJvYVhNdVluVnplVDBoTVN4MGFHbHpMbDl4ZFdWMVpUMWJYU3h1ZFd4c1BUMDlkR2hwY3k1bVpDWW1LSFJvYVhNdVgyOXdaVzQ5WlM1dmNHVnVMSFJvYVhNdVgzRjFaWFZsTG5CMWMyZ29XM1JvYVhNdVgyOXdaVzRzZEdocGN5NXdZWFJvTEhSb2FYTXVabXhoWjNNc2RHaHBjeTV0YjJSbExIWnZhV1FnTUYwcExIUm9hWE11Wm14MWMyZ29LU2w5Y21WMGRYSnVlMUpsWVdSVGRISmxZVzA2ZEN4WGNtbDBaVk4wY21WaGJUcHlmWDEyWVhJZ2FUMWxLRndpYzNSeVpXRnRYQ0lwTGxOMGNtVmhiVHQwTG1WNGNHOXlkSE05Y24wcExtTmhiR3dvZEdocGN5eGxLRndpWDNCeWIyTmxjM05jSWlrcGZTeDdYM0J5YjJObGMzTTZNalVzYzNSeVpXRnRPalF3ZlYwc01UWTZXMloxYm1OMGFXOXVLR1VzZEN4dUtYc29ablZ1WTNScGIyNG9iaWw3Wm5WdVkzUnBiMjRnY2lobEtYdGpMbWhoYzA5M2JsQnliM0JsY25SNUtGd2lUMTlUV1UxTVNVNUxYQ0lwSmladUxuWmxjbk5wYjI0dWJXRjBZMmdvTDE1Mk1GeGNMalpjWEM1Yk1DMHlYWHhlZGpCY1hDNDFYRnd1THlrbUpta29aU2tzWlM1c2RYUnBiV1Z6Zkh4dktHVXBMR1V1WTJodmQyNDljeWhsTG1Ob2IzZHVLU3hsTG1aamFHOTNiajF6S0dVdVptTm9iM2R1S1N4bExteGphRzkzYmoxektHVXViR05vYjNkdUtTeGxMbU5vYlc5a1BYTW9aUzVqYUcxdlpDa3NaUzVtWTJodGIyUTljeWhsTG1aamFHMXZaQ2tzWlM1c1kyaHRiMlE5Y3lobExteGphRzF2WkNrc1pTNWphRzkzYmxONWJtTTlZU2hsTG1Ob2IzZHVVM2x1WXlrc1pTNW1ZMmh2ZDI1VGVXNWpQV0VvWlM1bVkyaHZkMjVUZVc1aktTeGxMbXhqYUc5M2JsTjVibU05WVNobExteGphRzkzYmxONWJtTXBMR1V1WTJodGIyUlRlVzVqUFhNb1pTNWphRzF2WkZONWJtTXBMR1V1Wm1Ob2JXOWtVM2x1WXoxektHVXVabU5vYlc5a1UzbHVZeWtzWlM1c1kyaHRiMlJUZVc1alBYTW9aUzVzWTJodGIyUlRlVzVqS1N4bExteGphRzF2Wkh4OEtHVXViR05vYlc5a1BXWjFibU4wYVc5dUtHVXNkQ3h5S1h0dUxtNWxlSFJVYVdOcktISXBmU3hsTG14amFHMXZaRk41Ym1NOVpuVnVZM1JwYjI0b0tYdDlLU3hsTG14amFHOTNibng4S0dVdWJHTm9iM2R1UFdaMWJtTjBhVzl1S0dVc2RDeHlMR2twZTI0dWJtVjRkRlJwWTJzb2FTbDlMR1V1YkdOb2IzZHVVM2x1WXoxbWRXNWpkR2x2YmlncGUzMHBMRndpZDJsdU16SmNJajA5UFc0dWNHeGhkR1p2Y20wbUppaGxMbkpsYm1GdFpUMW1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdablZ1WTNScGIyNG9kQ3h1TEhJcGUzWmhjaUJwUFVSaGRHVXVibTkzS0NrN1pTaDBMRzRzWm5WdVkzUnBiMjRnYnloektYdHlaWFIxY200Z2N5WW1LRndpUlVGRFEwVlRYQ0k5UFQxekxtTnZaR1Y4ZkZ3aVJWQkZVazFjSWowOVBYTXVZMjlrWlNrbUprUmhkR1V1Ym05M0tDa3RhVHd4WlRNL1pTaDBMRzRzYnlrNmRtOXBaQ2h5SmlaeUtITXBLWDBwZlgwb1pTNXlaVzVoYldVcEtTeGxMbkpsWVdROVpuVnVZM1JwYjI0b2RDbDdjbVYwZFhKdUlHWjFibU4wYVc5dUtHNHNjaXhwTEc4c2N5eGhLWHQyWVhJZ2RUdHBaaWhoSmlaY0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQmhLWHQyWVhJZ1pqMHdPM1U5Wm5WdVkzUnBiMjRvWXl4c0xHZ3BlM0psZEhWeWJpQmpKaVpjSWtWQlIwRkpUbHdpUFQwOVl5NWpiMlJsSmlabVBERXdQeWhtS3lzc2RDNWpZV3hzS0dVc2JpeHlMR2tzYnl4ekxIVXBLVHAyYjJsa0lHRXVZWEJ3Ykhrb2RHaHBjeXhoY21kMWJXVnVkSE1wZlgxeVpYUjFjbTRnZEM1allXeHNLR1VzYml4eUxHa3NieXh6TEhVcGZYMG9aUzV5WldGa0tTeGxMbkpsWVdSVGVXNWpQV1oxYm1OMGFXOXVLSFFwZTNKbGRIVnliaUJtZFc1amRHbHZiaWh1TEhJc2FTeHZMSE1wZTJadmNpaDJZWElnWVQwd096c3BkSEo1ZTNKbGRIVnliaUIwTG1OaGJHd29aU3h1TEhJc2FTeHZMSE1wZldOaGRHTm9LSFVwZTJsbUtGd2lSVUZIUVVsT1hDSTlQVDExTG1OdlpHVW1KbUU4TVRBcGUyRXJLenRqYjI1MGFXNTFaWDEwYUhKdmR5QjFmWDE5S0dVdWNtVmhaRk41Ym1NcGZXWjFibU4wYVc5dUlHa29aU2w3WlM1c1kyaHRiMlE5Wm5WdVkzUnBiMjRvZEN4dUxISXBlM0k5Y254OGJtOXZjQ3hsTG05d1pXNG9kQ3hqTGs5ZlYxSlBUa3haZkdNdVQxOVRXVTFNU1U1TExHNHNablZ1WTNScGIyNG9kQ3hwS1h0eVpYUjFjbTRnZEQ5MmIybGtJSElvZENrNmRtOXBaQ0JsTG1aamFHMXZaQ2hwTEc0c1puVnVZM1JwYjI0b2RDbDdaUzVqYkc5elpTaHBMR1oxYm1OMGFXOXVLR1VwZTNJb2RIeDhaU2w5S1gwcGZTbDlMR1V1YkdOb2JXOWtVM2x1WXoxbWRXNWpkR2x2YmloMExHNHBlM1poY2lCeUxHazlaUzV2Y0dWdVUzbHVZeWgwTEdNdVQxOVhVazlPVEZsOFl5NVBYMU5aVFV4SlRrc3NiaWtzYnowaE1EdDBjbmw3Y2oxbExtWmphRzF2WkZONWJtTW9hU3h1S1N4dlBTRXhmV1pwYm1Gc2JIbDdhV1lvYnlsMGNubDdaUzVqYkc5elpWTjVibU1vYVNsOVkyRjBZMmdvY3lsN2ZXVnNjMlVnWlM1amJHOXpaVk41Ym1Nb2FTbDljbVYwZFhKdUlISjlmV1oxYm1OMGFXOXVJRzhvWlNsN1l5NW9ZWE5QZDI1UWNtOXdaWEowZVNoY0lrOWZVMWxOVEVsT1Mxd2lLVDhvWlM1c2RYUnBiV1Z6UFdaMWJtTjBhVzl1S0hRc2JpeHlMR2twZTJVdWIzQmxiaWgwTEdNdVQxOVRXVTFNU1U1TExHWjFibU4wYVc5dUtIUXNieWw3Y21WMGRYSnVJR2s5YVh4OGJtOXZjQ3gwUDJrb2RDazZkbTlwWkNCbExtWjFkR2x0WlhNb2J5eHVMSElzWm5WdVkzUnBiMjRvZENsN1pTNWpiRzl6WlNodkxHWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQnBLSFI4ZkdVcGZTbDlLWDBwZlN4bExteDFkR2x0WlhOVGVXNWpQV1oxYm1OMGFXOXVLSFFzYml4eUtYdDJZWElnYVN4dlBXVXViM0JsYmxONWJtTW9kQ3hqTGs5ZlUxbE5URWxPU3lrc2N6MGhNRHQwY25sN2FUMWxMbVoxZEdsdFpYTlRlVzVqS0c4c2JpeHlLU3h6UFNFeGZXWnBibUZzYkhsN2FXWW9jeWwwY25sN1pTNWpiRzl6WlZONWJtTW9ieWw5WTJGMFkyZ29ZU2w3ZldWc2MyVWdaUzVqYkc5elpWTjVibU1vYnlsOWNtVjBkWEp1SUdsOUtUb29aUzVzZFhScGJXVnpQV1oxYm1OMGFXOXVLR1VzZEN4eUxHa3BlMjR1Ym1WNGRGUnBZMnNvYVNsOUxHVXViSFYwYVcxbGMxTjVibU05Wm5WdVkzUnBiMjRvS1h0OUtYMW1kVzVqZEdsdmJpQnpLR1VwZTNKbGRIVnliaUJsUDJaMWJtTjBhVzl1S0hRc2JpeHlMR2twZTNKbGRIVnliaUJsTG1OaGJHd29aaXgwTEc0c2NpeG1kVzVqZEdsdmJpaGxMSFFwZTNVb1pTa21KaWhsUFc1MWJHd3BMR2tvWlN4MEtYMHBmVHBsZldaMWJtTjBhVzl1SUdFb1pTbDdjbVYwZFhKdUlHVS9ablZ1WTNScGIyNG9kQ3h1TEhJcGUzUnllWHR5WlhSMWNtNGdaUzVqWVd4c0tHWXNkQ3h1TEhJcGZXTmhkR05vS0drcGUybG1LQ0YxS0drcEtYUm9jbTkzSUdsOWZUcGxmV1oxYm1OMGFXOXVJSFVvWlNsN2FXWW9JV1VwY21WMGRYSnVJVEE3YVdZb1hDSkZUazlUV1ZOY0lqMDlQV1V1WTI5a1pTbHlaWFIxY200aE1EdDJZWElnZEQwaGJpNW5aWFIxYVdSOGZEQWhQVDF1TG1kbGRIVnBaQ2dwTzNKbGRIVnliaUVvSVhSOGZGd2lSVWxPVmtGTVhDSWhQVDFsTG1OdlpHVW1KbHdpUlZCRlVrMWNJaUU5UFdVdVkyOWtaU2w5ZG1GeUlHWTlaU2hjSWk0dlpuTXVhbk5jSWlrc1l6MWxLRndpWTI5dWMzUmhiblJ6WENJcExHdzliaTVqZDJRc2FEMXVkV3hzTzI0dVkzZGtQV1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJR2g4ZkNob1BXd3VZMkZzYkNodUtTa3NhSDA3ZEhKNWUyNHVZM2RrS0NsOVkyRjBZMmdvY0NsN2ZYWmhjaUJrUFc0dVkyaGthWEk3Ymk1amFHUnBjajFtZFc1amRHbHZiaWhsS1h0b1BXNTFiR3dzWkM1allXeHNLRzRzWlNsOUxIUXVaWGh3YjNKMGN6MXlmU2t1WTJGc2JDaDBhR2x6TEdVb1hDSmZjSEp2WTJWemMxd2lLU2w5TEh0Y0lpNHZabk11YW5OY0lqb3hNeXhmY0hKdlkyVnpjem95TlN4amIyNXpkR0Z1ZEhNNk9IMWRMREUzT2x0bWRXNWpkR2x2YmlobExIUXNiaWw3Ymk1eVpXRmtQV1oxYm1OMGFXOXVLR1VzZEN4dUxISXNhU2w3ZG1GeUlHOHNjeXhoUFRncWFTMXlMVEVzZFQwb01UdzhZU2t0TVN4bVBYVStQakVzWXowdE55eHNQVzQvYVMweE9qQXNhRDF1UHkweE9qRXNjRDFsVzNRcmJGMDdabTl5S0d3clBXZ3NiejF3SmlneFBEd3RZeWt0TVN4d1BqNDlMV01zWXlzOVlUdGpQakE3YnoweU5UWXFieXRsVzNRcmJGMHNiQ3M5YUN4akxUMDRLVHRtYjNJb2N6MXZKaWd4UER3dFl5a3RNU3h2UGo0OUxXTXNZeXM5Y2p0alBqQTdjejB5TlRZcWN5dGxXM1FyYkYwc2JDczlhQ3hqTFQwNEtUdHBaaWd3UFQwOWJ5bHZQVEV0Wmp0bGJITmxlMmxtS0c4OVBUMTFLWEpsZEhWeWJpQnpQMDVoVGpvb2NEOHRNVG94S1Nvb01TOHdLVHR6S3oxTllYUm9MbkJ2ZHlneUxISXBMRzh0UFdaOWNtVjBkWEp1S0hBL0xURTZNU2txY3lwTllYUm9MbkJ2ZHlneUxHOHRjaWw5TEc0dWQzSnBkR1U5Wm5WdVkzUnBiMjRvWlN4MExHNHNjaXhwTEc4cGUzWmhjaUJ6TEdFc2RTeG1QVGdxYnkxcExURXNZejBvTVR3OFppa3RNU3hzUFdNK1BqRXNhRDB5TXowOVBXay9UV0YwYUM1d2IzY29NaXd0TWpRcExVMWhkR2d1Y0c5M0tESXNMVGMzS1Rvd0xIQTljajh3T204dE1TeGtQWEkvTVRvdE1TeG5QWFE4TUh4OE1EMDlQWFFtSmpFdmREd3dQekU2TUR0bWIzSW9kRDFOWVhSb0xtRmljeWgwS1N4cGMwNWhUaWgwS1h4OGREMDlQVEV2TUQ4b1lUMXBjMDVoVGloMEtUOHhPakFzY3oxaktUb29jejFOWVhSb0xtWnNiMjl5S0UxaGRHZ3ViRzluS0hRcEwwMWhkR2d1VEU0eUtTeDBLaWgxUFUxaGRHZ3VjRzkzS0RJc0xYTXBLVHd4SmlZb2N5MHRMSFVxUFRJcExIUXJQWE1yYkQ0OU1UOW9MM1U2YUNwTllYUm9MbkJ2ZHlneUxERXRiQ2tzZENwMVBqMHlKaVlvY3lzckxIVXZQVElwTEhNcmJENDlZejhvWVQwd0xITTlZeWs2Y3l0c1BqMHhQeWhoUFNoMEtuVXRNU2txVFdGMGFDNXdiM2NvTWl4cEtTeHpLejFzS1Rvb1lUMTBLazFoZEdndWNHOTNLRElzYkMweEtTcE5ZWFJvTG5CdmR5Z3lMR2twTEhNOU1Da3BPMmsrUFRnN1pWdHVLM0JkUFRJMU5TWmhMSEFyUFdRc1lTODlNalUyTEdrdFBUZ3BPMlp2Y2loelBYTThQR2w4WVN4bUt6MXBPMlkrTUR0bFcyNHJjRjA5TWpVMUpuTXNjQ3M5WkN4ekx6MHlOVFlzWmkwOU9DazdaVnR1SzNBdFpGMThQVEV5T0NwbmZYMHNlMzFkTERFNE9sdG1kVzVqZEdsdmJpaGxMSFFzYmlsN0lXWjFibU4wYVc5dUtDbDdablZ1WTNScGIyNGdaU2gwTEhJcGUzWmhjaUJwUFhSb2FYTWdhVzV6ZEdGdVkyVnZaaUJsUDNSb2FYTTZianRwWmlocExuSmxjMlYwS0hJcExGd2ljM1J5YVc1blhDSTlQWFI1Y0dWdlppQjBKaVowTG14bGJtZDBhRDR3SmlacExtaGhjMmdvZENrc2FTRTlQWFJvYVhNcGNtVjBkWEp1SUdsOWRtRnlJRzQ3WlM1d2NtOTBiM1I1Y0dVdWFHRnphRDFtZFc1amRHbHZiaWhsS1h0MllYSWdkQ3h1TEhJc2FTeHZPM04zYVhSamFDaHZQV1V1YkdWdVozUm9MSFJvYVhNdWJHVnVLejF2TEc0OWRHaHBjeTVyTVN4eVBUQXNkR2hwY3k1eVpXMHBlMk5oYzJVZ01EcHVYajF2UG5JL05qVTFNelVtWlM1amFHRnlRMjlrWlVGMEtISXJLeWs2TUR0allYTmxJREU2Ymw0OWJ6NXlQeWcyTlRVek5TWmxMbU5vWVhKRGIyUmxRWFFvY2lzcktTazhQRGc2TUR0allYTmxJREk2Ymw0OWJ6NXlQeWcyTlRVek5TWmxMbU5vWVhKRGIyUmxRWFFvY2lzcktTazhQREUyT2pBN1kyRnpaU0F6T201ZVBXOCtjajhvTWpVMUptVXVZMmhoY2tOdlpHVkJkQ2h5S1NrOFBESTBPakFzYmw0OWJ6NXlQeWcyTlRJNE1DWmxMbU5vWVhKRGIyUmxRWFFvY2lzcktTaytQamc2TUgxcFppaDBhR2x6TG5KbGJUMXZLM1JvYVhNdWNtVnRKak1zYnkwOWRHaHBjeTV5Wlcwc2J6NHdLWHRtYjNJb2REMTBhR2x6TG1neE96c3BlMmxtS0c0OU1URTJNREVxYmlzek5ETXlPVEEyTnpVeUtpZzJOVFV6TlNadUtTWTBNamswT1RZM01qazFMRzQ5Ymp3OE1UVjhiajQrUGpFM0xHNDlNVE0zTVRVcWJpczBOakU0TXpJeE9USXFLRFkxTlRNMUptNHBKalF5T1RRNU5qY3lPVFVzZEY0OWJpeDBQWFE4UERFemZIUStQajR4T1N4MFBUVXFkQ3N6T0RZME1qa3lNVGsySmpReU9UUTVOamN5T1RVc2NqNDlieWxpY21WaGF6dHVQVFkxTlRNMUptVXVZMmhoY2tOdlpHVkJkQ2h5S3lzcFhpZzJOVFV6TlNabExtTm9ZWEpEYjJSbFFYUW9jaXNyS1NrOFBEaGVLRFkxTlRNMUptVXVZMmhoY2tOdlpHVkJkQ2h5S3lzcEtUdzhNVFlzYVQxbExtTm9ZWEpEYjJSbFFYUW9jaXNyS1N4dVhqMG9NalUxSm1rcFBEd3lORjRvTmpVeU9EQW1hU2srUGpoOWMzZHBkR05vS0c0OU1DeDBhR2x6TG5KbGJTbDdZMkZ6WlNBek9tNWVQU2cyTlRVek5TWmxMbU5vWVhKRGIyUmxRWFFvY2lzeUtTazhQREUyTzJOaGMyVWdNanB1WGowb05qVTFNelVtWlM1amFHRnlRMjlrWlVGMEtISXJNU2twUER3NE8yTmhjMlVnTVRwdVhqMDJOVFV6TlNabExtTm9ZWEpEYjJSbFFYUW9jaWw5ZEdocGN5NW9NVDEwZlhKbGRIVnliaUIwYUdsekxtc3hQVzRzZEdocGMzMHNaUzV3Y205MGIzUjVjR1V1Y21WemRXeDBQV1oxYm1OMGFXOXVLQ2w3ZG1GeUlHVXNkRHR5WlhSMWNtNGdaVDEwYUdsekxtc3hMSFE5ZEdocGN5NW9NU3hsUGpBbUppaGxQVEV4TmpBeEttVXJNelF6TWprd05qYzFNaW9vTmpVMU16VW1aU2ttTkRJNU5EazJOekk1TlN4bFBXVThQREUxZkdVK1BqNHhOeXhsUFRFek56RTFLbVVyTkRZeE9ETXlNVGt5S2lnMk5UVXpOU1psS1NZME1qazBPVFkzTWprMUxIUmVQV1VwTEhSZVBYUm9hWE11YkdWdUxIUmVQWFErUGo0eE5peDBQVFV4T0RFNUtuUXJNakkwTmpjM01EWTRPQ29vTmpVMU16VW1kQ2ttTkRJNU5EazJOekk1TlN4MFhqMTBQajQrTVRNc2REMDBORFU1TnlwMEt6TXlOalkwTkRVek1USXFLRFkxTlRNMUpuUXBKalF5T1RRNU5qY3lPVFVzZEY0OWRENCtQakUyTEhRK1BqNHdmU3hsTG5CeWIzUnZkSGx3WlM1eVpYTmxkRDFtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnZEdocGN5NW9NVDFjSW01MWJXSmxjbHdpUFQxMGVYQmxiMllnWlQ5bE9qQXNkR2hwY3k1eVpXMDlkR2hwY3k1ck1UMTBhR2x6TG14bGJqMHdMSFJvYVhOOUxHNDlibVYzSUdVc1hDSjFibVJsWm1sdVpXUmNJaUU5ZEhsd1pXOW1JSFEvZEM1bGVIQnZjblJ6UFdVNmRHaHBjeTVOZFhKdGRYSklZWE5vTXoxbGZTZ3BmU3g3ZlYwc01UazZXMloxYm1OMGFXOXVLR1VzZEN4dUtYdGNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUJQWW1wbFkzUXVZM0psWVhSbFAzUXVaWGh3YjNKMGN6MW1kVzVqZEdsdmJpaGxMSFFwZTJVdWMzVndaWEpmUFhRc1pTNXdjbTkwYjNSNWNHVTlUMkpxWldOMExtTnlaV0YwWlNoMExuQnliM1J2ZEhsd1pTeDdZMjl1YzNSeWRXTjBiM0k2ZTNaaGJIVmxPbVVzWlc1MWJXVnlZV0pzWlRvaE1TeDNjbWwwWVdKc1pUb2hNQ3hqYjI1bWFXZDFjbUZpYkdVNklUQjlmU2w5T25RdVpYaHdiM0owY3oxbWRXNWpkR2x2YmlobExIUXBlMlV1YzNWd1pYSmZQWFE3ZG1GeUlHNDlablZ1WTNScGIyNG9LWHQ5TzI0dWNISnZkRzkwZVhCbFBYUXVjSEp2ZEc5MGVYQmxMR1V1Y0hKdmRHOTBlWEJsUFc1bGR5QnVMR1V1Y0hKdmRHOTBlWEJsTG1OdmJuTjBjblZqZEc5eVBXVjlmU3g3ZlYwc01qQTZXMloxYm1OMGFXOXVLR1VzZEN4dUtYdDBMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJU2h1ZFd4c1BUMWxmSHdoS0dVdVgybHpRblZtWm1WeWZIeGxMbU52Ym5OMGNuVmpkRzl5SmlaY0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQmxMbU52Ym5OMGNuVmpkRzl5TG1selFuVm1abVZ5SmlabExtTnZibk4wY25WamRHOXlMbWx6UW5WbVptVnlLR1VwS1NsOWZTeDdmVjBzTWpFNlcyWjFibU4wYVc5dUtHVXNkQ3h1S1h0MllYSWdjajE3ZlM1MGIxTjBjbWx1Wnp0MExtVjRjRzl5ZEhNOVFYSnlZWGt1YVhOQmNuSmhlWHg4Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1WENKYmIySnFaV04wSUVGeWNtRjVYVndpUFQxeUxtTmhiR3dvWlNsOWZTeDdmVjBzTWpJNlcyWjFibU4wYVc5dUtHVXNkQ3h1S1hzb1puVnVZM1JwYjI0b2RDbDdLR1oxYm1OMGFXOXVLQ2w3ZG1GeUlISXNhU3h2TEhNc1lTeDFMR1lzWXl4c0xHZ3NjQ3hrTEdjc2VTeGZQV1oxYm1OMGFXOXVLR1VzZENsN1puVnVZM1JwYjI0Z2JpZ3BlM1JvYVhNdVkyOXVjM1J5ZFdOMGIzSTlaWDFtYjNJb2RtRnlJSElnYVc0Z2RDbDJMbU5oYkd3b2RDeHlLU1ltS0dWYmNsMDlkRnR5WFNrN2NtVjBkWEp1SUc0dWNISnZkRzkwZVhCbFBYUXVjSEp2ZEc5MGVYQmxMR1V1Y0hKdmRHOTBlWEJsUFc1bGR5QnVMR1V1WDE5emRYQmxjbDlmUFhRdWNISnZkRzkwZVhCbExHVjlMSFk5ZTMwdWFHRnpUM2R1VUhKdmNHVnlkSGs3WnoxbEtGd2ljR0YwYUZ3aUtTeGtQV1VvWENKbWMxd2lLU3h3UFdVb1hDSmxkbVZ1ZEhOY0lpa3NlVDFsS0Z3aWQzSnBkR1V0Wm1sc1pTMWhkRzl0YVdOY0lpa3VjM2x1WXl4cFBWd2lMUzB0TGtWTlVGUlpYMU5VVWtsT1J5NHRMUzFjSWl4bVBXWjFibU4wYVc5dUtHVXBlM1poY2lCMExHNHNjaXhwTEc4N1ptOXlLR2s5WkM1eVpXRmtaR2x5VTNsdVl5aGxLU3h2UFZ0ZExIUTlNQ3h1UFdrdWJHVnVaM1JvTzNROGJqdDBLeXNwY2oxcFczUmRMRzh1Y0hWemFDaHNLR2N1YW05cGJpaGxMSElwS1NrN2NtVjBkWEp1SUc5OUxHdzlablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJR1F1YzNSaGRGTjVibU1vWlNrdWFYTkVhWEpsWTNSdmNua29LVDhvWmlobEtTeGtMbkp0WkdseVUzbHVZeWhsS1NrNlpDNTFibXhwYm10VGVXNWpLR1VwZlN4alBXWjFibU4wYVc5dUtHVXBlM1poY2lCME8zSmxkSFZ5YmlCMFBWd2lYQ0k5UFQxbFAyazZaUzUwYjFOMGNtbHVaeWdwZlN4aFBXWjFibU4wYVc5dUtHVXBlMloxYm1OMGFXOXVJSFFvWlNsN2RHaHBjeTV0WlhOellXZGxQVzUxYkd3aFBXVS9aVHBjSWxWdWEyNXZkMjRnWlhKeWIzSXVYQ0lzYm5Wc2JDRTlSWEp5YjNJdVkyRndkSFZ5WlZOMFlXTnJWSEpoWTJVbUprVnljbTl5TG1OaGNIUjFjbVZUZEdGamExUnlZV05sS0hSb2FYTXNkR2hwY3k1amIyNXpkSEoxWTNSdmNpa3NkR2hwY3k1dVlXMWxQWFJvYVhNdVkyOXVjM1J5ZFdOMGIzSXVibUZ0WlgxeVpYUjFjbTRnWHloMExHVXBMSFF1Y0hKdmRHOTBlWEJsTG5SdlUzUnlhVzVuUFdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1SUhSb2FYTXVibUZ0WlN0Y0lqb2dYQ0lyZEdocGN5NXRaWE56WVdkbGZTeDBmU2hGY25KdmNpa3NkVDFtZFc1amRHbHZiaWdwZTJaMWJtTjBhVzl1SUdVb1pTeDBMRzRzY2l4cEtYdDBhR2x6TG10bGVUMWxMSFJvYVhNdWIyeGtWbUZzZFdVOWRDeDBhR2x6TG01bGQxWmhiSFZsUFc0c2RHaHBjeTUxY213OWNpeDBhR2x6TG5OMGIzSmhaMlZCY21WaFBXNTFiR3doUFdrL2FUcGNJbXh2WTJGc1UzUnZjbUZuWlZ3aWZYSmxkSFZ5YmlCbGZTZ3BMSE05Wm5WdVkzUnBiMjRvS1h0bWRXNWpkR2x2YmlCbEtIUXNiaWw3YVdZb2RHaHBjeTVyWlhrOWRDeDBhR2x6TG1sdVpHVjRQVzRzSVNoMGFHbHpJR2x1YzNSaGJtTmxiMllnWlNrcGNtVjBkWEp1SUc1bGR5QmxLSFJvYVhNdWEyVjVMSFJvYVhNdWFXNWtaWGdwZlhKbGRIVnliaUJsZlNncExHZzlablZ1WTNScGIyNG9LWHQyWVhJZ1pUdHlaWFIxY200Z1pUMW1kVzVqZEdsdmJpZ3BlMzBzWlM1d2NtOTBiM1I1Y0dVOVQySnFaV04wTG1OeVpXRjBaU2h1ZFd4c0tTeHVaWGNnWlgwc2J6MW1kVzVqZEdsdmJpaGxLWHRtZFc1amRHbHZiaUJ1S0dVc2FTbDdjbVYwZFhKdUlIUm9hWE11WDJ4dlkyRjBhVzl1UFdVc2RHaHBjeTV4ZFc5MFlUMXVkV3hzSVQxcFAyazZOVEkwTWpnNE1DeDBhR2x6SUdsdWMzUmhibU5sYjJZZ2JqOG9kR2hwY3k1ZmJHOWpZWFJwYjI0OVp5NXlaWE52YkhabEtIUm9hWE11WDJ4dlkyRjBhVzl1S1N4dWRXeHNJVDF5VzNSb2FYTXVYMnh2WTJGMGFXOXVYVDl5VzNSb2FYTXVYMnh2WTJGMGFXOXVYVG9vZEdocGN5NXNaVzVuZEdnOU1DeDBhR2x6TGw5aWVYUmxjMGx1VlhObFBUQXNkR2hwY3k1ZmEyVjVjejFiWFN4MGFHbHpMbDl0WlhSaFMyVjVUV0Z3UFdnb0tTeDBhR2x6TGw5bGRtVnVkRlZ5YkQxY0luQnBaRHBjSWl0MExuQnBaQ3gwYUdsekxsOXBibWwwS0Nrc2RHaHBjeTVmVVZWUFZFRmZSVmhEUlVWRVJVUmZSVkpTUFdFc2NsdDBhR2x6TGw5c2IyTmhkR2x2YmwwOWRHaHBjeXh5VzNSb2FYTXVYMnh2WTJGMGFXOXVYU2twT201bGR5QnVLSFJvYVhNdVgyeHZZMkYwYVc5dUxIUm9hWE11Y1hWdmRHRXBmWFpoY2lCeU8zSmxkSFZ5YmlCZktHNHNaU2tzY2oxN2ZTeHVMbkJ5YjNSdmRIbHdaUzVmYVc1cGREMW1kVzVqZEdsdmJpZ3BlM1poY2lCbExIUXNiaXh5TEdrc2J5eGhMSFU3ZEhKNWUybG1LSFU5WkM1emRHRjBVM2x1WXloMGFHbHpMbDlzYjJOaGRHbHZiaWtzYm5Wc2JDRTlkU1ltSVhVdWFYTkVhWEpsWTNSdmNua29LU2wwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0pCSUdacGJHVWdaWGhwYzNSeklHRjBJSFJvWlNCc2IyTmhkR2x2YmlBblhDSXJkR2hwY3k1ZmJHOWpZWFJwYjI0clhDSW5JSGRvWlc0Z2RISjVhVzVuSUhSdklHTnlaV0YwWlM5dmNHVnVJR3h2WTJGc1UzUnZjbUZuWlZ3aUtUdG1iM0lvZEdocGN5NWZZbmwwWlhOSmJsVnpaVDB3TEhSb2FYTXViR1Z1WjNSb1BUQXNiajFrTG5KbFlXUmthWEpUZVc1aktIUm9hWE11WDJ4dlkyRjBhVzl1S1N4cFBYSTlNQ3hoUFc0dWJHVnVaM1JvTzNJOFlUdHBQU3NyY2lsdlBXNWJhVjBzZEQxa1pXTnZaR1ZWVWtsRGIyMXdiMjVsYm5Rb2J5a3NkR2hwY3k1ZmEyVjVjeTV3ZFhOb0tIUXBMR1U5Ym1WM0lITW9ieXhwS1N4MGFHbHpMbDl0WlhSaFMyVjVUV0Z3VzNSZFBXVXNkVDEwYUdsekxsOW5aWFJUZEdGMEtHOHBMRzUxYkd3aFBTaHVkV3hzSVQxMVAzVXVjMmw2WlRwMmIybGtJREFwSmlZb1pTNXphWHBsUFhVdWMybDZaU3gwYUdsekxsOWllWFJsYzBsdVZYTmxLejExTG5OcGVtVXBPM1JvYVhNdWJHVnVaM1JvUFc0dWJHVnVaM1JvZldOaGRHTm9LR1lwZTJRdWJXdGthWEpUZVc1aktIUm9hWE11WDJ4dlkyRjBhVzl1S1gxOUxHNHVjSEp2ZEc5MGVYQmxMbk5sZEVsMFpXMDlablZ1WTNScGIyNG9aU3gwS1h0MllYSWdiaXh5TEdrc2J5eG1MR3dzYUN4a0xGOHNkanRwWmlobVBYQXVSWFpsYm5SRmJXbDBkR1Z5TG14cGMzUmxibVZ5UTI5MWJuUW9kR2hwY3l4Y0luTjBiM0poWjJWY0lpa3NaRDF1ZFd4c0xHWW1KaWhrUFhSb2FYTXVaMlYwU1hSbGJTaGxLU2tzWlQxaktHVXBMRzQ5Wlc1amIyUmxWVkpKUTI5dGNHOXVaVzUwS0dVcExHODlaeTVxYjJsdUtIUm9hWE11WDJ4dlkyRjBhVzl1TEc0cExGODlkQzUwYjFOMGNtbHVaeWdwTEhZOVh5NXNaVzVuZEdnc2JEMTBhR2x6TGw5dFpYUmhTMlY1VFdGd1cyVmRMR2s5SVNGc0xHZzlhVDlzTG5OcGVtVTZNQ3gwYUdsekxsOWllWFJsYzBsdVZYTmxMV2dyZGo1MGFHbHpMbkYxYjNSaEtYUm9jbTkzSUc1bGR5QmhPMmxtS0hrb2J5eGZMRndpZFhSbU9Gd2lLU3hwZkh3b2JEMXVaWGNnY3lodUxIUm9hWE11WDJ0bGVYTXVjSFZ6YUNobEtTMHhLU3hzTG5OcGVtVTlkaXgwYUdsekxsOXRaWFJoUzJWNVRXRndXMlZkUFd3c2RHaHBjeTVzWlc1bmRHZ3JQVEVzZEdocGN5NWZZbmwwWlhOSmJsVnpaU3M5ZGlrc1ppbHlaWFIxY200Z2NqMXVaWGNnZFNobExHUXNkQ3gwYUdsekxsOWxkbVZ1ZEZWeWJDa3NkR2hwY3k1bGJXbDBLRndpYzNSdmNtRm5aVndpTEhJcGZTeHVMbkJ5YjNSdmRIbHdaUzVuWlhSSmRHVnRQV1oxYm1OMGFXOXVLR1VwZTNaaGNpQjBMRzQ3Y21WMGRYSnVJR1U5WXlobEtTeHVQWFJvYVhNdVgyMWxkR0ZMWlhsTllYQmJaVjBzYmo4b2REMW5MbXB2YVc0b2RHaHBjeTVmYkc5allYUnBiMjRzYmk1clpYa3BMR1F1Y21WaFpFWnBiR1ZUZVc1aktIUXNYQ0oxZEdZNFhDSXBLVHB1ZFd4c2ZTeHVMbkJ5YjNSdmRIbHdaUzVmWjJWMFUzUmhkRDFtZFc1amRHbHZiaWhsS1h0MllYSWdkRHRsUFdNb1pTa3NkRDFuTG1wdmFXNG9kR2hwY3k1ZmJHOWpZWFJwYjI0c1pXNWpiMlJsVlZKSlEyOXRjRzl1Wlc1MEtHVXBLVHQwY25sN2NtVjBkWEp1SUdRdWMzUmhkRk41Ym1Nb2RDbDlZMkYwWTJnb2JpbDdjbVYwZFhKdUlHNTFiR3g5ZlN4dUxuQnliM1J2ZEhsd1pTNXlaVzF2ZG1WSmRHVnRQV1oxYm1OMGFXOXVLR1VwZTNaaGNpQjBMRzRzY2l4cExHOHNjeXhoTEdZc2FEdHBaaWhsUFdNb1pTa3NjejEwYUdsekxsOXRaWFJoUzJWNVRXRndXMlZkS1h0eVBYQXVSWFpsYm5SRmJXbDBkR1Z5TG14cGMzUmxibVZ5UTI5MWJuUW9kR2hwY3l4Y0luTjBiM0poWjJWY0lpa3NZVDF1ZFd4c0xISW1KaWhoUFhSb2FYTXVaMlYwU1hSbGJTaGxLU2tzWkdWc1pYUmxJSFJvYVhNdVgyMWxkR0ZMWlhsTllYQmJaVjBzZEdocGN5NXNaVzVuZEdndFBURXNkR2hwY3k1ZllubDBaWE5KYmxWelpTMDljeTV6YVhwbExHNDlaeTVxYjJsdUtIUm9hWE11WDJ4dlkyRjBhVzl1TEhNdWEyVjVLU3gwYUdsekxsOXJaWGx6TG5Od2JHbGpaU2h6TG1sdVpHVjRMREVwTEdZOWRHaHBjeTVmYldWMFlVdGxlVTFoY0R0bWIzSW9hU0JwYmlCbUtXZzlabHRwWFN4dlBYUm9hWE11WDIxbGRHRkxaWGxOWVhCYmFWMHNieTVwYm1SbGVENXpMbWx1WkdWNEppWW9ieTVwYm1SbGVDMDlNU2s3YVdZb2JDaHVLU3h5S1hKbGRIVnliaUIwUFc1bGR5QjFLR1VzWVN4dWRXeHNMSFJvYVhNdVgyVjJaVzUwVlhKc0tTeDBhR2x6TG1WdGFYUW9YQ0p6ZEc5eVlXZGxYQ0lzZENsOWZTeHVMbkJ5YjNSdmRIbHdaUzVyWlhrOVpuVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlIUm9hWE11WDJ0bGVYTmJaVjE5TEc0dWNISnZkRzkwZVhCbExtTnNaV0Z5UFdaMWJtTjBhVzl1S0NsN2RtRnlJR1U3YVdZb1ppaDBhR2x6TGw5c2IyTmhkR2x2Ymlrc2RHaHBjeTVmYldWMFlVdGxlVTFoY0Qxb0tDa3NkR2hwY3k1ZmEyVjVjejFiWFN4MGFHbHpMbXhsYm1kMGFEMHdMSFJvYVhNdVgySjVkR1Z6U1c1VmMyVTlNQ3h3TGtWMlpXNTBSVzFwZEhSbGNpNXNhWE4wWlc1bGNrTnZkVzUwS0hSb2FYTXNYQ0p6ZEc5eVlXZGxYQ0lwS1hKbGRIVnliaUJsUFc1bGR5QjFLRzUxYkd3c2JuVnNiQ3h1ZFd4c0xIUm9hWE11WDJWMlpXNTBWWEpzS1N4MGFHbHpMbVZ0YVhRb1hDSnpkRzl5WVdkbFhDSXNaU2w5TEc0dWNISnZkRzkwZVhCbExsOW5aWFJDZVhSbGMwbHVWWE5sUFdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1SUhSb2FYTXVYMko1ZEdWelNXNVZjMlY5TEc0dWNISnZkRzkwZVhCbExsOWtaV3hsZEdWTWIyTmhkR2x2YmoxbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCa1pXeGxkR1VnY2x0MGFHbHpMbDlzYjJOaGRHbHZibDBzYkNoMGFHbHpMbDlzYjJOaGRHbHZiaWtzZEdocGN5NWZiV1YwWVV0bGVVMWhjRDE3ZlN4MGFHbHpMbDlyWlhselBWdGRMSFJvYVhNdWJHVnVaM1JvUFRBc2RHaHBjeTVmWW5sMFpYTkpibFZ6WlQwd2ZTeHVmU2h3TGtWMlpXNTBSVzFwZEhSbGNpa3NjajFtZFc1amRHbHZiaWhsS1h0bWRXNWpkR2x2YmlCMEtDbDdjbVYwZFhKdUlIUXVYMTl6ZFhCbGNsOWZMbU52Ym5OMGNuVmpkRzl5TG1Gd2NHeDVLSFJvYVhNc1lYSm5kVzFsYm5SektYMXlaWFIxY200Z1h5aDBMR1VwTEhRdWNISnZkRzkwZVhCbExuTmxkRWwwWlcwOVpuVnVZM1JwYjI0b1pTeHVLWHQyWVhJZ2NqdHlaWFIxY200Z2NqMUtVMDlPTG5OMGNtbHVaMmxtZVNodUtTeDBMbDlmYzNWd1pYSmZYeTV6WlhSSmRHVnRMbU5oYkd3b2RHaHBjeXhsTEhJcGZTeDBMbkJ5YjNSdmRIbHdaUzVuWlhSSmRHVnRQV1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJLVTA5T0xuQmhjbk5sS0hRdVgxOXpkWEJsY2w5ZkxtZGxkRWwwWlcwdVkyRnNiQ2gwYUdsekxHVXBLWDBzZEgwb2J5a3NiaTVNYjJOaGJGTjBiM0poWjJVOWJ5eHVMa3BUVDA1VGRHOXlZV2RsUFhJc2JpNVJWVTlVUVY5RldFTkZSVVJGUkY5RlVsSTlZWDBwTG1OaGJHd29kR2hwY3lsOUtTNWpZV3hzS0hSb2FYTXNaU2hjSWw5d2NtOWpaWE56WENJcEtYMHNlMTl3Y205alpYTnpPakkxTEdWMlpXNTBjem94TWl4bWN6bzBMSEJoZEdnNk1qTXNYQ0ozY21sMFpTMW1hV3hsTFdGMGIyMXBZMXdpT2pRMWZWMHNNak02VzJaMWJtTjBhVzl1S0dVc2RDeHVLWHNvWm5WdVkzUnBiMjRvWlNsN1puVnVZM1JwYjI0Z2RDaGxMSFFwZTJadmNpaDJZWElnYmowd0xISTlaUzVzWlc1bmRHZ3RNVHR5UGowd08zSXRMU2w3ZG1GeUlHazlaVnR5WFR0Y0lpNWNJajA5UFdrL1pTNXpjR3hwWTJVb2Npd3hLVHBjSWk0dVhDSTlQVDFwUHlobExuTndiR2xqWlNoeUxERXBMRzRyS3lrNmJpWW1LR1V1YzNCc2FXTmxLSElzTVNrc2JpMHRLWDFwWmloMEtXWnZjaWc3YmkwdE8yNHBaUzUxYm5Ob2FXWjBLRndpTGk1Y0lpazdjbVYwZFhKdUlHVjlablZ1WTNScGIyNGdjaWhsTEhRcGUybG1LR1V1Wm1sc2RHVnlLWEpsZEhWeWJpQmxMbVpwYkhSbGNpaDBLVHRtYjNJb2RtRnlJRzQ5VzEwc2NqMHdPM0k4WlM1c1pXNW5kR2c3Y2lzcktYUW9aVnR5WFN4eUxHVXBKaVp1TG5CMWMyZ29aVnR5WFNrN2NtVjBkWEp1SUc1OWRtRnlJR2s5TDE0b1hGd3ZQM3dwS0Z0Y1hITmNYRk5kS2o4cEtDZy9PbHhjTG5zeExESjlmRnRlWEZ3dlhTcy9mQ2tvWEZ3dVcxNHVYRnd2WFNwOEtTa29QenBiWEZ3dlhTb3BKQzhzYnoxbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z2FTNWxlR1ZqS0dVcExuTnNhV05sS0RFcGZUdHVMbkpsYzI5c2RtVTlablZ1WTNScGIyNG9LWHRtYjNJb2RtRnlJRzQ5WENKY0lpeHBQU0V4TEc4OVlYSm5kVzFsYm5SekxteGxibWQwYUMweE8yOCtQUzB4SmlZaGFUdHZMUzBwZTNaaGNpQnpQVzgrUFRBL1lYSm5kVzFsYm5SelcyOWRPbVV1WTNka0tDazdhV1lvWENKemRISnBibWRjSWlFOWRIbHdaVzltSUhNcGRHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGNJa0Z5WjNWdFpXNTBjeUIwYnlCd1lYUm9MbkpsYzI5c2RtVWdiWFZ6ZENCaVpTQnpkSEpwYm1kelhDSXBPM01tSmlodVBYTXJYQ0l2WENJcmJpeHBQVndpTDF3aVBUMDljeTVqYUdGeVFYUW9NQ2twZlhKbGRIVnliaUJ1UFhRb2NpaHVMbk53YkdsMEtGd2lMMXdpS1N4bWRXNWpkR2x2YmlobEtYdHlaWFIxY200aElXVjlLU3doYVNrdWFtOXBiaWhjSWk5Y0lpa3NLR2svWENJdlhDSTZYQ0pjSWlrcmJueDhYQ0l1WENKOUxHNHVibTl5YldGc2FYcGxQV1oxYm1OMGFXOXVLR1VwZTNaaGNpQnBQVzR1YVhOQlluTnZiSFYwWlNobEtTeHZQVndpTDF3aVBUMDljeWhsTEMweEtUdHlaWFIxY200Z1pUMTBLSElvWlM1emNHeHBkQ2hjSWk5Y0lpa3NablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJU0ZsZlNrc0lXa3BMbXB2YVc0b1hDSXZYQ0lwTEdWOGZHbDhmQ2hsUFZ3aUxsd2lLU3hsSmladkppWW9aU3M5WENJdlhDSXBMQ2hwUDF3aUwxd2lPbHdpWENJcEsyVjlMRzR1YVhOQlluTnZiSFYwWlQxbWRXNWpkR2x2YmlobEtYdHlaWFIxY201Y0lpOWNJajA5UFdVdVkyaGhja0YwS0RBcGZTeHVMbXB2YVc0OVpuVnVZM1JwYjI0b0tYdDJZWElnWlQxQmNuSmhlUzV3Y205MGIzUjVjR1V1YzJ4cFkyVXVZMkZzYkNoaGNtZDFiV1Z1ZEhNc01DazdjbVYwZFhKdUlHNHVibTl5YldGc2FYcGxLSElvWlN4bWRXNWpkR2x2YmlobExIUXBlMmxtS0Z3aWMzUnlhVzVuWENJaFBYUjVjR1Z2WmlCbEtYUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pCY21kMWJXVnVkSE1nZEc4Z2NHRjBhQzVxYjJsdUlHMTFjM1FnWW1VZ2MzUnlhVzVuYzF3aUtUdHlaWFIxY200Z1pYMHBMbXB2YVc0b1hDSXZYQ0lwS1gwc2JpNXlaV3hoZEdsMlpUMW1kVzVqZEdsdmJpaGxMSFFwZTJaMWJtTjBhVzl1SUhJb1pTbDdabTl5S0haaGNpQjBQVEE3ZER4bExteGxibWQwYUNZbVhDSmNJajA5UFdWYmRGMDdkQ3NyS1R0bWIzSW9kbUZ5SUc0OVpTNXNaVzVuZEdndE1UdHVQajB3SmlaY0lsd2lQVDA5WlZ0dVhUdHVMUzBwTzNKbGRIVnliaUIwUG00L1cxMDZaUzV6YkdsalpTaDBMRzR0ZENzeEtYMWxQVzR1Y21WemIyeDJaU2hsS1M1emRXSnpkSElvTVNrc2REMXVMbkpsYzI5c2RtVW9kQ2t1YzNWaWMzUnlLREVwTzJadmNpaDJZWElnYVQxeUtHVXVjM0JzYVhRb1hDSXZYQ0lwS1N4dlBYSW9kQzV6Y0d4cGRDaGNJaTljSWlrcExITTlUV0YwYUM1dGFXNG9hUzVzWlc1bmRHZ3NieTVzWlc1bmRHZ3BMR0U5Y3l4MVBUQTdkVHh6TzNVckt5bHBaaWhwVzNWZElUMDliMXQxWFNsN1lUMTFPMkp5WldGcmZXWnZjaWgyWVhJZ1pqMWJYU3gxUFdFN2RUeHBMbXhsYm1kMGFEdDFLeXNwWmk1d2RYTm9LRndpTGk1Y0lpazdjbVYwZFhKdUlHWTlaaTVqYjI1allYUW9ieTV6YkdsalpTaGhLU2tzWmk1cWIybHVLRndpTDF3aUtYMHNiaTV6WlhBOVhDSXZYQ0lzYmk1a1pXeHBiV2wwWlhJOVhDSTZYQ0lzYmk1a2FYSnVZVzFsUFdaMWJtTjBhVzl1S0dVcGUzWmhjaUIwUFc4b1pTa3NiajEwV3pCZExISTlkRnN4WFR0eVpYUjFjbTRnYm54OGNqOG9jaVltS0hJOWNpNXpkV0p6ZEhJb01DeHlMbXhsYm1kMGFDMHhLU2tzYml0eUtUcGNJaTVjSW4wc2JpNWlZWE5sYm1GdFpUMW1kVzVqZEdsdmJpaGxMSFFwZTNaaGNpQnVQVzhvWlNsYk1sMDdjbVYwZFhKdUlIUW1KbTR1YzNWaWMzUnlLQzB4S25RdWJHVnVaM1JvS1QwOVBYUW1KaWh1UFc0dWMzVmljM1J5S0RBc2JpNXNaVzVuZEdndGRDNXNaVzVuZEdncEtTeHVmU3h1TG1WNGRHNWhiV1U5Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUc4b1pTbGJNMTE5TzNaaGNpQnpQVndpWWx3aVBUMDlYQ0poWWx3aUxuTjFZbk4wY2lndE1Tay9ablZ1WTNScGIyNG9aU3gwTEc0cGUzSmxkSFZ5YmlCbExuTjFZbk4wY2loMExHNHBmVHBtZFc1amRHbHZiaWhsTEhRc2JpbDdjbVYwZFhKdUlIUThNQ1ltS0hROVpTNXNaVzVuZEdncmRDa3NaUzV6ZFdKemRISW9kQ3h1S1gxOUtTNWpZV3hzS0hSb2FYTXNaU2hjSWw5d2NtOWpaWE56WENJcEtYMHNlMTl3Y205alpYTnpPakkxZlYwc01qUTZXMloxYm1OMGFXOXVLR1VzZEN4dUtYc29ablZ1WTNScGIyNG9aU2w3WENKMWMyVWdjM1J5YVdOMFhDSTdablZ1WTNScGIyNGdiaWgwTEc0c2NpeHBLWHRwWmloY0ltWjFibU4wYVc5dVhDSWhQWFI1Y0dWdlppQjBLWFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjF3aVkyRnNiR0poWTJ0Y0lpQmhjbWQxYldWdWRDQnRkWE4wSUdKbElHRWdablZ1WTNScGIyNG5LVHQyWVhJZ2J5eHpMR0U5WVhKbmRXMWxiblJ6TG14bGJtZDBhRHR6ZDJsMFkyZ29ZU2w3WTJGelpTQXdPbU5oYzJVZ01UcHlaWFIxY200Z1pTNXVaWGgwVkdsamF5aDBLVHRqWVhObElESTZjbVYwZFhKdUlHVXVibVY0ZEZScFkyc29ablZ1WTNScGIyNG9LWHQwTG1OaGJHd29iblZzYkN4dUtYMHBPMk5oYzJVZ016cHlaWFIxY200Z1pTNXVaWGgwVkdsamF5aG1kVzVqZEdsdmJpZ3BlM1F1WTJGc2JDaHVkV3hzTEc0c2NpbDlLVHRqWVhObElEUTZjbVYwZFhKdUlHVXVibVY0ZEZScFkyc29ablZ1WTNScGIyNG9LWHQwTG1OaGJHd29iblZzYkN4dUxISXNhU2w5S1R0a1pXWmhkV3gwT21admNpaHZQVzVsZHlCQmNuSmhlU2hoTFRFcExITTlNRHR6UEc4dWJHVnVaM1JvT3lsdlczTXJLMTA5WVhKbmRXMWxiblJ6VzNOZE8zSmxkSFZ5YmlCbExtNWxlSFJVYVdOcktHWjFibU4wYVc5dUtDbDdkQzVoY0hCc2VTaHVkV3hzTEc4cGZTbDlmU0ZsTG5abGNuTnBiMjU4ZkRBOVBUMWxMblpsY25OcGIyNHVhVzVrWlhoUFppaGNJbll3TGx3aUtYeDhNRDA5UFdVdWRtVnljMmx2Ymk1cGJtUmxlRTltS0Z3aWRqRXVYQ0lwSmlZd0lUMDlaUzUyWlhKemFXOXVMbWx1WkdWNFQyWW9YQ0oyTVM0NExsd2lLVDkwTG1WNGNHOXlkSE05YmpwMExtVjRjRzl5ZEhNOVpTNXVaWGgwVkdsamEzMHBMbU5oYkd3b2RHaHBjeXhsS0Z3aVgzQnliMk5sYzNOY0lpa3BmU3g3WDNCeWIyTmxjM002TWpWOVhTd3lOVHBiWm5WdVkzUnBiMjRvWlN4MExHNHBlMloxYm1OMGFXOXVJSElvS1h0b0ppWmpKaVlvYUQwaE1TeGpMbXhsYm1kMGFEOXNQV011WTI5dVkyRjBLR3dwT25BOUxURXNiQzVzWlc1bmRHZ21KbWtvS1NsOVpuVnVZM1JwYjI0Z2FTZ3BlMmxtS0NGb0tYdDJZWElnWlQxaEtISXBPMmc5SVRBN1ptOXlLSFpoY2lCMFBXd3ViR1Z1WjNSb08zUTdLWHRtYjNJb1l6MXNMR3c5VzEwN0t5dHdQSFE3S1dNbUptTmJjRjB1Y25WdUtDazdjRDB0TVN4MFBXd3ViR1Z1WjNSb2ZXTTliblZzYkN4b1BTRXhMSFVvWlNsOWZXWjFibU4wYVc5dUlHOG9aU3gwS1h0MGFHbHpMbVoxYmoxbExIUm9hWE11WVhKeVlYazlkSDFtZFc1amRHbHZiaUJ6S0NsN2ZYWmhjaUJoTEhVc1pqMTBMbVY0Y0c5eWRITTllMzA3SVdaMWJtTjBhVzl1S0NsN2RISjVlMkU5YzJWMFZHbHRaVzkxZEgxallYUmphQ2hsS1h0aFBXWjFibU4wYVc5dUtDbDdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2ljMlYwVkdsdFpXOTFkQ0JwY3lCdWIzUWdaR1ZtYVc1bFpGd2lLWDE5ZEhKNWUzVTlZMnhsWVhKVWFXMWxiM1YwZldOaGRHTm9LR1VwZTNVOVpuVnVZM1JwYjI0b0tYdDBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSmpiR1ZoY2xScGJXVnZkWFFnYVhNZ2JtOTBJR1JsWm1sdVpXUmNJaWw5Zlgwb0tUdDJZWElnWXl4c1BWdGRMR2c5SVRFc2NEMHRNVHRtTG01bGVIUlVhV05yUFdaMWJtTjBhVzl1S0dVcGUzWmhjaUIwUFc1bGR5QkJjbkpoZVNoaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvTFRFcE8ybG1LR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZytNU2xtYjNJb2RtRnlJRzQ5TVR0dVBHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnN2Jpc3JLWFJiYmkweFhUMWhjbWQxYldWdWRITmJibDA3YkM1d2RYTm9LRzVsZHlCdktHVXNkQ2twTERFaFBUMXNMbXhsYm1kMGFIeDhhSHg4WVNocExEQXBmU3h2TG5CeWIzUnZkSGx3WlM1eWRXNDlablZ1WTNScGIyNG9LWHQwYUdsekxtWjFiaTVoY0hCc2VTaHVkV3hzTEhSb2FYTXVZWEp5WVhrcGZTeG1MblJwZEd4bFBWd2lZbkp2ZDNObGNsd2lMR1l1WW5KdmQzTmxjajBoTUN4bUxtVnVkajE3ZlN4bUxtRnlaM1k5VzEwc1ppNTJaWEp6YVc5dVBWd2lYQ0lzWmk1MlpYSnphVzl1Y3oxN2ZTeG1MbTl1UFhNc1ppNWhaR1JNYVhOMFpXNWxjajF6TEdZdWIyNWpaVDF6TEdZdWIyWm1QWE1zWmk1eVpXMXZkbVZNYVhOMFpXNWxjajF6TEdZdWNtVnRiM1psUVd4c1RHbHpkR1Z1WlhKelBYTXNaaTVsYldsMFBYTXNaaTVpYVc1a2FXNW5QV1oxYm1OMGFXOXVLR1VwZTNSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSW5CeWIyTmxjM011WW1sdVpHbHVaeUJwY3lCdWIzUWdjM1Z3Y0c5eWRHVmtYQ0lwZlN4bUxtTjNaRDFtZFc1amRHbHZiaWdwZTNKbGRIVnlibHdpTDF3aWZTeG1MbU5vWkdseVBXWjFibU4wYVc5dUtHVXBlM1JvY205M0lHNWxkeUJGY25KdmNpaGNJbkJ5YjJObGMzTXVZMmhrYVhJZ2FYTWdibTkwSUhOMWNIQnZjblJsWkZ3aUtYMHNaaTUxYldGemF6MW1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQXdmWDBzZTMxZExESTJPbHRtZFc1amRHbHZiaWhsTEhRc2JpbDdkQzVsZUhCdmNuUnpQV1VvWENJdUwyeHBZaTlmYzNSeVpXRnRYMlIxY0d4bGVDNXFjMXdpS1gwc2Uxd2lMaTlzYVdJdlgzTjBjbVZoYlY5a2RYQnNaWGd1YW5OY0lqb3lOMzFkTERJM09sdG1kVzVqZEdsdmJpaGxMSFFzYmlsN1hDSjFjMlVnYzNSeWFXTjBYQ0k3Wm5WdVkzUnBiMjRnY2lobEtYdHlaWFIxY200Z2RHaHBjeUJwYm5OMFlXNWpaVzltSUhJL0tHWXVZMkZzYkNoMGFHbHpMR1VwTEdNdVkyRnNiQ2gwYUdsekxHVXBMR1VtSm1VdWNtVmhaR0ZpYkdVOVBUMGhNU1ltS0hSb2FYTXVjbVZoWkdGaWJHVTlJVEVwTEdVbUptVXVkM0pwZEdGaWJHVTlQVDBoTVNZbUtIUm9hWE11ZDNKcGRHRmliR1U5SVRFcExIUm9hWE11WVd4c2IzZElZV3htVDNCbGJqMGhNQ3hsSmlabExtRnNiRzkzU0dGc1prOXdaVzQ5UFQwaE1TWW1LSFJvYVhNdVlXeHNiM2RJWVd4bVQzQmxiajBoTVNrc2RtOXBaQ0IwYUdsekxtOXVZMlVvWENKbGJtUmNJaXhwS1NrNmJtVjNJSElvWlNsOVpuVnVZM1JwYjI0Z2FTZ3BlM1JvYVhNdVlXeHNiM2RJWVd4bVQzQmxibng4ZEdocGN5NWZkM0pwZEdGaWJHVlRkR0YwWlM1bGJtUmxaSHg4WVNodkxIUm9hWE1wZldaMWJtTjBhVzl1SUc4b1pTbDdaUzVsYm1Rb0tYMTJZWElnY3oxUFltcGxZM1F1YTJWNWMzeDhablZ1WTNScGIyNG9aU2w3ZG1GeUlIUTlXMTA3Wm05eUtIWmhjaUJ1SUdsdUlHVXBkQzV3ZFhOb0tHNHBPM0psZEhWeWJpQjBmVHQwTG1WNGNHOXlkSE05Y2p0MllYSWdZVDFsS0Z3aWNISnZZMlZ6Y3kxdVpYaDBhV05yTFdGeVozTmNJaWtzZFQxbEtGd2lZMjl5WlMxMWRHbHNMV2x6WENJcE8zVXVhVzVvWlhKcGRITTlaU2hjSW1sdWFHVnlhWFJ6WENJcE8zWmhjaUJtUFdVb1hDSXVMMTl6ZEhKbFlXMWZjbVZoWkdGaWJHVmNJaWtzWXoxbEtGd2lMaTlmYzNSeVpXRnRYM2R5YVhSaFlteGxYQ0lwTzNVdWFXNW9aWEpwZEhNb2NpeG1LVHRtYjNJb2RtRnlJR3c5Y3loakxuQnliM1J2ZEhsd1pTa3NhRDB3TzJnOGJDNXNaVzVuZEdnN2FDc3JLWHQyWVhJZ2NEMXNXMmhkTzNJdWNISnZkRzkwZVhCbFczQmRmSHdvY2k1d2NtOTBiM1I1Y0dWYmNGMDlZeTV3Y205MGIzUjVjR1ZiY0YwcGZYMHNlMXdpTGk5ZmMzUnlaV0Z0WDNKbFlXUmhZbXhsWENJNk1qa3NYQ0l1TDE5emRISmxZVzFmZDNKcGRHRmliR1ZjSWpvek1TeGNJbU52Y21VdGRYUnBiQzFwYzF3aU9qRXhMR2x1YUdWeWFYUnpPakU1TEZ3aWNISnZZMlZ6Y3kxdVpYaDBhV05yTFdGeVozTmNJam95TkgxZExESTRPbHRtZFc1amRHbHZiaWhsTEhRc2JpbDdYQ0oxYzJVZ2MzUnlhV04wWENJN1puVnVZM1JwYjI0Z2NpaGxLWHR5WlhSMWNtNGdkR2hwY3lCcGJuTjBZVzVqWlc5bUlISS9kbTlwWkNCcExtTmhiR3dvZEdocGN5eGxLVHB1WlhjZ2NpaGxLWDEwTG1WNGNHOXlkSE05Y2p0MllYSWdhVDFsS0Z3aUxpOWZjM1J5WldGdFgzUnlZVzV6Wm05eWJWd2lLU3h2UFdVb1hDSmpiM0psTFhWMGFXd3RhWE5jSWlrN2J5NXBibWhsY21sMGN6MWxLRndpYVc1b1pYSnBkSE5jSWlrc2J5NXBibWhsY21sMGN5aHlMR2twTEhJdWNISnZkRzkwZVhCbExsOTBjbUZ1YzJadmNtMDlablZ1WTNScGIyNG9aU3gwTEc0cGUyNG9iblZzYkN4bEtYMTlMSHRjSWk0dlgzTjBjbVZoYlY5MGNtRnVjMlp2Y20xY0lqb3pNQ3hjSW1OdmNtVXRkWFJwYkMxcGMxd2lPakV4TEdsdWFHVnlhWFJ6T2pFNWZWMHNNams2VzJaMWJtTjBhVzl1S0dVc2RDeHVLWHNvWm5WdVkzUnBiMjRvYmlsN1hDSjFjMlVnYzNSeWFXTjBYQ0k3Wm5WdVkzUnBiMjRnY2lobExIUXNiaWw3Y21WMGRYSnVJR3MvWlM1d2NtVndaVzVrVEdsemRHVnVaWElvZEN4dUtUcDJiMmxrS0dVdVgyVjJaVzUwY3lZbVpTNWZaWFpsYm5SelczUmRQMVFvWlM1ZlpYWmxiblJ6VzNSZEtUOWxMbDlsZG1WdWRITmJkRjB1ZFc1emFHbG1kQ2h1S1RwbExsOWxkbVZ1ZEhOYmRGMDlXMjRzWlM1ZlpYWmxiblJ6VzNSZFhUcGxMbTl1S0hRc2Jpa3BmV1oxYm1OMGFXOXVJR2tvZEN4dUtYdFZQVlY4ZkdVb1hDSXVMMTl6ZEhKbFlXMWZaSFZ3YkdWNFhDSXBMSFE5ZEh4OGUzMHNkR2hwY3k1dlltcGxZM1JOYjJSbFBTRWhkQzV2WW1wbFkzUk5iMlJsTEc0Z2FXNXpkR0Z1WTJWdlppQlZKaVlvZEdocGN5NXZZbXBsWTNSTmIyUmxQWFJvYVhNdWIySnFaV04wVFc5a1pYeDhJU0YwTG5KbFlXUmhZbXhsVDJKcVpXTjBUVzlrWlNrN2RtRnlJSEk5ZEM1b2FXZG9WMkYwWlhKTllYSnJMR2s5ZEdocGN5NXZZbXBsWTNSTmIyUmxQekUyT2pFMk16ZzBPM1JvYVhNdWFHbG5hRmRoZEdWeVRXRnlhejF5Zkh3d1BUMDljajl5T21rc2RHaHBjeTVvYVdkb1YyRjBaWEpOWVhKclBYNStkR2hwY3k1b2FXZG9WMkYwWlhKTllYSnJMSFJvYVhNdVluVm1abVZ5UFZ0ZExIUm9hWE11YkdWdVozUm9QVEFzZEdocGN5NXdhWEJsY3oxdWRXeHNMSFJvYVhNdWNHbHdaWE5EYjNWdWREMHdMSFJvYVhNdVpteHZkMmx1WnoxdWRXeHNMSFJvYVhNdVpXNWtaV1E5SVRFc2RHaHBjeTVsYm1SRmJXbDBkR1ZrUFNFeExIUm9hWE11Y21WaFpHbHVaejBoTVN4MGFHbHpMbk41Ym1NOUlUQXNkR2hwY3k1dVpXVmtVbVZoWkdGaWJHVTlJVEVzZEdocGN5NWxiV2wwZEdWa1VtVmhaR0ZpYkdVOUlURXNkR2hwY3k1eVpXRmtZV0pzWlV4cGMzUmxibWx1WnowaE1TeDBhR2x6TG5KbGMzVnRaVk5qYUdWa2RXeGxaRDBoTVN4MGFHbHpMbVJsWm1GMWJIUkZibU52WkdsdVp6MTBMbVJsWm1GMWJIUkZibU52WkdsdVozeDhYQ0oxZEdZNFhDSXNkR2hwY3k1eVlXNVBkWFE5SVRFc2RHaHBjeTVoZDJGcGRFUnlZV2x1UFRBc2RHaHBjeTV5WldGa2FXNW5UVzl5WlQwaE1TeDBhR2x6TG1SbFkyOWtaWEk5Ym5Wc2JDeDBhR2x6TG1WdVkyOWthVzVuUFc1MWJHd3NkQzVsYm1OdlpHbHVaeVltS0dwOGZDaHFQV1VvWENKemRISnBibWRmWkdWamIyUmxjaTljSWlrdVUzUnlhVzVuUkdWamIyUmxjaWtzZEdocGN5NWtaV052WkdWeVBXNWxkeUJxS0hRdVpXNWpiMlJwYm1jcExIUm9hWE11Wlc1amIyUnBibWM5ZEM1bGJtTnZaR2x1WnlsOVpuVnVZM1JwYjI0Z2J5aDBLWHR5WlhSMWNtNGdWVDFWZkh4bEtGd2lMaTlmYzNSeVpXRnRYMlIxY0d4bGVGd2lLU3gwYUdseklHbHVjM1JoYm1ObGIyWWdiejhvZEdocGN5NWZjbVZoWkdGaWJHVlRkR0YwWlQxdVpYY2dhU2gwTEhSb2FYTXBMSFJvYVhNdWNtVmhaR0ZpYkdVOUlUQXNkQ1ltWENKbWRXNWpkR2x2Ymx3aVBUMTBlWEJsYjJZZ2RDNXlaV0ZrSmlZb2RHaHBjeTVmY21WaFpEMTBMbkpsWVdRcExIWnZhV1FnU1M1allXeHNLSFJvYVhNcEtUcHVaWGNnYnloMEtYMW1kVzVqZEdsdmJpQnpLR1VzZEN4dUxISXNhU2w3ZG1GeUlHODlZeWgwTEc0cE8ybG1LRzhwWlM1bGJXbDBLRndpWlhKeWIzSmNJaXh2S1R0bGJITmxJR2xtS0c1MWJHdzlQVDF1S1hRdWNtVmhaR2x1WnowaE1TeHNLR1VzZENrN1pXeHpaU0JwWmloMExtOWlhbVZqZEUxdlpHVjhmRzRtSm00dWJHVnVaM1JvUGpBcGFXWW9kQzVsYm1SbFpDWW1JV2twZTNaaGNpQnpQVzVsZHlCRmNuSnZjaWhjSW5OMGNtVmhiUzV3ZFhOb0tDa2dZV1owWlhJZ1JVOUdYQ0lwTzJVdVpXMXBkQ2hjSW1WeWNtOXlYQ0lzY3lsOVpXeHpaU0JwWmloMExtVnVaRVZ0YVhSMFpXUW1KbWtwZTNaaGNpQjFQVzVsZHlCRmNuSnZjaWhjSW5OMGNtVmhiUzUxYm5Ob2FXWjBLQ2tnWVdaMFpYSWdaVzVrSUdWMlpXNTBYQ0lwTzJVdVpXMXBkQ2hjSW1WeWNtOXlYQ0lzZFNsOVpXeHpaWHQyWVhJZ1pqc2hkQzVrWldOdlpHVnlmSHhwZkh4eWZId29iajEwTG1SbFkyOWtaWEl1ZDNKcGRHVW9iaWtzWmowaGRDNXZZbXBsWTNSTmIyUmxKaVl3UFQwOWJpNXNaVzVuZEdncExHbDhmQ2gwTG5KbFlXUnBibWM5SVRFcExHWjhmQ2gwTG1ac2IzZHBibWNtSmpBOVBUMTBMbXhsYm1kMGFDWW1JWFF1YzNsdVl6OG9aUzVsYldsMEtGd2laR0YwWVZ3aUxHNHBMR1V1Y21WaFpDZ3dLU2s2S0hRdWJHVnVaM1JvS3oxMExtOWlhbVZqZEUxdlpHVS9NVHB1TG14bGJtZDBhQ3hwUDNRdVluVm1abVZ5TG5WdWMyaHBablFvYmlrNmRDNWlkV1ptWlhJdWNIVnphQ2h1S1N4MExtNWxaV1JTWldGa1lXSnNaU1ltYUNobEtTa3BMR1FvWlN4MEtYMWxiSE5sSUdsOGZDaDBMbkpsWVdScGJtYzlJVEVwTzNKbGRIVnliaUJoS0hRcGZXWjFibU4wYVc5dUlHRW9aU2w3Y21WMGRYSnVJV1V1Wlc1a1pXUW1KaWhsTG01bFpXUlNaV0ZrWVdKc1pYeDhaUzVzWlc1bmRHZzhaUzVvYVdkb1YyRjBaWEpOWVhKcmZId3dQVDA5WlM1c1pXNW5kR2dwZldaMWJtTjBhVzl1SUhVb1pTbDdjbVYwZFhKdUlHVStQVUkvWlQxQ09paGxMUzBzWlh3OVpUNCtQakVzWlh3OVpUNCtQaklzWlh3OVpUNCtQalFzWlh3OVpUNCtQamdzWlh3OVpUNCtQakUyTEdVckt5a3NaWDFtZFc1amRHbHZiaUJtS0dVc2RDbDdjbVYwZFhKdUlEQTlQVDEwTG14bGJtZDBhQ1ltZEM1bGJtUmxaRDh3T25RdWIySnFaV04wVFc5a1pUOHdQVDA5WlQ4d09qRTZiblZzYkQwOVBXVjhmR2x6VG1GT0tHVXBQM1F1Wm14dmQybHVaeVltZEM1aWRXWm1aWEl1YkdWdVozUm9QM1F1WW5WbVptVnlXekJkTG14bGJtZDBhRHAwTG14bGJtZDBhRHBsUEQwd1B6QTZLR1UrZEM1b2FXZG9WMkYwWlhKTllYSnJKaVlvZEM1b2FXZG9WMkYwWlhKTllYSnJQWFVvWlNrcExHVStkQzVzWlc1bmRHZy9kQzVsYm1SbFpEOTBMbXhsYm1kMGFEb29kQzV1WldWa1VtVmhaR0ZpYkdVOUlUQXNNQ2s2WlNsOVpuVnVZM1JwYjI0Z1l5aGxMSFFwZTNaaGNpQnVQVzUxYkd3N2NtVjBkWEp1SUZBdWFYTkNkV1ptWlhJb2RDbDhmRndpYzNSeWFXNW5YQ0k5UFhSNWNHVnZaaUIwZkh4dWRXeHNQVDA5ZEh4OGRtOXBaQ0F3UFQwOWRIeDhaUzV2WW1wbFkzUk5iMlJsZkh3b2JqMXVaWGNnVkhsd1pVVnljbTl5S0Z3aVNXNTJZV3hwWkNCdWIyNHRjM1J5YVc1bkwySjFabVpsY2lCamFIVnVhMXdpS1Nrc2JuMW1kVzVqZEdsdmJpQnNLR1VzZENsN2FXWW9JWFF1Wlc1a1pXUXBlMmxtS0hRdVpHVmpiMlJsY2lsN2RtRnlJRzQ5ZEM1a1pXTnZaR1Z5TG1WdVpDZ3BPMjRtSm00dWJHVnVaM1JvSmlZb2RDNWlkV1ptWlhJdWNIVnphQ2h1S1N4MExteGxibWQwYUNzOWRDNXZZbXBsWTNSTmIyUmxQekU2Ymk1c1pXNW5kR2dwZlhRdVpXNWtaV1E5SVRBc2FDaGxLWDE5Wm5WdVkzUnBiMjRnYUNobEtYdDJZWElnZEQxbExsOXlaV0ZrWVdKc1pWTjBZWFJsTzNRdWJtVmxaRkpsWVdSaFlteGxQU0V4TEhRdVpXMXBkSFJsWkZKbFlXUmhZbXhsZkh3b1JDaGNJbVZ0YVhSU1pXRmtZV0pzWlZ3aUxIUXVabXh2ZDJsdVp5a3NkQzVsYldsMGRHVmtVbVZoWkdGaWJHVTlJVEFzZEM1emVXNWpQMEVvY0N4bEtUcHdLR1VwS1gxbWRXNWpkR2x2YmlCd0tHVXBlMFFvWENKbGJXbDBJSEpsWVdSaFlteGxYQ0lwTEdVdVpXMXBkQ2hjSW5KbFlXUmhZbXhsWENJcExFVW9aU2w5Wm5WdVkzUnBiMjRnWkNobExIUXBlM1F1Y21WaFpHbHVaMDF2Y21WOGZDaDBMbkpsWVdScGJtZE5iM0psUFNFd0xFRW9aeXhsTEhRcEtYMW1kVzVqZEdsdmJpQm5LR1VzZENsN1ptOXlLSFpoY2lCdVBYUXViR1Z1WjNSb095RjBMbkpsWVdScGJtY21KaUYwTG1ac2IzZHBibWNtSmlGMExtVnVaR1ZrSmlaMExteGxibWQwYUR4MExtaHBaMmhYWVhSbGNrMWhjbXNtSmloRUtGd2liV0Y1WW1WU1pXRmtUVzl5WlNCeVpXRmtJREJjSWlrc1pTNXlaV0ZrS0RBcExHNGhQVDEwTG14bGJtZDBhQ2s3S1c0OWRDNXNaVzVuZEdnN2RDNXlaV0ZrYVc1blRXOXlaVDBoTVgxbWRXNWpkR2x2YmlCNUtHVXBlM0psZEhWeWJpQm1kVzVqZEdsdmJpZ3BlM1poY2lCMFBXVXVYM0psWVdSaFlteGxVM1JoZEdVN1JDaGNJbkJwY0dWUGJrUnlZV2x1WENJc2RDNWhkMkZwZEVSeVlXbHVLU3gwTG1GM1lXbDBSSEpoYVc0bUpuUXVZWGRoYVhSRWNtRnBiaTB0TERBOVBUMTBMbUYzWVdsMFJISmhhVzRtSms0b1pTeGNJbVJoZEdGY0lpa21KaWgwTG1ac2IzZHBibWM5SVRBc1JTaGxLU2w5ZldaMWJtTjBhVzl1SUY4b1pTbDdSQ2hjSW5KbFlXUmhZbXhsSUc1bGVIUjBhV05ySUhKbFlXUWdNRndpS1N4bExuSmxZV1FvTUNsOVpuVnVZM1JwYjI0Z2RpaGxMSFFwZTNRdWNtVnpkVzFsVTJOb1pXUjFiR1ZrZkh3b2RDNXlaWE4xYldWVFkyaGxaSFZzWldROUlUQXNRU2h0TEdVc2RDa3BmV1oxYm1OMGFXOXVJRzBvWlN4MEtYdDBMbkpsWVdScGJtZDhmQ2hFS0Z3aWNtVnpkVzFsSUhKbFlXUWdNRndpS1N4bExuSmxZV1FvTUNrcExIUXVjbVZ6ZFcxbFUyTm9aV1IxYkdWa1BTRXhMR1V1WlcxcGRDaGNJbkpsYzNWdFpWd2lLU3hGS0dVcExIUXVabXh2ZDJsdVp5WW1JWFF1Y21WaFpHbHVaeVltWlM1eVpXRmtLREFwZldaMWJtTjBhVzl1SUVVb1pTbDdkbUZ5SUhROVpTNWZjbVZoWkdGaWJHVlRkR0YwWlR0cFppaEVLRndpWm14dmQxd2lMSFF1Wm14dmQybHVaeWtzZEM1bWJHOTNhVzVuS1dSdklIWmhjaUJ1UFdVdWNtVmhaQ2dwTzNkb2FXeGxLRzUxYkd3aFBUMXVKaVowTG1ac2IzZHBibWNwZldaMWJtTjBhVzl1SUhjb1pTeDBLWHQyWVhJZ2JpeHlQWFF1WW5WbVptVnlMR2s5ZEM1c1pXNW5kR2dzYnowaElYUXVaR1ZqYjJSbGNpeHpQU0VoZEM1dlltcGxZM1JOYjJSbE8ybG1LREE5UFQxeUxteGxibWQwYUNseVpYUjFjbTRnYm5Wc2JEdHBaaWd3UFQwOWFTbHVQVzUxYkd3N1pXeHpaU0JwWmloektXNDljaTV6YUdsbWRDZ3BPMlZzYzJVZ2FXWW9JV1Y4ZkdVK1BXa3BiajF2UDNJdWFtOXBiaWhjSWx3aUtUb3hQVDA5Y2k1c1pXNW5kR2cvY2xzd1hUcFFMbU52Ym1OaGRDaHlMR2twTEhJdWJHVnVaM1JvUFRBN1pXeHpaU0JwWmlobFBISmJNRjB1YkdWdVozUm9LWHQyWVhJZ1lUMXlXekJkTzI0OVlTNXpiR2xqWlNnd0xHVXBMSEpiTUYwOVlTNXpiR2xqWlNobEtYMWxiSE5sSUdsbUtHVTlQVDF5V3pCZExteGxibWQwYUNsdVBYSXVjMmhwWm5Rb0tUdGxiSE5sZTI0OWJ6OWNJbHdpT2tNdVlXeHNiMk5WYm5OaFptVW9aU2s3Wm05eUtIWmhjaUIxUFRBc1pqMHdMR005Y2k1c1pXNW5kR2c3Wmp4akppWjFQR1U3WmlzcktYdDJZWElnYkQxeVd6QmRMR2c5VFdGMGFDNXRhVzRvWlMxMUxHd3ViR1Z1WjNSb0tUdHZQMjRyUFd3dWMyeHBZMlVvTUN4b0tUcHNMbU52Y0hrb2JpeDFMREFzYUNrc2FEeHNMbXhsYm1kMGFEOXlXekJkUFd3dWMyeHBZMlVvYUNrNmNpNXphR2xtZENncExIVXJQV2g5ZlhKbGRIVnliaUJ1ZldaMWJtTjBhVzl1SUdJb1pTbDdkbUZ5SUhROVpTNWZjbVZoWkdGaWJHVlRkR0YwWlR0cFppaDBMbXhsYm1kMGFENHdLWFJvY205M0lHNWxkeUJGY25KdmNpZ25YQ0psYm1SU1pXRmtZV0pzWlNncFhDSWdZMkZzYkdWa0lHOXVJRzV2YmkxbGJYQjBlU0J6ZEhKbFlXMG5LVHQwTG1WdVpFVnRhWFIwWldSOGZDaDBMbVZ1WkdWa1BTRXdMRUVvVXl4MExHVXBLWDFtZFc1amRHbHZiaUJUS0dVc2RDbDdaUzVsYm1SRmJXbDBkR1ZrZkh3d0lUMDlaUzVzWlc1bmRHaDhmQ2hsTG1WdVpFVnRhWFIwWldROUlUQXNkQzV5WldGa1lXSnNaVDBoTVN4MExtVnRhWFFvWENKbGJtUmNJaWtwZldaMWJtTjBhVzl1SUU4b1pTeDBLWHRtYjNJb2RtRnlJRzQ5TUN4eVBXVXViR1Z1WjNSb08yNDhjanR1S3lzcGRDaGxXMjVkTEc0cGZXWjFibU4wYVc5dUlGSW9aU3gwS1h0bWIzSW9kbUZ5SUc0OU1DeHlQV1V1YkdWdVozUm9PMjQ4Y2p0dUt5c3BhV1lvWlZ0dVhUMDlQWFFwY21WMGRYSnVJRzQ3Y21WMGRYSnVMVEY5ZEM1bGVIQnZjblJ6UFc4N2RtRnlJRUU5WlNoY0luQnliMk5sYzNNdGJtVjRkR2xqYXkxaGNtZHpYQ0lwTEZROVpTaGNJbWx6WVhKeVlYbGNJaWs3Ynk1U1pXRmtZV0pzWlZOMFlYUmxQV2s3ZG1GeUlFa3NURDFsS0Z3aVpYWmxiblJ6WENJcExrVjJaVzUwUlcxcGRIUmxjaXhPUFdaMWJtTjBhVzl1S0dVc2RDbDdjbVYwZFhKdUlHVXViR2x6ZEdWdVpYSnpLSFFwTG14bGJtZDBhSDA3SVdaMWJtTjBhVzl1S0NsN2RISjVlMGs5WlNoY0luTjBjbVZoYlZ3aUtYMWpZWFJqYUNoMEtYdDlabWx1WVd4c2VYdEpmSHdvU1QxbEtGd2laWFpsYm5SelhDSXBMa1YyWlc1MFJXMXBkSFJsY2lsOWZTZ3BPM1poY2lCUVBXVW9YQ0ppZFdabVpYSmNJaWt1UW5WbVptVnlMRU05WlNoY0ltSjFabVpsY2kxemFHbHRjMXdpS1N4TlBXVW9YQ0pqYjNKbExYVjBhV3d0YVhOY0lpazdUUzVwYm1obGNtbDBjejFsS0Z3aWFXNW9aWEpwZEhOY0lpazdkbUZ5SUhnOVpTaGNJblYwYVd4Y0lpa3NSRDEyYjJsa0lEQTdSRDE0SmlaNExtUmxZblZuYkc5blAzZ3VaR1ZpZFdkc2IyY29YQ0p6ZEhKbFlXMWNJaWs2Wm5WdVkzUnBiMjRvS1h0OU8zWmhjaUJxTzAwdWFXNW9aWEpwZEhNb2J5eEpLVHQyWVhJZ1ZTeFZMR3M5WENKbWRXNWpkR2x2Ymx3aVBUMTBlWEJsYjJZZ1RDNXdjbTkwYjNSNWNHVXVjSEpsY0dWdVpFeHBjM1JsYm1WeU8yOHVjSEp2ZEc5MGVYQmxMbkIxYzJnOVpuVnVZM1JwYjI0b1pTeDBLWHQyWVhJZ2JqMTBhR2x6TGw5eVpXRmtZV0pzWlZOMFlYUmxPM0psZEhWeWJpQnVMbTlpYW1WamRFMXZaR1Y4ZkZ3aWMzUnlhVzVuWENJaFBYUjVjR1Z2WmlCbGZId29kRDEwZkh4dUxtUmxabUYxYkhSRmJtTnZaR2x1Wnl4MElUMDliaTVsYm1OdlpHbHVaeVltS0dVOVF5NW1jbTl0S0dVc2RDa3NkRDFjSWx3aUtTa3NjeWgwYUdsekxHNHNaU3gwTENFeEtYMHNieTV3Y205MGIzUjVjR1V1ZFc1emFHbG1kRDFtZFc1amRHbHZiaWhsS1h0MllYSWdkRDEwYUdsekxsOXlaV0ZrWVdKc1pWTjBZWFJsTzNKbGRIVnliaUJ6S0hSb2FYTXNkQ3hsTEZ3aVhDSXNJVEFwZlN4dkxuQnliM1J2ZEhsd1pTNXBjMUJoZFhObFpEMW1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQjBhR2x6TGw5eVpXRmtZV0pzWlZOMFlYUmxMbVpzYjNkcGJtYzlQVDBoTVgwc2J5NXdjbTkwYjNSNWNHVXVjMlYwUlc1amIyUnBibWM5Wm5WdVkzUnBiMjRvZENsN2NtVjBkWEp1SUdwOGZDaHFQV1VvWENKemRISnBibWRmWkdWamIyUmxjaTljSWlrdVUzUnlhVzVuUkdWamIyUmxjaWtzZEdocGN5NWZjbVZoWkdGaWJHVlRkR0YwWlM1a1pXTnZaR1Z5UFc1bGR5QnFLSFFwTEhSb2FYTXVYM0psWVdSaFlteGxVM1JoZEdVdVpXNWpiMlJwYm1jOWRDeDBhR2x6ZlR0MllYSWdRajA0TXpnNE5qQTRPMjh1Y0hKdmRHOTBlWEJsTG5KbFlXUTlablZ1WTNScGIyNG9aU2w3UkNoY0luSmxZV1JjSWl4bEtUdDJZWElnZEQxMGFHbHpMbDl5WldGa1lXSnNaVk4wWVhSbExHNDlaVHRwWmlnb1hDSnVkVzFpWlhKY0lpRTlkSGx3Wlc5bUlHVjhmR1UrTUNrbUppaDBMbVZ0YVhSMFpXUlNaV0ZrWVdKc1pUMGhNU2tzTUQwOVBXVW1KblF1Ym1WbFpGSmxZV1JoWW14bEppWW9kQzVzWlc1bmRHZytQWFF1YUdsbmFGZGhkR1Z5VFdGeWEzeDhkQzVsYm1SbFpDa3BjbVYwZFhKdUlFUW9YQ0p5WldGa09pQmxiV2wwVW1WaFpHRmliR1ZjSWl4MExteGxibWQwYUN4MExtVnVaR1ZrS1N3d1BUMDlkQzVzWlc1bmRHZ21KblF1Wlc1a1pXUS9ZaWgwYUdsektUcG9LSFJvYVhNcExHNTFiR3c3YVdZb1pUMW1LR1VzZENrc01EMDlQV1VtSm5RdVpXNWtaV1FwY21WMGRYSnVJREE5UFQxMExteGxibWQwYUNZbVlpaDBhR2x6S1N4dWRXeHNPM1poY2lCeVBYUXVibVZsWkZKbFlXUmhZbXhsTzBRb1hDSnVaV1ZrSUhKbFlXUmhZbXhsWENJc2Npa3NLREE5UFQxMExteGxibWQwYUh4OGRDNXNaVzVuZEdndFpUeDBMbWhwWjJoWFlYUmxjazFoY21zcEppWW9jajBoTUN4RUtGd2liR1Z1WjNSb0lHeGxjM01nZEdoaGJpQjNZWFJsY20xaGNtdGNJaXh5S1Nrc0tIUXVaVzVrWldSOGZIUXVjbVZoWkdsdVp5a21KaWh5UFNFeExFUW9YQ0p5WldGa2FXNW5JRzl5SUdWdVpHVmtYQ0lzY2lrcExISW1KaWhFS0Z3aVpHOGdjbVZoWkZ3aUtTeDBMbkpsWVdScGJtYzlJVEFzZEM1emVXNWpQU0V3TERBOVBUMTBMbXhsYm1kMGFDWW1LSFF1Ym1WbFpGSmxZV1JoWW14bFBTRXdLU3gwYUdsekxsOXlaV0ZrS0hRdWFHbG5hRmRoZEdWeVRXRnlheWtzZEM1emVXNWpQU0V4S1N4eUppWWhkQzV5WldGa2FXNW5KaVlvWlQxbUtHNHNkQ2twTzNaaGNpQnBPM0psZEhWeWJpQnBQV1UrTUQ5M0tHVXNkQ2s2Ym5Wc2JDeHVkV3hzUFQwOWFTWW1LSFF1Ym1WbFpGSmxZV1JoWW14bFBTRXdMR1U5TUNrc2RDNXNaVzVuZEdndFBXVXNNQ0U5UFhRdWJHVnVaM1JvZkh4MExtVnVaR1ZrZkh3b2RDNXVaV1ZrVW1WaFpHRmliR1U5SVRBcExHNGhQVDFsSmlaMExtVnVaR1ZrSmlZd1BUMDlkQzVzWlc1bmRHZ21KbUlvZEdocGN5a3NiblZzYkNFOVBXa21KblJvYVhNdVpXMXBkQ2hjSW1SaGRHRmNJaXhwS1N4cGZTeHZMbkJ5YjNSdmRIbHdaUzVmY21WaFpEMW1kVzVqZEdsdmJpaGxLWHQwYUdsekxtVnRhWFFvWENKbGNuSnZjbHdpTEc1bGR5QkZjbkp2Y2loY0ltNXZkQ0JwYlhCc1pXMWxiblJsWkZ3aUtTbDlMRzh1Y0hKdmRHOTBlWEJsTG5CcGNHVTlablZ1WTNScGIyNG9aU3gwS1h0bWRXNWpkR2x2YmlCcEtHVXBlMFFvWENKdmJuVnVjR2x3WlZ3aUtTeGxQVDA5YUNZbWN5Z3BmV1oxYm1OMGFXOXVJRzhvS1h0RUtGd2liMjVsYm1SY0lpa3NaUzVsYm1Rb0tYMW1kVzVqZEdsdmJpQnpLQ2w3UkNoY0ltTnNaV0Z1ZFhCY0lpa3NaUzV5WlcxdmRtVk1hWE4wWlc1bGNpaGNJbU5zYjNObFhDSXNaaWtzWlM1eVpXMXZkbVZNYVhOMFpXNWxjaWhjSW1acGJtbHphRndpTEdNcExHVXVjbVZ0YjNabFRHbHpkR1Z1WlhJb1hDSmtjbUZwYmx3aUxGOHBMR1V1Y21WdGIzWmxUR2x6ZEdWdVpYSW9YQ0psY25KdmNsd2lMSFVwTEdVdWNtVnRiM1psVEdsemRHVnVaWElvWENKMWJuQnBjR1ZjSWl4cEtTeG9MbkpsYlc5MlpVeHBjM1JsYm1WeUtGd2laVzVrWENJc2J5a3NhQzV5WlcxdmRtVk1hWE4wWlc1bGNpaGNJbVZ1WkZ3aUxITXBMR2d1Y21WdGIzWmxUR2x6ZEdWdVpYSW9YQ0prWVhSaFhDSXNZU2tzZGowaE1Dd2hjQzVoZDJGcGRFUnlZV2x1Zkh4bExsOTNjbWwwWVdKc1pWTjBZWFJsSmlZaFpTNWZkM0pwZEdGaWJHVlRkR0YwWlM1dVpXVmtSSEpoYVc1OGZGOG9LWDFtZFc1amRHbHZiaUJoS0hRcGUwUW9YQ0p2Ym1SaGRHRmNJaWs3ZG1GeUlHNDlaUzUzY21sMFpTaDBLVHNoTVQwOVBXNG1KaWdvTVQwOVBYQXVjR2x3WlhORGIzVnVkQ1ltY0M1d2FYQmxjejA5UFdWOGZIQXVjR2x3WlhORGIzVnVkRDR4SmlaU0tIQXVjR2x3WlhNc1pTa2hQVDB0TVNrbUppRjJKaVlvUkNoY0ltWmhiSE5sSUhkeWFYUmxJSEpsYzNCdmJuTmxMQ0J3WVhWelpWd2lMR2d1WDNKbFlXUmhZbXhsVTNSaGRHVXVZWGRoYVhSRWNtRnBiaWtzYUM1ZmNtVmhaR0ZpYkdWVGRHRjBaUzVoZDJGcGRFUnlZV2x1S3lzcExHZ3VjR0YxYzJVb0tTbDlablZ1WTNScGIyNGdkU2gwS1h0RUtGd2liMjVsY25KdmNsd2lMSFFwTEd3b0tTeGxMbkpsYlc5MlpVeHBjM1JsYm1WeUtGd2laWEp5YjNKY0lpeDFLU3d3UFQwOVRpaGxMRndpWlhKeWIzSmNJaWttSm1VdVpXMXBkQ2hjSW1WeWNtOXlYQ0lzZENsOVpuVnVZM1JwYjI0Z1ppZ3BlMlV1Y21WdGIzWmxUR2x6ZEdWdVpYSW9YQ0ptYVc1cGMyaGNJaXhqS1N4c0tDbDlablZ1WTNScGIyNGdZeWdwZTBRb1hDSnZibVpwYm1semFGd2lLU3hsTG5KbGJXOTJaVXhwYzNSbGJtVnlLRndpWTJ4dmMyVmNJaXhtS1N4c0tDbDlablZ1WTNScGIyNGdiQ2dwZTBRb1hDSjFibkJwY0dWY0lpa3NhQzUxYm5CcGNHVW9aU2w5ZG1GeUlHZzlkR2hwY3l4d1BYUm9hWE11WDNKbFlXUmhZbXhsVTNSaGRHVTdjM2RwZEdOb0tIQXVjR2x3WlhORGIzVnVkQ2w3WTJGelpTQXdPbkF1Y0dsd1pYTTlaVHRpY21WaGF6dGpZWE5sSURFNmNDNXdhWEJsY3oxYmNDNXdhWEJsY3l4bFhUdGljbVZoYXp0a1pXWmhkV3gwT25BdWNHbHdaWE11Y0hWemFDaGxLWDF3TG5CcGNHVnpRMjkxYm5RclBURXNSQ2hjSW5CcGNHVWdZMjkxYm5ROUpXUWdiM0IwY3owbGFsd2lMSEF1Y0dsd1pYTkRiM1Z1ZEN4MEtUdDJZWElnWkQwb0lYUjhmSFF1Wlc1a0lUMDlJVEVwSmlabElUMDliaTV6ZEdSdmRYUW1KbVVoUFQxdUxuTjBaR1Z5Y2l4blBXUS9ienB6TzNBdVpXNWtSVzFwZEhSbFpEOUJLR2NwT21ndWIyNWpaU2hjSW1WdVpGd2lMR2NwTEdVdWIyNG9YQ0oxYm5CcGNHVmNJaXhwS1R0MllYSWdYejE1S0dncE8yVXViMjRvWENKa2NtRnBibHdpTEY4cE8zWmhjaUIyUFNFeE8zSmxkSFZ5YmlCb0xtOXVLRndpWkdGMFlWd2lMR0VwTEhJb1pTeGNJbVZ5Y205eVhDSXNkU2tzWlM1dmJtTmxLRndpWTJ4dmMyVmNJaXhtS1N4bExtOXVZMlVvWENKbWFXNXBjMmhjSWl4aktTeGxMbVZ0YVhRb1hDSndhWEJsWENJc2FDa3NjQzVtYkc5M2FXNW5mSHdvUkNoY0luQnBjR1VnY21WemRXMWxYQ0lwTEdndWNtVnpkVzFsS0NrcExHVjlMRzh1Y0hKdmRHOTBlWEJsTG5WdWNHbHdaVDFtZFc1amRHbHZiaWhsS1h0MllYSWdkRDEwYUdsekxsOXlaV0ZrWVdKc1pWTjBZWFJsTzJsbUtEQTlQVDEwTG5CcGNHVnpRMjkxYm5RcGNtVjBkWEp1SUhSb2FYTTdhV1lvTVQwOVBYUXVjR2x3WlhORGIzVnVkQ2x5WlhSMWNtNGdaU1ltWlNFOVBYUXVjR2x3WlhNL2RHaHBjem9vWlh4OEtHVTlkQzV3YVhCbGN5a3NkQzV3YVhCbGN6MXVkV3hzTEhRdWNHbHdaWE5EYjNWdWREMHdMSFF1Wm14dmQybHVaejBoTVN4bEppWmxMbVZ0YVhRb1hDSjFibkJwY0dWY0lpeDBhR2x6S1N4MGFHbHpLVHRwWmlnaFpTbDdkbUZ5SUc0OWRDNXdhWEJsY3l4eVBYUXVjR2x3WlhORGIzVnVkRHQwTG5CcGNHVnpQVzUxYkd3c2RDNXdhWEJsYzBOdmRXNTBQVEFzZEM1bWJHOTNhVzVuUFNFeE8yWnZjaWgyWVhJZ2FUMHdPMms4Y2p0cEt5c3BibHRwWFM1bGJXbDBLRndpZFc1d2FYQmxYQ0lzZEdocGN5azdjbVYwZFhKdUlIUm9hWE45ZG1GeUlHODlVaWgwTG5CcGNHVnpMR1VwTzNKbGRIVnliaUJ2UFQwOUxURS9kR2hwY3pvb2RDNXdhWEJsY3k1emNHeHBZMlVvYnl3eEtTeDBMbkJwY0dWelEyOTFiblF0UFRFc01UMDlQWFF1Y0dsd1pYTkRiM1Z1ZENZbUtIUXVjR2x3WlhNOWRDNXdhWEJsYzFzd1hTa3NaUzVsYldsMEtGd2lkVzV3YVhCbFhDSXNkR2hwY3lrc2RHaHBjeWw5TEc4dWNISnZkRzkwZVhCbExtOXVQV1oxYm1OMGFXOXVLR1VzZENsN2RtRnlJRzQ5U1M1d2NtOTBiM1I1Y0dVdWIyNHVZMkZzYkNoMGFHbHpMR1VzZENrN2FXWW9YQ0prWVhSaFhDSTlQVDFsSmlZaE1TRTlQWFJvYVhNdVgzSmxZV1JoWW14bFUzUmhkR1V1Wm14dmQybHVaeVltZEdocGN5NXlaWE4xYldVb0tTeGNJbkpsWVdSaFlteGxYQ0k5UFQxbEppWWhkR2hwY3k1ZmNtVmhaR0ZpYkdWVGRHRjBaUzVsYm1SRmJXbDBkR1ZrS1h0MllYSWdjajEwYUdsekxsOXlaV0ZrWVdKc1pWTjBZWFJsTzNJdWNtVmhaR0ZpYkdWTWFYTjBaVzVwYm1kOGZDaHlMbkpsWVdSaFlteGxUR2x6ZEdWdWFXNW5QU0V3TEhJdVpXMXBkSFJsWkZKbFlXUmhZbXhsUFNFeExISXVibVZsWkZKbFlXUmhZbXhsUFNFd0xISXVjbVZoWkdsdVp6OXlMbXhsYm1kMGFDWW1hQ2gwYUdsekxISXBPa0VvWHl4MGFHbHpLU2w5Y21WMGRYSnVJRzU5TEc4dWNISnZkRzkwZVhCbExtRmtaRXhwYzNSbGJtVnlQVzh1Y0hKdmRHOTBlWEJsTG05dUxHOHVjSEp2ZEc5MGVYQmxMbkpsYzNWdFpUMW1kVzVqZEdsdmJpZ3BlM1poY2lCbFBYUm9hWE11WDNKbFlXUmhZbXhsVTNSaGRHVTdjbVYwZFhKdUlHVXVabXh2ZDJsdVozeDhLRVFvWENKeVpYTjFiV1ZjSWlrc1pTNW1iRzkzYVc1blBTRXdMSFlvZEdocGN5eGxLU2tzZEdocGMzMHNieTV3Y205MGIzUjVjR1V1Y0dGMWMyVTlablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdSQ2hjSW1OaGJHd2djR0YxYzJVZ1pteHZkMmx1WnowbGFsd2lMSFJvYVhNdVgzSmxZV1JoWW14bFUzUmhkR1V1Wm14dmQybHVaeWtzSVRFaFBUMTBhR2x6TGw5eVpXRmtZV0pzWlZOMFlYUmxMbVpzYjNkcGJtY21KaWhFS0Z3aWNHRjFjMlZjSWlrc1hHNTBhR2x6TGw5eVpXRmtZV0pzWlZOMFlYUmxMbVpzYjNkcGJtYzlJVEVzZEdocGN5NWxiV2wwS0Z3aWNHRjFjMlZjSWlrcExIUm9hWE45TEc4dWNISnZkRzkwZVhCbExuZHlZWEE5Wm5WdVkzUnBiMjRvWlNsN2RtRnlJSFE5ZEdocGN5NWZjbVZoWkdGaWJHVlRkR0YwWlN4dVBTRXhMSEk5ZEdocGN6dGxMbTl1S0Z3aVpXNWtYQ0lzWm5WdVkzUnBiMjRvS1h0cFppaEVLRndpZDNKaGNIQmxaQ0JsYm1SY0lpa3NkQzVrWldOdlpHVnlKaVloZEM1bGJtUmxaQ2w3ZG1GeUlHVTlkQzVrWldOdlpHVnlMbVZ1WkNncE8yVW1KbVV1YkdWdVozUm9KaVp5TG5CMWMyZ29aU2w5Y2k1d2RYTm9LRzUxYkd3cGZTa3NaUzV2YmloY0ltUmhkR0ZjSWl4bWRXNWpkR2x2YmlocEtYdHBaaWhFS0Z3aWQzSmhjSEJsWkNCa1lYUmhYQ0lwTEhRdVpHVmpiMlJsY2lZbUtHazlkQzVrWldOdlpHVnlMbmR5YVhSbEtHa3BLU3dvSVhRdWIySnFaV04wVFc5a1pYeDhiblZzYkNFOVBXa21Kblp2YVdRZ01DRTlQV2twSmlZb2RDNXZZbXBsWTNSTmIyUmxmSHhwSmlacExteGxibWQwYUNrcGUzWmhjaUJ2UFhJdWNIVnphQ2hwS1R0dmZId29iajBoTUN4bExuQmhkWE5sS0NrcGZYMHBPMlp2Y2loMllYSWdhU0JwYmlCbEtYWnZhV1FnTUQwOVBYUm9hWE5iYVYwbUpsd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1JR1ZiYVYwbUppaDBhR2x6VzJsZFBXWjFibU4wYVc5dUtIUXBlM0psZEhWeWJpQm1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQmxXM1JkTG1Gd2NHeDVLR1VzWVhKbmRXMWxiblJ6S1gxOUtHa3BLVHQyWVhJZ2J6MWJYQ0psY25KdmNsd2lMRndpWTJ4dmMyVmNJaXhjSW1SbGMzUnliM2xjSWl4Y0luQmhkWE5sWENJc1hDSnlaWE4xYldWY0lsMDdjbVYwZFhKdUlFOG9ieXhtZFc1amRHbHZiaWgwS1h0bExtOXVLSFFzY2k1bGJXbDBMbUpwYm1Rb2NpeDBLU2w5S1N4eUxsOXlaV0ZrUFdaMWJtTjBhVzl1S0hRcGUwUW9YQ0ozY21Gd2NHVmtJRjl5WldGa1hDSXNkQ2tzYmlZbUtHNDlJVEVzWlM1eVpYTjFiV1VvS1NsOUxISjlMRzh1WDJaeWIyMU1hWE4wUFhkOUtTNWpZV3hzS0hSb2FYTXNaU2hjSWw5d2NtOWpaWE56WENJcEtYMHNlMXdpTGk5ZmMzUnlaV0Z0WDJSMWNHeGxlRndpT2pJM0xGOXdjbTlqWlhOek9qSTFMR0oxWm1abGNqbzNMRndpWW5WbVptVnlMWE5vYVcxelhDSTZOaXhjSW1OdmNtVXRkWFJwYkMxcGMxd2lPakV4TEdWMlpXNTBjem94TWl4cGJtaGxjbWwwY3pveE9TeHBjMkZ5Y21GNU9qSXhMRndpY0hKdlkyVnpjeTF1WlhoMGFXTnJMV0Z5WjNOY0lqb3lOQ3hjSW5OMGNtbHVaMTlrWldOdlpHVnlMMXdpT2pReExIVjBhV3c2TTMxZExETXdPbHRtZFc1amRHbHZiaWhsTEhRc2JpbDdYQ0oxYzJVZ2MzUnlhV04wWENJN1puVnVZM1JwYjI0Z2NpaGxLWHQwYUdsekxtRm1kR1Z5VkhKaGJuTm1iM0p0UFdaMWJtTjBhVzl1S0hRc2JpbDdjbVYwZFhKdUlHa29aU3gwTEc0cGZTeDBhR2x6TG01bFpXUlVjbUZ1YzJadmNtMDlJVEVzZEdocGN5NTBjbUZ1YzJadmNtMXBibWM5SVRFc2RHaHBjeTUzY21sMFpXTmlQVzUxYkd3c2RHaHBjeTUzY21sMFpXTm9kVzVyUFc1MWJHd3NkR2hwY3k1M2NtbDBaV1Z1WTI5a2FXNW5QVzUxYkd4OVpuVnVZM1JwYjI0Z2FTaGxMSFFzYmlsN2RtRnlJSEk5WlM1ZmRISmhibk5tYjNKdFUzUmhkR1U3Y2k1MGNtRnVjMlp2Y20xcGJtYzlJVEU3ZG1GeUlHazljaTUzY21sMFpXTmlPMmxtS0NGcEtYSmxkSFZ5YmlCbExtVnRhWFFvWENKbGNuSnZjbHdpTEc1bGR5QkZjbkp2Y2loY0ltNXZJSGR5YVhSbFkySWdhVzRnVkhKaGJuTm1iM0p0SUdOc1lYTnpYQ0lwS1R0eUxuZHlhWFJsWTJoMWJtczliblZzYkN4eUxuZHlhWFJsWTJJOWJuVnNiQ3h1ZFd4c0lUMDliaVltZG05cFpDQXdJVDA5YmlZbVpTNXdkWE5vS0c0cExHa29kQ2s3ZG1GeUlHODlaUzVmY21WaFpHRmliR1ZUZEdGMFpUdHZMbkpsWVdScGJtYzlJVEVzS0c4dWJtVmxaRkpsWVdSaFlteGxmSHh2TG14bGJtZDBhRHh2TG1ocFoyaFhZWFJsY2sxaGNtc3BKaVpsTGw5eVpXRmtLRzh1YUdsbmFGZGhkR1Z5VFdGeWF5bDlablZ1WTNScGIyNGdieWhsS1h0cFppZ2hLSFJvYVhNZ2FXNXpkR0Z1WTJWdlppQnZLU2x5WlhSMWNtNGdibVYzSUc4b1pTazdZUzVqWVd4c0tIUm9hWE1zWlNrc2RHaHBjeTVmZEhKaGJuTm1iM0p0VTNSaGRHVTlibVYzSUhJb2RHaHBjeWs3ZG1GeUlIUTlkR2hwY3p0MGFHbHpMbDl5WldGa1lXSnNaVk4wWVhSbExtNWxaV1JTWldGa1lXSnNaVDBoTUN4MGFHbHpMbDl5WldGa1lXSnNaVk4wWVhSbExuTjVibU05SVRFc1pTWW1LRndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUdVdWRISmhibk5tYjNKdEppWW9kR2hwY3k1ZmRISmhibk5tYjNKdFBXVXVkSEpoYm5ObWIzSnRLU3hjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCbExtWnNkWE5vSmlZb2RHaHBjeTVmWm14MWMyZzlaUzVtYkhWemFDa3BMSFJvYVhNdWIyNWpaU2hjSW5CeVpXWnBibWx6YUZ3aUxHWjFibU4wYVc5dUtDbDdYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnZEdocGN5NWZabXgxYzJnL2RHaHBjeTVmWm14MWMyZ29ablZ1WTNScGIyNG9aU2w3Y3loMExHVXBmU2s2Y3loMEtYMHBmV1oxYm1OMGFXOXVJSE1vWlN4MEtYdHBaaWgwS1hKbGRIVnliaUJsTG1WdGFYUW9YQ0psY25KdmNsd2lMSFFwTzNaaGNpQnVQV1V1WDNkeWFYUmhZbXhsVTNSaGRHVXNjajFsTGw5MGNtRnVjMlp2Y20xVGRHRjBaVHRwWmlodUxteGxibWQwYUNsMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKRFlXeHNhVzVuSUhSeVlXNXpabTl5YlNCa2IyNWxJSGRvWlc0Z2QzTXViR1Z1WjNSb0lDRTlJREJjSWlrN2FXWW9jaTUwY21GdWMyWnZjbTFwYm1jcGRHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVEyRnNiR2x1WnlCMGNtRnVjMlp2Y20wZ1pHOXVaU0IzYUdWdUlITjBhV3hzSUhSeVlXNXpabTl5YldsdVoxd2lLVHR5WlhSMWNtNGdaUzV3ZFhOb0tHNTFiR3dwZlhRdVpYaHdiM0owY3oxdk8zWmhjaUJoUFdVb1hDSXVMMTl6ZEhKbFlXMWZaSFZ3YkdWNFhDSXBMSFU5WlNoY0ltTnZjbVV0ZFhScGJDMXBjMXdpS1R0MUxtbHVhR1Z5YVhSelBXVW9YQ0pwYm1obGNtbDBjMXdpS1N4MUxtbHVhR1Z5YVhSektHOHNZU2tzYnk1d2NtOTBiM1I1Y0dVdWNIVnphRDFtZFc1amRHbHZiaWhsTEhRcGUzSmxkSFZ5YmlCMGFHbHpMbDkwY21GdWMyWnZjbTFUZEdGMFpTNXVaV1ZrVkhKaGJuTm1iM0p0UFNFeExHRXVjSEp2ZEc5MGVYQmxMbkIxYzJndVkyRnNiQ2gwYUdsekxHVXNkQ2w5TEc4dWNISnZkRzkwZVhCbExsOTBjbUZ1YzJadmNtMDlablZ1WTNScGIyNG9aU3gwTEc0cGUzUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0lrNXZkQ0JwYlhCc1pXMWxiblJsWkZ3aUtYMHNieTV3Y205MGIzUjVjR1V1WDNkeWFYUmxQV1oxYm1OMGFXOXVLR1VzZEN4dUtYdDJZWElnY2oxMGFHbHpMbDkwY21GdWMyWnZjbTFUZEdGMFpUdHBaaWh5TG5keWFYUmxZMkk5Yml4eUxuZHlhWFJsWTJoMWJtczlaU3h5TG5keWFYUmxaVzVqYjJScGJtYzlkQ3doY2k1MGNtRnVjMlp2Y20xcGJtY3BlM1poY2lCcFBYUm9hWE11WDNKbFlXUmhZbXhsVTNSaGRHVTdLSEl1Ym1WbFpGUnlZVzV6Wm05eWJYeDhhUzV1WldWa1VtVmhaR0ZpYkdWOGZHa3ViR1Z1WjNSb1BHa3VhR2xuYUZkaGRHVnlUV0Z5YXlrbUpuUm9hWE11WDNKbFlXUW9hUzVvYVdkb1YyRjBaWEpOWVhKcktYMTlMRzh1Y0hKdmRHOTBlWEJsTGw5eVpXRmtQV1oxYm1OMGFXOXVLR1VwZTNaaGNpQjBQWFJvYVhNdVgzUnlZVzV6Wm05eWJWTjBZWFJsTzI1MWJHd2hQVDEwTG5keWFYUmxZMmgxYm1zbUpuUXVkM0pwZEdWallpWW1JWFF1ZEhKaGJuTm1iM0p0YVc1blB5aDBMblJ5WVc1elptOXliV2x1WnowaE1DeDBhR2x6TGw5MGNtRnVjMlp2Y20wb2RDNTNjbWwwWldOb2RXNXJMSFF1ZDNKcGRHVmxibU52WkdsdVp5eDBMbUZtZEdWeVZISmhibk5tYjNKdEtTazZkQzV1WldWa1ZISmhibk5tYjNKdFBTRXdmWDBzZTF3aUxpOWZjM1J5WldGdFgyUjFjR3hsZUZ3aU9qSTNMRndpWTI5eVpTMTFkR2xzTFdselhDSTZNVEVzYVc1b1pYSnBkSE02TVRsOVhTd3pNVHBiWm5WdVkzUnBiMjRvWlN4MExHNHBleWhtZFc1amRHbHZiaWh1S1h0Y0luVnpaU0J6ZEhKcFkzUmNJanRtZFc1amRHbHZiaUJ5S0NsN2ZXWjFibU4wYVc5dUlHa29aU3gwTEc0cGUzUm9hWE11WTJoMWJtczlaU3gwYUdsekxtVnVZMjlrYVc1blBYUXNkR2hwY3k1allXeHNZbUZqYXoxdUxIUm9hWE11Ym1WNGREMXVkV3hzZldaMWJtTjBhVzl1SUc4b2RDeHVLWHRPUFU1OGZHVW9YQ0l1TDE5emRISmxZVzFmWkhWd2JHVjRYQ0lwTEhROWRIeDhlMzBzZEdocGN5NXZZbXBsWTNSTmIyUmxQU0VoZEM1dlltcGxZM1JOYjJSbExHNGdhVzV6ZEdGdVkyVnZaaUJPSmlZb2RHaHBjeTV2WW1wbFkzUk5iMlJsUFhSb2FYTXViMkpxWldOMFRXOWtaWHg4SVNGMExuZHlhWFJoWW14bFQySnFaV04wVFc5a1pTazdkbUZ5SUhJOWRDNW9hV2RvVjJGMFpYSk5ZWEpyTEdrOWRHaHBjeTV2WW1wbFkzUk5iMlJsUHpFMk9qRTJNemcwTzNSb2FYTXVhR2xuYUZkaGRHVnlUV0Z5YXoxeWZId3dQVDA5Y2o5eU9ta3NkR2hwY3k1b2FXZG9WMkYwWlhKTllYSnJQWDUrZEdocGN5NW9hV2RvVjJGMFpYSk5ZWEpyTEhSb2FYTXVibVZsWkVSeVlXbHVQU0V4TEhSb2FYTXVaVzVrYVc1blBTRXhMSFJvYVhNdVpXNWtaV1E5SVRFc2RHaHBjeTVtYVc1cGMyaGxaRDBoTVR0MllYSWdiejEwTG1SbFkyOWtaVk4wY21sdVozTTlQVDBoTVR0MGFHbHpMbVJsWTI5a1pWTjBjbWx1WjNNOUlXOHNkR2hwY3k1a1pXWmhkV3gwUlc1amIyUnBibWM5ZEM1a1pXWmhkV3gwUlc1amIyUnBibWQ4ZkZ3aWRYUm1PRndpTEhSb2FYTXViR1Z1WjNSb1BUQXNkR2hwY3k1M2NtbDBhVzVuUFNFeExIUm9hWE11WTI5eWEyVmtQVEFzZEdocGN5NXplVzVqUFNFd0xIUm9hWE11WW5WbVptVnlVSEp2WTJWemMybHVaejBoTVN4MGFHbHpMbTl1ZDNKcGRHVTlablZ1WTNScGIyNG9aU2w3WkNodUxHVXBmU3gwYUdsekxuZHlhWFJsWTJJOWJuVnNiQ3gwYUdsekxuZHlhWFJsYkdWdVBUQXNkR2hwY3k1aWRXWm1aWEpsWkZKbGNYVmxjM1E5Ym5Wc2JDeDBhR2x6TG14aGMzUkNkV1ptWlhKbFpGSmxjWFZsYzNROWJuVnNiQ3gwYUdsekxuQmxibVJwYm1kallqMHdMSFJvYVhNdWNISmxabWx1YVhOb1pXUTlJVEVzZEdocGN5NWxjbkp2Y2tWdGFYUjBaV1E5SVRFc2RHaHBjeTVpZFdabVpYSmxaRkpsY1hWbGMzUkRiM1Z1ZEQwd0xIUm9hWE11WTI5eWEyVmtVbVZ4ZFdWemRITkdjbVZsUFc1bGR5QmlLSFJvYVhNcGZXWjFibU4wYVc5dUlITW9kQ2w3Y21WMGRYSnVJRTQ5VG54OFpTaGNJaTR2WDNOMGNtVmhiVjlrZFhCc1pYaGNJaWtzZEdocGN5QnBibk4wWVc1alpXOW1JSE44ZkhSb2FYTWdhVzV6ZEdGdVkyVnZaaUJPUHloMGFHbHpMbDkzY21sMFlXSnNaVk4wWVhSbFBXNWxkeUJ2S0hRc2RHaHBjeWtzZEdocGN5NTNjbWwwWVdKc1pUMGhNQ3gwSmlZb1hDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdkQzUzY21sMFpTWW1LSFJvYVhNdVgzZHlhWFJsUFhRdWQzSnBkR1VwTEZ3aVpuVnVZM1JwYjI1Y0lqMDlkSGx3Wlc5bUlIUXVkM0pwZEdWMkppWW9kR2hwY3k1ZmQzSnBkR1YyUFhRdWQzSnBkR1YyS1Nrc2RtOXBaQ0JCTG1OaGJHd29kR2hwY3lrcE9tNWxkeUJ6S0hRcGZXWjFibU4wYVc5dUlHRW9aU3gwS1h0MllYSWdiajF1WlhjZ1JYSnliM0lvWENKM2NtbDBaU0JoWm5SbGNpQmxibVJjSWlrN1pTNWxiV2wwS0Z3aVpYSnliM0pjSWl4dUtTeFRLSFFzYmlsOVpuVnVZM1JwYjI0Z2RTaGxMSFFzYml4eUtYdDJZWElnYVQwaE1DeHZQU0V4TzNKbGRIVnliaUJ1ZFd4c1BUMDliajl2UFc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pOWVhrZ2JtOTBJSGR5YVhSbElHNTFiR3dnZG1Gc2RXVnpJSFJ2SUhOMGNtVmhiVndpS1RwSkxtbHpRblZtWm1WeUtHNHBmSHhjSW5OMGNtbHVaMXdpUFQxMGVYQmxiMllnYm54OGRtOXBaQ0F3UFQwOWJueDhkQzV2WW1wbFkzUk5iMlJsZkh3b2J6MXVaWGNnVkhsd1pVVnljbTl5S0Z3aVNXNTJZV3hwWkNCdWIyNHRjM1J5YVc1bkwySjFabVpsY2lCamFIVnVhMXdpS1Nrc2J5WW1LR1V1WlcxcGRDaGNJbVZ5Y205eVhDSXNieWtzVXloeUxHOHBMR2s5SVRFcExHbDlablZ1WTNScGIyNGdaaWhsTEhRc2JpbDdjbVYwZFhKdUlHVXViMkpxWldOMFRXOWtaWHg4WlM1a1pXTnZaR1ZUZEhKcGJtZHpQVDA5SVRGOGZGd2ljM1J5YVc1blhDSWhQWFI1Y0dWdlppQjBmSHdvZEQxTUxtWnliMjBvZEN4dUtTa3NkSDFtZFc1amRHbHZiaUJqS0dVc2RDeHVMSElzYnlsN2JqMW1LSFFzYml4eUtTeEpMbWx6UW5WbVptVnlLRzRwSmlZb2NqMWNJbUoxWm1abGNsd2lLVHQyWVhJZ2N6MTBMbTlpYW1WamRFMXZaR1UvTVRwdUxteGxibWQwYUR0MExteGxibWQwYUNzOWN6dDJZWElnWVQxMExteGxibWQwYUR4MExtaHBaMmhYWVhSbGNrMWhjbXM3YVdZb1lYeDhLSFF1Ym1WbFpFUnlZV2x1UFNFd0tTeDBMbmR5YVhScGJtZDhmSFF1WTI5eWEyVmtLWHQyWVhJZ2RUMTBMbXhoYzNSQ2RXWm1aWEpsWkZKbGNYVmxjM1E3ZEM1c1lYTjBRblZtWm1WeVpXUlNaWEYxWlhOMFBXNWxkeUJwS0c0c2NpeHZLU3gxUDNVdWJtVjRkRDEwTG14aGMzUkNkV1ptWlhKbFpGSmxjWFZsYzNRNmRDNWlkV1ptWlhKbFpGSmxjWFZsYzNROWRDNXNZWE4wUW5WbVptVnlaV1JTWlhGMVpYTjBMSFF1WW5WbVptVnlaV1JTWlhGMVpYTjBRMjkxYm5RclBURjlaV3h6WlNCc0tHVXNkQ3doTVN4ekxHNHNjaXh2S1R0eVpYUjFjbTRnWVgxbWRXNWpkR2x2YmlCc0tHVXNkQ3h1TEhJc2FTeHZMSE1wZTNRdWQzSnBkR1ZzWlc0OWNpeDBMbmR5YVhSbFkySTljeXgwTG5keWFYUnBibWM5SVRBc2RDNXplVzVqUFNFd0xHNC9aUzVmZDNKcGRHVjJLR2tzZEM1dmJuZHlhWFJsS1RwbExsOTNjbWwwWlNocExHOHNkQzV2Ym5keWFYUmxLU3gwTG5ONWJtTTlJVEY5Wm5WdVkzUnBiMjRnYUNobExIUXNiaXh5TEdrcGV5MHRkQzV3Wlc1a2FXNW5ZMklzYmo5VEtHa3NjaWs2YVNoeUtTeGxMbDkzY21sMFlXSnNaVk4wWVhSbExtVnljbTl5UlcxcGRIUmxaRDBoTUN4bExtVnRhWFFvWENKbGNuSnZjbHdpTEhJcGZXWjFibU4wYVc5dUlIQW9aU2w3WlM1M2NtbDBhVzVuUFNFeExHVXVkM0pwZEdWallqMXVkV3hzTEdVdWJHVnVaM1JvTFQxbExuZHlhWFJsYkdWdUxHVXVkM0pwZEdWc1pXNDlNSDFtZFc1amRHbHZiaUJrS0dVc2RDbDdkbUZ5SUc0OVpTNWZkM0pwZEdGaWJHVlRkR0YwWlN4eVBXNHVjM2x1WXl4cFBXNHVkM0pwZEdWallqdHBaaWh3S0c0cExIUXBhQ2hsTEc0c2NpeDBMR2twTzJWc2MyVjdkbUZ5SUc4OWRpaHVLVHR2Zkh4dUxtTnZjbXRsWkh4OGJpNWlkV1ptWlhKUWNtOWpaWE56YVc1bmZId2hiaTVpZFdabVpYSmxaRkpsY1hWbGMzUjhmRjhvWlN4dUtTeHlQMDhvWnl4bExHNHNieXhwS1RwbktHVXNiaXh2TEdrcGZYMW1kVzVqZEdsdmJpQm5LR1VzZEN4dUxISXBlMjU4Zkhrb1pTeDBLU3gwTG5CbGJtUnBibWRqWWkwdExISW9LU3hGS0dVc2RDbDlablZ1WTNScGIyNGdlU2hsTEhRcGV6QTlQVDEwTG14bGJtZDBhQ1ltZEM1dVpXVmtSSEpoYVc0bUppaDBMbTVsWldSRWNtRnBiajBoTVN4bExtVnRhWFFvWENKa2NtRnBibHdpS1NsOVpuVnVZM1JwYjI0Z1h5aGxMSFFwZTNRdVluVm1abVZ5VUhKdlkyVnpjMmx1WnowaE1EdDJZWElnYmoxMExtSjFabVpsY21Wa1VtVnhkV1Z6ZER0cFppaGxMbDkzY21sMFpYWW1KbTRtSm00dWJtVjRkQ2w3ZG1GeUlISTlkQzVpZFdabVpYSmxaRkpsY1hWbGMzUkRiM1Z1ZEN4cFBXNWxkeUJCY25KaGVTaHlLU3h2UFhRdVkyOXlhMlZrVW1WeGRXVnpkSE5HY21WbE8yOHVaVzUwY25rOWJqdG1iM0lvZG1GeUlITTlNRHR1T3lscFczTmRQVzRzYmoxdUxtNWxlSFFzY3lzOU1UdHNLR1VzZEN3aE1DeDBMbXhsYm1kMGFDeHBMRndpWENJc2J5NW1hVzVwYzJncExIUXVjR1Z1WkdsdVoyTmlLeXNzZEM1c1lYTjBRblZtWm1WeVpXUlNaWEYxWlhOMFBXNTFiR3dzYnk1dVpYaDBQeWgwTG1OdmNtdGxaRkpsY1hWbGMzUnpSbkpsWlQxdkxtNWxlSFFzYnk1dVpYaDBQVzUxYkd3cE9uUXVZMjl5YTJWa1VtVnhkV1Z6ZEhOR2NtVmxQVzVsZHlCaUtIUXBmV1ZzYzJWN1ptOXlLRHR1T3lsN2RtRnlJR0U5Ymk1amFIVnVheXgxUFc0dVpXNWpiMlJwYm1jc1pqMXVMbU5oYkd4aVlXTnJMR005ZEM1dlltcGxZM1JOYjJSbFB6RTZZUzVzWlc1bmRHZzdhV1lvYkNobExIUXNJVEVzWXl4aExIVXNaaWtzYmoxdUxtNWxlSFFzZEM1M2NtbDBhVzVuS1dKeVpXRnJmVzUxYkd3OVBUMXVKaVlvZEM1c1lYTjBRblZtWm1WeVpXUlNaWEYxWlhOMFBXNTFiR3dwZlhRdVluVm1abVZ5WldSU1pYRjFaWE4wUTI5MWJuUTlNQ3gwTG1KMVptWmxjbVZrVW1WeGRXVnpkRDF1TEhRdVluVm1abVZ5VUhKdlkyVnpjMmx1WnowaE1YMW1kVzVqZEdsdmJpQjJLR1VwZTNKbGRIVnliaUJsTG1WdVpHbHVaeVltTUQwOVBXVXViR1Z1WjNSb0ppWnVkV3hzUFQwOVpTNWlkV1ptWlhKbFpGSmxjWFZsYzNRbUppRmxMbVpwYm1semFHVmtKaVloWlM1M2NtbDBhVzVuZldaMWJtTjBhVzl1SUcwb1pTeDBLWHQwTG5CeVpXWnBibWx6YUdWa2ZId29kQzV3Y21WbWFXNXBjMmhsWkQwaE1DeGxMbVZ0YVhRb1hDSndjbVZtYVc1cGMyaGNJaWtwZldaMWJtTjBhVzl1SUVVb1pTeDBLWHQyWVhJZ2JqMTJLSFFwTzNKbGRIVnliaUJ1SmlZb01EMDlQWFF1Y0dWdVpHbHVaMk5pUHlodEtHVXNkQ2tzZEM1bWFXNXBjMmhsWkQwaE1DeGxMbVZ0YVhRb1hDSm1hVzVwYzJoY0lpa3BPbTBvWlN4MEtTa3NibjFtZFc1amRHbHZiaUIzS0dVc2RDeHVLWHQwTG1WdVpHbHVaejBoTUN4RktHVXNkQ2tzYmlZbUtIUXVabWx1YVhOb1pXUS9VeWh1S1RwbExtOXVZMlVvWENKbWFXNXBjMmhjSWl4dUtTa3NkQzVsYm1SbFpEMGhNQ3hsTG5keWFYUmhZbXhsUFNFeGZXWjFibU4wYVc5dUlHSW9aU2w3ZG1GeUlIUTlkR2hwY3p0MGFHbHpMbTVsZUhROWJuVnNiQ3gwYUdsekxtVnVkSEo1UFc1MWJHd3NkR2hwY3k1bWFXNXBjMmc5Wm5WdVkzUnBiMjRvYmlsN2RtRnlJSEk5ZEM1bGJuUnllVHRtYjNJb2RDNWxiblJ5ZVQxdWRXeHNPM0k3S1h0MllYSWdhVDF5TG1OaGJHeGlZV05yTzJVdWNHVnVaR2x1WjJOaUxTMHNhU2h1S1N4eVBYSXVibVY0ZEgxbExtTnZjbXRsWkZKbGNYVmxjM1J6Um5KbFpUOWxMbU52Y210bFpGSmxjWFZsYzNSelJuSmxaUzV1WlhoMFBYUTZaUzVqYjNKclpXUlNaWEYxWlhOMGMwWnlaV1U5ZEgxOWRDNWxlSEJ2Y25SelBYTTdkbUZ5SUZNOVpTaGNJbkJ5YjJObGMzTXRibVY0ZEdsamF5MWhjbWR6WENJcExFODlJVzR1WW5KdmQzTmxjaVltVzF3aWRqQXVNVEJjSWl4Y0luWXdMamt1WENKZExtbHVaR1Y0VDJZb2JpNTJaWEp6YVc5dUxuTnNhV05sS0RBc05Ta3BQaTB4UDNObGRFbHRiV1ZrYVdGMFpUcFRPM011VjNKcGRHRmliR1ZUZEdGMFpUMXZPM1poY2lCU1BXVW9YQ0pqYjNKbExYVjBhV3d0YVhOY0lpazdVaTVwYm1obGNtbDBjejFsS0Z3aWFXNW9aWEpwZEhOY0lpazdkbUZ5SUVFc1ZEMTdaR1Z3Y21WallYUmxPbVVvWENKMWRHbHNMV1JsY0hKbFkyRjBaVndpS1gwN0lXWjFibU4wYVc5dUtDbDdkSEo1ZTBFOVpTaGNJbk4wY21WaGJWd2lLWDFqWVhSamFDaDBLWHQ5Wm1sdVlXeHNlWHRCZkh3b1FUMWxLRndpWlhabGJuUnpYQ0lwTGtWMlpXNTBSVzFwZEhSbGNpbDlmU2dwTzNaaGNpQkpQV1VvWENKaWRXWm1aWEpjSWlrdVFuVm1abVZ5TEV3OVpTaGNJbUoxWm1abGNpMXphR2x0YzF3aUtUdFNMbWx1YUdWeWFYUnpLSE1zUVNrN2RtRnlJRTQ3Ynk1d2NtOTBiM1I1Y0dVdVoyVjBRblZtWm1WeVBXWjFibU4wYVc5dUtDbDdabTl5S0haaGNpQmxQWFJvYVhNdVluVm1abVZ5WldSU1pYRjFaWE4wTEhROVcxMDdaVHNwZEM1d2RYTm9LR1VwTEdVOVpTNXVaWGgwTzNKbGRIVnliaUIwZlN4bWRXNWpkR2x2YmlncGUzUnllWHRQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2J5NXdjbTkwYjNSNWNHVXNYQ0ppZFdabVpYSmNJaXg3WjJWME9sUXVaR1Z3Y21WallYUmxLR1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJSFJvYVhNdVoyVjBRblZtWm1WeUtDbDlMRndpWDNkeWFYUmhZbXhsVTNSaGRHVXVZblZtWm1WeUlHbHpJR1JsY0hKbFkyRjBaV1F1SUZWelpTQmZkM0pwZEdGaWJHVlRkR0YwWlM1blpYUkNkV1ptWlhJZ2FXNXpkR1ZoWkM1Y0lpbDlLWDFqWVhSamFDaGxLWHQ5ZlNncE8zWmhjaUJPTzNNdWNISnZkRzkwZVhCbExuQnBjR1U5Wm5WdVkzUnBiMjRvS1h0MGFHbHpMbVZ0YVhRb1hDSmxjbkp2Y2x3aUxHNWxkeUJGY25KdmNpaGNJa05oYm01dmRDQndhWEJsTENCdWIzUWdjbVZoWkdGaWJHVmNJaWtwZlN4ekxuQnliM1J2ZEhsd1pTNTNjbWwwWlQxbWRXNWpkR2x2YmlobExIUXNiaWw3ZG1GeUlHazlkR2hwY3k1ZmQzSnBkR0ZpYkdWVGRHRjBaU3h2UFNFeE8zSmxkSFZ5Ymx3aVpuVnVZM1JwYjI1Y0lqMDlkSGx3Wlc5bUlIUW1KaWh1UFhRc2REMXVkV3hzS1N4SkxtbHpRblZtWm1WeUtHVXBQM1E5WENKaWRXWm1aWEpjSWpwMGZId29kRDFwTG1SbFptRjFiSFJGYm1OdlpHbHVaeWtzWENKbWRXNWpkR2x2Ymx3aUlUMTBlWEJsYjJZZ2JpWW1LRzQ5Y2lrc2FTNWxibVJsWkQ5aEtIUm9hWE1zYmlrNmRTaDBhR2x6TEdrc1pTeHVLU1ltS0drdWNHVnVaR2x1WjJOaUt5c3NiejFqS0hSb2FYTXNhU3hsTEhRc2Jpa3BMRzk5TEhNdWNISnZkRzkwZVhCbExtTnZjbXM5Wm5WdVkzUnBiMjRvS1h0MllYSWdaVDEwYUdsekxsOTNjbWwwWVdKc1pWTjBZWFJsTzJVdVkyOXlhMlZrS3l0OUxITXVjSEp2ZEc5MGVYQmxMblZ1WTI5eWF6MW1kVzVqZEdsdmJpZ3BlM1poY2lCbFBYUm9hWE11WDNkeWFYUmhZbXhsVTNSaGRHVTdaUzVqYjNKclpXUW1KaWhsTG1OdmNtdGxaQzB0TEdVdWQzSnBkR2x1WjN4OFpTNWpiM0pyWldSOGZHVXVabWx1YVhOb1pXUjhmR1V1WW5WbVptVnlVSEp2WTJWemMybHVaM3g4SVdVdVluVm1abVZ5WldSU1pYRjFaWE4wZkh4ZktIUm9hWE1zWlNrcGZTeHpMbkJ5YjNSdmRIbHdaUzV6WlhSRVpXWmhkV3gwUlc1amIyUnBibWM5Wm5WdVkzUnBiMjRvWlNsN2FXWW9YQ0p6ZEhKcGJtZGNJajA5ZEhsd1pXOW1JR1VtSmlobFBXVXVkRzlNYjNkbGNrTmhjMlVvS1Nrc0lTaGJYQ0pvWlhoY0lpeGNJblYwWmpoY0lpeGNJblYwWmkwNFhDSXNYQ0poYzJOcGFWd2lMRndpWW1sdVlYSjVYQ0lzWENKaVlYTmxOalJjSWl4Y0luVmpjekpjSWl4Y0luVmpjeTB5WENJc1hDSjFkR1l4Tm14bFhDSXNYQ0oxZEdZdE1UWnNaVndpTEZ3aWNtRjNYQ0pkTG1sdVpHVjRUMllvS0dVclhDSmNJaWt1ZEc5TWIzZGxja05oYzJVb0tTaytMVEVwS1hSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSlZibXR1YjNkdUlHVnVZMjlrYVc1bk9pQmNJaXRsS1R0eVpYUjFjbTRnZEdocGN5NWZkM0pwZEdGaWJHVlRkR0YwWlM1a1pXWmhkV3gwUlc1amIyUnBibWM5WlN4MGFHbHpmU3h6TG5CeWIzUnZkSGx3WlM1ZmQzSnBkR1U5Wm5WdVkzUnBiMjRvWlN4MExHNHBlMjRvYm1WM0lFVnljbTl5S0Z3aWJtOTBJR2x0Y0d4bGJXVnVkR1ZrWENJcEtYMHNjeTV3Y205MGIzUjVjR1V1WDNkeWFYUmxkajF1ZFd4c0xITXVjSEp2ZEc5MGVYQmxMbVZ1WkQxbWRXNWpkR2x2YmlobExIUXNiaWw3ZG1GeUlISTlkR2hwY3k1ZmQzSnBkR0ZpYkdWVGRHRjBaVHRjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCbFB5aHVQV1VzWlQxdWRXeHNMSFE5Ym5Wc2JDazZYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnZENZbUtHNDlkQ3gwUFc1MWJHd3BMRzUxYkd3aFBUMWxKaVoyYjJsa0lEQWhQVDFsSmlaMGFHbHpMbmR5YVhSbEtHVXNkQ2tzY2k1amIzSnJaV1FtSmloeUxtTnZjbXRsWkQweExIUm9hWE11ZFc1amIzSnJLQ2twTEhJdVpXNWthVzVuZkh4eUxtWnBibWx6YUdWa2ZIeDNLSFJvYVhNc2NpeHVLWDE5S1M1allXeHNLSFJvYVhNc1pTaGNJbDl3Y205alpYTnpYQ0lwS1gwc2Uxd2lMaTlmYzNSeVpXRnRYMlIxY0d4bGVGd2lPakkzTEY5d2NtOWpaWE56T2pJMUxHSjFabVpsY2pvM0xGd2lZblZtWm1WeUxYTm9hVzF6WENJNk5peGNJbU52Y21VdGRYUnBiQzFwYzF3aU9qRXhMR1YyWlc1MGN6b3hNaXhwYm1obGNtbDBjem94T1N4Y0luQnliMk5sYzNNdGJtVjRkR2xqYXkxaGNtZHpYQ0k2TWpRc1hDSjFkR2xzTFdSbGNISmxZMkYwWlZ3aU9qUXlmVjBzTXpJNlcyWjFibU4wYVc5dUtHVXNkQ3h1S1h0MExtVjRjRzl5ZEhNOVpTaGNJaTR2YkdsaUwxOXpkSEpsWVcxZmNHRnpjM1JvY205MVoyZ3Vhbk5jSWlsOUxIdGNJaTR2YkdsaUwxOXpkSEpsWVcxZmNHRnpjM1JvY205MVoyZ3Vhbk5jSWpveU9IMWRMRE16T2x0bWRXNWpkR2x2YmlobExIUXNiaWw3S0daMWJtTjBhVzl1S0hJcGUzWmhjaUJwUFdaMWJtTjBhVzl1S0NsN2RISjVlM0psZEhWeWJpQmxLRndpYzNSeVpXRnRYQ0lwZldOaGRHTm9LSFFwZTMxOUtDazdiajEwTG1WNGNHOXlkSE05WlNoY0lpNHZiR2xpTDE5emRISmxZVzFmY21WaFpHRmliR1V1YW5OY0lpa3NiaTVUZEhKbFlXMDlhWHg4Yml4dUxsSmxZV1JoWW14bFBXNHNiaTVYY21sMFlXSnNaVDFsS0Z3aUxpOXNhV0l2WDNOMGNtVmhiVjkzY21sMFlXSnNaUzVxYzF3aUtTeHVMa1IxY0d4bGVEMWxLRndpTGk5c2FXSXZYM04wY21WaGJWOWtkWEJzWlhndWFuTmNJaWtzYmk1VWNtRnVjMlp2Y20wOVpTaGNJaTR2YkdsaUwxOXpkSEpsWVcxZmRISmhibk5tYjNKdExtcHpYQ0lwTEc0dVVHRnpjMVJvY205MVoyZzlaU2hjSWk0dmJHbGlMMTl6ZEhKbFlXMWZjR0Z6YzNSb2NtOTFaMmd1YW5OY0lpa3NJWEl1WW5KdmQzTmxjaVltWENKa2FYTmhZbXhsWENJOVBUMXlMbVZ1ZGk1U1JVRkVRVUpNUlY5VFZGSkZRVTBtSm1rbUppaDBMbVY0Y0c5eWRITTlhU2w5S1M1allXeHNLSFJvYVhNc1pTaGNJbDl3Y205alpYTnpYQ0lwS1gwc2Uxd2lMaTlzYVdJdlgzTjBjbVZoYlY5a2RYQnNaWGd1YW5OY0lqb3lOeXhjSWk0dmJHbGlMMTl6ZEhKbFlXMWZjR0Z6YzNSb2NtOTFaMmd1YW5OY0lqb3lPQ3hjSWk0dmJHbGlMMTl6ZEhKbFlXMWZjbVZoWkdGaWJHVXVhbk5jSWpveU9TeGNJaTR2YkdsaUwxOXpkSEpsWVcxZmRISmhibk5tYjNKdExtcHpYQ0k2TXpBc1hDSXVMMnhwWWk5ZmMzUnlaV0Z0WDNkeWFYUmhZbXhsTG1welhDSTZNekVzWDNCeWIyTmxjM002TWpWOVhTd3pORHBiWm5WdVkzUnBiMjRvWlN4MExHNHBlM1F1Wlhod2IzSjBjejFsS0Z3aUxpOXNhV0l2WDNOMGNtVmhiVjkwY21GdWMyWnZjbTB1YW5OY0lpbDlMSHRjSWk0dmJHbGlMMTl6ZEhKbFlXMWZkSEpoYm5ObWIzSnRMbXB6WENJNk16QjlYU3d6TlRwYlpuVnVZM1JwYjI0b1pTeDBMRzRwZTNRdVpYaHdiM0owY3oxbEtGd2lMaTlzYVdJdlgzTjBjbVZoYlY5M2NtbDBZV0pzWlM1cWMxd2lLWDBzZTF3aUxpOXNhV0l2WDNOMGNtVmhiVjkzY21sMFlXSnNaUzVxYzF3aU9qTXhmVjBzTXpZNlcyWjFibU4wYVc5dUtHVXNkQ3h1S1hzb1puVnVZM1JwYjI0b1pTbDdablZ1WTNScGIyNGdiaWdwZTJaMWJtTjBhVzl1SUhRb1l5bDdZeVltSVdFbUppaGhQV01wTzJadmNpaDJZWElnYkQxaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvTEdnOU1UdG9QR3c3YUNzcktYWnZhV1FnTUNFOVBXRnlaM1Z0Wlc1MGMxdG9YU1ltS0hOYmFDMHhYVDBvYzF0b0xURmRmSHhiWFNrdVkyOXVZMkYwS0dGeVozVnRaVzUwYzF0b1hTa3BPMmxtS0hJdWJHVnVaM1JvUG5VcGUzWmhjaUJ3UFhJdWMyeHBZMlVvZFNrN1ppczlLSEl1YkdWdVozUm9MWFVwS204c2RUMXlMbXhsYm1kMGFDeGxMbTVsZUhSVWFXTnJLR1oxYm1OMGFXOXVLQ2w3Y0M1bWIzSkZZV05vS0daMWJtTjBhVzl1S0dVcGUyNHVabTl5UldGamFDaG1kVzVqZEdsdmJpaHVLWHR1S0dVc2RDbDlLWDBwZlNsOU1EMDlQUzB0WmlZbWFTNWhjSEJzZVNodWRXeHNMRnRoWFM1amIyNWpZWFFvY3lrcGZYWmhjaUJ1UFVGeWNtRjVMbkJ5YjNSdmRIbHdaUzV6YkdsalpTNWpZV3hzS0dGeVozVnRaVzUwY3lrc2NqMXVMbk5vYVdaMEtDbDhmRnRkTEdrOWJpNXdiM0FvS1R0cFppaGNJbVoxYm1OMGFXOXVYQ0loUFhSNWNHVnZaaUJwS1hSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSWs1dklHTmhiR3hpWVdOcklIQnliM1pwWkdWa0lIUnZJR0Z6ZVc1alRXRndYQ0lwTzJsbUtDRnlLWEpsZEhWeWJpQnBLRzUxYkd3c1cxMHBPMEZ5Y21GNUxtbHpRWEp5WVhrb2NpbDhmQ2h5UFZ0eVhTazdkbUZ5SUc4OWJpNXNaVzVuZEdnc2N6MWJYU3hoUFc1MWJHd3NkVDF5TG14bGJtZDBhQ3htUFhVcWJ6dHlaWFIxY200Z1pqOTJiMmxrSUhJdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlobEtYdHVMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9iaWw3YmlobExIUXBmU2w5S1RwcEtHNTFiR3dzVzEwcGZYUXVaWGh3YjNKMGN6MXVmU2t1WTJGc2JDaDBhR2x6TEdVb1hDSmZjSEp2WTJWemMxd2lLU2w5TEh0ZmNISnZZMlZ6Y3pveU5YMWRMRE0zT2x0bWRXNWpkR2x2YmlobExIUXNiaWw3Wm5WdVkzUnBiMjRnY2lncGUzWmhjaUJsTEhROVFYSnlZWGt1Y0hKdmRHOTBlWEJsTG5Oc2FXTmxMbU5oYkd3b1lYSm5kVzFsYm5SektTeHVQVzUxYkd3N2NtVjBkWEp1WENKdlltcGxZM1JjSWowOWRIbHdaVzltSUhSYk1GMC9LRzQ5ZEM1emFHbG1kQ2dwTEdVOWRDNXphR2xtZENncExGd2ljM1J5YVc1blhDSTlQWFI1Y0dWdlppQmxKaVlvWlQxdVcyVmRLU2s2WlQxMExuTm9hV1owS0Nrc1puVnVZM1JwYjI0b2NpbDdaUzVoY0hCc2VTaHVMSFF1WTI5dVkyRjBLSElwS1gxOWRDNWxlSEJ2Y25SelBYSjlMSHQ5WFN3ek9EcGJablZ1WTNScGIyNG9aU3gwTEc0cGUyWjFibU4wYVc5dUlISW9aU3gwS1h0MllYSWdiajFiWFRzaFpuVnVZM1JwYjI0Z2J5aHpMR0VwZTNKbGRIVnliaUJ6UGoxaFAzUW9iblZzYkN4dUtUb29RWEp5WVhrdWFYTkJjbkpoZVNobFczTmRLU1ltS0dWYmMxMDlhUzVoY0hCc2VTaHVkV3hzTEdWYmMxMHViV0Z3S0daMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCbFBUMDljaTVtYVhKemREOXVXekJkT21VOVBUMXlMbXhoYzNRL2JsdHVMbXhsYm1kMGFDMHhYVHBsZlNrcEtTeGxXM05kUDNadmFXUWdaVnR6WFNobWRXNWpkR2x2YmlobExISXBlM0psZEhWeWJpQmxQM1FvWlN4dUtUb29kbTlwWkNBd0lUMDljaVltS0c0OWJpNWpiMjVqWVhRb2Npa3BMSFp2YVdRZ2J5aHpLekVzWVNrcGZTazZieWh6S3pFc1lTa3BmU2d3TEdVdWJHVnVaM1JvS1gxMExtVjRjRzl5ZEhNOWNqdDJZWElnYVQxbEtGd2lMaTlpYVc1a0xXRmpkRzl5TG1welhDSXBPM0l1Wm1seWMzUTllMzBzY2k1c1lYTjBQWHQ5ZlN4N1hDSXVMMkpwYm1RdFlXTjBiM0l1YW5OY0lqb3pOMzFkTERNNU9sdG1kVzVqZEdsdmJpaGxMSFFzYmlsN2JpNWhjM2x1WTAxaGNEMWxLRndpTGk5aGMzbHVZeTF0WVhCY0lpa3NiaTVpYVc1a1FXTjBiM0k5WlNoY0lpNHZZbWx1WkMxaFkzUnZjbHdpS1N4dUxtTm9ZV2x1UFdVb1hDSXVMMk5vWVdsdVhDSXBmU3g3WENJdUwyRnplVzVqTFcxaGNGd2lPak0yTEZ3aUxpOWlhVzVrTFdGamRHOXlYQ0k2TXpjc1hDSXVMMk5vWVdsdVhDSTZNemg5WFN3ME1EcGJablZ1WTNScGIyNG9aU3gwTEc0cGUyWjFibU4wYVc5dUlISW9LWHRwTG1OaGJHd29kR2hwY3lsOWRDNWxlSEJ2Y25SelBYSTdkbUZ5SUdrOVpTaGNJbVYyWlc1MGMxd2lLUzVGZG1WdWRFVnRhWFIwWlhJc2J6MWxLRndpYVc1b1pYSnBkSE5jSWlrN2J5aHlMR2twTEhJdVVtVmhaR0ZpYkdVOVpTaGNJbkpsWVdSaFlteGxMWE4wY21WaGJTOXlaV0ZrWVdKc1pTNXFjMXdpS1N4eUxsZHlhWFJoWW14bFBXVW9YQ0p5WldGa1lXSnNaUzF6ZEhKbFlXMHZkM0pwZEdGaWJHVXVhbk5jSWlrc2NpNUVkWEJzWlhnOVpTaGNJbkpsWVdSaFlteGxMWE4wY21WaGJTOWtkWEJzWlhndWFuTmNJaWtzY2k1VWNtRnVjMlp2Y20wOVpTaGNJbkpsWVdSaFlteGxMWE4wY21WaGJTOTBjbUZ1YzJadmNtMHVhbk5jSWlrc2NpNVFZWE56VkdoeWIzVm5hRDFsS0Z3aWNtVmhaR0ZpYkdVdGMzUnlaV0Z0TDNCaGMzTjBhSEp2ZFdkb0xtcHpYQ0lwTEhJdVUzUnlaV0Z0UFhJc2NpNXdjbTkwYjNSNWNHVXVjR2x3WlQxbWRXNWpkR2x2YmlobExIUXBlMloxYm1OMGFXOXVJRzRvZENsN1pTNTNjbWwwWVdKc1pTWW1JVEU5UFQxbExuZHlhWFJsS0hRcEppWm1MbkJoZFhObEppWm1MbkJoZFhObEtDbDlablZ1WTNScGIyNGdjaWdwZTJZdWNtVmhaR0ZpYkdVbUptWXVjbVZ6ZFcxbEppWm1MbkpsYzNWdFpTZ3BmV1oxYm1OMGFXOXVJRzhvS1h0amZId29ZejBoTUN4bExtVnVaQ2dwS1gxbWRXNWpkR2x2YmlCektDbDdZM3g4S0dNOUlUQXNYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnWlM1a1pYTjBjbTk1SmlabExtUmxjM1J5YjNrb0tTbDlablZ1WTNScGIyNGdZU2hsS1h0cFppaDFLQ2tzTUQwOVBXa3ViR2x6ZEdWdVpYSkRiM1Z1ZENoMGFHbHpMRndpWlhKeWIzSmNJaWtwZEdoeWIzY2daWDFtZFc1amRHbHZiaUIxS0NsN1ppNXlaVzF2ZG1WTWFYTjBaVzVsY2loY0ltUmhkR0ZjSWl4dUtTeGxMbkpsYlc5MlpVeHBjM1JsYm1WeUtGd2laSEpoYVc1Y0lpeHlLU3htTG5KbGJXOTJaVXhwYzNSbGJtVnlLRndpWlc1a1hDSXNieWtzWmk1eVpXMXZkbVZNYVhOMFpXNWxjaWhjSW1Oc2IzTmxYQ0lzY3lrc1ppNXlaVzF2ZG1WTWFYTjBaVzVsY2loY0ltVnljbTl5WENJc1lTa3NaUzV5WlcxdmRtVk1hWE4wWlc1bGNpaGNJbVZ5Y205eVhDSXNZU2tzWmk1eVpXMXZkbVZNYVhOMFpXNWxjaWhjSW1WdVpGd2lMSFVwTEdZdWNtVnRiM1psVEdsemRHVnVaWElvWENKamJHOXpaVndpTEhVcExHVXVjbVZ0YjNabFRHbHpkR1Z1WlhJb1hDSmpiRzl6WlZ3aUxIVXBmWFpoY2lCbVBYUm9hWE03Wmk1dmJpaGNJbVJoZEdGY0lpeHVLU3hsTG05dUtGd2laSEpoYVc1Y0lpeHlLU3hsTGw5cGMxTjBaR2x2Zkh4MEppWjBMbVZ1WkQwOVBTRXhmSHdvWmk1dmJpaGNJbVZ1WkZ3aUxHOHBMR1l1YjI0b1hDSmpiRzl6WlZ3aUxITXBLVHQyWVhJZ1l6MGhNVHR5WlhSMWNtNGdaaTV2YmloY0ltVnljbTl5WENJc1lTa3NaUzV2YmloY0ltVnljbTl5WENJc1lTa3NaaTV2YmloY0ltVnVaRndpTEhVcExHWXViMjRvWENKamJHOXpaVndpTEhVcExHVXViMjRvWENKamJHOXpaVndpTEhVcExHVXVaVzFwZENoY0luQnBjR1ZjSWl4bUtTeGxmWDBzZTJWMlpXNTBjem94TWl4cGJtaGxjbWwwY3pveE9TeGNJbkpsWVdSaFlteGxMWE4wY21WaGJTOWtkWEJzWlhndWFuTmNJam95Tml4Y0luSmxZV1JoWW14bExYTjBjbVZoYlM5d1lYTnpkR2h5YjNWbmFDNXFjMXdpT2pNeUxGd2ljbVZoWkdGaWJHVXRjM1J5WldGdEwzSmxZV1JoWW14bExtcHpYQ0k2TXpNc1hDSnlaV0ZrWVdKc1pTMXpkSEpsWVcwdmRISmhibk5tYjNKdExtcHpYQ0k2TXpRc1hDSnlaV0ZrWVdKc1pTMXpkSEpsWVcwdmQzSnBkR0ZpYkdVdWFuTmNJam96TlgxZExEUXhPbHRtZFc1amRHbHZiaWhsTEhRc2JpbDdablZ1WTNScGIyNGdjaWhsS1h0cFppaGxKaVloZFNobEtTbDBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSlZibXR1YjNkdUlHVnVZMjlrYVc1bk9pQmNJaXRsS1gxbWRXNWpkR2x2YmlCcEtHVXBlM0psZEhWeWJpQmxMblJ2VTNSeWFXNW5LSFJvYVhNdVpXNWpiMlJwYm1jcGZXWjFibU4wYVc5dUlHOG9aU2w3ZEdocGN5NWphR0Z5VW1WalpXbDJaV1E5WlM1c1pXNW5kR2dsTWl4MGFHbHpMbU5vWVhKTVpXNW5kR2c5ZEdocGN5NWphR0Z5VW1WalpXbDJaV1EvTWpvd2ZXWjFibU4wYVc5dUlITW9aU2w3ZEdocGN5NWphR0Z5VW1WalpXbDJaV1E5WlM1c1pXNW5kR2dsTXl4MGFHbHpMbU5vWVhKTVpXNW5kR2c5ZEdocGN5NWphR0Z5VW1WalpXbDJaV1EvTXpvd2ZYWmhjaUJoUFdVb1hDSmlkV1ptWlhKY0lpa3VRblZtWm1WeUxIVTlZUzVwYzBWdVkyOWthVzVuZkh4bWRXNWpkR2x2YmlobEtYdHpkMmwwWTJnb1pTWW1aUzUwYjB4dmQyVnlRMkZ6WlNncEtYdGpZWE5sWENKb1pYaGNJanBqWVhObFhDSjFkR1k0WENJNlkyRnpaVndpZFhSbUxUaGNJanBqWVhObFhDSmhjMk5wYVZ3aU9tTmhjMlZjSW1KcGJtRnllVndpT21OaGMyVmNJbUpoYzJVMk5Gd2lPbU5oYzJWY0luVmpjekpjSWpwallYTmxYQ0oxWTNNdE1sd2lPbU5oYzJWY0luVjBaakUyYkdWY0lqcGpZWE5sWENKMWRHWXRNVFpzWlZ3aU9tTmhjMlZjSW5KaGQxd2lPbkpsZEhWeWJpRXdPMlJsWm1GMWJIUTZjbVYwZFhKdUlURjlmU3htUFc0dVUzUnlhVzVuUkdWamIyUmxjajFtZFc1amRHbHZiaWhsS1h0emQybDBZMmdvZEdocGN5NWxibU52WkdsdVp6MG9aWHg4WENKMWRHWTRYQ0lwTG5SdlRHOTNaWEpEWVhObEtDa3VjbVZ3YkdGalpTZ3ZXeTFmWFM4c1hDSmNJaWtzY2lobEtTeDBhR2x6TG1WdVkyOWthVzVuS1h0allYTmxYQ0oxZEdZNFhDSTZkR2hwY3k1emRYSnliMmRoZEdWVGFYcGxQVE03WW5KbFlXczdZMkZ6WlZ3aWRXTnpNbHdpT21OaGMyVmNJblYwWmpFMmJHVmNJanAwYUdsekxuTjFjbkp2WjJGMFpWTnBlbVU5TWl4MGFHbHpMbVJsZEdWamRFbHVZMjl0Y0d4bGRHVkRhR0Z5UFc4N1luSmxZV3M3WTJGelpWd2lZbUZ6WlRZMFhDSTZkR2hwY3k1emRYSnliMmRoZEdWVGFYcGxQVE1zZEdocGN5NWtaWFJsWTNSSmJtTnZiWEJzWlhSbFEyaGhjajF6TzJKeVpXRnJPMlJsWm1GMWJIUTZjbVYwZFhKdUlIWnZhV1FvZEdocGN5NTNjbWwwWlQxcEtYMTBhR2x6TG1Ob1lYSkNkV1ptWlhJOWJtVjNJR0VvTmlrc2RHaHBjeTVqYUdGeVVtVmpaV2wyWldROU1DeDBhR2x6TG1Ob1lYSk1aVzVuZEdnOU1IMDdaaTV3Y205MGIzUjVjR1V1ZDNKcGRHVTlablZ1WTNScGIyNG9aU2w3Wm05eUtIWmhjaUIwUFZ3aVhDSTdkR2hwY3k1amFHRnlUR1Z1WjNSb095bDdkbUZ5SUc0OVpTNXNaVzVuZEdnK1BYUm9hWE11WTJoaGNreGxibWQwYUMxMGFHbHpMbU5vWVhKU1pXTmxhWFpsWkQ5MGFHbHpMbU5vWVhKTVpXNW5kR2d0ZEdocGN5NWphR0Z5VW1WalpXbDJaV1E2WlM1c1pXNW5kR2c3YVdZb1pTNWpiM0I1S0hSb2FYTXVZMmhoY2tKMVptWmxjaXgwYUdsekxtTm9ZWEpTWldObGFYWmxaQ3d3TEc0cExIUm9hWE11WTJoaGNsSmxZMlZwZG1Wa0t6MXVMSFJvYVhNdVkyaGhjbEpsWTJWcGRtVmtQSFJvYVhNdVkyaGhja3hsYm1kMGFDbHlaWFIxY201Y0lsd2lPMlU5WlM1emJHbGpaU2h1TEdVdWJHVnVaM1JvS1N4MFBYUm9hWE11WTJoaGNrSjFabVpsY2k1emJHbGpaU2d3TEhSb2FYTXVZMmhoY2t4bGJtZDBhQ2t1ZEc5VGRISnBibWNvZEdocGN5NWxibU52WkdsdVp5azdkbUZ5SUhJOWRDNWphR0Z5UTI5a1pVRjBLSFF1YkdWdVozUm9MVEVwTzJsbUtDRW9jajQ5TlRVeU9UWW1Kbkk4UFRVMk16RTVLU2w3YVdZb2RHaHBjeTVqYUdGeVVtVmpaV2wyWldROWRHaHBjeTVqYUdGeVRHVnVaM1JvUFRBc01EMDlQV1V1YkdWdVozUm9LWEpsZEhWeWJpQjBPMkp5WldGcmZYUm9hWE11WTJoaGNreGxibWQwYUNzOWRHaHBjeTV6ZFhKeWIyZGhkR1ZUYVhwbExIUTlYQ0pjSW4xMGFHbHpMbVJsZEdWamRFbHVZMjl0Y0d4bGRHVkRhR0Z5S0dVcE8zWmhjaUJwUFdVdWJHVnVaM1JvTzNSb2FYTXVZMmhoY2t4bGJtZDBhQ1ltS0dVdVkyOXdlU2gwYUdsekxtTm9ZWEpDZFdabVpYSXNNQ3hsTG14bGJtZDBhQzEwYUdsekxtTm9ZWEpTWldObGFYWmxaQ3hwS1N4cExUMTBhR2x6TG1Ob1lYSlNaV05sYVhabFpDa3NkQ3M5WlM1MGIxTjBjbWx1WnloMGFHbHpMbVZ1WTI5a2FXNW5MREFzYVNrN2RtRnlJR2s5ZEM1c1pXNW5kR2d0TVN4eVBYUXVZMmhoY2tOdlpHVkJkQ2hwS1R0cFppaHlQajAxTlRJNU5pWW1janc5TlRZek1Ua3BlM1poY2lCdlBYUm9hWE11YzNWeWNtOW5ZWFJsVTJsNlpUdHlaWFIxY200Z2RHaHBjeTVqYUdGeVRHVnVaM1JvS3oxdkxIUm9hWE11WTJoaGNsSmxZMlZwZG1Wa0t6MXZMSFJvYVhNdVkyaGhja0oxWm1abGNpNWpiM0I1S0hSb2FYTXVZMmhoY2tKMVptWmxjaXh2TERBc2J5a3NaUzVqYjNCNUtIUm9hWE11WTJoaGNrSjFabVpsY2l3d0xEQXNieWtzZEM1emRXSnpkSEpwYm1jb01DeHBLWDF5WlhSMWNtNGdkSDBzWmk1d2NtOTBiM1I1Y0dVdVpHVjBaV04wU1c1amIyMXdiR1YwWlVOb1lYSTlablZ1WTNScGIyNG9aU2w3Wm05eUtIWmhjaUIwUFdVdWJHVnVaM1JvUGowelB6TTZaUzVzWlc1bmRHZzdkRDR3TzNRdExTbDdkbUZ5SUc0OVpWdGxMbXhsYm1kMGFDMTBYVHRwWmlneFBUMTBKaVp1UGo0MVBUMDJLWHQwYUdsekxtTm9ZWEpNWlc1bmRHZzlNanRpY21WaGEzMXBaaWgwUEQweUppWnVQajQwUFQweE5DbDdkR2hwY3k1amFHRnlUR1Z1WjNSb1BUTTdZbkpsWVd0OWFXWW9kRHc5TXlZbWJqNCtNejA5TXpBcGUzUm9hWE11WTJoaGNreGxibWQwYUQwME8ySnlaV0ZyZlgxMGFHbHpMbU5vWVhKU1pXTmxhWFpsWkQxMGZTeG1MbkJ5YjNSdmRIbHdaUzVsYm1ROVpuVnVZM1JwYjI0b1pTbDdkbUZ5SUhROVhDSmNJanRwWmlobEppWmxMbXhsYm1kMGFDWW1LSFE5ZEdocGN5NTNjbWwwWlNobEtTa3NkR2hwY3k1amFHRnlVbVZqWldsMlpXUXBlM1poY2lCdVBYUm9hWE11WTJoaGNsSmxZMlZwZG1Wa0xISTlkR2hwY3k1amFHRnlRblZtWm1WeUxHazlkR2hwY3k1bGJtTnZaR2x1Wnp0MEt6MXlMbk5zYVdObEtEQXNiaWt1ZEc5VGRISnBibWNvYVNsOWNtVjBkWEp1SUhSOWZTeDdZblZtWm1WeU9qZDlYU3cwTWpwYlpuVnVZM1JwYjI0b1pTeDBMRzRwZXlobWRXNWpkR2x2YmlobEtYdG1kVzVqZEdsdmJpQnVLR1VzZENsN1puVnVZM1JwYjI0Z2JpZ3BlMmxtS0NGcEtYdHBaaWh5S0Z3aWRHaHliM2RFWlhCeVpXTmhkR2x2Ymx3aUtTbDBhSEp2ZHlCdVpYY2dSWEp5YjNJb2RDazdjaWhjSW5SeVlXTmxSR1Z3Y21WallYUnBiMjVjSWlrL1kyOXVjMjlzWlM1MGNtRmpaU2gwS1RwamIyNXpiMnhsTG5kaGNtNG9kQ2tzYVQwaE1IMXlaWFIxY200Z1pTNWhjSEJzZVNoMGFHbHpMR0Z5WjNWdFpXNTBjeWw5YVdZb2NpaGNJbTV2UkdWd2NtVmpZWFJwYjI1Y0lpa3BjbVYwZFhKdUlHVTdkbUZ5SUdrOUlURTdjbVYwZFhKdUlHNTlablZ1WTNScGIyNGdjaWgwS1h0MGNubDdhV1lvSVdVdWJHOWpZV3hUZEc5eVlXZGxLWEpsZEhWeWJpRXhmV05oZEdOb0tHNHBlM0psZEhWeWJpRXhmWFpoY2lCeVBXVXViRzlqWVd4VGRHOXlZV2RsVzNSZE8zSmxkSFZ5YmlCdWRXeHNJVDF5SmlaY0luUnlkV1ZjSWowOVBWTjBjbWx1WnloeUtTNTBiMHh2ZDJWeVEyRnpaU2dwZlhRdVpYaHdiM0owY3oxdWZTa3VZMkZzYkNoMGFHbHpMRndpZFc1a1pXWnBibVZrWENJaFBYUjVjR1Z2WmlCbmJHOWlZV3cvWjJ4dlltRnNPbHdpZFc1a1pXWnBibVZrWENJaFBYUjVjR1Z2WmlCelpXeG1QM05sYkdZNlhDSjFibVJsWm1sdVpXUmNJaUU5ZEhsd1pXOW1JSGRwYm1SdmR6OTNhVzVrYjNjNmUzMHBmU3g3ZlYwc05ETTZXMloxYm1OMGFXOXVLR1VzZEN4dUtYdDBMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJR1VtSmx3aWIySnFaV04wWENJOVBYUjVjR1Z2WmlCbEppWmNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUJsTG1OdmNIa21KbHdpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUdVdVptbHNiQ1ltWENKbWRXNWpkR2x2Ymx3aVBUMTBlWEJsYjJZZ1pTNXlaV0ZrVlVsdWREaDlmU3g3ZlYwc05EUTZXMloxYm1OMGFXOXVLR1VzZEN4dUtYc29ablZ1WTNScGIyNG9kQ3h5S1h0bWRXNWpkR2x2YmlCcEtHVXNkQ2w3ZG1GeUlISTllM05sWlc0NlcxMHNjM1I1YkdsNlpUcHpmVHR5WlhSMWNtNGdZWEpuZFcxbGJuUnpMbXhsYm1kMGFENDlNeVltS0hJdVpHVndkR2c5WVhKbmRXMWxiblJ6V3pKZEtTeGhjbWQxYldWdWRITXViR1Z1WjNSb1BqMDBKaVlvY2k1amIyeHZjbk05WVhKbmRXMWxiblJ6V3pOZEtTeG5LSFFwUDNJdWMyaHZkMGhwWkdSbGJqMTBPblFtSm00dVgyVjRkR1Z1WkNoeUxIUXBMSGNvY2k1emFHOTNTR2xrWkdWdUtTWW1LSEl1YzJodmQwaHBaR1JsYmowaE1Ta3NkeWh5TG1SbGNIUm9LU1ltS0hJdVpHVndkR2c5TWlrc2R5aHlMbU52Ykc5eWN5a21KaWh5TG1OdmJHOXljejBoTVNrc2R5aHlMbU4xYzNSdmJVbHVjM0JsWTNRcEppWW9jaTVqZFhOMGIyMUpibk53WldOMFBTRXdLU3h5TG1OdmJHOXljeVltS0hJdWMzUjViR2w2WlQxdktTeDFLSElzWlN4eUxtUmxjSFJvS1gxbWRXNWpkR2x2YmlCdktHVXNkQ2w3ZG1GeUlHNDlhUzV6ZEhsc1pYTmJkRjA3Y21WMGRYSnVJRzQvWENKY2RUQXdNV0piWENJcmFTNWpiMnh2Y25OYmJsMWJNRjByWENKdFhDSXJaU3RjSWx4MU1EQXhZbHRjSWl0cExtTnZiRzl5YzF0dVhWc3hYU3RjSW0xY0lqcGxmV1oxYm1OMGFXOXVJSE1vWlN4MEtYdHlaWFIxY200Z1pYMW1kVzVqZEdsdmJpQmhLR1VwZTNaaGNpQjBQWHQ5TzNKbGRIVnliaUJsTG1admNrVmhZMmdvWm5WdVkzUnBiMjRvWlN4dUtYdDBXMlZkUFNFd2ZTa3NkSDFtZFc1amRHbHZiaUIxS0dVc2RDeHlLWHRwWmlobExtTjFjM1J2YlVsdWMzQmxZM1FtSm5RbUprRW9kQzVwYm5Od1pXTjBLU1ltZEM1cGJuTndaV04wSVQwOWJpNXBibk53WldOMEppWW9JWFF1WTI5dWMzUnlkV04wYjNKOGZIUXVZMjl1YzNSeWRXTjBiM0l1Y0hKdmRHOTBlWEJsSVQwOWRDa3BlM1poY2lCcFBYUXVhVzV6Y0dWamRDaHlMR1VwTzNKbGRIVnliaUJ0S0drcGZId29hVDExS0dVc2FTeHlLU2tzYVgxMllYSWdiejFtS0dVc2RDazdhV1lvYnlseVpYUjFjbTRnYnp0MllYSWdjejFQWW1wbFkzUXVhMlY1Y3loMEtTeG5QV0VvY3lrN2FXWW9aUzV6YUc5M1NHbGtaR1Z1SmlZb2N6MVBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGN5aDBLU2tzVWloMEtTWW1LSE11YVc1a1pYaFBaaWhjSW0xbGMzTmhaMlZjSWlrK1BUQjhmSE11YVc1a1pYaFBaaWhjSW1SbGMyTnlhWEIwYVc5dVhDSXBQajB3S1NseVpYUjFjbTRnWXloMEtUdHBaaWd3UFQwOWN5NXNaVzVuZEdncGUybG1LRUVvZENrcGUzWmhjaUI1UFhRdWJtRnRaVDljSWpvZ1hDSXJkQzV1WVcxbE9sd2lYQ0k3Y21WMGRYSnVJR1V1YzNSNWJHbDZaU2hjSWx0R2RXNWpkR2x2Ymx3aUsza3JYQ0pkWENJc1hDSnpjR1ZqYVdGc1hDSXBmV2xtS0dJb2RDa3BjbVYwZFhKdUlHVXVjM1I1YkdsNlpTaFNaV2RGZUhBdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bkxtTmhiR3dvZENrc1hDSnlaV2RsZUhCY0lpazdhV1lvVHloMEtTbHlaWFIxY200Z1pTNXpkSGxzYVhwbEtFUmhkR1V1Y0hKdmRHOTBlWEJsTG5SdlUzUnlhVzVuTG1OaGJHd29kQ2tzWENKa1lYUmxYQ0lwTzJsbUtGSW9kQ2twY21WMGRYSnVJR01vZENsOWRtRnlJRjg5WENKY0lpeDJQU0V4TEVVOVcxd2llMXdpTEZ3aWZWd2lYVHRwWmloa0tIUXBKaVlvZGowaE1DeEZQVnRjSWx0Y0lpeGNJbDFjSWwwcExFRW9kQ2twZTNaaGNpQjNQWFF1Ym1GdFpUOWNJam9nWENJcmRDNXVZVzFsT2x3aVhDSTdYejFjSWlCYlJuVnVZM1JwYjI1Y0lpdDNLMXdpWFZ3aWZXbG1LR0lvZENrbUppaGZQVndpSUZ3aUsxSmxaMFY0Y0M1d2NtOTBiM1I1Y0dVdWRHOVRkSEpwYm1jdVkyRnNiQ2gwS1Nrc1R5aDBLU1ltS0Y4OVhDSWdYQ0lyUkdGMFpTNXdjbTkwYjNSNWNHVXVkRzlWVkVOVGRISnBibWN1WTJGc2JDaDBLU2tzVWloMEtTWW1LRjg5WENJZ1hDSXJZeWgwS1Nrc01EMDlQWE11YkdWdVozUm9KaVlvSVhaOGZEQTlQWFF1YkdWdVozUm9LU2x5WlhSMWNtNGdSVnN3WFN0ZkswVmJNVjA3YVdZb2Nqd3dLWEpsZEhWeWJpQmlLSFFwUDJVdWMzUjViR2w2WlNoU1pXZEZlSEF1Y0hKdmRHOTBlWEJsTG5SdlUzUnlhVzVuTG1OaGJHd29kQ2tzWENKeVpXZGxlSEJjSWlrNlpTNXpkSGxzYVhwbEtGd2lXMDlpYW1WamRGMWNJaXhjSW5Od1pXTnBZV3hjSWlrN1pTNXpaV1Z1TG5CMWMyZ29kQ2s3ZG1GeUlGTTdjbVYwZFhKdUlGTTlkajlzS0dVc2RDeHlMR2NzY3lrNmN5NXRZWEFvWm5WdVkzUnBiMjRvYmlsN2NtVjBkWEp1SUdnb1pTeDBMSElzWnl4dUxIWXBmU2tzWlM1elpXVnVMbkJ2Y0NncExIQW9VeXhmTEVVcGZXWjFibU4wYVc5dUlHWW9aU3gwS1h0cFppaDNLSFFwS1hKbGRIVnliaUJsTG5OMGVXeHBlbVVvWENKMWJtUmxabWx1WldSY0lpeGNJblZ1WkdWbWFXNWxaRndpS1R0cFppaHRLSFFwS1h0MllYSWdiajFjSWlkY0lpdEtVMDlPTG5OMGNtbHVaMmxtZVNoMEtTNXlaWEJzWVdObEtDOWVYQ0o4WENJa0wyY3NYQ0pjSWlrdWNtVndiR0ZqWlNndkp5OW5MRndpWEZ4Y1hDZGNJaWt1Y21Wd2JHRmpaU2d2WEZ4Y1hGd2lMMmNzSjF3aUp5a3JYQ0luWENJN2NtVjBkWEp1SUdVdWMzUjViR2w2WlNodUxGd2ljM1J5YVc1blhDSXBmWEpsZEhWeWJpQjJLSFFwUDJVdWMzUjViR2w2WlNoY0lsd2lLM1FzWENKdWRXMWlaWEpjSWlrNlp5aDBLVDlsTG5OMGVXeHBlbVVvWENKY0lpdDBMRndpWW05dmJHVmhibHdpS1RwNUtIUXBQMlV1YzNSNWJHbDZaU2hjSW01MWJHeGNJaXhjSW01MWJHeGNJaWs2ZG05cFpDQXdmV1oxYm1OMGFXOXVJR01vWlNsN2NtVjBkWEp1WENKYlhDSXJSWEp5YjNJdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bkxtTmhiR3dvWlNrclhDSmRYQ0o5Wm5WdVkzUnBiMjRnYkNobExIUXNiaXh5TEdrcGUyWnZjaWgyWVhJZ2J6MWJYU3h6UFRBc1lUMTBMbXhsYm1kMGFEdHpQR0U3S3l0ektWQW9kQ3hUZEhKcGJtY29jeWtwUDI4dWNIVnphQ2hvS0dVc2RDeHVMSElzVTNSeWFXNW5LSE1wTENFd0tTazZieTV3ZFhOb0tGd2lYQ0lwTzNKbGRIVnliaUJwTG1admNrVmhZMmdvWm5WdVkzUnBiMjRvYVNsN2FTNXRZWFJqYUNndlhseGNaQ3NrTHlsOGZHOHVjSFZ6YUNob0tHVXNkQ3h1TEhJc2FTd2hNQ2twZlNrc2IzMW1kVzVqZEdsdmJpQm9LR1VzZEN4dUxISXNhU3h2S1h0MllYSWdjeXhoTEdZN2FXWW9aajFQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUtIUXNhU2w4Zkh0MllXeDFaVHAwVzJsZGZTeG1MbWRsZEQ5aFBXWXVjMlYwUDJVdWMzUjViR2w2WlNoY0lsdEhaWFIwWlhJdlUyVjBkR1Z5WFZ3aUxGd2ljM0JsWTJsaGJGd2lLVHBsTG5OMGVXeHBlbVVvWENKYlIyVjBkR1Z5WFZ3aUxGd2ljM0JsWTJsaGJGd2lLVHBtTG5ObGRDWW1LR0U5WlM1emRIbHNhWHBsS0Z3aVcxTmxkSFJsY2wxY0lpeGNJbk53WldOcFlXeGNJaWtwTEZBb2NpeHBLWHg4S0hNOVhDSmJYQ0lyYVN0Y0lsMWNJaWtzWVh4OEtHVXVjMlZsYmk1cGJtUmxlRTltS0dZdWRtRnNkV1VwUERBL0tHRTllU2h1S1Q5MUtHVXNaaTUyWVd4MVpTeHVkV3hzS1RwMUtHVXNaaTUyWVd4MVpTeHVMVEVwTEdFdWFXNWtaWGhQWmloY0lseGNibHdpS1Q0dE1TWW1LR0U5Yno5aExuTndiR2wwS0Z3aVhGeHVYQ0lwTG0xaGNDaG1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNWNJaUFnWENJclpYMHBMbXB2YVc0b1hDSmNYRzVjSWlrdWMzVmljM1J5S0RJcE9sd2lYRnh1WENJcllTNXpjR3hwZENoY0lseGNibHdpS1M1dFlYQW9ablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVYQ0lnSUNCY0lpdGxmU2t1YW05cGJpaGNJbHhjYmx3aUtTa3BPbUU5WlM1emRIbHNhWHBsS0Z3aVcwTnBjbU4xYkdGeVhWd2lMRndpYzNCbFkybGhiRndpS1Nrc2R5aHpLU2w3YVdZb2J5WW1hUzV0WVhSamFDZ3ZYbHhjWkNza0x5a3BjbVYwZFhKdUlHRTdjejFLVTA5T0xuTjBjbWx1WjJsbWVTaGNJbHdpSzJrcExITXViV0YwWTJnb0wxNWNJaWhiWVMxNlFTMWFYMTFiWVMxNlFTMWFYekF0T1YwcUtWd2lKQzhwUHloelBYTXVjM1ZpYzNSeUtERXNjeTVzWlc1bmRHZ3RNaWtzY3oxbExuTjBlV3hwZW1Vb2N5eGNJbTVoYldWY0lpa3BPaWh6UFhNdWNtVndiR0ZqWlNndkp5OW5MRndpWEZ4Y1hDZGNJaWt1Y21Wd2JHRmpaU2d2WEZ4Y1hGd2lMMmNzSjF3aUp5a3VjbVZ3YkdGalpTZ3ZLRjVjSW54Y0lpUXBMMmNzWENJblhDSXBMSE05WlM1emRIbHNhWHBsS0hNc1hDSnpkSEpwYm1kY0lpa3BmWEpsZEhWeWJpQnpLMXdpT2lCY0lpdGhmV1oxYm1OMGFXOXVJSEFvWlN4MExHNHBlM1poY2lCeVBUQXNhVDFsTG5KbFpIVmpaU2htZFc1amRHbHZiaWhsTEhRcGUzSmxkSFZ5YmlCeUt5c3NkQzVwYm1SbGVFOW1LRndpWEZ4dVhDSXBQajB3SmlaeUt5c3NaU3QwTG5KbGNHeGhZMlVvTDF4Y2RUQXdNV0pjWEZ0Y1hHUmNYR1EvYlM5bkxGd2lYQ0lwTG14bGJtZDBhQ3N4ZlN3d0tUdHlaWFIxY200Z2FUNDJNRDl1V3pCZEt5aGNJbHdpUFQwOWREOWNJbHdpT25RclhDSmNYRzRnWENJcEsxd2lJRndpSzJVdWFtOXBiaWhjSWl4Y1hHNGdJRndpS1N0Y0lpQmNJaXR1V3pGZE9tNWJNRjByZEN0Y0lpQmNJaXRsTG1wdmFXNG9YQ0lzSUZ3aUtTdGNJaUJjSWl0dVd6RmRmV1oxYm1OMGFXOXVJR1FvWlNsN2NtVjBkWEp1SUVGeWNtRjVMbWx6UVhKeVlYa29aU2w5Wm5WdVkzUnBiMjRnWnlobEtYdHlaWFIxY201Y0ltSnZiMnhsWVc1Y0lqMDlkSGx3Wlc5bUlHVjlablZ1WTNScGIyNGdlU2hsS1h0eVpYUjFjbTRnYm5Wc2JEMDlQV1Y5Wm5WdVkzUnBiMjRnWHlobEtYdHlaWFIxY200Z2JuVnNiRDA5WlgxbWRXNWpkR2x2YmlCMktHVXBlM0psZEhWeWJsd2liblZ0WW1WeVhDSTlQWFI1Y0dWdlppQmxmV1oxYm1OMGFXOXVJRzBvWlNsN2NtVjBkWEp1WENKemRISnBibWRjSWowOWRIbHdaVzltSUdWOVpuVnVZM1JwYjI0Z1JTaGxLWHR5WlhSMWNtNWNJbk41YldKdmJGd2lQVDEwZVhCbGIyWWdaWDFtZFc1amRHbHZiaUIzS0dVcGUzSmxkSFZ5YmlCMmIybGtJREE5UFQxbGZXWjFibU4wYVc5dUlHSW9aU2w3Y21WMGRYSnVJRk1vWlNrbUpsd2lXMjlpYW1WamRDQlNaV2RGZUhCZFhDSTlQVDFKS0dVcGZXWjFibU4wYVc5dUlGTW9aU2w3Y21WMGRYSnVYQ0p2WW1wbFkzUmNJajA5ZEhsd1pXOW1JR1VtSm01MWJHd2hQVDFsZldaMWJtTjBhVzl1SUU4b1pTbDdjbVYwZFhKdUlGTW9aU2ttSmx3aVcyOWlhbVZqZENCRVlYUmxYVndpUFQwOVNTaGxLWDFtZFc1amRHbHZiaUJTS0dVcGUzSmxkSFZ5YmlCVEtHVXBKaVlvWENKYmIySnFaV04wSUVWeWNtOXlYVndpUFQwOVNTaGxLWHg4WlNCcGJuTjBZVzVqWlc5bUlFVnljbTl5S1gxbWRXNWpkR2x2YmlCQktHVXBlM0psZEhWeWJsd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1JR1Y5Wm5WdVkzUnBiMjRnVkNobEtYdHlaWFIxY200Z2JuVnNiRDA5UFdWOGZGd2lZbTl2YkdWaGJsd2lQVDEwZVhCbGIyWWdaWHg4WENKdWRXMWlaWEpjSWowOWRIbHdaVzltSUdWOGZGd2ljM1J5YVc1blhDSTlQWFI1Y0dWdlppQmxmSHhjSW5ONWJXSnZiRndpUFQxMGVYQmxiMllnWlh4OFhDSjFibVJsWm1sdVpXUmNJajA5ZEhsd1pXOW1JR1Y5Wm5WdVkzUnBiMjRnU1NobEtYdHlaWFIxY200Z1QySnFaV04wTG5CeWIzUnZkSGx3WlM1MGIxTjBjbWx1Wnk1allXeHNLR1VwZldaMWJtTjBhVzl1SUV3b1pTbDdjbVYwZFhKdUlHVThNVEEvWENJd1hDSXJaUzUwYjFOMGNtbHVaeWd4TUNrNlpTNTBiMU4wY21sdVp5Z3hNQ2w5Wm5WdVkzUnBiMjRnVGlncGUzWmhjaUJsUFc1bGR5QkVZWFJsTEhROVcwd29aUzVuWlhSSWIzVnljeWdwS1N4TUtHVXVaMlYwVFdsdWRYUmxjeWdwS1N4TUtHVXVaMlYwVTJWamIyNWtjeWdwS1YwdWFtOXBiaWhjSWpwY0lpazdjbVYwZFhKdVcyVXVaMlYwUkdGMFpTZ3BMRVJiWlM1blpYUk5iMjUwYUNncFhTeDBYUzVxYjJsdUtGd2lJRndpS1gxbWRXNWpkR2x2YmlCUUtHVXNkQ2w3Y21WMGRYSnVJRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2hsTEhRcGZYWmhjaUJEUFM4bFczTmthaVZkTDJjN2JpNW1iM0p0WVhROVpuVnVZM1JwYjI0b1pTbDdhV1lvSVcwb1pTa3BlMlp2Y2loMllYSWdkRDFiWFN4dVBUQTdianhoY21kMWJXVnVkSE11YkdWdVozUm9PMjRyS3lsMExuQjFjMmdvYVNoaGNtZDFiV1Z1ZEhOYmJsMHBLVHR5WlhSMWNtNGdkQzVxYjJsdUtGd2lJRndpS1gxbWIzSW9kbUZ5SUc0OU1TeHlQV0Z5WjNWdFpXNTBjeXh2UFhJdWJHVnVaM1JvTEhNOVUzUnlhVzVuS0dVcExuSmxjR3hoWTJVb1F5eG1kVzVqZEdsdmJpaGxLWHRwWmloY0lpVWxYQ0k5UFQxbEtYSmxkSFZ5Ymx3aUpWd2lPMmxtS0c0K1BXOHBjbVYwZFhKdUlHVTdjM2RwZEdOb0tHVXBlMk5oYzJWY0lpVnpYQ0k2Y21WMGRYSnVJRk4wY21sdVp5aHlXMjRySzEwcE8yTmhjMlZjSWlWa1hDSTZjbVYwZFhKdUlFNTFiV0psY2loeVcyNHJLMTBwTzJOaGMyVmNJaVZxWENJNmRISjVlM0psZEhWeWJpQktVMDlPTG5OMGNtbHVaMmxtZVNoeVcyNHJLMTBwZldOaGRHTm9LSFFwZTNKbGRIVnlibHdpVzBOcGNtTjFiR0Z5WFZ3aWZXUmxabUYxYkhRNmNtVjBkWEp1SUdWOWZTa3NZVDF5VzI1ZE8yNDhienRoUFhKYkt5dHVYU2x6S3oxNUtHRXBmSHdoVXloaEtUOWNJaUJjSWl0aE9sd2lJRndpSzJrb1lTazdjbVYwZFhKdUlITjlMRzR1WkdWd2NtVmpZWFJsUFdaMWJtTjBhVzl1S0dVc2FTbDdablZ1WTNScGIyNGdieWdwZTJsbUtDRnpLWHRwWmloMExuUm9jbTkzUkdWd2NtVmpZWFJwYjI0cGRHaHliM2NnYm1WM0lFVnljbTl5S0drcE8zUXVkSEpoWTJWRVpYQnlaV05oZEdsdmJqOWpiMjV6YjJ4bExuUnlZV05sS0drcE9tTnZibk52YkdVdVpYSnliM0lvYVNrc2N6MGhNSDF5WlhSMWNtNGdaUzVoY0hCc2VTaDBhR2x6TEdGeVozVnRaVzUwY3lsOWFXWW9keWh5TG5CeWIyTmxjM01wS1hKbGRIVnliaUJtZFc1amRHbHZiaWdwZTNKbGRIVnliaUJ1TG1SbGNISmxZMkYwWlNobExHa3BMbUZ3Y0d4NUtIUm9hWE1zWVhKbmRXMWxiblJ6S1gwN2FXWW9kQzV1YjBSbGNISmxZMkYwYVc5dVBUMDlJVEFwY21WMGRYSnVJR1U3ZG1GeUlITTlJVEU3Y21WMGRYSnVJRzk5TzNaaGNpQk5MSGc5ZTMwN2JpNWtaV0oxWjJ4dlp6MW1kVzVqZEdsdmJpaGxLWHRwWmloM0tFMHBKaVlvVFQxMExtVnVkaTVPVDBSRlgwUkZRbFZIZkh4Y0lsd2lLU3hsUFdVdWRHOVZjSEJsY2tOaGMyVW9LU3doZUZ0bFhTbHBaaWh1WlhjZ1VtVm5SWGh3S0Z3aVhGeGNYR0pjSWl0bEsxd2lYRnhjWEdKY0lpeGNJbWxjSWlrdWRHVnpkQ2hOS1NsN2RtRnlJSEk5ZEM1d2FXUTdlRnRsWFQxbWRXNWpkR2x2YmlncGUzWmhjaUIwUFc0dVptOXliV0YwTG1Gd2NHeDVLRzRzWVhKbmRXMWxiblJ6S1R0amIyNXpiMnhsTG1WeWNtOXlLRndpSlhNZ0pXUTZJQ1Z6WENJc1pTeHlMSFFwZlgxbGJITmxJSGhiWlYwOVpuVnVZM1JwYjI0b0tYdDlPM0psZEhWeWJpQjRXMlZkZlN4dUxtbHVjM0JsWTNROWFTeHBMbU52Ykc5eWN6MTdZbTlzWkRwYk1Td3lNbDBzYVhSaGJHbGpPbHN6TERJelhTeDFibVJsY214cGJtVTZXelFzTWpSZExHbHVkbVZ5YzJVNld6Y3NNamRkTEhkb2FYUmxPbHN6Tnl3ek9WMHNaM0psZVRwYk9UQXNNemxkTEdKc1lXTnJPbHN6TUN3ek9WMHNZbXgxWlRwYk16UXNNemxkTEdONVlXNDZXek0yTERNNVhTeG5jbVZsYmpwYk16SXNNemxkTEcxaFoyVnVkR0U2V3pNMUxETTVYU3h5WldRNld6TXhMRE01WFN4NVpXeHNiM2M2V3pNekxETTVYWDBzYVM1emRIbHNaWE05ZTNOd1pXTnBZV3c2WENKamVXRnVYQ0lzYm5WdFltVnlPbHdpZVdWc2JHOTNYQ0lzWENKaWIyOXNaV0Z1WENJNlhDSjVaV3hzYjNkY0lpeDFibVJsWm1sdVpXUTZYQ0puY21WNVhDSXNYQ0p1ZFd4c1hDSTZYQ0ppYjJ4a1hDSXNjM1J5YVc1bk9sd2laM0psWlc1Y0lpeGtZWFJsT2x3aWJXRm5aVzUwWVZ3aUxISmxaMlY0Y0RwY0luSmxaRndpZlN4dUxtbHpRWEp5WVhrOVpDeHVMbWx6UW05dmJHVmhiajFuTEc0dWFYTk9kV3hzUFhrc2JpNXBjMDUxYkd4UGNsVnVaR1ZtYVc1bFpEMWZMRzR1YVhOT2RXMWlaWEk5ZGl4dUxtbHpVM1J5YVc1blBXMHNiaTVwYzFONWJXSnZiRDFGTEc0dWFYTlZibVJsWm1sdVpXUTlkeXh1TG1selVtVm5SWGh3UFdJc2JpNXBjMDlpYW1WamREMVRMRzR1YVhORVlYUmxQVThzYmk1cGMwVnljbTl5UFZJc2JpNXBjMFoxYm1OMGFXOXVQVUVzYmk1cGMxQnlhVzFwZEdsMlpUMVVMRzR1YVhOQ2RXWm1aWEk5WlNoY0lpNHZjM1Z3Y0c5eWRDOXBjMEoxWm1abGNsd2lLVHQyWVhJZ1JEMWJYQ0pLWVc1Y0lpeGNJa1psWWx3aUxGd2lUV0Z5WENJc1hDSkJjSEpjSWl4Y0lrMWhlVndpTEZ3aVNuVnVYQ0lzWENKS2RXeGNJaXhjSWtGMVoxd2lMRndpVTJWd1hDSXNYQ0pQWTNSY0lpeGNJazV2ZGx3aUxGd2lSR1ZqWENKZE8yNHViRzluUFdaMWJtTjBhVzl1S0NsN1kyOXVjMjlzWlM1c2IyY29YQ0lsY3lBdElDVnpYQ0lzVGlncExHNHVabTl5YldGMExtRndjR3g1S0c0c1lYSm5kVzFsYm5SektTbDlMRzR1YVc1b1pYSnBkSE05WlNoY0ltbHVhR1Z5YVhSelhDSXBMRzR1WDJWNGRHVnVaRDFtZFc1amRHbHZiaWhsTEhRcGUybG1LQ0YwZkh3aFV5aDBLU2x5WlhSMWNtNGdaVHRtYjNJb2RtRnlJRzQ5VDJKcVpXTjBMbXRsZVhNb2RDa3NjajF1TG14bGJtZDBhRHR5TFMwN0tXVmJibHR5WFYwOWRGdHVXM0pkWFR0eVpYUjFjbTRnWlgxOUtTNWpZV3hzS0hSb2FYTXNaU2hjSWw5d2NtOWpaWE56WENJcExGd2lkVzVrWldacGJtVmtYQ0loUFhSNWNHVnZaaUJuYkc5aVlXdy9aMnh2WW1Gc09sd2lkVzVrWldacGJtVmtYQ0loUFhSNWNHVnZaaUJ6Wld4bVAzTmxiR1k2WENKMWJtUmxabWx1WldSY0lpRTlkSGx3Wlc5bUlIZHBibVJ2ZHo5M2FXNWtiM2M2ZTMwcGZTeDdYQ0l1TDNOMWNIQnZjblF2YVhOQ2RXWm1aWEpjSWpvME15eGZjSEp2WTJWemN6b3lOU3hwYm1obGNtbDBjem94T1gxZExEUTFPbHRtZFc1amRHbHZiaWhsTEhRc2JpbDdLR1oxYm1OMGFXOXVLRzRzY2lsN1hDSjFjMlVnYzNSeWFXTjBYQ0k3Wm5WdVkzUnBiMjRnYVNncGUyWnZjaWgyWVhJZ1pUMXVaWGNnWVN4MFBUQTdkRHhoY21kMWJXVnVkSE11YkdWdVozUm9PeXNyZENsbExtaGhjMmdvWENKY0lpdGhjbWQxYldWdWRITmJkRjBwTzNKbGRIVnliaUJsTG5KbGMzVnNkQ2dwZlhaaGNpQnZQV1VvWENKbmNtRmpaV1oxYkMxbWMxd2lLU3h6UFdVb1hDSnpiR2xrWlZ3aUtTNWphR0ZwYml4aFBXVW9YQ0pwYlhWeWJYVnlhR0Z6YUZ3aUtTeDFQVEFzWmoxbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z1pTdGNJaTVjSWl0cEtISXNiaTV3YVdRc0t5dDFLWDA3ZEM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0dVc2RDeHVMSElwZTI0Z2FXNXpkR0Z1WTJWdlppQkdkVzVqZEdsdmJpWW1LSEk5Yml4dVBXNTFiR3dwTEc1OGZDaHVQWHQ5S1R0MllYSWdhVDFtS0dVcE8zTW9XMXR2TEc4dWQzSnBkR1ZHYVd4bExHa3NkQ3h1WFN4dUxtTm9iM2R1SmlaYmJ5eHZMbU5vYjNkdUxHa3NiaTVqYUc5M2JpNTFhV1FzYmk1amFHOTNiaTVuYVdSZExGdHZMRzh1Y21WdVlXMWxMR2tzWlYxZExHWjFibU4wYVc5dUtHVXBlMlUvYnk1MWJteHBibXNvYVN4bWRXNWpkR2x2YmlncGUzSW9aU2w5S1RweUtDbDlLWDBzZEM1bGVIQnZjblJ6TG5ONWJtTTlablZ1WTNScGIyNG9aU3gwTEc0cGUyNThmQ2h1UFh0OUtUdDJZWElnY2oxbUtHVXBPM1J5ZVh0dkxuZHlhWFJsUm1sc1pWTjVibU1vY2l4MExHNHBMRzR1WTJodmQyNG1KbTh1WTJodmQyNVRlVzVqS0hJc2JpNWphRzkzYmk1MWFXUXNiaTVqYUc5M2JpNW5hV1FwTEc4dWNtVnVZVzFsVTNsdVl5aHlMR1VwZldOaGRHTm9LR2twZTNSeWVYdHZMblZ1YkdsdWExTjVibU1vY2lsOVkyRjBZMmdvY3lsN2ZYUm9jbTkzSUdsOWZYMHBMbU5oYkd3b2RHaHBjeXhsS0Z3aVgzQnliMk5sYzNOY0lpa3NYQ0l2Ym05a1pWOXRiMlIxYkdWekwzZHlhWFJsTFdacGJHVXRZWFJ2YldsakwybHVaR1Y0TG1welhDSXBmU3g3WDNCeWIyTmxjM002TWpVc1hDSm5jbUZqWldaMWJDMW1jMXdpT2pFMExHbHRkWEp0ZFhKb1lYTm9PakU0TEhOc2FXUmxPak01ZlYwc05EWTZXMloxYm1OMGFXOXVLR1VzZEN4dUtYdGNJblZ6WlNCemRISnBZM1JjSWp0bWRXNWpkR2x2YmlCeUtHVXBlM0psZEhWeWJpQmxKaVpsTGw5ZlpYTk5iMlIxYkdVL1pUcDdYQ0prWldaaGRXeDBYQ0k2WlgxOVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLRzRzWENKZlgyVnpUVzlrZFd4bFhDSXNlM1poYkhWbE9pRXdmU2s3ZG1GeUlHazlaU2hjSW1KaFltVnNMWEoxYm5ScGJXVXZZMjl5WlMxcWN5OXFjMjl1TDNOMGNtbHVaMmxtZVZ3aUtTeHZQWElvYVNrc2N6MWxLRndpTGk5MWJtbDJaWEp6WVd3dGJHOWpZV3h6ZEc5eVlXZGxYQ0lwTEdFOWNpaHpLU3gxUFh0elpYUTZablZ1WTNScGIyNG9aU3gwTEc0cGUyRmJYQ0prWldaaGRXeDBYQ0pkTG5ObGRFbDBaVzBvWlN3b01DeHZXMXdpWkdWbVlYVnNkRndpWFNrb2UzWmxjbk5wYjI0NmRDeDJZV3gxWlRwdWZTa3BmU3huWlhRNlpuVnVZM1JwYjI0b1pTbDdkSEo1ZTNKbGRIVnliaUJLVTA5T0xuQmhjbk5sS0dGYlhDSmtaV1poZFd4MFhDSmRMbWRsZEVsMFpXMG9aU2twTG5aaGJIVmxmV05oZEdOb0tIUXBlMzE5TEdkbGRGWmxjbk5wYjI0NlpuVnVZM1JwYjI0b1pTbDdkSEo1ZTNKbGRIVnliaUJLVTA5T0xuQmhjbk5sS0dGYlhDSmtaV1poZFd4MFhDSmRMbWRsZEVsMFpXMG9aU2twTG5abGNuTnBiMjU5WTJGMFkyZ29kQ2w3Zlgwc1hDSmtaV3hsZEdWY0lqcG1kVzVqZEdsdmJpaGxLWHRoVzF3aVpHVm1ZWFZzZEZ3aVhTNXlaVzF2ZG1WSmRHVnRLR1VwZlgwN2JsdGNJbVJsWm1GMWJIUmNJbDA5ZFN4MExtVjRjRzl5ZEhNOWJsdGNJbVJsWm1GMWJIUmNJbDE5TEh0Y0lpNHZkVzVwZG1WeWMyRnNMV3h2WTJGc2MzUnZjbUZuWlZ3aU9qUTRMRndpWW1GaVpXd3RjblZ1ZEdsdFpTOWpiM0psTFdwekwycHpiMjR2YzNSeWFXNW5hV1o1WENJNk1YMWRMRFEzT2x0bWRXNWpkR2x2YmlobExIUXNiaWw3WENKMWMyVWdjM1J5YVdOMFhDSTdablZ1WTNScGIyNGdjaWhsS1h0eVpYUjFjbTRnWlNZbVpTNWZYMlZ6VFc5a2RXeGxQMlU2ZTF3aVpHVm1ZWFZzZEZ3aU9tVjlmWFpoY2lCcFBXVW9YQ0ppWVdKbGJDMXlkVzUwYVcxbEwyTnZjbVV0YW5NdmFuTnZiaTl6ZEhKcGJtZHBabmxjSWlrc2J6MXlLR2twTzF3aWRXNWtaV1pwYm1Wa1hDSWhQWFI1Y0dWdlppQjNhVzVrYjNjdWJHOWpZV3hUZEc5eVlXZGxKaVpjSW5WdVpHVm1hVzVsWkZ3aUlUMTBlWEJsYjJZZ2QybHVaRzkzTG5ObGMzTnBiMjVUZEc5eVlXZGxmSHhtZFc1amRHbHZiaWdwZTNaaGNpQmxQV1oxYm1OMGFXOXVLR1VwZTJaMWJtTjBhVzl1SUhRb1pTeDBMRzRwZTNaaGNpQnlMR2s3Ymo4b2NqMXVaWGNnUkdGMFpTeHlMbk5sZEZScGJXVW9jaTVuWlhSVWFXMWxLQ2tyTWpRcWJpbzJNQ28yTUNveFpUTXBMR2s5WENJN0lHVjRjR2x5WlhNOVhDSXJjaTUwYjBkTlZGTjBjbWx1WnlncEtUcHBQVndpWENJc1pHOWpkVzFsYm5RdVkyOXZhMmxsUFdVclhDSTlYQ0lyZEN0cEsxd2lPeUJ3WVhSb1BTOWNJbjFtZFc1amRHbHZiaUJ1S0dVcGUzWmhjaUIwTEc0c2NqMWxLMXdpUFZ3aUxHazlaRzlqZFcxbGJuUXVZMjl2YTJsbExuTndiR2wwS0Z3aU8xd2lLVHRtYjNJb2REMHdPM1E4YVM1c1pXNW5kR2c3ZENzcktYdG1iM0lvYmoxcFczUmRPMXdpSUZ3aVBUMXVMbU5vWVhKQmRDZ3dLVHNwYmoxdUxuTjFZbk4wY21sdVp5Z3hMRzR1YkdWdVozUm9LVHRwWmlnd1BUMXVMbWx1WkdWNFQyWW9jaWtwY21WMGRYSnVJRzR1YzNWaWMzUnlhVzVuS0hJdWJHVnVaM1JvTEc0dWJHVnVaM1JvS1gxeVpYUjFjbTRnYm5Wc2JIMW1kVzVqZEdsdmJpQnlLRzRwZTI0OUtEQXNiMXRjSW1SbFptRjFiSFJjSWwwcEtHNHBMRndpYzJWemMybHZibHdpUFQxbFAzZHBibVJ2ZHk1dVlXMWxQVzQ2ZENoY0lteHZZMkZzVTNSdmNtRm5aVndpTEc0c016WTFLWDFtZFc1amRHbHZiaUJwS0NsN1hDSnpaWE56YVc5dVhDSTlQV1UvZDJsdVpHOTNMbTVoYldVOVhDSmNJanAwS0Z3aWJHOWpZV3hUZEc5eVlXZGxYQ0lzWENKY0lpd3pOalVwZldaMWJtTjBhVzl1SUhNb0tYdDJZWElnZEQxY0luTmxjM05wYjI1Y0lqMDlaVDkzYVc1a2IzY3VibUZ0WlRwdUtGd2liRzlqWVd4VGRHOXlZV2RsWENJcE8zSmxkSFZ5YmlCMFAwcFRUMDR1Y0dGeWMyVW9kQ2s2ZTMxOWRtRnlJR0U5Y3lncE8zSmxkSFZ5Ym50c1pXNW5kR2c2TUN4amJHVmhjanBtZFc1amRHbHZiaWdwZTJFOWUzMHNkR2hwY3k1c1pXNW5kR2c5TUN4cEtDbDlMR2RsZEVsMFpXMDZablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJSFp2YVdRZ01EMDlQV0ZiWlYwL2JuVnNiRHBoVzJWZGZTeHJaWGs2Wm5WdVkzUnBiMjRvWlNsN2RtRnlJSFE5TUR0bWIzSW9kbUZ5SUc0Z2FXNGdZU2w3YVdZb2REMDlaU2x5WlhSMWNtNGdianQwS3l0OWNtVjBkWEp1SUc1MWJHeDlMSEpsYlc5MlpVbDBaVzA2Wm5WdVkzUnBiMjRvWlNsN1pHVnNaWFJsSUdGYlpWMHNkR2hwY3k1c1pXNW5kR2d0TFN4eUtHRXBmU3h6WlhSSmRHVnRPbVoxYm1OMGFXOXVLR1VzZENsN1lWdGxYVDEwSzF3aVhDSXNkR2hwY3k1c1pXNW5kR2dyS3l4eUtHRXBmWDE5TzF3aWRXNWtaV1pwYm1Wa1hDSTlQWFI1Y0dWdlppQjNhVzVrYjNjdWJHOWpZV3hUZEc5eVlXZGxKaVlvZDJsdVpHOTNMbXh2WTJGc1UzUnZjbUZuWlQxdVpYY2daU2hjSW14dlkyRnNYQ0lwS1N4Y0luVnVaR1ZtYVc1bFpGd2lQVDEwZVhCbGIyWWdkMmx1Wkc5M0xuTmxjM05wYjI1VGRHOXlZV2RsSmlZb2QybHVaRzkzTG5ObGMzTnBiMjVUZEc5eVlXZGxQVzVsZHlCbEtGd2ljMlZ6YzJsdmJsd2lLU2w5S0NsOUxIdGNJbUpoWW1Wc0xYSjFiblJwYldVdlkyOXlaUzFxY3k5cWMyOXVMM04wY21sdVoybG1lVndpT2pGOVhTdzBPRHBiWm5WdVkzUnBiMjRvWlN4MExHNHBlMXdpZFhObElITjBjbWxqZEZ3aU8wOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2h1TEZ3aVgxOWxjMDF2WkhWc1pWd2lMSHQyWVd4MVpUb2hNSDBwTzNaaGNpQnlQWFp2YVdRZ01EdHBaaWhjSW5WdVpHVm1hVzVsWkZ3aVBUMTBlWEJsYjJZZ2QybHVaRzkzS1h0MllYSWdhVDFsS0Z3aWJtOWtaUzFzYjJOaGJITjBiM0poWjJWY0lpa3VURzlqWVd4VGRHOXlZV2RsTzNJOWJtVjNJR2tvWENJdUwzVnNjeTF6WTNKaGRHTm9YQ0lwZldWc2MyVWdjajFjSW5WdVpHVm1hVzVsWkZ3aVBUMTBlWEJsYjJZZ2QybHVaRzkzTG14dlkyRnNVM1J2Y21GblpYeDhYQ0oxYm1SbFptbHVaV1JjSWowOWRIbHdaVzltSUhkcGJtUnZkeTV6WlhOemFXOXVVM1J2Y21GblpUOWxLRndpTGk5eVpXMHRiRzlqWVd4emRHOXlZV2RsWENJcE9uZHBibVJ2ZHk1c2IyTmhiRk4wYjNKaFoyVTdibHRjSW1SbFptRjFiSFJjSWwwOWNpeDBMbVY0Y0c5eWRITTlibHRjSW1SbFptRjFiSFJjSWwxOUxIdGNJaTR2Y21WdExXeHZZMkZzYzNSdmNtRm5aVndpT2pRM0xGd2libTlrWlMxc2IyTmhiSE4wYjNKaFoyVmNJam95TW4xZGZTeDdmU3hiTkRaZEtTZzBOaWw5S1R0Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QVkJsY25OcGMzUmxibU5sVFdGdVlXZGxjaTVxY3k1dFlYQmNiaUlzSWk4cUtseHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlFWQ0JKYm05MlljT253Nk52SUdVZ1UybHpkR1Z0WVhNZ1UwRmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdTVTVGVTBNdFNVUmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdVVlZQUWtsVElFNUZWRmRQVWt0VElGTk1YRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRVpTUVZWT1NFOUdSVkl0UjBWVFJVeE1VME5JUVVaVUlGcFZVaUJHVDBWU1JFVlNWVTVISUVSRlVpQkJUa2RGVjBGT1JGUkZUaUJHVDFKVFEwaFZUa2NnUlM1V1hHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFOVNRVTVIUlNCVFFWeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkVaWFYwYzJOb1pTQlVaV3hsYTI5dElFRkhYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRUZ3YVhwbFpWeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlVSVU5JVGtsVFEwaEZJRlZPU1ZaRlVsTkpWRUZVSUVKRlVreEpUbHh1S2x4dUtpQk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdJQ2gwYUdVZ1hDSk1hV05sYm5ObFhDSXBPMXh1S2lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObElIZHBkR2dnZEdobElFeHBZMlZ1YzJVdVhHNHFJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4dUtseHVLaUFnSUdoMGRIQTZMeTkzZDNjdVlYQmhZMmhsTG05eVp5OXNhV05sYm5ObGN5OU1TVU5GVGxORkxUSXVNRnh1S2x4dUtpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzSUhOdlpuUjNZWEpsWEc0cUlHUnBjM1J5YVdKMWRHVmtJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxJR2x6SUdScGMzUnlhV0oxZEdWa0lHOXVJR0Z1SUZ3aVFWTWdTVk5jSWlCQ1FWTkpVeXhjYmlvZ1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdVhHNHFJRk5sWlNCMGFHVWdUR2xqWlc1elpTQm1iM0lnZEdobElITndaV05wWm1saklHeGhibWQxWVdkbElHZHZkbVZ5Ym1sdVp5QndaWEp0YVhOemFXOXVjeUJoYm1SY2Jpb2diR2x0YVhSaGRHbHZibk1nZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlV1WEc0cUtpOWNibHh1THlvcVhHNHFJRUJoZFhSb2IzSWdiV2xqWVdWc2NHVmtjbTl6WVVCbmJXRnBiQzVqYjIxY2Jpb2dUV2x1YVcxaGJDQnBiblJsY21aaFkyVWdZVzVrSUdsdGNHeGxiV1Z1ZEdGMGFXOXVJSFJ2SUhObGJtUWdZVzVrSUhKbFkyVnBkbVVnYldWemMyRm5aWE11SUVsMElHTmhiaUJpWlNCeVpYVnpaV1FnYVc0Z2JXRnVlU0IwZVhCbElHOW1JR052YlhCdmJtVnVkSE11WEc0cUlFTnZiWEJ2Ym1WdWRITWdkR2hoZENCdVpXVmtJR0VnYldWemMyRm5aU0J6ZVhOMFpXMGdjMmh2ZFd4a0lISmxZMlZwZG1VZ2RHaHBjeUJqYkdGemN5QmhjeUJoSUdSbGNHVnVaR1Z1WTNrZ2IzSWdaWGgwWlc1a0lHbDBMbHh1S2lCRmVIUmxibk5wYjI1eklITm9iM1ZzWkNCcGJYQnNaVzFsYm5RZ2RHaGxJR1p2Ykd4dmQybHVaeUJ3Y21sMllYUmxJRzFsZEdodlpITTZJRjl2YmxCdmMzUk5aWE56WVdkbElHRnVaQ0JmY21WbmFYTjBaWEpGZUhSbGNtNWhiRXhwYzNSbGJtVnlYRzRxTDF4dVkyeGhjM01nUW5WeklIdGNiaUFnTHlvZ2NISnBkbUYwWlZ4dUlDQmZiWE5uU1dRNklHNTFiV0psY2p0Y2JpQWdYM04xWW5OamNtbHdkR2x2Ym5NNklEeDFjbXc2SUUxeloweHBjM1JsYm1WeVcxMCtYRzVjYmlBZ1gzSmxjM0J2Ym5ObFZHbHRaVTkxZERvZ2JuVnRZbVZ5WEc0Z0lGOXlaWE53YjI1elpVTmhiR3hpWVdOcmN6b2dQSFZ5YkN0cFpEb2dLRzF6WnlrZ1BUNGdkbTlwWkQ1Y2JseHVJQ0FxTDF4dVhHNGdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdYM1JvYVhNdVgyMXpaMGxrSUQwZ01EdGNiaUFnSUNCZmRHaHBjeTVmYzNWaWMyTnlhWEIwYVc5dWN5QTlJSHQ5TzF4dVhHNGdJQ0FnWDNSb2FYTXVYM0psYzNCdmJuTmxWR2x0WlU5MWRDQTlJRFV3TURBN0lDOHZaR1ZtWVhWc2RDQjBieUF6YzF4dUlDQWdJRjkwYUdsekxsOXlaWE53YjI1elpVTmhiR3hpWVdOcmN5QTlJSHQ5TzF4dVhHNGdJQ0FnWDNSb2FYTXVYM0psWjJsemRHVnlSWGgwWlhKdVlXeE1hWE4wWlc1bGNpZ3BPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nVW1WbmFYTjBaWElnYkdsemRHVnVaWElnZEc4Z2NtVmpaV2wyWlNCdFpYTnpZV2RsSUhkb1pXNGdYQ0p0YzJjdWRHOGdQVDA5SUhWeWJGd2lMbHh1SUNBcUlGTndaV05wWVd3Z2RYSnNJRndpS2x3aUlHWnZjaUJrWldaaGRXeDBJR3hwYzNSbGJtVnlJR2x6SUdGalkyVndkR1ZrSUhSdklHbHVkR1Z5WTJWd2RDQmhiR3dnYldWemMyRm5aWE11WEc0Z0lDb2dRSEJoY21GdElIdFZVa3g5SUhWeWJDQkJaR1J5WlhOeklIUnZJR2x1ZEdWeVkyVndkQ3dnZEdoaElHbHpJR2x1SUhSb1pTQnRaWE56WVdkbElGd2lkRzljSWx4dUlDQXFJRUJ3WVhKaGJTQjdUR2x6ZEdWdVpYSjlJR3hwYzNSbGJtVnlJR3hwYzNSbGJtVnlYRzRnSUNvZ1FISmxkSFZ5YmlCN1RYTm5UR2x6ZEdWdVpYSjlJR2x1YzNSaGJtTmxJRzltSUUxeloweHBjM1JsYm1WeVhHNGdJQ292WEc0Z0lHRmtaRXhwYzNSbGJtVnlLSFZ5YkN3Z2JHbHpkR1Z1WlhJcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnYkdWMElHbDBaVzBnUFNCdVpYY2dUWE5uVEdsemRHVnVaWElvWDNSb2FYTXVYM04xWW5OamNtbHdkR2x2Ym5Nc0lIVnliQ3dnYkdsemRHVnVaWElwTzF4dUlDQWdJR3hsZENCcGRHVnRUR2x6ZENBOUlGOTBhR2x6TGw5emRXSnpZM0pwY0hScGIyNXpXM1Z5YkYwN1hHNGdJQ0FnYVdZZ0tDRnBkR1Z0VEdsemRDa2dlMXh1SUNBZ0lDQWdhWFJsYlV4cGMzUWdQU0JiWFR0Y2JpQWdJQ0FnSUY5MGFHbHpMbDl6ZFdKelkzSnBjSFJwYjI1elczVnliRjBnUFNCcGRHVnRUR2x6ZER0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwZEdWdFRHbHpkQzV3ZFhOb0tHbDBaVzBwTzF4dUlDQWdJSEpsZEhWeWJpQnBkR1Z0TzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFMWhiblZoYkd4NUlHRmtaQ0JoSUhKbGMzQnZibk5sSUd4cGMzUmxibVZ5TGlCUGJteDVJRzl1WlNCc2FYTjBaVzVsY2lCd1pYSWdiV1Z6YzJGblpTQkpSQ0J6YUc5MWJHUWdaWGhwYzNRdVhHNGdJQ0FxSUVGVVJVNVVTVTlPTENCMGFHVnlaU0JwY3lCdWJ5QjBhVzFsYjNWMElHWnZjaUIwYUdseklHeHBjM1JsYm1WeUxseHVJQ0FnS2lCVWFHVWdiR2x6ZEdWdVpYSWdjMmh2ZFd4a0lHSmxJSEpsYlc5MlpXUWdkMmwwYUNCaElISmxiVzkyWlZKbGMzQnZibk5sVEdsemRHVnVaWElzSUdaaGFXeHBibWNnZEc4Z1pHOGdkR2hwY3lCM2FXeHNJSEpsYzNWc2RDQnBiaUJoSUhWdWNtVnNaV0Z6WldRZ2JXVnRiM0o1SUhCeWIySnNaVzB1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdWVkpNZlNCMWNtd2dUM0pwWjJsdUlHRmtaSEpsYzNNZ2IyWWdkR2hsSUcxbGMzTmhaMlVnYzJWdWRDd2dYQ0p0YzJjdVpuSnZiVndpTGx4dUlDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdiWE5uU1dRZ1RXVnpjMkZuWlNCSlJDQjBhR0YwSUdseklISmxkSFZ5Ym1Wa0lHWnliMjBnZEdobElIQnZjM1JOWlhOellXZGxMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQnlaWE53YjI1elpVeHBjM1JsYm1WeUlFTmhiR3hpWVdOcklHWjFibU4wYVc5dUlHWnZjaUIwYUdVZ2NtVnpjRzl1YzJWY2JpQWdJQ292WEc0Z0lHRmtaRkpsYzNCdmJuTmxUR2x6ZEdWdVpYSW9kWEpzTENCdGMyZEpaQ3dnY21WemNHOXVjMlZNYVhOMFpXNWxjaWtnZTF4dUlDQWdJSFJvYVhNdVgzSmxjM0J2Ym5ObFEyRnNiR0poWTJ0elczVnliQ0FySUcxelowbGtYU0E5SUhKbGMzQnZibk5sVEdsemRHVnVaWEk3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVnRiM1psSUhSb1pTQnlaWE53YjI1elpTQnNhWE4wWlc1bGNpNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0VlVreDlJSFZ5YkNCUGNtbG5hVzRnWVdSa2NtVnpjeUJ2WmlCMGFHVWdiV1Z6YzJGblpTQnpaVzUwTENCY0ltMXpaeTVtY205dFhDSXVYRzRnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCdGMyZEpaQ0FnVFdWemMyRm5aU0JKUkNCMGFHRjBJR2x6SUhKbGRIVnlibVZrSUdaeWIyMGdkR2hsSUhCdmMzUk5aWE56WVdkbFhHNGdJQ0FxTDF4dUlDQnlaVzF2ZG1WU1pYTndiMjV6WlV4cGMzUmxibVZ5S0hWeWJDd2diWE5uU1dRcElIdGNiaUFnSUNCa1pXeGxkR1VnZEdocGN5NWZjbVZ6Y0c5dWMyVkRZV3hzWW1GamEzTmJkWEpzSUNzZ2JYTm5TV1JkTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxiVzkyWlNCaGJHd2daWGhwYzNSbGJuUWdiR2x6ZEdWdVpYSnpJR1p2Y2lCMGFHVWdWVkpNWEc0Z0lDQXFJRUJ3WVhKaGJTQWdlMVZTVEgwZ2RYSnNJRUZrWkhKbGMzTWdjbVZuYVhOMFpYSmxaRnh1SUNBZ0tpOWNiaUFnY21WdGIzWmxRV3hzVEdsemRHVnVaWEp6VDJZb2RYSnNLU0I3WEc0Z0lDQWdaR1ZzWlhSbElIUm9hWE11WDNOMVluTmpjbWx3ZEdsdmJuTmJkWEpzWFR0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQklaV3h3WlhJZ2JXVjBhRzlrSUhSdklHSnBibVFnYkdsemRHVnVaWEp6SUNocGJpQmliM1JvSUdScGNtVmpkR2x2Ym5NcElHbHVkRzhnYjNSb1pYSWdUV2x1YVVKMWN5QjBZWEpuWlhRdVhHNGdJQ0FxSUVCd1lYSmhiU0FnZTFWU1RIMGdiM1YwVlhKc0lFOTFkR0p2ZFc1a0lGVlNUQ3dnY21WbmFYTjBaWElnYkdsemRHVnVaWElnWm05eUlIVnliQ0JwYmlCa2FYSmxZM1JwYjI0Z1hDSjBhR2x6SUMwK0lIUmhjbWRsZEZ3aVhHNGdJQ0FxSUVCd1lYSmhiU0FnZTFWU1RIMGdhVzVWY213Z1NXNWliM1Z1WkNCVlVrd3NJSEpsWjJsemRHVnlJR3hwYzNSbGJtVnlJR1p2Y2lCMWNtd2dhVzRnWkdseVpXTjBhVzl1SUZ3aWRHRnlaMlYwSUMwK0lIUm9hWE5jSWx4dUlDQWdLaUJBY0dGeVlXMGdJSHROYVc1cFFuVnpmU0IwWVhKblpYUWdWR2hsSUc5MGFHVnlJSFJoY21kbGRDQk5hVzVwUW5WelhHNGdJQ0FxSUVCeVpYUjFjbTRnZTBKdmRXNWtmU0JoYmlCdlltcGxZM1FnZEdoaGRDQmpiMjUwWVdsdWN5QjBhR1VnY0hKdmNHVnlkR2xsY3lCYmRHaHBjMHhwYzNSbGJtVnlMQ0IwWVhKblpYUk1hWE4wWlc1bGNsMGdZVzVrSUhSb1pTQjFibUpwYm1RZ2JXVjBhRzlrTGx4dUlDQWdLaTljYmlBZ1ltbHVaQ2h2ZFhSVmNtd3NJR2x1VlhKc0xDQjBZWEpuWlhRcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnYkdWMElIUm9hWE5NYVhOMGJpQTlJRjkwYUdsekxtRmtaRXhwYzNSbGJtVnlLRzkxZEZWeWJDd2dLRzF6WnlrZ1BUNGdlMXh1SUNBZ0lDQWdkR0Z5WjJWMExuQnZjM1JOWlhOellXZGxLRzF6WnlrN1hHNGdJQ0FnZlNrN1hHNWNiaUFnSUNCc1pYUWdkR0Z5WjJWMFRHbHpkRzRnUFNCMFlYSm5aWFF1WVdSa1RHbHpkR1Z1WlhJb2FXNVZjbXdzSUNodGMyY3BJRDArSUh0Y2JpQWdJQ0FnSUY5MGFHbHpMbkJ2YzNSTlpYTnpZV2RsS0cxelp5azdYRzRnSUNBZ2ZTazdYRzVjYmlBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ2RHaHBjMHhwYzNSbGJtVnlPaUIwYUdselRHbHpkRzRzWEc0Z0lDQWdJQ0IwWVhKblpYUk1hWE4wWlc1bGNqb2dkR0Z5WjJWMFRHbHpkRzRzWEc0Z0lDQWdJQ0IxYm1KcGJtUTZJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGFHbHpUR2x6ZEdWdVpYSXVjbVZ0YjNabEtDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRHRnlaMlYwVEdsemRHVnVaWEl1Y21WdGIzWmxLQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVHRjYmlBZ2ZWeHVYRzRnSUM4dmNIVmliR2x6YUNCdmJpQmtaV1poZFd4MElHeHBjM1JsYm1WeWMxeHVJQ0JmY0hWaWJHbHphRTl1UkdWbVlYVnNkQ2h0YzJjcElIdGNiaUFnSUNBdkwybHpJSFJvWlhKbElHRnVlU0JjSWlwY0lpQW9aR1ZtWVhWc2RDa2diR2x6ZEdWdVpYSnpQMXh1SUNBZ0lHeGxkQ0JwZEdWdFRHbHpkQ0E5SUhSb2FYTXVYM04xWW5OamNtbHdkR2x2Ym5OYkp5b25YVHRjYmlBZ0lDQnBaaUFvYVhSbGJVeHBjM1FwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYM0IxWW14cGMyaFBiaWhwZEdWdFRHbHpkQ3dnYlhObktUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZMM0IxWW14cGMyZ2diMjRnWVNCemRXSnpZM0pwY0hScGIyNGdiR2x6ZEM1Y2JpQWdYM0IxWW14cGMyaFBiaWhwZEdWdFRHbHpkQ3dnYlhObktTQjdYRzRnSUNBZ2FYUmxiVXhwYzNRdVptOXlSV0ZqYUNnb2MzVmlLU0E5UGlCN1hHNGdJQ0FnSUNCemRXSXVYMk5oYkd4aVlXTnJLRzF6WnlrN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQmZjbVZ6Y0c5dWMyVkRZV3hzWW1GamF5aHBiazF6Wnl3Z2NtVnpjRzl1YzJWRFlXeHNZbUZqYXlrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0F2TDJGMWRHOXRZWFJwWXlCdFlXNWhaMlZ0Wlc1MElHOW1JSEpsYzNCdmJuTmxJR2hoYm1Sc1pYSnpYRzRnSUNBZ2FXWWdLSEpsYzNCdmJuTmxRMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQWdJR3hsZENCeVpYTndiMjV6WlVsa0lEMGdhVzVOYzJjdVpuSnZiU0FySUdsdVRYTm5MbWxrTzF4dUlDQWdJQ0FnWDNSb2FYTXVYM0psYzNCdmJuTmxRMkZzYkdKaFkydHpXM0psYzNCdmJuTmxTV1JkSUQwZ2NtVnpjRzl1YzJWRFlXeHNZbUZqYXp0Y2JseHVJQ0FnSUNBZ2MyVjBWR2x0Wlc5MWRDZ29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J5WlhOd2IyNXpaVVoxYmlBOUlGOTBhR2x6TGw5eVpYTndiMjV6WlVOaGJHeGlZV05yYzF0eVpYTndiMjV6WlVsa1hUdGNiaUFnSUNBZ0lDQWdaR1ZzWlhSbElGOTBhR2x6TGw5eVpYTndiMjV6WlVOaGJHeGlZV05yYzF0eVpYTndiMjV6WlVsa1hUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2NtVnpjRzl1YzJWR2RXNHBJSHRjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdaWEp5YjNKTmMyY2dQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaRG9nYVc1TmMyY3VhV1FzSUhSNWNHVTZJQ2R5WlhOd2IyNXpaU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmliMlI1T2lCN0lHTnZaR1U2SURRd09Dd2daR1Z6WXpvZ0oxSmxjM0J2Ym5ObElIUnBiV1Z2ZFhRaEp5d2dkbUZzZFdVNklHbHVUWE5uSUgxY2JpQWdJQ0FnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2NtVnpjRzl1YzJWR2RXNG9aWEp5YjNKTmMyY3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5TENCZmRHaHBjeTVmY21WemNHOXVjMlZVYVcxbFQzVjBLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JmYjI1U1pYTndiMjV6WlNodGMyY3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ2FXWWdLRzF6Wnk1MGVYQmxJRDA5UFNBbmNtVnpjRzl1YzJVbktTQjdYRzRnSUNBZ0lDQnNaWFFnY21WemNHOXVjMlZKWkNBOUlHMXpaeTUwYnlBcklHMXpaeTVwWkR0Y2JpQWdJQ0FnSUd4bGRDQnlaWE53YjI1elpVWjFiaUE5SUY5MGFHbHpMbDl5WlhOd2IyNXpaVU5oYkd4aVlXTnJjMXR5WlhOd2IyNXpaVWxrWFR0Y2JseHVJQ0FnSUNBZ0x5OXBaaUJwZENkeklHRWdjSEp2ZG1semFXOXVZV3dnY21WemNHOXVjMlVzSUdSdmJpZDBJR1JsYkdWMFpTQnlaWE53YjI1elpTQnNhWE4wWlc1bGNseHVJQ0FnSUNBZ2FXWWdLRzF6Wnk1aWIyUjVMbU52WkdVZ1BqMGdNakF3S1NCN1hHNGdJQ0FnSUNBZ0lHUmxiR1YwWlNCZmRHaHBjeTVmY21WemNHOXVjMlZEWVd4c1ltRmphM05iY21WemNHOXVjMlZKWkYwN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2h5WlhOd2IyNXpaVVoxYmlrZ2UxeHVJQ0FnSUNBZ0lDQnlaWE53YjI1elpVWjFiaWh0YzJjcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lIMWNibHh1SUNBdkwzSmxZMlZwZG1VZ2JXVnpjMkZuWlhNZ1puSnZiU0JsZUhSbGNtNWhiQ0JwYm5SbGNtWmhZMlZjYmlBZ1gyOXVUV1Z6YzJGblpTaHRjMmNwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdhV1lnS0NGZmRHaHBjeTVmYjI1U1pYTndiMjV6WlNodGMyY3BLU0I3WEc0Z0lDQWdJQ0JzWlhRZ2FYUmxiVXhwYzNRZ1BTQmZkR2hwY3k1ZmMzVmljMk55YVhCMGFXOXVjMXR0YzJjdWRHOWRPMXh1SUNBZ0lDQWdhV1lnS0dsMFpXMU1hWE4wS1NCN1hHNGdJQ0FnSUNBZ0lGOTBhR2x6TGw5d2RXSnNhWE5vVDI0b2FYUmxiVXhwYzNRc0lHMXpaeWs3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0JmZEdocGN5NWZjSFZpYkdsemFFOXVSR1ZtWVhWc2RDaHRjMmNwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUY5blpXNUpaQ2hwYmsxelp5a2dlMXh1SUNBZ0lDOHZWRTlFVHpvZ2FHOTNJR1J2SUhkbElHMWhibUZuWlNCdFpYTnpZV2RsSUVsRUozTS9JRk5vYjNWc1pDQnBkQ0JpWlNCaElHZHNiMkpoYkNCeWRXNTBhVzFsSUdOdmRXNTBaWElzSUc5eUlIQmxjaUJWVWt3Z1lXUmtjbVZ6Y3o5Y2JpQWdJQ0F2TDBkc2IySmhiQ0JqYjNWdWRHVnlJSGRwYkd3Z2JtOTBJSGR2Y21zc0lHSmxZMkYxYzJVZ2RHaGxjbVVnZDJsc2JDQmlaU0J0ZFd4MGFYQnNaU0JOYVc1cFFuVnpJR2x1YzNSaGJtTmxjeUZjYmlBZ0lDQXZMMUJsY2lCVlVrd3NJR05oYmlCaVpTQmhJR3h2ZENCdlppQmtZWFJoSUhSdklHMWhhVzUwWVdsdUlWeHVJQ0FnSUM4dlRXRjVZbVVnWVNCamIzVnVkR1Z5SUhCbGNpQk5hVzVwUW5WeklHbHVjM1JoYm1ObExpQlVhR2x6SUdseklIUm9aU0JoYzNOMWJXVmtJSE52YkhWMGFXOXVJR1p2Y2lCdWIzY3VYRzRnSUNBZ2FXWWdLQ0ZwYmsxelp5NXBaQ0I4ZkNCcGJrMXpaeTVwWkNBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnZEdocGN5NWZiWE5uU1dRckt6dGNiaUFnSUNBZ0lHbHVUWE5uTG1sa0lEMGdkR2hwY3k1ZmJYTm5TV1E3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nVTJWdVpDQnRaWE56WVdkbGN5QjBieUJzYjJOaGJDQnNhWE4wWlc1bGNuTXNJRzl5SUdsbUlHNXZkQ0JsZUdsemRITWdkRzhnWlhoMFpYSnVZV3dnYkdsemRHVnVaWEp6TGx4dUlDQXFJRWwwSjNNZ2FHRnpJR0Z1SUc5d2RHbHZibUZzSUcxbFkyaGhibWx6YlNCbWIzSWdZWFYwYjIxaGRHbGpJRzFoYm1GblpXMWxiblFnYjJZZ2NtVnpjRzl1YzJVZ2FHRnVaR3hsY25NdVhHNGdJQ29nVkdobElISmxjM0J2Ym5ObElHaGhibVJzWlhJZ2QybHNiQ0JpWlNCMWJuSmxaMmx6ZEdWeVpXUWdZV1owWlhJZ2NtVmpaV2wyYVc1bklIUm9aU0J5WlhOd2IyNXpaU3dnYjNJZ1lXWjBaWElnY21WemNHOXVjMlVnZEdsdFpXOTFkQ0FvWkdWbVlYVnNkQ0IwYnlBemN5a3VYRzRnSUNvZ1FIQmhjbUZ0SUNCN1RXVnpjMkZuWlgwZ2JYTm5JRTFsYzNOaFoyVWdkRzhnYzJWdVpDNGdUV1Z6YzJGblpTQkpSQ0JwY3lCaGRYUnZiV0YwYVdOaGJHeDVJR0ZrWkdWa0lIUnZJSFJvWlNCdFpYTnpZV2RsTGx4dUlDQXFJRUJ3WVhKaGJTQWdlMFoxYm1OMGFXOXVmU0J5WlhOd2IyNXpaVU5oYkd4aVlXTnJJRTl3ZEdsdmJtRnNJSEJoY21GdFpYUmxjaXdnYVdZZ2RHaGxJR1JsZG1Wc2IzQmxjaUIzYUdGMEozTWdZWFYwYjIxaGRHbGpJSEpsYzNCdmJuTmxJRzFoYm1GblpXMWxiblF1WEc0Z0lDb2dRSEpsZEhWeWJpQjdiblZ0WW1WeWZTQlNaWFIxY201eklIUm9aU0J0WlhOellXZGxJRWxFTENCcGJpQmpZWE5sSUdsMElITm9iM1ZzWkNCaVpTQnVaV1ZrWldRZ1ptOXlJRzFoYm5WaGJDQnRZVzVoWjJWdFpXNTBJRzltSUhSb1pTQnlaWE53YjI1elpTQm9ZVzVrYkdWeUxseHVJQ0FxTDF4dUlDQndiM04wVFdWemMyRm5aU2hwYmsxelp5d2djbVZ6Y0c5dWMyVkRZV3hzWW1GamF5a2dleUI5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRTV2ZENCd2RXSnNhV01nWVhaaGFXeGhZbXhsTENCMWMyVmtJR0o1SUhSb1pTQmpiR0Z6Y3lCbGVIUmxibk5wYjI0Z2FXMXdiR1Z0Wlc1MFlYUnBiMjRzSUhSdklIQnliMk5sYzNNZ2JXVnpjMkZuWlhNZ1puSnZiU0IwYUdVZ2NIVmliR2xqSUZ3aWNHOXpkRTFsYzNOaFoyVmNJaUIzYVhSb2IzVjBJR0VnY21WbmFYTjBaWEpsWkNCc2FYTjBaVzVsY2k1Y2JpQWdJQ29nVlhObFpDQjBieUJ6Wlc1a0lIUm9aU0J0WlhOellXZGxJSFJ2SUdGdUlHVjRkR1Z5Ym1Gc0lHbHVkR1Z5Wm1GalpTd2diR2xyWlNCaElGZGxZbGR2Y210bGNpd2dTVVp5WVcxbExDQmxkR011WEc0Z0lDQXFJRUJ3WVhKaGJTQWdlMDFsYzNOaFoyVXVUV1Z6YzJGblpYMGdiWE5uSUUxbGMzTmhaMlZjYmlBZ0lDb3ZYRzRnSUY5dmJsQnZjM1JOWlhOellXZGxLRzF6WnlrZ2V5QXZLbWx0Y0d4bGJXVnVkR0YwYVc5dUlIZHBiR3dnYzJWdVpDQnRaWE56WVdkbElIUnZJR1Y0ZEdWeWJtRnNJSE41YzNSbGJTb3ZJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dUbTkwSUhCMVlteHBZeUJoZG1GcGJHRmliR1VzSUhWelpXUWdZbmtnZEdobElHTnNZWE56SUdWNGRHVnVjMmx2YmlCcGJYQnNaVzFsYm5SaGRHbHZiaXdnZEc4Z2NISnZZMlZ6Y3lCaGJHd2diV1Z6YzJGblpYTWdkR2hoZENCbGJuUmxjaUIwYUdVZ1RXbHVhVUoxY3lCbWNtOXRJR0Z1SUdWNGRHVnlibUZzSUdsdWRHVnlabUZqWlN3Z2JHbHJaU0JoSUZkbFlsZHZjbXRsY2l3Z1NVWnlZVzFsTENCbGRHTXVYRzRnSUNBcUlGUm9hWE1nYldWMGFHOWtJR2x6SUdOaGJHeGxaQ0J2Ym1VZ2RHbHRaU0JwYmlCMGFHVWdZMjl1YzNSeWRXTjBiM0lnZEc4Z2NtVm5hWE4wWlhJZ1pYaDBaWEp1WVd3Z2JHbHpkR1Z1WlhKekxseHVJQ0FnS2lCVWFHVWdhVzF3YkdWdFpXNTBZWFJwYjI0Z2QybHNiQ0J3Y205aVlXSnNlU0JqWVd4c0lIUm9aU0JjSWw5dmJrMWxjM05oWjJWY0lpQnRaWFJvYjJRZ2RHOGdjSFZpYkdsemFDQnBiaUIwYUdVZ2JHOWpZV3dnYkdsemRHVnVaWEp6TGx4dUlDQWdLaUJFVHlCT1QxUWdZMkZzYkNCY0luQnZjM1JOWlhOellXZGxYQ0lzSUhSb1pYSmxJR2x6SUdFZ1pHRnVaMlZ5SUhSb1lYUWdkR2hsSUcxbGMzTmhaMlVnWlc1MFpYSnpJR2x1SUdFZ1kzbGpiR1VoWEc0Z0lDQXFMMXh1SUNCZmNtVm5hWE4wWlhKRmVIUmxjbTVoYkV4cGMzUmxibVZ5S0NrZ2V5QXZLbWx0Y0d4bGJXVnVkR0YwYVc5dUlIZHBiR3dnY21WbmFYTjBaWElnWlhoMFpYSnVZV3dnYkdsemRHVnVaWElnWVc1a0lHTmhiR3dnWENKMGFHbHpMbDl2YmsxbGMzTmhaMlVvYlhObktWd2lJQ292SUgxY2JseHVmVnh1WEc1amJHRnpjeUJOYzJkTWFYTjBaVzVsY2lCN1hHNGdJQzhxSUhCeWFYWmhkR1ZjYmlBZ1gzTjFZbk5qY21sd2RHbHZibk02SUR4emRISnBibWM2SUUxeloweHBjM1JsYm1WeVcxMCtPMXh1SUNCZmRYSnNPaUJ6ZEhKcGJtYzdYRzRnSUY5allXeHNZbUZqYXpvZ0tHMXpaeWtnUFQ0Z2RtOXBaRHRjYmlBZ0tpOWNibHh1SUNCamIyNXpkSEoxWTNSdmNpaHpkV0p6WTNKcGNIUnBiMjV6TENCMWNtd3NJR05oYkd4aVlXTnJLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lGOTBhR2x6TGw5emRXSnpZM0pwY0hScGIyNXpJRDBnYzNWaWMyTnlhWEIwYVc5dWN6dGNiaUFnSUNCZmRHaHBjeTVmZFhKc0lEMGdkWEpzTzF4dUlDQWdJRjkwYUdsekxsOWpZV3hzWW1GamF5QTlJR05oYkd4aVlXTnJPMXh1SUNCOVhHNWNiaUFnWjJWMElIVnliQ2dwSUhzZ2NtVjBkWEp1SUhSb2FYTXVYM1Z5YkRzZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCU1pXMXZkbVVnZEdocGN5QnNhWE4wWlc1bGNpQm1jbTl0SUhSb1pTQkNkWE5jYmlBZ0lDb3ZYRzRnSUhKbGJXOTJaU2dwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdiR1YwSUhOMVluTWdQU0JmZEdocGN5NWZjM1ZpYzJOeWFYQjBhVzl1YzF0ZmRHaHBjeTVmZFhKc1hUdGNiaUFnSUNCcFppQW9jM1ZpY3lrZ2UxeHVJQ0FnSUNBZ2JHVjBJR2x1WkdWNElEMGdjM1ZpY3k1cGJtUmxlRTltS0Y5MGFHbHpLVHRjYmlBZ0lDQWdJSE4xWW5NdWMzQnNhV05sS0dsdVpHVjRMQ0F4S1R0Y2JseHVJQ0FnSUNBZ0x5OXBaaUIwYUdWeVpTQmhjbVVnYm04Z2JHbHpkR1Z1WlhKekxDQnlaVzF2ZG1VZ2RHaGxJSE4xWW5OamNtbHdkR2x2YmlCbGJuUnBjbVZzZVM1Y2JpQWdJQ0FnSUdsbUlDaHpkV0p6TG14bGJtZDBhQ0E5UFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0JrWld4bGRHVWdYM1JvYVhNdVgzTjFZbk5qY21sd2RHbHZibk5iWDNSb2FYTXVYM1Z5YkYwN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUVKMWN6dGNiaUlzSWk4cUtseHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlFWQ0JKYm05MlljT253Nk52SUdVZ1UybHpkR1Z0WVhNZ1UwRmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdTVTVGVTBNdFNVUmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdVVlZQUWtsVElFNUZWRmRQVWt0VElGTk1YRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRVpTUVZWT1NFOUdSVkl0UjBWVFJVeE1VME5JUVVaVUlGcFZVaUJHVDBWU1JFVlNWVTVISUVSRlVpQkJUa2RGVjBGT1JGUkZUaUJHVDFKVFEwaFZUa2NnUlM1V1hHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFOVNRVTVIUlNCVFFWeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkVaWFYwYzJOb1pTQlVaV3hsYTI5dElFRkhYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRUZ3YVhwbFpWeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlVSVU5JVGtsVFEwaEZJRlZPU1ZaRlVsTkpWRUZVSUVKRlVreEpUbHh1S2x4dUtpQk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdJQ2gwYUdVZ1hDSk1hV05sYm5ObFhDSXBPMXh1S2lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObElIZHBkR2dnZEdobElFeHBZMlZ1YzJVdVhHNHFJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4dUtseHVLaUFnSUdoMGRIQTZMeTkzZDNjdVlYQmhZMmhsTG05eVp5OXNhV05sYm5ObGN5OU1TVU5GVGxORkxUSXVNRnh1S2x4dUtpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzSUhOdlpuUjNZWEpsWEc0cUlHUnBjM1J5YVdKMWRHVmtJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxJR2x6SUdScGMzUnlhV0oxZEdWa0lHOXVJR0Z1SUZ3aVFWTWdTVk5jSWlCQ1FWTkpVeXhjYmlvZ1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdVhHNHFJRk5sWlNCMGFHVWdUR2xqWlc1elpTQm1iM0lnZEdobElITndaV05wWm1saklHeGhibWQxWVdkbElHZHZkbVZ5Ym1sdVp5QndaWEp0YVhOemFXOXVjeUJoYm1SY2Jpb2diR2x0YVhSaGRHbHZibk1nZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlV1WEc0cUtpOWNibWx0Y0c5eWRDQkNkWE1nWm5KdmJTQW5MaTlDZFhNbk8xeHVhVzF3YjNKMElGQnBjR1ZzYVc1bElHWnliMjBnSnk0dlVHbHdaV3hwYm1Vbk8xeHVYRzR2S2lwY2Jpb2dRR0YxZEdodmNpQnRhV05oWld4d1pXUnliM05oUUdkdFlXbHNMbU52YlZ4dUtpQk5aWE56WVdkbElFSlZVeUJKYm5SbGNtWmhZMlVnYVhNZ1lXNGdaWGgwWlc1emFXOXVJRzltSUhSb1pTQkNkWE5jYmlvZ1NYUWdaRzlsYzI0bmRDQnpkWEJ3YjNKMElIUm9aU0JrWldaaGRXeDBJQ2NxSnlCc2FYTjBaVzVsY2l3Z2FXNXpkR1ZoWkNCcGRDQjFjMlZ6SUhSb1pTQnlaV2RwYzNSeWVTNXlaWE52YkhabEtDNHVLVnh1S2k5Y2JtTnNZWE56SUUxbGMzTmhaMlZDZFhNZ1pYaDBaVzVrY3lCQ2RYTWdlMXh1SUNBdktpQndjbWwyWVhSbFhHNGdJRjl5WldkcGMzUnllVG9nVW1WbmFYTjBjbmxjYmlBZ1gyWnZjbmRoY21Sek9pQjdJRHhtY205dExYVnliRDQ2SUhzZ1ptdzZJRTF6WjB4cGMzUmxibVZ5TENCellXNWtZbTk0Vkc5VmNteHpPaUJOWVhBb1UyRnVaR0p2ZUN3Z1czUnZMWFZ5YkYwcExDQjFjbXhVYjFOaGJtUmliM2c2SUhzZ2RHOHRkWEpzT2lCVFlXNWtZbTk0SUgwZ2ZTQjlYRzVjYmlBZ1gzQnBjR1ZzYVc1bE9pQlFhWEJsYkdsdVpWeHVJQ0FxTDF4dVhHNGdJQzh2VkU5RVR6b2dablYwZFhKbElHOXdkR2x0YVhwaGRHbHZibHh1SUNBdkx6RXVJRzFsYzNOaFoyVWdZbUYwWTJnZ2NISnZZMlZ6YzJsdVp5QjNhWFJvSUhObGRFbHVkR1Z5ZG1Gc1hHNGdJQzh2TWk0Z2NtVnpiMngyWlNCa1pXWmhkV3gwSUdkaGRHVjNZWGt2Y0hKdmRHOXpkSFZpSUhkcGRHZ2djbVZuYVhOMFpYSXVjbVZ6YjJ4MlpWeHVYRzRnSUdOdmJuTjBjblZqZEc5eUtISmxaMmx6ZEhKNUtTQjdYRzRnSUNBZ2MzVndaWElvS1R0Y2JpQWdJQ0IwYUdsekxsOXlaV2RwYzNSeWVTQTlJSEpsWjJsemRISjVPMXh1SUNBZ0lIUm9hWE11WDJadmNuZGhjbVJ6SUQwZ2UzMDdYRzVjYmlBZ0lDQjBhR2x6TGw5d2FYQmxiR2x1WlNBOUlHNWxkeUJRYVhCbGJHbHVaU2dvWlhKeWIzSXBJRDArSUh0Y2JpQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZFFTVkJGVEVsT1JTMUZVbEpQVWpvZ0p5d2dTbE5QVGk1emRISnBibWRwWm5rb1pYSnliM0lwS1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lHZGxkQ0J3YVhCbGJHbHVaU2dwSUhzZ2NtVjBkWEp1SUhSb2FYTXVYM0JwY0dWc2FXNWxPeUI5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkJ2YzNRZ1lTQnRaWE56WVdkbElHWnZjaUJ5YjNWMGFXNW5MaUJKZENCM2FXeHNJR1pwY25OMElITmxZWEpqYUNCbWIzSWdZU0JzYVhOMFpXNWxjaXdnYVdZZ2RHaGxjbVVnYVhNZ2JtOGdiMjVsTENCcGRDQnpaVzVrY3lCMGJ5QmhJR1Y0ZEdWeWJtRnNJSEp2ZFhScGJtY2dkWE5wYm1jZ2RHaGxJRjl2YmxCdmMzUk5aWE56WVdkbExseHVJQ0FnS2lCRmVIUmxjbTVoYkNCeWIzVjBhVzVuSUhWelpTQjBhR1VnY21WbmFYTjBjbmt1Y21WemIyeDJaU2d1TGlrZ2JXVjBhRzlrSUhSdklHUmxZMmxrWlNCMGFHVWdaR1Z6ZEdsdVlYUnBiMjRnYzJGdVpHSnZlQzVjYmlBZ0lDb2dRSEJoY21GdElDQjdUV1Z6YzJGblpYMGdhVzVOYzJjZ0lDQWdJQ0FnSUNBZ0lDQktVMDlPSUhkcGRHZ2diV0Z1WkdGMGIzSjVJRTFsYzNOaFoyVWdjM1J5ZFdOMGRYSmxJSHRwWkN3Z2RIbHdaU3dnWm5KdmJTd2dkRzk5WEc0Z0lDQXFJRUJ3WVhKaGJTQWdlME5oYkd4aVlXTnJmU0J5WlhOd2IyNXpaVU5oYkd4aVlXTnJJRTl3ZEdsdmJtRnNJR05oYkd4aVlXTnJJR2xtSUdFZ2NtVnpjRzl1YzJVZ2FYTWdaWGh3WldOMFpXUWdabkp2YlNCMGFHVWdjbVZ4ZFdWemRDNGdRU0J5WlhOd2IyNXpaU0IzYVd4c0lHSmxJR0ZzZDJGNWN5QnpaVzUwTENCbGRtVnVJR2xtSUdsMElHbHpJR0VnWENKVWFXMWxiM1YwWENJdVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTI1MWJXSmxjbjBnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdVZ1RXVnpjMkZuWlNCcFpGeHVJQ0FnS2k5Y2JpQWdjRzl6ZEUxbGMzTmhaMlVvYVc1TmMyY3NJSEpsYzNCdmJuTmxRMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ1gzUm9hWE11WDJkbGJrbGtLR2x1VFhObktUdGNibHh1SUNBZ0lGOTBhR2x6TGw5d2FYQmxiR2x1WlM1d2NtOWpaWE56S0dsdVRYTm5MQ0FvYlhObktTQTlQaUI3WEc1Y2JpQWdJQ0FnSUY5MGFHbHpMbDl5WlhOd2IyNXpaVU5oYkd4aVlXTnJLR2x1VFhObkxDQnlaWE53YjI1elpVTmhiR3hpWVdOcktUdGNibHh1SUNBZ0lDQWdhV1lnS0NGZmRHaHBjeTVmYjI1U1pYTndiMjV6WlNodGMyY3BLU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQnBkR1Z0VEdsemRDQTlJRjkwYUdsekxsOXpkV0p6WTNKcGNIUnBiMjV6VzIxelp5NTBiMTA3WEc0Z0lDQWdJQ0FnSUdsbUlDaHBkR1Z0VEdsemRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUM4dlpHOGdibTkwSUhCMVlteHBjMmdnYjI0Z1pHVm1ZWFZzZENCaFpHUnlaWE56TENCaVpXTmhkWE5sSUc5bUlHeHZiM0JpWVdOcklHTjVZMnhsWEc0Z0lDQWdJQ0FnSUNBZ1gzUm9hWE11WDNCMVlteHBjMmhQYmlocGRHVnRUR2x6ZEN3Z2JYTm5LVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBdkwybG1JSFJvWlhKbElHbHpJRzV2SUd4cGMzUmxibVZ5TENCelpXNWtJSFJ2SUdWNGRHVnlibUZzSUdsdWRHVnlabUZqWlZ4dUlDQWdJQ0FnSUNBZ0lGOTBhR2x6TGw5dmJsQnZjM1JOWlhOellXZGxLRzF6WnlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNibHh1SUNBZ0lISmxkSFZ5YmlCcGJrMXpaeTVwWkR0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkJaR1J6SUdGdUlHVjRkR1Z5Ym1Gc0lIQjFZbXhwYzJnZ1lXUmtjbVZ6Y3lCc2FYTjBaVzVsY2k0Z1JYWmxjbmtnYldWemMyRm5aU0JtYjNJZ2RHaGxJR0ZrWkhKbGMzTWdkMmxzYkNCaVpTQm1iM0ozWVhKa1pXUWdkRzhnZEdobElHVjRkR1Z5Ym1Gc0lISnZkWFJwYm1jZ1lua2dYMjl1VUc5emRFMWxjM05oWjJVdVhHNGdJQ0FxSUZSb2FYTWdiV1ZoYm5Nc0lHVjJaVzRnYVdZZ2RHaGxjbVVnYVhNZ1lTQnNhWE4wWlc1bGNpQm1iM0lnZEdobElHRmtaSEpsYzNNc0lHbDBJSGRwYkd3Z1lXeHpieUJ6Wlc1a0lIUm9aU0J0WlhOellXZGxJSFJ2SUhSb1pTQmxlSFJsY201aGJDQnliM1YwYVc1bkxseHVJQ0FnS2lCQWNHRnlZVzBnZTFWU1RIMGdabkp2YlNCUWRXSnNhWE5vSUdGa1pISmxjM011WEc0Z0lDQXFMMXh1SUNCaFpHUlFkV0pzYVhOb0tHWnliMjBwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdMeTkyWlhKcFpua2dhV1lnWm05eWQyRnlaQ0JsZUdsemRGeHVJQ0FnSUd4bGRDQnlaV1pEYjNWdWRDQTlJRjkwYUdsekxsOW1iM0ozWVhKa2MxdG1jbTl0WFR0Y2JpQWdJQ0JwWmlBb0lYSmxaa052ZFc1MEtTQjdYRzRnSUNBZ0lDQnNaWFFnWm05eWQyRnlaRXhwYzNSbGJtVnlJRDBnWDNSb2FYTXVZV1JrVEdsemRHVnVaWElvWm5KdmJTd2dLRzF6WnlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblRVSXRVRlZDVEVsVFNEb2dLQ0FuSUNzZ1puSnZiU0FySUNjZ0tTY3BPMXh1SUNBZ0lDQWdJQ0JmZEdocGN5NWZiMjVRYjNOMFRXVnpjMkZuWlNodGMyY3BPMXh1SUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUhKbFprTnZkVzUwSUQwZ2UxeHVJQ0FnSUNBZ0lDQmpiM1Z1ZEdWeU9pQXdMRnh1SUNBZ0lDQWdJQ0JtYkRvZ1ptOXlkMkZ5WkV4cGMzUmxibVZ5TEZ4dUlDQWdJQ0FnSUNCeVpXMXZkbVU2SUNncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbU52ZFc1MFpYSXRMVHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1amIzVnVkR1Z5SUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1ac0xuSmxiVzkyWlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxJRjkwYUdsekxsOW1iM0ozWVhKa2MxdG1jbTl0WFR0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnWDNSb2FYTXVYMlp2Y25kaGNtUnpXMlp5YjIxZElEMGdjbVZtUTI5MWJuUTdYRzRnSUNCOVhHNWNiaUFnSUhKbFprTnZkVzUwTG1OdmRXNTBaWElyS3p0Y2JpQWdJSEpsZEhWeWJpQnlaV1pEYjNWdWREdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJCWkdSeklHRWdabTl5ZDJGeVpDQnNhWE4wWlc1bGNpQm1iM0lnWVNCdFpYTnpZV2RsSUdSbGMzUnBibUYwYVc5dUxpQkZkbVZ5ZVNCdFpYTnpZV2RsSUhKbFlXTm9hVzVuSUdGdUlHRmtaSEpsYzNNZ2QybHNiQ0JpWlNCaGJITnZJSE5sYm5RZ2RHOGdkR2hsSUdadmNuZGhjbVFnWVdSa2NtVnpjeTVjYmlBZ0lDb2dRSEJoY21GdElIdFZVa3g5SUdaeWIyMGdUV1Z6YzJGblpTQmtaWE4wYVc1aGRHbHZiaXdnYVhRbmN5QmhZM1IxWVd4c2VTQjBhR1VnWm1sbGJHUWdYQ0owYjF3aUlHOW1JSFJvWlNCdFpYTnpZV2RsTGx4dUlDQWdLaUJBY0dGeVlXMGdlMVZTVEgwZ2RHOGdJQ0JHYjNKM1lYSmtJR0ZrWkhKbGMzTXVYRzRnSUNBcUwxeHVJQ0FnWVdSa1JtOXlkMkZ5WkNobWNtOXRMQ0IwYnlrZ2UxeHVJQ0FnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnSUhKbGRIVnliaUJmZEdocGN5NWhaR1JNYVhOMFpXNWxjaWhtY205dExDQW9iWE5uS1NBOVBpQjdYRzRnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjAxQ0xVWlBVbGRCVWtRNklDZ2dKeUFySUdaeWIyMGdLeUFuSUhSdklDY2dLeUIwYnlBcklDY2dLU2NwTzF4dUlDQWdJQ0FnSUY5MGFHbHpMbVp2Y25kaGNtUW9kRzhzSUcxelp5azdYRzRnSUNBZ0lIMHBPMXh1SUNBZ2ZWeHVYRzRnSUNBdktpcGNiaUFnSUNBcUlFcDFjM1FnWm05eWQyRnlaQ2R6SUdFZ2JXVnpjMkZuWlNCMGJ5QjBhR1VnWm05eWQyRnlaQ0JoWkdSeVpYTnpMaUJNYVhOMFpXNWxjbk1nYzJodmRXeGtJR0psSUdGMllXbHNZV0pzWlNCbWIzSWdkR2hsSUdadmNuZGhjbVFnWVdSa2NtVnpjeTVjYmlBZ0lDQXFJRUJ3WVhKaGJTQWdlMVZTVEgwZ2RYSnNJRVp2Y25kaGNtUWdZV1JrY21WemN5NWNiaUFnSUNBcUlFQndZWEpoYlNBZ2UwMWxjM05oWjJWOUlHMXpaeUJOWlhOellXZGxJSFJ2SUdadmNuZGhjbVJjYmlBZ0lDQXFMMXh1SUNBZ1ptOXlkMkZ5WkNoMWNtd3NJRzF6WnlrZ2UxeHVJQ0FnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnSUd4bGRDQnBkR1Z0VEdsemRDQTlJRjkwYUdsekxsOXpkV0p6WTNKcGNIUnBiMjV6VzNWeWJGMDdYRzRnSUNBZ0lHbG1JQ2hwZEdWdFRHbHpkQ2tnZTF4dUlDQWdJQ0FnSUY5MGFHbHpMbDl3ZFdKc2FYTm9UMjRvYVhSbGJVeHBjM1FzSUcxelp5azdYRzRnSUNBZ0lIMWNiaUFnSUgxY2JseHVJQ0FnTHk5a1pXWmhkV3gwSUhKdmRYUmxMQ0JwWmlCMGFHVnlaU0JoY21VZ2JtOGdiR2x6ZEdWdVpYSnpJR0YyWVdsc1lXSnNaU0JtYjNJZ1lTQnRaWE56WVdkbElHUmxjM1JwYm1GMGFXOXVMbHh1SUNBZ1gyOXVVRzl6ZEUxbGMzTmhaMlVvYlhObktTQjdYRzRnSUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNBZ0x5OXlaWE52YkhabElHVjRkR1Z5Ym1Gc0lIQnliM1J2YzNSMVlpNHVMbHh1SUNBZ0lDQmZkR2hwY3k1ZmNtVm5hWE4wY25rdWNtVnpiMngyWlNodGMyY3VkRzhwTG5Sb1pXNG9LSEp2ZFhSbEtTQTlQaUI3WEc0Z0lDQWdJQ0FnWDNSb2FYTXVabTl5ZDJGeVpDaHliM1YwWlN3Z2JYTm5LVHRjYmlBZ0lDQWdmU2t1WTJGMFkyZ29ablZ1WTNScGIyNG9aU2tnZTF4dUlDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZFNSVk5QVEZaRkxVVlNVazlTT2lBbkxDQmxLVHRjYmlBZ0lDQWdmU2s3WEc0Z0lDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUUxbGMzTmhaMlZDZFhNN1hHNGlMQ0l2S2lwY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1VGUWdTVzV2ZG1IRHA4T2pieUJsSUZOcGMzUmxiV0Z6SUZOQlhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFbE9SVk5ETFVsRVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGRlZUMEpKVXlCT1JWUlhUMUpMVXlCVFRGeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkdVa0ZWVGtoUFJrVlNMVWRGVTBWTVRGTkRTRUZHVkNCYVZWSWdSazlGVWtSRlVsVk9SeUJFUlZJZ1FVNUhSVmRCVGtSVVJVNGdSazlTVTBOSVZVNUhJRVV1Vmx4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUFVrRk9SMFVnVTBGY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1JHVjFkSE5qYUdVZ1ZHVnNaV3R2YlNCQlIxeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkJjR2w2WldWY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1ZFVkRTRTVKVTBOSVJTQlZUa2xXUlZKVFNWUkJWQ0JDUlZKTVNVNWNiaXBjYmlvZ1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsSUZ3aVRHbGpaVzV6WlZ3aUtUdGNiaW9nZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlNCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGx4dUtpQlpiM1VnYldGNUlHOWlkR0ZwYmlCaElHTnZjSGtnYjJZZ2RHaGxJRXhwWTJWdWMyVWdZWFJjYmlwY2Jpb2dJQ0JvZEhSd09pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaXBjYmlvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MQ0J6YjJaMGQyRnlaVnh1S2lCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhiaUJjSWtGVElFbFRYQ0lnUWtGVFNWTXNYRzRxSUZkSlZFaFBWVlFnVjBGU1VrRk9WRWxGVXlCUFVpQkRUMDVFU1ZSSlQwNVRJRTlHSUVGT1dTQkxTVTVFTENCbGFYUm9aWElnWlhod2NtVnpjeUJ2Y2lCcGJYQnNhV1ZrTGx4dUtpQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEc0cUlHeHBiV2wwWVhScGIyNXpJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1S2lvdlhHNWNiaThxS2x4dUtpQkFZWFYwYUc5eUlHMXBZMkZsYkhCbFpISnZjMkZBWjIxaGFXd3VZMjl0WEc0cUlGTmxjWFZsYm1OcFlXd2djSEp2WTJWemMyOXlJRzltSUcxbGRHaHZaSE11SUZOcGJXbHNZWElnZEc4Z2FHOTNJRk5sY1hWbGJuUnBZV3dnVUhKdmJXbHpaU2R6SUhkdmNtc3NJR0oxZENCaVpYUjBaWElnWm1sMElHWnZjaUJ0WlhOellXZGxJSEJ5YjJObGMzTnBibWN1WEc0cUlFNXZjbTFoYkNCMWMyVWdabTl5SUhSb2FYTXNJR2x6SUhSdklHbHVkR1Z5WTJWd2RDQmhiR3dnYldWemMyRm5aWE1nZDJsMGFDQmpiMjVtYVdkMWNtVmtJR2hoYm1Sc1pYSnpMQ0JoYm1RZ1lXTjBJR0ZqWTI5eVpHbHVaMng1TGx4dUtpOWNibU5zWVhOeklGQnBjR1ZzYVc1bElIdGNiaUFnTHlvZ2NIVmliR2xqWEc0Z0lDQWdhR0Z1Wkd4bGNuTTZJQ2dvVUdsd1pVTnZiblJsZUhRcElEMCtJSFp2YVdRcFcxMWNiaUFnSUNCdmJrWmhhV3c2SUNobGNuSnZjaWtnUFQ0Z2RtOXBaRnh1SUNBcUwxeHVYRzRnSUdOdmJuTjBjblZqZEc5eUtGOXZia1poYVd3cElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnWDNSb2FYTXVhR0Z1Wkd4bGNuTWdQU0JiWFR0Y2JpQWdJQ0JmZEdocGN5NXZia1poYVd3Z1BTQmZiMjVHWVdsc08xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRWx1YzJWeWRDQmhJRzFsYzNOaFoyVWdhVzRnZEdobElIQnBjR1ZzYVc1bElIRjFaWFZsTGlCQmJHd2diV1Z6YzJGblpYTWdZWEpsSUhkeVlYQndaV1FnZDJsMGFDQmhJRkJwY0dWRGIyNTBaWGgwTGx4dUlDQWdLaUJBY0dGeVlXMGdJSHROWlhOellXZGxmU0J0YzJjZ0lDQWdJQ0FnVFdWemMyRm5aU0JtYjNJZ2RHaGxJSEYxWlhWbFhHNGdJQ0FxSUVCd1lYSmhiU0FnZTBOaGJHeGlZV05yZlNCdmJrUmxiR2wyWlhJZ1YyaGxiaUJ0WlhOellXZGxJR2x6SUdacGJtbHphR1ZrSUhCeWIyTmxjM05wYm1jZ1puSnZiU0JoYkd3Z2FHRnVaR3hsY25Nc0lHbDBJSGRwYkd3Z1ltVWdaR1ZzYVhabGNtVmtJR2x1SUhSb2FYTWdZMkZzYkdKaFkyc3VYRzRnSUNBcUwxeHVJQ0J3Y205alpYTnpLRzF6Wnl3Z2IyNUVaV3hwZG1WeUtTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUdsbUlDaGZkR2hwY3k1b1lXNWtiR1Z5Y3k1c1pXNW5kR2dnUGlBd0tTQjdYRzRnSUNBZ0lDQnNaWFFnYVhSbGNpQTlJRzVsZHlCSmRHVnlZWFJ2Y2loZmRHaHBjeTVvWVc1a2JHVnljeWs3WEc0Z0lDQWdJQ0JwZEdWeUxtNWxlSFFvYm1WM0lGQnBjR1ZEYjI1MFpYaDBLRjkwYUdsekxDQnBkR1Z5TENCdGMyY3NJRzl1UkdWc2FYWmxjaWtwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnZia1JsYkdsMlpYSW9iWE5uS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dUx5b3FYRzRxSUVCaGRYUm9iM0lnYldsallXVnNjR1ZrY205ellVQm5iV0ZwYkM1amIyMWNiaW9nVjNKaGNIQmxjaUJoY205MWJtUWdZU0J0WlhOellXZGxJSFJvWVhRZ1lXUmtjeUJoWTNScGIyNXpJSFJvWVhRZ1kyRnVJR0psSUdacGNtVmtJR0o1SUdGdWVTQnBiblJsY21ObGNIUnZjaUJvWVc1a2JHVnlMbHh1S2lCVWFHVWdVR2x3Wld4cGJtVWdhWE1nWVhONWJtTm9jbTl1YjNWekxDQnpieUJoYmlCb1lXNWtiR1Z5SUhOb2IzVnNaQ0JoYkhkaGVYTWdZMkZzYkNCaGJpQmhZM1JwYjI0c0lIUm9aU0JrWldaaGRXeDBJRzl1WlNCcGN5QmNJbTVsZUhRb0tWd2lYRzRxTDF4dVkyeGhjM01nVUdsd1pVTnZiblJsZUhRZ2UxeHVJQ0F2S2lCd2NtbDJZWFJsWEc0Z0lDQWdYMmx1VTNSdmNEb2dZbTl2YkdWaGJseHVYRzRnSUNBZ1gzQnBjR1ZzYVc1bE9pQlFhWEJsYkdsdVpWeHVJQ0FnSUY5cGRHVnlPaUJKZEdWeVlYUnZjbHh1SUNBZ0lGOXRjMmM2SUUxbGMzTmhaMlZjYmlBZ0tpOWNibHh1SUNCamIyNXpkSEoxWTNSdmNpaHdhWEJsYkdsdVpTd2dhWFJsY2l3Z2JYTm5MQ0J2YmtSbGJHbDJaWElwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdYM1JvYVhNdVgybHVVM1J2Y0NBOUlHWmhiSE5sTzF4dVhHNGdJQ0FnWDNSb2FYTXVYM0JwY0dWc2FXNWxJRDBnY0dsd1pXeHBibVU3WEc0Z0lDQWdYM1JvYVhNdVgybDBaWElnUFNCcGRHVnlPMXh1SUNBZ0lGOTBhR2x6TGw5dGMyY2dQU0J0YzJjN1hHNGdJQ0FnWDNSb2FYTXVYMjl1UkdWc2FYWmxjaUE5SUc5dVJHVnNhWFpsY2p0Y2JpQWdmVnh1WEc0Z0lHZGxkQ0J3YVhCbGJHbHVaU2dwSUhzZ2NtVjBkWEp1SUhSb2FYTXVYM0JwY0dWc2FXNWxPeUI5WEc1Y2JpQWdaMlYwSUcxelp5Z3BJSHNnY21WMGRYSnVJSFJvYVhNdVgyMXpaenNnZlZ4dUlDQnpaWFFnYlhObktHbHVUWE5uS1NCN0lIUm9hWE11WDIxelp5QTlJR2x1VFhObk95QjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGQnliMk5sWldRZ2RHOGdkR2hsSUc1bGVIUWdhVzUwWlhKalpYQjBiM0lnYUdGdVpHeGxjaXdnZFc1c1pYTnpJSFJvWlhKbElIZGhjeUJoYmlCbGNuSnZjaTRnU1dZZ2FYUW5jeUIwYUdVZ2JHRnpkQ0J2Ym1Vc0lIQnliMk5sWldRZ2RHOGdiMjVFWld4cGRtVnlJR2hoYm1Sc1pYSXVYRzRnSUNBcUwxeHVJQ0J1WlhoMEtDa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCcFppQW9JVjkwYUdsekxsOXBibE4wYjNBcElIdGNiaUFnSUNBZ0lHbG1JQ2hmZEdocGN5NWZhWFJsY2k1b1lYTk9aWGgwS1NCN1hHNGdJQ0FnSUNBZ0lGOTBhR2x6TGw5cGRHVnlMbTVsZUhRb1gzUm9hWE1wTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVYMjl1UkdWc2FYWmxjaWhmZEdocGN5NWZiWE5uS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1VISnZZMlZsWkNCa2FYSmxZM1JzZVNCMGJ5QjBhR1VnYjI1RVpXeHBkbVZ5SUdoaGJtUnNaWElzSUhWdWJHVnpjeUIwYUdWeVpTQjNZWE1nWVc0Z1pYSnliM0l1WEc0Z0lDQXFMMXh1SUNCa1pXeHBkbVZ5S0NrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdhV1lnS0NGZmRHaHBjeTVmYVc1VGRHOXdLU0I3WEc0Z0lDQWdJQ0JmZEdocGN5NWZhVzVUZEc5d0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUY5MGFHbHpMbDl2YmtSbGJHbDJaWElvWDNSb2FYTXVYMjF6WnlrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFMWhjbXNnZEdobElHTnZiblJsZUhRZ2QybDBhQ0JoYmlCbGNuSnZjaUJoYm1RZ2NISnZZMlZsWkNCMGJ5QjBhR1VnYjI1R1lXbHNJR2hoYm1Sc1pYSXVYRzRnSUNBcUlFQndZWEpoYlNBZ2UxdDBlWEJsWFgwZ1pYSnliM0lnVzJSbGMyTnlhWEIwYVc5dVhWeHVJQ0FnS2k5Y2JpQWdabUZwYkNobGNuSnZjaWtnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQnBaaUFvSVY5MGFHbHpMbDlwYmxOMGIzQXBJSHRjYmlBZ0lDQWdJRjkwYUdsekxsOXBibE4wYjNBZ1BTQjBjblZsTzF4dUlDQWdJQ0FnYVdZZ0tGOTBhR2x6TGw5d2FYQmxiR2x1WlM1dmJrWmhhV3dwSUh0Y2JpQWdJQ0FnSUNBZ1gzUm9hWE11WDNCcGNHVnNhVzVsTG05dVJtRnBiQ2hsY25KdmNpazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNWNibU5zWVhOeklFbDBaWEpoZEc5eUlIdGNiaUFnTHlvZ2NISnBkbUYwWlZ4dUlDQWdJRjlwYm1SbGVEb2diblZ0WW1WeVhHNGdJQ0FnWDJGeWNtRjVPaUJiWFZ4dUlDQXFMMXh1WEc0Z0lHTnZibk4wY25WamRHOXlLR0Z5Y21GNUtTQjdYRzRnSUNBZ2RHaHBjeTVmYVc1a1pYZ2dQU0F0TVR0Y2JpQWdJQ0IwYUdsekxsOWhjbkpoZVNBOUlHRnljbUY1TzF4dUlDQjlYRzVjYmlBZ1oyVjBJR2hoYzA1bGVIUW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDJsdVpHVjRJRHdnZEdocGN5NWZZWEp5WVhrdWJHVnVaM1JvSUMwZ01UdGNiaUFnZlZ4dVhHNGdJR2RsZENCdVpYaDBLQ2tnZTF4dUlDQWdJSFJvYVhNdVgybHVaR1Y0S3lzN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyRnljbUY1VzNSb2FYTXVYMmx1WkdWNFhUdGNiaUFnZlZ4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlFhWEJsYkdsdVpUdGNiaUlzSWk4cUtseHVLaUJEYkdGemN5QjNhWFJvSUhSb1pTQmpjbmx3ZEc5bmNtRndhR2xqSUdaMWJtTjBhVzl1Y3lCbWIzSWdkR2hsSUdGMWRHaGxiblJwWTJGMGFXOXVJSEJ5YjNSdlkyOXNYRzRxWEc0cUwxeHVZMnhoYzNNZ1EzSjVjSFJ2SUh0Y2JseHVJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0tpQmxibU52WkdVZ1lTQmllWFJsUVhKeVlYa2dkbUZzZFdVZ2FXNGdZbUZ6WlNBMk5DQmxibU52WkdWY2JpQWdLaUJBY0dGeVlXMGdJQ0I3WW5sMFpVRnljbUY1ZlNBZ0lDQjJZV3gxWlNBZ0lDQmllWFJsUVhKeVlYa2dkbUZzZFdWY2JpQWdLaUJBY21WMGRYSnVJQ0I3YzNSeWFXNW5mU0FnSUdWdVkyOWtaV1FnZG1Gc2RXVmNiaUFnS2k5Y2JpQWdaVzVqYjJSbEtIWmhiSFZsS1NCN1hHNGdJQ0FnY21WMGRYSnVJR0owYjJFb2RtRnNkV1VwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNvZ1pHVmpiMlJsSUdFZ1ltRnpaVFkwSUhaaGJIVmxJR2x1SUdFZ2JtVjNJRlZwYm5RNFFYSnlZWGxjYmlBZ0tpQkFjR0Z5WVcwZ0lDQjdjM1J5YVc1bmZTQWdJQ0IyWVd4MVpTQWdJQ0IyWVd4MVpTQmxibU52WkdWa0lHbHVJR0poYzJVZ05qUmNiaUFnS2lCQWNtVjBkWEp1SUNCN1lubDBaVUZ5Y21GNWZTQmtaV052WkdWa1ZtRnNkV1ZjYmlBZ0tpOWNiaUFnWkdWamIyUmxLSFpoYkhWbEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlZhVzUwT0VGeWNtRjVLRXBUVDA0dWNHRnljMlVvSjFzbklDc2dZWFJ2WWloMllXeDFaU2tnS3lBblhTY3BLVHRjYmlBZ2ZWeHVYRzRnSUdWdVkzSjVjSFJTVTBFb2NIVmlTMlY1TENCa1lYUmhLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNiaUFnSUNBZ0lGOTBhR2x6TGw5cGJYQnZjblJTVTBGbGJtTnllWEIwUzJWNUtHNWxkeUJWYVc1ME9FRnljbUY1S0hCMVlrdGxlU2twTG5Sb1pXNG9ablZ1WTNScGIyNG9jSFZpYkdsalMyVjVLU0I3WEc1Y2JpQWdJQ0FnSUNBZ1kzSjVjSFJ2TG5OMVluUnNaUzVsYm1OeWVYQjBLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVlXMWxPaUFuVWxOQkxVOUJSVkFuWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NIVmliR2xqUzJWNUxDQXZMMlp5YjIwZ1oyVnVaWEpoZEdWTFpYa2diM0lnYVcxd2IzSjBTMlY1SUdGaWIzWmxYRzRnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhJQzh2UVhKeVlYbENkV1ptWlhJZ2IyWWdaR0YwWVNCNWIzVWdkMkZ1ZENCMGJ5QmxibU55ZVhCMFhHNGdJQ0FnSUNBZ0lDbGNiaUFnSUNBZ0lDQWdMblJvWlc0b1puVnVZM1JwYjI0b1pXNWpjbmx3ZEdWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk5eVpYUjFjbTV6SUdGdUlFRnljbUY1UW5WbVptVnlJR052Ym5SaGFXNXBibWNnZEdobElHVnVZM0o1Y0hSbFpDQmtZWFJoWEc0Z0lDQWdJQ0FnSUNBZ0x5OWpiMjV6YjJ4bExteHZaeWduWTNKNWNIUnZMV1Z1WTNKNWNIUlNVMEVuTENCdVpYY2dWV2x1ZERoQmNuSmhlU2hsYm1OeWVYQjBaV1FwS1R0Y2JpQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtHNWxkeUJWYVc1ME9FRnljbUY1S0dWdVkzSjVjSFJsWkNrcE8xeHVYRzRnSUNBZ0lDQWdJSDBwTG1OaGRHTm9LR1oxYm1OMGFXOXVLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkamNubHdkRzh0Wlc1amNubHdkRkpUUVNjc0lHVnljaWs3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0dWeWNpazdYRzRnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lIMHBPMXh1WEc0Z0lIMWNibHh1SUNCa1pXTnllWEIwVWxOQktIQnlhWFpMWlhrc0lHUmhkR0VwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dlMXh1SUNBZ0lDQWdYM1JvYVhNdVgybHRjRzl5ZEZKVFFXUmxZM0o1Y0hSTFpYa29jSEpwZGt0bGVTa3VkR2hsYmlobWRXNWpkR2x2Ymlod2NtbDJZWFJsUzJWNUtTQjdYRzVjYmlBZ0lDQWdJQ0FnWTNKNWNIUnZMbk4xWW5Sc1pTNWtaV055ZVhCMEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbE9pQW5VbE5CTFU5QlJWQW5YRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0hKcGRtRjBaVXRsZVN3Z0x5OW1jbTl0SUdkbGJtVnlZWFJsUzJWNUlHOXlJR2x0Y0c5eWRFdGxlU0JoWW05MlpWeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlTQXZMMEZ5Y21GNVFuVm1abVZ5SUc5bUlIUm9aU0JrWVhSaFhHNGdJQ0FnSUNBZ0lDbGNiaUFnSUNBZ0lDQWdMblJvWlc0b1puVnVZM1JwYjI0b1pHVmpjbmx3ZEdWa0tTQjdYRzVjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdaR1ZqY25sd2RHVmtSR0YwWVNBOUlHNWxkeUJWYVc1ME9FRnljbUY1S0dSbFkzSjVjSFJsWkNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0F2TDJOdmJuTnZiR1V1Ykc5bktDZGpjbmx3ZEc4dFpHVmpjbmx3ZEZKVFFTY3NJR1JsWTNKNWNIUmxaRVJoZEdFcE8xeHVJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9aR1ZqY25sd2RHVmtSR0YwWVNrN1hHNWNiaUFnSUNBZ0lDQWdmU2t1WTJGMFkyZ29ablZ1WTNScGIyNG9aWEp5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjJOeWVYQjBieTFrWldOeWVYQjBVbE5CSnl3Z1pYSnlLVHRjYmlBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvWlhKeUtUdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdjMmxuYmxKVFFTaHdjbWwyUzJWNUxDQmtZWFJoS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjYmlBZ0lDQWdJRjkwYUdsekxsOXBiWEJ2Y25SU1UwRnphV2R1UzJWNUtIQnlhWFpMWlhrcExuUm9aVzRvWm5WdVkzUnBiMjRvY0hKcGRtRjBaVXRsZVNrZ2UxeHVYRzRnSUNBZ0lDQWdJR055ZVhCMGJ5NXpkV0owYkdVdWMybG5iaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JtRnRaVG9nSjFKVFFWTlRRUzFRUzBOVE1TMTJNVjgxSjF4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnlhWFpoZEdWTFpYa3NJQzh2Wm5KdmJTQm5aVzVsY21GMFpVdGxlU0J2Y2lCcGJYQnZjblJMWlhrZ1lXSnZkbVZjYmlBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TGw5MWRHWTRSVzVqYjJSbEtHUmhkR0VwSUM4dlFYSnlZWGxDZFdabVpYSWdiMllnWkdGMFlTQjViM1VnZDJGdWRDQjBieUJ6YVdkdVhHNGdJQ0FnSUNBZ0lDbGNiaUFnSUNBZ0lDQWdMblJvWlc0b1puVnVZM1JwYjI0b2MybG5ibUYwZFhKbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk5eVpYUjFjbTV6SUdGdUlFRnljbUY1UW5WbVptVnlJR052Ym5SaGFXNXBibWNnZEdobElITnBaMjVoZEhWeVpWeHVJQ0FnSUNBZ0lDQWdJQzh2WTI5dWMyOXNaUzVzYjJjb0oyTnllWEIwYnkxemFXZHVVbE5CSnl3Z2JtVjNJRlZwYm5RNFFYSnlZWGtvYzJsbmJtRjBkWEpsS1NrN1hHNGdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHVaWGNnVldsdWREaEJjbkpoZVNoemFXZHVZWFIxY21VcEtUdGNibHh1SUNBZ0lDQWdJQ0I5S1M1allYUmphQ2htZFc1amRHbHZiaWhsY25JcElIdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblkzSjVjSFJ2TFhOcFoyNVNVMEVuTENCbGNuSXBPMXh1SUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2hsY25JcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnZlNrN1hHNWNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJSFpsY21sbWVWSlRRU2h3ZFdKTFpYa3NJR1JoZEdFc0lITnBaMjVoZEhWeVpTa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1NCN1hHNGdJQ0FnSUNCZmRHaHBjeTVmYVcxd2IzSjBVbE5CZG1WeWFXWjVTMlY1S0hCMVlrdGxlU2t1ZEdobGJpaG1kVzVqZEdsdmJpaHdkV0pzYVdOTFpYa3BJSHRjYmx4dUlDQWdJQ0FnSUNCamNubHdkRzh1YzNWaWRHeGxMblpsY21sbWVTaGNiaUFnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1GdFpUb2dKMUpUUVZOVFFTMVFTME5UTVMxMk1WODFKMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhCMVlteHBZMHRsZVN3Z0x5OW1jbTl0SUdkbGJtVnlZWFJsUzJWNUlHOXlJR2x0Y0c5eWRFdGxlU0JoWW05MlpWeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJsbmJtRjBkWEpsTENBdkwwRnljbUY1UW5WbVptVnlJRzltSUhSb1pTQnphV2R1WVhSMWNtVmNiaUFnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbDkxZEdZNFJXNWpiMlJsS0dSaGRHRXBJQzh2UVhKeVlYbENkV1ptWlhJZ2IyWWdkR2hsSUdSaGRHRmNiaUFnSUNBZ0lDQWdLVnh1SUNBZ0lDQWdJQ0F1ZEdobGJpaG1kVzVqZEdsdmJpaHBjM1poYkdsa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk5eVpYUjFjbTV6SUdFZ1ltOXZiR1ZoYmlCdmJpQjNhR1YwYUdWeUlIUm9aU0J6YVdkdVlYUjFjbVVnYVhNZ2RISjFaU0J2Y2lCdWIzUmNiaUFnSUNBZ0lDQWdJQ0F2TDJOdmJuTnZiR1V1Ykc5bktDZGpjbmx3ZEc4dGRtVnlhV1o1VWxOQkp5d2dhWE4yWVd4cFpDazdYRzRnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2hwYzNaaGJHbGtLVHRjYmx4dUlDQWdJQ0FnSUNCOUtTNWpZWFJqYUNobWRXNWpkR2x2YmlobGNuSXBJSHRjYmlBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25ZM0o1Y0hSdkxYWmxjbWxtZVZKVFFTY3NJR1Z5Y2lrN1hHNGdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtHVnljaWs3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ1pXNWpjbmx3ZEVGRlV5aHJaWGtzSUdSaGRHRXNJR2wyS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjYmlBZ0lDQWdJRjkwYUdsekxsOXBiWEJ2Y25SQlJWTnJaWGtvYTJWNUtTNTBhR1Z1S0daMWJtTjBhVzl1S0dGbGMwdGxlU2tnZTF4dVhHNGdJQ0FnSUNBZ0lHTnllWEIwYnk1emRXSjBiR1V1Wlc1amNubHdkQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JtRnRaVG9nSjBGRlV5MURRa01uTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0F2TDBSdmJpZDBJSEpsTFhWelpTQnBibWwwYVdGc2FYcGhkR2x2YmlCMlpXTjBiM0p6SVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0F2TDBGc2QyRjVjeUJuWlc1bGNtRjBaU0JoSUc1bGR5QnBkaUJsZG1WeWVTQjBhVzFsSUhsdmRYSWdaVzVqY25sd2RDRmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FYWTZJR2wyWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1lXVnpTMlY1TENBdkwyWnliMjBnWjJWdVpYSmhkR1ZMWlhrZ2IzSWdhVzF3YjNKMFMyVjVJR0ZpYjNabFhHNGdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NWZkWFJtT0VWdVkyOWtaU2hrWVhSaEtTQXZMMEZ5Y21GNVFuVm1abVZ5SUc5bUlHUmhkR0VnZVc5MUlIZGhiblFnZEc4Z1pXNWpjbmx3ZEZ4dUlDQWdJQ0FnSUNBcFhHNGdJQ0FnSUNBZ0lDNTBhR1Z1S0daMWJtTjBhVzl1S0dWdVkzSjVjSFJsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQzh2Y21WMGRYSnVjeUJoYmlCQmNuSmhlVUoxWm1abGNpQmpiMjUwWVdsdWFXNW5JSFJvWlNCbGJtTnllWEIwWldRZ1pHRjBZVnh1SUNBZ0lDQWdJQ0FnSUM4dlkyOXVjMjlzWlM1c2IyY29KMk55ZVhCMGJ5MWxibU55ZVhCMFFVVlRKeXdnYm1WM0lGVnBiblE0UVhKeVlYa29aVzVqY25sd2RHVmtLU2s3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNodVpYY2dWV2x1ZERoQmNuSmhlU2hsYm1OeWVYQjBaV1FwS1R0Y2JseHVJQ0FnSUNBZ0lDQjlLUzVqWVhSamFDaG1kVzVqZEdsdmJpaGxjbklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduWTNKNWNIUnZMV1Z1WTNKNWNIUkJSVk1uTENCbGNuSXBPMXh1SUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2hsY25JcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnZlNrN1hHNWNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJR1JsWTNKNWNIUkJSVk1vYTJWNUxDQmtZWFJoTENCcGRpa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1NCN1hHNGdJQ0FnSUNCZmRHaHBjeTVmYVcxd2IzSjBRVVZUYTJWNUtHdGxlU2t1ZEdobGJpaG1kVzVqZEdsdmJpaGhaWE5MWlhrcElIdGNibHh1SUNBZ0lDQWdJQ0JqY25sd2RHOHVjM1ZpZEd4bExtUmxZM0o1Y0hRb1hHNGdJQ0FnSUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRzVoYldVNklDZEJSVk10UTBKREp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FYWTZJR2wyWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1lXVnpTMlY1TENBdkwyWnliMjBnWjJWdVpYSmhkR1ZMWlhrZ2IzSWdhVzF3YjNKMFMyVjVJR0ZpYjNabFhHNGdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaElDOHZRWEp5WVhsQ2RXWm1aWElnYjJZZ2RHaGxJR1JoZEdGY2JpQWdJQ0FnSUNBZ0tWeHVJQ0FnSUNBZ0lDQXVkR2hsYmlobWRXNWpkR2x2Ymloa1pXTnllWEIwWldRcElIdGNibHh1SUNBZ0lDQWdJQ0FnSUd4bGRDQmtaV052WkdWa1JHRjBZU0E5SUY5MGFHbHpMbDkxZEdZNFJHVmpiMlJsS0c1bGR5QlZhVzUwT0VGeWNtRjVLR1JsWTNKNWNIUmxaQ2twTzF4dUlDQWdJQ0FnSUNBZ0lDOHZZMjl1YzI5c1pTNXNiMmNvSjJOeWVYQjBieTFrWldOeWVYQjBRVVZUSnl3Z1pHVmpiMlJsWkVSaGRHRXBPMXh1SUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvWkdWamIyUmxaRVJoZEdFcE8xeHVYRzRnSUNBZ0lDQWdJSDBwTG1OaGRHTm9LR1oxYm1OMGFXOXVLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkamNubHdkRzh0WkdWamNubHdkRUZGVXljc0lHVnljaWs3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0dWeWNpazdYRzRnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nWTNKbFlYUmxjeUJoSUdoaGMyZ2dkWE5wYm1jZ2RHaGxJRWhOUVVNZ1lXeG5iM0pwZEdodFhHNGdJQ29nUUhCaGNtRnRJQ0I3WW5sMFpVRnljbUY1ZlNBZ0lDQnJaWGtnSUNBZ0lDQWdhMlY1SUhSdklHSmxJSFZ6WldRZ2FXNGdkR2hsSUdodFlXTmNiaUFnS2lCQWNHRnlZVzBnSUh0emRISnBibWQ5SUNBZ0lDQWdaR0YwWVNBZ0lDQWdJQ0JwYm1admNtMWhkR2x2YmlCMGJ5QmlaU0JvWVhOb1pXUmNiaUFnS2lCQWNtVjBkWEp1SUNCN1lubDBaVUZ5Y21GNWZTQWdJSE5wWjI1aGRIVnlaU0FnY21WemRXeDBhVzVuSUdoaGMyaGNiaUFnS2k5Y2JpQWdhR0Z6YUVoTlFVTW9hMlY1TENCa1lYUmhLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExISmxhbVZqZENrZ2UxeHVYRzRnSUNBZ0lDQmZkR2hwY3k1ZmFXMXdiM0owU0UxQlEydGxlU2hyWlhrcExuUm9aVzRvWm5WdVkzUnBiMjRvYUcxaFkwdGxlU2tnZTF4dVhHNGdJQ0FnSUNBZ0lHTnllWEIwYnk1emRXSjBiR1V1YzJsbmJpaGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUc1aGJXVTZJQ2RJVFVGREoxeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0JvYldGalMyVjVMQ0F2TDJaeWIyMGdaMlZ1WlhKaGRHVkxaWGtnYjNJZ2FXMXdiM0owUzJWNUlHRmliM1psWEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbDkxZEdZNFJXNWpiMlJsS0dSaGRHRXBJQzh2UVhKeVlYbENkV1ptWlhJZ2IyWWdaR0YwWVNCNWIzVWdkMkZ1ZENCMGJ5QnphV2R1WEc0Z0lDQWdJQ0FnSUNsY2JpQWdJQ0FnSUNBZ0xuUm9aVzRvWm5WdVkzUnBiMjRvYzJsbmJtRjBkWEpsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeTlqYjI1emIyeGxMbXh2WnlnblkzSjVjSFJ2TFdoaGMyaElUVUZESnl3Z2MybG5ibUYwZFhKbEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dmNtVjBkWEp1Y3lCaGJpQkJjbkpoZVVKMVptWmxjaUJqYjI1MFlXbHVhVzVuSUhSb1pTQnphV2R1WVhSMWNtVmNiaUFnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLRzVsZHlCVmFXNTBPRUZ5Y21GNUtITnBaMjVoZEhWeVpTa3BPMXh1WEc0Z0lDQWdJQ0FnSUgwcExtTmhkR05vS0daMWJtTjBhVzl1S0dWeWNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGpjbmx3ZEc4dGFHRnphRWhOUVVNbkxDQmxjbklwTzF4dUlDQWdJQ0FnSUNBZ0lISmxhbVZqZENobGNuSXBPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2dkbVZ5YVdacFpYTWdZVzRnYUdGemFDQjFjMmx1WnlCMGFHVWdTRTFCUXlCaGJHZHZjbWwwYUcxY2JpQWdLaUJBY0dGeVlXMGdJSHRpZVhSbFFYSnlZWGw5SUNBZ0lHdGxlU0FnSUNBZ0lDQnJaWGtnZEc4Z1ltVWdkWE5sWkNCcGJpQjBhR1VnYUcxaFkxeHVJQ0FxSUVCd1lYSmhiU0FnZTNOMGNtbHVaMzBnSUNBZ0lDQmtZWFJoSUNBZ0lDQWdJR2x1Wm05eWJXRjBhVzl1SUhSdklHSmxJR2hoYzJobFpDQjBieUJqYjIxd1lYSmxYRzRnSUNvZ1FIQmhjbUZ0SUNCN1lubDBaVUZ5Y21GNWZTQWdjMmxuYm1GMGRYSmxJQ0FnYUdGemFDQjBieUJqYjIxd1lYSmxJSGRwZEdnZ2RHaGxJSEpsWTJWcGRtVmtJR1JoZEdGY2JpQWdLaUJBY21WMGRYSnVJQ0I3WW05dmJHVmhibjBnSUNCcGMzWmhiR2xrSUNBZ0lDQmliMjlzWldGdUlITmhlV2x1WnlCcFppQjBhR1VnWkdGMFlTQmpiM0p5WlhOd2IyNWtjeUIwYnlCMGFHVWdhR0Z6YUNCeVpXTmxhWFpsWkZ4dUlDQXFMMXh1SUNCMlpYSnBabmxJVFVGREtHdGxlU3dnWkdGMFlTd2djMmxuYm1GMGRYSmxLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExISmxhbVZqZENrZ2UxeHVYRzRnSUNBZ0lDQmZkR2hwY3k1ZmFXMXdiM0owU0UxQlEydGxlU2hyWlhrcExuUm9aVzRvWm5WdVkzUnBiMjRvYUcxaFkwdGxlU2tnZTF4dVhHNGdJQ0FnSUNBZ0lHTnllWEIwYnk1emRXSjBiR1V1ZG1WeWFXWjVLRnh1SUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzVoYldVNklDZElUVUZESjF4dUlDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnYUcxaFkwdGxlU3dnTHk5bWNtOXRJR2RsYm1WeVlYUmxTMlY1SUc5eUlHbHRjRzl5ZEV0bGVTQmhZbTkyWlZ4dUlDQWdJQ0FnSUNBZ0lITnBaMjVoZEhWeVpTd2dMeTlCY25KaGVVSjFabVpsY2lCdlppQjBhR1VnYzJsbmJtRjBkWEpsWEc0Z0lDQWdJQ0FnSUNBZ1gzUm9hWE11WDNWMFpqaEZibU52WkdVb1pHRjBZU2tnTHk5QmNuSmhlVUoxWm1abGNpQnZaaUIwYUdVZ1pHRjBZVnh1SUNBZ0lDQWdJQ0FwWEc0Z0lDQWdJQ0FnSUM1MGFHVnVLR1oxYm1OMGFXOXVLR2x6ZG1Gc2FXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBdkwzSmxkSFZ5Ym5NZ1lTQmliMjlzWldGdUlHOXVJSGRvWlhSb1pYSWdkR2hsSUhOcFoyNWhkSFZ5WlNCcGN5QjBjblZsSUc5eUlHNXZkRnh1SUNBZ0lDQWdJQ0FnSUM4dlkyOXVjMjlzWlM1c2IyY29KMk55ZVhCMGJ5MTJaWEpwWm5sSVRVRkRKeXdnYVhOMllXeHBaQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0tHbHpkbUZzYVdRcElEOGdjbVZ6YjJ4MlpTaHBjM1poYkdsa0tTQTZJSEpsYW1WamRDaHBjM1poYkdsa0tUdGNibHh1SUNBZ0lDQWdJQ0I5S1M1allYUmphQ2htZFc1amRHbHZiaWhsY25JcElIdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDZGpjbmx3ZEc4dGRtVnlhV1o1U0UxQlF5Y3NJR1Z5Y2lrN1hHNGdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtHVnljaWs3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUdkbGJtVnlZWFJsY3lCaElGSlRRU0J3ZFdKc2FXTXZjSEpwZG1GMFpTQnJaWGtnY0dGcGNpQjNhWFJvSUdFZ2JXOWtkV3gxY3lCc1pXNW5kR2dnYjJZZ01qQTBPQ0JpYVhSelhHNGdJQ29nUUhKbGRIVnliaUFnZTBwVFQwNTlJQ0FnYTJWNVVHRnBjaUFnSUNCcWMyOXVJR052Ym5SaGFXNXBibWNnZEdobElIQjFZbXhwWXlCaGJtUWdjSEpwZG1GMFpTQnJaWGx6WEc0Z0lDb3ZYRzRnSUdkbGJtVnlZWFJsVWxOQlMyVjVVR0ZwY2lncElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJR3hsZENCclpYbFFZV2x5SUQwZ2UzMDdYRzVjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYRzRnSUNBZ0lDQmpjbmx3ZEc4dWMzVmlkR3hsTG1kbGJtVnlZWFJsUzJWNUtGeHVJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnVZVzFsT2lBblVsTkJMVkJUVXljc1hHNGdJQ0FnSUNBZ0lHMXZaSFZzZFhOTVpXNW5kR2c2SURJd05EZ3NJQzh2WTJGdUlHSmxJREV3TWpRc0lESXdORGdzSUc5eUlEUXdPVFpjYmlBZ0lDQWdJQ0FnY0hWaWJHbGpSWGh3YjI1bGJuUTZJRzVsZHlCVmFXNTBPRUZ5Y21GNUtGc3dlREF4TENBd2VEQXdMQ0F3ZURBeFhTa3NYRzRnSUNBZ0lDQWdJR2hoYzJnNklIdHVZVzFsT2lBblUwaEJMVEkxTmlkOUlDOHZZMkZ1SUdKbElDZFRTRUV0TVNjc0lDZFRTRUV0TWpVMkp5d2dKMU5JUVMwek9EUW5MQ0J2Y2lBblUwaEJMVFV4TWlkY2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNCMGNuVmxMQ0F2TDNkb1pYUm9aWElnZEdobElHdGxlU0JwY3lCbGVIUnlZV04wWVdKc1pTQW9hUzVsTGlCallXNGdZbVVnZFhObFpDQnBiaUJsZUhCdmNuUkxaWGtwWEc0Z0lDQWdJQ0JiSjNOcFoyNG5MQ0FuZG1WeWFXWjVKMTBnTHk5allXNGdZbVVnWVc1NUlHTnZiV0pwYm1GMGFXOXVJRzltSUNkemFXZHVKeUJoYm1RZ0ozWmxjbWxtZVNkY2JseHVJQ0FnSUNBZ0tTNTBhR1Z1S0daMWJtTjBhVzl1S0d0bGVTa2dlMXh1SUNBZ0lDQWdJQ0F2TDNKbGRIVnlibk1nWVNCclpYbHdZV2x5SUc5aWFtVmpkRnh1SUNBZ0lDQWdJQ0F2TDJOdmJuTnZiR1V1Ykc5bktHdGxlU2s3WEc1Y2JpQWdJQ0FnSUNBZ1kzSjVjSFJ2TG5OMVluUnNaUzVsZUhCdmNuUkxaWGtvWEc0Z0lDQWdJQ0FnSUNBZ0ozTndhMmtuTENBdkwyTmhiaUJpWlNBbmFuZHJKeUFvY0hWaWJHbGpJRzl5SUhCeWFYWmhkR1VwTENBbmMzQnJhU2NnS0hCMVlteHBZeUJ2Ym14NUtTd2diM0lnSjNCclkzTTRKeUFvY0hKcGRtRjBaU0J2Ym14NUtWeHVJQ0FnSUNBZ0lDQWdJR3RsZVM1d2RXSnNhV05MWlhrZ0x5OWpZVzRnWW1VZ1lTQndkV0pzYVdOTFpYa2diM0lnY0hKcGRtRjBaVXRsZVN3Z1lYTWdiRzl1WnlCaGN5QmxlSFJ5WVdOMFlXSnNaU0IzWVhNZ2RISjFaVnh1SUNBZ0lDQWdJQ0FwTG5Sb1pXNG9ablZ1WTNScGIyNG9jSFZpYkdsalMyVjVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0x5OXlaWFIxY201eklIUm9aU0JsZUhCdmNuUmxaQ0JyWlhrZ1pHRjBZVnh1SUNBZ0lDQWdJQ0FnSUd0bGVWQmhhWEl1Y0hWaWJHbGpJQ0E5SUc1bGR5QlZhVzUwT0VGeWNtRjVLSEIxWW14cFkwdGxlU2s3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOeWVYQjBieTV6ZFdKMGJHVXVaWGh3YjNKMFMyVjVLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0ozQnJZM000Snl3Z0x5OWpZVzRnWW1VZ0oycDNheWNnS0hCMVlteHBZeUJ2Y2lCd2NtbDJZWFJsS1N3Z0ozTndhMmtuSUNod2RXSnNhV01nYjI1c2VTa3NJRzl5SUNkd2EyTnpPQ2NnS0hCeWFYWmhkR1VnYjI1c2VTbGNiaUFnSUNBZ0lDQWdJQ0FnSUd0bGVTNXdjbWwyWVhSbFMyVjVJQzh2WTJGdUlHSmxJR0VnY0hWaWJHbGpTMlY1SUc5eUlIQnlhWFpoZEdWTFpYa3NJR0Z6SUd4dmJtY2dZWE1nWlhoMGNtRmpkR0ZpYkdVZ2QyRnpJSFJ5ZFdWY2JpQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0I5S1M1MGFHVnVLR1oxYm1OMGFXOXVLSEJ5YVhaaGRHVkxaWGtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnJaWGxRWVdseUxuQnlhWFpoZEdVZ0lEMGdibVYzSUZWcGJuUTRRWEp5WVhrb2NISnBkbUYwWlV0bGVTazdYRzRnSUNBZ0lDQWdJQ0FnTHk5amIyNXpiMnhsTG14dlp5Z25ZM0o1Y0hSdkxXZGxibVZ5WVhSbFVsTkJTMlY1VUdGcGNpY3NJR3RsZVZCaGFYSXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNoclpYbFFZV2x5S1R0Y2JseHVJQ0FnSUNBZ0lDQjlLUzVqWVhSamFDaG1kVzVqZEdsdmJpaGxjbklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0dWeWNpazdYRzRnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLR1Z5Y2lrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0I5S1M1allYUmphQ2htZFc1amRHbHZiaWhsY25JcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lobGNuSXBPMXh1SUNBZ0lDQWdJQ0J5WldwbFkzUW9aWEp5S1R0Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2dSMlZ1WlhKaGRHVnpJR0VnTVRJNElHSnBkQ0J5WVc1a2IyMGdkbUZzZFdVdVhHNGdJQ29nUUhKbGRIVnliaUI3WW5sMFpVRnljbUY1ZlNBZ1lYSnlZWGtnSUNBZ2NtRnVaRzl0SUhaaGJIVmxYRzRnSUNvdlhHNGdJR2RsYm1WeVlYUmxTVllvS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJR3hsZENCaGNuSmhlU0E5SUc1bGR5QWdWV2x1ZERoQmNuSmhlU2d4TmlrN1hHNGdJQ0FnWTNKNWNIUnZMbWRsZEZKaGJtUnZiVlpoYkhWbGN5aGhjbkpoZVNrN1hHNWNiaUFnSUNCeVpYUjFjbTRnWVhKeVlYazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdLaUJIWlc1bGNtRjBaWE1nWVNBeU5UWWdZbWwwSUhKaGJtUnZiU0IyWVd4MVpTNGdNeklnWW1sMGN5QmhjbVVnWlhoMGNtRjBaV1FnWm5KdmJTQjBhR1VnYldGamFHbHVaU0IwYVcxbExGeHVJQ0FxSUhSb1pTQnlaVzFoYVc1cGJtY2dZWEpsSUdkbGJtVnlZWFJsWkNCeVlXNWtiMjFzZVZ4dUlDQXFJRUJ5WlhSMWNtNGdlMko1ZEdWQmNuSmhlWDBnSUdGeWNtRjVJQ0FnSUhKaGJtUnZiU0IyWVd4MVpWeHVJQ0FxTDF4dUlDQm5aVzVsY21GMFpWSmhibVJ2YlNncElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnYkdWMElHRnljbUY1SUQwZ2JtVjNJQ0JWYVc1ME9FRnljbUY1S0RNeUtUdGNiaUFnSUNCamNubHdkRzh1WjJWMFVtRnVaRzl0Vm1Gc2RXVnpLR0Z5Y21GNUtUdGNibHh1SUNBZ0lHeGxkQ0JrWVhSbElEMGdSR0YwWlM1dWIzY29LVHRjYmlBZ0lDQnNaWFFnWkdGMFpVVnVZMjlrWldRZ1BTQmZkR2hwY3k1ZmRYUm1PRVZ1WTI5a1pTaGtZWFJsS1R0Y2JseHVJQ0FnSUM4dlpYaDBjbUZqZENCMGFHVWdiR1ZoYzNRZ2MybG5ibWxtYVdOaGJuUWdOQ0JpZVhSbGN5QnBiaUIwYUdVZ1pHRjBaVnh1SUNBZ0lHeGxkQ0JtYVc1aGJFUmhkR1VnUFNCa1lYUmxSVzVqYjJSbFpDNXpiR2xqWlNoa1lYUmxSVzVqYjJSbFpDNXNaVzVuZEdnZ0xTQTBMQ0JrWVhSbFJXNWpiMlJsWkM1c1pXNW5kR2dwTzF4dVhHNGdJQ0FnTHk4Z1lXUmtJR2x1SUhSb1pTQm1hWEp6ZENBMElHSjVkR1Z6SUc5bUlIUm9aU0JoY25KaGVTQjBhR1VnWW5sMFpYTWdaWGgwY21GamRHVmtJSEJ5WlhacGIzVnpiSGs3WEc0Z0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0EwT3lCcEt5c3BJSHNnWVhKeVlYbGJhVjBnUFNCbWFXNWhiRVJoZEdWYmFWMDdJSDFjYmlBZ0lDQnlaWFIxY200Z1lYSnlZWGs3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCblpXNWxjbUYwWlhNZ1lTQndjbVZ0WVhOMFpYSWdjMlZqY21WMElDaFFUVk1wSUc5bUlEUTRJR0o1ZEdWeklDZ3pPRFFnWW1sMGN5a2djbUZ1Wkc5dGJIbGNiaUFnS2lCQWNtVjBkWEp1SUh0aWVYUmxRWEp5WVhsOUlDQmhjbkpoZVNBZ0lDQndjbVZ0WVhOMFpYSWdjMlZqY21WMElHdGxlVnh1SUNBcUwxeHVJQ0JuWlc1bGNtRjBaVkJOVXlncElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnYkdWMElHRnljbUY1SUQwZ2JtVjNJRlZwYm5RNFFYSnlZWGtvTkRncE8xeHVJQ0FnSUdOeWVYQjBieTVuWlhSU1lXNWtiMjFXWVd4MVpYTW9ZWEp5WVhrcE8xeHVJQ0FnSUhKbGRIVnliaUJoY25KaGVUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJR2RsYm1WeVlYUmxjeUJoSUcxaGMzUmxja3RsZVNCelpXTnlaWFFnS0ZCTlV5a2diMllnTkRnZ1lubDBaWE1nS0RNNE5DQmlhWFJ6S1NCMWMybHVaeUIwYUdVZ2NISmxiV0Z6ZEdWeUlITmxZM0psZENCaGJtUmNiaUFnS2lCMGQyOGdjbUZ1Wkc5dGMxeHVJQ0FxSUVCeVpYUjFjbTRnZTJKNWRHVkJjbkpoZVgwZ0lHRnljbUY1SUNBZ0lHMWhjM1JsY2lCelpXTnlaWFFnYTJWNUlIZHBkR2dnTkRnZ1lubDBaWE5jYmlBZ0tpOWNiaUFnWjJWdVpYSmhkR1ZOWVhOMFpYSlRaV055WlhRb2FHMWhZMHRsZVN3Z1pHRjBZU2tnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYRzRnSUNBZ0lDQnNaWFFnYTJWNUlEMGdibVYzSUZWcGJuUTRRWEp5WVhrb05EZ3BPMXh1SUNBZ0lDQWdiR1YwSUhObFpXUWdQU0JrWVhSaE8xeHVYRzRnSUNBZ0lDQmZkR2hwY3k1ZlpHbG5aWE4wS0dodFlXTkxaWGtwTG5Sb1pXNG9LR1JwWjJWemRHVmtTMlY1S1NBOVBpQjdYRzVjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVhR0Z6YUVoTlFVTW9aR2xuWlhOMFpXUkxaWGtzSUhObFpXUXBMblJvWlc0b1puVnVZM1JwYjI0b2EyVjVjR0Z5ZERBcElIdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dlkyOXdlU0IwYUdVZ1ptbHljM1FnTXpJZ1lubDBaWE1nYVc1MGJ5QjBhR1VnYTJWNVhHNGdJQ0FnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0F6TWpzZ2FTc3JLU0I3SUd0bGVWdHBYU0E5SUd0bGVYQmhjblF3VzJsZE95QjlYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRjkwYUdsekxtaGhjMmhJVFVGREtHUnBaMlZ6ZEdWa1MyVjVMQ0J6WldWa0lDc2dhMlY1Y0dGeWREQXBPMXh1WEc0Z0lDQWdJQ0FnSUgwcExuUm9aVzRvWm5WdVkzUnBiMjRvYTJWNWNHRnlkREVwSUh0Y2JseHVJQ0FnSUNBZ0lDQWdJQzh2WTI5d2VTQjBhR1VnWm1seWMzUWdNVFlnWW5sMFpYTWdkRzhnZEdobElHdGxlU0J5WlcxaGFXNXBibWNnTVRZZ1lubDBaWE5jYmlBZ0lDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElERTJPeUJwS3lzcElIc2dhMlY1VzJrZ0t5QXpNbDBnUFNCclpYbHdZWEowTVZ0cFhUc2dmVnh1SUNBZ0lDQWdJQ0FnSUM4dlkyOXVjMjlzWlM1c2IyY29KMk55ZVhCMGJ5MW5aVzVsY21GMFpVMWhjM1JsY2xObFkzSmxkQ2NzSUd0bGVTazdYRzRnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2hyWlhrcE8xeHVYRzRnSUNBZ0lDQWdJSDBwTG1OaGRHTm9LR1oxYm1OMGFXOXVLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkamNubHdkRzh0WjJWdVpYSmhkR1ZOWVhOMFpYSlRaV055WlhRbkxDQmxjbklwTzF4dUlDQWdJQ0FnSUNBZ0lISmxhbVZqZENobGNuSXBPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdLaUJuWlc1bGNtRjBaWE1nWW05MGFDQjFjMlZ5Y3lCTlFVTWdZVzVrSUdWdVkzSjVjSFJwYjI0Z2EyVjVjeTRnWjJWdVpYSmhkR1VnWVhNZ2IzVjBjSFYwSUdGdUlHRnljbUY1WEc0Z0lDb2dkMmwwYUNBMElHSjVkR1ZCY25KaGVTQmxZV05vSUhkcGRHZ2dNeklnWW5sMFpYTmNiaUFnS2lCQWNHRnlZVzBnSUh0aWVYUmxRWEp5WVhsOUlDQWdJQ0FnSUNCelpXTnlaWFFnSUNBZ0lDQWdjMlZqY21WMElIUnZJR0psSUhWelpXUWdhVzRnZEdobElFaE5RVU1nWm5WdVkzUnBiMjVjYmlBZ0tpQkFjR0Z5WVcwZ0lIdFRkSEpwYm1kOUlDQWdJQ0FnSUNBZ0lDQmtZWFJoSUNBZ0lDQWdJQ0FnYVc1bWIzSnRZWFJwYjI0Z2RHOGdZbVVnZFhObFpDQmhjeUJ6WldWa1hHNGdJQ29nUUhKbGRIVnliaUI3UVhKeVlYazhZbmwwWlVGeWNtRjVQbjBnYTJWNUlDQWdJQ0FnSUNBZ0lHRnljbUY1SUhkcGRHZ2dkR2hsSUdsdVptOXliV0YwYVc5dUlIUnZJR2RsYm1WeVlYUmxJR3RsZVhOY2JpQWdLaTljYmlBZ1oyVnVaWEpoZEdWTFpYbHpLR2h0WVdOTFpYa3NJR1JoZEdFcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4dVhHNGdJQ0FnSUNCc1pYUWdhMlY1SUQwZ1cxMDdYRzRnSUNBZ0lDQnNaWFFnYzJWbFpDQTlJR1JoZEdFN1hHNWNiaUFnSUNBZ0lDOHZJR2wwWlhKaGRHVWdOQ0IwYVcxbGN5QjBieUJ2WW5SaGFXNGdZU0F4TURJMElHdGxlU0J6YVhwbFhHNGdJQ0FnSUNCZmRHaHBjeTVvWVhOb1NFMUJReWhvYldGalMyVjVMQ0J6WldWa0tTNTBhR1Z1S0daMWJtTjBhVzl1S0d0bGVYQmhjblF3S1NCN1hHNGdJQ0FnSUNBZ0lHdGxlUzV3ZFhOb0tHdGxlWEJoY25Rd0tUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGOTBhR2x6TG1oaGMyaElUVUZES0dodFlXTkxaWGtzSUhObFpXUWdLeUJyWlhsd1lYSjBNQ2s3WEc1Y2JpQWdJQ0FnSUgwcExuUm9aVzRvWm5WdVkzUnBiMjRvYTJWNWNHRnlkREVwSUh0Y2JpQWdJQ0FnSUNBZ2EyVjVMbkIxYzJnb2EyVjVjR0Z5ZERFcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1gzUm9hWE11YUdGemFFaE5RVU1vYUcxaFkwdGxlU3dnYzJWbFpDQXJJR3RsZVhCaGNuUXhLVHRjYmx4dUlDQWdJQ0FnZlNrdWRHaGxiaWhtZFc1amRHbHZiaWhyWlhsd1lYSjBNaWtnZTF4dUlDQWdJQ0FnSUNCclpYa3VjSFZ6YUNoclpYbHdZWEowTWlrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTVvWVhOb1NFMUJReWhvYldGalMyVjVMQ0J6WldWa0lDc2dhMlY1Y0dGeWRESXBPMXh1WEc0Z0lDQWdJQ0I5S1M1MGFHVnVLR1oxYm1OMGFXOXVLR3RsZVhCaGNuUXpLU0I3WEc0Z0lDQWdJQ0FnSUd0bGVTNXdkWE5vS0d0bGVYQmhjblF6S1R0Y2JseHVJQ0FnSUNBZ0lDQXZMMk52Ym5OdmJHVXViRzluS0NkamNubHdkRzh0WjJWdVpYSmhkR1ZMWlhsekp5d2dhMlY1S1R0Y2JpQWdJQ0FnSUNBZ2NtVnpiMngyWlNoclpYa3BPMXh1WEc0Z0lDQWdJQ0I5S1M1allYUmphQ2htZFc1amRHbHZiaWhsY25JcElIdGNiaUFnSUNBZ0lDQWdMeTlqYjI1emIyeGxMbXh2WnlnblkzSjVjSFJ2TFdkbGJtVnlZWFJsUzJWNWN5Y3NJR1Z5Y2lrN1hHNGdJQ0FnSUNBZ0lISmxhbVZqZENobGNuSXBPMXh1SUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUM4dlkyOXVjMjlzWlM1c2IyY29hRzFoWTB0bGVTd2daR0YwWVNrN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQmZhVzF3YjNKMFVsTkJjMmxuYmt0bGVTaHdjbWwyUzJWNUtTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmloeVpYTnZiSFpsTENCeVpXcGxZM1FwSUh0Y2JpQWdJQ0FnSUdOeWVYQjBieTV6ZFdKMGJHVXVhVzF3YjNKMFMyVjVLRnh1SUNBZ0lDQWdJQ0FnSUNkd2EyTnpPQ2NzSUM4dlkyRnVJR0psSUNkcWQyc25JQ2h3ZFdKc2FXTWdiM0lnY0hKcGRtRjBaU2tzSUNkemNHdHBKeUFvY0hWaWJHbGpJRzl1YkhrcExDQnZjaUFuY0d0amN6Z25JQ2h3Y21sMllYUmxJRzl1YkhrcFhHNGdJQ0FnSUNBZ0lDQWdjSEpwZGt0bGVTeGNiaUFnSUNBZ0lDQWdJQ0I3SUNBZ0x5OTBhR1Z6WlNCaGNtVWdkR2hsSUdGc1oyOXlhWFJvYlNCdmNIUnBiMjV6WEc0Z0lDQWdJQ0FnSUNBZ0lDQnVZVzFsT2lBblVsTkJVMU5CTFZCTFExTXhMWFl4WHpVbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYUdGemFEb2dlMjVoYldVNklDZFRTRUV0TWpVMkozMGdMeTlqWVc0Z1ltVWdKMU5JUVMweEp5d2dKMU5JUVMweU5UWW5MQ0FuVTBoQkxUTTROQ2NzSUc5eUlDZFRTRUV0TlRFeUoxeHVJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ2RISjFaU3dnTHk5M2FHVjBhR1Z5SUhSb1pTQnJaWGtnYVhNZ1pYaDBjbUZqZEdGaWJHVWdLR2t1WlM0Z1kyRnVJR0psSUhWelpXUWdhVzRnWlhod2IzSjBTMlY1S1Z4dUlDQWdJQ0FnSUNBZ0lGc25jMmxuYmlkZElDOHZKM1psY21sbWVTY2dabTl5SUhCMVlteHBZeUJyWlhrZ2FXMXdiM0owTENBbmMybG5iaWNnWm05eUlIQnlhWFpoZEdVZ2EyVjVJR2x0Y0c5eWRITmNiaUFnSUNBZ0lDbGNiaUFnSUNBZ0lDNTBhR1Z1S0daMWJtTjBhVzl1S0hCeWFYWmhkR1ZMWlhrcElIdGNiaUFnSUNBZ0lDQWdMeTl5WlhSMWNtNXpJR0VnY0hWaWJHbGpTMlY1SUNodmNpQndjbWwyWVhSbFMyVjVJR2xtSUhsdmRTQmhjbVVnYVcxd2IzSjBhVzVuSUdFZ2NISnBkbUYwWlNCclpYa3BYRzRnSUNBZ0lDQWdJQzh2WTI5dWMyOXNaUzVzYjJjb0oyTnllWEIwYnkxZmFXMXdiM0owVWxOQmMybG5ia3RsZVNjc0lIQnlhWFpoZEdWTFpYa3BPMXh1SUNBZ0lDQWdJQ0J5WlhOdmJIWmxLSEJ5YVhaaGRHVkxaWGtwTzF4dVhHNGdJQ0FnSUNCOUtTNWpZWFJqYUNobWRXNWpkR2x2YmlobGNuSXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ25ZM0o1Y0hSdkxWOXBiWEJ2Y25SU1UwRnphV2R1UzJWNUp5d2daWEp5S1R0Y2JpQWdJQ0FnSUNBZ2NtVnFaV04wS0dWeWNpazdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUY5cGJYQnZjblJTVTBGMlpYSnBabmxMWlhrb2NIVmlTMlY1S1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjYmlBZ0lDQWdJR055ZVhCMGJ5NXpkV0owYkdVdWFXMXdiM0owUzJWNUtGeHVJQ0FnSUNBZ0lDQWdJQ2R6Y0d0cEp5d2dMeTlqWVc0Z1ltVWdKMnAzYXljZ0tIQjFZbXhwWXlCdmNpQndjbWwyWVhSbEtTd2dKM053YTJrbklDaHdkV0pzYVdNZ2IyNXNlU2tzSUc5eUlDZHdhMk56T0NjZ0tIQnlhWFpoZEdVZ2IyNXNlU2xjYmlBZ0lDQWdJQ0FnSUNCd2RXSkxaWGtzWEc0Z0lDQWdJQ0FnSUNBZ2V5QWdJQzh2ZEdobGMyVWdZWEpsSUhSb1pTQmhiR2R2Y21sMGFHMGdiM0IwYVc5dWMxeHVJQ0FnSUNBZ0lDQWdJQ0FnYm1GdFpUb2dKMUpUUVZOVFFTMVFTME5UTVMxMk1WODFKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHaGhjMmc2SUh0dVlXMWxPaUFuVTBoQkxUSTFOaWQ5SUM4dlkyRnVJR0psSUNkVFNFRXRNU2NzSUNkVFNFRXRNalUySnl3Z0oxTklRUzB6T0RRbkxDQnZjaUFuVTBoQkxUVXhNaWRjYmlBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJSFJ5ZFdVc0lDOHZkMmhsZEdobGNpQjBhR1VnYTJWNUlHbHpJR1Y0ZEhKaFkzUmhZbXhsSUNocExtVXVJR05oYmlCaVpTQjFjMlZrSUdsdUlHVjRjRzl5ZEV0bGVTbGNiaUFnSUNBZ0lDQWdJQ0JiSjNabGNtbG1lU2RkSUM4dkozWmxjbWxtZVNjZ1ptOXlJSEIxWW14cFl5QnJaWGtnYVcxd2IzSjBMQ0FuYzJsbmJpY2dabTl5SUhCeWFYWmhkR1VnYTJWNUlHbHRjRzl5ZEhOY2JpQWdJQ0FnSUNsY2JpQWdJQ0FnSUM1MGFHVnVLR1oxYm1OMGFXOXVLSEIxWW14cFkwdGxlU2tnZTF4dUlDQWdJQ0FnSUNBdkwzSmxkSFZ5Ym5NZ1lTQndkV0pzYVdOTFpYa2dLRzl5SUhCeWFYWmhkR1ZMWlhrZ2FXWWdlVzkxSUdGeVpTQnBiWEJ2Y25ScGJtY2dZU0J3Y21sMllYUmxJR3RsZVNsY2JpQWdJQ0FnSUNBZ0x5OWpiMjV6YjJ4bExteHZaeWduWTNKNWNIUnZMVjlwYlhCdmNuUlNVMEYyWlhKcFpubExaWGtuTENCd2RXSnNhV05MWlhrcE8xeHVJQ0FnSUNBZ0lDQnlaWE52YkhabEtIQjFZbXhwWTB0bGVTazdYRzVjYmlBZ0lDQWdJSDBwTG1OaGRHTm9LR1oxYm1OMGFXOXVLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0NkamNubHdkRzh0WDJsdGNHOXlkRkpUUVhabGNtbG1lVXRsZVNjc0lHVnljaWs3WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2hsY25JcE8xeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0JmYVcxd2IzSjBVbE5CWlc1amNubHdkRXRsZVNod2RXSkxaWGtwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dlMXh1SUNBZ0lDQWdZM0o1Y0hSdkxuTjFZblJzWlM1cGJYQnZjblJMWlhrb1hHNGdJQ0FnSUNBZ0lDQWdKM053YTJrbkxDQXZMMk5oYmlCaVpTQW5hbmRySnlBb2NIVmliR2xqSUc5eUlIQnlhWFpoZEdVcExDQW5jM0JyYVNjZ0tIQjFZbXhwWXlCdmJteDVLU3dnYjNJZ0ozQnJZM000SnlBb2NISnBkbUYwWlNCdmJteDVLVnh1SUNBZ0lDQWdJQ0FnSUhCMVlrdGxlU3hjYmlBZ0lDQWdJQ0FnSUNCN0lDQWdMeTkwYUdWelpTQmhjbVVnZEdobElHRnNaMjl5YVhSb2JTQnZjSFJwYjI1elhHNGdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbE9pQW5VbE5CTFU5QlJWQW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FHRnphRG9nZTI1aGJXVTZJQ2RUU0VFdE1qVTJKMzBnTHk5allXNGdZbVVnSjFOSVFTMHhKeXdnSjFOSVFTMHlOVFluTENBblUwaEJMVE00TkNjc0lHOXlJQ2RUU0VFdE5URXlKMXh1SUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdkSEoxWlN3Z0x5OTNhR1YwYUdWeUlIUm9aU0JyWlhrZ2FYTWdaWGgwY21GamRHRmliR1VnS0drdVpTNGdZMkZ1SUdKbElIVnpaV1FnYVc0Z1pYaHdiM0owUzJWNUtWeHVJQ0FnSUNBZ0lDQWdJRnNuWlc1amNubHdkQ2RkSUM4dkoyVnVZM0o1Y0hRbklHOXlJQ2QzY21Gd1MyVjVKeUJtYjNJZ2NIVmliR2xqSUd0bGVTQnBiWEJ2Y25RZ2IzSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5ZGtaV055ZVhCMEp5QnZjaUFuZFc1M2NtRndTMlY1SnlCbWIzSWdjSEpwZG1GMFpTQnJaWGtnYVcxd2IzSjBjMXh1SUNBZ0lDQWdLVnh1SUNBZ0lDQWdMblJvWlc0b1puVnVZM1JwYjI0b2NIVmliR2xqUzJWNUtTQjdYRzRnSUNBZ0lDQWdJQzh2Y21WMGRYSnVjeUJoSUhCMVlteHBZMHRsZVNBb2IzSWdjSEpwZG1GMFpVdGxlU0JwWmlCNWIzVWdZWEpsSUdsdGNHOXlkR2x1WnlCaElIQnlhWFpoZEdVZ2EyVjVLVnh1SUNBZ0lDQWdJQ0F2TDJOdmJuTnZiR1V1Ykc5bktDZGpjbmx3ZEc4dFgybHRjRzl5ZEZKVFFXVnVZM0o1Y0hSTFpYa25MQ0J3ZFdKc2FXTkxaWGtwTzF4dUlDQWdJQ0FnSUNCeVpYTnZiSFpsS0hCMVlteHBZMHRsZVNrN1hHNWNiaUFnSUNBZ0lIMHBMbU5oZEdOb0tHWjFibU4wYVc5dUtHVnljaWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ2RqY25sd2RHOHRYMmx0Y0c5eWRGSlRRV1Z1WTNKNWNIUkxaWGtuTENCbGNuSXBPMXh1SUNBZ0lDQWdJQ0J5WldwbFkzUW9aWEp5S1R0Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdYMmx0Y0c5eWRGSlRRV1JsWTNKNWNIUkxaWGtvY0hKcGRrdGxlU2tnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYRzRnSUNBZ0lDQmpjbmx3ZEc4dWMzVmlkR3hsTG1sdGNHOXlkRXRsZVNoY2JpQWdJQ0FnSUNBZ0lDQW5jR3RqY3pnbkxDQXZMMk5oYmlCaVpTQW5hbmRySnlBb2NIVmliR2xqSUc5eUlIQnlhWFpoZEdVcExDQW5jM0JyYVNjZ0tIQjFZbXhwWXlCdmJteDVLU3dnYjNJZ0ozQnJZM000SnlBb2NISnBkbUYwWlNCdmJteDVLVnh1SUNBZ0lDQWdJQ0FnSUhCeWFYWkxaWGtzWEc0Z0lDQWdJQ0FnSUNBZ2V5QWdJQzh2ZEdobGMyVWdZWEpsSUhSb1pTQmhiR2R2Y21sMGFHMGdiM0IwYVc5dWMxeHVJQ0FnSUNBZ0lDQWdJQ0FnYm1GdFpUb2dKMUpUUVMxUFFVVlFKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHaGhjMmc2SUh0dVlXMWxPaUFuVTBoQkxUSTFOaWQ5SUM4dlkyRnVJR0psSUNkVFNFRXRNU2NzSUNkVFNFRXRNalUySnl3Z0oxTklRUzB6T0RRbkxDQnZjaUFuVTBoQkxUVXhNaWRjYmlBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJSFJ5ZFdVc0lDOHZkMmhsZEdobGNpQjBhR1VnYTJWNUlHbHpJR1Y0ZEhKaFkzUmhZbXhsSUNocExtVXVJR05oYmlCaVpTQjFjMlZrSUdsdUlHVjRjRzl5ZEV0bGVTbGNiaUFnSUNBZ0lDQWdJQ0JiSjJSbFkzSjVjSFFuWFNBdkx5ZGxibU55ZVhCMEp5QnZjaUFuZDNKaGNFdGxlU2NnWm05eUlIQjFZbXhwWXlCclpYa2dhVzF3YjNKMElHOXlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OG5aR1ZqY25sd2RDY2diM0lnSjNWdWQzSmhjRXRsZVNjZ1ptOXlJSEJ5YVhaaGRHVWdhMlY1SUdsdGNHOXlkSE5jYmlBZ0lDQWdJQ2xjYmlBZ0lDQWdJQzUwYUdWdUtHWjFibU4wYVc5dUtIQnlhWFpoZEdWTFpYa3BJSHRjYmlBZ0lDQWdJQ0FnTHk5eVpYUjFjbTV6SUdFZ2NIVmliR2xqUzJWNUlDaHZjaUJ3Y21sMllYUmxTMlY1SUdsbUlIbHZkU0JoY21VZ2FXMXdiM0owYVc1bklHRWdjSEpwZG1GMFpTQnJaWGtwWEc0Z0lDQWdJQ0FnSUM4dlkyOXVjMjlzWlM1c2IyY29KMk55ZVhCMGJ5MWZhVzF3YjNKMFVsTkJaR1ZqY25sd2RFdGxlU2NzSUhCeWFYWmhkR1ZMWlhrcE8xeHVJQ0FnSUNBZ0lDQnlaWE52YkhabEtIQnlhWFpoZEdWTFpYa3BPMXh1WEc0Z0lDQWdJQ0I5S1M1allYUmphQ2htZFc1amRHbHZiaWhsY25JcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lnblkzSjVjSFJ2TFY5cGJYQnZjblJTVTBGa1pXTnllWEIwUzJWNUp5d2daWEp5S1R0Y2JpQWdJQ0FnSUNBZ2NtVnFaV04wS0dWeWNpazdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUdOdmJtTmhkRkJOVTNkcGRHaFNZVzVrYjIxektIQnRjeXdnZEc5U1lXNWtiMjBzSUdaeWIyMVNZVzVrYjIwcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnYkdWMElHWnBibUZzUzJWNUlEMGdibVYzSUZWcGJuUTRRWEp5WVhrb2NHMXpMbXhsYm1kMGFDQXJJSFJ2VW1GdVpHOXRMbXhsYm1kMGFDQXJJR1p5YjIxU1lXNWtiMjB1YkdWdVozUm9LVHRjYmx4dUlDQWdJQzh2SUdGa1pDQlFjbVZ0WVhOMFpYSkxaWGxjYmlBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJSEJ0Y3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdabWx1WVd4TFpYbGJhVjBnUFNCd2JYTmJhVjA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeTloWkdRZ2RHOGdjbUZ1Wkc5dFhHNGdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCMGIxSmhibVJ2YlM1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdabWx1WVd4TFpYbGJhU0FySUhCdGN5NXNaVzVuZEdoZElEMGdjRzF6VzJsZE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dllXUmtJR1p5YjIwZ2NtRnVaRzl0WEc0Z0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0JtY205dFVtRnVaRzl0TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQm1hVzVoYkV0bGVWdHBJQ3NnY0cxekxteGxibWQwYUNBcklIUnZVbUZ1Wkc5dExteGxibWQwYUYwZ1BTQndiWE5iYVYwN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJR1pwYm1Gc1MyVjVPMXh1SUNCOVhHNWNiaUFnWDJkbGJtVnlZWFJsTWpVMlltbDBTMlY1S0NrZ2UxeHVJQ0FnSUd4bGRDQmhjbkpoZVNBOUlHNWxkeUFnVldsdWREaEJjbkpoZVNnek1pazdYRzRnSUNBZ1kzSjVjSFJ2TG1kbGRGSmhibVJ2YlZaaGJIVmxjeWhoY25KaGVTazdYRzVjYmlBZ0lDQnlaWFIxY200Z1lYSnlZWGs3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCcGJYQnZjblJ6SUhSb1pTQnpaV055WlhRZ2RHOGdkR2hsSUVoTlFVTWdablZ1WTNScGIyNWNiaUFnS2lCQWNHRnlZVzBnSUh0aWVYUmxRWEp5WVhsOUlDQWdZWEp5WVhsQ2RXWm1aWElnSUNBZ0lHSjVkR1Z6SUhSdklHbHRjRzl5ZENCaGN5QnJaWGxjYmlBZ0tpQkFjbVYwZFhKdUlIdEtVMDlPZlNBZ0lDQWdJQ0JyWlhrZ0lDQWdJQ0FnSUNBZ0lDQWdJR3RsZVNCeVpXRmtlU0IwYnlCaVpTQjFjMlZrSUdsdUlIUm9aU0JJVFVGRElHTnllWEIwYjJkeVlYQm9hV01nWm5WdVkzUnBiMjVjYmlBZ0tpOWNiaUFnWDJsdGNHOXlkRWhOUVVOclpYa29ZWEp5WVhsQ2RXWm1aWElwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dlMXh1WEc0Z0lDQWdJQ0JmZEdocGN5NWZaR2xuWlhOMEtHRnljbUY1UW5WbVptVnlLUzUwYUdWdUtDaHJaWGtwSUQwK0lIdGNibHh1SUNBZ0lDQWdJQ0JqY25sd2RHOHVjM1ZpZEd4bExtbHRjRzl5ZEV0bGVTaGNiaUFnSUNBZ0lDQWdKM0poZHljc0lDOHZZMkZ1SUdKbElDZHFkMnNuSUc5eUlDZHlZWGNuWEc0Z0lDQWdJQ0FnSUd0bGVTeGNiaUFnSUNBZ0lDQWdleUFnSUM4dmRHaHBjeUJwY3lCMGFHVWdZV3huYjNKcGRHaHRJRzl3ZEdsdmJuTmNiaUFnSUNBZ0lDQWdJQ0J1WVcxbE9pQW5TRTFCUXljc1hHNGdJQ0FnSUNBZ0lDQWdhR0Z6YURvZ2UyNWhiV1U2SUNkVFNFRXRNalUySjMwc0lDOHZZMkZ1SUdKbElDZFRTRUV0TVNjc0lDZFRTRUV0TWpVMkp5d2dKMU5JUVMwek9EUW5MQ0J2Y2lBblUwaEJMVFV4TWlkY2JpQWdJQ0FnSUNBZ0lDQnNaVzVuZEdnNklESTFOaUF2TDI5d2RHbHZibUZzTENCcFppQjViM1VnZDJGdWRDQjViM1Z5SUd0bGVTQnNaVzVuZEdnZ2RHOGdaR2xtWm1WeUlHWnliMjBnZEdobElHaGhjMmdnWm5WdVkzUnBiMjRuY3lCaWJHOWpheUJzWlc1bmRHaGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnZEhKMVpTd2dMeTkzYUdWMGFHVnlJSFJvWlNCclpYa2dhWE1nWlhoMGNtRmpkR0ZpYkdVZ0tHa3VaUzRnWTJGdUlHSmxJSFZ6WldRZ2FXNGdaWGh3YjNKMFMyVjVLVnh1SUNBZ0lDQWdJQ0JiSjNOcFoyNG5MQ0FuZG1WeWFXWjVKMTBnTHk5allXNGdZbVVnWVc1NUlHTnZiV0pwYm1GMGFXOXVJRzltSUNkemFXZHVKeUJoYm1RZ0ozWmxjbWxtZVNkY2JpQWdJQ0FnSUNBZ0tTNTBhR1Z1S0daMWJtTjBhVzl1S0d0bGVTa2dlMXh1SUNBZ0lDQWdJQ0FnSUM4dmNtVjBkWEp1Y3lCMGFHVWdjM2x0YldWMGNtbGpJR3RsZVZ4dUlDQWdJQ0FnSUNBZ0lDOHZZMjl1YzI5c1pTNXNiMmNvSjJOeWVYQjBieTFmYVcxd2IzSjBTRTFCUTJ0bGVTY3NJR3RsZVNrN1hHNGdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHJaWGtwTzF4dUlDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0lDQXVZMkYwWTJnb1puVnVZM1JwYjI0b1pYSnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0dWeWNpazdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQmZaR2xuWlhOMEtIWmhiSFZsS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjYmlBZ0lDQWdJR055ZVhCMGJ5NXpkV0owYkdVdVpHbG5aWE4wS0Z4dUlDQWdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUc1aGJXVTZJQ2RUU0VFdE1qVTJKMXh1SUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdkbUZzZFdVZ0x5OVVhR1VnWkdGMFlTQjViM1VnZDJGdWRDQjBieUJvWVhOb0lHRnpJR0Z1SUVGeWNtRjVRblZtWm1WeVhHNGdJQ0FnSUNBcFhHNGdJQ0FnSUNBdWRHaGxiaWhtZFc1amRHbHZiaWhvWVhOb0tTQjdYRzRnSUNBZ0lDQWdJQzh2Y21WMGRYSnVjeUIwYUdVZ2FHRnphQ0JoY3lCaGJpQkJjbkpoZVVKMVptWmxjbHh1SUNBZ0lDQWdJQ0F2TDJOdmJuTnZiR1V1Ykc5bktDZGpjbmx3ZEc4dFpHbG5aWE4wSnl3Z2JtVjNJRlZwYm5RNFFYSnlZWGtvYUdGemFDa3BPMXh1SUNBZ0lDQWdJQ0J5WlhOdmJIWmxLRzVsZHlCVmFXNTBPRUZ5Y21GNUtHaGhjMmdwS1R0Y2JpQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBdVkyRjBZMmdvWm5WdVkzUnBiMjRvWlhKeUtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb1pYSnlLVHRjYmlBZ0lDQWdJQ0FnY21WcVpXTjBLR1Z5Y2lrN1hHNGdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnWDJsdGNHOXlkRUZGVTJ0bGVTaGhjbkpoZVVKMVptWmxjaWtnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjYmlBZ0lDQWdJR055ZVhCMGJ5NXpkV0owYkdVdWFXMXdiM0owUzJWNUtGeHVJQ0FnSUNBZ0lDQWdJQ2R5WVhjbkxDQXZMMk5oYmlCaVpTQW5hbmRySnlCdmNpQW5jbUYzSjF4dUlDQWdJQ0FnSUNBZ0lHRnljbUY1UW5WbVptVnlMRnh1SUNBZ0lDQWdJQ0FnSUhzZ0lDQXZMM1JvYVhNZ2FYTWdkR2hsSUdGc1oyOXlhWFJvYlNCdmNIUnBiMjV6WEc0Z0lDQWdJQ0FnSUNBZ0lDQnVZVzFsT2lBblFVVlRMVU5DUXlkY2JpQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUhSeWRXVXNJQzh2ZDJobGRHaGxjaUIwYUdVZ2EyVjVJR2x6SUdWNGRISmhZM1JoWW14bElDaHBMbVV1SUdOaGJpQmlaU0IxYzJWa0lHbHVJR1Y0Y0c5eWRFdGxlU2xjYmlBZ0lDQWdJQ0FnSUNCYkoyVnVZM0o1Y0hRbkxDQW5aR1ZqY25sd2RDZGRJQzh2WTJGdUlHSmxJQ2RsYm1OeWVYQjBKeXdnSjJSbFkzSjVjSFFuTENBbmQzSmhjRXRsZVNjc0lHOXlJQ2QxYm5keVlYQkxaWGtuWEc0Z0lDQWdJQ0FwWEc0Z0lDQWdJQ0F1ZEdobGJpaG1kVzVqZEdsdmJpaHJaWGtwSUh0Y2JpQWdJQ0FnSUNBZ0x5OXlaWFIxY201eklIUm9aU0J6ZVcxdFpYUnlhV01nYTJWNVhHNGdJQ0FnSUNBZ0lDOHZZMjl1YzI5c1pTNXNiMmNvSjJOeWVYQjBieTFwYlhCdmNuUkJSVk5yWlhrbkxDQnJaWGtwTzF4dUlDQWdJQ0FnSUNCeVpYTnZiSFpsS0d0bGVTazdYRzRnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdMbU5oZEdOb0tHWjFibU4wYVc5dUtHVnljaWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ2RqY25sd2RHOHRhVzF3YjNKMFFVVlRhMlY1Snl3Z1pYSnlLVHRjYmlBZ0lDQWdJQ0FnY21WcVpXTjBLR1Z5Y2lrN1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJRjkxZEdZNFJXNWpiMlJsS0hNcElIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGUmxlSFJGYm1OdlpHVnlLQ2QxZEdZdE9DY3BMbVZ1WTI5a1pTaHpLVHRjYmlBZ2ZWeHVYRzRnSUY5MWRHWTRSR1ZqYjJSbEtITXBJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRlJsZUhSRVpXTnZaR1Z5S0NkMWRHWXRPQ2NwTG1SbFkyOWtaU2h6S1R0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCRGNubHdkRzg3WEc0aUxDSXZLaXBjYmlvZ1ptRnJaU0JqYkdGemN5Qm1iM0lnZEdobElHZDFhU0IwYnlCelpXeGxZM1FnZEdobElHbGtaVzUwYVhSNUxGeHVLaUJVVDBSUElISmxjR3hoWTJVZ2QybDBhQ0IwYUdVZ2NISnZjR1Z5SUdsa1pXNTBhWFI1SUVkVlNWeHVLbHh1S2k5Y2JtTnNZWE56SUVkMWFVWmhhMlVnZTF4dVhHNGdJR052Ym5OMGNuVmpkRzl5S0hWeWJDd2diV1Z6YzJGblpVSjFjeWtnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQmZkR2hwY3k1ZmRYSnNJRDBnZFhKc08xeHVJQ0FnSUY5MGFHbHpMbDkzWVdsMFZHbHRaU0E5SURFd01EQXdPMXh1SUNBZ0lGOTBhR2x6TGw5dFpYTnpZV2RsUW5WeklEMGdiV1Z6YzJGblpVSjFjenRjYmx4dUlDQWdJRjkwYUdsekxsOXRaWE56WVdkbFFuVnpMbUZrWkV4cGMzUmxibVZ5S0Y5MGFHbHpMbDkxY213c0lHMXpaeUE5UGlCN1hHNWNiaUFnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RvWlhKbElTY3BPMXh1SUNBZ0lDQWdiR1YwSUhKbGNHeDVUWE5uSUQwZ2UybGtPaUJ0YzJjdWFXUXNJSFI1Y0dVNklDZHlaWE53YjI1elpTY3NJSFJ2T2lCdGMyY3Vabkp2YlN3Z1puSnZiVG9nYlhObkxuUnZMQ0JpYjJSNU9pQjdkbUZzZFdVNklHMXpaeTVpYjJSNUxuWmhiSFZsSUNzZ0lDY3RZMmhoYm1kbFpDZDlmVHRjYmx4dUlDQWdJQ0FnTHk4Z2RHOGdkR1Z6ZENCdmJpQjBhR1VnYVdSbGJuUnBkSGtnYzJsa1pTQjBhR1VnYkdsemRHVnVaWElnZDJsMGFHOTFkQ0IwYUdVZ2RHbHRaVzkxZEZ4dUlDQWdJQ0FnTHk4Z1kyRnVJSEpsY0hKbGMyVnVkQ0IwYUdVZ2RHbHRaU0IwYUdVZ2RYTmxjaUIwWVd0bGN5QjBieUJqYUc5dmMyVWdZVzVrSUdsa1pXNTBhWFI1WEc0Z0lDQWdJQ0JwWmlBb2JYTm5MbUp2WkhrdWRtRnNkV1VnUFQwOUlDZDNZV2wwSnlrZ2UxeHVYRzRnSUNBZ0lDQWdJSE5sZEZScGJXVnZkWFFvS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbDl0WlhOellXZGxRblZ6TG5CdmMzUk5aWE56WVdkbEtISmxjR3g1VFhObktUdGNiaUFnSUNBZ0lDQWdmU3dnWDNSb2FYTXVYM2RoYVhSVWFXMWxLVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJRjkwYUdsekxsOXRaWE56WVdkbFFuVnpMbkJ2YzNSTlpYTnpZV2RsS0hKbGNHeDVUWE5uS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElFZDFhVVpoYTJVN1hHNGlMQ0l2S2lwY2Jpb2dWR2hsSUVsa1pXNTBhWFI1SUVSaGRHRWdUVzlrWld3Z2FYTWdkWE5sWkNCMGJ5QnRiMlJsYkNCMGFHVWdjbVZVU0VsT1N5QlZjMlZ5SUdWdWRHbDBlUzRnVkdobElFbGtaVzUwYVhSNUlHUmhkR0VnYlc5a1pXd2dhWE1nYUdGdVpHeGxaQ0JpZVNCSlpHVnVkR2wwZVNCTllXNWhaMlZ0Wlc1MElHWjFibU4wYVc5dVlXeHBkSGt1WEc0cVhHNHFMMXh1WTJ4aGMzTWdTV1JsYm5ScGRIa2dlMXh1WEc0Z0lHTnZibk4wY25WamRHOXlLR2QxYVdRc0lIUjVjR1VwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdYM1JvYVhNdVozVnBaQ0E5SUdkMWFXUTdYRzRnSUNBZ1gzUm9hWE11ZEhsd1pTQTlJSFI1Y0dVN1hHNGdJQ0FnWDNSb2FYTXVhV1JsYm5ScFptbGxjbk5NYVhOMElEMGdlMzA3WEc1Y2JpQWdmVnh1WEc0Z0lHRmtaRWxrWlc1MGFYUjVLR2xrWlc1MGFXWnBaWElwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lHeGxkQ0JwWkdWdWRHbDBlVWx1Wm05eWJXRjBhVzl1SUQwZ2UxeHVJQ0FnSUNBZ2FXUkJjM05sY25ScGIyNDZJQ2NuTEZ4dUlDQWdJQ0FnYzJWeWRtbGpaVUZrWkhKbGMzTTZJQ2NuTEZ4dUlDQWdJQ0FnWVhWMGFHVnVkR2xqWVhScGIyNUVZWFJoT2lBbkp5eGNiaUFnSUNBZ0lHRjFkR2h2Y21sellYUnBiMjVFWVhSaE9pQW5KeXhjYmlBZ0lDQWdJSFZ6WlhKUWNtOW1hV3hsT2lBbkoxeHVJQ0FnSUgwN1hHNGdJQ0FnWDNSb2FYTXVhV1JsYm5ScFptbGxjbk5NYVhOMFcybGtaVzUwYVdacFpYSmRJRDBnYVdSbGJuUnBkSGxKYm1admNtMWhkR2x2Ymp0Y2JpQWdmVnh1WEc0Z0lHRmtaRWxrUVhOelpYSjBhVzl1S0dsa1pXNTBhV1pwWlhJc0lHRnpjMlZ5ZEdsdmJpd2dhV1J3TENCelkyOXdaU2tnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQnNaWFFnYm1WM1NXUkJjM05sY25ScGIyNGdQU0J1WlhjZ1NXUkJjM05sY25ScGIyNG9ZWE56WlhKMGFXOXVMQ0JwWkhBc0lITmpiM0JsS1R0Y2JseHVJQ0FnSUY5MGFHbHpMbWxrUVhOelpYSjBhVzl1VEdsemRDNXdkWE5vS0c1bGQwbGtRWE56WlhKMGFXOXVLVHRjYmlBZ2ZWeHVmVnh1WEc1amJHRnpjeUJKWkVGemMyVnlkR2x2YmlCN1hHNWNiaUFnWTI5dWMzUnlkV04wYjNJb1lYTnpaWEowYVc5dUxDQnBaSEFzSUhOamIzQmxLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lGOTBhR2x6TG1GemMyVnlkR2x2YmlBOUlHRnpjMlZ5ZEdsdmJqdGNiaUFnSUNCZmRHaHBjeTVwWkhBZ1BTQnBaSEE3WEc0Z0lDQWdYM1JvYVhNdWMyTnZjR1VnUFNCelkyOXdaVHRjYmlBZ2ZWeHVYRzU5WEc1Y2JtTnNZWE56SUVsa1ZtRnNhV1JoZEdsdmJpQjdYRzVjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9hV1JsYm5ScGRIa3NJR052Ym5SbGJuUnpLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNiaUFnSUNCZmRHaHBjeTVwWkdWdWRHbDBlU0E5SUdsa1pXNTBhWFI1TzF4dUlDQWdJRjkwYUdsekxtTnZiblJsYm5SeklEMGdZMjl1ZEdWdWRITTdYRzRnSUgxY2JseHVJQ0IyWVd4cFpHRjBaWE1vYVdSbGJuUnBkSGtzSUdOdmJuUmxiblJ6S1NCN1hHNGdJQ0FnTHk5VVQwUlBJR2x0Y0d4bGJXVnVkQ0IwYUdVZ2JHOW5hV05jYmx4dUlDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUVsa1pXNTBhWFI1TzF4dUlpd2lYRzVwYlhCdmNuUWdlMlJwZG1sa1pWVlNUQ3dnWjJWMFZYTmxjbFZTVEVaeWIyMUZiV0ZwYkN3Z1oyVjBWWE5sY2tWdFlXbHNSbkp2YlZWU1RDd2dhWE5FWVhSaFQySnFaV04wVlZKTWZTQm1jbTl0SUNjdUxpOTFkR2xzY3k5MWRHbHNjeTVxY3ljN1hHNXBiWEJ2Y25RZ1NXUmxiblJwZEhrZ1puSnZiU0FuTGk5SlpHVnVkR2wwZVNjN1hHNXBiWEJ2Y25RZ1EzSjVjSFJ2SUdaeWIyMGdKeTR2UTNKNWNIUnZKenRjYm1sdGNHOXlkQ0JIZFdsR1lXdGxJR1p5YjIwZ0p5NHZSM1ZwUm1GclpTYzdYRzVjYmk4cUtseHVLbHh1S2lCVWFHVWdTV1JsYm5ScGRIa2dUVzlrZFd4bElDaEpaQ0JOYjJSMWJHVXBJR2x6SUhSb1pTQmpiMjF3YjI1bGJuUWdjbVZ6Y0c5dWMybGliR1VnWm05eUlHaGhibVJzYVc1bklIUm9aVnh1S2lCMWMyVnlJR2xrWlc1MGFYUjVJR0Z1WkNCMGFHVWdZWE56YjJOcFlYUnBiMjRnYjJZZ2RHaHBjeUJwWkdWdWRHbDBlU0IzYVhSb0lIUm9aU0JJZVhCbGNuUjVJR2x1YzNSaGJtTmxjeXhjYmlvZ2FXNGdiM0prWlhJZ2RHOGdiV0ZyWlNCSWVYQmxjblI1SUdsdWMzUmhibU5sY3lCcFpHVnVkR2xtYVdGaWJHVXVJRlJvWlNCcFpHVnVkR2wwZVNCcGJpQjBhR1VnY21WVVNFbE9TeUJ3Y205cVpXTjBYRzRxSUdseklHNXZkQ0JtYVhobFpDQjBieUJoSUhWdWFYRjFaU0JKWkdWdWRHbDBlU0JUWlhKMmFXTmxJRkJ5YjNacFpHVnlMQ0JpZFhRZ2IySjBZV2x1WldRZ2RHaHliM1ZuYUNCelpYWmxjbUZzWEc0cUlHUnBabVpsY21WdWRDQkpaR1Z1ZEdsMGVTQnpiM1Z5WTJWekxpQlhhWFJvSUhSb2FYTWdZWEJ3Y205aFkyZ3NJSFJvWlNCSlpDQk5iMlIxYkdVZ2NISnZkbWxrWlhNZ2RHOGdkR2hsSUhWelpYSWdkR2hsWEc0cUlHOXdkR2x2YmlCMGJ5QmphRzl2YzJVZ2RHaGxJSEJ5WldabGNuSmxaQ0J0WlhSb2IyUWdabTl5SUdGMWRHaGxiblJwWTJGMGFXOXVMbHh1S2lCVWFHbHpJRzF2WkhWc1pTQjNhV3hzSUhSb2RYTWdZV0pzWlNCMGJ5QnpkWEJ3YjNKMElHMTFiSFJwY0d4bElFbGtaVzUwYVhSNUlHRmpjWFZwYzJsMGFXOXVJRzFsZEdodlpITXNYRzRxSUhOMVkyZ2dZWE1nVDNCbGJrbEVJR052Ym01bFkzUWdNUzR3TENCTFpYSmlaWEp2Y3lCVGVYTjBaVzBzSUc5eUlHRjFkR2hsYm5ScFkyRjBhVzl1SUhSb2NtOTFaMmdnYzIxaGNuUWdZMkZ5WkhNdVhHNHFJRVp2Y2lCbGVHRnRjR3hsTENCaElIVnpaWElnZDJsMGFDQmhJRWR2YjJkc1pTQmhZMk52ZFc1MElHTmhiaUIxYzJVZ2RHaGxJRWR2YjJkc1pTQmhjeUJoYmlCSlpHVnVkR2wwZVNCUWNtOTJhV1JsY2lCMGJ5QndjbTkyYVdSbElFbGtaVzUwYVhSNUlGUnZhMlZ1Y3l4Y2Jpb2dJSGRvYVdOb0lHTmhiaUJpWlNCMWMyVmtJR0o1SUhSb1pTQkpaR1Z1ZEdsMGVTQk5iMlIxYkdVZ2RHOGdZWE56YjJOcFlYUmxJR2wwSUhkcGRHZ2dZU0JJZVhCbGNuUjVJR2x1YzNSaGJtTmxMbHh1S2x4dUtpQlVhR1VnU1dSbGJuUnBkSGtnVFc5a2RXeGxJSFZ6WlhNZ1lTQnViMlJsSUhCaFkydGhaMlVzSUhSb1pTQklaV3hzYjBwVExDQjNhR2xqYUNCcGN5QmhJR05zYVdWdWRDMXphV1JsSUVwaGRtRlRZM0pwY0hRZ1FWQkpJR1p2Y2lCaGRYUm9aVzUwYVdOaGRHbHZibHh1S2lCMGFHRjBJR1poWTJsc2FYUmhkR1Z6SUhSb1pTQnlaWEYxWlhOMGN5Qm1iM0lnZEdobElFOXdaVzVKUkNCamIyNXVaV04wSUhCeWIzUnZZMjlzTGlCVWFHbHpJRzFsZEdodlpDQmhiR3h2ZDNNZ1ptOXlJSE52YldVZ1lXSnpkSEpoWTNScGIyNWNiaW9nZDJobGJpQnRZV3RwYm1jZ2NtVnhkV1Z6ZEhNZ1ptOXlJR1JwWm1abGNtVnVkQ0JKWkdWdWRHbDBlU0JRY205MmFXUmxjbk1zSUhOMVkyZ2dZWE1nVDNCbGJrbEVJR052Ym01bFkzUWdkWE5sWkNCaWVTQkhiMjluYkdVc0lFWmhZMlZpYjI5ckxDQk5hV055YjNOdlpuUXNJR1p2Y2lCbGVHRnRjR3hsTGx4dUtseHVLaUJYYUdWdUlHRWdjbVZ4ZFdWemRDQm1iM0lnWVNCMWMyVnlJR2xrWlc1MGFYUjVJR2x6SUcxaFpHVWdkWE5wYm1jZ2RHaGxJRzFsZEdodlpDQnNiMmRwYmxkcGRHaFNVQ2hwWkdWdWRHbG1hV1Z5TENCelkyOXdaU2tzWEc0cUlIUm9hWE1nYldWMGFHOWtJSGRwYkd3Z1lXNWhiSGx6WlNCMGFHVWdTV1JsYm5ScGRIa2dVSEp2ZG1sa1pYSWdZMmh2YzJWdUlIUnZJRzlpZEdGcGJpQmhiaUJwWkdWdWRHbDBlU0JoYm1RZ2QybHNiQ0IxYzJVZ2RHaGxJRWhsYkd4dlNsTWdibTlrWlNCd1lXTnJZV2RsWEc0cUlIZHBkR2dnZEdobElITmxiR1ZqZEdWa0lFbGtaVzUwYVhSNUlGQnliM1pwWkdWeUlHRnVaQ0JwWkdWdWRHbDBlU0J6WTI5d1pTNGdRV1owWlhJZ2RHaGxJRWhsYkd4dlNsTWdjbVZ4ZFdWemRDQm1iM0lnWVc0Z1FXTmpaWE56SUZSdmEyVnVYRzRxSUhSdklIUm9aU0JKWkdWdWRHbDBlU0JRY205MmFXUmxjbk1zSUhSb1pTQjFjMlZ5SUhkcGJHd2dZbVVnY0hKdmJYQjBaV1FnZEc4Z1lYVjBhR1Z1ZEdsallYUmxJSFJ2ZDJGeVpITWdkR2hsSUVsa1pXNTBhWFI1SUZCeWIzWnBaR1Z5TGx4dUtpQlZjRzl1SUhKbFkyVnBkbWx1WnlCMGFHVWdRV05qWlhOeklGUnZhMlZ1TENCMGFHbHpJSFJ2YTJWdUlHbHpJSFpoYkdsa1lYUmxaQ0IzYVhSb0lHRWdVa1ZUVkdaMWJDQjNaV0lnYzJWeWRtbGpaU0J5WlhGMVpYTjBJSFJ2SUdGdUlHVnVaSEJ2YVc1MFhHNHFJRzl1SUhSb1pTQkpaR1Z1ZEdsMGVTQlFjbTkyYVdSbGNpQkJkWFJvYjNKcGVtRjBhVzl1SUZObGNuWmxjaXdnWVc1a0lHRm1kR1Z5SUhSb1pTQjJZV3hwWkdGMGFXOXVJR2x6SUdSdmJtVXNYRzRxSUdGdUlFbEVJSFJ2YTJWdUlHbHpJRzlpZEdGcGJtVmtJSGRwZEdnZ2RHaGxJR2x1Wm05eWJXRjBhVzl1SUdGalkyOXlaR2x1WnlCMGJ5QjBhR1VnYzJOdmNHVWdjbVZ4ZFdseVpXUXVYRzRxSUZSb2FYTWdTVVFnZEc5clpXNGdhWE1nZEdobGJpQndjbVZ6WlhKMlpXUWdhVzRnZEdocGN5QnRiMlIxYkdVZ2RHaGhkQ0JqWVc0Z2IySjBZV2x1WldRZ2RHaHliM1ZuYUNCMGFHVWdaMlYwU1dSbGJuUnBkR2xsY3lncFhHNHFJR0Z1WkNCcGN5QndZWE56WldRZ1lYTWdjbVYwZFhKdUlIWmhiSFZsSUc5bUlIUm9aU0JzYjJkcGJsZHBkR2hTVUNCbWRXNWpkR2x2Ymk0Z1ZHaGxJRzFsZEdodlpITWdaMlZ1WlhKaGRHVkJjM05sY25ScGIyNGdZVzVrSUhaaGJHbGtZWFJsUVhOelpYSjBhVzl1SUdoaGRtVWdibTkwSUhsbGRDQmlaV1Z1SUdSbGRtVnNiM0JsWkM1Y2JpcGNiaW92WEc1amJHRnpjeUJKWkdWdWRHbDBlVTF2WkhWc1pTQjdYRzVjYmlBZ0x5b3FYRzRnSUNvZ1ZHaHBjeUJwY3lCMGFHVWdZMjl1YzNSeWRXTjBiM0lnZEc4Z2FXNXBkR2xoYkdselpTQjBhR1VnU1dSbGJuUnBkSGtnVFc5a2RXeGxJR2wwSUdSdlpYTWdibTkwSUhKbGNYVnBjbVVnWVc1NUlHbHVjSFYwTGx4dUlDQXFMMXh1SUNCamIyNXpkSEoxWTNSdmNpaHlkVzUwYVcxbFZWSk1LU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lHbG1JQ2doY25WdWRHbHRaVlZTVENrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkeWRXNTBhVzFsVlZKTUlHbHpJRzFwYzNOcGJtY3VKeWs3WEc1Y2JpQWdJQ0JmZEdocGN5NWZjblZ1ZEdsdFpWVlNUQ0E5SUhKMWJuUnBiV1ZWVWt3N1hHNGdJQ0FnWDNSb2FYTXVYMmxrYlZWU1RDQTlJRjkwYUdsekxsOXlkVzUwYVcxbFZWSk1JQ3NnSnk5cFpHMG5PMXh1SUNBZ0lGOTBhR2x6TGw5bmRXbFZVa3dnUFNCZmRHaHBjeTVmY25WdWRHbHRaVlZTVENBcklDY3ZhV1JsYm5ScGRIa3RaM1ZwSnp0Y2JseHVJQ0FnSUY5MGFHbHpMbDlrYjIxaGFXNGdQU0JrYVhacFpHVlZVa3dvWDNSb2FYTXVYM0oxYm5ScGJXVlZVa3dwTG1SdmJXRnBianRjYmx4dUlDQWdJQzh2ZEc4Z2MzUnZjbVVnYVhSbGJYTWdkMmwwYUNCMGFHbHpJR1p2Y20xaGREb2dlMmxrWlc1MGFYUjVPaUJwWkdWdWRHbDBlVlZTVEN3Z2RHOXJaVzQ2SUhSdmEyVnVTVVI5WEc0Z0lDQWdYM1JvYVhNdWFXUmxiblJwZEdsbGN5QTlJRnRkTzF4dUlDQWdJR3hsZENCdVpYZEpaR1Z1ZEdsMGVTQTlJRzVsZHlCSlpHVnVkR2wwZVNnblozVnBaQ2NzSjBoVlRVRk9KeWs3WEc0Z0lDQWdYM1JvYVhNdWFXUmxiblJwZEhrZ1BTQnVaWGRKWkdWdWRHbDBlVHRjYmlBZ0lDQmZkR2hwY3k1amNubHdkRzhnUFNCdVpYY2dRM0o1Y0hSdktDazdYRzVjYmlBZ0lDQXZMM04wYjNKbGN5QjBhR1VnWVhOemIyTnBZWFJwYjI0Z2IyWWdkR2hsSUdSaGRHRlBZbXBsWTNRZ1lXNWtJSFJvWlNCSWVYQmxjblI1SUhKbFoybHpkR1Z5WldRZ2QybDBhR2x1WEc0Z0lDQWdYM1JvYVhNdVpHRjBZVTlpYW1WamRITkpaR1Z1ZEdsMGVTQTlJSHQ5TzF4dVhHNGdJQ0FnTHk4Z2FHRnphRlJoWW14bElIUnZJSE4wYjNKbElHRnNiQ0IwYUdVZ1kzSjVjSFJ2SUdsdVptOXliV0YwYVc5dUlHSmxkSGRsWlc0Z2RIZHZJR2g1Y0dWeWRHbGxjMXh1SUNBZ0lGOTBhR2x6TG1Ob1lYUkxaWGx6SUQwZ2UzMDdYRzVjYmlBZ0lDQXZMeUJvWVhOb1ZHRmliR1VnZEc4Z2MzUnZjbVVnZEdobElITjViVzFsZEhKcFl5QnJaWGx6SUhSdklHSmxJSFZ6WldRZ2FXNGdkR2hsSUdOb1lYUWdaM0p2ZFhCY2JpQWdJQ0JmZEdocGN5NWtZWFJoVDJKcVpXTjBVMlZ6YzJsdmJrdGxlWE1nUFNCN2ZUdGNibHh1SUNBZ0lDOHZabUZwYkhOaFptVWdkRzhnWlc1aFlteGxMMlJwYzJGaWJHVWdZV3hzSUhSb1pTQmpjbWx3ZEc5bmNtRndhR2xqSUdaMWJtTjBhVzl1YzF4dUlDQWdJRjkwYUdsekxtbHpWRzlWYzJWRmJtTnllWEIwYVc5dUlEMGdkSEoxWlR0Y2JseHVJQ0FnSUM4dklIWmxjbWxtYVdOaGRHbHZiaUJ2WmlCdWIyUmxTbE1zSUdGdVpDQnBiaUJqWVhObElHbDBJR2x6SUc1dlpHVktVeUIwYUdWdUlHUnBjMkZpYkdVZ1pXNWpjbmx3ZEdsdmJseHVJQ0FnSUM4dklGUlBSRThnYVcxd2NtOTJaU0JzWVhSbGNpd2dkR2hwY3lCbGVHbHpkSE1nWW1WallYVnpaU0IwYUdVZ1kzSjVjSFJ2SUd4cFlpQjFjMlZ6SUdKeWIzZHpaWElnWTNKNWNIUnZaM0poY0docFl5QnRaWFJvYjJSelhHNGdJQ0FnTHk5ZmRHaHBjeTVwYzFSdlZYTmxSVzVqY25sd2RHbHZiaUE5SUNoM2FXNWtiM2NwSUQ4Z2RISjFaU0E2SUdaaGJITmxPMXh1WEc0Z0lIMWNibHh1SUNCMFpYTjBLSE4wY21sdVp5a2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0FnYkdWMElHMWxjM05oWjJVZ1BTQjdkSGx3WlRvblkzSmxZWFJsSnl3Z2RHODZJRjkwYUdsekxsOW5kV2xWVWt3c0lHWnliMjA2SUY5MGFHbHpMbDlwWkcxVlVrd3NJR0p2WkhrNklIdDJZV3gxWlRvZ2MzUnlhVzVuZlgwN1hHNWNiaUFnSUNCc1pYUWdhV1FnUFNCZmRHaHBjeTVmYldWemMyRm5aVUoxY3k1d2IzTjBUV1Z6YzJGblpTaHRaWE56WVdkbEtUdGNibHh1SUNBZ0lGOTBhR2x6TGw5dFpYTnpZV2RsUW5WekxtRmtaRkpsYzNCdmJuTmxUR2x6ZEdWdVpYSW9YM1JvYVhNdVgybGtiVlZTVEN3Z2FXUXNJRzF6WnlBOVBpQjdYRzRnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduYUdWeVpTRWhKeXdnYlhObkxtSnZaSGt1ZG1Gc2RXVXBPMXh1SUNBZ0lDQWdYM1JvYVhNdVgyMWxjM05oWjJWQ2RYTXVjbVZ0YjNabFVtVnpjRzl1YzJWTWFYTjBaVzVsY2loZmRHaHBjeTVmYVdSdFZWSk1MQ0JwWkNrN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0tpQnlaWFIxY200Z2RHaGxJRzFsYzNOaFoyVkNkWE1nYVc0Z2RHaHBjeUJTWldkcGMzUnllVnh1SUNBcUlFQndZWEpoYlNCN1RXVnpjMkZuWlVKMWMzMGdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVkNkWE5jYmlBZ0tpOWNiaUFnWjJWMElHMWxjM05oWjJWQ2RYTW9LU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNiaUFnSUNCeVpYUjFjbTRnWDNSb2FYTXVYMjFsYzNOaFoyVkNkWE03WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCVFpYUWdkR2hsSUcxbGMzTmhaMlZDZFhNZ2FXNGdkR2hwY3lCU1pXZHBjM1J5ZVZ4dUlDQXFJRUJ3WVhKaGJTQjdUV1Z6YzJGblpVSjFjMzBnSUNBZ0lDQWdJQ0FnSUcxbGMzTmhaMlZDZFhOY2JpQWdLaTljYmlBZ2MyVjBJRzFsYzNOaFoyVkNkWE1vYldWemMyRm5aVUoxY3lrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdYM1JvYVhNdVgyMWxjM05oWjJWQ2RYTWdQU0J0WlhOellXZGxRblZ6TzF4dVhHNGdJQ0FnTHk5VVQwUlBJSEpsYlc5MlpTQnNZWFJsY2lCM2FYUm9JSFJvWlNCd2NtOXdaWElnUjFWSklHMWxjM05oWjJVZ2JHbHpkR1Z1WlhKY2JpQWdJQ0JzWlhRZ1ozVnBSbUZyWlNBOUlHNWxkeUJIZFdsR1lXdGxLRjkwYUdsekxsOW5kV2xWVWt3c0lGOTBhR2x6TGw5dFpYTnpZV2RsUW5WektUdGNiaUFnSUNCZmRHaHBjeTVuZFdsR1lXdGxJRDBnWjNWcFJtRnJaVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUhKbGRIVnliaUIwYUdVZ2NtVm5hWE4wY25rZ2FXNGdkR2hwY3lCcFpFMXZaSFZzWlZ4dUlDQXFJRUJ3WVhKaGJTQjdjbVZuYVhOMGNubDlJQ0FnSUNBZ0lDQWdJQ0J5WldkcGMzUnllVnh1SUNBcUwxeHVJQ0JuWlhRZ2NtVm5hWE4wY25rb0tTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0J5WlhSMWNtNGdYM1JvYVhNdVgzSmxaMmx6ZEhKNU8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2dVMlYwSUhSb1pTQnlaV2RwYzNSeWVTQnBiaUIwYUdseklHbGtUVzlrZFd4bFhHNGdJQ29nUUhCaGNtRnRJSHR5WldkcGMzUnllWDBnSUNBZ0lISmxaMXh1SUNBcUwxeHVJQ0J6WlhRZ2NtVm5hWE4wY25rb2NtVm5hWE4wY25rcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJRjkwYUdsekxsOXlaV2RwYzNSeWVTQTlJSEpsWjJsemRISjVPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nUm5WdVkzUnBiMjRnZEc4Z2NtVjBkWEp1SUdGc2JDQjBhR1VnYVdSbGJuUnBkR2xsY3lCeVpXZHBjM1JsY21Wa0lIZHBkR2hwYmlCaElITmxjM05wYjI0Z1lua2dZU0IxYzJWeUxseHVJQ0FxSUZSb1pYTmxJR2xrWlc1MGFYUnBaWE1nWVhKbElISmxkSFZ5Ym1Wa0lHbHVJR0Z1SUdGeWNtRjVJR052Ym5SaGFXNXBibWNnWVNCS1UwOU9JSEJoWTJ0aFoyVWdabTl5SUdWaFkyZ2dkWE5sY2lCcFpHVnVkR2wwZVM1Y2JpQWdLaUJBY21WMGRYSnVJSHRCY25KaGVUeEpaR1Z1ZEdsMGFXVnpQbjBnSUNBZ0lDQWdJQ0JKWkdWdWRHbDBhV1Z6WEc0Z0lDb3ZYRzRnSUdkbGRFbGtaVzUwYVhScFpYTW9LU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNiaUFnSUNCeVpYUjFjbTRnWDNSb2FYTXVhV1JsYm5ScGRHbGxjenRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUdkbGRITWdZV3hzSUhSb1pTQnBibVp2Y20xaGRHbHZiaUJtY205dElHRWdaMmwyWlc0Z2RYTmxjbFZTVEZ4dUlDQXFJRUJ3WVhKaGJTQWdlMU4wY21sdVozMGdJSFZ6WlhKVlVrd2dJQ0FnSUhWelpYSWdkWEpzWEc0Z0lDb2dRSEpsZEhWeWJpQjdTbE5QVG4wZ0lDQWdhV1JsYm5ScGRIa2dJQ0FnYVdSbGJuUnBkSGtnWW5WdVpHeGxJR1p5YjIwZ2RHaGxJSFZ6WlhKVlVreGNiaUFnS2k5Y2JpQWdaMlYwU1dSbGJuUnBkSGtvZFhObGNsVlNUQ2tnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQm1iM0lnS0d4bGRDQnBibVJsZUNCcGJpQmZkR2hwY3k1cFpHVnVkR2wwYVdWektTQjdYRzVjYmlBZ0lDQWdJR3hsZENCcFpHVnVkR2wwZVNBOUlGOTBhR2x6TG1sa1pXNTBhWFJwWlhOYmFXNWtaWGhkTzF4dUlDQWdJQ0FnYVdZZ0tHbGtaVzUwYVhSNUxtbGtaVzUwYVhSNUlEMDlQU0IxYzJWeVZWSk1LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJwWkdWdWRHbDBlVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBhSEp2ZHlBbmFXUmxiblJwZEhrZ2JtOTBJR1p2ZFc1a0p6dGNiaUFnZlZ4dVhHNGdJR2RsZEVsa1pXNTBhWFI1VDJaSWVYQmxjblI1S0doNWNHVnlkSGxWVWt3cElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4dUlDQWdJQ0FnYkdWMElITndiR2wwVlZKTUlEMGdhSGx3WlhKMGVWVlNUQzV6Y0d4cGRDZ25PaTh2SnlrN1hHNGdJQ0FnSUNCcFppQW9jM0JzYVhSVlVreGJNRjBnSVQwOUlDZG9lWEJsY25SNUp5a2dlMXh1SUNBZ0lDQWdJQ0JmZEdocGN5NWZaMlYwU0hsd1pYSjBlVVp5YjIxRVlYUmhUMkpxWldOMEtHaDVjR1Z5ZEhsVlVrd3BMblJvWlc0b0tISmxkSFZ5Ym1Wa1NIbHdaWEowZVZWU1RDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0IxYzJWeVZWSk1JRDBnWDNSb2FYTXVjbVZuYVhOMGNua3VaMlYwU0hsd1pYSjBlVTkzYm1WeUtISmxkSFZ5Ym1Wa1NIbHdaWEowZVZWU1RDazdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tIVnpaWEpWVWt3cElIdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FXNWtaWGdnYVc0Z1gzUm9hWE11YVdSbGJuUnBkR2xsY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhV1JsYm5ScGRIa2dQU0JmZEdocGN5NXBaR1Z1ZEdsMGFXVnpXMmx1WkdWNFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2xrWlc1MGFYUjVMbWxrWlc1MGFYUjVJRDA5UFNCMWMyVnlWVkpNS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGMyOXNkbVVvYVdSbGJuUnBkSGt1YldWemMyRm5aVWx1Wm04cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaV3BsWTNRb0oyNXZJR2xrWlc1MGFYUjVJSGRoY3lCbWIzVnVaQ0FuS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnYkdWMElIVnpaWEpWVWt3Z1BTQmZkR2hwY3k1eVpXZHBjM1J5ZVM1blpYUkllWEJsY25SNVQzZHVaWElvYUhsd1pYSjBlVlZTVENrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gxYzJWeVZWSk1LU0I3WEc1Y2JpQWdJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBibVJsZUNCcGJpQmZkR2hwY3k1cFpHVnVkR2wwYVdWektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhV1JsYm5ScGRIa2dQU0JmZEdocGN5NXBaR1Z1ZEdsMGFXVnpXMmx1WkdWNFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBaR1Z1ZEdsMGVTNXBaR1Z1ZEdsMGVTQTlQVDBnZFhObGNsVlNUQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6YjJ4MlpTaHBaR1Z1ZEdsMGVTNXRaWE56WVdkbFNXNW1ieWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpXcGxZM1FvSjI1dklHbGtaVzUwYVhSNUlIZGhjeUJtYjNWdVpDNG5LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNvZ1JuVnVZM1JwYjI0Z2RHOGdjbVYwZFhKdUlHRnNiQ0IwYUdVZ2RYTmxjbk1nVlZKTWN5QnlaV2RwYzNSbGNtVmtJSGRwZEdocGJpQmhJSE5sYzNOcGIyNWNiaUFnS2lCVWFHVnpaU0IxYzJWeWN5QlZVa3h6SUdGeVpTQnlaWFIxY201bFpDQnBiaUJoYmlCaGNuSmhlU0J2WmlCemRISnBibWR6TGx4dUlDQXFJRUJ3WVhKaGJTQWdlMEp2YjJ4bFlXNTlJQ0JsYldGcGJFWnZjbTFoZENBb1QzQjBhVzl1WVd3cElDQWdZbTl2YkdWaGJpQjBieUJwYm1ScFkyRjBaU0IwYnlCeVpYUjFjbTRnYVc0Z1pXMWhhV3dnWm05eWJXRjBYRzRnSUNvZ1FISmxkSFZ5YmlCN1FYSnlZWGs4VTNSeWFXNW5QbjBnSUNBZ0lDQWdJQ0IxYzJWeWMxeHVJQ0FxTDF4dUlDQm5aWFJWYzJWeWMwbEVjeWhsYldGcGJFWnZjbTFoZENrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdiR1YwSUhWelpYSnpJRDBnVzEwN1hHNWNiaUFnSUNBdkwybG1JSEpsY1hWbGMzUWdZMjl0WlhNZ2QybDBhQ0IwYUdVZ1pXMWhhV3hHYjNKdFlYUWdiM0IwYVc5dUxDQjBhR1Z1SUdOdmJuWmxjblFnZFhKc0lIUnZJR1Z0WVdsc0lHWnZjbTFoZEZ4dUlDQWdJR3hsZENCamIyNTJaWEowWlhJZ1BTQW9aVzFoYVd4R2IzSnRZWFFwSUQ4Z1oyVjBWWE5sY2tWdFlXbHNSbkp2YlZWU1RDQTZJQ2gyWVd4MVpTa2dQVDRnZTNKbGRIVnliaUIyWVd4MVpUdDlPMXh1WEc0Z0lDQWdabTl5SUNoc1pYUWdhVzVrWlhnZ2FXNGdYM1JvYVhNdWFXUmxiblJwZEdsbGN5a2dlMXh1SUNBZ0lDQWdiR1YwSUdsa1pXNTBhWFI1SUQwZ1gzUm9hWE11YVdSbGJuUnBkR2xsYzF0cGJtUmxlRjA3WEc0Z0lDQWdJQ0IxYzJWeWN5NXdkWE5vS0dOdmJuWmxjblJsY2locFpHVnVkR2wwZVM1cFpHVnVkR2wwZVNrcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdkWE5sY25NN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0tpQkdkVzVqZEdsdmJpQjBieUJ5WlhSMWNtNGdkR2hsSUhObGJHVmpkR1ZrSUVsa1pXNTBhWFI1SUhkcGRHaHBiaUJoSUhObGMzTnBiMjVjYmlBZ0tpQkFjbVYwZFhKdUlIdEpaR1Z1ZEdsMGVYMGdJQ0FnSUNBZ0lHbGtaVzUwYVhSNUlDQWdJQ0FnSUNBZ2FXUmxiblJwZEhsY2JpQWdLaTljYmlBZ1oyVjBRM1Z5Y21WdWRFbGtaVzUwYVhSNUtDa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0FnY21WMGRYSnVJRjkwYUdsekxtTjFjbkpsYm5SSlpHVnVkR2wwZVR0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlFWjFibU4wYVc5dUlIUnZJSE5sZENCMGFHVWdZM1Z5Y21WdWRDQkpaR1Z1ZEdsMGVTQjNhWFJvSUdFZ1oybDJaVzRnU1dSbGJuUnBkSGxjYmlBZ0tpQkFjR0Z5WVcwZ2UwbGtaVzUwYVhSNWZTQWdJQ0FnSUNBZ2FXUmxiblJwZEhrZ0lDQWdJQ0FnSUNCcFpHVnVkR2wwZVZ4dUlDQXFMMXh1SUNCelpYUkRkWEp5Wlc1MFNXUmxiblJwZEhrb2FXUmxiblJwZEhrcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJRjkwYUdsekxtTjFjbkpsYm5SSlpHVnVkR2wwZVNBOUlHbGtaVzUwYVhSNU8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2dSblZ1WTNScGIyNGdkRzhnY21WdGIzWmxJSFJvWlNCaGJpQnBaR1Z1ZEdsMGVTQm1jbTl0SUhSb1pTQkpaR1Z1ZEdsMGFXVnpJR0Z5Y21GNVhHNGdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJQ0FnSUhWelpYSlZVa3dnSUNBZ0lDQjFjMlZ5VlZKTVhHNGdJQ292WEc0Z0lHUmxiR1YwWlVsa1pXNTBhWFI1S0hWelpYSlZVa3dwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdabTl5SUNoc1pYUWdhV1JsYm5ScGRIa2dhVzRnWDNSb2FYTXVhV1JsYm5ScGRHbGxjeWtnZTF4dUlDQWdJQ0FnYVdZZ0tGOTBhR2x6TG1sa1pXNTBhWFJwWlhOYmFXUmxiblJwZEhsZExtbGtaVzUwYVhSNUlEMDlQU0IxYzJWeVZWSk1LU0I3WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbWxrWlc1MGFYUnBaWE11YzNCc2FXTmxLR2xrWlc1MGFYUjVMQ0F4S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCR2RXNWpkR2x2YmlCMGFHRjBJSEpsYzI5c2RtVWdZVzVrSUdOeVpXRjBaU0IwYUdVZ1pHOXRZV2x1VlZKTUlHbHVJR05oYzJVZ2FYUWdhWE1nY0hKdmRtbGtaV1FnYjI1bExpQkpaaUJ1YjNRc0lISmxjMjlzZG1VZ2RHaGxJR1JsWm1GMWJIUWdaRzl0WVdsdVZWSk1YRzRnSUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUNBZ0lDQnBaSEJFYjIxaGFXNGdJQ0FnSUdsa2NFUnZiV0ZwYmlBb1QzQjBhVzl1WVd3cFhHNGdJQ292WEc0Z0lGOXlaWE52YkhabFJHOXRZV2x1S0dsa2NFUnZiV0ZwYmlrZ2UxeHVJQ0FnSUdsbUlDZ2hhV1J3Ukc5dFlXbHVLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdKMlJ2YldGcGJpMXBaSEE2THk5bmIyOW5iR1V1WTI5dEp6dGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnY21WMGRYSnVJQ2RrYjIxaGFXNHRhV1J3T2k4dkp5QXJJR2xrY0VSdmJXRnBianRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdLaUJHZFc1amRHbHZiaUIwYnlCc2IyZHBiaUJoSUhWelpYSWdkMmwwYUdsdUlIUm9aU0J6WlhOemFXOXVMQ0JwZENCM2FXeHNJSE4wWVhKMElIUm9aU0J3Y205alpYTnpJSFJ2SUc5aWRHRnBiaUJoYmlCSlpHVnVkR2wwZVNCbWNtOXRJR0VnZFhObGNpd2dhVzVqYkhWa2FXNW5JSFJvWlNCeVpYRjFaWE4wSUdadmNpQmhiaUJwWkdWdWRHbDBlU0JCYzNObGNuUnBiMjR1SUZSb1pTQm1kVzVqZEdsdmJpQnlaWFIxY201eklHRWdjSEp2YldselpTQjNhWFJvSUhSb1pTQjBiMnRsYmlCeVpXTmxhWFpsWkNCaWVTQjBhR1VnYVdSd1VISnZlSGt1WEc0Z0lDcGNiaUFnS2lCQWNHRnlZVzBnSUh0SlpHVnVkR2xtYVdWeWZTQWdJQ0FnSUdsa1pXNTBhV1pwWlhJZ0lDQWdJQ0JwWkdWdWRHbG1hV1Z5WEc0Z0lDb2dRSEJoY21GdElDQjdVMk52Y0dWOUlDQWdJQ0FnSUNBZ0lDQnpZMjl3WlNBZ0lDQWdJQ0FnSUNBZ2MyTnZjR1ZjYmlBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQWdJQ0FnSUNBZ0lGQnliMjFwYzJVZ0lDQWdJQ0FnSUNCSlJGUnZhMlZ1SUdOdmJuUmhhVzVwYm1jZ2RHaGxJSFZ6WlhJZ2FXNW1iM0p0WVhScGIyNWNiaUFnS2k5Y2JpQWdiRzluYVc1WGFYUm9VbEFvYVdSbGJuUnBabWxsY2l3Z2MyTnZjR1VwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dlMXh1WEc0Z0lDQWdJQ0F2TDFSUFJFOGdjbVZ0YjNabElIUm9hWE1nZG1WeWFXWnBZMkYwYVc5dUlHRnVaQ0J5WldaaFkzUnZjaUIwYUdseklIQmhjblJjYmlBZ0lDQWdJRjkwYUdsekxtTjFjbkpsYm5SSlpHVnVkR2wwZVNBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBZ0lGOTBhR2x6TG1kbGRFbGtaVzUwYVhSNVFYTnpaWEowYVc5dUtDZHBaR1Z1ZEdsbWFXVnlKeXdnSjI5eWFXZHBiaWNzSUNkb2FXNTBKeXdnYVdSbGJuUnBabWxsY2lrdWRHaGxiaWhtZFc1amRHbHZiaWgyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnbmJHOW5hVzVYYVhSb1VsQW5LVHRjYmlBZ0lDQWdJQ0FnY21WemIyeDJaU2gyWVd4MVpTazdYRzRnSUNBZ0lDQjlMQ0JtZFc1amRHbHZiaWhsY25JcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjJ4dloybHVWMmwwYUZKUUlHVnljaWNwTzF4dUlDQWdJQ0FnSUNCeVpXcGxZM1FvWlhKeUtUdGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nUm5WdVkzUnBiMjRnZEdoaGRDQm1aWFJqYUNCaGJpQnBaR1Z1ZEdsMGVVRnpjMlZ5ZEdsdmJpQm1jbTl0SUdFZ2RYTmxjaTVjYmlBZ0tseHVJQ0FxSUVCeVpYUjFjbTRnZTBsa1FYTnpaWEowYVc5dWZTQWdJQ0FnSUNBZ0lDQWdJQ0FnU1dSQmMzTmxjblJwYjI1Y2JpQWdLaTljYmlBZ1oyVjBTV1JsYm5ScGRIbEJjM05sY25ScGIyNG9hV1JsYm5ScFptbGxjaXdnYjNKcFoybHVMQ0IxYzJWeWJtRnRaVWhwYm5Rc0lHbGtjRVJ2YldGcGJpa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN4eVpXcGxZM1FwSUh0Y2JseHVJQ0FnSUNBZ2FXWWdLRjkwYUdsekxtTjFjbkpsYm5SSlpHVnVkR2wwZVNBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUM4dlZFOUVUeUIyWlhKcFpua2dkMmhsZEdobGNpQjBhR1VnZEc5clpXNGdhWE1nYzNScGJHd2dkbUZzYVdRZ2IzSWdibTkwTGx4dUlDQWdJQ0FnSUNBdkx5QnphRzkxYkdRZ1ltVWdibVZsWkdWa0lIUnZJRzFoYTJVZ1puVnlkR2hsY2lCeVpYRjFaWE4wY3l3Z2RHOGdiMkowWVdsdUlHRWdkbUZzYVdRZ2RHOXJaVzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYzI5c2RtVW9YM1JvYVhNdVkzVnljbVZ1ZEVsa1pXNTBhWFI1S1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc1Y2JpQWdJQ0FnSUNBZ0x5OURTRVZEU3lCM2FHVjBhR1Z5SUdseklHSnliM2R6WlhJZ1pXNTJhWEp2Ym0xbGJuUWdiM0lnYm05a1pXcHpYRzRnSUNBZ0lDQWdJQzh2YVdZZ2FYUWdhWE1nWW5KdmQzTmxjaXdnZEdobGJpQmpjbVZoZEdVZ1lTQm1ZV3RsSUdsa1pXNTBhWFI1WEc1Y2JpQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9kMmx1Wkc5M0tTQjdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J3ZFdKc2FXTkxaWGs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZFhObGNtdGxlVkJoYVhJN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dloyVnVaWEpoZEdWeklIUm9aU0JTVTBFZ2EyVjVJSEJoYVhKY2JpQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtTnllWEIwYnk1blpXNWxjbUYwWlZKVFFVdGxlVkJoYVhJb0tTNTBhR1Z1S0daMWJtTjBhVzl1S0d0bGVWQmhhWElwSUh0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2RXSnNhV05MWlhrZ1BTQmlkRzloS0d0bGVWQmhhWEl1Y0hWaWJHbGpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkWE5sY210bGVWQmhhWElnUFNCclpYbFFZV2x5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdYM1JvYVhNdVoyVnVaWEpoZEdWQmMzTmxjblJwYjI0b2NIVmliR2xqUzJWNUxDQnZjbWxuYVc0c0lDY25MQ0IxYzJWeWEyVjVVR0ZwY2l3Z2FXUndSRzl0WVdsdUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTa3VkR2hsYmlobWRXNWpkR2x2YmloMWNtd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGOTBhR2x6TG1kbGJtVnlZWFJsUVhOelpYSjBhVzl1S0hCMVlteHBZMHRsZVN3Z2IzSnBaMmx1TENCMWNtd3NJSFZ6WlhKclpYbFFZV2x5TENCcFpIQkViMjFoYVc0cE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtTNTBhR1Z1S0daMWJtTjBhVzl1S0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxhbVZqZENnblJYSnliM0lnYjI0Z2IySjBZV2x1YVc1bklFbGtaVzUwYVhSNUp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgwcExtTmhkR05vS0daMWJtTjBhVzl1S0dWeWNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWhsY25JcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvWlhKeUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNCallYUmphQ0FvWlhKeWIzSXBJSHRjYmlBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25aMlYwU1dSbGJuUnBkSGxCYzNObGNuUnBiMjRnWm05eUlHNXZaR1ZxY3ljcE8xeHVJQ0FnSUNBZ0lDQWdJR3hsZENCeVlXNWtiMjFPZFcxaVpYSWdQU0JOWVhSb0xtWnNiMjl5S0NoTllYUm9MbkpoYm1SdmJTZ3BJQ29nTVRBd01EQXBJQ3NnTVNrN1hHNGdJQ0FnSUNBZ0lDQWdiR1YwSUdsa1pXNTBhWFI1UW5WdVpHeGxJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZWE56WlhKMGFXOXVPaUFuWVhOelpYSjBhVzl1Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xrY0RvbmJtOWtaV3B6Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFZ6WlhKUWNtOW1hV3hsT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdGMllYUmhjam9nSjJoMGRIQnpPaTh2YkdnekxtZHZiMmRzWlhWelpYSmpiMjUwWlc1MExtTnZiUzh0VjJGRGNtcFdUVTFXTFZFdlFVRkJRVUZCUVVGQlFVa3ZRVUZCUVVGQlFVRkJRWE12T0U5c1ZuRkRjRk5DT1dNdmNHaHZkRzh1YW5Cbkp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyNDZJQ2QwWlhOMElHNXZaR1ZxY3ljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhWelpYSnVZVzFsT2lBbmJtOWtaV3B6TFNjZ0t5QnlZVzVrYjIxT2RXMWlaWElnS3lBblFHNXZaR1ZxY3k1amIyMG5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjFjMlZ5VlZKTU9pQW5kWE5sY2pvdkwyNXZaR1ZxY3k1amIyMHZibTlrWldwekxTY2dLeUJ5WVc1a2IyMU9kVzFpWlhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDE5TzF4dUlDQWdJQ0FnSUNBZ0lGOTBhR2x6TG1OMWNuSmxiblJKWkdWdWRHbDBlU0E5SUdsa1pXNTBhWFI1UW5WdVpHeGxPMXh1SUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbWxrWlc1MGFYUnBaWE11Y0hWemFDaHBaR1Z1ZEdsMGVVSjFibVJzWlNrN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISmxjMjlzZG1Vb2FXUmxiblJwZEhsQ2RXNWtiR1VwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0tpQlNaWEYxWlhOMGN5QjBhR1VnU1dSd1VISnZlSGtnWm5KdmJTQmhJR2RwZG1WdUlFUnZiV0ZwYmlCbWIzSWdZVzRnYVdSbGJuUnBkSGxCYzNObGNuUnBiMjVjYmlBZ0tseHVJQ0FxSUVCd1lYSmhiU0FnZTBSUFRWTjBjbWx1WjMwZ1kyOXVkR1Z1ZEhNZ0lDQWdJR052Ym5SbGJuUnpYRzRnSUNvZ1FIQmhjbUZ0SUNCN1JFOU5VM1J5YVc1bmZTQnZjbWxuYVc0Z0lDQWdJQ0FnYjNKcFoybHVYRzRnSUNvZ1FIQmhjbUZ0SUNCN1JFOU5VM1J5YVc1bmZTQjFjMlZ5Ym1GdFpVaHBiblFnZFhObGNtNWhiV1ZJYVc1MFhHNGdJQ29nUUhCaGNtRnRJQ0I3U2xOUFRuMGdJQ0FnSUNCclpYbFFZV2x5SUNBZ0lDQWdJSFZ6WlhJZ2EyVjVVR0ZwY2x4dUlDQXFJRUJ5WlhSMWNtNGdlMGxrUVhOelpYSjBhVzl1ZlNBZ0lDQWdJQ0FnSUNBZ0lDQWdTV1JCYzNObGNuUnBiMjVjYmlBZ0tpOWNiaUFnWjJWdVpYSmhkR1ZCYzNObGNuUnBiMjRvWTI5dWRHVnVkSE1zSUc5eWFXZHBiaXdnZFhObGNtNWhiV1ZJYVc1MExDQnJaWGxRWVdseUxDQnBaSEJFYjIxaGFXNHBJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUd4bGRDQmtiMjFoYVc0Z1BTQmZkR2hwY3k1ZmNtVnpiMngyWlVSdmJXRnBiaWhwWkhCRWIyMWhhVzRwTzF4dUlDQWdJR3hsZENCdFpYTnpZV2RsTzF4dVhHNGdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oyZGxibVZ5WVhSbFFYTnpaWEowYVc5dUp5azdYRzVjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTeHlaV3BsWTNRcElIdGNibHh1SUNBZ0lDQWdiV1Z6YzJGblpTQTlJSHQwZVhCbE9pZGxlR1ZqZFhSbEp5d2dkRzg2SUdSdmJXRnBiaXdnWm5KdmJUb2dYM1JvYVhNdVgybGtiVlZTVEN3Z1ltOWtlVG9nZTNKbGMyOTFjbU5sT2lBbmFXUmxiblJwZEhrbkxDQnRaWFJvYjJRNklDZG5aVzVsY21GMFpVRnpjMlZ5ZEdsdmJpY3NJSEJoY21GdGN6b2dlMk52Ym5SbGJuUnpPaUJqYjI1MFpXNTBjeXdnYjNKcFoybHVPaUJ2Y21sbmFXNHNJSFZ6WlhKdVlXMWxTR2x1ZERvZ2RYTmxjbTVoYldWSWFXNTBmWDE5TzF4dVhHNGdJQ0FnSUNCZmRHaHBjeTVmYldWemMyRm5aVUoxY3k1d2IzTjBUV1Z6YzJGblpTaHRaWE56WVdkbExDQW9jbVZ6S1NBOVBpQjdYRzRnSUNBZ0lDQWdJR3hsZENCeVpYTjFiSFFnUFNCeVpYTXVZbTlrZVM1MllXeDFaVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9jbVZ6ZFd4MExteHZaMmx1VlhKc0tTQjdYRzVjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdkMmx1SUQwZ2QybHVaRzkzTG05d1pXNG9jbVZ6ZFd4MExteHZaMmx1VlhKc0xDQW5iM0JsYmtsRWNtVnhkV1Z6ZENjc0lDZDNhV1IwYUQwNE1EQXNJR2hsYVdkb2REMDJNREFuS1R0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvZDJsdVpHOTNMbU52Y21SdmRtRXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIZHBiaTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RzYjJGa2MzUmhjblFuTENCbWRXNWpkR2x2YmlobEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IxY213Z1BTQmxMblZ5YkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHTnZaR1VnUFNBdlhGd21ZMjlrWlQwb0xpc3BKQzh1WlhobFl5aDFjbXdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1pYSnliM0lnUFNBdlhGd21aWEp5YjNJOUtDNHJLU1F2TG1WNFpXTW9kWEpzS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZMjlrWlNCOGZDQmxjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZHBiaTVqYkc5elpTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9kWEpzS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCd2IyeHNWR2x0WlhJZ1BTQnpaWFJKYm5SbGNuWmhiQ2htZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZDJsdUxtTnNiM05sWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtDZFRiMjFsSUdWeWNtOXlJRzlqWTNWeVpXUWdkMmhsYmlCMGNubHBibWNnZEc4Z1oyVjBJR2xrWlc1MGFYUjVMaWNwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGxZWEpKYm5SbGNuWmhiQ2h3YjJ4c1ZHbHRaWElwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gzYVc0dVpHOWpkVzFsYm5RdVZWSk1MbWx1WkdWNFQyWW9KMmxrWDNSdmEyVnVKeWtnSVQwOUlDMHhJSHg4SUhkcGJpNWtiMk4xYldWdWRDNVZVa3d1YVc1a1pYaFBaaWhzYjJOaGRHbHZiaTV2Y21sbmFXNHBJQ0U5UFNBdE1Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZDJsdVpHOTNMbU5zWldGeVNXNTBaWEoyWVd3b2NHOXNiRlJwYldWeUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMWNtd2dQU0FnSUhkcGJpNWtiMk4xYldWdWRDNVZVa3c3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZHBiaTVqYkc5elpTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2gxY213cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2WTI5dWMyOXNaUzVzYjJjb1pTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgwc0lEVXdNQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSEpsYzNWc2RDa2dlMXh1WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJR0Z6YzJWeWRHbHZibEJoY25ObFpDQTlJRXBUVDA0dWNHRnljMlVvWVhSdllpaHlaWE4xYkhRdVlYTnpaWEowYVc5dUtTazdYRzRnSUNBZ0lDQWdJQ0FnYkdWMElHbGtWRzlyWlc0N1hHNWNiaUFnSUNBZ0lDQWdJQ0F2TDFSUFJFOGdjbVZ0YjNabElIUm9aU0IyWlhKcFptbGpZWFJwYjI0Z1lXNWtJSEpsYlc5MlpTQjBhR1VnZEc5clpXNUpSRXBUVDA0Z1puSnZiU0IwYUdVZ1oyOXZaMnhsSUdsa2NGQnliM2g1TzF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hoYzNObGNuUnBiMjVRWVhKelpXUXVkRzlyWlc1SlJFcFRUMDRwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xrVkc5clpXNGdQU0JoYzNObGNuUnBiMjVRWVhKelpXUXVkRzlyWlc1SlJFcFRUMDQ3WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xrVkc5clpXNGdQU0JoYzNObGNuUnBiMjVRWVhKelpXUTdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0dsa1ZHOXJaVzRwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDNXBaR1Z1ZEdsMGVTQTlJR2RsZEZWelpYSlZVa3hHY205dFJXMWhhV3dvYVdSVWIydGxiaTVsYldGcGJDazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TG1sa1pXNTBhWFI1TG1Ga1pFbGtaVzUwYVhSNUtISmxjM1ZzZENrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHTm9aV05ySUdsbUlHVjRhWE4wY3lCaGJua2dhVzVtYjFSdmEyVnVJR2x1SUhSb1pTQnlaWE4xYkhRZ2NtVmpaV2wyWldSY2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcGJtWnZWRzlyWlc0Z1BTQW9jbVZ6ZFd4MExtbHVabTlVYjJ0bGJpa2dQeUJ5WlhOMWJIUXVhVzVtYjFSdmEyVnVJRG9nZTMwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RYTmxjbEJ5YjJacGJHVkNkVzVrYkdVZ1BTQjdkWE5sY201aGJXVTZJR2xrVkc5clpXNHVaVzFoYVd3c0lHTnVPaUJwWkZSdmEyVnVMbTVoYldVc0lHRjJZWFJoY2pvZ2FXNW1iMVJ2YTJWdUxuQnBZM1IxY21Vc0lHeHZZMkZzWlRvZ2FXNW1iMVJ2YTJWdUxteHZZMkZzWlN3Z2RYTmxjbFZTVERvZ1oyVjBWWE5sY2xWU1RFWnliMjFGYldGcGJDaHBaRlJ2YTJWdUxtVnRZV2xzS1gwN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dlkzSmxZWFJwYjI0Z2IyWWdZU0J1WlhjZ1NsTlBUaUIzYVhSb0lIUm9aU0JwWkdWdWRHbDBlU0IwYnlCelpXNWtJSFpwWVNCdFpYTnpZV2RsYzF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUc1bGQwbGtaVzUwYVhSNUlEMGdlM1Z6WlhKUWNtOW1hV3hsT2lCMWMyVnlVSEp2Wm1sc1pVSjFibVJzWlN3Z2FXUndPaUJ5WlhOMWJIUXVhV1J3TG1SdmJXRnBiaXdnWVhOelpYSjBhVzl1T2lCeVpYTjFiSFF1WVhOelpYSjBhVzl1ZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDNXRaWE56WVdkbFNXNW1ieUE5SUc1bGQwbGtaVzUwYVhSNU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBMbXRsZVZCaGFYSWdQU0JyWlhsUVlXbHlPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1amRYSnlaVzUwU1dSbGJuUnBkSGtnUFNCdVpYZEpaR1Z1ZEdsMGVUdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbWxrWlc1MGFYUnBaWE11Y0hWemFDaHlaWE4xYkhRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2h1WlhkSlpHVnVkR2wwZVNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0NkbGNuSnZjaUJ2YmlCdlluUmhhVzVwYm1jZ2FXUmxiblJwZEhrZ2FXNW1iM0p0WVhScGIyNG5LVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJRTlVU0VWU0lGVlRSVkluVXlCSlJFVk9WRWxVV1Z4dUlDQXFMMXh1WEc0Z0lDOHFLbHh1SUNBcUlGSmxjWFZsYzNSeklIUm9aU0JKWkhCUWNtOTRlU0JtY205dElHRWdaMmwyWlc0Z1JHOXRZV2x1SUhSdklIWmhiR2xrWVhSbElHRnVJRWxrWlc1MGFYUjVRWE56WlhKMGFXOXVYRzRnSUNvZ1VtVjBkWEp1Y3lCaElIQnliMjFwYzJVZ2QybDBhQ0IwYUdVZ2NtVnpkV3gwSUdaeWIyMGdkR2hsSUhaaGJHbGtZWFJwYjI0dVhHNGdJQ29nUUhCaGNtRnRJQ0I3UkU5TlUzUnlhVzVuZlNCaGMzTmxjblJwYjI1Y2JpQWdLaUJBY0dGeVlXMGdJSHRFVDAxVGRISnBibWQ5SUc5eWFXZHBiaUFnSUNBZ0lDQnZjbWxuYVc1Y2JpQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0FnSUNBZ0lDQWdJRkJ5YjIxcGMyVWdJQ0FnSUNBZ0lDQndjbTl0YVhObElIZHBkR2dnZEdobElISmxjM1ZzZENCbWNtOXRJSFJvWlNCMllXeHBaR0YwYVc5dVhHNGdJQ292WEc0Z0lIWmhiR2xrWVhSbFFYTnpaWEowYVc5dUtHRnpjMlZ5ZEdsdmJpd2diM0pwWjJsdUxDQnBaSEJFYjIxaGFXNHBJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ2JHVjBJR1J2YldGcGJpQTlJRjkwYUdsekxsOXlaWE52YkhabFJHOXRZV2x1S0dsa2NFUnZiV0ZwYmlrN1hHNWNiaUFnSUNCc1pYUWdiV1Z6YzJGblpTQTlJSHQwZVhCbE9pZEZXRVZEVlZSRkp5d2dkRzg2SUdSdmJXRnBiaXdnWm5KdmJUb2dYM1JvYVhNdVgybGtiVlZTVEN3Z1ltOWtlVG9nZTNKbGMyOTFjbU5sT2lBbmFXUmxiblJwZEhrbkxDQnRaWFJvYjJRNklDZDJZV3hwWkdGMFpVRnpjMlZ5ZEdsdmJpY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCd1lYSmhiWE02SUh0aGMzTmxjblJwYjI0NklHRnpjMlZ5ZEdsdmJpd2diM0pwWjJsdU9pQnZjbWxuYVc1OWZYMDdYRzVjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYRzRnSUNBZ0lDQmZkR2hwY3k1ZmJXVnpjMkZuWlVKMWN5NXdiM04wVFdWemMyRm5aU2h0WlhOellXZGxMQ0FvY21WemRXeDBLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h5WlhOMWJIUXVZbTlrZVM1amIyUmxJRDA5UFNBeU1EQXBJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0hKbGMzVnNkQzVpYjJSNUxuWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb0oyVnljbTl5Snl3Z2NtVnpkV3gwTG1KdlpIa3VZMjlrWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnWlc1amNubHdkRTFsYzNOaFoyVW9iV1Z6YzJGblpTa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCamIyNXpiMnhsTG14dlp5Z25aVzVqY25sd2RDQnRaWE56WVdkbElDY3BPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dlMXh1SUNBZ0lDQWdiR1YwSUdselNHRnVaRk5vWVd0bFZIbHdaU0E5SUcxbGMzTmhaMlV1ZEhsd1pTQTlQVDBnSjJoaGJtUnphR0ZyWlNjN1hHNWNiaUFnSUNBZ0lDOHZhV1lnYVhNZ2JtOTBJSFJ2SUdGd2NHeDVJR1Z1WTNKNWNIUnBiMjRzSUhSb1pXNGdjbVYwZFhKdWN5QnlaWE52YkhabFhHNGdJQ0FnSUNCcFppQW9JVjkwYUdsekxtbHpWRzlWYzJWRmJtTnllWEIwYVc5dUlDWW1JQ0ZwYzBoaGJtUlRhR0ZyWlZSNWNHVXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oyVnVZM0o1Y0hScGIyNGdaR2x6WVdKc1pXUW5LVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYzI5c2RtVW9iV1Z6YzJGblpTazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2VkU5RVR5QnlaVzF2ZG1VZ2RHaHBjeUJzYjJkcFl5QmhibVFnYlc5MlpTQnBkQ0IwYnlCaElIVjBhV3dnWm5WdVkzUnBiMjVjYmlBZ0lDQWdJR3hsZENCemNHeHBkR1ZrVkc5VlVrd2dQU0J0WlhOellXZGxMblJ2TG5Od2JHbDBLQ2N2SnlrN1hHNGdJQ0FnSUNCc1pYUWdaR0YwWVU5aWFtVmpkRlZTVENBOUlITndiR2wwWldSVWIxVlNURnN3WFNBcklDY3ZMeWNnS3lCemNHeHBkR1ZrVkc5VlVreGJNbDBnS3lBbkx5Y2dLeUJ6Y0d4cGRHVmtWRzlWVWt4Yk0xMDdYRzRnSUNBZ0lDQnBaaUFvYzNCc2FYUmxaRlJ2VlZKTUxteGxibWQwYUNBK0lEWXBJSHRjYmlBZ0lDQWdJQ0FnWkdGMFlVOWlhbVZqZEZWU1RDQTlJSE53YkdsMFpXUlViMVZTVEZzd1hTQXJJQ2N2THljZ0t5QnpjR3hwZEdWa1ZHOVZVa3hiTWwwZ0t5QW5MeWNnS3lCemNHeHBkR1ZrVkc5VlVreGJNMTBnS3lBbkx5Y2dLeUJ6Y0d4cGRHVmtWRzlWVWt4Yk5GMDdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR3hsZENCcGMxUnZSR0YwWVU5aWFtVmpkQ0E5SUdselJHRjBZVTlpYW1WamRGVlNUQ2hrWVhSaFQySnFaV04wVlZKTUtUdGNiaUFnSUNBZ0lHeGxkQ0JwYzBaeWIyMUllWEJsY25SNUlEMGdaR2wyYVdSbFZWSk1LRzFsYzNOaFoyVXVabkp2YlNrdWRIbHdaU0E5UFQwZ0oyaDVjR1Z5ZEhrbk8xeHVJQ0FnSUNBZ2JHVjBJR2x6Vkc5SWVYQmxjblI1SUQwZ1pHbDJhV1JsVlZKTUtHMWxjM05oWjJVdWRHOHBMblI1Y0dVZ1BUMDlJQ2RvZVhCbGNuUjVKenRjYmx4dUlDQWdJQ0FnYVdZZ0tHbHpSbkp2YlVoNWNHVnlkSGtnSmlZZ2FYTlViMGg1Y0dWeWRIa3BJSHRjYmlBZ0lDQWdJQ0FnYkdWMElIVnpaWEpWVWt3Z1BTQmZkR2hwY3k1ZmNtVm5hWE4wY25rdVoyVjBTSGx3WlhKMGVVOTNibVZ5S0cxbGMzTmhaMlV1Wm5KdmJTazdYRzRnSUNBZ0lDQWdJR2xtSUNoMWMyVnlWVkpNS1NCN1hHNWNiaUFnSUNBZ0lDQWdJQ0F2THlCamFHVmpheUJwWmlCbGVHbHpkSE1nWVc1NUlHdGxlWE1nWW1WMGQyVmxiaUIwZDI4Z2RYTmxjbk5jYmlBZ0lDQWdJQ0FnSUNCc1pYUWdZMmhoZEV0bGVYTWdQU0JmZEdocGN5NWphR0YwUzJWNWMxdHRaWE56WVdkbExtWnliMjBnS3lBblBDMCtKeUFySUcxbGMzTmhaMlV1ZEc5ZE8xeHVJQ0FnSUNBZ0lDQWdJR2xtSUNnaFkyaGhkRXRsZVhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOb1lYUkxaWGx6SUQwZ1gzUm9hWE11WDI1bGQwTm9ZWFJEY25sd2RHOG9iV1Z6YzJGblpTd2dkWE5sY2xWU1RDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25ZM0psWVhSbFEyaGhkRXRsZVNCbGJtTnllWEIwSnl3Z2JXVnpjMkZuWlM1bWNtOXRJQ3NnYldWemMyRm5aUzUwYnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NWphR0YwUzJWNWMxdHRaWE56WVdkbExtWnliMjBnS3lBblBDMCtKeUFySUcxbGMzTmhaMlV1ZEc5ZElEMGdZMmhoZEV0bGVYTTdYRzRnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsTG1KdlpIa3VhR0Z1WkhOb1lXdGxVR2hoYzJVZ1BTQW5jM1JoY25SSVlXNWtVMmhoYTJVbk8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hqYUdGMFMyVjVjeTVoZFhSb1pXNTBhV05oZEdWa0lDWW1JQ0ZwYzBoaGJtUlRhR0ZyWlZSNWNHVXBJSHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdsMklEMGdYM1JvYVhNdVkzSjVjSFJ2TG1kbGJtVnlZWFJsU1ZZb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbU55ZVhCMGJ5NWxibU55ZVhCMFFVVlRLR05vWVhSTFpYbHpMbXRsZVhNdWFIbHdaWEowZVVaeWIyMVRaWE56YVc5dVMyVjVMQ0J0WlhOellXZGxMbUp2WkhrdWRtRnNkV1VzSUdsMktTNTBhR1Z1S0dWdVkzSjVjSFJsWkZaaGJIVmxJRDArSUh0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdabWxzZEdWeVpXUk5aWE56WVdkbElEMGdYM1JvYVhNdVgyWnBiSFJsY2sxbGMzTmhaMlZVYjBoaGMyZ29iV1Z6YzJGblpTd2diV1Z6YzJGblpTNWliMlI1TG5aaGJIVmxJQ3NnYVhZc0lHTm9ZWFJMWlhsekxtaDVjR1Z5ZEhsR2NtOXRMbTFsYzNOaFoyVkpibVp2S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVqY25sd2RHOHVhR0Z6YUVoTlFVTW9ZMmhoZEV0bGVYTXVhMlY1Y3k1b2VYQmxjblI1Um5KdmJVaGhjMmhMWlhrc0lHWnBiSFJsY21Wa1RXVnpjMkZuWlNrdWRHaGxiaWhvWVhOb0lEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2TDJOdmJuTnZiR1V1Ykc5bktDZHlaWE4xYkhRZ2IyWWdhR0Z6YUNBbkxDQm9ZWE5vS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkbUZzZFdVZ1BTQjdhWFk2SUY5MGFHbHpMbU55ZVhCMGJ5NWxibU52WkdVb2FYWXBMQ0IyWVd4MVpUb2dYM1JvYVhNdVkzSjVjSFJ2TG1WdVkyOWtaU2hsYm1OeWVYQjBaV1JXWVd4MVpTa3NJR2hoYzJnNklGOTBhR2x6TG1OeWVYQjBieTVsYm1OdlpHVW9hR0Z6YUNsOU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWxjM05oWjJVdVltOWtlUzUyWVd4MVpTQTlJR0owYjJFb1NsTlBUaTV6ZEhKcGJtZHBabmtvZG1Gc2RXVXBLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvYldWemMyRm5aU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdsbUlHbHpJR0VnYUdGdVpITm9ZV3RsSUcxbGMzTmhaMlVzSUdwMWMzUWdjbVZ6YjJ4MlpTQnBkRnh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FYTklZVzVrVTJoaGEyVlVlWEJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLRzFsYzNOaFoyVXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJsYkhObExDQnpkR0Z5ZEhNZ1lTQnVaWGNnYUdGdVpITm9ZV3RsSUhCeWIzUnZZMjlzWEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxsOWtiMGhoYm1SVGFHRnJaVkJvWVhObEtHMWxjM05oWjJVc0lHTm9ZWFJMWlhsektTNTBhR1Z1S0daMWJtTjBhVzl1S0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtTm9ZWFJMWlhselcyMWxjM05oWjJVdVpuSnZiU0FySUNjOExUNG5JQ3NnYldWemMyRm5aUzUwYjEwZ1BTQjJZV3gxWlM1amFHRjBTMlY1Y3p0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVmYldWemMyRm5aVUoxY3k1d2IzTjBUV1Z6YzJGblpTaDJZV3gxWlM1dFpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLQ2RsYm1OeWVYQjBJR2hoYm1SemFHRnJaU0J3Y205MGIyTnZiQ0J3YUdGelpTQW5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQXZMMmxtSUdaeWIyMGdhSGx3WlhKMGVTQjBieUJoSUdSaGRHRlBZbXBsWTNSVlVreGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9hWE5HY205dFNIbHdaWEowZVNBbUppQnBjMVJ2UkdGMFlVOWlhbVZqZENrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduWkdGMFlVOWlhbVZqZENCMllXeDFaU0IwYnlCbGJtTnllWEIwT2lBbkxDQnRaWE56WVdkbExtSnZaSGt1ZG1Gc2RXVXBPMXh1WEc0Z0lDQWdJQ0FnSUd4bGRDQmtZWFJoVDJKcVpXTjBTMlY1SUQwZ1gzUm9hWE11WkdGMFlVOWlhbVZqZEZObGMzTnBiMjVMWlhselcyUmhkR0ZQWW1wbFkzUlZVa3hkTzF4dVhHNGdJQ0FnSUNBZ0lDOHZhV1lnYm04Z2EyVjVJR1Y0YVhOMGN5d2dZM0psWVhSbElHRWdibVYzSUc5dVpTQnBaaUJwY3lCMGFHVWdjbVZ3YjNKMFpYSWdiMllnWkdGMFlVOWlhbVZqZEZ4dUlDQWdJQ0FnSUNCcFppQW9JV1JoZEdGUFltcGxZM1JMWlhrcElIdGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2FYTkllWEJsY25SNVVtVndiM0owWlhJZ1BTQmZkR2hwY3k1eVpXZHBjM1J5ZVM1blpYUlNaWEJ2Y25SbGNsVlNURk41Ym1Ob2IyNXZkWE1vWkdGMFlVOWlhbVZqZEZWU1RDazdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QnBaaUIwYUdVZ2FIbHdaWEowZVNCcGN5QjBhR1VnY21Wd2IzSjBaWElnYjJZZ2RHaGxJR1JoZEdGUFltcGxZM1FnZEdobGJpQm5aVzVsY21GMFpYTWdZU0J6WlhOemFXOXVJR3RsZVZ4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hwYzBoNWNHVnlkSGxTWlhCdmNuUmxjaUFtSmlCcGMwaDVjR1Z5ZEhsU1pYQnZjblJsY2lBOVBUMGdiV1Z6YzJGblpTNW1jbTl0S1NCN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnpaWE56YVc5dVMyVjVJRDBnWDNSb2FYTXVZM0o1Y0hSdkxtZGxibVZ5WVhSbFVtRnVaRzl0S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NWtZWFJoVDJKcVpXTjBVMlZ6YzJsdmJrdGxlWE5iWkdGMFlVOWlhbVZqZEZWU1RGMGdQU0I3YzJWemMybHZia3RsZVRvZ2MyVnpjMmx2Ymt0bGVTd2dhWE5VYjBWdVkzSjVjSFE2SUhSeWRXVjlPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZWFJoVDJKcVpXTjBTMlY1SUQwZ1gzUm9hWE11WkdGMFlVOWlhbVZqZEZObGMzTnBiMjVMWlhselcyUmhkR0ZQWW1wbFkzUlZVa3hkTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4dlkyaGxZMnNnYVdZZ2RHaGxjbVVnYVhNZ1lXeHlaV0ZrZVNCaElITmxjM05wYjI0Z2EyVjVJR1p2Y2lCMGFHVWdZMmhoZENCeWIyOXRYRzRnSUNBZ0lDQWdJR2xtSUNoa1lYUmhUMkpxWldOMFMyVjVLU0I3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJoYm1RZ2FXWWdhWE1nZEc4Z1lYQndiSGtnWlc1amNubHdkR2x2Yml3Z1pXNWpjbmx3ZENCMGFHVWdiV1Z6YzJGblpYTmNiaUFnSUNBZ0lDQWdJQ0JwWmlBb1pHRjBZVTlpYW1WamRFdGxlUzVwYzFSdlJXNWpjbmx3ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHbDJJRDBnWDNSb2FYTXVZM0o1Y0hSdkxtZGxibVZ5WVhSbFNWWW9LVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVkzSjVjSFJ2TG1WdVkzSjVjSFJCUlZNb1pHRjBZVTlpYW1WamRFdGxlUzV6WlhOemFXOXVTMlY1TENCZmRHaHBjeTVqY25sd2RHOHVaVzVqYjJSbEtFcFRUMDR1YzNSeWFXNW5hV1o1S0cxbGMzTmhaMlV1WW05a2VTNTJZV3gxWlNrcExDQnBkaWt1ZEdobGJpaGxibU55ZVhCMFpXUldZV3gxWlNBOVBpQjdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdacGJIUmxjbVZrVFdWemMyRm5aU0E5SUY5MGFHbHpMbDltYVd4MFpYSk5aWE56WVdkbFZHOUlZWE5vS0cxbGMzTmhaMlVzSUcxbGMzTmhaMlV1WW05a2VTNTJZV3gxWlNBcklHbDJMQ0JrWVhSaFQySnFaV04wUzJWNUxuTmxjM05wYjI1TFpYa3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtTnllWEIwYnk1b1lYTm9TRTFCUXloa1lYUmhUMkpxWldOMFMyVjVMbk5sYzNOcGIyNUxaWGtzSUdacGJIUmxjbVZrVFdWemMyRm5aU2t1ZEdobGJpaG9ZWE5vSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMMk52Ym5OdmJHVXViRzluS0Nkb1lYTm9JQ2NzSUdoaGMyZ3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHNWxkMVpoYkhWbElEMGdZblJ2WVNoS1UwOU9Mbk4wY21sdVoybG1lU2g3ZG1Gc2RXVTZJRjkwYUdsekxtTnllWEIwYnk1bGJtTnZaR1VvWlc1amNubHdkR1ZrVm1Gc2RXVXBMQ0JwZGpvZ1gzUm9hWE11WTNKNWNIUnZMbVZ1WTI5a1pTaHBkaWtzSUdoaGMyZzZJRjkwYUdsekxtTnllWEIwYnk1bGJtTnZaR1VvYUdGemFDbDlLU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsTG1KdlpIa3VkbUZzZFdVZ1BTQnVaWGRXWVd4MVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtHMWxjM05oWjJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2FXWWdibTkwTENCcWRYTjBJSE5sYm1RZ2RHaGxJRzFsYzNOaFoyVmNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNodFpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QnpkR0Z5ZENCMGFHVWdaMlZ1WlhKaGRHbHZiaUJ2WmlCaElHNWxkeUJ6WlhOemFXOXVJRXRsZVZ4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lISmxhbVZqZENnblptRnBiR1ZrSUhSdklHUmxZM0o1Y0hRZ2JXVnpjMkZuWlNjcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0JrWldOeWVYQjBUV1Z6YzJGblpTaHRaWE56WVdkbEtTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGtaV055ZVhCMElHMWxjM05oWjJVZ0p5azdYRzVjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYRzRnSUNBZ0lDQnNaWFFnYVhOSVlXNWtVMmhoYTJWVWVYQmxJRDBnYldWemMyRm5aUzUwZVhCbElEMDlQU0FuYUdGdVpITm9ZV3RsSnp0Y2JseHVJQ0FnSUNBZ0x5OXBaaUJwY3lCdWIzUWdkRzhnWVhCd2JIa2daVzVqY25sd2RHbHZiaXdnZEdobGJpQnlaWFIxY201eklISmxjMjlzZG1WY2JpQWdJQ0FnSUdsbUlDZ2hYM1JvYVhNdWFYTlViMVZ6WlVWdVkzSjVjSFJwYjI0Z0ppWWdJV2x6U0dGdVpGTm9ZV3RsVkhsd1pTa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblpHVmpjbmx3ZEdsdmJpQmthWE5oWW14bFpDY3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6YjJ4MlpTaHRaWE56WVdkbEtUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdMeTlVVDBSUElISmxiVzkyWlNCMGFHbHpJR3h2WjJsaklHRnVaQ0J0YjNabElHbDBJSFJ2SUdFZ2RYUnBiQ0JtZFc1amRHbHZibHh1WEc0Z0lDQWdJQ0JzWlhRZ2MzQnNhWFJsWkZSdlZWSk1JRDBnYldWemMyRm5aUzUwYnk1emNHeHBkQ2duTHljcE8xeHVJQ0FnSUNBZ2JHVjBJR1JoZEdGUFltcGxZM1JWVWt3Z1BTQnpjR3hwZEdWa1ZHOVZVa3hiTUYwZ0t5QW5MeThuSUNzZ2MzQnNhWFJsWkZSdlZWSk1XekpkSUNzZ0p5OG5JQ3NnYzNCc2FYUmxaRlJ2VlZKTVd6TmRPMXh1SUNBZ0lDQWdhV1lnS0hOd2JHbDBaV1JVYjFWU1RDNXNaVzVuZEdnZ1BpQTJLU0I3WEc0Z0lDQWdJQ0FnSUdSaGRHRlBZbXBsWTNSVlVrd2dQU0J6Y0d4cGRHVmtWRzlWVWt4Yk1GMGdLeUFuTHk4bklDc2djM0JzYVhSbFpGUnZWVkpNV3pKZElDc2dKeThuSUNzZ2MzQnNhWFJsWkZSdlZWSk1Xek5kSUNzZ0p5OG5JQ3NnYzNCc2FYUmxaRlJ2VlZKTVd6UmRPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JzWlhRZ2FYTlViMFJoZEdGUFltcGxZM1FnUFNCcGMwUmhkR0ZQWW1wbFkzUlZVa3dvWkdGMFlVOWlhbVZqZEZWU1RDazdYRzRnSUNBZ0lDQnNaWFFnYVhOR2NtOXRTSGx3WlhKMGVTQTlJR1JwZG1sa1pWVlNUQ2h0WlhOellXZGxMbVp5YjIwcExuUjVjR1VnUFQwOUlDZG9lWEJsY25SNUp6dGNiaUFnSUNBZ0lHeGxkQ0JwYzFSdlNIbHdaWEowZVNBOUlHUnBkbWxrWlZWU1RDaHRaWE56WVdkbExuUnZLUzUwZVhCbElEMDlQU0FuYUhsd1pYSjBlU2M3WEc1Y2JpQWdJQ0FnSUM4dmFYTWdhWE1nYUhsd1pYSjBlU0IwYnlCb2VYQmxjblI1SUdOdmJXMTFibWxqWVhScGIyNWNiaUFnSUNBZ0lHbG1JQ2hwYzBaeWIyMUllWEJsY25SNUlDWW1JR2x6Vkc5SWVYQmxjblI1S1NCN1hHNGdJQ0FnSUNBZ0lDOHZZMjl1YzI5c1pTNXNiMmNvSjJSbFkzSjVjSFFnYUhsd1pYSjBlU0IwYnlCb2VYQmxjblI1SnlrN1hHNGdJQ0FnSUNBZ0lHeGxkQ0IxYzJWeVZWSk1JRDBnWDNSb2FYTXVYM0psWjJsemRISjVMbWRsZEVoNWNHVnlkSGxQZDI1bGNpaHRaWE56WVdkbExuUnZLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIVnpaWEpWVWt3cElIdGNibHh1SUNBZ0lDQWdJQ0FnSUd4bGRDQmphR0YwUzJWNWN5QTlJRjkwYUdsekxtTm9ZWFJMWlhselcyMWxjM05oWjJVdWRHOGdLeUFuUEMwK0p5QXJJRzFsYzNOaFoyVXVabkp2YlYwN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0NGamFHRjBTMlY1Y3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJoaGRFdGxlWE1nUFNCZmRHaHBjeTVmYm1WM1EyaGhkRU55ZVhCMGJ5aHRaWE56WVdkbExDQjFjMlZ5VlZKTUxDQW5aR1ZqY25sd2RDY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11WTJoaGRFdGxlWE5iYldWemMyRm5aUzUwYnlBcklDYzhMVDRuSUNzZ2JXVnpjMkZuWlM1bWNtOXRYU0E5SUdOb1lYUkxaWGx6TzF4dUlDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaGphR0YwUzJWNWN5NWhkWFJvWlc1MGFXTmhkR1ZrSUNZbUlDRnBjMGhoYm1SVGFHRnJaVlI1Y0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjJZV3gxWlNBOUlFcFRUMDR1Y0dGeWMyVW9ZWFJ2WWlodFpYTnpZV2RsTG1KdlpIa3VkbUZzZFdVcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBkaUE5SUY5MGFHbHpMbU55ZVhCMGJ5NWtaV052WkdVb2RtRnNkV1V1YVhZcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHUmhkR0VnUFNCZmRHaHBjeTVqY25sd2RHOHVaR1ZqYjJSbEtIWmhiSFZsTG5aaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JvWVhOb0lEMGdYM1JvYVhNdVkzSjVjSFJ2TG1SbFkyOWtaU2gyWVd4MVpTNW9ZWE5vS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtTnllWEIwYnk1a1pXTnllWEIwUVVWVEtHTm9ZWFJMWlhsekxtdGxlWE11YUhsd1pYSjBlVlJ2VTJWemMybHZia3RsZVN3Z1pHRjBZU3dnYVhZcExuUm9aVzRvWkdWamNubHdkR1ZrUkdGMFlTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0Nka1pXTnllWEIwWldRZ2RtRnNkV1VnSnl3Z1pHVmpjbmx3ZEdWa1JHRjBZU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVXVZbTlrZVM1MllXeDFaU0E5SUdSbFkzSjVjSFJsWkVSaGRHRTdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdacGJIUmxjbVZrVFdWemMyRm5aU0E5SUY5MGFHbHpMbDltYVd4MFpYSk5aWE56WVdkbFZHOUlZWE5vS0cxbGMzTmhaMlVzSUdSbFkzSjVjSFJsWkVSaGRHRWdLeUJwZGlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11WTNKNWNIUnZMblpsY21sbWVVaE5RVU1vWTJoaGRFdGxlWE11YTJWNWN5NW9lWEJsY25SNVZHOUlZWE5vUzJWNUxDQm1hV3gwWlhKbFpFMWxjM05oWjJVc0lHaGhjMmdwTG5Sb1pXNG9jbVZ6ZFd4MElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2TDJOdmJuTnZiR1V1Ykc5bktDZHlaWE4xYkhRZ2IyWWdhR0Z6YUNCMlpYSnBabWxqWVhScGIyNGhJQ2NzSUhKbGMzVnNkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aUzVpYjJSNUxtRnpjMlZ5ZEdWa1NXUmxiblJwZEhrZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvYldWemMyRm5aU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR2x6U0dGdVpGTm9ZV3RsVkhsd1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11WDJSdlNHRnVaRk5vWVd0bFVHaGhjMlVvYldWemMyRm5aU3dnWTJoaGRFdGxlWE1wTG5Sb1pXNG9ablZ1WTNScGIyNG9kbUZzZFdVcElIdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMMmxtSUdsMElIZGhjeUJ6ZEdGeWRHVmtJR0o1SUdSdlRYVjBkV0ZzUVhWMGFHVnVkR2xqWVhScGIyNGdkR2hsYmlCbGJtUnpJSFJvWlNCd2NtOTBiMk52YkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RtRnNkV1VnUFQwOUlDZG9ZVzVrVTJoaGEyVkZibVFuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0Nka1pXTnllWEIwSUdoaGJtUnphR0ZyWlNCd2NtOTBiMk52YkNCd2FHRnpaU0FuS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QnBaaUIzWVhNZ2MzUmhjblJsWkNCaWVTQmhJRzFsYzNOaFoyVXNJSFJvWlc0Z2NtVnpaVzVrSUhSb1lYUWdiV1Z6YzJGblpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbU5vWVhSTFpYbHpXMjFsYzNOaFoyVXVkRzhnS3lBblBDMCtKeUFySUcxbGMzTmhaMlV1Wm5KdmJWMGdQU0IyWVd4MVpTNWphR0YwUzJWNWN6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1ZmJXVnpjMkZuWlVKMWN5NXdiM04wVFdWemMyRm5aU2gyWVd4MVpTNXRaWE56WVdkbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb0oyUmxZM0o1Y0hRZ2FHRnVaSE5vWVd0bElIQnliM1J2WTI5c0lIQm9ZWE5sSUNjcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLQ2QzY205dVp5QnRaWE56WVdkbElHUnZJR1JsWTNKNWNIUW5LVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtDZGxjbkp2Y2lCdmJpQmtaV055ZVhCMElHMWxjM05oWjJVbktUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4dmFXWWdabkp2YlNCb2VYQmxjblI1SUhSdklHRWdaR0YwWVU5aWFtVmpkRlZTVEZ4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNocGMwWnliMjFJZVhCbGNuUjVJQ1ltSUdselZHOUVZWFJoVDJKcVpXTjBLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGtZWFJoVDJKcVpXTjBJSFpoYkhWbElIUnZJR1JsWTNKNWNIUTZJQ2NzSUcxbGMzTmhaMlV1WW05a2VTazdYRzVjYmlBZ0lDQWdJQ0FnYkdWMElHUmhkR0ZQWW1wbFkzUkxaWGtnUFNCZmRHaHBjeTVrWVhSaFQySnFaV04wVTJWemMybHZia3RsZVhOYlpHRjBZVTlpYW1WamRGVlNURjA3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLR1JoZEdGUFltcGxZM1JMWlhrcElIdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dlkyaGxZMnNnYVdZZ2FYTWdkRzhnWVhCd2JIa2daVzVqY25sd2RHbHZibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaGtZWFJoVDJKcVpXTjBTMlY1TG1selZHOUZibU55ZVhCMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdjR0Z5YzJWa1ZtRnNkV1VnUFNCS1UwOU9MbkJoY25ObEtHRjBiMklvYldWemMyRm5aUzVpYjJSNUxuWmhiSFZsS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2FYWWdQU0JmZEdocGN5NWpjbmx3ZEc4dVpHVmpiMlJsS0hCaGNuTmxaRlpoYkhWbExtbDJLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JsYm1OeWVYQjBaV1JXWVd4MVpTQTlJRjkwYUdsekxtTnllWEIwYnk1a1pXTnZaR1VvY0dGeWMyVmtWbUZzZFdVdWRtRnNkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdoaGMyZ2dQU0JmZEdocGN5NWpjbmx3ZEc4dVpHVmpiMlJsS0hCaGNuTmxaRlpoYkhWbExtaGhjMmdwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NWpjbmx3ZEc4dVpHVmpjbmx3ZEVGRlV5aGtZWFJoVDJKcVpXTjBTMlY1TG5ObGMzTnBiMjVMWlhrc0lHVnVZM0o1Y0hSbFpGWmhiSFZsTENCcGRpa3VkR2hsYmloa1pXTnllWEIwWldSV1lXeDFaU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQndZWEp6WldSV1lXeDFaU0E5SUVwVFQwNHVjR0Z5YzJVb1lYUnZZaWhrWldOeWVYQjBaV1JXWVd4MVpTa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduWkdWamNubHdkR1ZrSUZaaGJIVmxMQ2NzSUhCaGNuTmxaRlpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlM1aWIyUjVMblpoYkhWbElEMGdjR0Z5YzJWa1ZtRnNkV1U3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHWnBiSFJsY21Wa1RXVnpjMkZuWlNBOUlGOTBhR2x6TGw5bWFXeDBaWEpOWlhOellXZGxWRzlJWVhOb0tHMWxjM05oWjJVc0lIQmhjbk5sWkZaaGJIVmxJQ3NnYVhZcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TG1OeWVYQjBieTUyWlhKcFpubElUVUZES0dSaGRHRlBZbXBsWTNSTFpYa3VjMlZ6YzJsdmJrdGxlU3dnWm1sc2RHVnlaV1JOWlhOellXZGxMQ0JvWVhOb0tTNTBhR1Z1S0hKbGMzVnNkQ0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OWpiMjV6YjJ4bExteHZaeWduY21WemRXeDBJRzltSUdoaGMyZ2dkbVZ5YVdacFkyRjBhVzl1SVNBbkxDQnlaWE4xYkhRcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV1Z6YzJGblpTNWliMlI1TG1GemMyVnlkR1ZrU1dSbGJuUnBkSGtnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9iV1Z6YzJGblpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkwybG1JRzV2ZEN3Z2FuVnpkQ0J5WlhSMWNtNGdkR2hsSUcxbGMzTmhaMlZjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiV1Z6YzJGblpTNWliMlI1TG1GemMyVnlkR1ZrU1dSbGJuUnBkSGtnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNodFpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsTG1KdlpIa3VZWE56WlhKMFpXUkpaR1Z1ZEdsMGVTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHRaWE56WVdkbEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dmNtVnFaV04wS0NkdWJ5QnpaWE56YVc5dVMyVjVJR1p2Y2lCamFHRjBJSEp2YjIwZ1ptOTFibVFuS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnlaV3BsWTNRb0ozZHliMjVuSUcxbGMzTmhaMlVnZEc4Z1pHVmpjbmx3ZENjcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0JrYjAxMWRIVmhiRUYxZEdobGJuUnBZMkYwYVc5dUtITmxibVJsY2l3Z2NtVmpaV2wyWlhJcElIdGNiaUFnSUNCamIyNXpiMnhsTG14dlp5Z25aRzlOZFhSMVlXeEJkWFJvWlc1MGFXTmhkR2x2YmpvZ0p5d2djMlZ1WkdWeUxDQnlaV05sYVhabGNpazdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0JzWlhRZ1pHRjBZVTlpYW1WamRGVlNURHRjYmx4dUlDQWdJQzh2SUdOb1pXTnJJR2xtSUhSb1pTQnpaVzVrWlhJZ2FYTWdZU0JrWVhSaFQySnFaV04wSUdGdVpDQnBaaUJ6YnlCemRHOXlaWE1nZEdoaGRDQjJZV3gxWlZ4dUlDQWdJR3hsZENCeVpYQnZjblJsY2xWU1RDQTlJRjkwYUdsekxuSmxaMmx6ZEhKNUxtZGxkRkpsY0c5eWRHVnlWVkpNVTNsdVkyaHZibTkxY3loelpXNWtaWElwTzF4dUlDQWdJR2xtSUNoeVpYQnZjblJsY2xWU1RDa2dlMXh1SUNBZ0lDQWdaR0YwWVU5aWFtVmpkRlZTVENBOUlITmxibVJsY2p0Y2JpQWdJQ0FnSUhObGJtUmxjaUE5SUhKbGNHOXlkR1Z5VlZKTU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUd4bGRDQnRjMmNnUFNCN1hHNGdJQ0FnSUNCMGJ6b2djbVZqWldsMlpYSXNYRzRnSUNBZ0lDQm1jbTl0T2lCelpXNWtaWElzWEc0Z0lDQWdJQ0JqWVd4c1ltRmphem9nZFc1a1pXWnBibVZrTEZ4dUlDQWdJQ0FnWW05a2VUb2dlMmhoYm1SemFHRnJaVkJvWVhObE9pQW5jM1JoY25SSVlXNWtVMmhoYTJVbkxDQnBaMjV2Y21VNklDZHBaMjV2Y21WTlpYTnpZV2RsSjMxY2JpQWdJQ0I5TzF4dVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4dVhHNGdJQ0FnSUNCcFppQW9JWE5sYm1SbGNpQjhmQ0FoY21WalpXbDJaWElwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGFtVmpkQ2duYzJWdVpHVnlJRzl5SUhKbFkyVnBkbVZ5SUcxcGMzTnBibWNnYjI0Z1pHOU5kWFIxWVd4QmRYUm9aVzUwYVdOaGRHbHZiaWNwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCc1pYUWdZMmhoZEV0bGVYTWdQU0JmZEdocGN5NWphR0YwUzJWNWMxdHpaVzVrWlhJZ0t5QW5QQzArSnlBcklISmxZMlZwZG1WeVhUdGNiaUFnSUNBZ0lHeGxkQ0IxYzJWeVZWSk1JRDBnWDNSb2FYTXVYM0psWjJsemRISjVMbWRsZEVoNWNHVnlkSGxQZDI1bGNpaHpaVzVrWlhJcE8xeHVYRzRnSUNBZ0lDQnBaaUFvZFhObGNsVlNUQ2tnZTF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2doWTJoaGRFdGxlWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJqWVd4c1ltRmpheUIwYnlCeVpYTnZiSFpsSUhkb1pXNGdabWx1YVhOb0lIUm9aU0J0ZFhSMVlXd2dZWFYwYUdWdWRHbGpZWFJwYjI1Y2JpQWdJQ0FnSUNBZ0lDQnNaWFFnY21WemIyeDJaV1FnUFNCbWRXNWpkR2x2YmloMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjJOaGJHeGlZV05ySUhaaGJIVmxPaWNzSUhaaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2RtRnNkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJQ0FnYlhObkxtTmhiR3hpWVdOcklEMGdjbVZ6YjJ4MlpXUTdYRzRnSUNBZ0lDQWdJQ0FnYlhObkxtUmhkR0ZQWW1wbFkzUlZVa3dnUFNCa1lYUmhUMkpxWldOMFZWSk1PMXh1WEc0Z0lDQWdJQ0FnSUNBZ1kyaGhkRXRsZVhNZ1BTQmZkR2hwY3k1ZmJtVjNRMmhoZEVOeWVYQjBieWh0YzJjc0lIVnpaWEpWVWt3cE8xeHVJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtTm9ZWFJMWlhselczTmxibVJsY2lBcklDYzhMVDRuSUNzZ2NtVmpaV2wyWlhKZElEMGdZMmhoZEV0bGVYTTdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCcFppQW9ZMmhoZEV0bGVYTXVZWFYwYUdWdWRHbGpZWFJsWkNrZ2UxeHVYRzRnSUNBZ0lDQWdJQ0FnYkdWMElITjBZWEowVTJWemMybHZia3RsZVVWNFkyaGhibWRsSUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEc4NklITmxibVJsY2l4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p5YjIwNklISmxZMlZwZG1WeVhHNGdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnSUNCamFHRjBTMlY1Y3k1a1lYUmhUMkpxWldOMFZWSk1JRDBnWkdGMFlVOWlhbVZqZEZWU1REdGNiaUFnSUNBZ0lDQWdJQ0JmZEdocGN5NWZjMlZ1WkZKbGNHOXlkR1Z5VTJWemMybHZia3RsZVNoemRHRnlkRk5sYzNOcGIyNUxaWGxGZUdOb1lXNW5aU3dnWTJoaGRFdGxlWE1wTG5Sb1pXNG9kbUZzZFdVZ1BUNGdlMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1ZmJXVnpjMkZuWlVKMWN5NXdiM04wVFdWemMyRm5aU2gyWVd4MVpTNXRaWE56WVdkbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvSjJWNFkyaGhibWRsSUc5bUlHTm9ZWFFnYzJWemMybHZia3RsZVNCcGJtbDBhV0YwWldRbktUdGNiaUFnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JseHVJQ0FnSUNBZ0lDQWdJRjkwYUdsekxsOWtiMGhoYm1SVGFHRnJaVkJvWVhObEtHMXpaeXdnWTJoaGRFdGxlWE1wTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCeVpXcGxZM1FvSjJWeWNtOXlJRzl1SUdSdlRYVjBkV0ZzUVhWMGFHVnVkR2xqWVhScGIyNG5LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmx4dUlDQjlYRzVjYmlBZ1gyUnZTR0Z1WkZOb1lXdGxVR2hoYzJVb2JXVnpjMkZuWlN3Z1kyaGhkRXRsZVhNcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnTHk5amIyNXpiMnhsTG14dlp5Z25hR0Z1WkhOb1lXdGxWSGx3WlNjcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc2NtVnFaV04wS1NCN1hHNWNiaUFnSUNBZ0lHeGxkQ0JvWVc1a2MyaGhhMlZVZVhCbElEMGdiV1Z6YzJGblpTNWliMlI1TG1oaGJtUnphR0ZyWlZCb1lYTmxPMXh1SUNBZ0lDQWdiR1YwSUdsMk8xeHVJQ0FnSUNBZ2JHVjBJR2hoYzJnN1hHNGdJQ0FnSUNCc1pYUWdkbUZzZFdVZ1BTQjdmVHRjYmlBZ0lDQWdJR3hsZENCbWFXeDBaWEpsWkUxbGMzTmhaMlU3WEc0Z0lDQWdJQ0J6ZDJsMFkyZ2dLR2hoYm1SemFHRnJaVlI1Y0dVcElIdGNibHh1SUNBZ0lDQWdJQ0JqWVhObElDZHpkR0Z5ZEVoaGJtUlRhR0ZyWlNjNlhHNGdJQ0FnSUNBZ0lDQWdZMmhoZEV0bGVYTXVhMlY1Y3k1bWNtOXRVbUZ1Wkc5dElEMGdYM1JvYVhNdVkzSjVjSFJ2TG1kbGJtVnlZWFJsVW1GdVpHOXRLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQnNaWFFnYzNSaGNuUklZVzVrVTJoaGEyVk5jMmNnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQW5hR0Z1WkhOb1lXdGxKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnZPaUJ0WlhOellXZGxMblJ2TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdabkp2YlRvZ2JXVnpjMkZuWlM1bWNtOXRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1ltOWtlVG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JvWVc1a2MyaGhhMlZRYUdGelpUb2dKM05sYm1SbGNraGxiR3h2Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRjkwYUdsekxtTnllWEIwYnk1bGJtTnZaR1VvWTJoaGRFdGxlWE11YTJWNWN5NW1jbTl0VW1GdVpHOXRLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUNBZ1kyaGhkRXRsZVhNdWFHRnVaSE5vWVd0bFNHbHpkRzl5ZVM1elpXNWtaWEpJWld4c2J5QTlJRjkwYUdsekxsOW1hV3gwWlhKTlpYTnpZV2RsVkc5SVlYTm9LSE4wWVhKMFNHRnVaRk5vWVd0bFRYTm5MQ0IxYm1SbFptbHVaV1FzSUdOb1lYUkxaWGx6TG1oNWNHVnlkSGxHY205dExtMWxjM05oWjJWSmJtWnZLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDOHZJR05vWldOcklHbG1JSGRoY3lCMGFHVWdaVzVqY25sd2RDQm1kVzVqZEdsdmJpQnZjaUIwYUdVZ2JYVjBkV0ZzSUdGMWRHaGxiblJwWTJGMGFXOXVJSFJvWVhRZ2NtVnhkV1Z6ZENCMGFHVmNiaUFnSUNBZ0lDQWdJQ0F2THlCemRHRnlkQ0J2WmlCMGFHVWdhR0Z1WkZOb1lXdGxVR2hoYzJVdVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0dOb1lYUkxaWGx6TG1sdWFYUnBZV3hOWlhOellXZGxLU0I3Y21WemIyeDJaU2g3YldWemMyRm5aVG9nYzNSaGNuUklZVzVrVTJoaGEyVk5jMmNzSUdOb1lYUkxaWGx6T2lCamFHRjBTMlY1YzMwcE8xeHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVqYUdGMFMyVjVjMXR0WlhOellXZGxMbVp5YjIwZ0t5QW5QQzArSnlBcklHMWxjM05oWjJVdWRHOWRJRDBnWTJoaGRFdGxlWE03WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1ZmJXVnpjMkZuWlVKMWN5NXdiM04wVFdWemMyRm5aU2h6ZEdGeWRFaGhibVJUYUdGclpVMXpaeWs3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQmpZWE5sSUNkelpXNWtaWEpJWld4c2J5YzZYRzVjYmlBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25jMlZ1WkdWeVNHVnNiRzhuS1R0Y2JpQWdJQ0FnSUNBZ0lDQmphR0YwUzJWNWN5NW9ZVzVrYzJoaGEyVklhWE4wYjNKNUxuTmxibVJsY2tobGJHeHZJRDBnWDNSb2FYTXVYMlpwYkhSbGNrMWxjM05oWjJWVWIwaGhjMmdvYldWemMyRm5aU2s3WEc0Z0lDQWdJQ0FnSUNBZ1kyaGhkRXRsZVhNdWEyVjVjeTVtY205dFVtRnVaRzl0SUQwZ1gzUm9hWE11WTNKNWNIUnZMbVJsWTI5a1pTaHRaWE56WVdkbExtSnZaSGt1ZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0FnSUdOb1lYUkxaWGx6TG10bGVYTXVkRzlTWVc1a2IyMGdQU0JmZEdocGN5NWpjbmx3ZEc4dVoyVnVaWEpoZEdWU1lXNWtiMjBvS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJR3hsZENCelpXNWtaWEpJWld4c2IwMXpaeUE5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDZG9ZVzVrYzJoaGEyVW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHODZJRzFsYzNOaFoyVXVabkp2YlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p5YjIwNklHMWxjM05oWjJVdWRHOHNYRzRnSUNBZ0lDQWdJQ0FnSUNCaWIyUjVPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2hoYm1SemFHRnJaVkJvWVhObE9pQW5jbVZqWldsMlpYSklaV3hzYnljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJmZEdocGN5NWpjbmx3ZEc4dVpXNWpiMlJsS0dOb1lYUkxaWGx6TG10bGVYTXVkRzlTWVc1a2IyMHBYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnSUNCamFHRjBTMlY1Y3k1b1lXNWtjMmhoYTJWSWFYTjBiM0o1TG5KbFkyVnBkbVZ5U0dWc2JHOGdQU0JmZEdocGN5NWZabWxzZEdWeVRXVnpjMkZuWlZSdlNHRnphQ2h6Wlc1a1pYSklaV3hzYjAxelp5d2dkVzVrWldacGJtVmtMQ0JqYUdGMFMyVjVjeTVvZVhCbGNuUjVSbkp2YlM1dFpYTnpZV2RsU1c1bWJ5azdYRzRnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2g3YldWemMyRm5aVG9nYzJWdVpHVnlTR1ZzYkc5TmMyY3NJR05vWVhSTFpYbHpPaUJqYUdGMFMyVjVjMzBwTzF4dVhHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNCallYTmxJQ2R5WldObGFYWmxja2hsYkd4dkp6cGNibHh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZHlaV05sYVhabGNraGxiR3h2SnlrN1hHNGdJQ0FnSUNBZ0lDQWdZMmhoZEV0bGVYTXVhR0Z1WkhOb1lXdGxTR2x6ZEc5eWVTNXlaV05sYVhabGNraGxiR3h2SUQwZ1gzUm9hWE11WDJacGJIUmxjazFsYzNOaFoyVlViMGhoYzJnb2JXVnpjMkZuWlNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0JmZEdocGN5NTJZV3hwWkdGMFpVRnpjMlZ5ZEdsdmJpaHRaWE56WVdkbExtSnZaSGt1YVdSbGJuUnBkSGt1WVhOelpYSjBhVzl1S1M1MGFHVnVLQ2gyWVd4MVpTa2dQVDRnZTF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2NtVmpaV2wyWlhKUWRXSnNhV05MWlhrZ1BTQmZkR2hwY3k1amNubHdkRzh1WkdWamIyUmxLSFpoYkhWbExtTnZiblJsYm5SekxtNXZibU5sS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCd2NtVnRZWE4wWlhKVFpXTnlaWFFnUFNCZmRHaHBjeTVqY25sd2RHOHVaMlZ1WlhKaGRHVlFUVk1vS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMGIxSmhibVJ2YlNBOUlHMWxjM05oWjJVdVltOWtlUzUyWVd4MVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOb1lYUkxaWGx6TG1oNWNHVnlkSGxVYnk1aGMzTmxjblJwYjI0Z1BTQnRaWE56WVdkbExtSnZaSGt1YVdSbGJuUnBkSGt1WVhOelpYSjBhVzl1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMmhoZEV0bGVYTXVhSGx3WlhKMGVWUnZMbkIxWW14cFkwdGxlU0E5SUhKbFkyVnBkbVZ5VUhWaWJHbGpTMlY1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMmhoZEV0bGVYTXVhSGx3WlhKMGVWUnZMblZ6WlhKSlJDQWdJQ0E5SUhaaGJIVmxMbU52Ym5SbGJuUnpMbVZ0WVdsc08xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJoaGRFdGxlWE11YTJWNWN5NTBiMUpoYm1SdmJTQWdQU0JmZEdocGN5NWpjbmx3ZEc4dVpHVmpiMlJsS0hSdlVtRnVaRzl0S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05vWVhSTFpYbHpMbXRsZVhNdWNISmxiV0Z6ZEdWeVMyVjVJRDBnY0hKbGJXRnpkR1Z5VTJWamNtVjBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWTI5dVkyRjBTMlY1SUQwZ1gzUm9hWE11WTNKNWNIUnZMbU52Ym1OaGRGQk5VM2RwZEdoU1lXNWtiMjF6S0hCeVpXMWhjM1JsY2xObFkzSmxkQ3dnWTJoaGRFdGxlWE11YTJWNWN5NTBiMUpoYm1SdmJTd2dZMmhoZEV0bGVYTXVhMlY1Y3k1bWNtOXRVbUZ1Wkc5dEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5MGFHbHpMbU55ZVhCMGJ5NW5aVzVsY21GMFpVMWhjM1JsY2xObFkzSmxkQ2hqYjI1allYUkxaWGtzSUNkdFpYTnpZV2RsU0dsemRHOXlhV01uSUNzZ1kyaGhkRXRsZVhNdWEyVjVjeTUwYjFKaGJtUnZiU0FySUdOb1lYUkxaWGx6TG10bGVYTXVabkp2YlZKaGJtUnZiU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2WjJWdVpYSmhkR1VnZEdobElHMWhjM1JsY2lCclpYbGNiaUFnSUNBZ0lDQWdJQ0I5S1M1MGFHVnVLQ2h0WVhOMFpYSkxaWGtwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOb1lYUkxaWGx6TG10bGVYTXViV0Z6ZEdWeVMyVjVJRDBnYldGemRHVnlTMlY1TzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdYM1JvYVhNdVkzSjVjSFJ2TG1kbGJtVnlZWFJsUzJWNWN5aHRZWE4wWlhKTFpYa3NJQ2RyWlhrZ1pYaHdZVzV6YVc5dUp5QXJJR05vWVhSTFpYbHpMbXRsZVhNdWRHOVNZVzVrYjIwZ0t5QmphR0YwUzJWNWN5NXJaWGx6TG1aeWIyMVNZVzVrYjIwcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkwyZGxibVZ5WVhSbElIUm9aU0J6ZVcxdFpYUnlhV01nWVc1a0lHaGhjMmdnYTJWNWMxeHVJQ0FnSUNBZ0lDQWdJSDBwTG5Sb1pXNG9LR3RsZVhNcElEMCtJSHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdZMmhoZEV0bGVYTXVhMlY1Y3k1b2VYQmxjblI1Vkc5VFpYTnphVzl1UzJWNUlEMGdibVYzSUZWcGJuUTRRWEp5WVhrb2EyVjVjMXN3WFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdGMFMyVjVjeTVyWlhsekxtaDVjR1Z5ZEhsR2NtOXRVMlZ6YzJsdmJrdGxlU0E5SUc1bGR5QlZhVzUwT0VGeWNtRjVLR3RsZVhOYk1WMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaGhkRXRsZVhNdWEyVjVjeTVvZVhCbGNuUjVWRzlJWVhOb1MyVjVJRDBnYm1WM0lGVnBiblE0UVhKeVlYa29hMlY1YzFzeVhTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCamFHRjBTMlY1Y3k1clpYbHpMbWg1Y0dWeWRIbEdjbTl0U0dGemFFdGxlU0E5SUc1bGR5QlZhVzUwT0VGeWNtRjVLR3RsZVhOYk0xMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FYWWdQU0JmZEdocGN5NWpjbmx3ZEc4dVoyVnVaWEpoZEdWSlZpZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1V1YVhZZ1BTQmZkR2hwY3k1amNubHdkRzh1Wlc1amIyUmxLR2wyS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHMWxjM05oWjJWVGRISjFZM1IxY21VZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNkb1lXNWtjMmhoYTJVbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGJ6b2diV1Z6YzJGblpTNW1jbTl0TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JtY205dE9pQnRaWE56WVdkbExuUnZMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmliMlI1T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FHRnVaSE5vWVd0bFVHaGhjMlU2SUNkelpXNWtaWEpEWlhKMGFXWnBZMkYwWlNkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnYUdGemFDQjBhR1VnZG1Gc2RXVWdZVzVrSUhSb1pTQnBkbHh1SUNBZ0lDQWdJQ0FnSUNBZ1ptbHNkR1Z5WldSTlpYTnpZV2RsSUQwZ1gzUm9hWE11WDJacGJIUmxjazFsYzNOaFoyVlViMGhoYzJnb2JXVnpjMkZuWlZOMGNuVmpkSFZ5WlN3Z0oyOXJKeUFySUdsMkxDQmphR0YwUzJWNWN5NW9lWEJsY25SNVJuSnZiUzV0WlhOellXZGxTVzVtYnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdYM1JvYVhNdVkzSjVjSFJ2TG1oaGMyaElUVUZES0dOb1lYUkxaWGx6TG10bGVYTXVhSGx3WlhKMGVVWnliMjFJWVhOb1MyVjVMQ0JtYVd4MFpYSmxaRTFsYzNOaFoyVXBPMXh1SUNBZ0lDQWdJQ0FnSUgwcExuUm9aVzRvS0doaGMyZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbExtaGhjMmdnUFNCZmRHaHBjeTVqY25sd2RHOHVaVzVqYjJSbEtHaGhjMmdwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2TDJWdVkzSjVjSFFnZEdobElHUmhkR0ZjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTVqY25sd2RHOHVaVzVqY25sd2RFRkZVeWhqYUdGMFMyVjVjeTVyWlhsekxtaDVjR1Z5ZEhsR2NtOXRVMlZ6YzJsdmJrdGxlU3dnSjI5ckp5d2dhWFlwTzF4dUlDQWdJQ0FnSUNBZ0lIMHBMblJvWlc0b0tHVnVZM0o1Y0hSbFpFUmhkR0VwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxMbk41YldWMGNtbGpSVzVqY25sd2RHbHZiaUE5SUY5MGFHbHpMbU55ZVhCMGJ5NWxibU52WkdVb1pXNWpjbmx3ZEdWa1JHRjBZU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmZkR2hwY3k1amNubHdkRzh1Wlc1amNubHdkRkpUUVNoamFHRjBTMlY1Y3k1b2VYQmxjblI1Vkc4dWNIVmliR2xqUzJWNUxDQmphR0YwUzJWNWN5NXJaWGx6TG5CeVpXMWhjM1JsY2t0bGVTazdYRzVjYmlBZ0lDQWdJQ0FnSUNCOUtTNTBhR1Z1S0NobGJtTnllWEIwWldSV1lXeDFaU2tnUFQ0Z2UxeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaUzVoYzNONWJXVjBjbWxqUlc1amNubHdkR2x2YmlBOUlGOTBhR2x6TG1OeWVYQjBieTVsYm1OdlpHVW9aVzVqY25sd2RHVmtWbUZzZFdVcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiV1Z6YzJGblpWTjBjblZqZEhWeVpTQTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0oyaGhibVJ6YUdGclpTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnZPaUJ0WlhOellXZGxMbVp5YjIwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdaeWIyMDZJRzFsYzNOaFoyVXVkRzhzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR0p2WkhrNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9ZVzVrYzJoaGEyVlFhR0Z6WlRvZ0ozTmxibVJsY2tObGNuUnBabWxqWVhSbEoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JXVnpjMkZuWlZSdlNHRnphQ0E5SUY5MGFHbHpMbDltYVd4MFpYSk5aWE56WVdkbFZHOUlZWE5vS0cxbGMzTmhaMlZUZEhKMVkzUjFjbVVzSUdOb1lYUkxaWGx6TG10bGVYTXVjSEpsYldGemRHVnlTMlY1TENCamFHRjBTMlY1Y3k1b2VYQmxjblI1Um5KdmJTNXRaWE56WVdkbFNXNW1ieWs3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmZkR2hwY3k1amNubHdkRzh1YzJsbmJsSlRRU2hqYUdGMFMyVjVjeTVvZVhCbGNuUjVSbkp2YlM1d2NtbDJZWFJsUzJWNUxDQktVMDlPTG5OMGNtbHVaMmxtZVNoamFHRjBTMlY1Y3k1b1lXNWtjMmhoYTJWSWFYTjBiM0o1S1NBcklFcFRUMDR1YzNSeWFXNW5hV1o1S0cxbGMzTmhaMlZVYjBoaGMyZ3BLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lIMHBMblJvWlc0b2MybG5ibUYwZFhKbElEMCtJSHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVdWMybG5ibUYwZFhKbElEMGdYM1JvYVhNdVkzSjVjSFJ2TG1WdVkyOWtaU2h6YVdkdVlYUjFjbVVwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2NtVmpaV2wyWlhKSVpXeHNiMDF6WnlBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSjJoaGJtUnphR0ZyWlNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhSdk9pQnRaWE56WVdkbExtWnliMjBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR1p5YjIwNklHMWxjM05oWjJVdWRHOHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnZaSGs2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1lXNWtjMmhoYTJWUWFHRnpaVG9nSjNObGJtUmxja05sY25ScFptbGpZWFJsSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nWW5SdllTaEtVMDlPTG5OMGNtbHVaMmxtZVNoMllXeDFaU2twWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCamFHRjBTMlY1Y3k1b1lXNWtjMmhoYTJWSWFYTjBiM0o1TG5ObGJtUmxja05sY25ScFptbGpZWFJsSUQwZ1gzUm9hWE11WDJacGJIUmxjazFsYzNOaFoyVlViMGhoYzJnb2NtVmpaV2wyWlhKSVpXeHNiMDF6Wnl3Z0oyOXJKeUFySUdsMkxDQmphR0YwUzJWNWN5NW9lWEJsY25SNVJuSnZiUzV0WlhOellXZGxTVzVtYnlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvZTIxbGMzTmhaMlU2SUhKbFkyVnBkbVZ5U0dWc2JHOU5jMmNzSUdOb1lYUkxaWGx6T2lCamFHRjBTMlY1YzMwcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnZlN3Z1pYSnliM0lnUFQ0Z2NtVnFaV04wS0dWeWNtOXlLU2s3WEc1Y2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdKM05sYm1SbGNrTmxjblJwWm1sallYUmxKenBjYmx4dUlDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2R6Wlc1a1pYSkRaWEowYVdacFkyRjBaU2NwTzF4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0J5WldObGFYWmxaRlpoYkhWbElEMGdTbE5QVGk1d1lYSnpaU2hoZEc5aUtHMWxjM05oWjJVdVltOWtlUzUyWVd4MVpTa3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ1gzUm9hWE11ZG1Gc2FXUmhkR1ZCYzNObGNuUnBiMjRvYldWemMyRm5aUzVpYjJSNUxtbGtaVzUwYVhSNUxtRnpjMlZ5ZEdsdmJpa3VkR2hsYmlnb2RtRnNkV1VwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmxibU55ZVhCMFpXUlFUVk1nUFNCZmRHaHBjeTVqY25sd2RHOHVaR1ZqYjJSbEtISmxZMlZwZG1Wa1ZtRnNkV1V1WVhOemVXMWxkSEpwWTBWdVkzSjVjSFJwYjI0cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElITmxibVJsY2xCMVlteHBZMHRsZVNBOUlGOTBhR2x6TG1OeWVYQjBieTVrWldOdlpHVW9kbUZzZFdVdVkyOXVkR1Z1ZEhNdWJtOXVZMlVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMmhoZEV0bGVYTXVhSGx3WlhKMGVWUnZMbUZ6YzJWeWRHbHZiaUE5SUcxbGMzTmhaMlV1WW05a2VTNXBaR1Z1ZEdsMGVTNWhjM05sY25ScGIyNDdYRzRnSUNBZ0lDQWdJQ0FnSUNCamFHRjBTMlY1Y3k1b2VYQmxjblI1Vkc4dWNIVmliR2xqUzJWNUlEMGdjMlZ1WkdWeVVIVmliR2xqUzJWNU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJoaGRFdGxlWE11YUhsd1pYSjBlVlJ2TG5WelpYSkpSQ0FnSUNBOUlIWmhiSFZsTG1OdmJuUmxiblJ6TG1WdFlXbHNPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1gzUm9hWE11WTNKNWNIUnZMbVJsWTNKNWNIUlNVMEVvWTJoaGRFdGxlWE11YUhsd1pYSjBlVVp5YjIwdWNISnBkbUYwWlV0bGVTd2daVzVqY25sd2RHVmtVRTFUS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJSDBzSUNobGNuSnZjaWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb1pYSnliM0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtDZEZjbkp2Y2lCa2RYSnBibWNnWVhWMGFHVnVkR2xqWVhScGIyNGdiMllnYVdSbGJuUnBkSGtuS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk5dlluUmhhVzRnZEdobElGQnlaVzFoYzNSbGNrdGxlU0IxYzJsdVp5QjBhR1VnY0hKcGRtRjBaU0JyWlhsY2JpQWdJQ0FnSUNBZ0lDQjlLUzUwYUdWdUtIQnRjeUE5UGlCN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdOb1lYUkxaWGx6TG10bGVYTXVjSEpsYldGemRHVnlTMlY1SUQwZ2JtVjNJRlZwYm5RNFFYSnlZWGtvY0cxektUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSE5wWjI1aGRIVnlaU0E5SUY5MGFHbHpMbU55ZVhCMGJ5NWtaV052WkdVb2NtVmpaV2wyWldSV1lXeDFaUzV6YVdkdVlYUjFjbVVwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2NtVmpaV2wyWldSdGMyZFViMGhoYzJnZ1BTQmZkR2hwY3k1ZlptbHNkR1Z5VFdWemMyRm5aVlJ2U0dGemFDaHRaWE56WVdkbExDQmphR0YwUzJWNWN5NXJaWGx6TG5CeVpXMWhjM1JsY2t0bGVTazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTVqY25sd2RHOHVkbVZ5YVdaNVVsTkJLR05vWVhSTFpYbHpMbWg1Y0dWeWRIbFVieTV3ZFdKc2FXTkxaWGtzSUVwVFQwNHVjM1J5YVc1bmFXWjVLR05vWVhSTFpYbHpMbWhoYm1SemFHRnJaVWhwYzNSdmNua3BJQ3NnU2xOUFRpNXpkSEpwYm1kcFpua29jbVZqWldsMlpXUnRjMmRVYjBoaGMyZ3BMQ0J6YVdkdVlYUjFjbVVwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCMllXeHBaR0YwWlhNZ2RHaGxJSE5wWjI1aGRIVnlaU0J5WldObGFYWmxaRnh1SUNBZ0lDQWdJQ0FnSUgwcExuUm9aVzRvYzJsbmJsWmhiR2xrWVhScGIyNVNaWE4xYkhRZ1BUNGdlMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduYzJsbmJtRjBkWEpsSUhaaGJHbGtZWFJwYjI0Z2NtVnpkV3gwSUNjc0lITnBaMjVXWVd4cFpHRjBhVzl1VW1WemRXeDBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JqYjI1allYUkxaWGtnUFNCZmRHaHBjeTVqY25sd2RHOHVZMjl1WTJGMFVFMVRkMmwwYUZKaGJtUnZiWE1vWTJoaGRFdGxlWE11YTJWNWN5NXdjbVZ0WVhOMFpYSkxaWGtzSUdOb1lYUkxaWGx6TG10bGVYTXVkRzlTWVc1a2IyMHNJR05vWVhSTFpYbHpMbXRsZVhNdVpuSnZiVkpoYm1SdmJTazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTVqY25sd2RHOHVaMlZ1WlhKaGRHVk5ZWE4wWlhKVFpXTnlaWFFvWTI5dVkyRjBTMlY1TENBbmJXVnpjMkZuWlVocGMzUnZjbWxqSnlBcklHTm9ZWFJMWlhsekxtdGxlWE11ZEc5U1lXNWtiMjBnS3lCamFHRjBTMlY1Y3k1clpYbHpMbVp5YjIxU1lXNWtiMjBwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCblpXNWxjbUYwWlhNZ2RHaGxJRzFoYzNSbGNpQnJaWGx6SUdaeWIyMGdkR2hsSUZCeVpXMWhjM1JsY2lCclpYa2dZVzVrSUhSb1pTQnlZVzVrYjIxelhHNGdJQ0FnSUNBZ0lDQWdmU2t1ZEdobGJpaHRZWE4wWlhKTFpYa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMmhoZEV0bGVYTXVhMlY1Y3k1dFlYTjBaWEpMWlhrZ1BTQnRZWE4wWlhKTFpYazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTVqY25sd2RHOHVaMlZ1WlhKaGRHVkxaWGx6S0cxaGMzUmxja3RsZVN3Z0oydGxlU0JsZUhCaGJuTnBiMjRuSUNzZ1kyaGhkRXRsZVhNdWEyVjVjeTUwYjFKaGJtUnZiU0FySUdOb1lYUkxaWGx6TG10bGVYTXVabkp2YlZKaGJtUnZiU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdkbGJtVnlZWFJsY3lCMGFHVWdjM2x0YldWMGNtbGpJR3RsZVhNZ2RHOGdZbVVnZFhObFpDQnBiaUIwYUdVZ2MzbHRiV1YwY21saklHVnVZM0o1Y0hScGIyNWNiaUFnSUNBZ0lDQWdJQ0I5S1M1MGFHVnVLR3RsZVhNZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaGhkRXRsZVhNdWEyVjVjeTVvZVhCbGNuUjVSbkp2YlZObGMzTnBiMjVMWlhrZ1BTQnVaWGNnVldsdWREaEJjbkpoZVNoclpYbHpXekJkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05vWVhSTFpYbHpMbXRsZVhNdWFIbHdaWEowZVZSdlUyVnpjMmx2Ymt0bGVTQTlJRzVsZHlCVmFXNTBPRUZ5Y21GNUtHdGxlWE5iTVYwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJoaGRFdGxlWE11YTJWNWN5NW9lWEJsY25SNVJuSnZiVWhoYzJoTFpYa2dQU0J1WlhjZ1ZXbHVkRGhCY25KaGVTaHJaWGx6V3pKZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOb1lYUkxaWGx6TG10bGVYTXVhSGx3WlhKMGVWUnZTR0Z6YUV0bGVTQTlJRzVsZHlCVmFXNTBPRUZ5Y21GNUtHdGxlWE5iTTEwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVhZZ1BTQmZkR2hwY3k1amNubHdkRzh1WkdWamIyUmxLSEpsWTJWcGRtVmtWbUZzZFdVdWFYWXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1JoZEdFZ1BTQmZkR2hwY3k1amNubHdkRzh1WkdWamIyUmxLSEpsWTJWcGRtVmtWbUZzZFdVdWMzbHRaWFJ5YVdORmJtTnllWEIwYVc5dUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5MGFHbHpMbU55ZVhCMGJ5NWtaV055ZVhCMFFVVlRLR05vWVhSTFpYbHpMbXRsZVhNdWFIbHdaWEowZVZSdlUyVnpjMmx2Ymt0bGVTd2daR0YwWVN3Z2FYWXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2ZTa3VkR2hsYmloa1pXTnllWEIwWldSRVlYUmhJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2WTI5dWMyOXNaUzVzYjJjb0oyUmxZM0o1Y0hSbFpFUmhkR0VuTENCa1pXTnllWEIwWldSRVlYUmhLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdZMmhoZEV0bGVYTXVhR0Z1WkhOb1lXdGxTR2x6ZEc5eWVTNXpaVzVrWlhKRFpYSjBhV1pwWTJGMFpTQTlJRjkwYUdsekxsOW1hV3gwWlhKTlpYTnpZV2RsVkc5SVlYTm9LRzFsYzNOaFoyVXNJR1JsWTNKNWNIUmxaRVJoZEdFZ0t5QnBkaWs3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCb1lYTm9VbVZqWldsMlpXUWdQU0JmZEdocGN5NWpjbmx3ZEc4dVpHVmpiMlJsS0hKbFkyVnBkbVZrVm1Gc2RXVXVhR0Z6YUNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdacGJIUmxjbVZrVFdWemMyRm5aU0E5SUY5MGFHbHpMbDltYVd4MFpYSk5aWE56WVdkbFZHOUlZWE5vS0cxbGMzTmhaMlVzSUdSbFkzSjVjSFJsWkVSaGRHRWdLeUJwZGlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJmZEdocGN5NWpjbmx3ZEc4dWRtVnlhV1o1U0UxQlF5aGphR0YwUzJWNWN5NXJaWGx6TG1oNWNHVnlkSGxVYjBoaGMyaExaWGtzSUdacGJIUmxjbVZrVFdWemMyRm5aU3dnYUdGemFGSmxZMlZwZG1Wa0tUdGNibHh1SUNBZ0lDQWdJQ0FnSUgwcExuUm9aVzRvZG1WeWFXWnBaV1JJWVhOb0lDQTlQaUI3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2WTI5dWMyOXNaUzVzYjJjb0ozSmxjM1ZzZENCdlppQm9ZWE5vSUhabGNtbG1hV05oZEdsdmJpQW5MQ0IyWlhKcFptbGxaRWhoYzJncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElISmxZMlZwZG1WeVJtbHVhWE5vWldSTlpYTnpZV2RsSUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFuYUdGdVpITm9ZV3RsSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZEc4NklHMWxjM05oWjJVdVpuSnZiU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdabkp2YlRvZ2JXVnpjMkZuWlM1MGJ5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1ltOWtlVG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdoaGJtUnphR0ZyWlZCb1lYTmxPaUFuY21WalpXbDJaWEpHYVc1cGMyaGxaRTFsYzNOaFoyVW5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwZGlBOUlGOTBhR2x6TG1OeWVYQjBieTVuWlc1bGNtRjBaVWxXS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpTNXBkaUE5SUY5MGFHbHpMbU55ZVhCMGJ5NWxibU52WkdVb2FYWXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1hV3gwWlhKbFpFMWxjM05oWjJVZ1BTQmZkR2hwY3k1ZlptbHNkR1Z5VFdWemMyRm5aVlJ2U0dGemFDaHlaV05sYVhabGNrWnBibWx6YUdWa1RXVnpjMkZuWlN3Z0oyOXJJU2NnS3lCcGRpd2dZMmhoZEV0bGVYTXVhSGx3WlhKMGVVWnliMjB1YldWemMyRm5aVWx1Wm04cE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWDNSb2FYTXVZM0o1Y0hSdkxtaGhjMmhJVFVGREtHTm9ZWFJMWlhsekxtdGxlWE11YUhsd1pYSjBlVVp5YjIxSVlYTm9TMlY1TENCeVpXTmxhWFpsY2tacGJtbHphR1ZrVFdWemMyRm5aU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTa3VkR2hsYmlob1lYTm9JRDArSUh0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVXVhR0Z6YUNBOUlGOTBhR2x6TG1OeWVYQjBieTVsYm1OdlpHVW9hR0Z6YUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdYM1JvYVhNdVkzSjVjSFJ2TG1WdVkzSjVjSFJCUlZNb1kyaGhkRXRsZVhNdWEyVjVjeTVvZVhCbGNuUjVSbkp2YlZObGMzTnBiMjVMWlhrc0lDZHZheUVuTENCcGRpazdYRzVjYmlBZ0lDQWdJQ0FnSUNCOUtTNTBhR1Z1S0dWdVkzSjVjSFJsWkZaaGJIVmxJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbExuWmhiSFZsSUQwZ1gzUm9hWE11WTNKNWNIUnZMbVZ1WTI5a1pTaGxibU55ZVhCMFpXUldZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2NtVmpaV2wyWlhKR2FXNXBjMmhsWkUxbGMzTmhaMlVnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ2RvWVc1a2MyaGhhMlVuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwYnpvZ2JXVnpjMkZuWlM1bWNtOXRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQm1jbTl0T2lCdFpYTnpZV2RsTG5SdkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWIyUjVPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYUdGdVpITm9ZV3RsVUdoaGMyVTZJQ2R5WldObGFYWmxja1pwYm1semFHVmtUV1Z6YzJGblpTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHSjBiMkVvU2xOUFRpNXpkSEpwYm1kcFpua29kbUZzZFdVcEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdGMFMyVjVjeTVvWVc1a2MyaGhhMlZJYVhOMGIzSjVMbkpsWTJWcGRtVnlSbWx1YVhOb1pXUk5aWE56WVdkbElEMGdYM1JvYVhNdVgyWnBiSFJsY2sxbGMzTmhaMlZVYjBoaGMyZ29jbVZqWldsMlpYSkdhVzVwYzJobFpFMWxjM05oWjJVc0lDZHZheUVuSUNzZ2FYWXNJR05vWVhSTFpYbHpMbWg1Y0dWeWRIbEdjbTl0TG0xbGMzTmhaMlZKYm1adktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOb1lYUkxaWGx6TG1GMWRHaGxiblJwWTJGMFpXUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2g3YldWemMyRm5aVG9nY21WalpXbDJaWEpHYVc1cGMyaGxaRTFsYzNOaFoyVXNJR05vWVhSTFpYbHpPaUJqYUdGMFMyVjVjMzBwTzF4dUlDQWdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0JqWVhObElDZHlaV05sYVhabGNrWnBibWx6YUdWa1RXVnpjMkZuWlNjNlhHNWNiaUFnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnbmNtVmpaV2wyWlhKR2FXNXBjMmhsWkUxbGMzTmhaMlVuS1R0Y2JpQWdJQ0FnSUNBZ0lDQmphR0YwUzJWNWN5NWhkWFJvWlc1MGFXTmhkR1ZrSUQwZ2RISjFaVHRjYmx4dUlDQWdJQ0FnSUNBZ0lIWmhiSFZsSUQwZ1NsTlBUaTV3WVhKelpTaGhkRzlpS0cxbGMzTmhaMlV1WW05a2VTNTJZV3gxWlNrcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnYVhZZ1BTQmZkR2hwY3k1amNubHdkRzh1WkdWamIyUmxLSFpoYkhWbExtbDJLVHRjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdaR0YwWVNBOUlGOTBhR2x6TG1OeWVYQjBieTVrWldOdlpHVW9kbUZzZFdVdWRtRnNkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lHaGhjMmdnUFNCZmRHaHBjeTVqY25sd2RHOHVaR1ZqYjJSbEtIWmhiSFZsTG1oaGMyZ3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ1gzUm9hWE11WTNKNWNIUnZMbVJsWTNKNWNIUkJSVk1vWTJoaGRFdGxlWE11YTJWNWN5NW9lWEJsY25SNVZHOVRaWE56YVc5dVMyVjVMQ0JrWVhSaExDQnBkaWt1ZEdobGJpaGtaV055ZVhCMFpXUkVZWFJoSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGtaV055ZVhCMFpXUkVZWFJoSnl3Z1pHVmpjbmx3ZEdWa1JHRjBZU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmphR0YwUzJWNWN5NW9ZVzVrYzJoaGEyVklhWE4wYjNKNUxuSmxZMlZwZG1WeVJtbHVhWE5vWldSTlpYTnpZV2RsSUQwZ1gzUm9hWE11WDJacGJIUmxjazFsYzNOaFoyVlViMGhoYzJnb2JXVnpjMkZuWlN3Z1pHVmpjbmx3ZEdWa1JHRjBZU0FySUdsMktUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1pwYkhSbGNtVmtUV1Z6YzJGblpTQTlJRjkwYUdsekxsOW1hV3gwWlhKTlpYTnpZV2RsVkc5SVlYTm9LRzFsYzNOaFoyVXNJR1JoZEdFZ0t5QnBkaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1amNubHdkRzh1ZG1WeWFXWjVTRTFCUXloamFHRjBTMlY1Y3k1clpYbHpMbWg1Y0dWeWRIbFViMGhoYzJoTFpYa3NJR1pwYkhSbGNtVmtUV1Z6YzJGblpTd2dhR0Z6YUNrdWRHaGxiaWh5WlhOMWJIUWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnbmFHRnphQ0J5WlhOMWJIUW5MQ0J5WlhOMWJIUXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdOb1pXTnJJR2xtSUhSb1pYSmxJSGRoY3lCaGJpQnBibWwwYVdGc0lHMWxjM05oWjJVZ2RHaGhkQ0IzWVhNZ1lteHZZMnRsWkNCaGJtUWdjMlZ1WkNCcGRGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZMmhoZEV0bGVYTXVhVzVwZEdsaGJFMWxjM05oWjJVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYVc1cGRHbGhiRTFsYzNOaFoyVWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFuWTNKbFlYUmxKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSdk9pQnRaWE56WVdkbExtWnliMjBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWNtOXRPaUJ0WlhOellXZGxMblJ2TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ltOWtlVG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1kyaGhkRXRsZVhNdWFXNXBkR2xoYkUxbGMzTmhaMlV1WW05a2VTNTJZV3gxWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLSHR0WlhOellXZGxPaUJwYm1sMGFXRnNUV1Z6YzJGblpTd2dZMmhoZEV0bGVYTTZJR05vWVhSTFpYbHpmU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkwzTmxibVJ6SUhSb1pTQnpaWE56YVc5dVMyVjVJSFJ2SUhSb1pTQnpkV0p6WTNKcFltVnlJR2g1Y0dWeWRIbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVmYzJWdVpGSmxjRzl5ZEdWeVUyVnpjMmx2Ymt0bGVTaHRaWE56WVdkbExDQmphR0YwUzJWNWN5a3VkR2hsYmloMllXeDFaU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdKM0psY0c5eWRHVnlVMlZ6YzJsdmJrdGxlU2M2WEc1Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduY21Wd2IzSjBaWEpUWlhOemFXOXVTMlY1SnlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2RtRnNkV1ZKVm1GdVpFaGhjMmdnUFNCS1UwOU9MbkJoY25ObEtHRjBiMklvYldWemMyRm5aUzVpYjJSNUxuWmhiSFZsS1NrN1hHNGdJQ0FnSUNBZ0lDQWdhR0Z6YUNBOUlGOTBhR2x6TG1OeWVYQjBieTVrWldOdlpHVW9kbUZzZFdWSlZtRnVaRWhoYzJndWFHRnphQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2FYWWdQU0JmZEdocGN5NWpjbmx3ZEc4dVpHVmpiMlJsS0haaGJIVmxTVlpoYm1SSVlYTm9MbWwyS1R0Y2JpQWdJQ0FnSUNBZ0lDQnNaWFFnWlc1amNubHdkR1ZrVm1Gc2RXVWdQU0JmZEdocGN5NWpjbmx3ZEc4dVpHVmpiMlJsS0haaGJIVmxTVlpoYm1SSVlYTm9MblpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2NHRnljMlZrVm1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnYkdWMElITmxjM05wYjI1TFpYazdYRzRnSUNBZ0lDQWdJQ0FnYkdWMElHUmhkR0ZQWW1wbFkzUlZVa3c3WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJSEpsWTJWcGRtVnlRV05yYm05M2JHVmtaMlZOYzJjN1hHNWNiaUFnSUNBZ0lDQWdJQ0JmZEdocGN5NWpjbmx3ZEc4dVpHVmpjbmx3ZEVGRlV5aGphR0YwUzJWNWN5NXJaWGx6TG1oNWNHVnlkSGxVYjFObGMzTnBiMjVMWlhrc0lHVnVZM0o1Y0hSbFpGWmhiSFZsTENCcGRpa3VkR2hsYmloa1pXTnllWEIwWldSV1lXeDFaU0E5UGlCN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhCaGNuTmxaRlpoYkhWbElEMGdTbE5QVGk1d1lYSnpaU2hrWldOeWVYQjBaV1JXWVd4MVpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCelpYTnphVzl1UzJWNUlEMGdYM1JvYVhNdVkzSjVjSFJ2TG1SbFkyOWtaU2h3WVhKelpXUldZV3gxWlM1MllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZWFJoVDJKcVpXTjBWVkpNSUQwZ2NHRnljMlZrVm1Gc2RXVXVaR0YwWVU5aWFtVmpkRlZTVER0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHMWxjM05oWjJWVWIwaGhjMmdnUFNCZmRHaHBjeTVmWm1sc2RHVnlUV1Z6YzJGblpWUnZTR0Z6YUNodFpYTnpZV2RsTENCa1pXTnllWEIwWldSV1lXeDFaU0FySUdsMktUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5MGFHbHpMbU55ZVhCMGJ5NTJaWEpwWm5sSVRVRkRLR05vWVhSTFpYbHpMbXRsZVhNdWFIbHdaWEowZVZSdlNHRnphRXRsZVN3Z2JXVnpjMkZuWlZSdlNHRnphQ3dnYUdGemFDazdYRzVjYmlBZ0lDQWdJQ0FnSUNCOUtTNTBhR1Z1S0doaGMyaFNaWE4xYkhRZ1BUNGdlMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMMk52Ym5OdmJHVXViRzluS0Nkb1lYTm9JSE4xWTJObGMzTm1kV3hzZVNCMllXeHBaR0YwWldRZ0p5d2dhR0Z6YUZKbGMzVnNkQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtUmhkR0ZQWW1wbFkzUlRaWE56YVc5dVMyVjVjMXRrWVhSaFQySnFaV04wVlZKTVhTQTlJQ0I3YzJWemMybHZia3RsZVRvZ2MyVnpjMmx2Ymt0bGVTd2dhWE5VYjBWdVkzSjVjSFE2SUhSeWRXVjlPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBkaUE5SUY5MGFHbHpMbU55ZVhCMGJ5NW5aVzVsY21GMFpVbFdLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlM1cGRpQTlJRjkwYUdsekxtTnllWEIwYnk1bGJtTnZaR1VvYVhZcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWDNSb2FYTXVZM0o1Y0hSdkxtVnVZM0o1Y0hSQlJWTW9ZMmhoZEV0bGVYTXVhMlY1Y3k1b2VYQmxjblI1Um5KdmJWTmxjM05wYjI1TFpYa3NJQ2R2YXlFaEp5d2dhWFlwTzF4dUlDQWdJQ0FnSUNBZ0lIMHBMblJvWlc0b1pXNWpjbmx3ZEdWa1ZtRnNkV1VnUFQ0Z2UxeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXTmxhWFpsY2tGamEyNXZkMnhsWkdkbFRYTm5JRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQW5hR0Z1WkhOb1lXdGxKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzg2SUcxbGMzTmhaMlV1Wm5KdmJTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1puSnZiVG9nYldWemMyRm5aUzUwYnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWW05a2VUb2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2hoYm1SemFHRnJaVkJvWVhObE9pQW5jbVZqWldsMlpYSkJZMnR1YjNkc1pXUm5aU2RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1V1ZG1Gc2RXVWdQU0JmZEdocGN5NWpjbmx3ZEc4dVpXNWpiMlJsS0dWdVkzSjVjSFJsWkZaaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J0WlhOellXZGxWRzlJWVhOb0lEMGdYM1JvYVhNdVgyWnBiSFJsY2sxbGMzTmhaMlZVYjBoaGMyZ29jbVZqWldsMlpYSkJZMnR1YjNkc1pXUm5aVTF6Wnl3Z0oyOXJJU0VuSUNzZ2FYWXNJR05vWVhSTFpYbHpMbWg1Y0dWeWRIbEdjbTl0TG0xbGMzTmhaMlZKYm1adktUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5MGFHbHpMbU55ZVhCMGJ5NW9ZWE5vU0UxQlF5aGphR0YwUzJWNWN5NXJaWGx6TG1oNWNHVnlkSGxHY205dFNHRnphRXRsZVN3Z2JXVnpjMkZuWlZSdlNHRnphQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTa3VkR2hsYmlob1lYTm9aV1JOWlhOellXZGxJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCbWFXNWhiRlpoYkhWbElEMGdZblJ2WVNoS1UwOU9Mbk4wY21sdVoybG1lU2g3ZG1Gc2RXVTZJSFpoYkhWbExuWmhiSFZsTENCb1lYTm9PaUJmZEdocGN5NWpjbmx3ZEc4dVpXNWpiMlJsS0doaGMyaGxaRTFsYzNOaFoyVXBMQ0JwZGpvZ2RtRnNkV1V1YVhaOUtTazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxZMlZwZG1WeVFXTnJibTkzYkdWa1oyVk5jMmN1WW05a2VTNTJZV3gxWlNBOUlHWnBibUZzVm1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0h0dFpYTnpZV2RsT2lCeVpXTmxhWFpsY2tGamEyNXZkMnhsWkdkbFRYTm5MQ0JqYUdGMFMyVjVjem9nWTJoaGRFdGxlWE45S1R0Y2JpQWdJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnWTJGelpTQW5jbVZqWldsMlpYSkJZMnR1YjNkc1pXUm5aU2M2WEc1Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduY21WalpXbDJaWEpCWTJ0dWIzZHNaV1JuWlNjcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnYkdWMElISmxZMlZwZG1Wa2RtRnNkV1ZKVm1GdVpFaGhjMmdnUFNCS1UwOU9MbkJoY25ObEtHRjBiMklvYldWemMyRm5aUzVpYjJSNUxuWmhiSFZsS1NrN1hHNGdJQ0FnSUNBZ0lDQWdiR1YwSUhKbFkyVnBkbVZrU0dGemFDQTlJRjkwYUdsekxtTnllWEIwYnk1a1pXTnZaR1VvY21WalpXbDJaV1IyWVd4MVpVbFdZVzVrU0dGemFDNW9ZWE5vS1R0Y2JpQWdJQ0FnSUNBZ0lDQnBkaUE5SUY5MGFHbHpMbU55ZVhCMGJ5NWtaV052WkdVb2NtVmpaV2wyWldSMllXeDFaVWxXWVc1a1NHRnphQzVwZGlrN1hHNGdJQ0FnSUNBZ0lDQWdiR1YwSUhKbFkyVnBkbVZrUlc1amNubHdkR1ZrVm1Gc2RXVWdQU0JmZEdocGN5NWpjbmx3ZEc4dVpHVmpiMlJsS0hKbFkyVnBkbVZrZG1Gc2RXVkpWbUZ1WkVoaGMyZ3VkbUZzZFdVcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVZM0o1Y0hSdkxtUmxZM0o1Y0hSQlJWTW9ZMmhoZEV0bGVYTXVhMlY1Y3k1b2VYQmxjblI1Vkc5VFpYTnphVzl1UzJWNUxDQnlaV05sYVhabFpFVnVZM0o1Y0hSbFpGWmhiSFZsTENCcGRpa3VkR2hsYmloa1pXTnllWEIwWldSV1lXeDFaU0E5UGlCN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQm1hV3gwWlhKbFpFMWxjM05oWjJVZ1BTQmZkR2hwY3k1ZlptbHNkR1Z5VFdWemMyRm5aVlJ2U0dGemFDaHRaWE56WVdkbExDQmtaV055ZVhCMFpXUldZV3gxWlNBcklHbDJLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTVqY25sd2RHOHVkbVZ5YVdaNVNFMUJReWhqYUdGMFMyVjVjeTVyWlhsekxtaDVjR1Z5ZEhsVWIwaGhjMmhMWlhrc0lHWnBiSFJsY21Wa1RXVnpjMkZuWlN3Z2NtVmpaV2wyWldSSVlYTm9LVHRjYmlBZ0lDQWdJQ0FnSUNCOUtTNTBhR1Z1S0doaGMyaFNaWE4xYkhRZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OWpiMjV6YjJ4bExteHZaeWduYUdGemFGSmxjM1ZzZENBbkxDQm9ZWE5vVW1WemRXeDBLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdOaGJHeGlZV05ySUQwZ1kyaGhkRXRsZVhNdVkyRnNiR0poWTJzN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGpZV3hzWW1GamF5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZV3hzWW1GamF5Z25hR0Z1WkZOb1lXdGxSVzVrSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtDZG9ZVzVrVTJoaGEyVkZibVFuS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnWkdWbVlYVnNkRHBjYmlBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvYldWemMyRm5aU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNCZmMyVnVaRkpsY0c5eWRHVnlVMlZ6YzJsdmJrdGxlU2h0WlhOellXZGxMQ0JqYUdGMFMyVjVjeWtnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ2JHVjBJSE5sYzNOcGIyNUxaWGxDZFc1a2JHVWdQU0JmZEdocGN5NWtZWFJoVDJKcVpXTjBVMlZ6YzJsdmJrdGxlWE5iWTJoaGRFdGxlWE11WkdGMFlVOWlhbVZqZEZWU1RGMDdYRzRnSUNBZ2JHVjBJSEpsY0c5eWRHVnlVMlZ6YzJsdmJrdGxlVTF6Wnp0Y2JpQWdJQ0JzWlhRZ2RtRnNkV1ZVYjBWdVkzSjVjSFE3WEc0Z0lDQWdiR1YwSUhObGMzTnBiMjVMWlhrN1hHNGdJQ0FnYkdWMElHbDJPMXh1SUNBZ0lHeGxkQ0IyWVd4MVpTQTlJSHQ5TzF4dVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4dVhHNGdJQ0FnSUNBdkwybG1JSFJvWlhKbElHbHpJRzV2ZENCNVpYUWdZU0J6WlhOemFXOXVJRXRsZVN3Z1oyVnVaWEpoZEdWeklHRWdibVYzSUc5dVpWeHVJQ0FnSUNBZ2FXWWdLQ0Z6WlhOemFXOXVTMlY1UW5WdVpHeGxLU0I3WEc0Z0lDQWdJQ0FnSUhObGMzTnBiMjVMWlhrZ1BTQmZkR2hwY3k1amNubHdkRzh1WjJWdVpYSmhkR1ZTWVc1a2IyMG9LVHRjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVaR0YwWVU5aWFtVmpkRk5sYzNOcGIyNUxaWGx6VzJOb1lYUkxaWGx6TG1SaGRHRlBZbXBsWTNSVlVreGRJRDBnZTNObGMzTnBiMjVMWlhrNklITmxjM05wYjI1TFpYa3NJR2x6Vkc5RmJtTnllWEIwT2lCMGNuVmxmVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSE5sYzNOcGIyNUxaWGtnUFNCelpYTnphVzl1UzJWNVFuVnVaR3hsTG5ObGMzTnBiMjVMWlhrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lIWmhiSFZsVkc5RmJtTnllWEIwSUQwZ1NsTlBUaTV6ZEhKcGJtZHBabmtvZTNaaGJIVmxPaUJmZEdocGN5NWpjbmx3ZEc4dVpXNWpiMlJsS0hObGMzTnBiMjVMWlhrcExDQmtZWFJoVDJKcVpXTjBWVkpNT2lCamFHRjBTMlY1Y3k1a1lYUmhUMkpxWldOMFZWSk1mU2s3WEc1Y2JpQWdJQ0FnSUdsMklEMGdYM1JvYVhNdVkzSjVjSFJ2TG1kbGJtVnlZWFJsU1ZZb0tUdGNiaUFnSUNBZ0lIWmhiSFZsTG1sMklEMGdYM1JvYVhNdVkzSjVjSFJ2TG1WdVkyOWtaU2hwZGlrN1hHNGdJQ0FnSUNCZmRHaHBjeTVqY25sd2RHOHVaVzVqY25sd2RFRkZVeWhqYUdGMFMyVjVjeTVyWlhsekxtaDVjR1Z5ZEhsR2NtOXRVMlZ6YzJsdmJrdGxlU3dnZG1Gc2RXVlViMFZ1WTNKNWNIUXNJR2wyS1M1MGFHVnVLR1Z1WTNKNWNIUmxaRlpoYkhWbElEMCtJSHRjYmx4dUlDQWdJQ0FnSUNCeVpYQnZjblJsY2xObGMzTnBiMjVMWlhsTmMyY2dQU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSjJoaGJtUnphR0ZyWlNjc1hHNGdJQ0FnSUNBZ0lDQWdkRzg2SUcxbGMzTmhaMlV1Wm5KdmJTeGNiaUFnSUNBZ0lDQWdJQ0JtY205dE9pQnRaWE56WVdkbExuUnZMRnh1SUNBZ0lDQWdJQ0FnSUdKdlpIazZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHaGhibVJ6YUdGclpWQm9ZWE5sT2lBbmNtVndiM0owWlhKVFpYTnphVzl1UzJWNUp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJmZEdocGN5NWpjbmx3ZEc4dVpXNWpiMlJsS0dWdVkzSjVjSFJsWkZaaGJIVmxLVnh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdJQ0JzWlhRZ1ptbHNkR1Z5WldSTlpYTnpZV2RsSUQwZ1gzUm9hWE11WDJacGJIUmxjazFsYzNOaFoyVlViMGhoYzJnb2NtVndiM0owWlhKVFpYTnphVzl1UzJWNVRYTm5MQ0IyWVd4MVpWUnZSVzVqY25sd2RDQXJJR2wyTENCamFHRjBTMlY1Y3k1b2VYQmxjblI1Um5KdmJTNXRaWE56WVdkbFNXNW1ieWs3WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5MGFHbHpMbU55ZVhCMGJ5NW9ZWE5vU0UxQlF5aGphR0YwUzJWNWN5NXJaWGx6TG1oNWNHVnlkSGxHY205dFNHRnphRXRsZVN3Z1ptbHNkR1Z5WldSTlpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUgwcExuUm9aVzRvYUdGemFHVmtUV1Z6YzJGblpTQTlQaUI3WEc1Y2JpQWdJQ0FnSUNBZ2JHVjBJSFpoYkhWbFYybDBhRWhoYzJnZ1BTQmlkRzloS0VwVFQwNHVjM1J5YVc1bmFXWjVLSHQyWVd4MVpUb2djbVZ3YjNKMFpYSlRaWE56YVc5dVMyVjVUWE5uTG1KdlpIa3VkbUZzZFdVc0lHaGhjMmc2SUY5MGFHbHpMbU55ZVhCMGJ5NWxibU52WkdVb2FHRnphR1ZrVFdWemMyRm5aU2tzSUdsMk9pQjJZV3gxWlM1cGRuMHBLVHRjYmx4dUlDQWdJQ0FnSUNCeVpYQnZjblJsY2xObGMzTnBiMjVMWlhsTmMyY3VZbTlrZVM1MllXeDFaU0E5SUhaaGJIVmxWMmwwYUVoaGMyZzdYRzRnSUNBZ0lDQWdJSEpsYzI5c2RtVW9lMjFsYzNOaFoyVTZJSEpsY0c5eWRHVnlVMlZ6YzJsdmJrdGxlVTF6Wnl3Z1kyaGhkRXRsZVhNNklHTm9ZWFJMWlhsemZTazdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUhKbGRIVnlibk1nZEdobElISmxjRzl5ZEdWeUlHRnpjMjlqYVdGMFpXUWdkRzhnZEdobElHUmhkR0ZQWW1wbFkzUWdWVkpNWEc0Z0lDb2dRSEJoY21GdElDQWdlMU4wY21sdVozMGdJQ0JrWVhSaFQySnFaV04wVlZKTUlDQWdJQ0FnSUNBZ1pHRjBZVTlpYW1WamRDQjFjbXhjYmlBZ0tpQkFjbVYwZFhKdUlDQWdlMU4wY21sdVozMGdJSEpsY0c5eWRHVnlJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhUMkpxWldOMElIVnliQ0J5WlhCdmNuUmxjbHh1SUNBcUwxeHVJQ0JmWjJWMFNIbHdaWEowZVVaeWIyMUVZWFJoVDJKcVpXTjBLR1JoZEdGUFltcGxZM1JWVWt3cElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4dVhHNGdJQ0FnSUNBdkwxUlBSRThnY21WdGIzWmxJSFJvYVhNZ2JHOW5hV01nWVc1a0lHMXZkbVVnYVhRZ2RHOGdZU0IxZEdsc0lHWjFibU4wYVc5dVhHNWNiaUFnSUNBZ0lHeGxkQ0J6Y0d4cGRHVmtWVkpNSUQwZ1pHRjBZVTlpYW1WamRGVlNUQzV6Y0d4cGRDZ25MeWNwTzF4dUlDQWdJQ0FnYkdWMElHWnBibUZzVlZKTUlEMGdjM0JzYVhSbFpGVlNURnN3WFNBcklDY3ZMeWNnS3lCemNHeHBkR1ZrVlZKTVd6SmRJQ3NnSnk4bklDc2djM0JzYVhSbFpGVlNURnN6WFR0Y2JpQWdJQ0FnSUdsbUlDaHpjR3hwZEdWa1ZWSk1MbXhsYm1kMGFDQStJRFlwSUh0Y2JpQWdJQ0FnSUNBZ1ptbHVZV3hWVWt3Z1BTQnpjR3hwZEdWa1ZWSk1XekJkSUNzZ0p5OHZKeUFySUhOd2JHbDBaV1JWVWt4Yk1sMGdLeUFuTHljZ0t5QnpjR3hwZEdWa1ZWSk1Xek5kSUNzZ0p5OG5JQ3NnYzNCc2FYUmxaRlZTVEZzMFhUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdMeThnWTJobFkyc2dhV1lnYVhNZ2RHaGxJR055WldGMGIzSWdiMllnZEdobElHaDVjR1Z5ZEhsY2JpQWdJQ0FnSUd4bGRDQnlaWEJ2Y25SbGNsVlNUQ0E5SUY5MGFHbHpMbkpsWjJsemRISjVMbWRsZEZKbGNHOXlkR1Z5VlZKTVUzbHVZMmh2Ym05MWN5aG1hVzVoYkZWU1RDazdYRzVjYmlBZ0lDQWdJR2xtSUNoeVpYQnZjblJsY2xWU1RDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhOdmJIWmxLSEpsY0c5eWRHVnlWVkpNS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUM4dklHTm9aV05ySUdsbUlIUm9aWEpsSUdseklHRnNjbVZoWkhrZ1lXNGdZWE56YjJOcFlYUnBiMjRnWm5KdmJTQmhiaUJvZVhCbGNuUjVWVkpNSUhSdklIUm9aU0JrWVhSaFQySnFaV04wWEc0Z0lDQWdJQ0FnSUd4bGRDQnpkRzl5WldSU1pYQnZjblJsY2xWU1RDQTlJRjkwYUdsekxtUmhkR0ZQWW1wbFkzUnpTV1JsYm5ScGRIbGJabWx1WVd4VlVreGRPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHpkRzl5WldSU1pYQnZjblJsY2xWU1RDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvYzNSdmNtVmtVbVZ3YjNKMFpYSlZVa3dwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZJR05vWldOcklHbG1JSFJvWlhKbElHbHpJR0Z1ZVNCb2VYQmxjblI1SUhSb1lYUWdjM1ZpYzJOeWFXSmxaQ0IwYUdVZ1pHRjBZVTlpYW1WamRGVlNURnh1SUNBZ0lDQWdJQ0FnSUd4bGRDQnpkV0p6WTNKcFltVnlTSGx3WlhKMGVTQTlJRjkwYUdsekxuSmxaMmx6ZEhKNUxtZGxkRVJoZEdGUFltcGxZM1JUZFdKelkzSnBZbVZ5U0hsd1pYSjBlU2hrWVhSaFQySnFaV04wVlZKTUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHpkV0p6WTNKcFltVnlTSGx3WlhKMGVTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNoemRXSnpZM0pwWW1WeVNIbHdaWEowZVNrN1hHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjMlZoY21Ob0lHbHVJR1J2YldGcGJpQnlaV2RwYzNSeWVTQm1iM0lnZEdobElHaDVjR1Z5ZEhrZ1lYTnpiMk5wWVhSbFpDQjBieUIwYUdVZ1pHRjBZVTlpYW1WamRGeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2MyVmhjbU5vSUdsdUlHTmhjMlVnYVhNZ1lTQnpkV0p6WTNKcFltVnlJSGRvYnlCM1lXNTBjeUIwYnlCcmJtOTNJSFJvWlNCeVpYQnZjblJsY2x4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWNtVm5hWE4wY25rdVpHbHpZMjkyWlhKRVlYUmhUMkpxWldOMFVHVnlWVkpNS0dacGJtRnNWVkpNTENCemNHeHBkR1ZrVlZKTVd6SmRLUzUwYUdWdUtHUmhkR0ZQWW1wbFkzUWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NWtZWFJoVDJKcVpXTjBjMGxrWlc1MGFYUjVXMlpwYm1Gc1ZWSk1YU0E5SUdSaGRHRlBZbXBsWTNRdWNtVndiM0owWlhJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvWkdGMFlVOWlhbVZqZEM1eVpYQnZjblJsY2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TENCbGNuSWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WldwbFkzUW9aWEp5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nWm1sc2RHVnlJSFJvWlNCdFpYTnpZV2RsY3lCMGJ5Qm9ZWE5vTENCaWVTQnlaVzF2ZG1sdVp5QnpiMjFsSUdacFpXeGtjeUJ1YjNRZ1oyVnVaWEpoZEdWa0lHSjVJSFJvWlNCeWRXNTBhVzFsSUdOdmNtVmNiaUFnS2lCQWNHRnlZVzBnZTAxbGMzTmhaMlY5SUNCdFpYTnpZV2RsSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlZ4dUlDQXFJRUJ3WVhKaGJTQjdVM1J5YVc1bmZTQWdaR1ZqY25sd2RHVmtWbUZzZFdVZ0tFOXdkR2x2Ym1Gc0tTQWdJQ0IyWVd4MVpTQm1jbTl0SUdKdlpIa3VkbUZzZFdVZ2FXNGdZMkZ6WlNCcGRDQnZjbWxuYVc1aGJHeDVJR052YldWeklHVnVZM0o1Y0hSbFpGeHVJQ0FxSUVCd1lYSmhiU0I3U2xOUFRuMGdJR2xrWlc1MGFYUjVLRTl3ZEdsdmJtRnNLU0FnSUNCaFpHUWdkR2hsSUdoNWNHVnlkSGtnYVdSbGJuUnBkSGtnWVhOemIyTnBZWFJsWkNCcGJpQmpZWE5sSUdseklHNXZkQ0JoWkdSbFpDQjBieUIwYUdVZ2FXNXBkR2xoYkNCdFpYTnpZV2RsWEc0Z0lDb2dRSEpsZEhWeWJpQjdUV1Z6YzJGblpYMGdJRzVsZHlCdFpYTnpZV2RsSUdacGJIUmxjbVZrWEc0Z0lDb3ZYRzRnSUY5bWFXeDBaWEpOWlhOellXZGxWRzlJWVhOb0tHMWxjM05oWjJVc0lHUmxZM0o1Y0hSbFpGWmhiSFZsTENCcFpHVnVkR2wwZVNrZ2UxeHVYRzRnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUhSNWNHVTZJRzFsYzNOaFoyVXVkSGx3WlN4Y2JpQWdJQ0FnSUdaeWIyMDZJRzFsYzNOaFoyVXVabkp2YlN4Y2JpQWdJQ0FnSUhSdk9pQWdJRzFsYzNOaFoyVXVkRzhzWEc0Z0lDQWdJQ0JpYjJSNU9pQjdYRzRnSUNBZ0lDQWdJR2xrWlc1MGFYUjVPaUJwWkdWdWRHbDBlU0I4ZkNCdFpYTnpZV2RsTG1KdlpIa3VhV1JsYm5ScGRIa3NYRzRnSUNBZ0lDQWdJSFpoYkhWbE9pQmtaV055ZVhCMFpXUldZV3gxWlNCOGZDQnRaWE56WVdkbExtSnZaSGt1ZG1Gc2RXVXNYRzRnSUNBZ0lDQWdJR2hoYm1SemFHRnJaVkJvWVhObE9pQnRaWE56WVdkbExtSnZaSGt1YUdGdVpITm9ZV3RsVUdoaGMyVmNiaUFnSUNBZ0lIMWNiaUFnSUNCOU8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2daMlZ1WlhKaGRHVnpJSFJvWlNCcGJtbDBhV0ZzSUhOMGNuVmpkSFZ5WlNCbWIzSWdkR2hsSUd0bGVYTWdZbVYwZDJWbGJpQjBkMjhnZFhObGNuTmNiaUFnS2lCQWNHRnlZVzBnZTBwVFQwNTlJQ0FnSUcxbGMzTmhaMlVnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHVhWFJwWVd3Z2JXVnpjMkZuWlNCMGFHRjBJSFJ5YVdkblpYSnpJSFJvWlNCdGRYUjFZV3dnWVhWMGFHVnVkR2xqWVhScGIyNWNiaUFnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnSUhWelpYSlZVa3dnSUNBZ0lDQWdJQ0FnSUNBZ0lIVnpaWEpWVWt4Y2JpQWdLaUJBY0dGeVlXMGdlMkp2YjJ4bFlXNTlJSEpsWTJWcGRtVnlLRTl3ZEdsdmJtRnNLU0FnYVc1a2FXTmhkR1Z6SUdsbUlHbHpJSFJvWlNCelpXNWtaWElnYjNJZ2RHaGxJSEpsWTJWcGRtVnlJSFJvWVhRZ1kzSmxZWFJsY3lCaElHNWxkeUJqYUdGMElHTnllWEIwYjF4dUlDQXFJRUJ5WlhSMWNtNGdlMHBUVDA1OUlHNWxkME5vWVhSRGNubHdkRzhnSUc1bGR5QktVMDlPSUhOMGNuVmpkSFZ5WlNCbWIzSWdkR2hsSUdOb1lYUWdZM0o1Y0hSdlhHNGdJQ292WEc0Z0lGOXVaWGREYUdGMFEzSjVjSFJ2S0cxbGMzTmhaMlVzSUhWelpYSlZVa3dzSUhKbFkyVnBkbVZ5S1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJQzh2WTJobFkyc2dkMmhsZEdobGNpQnBjeUIwYUdVZ2MyVnVaR1Z5SUc5eUlIUm9aU0J5WldObGFYWmxjaUIwYnlCamNtVmhkR1VnWVNCdVpYY2dZMmhoZEVOeWVYQjBiMXh1SUNBZ0lDOHZkRzhnYldGdWRHRnBiaUJqYjI1emFYTjBaVzVqZVNCdmJpQjBhR1VnYTJWNWN5QnBaaUIwYUdVZ2NtVmpaV2wyWlhJZ1kzSmxZWFJsSUdFZ2JtVjNJR05vWVhSRGNubHdkRzhzWEc0Z0lDQWdMeTkwYUdWdUlHbHVkbVZ5ZENCMGFHVWdabWxsYkdSelhHNGdJQ0FnYkdWMElHWnliMjBnUFNBb2NtVmpaV2wyWlhJcElEOGdiV1Z6YzJGblpTNTBieUE2SUcxbGMzTmhaMlV1Wm5KdmJUdGNiaUFnSUNCc1pYUWdkRzhnUFNBb2NtVmpaV2wyWlhJcElEOGdiV1Z6YzJGblpTNW1jbTl0SURvZ2JXVnpjMkZuWlM1MGJ6dGNibHh1SUNBZ0lHeGxkQ0IxYzJWeVNXNW1ieUE5SUY5MGFHbHpMbWRsZEVsa1pXNTBhWFI1S0hWelpYSlZVa3dwTzF4dVhHNGdJQ0FnYkdWMElHNWxkME5vWVhSRGNubHdkRzhnUFZ4dUlDQWdJSHRjYmlBZ0lDQWdJR2g1Y0dWeWRIbEdjbTl0T2x4dUlDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNCb2VYQmxjblI1T2lCbWNtOXRMRnh1SUNBZ0lDQWdJQ0IxYzJWeVNVUTZJSFZ6WlhKSmJtWnZMbTFsYzNOaFoyVkpibVp2TG5WelpYSlFjbTltYVd4bExuVnpaWEp1WVcxbExGeHVJQ0FnSUNBZ0lDQndjbWwyWVhSbFMyVjVPaUIxYzJWeVNXNW1ieTVyWlhsUVlXbHlMbkJ5YVhaaGRHVXNYRzRnSUNBZ0lDQWdJSEIxWW14cFkwdGxlVG9nZFhObGNrbHVabTh1YTJWNVVHRnBjaTV3ZFdKc2FXTXNYRzRnSUNBZ0lDQWdJR0Z6YzJWeWRHbHZiam9nZFhObGNrbHVabTh1WVhOelpYSjBhVzl1TEZ4dUlDQWdJQ0FnSUNCdFpYTnpZV2RsU1c1bWJ6b2dkWE5sY2tsdVptOHViV1Z6YzJGblpVbHVabTljYmlBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0JvZVhCbGNuUjVWRzg2WEc0Z0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUdoNWNHVnlkSGs2SUhSdkxGeHVJQ0FnSUNBZ0lDQjFjMlZ5U1VRNklIVnVaR1ZtYVc1bFpDeGNiaUFnSUNBZ0lDQWdjSFZpYkdsalMyVjVPaUIxYm1SbFptbHVaV1FzWEc0Z0lDQWdJQ0FnSUdGemMyVnlkR2x2YmpvZ2RXNWtaV1pwYm1Wa1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ2EyVjVjenBjYmlBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnYUhsd1pYSjBlVlJ2VTJWemMybHZia3RsZVRvZ2RXNWtaV1pwYm1Wa0xGeHVJQ0FnSUNBZ0lDQm9lWEJsY25SNVJuSnZiVk5sYzNOcGIyNUxaWGs2SUhWdVpHVm1hVzVsWkN4Y2JpQWdJQ0FnSUNBZ2FIbHdaWEowZVZSdlNHRnphRXRsZVRvZ2RXNWtaV1pwYm1Wa0xGeHVJQ0FnSUNBZ0lDQm9lWEJsY25SNVJuSnZiVWhoYzJoTFpYazZJSFZ1WkdWbWFXNWxaQ3hjYmlBZ0lDQWdJQ0FnZEc5U1lXNWtiMjA2SUhWdVpHVm1hVzVsWkN4Y2JpQWdJQ0FnSUNBZ1puSnZiVkpoYm1SdmJUb2dkVzVrWldacGJtVmtMRnh1SUNBZ0lDQWdJQ0J3Y21WdFlYTjBaWEpMWlhrNklIVnVaR1ZtYVc1bFpDeGNiaUFnSUNBZ0lDQWdiV0Z6ZEdWeVMyVjVPaUIxYm1SbFptbHVaV1JjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0JvWVc1a2MyaGhhMlZJYVhOMGIzSjVPaUI3WEc0Z0lDQWdJQ0FnSUhObGJtUmxja2hsYkd4dk9pQjFibVJsWm1sdVpXUXNYRzRnSUNBZ0lDQWdJSEpsWTJWcGRtVnlTR1ZzYkc4NklIVnVaR1ZtYVc1bFpDeGNiaUFnSUNBZ0lDQWdjMlZ1WkdWeVEyVnlkR2xtYVdOaGRHVTZJSFZ1WkdWbWFXNWxaQ3hjYmlBZ0lDQWdJQ0FnY21WalpXbDJaWEpHYVc1cGMyaGxaRTFsYzNOaFoyVTZJSFZ1WkdWbWFXNWxaRnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQWdJR2x1YVhScFlXeE5aWE56WVdkbE9pQW9iV1Z6YzJGblpTNWliMlI1TG1sbmJtOXlaU2tnUHlCMWJtUmxabWx1WldRZ09pQnRaWE56WVdkbExGeHVJQ0FnSUNBZ1kyRnNiR0poWTJzNklHMWxjM05oWjJVdVkyRnNiR0poWTJzc1hHNGdJQ0FnSUNCaGRYUm9aVzUwYVdOaGRHVmtPaUJtWVd4elpTeGNiaUFnSUNBZ0lHUmhkR0ZQWW1wbFkzUlZVa3c2SUcxbGMzTmhaMlV1WkdGMFlVOWlhbVZqZEZWU1RGeHVJQ0FnSUgwN1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM1EyaGhkRU55ZVhCMGJ6dGNiaUFnZlZ4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQkpaR1Z1ZEdsMGVVMXZaSFZzWlR0Y2JpSXNJbU5zWVhOeklFTnZiV0pwYm1sdVowRnNaMjl5YVhSb2JTQjdYRzVjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1EyOXRZbWx1YVc1blFXeG5iM0pwZEdodE8xeHVJaXdpWTJ4aGMzTWdUM0JsY21GMGIzSnpJSHRjYmx4dUlDQmhibVFvY0dGeVlXMXpLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIQmhjbUZ0YzFzd1hTQW1KaUJ3WVhKaGJYTmJNVjA3WEc0Z0lIMWNibHh1SUNCaVpYUjNaV1Z1S0hCaGNtRnRjeWtnZTF4dUlDQWdJR3hsZENCemRHRnlkQ0E5SUhCaGNuTmxTVzUwS0hCaGNtRnRjMXN3WFZzd1hTazdYRzRnSUNBZ2JHVjBJR1Z1WkNBOUlIQmhjbk5sU1c1MEtIQmhjbUZ0YzFzd1hWc3hYU2s3WEc0Z0lDQWdiR1YwSUc1dmR5QTlJSEJoY21GdGMxc3hYVHRjYmx4dUlDQWdJR2xtSUNobGJtUWdQQ0J6ZEdGeWRDa2dlMXh1SUNBZ0lDQWdibTkzSUQwZ0tHNXZkeUE4SUhOMFlYSjBLU0EvSUc1dmR5QXJQU0F5TkRBd0lEb2dibTkzTzF4dUlDQWdJQ0FnWlc1a0lDczlJREkwTURBN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJQ2h1YjNjZ1BpQnpkR0Z5ZENBbUppQnViM2NnUENCbGJtUXBPMXh1SUNCOVhHNWNiaUFnWlhGMVlXeHpLSEJoY21GdGN5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCd1lYSmhiWE5iTUYwZ1BUMDlJQ2NxSnlCOGZDQndZWEpoYlhOYk1GMGdQVDA5SUhCaGNtRnRjMXN4WFR0Y2JpQWdmVnh1WEc0Z0lHbHVLSEJoY21GdGN5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCd1lYSmhiWE5iTUYwdWFXNWtaWGhQWmlod1lYSmhiWE5iTVYwcElENGdMVEU3WEc0Z0lIMWNibHh1SUNCdWIzUW9jR0Z5WVcxektTQjdYRzRnSUNBZ2NtVjBkWEp1SUNGd1lYSmhiWE5iTUYwN1hHNGdJSDFjYmx4dUlDQnZjaWh3WVhKaGJYTXBJSHRjYmlBZ0lDQnlaWFIxY200Z2NHRnlZVzF6V3pCZElIeDhJSEJoY21GdGMxc3hYVHRjYmlBZ2ZWeHVYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUU5d1pYSmhkRzl5Y3p0Y2JpSXNJbWx0Y0c5eWRDQlBjR1Z5WVhSdmNuTWdabkp2YlNBbkxpOVBjR1Z5WVhSdmNuTW5PMXh1YVcxd2IzSjBJRkoxYm5ScGJXVkRiM0psUTNSNElHWnliMjBnSnk0dlkyOXVkR1Y0ZEM5U2RXNTBhVzFsUTI5eVpVTjBlQ2M3WEc0dktpcGNiaW9nVkdobElGQnZiR2xqZVNCRVpXTnBjMmx2YmlCUWIybHVkQ0FvVUVSUUtTQmtaV05wWkdWeklHbG1JR0VnYldWemMyRm5aU0JwY3lCMGJ5QmlaU0JoZFhSb2IzSnBjMlZrSUdKNUlHTm9aV05yYVc1bklHRWdjMlYwSUc5bVhHNHFJSEJ2YkdsamFXVnpMaUJVYUdVZ2NtVnpiM1Z5WTJVZ2RHOGdZbVVnZG1WeWFXWnBaV1FnYVhNZ2MzQmxZMmxtYVdWa0lHbHVJSFJvWlNCbWFYSnpkQ0IzYjNKa0lHOW1JSFJvWlNBblkyOXVaR2wwYVc5dUp5Qm1hV1ZzWkNCdlpseHVLaUJoSUZCdmJHbGplU0J2WW1wbFkzUXVJRlJvWlNCcGJYQnNaVzFsYm5SaGRHbHZiaUIwYUdGMElIWmxjbWxtYVdWeklHbG1JSFJvWlNCdFpYTnpZV2RsSUdseklHTnZiWEJzYVdGdWRDQjNhWFJvSUdFZ2NHOXNhV041SUdselhHNHFJSE53WldOcFptbGxaQ0JwYmlCaElHaGhjMmgwWVdKc1pTQjBieUJoYkd4dmR5QmtlVzVoYldsaklHUmxabWx1YVhScGIyNGdiMllnZEdobElHbHRjR3hsYldWdWRHRjBhVzl1TENCd2NtOTJhV1JwYm1kY2Jpb2daWGgwWlc1emFXSnBiR2wwZVNCMGJ5QjBhR1VnVUc5c2FXTjVJRVZ1WjJsdVpTQm1kVzVqZEdsdmJtRnNhWFJwWlhNdVhHNHFMMXh1WTJ4aGMzTWdVRVJRSUh0Y2JseHVJQ0JqYjI1emRISjFZM1J2Y2loamIyNTBaWGgwS1NCN1hHNGdJQ0FnZEdocGN5NWpiMjUwWlhoMElEMGdZMjl1ZEdWNGREdGNiaUFnSUNCMGFHbHpMbTl3WlhKaGRHOXljeUE5SUc1bGR5QlBjR1Z5WVhSdmNuTW9LVHRjYmlBZ2ZWeHVYRzRnSUdkbGRDQmpiMjUwWlhoMEtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlqYjI1MFpYaDBPMXh1SUNCOVhHNWNiaUFnWjJWMElHOXdaWEpoZEc5eWN5Z3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYjNCbGNtRjBiM0p6TzF4dUlDQjlYRzVjYmlBZ2MyVjBJR052Ym5SbGVIUW9ZMjl1ZEdWNGRDa2dlMXh1SUNBZ0lIUm9hWE11WDJOdmJuUmxlSFFnUFNCamIyNTBaWGgwTzF4dUlDQjlYRzVjYmlBZ2MyVjBJRzl3WlhKaGRHOXljeWh2Y0dWeVlYUnZjbk1wSUh0Y2JpQWdJQ0IwYUdsekxsOXZjR1Z5WVhSdmNuTWdQU0J2Y0dWeVlYUnZjbk03WEc0Z0lIMWNibHh1SUNCaGNIQnNlVkJ2YkdsamFXVnpLRzFsYzNOaFoyVXNJSEJ2YkdsamFXVnpLU0I3WEc0Z0lDQWdiR1YwSUhKbGMzVnNkQ0E5SUhSb2FYTXVaWFpoYkhWaGRHVlRVRkJ2YkdsamVTaHRaWE56WVdkbExDQndiMnhwWTJsbGN5NXpaWEoyYVdObFVISnZkbWxrWlhKUWIyeHBZM2twTzF4dUlDQWdJR2xtSUNoMGFHbHpMbU52Ym5SbGVIUWdhVzV6ZEdGdVkyVnZaaUJTZFc1MGFXMWxRMjl5WlVOMGVDQW1KaUFvY21WemRXeDBJSHg4SUhKbGMzVnNkQ0E5UFQwZ0owNXZkQ0JCY0hCc2FXTmhZbXhsSnlrcElIdGNiaUFnSUNBZ0lISmxjM1ZzZENBOUlIUm9hWE11WlhaaGJIVmhkR1ZWYzJWeVVHOXNhV041S0cxbGMzTmhaMlVzSUhCdmJHbGphV1Z6TG5WelpYSlFiMnhwWTNrcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0I5WEc1Y2JpQWdaWFpoYkhWaGRHVlRVRkJ2YkdsamVTaHRaWE56WVdkbExDQndiMnhwWTNrcElIdGNiaUFnSUNCc1pYUWdjbVZ6ZFd4ME8xeHVYRzRnSUNBZ2FXWWdLSEJ2YkdsamVTa2dlMXh1SUNBZ0lDQWdjbVZ6ZFd4MElEMGdjRzlzYVdONUxtVjJZV3gxWVhSbEtIUm9hWE11WTI5dWRHVjRkQ3dnYldWemMyRm5aU2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lISmxjM1ZzZENBOUlDZE9iM1FnUVhCd2JHbGpZV0pzWlNjN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnZlZ4dVhHNGdJR1YyWVd4MVlYUmxWWE5sY2xCdmJHbGplU2h0WlhOellXZGxMQ0IwYVhSc1pTa2dlMXh1SUNBZ0lHeGxkQ0J5WlhOMWJIUTdYRzVjYmlBZ0lDQnBaaUFvZEdsMGJHVWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ2JHVjBJSEJ2YkdsamVTQTlJSFJvYVhNdVkyOXVkR1Y0ZEM1MWMyVnlVRzlzYVdOcFpYTmJkR2wwYkdWZE8xeHVJQ0FnSUNBZ2FXWWdLSEJ2YkdsamVTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhOMWJIUWdQU0J3YjJ4cFkza3VaWFpoYkhWaGRHVW9kR2hwY3k1amIyNTBaWGgwTENCdFpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhKbGMzVnNkQ0E5SUNkT2IzUWdRWEJ3YkdsallXSnNaU2M3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lISmxjM1ZzZENBOUlDZE9iM1FnUVhCd2JHbGpZV0pzWlNjN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnZlZ4dVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRkJFVUR0Y2JpSXNJbU5zWVhOeklGQkZVQ0I3WEc1Y2JpQWdZMjl1YzNSeWRXTjBiM0lvWTI5dWRHVjRkQ2tnZTF4dUlDQWdJSFJvYVhNdVkyOXVkR1Y0ZENBOUlHTnZiblJsZUhRN1hHNGdJSDFjYmx4dUlDQmxibVp2Y21ObFVHOXNhV05wWlhNb2JXVnpjMkZuWlN3Z2NHOXNhV05wWlhNc0lHRjFkR2hFWldOcGMybHZiaWtnZTF4dUlDQWdJR3hsZENCd2IyeHBZM2s3WEc1Y2JpQWdJQ0JwWmlBb2NHOXNhV05wWlhNdWRYTmxjbEJ2YkdsamVTa2dlMXh1SUNBZ0lDQWdjRzlzYVdONUlEMGdkR2hwY3k1amIyNTBaWGgwTG5WelpYSlFiMnhwWTJsbGMxdHdiMnhwWTJsbGN5NTFjMlZ5VUc5c2FXTjVYVHRjYmlBZ0lDQWdJR2xtSUNod2IyeHBZM2twSUh0Y2JpQWdJQ0FnSUNBZ2NHOXNhV041TG1WdVptOXlZMlZCWTNScGIyNXpLSFJvYVhNdVkyOXVkR1Y0ZEN3Z2JXVnpjMkZuWlN3Z1lYVjBhRVJsWTJsemFXOXVLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NHOXNhV041SUQwZ2RHaHBjeTVqYjI1MFpYaDBMbk5sY25acFkyVlFjbTkyYVdSbGNsQnZiR2xqZVR0Y2JpQWdJQ0JwWmlBb2NHOXNhV041S1NCN1hHNGdJQ0FnSUNCd2IyeHBZM2t1Wlc1bWIzSmpaVUZqZEdsdmJuTW9kR2hwY3k1amIyNTBaWGgwTENCdFpYTnpZV2RsTENCaGRYUm9SR1ZqYVhOcGIyNHBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJQzhxYzJWdVpFRjFkRzl0WVhScFkwMWxjM05oWjJVb0tTQjdmVnh1WEc0Z0lHWnZjbmRoY21SVWIwbEVLQ2tnZTMxY2JseHVJQ0JtYjNKM1lYSmtWRzlJZVhCbGNuUjVLQ2tnZTMwcUwxeHVYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUZCRlVEdGNiaUlzSW1sdGNHOXlkQ0JFWlc1NVQzWmxjbkpwWkdWeklHWnliMjBnSnk0dlkyOXRZbWx1YVc1blFXeG5iM0pwZEdodGN5OUVaVzU1VDNabGNuSnBaR1Z6Snp0Y2JtbHRjRzl5ZENCR2FYSnpkRUZ3Y0d4cFkyRmliR1VnWm5KdmJTQW5MaTlqYjIxaWFXNXBibWRCYkdkdmNtbDBhRzF6TDBacGNuTjBRWEJ3YkdsallXSnNaU2M3WEc1Y2JtTnNZWE56SUZCdmJHbGplU0I3WEc1Y2JpQWdZMjl1YzNSeWRXTjBiM0lvYTJWNUxDQnlkV3hsY3l3Z1lXTjBhVzl1Y3l3Z1kyOXRZbWx1YVc1blFXeG5iM0pwZEdodEtTQjdYRzRnSUNBZ2RHaHBjeTVoWTNScGIyNXpJRDBnWVdOMGFXOXVjenRjYmlBZ0lDQjBhR2x6TG10bGVTQTlJR3RsZVR0Y2JpQWdJQ0IwYUdsekxuSjFiR1Z6SUQwZ2NuVnNaWE03WEc0Z0lDQWdkR2hwY3k1amIyMWlhVzVwYm1kQmJHZHZjbWwwYUcwZ1BTQmpiMjFpYVc1cGJtZEJiR2R2Y21sMGFHMDdYRzRnSUNBZ2RHaHBjeTVwYzBGamRHbDJaU0E5SUdaaGJITmxPMXh1SUNCOVhHNWNiaUFnWjJWMElHRmpkR2x2Ym5Nb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMkZqZEdsdmJuTTdYRzRnSUgxY2JseHVJQ0JuWlhRZ1kyOXRZbWx1YVc1blFXeG5iM0pwZEdodEtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlqYjIxaWFXNXBibWRCYkdkdmNtbDBhRzA3WEc0Z0lIMWNibHh1SUNCblpYUWdhWE5CWTNScGRtVW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDJselFXTjBhWFpsTzF4dUlDQjlYRzVjYmlBZ1oyVjBJR3RsZVNncElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZhMlY1TzF4dUlDQjlYRzVjYmlBZ1oyVjBJSEoxYkdWektDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5ZFd4bGN6dGNiaUFnZlZ4dVhHNGdJSE5sZENCamIyMWlhVzVwYm1kQmJHZHZjbWwwYUcwb1kyOXRZbWx1YVc1blFXeG5iM0pwZEdodEtTQjdYRzRnSUNBZ2FXWWdLR052YldKcGJtbHVaMEZzWjI5eWFYUm9iU0E5UFQwZ0oyUmxibmxQZG1WeWNtbGtaWE1uS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbDlqYjIxaWFXNXBibWRCYkdkdmNtbDBhRzBnUFNCdVpYY2dSR1Z1ZVU5MlpYSnlhV1JsY3lncE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JwWmlBb1kyOXRZbWx1YVc1blFXeG5iM0pwZEdodElEMDlQU0FuWm1seWMzUkJjSEJzYVdOaFlteGxKeWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlqYjIxaWFXNXBibWRCYkdkdmNtbDBhRzBnUFNCdVpYY2dSbWx5YzNSQmNIQnNhV05oWW14bEtDazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCRmNuSnZjaWduVlc1cmJtOTNiaUJoYkdkdmNtbDBhRzA2SUNjZ0t5QmpiMjFpYVc1cGJtZEJiR2R2Y21sMGFHMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSE5sZENCaFkzUnBiMjV6S0dGamRHbHZibk1wSUh0Y2JpQWdJQ0IwYUdsekxsOWhZM1JwYjI1eklEMGdZV04wYVc5dWN6dGNiaUFnZlZ4dVhHNGdJSE5sZENCcGMwRmpkR2wyWlNocGMwRmpkR2wyWlNrZ2UxeHVJQ0FnSUhSb2FYTXVYMmx6UVdOMGFYWmxJRDBnYVhOQlkzUnBkbVU3WEc0Z0lIMWNibHh1SUNCelpYUWdhMlY1S0d0bGVTa2dlMXh1SUNBZ0lIUm9hWE11WDJ0bGVTQTlJR3RsZVR0Y2JpQWdmVnh1WEc0Z0lITmxkQ0J5ZFd4bGN5aHlkV3hsY3lrZ2UxeHVJQ0FnSUhSb2FYTXVYM0oxYkdWeklEMGdjblZzWlhNN1hHNGdJSDFjYmx4dUlDQXZMMVJQUkU4NklFWkpXRnh1SUNCaFpHUlNkV3hsS0hKMWJHVXBJSHRjYmlBZ0lDQjBhR2x6TGw5eWRXeGxjeTV3ZFhOb0tISjFiR1VwTzF4dUlDQjlYRzVjYmlBZ1pHVnNaWFJsVW5Wc1pTaHpZMjl3WlN3Z2RHRnlaMlYwTENCamIyNWthWFJwYjI0cElIdGNiaUFnSUNCa1pXeGxkR1VnZEdocGN5NXlkV3hsYzF0elkyOXdaVjFiZEdGeVoyVjBYVnRqYjI1a2FYUnBiMjVkTzF4dUlDQjlYRzVjYmlBZ1pXNW1iM0pqWlVGamRHbHZibk1vWTI5dWRHVjRkQ3dnYldWemMyRm5aU3dnWVhWMGFFUmxZMmx6YVc5dUtTQjdYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2FTQnBiaUIwYUdsekxtRmpkR2x2Ym5NcElIdGNiaUFnSUNBZ0lHTnZiblJsZUhSYmRHaHBjeTVoWTNScGIyNXpXMmxkWFNodFpYTnpZV2RsTENCaGRYUm9SR1ZqYVhOcGIyNHBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR1YyWVd4MVlYUmxLR052Ym5SbGVIUXNJRzFsYzNOaFoyVXBJSHRjYmlBZ0lDQnNaWFFnY21WemRXeDBjeUE5SUZ0ZE8xeHVYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2FTQnBiaUIwYUdsekxuSjFiR1Z6S1NCN1hHNGdJQ0FnSUNCeVpYTjFiSFJ6TG5CMWMyZ29kR2hwY3k1eWRXeGxjMXRwWFM1bGRtRnNkV0YwWlNoamIyNTBaWGgwTENCdFpYTnpZV2RsS1NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyOXRZbWx1YVc1blFXeG5iM0pwZEdodExtVjJZV3gxWVhSbEtISmxjM1ZzZEhNcE8xeHVJQ0I5WEc1Y2JuMWNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdVRzlzYVdONU8xeHVJaXdpYVcxd2IzSjBJRkJGVUNCbWNtOXRJQ2N1TDFCRlVDYzdYRzVwYlhCdmNuUWdVRVJRSUdaeWIyMGdKeTR2VUVSUUp6dGNibHh1WTJ4aGMzTWdVRzlzYVdONVJXNW5hVzVsSUh0Y2JseHVJQ0JqYjI1emRISjFZM1J2Y2loamIyNTBaWGgwS1NCN1hHNGdJQ0FnZEdocGN5NWpiMjUwWlhoMElEMGdZMjl1ZEdWNGREdGNiaUFnSUNCMGFHbHpMbU52Ym5SbGVIUXVjRzlzYVdONVJXNW5hVzVsSUQwZ2RHaHBjenRjYmlBZ0lDQjBhR2x6TG5Ca2NDQTlJRzVsZHlCUVJGQW9ZMjl1ZEdWNGRDazdYRzRnSUNBZ2RHaHBjeTV3WlhBZ1BTQnVaWGNnVUVWUUtHTnZiblJsZUhRcE8xeHVJQ0I5WEc1Y2JpQWdaMlYwSUdOdmJuUmxlSFFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyTnZiblJsZUhRN1hHNGdJSDFjYmx4dUlDQm5aWFFnY0dSd0tDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl3WkhBN1hHNGdJSDFjYmx4dUlDQm5aWFFnY0dWd0tDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl3WlhBN1hHNGdJSDFjYmx4dUlDQnpaWFFnWTI5dWRHVjRkQ2hqYjI1MFpYaDBLU0I3WEc0Z0lDQWdkR2hwY3k1ZlkyOXVkR1Y0ZENBOUlHTnZiblJsZUhRN1hHNGdJSDFjYmx4dUlDQnpaWFFnY0dSd0tIQmtjQ2tnZTF4dUlDQWdJSFJvYVhNdVgzQmtjQ0E5SUhCa2NEdGNiaUFnZlZ4dVhHNGdJSE5sZENCd1pYQW9jR1Z3S1NCN1hHNGdJQ0FnZEdocGN5NWZjR1Z3SUQwZ2NHVndPMXh1SUNCOVhHNWNiaUFnWVdSa1VHOXNhV041S0hOdmRYSmpaU3dnYTJWNUxDQndiMnhwWTNrcElIdGNiaUFnSUNCcFppQW9jMjkxY21ObElEMDlQU0FuVTBWU1ZrbERSVjlRVWs5V1NVUkZVaWNwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVZMjl1ZEdWNGRDNXpaWEoyYVdObFVISnZkbWxrWlhKUWIyeHBZMmxsYzF0clpYbGRJRDBnY0c5c2FXTjVPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCcFppQW9jMjkxY21ObElEMDlQU0FuVlZORlVpY3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWpiMjUwWlhoMExuVnpaWEpRYjJ4cFkybGxjMXRyWlhsZElEMGdjRzlzYVdONU8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnUlhKeWIzSW9KMVZ1YTI1dmQyNGdjRzlzYVdONUlITnZkWEpqWlRvZ0p5QXJJSE52ZFhKalpTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjbVZ0YjNabFVHOXNhV041S0hOdmRYSmpaU3dnYTJWNUtTQjdYRzRnSUNBZ2FXWWdLSE52ZFhKalpTQTlQVDBnSnlvbktTQjdYRzRnSUNBZ0lDQjBhR2x6TG1OdmJuUmxlSFF1YzJWeWRtbGpaVkJ5YjNacFpHVnlVRzlzYVdOcFpYTWdQU0I3ZlR0Y2JpQWdJQ0FnSUhSb2FYTXVZMjl1ZEdWNGRDNTFjMlZ5VUc5c2FXTnBaWE1nUFNCN2ZUdGNiaUFnSUNBZ0lIUm9hWE11WTI5dWRHVjRkQzVoWTNScGRtVlZjMlZ5VUc5c2FXTjVJRDBnZFc1a1pXWnBibVZrTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnBaaUFvYzI5MWNtTmxJRDA5UFNBblUwVlNWa2xEUlY5UVVrOVdTVVJGVWljcElIdGNiaUFnSUNBZ0lDQWdaR1ZzWlhSbElIUm9hWE11WTI5dWRHVjRkQzV6WlhKMmFXTmxVSEp2ZG1sa1pYSlFiMnhwWTJsbGMxdHJaWGxkTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tITnZkWEpqWlNBOVBUMGdKMVZUUlZJbktTQjdYRzRnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxJSFJvYVhNdVkyOXVkR1Y0ZEM1MWMyVnlVRzlzYVdOcFpYTmJhMlY1WFR0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCRmNuSnZjaWduVlc1cmJtOTNiaUJ3YjJ4cFkza2djMjkxY21ObE9pQW5JQ3NnYzI5MWNtTmxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhKbGJXOTJaVkoxYkdVb2EyVjVMQ0J5ZFd4bEtTQjdYRzRnSUNBZ1pHVnNaWFJsSUhSb2FYTXVZMjl1ZEdWNGRDNTFjMlZ5VUc5c2FXTnBaWE5iYTJWNVhWdHlkV3hsTG5OamIzQmxYVnR5ZFd4bExuUmhjbWRsZEYxYmNuVnNaUzVqYjI1a2FYUnBiMjVkTzF4dUlDQjlYRzVjYmlBZ1lYVjBhRzl5YVhObEtHMWxjM05oWjJVcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJSEpsZEhWeWJpQmZkR2hwY3k1amIyNTBaWGgwTG1GMWRHaHZjbWx6WlNodFpYTnpZV2RsS1R0Y2JpQWdmVnh1WEc0Z0lHZGxkRWR5YjNWd2MwNWhiV1Z6S0hOamIzQmxMQ0IwWVhKblpYUXBJSHRjYmlBZ0lDQnNaWFFnYlhsSGNtOTFjSE1nUFNCMGFHbHpMbU52Ym5SbGVIUXVaM0p2ZFhCek8xeHVJQ0FnSUd4bGRDQm5jbTkxY0hOT1lXMWxjeUE5SUZ0ZE8xeHVJQ0FnSUdsbUlDaHRlVWR5YjNWd2MxdHpZMjl3WlYxYmRHRnlaMlYwWFNBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0JtYjNJZ0tHeGxkQ0JuY205MWNFNWhiV1VnYVc0Z2JYbEhjbTkxY0hOYmMyTnZjR1ZkVzNSaGNtZGxkRjBwSUh0Y2JpQWdJQ0FnSUNBZ1ozSnZkWEJ6VG1GdFpYTXVjSFZ6YUNobmNtOTFjRTVoYldVcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdaM0p2ZFhCelRtRnRaWE03WEc0Z0lIMWNibHh1SUNCblpYUkhjbTkxY0NoelkyOXdaU3dnZEdGeVoyVjBMQ0JuY205MWNFNWhiV1VwSUh0Y2JpQWdJQ0JzWlhRZ2JYbEhjbTkxY0hNZ1BTQjBhR2x6TG1OdmJuUmxlSFF1WjNKdmRYQnpPMXh1SUNBZ0lHeGxkQ0J0WlcxaVpYSnpJRDBnVzEwN1hHNWNiaUFnSUNCcFppQW9iWGxIY205MWNITmJjMk52Y0dWZElDRTlQU0IxYm1SbFptbHVaV1FnSmlZZ2JYbEhjbTkxY0hOYmMyTnZjR1ZkVzNSaGNtZGxkRjBnSVQwOUlIVnVaR1ZtYVc1bFpDQW1KaUJ0ZVVkeWIzVndjMXR6WTI5d1pWMWJkR0Z5WjJWMFhWdG5jbTkxY0U1aGJXVmRJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lHMWxiV0psY25NZ1BTQnRlVWR5YjNWd2MxdHpZMjl3WlYxYmRHRnlaMlYwWFZ0bmNtOTFjRTVoYldWZE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJ0WlcxaVpYSnpPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nUTNKbFlYUmxjeUJoSUdkeWIzVndJSGRwZEdnZ2RHaGxJR2RwZG1WdUlHNWhiV1V1WEc0Z0lDb2dRSEJoY21GdElDQjdVM1J5YVc1bmZTQWdaM0p2ZFhCT1lXMWxYRzRnSUNvdlhHNGdJR055WldGMFpVZHliM1Z3S0hOamIzQmxMQ0IwWVhKblpYUXNJR2R5YjNWd1RtRnRaU2tnZTF4dUlDQWdJR3hsZENCdGVVZHliM1Z3Y3lBOUlIUm9hWE11WTI5dWRHVjRkQzVuY205MWNITTdYRzVjYmlBZ0lDQnBaaUFvYlhsSGNtOTFjSE5iYzJOdmNHVmRJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lHMTVSM0p2ZFhCelczTmpiM0JsWFNBOUlIdDlPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9iWGxIY205MWNITmJjMk52Y0dWZFczUmhjbWRsZEYwZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnYlhsSGNtOTFjSE5iYzJOdmNHVmRXM1JoY21kbGRGMGdQU0I3ZlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J0ZVVkeWIzVndjMXR6WTI5d1pWMWJkR0Z5WjJWMFhWdG5jbTkxY0U1aGJXVmRJRDBnVzEwN1hHNGdJSDFjYmx4dUlDQmtaV3hsZEdWSGNtOTFjQ2h6WTI5d1pTd2dkR0Z5WjJWMExDQm5jbTkxY0U1aGJXVXBJSHRjYmlBZ0lDQmtaV3hsZEdVZ2RHaHBjeTVqYjI1MFpYaDBMbWR5YjNWd2MxdHpZMjl3WlYxYmRHRnlaMlYwWFZ0bmNtOTFjRTVoYldWZE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2dRV1JrY3lCMGFHVWdaMmwyWlc0Z2RYTmxjaUJsYldGcGJDQjBieUIwYUdVZ1ozSnZkWEFnZDJsMGFDQjBhR1VnWjJsMlpXNGdibUZ0WlM1Y2JpQWdLaUJBY0dGeVlXMGdJSHRUZEhKcGJtZDlJQ0IxYzJWeVJXMWhhV3hjYmlBZ0tpQkFjR0Z5WVcwZ0lIdFRkSEpwYm1kOUlDQm5jbTkxY0U1aGJXVmNiaUFnS2k5Y2JpQWdZV1JrVkc5SGNtOTFjQ2h6WTI5d1pTd2dkR0Z5WjJWMExDQm5jbTkxY0U1aGJXVXNJSFZ6WlhKRmJXRnBiQ2tnZTF4dUlDQWdJR3hsZENCdGVVZHliM1Z3Y3lBOUlIUm9hWE11WTI5dWRHVjRkQzVuY205MWNITTdYRzRnSUNBZ2FXWWdLRzE1UjNKdmRYQnpXM05qYjNCbFhTQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNCdGVVZHliM1Z3YzF0elkyOXdaVjBnUFNCN2ZUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tHMTVSM0p2ZFhCelczTmpiM0JsWFZ0MFlYSm5aWFJkSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJRzE1UjNKdmRYQnpXM05qYjNCbFhWdDBZWEpuWlhSZElEMGdlMzA3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2h0ZVVkeWIzVndjMXR6WTI5d1pWMWJkR0Z5WjJWMFhWdG5jbTkxY0U1aGJXVmRJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lIUm9hWE11WTNKbFlYUmxSM0p2ZFhBb2MyTnZjR1VzSUhSaGNtZGxkQ3dnWjNKdmRYQk9ZVzFsS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0cxNVIzSnZkWEJ6VzNOamIzQmxYVnQwWVhKblpYUmRXMmR5YjNWd1RtRnRaVjB1YVc1a1pYaFBaaWgxYzJWeVJXMWhhV3dwSUQwOVBTQXRNU2tnZTF4dUlDQWdJQ0FnYlhsSGNtOTFjSE5iYzJOdmNHVmRXM1JoY21kbGRGMWJaM0p2ZFhCT1lXMWxYUzV3ZFhOb0tIVnpaWEpGYldGcGJDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjbVZ0YjNabFJuSnZiVWR5YjNWd0tITmpiM0JsTENCMFlYSm5aWFFzSUdkeWIzVndUbUZ0WlN3Z2RYTmxja1Z0WVdsc0tTQjdYRzRnSUNBZ2JHVjBJRzE1UjNKdmRYQnpJRDBnZEdocGN5NWpiMjUwWlhoMExtZHliM1Z3Y3p0Y2JpQWdJQ0JzWlhRZ1ozSnZkWEFnUFNCdGVVZHliM1Z3YzF0elkyOXdaVjFiZEdGeVoyVjBYVnRuY205MWNFNWhiV1ZkTzF4dVhHNGdJQ0FnWjNKdmRYQXVjM0JzYVdObEtHZHliM1Z3TG1sdVpHVjRUMllvZFhObGNrVnRZV2xzS1N3Z01TazdYRzRnSUgxY2JseHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JRYjJ4cFkzbEZibWRwYm1VN1hHNGlMQ0pwYlhCdmNuUWdUM0JsY21GMGIzSnpJR1p5YjIwZ0p5NHZUM0JsY21GMGIzSnpKenRjYmx4dVkyeGhjM01nVW5Wc1pTQjdYRzVjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9ZWFYwYUc5eWFYTmxMQ0JqYjI1a2FYUnBiMjRzSUhOamIzQmxMQ0IwWVhKblpYUXBJSHRjYmlBZ0lDQjBhR2x6TG05d1pYSmhkRzl5Y3lBOUlHNWxkeUJQY0dWeVlYUnZjbk1vS1R0Y2JpQWdJQ0IwYUdsekxtRjFkR2h2Y21selpTQTlJR0YxZEdodmNtbHpaVHRjYmlBZ0lDQjBhR2x6TG1OdmJtUnBkR2x2YmlBOUlHTnZibVJwZEdsdmJqdGNiaUFnSUNCMGFHbHpMbk5qYjNCbElEMGdjMk52Y0dVN1hHNGdJQ0FnZEdocGN5NTBZWEpuWlhRZ1BTQjBZWEpuWlhRN1hHNGdJSDFjYmx4dUlDQm5aWFFnWVhWMGFHOXlhWE5sS0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWhkWFJvYjNKcGMyVTdYRzRnSUgxY2JseHVJQ0JuWlhRZ1kyOXVaR2wwYVc5dUtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlqYjI1a2FYUnBiMjQ3WEc0Z0lIMWNibHh1SUNCblpYUWdjMk52Y0dVb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM05qYjNCbE8xeHVJQ0I5WEc1Y2JpQWdaMlYwSUhSaGNtZGxkQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmRHRnlaMlYwTzF4dUlDQjlYRzVjYmlBZ2MyVjBJR0YxZEdodmNtbHpaU2hrWldOcGMybHZiaWtnZTF4dUlDQWdJSFJvYVhNdVgyRjFkR2h2Y21selpTQTlJR1JsWTJsemFXOXVPMXh1SUNCOVhHNWNiaUFnYzJWMElHTnZibVJwZEdsdmJpaGpiMjVrYVhScGIyNHBJSHRjYmlBZ0lDQjBhR2x6TGw5amIyNWthWFJwYjI0Z1BTQmpiMjVrYVhScGIyNDdYRzRnSUgxY2JseHVJQ0J6WlhRZ2MyTnZjR1VvYzJOdmNHVXBJSHRjYmlBZ0lDQjBhR2x6TGw5elkyOXdaU0E5SUhOamIzQmxPMXh1SUNCOVhHNWNiaUFnYzJWMElIUmhjbWRsZENoMFlYSm5aWFFwSUh0Y2JpQWdJQ0IwYUdsekxsOTBZWEpuWlhRZ1BTQjBZWEpuWlhRN1hHNGdJSDFjYmx4dUlDQmxkbUZzZFdGMFpTaGpiMjUwWlhoMExDQnRaWE56WVdkbEtTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdVkyOXVaR2wwYVc5dUxtbHpRWEJ3YkdsallXSnNaU2hqYjI1MFpYaDBMQ0J0WlhOellXZGxMQ0IwYUdsekxuTmpiM0JsTENCMGFHbHpMblJoY21kbGRDa3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1GMWRHaHZjbWx6WlR0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdjbVYwZFhKdUlDZE9iM1FnUVhCd2JHbGpZV0pzWlNjN1hHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUZKMWJHVTdYRzRpTENKcGJYQnZjblFnUTI5dFltbHVhVzVuUVd4bmIzSnBkR2h0SUdaeWIyMGdKeTR1TDBOdmJXSnBibWx1WjBGc1oyOXlhWFJvYlNjN1hHNWNibU5zWVhOeklFUmxibmxQZG1WeWNtbGtaWE1nWlhoMFpXNWtjeUJEYjIxaWFXNXBibWRCYkdkdmNtbDBhRzBnZTF4dVhHNGdJR1YyWVd4MVlYUmxLR2x1WkdsMmFXUjFZV3hTWlhOMWJIUnpLU0I3WEc0Z0lDQWdhV1lnS0dsdVpHbDJhV1IxWVd4U1pYTjFiSFJ6TG1sdVpHVjRUMllvWm1Gc2MyVXBJQ0U5UFNBdE1Ta2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnBaaUFvYVc1a2FYWnBaSFZoYkZKbGMzVnNkSE11YVc1a1pYaFBaaWgwY25WbEtTQWhQVDBnTFRFcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdKMDV2ZENCQmNIQnNhV05oWW14bEp6dGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmx4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQkVaVzU1VDNabGNuSnBaR1Z6TzF4dUlpd2lhVzF3YjNKMElFTnZiV0pwYm1sdVowRnNaMjl5YVhSb2JTQm1jbTl0SUNjdUxpOURiMjFpYVc1cGJtZEJiR2R2Y21sMGFHMG5PMXh1WEc1amJHRnpjeUJHYVhKemRFRndjR3hwWTJGaWJHVWdaWGgwWlc1a2N5QkRiMjFpYVc1cGJtZEJiR2R2Y21sMGFHMGdlMXh1WEc0Z0lHVjJZV3gxWVhSbEtHbHVaR2wyYVdSMVlXeFNaWE4xYkhSektTQjdYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2FTQnBiaUJwYm1ScGRtbGtkV0ZzVW1WemRXeDBjeWtnZTF4dUlDQWdJQ0FnYVdZZ0tHbHVaR2wyYVdSMVlXeFNaWE4xYkhSelcybGRJQ0U5UFNBblRtOTBJRUZ3Y0d4cFkyRmliR1VuS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCcGJtUnBkbWxrZFdGc1VtVnpkV3gwYzF0cFhUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnSjA1dmRDQkJjSEJzYVdOaFlteGxKenRjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JHYVhKemRFRndjR3hwWTJGaWJHVTdYRzRpTENKcGJYQnZjblFnVDNCbGNtRjBiM0p6SUdaeWIyMGdKeTR1TDA5d1pYSmhkRzl5Y3ljN1hHNWNibU5zWVhOeklFTnZibVJwZEdsdmJpQjdYRzVjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9ZWFIwY21saWRYUmxMQ0J2Y0dWeVlYUnZjaXdnY0dGeVlXMXpLU0I3WEc0Z0lDQWdkR2hwY3k1aGRIUnlhV0oxZEdVZ1BTQmhkSFJ5YVdKMWRHVTdYRzRnSUNBZ2RHaHBjeTV2Y0dWeVlYUnZjaUE5SUc5d1pYSmhkRzl5TzF4dUlDQWdJSFJvYVhNdWNHRnlZVzF6SUQwZ2NHRnlZVzF6TzF4dUlDQWdJSFJvYVhNdWIzQmxjbUYwYjNKeklEMGdibVYzSUU5d1pYSmhkRzl5Y3lncE8xeHVJQ0I5WEc1Y2JpQWdaMlYwSUdGMGRISnBZblYwWlNncElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZZWFIwY21saWRYUmxPMXh1SUNCOVhHNWNiaUFnWjJWMElHOXdaWEpoZEc5eUtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl2Y0dWeVlYUnZjanRjYmlBZ2ZWeHVYRzRnSUdkbGRDQndZWEpoYlhNb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0JoY21GdGN6dGNiaUFnZlZ4dVhHNGdJSE5sZENCaGRIUnlhV0oxZEdVb1lYUjBjbWxpZFhSbEtTQjdYRzRnSUNBZ2RHaHBjeTVmWVhSMGNtbGlkWFJsSUQwZ1lYUjBjbWxpZFhSbE8xeHVJQ0I5WEc1Y2JpQWdjMlYwSUc5d1pYSmhkRzl5S0c5d1pYSmhkRzl5S1NCN1hHNGdJQ0FnZEdocGN5NWZiM0JsY21GMGIzSWdQU0J2Y0dWeVlYUnZjanRjYmlBZ2ZWeHVYRzRnSUhObGRDQndZWEpoYlhNb2NHRnlZVzF6S1NCN1hHNGdJQ0FnZEdocGN5NWZjR0Z5WVcxeklEMGdjR0Z5WVcxek8xeHVJQ0I5WEc1Y2JpQWdhWE5CY0hCc2FXTmhZbXhsS0dOdmJuUmxlSFFzSUcxbGMzTmhaMlVwSUh0Y2JpQWdJQ0JqYjI1MFpYaDBXM1JvYVhNdVlYUjBjbWxpZFhSbFhTQTlJSHNnYldWemMyRm5aVG9nYldWemMyRm5aU0I5TzF4dUlDQWdJR3hsZENCMllXeDFaU0E5SUdOdmJuUmxlSFJiZEdocGN5NWhkSFJ5YVdKMWRHVmRPMXh1WEc0Z0lDQWdhV1lnS0hSb2FYTXViM0JsY21GMGIzSWdQVDA5SUNkcGJpY3BJSHNnTHk4Z2MyOTFjbU5sSUdsdUlIQnlaV0YxZEdoY2JpQWdJQ0FnSUd4bGRDQmtZWFJoVDJKcVpXTjBWVkpNSUQwZ2JXVnpjMkZuWlM1MGJ5NXpjR3hwZENnbkx5Y3BPMXh1SUNBZ0lDQWdaR0YwWVU5aWFtVmpkRlZTVEM1d2IzQW9LVHRjYmlBZ0lDQWdJR1JoZEdGUFltcGxZM1JWVWt3Z1BTQmtZWFJoVDJKcVpXTjBWVkpNV3pCZElDc2dKeTh2SnlBcklHUmhkR0ZQWW1wbFkzUlZVa3hiTWwwN1hHNGdJQ0FnSUNCMGFHbHpMbkJoY21GdGN5QTlJR052Ym5SbGVIUXVjblZ1ZEdsdFpWSmxaMmx6ZEhKNUxtZGxkRkJ5WlVGMWRHaFRkV0p6WTNKcFltVnljeWhrWVhSaFQySnFaV04wVlZKTUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXZjR1Z5WVhSdmNuTmJkR2hwY3k1dmNHVnlZWFJ2Y2wwb1czUm9hWE11Y0dGeVlXMXpMQ0IyWVd4MVpWMHBPMXh1SUNCOVhHNWNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnUTI5dVpHbDBhVzl1TzF4dUlpd2lhVzF3YjNKMElFTnZibVJwZEdsdmJpQm1jbTl0SUNjdUwwTnZibVJwZEdsdmJpYzdYRzVjYm1Oc1lYTnpJRk4xWW5OamNtbHdkR2x2YmtOdmJtUnBkR2x2YmlCbGVIUmxibVJ6SUVOdmJtUnBkR2x2YmlCN1hHNWNiaUFnWTI5dWMzUnlkV04wYjNJb1lYUjBjbWxpZFhSbExDQnZjR1Z5WVhSdmNpd2djR0Z5WVcxektTQjdYRzRnSUNBZ2MzVndaWElvWVhSMGNtbGlkWFJsTENCdmNHVnlZWFJ2Y2l3Z2NHRnlZVzF6S1R0Y2JpQWdmVnh1WEc0Z0lHbHpRWEJ3YkdsallXSnNaU2hqYjI1MFpYaDBMQ0J0WlhOellXZGxMQ0J6WTI5d1pTd2dkR0Z5WjJWMEtTQjdYRzRnSUNBZ2JHVjBJR2x6VTNWaWMyTnlhWEIwYVc5dUlEMGdiV1Z6YzJGblpTNTBlWEJsSUQwOVBTQW5jM1ZpYzJOeWFXSmxKenRjYmlBZ0lDQnNaWFFnYVhOR2NtOXRVbVZ0YjNSbFUwMGdQU0JqYjI1MFpYaDBMbWx6Um5KdmJWSmxiVzkwWlZOTktHMWxjM05oWjJVdVpuSnZiU2s3WEc0Z0lDQWdhV1lnS0dselUzVmljMk55YVhCMGFXOXVJQ1lnYVhOR2NtOXRVbVZ0YjNSbFUwMHBJSHRjYmlBZ0lDQWdJR3hsZENCaGNIQnNhV05oWW14bE8xeHVJQ0FnSUNBZ2MzZHBkR05vSUNoelkyOXdaU2tnZTF4dUlDQWdJQ0FnSUNCallYTmxJQ2RuYkc5aVlXd25PbHh1SUNBZ0lDQWdJQ0FnSUdGd2NHeHBZMkZpYkdVZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNCallYTmxJQ2RvZVhCbGNuUjVKenBjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdhSGx3WlhKMGVWVlNUQ0E5SUdOdmJuUmxlSFF1Y25WdWRHbHRaVkpsWjJsemRISjVMbWRsZEVoNWNHVnlkSGxPWVcxbEtDazdYRzRnSUNBZ0lDQWdJQ0FnWVhCd2JHbGpZV0pzWlNBOUlIUmhjbWRsZENBOVBUMGdhSGx3WlhKMGVWVlNURHRjYmlBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnWTJGelpTQW5kWE5sY2ljNlhHNGdJQ0FnSUNBZ0lDQWdiR1YwSUdoNWNHVnlkSGtnUFNCamIyNTBaWGgwTG5KMWJuUnBiV1ZTWldkcGMzUnllUzVuWlhSU1pYQnZjblJsY2xWU1RGTjVibU5vYjI1dmRYTW9ZMjl1ZEdWNGRDNW5aWFJWVWt3b2JXVnpjMkZuWlM1MGJ5a3BPMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQnZkMjVsY2lBOUlHTnZiblJsZUhRdWNuVnVkR2x0WlZKbFoybHpkSEo1TG1kbGRFaDVjR1Z5ZEhsUGQyNWxjaWhvZVhCbGNuUjVLVHRjYmlBZ0lDQWdJQ0FnSUNCaGNIQnNhV05oWW14bElEMGdkR0Z5WjJWMElEMDlQU0J2ZDI1bGNqdGNiaUFnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdZMkZ6WlNBblpHRjBZVTlpYW1WamRDYzZYRzRnSUNBZ0lDQWdJQ0FnYkdWMElHUmhkR0ZQWW1wbFkzUlZVa3dnUFNCdFpYTnpZV2RsTG1KdlpIa3VjbVZ6YjNWeVkyVTdYRzRnSUNBZ0lDQWdJQ0FnWVhCd2JHbGpZV0pzWlNBOUlIUmhjbWRsZENBOVBUMGdaR0YwWVU5aWFtVmpkRlZTVER0Y2JpQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUJoY0hCc2FXTmhZbXhsTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRk4xWW5OamNtbHdkR2x2YmtOdmJtUnBkR2x2Ymp0Y2JpSXNJbWx0Y0c5eWRDQjdaR2wyYVdSbFJXMWhhV3g5SUdaeWIyMGdKeTR1THk0dUwzVjBhV3h6TDNWMGFXeHpKenRjYmx4dVkyeGhjM01nUTI5dGJXOXVRM1I0SUh0Y2JseHVJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNCMGFHbHpMbk5sY25acFkyVlFjbTkyYVdSbGNsQnZiR2xqYVdWeklEMGdlMzA3WEc0Z0lDQWdkR2hwY3k1a1pXWmhkV3gwUW1Wb1lYWnBiM0lnUFNCMGNuVmxPMXh1SUNBZ0lIUm9hWE11WjNKdmRYQnpJRDBnZTMwN1hHNGdJSDFjYmx4dUlDQm5aWFFnWkdWbVlYVnNkRUpsYUdGMmFXOXlLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5a1pXWmhkV3gwUW1Wb1lYWnBiM0k3WEc0Z0lIMWNibHh1SUNCblpYUWdjMlZ5ZG1salpWQnliM1pwWkdWeVVHOXNhV05wWlhNb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM05sY25acFkyVlFjbTkyYVdSbGNsQnZiR2xqYVdWek8xeHVJQ0I5WEc1Y2JpQWdjMlYwSUdSbFptRjFiSFJDWldoaGRtbHZjaWhpWldoaGRtbHZjaWtnZTF4dUlDQWdJSFJvYVhNdVgyUmxabUYxYkhSQ1pXaGhkbWx2Y2lBOUlHSmxhR0YyYVc5eU8xeHVJQ0I5WEc1Y2JpQWdjMlYwSUhObGNuWnBZMlZRY205MmFXUmxjbEJ2YkdsamFXVnpLSEJ2YkdsamFXVnpLU0I3WEc0Z0lDQWdkR2hwY3k1ZmMyVnlkbWxqWlZCeWIzWnBaR1Z5VUc5c2FXTnBaWE1nUFNCd2IyeHBZMmxsY3p0Y2JpQWdmVnh1WEc0Z0lITmxkQ0JrWVhSbEtHNXZkeWtnZTF4dUlDQWdJR2xtSUNnaGJtOTNMbTFsYzNOaFoyVXBJSHRjYmlBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYm05M0lEMDlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlrWVhSbElEMGdibTkzTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnYkdWMElHUmhkR1VnUFNCdVpYY2dSR0YwWlNncE8xeHVJQ0FnSUNBZ0lDQnNaWFFnWkdGNUlEMGdVM1J5YVc1bktHUmhkR1V1WjJWMFJHRjBaU2dwS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1JoZVM1c1pXNW5kR2dnUFQwOUlERXBJSHRjYmlBZ0lDQWdJQ0FnSUNCa1lYa2dQU0FuTUNjZ0t5QmtZWGs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2JHVjBJRzF2Ym5Sb0lEMGdVM1J5YVc1bktHUmhkR1V1WjJWMFRXOXVkR2dvS1NBcklERXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2JXOXVkR2d1YkdWdVozUm9JRDA5UFNBeEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYlc5dWRHZ2dQU0FuTUNjZ0t5QnRiMjUwYUR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyUmhkR1VnUFNCa1lYa2dLeUFuTHljZ0t5QnRiMjUwYUNBcklDY3ZKeUFySUdSaGRHVXVaMlYwUm5Wc2JGbGxZWElvS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCelpYUWdaRzl0WVdsdUtIQmhjbUZ0Y3lrZ2UxeHVJQ0FnSUhSb2FYTXVYMlJ2YldGcGJpQTlJR1JwZG1sa1pVVnRZV2xzS0hCaGNtRnRjeTV0WlhOellXZGxMbUp2WkhrdWFXUmxiblJwZEhrdWRYTmxjbEJ5YjJacGJHVXVkWE5sY201aGJXVXBMbVJ2YldGcGJqdGNiaUFnZlZ4dVhHNGdJSE5sZENCemIzVnlZMlVvY0dGeVlXMXpLU0I3WEc0Z0lDQWdkR2hwY3k1ZmMyOTFjbU5sSUQwZ2NHRnlZVzF6TG0xbGMzTmhaMlV1WW05a2VTNXBaR1Z1ZEdsMGVTNTFjMlZ5VUhKdlptbHNaUzUxYzJWeWJtRnRaVHRjYmlBZ2ZWeHVYRzRnSUhObGRDQjBhVzFsS0c1dmR5a2dlMXh1SUNBZ0lHbG1JQ2doYm05M0xtMWxjM05oWjJVcElIdGNiaUFnSUNBZ0lHbG1JQ2h1YjNjcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmRHbHRaU0E5SUc1dmR6dGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J1YjNjZ1BTQnVaWGNnUkdGMFpTZ3BPMXh1SUNBZ0lDQWdJQ0JzWlhRZ2JXbHVkWFJsY3lBOUlGTjBjbWx1WnlodWIzY3VaMlYwVFdsdWRYUmxjeWdwS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzFwYm5WMFpYTXViR1Z1WjNSb0lEMDlQU0F4S1NCN1hHNGdJQ0FnSUNBZ0lDQWdiV2x1ZFhSbGN5QTlJQ2N3SnlBcklHMXBiblYwWlhNN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmRHbHRaU0E5SUhCaGNuTmxTVzUwS0ZOMGNtbHVaeWh1YjNjdVoyVjBTRzkxY25Nb0tTa2dLeUJ0YVc1MWRHVnpLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J6WlhRZ2QyVmxhMlJoZVNodWIzY3BJSHRjYmlBZ0lDQnBaaUFvSVc1dmR5NXRaWE56WVdkbEtTQjdYRzRnSUNBZ0lDQnBaaUFvYm05M0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzZGxaV3RrWVhrZ1BTQnViM2M3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOTNaV1ZyWkdGNUlEMGdVM1J5YVc1bktHNWxkeUJFWVhSbEtDa3VaMlYwUkdGNUtDa3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR2RsZENCa1lYUmxLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5a1lYUmxPMXh1SUNCOVhHNWNiaUFnWjJWMElHUnZiV0ZwYmlncElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZaRzl0WVdsdU8xeHVJQ0I5WEc1Y2JpQWdaMlYwSUhOdmRYSmpaU2dwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTVmYzI5MWNtTmxPMXh1SUNCOVhHNWNiaUFnWjJWMElIUnBiV1VvS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQnlaWFIxY200Z1gzUm9hWE11WDNScGJXVTdYRzRnSUgxY2JseHVJQ0JuWlhRZ2QyVmxhMlJoZVNncElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZkMlZsYTJSaGVUdGNiaUFnZlZ4dVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRU52YlcxdmJrTjBlRHRjYmlJc0ltbHRjRzl5ZENCRGIyMXRiMjVEZEhnZ1puSnZiU0FuTGk5RGIyMXRiMjVEZEhnbk8xeHVhVzF3YjNKMElIdGthWFpwWkdWVlVrd3NJR2x6UkdGMFlVOWlhbVZqZEZWU1RIMGdabkp2YlNBbkxpNHZMaTR2ZFhScGJITXZkWFJwYkhNbk8xeHVhVzF3YjNKMElIQmxjbk5wYzNSbGJtTmxUV0Z1WVdkbGNpQm1jbTl0SUNkelpYSjJhV05sTFdaeVlXMWxkMjl5YXk5a2FYTjBMMUJsY25OcGMzUmxibU5sVFdGdVlXZGxjaWM3WEc1cGJYQnZjblFnVW5Wc1pTQm1jbTl0SUNjdUxpOVNkV3hsSnp0Y2JtbHRjRzl5ZENCVmMyVnlVRzlzYVdONUlHWnliMjBnSnk0dUwzQnZiR2xqYVdWekwxVnpaWEpRYjJ4cFkza25PMXh1YVcxd2IzSjBJRk4xWW5OamNtbHdkR2x2YmtOdmJtUnBkR2x2YmlCbWNtOXRJQ2N1TGk5amIyNWthWFJwYjI1ekwxTjFZbk5qY21sd2RHbHZia052Ym1ScGRHbHZiaWM3WEc1Y2JtTnNZWE56SUZKMWJuUnBiV1ZEYjNKbFEzUjRJR1Y0ZEdWdVpITWdRMjl0Ylc5dVEzUjRJSHRjYmx4dUlDQmpiMjV6ZEhKMVkzUnZjaWhwWkUxdlpIVnNaU3dnY25WdWRHbHRaVkpsWjJsemRISjVLU0I3WEc0Z0lDQWdjM1Z3WlhJb0tUdGNiaUFnSUNCMGFHbHpMbWxrVFc5a2RXeGxJRDBnYVdSTmIyUjFiR1U3WEc0Z0lDQWdkR2hwY3k1eWRXNTBhVzFsVW1WbmFYTjBjbmtnUFNCeWRXNTBhVzFsVW1WbmFYTjBjbms3WEc0Z0lDQWdkR2hwY3k1aFkzUnBkbVZWYzJWeVVHOXNhV041SUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUhSb2FYTXVkWE5sY2xCdmJHbGphV1Z6SUQwZ2UzMDdYRzRnSUgxY2JseHVJQ0JuWlhRZ1lXTjBhWFpsVlhObGNsQnZiR2xqZVNncElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZZV04wYVhabFZYTmxjbEJ2YkdsamVUdGNiaUFnZlZ4dVhHNGdJR2RsZENCa1lYUmhUMkpxWldOMFUyTm9aVzFsS0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWtZWFJoVDJKcVpXTjBVMk5vWlcxbE8xeHVJQ0I5WEc1Y2JpQWdaMlYwSUdsa1RXOWtkV3hsS0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXBaRTF2WkhWc1pUdGNiaUFnZlZ4dVhHNGdJR2RsZENCd2IyeHBZMmxsY3lncElIdGNiaUFnSUNCc1pYUWdjRzlzYVdOcFpYTWdQU0J3WlhKemFYTjBaVzVqWlUxaGJtRm5aWEl1WjJWMEtDZHdiMnhwWTJsbGN5Y3BPMXh1WEc0Z0lDQWdhV1lnS0hCdmJHbGphV1Z6SUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJSEJ2YkdsamFXVnpJRDBnZTMwN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQndiMnhwWTJsbGN6dGNiaUFnZlZ4dVhHNGdJR2RsZENCd2IyeHBZM2xGYm1kcGJtVW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDNCdmJHbGplVVZ1WjJsdVpUdGNiaUFnZlZ4dVhHNGdJR2RsZENCeWRXNTBhVzFsVW1WbmFYTjBjbmtvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSjFiblJwYldWU1pXZHBjM1J5ZVR0Y2JpQWdmVnh1WEc0Z0lHZGxkQ0J6ZFdKelkzSnBjSFJwYjI0b0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM04xWW5OamNtbHdkR2x2Ymp0Y2JpQWdmVnh1WEc0Z0lITmxkQ0JoWTNScGRtVlZjMlZ5VUc5c2FXTjVLSEJ2YkdsamVTa2dlMXh1SUNBZ0lIUm9hWE11WDJGamRHbDJaVlZ6WlhKUWIyeHBZM2tnUFNCd2IyeHBZM2s3WEc0Z0lIMWNibHh1SUNCelpYUWdaR0YwWVU5aWFtVmpkRk5qYUdWdFpTaHdZWEpoYlhNcElIdGNiaUFnSUNCc1pYUWdabkp2YlNBOUlIQmhjbUZ0Y3k1dFpYTnpZV2RsTG1aeWIyMDdYRzRnSUNBZ2FXWWdLR2x6UkdGMFlVOWlhbVZqZEZWU1RDaG1jbTl0S1NrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVmWkdGMFlVOWlhbVZqZEZOamFHVnRaU0E5SUdScGRtbGtaVlZTVENobWNtOXRLUzUwZVhCbE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOWtZWFJoVDJKcVpXTjBVMk5vWlcxbElEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSE5sZENCcFpFMXZaSFZzWlNocFpFMXZaSFZzWlNrZ2UxeHVJQ0FnSUhSb2FYTXVYMmxrVFc5a2RXeGxJRDBnYVdSTmIyUjFiR1U3WEc0Z0lIMWNibHh1SUNCelpYUWdjRzlzYVdOcFpYTW9jRzlzYVdOcFpYTXBJSHRjYmlBZ0lDQndaWEp6YVhOMFpXNWpaVTFoYm1GblpYSXVjMlYwS0Nkd2IyeHBZMmxsY3ljc0lDY3dKeXdnY0c5c2FXTnBaWE1wTzF4dUlDQjlYRzVjYmlBZ2MyVjBJSEJ2YkdsamVVVnVaMmx1WlNod2IyeHBZM2xGYm1kcGJtVXBJSHRjYmlBZ0lDQjBhR2x6TGw5d2IyeHBZM2xGYm1kcGJtVWdQU0J3YjJ4cFkzbEZibWRwYm1VN1hHNGdJQ0FnYkdWMElHRmpZMlZ3ZEVGdWVWTjFZbk5qY21sd2RHbHZibEoxYkdVZ1BTQnVaWGNnVW5Wc1pTaDBjblZsTENCdVpYY2dVM1ZpYzJOeWFYQjBhVzl1UTI5dVpHbDBhVzl1S0NkemRXSnpZM0pwY0hScGIyNG5MQ0FuWlhGMVlXeHpKeXdnSnlvbktTd2dKMmRzYjJKaGJDY3NJQ2RuYkc5aVlXd25LVHRjYmlBZ0lDQnNaWFFnY0c5c2FXTjVJRDBnYm1WM0lGVnpaWEpRYjJ4cFkza29KMDE1SUhCdmJHbGplU2NzSUZ0aFkyTmxjSFJCYm5sVGRXSnpZM0pwY0hScGIyNVNkV3hsWFN3Z1d5ZHlaV2RwYzNSbGNsTjFZbk5qY21saVpYSW5MQ0FuWkc5TmRYUjFZV3hCZFhSb1pXNTBhV05oZEdsdmJpZGRLVHRjYmlBZ0lDQjBhR2x6TGw5d2IyeHBZM2xGYm1kcGJtVXVZV1JrVUc5c2FXTjVLQ2RWVTBWU0p5d2dKMDE1SUhCdmJHbGplU2NzSUhCdmJHbGplU2s3WEc0Z0lDQWdkR2hwY3k1aFkzUnBkbVZWYzJWeVVHOXNhV041SUQwZ0owMTVJSEJ2YkdsamVTYzdYRzRnSUgxY2JseHVJQ0J6WlhRZ2NuVnVkR2x0WlZKbFoybHpkSEo1S0hKbFoybHpkSEo1S1NCN1hHNGdJQ0FnZEdocGN5NWZjblZ1ZEdsdFpWSmxaMmx6ZEhKNUlEMGdjbVZuYVhOMGNuazdYRzRnSUgxY2JseHVJQ0J6WlhRZ2MzVmljMk55YVhCMGFXOXVLSEJoY21GdGN5a2dlMXh1SUNBZ0lIUm9hWE11WDNOMVluTmpjbWx3ZEdsdmJpQTlJSEJoY21GdGN5NXRaWE56WVdkbExtSnZaSGt1YzNWaWMyTnlhV0psY2p0Y2JpQWdmVnh1WEc0Z0lHRjFkR2h2Y21selpTaHRaWE56WVdkbEtTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNnb2NtVnpiMngyWlN3Z2NtVnFaV04wS1NBOVBpQjdYRzRnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduTFMwdElGQnZiR2xqZVNCRmJtZHBibVVnTFMwdEp5azdYRzRnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWh0WlhOellXZGxLVHRjYmlBZ0lDQWdJRzFsYzNOaFoyVXVZbTlrZVNBOUlHMWxjM05oWjJVdVltOWtlU0I4ZkNCN2ZUdGNiaUFnSUNBZ0lHeGxkQ0J5WlhOMWJIUTdYRzRnSUNBZ0lDQnNaWFFnYVhOVWIxWmxjbWxtZVNBOUlGOTBhR2x6TGw5cGMxUnZWbVZ5YVdaNUtHMWxjM05oWjJVcE8xeHVJQ0FnSUNBZ2JHVjBJR2x6U1c1amIyMXBibWROWlhOellXZGxJRDBnWDNSb2FYTXVYMmx6U1c1amIyMXBibWROWlhOellXZGxLRzFsYzNOaFoyVXBPMXh1SUNBZ0lDQWdiR1YwSUdselZHOURlWEJvWlhJZ1BTQmZkR2hwY3k1ZmFYTlViME41Y0dobGNrMXZaSFZzWlNodFpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUdsbUlDaHBjMVJ2Vm1WeWFXWjVLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHBjMGx1WTI5dGFXNW5UV1Z6YzJGblpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHBjMVJ2UTNsd2FHVnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1a1pXTnllWEIwS0cxbGMzTmhaMlVwTG5Sb1pXNG9iV1Z6YzJGblpTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCd2IyeHBZMmxsY3lBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaWEoyYVdObFVISnZkbWxrWlhKUWIyeHBZM2s2SUY5MGFHbHpMbWRsZEZObGNuWnBZMlZRY205MmFXUmxjbEJ2YkdsamVTaHRaWE56WVdkbExDQnBjMGx1WTI5dGFXNW5UV1Z6YzJGblpTa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkWE5sY2xCdmJHbGplVG9nWDNSb2FYTXVZV04wYVhabFZYTmxjbEJ2YkdsamVWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFFnUFNCZmRHaHBjeTV3YjJ4cFkzbEZibWRwYm1VdWNHUndMbUZ3Y0d4NVVHOXNhV05wWlhNb2JXVnpjMkZuWlN3Z2NHOXNhV05wWlhNcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTV3YjJ4cFkzbEZibWRwYm1VdWNHVndMbVZ1Wm05eVkyVlFiMnhwWTJsbGN5aHRaWE56WVdkbExDQndiMnhwWTJsbGN5d2djbVZ6ZFd4MEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEpsYzNWc2RDQTlQVDBnSjA1dmRDQkJjSEJzYVdOaFlteGxKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQ0E5SUY5MGFHbHpMbVJsWm1GMWJIUkNaV2hoZG1sdmNqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbExtSnZaSGt1WVhWMGFDQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlaWE4xYkhRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbExtSnZaSGt1WVhWMGFDQTlJQ2h0WlhOellXZGxMbUp2WkhrdVlYVjBhQ0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQS9JSFJ5ZFdVZ09pQnRaWE56WVdkbExtSnZaSGt1WVhWMGFEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtHMWxjM05oWjJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2duVFdWemMyRm5aU0JpYkc5amEyVmtKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNJQ2hsY25KdmNpa2dQVDRnZXlCeVpXcGxZM1FvWlhKeWIzSXBPeUI5S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdjRzlzYVdOcFpYTWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSE5sY25acFkyVlFjbTkyYVdSbGNsQnZiR2xqZVRvZ1gzUm9hWE11WjJWMFUyVnlkbWxqWlZCeWIzWnBaR1Z5VUc5c2FXTjVLRzFsYzNOaFoyVXNJR2x6U1c1amIyMXBibWROWlhOellXZGxLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkWE5sY2xCdmJHbGplVG9nWDNSb2FYTXVZV04wYVhabFZYTmxjbEJ2YkdsamVWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDQTlJRjkwYUdsekxuQnZiR2xqZVVWdVoybHVaUzV3WkhBdVlYQndiSGxRYjJ4cFkybGxjeWh0WlhOellXZGxMQ0J3YjJ4cFkybGxjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1d2IyeHBZM2xGYm1kcGJtVXVjR1Z3TG1WdVptOXlZMlZRYjJ4cFkybGxjeWh0WlhOellXZGxMQ0J3YjJ4cFkybGxjeXdnY21WemRXeDBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5WlhOMWJIUWdQVDA5SUNkT2IzUWdRWEJ3YkdsallXSnNaU2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBJRDBnWDNSb2FYTXVaR1ZtWVhWc2RFSmxhR0YyYVc5eU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsTG1KdlpIa3VZWFYwYUNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEpsYzNWc2RDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbExtSnZaSGt1WVhWMGFDQTlJQ2h0WlhOellXZGxMbUp2WkhrdVlYVjBhQ0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQS9JSFJ5ZFdVZ09pQnRaWE56WVdkbExtSnZaSGt1WVhWMGFEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNodFpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxhbVZqZENnblRXVnpjMkZuWlNCaWJHOWphMlZrSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJR3hsZENCcGMxUnZVMlYwU1VRZ1BTQmZkR2hwY3k1ZmFYTlViMU5sZEVsRUtHMWxjM05oWjJVcE8xeHVJQ0FnSUNBZ0lDQWdJR2xtSUNocGMxUnZVMlYwU1VRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbDluWlhSSlpHVnVkR2wwZVNodFpYTnpZV2RsS1M1MGFHVnVLR2xrWlc1MGFYUjVJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aUzVpYjJSNUxtbGtaVzUwYVhSNUlEMGdhV1JsYm5ScGRIazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J3YjJ4cFkybGxjeUE5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYSjJhV05sVUhKdmRtbGtaWEpRYjJ4cFkzazZJRjkwYUdsekxtZGxkRk5sY25acFkyVlFjbTkyYVdSbGNsQnZiR2xqZVNodFpYTnpZV2RsTENCcGMwbHVZMjl0YVc1blRXVnpjMkZuWlNrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RYTmxjbEJ2YkdsamVUb2dYM1JvYVhNdVlXTjBhWFpsVlhObGNsQnZiR2xqZVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOMWJIUWdQU0JmZEdocGN5NXdiMnhwWTNsRmJtZHBibVV1Y0dSd0xtRndjR3g1VUc5c2FXTnBaWE1vYldWemMyRm5aU3dnY0c5c2FXTnBaWE1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NXdiMnhwWTNsRmJtZHBibVV1Y0dWd0xtVnVabTl5WTJWUWIyeHBZMmxsY3lodFpYTnpZV2RsTENCd2IyeHBZMmxsY3l3Z2NtVnpkV3gwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISmxjM1ZzZENBOVBUMGdKMDV2ZENCQmNIQnNhV05oWW14bEp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDQTlJRjkwYUdsekxtUmxabUYxYkhSQ1pXaGhkbWx2Y2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsTG1KdlpIa3VZWFYwYUNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpYTjFiSFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsTG1KdlpIa3VZWFYwYUNBOUlDaHRaWE56WVdkbExtSnZaSGt1WVhWMGFDQTlQVDBnZFc1a1pXWnBibVZrS1NBL0lIUnlkV1VnT2lCdFpYTnpZV2RsTG1KdlpIa3VZWFYwYUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hWE5VYjBONWNHaGxjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11Wlc1amNubHdkQ2h0WlhOellXZGxLUzUwYUdWdUtHMWxjM05oWjJVZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0cxbGMzTmhaMlVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTd2dLR1Z5Y205eUtTQTlQaUI3SUhKbGFtVmpkQ2hsY25KdmNpazdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0cxbGMzTmhaMlVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WldwbFkzUW9KMDFsYzNOaFoyVWdZbXh2WTJ0bFpDY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxDQW9aWEp5YjNJcElEMCtJSHNnY21WcVpXTjBLR1Z5Y205eUtUc2dmU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCd2IyeHBZMmxsY3lBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2MyVnlkbWxqWlZCeWIzWnBaR1Z5VUc5c2FXTjVPaUJmZEdocGN5NW5aWFJUWlhKMmFXTmxVSEp2ZG1sa1pYSlFiMnhwWTNrb2JXVnpjMkZuWlN3Z2FYTkpibU52YldsdVowMWxjM05oWjJVcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWMyVnlVRzlzYVdONU9pQmZkR2hwY3k1aFkzUnBkbVZWYzJWeVVHOXNhV041WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwSUQwZ1gzUm9hWE11Y0c5c2FXTjVSVzVuYVc1bExuQmtjQzVoY0hCc2VWQnZiR2xqYVdWektHMWxjM05oWjJVc0lIQnZiR2xqYVdWektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbkJ2YkdsamVVVnVaMmx1WlM1d1pYQXVaVzVtYjNKalpWQnZiR2xqYVdWektHMWxjM05oWjJVc0lIQnZiR2xqYVdWekxDQnlaWE4xYkhRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISmxjM1ZzZENBOVBUMGdKMDV2ZENCQmNIQnNhV05oWW14bEp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhRZ1BTQmZkR2hwY3k1a1pXWmhkV3gwUW1Wb1lYWnBiM0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVXVZbTlrZVM1aGRYUm9JRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NtVnpkV3gwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUcxbGMzTmhaMlV1WW05a2VTNWhkWFJvSUQwZ0tHMWxjM05oWjJVdVltOWtlUzVoZFhSb0lEMDlQU0IxYm1SbFptbHVaV1FwSUQ4Z2RISjFaU0E2SUcxbGMzTmhaMlV1WW05a2VTNWhkWFJvTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLRzFsYzNOaFoyVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLQ2ROWlhOellXZGxJR0pzYjJOclpXUW5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhKbGMzVnNkQ0E5SUY5MGFHbHpMbVJsWm1GMWJIUkNaV2hoZG1sdmNqdGNiaUFnSUNBZ0lDQWdiV1Z6YzJGblpTNWliMlI1TG1GMWRHZ2dQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdhV1lnS0hKbGMzVnNkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2JXVnpjMkZuWlNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtDZE5aWE56WVdkbElHSnNiMk5yWldRbktUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnWkdWamNubHdkQ2h0WlhOellXZGxLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExISmxhbVZqZENrZ2UxeHVJQ0FnSUNBZ1gzUm9hWE11YVdSTmIyUjFiR1V1WkdWamNubHdkRTFsYzNOaFoyVW9iV1Z6YzJGblpTa3VkR2hsYmlobWRXNWpkR2x2YmlodGMyY3BJSHRjYmlBZ0lDQWdJQ0FnY21WemIyeDJaU2h0YzJjcE8xeHVJQ0FnSUNBZ2ZTd2dLR1Z5Y205eUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2hsY25KdmNpazdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUdSdlRYVjBkV0ZzUVhWMGFHVnVkR2xqWVhScGIyNG9iV1Z6YzJGblpTd2dZWFYwYUVSbFkybHphVzl1S1NCN1hHNGdJQ0FnYVdZZ0tHRjFkR2hFWldOcGMybHZiaWtnZTF4dUlDQWdJQ0FnYkdWMElIUnZJRDBnYldWemMyRm5aUzUwYnk1emNHeHBkQ2duTHljcE8xeHVJQ0FnSUNBZ2JHVjBJSE4xWW5OSmJtUmxlQ0E5SUhSdkxtbHVaR1Y0VDJZb0ozTjFZbk5qY21sd2RHbHZiaWNwTzF4dUlDQWdJQ0FnYkdWMElHbHpSR0YwWVU5aWFtVmpkRk4xWW5OamNtbHdkR2x2YmlBOUlITjFZbk5KYm1SbGVDQWhQVDBnTFRFN1hHNGdJQ0FnSUNCc1pYUWdhWE5HY205dFVtVnRiM1JsVTAwZ1BTQjBhR2x6TG1selJuSnZiVkpsYlc5MFpWTk5LRzFsYzNOaFoyVXVabkp2YlNrN1hHNGdJQ0FnSUNCcFppQW9hWE5FWVhSaFQySnFaV04wVTNWaWMyTnlhWEIwYVc5dUlDWWdhWE5HY205dFVtVnRiM1JsVTAwcElIdGNiaUFnSUNBZ0lDQWdkRzh1Y0c5d0tDazdYRzRnSUNBZ0lDQWdJR3hsZENCa1lYUmhUMkpxWldOMFZWSk1JRDBnZEc5Yk1GMGdLeUFuTHk4bklDc2dkRzliTWwwZ0t5QW5MeWNnS3lCMGIxc3pYVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUnZMbXhsYm1kMGFDQStJRFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmtZWFJoVDJKcVpXTjBWVkpNSUQwZ2RHOWJNRjBnS3lBbkx5OG5JQ3NnZEc5Yk1sMGdLeUFuTHljZ0t5QjBiMXN6WFNBcklDY3ZKeUFySUhSdld6UmRPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhV1JOYjJSMWJHVXVaRzlOZFhSMVlXeEJkWFJvWlc1MGFXTmhkR2x2Ymloa1lYUmhUMkpxWldOMFZWSk1MQ0J0WlhOellXZGxMbUp2WkhrdWMzVmljMk55YVdKbGNpazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdaVzVqY25sd2RDaHRaWE56WVdkbEtTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmloeVpYTnZiSFpsTEhKbGFtVmpkQ2tnZTF4dUlDQWdJQ0FnWDNSb2FYTXVhV1JOYjJSMWJHVXVaVzVqY25sd2RFMWxjM05oWjJVb2JXVnpjMkZuWlNrdWRHaGxiaWdvYlhObktTQTlQaUI3WEc0Z0lDQWdJQ0FnSUhKbGMyOXNkbVVvYlhObktUdGNiaUFnSUNBZ0lIMHNJQ2hsY25KdmNpa2dQVDRnZTF4dUlDQWdJQ0FnSUNCeVpXcGxZM1FvWlhKeWIzSXBPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNCblpYUlRaWEoyYVdObFVISnZkbWxrWlhKUWIyeHBZM2tvYldWemMyRm5aU3dnYVhOSmJtTnZiV2x1WnlrZ2UxeHVJQ0FnSUd4bGRDQndiMnhwWTNrN1hHNWNiaUFnSUNCcFppQW9hWE5KYm1OdmJXbHVaeWtnZTF4dUlDQWdJQ0FnYkdWMElIUnZTSGx3WlhKMGVTQTlJSFJvYVhNdWNuVnVkR2x0WlZKbFoybHpkSEo1TG1kbGRFaDVjR1Z5ZEhsT1lXMWxLRzFsYzNOaFoyVXVkRzhwTzF4dUlDQWdJQ0FnY0c5c2FXTjVJRDBnZEdocGN5NXpaWEoyYVdObFVISnZkbWxrWlhKUWIyeHBZMmxsYzF0MGIwaDVjR1Z5ZEhsZE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JzWlhRZ1puSnZiVWg1Y0dWeWRIa2dQU0IwYUdsekxuSjFiblJwYldWU1pXZHBjM1J5ZVM1blpYUkllWEJsY25SNVRtRnRaU2h0WlhOellXZGxMbVp5YjIwcE8xeHVJQ0FnSUNBZ2NHOXNhV041SUQwZ2RHaHBjeTV6WlhKMmFXTmxVSEp2ZG1sa1pYSlFiMnhwWTJsbGMxdG1jbTl0U0hsd1pYSjBlVjA3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCd2IyeHBZM2s3WEc0Z0lIMWNibHh1SUNCcGMwWnliMjFTWlcxdmRHVlRUU2htY205dEtTQjdYRzRnSUNBZ2JHVjBJSE53YkdsMFJuSnZiU0E5SUdaeWIyMHVjM0JzYVhRb0p6b3ZMeWNwTzF4dUlDQWdJSEpsZEhWeWJpQnpjR3hwZEVaeWIyMWJNRjBnUFQwOUlDZHlkVzUwYVcxbEp5QW1KaUJtY205dElDRTlQU0IwYUdsekxuSjFiblJwYldWU1pXZHBjM1J5ZVM1eWRXNTBhVzFsVlZKTUlDc2dKeTl6YlNjN1hHNGdJSDFjYmx4dUlDQmZhWE5VYjFObGRFbEVLRzFsYzNOaFoyVXBJSHRjYmlBZ0lDQnNaWFFnYzJOb1pXMWhjMVJ2U1dkdWIzSmxJRDBnV3lka2IyMWhhVzR0YVdSd0p5d2dKM0oxYm5ScGJXVW5MQ0FuWkc5dFlXbHVKMTA3WEc0Z0lDQWdiR1YwSUhOd2JHbDBSbkp2YlNBOUlDaHRaWE56WVdkbExtWnliMjBwTG5Od2JHbDBLQ2M2THk4bktUdGNiaUFnSUNCc1pYUWdabkp2YlZOamFHVnRZU0E5SUhOd2JHbDBSbkp2YlZzd1hUdGNibHh1SUNBZ0lISmxkSFZ5YmlCelkyaGxiV0Z6Vkc5SloyNXZjbVV1YVc1a1pYaFBaaWhtY205dFUyTm9aVzFoS1NBOVBUMGdMVEU3WEc0Z0lIMWNibHh1SUNCZmFYTkpibU52YldsdVowMWxjM05oWjJVb2JXVnpjMkZuWlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUFvYldWemMyRm5aUzVpYjJSNUxtbGtaVzUwYVhSNUtTQS9JSFJ5ZFdVZ09pQm1ZV3h6WlR0Y2JpQWdmVnh1WEc0Z0lHZGxkRlZTVENoMWNtd3BJSHRjYmlBZ0lDQnNaWFFnYzNCc2FYUlZVa3dnUFNCMWNtd3VjM0JzYVhRb0p5OG5LVHRjYmlBZ0lDQnlaWFIxY200Z2MzQnNhWFJWVWt4Yk1GMGdLeUFuTHk4bklDc2djM0JzYVhSVlVreGJNbDBnS3lBbkx5Y2dLeUJ6Y0d4cGRGVlNURnN6WFR0Y2JpQWdmVnh1WEc0Z0lGOW5aWFJKWkdWdWRHbDBlU2h0WlhOellXZGxLU0I3WEc0Z0lDQWdhV1lnS0cxbGMzTmhaMlV1ZEhsd1pTQTlQVDBnSjNWd1pHRjBaU2NwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtbGtUVzlrZFd4bExtZGxkRWxrWlc1MGFYUjVUMlpJZVhCbGNuUjVLRzFsYzNOaFoyVXVZbTlrZVM1emIzVnlZMlVwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNodFpYTnpZV2RsTG5SNWNHVWdQVDA5SUNkeVpYTndiMjV6WlNjZ0ppWWdiV1Z6YzJGblpTNWliMlI1TG5OdmRYSmpaU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVwWkUxdlpIVnNaUzVuWlhSSlpHVnVkR2wwZVU5bVNIbHdaWEowZVNodFpYTnpZV2RsTG1KdlpIa3VjMjkxY21ObEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9aR2wyYVdSbFZWSk1LRzFsYzNOaFoyVXVabkp2YlNrdWRIbHdaU0E5UFQwZ0oyaDVjR1Z5ZEhrbktTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVwWkUxdlpIVnNaUzVuWlhSSlpHVnVkR2wwZVU5bVNIbHdaWEowZVNodFpYTnpZV2RsTG1aeWIyMHBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXBaRTF2WkhWc1pTNW5aWFJKWkdWdWRHbDBlVTltU0hsd1pYSjBlU2gwYUdsekxtZGxkRlZTVENodFpYTnpZV2RsTG1aeWIyMHBLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JmYVhOVWIxWmxjbWxtZVNodFpYTnpZV2RsS1NCN1hHNGdJQ0FnYkdWMElITmphR1Z0WVhOVWIwbG5ibTl5WlNBOUlGc25aRzl0WVdsdUxXbGtjQ2NzSUNkb2VYQmxjblI1TFhKMWJuUnBiV1VuTENBbmNuVnVkR2x0WlNjc0lDZGtiMjFoYVc0blhUdGNiaUFnSUNCc1pYUWdjM0JzYVhSR2NtOXRJRDBnS0cxbGMzTmhaMlV1Wm5KdmJTa3VjM0JzYVhRb0p6b3ZMeWNwTzF4dUlDQWdJR3hsZENCbWNtOXRVMk5vWlcxaElEMGdjM0JzYVhSR2NtOXRXekJkTzF4dUlDQWdJR3hsZENCemNHeHBkRlJ2SUQwZ0tHMWxjM05oWjJVdWRHOHBMbk53YkdsMEtDYzZMeThuS1R0Y2JpQWdJQ0JzWlhRZ2RHOVRZMmhsYldFZ1BTQWdjM0JzYVhSVWIxc3dYVHRjYmlBZ0lDQnBaaUFvWm5KdmJWTmphR1Z0WVNBOVBUMGdiV1Z6YzJGblpTNW1jbTl0SUh4OElIUnZVMk5vWlcxaElEMDlQU0J0WlhOellXZGxMblJ2S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ6WTJobGJXRnpWRzlKWjI1dmNtVXVhVzVrWlhoUFppaG1jbTl0VTJOb1pXMWhLU0E5UFQwZ0xURWdmSHdnYzJOb1pXMWhjMVJ2U1dkdWIzSmxMbWx1WkdWNFQyWW9kRzlUWTJobGJXRXBJRDA5UFNBdE1UdGNiaUFnZlZ4dVhHNGdJQzh2VkU5RVR5QjFjMlVnYzJOb1pXMWhjMVJ2U1dkdWIzSmxJR2x1YzNSbFlXUmNiaUFnWDJselZHOURlWEJvWlhKTmIyUjFiR1VvYldWemMyRm5aU2tnZTF4dUlDQWdJR3hsZENCcGMwTnlaV0YwWlNBOUlHMWxjM05oWjJVdWRIbHdaU0E5UFQwZ0oyTnlaV0YwWlNjN1hHNGdJQ0FnYkdWMElHbHpSbkp2YlVoNWNHVnlkSGtnUFNCa2FYWnBaR1ZWVWt3b2JXVnpjMkZuWlM1bWNtOXRLUzUwZVhCbElEMDlQU0FuYUhsd1pYSjBlU2M3WEc0Z0lDQWdiR1YwSUdselZHOUllWEJsY25SNUlEMGdaR2wyYVdSbFZWSk1LRzFsYzNOaFoyVXVkRzhwTG5SNWNHVWdQVDA5SUNkb2VYQmxjblI1Snp0Y2JpQWdJQ0JzWlhRZ2FYTlViMFJoZEdGUFltcGxZM1FnUFNCcGMwUmhkR0ZQWW1wbFkzUlZVa3dvYldWemMyRm5aUzUwYnlrN1hHNGdJQ0FnYkdWMElHbHpTR0Z1WkhOb1lXdGxJRDBnYldWemMyRm5aUzUwZVhCbElEMDlQU0FuYUdGdVpITm9ZV3RsSnp0Y2JseHVJQ0FnSUhKbGRIVnliaUFvYVhORGNtVmhkR1VnSmlZZ2FYTkdjbTl0U0hsd1pYSjBlU0FtSmlCcGMxUnZTSGx3WlhKMGVTa2dmSHdnS0dselEzSmxZWFJsSUNZbUlHbHpSbkp2YlVoNWNHVnlkSGtnSmlZZ2FYTlViMFJoZEdGUFltcGxZM1FwSUh4OElHbHpTR0Z1WkhOb1lXdGxPMXh1SUNCOVhHNWNiaUFnY21WbmFYTjBaWEpUZFdKelkzSnBZbVZ5S0cxbGMzTmhaMlVzSUdGMWRHaEVaV05wYzJsdmJpa2dlMXh1SUNBZ0lHbG1JQ2hoZFhSb1JHVmphWE5wYjI0cElIdGNiaUFnSUNBZ0lHeGxkQ0IwYnlBOUlHMWxjM05oWjJVdWRHOHVjM0JzYVhRb0p5OG5LVHRjYmlBZ0lDQWdJR3hsZENCemRXSnpTVzVrWlhnZ1BTQjBieTVwYm1SbGVFOW1LQ2R6ZFdKelkzSnBjSFJwYjI0bktUdGNiaUFnSUNBZ0lHeGxkQ0JwYzBSaGRHRlBZbXBsWTNSVGRXSnpZM0pwY0hScGIyNGdQU0J6ZFdKelNXNWtaWGdnSVQwOUlDMHhPMXh1SUNBZ0lDQWdiR1YwSUdselJuSnZiVkpsYlc5MFpWTk5JRDBnZEdocGN5NXBjMFp5YjIxU1pXMXZkR1ZUVFNodFpYTnpZV2RsTG1aeWIyMHBPMXh1WEc0Z0lDQWdJQ0JwWmlBb2FYTkVZWFJoVDJKcVpXTjBVM1ZpYzJOeWFYQjBhVzl1SUNZZ2FYTkdjbTl0VW1WdGIzUmxVMDBwSUh0Y2JpQWdJQ0FnSUNBZ2RHOHVjRzl3S0NrN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JrWVhSaFQySnFaV04wVlZKTUlEMGdkRzliTUYwZ0t5QW5MeThuSUNzZ2RHOWJNbDBnS3lBbkx5Y2dLeUIwYjFzelhUdGNiaUFnSUNBZ0lDQWdhV1lnS0hSdkxteGxibWQwYUNBK0lEUXBJSHRjYmlBZ0lDQWdJQ0FnSUNCa1lYUmhUMkpxWldOMFZWSk1JRDBnZEc5Yk1GMGdLeUFuTHk4bklDc2dkRzliTWwwZ0t5QW5MeWNnS3lCMGIxc3pYU0FySUNjdkp5QXJJSFJ2V3pSZE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdWNuVnVkR2x0WlZKbFoybHpkSEo1TG5KbFoybHpkR1Z5VTNWaWMyTnlhV0psY2loa1lYUmhUMkpxWldOMFZWSk1MQ0J0WlhOellXZGxMbUp2WkhrdWMzVmljMk55YVdKbGNpazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdYMmRsZEV4aGMzUkRiMjF3YjI1bGJuUlBabFZTVENoMWNtd3BJSHRjYmlBZ0lDQnNaWFFnYzNCc2FYUWdQU0IxY213dWMzQnNhWFFvSnk4bktUdGNiaUFnSUNCeVpYUjFjbTRnYzNCc2FYUmJjM0JzYVhRdWJHVnVaM1JvSUMwZ01WMDdYRzRnSUgxY2JseHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JTZFc1MGFXMWxRMjl5WlVOMGVEdGNiaUlzSW1sdGNHOXlkQ0JRYjJ4cFkza2dabkp2YlNBbkxpNHZVRzlzYVdONUp6dGNibHh1WTJ4aGMzTWdWWE5sY2xCdmJHbGplU0JsZUhSbGJtUnpJRkJ2YkdsamVTQjdYRzRnSUdOdmJuTjBjblZqZEc5eUtHdGxlU3dnY25Wc1pYTXNJR0ZqZEdsdmJuTXNJR052YldKcGJtbHVaMEZzWjI5eWFYUm9iU2tnZTF4dUlDQWdJR2xtSUNnaFkyOXRZbWx1YVc1blFXeG5iM0pwZEdodEtTQjdYRzRnSUNBZ0lDQmpiMjFpYVc1cGJtZEJiR2R2Y21sMGFHMGdQU0FuWkdWdWVVOTJaWEp5YVdSbGN5YzdYRzRnSUNBZ2ZWeHVJQ0FnSUhOMWNHVnlLR3RsZVN3Z2NuVnNaWE1zSUdGamRHbHZibk1zSUdOdmJXSnBibWx1WjBGc1oyOXlhWFJvYlNrN1hHNGdJSDFjYmx4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlZjMlZ5VUc5c2FXTjVPMXh1SWl3aUx5b3FYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRkJVSUVsdWIzWmh3NmZEbzI4Z1pTQlRhWE4wWlcxaGN5QlRRVnh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJKVGtWVFF5MUpSRnh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJSVlU5Q1NWTWdUa1ZVVjA5U1MxTWdVMHhjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnUmxKQlZVNUlUMFpGVWkxSFJWTkZURXhUUTBoQlJsUWdXbFZTSUVaUFJWSkVSVkpWVGtjZ1JFVlNJRUZPUjBWWFFVNUVWRVZPSUVaUFVsTkRTRlZPUnlCRkxsWmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdUMUpCVGtkRklGTkJYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRVJsZFhSelkyaGxJRlJsYkdWcmIyMGdRVWRjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnUVhCcGVtVmxYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRlJGUTBoT1NWTkRTRVVnVlU1SlZrVlNVMGxVUVZRZ1FrVlNURWxPWEc0cVhHNHFJRXhwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakFnS0hSb1pTQmNJa3hwWTJWdWMyVmNJaWs3WEc0cUlIbHZkU0J0WVhrZ2JtOTBJSFZ6WlNCMGFHbHpJR1pwYkdVZ1pYaGpaWEIwSUdsdUlHTnZiWEJzYVdGdVkyVWdkMmwwYUNCMGFHVWdUR2xqWlc1elpTNWNiaW9nV1c5MUlHMWhlU0J2WW5SaGFXNGdZU0JqYjNCNUlHOW1JSFJvWlNCTWFXTmxibk5sSUdGMFhHNHFYRzRxSUNBZ2FIUjBjRG92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0cVhHNHFJRlZ1YkdWemN5QnlaWEYxYVhKbFpDQmllU0JoY0hCc2FXTmhZbXhsSUd4aGR5QnZjaUJoWjNKbFpXUWdkRzhnYVc0Z2QzSnBkR2x1Wnl3Z2MyOW1kSGRoY21WY2Jpb2daR2x6ZEhKcFluVjBaV1FnZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlVnYVhNZ1pHbHpkSEpwWW5WMFpXUWdiMjRnWVc0Z1hDSkJVeUJKVTF3aUlFSkJVMGxUTEZ4dUtpQlhTVlJJVDFWVUlGZEJVbEpCVGxSSlJWTWdUMUlnUTA5T1JFbFVTVTlPVXlCUFJpQkJUbGtnUzBsT1JDd2daV2wwYUdWeUlHVjRjSEpsYzNNZ2IzSWdhVzF3YkdsbFpDNWNiaW9nVTJWbElIUm9aU0JNYVdObGJuTmxJR1p2Y2lCMGFHVWdjM0JsWTJsbWFXTWdiR0Z1WjNWaFoyVWdaMjkyWlhKdWFXNW5JSEJsY20xcGMzTnBiMjV6SUdGdVpGeHVLaUJzYVcxcGRHRjBhVzl1Y3lCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlM1Y2Jpb3FMMXh1THk4Z2FXMXdiM0owSUUxbGMzTmhaMlZHWVdOMGIzSjVJR1p5YjIwZ0p5NHVMeTR1TDNKbGMyOTFjbU5sY3k5TlpYTnpZV2RsUm1GamRHOXllU2M3WEc1Y2JpOHFLbHh1SUNvZ1EyeGhjM01nZDJsc2JDQmhjMnNnZEc4Z2RHaGxJRzFsYzNOaFoyVWdibTlrWlNCbWIzSWdZV1JrY21WemMyVnpYRzRnS2k5Y2JtTnNZWE56SUVGa1pISmxjM05CYkd4dlkyRjBhVzl1SUh0Y2JpQWdMeW9nY0hKcGRtRjBaVnh1SUNCZmRYSnNPaUJWVWt4Y2JpQWdYMkoxY3pvZ1RXbHVhVUoxYzF4dUlDQXFMMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkRjbVZoZEdVZ1lXNGdRV1JrY21WemN5QkJiR3h2WTJGMGFXOXVYRzRnSUNBcUlFQndZWEpoYlNBZ2UxVlNUQzVWVWt4OUlDQWdJQ0FnZFhKc0lDMGdkWEpzSUdaeWIyMGdkMmh2SUdseklITmxibVJwYm1jZ2RHaGxJRzFsYzNOaFoyVmNiaUFnSUNvZ1FIQmhjbUZ0SUNCN1RXbHVhVUoxYzMwZ0lDQWdJQ0JpZFhNZ0xTQk5hVzVwUW5WeklIVnpaV1FnWm05eUlHRmtaSEpsYzNNZ1lXeHNiMk5oZEdsdmJseHVJQ0FnS2k5Y2JpQWdZMjl1YzNSeWRXTjBiM0lvZFhKc0xDQmlkWE1wSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdMeThnYkdWMElHMWxjM05oWjJWR1lXTjBiM0o1SUQwZ2JtVjNJRTFsYzNOaFoyVkdZV04wYjNKNUtDazdYRzRnSUNBZ0x5OWNiaUFnSUNBdkx5QmZkR2hwY3k1ZmJXVnpjMkZuWlVaaFkzUnZjbmtnUFNCdFpYTnpZV2RsUm1GamRHOXllVHRjYmlBZ0lDQmZkR2hwY3k1ZmRYSnNJRDBnZFhKc08xeHVJQ0FnSUY5MGFHbHpMbDlpZFhNZ1BTQmlkWE03WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1oyVjBJSFJvWlNCVlVrd2dkbUZzZFdWY2JpQWdJQ29nUUhKbGRIVnliaUI3YzNSeWFXNW5mU0JVYUdVZ2RYSnNJSFpoYkhWbE8xeHVJQ0FnS2k5Y2JpQWdaMlYwSUhWeWJDZ3BJSHNnY21WMGRYSnVJSFJvYVhNdVgzVnliRHNnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJCYzJzZ1ptOXlJR055WldGMGFXOXVJRzltSUdFZ2JuVnRZbVZ5SUc5bUlFaDVjR1Z5ZEhrZ1lXUmtjbVZ6YzJWekxDQjBieUIwYUdVZ1pHOXRZV2x1SUcxbGMzTmhaMlVnYm05a1pTNWNiaUFnSUNvZ1FIQmhjbUZ0SUNCN1JHOXRZV2x1ZlNCa2IyMWhhVzRnTFNCRWIyMWhhVzRnYjJZZ2RHaGxJRzFsYzNOaFoyVWdibTlrWlM1Y2JpQWdJQ29nUUhCaGNtRnRJQ0I3Ym5WdFltVnlmU0J1ZFcxaVpYSWdMU0JPZFcxaVpYSWdiMllnWVdSa2NtVnpjMlZ6SUhSdklISmxjWFZsYzNSY2JpQWdJQ29nUUhKbGRIVnlibk1nZTFCeWIyMXBjMlU4U0hsd1pYSjBlVlZTVEQ1OUlDQkJJR3hwYzNRZ2IyWWdTSGx3WlhKMGVWVlNUQ2R6WEc0Z0lDQXFMMXh1SUNCamNtVmhkR1VvWkc5dFlXbHVMQ0J1ZFcxaVpYSXBJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ0x5OGdiR1YwSUcxbGMzTmhaMlZHWVdOMGIzSjVJRDBnWDNSb2FYTXVYMjFsYzNOaFoyVkdZV04wYjNKNU8xeHVYRzRnSUNBZ2JHVjBJRzF6WnlBOUlIdGNiaUFnSUNBZ0lIUjVjR1U2SUNkamNtVmhkR1VuTENCbWNtOXRPaUJmZEdocGN5NWZkWEpzTENCMGJ6b2dKMlJ2YldGcGJqb3ZMMjF6WnkxdWIyUmxMaWNnS3lCa2IyMWhhVzRnS3lBbkwyaDVjR1Z5ZEhrdFlXUmtjbVZ6Y3kxaGJHeHZZMkYwYVc5dUp5eGNiaUFnSUNBZ0lHSnZaSGs2SUh0MllXeDFaVG9nZTI1MWJXSmxjam9nYm5WdFltVnlmWDFjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdMeThnVkU5RVR6b2dRWEJ3YkhrZ2RHaGxJRzFsYzNOaFoyVWdabUZqZEc5eWVWeHVJQ0FnSUM4dklGUm9aU0J0YzJjdGJtOWtaUzEyWlhKMGVDQnphRzkxYkdRZ1ltVWdZMmhoYm1kbFpDQjBhR1VnWW05a2VTQm1hV1ZzWkNCMGJ5QnlaV05sYVhabFhHNGdJQ0FnTHk4Z2RHaGxJR1p2Ykd4dmQybHVaeUJtYjNKdFlYUWdZbTlrZVRvZ2UzWmhiSFZsT2lCN2JuVnRZbVZ5T2lCdWRXMWlaWEo5ZlNCaVpXTmhkWE5sWEc0Z0lDQWdMeThnZEdobElHMWxjM05oWjJVZ2FYTWdaMlZ1WlhKaGRHVmtJR2x1SUhSb1lYUWdkMkY1SUdKNUlIUm9aU0J0WlhOellXZGxJR1poWTNSdmNuazdYRzRnSUNBZ0x5OGdiR1YwSUcxelp5QTlJRzFsYzNOaFoyVkdZV04wYjNKNUxtTnlaV0YwWlUxbGMzTmhaMlZTWlhGMVpYTjBLRjkwYUdsekxsOTFjbXdzSUNka2IyMWhhVzQ2THk5dGMyY3RibTlrWlM0bklDc2daRzl0WVdsdUlDc2dKeTlvZVhCbGNuUjVMV0ZrWkhKbGMzTXRZV3hzYjJOaGRHbHZiaWNzSUNjbkxDQjdiblZ0WW1WeU9pQnVkVzFpWlhKOUtUdGNibHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTZ29jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQTlQaUI3WEc1Y2JpQWdJQ0FnSUM4dklGUlBSRTg2SUdOb1lXNW5aU0IwYUdseklISmxjM0J2Ym5ObElFMWxjM05oWjJVZ2RYTnBibWNnZEdobElFMWxjM05oWjJWR1lXTjBiM0o1WEc0Z0lDQWdJQ0JmZEdocGN5NWZZblZ6TG5CdmMzUk5aWE56WVdkbEtHMXpaeXdnS0hKbGNHeDVLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h5WlhCc2VTNWliMlI1TG1OdlpHVWdQVDA5SURJd01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvY21Wd2JIa3VZbTlrZVM1MllXeDFaUzVoYkd4dlkyRjBaV1FwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lISmxhbVZqZENoeVpYQnNlUzVpYjJSNUxtUmxjMk1wTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJRk5sYm1RZ1lTQnlaWEYxWlhOMElIUnZJSFJvWlNCa2IyMWhhVzRnYldWemMyRm5aU0J1YjJSbExDQjBieUJrWldGc2JHOWpZWFJsSUc5dVpTQnZjaUJ0YjNKbElHRmtaSEpsYzNObGMxeHVJQ0FxSUVCd1lYSmhiU0FnZTBSdmJXRnBibjBnWkc5dFlXbHVJQzBnUkc5dFlXbHVJRzltSUhSb1pTQnRaWE56WVdkbElHNXZaR1V1WEc0Z0lDb2dRSEJoY21GdElDQjdZV1JrY21WemMyVnpmU0JoWkdSeVpYTnpaWE1nZEc4Z2NtVnhkV1Z6ZENCMGFHVWdaR1ZoYkd4dlkyRjBhVzl1WEc0Z0lDb2dRSEpsZEhWeWJuTWdlMUJ5YjIxcGMyVjlJQ0IwYUdVZ2NtVnpjRzl1YzJVZ1lua2dkR2hsSUcxbGMzTmhaMlVnYm05a1pWeHVJQ0FxTDF4dUlDQmtaV3hsZEdVb1pHOXRZV2x1TENCaFpHUnlaWE56WlhNcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnYkdWMElHMWxjM05oWjJVZ1BTQjdYRzRnSUNBZ0lDQjBlWEJsT2lBblpHVnNaWFJsSnl3Z1puSnZiVG9nWDNSb2FYTXVYM1Z5YkN3Z2RHODZJQ2RrYjIxaGFXNDZMeTl0YzJjdGJtOWtaUzRuSUNzZ1pHOXRZV2x1SUNzZ0p5OW9lWEJsY25SNUxXRmtaSEpsYzNNdFlXeHNiMk5oZEdsdmJpY3NYRzRnSUNBZ0lDQmliMlI1T2lCN1kyaHBiR1J5Wlc1U1pYTnZkWEpqWlhNNklHRmtaSEpsYzNObGMzMWNiaUFnSUNCOU8xeHVYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtDaHlaWE52YkhabExDQnlaV3BsWTNRcElEMCtJSHRjYmx4dUlDQWdJQ0FnWDNSb2FYTXVYMkoxY3k1d2IzTjBUV1Z6YzJGblpTaHRaWE56WVdkbExDQW9jbVZ3YkhrcElEMCtJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0ozSmxjR3g1Snl3Z2NtVndiSGtwTzF4dUlDQWdJQ0FnSUNCcFppQW9jbVZ3YkhrdVltOWtlUzVqYjJSbElEMDlQU0F5TURBcElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLSEpsY0d4NUxtSnZaSGt1WTI5a1pTazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLSEpsY0d4NUxtSnZaSGt1WkdWell5azdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDBwTzF4dVhHNGdJSDFjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1FXUmtjbVZ6YzBGc2JHOWpZWFJwYjI0N1hHNGlMQ0l2S2lwY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1VGUWdTVzV2ZG1IRHA4T2pieUJsSUZOcGMzUmxiV0Z6SUZOQlhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFbE9SVk5ETFVsRVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGRlZUMEpKVXlCT1JWUlhUMUpMVXlCVFRGeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkdVa0ZWVGtoUFJrVlNMVWRGVTBWTVRGTkRTRUZHVkNCYVZWSWdSazlGVWtSRlVsVk9SeUJFUlZJZ1FVNUhSVmRCVGtSVVJVNGdSazlTVTBOSVZVNUhJRVV1Vmx4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUFVrRk9SMFVnVTBGY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1JHVjFkSE5qYUdVZ1ZHVnNaV3R2YlNCQlIxeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkJjR2w2WldWY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1ZFVkRTRTVKVTBOSVJTQlZUa2xXUlZKVFNWUkJWQ0JDUlZKTVNVNWNiaXBjYmlvZ1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsSUZ3aVRHbGpaVzV6WlZ3aUtUdGNiaW9nZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlNCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGx4dUtpQlpiM1VnYldGNUlHOWlkR0ZwYmlCaElHTnZjSGtnYjJZZ2RHaGxJRXhwWTJWdWMyVWdZWFJjYmlwY2Jpb2dJQ0JvZEhSd09pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaXBjYmlvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MQ0J6YjJaMGQyRnlaVnh1S2lCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhiaUJjSWtGVElFbFRYQ0lnUWtGVFNWTXNYRzRxSUZkSlZFaFBWVlFnVjBGU1VrRk9WRWxGVXlCUFVpQkRUMDVFU1ZSSlQwNVRJRTlHSUVGT1dTQkxTVTVFTENCbGFYUm9aWElnWlhod2NtVnpjeUJ2Y2lCcGJYQnNhV1ZrTGx4dUtpQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEc0cUlHeHBiV2wwWVhScGIyNXpJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1S2lvdlhHNXBiWEJ2Y25RZ1VtVm5hWE4wY25sRVlYUmhUVzlrWld3Z1puSnZiU0FuTGk5U1pXZHBjM1J5ZVVSaGRHRk5iMlJsYkNjN1hHNWNiaThxS2x4dUtpQWdJRUJoZFhSb2IzSTZJRWRwYkNCRWFXRnpJQ2huYVd3dVpHbGhjMEIwWldOdWFXTnZMblZzYVhOaWIyRXVjSFFwWEc0cUlDQWdTSGx3WlhKMGVVbHVjM1JoYm1ObElFUmhkR0VnVFc5a1pXd2dkWE5sWkNCMGJ5QnRiMlJsYkNCcGJuTjBZVzVqWlhNZ2IyWWdTSGx3WlhKMGFXVnpJSEoxYm01cGJtY2dhVzRnWkdWMmFXTmxjeUJoYm1RZ2MyVnlkbVZ5Y3k1Y2Jpb3ZYRzVqYkdGemN5QkllWEJsY25SNVNXNXpkR0Z1WTJVZ1pYaDBaVzVrY3lCU1pXZHBjM1J5ZVVSaGRHRk5iMlJsYkNCN1hHNWNiaUFnWTI5dWMzUnlkV04wYjNJb2FXUXNJSFZ5YkN3Z1pHVnpZM0pwY0hSdmNsVlNUQ3hrWlhOamNtbHdkRzl5TENCb2VYQmxjblI1VlZKTUxDQjFjMlZ5TENCbmRXbGtMQ0J5ZFc1MGFXMWxMQ0JqYjI1MFpYaDBLU0I3WEc0Z0lDQWdjM1Z3WlhJb2FXUXNJSFZ5YkN3Z1pHVnpZM0pwY0hSdmNsVlNUQ2s3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNiaUFnSUNCZmRHaHBjeTVmWkdWelkzSnBjSFJ2Y2lBOUlHUmxjMk55YVhCMGIzSTdYRzRnSUNBZ1gzUm9hWE11WDJoNWNHVnlkSGxWVWt3Z1BTQm9lWEJsY25SNVZWSk1PMXh1SUNBZ0lGOTBhR2x6TGw5MWMyVnlJRDBnZFhObGNqdGNiaUFnSUNCZmRHaHBjeTVmWjNWcFpDQTlJR2QxYVdRN1hHNGdJQ0FnWDNSb2FYTXVYM0oxYm5ScGJXVWdQU0J5ZFc1MGFXMWxPMXh1SUNBZ0lGOTBhR2x6TGw5amIyNTBaWGgwSUQwZ1kyOXVkR1Y0ZER0Y2JpQWdmVnh1WEc0Z0lITmxkQ0IxYzJWeUtHbGtaVzUwYVhSNUtTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0JmZEdocGN5NTFjMlZ5SUQwZ2FXUmxiblJwZEhrN1hHNGdJSDFjYmx4dUlDQm5aWFFnZFhObGNpZ3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUhKbGRIVnliaUJmZEdocGN5NWZkWE5sY2p0Y2JpQWdmVnh1WEc0Z0lHZGxkQ0JvZVhCbGNuUjVWVkpNS0NrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdjbVYwZFhKdUlGOTBhR2x6TGw5b2VYQmxjblI1VlZKTU8xeHVJQ0I5WEc1Y2JpQWdaMlYwSUdSbGMyTnlhWEIwYjNJb0tTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0J5WlhSMWNtNGdYM1JvYVhNdVgyUmxjMk55YVhCMGIzSTdYRzRnSUgxY2JseHVJQ0JuWlhRZ2IySnFaV04wVG1GdFpTZ3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUhKbGRIVnliaUJmZEdocGN5NWZaR1Z6WTNKcGNIUnZjaTVmYjJKcVpXTjBUbUZ0WlR0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCSWVYQmxjblI1U1c1emRHRnVZMlU3WEc0aUxDSXZLaXBjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVUZRZ1NXNXZkbUhEcDhPamJ5QmxJRk5wYzNSbGJXRnpJRk5CWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVsT1JWTkRMVWxFWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUZGVlQwSkpVeUJPUlZSWFQxSkxVeUJUVEZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCR1VrRlZUa2hQUmtWU0xVZEZVMFZNVEZORFNFRkdWQ0JhVlZJZ1JrOUZVa1JGVWxWT1J5QkVSVklnUVU1SFJWZEJUa1JVUlU0Z1JrOVNVME5JVlU1SElFVXVWbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJQVWtGT1IwVWdVMEZjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnUkdWMWRITmphR1VnVkdWc1pXdHZiU0JCUjF4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCQmNHbDZaV1ZjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVkVWRFNFNUpVME5JUlNCVlRrbFdSVkpUU1ZSQlZDQkNSVkpNU1U1Y2JpcGNiaW9nVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUVGd1lXTm9aU0JNYVdObGJuTmxMQ0JXWlhKemFXOXVJREl1TUNBb2RHaGxJRndpVEdsalpXNXpaVndpS1R0Y2Jpb2dlVzkxSUcxaGVTQnViM1FnZFhObElIUm9hWE1nWm1sc1pTQmxlR05sY0hRZ2FXNGdZMjl0Y0d4cFlXNWpaU0IzYVhSb0lIUm9aU0JNYVdObGJuTmxMbHh1S2lCWmIzVWdiV0Y1SUc5aWRHRnBiaUJoSUdOdmNIa2diMllnZEdobElFeHBZMlZ1YzJVZ1lYUmNiaXBjYmlvZ0lDQm9kSFJ3T2k4dmQzZDNMbUZ3WVdOb1pTNXZjbWN2YkdsalpXNXpaWE12VEVsRFJVNVRSUzB5TGpCY2JpcGNiaW9nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxDQnpiMlowZDJGeVpWeHVLaUJrYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlNCcGN5QmthWE4wY21saWRYUmxaQ0J2YmlCaGJpQmNJa0ZUSUVsVFhDSWdRa0ZUU1ZNc1hHNHFJRmRKVkVoUFZWUWdWMEZTVWtGT1ZFbEZVeUJQVWlCRFQwNUVTVlJKVDA1VElFOUdJRUZPV1NCTFNVNUVMQ0JsYVhSb1pYSWdaWGh3Y21WemN5QnZjaUJwYlhCc2FXVmtMbHh1S2lCVFpXVWdkR2hsSUV4cFkyVnVjMlVnWm05eUlIUm9aU0J6Y0dWamFXWnBZeUJzWVc1bmRXRm5aU0JuYjNabGNtNXBibWNnY0dWeWJXbHpjMmx2Ym5NZ1lXNWtYRzRxSUd4cGJXbDBZWFJwYjI1eklIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObExseHVLaW92WEc1cGJYQnZjblFnUlhabGJuUkZiV2wwZEdWeUlHWnliMjBnSnk0dUwzVjBhV3h6TDBWMlpXNTBSVzFwZEhSbGNpYzdYRzVwYlhCdmNuUWdRV1JrY21WemMwRnNiRzlqWVhScGIyNGdabkp2YlNBbkxpOUJaR1J5WlhOelFXeHNiMk5oZEdsdmJpYzdYRzVwYlhCdmNuUWdUMkpxWldOMFFXeHNiMk5oZEdsdmJpQm1jbTl0SUNjdUxpOXplVzVqYUdWeUwwOWlhbVZqZEVGc2JHOWpZWFJwYjI0bk8xeHVhVzF3YjNKMElFaDVjR1Z5ZEhsSmJuTjBZVzVqWlNCbWNtOXRJQ2N1TDBoNWNHVnlkSGxKYm5OMFlXNWpaU2M3WEc1Y2JtbHRjRzl5ZENCN1RXVnpjMkZuWlVaaFkzUnZjbmw5SUdaeWIyMGdKM05sY25acFkyVXRabkpoYldWM2IzSnJMMlJwYzNRdlRXVnpjMkZuWlVaaFkzUnZjbmtuTzF4dWFXMXdiM0owSUh0a2FYWnBaR1ZWVWt4OUlHWnliMjBnSnk0dUwzVjBhV3h6TDNWMGFXeHpMbXB6Snp0Y2JseHVMeXBwYlhCdmNuUWdTV1JsYm5ScGRIbE5ZVzVoWjJWeUlHWnliMjBnSnk0dlNXUmxiblJwZEhsTllXNWhaMlZ5Snp0Y2JtbHRjRzl5ZENCRWFYTmpiM1psY25rZ1puSnZiU0FuTGk5RWFYTmpiM1psY25rbk95b3ZYRzVjYmk4cUtseHVLaUJTZFc1MGFXMWxJRkpsWjJsemRISjVJRWx1ZEdWeVptRmpaVnh1S2k5Y2JtTnNZWE56SUZKbFoybHpkSEo1SUdWNGRHVnVaSE1nUlhabGJuUkZiV2wwZEdWeUlIdGNibHh1SUNBdktpcGNiaUFnS2lCVWJ5QnBibWwwYVdGc2FYTmxJSFJvWlNCU2RXNTBhVzFsSUZKbFoybHpkSEo1SUhkcGRHZ2dkR2hsSUZKMWJuUnBiV1ZWVWt3Z2RHaGhkQ0IzYVd4c0lHSmxJSFJvWlNCaVlYTnBjeUIwYnlCa1pYSnBkbVVnZEdobElHbHVkR1Z5Ym1Gc0lISjFiblJwYldVZ1lXUmtjbVZ6YzJWeklIZG9aVzRnWVd4c2IyTmhkR2x1WnlCaFpHUnlaWE56WlhNZ2RHOGdhVzUwWlhKdVlXd2djblZ1ZEdsdFpTQmpiMjF3YjI1bGJuUXVJRWx1SUdGa1pHbDBhVzl1TENCMGFHVWdVbVZuYVhOMGNua2daRzl0WVdsdUlHSmhZMnN0Wlc1a0lIUnZJR0psSUhWelpXUWdkRzhnY21WdGIzUmxiSGtnY21WbmFYTjBaWElnVW5WdWRHbHRaU0JqYjIxd2IyNWxiblJ6TENCcGN5QmhiSE52SUhCaGMzTmxaQ0JoY3lCcGJuQjFkQ0J3WVhKaGJXVjBaWEl1WEc0Z0lDb2dRSEJoY21GdElDQjdUV1Z6YzJGblpVSjFjMzBnSUNBZ0lDQWdJQ0FnYlhOblluVnpJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMXpaMkoxYzF4dUlDQXFJRUJ3WVhKaGJTQWdlMGg1Y0dWeWRIbFNkVzUwYVcxbFZWSk1mU0FnSUhKMWJuUnBiV1ZWVWt3Z0lDQWdJQ0FnSUNBZ0lDQnlkVzUwYVcxbFZWSk1YRzRnSUNvZ1FIQmhjbUZ0SUNCN1FYQndVMkZ1WkdKdmVIMGdJQ0FnSUNBZ0lDQWdZWEJ3VTJGdVpHSnZlQ0FnSUNBZ0lDQWdJQ0FnSUdGd2NGTmhibVJpYjNoY2JpQWdLaUJBY0dGeVlXMGdJSHR5ZFc1MGFXMWxRMkYwWVd4dlozVmxmU0FnSUNCeWRXNTBhVzFsUTJGMFlXeHZaM1ZsSUNBZ0lDQWdjblZ1ZEdsdFpVTmhkR0ZzYjJkMVpWeHVJQ0FxSUVCd1lYSmhiU0FnZTBSdmJXRnBibFZTVEgwZ0lDQWdJQ0FnSUNBZ0lISmxiVzkwWlZKbFoybHpkSEo1SUNBZ0lDQWdJQ0J5WlcxdmRHVlNaV2RwYzNSeWVWeHVJQ0FxTDF4dUlDQmpiMjV6ZEhKMVkzUnZjaWh5ZFc1MGFXMWxWVkpNTENCaGNIQlRZVzVrWW05NExDQnBaR1Z1ZEdsMGVVMXZaSFZzWlN3Z2NuVnVkR2x0WlVOaGRHRnNiMmQxWlN3Z2NtVnRiM1JsVW1WbmFYTjBjbmtwSUh0Y2JseHVJQ0FnSUhOMWNHVnlLQ2s3WEc1Y2JpQWdJQ0F2THlCb2IzY2djMjl0WlNCbWRXNWpkR2x2Ym5NZ2NtVmpaV2wyWlNCMGFHVWdjR0Z5WVcxbGRHVnljeUJtYjNJZ1pYaGhiWEJzWlRwY2JpQWdJQ0F2THlCdVpYY2dVbVZuYVhOMGNua29KMmg1Y0dWeWRIa3RjblZ1ZEdsdFpUb3ZMM053TVM4eE1qTW5MQ0JoY0hCVFlXNWtZbTk0TENCcFpFMXZaSFZzWlN3Z2NtVnRiM1JsVW1WbmFYTjBjbmtwTzF4dUlDQWdJQzh2SUhKbFoybHpkSEo1TG5KbFoybHpkR1Z5VTNSMVlpaHpZVzVrWW05NExDQW5jM0F4SnlrN1hHNGdJQ0FnTHk4Z2NtVm5hWE4wY25rdWNtVm5hWE4wWlhKSWVYQmxjblI1S0hOaGJtUkNiM2dzSUNkb2VYQmxjblI1TFhKMWJuUnBiV1U2THk5emNERXZNVEl6SnlrN1hHNGdJQ0FnTHk4Z2NtVm5hWE4wY25rdWNtVnpiMngyWlNnbmFIbHdaWEowZVMxeWRXNTBhVzFsT2k4dmMzQXhMekV5TXljcE8xeHVYRzRnSUNBZ2FXWWdLQ0Z5ZFc1MGFXMWxWVkpNS1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjNKMWJuUnBiV1ZWVWt3Z2FYTWdiV2x6YzJsdVp5NG5LVHRjYmlBZ0lDQXZLbWxtSUNnaGNtVnRiM1JsVW1WbmFYTjBjbmtwSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduY21WdGIzUmxVbVZuYVhOMGNua2dhWE1nYldsemMybHVaeWNwT3lvdlhHNWNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnWDNSb2FYTXVjbVZuYVhOMGNubFZVa3dnUFNCeWRXNTBhVzFsVlZKTUlDc2dKeTl5WldkcGMzUnllUzhuTzF4dUlDQWdJRjkwYUdsekxtRndjRk5oYm1SaWIzZ2dQU0JoY0hCVFlXNWtZbTk0TzF4dUlDQWdJRjkwYUdsekxuSjFiblJwYldWVlVrd2dQU0J5ZFc1MGFXMWxWVkpNTzF4dUlDQWdJRjkwYUdsekxuSjFiblJwYldWRFlYUmhiRzluZFdVZ1BTQnlkVzUwYVcxbFEyRjBZV3h2WjNWbE8xeHVJQ0FnSUY5MGFHbHpMbkpsYlc5MFpWSmxaMmx6ZEhKNUlEMGdjbVZ0YjNSbFVtVm5hWE4wY25rN1hHNGdJQ0FnWDNSb2FYTXVhV1JOYjJSMWJHVWdQU0JwWkdWdWRHbDBlVTF2WkhWc1pUdGNiaUFnSUNCZmRHaHBjeTVwWkdWdWRHbG1hV1Z5SUQwZ1RXRjBhQzVtYkc5dmNpZ29UV0YwYUM1eVlXNWtiMjBvS1NBcUlERXdNREF3S1NBcklERXBPMXh1WEc0Z0lDQWdMeThnZEdobElHVjRjR2x5WlhNZ2FXNGdNell3TUN3Z2NtVndjbVZ6Wlc1MGN5QXhJR2h2ZFhKY2JpQWdJQ0F2TDNSb1pTQmxlSEJwY21WeklHbHpJR2x1SUhObFkyOXVaSE1zSUhWdWFYUWdiMllnYldWaGMzVnlaU0J5WldObGFYWmxaQ0JpZVNCMGFHVWdaRzl0WVdsdUlISmxaMmx6ZEhKNVhHNGdJQ0FnWDNSb2FYTXVaWGh3YVhKbGMxUnBiV1VnUFNBek5qQXdPMXh1WEc0Z0lDQWdYM1JvYVhNdWFIbHdaWEowYVdWelRHbHpkRlJ2VW1WdGIzWmxJRDBnZTMwN1hHNGdJQ0FnWDNSb2FYTXVhSGx3WlhKMGFXVnpUR2x6ZENBOUlGdGRPMXh1SUNBZ0lGOTBhR2x6TG5CeWIzUnZjM1IxWW5OTWFYTjBJRDBnZTMwN1hHNGdJQ0FnWDNSb2FYTXVhV1J3VUhKdmVIbE1hWE4wSUQwZ2UzMDdYRzRnSUNBZ1gzUm9hWE11WkdGMFlVOWlhbVZqZEV4cGMzUWdQU0I3ZlR0Y2JpQWdJQ0JmZEdocGN5NXpkV0p6WTNKcFltVmtSR0YwWVU5aWFtVmpkRXhwYzNRZ1BTQjdmVHRjYmlBZ0lDQmZkR2hwY3k1ellXNWtZbTk0WlhOTWFYTjBJRDBnZTNOaGJtUmliM2c2SUh0OUxDQmhjSEJUWVc1a1ltOTRPaUI3ZlNCOU8xeHVJQ0FnSUY5MGFHbHpMbkJsY0V4cGMzUWdQU0I3ZlR0Y2JseHVJQ0FnSUY5MGFHbHpMbDlrYjIxaGFXNGdQU0JrYVhacFpHVlZVa3dvWDNSb2FYTXVjbVZuYVhOMGNubFZVa3dwTG1SdmJXRnBianRjYmlBZ0lDQmZkR2hwY3k1ellXNWtZbTk0WlhOTWFYTjBMbUZ3Y0ZOaGJtUmliM2hiY25WdWRHbHRaVlZTVEYwZ1BTQmhjSEJUWVc1a1ltOTRPMXh1SUNBZ0lHeGxkQ0J0YzJkR1lXTjBiM0o1SUQwZ2JtVjNJRTFsYzNOaFoyVkdZV04wYjNKNUtDZG1ZV3h6WlNjc0lDZDdmU2NwTzF4dUlDQWdJRjkwYUdsekxtMWxjM05oWjJWR1lXTjBiM0o1SUQwZ2JYTm5SbUZqZEc5eWVUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJSEpsZEhWeWJpQjBhR1VnYldWemMyRm5aVUoxY3lCcGJpQjBhR2x6SUZKbFoybHpkSEo1WEc0Z0lDb2dRSEJoY21GdElIdE5aWE56WVdkbFFuVnpmU0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aVUoxYzF4dUlDQXFMMXh1SUNCblpYUWdiV1Z6YzJGblpVSjFjeWdwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTVmYldWemMyRm5aVUoxY3p0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlGTmxkQ0IwYUdVZ2JXVnpjMkZuWlVKMWN5QnBiaUIwYUdseklGSmxaMmx6ZEhKNVhHNGdJQ29nUUhCaGNtRnRJSHROWlhOellXZGxRblZ6ZlNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlVKMWMxeHVJQ0FxTDF4dUlDQnpaWFFnYldWemMyRm5aVUoxY3lodFpYTnpZV2RsUW5WektTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0JmZEdocGN5NWZiV1Z6YzJGblpVSjFjeUE5SUcxbGMzTmhaMlZDZFhNN1hHNWNiaUFnSUNCZmRHaHBjeTVmYldWemMyRm5aVUoxY3k1aFpHUk1hWE4wWlc1bGNpaGZkR2hwY3k1eVpXZHBjM1J5ZVZWU1RDd2dablZ1WTNScGIyNG9iWE5uS1NCN1hHNWNiaUFnSUNBZ0lHeGxkQ0IxYzJWeVZYSnNJRDBnWDNSb2FYTXVYMmRsZEVsa1pXNTBhWFI1UVhOemIyTnBZWFJsWkNodGMyY3VZbTlrZVM1eVpYTnZkWEpqWlN3Z2JYTm5MbUp2WkhrdVkzSnBkR1Z5YVdFcE8xeHVYRzRnSUNBZ0lDQnNaWFFnY21Wd2JIa2dQU0I3YVdRNklHMXpaeTVwWkN3Z2RIbHdaVG9nSjNKbGMzQnZibk5sSnl3Z2RHODZJRzF6Wnk1bWNtOXRMQ0JtY205dE9pQnRjMmN1ZEc4c0lHSnZaSGs2SUh0eVpYTnZkWEpqWlRvZ2RYTmxjbFZ5YkgxOU8xeHVJQ0FnSUNBZ2NtVndiSGt1WW05a2VTNWpiMlJsSUQwZ0tIVnpaWEpWY213cElEOGdNakF3SURvZ05EQTBPMXh1WEc0Z0lDQWdJQ0JmZEdocGN5NWZiV1Z6YzJGblpVSjFjeTV3YjNOMFRXVnpjMkZuWlNoeVpYQnNlU2s3WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0F2THlCaGJITnZJSE5sZENCMWNDQnRaWE56WVdkbFFuVnpJR2x1SUhSb1pTQkpaR1Z1ZEdsMGVVMXZaSFZzWlNCamIyMXdiMjVsYm5SY2JpQWdJQ0F2THlCVVQwUlBJSEpsWkdWbWFXNWxJR0VnWW1WMGRHVnlJSGRoZVNCMGJ5QmhaR1FnZEdobElHMWxjM05oWjJWQ2RYTWdhVzRnZEdobElFbGtUVzlrZFd4bFhHNGdJQ0FnWDNSb2FYTXVhV1JOYjJSMWJHVXViV1Z6YzJGblpVSjFjeUE5SUcxbGMzTmhaMlZDZFhNN1hHNWNiaUFnSUNBdkx5Qkpibk4wWVd4c0lFRmtaSEpsYzNOQmJHeHZZMkYwYVc5dVhHNGdJQ0FnYkdWMElHRmtaSEpsYzNOQmJHeHZZMkYwYVc5dUlEMGdibVYzSUVGa1pISmxjM05CYkd4dlkyRjBhVzl1S0Y5MGFHbHpMbkpsWjJsemRISjVWVkpNTENCdFpYTnpZV2RsUW5WektUdGNiaUFnSUNCZmRHaHBjeTVoWkdSeVpYTnpRV3hzYjJOaGRHbHZiaUE5SUdGa1pISmxjM05CYkd4dlkyRjBhVzl1TzF4dVhHNGdJQ0FnTHk5SmJuTjBZV3hzSUU5aWFtVmpkRUZzYkc5allYUnBiMjVjYmlBZ0lDQnNaWFFnYjJKcVpXTjBRV3hzYjJOaGRHbHZiaUE5SUc1bGR5QlBZbXBsWTNSQmJHeHZZMkYwYVc5dUtGOTBhR2x6TG5KbFoybHpkSEo1VlZKTUlDc2dKeTl2WW1wbFkzUXRZV3hzYjJOaGRHbHZiaWNzSUcxbGMzTmhaMlZDZFhNcE8xeHVJQ0FnSUY5MGFHbHpMbTlpYW1WamRFRnNiRzlqWVhScGIyNGdQU0J2WW1wbFkzUkJiR3h2WTJGMGFXOXVPMXh1WEc0Z0lDQWdMeXBzWlhRZ1pHbHpZMjkyWlhKNUlEMGdibVYzSUVScGMyTnZkbVZ5ZVNoZmRHaHBjeTV5WldkcGMzUnllVlZTVEN3Z2JXVnpjMkZuWlVKMWN5azdYRzRnSUNBZ1gzUm9hWE11WkdselkyOTJaWEo1SUQwZ1pHbHpZMjkyWlhKNU8xeHVYRzRnSUNBZ2JHVjBJR2xrWlc1MGFYUjVUV0Z1WVdkbGNpQTlJRzVsZHlCSlpHVnVkR2wwZVUxaGJtRm5aWElvSjJoNWNHVnlkSGs2THk5c2IyTmhiR2h2YzNRdk9ETXpZVFpsTlRJdE5URTFZaTAwT1RoaUxXRTFOMkl0WlROa1lXVmxZMlUwT0dReUp5d2dYM1JvYVhNdWNuVnVkR2x0WlZWU1RDd2diV1Z6YzJGblpVSjFjeWs3WEc0Z0lDQWdYM1JvYVhNdWFXUmxiblJwZEhsTllXNWhaMlZ5SUQwZ2FXUmxiblJwZEhsTllXNWhaMlZ5T3lvdlhHNGdJSDFjYmx4dUlDQmZaMlYwU1dSbGJuUnBkSGxCYzNOdlkybGhkR1ZrS0hSNWNHVXNJR2g1Y0dWeWRIbFZVa3dwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdabTl5SUNoc1pYUWdhSGx3WlhKMGVTQnBiaUJmZEdocGN5NW9lWEJsY25ScFpYTk1hWE4wS1NCN1hHNGdJQ0FnSUNCc1pYUWdkbUZzZFdVZ1BTQmZkR2hwY3k1b2VYQmxjblJwWlhOTWFYTjBXMmg1Y0dWeWRIbGRPMXh1SUNBZ0lDQWdhV1lnS0haaGJIVmxMbDlvZVhCbGNuUjVWVkpNSUQwOVBTQm9lWEJsY25SNVZWSk1LU0I3WEc0Z0lDQWdJQ0FnSUhOM2FYUmphQ0FvZEhsd1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdOaGMyVWdKM1Z6WlhKdVlXMWxKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMllXeDFaUzVmZFhObGNpNTFjMlZ5Ym1GdFpUdGNiaUFnSUNBZ0lDQWdJQ0JqWVhObElDZGpiaWM2WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RtRnNkV1V1WDNWelpYSXVZMjQ3WEc0Z0lDQWdJQ0FnSUNBZ1kyRnpaU0FuYkc5allXeGxKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMllXeDFaUzVmZFhObGNpNXNiMk5oYkdVN1hHNGdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbllYWmhkR0Z5SnpwY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjJZV3gxWlM1ZmRYTmxjaTVoZG1GMFlYSTdYRzRnSUNBZ0lDQWdJQ0FnWTJGelpTQW5kWE5sY2xWU1RDYzZYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZG1Gc2RXVXVYM1Z6WlhJdWRYTmxjbFZTVER0Y2JpQWdJQ0FnSUNBZ0lDQmpZWE5sSUNjdUp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIyWVd4MVpTNWZkWE5sY2p0Y2JpQWdJQ0FnSUNBZ0lDQmtaV1poZFd4ME9seHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ2NuTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQW5KenRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUhGMVpYSjVJSFJvWlNCa2IyMWhhVzRnY21WbmFYTjBjbmtnWm05eUlHbHVabTl5YldGMGFXOXVJR1p5YjIwZ1lTQmtZWFJoVDJKcVpXTjBJRlZTVEZ4dUlDQXFJRUJ3WVhKaGJTQWdlMU4wY21sdVozMGdJQ0IxY213Z0lDQWdJQ0FnSUNBZ0lDQmtZWFJoVDJKcVpXTjBJRlZTVEZ4dUlDQXFJRUJ5WlhSMWNtNGdlMHBUVDA1OUlDQWdJQ0JrWVhSaFQySnFaV04wSUNBZ0lDQmtZWFJoSUc5aWFtVmpkRnh1SUNBcUwxeHVJQ0JrYVhOamIzWmxja1JoZEdGUFltcGxZM1JRWlhKVlVrd29kWEpzTENCa2IyMWhhVzRwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lHeGxkQ0JoWTNScGRtVkViMjFoYVc0N1hHNWNiaUFnSUNCcFppQW9JV1J2YldGcGJpa2dlMXh1SUNBZ0lDQWdZV04wYVhabFJHOXRZV2x1SUQwZ1gzUm9hWE11WDJSdmJXRnBianRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ1lXTjBhWFpsUkc5dFlXbHVJRDBnWkc5dFlXbHVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHeGxkQ0J0YzJjZ1BTQjdYRzRnSUNBZ0lDQjBlWEJsT2lBbmNtVmhaQ2NzSUdaeWIyMDZJRjkwYUdsekxuSmxaMmx6ZEhKNVZWSk1MQ0IwYnpvZ0oyUnZiV0ZwYmpvdkwzSmxaMmx6ZEhKNUxpY2dLeUJoWTNScGRtVkViMjFoYVc0Z0t5QW5MeWNzSUdKdlpIazZJSHNnY21WemIzVnlZMlU2SUhWeWJDd2djMlZoY21Ob09pZGtZWFJoVDJKcVpXTjBVR1Z5VlZKTUozMWNiaUFnSUNCOU8xeHVYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHVYRzRnSUNBZ0lDQmZkR2hwY3k1ZmJXVnpjMkZuWlVKMWN5NXdiM04wVFdWemMyRm5aU2h0YzJjc0lDaHlaWEJzZVNrZ1BUNGdlMXh1WEc0Z0lDQWdJQ0FnSUd4bGRDQmtZWFJoVDJKcVpXTjBJRDBnY21Wd2JIa3VZbTlrZVM1MllXeDFaVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9aR0YwWVU5aWFtVmpkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb1pHRjBZVTlpYW1WamRDazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLQ2RFWVhSaFQySnFaV04wSUc1dmRDQm1iM1Z1WkNjcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUZSb2FYTWdablZ1WTNScGIyNGdhWE1nZFhObFpDQjBieUJ5WlhSMWNtNGdkR2hsSUhOaGJtUmliM2dnYVc1emRHRnVZMlVnZDJobGNtVWdkR2hsSUVGd2NHeHBZMkYwYVc5dUlHbHpJR1Y0WldOMWRHbHVaeTRnU1hRZ2FYTWdZWE56ZFcxbFpDQjBhR1Z5WlNCcGN5QnFkWE4wSUc5dVpTQkJjSEFnY0dWeUlGSjFiblJwYldVZ2FXNXpkR0Z1WTJVdVhHNGdJQ292WEc0Z0lHZGxkRUZ3Y0ZOaGJtUmliM2dvS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQnlaWFIxY200Z1gzUm9hWE11WVhCd1UyRnVaR0p2ZUR0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlGUm9hWE1nWm5WdVkzUnBiMjRnY21WMGRYSnVjeUIwYUdVZ2RYTmxjaUJoYzNOdlkybGhkR1ZrSUhSdklIUm9aU0JvZVhCbGNuUjVJRlZTVEZ4dUlDQXFJRUJ3WVhKaGJTQWdJQ0I3VTNSeWFXNW5mU0FnSUNCb2VYQmxjblI1VlZKTUlDQWdJQ0FnYUhsd1pYSjBlU0JWVWt4Y2JpQWdLaUJBY21WMGRYSnVJQ0FnZTFOMGNtbHVaMzBnSUNBZ2RYTmxjbFZTVENBZ0lDQWdJQ0FnSUhWelpYSWdWVkpNWEc0Z0lDb3ZYRzRnSUdkbGRFaDVjR1Z5ZEhsUGQyNWxjaWhvZVhCbGNuUjVWVkpNS1NCN1hHNWNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJR3hsZENCMWMyVnlWVkpNTzF4dVhHNGdJQ0FnWm05eUlDaHNaWFFnYVc1a1pYZ2dhVzRnWDNSb2FYTXVhSGx3WlhKMGFXVnpUR2x6ZENrZ2UxeHVJQ0FnSUNBZ2JHVjBJR2g1Y0dWeWRIa2dQU0JmZEdocGN5NW9lWEJsY25ScFpYTk1hWE4wVzJsdVpHVjRYVHRjYmlBZ0lDQWdJR2xtSUNob2VYQmxjblI1TG1oNWNHVnlkSGxWVWt3Z1BUMDlJR2g1Y0dWeWRIbFZVa3dwSUh0Y2JpQWdJQ0FnSUNBZ2RYTmxjbFZTVENBOUlHaDVjR1Z5ZEhrdWRYTmxjaTUxYzJWeVZWSk1PMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnZFhObGNsVlNURHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUhKbGRIVnlibk1nZEdobElHaDVjR1Z5ZEhrZ1RtRnRaU0JtY205dElHRWdaMmwyWlc0Z2RYSnNMaUJVYUdseklIVnliQ0JqYjNWc1pDQmlaU0JtY205dElHRWdaR0YwWVU5aWFtVmpkQ0J2Y2lCb2VYQmxjblI1WEc0Z0lDb2dRSEJoY21GdElDQWdJSHRUZEhKcGJtZDlJQ0FnSUhWeWJDQWdJQ0FnSUdoNWNHVnlkSGtnYjNJZ1pHRjBZVTlpYW1WamRDQlZVa3hjYmlBZ0tpQkFjbVYwZFhKdUlDQWdlMU4wY21sdVozMGdJQ0FnYUhsd1pYSjBlVTVoYldVZ0lDQWdJR2g1Y0dWeWRIa2dUbUZ0WlZ4dUlDQXFMMXh1SUNCblpYUkllWEJsY25SNVRtRnRaU2gxY213cElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnYkdWMElHbHpTSGx3WlhKMGVWVlNUQ0E5SUdScGRtbGtaVlZTVENoMWNtd3BMblI1Y0dVZ1BUMDlJQ2RvZVhCbGNuUjVKenRjYmx4dUlDQWdJQzh2ZG1Gc2RXVWdkRzhnWW1VZ2NtVjBkWEp1WldRZ2FXNGdkR2hsSUdWdVpGeHVJQ0FnSUd4bGRDQm9lWEJsY25SNVRtRnRaVHRjYmx4dUlDQWdJQzh2YVdZZ2FYTWdibTkwSUdGdUlHaDVjR1Z5ZEhrc0lHTm9aV05ySUdsbUlHbHpJR0VnWkdGMFlVOWlhbVZqZENCaGJtUWdiMkowWVdsdUlHaHBjeUJ5WlhCdmNuUmxjbHh1SUNBZ0lHeGxkQ0JvZVhCbGNuUjVWVkpNSUQwZ0tHbHpTSGx3WlhKMGVWVlNUQ2tnUHlCb2VYQmxjblI1VlZKTUlEMGdkWEpzSURvZ1gzUm9hWE11WjJWMFVtVndiM0owWlhKVlVreFRlVzVqYUc5dWIzVnpLSFZ5YkNrN1hHNWNiaUFnSUNCbWIzSWdLR3hsZENCcGJtUmxlQ0JwYmlCZmRHaHBjeTVvZVhCbGNuUnBaWE5NYVhOMEtTQjdYRzRnSUNBZ0lDQnNaWFFnYUhsd1pYSjBlU0E5SUY5MGFHbHpMbWg1Y0dWeWRHbGxjMHhwYzNSYmFXNWtaWGhkTzF4dUlDQWdJQ0FnYVdZZ0tHaDVjR1Z5ZEhrdWFIbHdaWEowZVZWU1RDQTlQVDBnYUhsd1pYSjBlVlZTVENrZ2UxeHVJQ0FnSUNBZ0lDQm9lWEJsY25SNVRtRnRaU0E5SUdoNWNHVnlkSGt1YjJKcVpXTjBUbUZ0WlR0Y2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCb2VYQmxjblI1VG1GdFpUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJR1oxYm1OMGFXOXVJSFJ2SUhKbGRIVnliaUIwYUdVZ2NtVndiM0owWlhKVlVrd2dZWE56YjJOcFlYUmxaQ0IzYVhSb0lIUm9aU0JrWVhSaGIySnFaV04wSUZWU1RGeHVJQ0FxSUVCd1lYSmhiU0FnSUNCN1UzUnlhVzVuZlNBZ0lDQWdaR0YwWVU5aWFtVmpkRlZTVENBZ0lDQmtZWFJoVDJKcVpXTjBWVkpNWEc0Z0lDb2dRSEpsZEhWeWJpQWdJSHRUZEhKcGJtZDlJQ0FnSUNCeVpYQnZjblJsY2xWU1RDQWdJQ0FnSUhKbGNHOXlkR1Z5VlZKTVhHNGdJQ292WEc0Z0lHZGxkRkpsY0c5eWRHVnlWVkpNS0dSaGRHRlBZbXBsWTNSVlVrd3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ2JHVjBJR1JoZEdGUFltcGxZM1FnUFNCZmRHaHBjeTVrWVhSaFQySnFaV04wVEdsemRGdGtZWFJoVDJKcVpXTjBWVkpNWFR0Y2JseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmloeVpYTnZiSFpsTENCeVpXcGxZM1FwSUh0Y2JpQWdJQ0FnSUdsbUlDaGtZWFJoVDJKcVpXTjBLU0I3WEc0Z0lDQWdJQ0FnSUhKbGMyOXNkbVVvWkdGMFlVOWlhbVZqZEM1eVpYQnZjblJsY2lrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCeVpXcGxZM1FvSjA1dklISmxjRzl5ZEdWeUlIZGhjeUJtYjNWdVpDY3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nWm5WdVkzUnBiMjRnZEc4Z2NtVjBkWEp1SUhSb1pTQnlaWEJ2Y25SbGNsVlNUQ0JoYzNOdlkybGhkR1ZrSUhkcGRHZ2dkR2hsSUdSaGRHRnZZbXBsWTNRZ1ZWSk1MaUJ1YnlCd2NtOXRhWE5sSUhKbGRIVnlibVZrWEc0Z0lDb2dRSEJoY21GdElDQWdJSHRUZEhKcGJtZDlJQ0FnSUNCa1lYUmhUMkpxWldOMFZWSk1JQ0FnSUdSaGRHRlBZbXBsWTNSVlVreGNiaUFnS2lCQWNtVjBkWEp1SUNBZ2UxTjBjbWx1WjMwZ0lDQWdJSEpsY0c5eWRHVnlWVkpNSUNBZ0lDQWdjbVZ3YjNKMFpYSlZVa3hjYmlBZ0tpOWNiaUFnWjJWMFVtVndiM0owWlhKVlVreFRlVzVqYUc5dWIzVnpLR1JoZEdGUFltcGxZM1JWVWt3cElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnYkdWMElHUmhkR0ZQWW1wbFkzUWdQU0JmZEdocGN5NWtZWFJoVDJKcVpXTjBUR2x6ZEZ0a1lYUmhUMkpxWldOMFZWSk1YVHRjYmx4dUlDQWdJSEpsZEhWeWJpQW9aR0YwWVU5aWFtVmpkQ2tnUHlCa1lYUmhUMkpxWldOMExuSmxjRzl5ZEdWeUlEb2dkVzVrWldacGJtVmtPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nY21WMGRYSnVjeUIwYUdVZ2FIbHdaWEowZVNCVlVrd2dkR2hoZENCemRXSnpZM0pwWW1Wa0lIUm9aU0JrWVhSaFQySnFaV04wWEc0Z0lDb2dRSEJoY21GdElDQWdJSHRUZEhKcGJtZDlJQ0FnSUNCMWNtd2dJQ0FnSUNBZ0lDQWdJQ0IxY213Z1ptOXliV0YwWEc0Z0lDb2dRSEpsZEhWeWJpQWdJSHRUZEhKcGJtZDlJQ0FnSUVoNWNHVnlkSGtnVlZKTUlITjFZbk5qY21saVpXUWdkRzhnZEdobElGVlNURnh1SUNBcUwxeHVJQ0JuWlhSRVlYUmhUMkpxWldOMFUzVmljMk55YVdKbGNraDVjR1Z5ZEhrb2RYSnNLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTV6ZFdKelkzSnBZbVZrUkdGMFlVOWlhbVZqZEV4cGMzUmJkWEpzWFR0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlISmxaMmx6ZEdWeUlHRWdaR1Z6YVhKbFpDQmtZWFJoVDJKcVpXTjBJSFJ2SUhOMVluTmpjbWxpWlZ4dUlDQXFJRUJ3WVhKaGJTQWdJQ0I3VTNSeWFXNW5mU0FnSUNCa1lYUmhUMkpxWldOMFZWSk1JQ0FnSUNBZ1pHRjBZVTlpYW1WamRDQlZVa3hjYmlBZ0tpOWNiaUFnY21WbmFYTjBaWEpUZFdKelkzSnBZbVZrUkdGMFlVOWlhbVZqZENoa1lYUmhUMkpxWldOMFZWSk1MQ0JvZVhCbGNuUjVWVkpNS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQnBaaUFvWDNSb2FYTXVjM1ZpYzJOeWFXSmxaRVJoZEdGUFltcGxZM1JNYVhOMFcyUmhkR0ZQWW1wbFkzUlZVa3hkSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJRjkwYUdsekxuTjFZbk5qY21saVpXUkVZWFJoVDJKcVpXTjBUR2x6ZEZ0a1lYUmhUMkpxWldOMFZWSk1YU0E5SUdoNWNHVnlkSGxWVWt3N1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNvZ1JuVnVZM1JwYjI0Z2RHOGdjbVYwZFhKdUlIUm9aU0JzYVhOMElHOW1JSEJ5WlNCaGRYUm9iM0pwYzJWa0lIVnpaWEp6SUhKbFkyVnBkbVZrSUdsdUlIUm9aU0JqY21WaGRHbHZiaUJ2WmlCaElHUmhkR0VnYjJKcVpXTjBYRzRnSUNvZ1FIQmhjbUZ0SUNBZ0lIdFRkSEpwYm1kOUlDQWdJQ0FnSUNBZ0lDQWdaR0YwWVU5aWFtVmpkRlZTVENBZ0lDQmtZWFJoVDJKcVpXTjBWVkpNWEc0Z0lDb2dRSEpsZEhWeWJpQWdJSHRCY25KaGVUeFRkSEpwYm1jK2ZTQWdJQ0FnY0hKbFFYVjBhQ0FnSUNBZ0lDQWdJRXhwYzNRZ2IyWWdjSEpsSUdGMWRHaHZjbWx6WldRZ2RYTmxjbk5jYmlBZ0tpOWNiaUFnWjJWMFVISmxRWFYwYUZOMVluTmpjbWxpWlhKektHUmhkR0ZQWW1wbFkzUlZVa3dwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lHeGxkQ0JrWVhSaFQySnFaV04wSUQwZ1gzUm9hWE11WkdGMFlVOWlhbVZqZEV4cGMzUmJaR0YwWVU5aWFtVmpkRlZTVEYwN1hHNGdJQ0FnYkdWMElIQnlaVUYxZEdnZ1BTQmJYVHRjYmx4dUlDQWdJR2xtSUNoa1lYUmhUMkpxWldOMEtTQjdYRzRnSUNBZ0lDQndjbVZCZFhSb0lEMGdaR0YwWVU5aWFtVmpkQzV3Y21WQmRYUm9PMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnY0hKbFFYVjBhRHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUhObGJtUWdjbVZ4ZFdWemRITWdkRzhnZFc1eVpXZHBjM1JsY2lCaGJHd2dhSGx3WlhKMGFXVnpJSEpsWjJsemRHVnlaV1FnYVc0Z1pHOXRZV2x1SUhKbFoybHpkSEo1WEc0Z0lDb2dRSEpsZEhWeWJpQWdJSHRRY205dGFYTmxmU0FnSUNBZ2NtVjBkWEp1SUdFZ2NISnZiV2x6WlNCcFppQjBhR1VnY21WemRXeDBJRzltSUhWdWNtVm5hWE4wY21GMGFXOXVJR0ZzYkNCb2VYQmxjblJwWlhOY2JpQWdLaTljYmlBZ2RXNXlaV2RwYzNSbGNrRnNiRWg1Y0dWeWRHbGxjeWdwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdiR1YwSUhWdWNtVm5hWE4wWlhKU1pYTjFiSFJ6SUQwZ1cxMDdYRzVjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTeHlaV3BsWTNRcElIdGNibHh1SUNBZ0lDQWdabTl5SUNoc1pYUWdhVzVrWlhnZ2FXNGdYM1JvYVhNdWFIbHdaWEowYVdWelRHbHpkQ2tnZTF4dUlDQWdJQ0FnSUNCc1pYUWdhSGx3WlhKMGVTQTlJRjkwYUdsekxtaDVjR1Z5ZEdsbGMweHBjM1JiYVc1a1pYaGRPMXh1SUNBZ0lDQWdJQ0JzWlhRZ2NtVnpkV3gwSUQwZ1gzUm9hWE11ZFc1eVpXZHBjM1JsY2toNWNHVnlkSGxKYm5OMFlXNWpaU2hvZVhCbGNuUjVMblZ6WlhJdWRYTmxjbFZTVEN3Z2FIbHdaWEowZVM1b2VYQmxjblI1VlZKTUtUdGNiaUFnSUNBZ0lDQWdkVzV5WldkcGMzUmxjbEpsYzNWc2RITXVjSFZ6YUNoeVpYTjFiSFFwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCUWNtOXRhWE5sTG1Gc2JDaDFibkpsWjJsemRHVnlVbVZ6ZFd4MGN5a3VkR2hsYmlnb0tTQTlQaUI3WEc1Y2JpQWdJQ0FnSUNBZ2NtVnpiMngyWlNnbmMzVmpZMlZ6YzJaMWJHeDVJSFZ1Y21WbmFYTjBaWEpsWkNCaGJHd2dhSGx3WlhKMGFXVnpKeWs3WEc0Z0lDQWdJQ0I5TENCbGNuSnZjaUE5UGlCN0lISmxhbVZqZENobGNuSnZjaWs3ZlNrN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0tpQWdablZ1WTNScGIyNGdkRzhnZFc1eVpXZHBjM1JsY2lCaGJpQm9lWEJsY25SNVNXNXpkR0Z1WTJVZ2FXNGdkR2hsSUVSdmJXRnBiaUJTWldkcGMzUnllVnh1SUNBcUlDQkFjR0Z5WVcwZ0lDQjdVM1J5YVc1bmZTQWdJQ0FnSUhWelpYSWdJQ0FnSUNBZ0lIVnpaWElnZFhKc1hHNGdJQ29nSUVCd1lYSmhiU0FnSUh0VGRISnBibWQ5SUNBZ0lDQWdhSGx3WlhKMGVVbHVjM1JoYm1ObElDQWdTSGx3WlhKMGVVbHVjMjUwWVc1alpTQjFjbXhjYmlBZ0tseHVJQ0FxTDF4dUlDQjFibkpsWjJsemRHVnlTSGx3WlhKMGVVbHVjM1JoYm1ObEtIVnpaWElzSUdoNWNHVnlkSGxKYm5OMFlXNWpaU2tnZTF4dUlDQWdJQzh2VkU5RVR5QjNiM0pyYVc1bklHSjFkQ0IwYUdVZ2RYTmxjbHh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCc1pYUWdiV1Z6YzJGblpTQTlJSHNnZEhsd1pUb2dKMlJsYkdWMFpTY3NJR1p5YjIwNklGOTBhR2x6TG5KbFoybHpkSEo1VlZKTUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYnpvZ0oyUnZiV0ZwYmpvdkwzSmxaMmx6ZEhKNUxpY2dLeUJmZEdocGN5NWZaRzl0WVdsdUlDc2dKeThuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmliMlI1T2lCN0lIWmhiSFZsT2lCN2RYTmxjam9nZFhObGNpd2dhSGx3WlhKMGVWVlNURG9nYUhsd1pYSjBlVWx1YzNSaGJtTmxJSDE5ZlR0Y2JseHVJQ0FnSUY5MGFHbHpMbDl0WlhOellXZGxRblZ6TG5CdmMzUk5aWE56WVdkbEtHMWxjM05oWjJVc0lDaHlaWEJzZVNrZ1BUNGdlMXh1SUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjNWdWNtVm5hWE4wWlhJZ2FIbHdaWEowZVNCU1pYQnNlU2NzSUhKbGNHeDVLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUNCbWRXNWpkR2x2YmlCMGJ5QmtaV3hsZEdVZ1lXNGdaR0YwWVU5aWFtVmpkRWx1YzNSaGJtTmxJR2x1SUhSb1pTQkViMjFoYVc0Z1VtVm5hWE4wY25sY2JpQWdLaUFnUUhCaGNtRnRJQ0FnZTFOMGNtbHVaMzBnSUNBZ2JtRnRaU0FnSUNBZ0lFUmhkR0ZQWW1wbFkzUk9ZVzFsWEc0Z0lDb3ZYRzRnSUdSbGJHVjBaVVJoZEdGUFltcGxZM1JKYm5OMFlXNWpaU2h1WVcxbEtTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUd4bGRDQnRaWE56WVdkbElEMGdleUIwZVhCbE9pQW5aR1ZzWlhSbEp5d2dabkp2YlRvZ1gzUm9hWE11Y21WbmFYTjBjbmxWVWt3c1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ2T2lBblpHOXRZV2x1T2k4dmNtVm5hWE4wY25rdUp5QXJJRjkwYUdsekxsOWtiMjFoYVc0Z0t5QW5MeWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnZaSGs2SUhzZ2RtRnNkV1U2SUh0dVlXMWxPaUJ1WVcxbGZYMTlPMXh1WEc0Z0lDQWdYM1JvYVhNdVgyMWxjM05oWjJWQ2RYTXVjRzl6ZEUxbGMzTmhaMlVvYldWemMyRm5aU3dnS0hKbGNHeDVLU0E5UGlCN1hHNGdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25kVzV5WldkcGMzUmxjaUJrWVhSaFQySnFaV04wSUZKbGNHeDVKeXdnY21Wd2JIa3BPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nUm5WdVkzUnBiMjRnZEc4Z2RYQmtZWFJsSUdGdUlFaDVjR1Z5ZEhsY2JpQWdLaTljYmlBZ2RYQmtZWFJsU0hsd1pYSjBlVWx1YzNSaGJtTmxLSEpsYzI5MWNtTmxMQ0IyWVd4MVpTa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCc1pYUWdiV1Z6YzJGblpTQTlJSHNnZEhsd1pUb2dKMVZRUkVGVVJTY3NJR1p5YjIwNklGOTBhR2x6TG5KbFoybHpkSEo1VlZKTUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYnpvZ0oyUnZiV0ZwYmpvdkwzSmxaMmx6ZEhKNUxpY2dLeUJmZEdocGN5NWZaRzl0WVdsdUlDc2dKeThuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmliMlI1T2lCN0lISmxjMjkxY21ObE9pQnlaWE52ZFhKalpTd2dkbUZzZFdVNklIWmhiSFZsZlgwN1hHNWNiaUFnSUNCZmRHaHBjeTVmYldWemMyRm5aVUoxY3k1d2IzTjBMbkJ2YzNSTlpYTnpZV2RsS0cxbGMzTmhaMlVzSUNoeVpYQnNlU2tnUFQ0Z2UxeHVJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMVZ3WkdGMFpXUWdhSGx3WlhKMGVTQnlaWEJzZVNjc0lISmxjR3g1S1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlISmxaMmx6ZEdWeUlHRWdibVYzSUhOMVluTmpjbWxpWlhJZ2FXNGdkR2hsSUdSaGRHRlBZbXBsWTNRZ2NtVm5hWE4wWlhKbFpGeHVJQ0FxSUVCd1lYSmhiU0FnZTFOMGNtbHVaMzBnSUNCa1lYUmhUMkpxWldOMFZWSk1JQ0FnSUdSaGRHRlBZbXBsWTNRZ1ZWSk1YRzRnSUNvZ1FIQmhjbUZ0SUNCN1UzUnlhVzVuZlNBZ0lITjFZbk5qY21saVpYSlZVa3dnSUNBZ2MzVmljMk55YVdKbGNpQlZVa3hjYmlBZ0tpOWNiaUFnY21WbmFYTjBaWEpUZFdKelkzSnBZbVZ5S0dSaGRHRlBZbXBsWTNSVlVrd3NJSE4xWW5OamNtbGlaWEpWVWt3cElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJR3hsZENCa1lYUmhUMkpxWldOMElEMGdYM1JvYVhNdVpHRjBZVTlpYW1WamRFeHBjM1JiWkdGMFlVOWlhbVZqZEZWU1RGMDdYRzVjYmlBZ0lDQnBaaUFvWkdGMFlVOWlhbVZqZENrZ2UxeHVJQ0FnSUNBZ1pHRjBZVTlpYW1WamRDNXpkV0p6WTNKcFltVnljeTV3ZFhOb0tITjFZbk5qY21saVpYSlZVa3dwTzF4dUlDQWdJQ0FnWDNSb2FYTXVaR0YwWVU5aWFtVmpkRXhwYzNSYlpHRjBZVTlpYW1WamRGVlNURjBnUFNCa1lYUmhUMkpxWldOME8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlHZGxkQ0IwYUdVZ2MzVmljMk55YVdKbGNuTWdjbVZuYVhOMFpYSmxaQ0IzYVhSb2FXNGdZU0JrWVhSaFQySnFaV04wWEc0Z0lDb2dRSEJoY21GdElDQjdVM1J5YVc1bmZTQWdJQ0FnSUNBZ0lDQmtZWFJoVDJKcVpXTjBWVkpNSUNBZ0lHUmhkR0ZQWW1wbFkzUWdWVkpNWEc0Z0lDb2dRSEJoY21GdElDQjdRWEp5WVhrOFUzUnlhVzVuUG4wZ0lDQlRkV0p6ZEhKcFltVnljeUJNYVhOMFhHNGdJQ292WEc0Z0lHZGxkRVJoZEdGUFltcGxZM1JUZFdKelkzSnBZbVZ5Y3loa1lYUmhUMkpxWldOMFZWSk1LU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNiaUFnSUNCc1pYUWdaR0YwWVU5aWFtVmpkQ0E5SUY5MGFHbHpMbVJoZEdGUFltcGxZM1JNYVhOMFcyUmhkR0ZQWW1wbFkzUlZVa3hkTzF4dVhHNGdJQ0FnYVdZZ0tHUmhkR0ZQWW1wbFkzUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmtZWFJoVDJKcVpXTjBMbk4xWW5OamNtbGlaWEp6TzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlBblRtOGdaR0YwWVU5aWFtVmpkQ0IzWVhNZ1ptOTFibVFuTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUZSdklISmxaMmx6ZEdWeUlHRWdibVYzSUVSaGRHRWdUMkpxWldOMElHbHVJSFJvWlNCeWRXNTBhVzFsSUhkb2FXTm9JSEpsZEhWeWJuTWdkR2hsSUdSaGRHRlBZbXBsWTNSVlVrd2dZV3hzYjJOaGRHVmtJSFJ2SUhSb1pTQnVaWGNnUkdGMFlTQlBZbXBsWTNRdVhHNGdJQ29nUUhCaGNtRnRJQ0I3VTNSeWFXNW5mU0FnSUNBZ0lHbGtaVzUwYVdacFpYSWdJQ0FnSUNBZ0lDQWdJQ0JwWkdWdWRHbG1hV1Z5WEc0Z0lDb2dRSEJoY21GdElDQjdVM1J5YVc1bmZTQWdJQ0FnSUdSaGRHRlBZbXBsWTNSelkyaGxiV0VnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhUMkpxWldOMGMyTm9aVzFoWEc0Z0lDb2dRSEJoY21GdElDQjdVM1J5YVc1bmZTQWdJQ0FnSUdSaGRHRlBZbXBsWTNSVmNtd2dJQ0FnSUNBZ0lHUmhkR0ZQWW1wbFkzUlZjbXhjYmlBZ0tpQkFjbVYwZFhKdUlIdFRkSEpwYm1kOUlDQWdJQ0FnWkdGMFlVOWlhbVZqZEZKbGNHOXlkR1Z5SUNBZ0lDQWdJQ0FnWkdGMFlVOWlhbVZqZEZKbGNHOXlkR1Z5WEc0Z0lDb3ZYRzRnSUhKbFoybHpkR1Z5UkdGMFlVOWlhbVZqZENocFpHVnVkR2xtYVdWeUxDQmtZWFJoVDJKcVpXTjBjMk5vWlcxaExDQmtZWFJoVDJKcVpXTjBWWEpzTENCa1lYUmhUMkpxWldOMFVtVndiM0owWlhJc0lHRjFkR2h2Y21selpTa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1NCN1hHNWNiaUFnSUNBZ0lDOHZiV1Z6YzJGblpTQjBieUJ5WldkcGMzUmxjaUIwYUdVZ2JtVjNJR2g1Y0dWeWRIa3NJSGRwZEdocGJpQjBhR1VnWkc5dFlXbHVJSEpsWjJsemRISjVYRzRnSUNBZ0lDQnNaWFFnYldWemMyRm5aVlpoYkhWbElEMGdlMjVoYldVNklHbGtaVzUwYVdacFpYSXNJSE5qYUdWdFlUb2daR0YwWVU5aWFtVmpkSE5qYUdWdFlTd2dkWEpzT2lCa1lYUmhUMkpxWldOMFZYSnNMQ0JsZUhCcGNtVnpPaUJmZEdocGN5NWxlSEJwY21WelZHbHRaU3dnY21Wd2IzSjBaWEk2SUdSaGRHRlBZbXBsWTNSU1pYQnZjblJsY2l3Z2NISmxRWFYwYURvZ1lYVjBhRzl5YVhObExDQnpkV0p6WTNKcFltVnljem9nVzExOU8xeHVYRzRnSUNBZ0lDQmZkR2hwY3k1a1lYUmhUMkpxWldOMFRHbHpkRnRrWVhSaFQySnFaV04wVlhKc1hTQTlJRzFsYzNOaFoyVldZV3gxWlR0Y2JseHVJQ0FnSUNBZ2JHVjBJRzFsYzNOaFoyVWdQU0JmZEdocGN5NXRaWE56WVdkbFJtRmpkRzl5ZVM1amNtVmhkR1ZEY21WaGRHVk5aWE56WVdkbFVtVnhkV1Z6ZENoY2JpQWdJQ0FnSUNBZ1gzUm9hWE11Y21WbmFYTjBjbmxWVWt3c1hHNGdJQ0FnSUNBZ0lDZGtiMjFoYVc0Nkx5OXlaV2RwYzNSeWVTNG5JQ3NnWDNSb2FYTXVjbVZuYVhOMGNubEViMjFoYVc0Z0t5QW5MeWNzWEc0Z0lDQWdJQ0FnSUcxbGMzTmhaMlZXWVd4MVpTeGNiaUFnSUNBZ0lDQWdKM0J2YkdsamVTZGNiaUFnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJRjkwYUdsekxsOXRaWE56WVdkbFFuVnpMbkJ2YzNSTlpYTnpZV2RsS0cxbGMzTmhaMlVzSUNoeVpYQnNlU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduUFQwOVBpQnlaV2RwYzNSbGNrUmhkR0ZQWW1wbFkzUWdVbVZ3YkhrNklDY3NJSEpsY0d4NUtUdGNiaUFnSUNBZ0lDQWdhV1lnS0hKbGNHeDVMbUp2WkhrdVkyOWtaU0E5UFQwZ01qQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNnbmIyc25LVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvSjJWeWNtOXlJRzl1SUhKbFoybHpkR1Z5SUVSaGRHRlBZbXBsWTNRbktUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlGUnZJSEpsWjJsemRHVnlJR0VnYm1WM0lFaDVjR1Z5ZEhrZ2FXNGdkR2hsSUhKMWJuUnBiV1VnZDJocFkyZ2djbVYwZFhKdWN5QjBhR1VnU0hsd1pYSjBlVlZTVENCaGJHeHZZMkYwWldRZ2RHOGdkR2hsSUc1bGR5QkllWEJsY25SNUxseHVJQ0FxSUVCd1lYSmhiU0FnZTFOaGJtUmliM2g5SUNBZ0lDQWdJQ0FnSUNBZ0lITmhibVJpYjNnZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WVc1a1ltOTRYRzRnSUNvZ1FIQmhjbUZ0SUNCN1NIbHdaWEowZVVOaGRHRnNiMmQxWlZWU1RIMGdTSGx3WlhKMGVVTmhkR0ZzYjJkMVpWVlNUQ0FnSUdSbGMyTnlhWEIwYjNKY2JpQWdLaUJBY21WMGRYSnVJSHRJZVhCbGNuUjVWVkpNZlNBZ0lDQWdJQ0FnSUNCSWVYQmxjblI1VlZKTVhHNGdJQ292WEc0Z0lISmxaMmx6ZEdWeVNIbHdaWEowZVNoellXNWtZbTk0TENCa1pYTmpjbWx3ZEc5eVZWSk1MQ0JrWlhOamNtbHdkRzl5S1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJQzh2WVhOemRXMXBibWNnWkdWelkzSnBjSFJ2Y2lCamIyMWxJR2x1SUhSb2FYTWdabTl5YldGMExDQjBhR1VnYzJWeWRtbGpaUzF3Y205MmFXUmxjaTFrYjIxaGFXNGdkWEpzSUdseklISmxkSEpwWlhabFpDQmllU0JoSUhOd2JHbDBJR2x1YzNSeWRXTjBhVzl1WEc0Z0lDQWdMeTlvZVhCbGNuUjVMV05oZEdGc2IyZDFaVG92THp4elpYSjJhV05sTFhCeWIzWnBaR1Z5TFdSdmJXRnBiajR2UEdOaGRHRnNiMmQxWlMxdlltcGxZM1F0YVdSbGJuUnBabWxsY2o1Y2JpQWdJQ0JzWlhRZ1pHOXRZV2x1VlhKc0lEMGdaR2wyYVdSbFZWSk1LR1JsYzJOeWFYQjBiM0pWVWt3cExtUnZiV0ZwYmp0Y2JseHVJQ0FnSUdsbUlDaGtiMjFoYVc1VmNtd3VhVzVqYkhWa1pYTW9KMk5oZEdGc2IyZDFaU2NwS1NCN1hHNGdJQ0FnSUNCa2IyMWhhVzVWY213Z1BTQmtiMjFoYVc1VmNtd3VjbVZ3YkdGalpTZ25ZMkYwWVd4dlozVmxMaWNzSUNjbktUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1NCN1hHNWNiaUFnSUNBZ0lGOTBhR2x6TG1sa1RXOWtkV3hsTG1kbGRFbGtaVzUwYVhSNVFYTnpaWEowYVc5dUtDa3VkR2hsYmlobWRXNWpkR2x2YmloeVpYTjFiSFFwSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJSFZ6WlhKUWNtOW1hV3hsSUQwZ2NtVnpkV3gwTG5WelpYSlFjbTltYVd4bE8xeHVJQ0FnSUNBZ0lDQnNaWFFnYVdSbGJuUnBkSGxWVWt3Z1BTQjFjMlZ5VUhKdlptbHNaUzUxYzJWeVZWSk1PMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaGZkR2hwY3k1ZmJXVnpjMkZuWlVKMWN5QTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtDZE5aWE56WVdkbFFuVnpJRzV2ZENCbWIzVnVaQ0J2YmlCeVpXZHBjM1JsY2xOMGRXSW5LVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBdkwyTmhiR3dnWTJobFkyc2dhV1lnZEdobElIQnliM1J2YzNSMVlpQmxlR2x6ZEZ4dUlDQWdJQ0FnSUNBZ0lGOTBhR2x6TG5KbGMyOXNkbVVvSjJoNWNHVnlkSGt0Y25WdWRHbHRaVG92THljZ0t5QmtiMjFoYVc1VmNtd3BMblJvWlc0b1puVnVZM1JwYjI0b0tTQjdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TG5KbFoybHpkSEo1Ukc5dFlXbHVJRDBnWkc5dFlXbHVWWEpzTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCVVQwUlBPaUJ6YUc5MWJHUWdZbVVnYVcxd2JHVnRaVzUwWldRZ2QybDBhQ0JoWkdSeVpYTnpaWE1nY0c5c2JGeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1NXNGdkR2hwY3lCallYTmxJSGRsSUhkcGJHd2djbVZ4ZFdWemRDQmhibVFnY21WMGRYSnVJRzl1YkhrZ2IyNWxYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QmhaR1J5WlhOelhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JuVnRZbVZ5VDJaQlpHUnlaWE56WlhNZ1BTQXhPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11WVdSa2NtVnpjMEZzYkc5allYUnBiMjR1WTNKbFlYUmxLR1J2YldGcGJsVnliQ3dnYm5WdFltVnlUMlpCWkdSeVpYTnpaWE1wTG5Sb1pXNG9ablZ1WTNScGIyNG9ZV1JrWlhKbGMzTk1hWE4wS1NCN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1lXUmtaWEpsYzNOTWFYTjBMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9ZV1JrY21WemN5a2dlMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVYMjFsYzNOaFoyVkNkWE11WVdSa1RHbHpkR1Z1WlhJb1lXUmtjbVZ6Y3lBcklDY3ZjM1JoZEhWekp5d2dLRzF6WnlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0owMWxjM05oWjJVZ1lXUmtUR2x6ZEdWdVpYSWdabTl5SURvZ0p5d2dZV1JrY21WemN5QXJJQ2N2YzNSaGRIVnpJQzArSUNjZ0lDc2diWE5uS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2FIbHdaWEowZVNBOUlHNWxkeUJJZVhCbGNuUjVTVzV6ZEdGdVkyVW9YM1JvYVhNdWFXUmxiblJwWm1sbGNpd2dYM1JvYVhNdWNtVm5hWE4wY25sVlVrd3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxjMk55YVhCMGIzSlZVa3dzSUdSbGMyTnlhWEIwYjNJc0lHRmtaR1Z5WlhOelRHbHpkRnN3WFN3Z2RYTmxjbEJ5YjJacGJHVXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtaDVjR1Z5ZEdsbGMweHBjM1F1Y0hWemFDaG9lWEJsY25SNUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMMk5vWldOcklIZG9aWFJvWlhJZ2RHaGxJSEpsWTJWcGRtVmtJSE5oYm1KdmVDQmxJRUZ3Y0d4cFkyRjBhVzl1VTJGdVpHSnZlQ0J2Y2lCaElHNXZjbTFoYkNCellXNWtZbTk0WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoellXNWtZbTk0TG5SNWNHVWdQVDA5SUNkaGNIQW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVjMkZ1WkdKdmVHVnpUR2x6ZEM1aGNIQlRZVzVrWW05NFcyRmtaR1Z5WlhOelRHbHpkRnN3WFYwZ1BTQnpZVzVrWW05NE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tITmhibVJpYjNndWRIbHdaU0E5UFQwZ0oyNXZjbTFoYkNjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1ellXNWtZbTk0WlhOTWFYTjBMbk5oYm1SaWIzaGJZV1JrWlhKbGMzTk1hWE4wV3pCZFhTQTlJSE5oYm1SaWIzZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0NkWGNtOXVaeUJUWVc1a1ltOTRWSGx3WlNjcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSEpsYzI5MWNtTmxjenRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCamFHVmpheUJwWmlCMGFHVWdhSGx3WlhKMGVTQnlaWE52ZFhKalpYTWdhWE1nWVNCMlpXTjBiM0lnYjNJZ1lTQnpkSEpwYm1kY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ZFOUVUeUJrWld4bGRHVWdiR0YwWlhJZ2QyaGxiaUJqWVhSaGJHOW5kV1VnYVhNZ1ptbDRaV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUFvWkdWelkzSnBjSFJ2Y2k1b2VYQmxjblI1Vkhsd1pTa2dQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpiM1Z5WTJWeklEMGdXMTA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemIzVnlZMlZ6TG5CMWMyZ29aR1Z6WTNKcGNIUnZjaTVvZVhCbGNuUjVWSGx3WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemIzVnlZMlZ6SUQwZ1pHVnpZM0pwY0hSdmNpNW9lWEJsY25SNVZIbHdaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCa1pYTmpjbWx3ZEc5eVJHRjBZVk5qYUdWdFlTQTlJR1JsYzJOeWFYQjBiM0l1WkdGMFlVOWlhbVZqZEhNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmtZWFJoVTJOb1pXMWhjMEZ5Y21GNUlEMGdXMTA3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk5MGFHbHpJSGRwYkd3Z1kzSmxZWFJsSUdFZ1lYSnlZWGtnZDJsMGFDQmhJRkJ5YjIxcGMyVWdhVzRnWldGamFDQndiM05wZEdsdmJseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcGJtUmxlQ0JwYmlCa1pYTmpjbWx3ZEc5eVJHRjBZVk5qYUdWdFlTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JoZEdGVFkyaGxiV0Z6UVhKeVlYa3VjSFZ6YUNoZmRHaHBjeTV5ZFc1MGFXMWxRMkYwWVd4dlozVmxMbWRsZEVSaGRHRlRZMmhsYldGRVpYTmpjbWx3ZEc5eUtHUmxjMk55YVhCMGIzSkVZWFJoVTJOb1pXMWhXMmx1WkdWNFhTa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnWVhNZ2MyOXZiaUJoY3lCMGFHVWdjSEpsZG1sdmRYTWdZWEp5WVhrZ2FYTWdZMjl0Y0d4bGRHVmtMQ0IwYUdseklIZHBiR3dnZDJGcGRDQm1iM0lnZEdobElISmxjMjlzZG1VZ2IyWWdZV3hzSUhCeWIyMXBjMlZ6SUdsdUlIUm9aU0JoY25KaGVWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCUWNtOXRhWE5sTG1Gc2JDaGtZWFJoVTJOb1pXMWhjMEZ5Y21GNUtTNTBhR1Z1S0daMWJtTjBhVzl1S0dSaGRHRlRZMmhsYldGektTQjdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ptbHNkR1Z5WldSRVlYUmhVMk5vWlcxaGN5QTlJRnRkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdsdVpHVjRJR2x1SUdSaGRHRlRZMmhsYldGektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1pHRjBZVk5qYUdWdFlTQTlJR1JoZEdGVFkyaGxiV0Z6VzJsdVpHVjRYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGJIUmxjbVZrUkdGMFlWTmphR1Z0WVhNdWNIVnphQ2hrWVhSaFUyTm9aVzFoTG5OdmRYSmpaVkJoWTJ0aFoyVXVjMjkxY21ObFEyOWtaUzV3Y205d1pYSjBhV1Z6TG5OamFHVnRaUzVqYjI1emRHRnVkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OXRaWE56WVdkbElIUnZJSEpsWjJsemRHVnlJSFJvWlNCdVpYY2dhSGx3WlhKMGVTd2dkMmwwYUdsdUlIUm9aU0JrYjIxaGFXNGdjbVZuYVhOMGNubGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYldWemMyRm5aVlpoYkhWbElEMGdlM1Z6WlhJNklHbGtaVzUwYVhSNVZWSk1MQ0FnYUhsd1pYSjBlVVJsYzJOeWFYQjBiM0pWVWt3NklHUmxjMk55YVhCMGIzSlZVa3dzSUdoNWNHVnlkSGxWVWt3NklHRmtaR1Z5WlhOelRHbHpkRnN3WFN3Z1pYaHdhWEpsY3pvZ1gzUm9hWE11Wlhod2FYSmxjMVJwYldVc0lISmxjMjkxY21ObGN6b2djbVZ6YjNWeVkyVnpMQ0JrWVhSaFUyTm9aVzFsY3pvZ1ptbHNkR1Z5WldSRVlYUmhVMk5vWlcxaGMzMDdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JXVnpjMkZuWlNBOUlGOTBhR2x6TG0xbGMzTmhaMlZHWVdOMGIzSjVMbU55WldGMFpVTnlaV0YwWlUxbGMzTmhaMlZTWlhGMVpYTjBLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVjbVZuYVhOMGNubFZVa3dzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblpHOXRZV2x1T2k4dmNtVm5hWE4wY25rdUp5QXJJRjkwYUdsekxuSmxaMmx6ZEhKNVJHOXRZV2x1SUNzZ0p5OG5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aVlpoYkhWbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKM0J2YkdsamVTZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVYMjFsYzNOaFoyVkNkWE11Y0c5emRFMWxjM05oWjJVb2JXVnpjMkZuWlN3Z0tISmxjR3g1S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblBUMDlQaUJTWldkcGMzUmxja2g1Y0dWeWRIa2dVbVZ3YkhrNklDY3NJSEpsY0d4NUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISmxjR3g1TG1KdlpIa3VZMjlrWlNBOVBUMGdNakF3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9ZV1JrWlhKbGMzTk1hWE4wV3pCZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2duUm1GcGJHVmtJSFJ2SUhKbFoybHpkR1Z5SUdGdUlFaDVjR1Z5ZEhrbktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZkR2x0WlhJZ2RHOGdhMlZsY0NCMGFHVWdjbVZuYVhOMGNtRjBhVzl1SUdGc2FYWmxYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnZEdobElIUnBiV1VnYVhNZ1pHVm1hVzVsWkNCaWVTQmhJR3hwZEhSc1pTQnNaWE56SUhSb1lXNGdhR0ZzWmlCdlppQjBhR1VnWlhod2FYSmxjeUIwYVcxbElHUmxabWx1WldSY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhMlZsY0VGc2FYWmxWR2x0WlhJZ1BTQnpaWFJKYm5SbGNuWmhiQ2htZFc1amRHbHZiaWdwSUh0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUcxbGMzTmhaMlVnUFNCZmRHaHBjeTV0WlhOellXZGxSbUZqZEc5eWVTNWpjbVZoZEdWRGNtVmhkR1ZOWlhOellXZGxVbVZ4ZFdWemRDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVjbVZuYVhOMGNubFZVa3dzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZGtiMjFoYVc0Nkx5OXlaV2RwYzNSeWVTNG5JQ3NnWDNSb2FYTXVjbVZuYVhOMGNubEViMjFoYVc0Z0t5QW5MeWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWxjM05oWjJWV1lXeDFaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0ozQnZiR2xqZVNkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbDl0WlhOellXZGxRblZ6TG5CdmMzUk5aWE56WVdkbEtHMWxjM05oWjJVc0lDaHlaWEJzZVNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25QVDA5UGlCTFpXVndRV3hwZG1VZ1VtVndiSGs2SUNjc0lISmxjR3g1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzS0Nnb1gzUm9hWE11Wlhod2FYSmxjMVJwYldVZ0x5QXhMakVwSUM4Z01pa2dLaUF4TURBd0tTazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblNIbHdaWEowZVNCVFkyaGxiV0Z6Snl3Z1ptbHNkR1Z5WldSRVlYUmhVMk5vWlcxaGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjBoNWNHVnlkSGtnY21WemIzVnlZMlZ6Snl3Z2NtVnpiM1Z5WTJWektUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdmU2t1WTJGMFkyZ29ablZ1WTNScGIyNG9jbVZoYzI5dUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RCWkdSeVpYTnpJRkpsWVhOdmJqb2dKeXdnY21WaGMyOXVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtISmxZWE52YmlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlN3Z1puVnVZM1JwYjI0b1pYSnlLU0I3WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2duUm1GcGJHVmtJSFJ2SUc5aWRHRnBiaUJoYmlCcFpHVnVkR2wwZVNjcE8xeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZTazdYRzVjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUZSdklIVnVjbVZuYVhOMFpYSWdZU0J3Y21WMmFXOTFjMng1SUhKbFoybHpkR1Z5WldRZ1NIbHdaWEowZVZ4dUlDQXFJRUJ3WVhKaGJTQWdlMGg1Y0dWeWRIbFZVa3g5SUNBZ0lDQWdJQ0FnSUVoNWNHVnlkSGxWVWt3Z2RYSnNJQ0FnSUNBZ0lDQjFjbXhjYmlBZ0tpOWNiaUFnZFc1eVpXZHBjM1JsY2toNWNHVnlkSGtvZFhKc0tTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmloeVpYTnZiSFpsTEhKbGFtVmpkQ2tnZTF4dVhHNGdJQ0FnSUNCc1pYUWdabTkxYm1RZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUd4bGRDQnBibVJsZUNBOUlEQTdYRzVjYmlBZ0lDQWdJR1p2Y2x4MEtHbHVaR1Y0SUQwZ01Ec2dhVzVrWlhnZ1BDQmZkR2hwY3k1b2VYQmxjblJwWlhOTWFYTjBMbXhsYm1kMGFEc2dhVzVrWlhnckt5a2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2FIbHdaWEowZVNBOUlGOTBhR2x6TG1oNWNHVnlkR2xsYzB4cGMzUmJhVzVrWlhoZE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYUhsd1pYSjBlU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHaDVjR1Z5ZEhrdWFIbHdaWEowZVZWU1RDQTlQVDBnZFhKc0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzVnVaQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdhV1lnS0dadmRXNWtJRDA5UFNCbVlXeHpaU2tnZTF4dUlDQWdJQ0FnSUNCeVpXcGxZM1FvSjBoNWNHVnlkSGtnYm05MElHWnZkVzVrSnlrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCa1pXeGxkR1VnWDNSb2FYTXVhSGx3WlhKMGFXVnpUR2x6ZEZ0cGJtUmxlRjA3WEc0Z0lDQWdJQ0FnSUhKbGMyOXNkbVVvSjBoNWNHVnlkSGtnYzNWalkyVnpjMloxYkd4NUlHUmxiR1YwWldRbktUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNibHh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nVkc4Z1pHbHpZMjkyWlhJZ2NISnZkRzlqYjJ3Z2MzUjFZbk1nWVhaaGFXeGhZbXhsSUdsdUlIUm9aU0J5ZFc1MGFXMWxJR1p2Y2lCaElHTmxjblJoYVc0Z1pHOXRZV2x1TGlCSlppQmhkbUZwYkdGaWJHVXNJR2wwSUhKbGRIVnlibk1nZEdobElISjFiblJwYldVZ2RYSnNJR1p2Y2lCMGFHVWdjSEp2ZEc5amIyd2djM1IxWWlCMGFHRjBJR052Ym01bFkzUnpJSFJ2SUhSb1pTQnlaWEYxWlhOMFpXUWdaRzl0WVdsdUxpQlNaWEYxYVhKbFpDQmllU0IwYUdVZ2NuVnVkR2x0WlNCQ1ZWTWdkRzhnY205MWRHVWdiV1Z6YzJGblpYTWdkRzhnY21WdGIzUmxJSE5sY25abGNuTWdiM0lnY0dWbGNuTWdLR1J2SUhkbElHNWxaV1FnYzI5dFpYUm9hVzVuSUhOcGJXbHNZWElnWm05eUlFaDVjR1Z5ZEdsbGN6OHBMbHh1SUNBcUlFQndZWEpoYlNBZ2UwUnZiV0ZwYmxWU1RIMGdJQ0FnSUNBZ0lDQWdJRVJ2YldGcGJsVlNUQ0FnSUNBZ0lDQWdJQ0FnSUhWeWJGeHVJQ0FxSUVCeVpYUjFjbTRnZTFKMWJuUnBiV1ZWVWt4OUlDQWdJQ0FnSUNBZ0lDQlNkVzUwYVcxbFZWSk1YRzRnSUNvdlhHNGdJR1JwYzJOdmRtVnlVSEp2ZEc5emRIVmlLSFZ5YkNrZ2UxeHVJQ0FnSUdsbUlDZ2hkWEpzS1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjFCaGNtRnRaWFJsY2lCMWNtd2dibVZsWkdWa0p5azdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmloeVpYTnZiSFpsTEhKbGFtVmpkQ2tnZTF4dVhHNGdJQ0FnSUNCc1pYUWdjbVZ4ZFdWemRDQTlJRjkwYUdsekxuQnliM1J2YzNSMVluTk1hWE4wVzNWeWJGMDdYRzVjYmlBZ0lDQWdJR2xtSUNoeVpYRjFaWE4wSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnY21WcVpXTjBLQ2R5WlhGMVpYTjBWWEJrWVhSbElHTnZkV3hrYmx4Y0ozUWdaMlYwSUhSb1pTQlFjbTkwYjNOMGRXSlZVa3duS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhKbGMyOXNkbVVvY21WeGRXVnpkQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc1Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlVieUJ5WldkcGMzUmxjaUJoSUc1bGR5QlFjbTkwYjJOdmJDQlRkSFZpSUdsdUlIUm9aU0J5ZFc1MGFXMWxJR2x1WTJ4MVpHbHVaeUJoY3lCcGJuQjFkQ0J3WVhKaGJXVjBaWEp6SUhSb1pTQm1kVzVqZEdsdmJpQjBieUJ3YjNOMFRXVnpjMkZuWlN3Z2RHaGxJRVJ2YldGcGJsVlNUQ0IwYUdGMElHbHpJR052Ym01bFkzUmxaQ0IzYVhSb0lIUm9aU0J6ZEhWaUxDQjNhR2xqYUNCeVpYUjFjbTV6SUhSb1pTQlNkVzUwYVcxbFZWSk1JR0ZzYkc5allYUmxaQ0IwYnlCMGFHVWdibVYzSUZCeWIzUnZZMjlzVTNSMVlpNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0VFlXNWtZbTk0ZlNBZ0lDQWdJQ0FnVTJGdVpHSnZlRnh1SUNBZ0tpQkFjR0Z5WVcwZ0lIdEViMjFoYVc1VlVreDlJQ0FnSUNCRWIyMWhhVzVWVWt3Z2MyVnlkbWxqWlNCd2NtOTJhV1JsY2lCa2IyMWhhVzVjYmlBZ0lDb2dRSEpsZEhWeWJpQjdVblZ1ZEdsdFpWQnliM1J2VTNSMVlsVlNUSDFjYmlBZ0lDb3ZYRzRnSUhKbFoybHpkR1Z5VTNSMVlpaHpZVzVrWW05NExDQmtiMjFoYVc1VlVrd3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUd4bGRDQnlkVzUwYVcxbFVISnZkRzlUZEhWaVZWSk1PMXh1WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXNjbVZxWldOMEtTQjdYRzVjYmlBZ0lDQWdJQzh2WTJobFkyc2dhV1lnYldWemMyRm5aVUoxY3lCcGN5QnlaV2RwYzNSbGNtVmtJR2x1SUhKbFoybHpkSEo1SUc5eUlHNXZkRnh1SUNBZ0lDQWdhV1lnS0Y5MGFHbHpMbDl0WlhOellXZGxRblZ6SUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnY21WcVpXTjBLQ2ROWlhOellXZGxRblZ6SUc1dmRDQm1iM1Z1WkNCdmJpQnlaV2RwYzNSbGNsTjBkV0luS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0x5OVVUMFJQSUdsdGNHeGxiV1Z1ZENCaElIVnVhWEYxWlNCdWRXMWlaWElnWm05eUlIUm9aU0J3Y205MGIzTjBkV0pWVWt4Y2JpQWdJQ0FnSUdsbUlDZ2haRzl0WVdsdVZWSk1MbWx1WkdWNFQyWW9KMjF6WnkxdWIyUmxMaWNwS1NCN1hHNGdJQ0FnSUNBZ0lHUnZiV0ZwYmxWU1RDQTlJR1J2YldGcGJsVlNUQzV6ZFdKemRISnBibWNvWkc5dFlXbHVWVkpNTG1sdVpHVjRUMllvSnk0bktTQXJJREVwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCeWRXNTBhVzFsVUhKdmRHOVRkSFZpVlZKTUlEMGdKMjF6WnkxdWIyUmxMaWNnS3lCa2IyMWhhVzVWVWt3Z0t5QW5MM0J5YjNSdmMzUjFZaThuSUNzZ1RXRjBhQzVtYkc5dmNpZ29UV0YwYUM1eVlXNWtiMjBvS1NBcUlERXdNREF3S1NBcklERXBPMXh1WEc0Z0lDQWdJQ0F2THlCVVQwUlBPaUJQY0hScGJXbDZaU0IwYUdselhHNGdJQ0FnSUNCZmRHaHBjeTV3Y205MGIzTjBkV0p6VEdsemRGdGtiMjFoYVc1VlVreGRJRDBnY25WdWRHbHRaVkJ5YjNSdlUzUjFZbFZTVER0Y2JpQWdJQ0FnSUY5MGFHbHpMbk5oYm1SaWIzaGxjMHhwYzNRdWMyRnVaR0p2ZUZ0eWRXNTBhVzFsVUhKdmRHOVRkSFZpVlZKTVhTQTlJSE5oYm1SaWIzZzdYRzVjYmlBZ0lDQWdJQzh2SUhOaGJtUmliM2d1WVdSa1RHbHpkR1Z1WlhJb0p5b25MQ0JtZFc1amRHbHZiaWh0YzJjcElIdGNiaUFnSUNBZ0lDOHZJQ0FnWDNSb2FYTXVYMjFsYzNOaFoyVkNkWE11Y0c5emRFMWxjM05oWjJVb2JYTm5LVHRjYmlBZ0lDQWdJQzh2SUgwcE8xeHVYRzRnSUNBZ0lDQnlaWE52YkhabEtISjFiblJwYldWUWNtOTBiMU4wZFdKVlVrd3BPMXh1WEc0Z0lDQWdJQ0JmZEdocGN5NWZiV1Z6YzJGblpVSjFjeTVoWkdSTWFYTjBaVzVsY2loeWRXNTBhVzFsVUhKdmRHOVRkSFZpVlZKTUlDc2dKeTl6ZEdGMGRYTW5MQ0FvYlhObktTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdsbUlDaHRjMmN1Y21WemIzVnlZMlVnUFQwOUlHMXpaeTUwYnlBcklDY3ZjM1JoZEhWekp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZFNkVzUwYVcxbFVISnZkRzl6ZEhWaVZWSk1MM04wWVhSMWN5QnRaWE56WVdkbE9pQW5MQ0J0YzJjdVltOWtlUzUyWVd4MVpTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDBwTzF4dVhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0tpQlVieUIxYm5KbFoybHpkR1Z5SUdFZ2NISmxkbWx2ZFhOc2VTQnlaV2RwYzNSbGNtVmtJSEJ5YjNSdlkyOXNJSE4wZFdKY2JpQWdLaUJBY0dGeVlXMGdJSHRJZVhCbGNuUjVVblZ1ZEdsdFpWVlNUSDBnSUNCSWVYQmxjblI1VW5WdWRHbHRaVlZTVENBZ0lDQWdhSGx3WlhKMGVWSjFiblJwYldWVlVreGNiaUFnS2k5Y2JpQWdkVzV5WldkcGMzUmxjbE4wZFdJb2FIbHdaWEowZVZKMWJuUnBiV1ZWVWt3cElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJR3hsZENCeWRXNTBhVzFsVUhKdmRHOVRkSFZpVlZKTU8xeHVYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc2NtVnFaV04wS1NCN1hHNWNiaUFnSUNBZ0lHeGxkQ0JrWVhSaElEMGdYM1JvYVhNdWNISnZkRzl6ZEhWaWMweHBjM1JiYUhsd1pYSjBlVkoxYm5ScGJXVlZVa3hkTzF4dVhHNGdJQ0FnSUNCcFppQW9aR0YwWVNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2duUlhKeWIzSWdiMjRnZFc1eVpXZHBjM1JsY2xOMGRXSTZJRWg1Y0dWeWRIa2dibTkwSUdadmRXNWtKeWs3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0JrWld4bGRHVWdYM1JvYVhNdWNISnZkRzl6ZEhWaWMweHBjM1JiYUhsd1pYSjBlVkoxYm5ScGJXVlZVa3hkTzF4dUlDQWdJQ0FnSUNCeVpYTnZiSFpsS0NkUWNtOTBiM04wZFdKVlVrd2djbVZ0YjNabFpDY3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZSdklISmxaMmx6ZEdWeUlHRWdibVYzSUVsa1pXNTBhWFI1SUZCeWIzWnBaR1Z5SUhCeWIzaDVJR2x1SUhSb1pTQnlkVzUwYVcxbElHbHVZMngxWkdsdVp5QmhjeUJwYm5CMWRDQndZWEpoYldWMFpYSnpJSFJvWlNCbWRXNWpkR2x2YmlCMGJ5QndiM04wVFdWemMyRm5aU3dnZEdobElFUnZiV0ZwYmxWU1RDQjBhR0YwSUdseklHTnZibTVsWTNSbFpDQjNhWFJvSUhSb1pTQnpkSFZpTENCM2FHbGphQ0J5WlhSMWNtNXpJSFJvWlNCU2RXNTBhVzFsVlZKTUlHRnNiRzlqWVhSbFpDQjBieUIwYUdVZ2JtVjNJRkJ5YjNSdlkyOXNVM1IxWWk1Y2JpQWdJQ29nUUhCaGNtRnRJSHRUWVc1a1ltOTRmU0FnSUNBZ0lDQWdVMkZ1WkdKdmVGeHVJQ0FnS2lCQWNHRnlZVzBnSUh0RWIyMWhhVzVWVWt4OUlDQWdJQ0JFYjIxaGFXNVZVa3dnYzJWeWRtbGpaU0J3Y205MmFXUmxjaUJrYjIxaGFXNWNiaUFnSUNvZ1FISmxkSFZ5YmlCN1VuVnVkR2x0WlVsa2NGQnliM2g1VlZKTWZWeHVJQ0FnS2k5Y2JpQWdjbVZuYVhOMFpYSkpaSEJRY205NGVTaHpZVzVrWW05NExDQmtiMjFoYVc1VlVrd3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUd4bGRDQnBaSEJRY205NGVWTjBkV0pWVWt3N1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN4eVpXcGxZM1FwSUh0Y2JseHVJQ0FnSUNBZ0x5OWphR1ZqYXlCcFppQnRaWE56WVdkbFFuVnpJR2x6SUhKbFoybHpkR1Z5WldRZ2FXNGdjbVZuYVhOMGNua2diM0lnYm05MFhHNGdJQ0FnSUNCcFppQW9YM1JvYVhNdVgyMWxjM05oWjJWQ2RYTWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQnlaV3BsWTNRb0owMWxjM05oWjJWQ2RYTWdibTkwSUdadmRXNWtJRzl1SUhKbFoybHpkR1Z5VTNSMVlpY3BPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWkhCUWNtOTRlVk4wZFdKVlVrd2dQU0FuWkc5dFlXbHVMV2xrY0Rvdkx5Y2dLeUJrYjIxaGFXNVZVa3dnS3lBbkwzTjBkV0l2SnlBcklFMWhkR2d1Wm14dmIzSW9LRTFoZEdndWNtRnVaRzl0S0NrZ0tpQXhNREF3TUNrZ0t5QXhLVHRjYmx4dUlDQWdJQ0FnTHk4Z1ZFOUVUem9nVDNCMGFXMXBlbVVnZEdocGMxeHVJQ0FnSUNBZ1gzUm9hWE11YVdSd1VISnZlSGxNYVhOMFcyUnZiV0ZwYmxWU1RGMGdQU0JwWkhCUWNtOTRlVk4wZFdKVlVrdzdYRzRnSUNBZ0lDQmZkR2hwY3k1ellXNWtZbTk0WlhOTWFYTjBMbk5oYm1SaWIzaGJhV1J3VUhKdmVIbFRkSFZpVlZKTVhTQTlJSE5oYm1SaWIzZzdYRzVjYmlBZ0lDQWdJQzh2SUhOaGJtUmliM2d1WVdSa1RHbHpkR1Z1WlhJb0p5b25MQ0JtZFc1amRHbHZiaWh0YzJjcElIdGNiaUFnSUNBZ0lDOHZJQ0FnWDNSb2FYTXVYMjFsYzNOaFoyVkNkWE11Y0c5emRFMWxjM05oWjJVb2JYTm5LVHRjYmlBZ0lDQWdJQzh2SUgwcE8xeHVYRzRnSUNBZ0lDQnlaWE52YkhabEtHbGtjRkJ5YjNoNVUzUjFZbFZTVENrN1hHNWNiaUFnSUNBZ0lGOTBhR2x6TGw5dFpYTnpZV2RsUW5WekxtRmtaRXhwYzNSbGJtVnlLR2xrY0ZCeWIzaDVVM1IxWWxWU1RDQXJJQ2N2YzNSaGRIVnpKeXdnS0cxelp5a2dQVDRnZTF4dUlDQWdJQ0FnSUNCcFppQW9iWE5uTG5KbGMyOTFjbU5sSUQwOVBTQnRjMmN1ZEc4Z0t5QW5MM04wWVhSMWN5Y3BJSHRjYmlBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25hV1J3VUhKdmVIbFRkSFZpVlZKTUwzTjBZWFIxY3lCdFpYTnpZV2RsT2lBbkxDQnRjMmN1WW05a2VTNTJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nVkc4Z1pHbHpZMjkyWlhJZ2FXUndVSEp2ZUhrZ2MzUjFZbk1nWVhaaGFXeGhZbXhsSUdsdUlIUm9aU0J5ZFc1MGFXMWxJR1p2Y2lCaElHTmxjblJoYVc0Z1pHOXRZV2x1TGlCSlppQmhkbUZwYkdGaWJHVXNJR2wwSUhKbGRIVnlibk1nZEdobElISjFiblJwYldVZ2RYSnNJR1p2Y2lCMGFHVWdhV1J3VUhKdmVIa2djM1IxWWlCMGFHRjBJR052Ym01bFkzUnpJSFJ2SUhSb1pTQnlaWEYxWlhOMFpXUWdaRzl0WVdsdUxpQlNaWEYxYVhKbFpDQmllU0IwYUdVZ2NuVnVkR2x0WlNCQ1ZWTWdkRzhnY205MWRHVWdiV1Z6YzJGblpYTWdkRzhnY21WdGIzUmxJSE5sY25abGNuTWdiM0lnY0dWbGNuTmNiaUFnS2lCQWNHRnlZVzBnSUh0RWIyMWhhVzVWVWt4OUlDQWdJQ0FnSUNBZ0lDQkViMjFoYVc1VlVrd2dJQ0FnSUNBZ0lDQWdJQ0IxY214Y2JpQWdLaUJBY21WMGRYSnVJSHRTZFc1MGFXMWxWVkpNZlNBZ0lDQWdJQ0FnSUNBZ1VuVnVkR2x0WlZWU1RDQWdJQ0FnSUNBZ0lHbGtjRkJ5YjNoNVZYSnNYRzRnSUNvdlhHNGdJR1JwYzJOdmRtVnlTV1J3VUhKdmVIa29kWEpzS1NCN1hHNGdJQ0FnYVdZZ0tDRjFjbXdwSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduVUdGeVlXMWxkR1Z5SUhWeWJDQnVaV1ZrWldRbktUdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzY21WcVpXTjBLU0I3WEc1Y2JpQWdJQ0FnSUd4bGRDQnlaWEYxWlhOMElEMGdYM1JvYVhNdWFXUndVSEp2ZUhsTWFYTjBXM1Z5YkYwN1hHNWNiaUFnSUNBZ0lHbG1JQ2h5WlhGMVpYTjBJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdjbVZxWldOMEtDZHlaWEYxWlhOMFZYQmtZWFJsSUdOdmRXeGtibHhjSjNRZ1oyVjBJSFJvWlNCcFpIQlFjbTk0ZVZWU1RDY3BPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHlaWEYxWlhOMEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNibHh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nVkc4Z2NtVm5hWE4wWlhJZ1lTQnVaWGNnVUc5c2FXTjVJRVZ1Wm05eVkyVnlJR2x1SUhSb1pTQnlkVzUwYVcxbElHbHVZMngxWkdsdVp5QmhjeUJwYm5CMWRDQndZWEpoYldWMFpYSnpJSFJvWlNCbWRXNWpkR2x2YmlCMGJ5QndiM04wVFdWemMyRm5aU3dnZEdobElFaDVjR1Z5ZEhsVlVrd2dZWE56YjJOcFlYUmxaQ0IzYVhSb0lIUm9aU0JRUlZBc0lIZG9hV05vSUhKbGRIVnlibk1nZEdobElGSjFiblJwYldWVlVrd2dZV3hzYjJOaGRHVmtJSFJ2SUhSb1pTQnVaWGNnVUc5c2FXTjVJRVZ1Wm05eVkyVnlJR052YlhCdmJtVnVkQzVjYmlBZ0tpQkFjR0Z5WVcwZ0lIdE5aWE56WVdkbExrMWxjM05oWjJWOUlIQnZjM1JOWlhOellXZGxJSEJ2YzNSTlpYTnpZV2RsWEc0Z0lDb2dRSEJoY21GdElDQjdTSGx3WlhKMGVWVlNUSDBnSUNBZ0lDQWdJQ0FnU0hsd1pYSjBlVlZTVENBZ0lDQWdJQ0FnSUNBZ0lHaDVjR1Z5ZEhsY2JpQWdLaUJBY21WMGRYSnVJSHRJZVhCbGNuUjVVblZ1ZEdsdFpWVlNUSDBnSUNCSWVYQmxjblI1VW5WdWRHbHRaVlZTVEZ4dUlDQXFMMXh1SUNCeVpXZHBjM1JsY2xCRlVDaHdiM04wVFdWemMyRm5aU3dnYUhsd1pYSjBlU2tnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTeHlaV3BsWTNRcElIdGNiaUFnSUNBZ0lDOHZWRTlFVHlCamFHVmpheUIzYUdGMElIQmhjbUZ0WlhSbGNpQnBiaUIwYUdVZ2NHOXpkRTFsYzNOaFoyVWdkR2hsSUhCbGNDQnBjeTVjYmlBZ0lDQWdJRjkwYUdsekxuQmxjRXhwYzNSYmFIbHdaWEowZVYwZ1BTQndiM04wVFdWemMyRm5aVHRjYmlBZ0lDQWdJSEpsYzI5c2RtVW9KMUJGVUNCeVpXZHBjM1JsY21Wa0lIZHBkR2dnYzNWalkyVnpjeWNwTzF4dUlDQWdJSDBwTzF4dVhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0tpQlVieUIxYm5KbFoybHpkR1Z5SUdFZ2NISmxkbWx2ZFhOc2VTQnlaV2RwYzNSbGNtVmtJSEJ5YjNSdlkyOXNJSE4wZFdKY2JpQWdLaUJBY0dGeVlXMGdJSHRJZVhCbGNuUjVVblZ1ZEdsdFpWVlNUSDBnSUNCSWVYQmxjblI1VW5WdWRHbHRaVlZTVENBZ0lDQWdTSGx3WlhKMGVWSjFiblJwYldWVlVreGNiaUFnS2k5Y2JpQWdkVzV5WldkcGMzUmxjbEJGVUNoSWVYQmxjblI1VW5WdWRHbHRaVlZTVENrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU3h5WldwbFkzUXBJSHRjYmx4dUlDQWdJQ0FnYkdWMElISmxjM1ZzZENBOUlGOTBhR2x6TG5CbGNFeHBjM1JiU0hsd1pYSjBlVkoxYm5ScGJXVlZVa3hkTzF4dVhHNGdJQ0FnSUNCcFppQW9jbVZ6ZFd4MElEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ2NtVnFaV04wS0NkUVpYQWdUbTkwSUdadmRXNWtMaWNwTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnY21WemIyeDJaU2duVUVWUUlITjFZMk5sYzNObWRXeHNlU0J5WlcxdmRtVmtMaWNwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dVhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0tpQlVieUJ5WldObGFYWmxJSE4wWVhSMWN5QmxkbVZ1ZEhNZ1puSnZiU0JqYjIxd2IyNWxiblJ6SUhKbFoybHpkR1Z5WldRZ2FXNGdkR2hsSUZKbFoybHpkSEo1TGx4dUlDQXFJRUJ3WVhKaGJTQWdlMDFsYzNOaFoyVXVUV1Z6YzJGblpYMGdJQ0FnSUUxbGMzTmhaMlV1VFdWemMyRm5aU0FnSUNBZ0lDQmxkbVZ1ZEZ4dUlDQXFMMXh1SUNCdmJrVjJaVzUwS0dWMlpXNTBLU0I3WEc0Z0lDQWdMeThnVkU5RVR5QmliMlI1TGk0dVhHNGdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oyOXVSWFpsYm5RbktUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJRlJ2SUdScGMyTnZkbVZ5SUhOaGJtUmliM2hsY3lCaGRtRnBiR0ZpYkdVZ2FXNGdkR2hsSUhKMWJuUnBiV1VnWm05eUlHRWdZMlZ5ZEdGcGJpQmtiMjFoYVc0dUlGSmxjWFZwY21Wa0lHSjVJSFJvWlNCeWRXNTBhVzFsSUZWQklIUnZJR0YyYjJsa0lHMXZjbVVnZEdoaGJpQnZibVVnYzJGdVpHSnZlQ0JtYjNJZ2RHaGxJSE5oYldVZ1pHOXRZV2x1TGx4dUlDQXFJRUJ3WVhKaGJTQWdlMFJ2YldGcGJsVlNUSDBnUkc5dFlXbHVWVkpNSUhWeWJGeHVJQ0FxSUVCeVpYUjFjbTRnZTFKMWJuUnBiV1ZUWVc1a1ltOTRmU0FnSUNBZ0lDQWdJQ0FnVW5WdWRHbHRaVk5oYm1SaWIzaGNiaUFnS2k5Y2JpQWdaMlYwVTJGdVpHSnZlQ2gxY213cElIdGNiaUFnSUNCcFppQW9JWFZ5YkNrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkUVlYSmhiV1YwWlhJZ2RYSnNJRzVsWldSbFpDY3BPMXh1SUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RuWlhSVFlXNWtZbTk0T2lBbkxDQjFjbXdwTzF4dVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTeHlaV3BsWTNRcElIdGNibHh1SUNBZ0lDQWdiR1YwSUhKbGNYVmxjM1E3WEc1Y2JpQWdJQ0FnSUM4dlptbHljM1FnZEhKNUlIUnZJR1pwYm1RZ2RHaGxJSFZ5YkNCcGJpQjBhR1VnWVhCd1UyRnVaR0p2ZUNCc2FYTjBYRzRnSUNBZ0lDQnlaWEYxWlhOMElEMGdYM1JvYVhNdWMyRnVaR0p2ZUdWelRHbHpkQzVoY0hCVFlXNWtZbTk0VzNWeWJGMDdYRzVjYmlBZ0lDQWdJQzh2YVdZZ2JtOGdZWEJ3VTJGdVpHSnZlQ0IzWVhNZ1ptOTFibVFzSUhSeWVTQjBieUJ6WldGeVkyZ2dhVzRnZEdobElHNXZjbTFoYkNCellXNWtZbTk0WlhNZ2JHbHpkRnh1SUNBZ0lDQWdhV1lnS0NGeVpYRjFaWE4wS1NCN1hHNGdJQ0FnSUNBZ0lISmxjWFZsYzNRZ1BTQmZkR2hwY3k1ellXNWtZbTk0WlhOTWFYTjBMbk5oYm1SaWIzaGJkWEpzWFR0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvSVhKbGNYVmxjM1FwSUh0Y2JseHVJQ0FnSUNBZ0lDQWdJR3hsZENCa2IyMWhhVzRnUFNCa2FYWnBaR1ZWVWt3b2RYSnNLUzVrYjIxaGFXNDdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QnpaV0Z5WTJnZ2FXNGdkR2hsSUhOaGJtUmliM2hsY3lCc2FYTjBJR1p2Y2lCaElHVnVkSEo1SUdOdmJuUmhhVzVwYm1jZ2RHaGxJR1J2YldGcGJpQm5hWFpsYmx4dUlDQWdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElITmhibVJpYjNnZ2FXNGdYM1JvYVhNdWMyRnVaR0p2ZUdWelRHbHpkQzV6WVc1a1ltOTRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzJGdVpHSnZlQzVwYm1Oc2RXUmxjeWhrYjIxaGFXNHBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsY1hWbGMzUWdQU0JmZEdocGN5NXpZVzVrWW05NFpYTk1hWE4wTG5OaGJtUmliM2hiYzJGdVpHSnZlRjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb0lYSmxjWFZsYzNRcElIdGNiaUFnSUNBZ0lDQWdjbVZxWldOMEtDZHVieUJ6WVc1a1ltOTRJR1p2ZFc1a0lHWnZjam9nSnlBcklIVnliQ2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J5WlhOdmJIWmxLSEpsY1hWbGMzUXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCVWJ5QjJaWEpwWm5rZ2FXWWdjMjkxY21ObElHbHpJSFpoYkdsa0lHRnVaQ0IwYnlCeVpYTnZiSFpsSUhSaGNtZGxkQ0J5ZFc1MGFXMWxJSFZ5YkNCaFpHUnlaWE56SUdsbUlHNWxaV1JsWkNBb1pXY2djSEp2ZEc5emRIVmlJSEoxYm5ScGJXVWdkWEpzSUdsdUlHTmhjMlVnZEdobElHMWxjM05oWjJVZ2FYTWdkRzhnWW1VZ1pHbHpjR0YwWTJobFpDQjBieUJoSUhKbGJXOTBaU0JsYm1Sd2IybHVkQ2t1WEc0Z0lDb2dRSEJoY21GdElDQjdWVkpNTGxWU1RIMGdJSFZ5YkNBZ0lDQWdJQ0IxY214Y2JpQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxQRlZTVEM1VlVrdytmU0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdVSEp2YldselpTQThWVkpNTGxWU1RENWNiaUFnS2k5Y2JpQWdjbVZ6YjJ4MlpTaDFjbXdwSUh0Y2JpQWdJQ0JqYjI1emIyeGxMbXh2WnlnbmNtVnpiMngyWlNBbklDc2dkWEpzS1R0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdMeTl6Y0d4cGRDQjBhR1VnZFhKc0lIUnZJR1pwYm1RZ2RHaGxJR1J2YldGcGJsVlNUQzRnWkdWaGJITWdkMmwwYUNCMGFHVWdkWEpzSUdadmNpQmxlR0Z0Y0d4bElHRnpPbHh1SUNBZ0lDOHZYQ0pvZVhCbGNuUjVMWEoxYm5ScGJXVTZMeTl6Y0RFdmNISnZkRzl6ZEhWaUx6RXlNMXdpTEZ4dUlDQWdJR3hsZENCa2FYWnBaR1ZrVlZKTUlEMGdaR2wyYVdSbFZWSk1LSFZ5YkNrN1hHNGdJQ0FnYkdWMElHUnZiV0ZwYmxWeWJDQTlJR1JwZG1sa1pXUlZVa3d1Wkc5dFlXbHVPMXh1SUNBZ0lHeGxkQ0IwZVhCbElEMGdaR2wyYVdSbFpGVlNUQzUwZVhCbE8xeHVYRzRnSUNBZ0x5OGdjbVZ6YjJ4MlpTQjBhR1VnWkc5dFlXbHVJSEJ5YjNSdmMzUjFZaUJwYmlCallYTmxJRzltSUdFZ2JXVnpjMkZuWlNCMGJ5Qm5iRzlpWVd3Z2NtVm5hWE4wY25sY2JpQWdJQ0JwWmlBb2RYSnNMbWx1WTJ4MVpHVnpLQ2RuYkc5aVlXdzZMeTl5WldkcGMzUnllU2NwS1NCN1hHNGdJQ0FnSUNCa2IyMWhhVzVWY213Z1BTQmZkR2hwY3k1ZlpHOXRZV2x1TzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2dvY21WemIyeDJaU3dnY21WcVpXTjBLU0E5UGlCN1hHNWNiaUFnSUNBZ0lHbG1JQ2doWkc5dFlXbHVWWEpzTG1sdVpHVjRUMllvSjIxelp5MXViMlJsTGljcElIeDhJQ0ZrYjIxaGFXNVZjbXd1YVc1a1pYaFBaaWduY21WbmFYTjBjbmt1SnlrcElIdGNiaUFnSUNBZ0lDQWdaRzl0WVdsdVZYSnNJRDBnWkc5dFlXbHVWWEpzTG5OMVluTjBjbWx1Wnloa2IyMWhhVzVWY213dWFXNWtaWGhQWmlnbkxpY3BJQ3NnTVNrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHeGxkQ0J5WlhGMVpYTjBPMXh1SUNBZ0lDQWdhV1lnS0hSNWNHVWdQVDA5SUNka2IyMWhhVzR0YVdSd0p5a2dlMXh1SUNBZ0lDQWdJQ0J5WlhGMVpYTjBJQ0E5SUY5MGFHbHpMbWxrY0ZCeWIzaDVUR2x6ZEZ0a2IyMWhhVzVWY214ZE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2NtVnhkV1Z6ZENBZ1BTQmZkR2hwY3k1d2NtOTBiM04wZFdKelRHbHpkRnRrYjIxaGFXNVZjbXhkTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCZmRHaHBjeTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2R5ZFc1MGFXMWxPbk4wZFdKTWIyRmtaV1FuTENCbWRXNWpkR2x2Ymloa2IyMWhhVzVWY213cElIdGNiaUFnSUNBZ0lDQWdjbVZ4ZFdWemRDQWdQU0JmZEdocGN5NXdjbTkwYjNOMGRXSnpUR2x6ZEZ0a2IyMWhhVzVWY214ZE8xeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSjFKbGMyOXNkbVZrSUZCeWIzUnZjM1IxWWpvZ0p5d2djbVZ4ZFdWemRDazdYRzRnSUNBZ0lDQWdJSEpsYzI5c2RtVW9jbVZ4ZFdWemRDazdYRzRnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnWDNSb2FYTXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25jblZ1ZEdsdFpUcHBaSEJRY205NGVVeHZZV1JsWkNjc0lHWjFibU4wYVc5dUtHUnZiV0ZwYmxWeWJDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhGMVpYTjBJQ0E5SUY5MGFHbHpMbWxrY0ZCeWIzaDVUR2x6ZEZ0a2IyMWhhVzVWY214ZE8xeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSjFKbGMyOXNkbVZrSUVsRVVGQnliM2g1T2lBbkxDQnlaWEYxWlhOMEtUdGNiaUFnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHlaWEYxWlhOMEtUdGNiaUFnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0JwWmlBb2NtVnhkV1Z6ZENBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1YVc1bWJ5Z25VbVZ6YjJ4MlpXUTZJQ2NzSUhKbGNYVmxjM1FwTzF4dUlDQWdJQ0FnSUNCeVpYTnZiSFpsS0hKbGNYVmxjM1FwTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1VnUFQwOUlDZGtiMjFoYVc0dGFXUndKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lGOTBhR2x6TG5SeWFXZG5aWElvSjNKMWJuUnBiV1U2Ykc5aFpFbGtjRkJ5YjNoNUp5d2daRzl0WVdsdVZYSnNLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCZmRHaHBjeTUwY21sbloyVnlLQ2R5ZFc1MGFXMWxPbXh2WVdSVGRIVmlKeXdnWkc5dFlXbHVWWEpzS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUZKbFoybHpkSEo1TzF4dUlpd2lMeW9xWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUZCVUlFbHViM1podzZmRG8yOGdaU0JUYVhOMFpXMWhjeUJUUVZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCSlRrVlRReTFKUkZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUlZVOUNTVk1nVGtWVVYwOVNTMU1nVTB4Y2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1JsSkJWVTVJVDBaRlVpMUhSVk5GVEV4VFEwaEJSbFFnV2xWU0lFWlBSVkpFUlZKVlRrY2dSRVZTSUVGT1IwVlhRVTVFVkVWT0lFWlBVbE5EU0ZWT1J5QkZMbFpjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVDFKQlRrZEZJRk5CWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVSbGRYUnpZMmhsSUZSbGJHVnJiMjBnUVVkY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1FYQnBlbVZsWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUZSRlEwaE9TVk5EU0VVZ1ZVNUpWa1ZTVTBsVVFWUWdRa1ZTVEVsT1hHNHFYRzRxSUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBZ0tIUm9aU0JjSWt4cFkyVnVjMlZjSWlrN1hHNHFJSGx2ZFNCdFlYa2dibTkwSUhWelpTQjBhR2x6SUdacGJHVWdaWGhqWlhCMElHbHVJR052YlhCc2FXRnVZMlVnZDJsMGFDQjBhR1VnVEdsalpXNXpaUzVjYmlvZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRxWEc0cUlDQWdhSFIwY0RvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hHNHFYRzRxSUZWdWJHVnpjeUJ5WlhGMWFYSmxaQ0JpZVNCaGNIQnNhV05oWW14bElHeGhkeUJ2Y2lCaFozSmxaV1FnZEc4Z2FXNGdkM0pwZEdsdVp5d2djMjltZEhkaGNtVmNiaW9nWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNGdYQ0pCVXlCSlUxd2lJRUpCVTBsVExGeHVLaUJYU1ZSSVQxVlVJRmRCVWxKQlRsUkpSVk1nVDFJZ1EwOU9SRWxVU1U5T1V5QlBSaUJCVGxrZ1MwbE9SQ3dnWldsMGFHVnlJR1Y0Y0hKbGMzTWdiM0lnYVcxd2JHbGxaQzVjYmlvZ1UyVmxJSFJvWlNCTWFXTmxibk5sSUdadmNpQjBhR1VnYzNCbFkybG1hV01nYkdGdVozVmhaMlVnWjI5MlpYSnVhVzVuSUhCbGNtMXBjM05wYjI1eklHRnVaRnh1S2lCc2FXMXBkR0YwYVc5dWN5QjFibVJsY2lCMGFHVWdUR2xqWlc1elpTNWNiaW9xTDF4dUx5b3FYRzRxSUNBZ1FHRjFkR2h2Y2pvZ1IybHNJRVJwWVhNZ0tHZHBiQzVrYVdGelFIUmxZMjVwWTI4dWRXeHBjMkp2WVM1d2RDbGNiaW9nSUNCU1pXZHBjM1J5ZVNCRVlYUmhJRTF2WkdWc0lHbHVZMngxWkdWeklHRnNiQ0JQWW1wbFkzUnpJSFJ2SUdKbElHaGhibVJzWldRZ1lua2dkR2hsSUZKbFoybHpkSEo1SUdaMWJtTjBhVzl1WVd4cGRIa2dhVzVqYkhWa2FXNW5YRzRxTDF4dVkyeGhjM01nVW1WbmFYTjBjbmxFWVhSaFRXOWtaV3dnZTF4dVhHNGdJR052Ym5OMGNuVmpkRzl5S0dsa0xDQjFjbXdzSUdSbGMyTnlhWEIwYjNKVlVrd3NJSE4wWVhKMGFXNW5WR2x0WlN3Z2JHRnpkRTF2WkdsbWFXVmtMQ0J6ZEdGMGRYTXNJSE4wZFdKekxDQnpkSFZpYzBOdmJtWnBaM1Z5WVhScGIyNHBJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ1gzUm9hWE11WDJsa0lEMGdhV1E3WEc0Z0lDQWdYM1JvYVhNdVgzVnliQ0E5SUhWeWJEdGNiaUFnSUNCZmRHaHBjeTVmWkdWelkzSnBjSFJ2Y2xWU1RDQTlJR1JsYzJOeWFYQjBiM0pWVWt3N1hHNGdJQ0FnWDNSb2FYTXVYM04wWVhKMGFXNW5WR2x0WlNBOUlITjBZWEowYVc1blZHbHRaVHRjYmlBZ0lDQmZkR2hwY3k1ZmJHRnpkRTF2WkdsbWFXVmtJRDBnYkdGemRFMXZaR2xtYVdWa08xeHVJQ0FnSUY5MGFHbHpMbDl6ZEdGMGRYTWdQU0J6ZEdGMGRYTTdYRzRnSUNBZ1gzUm9hWE11WDNOMGRXSnpJRDBnYzNSMVluTTdYRzRnSUNBZ1gzUm9hWE11WDNOMGRXSnpRMjl1Wm1sbmRYSmhkR2x2YmlBOUlITjBkV0p6UTI5dVptbG5kWEpoZEdsdmJqdGNiaUFnZlZ4dVhHNGdJR2RsZENCcFpDZ3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUhKbGRIVnliaUJmZEdocGN5NWZhV1E3WEc0Z0lIMWNibHh1SUNCblpYUWdkWEpzS0NrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdjbVYwZFhKdUlGOTBhR2x6TGw5MWNtdzdYRzRnSUgxY2JseHVJQ0JuWlhRZ1pHVnpZM0pwY0hSdmNpZ3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUhKbGRIVnliaUJmZEdocGN5NWZaR1Z6WTNKcGNIUnZjbFZTVER0Y2JpQWdmVnh1WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElGSmxaMmx6ZEhKNVJHRjBZVTF2WkdWc08xeHVJaXdpTHlvcVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGQlVJRWx1YjNaaHc2ZkRvMjhnWlNCVGFYTjBaVzFoY3lCVFFWeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkpUa1ZUUXkxSlJGeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlJWVTlDU1ZNZ1RrVlVWMDlTUzFNZ1UweGNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdSbEpCVlU1SVQwWkZVaTFIUlZORlRFeFRRMGhCUmxRZ1dsVlNJRVpQUlZKRVJWSlZUa2NnUkVWU0lFRk9SMFZYUVU1RVZFVk9JRVpQVWxORFNGVk9SeUJGTGxaY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1QxSkJUa2RGSUZOQlhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFUmxkWFJ6WTJobElGUmxiR1ZyYjIwZ1FVZGNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdRWEJwZW1WbFhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGUkZRMGhPU1ZORFNFVWdWVTVKVmtWU1UwbFVRVlFnUWtWU1RFbE9YRzRxWEc0cUlFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlNCY0lreHBZMlZ1YzJWY0lpazdYRzRxSUhsdmRTQnRZWGtnYm05MElIVnpaU0IwYUdseklHWnBiR1VnWlhoalpYQjBJR2x1SUdOdmJYQnNhV0Z1WTJVZ2QybDBhQ0IwYUdVZ1RHbGpaVzV6WlM1Y2Jpb2dXVzkxSUcxaGVTQnZZblJoYVc0Z1lTQmpiM0I1SUc5bUlIUm9aU0JNYVdObGJuTmxJR0YwWEc0cVhHNHFJQ0FnYUhSMGNEb3ZMM2QzZHk1aGNHRmphR1V1YjNKbkwyeHBZMlZ1YzJWekwweEpRMFZPVTBVdE1pNHdYRzRxWEc0cUlGVnViR1Z6Y3lCeVpYRjFhWEpsWkNCaWVTQmhjSEJzYVdOaFlteGxJR3hoZHlCdmNpQmhaM0psWldRZ2RHOGdhVzRnZDNKcGRHbHVaeXdnYzI5bWRIZGhjbVZjYmlvZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzRnWENKQlV5QkpVMXdpSUVKQlUwbFRMRnh1S2lCWFNWUklUMVZVSUZkQlVsSkJUbFJKUlZNZ1QxSWdRMDlPUkVsVVNVOU9VeUJQUmlCQlRsa2dTMGxPUkN3Z1pXbDBhR1Z5SUdWNGNISmxjM01nYjNJZ2FXMXdiR2xsWkM1Y2Jpb2dVMlZsSUhSb1pTQk1hV05sYm5ObElHWnZjaUIwYUdVZ2MzQmxZMmxtYVdNZ2JHRnVaM1ZoWjJVZ1oyOTJaWEp1YVc1bklIQmxjbTFwYzNOcGIyNXpJR0Z1WkZ4dUtpQnNhVzFwZEdGMGFXOXVjeUIxYm1SbGNpQjBhR1VnVEdsalpXNXpaUzVjYmlvcUwxeHVYRzVwYlhCdmNuUWdKMkpoWW1Wc0xYQnZiSGxtYVd4c0p6dGNibHh1THk5TllXbHVJR1JsY0dWdVpHVmphV1Z6WEc1cGJYQnZjblFnVW1WbmFYTjBjbmtnWm5KdmJTQW5MaTR2Y21WbmFYTjBjbmt2VW1WbmFYTjBjbmtuTzF4dWFXMXdiM0owSUVsa1pXNTBhWFI1VFc5a2RXeGxJR1p5YjIwZ0p5NHVMMmxrWlc1MGFYUjVMMGxrWlc1MGFYUjVUVzlrZFd4bEp6dGNibWx0Y0c5eWRDQlFiMnhwWTNsRmJtZHBibVVnWm5KdmJTQW5MaTR2Y0c5c2FXTjVMMUJ2YkdsamVVVnVaMmx1WlNjN1hHNXBiWEJ2Y25RZ1RXVnpjMkZuWlVKMWN5Qm1jbTl0SUNjdUxpOWlkWE12VFdWemMyRm5aVUoxY3ljN1hHNHZMeUJwYlhCdmNuUWdSM0poY0doRGIyNXVaV04wYjNJZ1puSnZiU0FuTGk0dlozSmhjR2hqYjI1dVpXTjBiM0l2UjNKaGNHaERiMjV1WldOMGIzSW5PMXh1WEc1cGJYQnZjblFnVTNsdVkyaGxjazFoYm1GblpYSWdabkp2YlNBbkxpNHZjM2x1WTJobGNpOVRlVzVqYUdWeVRXRnVZV2RsY2ljN1hHNXBiWEJ2Y25RZ1VuVnVkR2x0WlVOdmNtVkRkSGdnWm5KdmJTQW5MaTR2Y0c5c2FXTjVMMk52Ym5SbGVIUXZVblZ1ZEdsdFpVTnZjbVZEZEhnbk8xeHVYRzVwYlhCdmNuUWdlMlJwZG1sa1pWVlNUQ3dnWlcxd2RIbFBZbXBsWTNSOUlHWnliMjBnSnk0dUwzVjBhV3h6TDNWMGFXeHpKenRjYmx4dUx5b3FYRzRnS2lCU2RXNTBhVzFsSUZWelpYSWdRV2RsYm5RZ1NXNTBaWEptWVdObElIZHBiR3dnY0hKdlkyVnpjeUJoYkd3Z2RHaGxJR1JsY0dWdVpHVmphV1Z6SUc5bUlIUm9aU0JqYjNKbElISjFiblJwYldVN1hHNGdLaUJBWVhWMGFHOXlJRlpwZEc5eUlGTnBiSFpoSUZ0MmFYUnZjaTEwTFhOcGJIWmhRSFJsYkdWamIyMHVjSFJkWEc0Z0tpQkFkbVZ5YzJsdmJpQXdMalF1TUZ4dUlDcGNiaUFxSUVCd2NtOXdaWEowZVNCN2NuVnVkR2x0WlVaaFkzUnZjbmw5SUhKMWJuUnBiV1ZHWVdOMGIzSjVJQzBnVTNCbFkybG1hV01nYVcxd2JHVnRaVzUwWVhScGIyNGdabTl5SUdGc2JDQmxiblpwY205dWJXVnVkSE03WEc0Z0tpQkFjSEp2Y0dWeWRIa2dlMUoxYm5ScGJXVkRZWFJoYkc5bmRXVjlJSEoxYm5ScGJXVkRZWFJoYkc5bmRXVWdMU0JEWVhSaGJHOW5kV1VnYjJZZ1kyOXRjRzl1Wlc1MGN5QmpZVzRnWW1VZ2FXNXpkR0ZzYkdWa08xeHVJQ29nUUhCeWIzQmxjblI1SUh0eWRXNTBhVzFsVlZKTWZTQnlkVzUwYVcxbFZWSk1JQzBnVkdocGN5QnBaR1Z1ZEdsbWVTQjBhR1VnWTI5eVpTQnlkVzUwYVcxbExDQnphRzkxYkdRZ1ltVWdkVzVwY1hWbE8xeHVJQ29nUUhCeWIzQmxjblI1SUh0SlpHVnVkR2wwZVUxdlpIVnNaWDBnYVdSbGJuUnBkSGxOYjJSMWJHVWdMU0JKWkdWdWRHbDBlU0JOYjJSMWJHVTdYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UxQnZiR2xqZVVWdVoybHVaWDBnY0c5c2FXTjVSVzVuYVc1bElDMGdVRzlzYVdONUlFVnVaMmx1WlNCTmIyUjFiR1U3WEc0Z0tpQkFjSEp2Y0dWeWRIa2dlMUpsWjJsemRISjVmU0J5WldkcGMzUnllU0F0SUZKbFoybHpkSEo1SUUxdlpIVnNaVHRjYmlBcUlFQndjbTl3WlhKMGVTQjdUV1Z6YzJGblpVSjFjMzBnYldWemMyRm5aVUoxY3lBdElFMWxjM05oWjJVZ1FuVnpJR2x6SUhWelpXUWdiR2xyWlNCaElISnZkWFJsY2lCMGJ5QnlaV1JwY21WamRDQjBhR1VnYldWemMyRm5aWE1nWm5KdmJTQnZibVVnWTI5dGNHOXVaVzUwSUhSdklHOTBhR1Z5S0hNcFhHNGdLaUJBY0hKdmNHVnlkSGtnZTBkeVlYQm9RMjl1Ym1WamRHOXlmU0JuY21Gd2FFTnZibTVsWTNSdmNpQXRJRWR5WVhCb0lFTnZibTVsWTNSdmNpQm9ZVzVrYkdsdVp5QkhWVWxFSUdGdVpDQmpiMjUwWVdOMGMxeHVJQ292WEc1amJHRnpjeUJTZFc1MGFXMWxWVUVnZTF4dVhHNGdJQzhxS2x4dUlDQWdLaUJEY21WaGRHVWdZU0J1WlhjZ2FXNXpkR0Z1WTJVZ2IyWWdVblZ1ZEdsdFpTQlZjMlZ5SUVGblpXNTBYRzRnSUNBcUlFQndZWEpoYlNCN2NuVnVkR2x0WlVaaFkzUnZjbmw5SUhKMWJuUnBiV1ZHWVdOMGIzSjVJQzBnVTNCbFkybG1hV01nYVcxd2JHVnRaVzUwWVhScGIyNGdabTl5SUhSb1pTQmxiblpwY205dWJXVnVkQ0IzYUdWeVpTQjBhR1VnWTI5eVpTQnlkVzUwYVcxbElIZHBiR3dnY25WdU8xeHVJQ0FnS2lCQWNHRnlZVzBnZTJSdmJXRnBibjBnWkc5dFlXbHVWVkpNSUMwZ2MzQmxZMmxtZVNCMGFHVWdaRzl0WVdsdUlHSmhjMlVnWm05eUlIUm9aU0J5ZFc1MGFXMWxPMXh1SUNBZ0tpOWNiaUFnWTI5dWMzUnlkV04wYjNJb2NuVnVkR2x0WlVaaFkzUnZjbmtzSUdSdmJXRnBiaWtnZTF4dVhHNGdJQ0FnYVdZZ0tDRnlkVzUwYVcxbFJtRmpkRzl5ZVNrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkVWFHVWdjMkZ1WkdKdmVDQm1ZV04wYjNKNUlHbHpJR0VnYm1WbFpHVmtJSEJoY21GdFpYUmxjaWNwTzF4dUlDQWdJR2xtSUNnaFpHOXRZV2x1S1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjFsdmRTQnVaV1ZrSUhSb1pTQmtiMjFoYVc0Z2IyWWdjblZ1ZEdsdFpTY3BPMXh1WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lGOTBhR2x6TG5KMWJuUnBiV1ZHWVdOMGIzSjVJRDBnY25WdWRHbHRaVVpoWTNSdmNuazdYRzRnSUNBZ1gzUm9hWE11Y25WdWRHbHRaVU5oZEdGc2IyZDFaU0E5SUhKMWJuUnBiV1ZHWVdOMGIzSjVMbU55WldGMFpWSjFiblJwYldWRFlYUmhiRzluZFdVb0tUdGNibHh1SUNBZ0lDOHZJRlJQUkU4NklIQnZjM1FnWVc1a0lISmxkSFZ5YmlCeVpXZHBjM1J5ZVM5b2VYQmxjblI1VW5WdWRHbHRaVWx1YzNSaGJtTmxJSFJ2SUdGdVpDQm1jbTl0SUVKaFkyc3RaVzVrSUZObGNuWnBZMlZjYmlBZ0lDQXZMeUIwYUdVZ2NtVnpjRzl1YzJVZ2FYTWdiR2xyWlRvZ2NuVnVkR2x0WlRvdkwzTndNUzh4TWpOY2JseHVJQ0FnSUd4bGRDQnlkVzUwYVcxbFZWSk1JRDBnSjNKMWJuUnBiV1U2THk4bklDc2daRzl0WVdsdUlDc2dKeThuSUNzZ1RXRjBhQzVtYkc5dmNpZ29UV0YwYUM1eVlXNWtiMjBvS1NBcUlERXdNREF3S1NBcklERXBPMXh1SUNBZ0lGOTBhR2x6TG5KMWJuUnBiV1ZWVWt3Z1BTQnlkVzUwYVcxbFZWSk1PMXh1SUNBZ0lGOTBhR2x6TG1SdmJXRnBiaUE5SUdSdmJXRnBianRjYmx4dUlDQWdJQzh2SUZSUFJFODZJR05vWldOcklHbG1JSEoxYm5ScGJXVWdZMkYwWVd4dlozVmxJRzVsWldRZ2RHaGxJSEoxYm5ScGJXVlZVa3c3WEc0Z0lDQWdYM1JvYVhNdWNuVnVkR2x0WlVOaGRHRnNiMmQxWlM1eWRXNTBhVzFsVlZKTUlEMGdjblZ1ZEdsdFpWVlNURHRjYmx4dUlDQWdJQzh2SUVsdWMzUmhiblJwWVhSbElIUm9aU0JwWkdWdWRHbDBlU0JOYjJSMWJHVmNiaUFnSUNCZmRHaHBjeTVwWkdWdWRHbDBlVTF2WkhWc1pTQTlJRzVsZHlCSlpHVnVkR2wwZVUxdlpIVnNaU2h5ZFc1MGFXMWxWVkpNS1R0Y2JseHVJQ0FnSUM4dklGVnpaU0IwYUdVZ2MyRnVaR0p2ZUNCbVlXTjBiM0o1SUhSdklHTnlaV0YwWlNCaGJpQkJjSEJUWVc1a1ltOTRPMXh1SUNBZ0lDOHZJRWx1SUhSb1pTQm1kWFIxY21VZ1kyRnVJR0psSUdSbFkybGtaV1FnWW5rZ2NHOXNhV041Ulc1bmFXNWxJR2xtSUhkbElHNWxaV1JjYmlBZ0lDQXZMeUJqY21WaGRHVWdZU0JCY0hCVFlXNWtZbTk0SUc5eUlHNXZkRHRjYmlBZ0lDQnNaWFFnWVhCd1UyRnVaR0p2ZUNBOUlISjFiblJwYldWR1lXTjBiM0o1TG1OeVpXRjBaVUZ3Y0ZOaGJtUmliM2dvS1R0Y2JseHVJQ0FnSUM4dklFbHVjM1JoYm5ScFlYUmxJSFJvWlNCU1pXZHBjM1J5ZVNCTmIyUjFiR1ZjYmlBZ0lDQmZkR2hwY3k1eVpXZHBjM1J5ZVNBOUlHNWxkeUJTWldkcGMzUnllU2h5ZFc1MGFXMWxWVkpNTENCaGNIQlRZVzVrWW05NExDQmZkR2hwY3k1cFpHVnVkR2wwZVUxdlpIVnNaU3dnWDNSb2FYTXVjblZ1ZEdsdFpVTmhkR0ZzYjJkMVpTazdYRzVjYmlBZ0lDQXZMeUJKYm5OMFlXNTBhV0YwWlNCMGFHVWdUV1Z6YzJGblpTQkNkWE5jYmlBZ0lDQmZkR2hwY3k1dFpYTnpZV2RsUW5WeklEMGdibVYzSUUxbGMzTmhaMlZDZFhNb1gzUm9hWE11Y21WbmFYTjBjbmtwTzF4dVhHNGdJQ0FnTHk4Z1NXNXpkR0Z1ZEdsaGRHVWdkR2hsSUZCdmJHbGplU0JGYm1kcGJtVmNiaUFnSUNCZmRHaHBjeTV3YjJ4cFkzbEZibWRwYm1VZ1BTQnVaWGNnVUc5c2FXTjVSVzVuYVc1bEtHNWxkeUJTZFc1MGFXMWxRMjl5WlVOMGVDaGZkR2hwY3k1cFpHVnVkR2wwZVUxdlpIVnNaU3dnWDNSb2FYTXVjbVZuYVhOMGNua3BLVHRjYmx4dUlDQWdJRjkwYUdsekxtMWxjM05oWjJWQ2RYTXVjR2x3Wld4cGJtVXVhR0Z1Wkd4bGNuTWdQU0JiWEc1Y2JpQWdJQ0FnSUM4dklGQnZiR2xqZVNCdFpYTnpZV2RsSUdGMWRHaHZjbWx6WlZ4dUlDQWdJQ0FnWm5WdVkzUnBiMjRvWTNSNEtTQjdYRzRnSUNBZ0lDQWdJRjkwYUdsekxuQnZiR2xqZVVWdVoybHVaUzVoZFhSb2IzSnBjMlVvWTNSNExtMXpaeWt1ZEdobGJpaG1kVzVqZEdsdmJpaGphR0Z1WjJWa1RXZHpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kzUjRMbTF6WnlBOUlHTm9ZVzVuWldSTlozTTdYRzRnSUNBZ0lDQWdJQ0FnWTNSNExtNWxlSFFvS1R0Y2JpQWdJQ0FnSUNBZ2ZTa3VZMkYwWTJnb1puVnVZM1JwYjI0b2NtVmhjMjl1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2loeVpXRnpiMjRwTzF4dUlDQWdJQ0FnSUNBZ0lHTjBlQzVtWVdsc0tISmxZWE52YmlrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lGMDdYRzVjYmlBZ0lDQXZMeUJCWkdRZ2RHOGdRWEJ3SUZOaGJtUmliM2dnZEdobElHeHBjM1JsYm1WeU8xeHVJQ0FnSUdGd2NGTmhibVJpYjNndVlXUmtUR2x6ZEdWdVpYSW9KeW9uTENCbWRXNWpkR2x2YmlodGMyY3BJSHRjYmlBZ0lDQWdJRjkwYUdsekxtMWxjM05oWjJWQ2RYTXVjRzl6ZEUxbGMzTmhaMlVvYlhObktUdGNiaUFnSUNCOUtUdGNibHh1SUNBZ0lDOHZJRkpsWjJsemRHVnlJRzFsYzNOaFoyVkNkWE1nYjI0Z1VtVm5hWE4wY25sY2JpQWdJQ0JmZEdocGN5NXlaV2RwYzNSeWVTNXRaWE56WVdkbFFuVnpJRDBnWDNSb2FYTXViV1Z6YzJGblpVSjFjenRjYmx4dUlDQWdJQzh2SUZKbFoybHpkR1Z5SUhKbFoybHpkSEo1SUc5dUlFbGtaVzUwYVhSNVRXOWtkV3hsWEc0Z0lDQWdYM1JvYVhNdWFXUmxiblJwZEhsTmIyUjFiR1V1Y21WbmFYTjBjbmtnUFNCZmRHaHBjeTV5WldkcGMzUnllVHRjYmx4dUlDQWdJRjkwYUdsekxuSmxaMmx6ZEhKNUxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ozSjFiblJwYldVNmJHOWhaRk4wZFdJbkxDQm1kVzVqZEdsdmJpaGtiMjFoYVc1VlVrd3BJSHRjYmlBZ0lDQWdJRjkwYUdsekxteHZZV1JUZEhWaUtHUnZiV0ZwYmxWU1RDa3VkR2hsYmlobWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdYM1JvYVhNdWNtVm5hWE4wY25rdWRISnBaMmRsY2lnbmNuVnVkR2x0WlRwemRIVmlURzloWkdWa0p5d2daRzl0WVdsdVZWSk1LVHRjYmlBZ0lDQWdJSDBwTG1OaGRHTm9LR1oxYm1OMGFXOXVLSEpsWVhOdmJpa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDZEdZV2xzWldRZ2RHOGdaR1Z3Ykc5NUlIUm9aU0JRY205MGIyTnZiRk4wZFdJZ1kyOXRjRzl1Wlc1MElDY3NJSEpsWVhOdmJpazdYRzRnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnWDNSb2FYTXVjbVZuYVhOMGNua3VZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25jblZ1ZEdsdFpUcHNiMkZrU1dSd1VISnZlSGtuTENCbWRXNWpkR2x2Ymloa2IyMWhhVzVWVWt3cElIdGNiaUFnSUNBZ0lGOTBhR2x6TG14dllXUkpaSEJRY205NGVTaGtiMjFoYVc1VlVrd3BMblJvWlc0b1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJRjkwYUdsekxuSmxaMmx6ZEhKNUxuUnlhV2RuWlhJb0ozSjFiblJwYldVNmFXUndVSEp2ZUhsTWIyRmtaV1FuTENCa2IyMWhhVzVWVWt3cE8xeHVJQ0FnSUNBZ2ZTa3VZMkYwWTJnb1puVnVZM1JwYjI0b2NtVmhjMjl1S1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSjBaaGFXeGxaQ0IwYnlCa1pYQnNiM2tnZEdobElFbEVVQ0JRY205NGVTQmpiMjF3YjI1bGJuUWdKeXdnY21WaGMyOXVLVHRjYmlBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnZlNrN1hHNWNiaUFnSUNBdkx5QlZjMlVnYzJGdVpHSnZlQ0JtWVdOMGIzSjVJSFJ2SUhWelpTQnpjR1ZqYVdacFl5QnRaWFJvYjJSelhHNGdJQ0FnTHk4Z1lXNWtJSE5sZENCMGFHVWdiV1Z6YzJGblpTQmlkWE1nZEc4Z2RHaGxJR1poWTNSdmNubGNiaUFnSUNCeWRXNTBhVzFsUm1GamRHOXllUzV0WlhOellXZGxRblZ6SUQwZ1gzUm9hWE11YldWemMyRm5aVUoxY3p0Y2JseHVJQ0FnSUM4dklFbHVjM1JoYm1OcFlYUmxJSFJvWlNCVGVXNWphR1Z5VFdGdVlXZGxjanRjYmlBZ0lDQmZkR2hwY3k1emVXNWphR1Z5VFdGdVlXZGxjaUE5SUc1bGR5QlRlVzVqYUdWeVRXRnVZV2RsY2loZmRHaHBjeTV5ZFc1MGFXMWxWVkpNTENCZmRHaHBjeTV0WlhOellXZGxRblZ6TENCZmRHaHBjeTV5WldkcGMzUnllU3dnWDNSb2FYTXVjblZ1ZEdsdFpVTmhkR0ZzYjJkMVpTazdYRzVjYmlBZ0lDQXZMeUJKYm5OMFlXNTBhV0YwWlNCMGFHVWdSM0poY0dnZ1EyOXVibVZqZEc5eVhHNGdJQ0FnTHk4Z1gzUm9hWE11WjNKaGNHaERiMjV1WldOMGIzSWdQU0J1WlhjZ1IzSmhjR2hEYjI1dVpXTjBiM0lvWDNSb2FYTXVjblZ1ZEdsdFpWVlNUQ3dnWDNSb2FYTXViV1Z6YzJGblpVSjFjeWs3WEc1Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlFRmpZMjl0YjJSaGRHVWdhVzUwWlhKdmNHVnlZV0pwYkdsMGVTQnBiaUJJTWtnZ1lXNWtJSEJ5YjNSdklHOXVJSFJvWlNCbWJIa2dabTl5SUc1bGQyeDVJR1JwYzJOdmRtVnlaV1FnWkdWMmFXTmxjeUJwYmlCTk1rMWNiaUFnS2lCQWNHRnlZVzBnSUh0RFlYUmhiRzluZFdWRVlYUmhUMkpxWldOMExraDVjR1Z5ZEhsRVpYTmpjbWx3ZEc5eWZTQWdJR1JsYzJOeWFYQjBiM0lnSUNBZ1pHVnpZM0pwY0hSdmNseHVJQ0FxTDF4dUlDQmthWE5qYjNabGNraHBjR1Z5ZEhrb1pHVnpZM0pwY0hSdmNpa2dlMXh1SUNBZ0lDOHZJRUp2WkhrdUxpNWNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJRkpsWjJsemRHVnlJRWg1Y0dWeWRIa2daR1Z3Ykc5NVpXUWdZbmtnZEdobElFRndjQ0IwYUdGMElHbHpJSEJoYzNObFpDQmhjeUJwYm5CMWRDQndZWEpoYldWMFpYSXVJRlJ2SUdKbElIVnpaV1FnZDJobGJpQkJjSEFnWVc1a0lFaDVjR1Z5ZEdsbGN5QmhjbVVnWm5KdmJTQjBhR1VnYzJGdFpTQmtiMjFoYVc0Z2IzUm9aWEozYVhObElIUm9aU0JTZFc1MGFXMWxWVUVnZDJsc2JDQnlZV2x6WlNCaGJpQmxlR05sY0hScGIyNGdZVzVrSUhSb1pTQkJjSEFnYUdGeklIUnZJSFZ6WlNCMGFHVWdiRzloWkVoNWNHVnlkSGtvTGk0cElHWjFibU4wYVc5dUxseHVJQ0FxSUVCd1lYSmhiU0FnZTA5aWFtVmpkSDBnVDJKcVpXTjBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2g1Y0dWeWRIbEpibk4wWVc1alpWeHVJQ0FxSUVCd1lYSmhiU0FnZTFWU1RDNUllWEJsY25SNVEyRjBZV3h2WjNWbFZWSk1mU0FnSUNBZ0lDQWdJR1JsYzJOeWFYQjBiM0lnSUNBZ0lDQmtaWE5qY21sd2RHOXlYRzRnSUNvdlhHNGdJSEpsWjJsemRHVnlTSGx3WlhKMGVTaG9lWEJsY25SNVNXNXpkR0Z1WTJVc0lHUmxjMk55YVhCMGIzSXBJSHRjYmlBZ0lDQXZMeUJDYjJSNUxpNHVYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdLaUJFWlhCc2Iza2dTSGx3WlhKMGVTQm1jbTl0SUVOaGRHRnNiMmQxWlNCVlVreGNiaUFnS2lCQWNHRnlZVzBnSUh0VlVrd3VTSGx3WlhKMGVVTmhkR0ZzYjJkMVpWVlNUSDBnSUNBZ2FIbHdaWEowZVNCb2VYQmxjblI1UkdWelkzSnBjSFJ2Y2lCMWNtdzdYRzRnSUNvdlhHNGdJR3h2WVdSSWVYQmxjblI1S0doNWNHVnlkSGxFWlhOamNtbHdkRzl5VlZKTUtTQjdYRzVjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ2FXWWdLQ0ZvZVhCbGNuUjVSR1Z6WTNKcGNIUnZjbFZTVENrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkSWVYQmxjblI1SUdSbGMyTnlhWEIwYjNJZ2RYSnNJSEJoY21GdFpYUmxjaUJwY3lCdVpXVmtaV1FuS1R0Y2JseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmloeVpYTnZiSFpsTENCeVpXcGxZM1FwSUh0Y2JseHVJQ0FnSUNBZ2JHVjBJRjlvZVhCbGNuUjVWVkpNTzF4dUlDQWdJQ0FnYkdWMElGOW9lWEJsY25SNVUyRnVaR0p2ZUR0Y2JpQWdJQ0FnSUd4bGRDQmZhSGx3WlhKMGVVUmxjMk55YVhCMGIzSTdYRzRnSUNBZ0lDQnNaWFFnWDJoNWNHVnlkSGxUYjNWeVkyVlFZV05yWVdkbE8xeHVYRzRnSUNBZ0lDQnNaWFFnWlhKeWIzSlNaV0Z6YjI0Z1BTQm1kVzVqZEdsdmJpaHlaV0Z6YjI0cElIdGNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lnblUyOXRaWFJvYVc1bklHWmhhV3hsWkNCdmJpQjBhR1VnWkdWd2JHOTVJR2g1Y0dWeWRIazZJQ2NzSUhKbFlYTnZiaWs3WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2h5WldGemIyNHBPMXh1SUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnTHk4Z1IyVjBJRWg1Y0dWeWRIa2daR1Z6WTNKcGNIUnZjbHh1SUNBZ0lDQWdMeThnVkU5RVR6b2dkR2hsSUhKbGNYVmxjM1FnVFc5a2RXeGxJSE5vYjNWc1pDQmlaU0JqYUdGdVoyVmtMRnh1SUNBZ0lDQWdMeThnWW1WallYVnpaU0JoZENCMGFHbHpJRzF2YldWdWRDQnBkQ0JwY3lCcGJtTnZiWEJoZEdsaWJHVWdkMmwwYUNCdWIyUmxhbk03WEc0Z0lDQWdJQ0F2THlCUWNtOWlZV0pzZVNCM1pTQnVaV1ZrSUhSdklIQmhjM01nWVNCbVlXTjBiM0o1SUd4cGEyVWdkMlVnWkc4Z1ptOXlJSE5oYm1SaWIzaGxjenRjYmlBZ0lDQWdJR052Ym5OdmJHVXVhVzVtYnlnbkxTMHRMUzB0TFMwdExTMHRMUzB0TFMwdElFaDVjR1Z5ZEhrZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0SnlrN1hHNGdJQ0FnSUNCamIyNXpiMnhsTG1sdVptOG9KMGRsZENCb2VYQmxjblI1SUdSbGMyTnlhWEIwYjNJZ1ptOXlJRG9uTENCb2VYQmxjblI1UkdWelkzSnBjSFJ2Y2xWU1RDazdYRzRnSUNBZ0lDQnlaWFIxY200Z1gzUm9hWE11Y25WdWRHbHRaVU5oZEdGc2IyZDFaUzVuWlhSSWVYQmxjblI1UkdWelkzSnBjSFJ2Y2lob2VYQmxjblI1UkdWelkzSnBjSFJ2Y2xWU1RDa3VkR2hsYmlobWRXNWpkR2x2Ymlob2VYQmxjblI1UkdWelkzSnBjSFJ2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJoZENCMGFHbHpJSEJ2YVc1MExDQjNaU0JvWVhabElHTnZiWEJzWlhSbFpDQmNJbk4wWlhBZ01pQmhibVFnTTF3aUlHRnpJSE5vYjNkdUlHbHVJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzl5WlZSSVNVNUxMWEJ5YjJwbFkzUXZZMjl5WlMxbWNtRnRaWGR2Y21zdllteHZZaTl0WVhOMFpYSXZaRzlqY3k5emNHVmpjeTl5ZFc1MGFXMWxMMlI1Ym1GdGFXTXRkbWxsZHk5aVlYTnBZM012WkdWd2JHOTVMV2g1Y0dWeWRIa3ViV1JjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVwYm1adktDY3hPaUJ5WlhSMWNtNGdhSGx3WlhKMGVTQmtaWE5qY21sd2RHOXlKeWs3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdhSGx3WlhKMGVTQmpiMjUwWVdsdWN5QjBhR1VnWm5Wc2JDQndZWFJvSUc5bUlIUm9aU0JqWVhSaGJHOW5kV1VnVlZKTUxDQmxMbWN1WEc0Z0lDQWdJQ0FnSUM4dklHTmhkR0ZzYjJkMVpTNXlaWFJvYVc1ckxtVjFMeTUzWld4c0xXdHViM2R1THk0dUxpNHVMaTR1TGk1Y2JpQWdJQ0FnSUNBZ1gyaDVjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUlEMGdhSGx3WlhKMGVVUmxjMk55YVhCMGIzSTdYRzVjYmlBZ0lDQWdJQ0FnYkdWMElITnZkWEpqWlZCaFkydGhaMlZWVWt3Z1BTQm9lWEJsY25SNVJHVnpZM0pwY0hSdmNpNXpiM1Z5WTJWUVlXTnJZV2RsVlZKTU8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoemIzVnlZMlZRWVdOcllXZGxWVkpNSUQwOVBTQW5MM052ZFhKalpWQmhZMnRoWjJVbktTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR2g1Y0dWeWRIbEVaWE5qY21sd2RHOXlMbk52ZFhKalpWQmhZMnRoWjJVN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0F2THlCSFpYUWdkR2hsSUdoNWNHVnlkSGtnYzI5MWNtTmxJR052WkdWY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5MGFHbHpMbkoxYm5ScGJXVkRZWFJoYkc5bmRXVXVaMlYwVTI5MWNtTmxVR0ZqYTJGblpVWnliMjFWVWt3b2MyOTFjbU5sVUdGamEyRm5aVlZTVENrN1hHNGdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0xuUm9aVzRvWm5WdVkzUnBiMjRvYzI5MWNtTmxVR0ZqYTJGblpTa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbWx1Wm04b0p6STZJSEpsZEhWeWJpQm9lWEJsY25SNUlITnZkWEpqWlNCamIyUmxKeWs3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdZWFFnZEdocGN5QndiMmx1ZEN3Z2QyVWdhR0YyWlNCamIyMXdiR1YwWldRZ1hDSnpkR1Z3SURRZ1lXNWtJRFZjSWlCaGN5QnphRzkzYmlCcGJpQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZjbVZVU0VsT1N5MXdjbTlxWldOMEwyTnZjbVV0Wm5KaGJXVjNiM0pyTDJKc2IySXZiV0Z6ZEdWeUwyUnZZM012YzNCbFkzTXZjblZ1ZEdsdFpTOWtlVzVoYldsakxYWnBaWGN2WW1GemFXTnpMMlJsY0d4dmVTMW9lWEJsY25SNUxtMWtYRzVjYmlBZ0lDQWdJQ0FnWDJoNWNHVnlkSGxUYjNWeVkyVlFZV05yWVdkbElEMGdjMjkxY21ObFVHRmphMkZuWlR0Y2JseHVJQ0FnSUNBZ0lDQXZMMXh1SUNBZ0lDQWdJQ0F2THlCemRHVndjeUEySUMwdElEa2dZWEpsSUhOcmFYQndaV1F1WEc0Z0lDQWdJQ0FnSUM4dklGUlBSRTg2SUc5dUlISmxiR1ZoYzJVZ2IyWWdZMjl5WlNBd0xqSTdYRzRnSUNBZ0lDQWdJQzh2SUZSUFJFODZJRkJ5YjIxcGMyVWdkRzhnWTJobFkyc2dkR2hsSUhCdmJHbGplU0JsYm1kcGJtVmNibHh1SUNBZ0lDQWdJQ0F2THlCdGIyTnJMWFZ3SUdOdlpHVTdYRzRnSUNBZ0lDQWdJQzh2SUhSbGJYQnZjbUZ5ZVNCamIyUmxMQ0J2Ym14NVhHNGdJQ0FnSUNBZ0lHeGxkQ0J3YjJ4cFkza2dQU0IwY25WbE8xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQndiMnhwWTNrN1hHNGdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0xuUm9aVzRvWm5WdVkzUnBiMjRvY0c5c2FXTjVVbVZ6ZFd4MEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXVhVzVtYnlnbk16b2djbVYwZFhKdUlIQnZiR2xqZVNCbGJtZHBibVVnY21WemRXeDBPaUFuTENCd2IyeHBZM2xTWlhOMWJIUXBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklIZGxJR2hoZG1VZ1kyOXRjR3hsZEdWa0lITjBaWEFnTmlCMGJ5QTVJRzltSUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5eVpWUklTVTVMTFhCeWIycGxZM1F2WTI5eVpTMW1jbUZ0WlhkdmNtc3ZZbXh2WWk5dFlYTjBaWEl2Wkc5amN5OXpjR1ZqY3k5eWRXNTBhVzFsTDJSNWJtRnRhV010ZG1sbGR5OWlZWE5wWTNNdlpHVndiRzk1TFdoNWNHVnlkSGt1YldRZ2NtbG5hSFFnYm05M0xseHVJQ0FnSUNBZ0lDQXZMMXh1SUNBZ0lDQWdJQ0F2THlCVGRHVndjeUEySUMwdElEbGNiaUFnSUNBZ0lDQWdMeThnUVhNZ1lTQnlaWE4xYkhRZ2IyWWdkR2hsSUhOcGNIQmxaQ0J6ZEdWd2N5d2dkMlVnYTI1dmR5QmhkQ0IwYUdseklIQnZhVzUwSUdsbUlIZGxJR1Y0WldOMWRHVmNiaUFnSUNBZ0lDQWdMeThnYVc1VFlXMWxVMkZ1WkdKdmVDQnZjaUJ1YjNRdVhHNGdJQ0FnSUNBZ0lDOHZYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1JtOXlJSFJsYzNScGJtY3NJR3AxYzNRZ1lYTnpkVzFsSUhkbElHVjRaV04xZEdVZ2FXNGdjMkZ0WlNCVFlXNWtZbTk0TGx4dUlDQWdJQ0FnSUNCc1pYUWdhVzVUWVcxbFUyRnVaR0p2ZUNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUd4bGRDQnpZVzVrWW05NE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNocGJsTmhiV1ZUWVc1a1ltOTRLU0I3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUIwYUdseklHUnZiaWQwSUc1bFpXUWdZbVVnWVNCUWNtOXRhWE5sTzF4dUlDQWdJQ0FnSUNBZ0lITmhibVJpYjNnZ1BTQmZkR2hwY3k1eVpXZHBjM1J5ZVM1blpYUkJjSEJUWVc1a1ltOTRLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUIzWlNCb1lYWmxJR052YlhCc1pYUmxaQ0J6ZEdWd0lERXhJR2hsY21VdVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNWNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ1pHOXRZV2x1SUQwZ1pHbDJhV1JsVlZKTUtHaDVjR1Z5ZEhsRVpYTmpjbWx3ZEc5eVZWSk1LUzVrYjIxaGFXNDdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5Qm5aWFJUWVc1a1ltOTRMQ0IwYUdseklIZHBiR3dnY21WMGRYSnVJR0VnY0hKdmJXbHpaVHRjYmlBZ0lDQWdJQ0FnSUNCellXNWtZbTk0SUQwZ1gzUm9hWE11Y21WbmFYTjBjbmt1WjJWMFUyRnVaR0p2ZUNoa2IyMWhhVzRwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnZEdocGN5QjNhV3hzSUhKbGRIVnliaUIwYUdVZ2MyRnVaR0p2ZUNCdmNpQnZibVVnY0hKdmJXbHpaU0IwYnlCblpYUlRZVzVrWW05NE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyRnVaR0p2ZUR0Y2JpQWdJQ0FnSUgwcExuUm9aVzRvWm5WdVkzUnBiMjRvYzJGdVpHSnZlQ2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG1sdVptOG9KelE2SUhKbGRIVnliaUIwYUdVZ2MyRnVaR0p2ZUNjc0lITmhibVJpYjNncE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUZKbGRIVnliaUIwYUdVZ2MyRnVaR0p2ZUNCcGJtUmxjR1Z1ZEdWc2VTQnBaaUJwZENCeWRXNXVhVzVuSUdsdUlIUm9aU0J6WVcxbElITmhibVJpYjNnZ2IzSWdibTkwWEc0Z0lDQWdJQ0FnSUM4dklIZGxJR2hoZG1VZ1kyOXRjR3hsZEdWa0lITjBaWEFnTVRRZ2FHVnlaUzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE5oYm1SaWIzZzdYRzRnSUNBZ0lDQjlMQ0JtZFc1amRHbHZiaWh5WldGemIyNHBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ25OQzR4T2lCVWNua2dkRzhnY21WbmFYTjBaWElnWVNCdVpYY2djMkZ1WkdKdmVDQW5MQ0J5WldGemIyNHBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklHTm9aV05ySUdsbUlIUm9aU0J6WVc1a1ltOTRJR2x6SUhKbFoybHpkR1ZrSUdadmNpQjBhR2x6SUdoNWNHVnlkSGtnWkdWelkzSnBjSFJ2Y2lCMWNtdzdYRzRnSUNBZ0lDQWdJQzh2SUUxaGEyVWdVM1JsY0hNZ2VIaDRJQzB0TFNCNGVIaGNiaUFnSUNBZ0lDQWdMeThnU1c1emRHRnVkR2xoZEdVZ2RHaGxJRk5oYm1SaWIzaGNiaUFnSUNBZ0lDQWdiR1YwSUhOaGJtUmliM2dnUFNCZmRHaHBjeTV5ZFc1MGFXMWxSbUZqZEc5eWVTNWpjbVZoZEdWVFlXNWtZbTk0S0NrN1hHNWNiaUFnSUNBZ0lDQWdjMkZ1WkdKdmVDNWhaR1JNYVhOMFpXNWxjaWduS2ljc0lHWjFibU4wYVc5dUtHMXpaeWtnZTF4dUlDQWdJQ0FnSUNBZ0lGOTBhR2x6TG0xbGMzTmhaMlZDZFhNdWNHOXpkRTFsYzNOaFoyVW9iWE5uS1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE5oYm1SaWIzZzdYRzRnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdMblJvWlc0b1puVnVZM1JwYjI0b2MyRnVaR0p2ZUNrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSnpVNklISmxkSFZ5YmlCellXNWtZbTk0SUdGdVpDQnlaV2RwYzNSbGNpY3BPMXh1WEc0Z0lDQWdJQ0FnSUY5b2VYQmxjblI1VTJGdVpHSnZlQ0E5SUhOaGJtUmliM2c3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdVbVZuYVhOMFpYSWdhSGx3WlhKMGVWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1gzUm9hWE11Y21WbmFYTjBjbmt1Y21WbmFYTjBaWEpJZVhCbGNuUjVLSE5oYm1SaWIzZ3NJR2g1Y0dWeWRIbEVaWE5qY21sd2RHOXlWVkpNTENCZmFIbHdaWEowZVVSbGMyTnlhWEIwYjNJcE8xeHVJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDNTBhR1Z1S0daMWJtTjBhVzl1S0doNWNHVnlkSGxWVWt3cElIdGNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNXBibVp2S0NjMk9pQkllWEJsY25SNUlIVnliQ3dnWVdaMFpYSWdjbVZuYVhOMFpYSWdhSGx3WlhKMGVTY3NJR2g1Y0dWeWRIbFZVa3dwTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJSGRsSUdoaGRtVWdZMjl0Y0d4bGRHVmtJSE4wWlhBZ01UWWdiMllnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNKbFZFaEpUa3N0Y0hKdmFtVmpkQzlqYjNKbExXWnlZVzFsZDI5eWF5OWliRzlpTDIxaGMzUmxjaTlrYjJOekwzTndaV056TDNKMWJuUnBiV1V2WkhsdVlXMXBZeTEyYVdWM0wySmhjMmxqY3k5a1pYQnNiM2t0YUhsd1pYSjBlUzV0WkNCeWFXZG9kQ0J1YjNjdVhHNGdJQ0FnSUNBZ0lGOW9lWEJsY25SNVZWSk1JRDBnYUhsd1pYSjBlVlZTVER0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJGZUhSbGJtUWdiM0pwWjJsdVlXd2dhSGx3WlhKMGVTQmpiMjVtYVdkMWNtRjBhVzl1TzF4dUlDQWdJQ0FnSUNCc1pYUWdZMjl1Wm1sbmRYSmhkR2x2YmlBOUlIdDlPMXh1SUNBZ0lDQWdJQ0JwWmlBb0lXVnRjSFI1VDJKcVpXTjBLRjlvZVhCbGNuUjVSR1Z6WTNKcGNIUnZjaTVqYjI1bWFXZDFjbUYwYVc5dUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNW1hV2QxY21GMGFXOXVJRDBnVDJKcVpXTjBMbUZ6YzJsbmJpaDdmU3dnU2xOUFRpNXdZWEp6WlNoZmFIbHdaWEowZVVSbGMyTnlhWEIwYjNJdVkyOXVabWxuZFhKaGRHbHZiaWtwTzF4dUlDQWdJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibVpwWjNWeVlYUnBiMjRnUFNCZmFIbHdaWEowZVVSbGMyTnlhWEIwYjNJdVkyOXVabWxuZFhKaGRHbHZianRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhkR2x2Ymk1eWRXNTBhVzFsVlZKTUlEMGdYM1JvYVhNdWNuVnVkR2x0WlZWU1REdGNibHh1SUNBZ0lDQWdJQ0F2THlCWFpTQjNhV3hzSUdSbGNHeHZlU0IwYUdVZ1kyOXRjRzl1Wlc1MElDMGdjM1JsY0NBeE55QnZaaUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2Y21WVVNFbE9TeTF3Y205cVpXTjBMMk52Y21VdFpuSmhiV1YzYjNKckwySnNiMkl2YldGemRHVnlMMlJ2WTNNdmMzQmxZM012Y25WdWRHbHRaUzlrZVc1aGJXbGpMWFpwWlhjdlltRnphV056TDJSbGNHeHZlUzFvZVhCbGNuUjVMbTFrSUhKcFoyaDBJRzV2ZHk1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5b2VYQmxjblI1VTJGdVpHSnZlQzVrWlhCc2IzbERiMjF3YjI1bGJuUW9YMmg1Y0dWeWRIbFRiM1Z5WTJWUVlXTnJZV2RsTG5OdmRYSmpaVU52WkdVc0lGOW9lWEJsY25SNVZWSk1MQ0JqYjI1bWFXZDFjbUYwYVc5dUtUdGNiaUFnSUNBZ0lIMHBYRzRnSUNBZ0lDQXVkR2hsYmlobWRXNWpkR2x2Ymloa1pYQnNiM2xEYjIxd2IyNWxiblJUZEdGMGRYTXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVwYm1adktDYzNPaUJFWlhCc2Iza2dZMjl0Y0c5dVpXNTBJSE4wWVhSMWN5Qm1iM0lnYUhsd1pYSjBlVG9nSnl3Z1pHVndiRzk1UTI5dGNHOXVaVzUwVTNSaGRIVnpLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QjNaU0JvWVhabElHTnZiWEJzWlhSbFpDQnpkR1Z3SURFNUlHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXlaVlJJU1U1TExYQnliMnBsWTNRdlkyOXlaUzFtY21GdFpYZHZjbXN2WW14dllpOXRZWE4wWlhJdlpHOWpjeTl6Y0dWamN5OXlkVzUwYVcxbEwyUjVibUZ0YVdNdGRtbGxkeTlpWVhOcFkzTXZaR1Z3Ykc5NUxXaDVjR1Z5ZEhrdWJXUWdjbWxuYUhRZ2JtOTNMbHh1WEc0Z0lDQWdJQ0FnSUM4dklFRmtaQ0IwYUdVZ2JXVnpjMkZuWlNCaWRYTWdiR2x6ZEdWdVpYSWdkRzhnZEdobElHRndjRk5oYm1SaWIzZ2diM0lnYUhsd1pYSjBVMkZ1WkdKdmVEdGNiaUFnSUNBZ0lDQWdYM1JvYVhNdWJXVnpjMkZuWlVKMWN5NWhaR1JNYVhOMFpXNWxjaWhmYUhsd1pYSjBlVlZTVEN3Z1puVnVZM1JwYjI0b2JYTm5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ1gyaDVjR1Z5ZEhsVFlXNWtZbTk0TG5CdmMzUk5aWE56WVdkbEtHMXpaeWs3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUhkbElHaGhkbVVnWTI5dGNHeGxkR1ZrSUhOMFpYQWdNakFnYjJZZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzSmxWRWhKVGtzdGNISnZhbVZqZEM5amIzSmxMV1p5WVcxbGQyOXlheTlpYkc5aUwyMWhjM1JsY2k5a2IyTnpMM053WldOekwzSjFiblJwYldVdlpIbHVZVzFwWXkxMmFXVjNMMkpoYzJsamN5OWtaWEJzYjNrdGFIbHdaWEowZVM1dFpDQnlhV2RvZENCdWIzY3VYRzRnSUNBZ0lDQWdJR3hsZENCb2VYQmxjblI1SUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJSEoxYm5ScGJXVkllWEJsY25SNVZWSk1PaUJmYUhsd1pYSjBlVlZTVEN4Y2JpQWdJQ0FnSUNBZ0lDQnpkR0YwZFhNNklHUmxjR3h2ZVVOdmJYQnZibVZ1ZEZOMFlYUjFjMXh1SUNBZ0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2FIbHdaWEowZVNrN1hHNWNiaUFnSUNBZ0lDQWdMeThnZDJVZ2FHRjJaU0JqYjIxd2JHVjBaV1FnYzNSbGNDQXlNU0JvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2Y21WVVNFbE9TeTF3Y205cVpXTjBMMk52Y21VdFpuSmhiV1YzYjNKckwySnNiMkl2YldGemRHVnlMMlJ2WTNNdmMzQmxZM012Y25WdWRHbHRaUzlrZVc1aGJXbGpMWFpwWlhjdlltRnphV056TDJSbGNHeHZlUzFvZVhCbGNuUjVMbTFrSUhKcFoyaDBJRzV2ZHk1Y2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KeTB0TFMwdExTMHRMUzB0TFMwdExTMHRMU0JGVGtRZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0SnlrN1hHNGdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0xtTmhkR05vS0dWeWNtOXlVbVZoYzI5dUtUdGNibHh1SUNBZ0lIMHBPMXh1WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCRVpYQnNiM2tnVTNSMVlpQm1jbTl0SUVOaGRHRnNiMmQxWlNCVlVrd2diM0lnWkc5dFlXbHVJSFZ5YkZ4dUlDQXFJRUJ3WVhKaGJTQWdlMVZTVEM1VlVreDlJQ0FnSUNCa2IyMWhhVzRnSUNBZ0lDQWdJQ0FnWkc5dFlXbHVYRzRnSUNvdlhHNGdJR3h2WVdSVGRIVmlLSEJ5YjNSdmMzUjFZbFZTVENrZ2UxeHVYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUdsbUlDZ2hjSEp2ZEc5emRIVmlWVkpNS1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjJSdmJXRnBiaUJ3WVhKaGJXVjBaWElnYVhNZ2JtVmxaR1ZrSnlrN1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1NCN1hHNWNiaUFnSUNBZ0lHeGxkQ0JrYjIxaGFXNGdQU0JrYVhacFpHVlZVa3dvY0hKdmRHOXpkSFZpVlZKTUtTNWtiMjFoYVc0N1hHNWNiaUFnSUNBZ0lHbG1JQ2doWkc5dFlXbHVLU0I3WEc0Z0lDQWdJQ0FnSUdSdmJXRnBiaUE5SUhCeWIzUnZjM1IxWWxWU1REdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdiR1YwSUY5emRIVmlVMkZ1WkdKdmVEdGNiaUFnSUNBZ0lHeGxkQ0JmYzNSMVlrUmxjMk55YVhCMGIzSTdYRzRnSUNBZ0lDQnNaWFFnWDNKMWJuUnBiV1ZRY205MGIxTjBkV0pWVWt3N1hHNGdJQ0FnSUNCc1pYUWdYM04wZFdKVGIzVnlZMlZRWVdOcllXZGxPMXh1WEc0Z0lDQWdJQ0JzWlhRZ1pYSnliM0pTWldGemIyNGdQU0JtZFc1amRHbHZiaWh5WldGemIyNHBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ25VMjl0WlhSb2FXNW5JR1poYVd4bFpDQnZiaUIwYUdVZ1pHVndiRzk1SUc5bUlIQnliM1J2WTI5c2MzUjFZam9nSnl3Z2NtVmhjMjl1S1R0Y2JpQWdJQ0FnSUNBZ2NtVnFaV04wS0hKbFlYTnZiaWs3WEc0Z0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNBdkx5QkVhWE5qYjNabGNpQlFjbTkwYjJOdmJDQlRkSFZpWEc0Z0lDQWdJQ0JqYjI1emIyeGxMbWx1Wm04b0p5MHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMGdVSEp2ZEc5VGRIVmlJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnhjYmljcE8xeHVJQ0FnSUNBZ1kyOXVjMjlzWlM1cGJtWnZLQ2RFYVhOamIzWmxjaUJ2Y2lCRGNtVmhkR1VnWVNCdVpYY2dVSEp2ZEc5VGRIVmlJR1p2Y2lCa2IyMWhhVzQ2SUNjc0lHUnZiV0ZwYmlrN1hHNGdJQ0FnSUNCZmRHaHBjeTV5WldkcGMzUnllUzVrYVhOamIzWmxjbEJ5YjNSdmMzUjFZaWhrYjIxaGFXNHBMblJvWlc0b1puVnVZM1JwYjI0b2NuVnVkR2x0WlZCeWIzUnZVM1IxWWxWU1RDa2dlMXh1SUNBZ0lDQWdJQ0F2THlCSmN5QnlaV2RwYzNSbFpEOWNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNXBibVp2S0NjeExpQlFjbTkwYnlCVGRIVmlJRVJwYzJOdmRtVnlaV1E2SUNjc0lISjFiblJwYldWUWNtOTBiMU4wZFdKVlVrd3BPMXh1WEc0Z0lDQWdJQ0FnSUM4dklIZGxJR2hoZG1VZ1kyOXRjR3hsZEdWa0lITjBaWEFnTWlCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmNtVlVTRWxPU3kxd2NtOXFaV04wTDJOdmNtVXRabkpoYldWM2IzSnJMMkpzYjJJdmJXRnpkR1Z5TDJSdlkzTXZjM0JsWTNNdmNuVnVkR2x0WlM5a2VXNWhiV2xqTFhacFpYY3ZZbUZ6YVdOekwyUmxjR3h2ZVMxd2NtOTBiM04wZFdJdWJXUmNibHh1SUNBZ0lDQWdJQ0F2THlCVVQwUlBPaUJEYUdWamF5QnBaaUIwYUdVZ2MzUmhkSFZ6SUdseklITmhkbVZrSUdsdUlIUm9aU0J6ZEdGMGRYTWdiMllnYzJGdVpHSnZlRHRjYmlBZ0lDQWdJQ0FnYkdWMElITjBkV0lnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdjblZ1ZEdsdFpWQnliM1J2VTNSMVlsVlNURG9nY25WdWRHbHRaVkJ5YjNSdlUzUjFZbFZTVEN4Y2JpQWdJQ0FnSUNBZ0lDQnpkR0YwZFhNNklDZGtaWEJzYjNsbFpDZGNiaUFnSUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnSUNCeVpYTnZiSFpsS0hOMGRXSXBPMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbWx1Wm04b0p5MHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMGdSVTVFSUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4Y2JpY3BPMXh1SUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQzVqWVhSamFDaG1kVzVqZEdsdmJpaHlaV0Z6YjI0cElIdGNibHh1SUNBZ0lDQWdJQ0F2THlCcGN5QnViM1FnY21WbmFYTjBaV1EvWEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1YVc1bWJ5Z25NUzRnVUhKdmRHOGdVM1IxWWlCdWIzUWdabTkxYm1RNkp5d2djbVZoYzI5dUtUdGNibHh1SUNBZ0lDQWdJQ0F2THlCM1pTQm9ZWFpsSUdOdmJYQnNaWFJsWkNCemRHVndJRE1nYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNKbFZFaEpUa3N0Y0hKdmFtVmpkQzlqYjNKbExXWnlZVzFsZDI5eWF5OWliRzlpTDIxaGMzUmxjaTlrYjJOekwzTndaV056TDNKMWJuUnBiV1V2WkhsdVlXMXBZeTEyYVdWM0wySmhjMmxqY3k5a1pYQnNiM2t0Y0hKdmRHOXpkSFZpTG0xa1hHNWNiaUFnSUNBZ0lDQWdMeThnZDJVZ2JtVmxaQ0IwYnlCblpYUWdVSEp2ZEc5VGRIVmlJR1JsYzJOeWFYQjBiM0lnYzNSbGNDQTBJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzl5WlZSSVNVNUxMWEJ5YjJwbFkzUXZZMjl5WlMxbWNtRnRaWGR2Y21zdllteHZZaTl0WVhOMFpYSXZaRzlqY3k5emNHVmpjeTl5ZFc1MGFXMWxMMlI1Ym1GdGFXTXRkbWxsZHk5aVlYTnBZM012WkdWd2JHOTVMWEJ5YjNSdmMzUjFZaTV0WkZ4dUlDQWdJQ0FnSUNCZmRHaHBjeTV5ZFc1MGFXMWxRMkYwWVd4dlozVmxMbWRsZEZOMGRXSkVaWE5qY21sd2RHOXlLSEJ5YjNSdmMzUjFZbFZTVENsY2JpQWdJQ0FnSUNBZ0xuUm9aVzRvWm5WdVkzUnBiMjRvYzNSMVlrUmxjMk55YVhCMGIzSXBJSHRjYmx4dUlDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWFXNW1ieWduTWk0Z2NtVjBkWEp1SUhSb1pTQlFjbTkwYjFOMGRXSWdaR1Z6WTNKcGNIUnZjam9uTENCemRIVmlSR1Z6WTNKcGNIUnZjaWs3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUIzWlNCb1lYWmxJR052YlhCc1pYUmxaQ0J6ZEdWd0lEVWdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM0psVkVoSlRrc3RjSEp2YW1WamRDOWpiM0psTFdaeVlXMWxkMjl5YXk5aWJHOWlMMjFoYzNSbGNpOWtiMk56TDNOd1pXTnpMM0oxYm5ScGJXVXZaSGx1WVcxcFl5MTJhV1YzTDJKaGMybGpjeTlrWlhCc2Iza3RjSEp2ZEc5emRIVmlMbTFrWEc0Z0lDQWdJQ0FnSUNBZ1gzTjBkV0pFWlhOamNtbHdkRzl5SUQwZ2MzUjFZa1JsYzJOeWFYQjBiM0k3WEc1Y2JpQWdJQ0FnSUNBZ0lDQnNaWFFnYzI5MWNtTmxVR0ZqYTJGblpWVlNUQ0E5SUhOMGRXSkVaWE5qY21sd2RHOXlMbk52ZFhKalpWQmhZMnRoWjJWVlVrdzdYRzVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9jMjkxY21ObFVHRmphMkZuWlZWU1RDQTlQVDBnSnk5emIzVnlZMlZRWVdOcllXZGxKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlITjBkV0pFWlhOamNtbHdkRzl5TG5OdmRYSmpaVkJoWTJ0aFoyVTdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdMeThnZDJVZ2JtVmxaQ0IwYnlCblpYUWdVSEp2ZEc5VGRIVmlJRk52ZFhKalpTQmpiMlJsSUdaeWIyMGdaR1Z6WTNKcGNIUnZjaUF0SUhOMFpYQWdOaUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2Y21WVVNFbE9TeTF3Y205cVpXTjBMMk52Y21VdFpuSmhiV1YzYjNKckwySnNiMkl2YldGemRHVnlMMlJ2WTNNdmMzQmxZM012Y25WdWRHbHRaUzlrZVc1aGJXbGpMWFpwWlhjdlltRnphV056TDJSbGNHeHZlUzF3Y205MGIzTjBkV0l1YldSY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1gzUm9hWE11Y25WdWRHbHRaVU5oZEdGc2IyZDFaUzVuWlhSVGIzVnlZMlZRWVdOcllXZGxSbkp2YlZWU1RDaHpiM1Z5WTJWUVlXTnJZV2RsVlZKTUtUdGNiaUFnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnTG1OaGRHTm9LR1Z5Y205eVVtVmhjMjl1S1Z4dUlDQWdJQ0FnSUNBdWRHaGxiaWhtZFc1amRHbHZiaWh6ZEhWaVUyOTFjbU5sVUdGamEyRm5aU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWFXNW1ieWduTXk0Z2NtVjBkWEp1SUhSb1pTQlFjbTkwYjFOMGRXSWdVMjkxY21ObElFTnZaR1U2SUNjc0lITjBkV0pUYjNWeVkyVlFZV05yWVdkbEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dklIZGxJR2hoZG1VZ1kyOXRjR3hsZEdWa0lITjBaWEFnTnlCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmNtVlVTRWxPU3kxd2NtOXFaV04wTDJOdmNtVXRabkpoYldWM2IzSnJMMkpzYjJJdmJXRnpkR1Z5TDJSdlkzTXZjM0JsWTNNdmNuVnVkR2x0WlM5a2VXNWhiV2xqTFhacFpYY3ZZbUZ6YVdOekwyUmxjR3h2ZVMxd2NtOTBiM04wZFdJdWJXUmNibHh1SUNBZ0lDQWdJQ0FnSUY5emRIVmlVMjkxY21ObFVHRmphMkZuWlNBOUlITjBkV0pUYjNWeVkyVlFZV05yWVdkbE8xeHVYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1ZFOUVUem9nUTJobFkyc2diMjRnVUVWUUlDaHdiMnhwWTNrZ1JXNW5hVzVsS1NCcFppQjNaU0J1WldWa0lIUm9aU0J6WVc1a1ltOTRJR0Z1WkNCamFHVmpheUJwWmlCMGFHVWdVMkZ1WkdKdmVDQkdZV04wYjNKNUlHaGhkbVVnZEdobElHTnZiblJsZUhRZ2MyRnVaR0p2ZUR0Y2JpQWdJQ0FnSUNBZ0lDQnNaWFFnY0c5c2FXTjVJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjRzlzYVdONU8xeHVJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0F1ZEdobGJpaG1kVzVqZEdsdmJpaHdiMnhwWTNrcElIdGNiaUFnSUNBZ0lDQWdJQ0F2THlCMGFHbHpJSGRwYkd3Z2NtVjBkWEp1SUhSb1pTQnpZVzVrWW05NElHOXlJRzl1WlNCd2NtOXRhWE5sSUhSdklHZGxkRk5oYm1SaWIzZzdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRjkwYUdsekxuSmxaMmx6ZEhKNUxtZGxkRk5oYm1SaWIzZ29aRzl0WVdsdUtUdGNiaUFnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnTG5Sb1pXNG9ablZ1WTNScGIyNG9jM1IxWWxOaGJtUmliM2dwSUh0Y2JseHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVhVzVtYnlnbk5DNGdhV1lnZEdobElITmhibVJpYjNnZ2FYTWdjbVZuYVhOMFpYSmxaQ0IwYUdWdUlISmxkSFZ5YmlCMGFHVWdjMkZ1WkdKdmVDQW5MQ0J6ZEhWaVUyRnVaR0p2ZUNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0F2THlCM1pTQm9ZWFpsSUdOdmJYQnNaWFJsWkNCemRHVndJSGg0ZUNCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmNtVlVTRWxPU3kxd2NtOXFaV04wTDJOdmNtVXRabkpoYldWM2IzSnJMMkpzYjJJdmJXRnpkR1Z5TDJSdlkzTXZjM0JsWTNNdmNuVnVkR2x0WlM5a2VXNWhiV2xqTFhacFpYY3ZZbUZ6YVdOekwyUmxjR3h2ZVMxd2NtOTBiM04wZFdJdWJXUmNibHh1SUNBZ0lDQWdJQ0FnSUY5emRIVmlVMkZ1WkdKdmVDQTlJSE4wZFdKVFlXNWtZbTk0TzF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCemRIVmlVMkZ1WkdKdmVEdGNiaUFnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnTG1OaGRHTm9LR1oxYm1OMGFXOXVLSEpsWVhOdmJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1YVc1bWJ5Z25OUzRnVTJGdVpHSnZlQ0IzWVhNZ2JtOTBJR1p2ZFc1a0xDQmpjbVZoZEdsdVp5QmhJRzVsZHlCdmJtVWdKeXdnY21WaGMyOXVLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDOHZJR05vWldOcklHbG1JSFJvWlNCellXNWtZbTk0SUdseklISmxaMmx6ZEdWa0lHWnZjaUIwYUdseklITjBkV0lnWkdWelkzSnBjSFJ2Y2lCMWNtdzdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1RXRnJaU0JUZEdWd2N5QjRlSGdnTFMwdElIaDRlRnh1SUNBZ0lDQWdJQ0FnSUM4dklFbHVjM1JoYm5ScFlYUmxJSFJvWlNCVFlXNWtZbTk0WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJSE5oYm1SaWIzZ2dQU0JmZEdocGN5NXlkVzUwYVcxbFJtRmpkRzl5ZVM1amNtVmhkR1ZUWVc1a1ltOTRLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2MyRnVaR0p2ZUM1aFpHUk1hWE4wWlc1bGNpZ25LaWNzSUdaMWJtTjBhVzl1S0cxelp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11YldWemMyRm5aVUoxY3k1d2IzTjBUV1Z6YzJGblpTaHRjMmNwTzF4dUlDQWdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOaGJtUmliM2c3WEc0Z0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lDNTBhR1Z1S0daMWJtTjBhVzl1S0hOaGJtUmliM2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSnpZdUlISmxkSFZ5YmlCMGFHVWdjMkZ1WkdKdmVDQnBibk4wWVc1alpTQmhibVFnY21WbmFYTjBaWEluTENCellXNWtZbTk0TENBbmRHOGdaRzl0WVdsdUlDY3NJR1J2YldGcGJpazdYRzVjYmlBZ0lDQWdJQ0FnSUNCZmMzUjFZbE5oYm1SaWIzZ2dQU0J6WVc1a1ltOTRPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdkMlVnYm1WbFpDQnlaV2RwYzNSbGNpQnpkSFZpSUc5dUlISmxaMmx6ZEhKNUlDMGdjM1JsY0NCNGVIZ2dhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM0psVkVoSlRrc3RjSEp2YW1WamRDOWpiM0psTFdaeVlXMWxkMjl5YXk5aWJHOWlMMjFoYzNSbGNpOWtiMk56TDNOd1pXTnpMM0oxYm5ScGJXVXZaSGx1WVcxcFl5MTJhV1YzTDJKaGMybGpjeTlrWlhCc2Iza3RjSEp2ZEc5emRIVmlMbTFrWEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5MGFHbHpMbkpsWjJsemRISjVMbkpsWjJsemRHVnlVM1IxWWloZmMzUjFZbE5oYm1SaWIzZ3NJR1J2YldGcGJpazdYRzRnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0FnSUM1MGFHVnVLR1oxYm1OMGFXOXVLSEoxYm5ScGJXVlFjbTkwYjFOMGRXSlZVa3dwSUh0Y2JseHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVhVzVtYnlnbk55NGdjbVYwZFhKdUlIUm9aU0J5ZFc1MGFXMWxJSEJ5YjNSdmMzUjFZaUIxY213NklDY3NJSEoxYm5ScGJXVlFjbTkwYjFOMGRXSlZVa3dwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdMeThnZDJVZ2FHRjJaU0JqYjIxd2JHVjBaV1FnYzNSbGNDQjRlSGdnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNKbFZFaEpUa3N0Y0hKdmFtVmpkQzlqYjNKbExXWnlZVzFsZDI5eWF5OWliRzlpTDIxaGMzUmxjaTlrYjJOekwzTndaV056TDNKMWJuUnBiV1V2WkhsdVlXMXBZeTEyYVdWM0wySmhjMmxqY3k5a1pYQnNiM2t0Y0hKdmRHOXpkSFZpTG0xa1hHNWNiaUFnSUNBZ0lDQWdJQ0JmY25WdWRHbHRaVkJ5YjNSdlUzUjFZbFZTVENBOUlISjFiblJwYldWUWNtOTBiMU4wZFdKVlVrdzdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QkZlSFJsYm1RZ2IzSnBaMmx1WVd3Z2FIbHdaWEowZVNCamIyNW1hV2QxY21GMGFXOXVPMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQmpiMjVtYVdkMWNtRjBhVzl1SUQwZ2UzMDdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmxiWEIwZVU5aWFtVmpkQ2hmYzNSMVlrUmxjMk55YVhCMGIzSXVZMjl1Wm1sbmRYSmhkR2x2YmlrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibVpwWjNWeVlYUnBiMjRnUFNCUFltcGxZM1F1WVhOemFXZHVLSHQ5TENCS1UwOU9MbkJoY25ObEtGOXpkSFZpUkdWelkzSnBjSFJ2Y2k1amIyNW1hV2QxY21GMGFXOXVLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym1acFozVnlZWFJwYjI0Z1BTQmZjM1IxWWtSbGMyTnlhWEIwYjNJdVkyOXVabWxuZFhKaGRHbHZianRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQmpiMjVtYVdkMWNtRjBhVzl1TG5KMWJuUnBiV1ZWVWt3Z1BTQmZkR2hwY3k1eWRXNTBhVzFsVlZKTU8xeHVYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1JHVndiRzk1SUVOdmJYQnZibVZ1ZENCemRHVndJSGg0ZUZ4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmMzUjFZbE5oYm1SaWIzZ3VaR1Z3Ykc5NVEyOXRjRzl1Wlc1MEtGOXpkSFZpVTI5MWNtTmxVR0ZqYTJGblpTNXpiM1Z5WTJWRGIyUmxMQ0J5ZFc1MGFXMWxVSEp2ZEc5VGRIVmlWVkpNTENCamIyNW1hV2QxY21GMGFXOXVLVHRjYmlBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUNBZ0xuUm9aVzRvWm5WdVkzUnBiMjRvWkdWd2JHOTVRMjl0Y0c5dVpXNTBVM1JoZEhWektTQjdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVwYm1adktDYzRPaUJ5WlhSMWNtNGdaR1Z3Ykc5NUlHTnZiWEJ2Ym1WdWRDQm1iM0lnYzJGdVpHSnZlQ0J6ZEdGMGRYTTZJQ2NzSUdSbGNHeHZlVU52YlhCdmJtVnVkRk4wWVhSMWN5azdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QjNaU0JvWVhabElHTnZiWEJzWlhSbFpDQnpkR1Z3SUhoNGVDQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZjbVZVU0VsT1N5MXdjbTlxWldOMEwyTnZjbVV0Wm5KaGJXVjNiM0pyTDJKc2IySXZiV0Z6ZEdWeUwyUnZZM012YzNCbFkzTXZjblZ1ZEdsdFpTOWtlVzVoYldsakxYWnBaWGN2WW1GemFXTnpMMlJsY0d4dmVTMXdjbTkwYjNOMGRXSXViV1JjYmx4dUlDQWdJQ0FnSUNBZ0lDOHZJRUZrWkNCMGFHVWdiV1Z6YzJGblpTQmlkWE1nYkdsemRHVnVaWEpjYmlBZ0lDQWdJQ0FnSUNCZmRHaHBjeTV0WlhOellXZGxRblZ6TG1Ga1pFeHBjM1JsYm1WeUtGOXlkVzUwYVcxbFVISnZkRzlUZEhWaVZWSk1MQ0JtZFc1amRHbHZiaWh0YzJjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5emRIVmlVMkZ1WkdKdmVDNXdiM04wVFdWemMyRm5aU2h0YzJjcE8xeHVJQ0FnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdMeThnZDJVZ2FHRjJaU0JqYjIxd2JHVjBaV1FnYzNSbGNDQjRlSGdnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNKbFZFaEpUa3N0Y0hKdmFtVmpkQzlqYjNKbExXWnlZVzFsZDI5eWF5OWliRzlpTDIxaGMzUmxjaTlrYjJOekwzTndaV056TDNKMWJuUnBiV1V2WkhsdVlXMXBZeTEyYVdWM0wySmhjMmxqY3k5a1pYQnNiM2t0Y0hKdmRHOXpkSFZpTG0xa1hHNWNiaUFnSUNBZ0lDQWdJQ0F2THlCTWIyRmtJRk4wZFdJZ1puVnVZM1JwYjI0Z2NtVnpiMngyWldRZ2QybDBhQ0J6ZFdOalpYTnpPMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQnpkSFZpSUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY25WdWRHbHRaVkJ5YjNSdlUzUjFZbFZTVERvZ1gzSjFiblJwYldWUWNtOTBiMU4wZFdKVlVrd3NYRzRnSUNBZ0lDQWdJQ0FnSUNCemRHRjBkWE02SUdSbGNHeHZlVU52YlhCdmJtVnVkRk4wWVhSMWMxeHVJQ0FnSUNBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtITjBkV0lwTzF4dUlDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWFXNW1ieWduTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFNCRlRrUWdMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRYRnh1SnlrN1hHNWNiaUFnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnTG1OaGRHTm9LR1Z5Y205eVVtVmhjMjl1S1R0Y2JseHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQjlLVHRjYmx4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNvZ1JHVndiRzk1SUZOMGRXSWdabkp2YlNCRFlYUmhiRzluZFdVZ1ZWSk1JRzl5SUdSdmJXRnBiaUIxY214Y2JpQWdLaUJBY0dGeVlXMGdJSHRWVWt3dVZWSk1mU0FnSUNBZ1pHOXRZV2x1SUNBZ0lDQWdJQ0FnSUdSdmJXRnBibHh1SUNBcUwxeHVJQ0JzYjJGa1NXUndVSEp2ZUhrb2FXUndVSEp2ZUhsVlVrd3BJSHRjYmx4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQnBaaUFvSVdsa2NGQnliM2g1VlZKTUtTQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxUm9aU0JKUkZBZ1VISnZlSGtnVlZKTUlHbHpJR0VnYm1WbFpHVmtJSEJoY21GdFpYUmxjaXdnWTI5MWJHUWdZbVVnWVNCRVQwMUJTVTRnYjNJZ1lTQlZVa3duS1R0Y2JseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmloeVpYTnZiSFpsTENCeVpXcGxZM1FwSUh0Y2JseHVJQ0FnSUNBZ2JHVjBJR1J2YldGcGJpQTlJR1JwZG1sa1pWVlNUQ2hwWkhCUWNtOTRlVlZTVENrdVpHOXRZV2x1TzF4dVhHNGdJQ0FnSUNCcFppQW9JV1J2YldGcGJpa2dlMXh1SUNBZ0lDQWdJQ0JrYjIxaGFXNGdQU0JwWkhCUWNtOTRlVlZTVER0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2JHVjBJRjl3Y205NGVWTmhibVJpYjNnN1hHNGdJQ0FnSUNCc1pYUWdYM0J5YjNoNVJHVnpZM0pwY0hSdmNqdGNiaUFnSUNBZ0lHeGxkQ0JmY25WdWRHbHRaVWxrY0ZCeWIzaDVWVkpNTzF4dUlDQWdJQ0FnYkdWMElGOXdjbTk0ZVZOdmRYSmpaVkJoWTJ0aFoyVTdYRzVjYmlBZ0lDQWdJR3hsZENCbGNuSnZjbEpsWVhOdmJpQTlJR1oxYm1OMGFXOXVLSEpsWVhOdmJpa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDZFRiMjFsZEdocGJtY2dabUZwYkdWa0lHOXVJSFJvWlNCa1pYQnNiM2tnYjJZZ1NXUndVSEp2ZUhrNklDY3NJSEpsWVhOdmJpazdYRzRnSUNBZ0lDQWdJSEpsYW1WamRDaHlaV0Z6YjI0cE8xeHVJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdMeThnUkdselkyOTJaWElnU1VSUVVISnZlSGxjYmlBZ0lDQWdJR052Ym5OdmJHVXVhVzVtYnlnbkxTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTQkpSRkFnVUhKdmVIa2dSR1Z3Ykc5NUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeGNiaWNwTzF4dUlDQWdJQ0FnWTI5dWMyOXNaUzVwYm1adktDZEVhWE5qYjNabGNpQnZjaUJEY21WaGRHVWdZU0J1WlhjZ1NXUndVSEp2ZUhrZ1ptOXlJR1J2YldGcGJpOVZVa3c2SUNjc0lHUnZiV0ZwYmlrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWDNSb2FYTXVjbVZuYVhOMGNua3VaR2x6WTI5MlpYSkpaSEJRY205NGVTaGtiMjFoYVc0cExuUm9aVzRvWm5WdVkzUnBiMjRvY25WdWRHbHRaVWxrY0ZCeWIzaDVWVkpNS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRWx6SUhKbFoybHpkR1ZrUDF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG1sdVptOG9KekV1SUVsRVVGQnliM2g1SUVScGMyTnZkbVZ5WldRNklDY3NJSEoxYm5ScGJXVkpaSEJRY205NGVWVlNUQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdkMlVnYUdGMlpTQmpiMjF3YkdWMFpXUWdjM1JsY0NBeUlHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXlaVlJJU1U1TExYQnliMnBsWTNRdlkyOXlaUzFtY21GdFpYZHZjbXN2WW14dllpOXRZWE4wWlhJdlpHOWpjeTl6Y0dWamN5OXlkVzUwYVcxbEwyUjVibUZ0YVdNdGRtbGxkeTlpWVhOcFkzTXZaR1Z3Ykc5NUxYQnliM1J2YzNSMVlpNXRaRnh1WEc0Z0lDQWdJQ0FnSUM4dklGUlBSRTg2SUVOb1pXTnJJR2xtSUhSb1pTQnpkR0YwZFhNZ2FYTWdjMkYyWldRZ2FXNGdkR2hsSUhOMFlYUjFjeUJ2WmlCellXNWtZbTk0TzF4dUlDQWdJQ0FnSUNCc1pYUWdhV1J3VUhKdmVIa2dQU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NuVnVkR2x0WlVsa2NGQnliM2g1VlZKTU9pQnlkVzUwYVcxbFNXUndVSEp2ZUhsVlVrd3NYRzRnSUNBZ0lDQWdJQ0FnYzNSaGRIVnpPaUFuWkdWd2JHOTVaV1FuWEc0Z0lDQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHBaSEJRY205NGVTazdYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXVhVzVtYnlnbkxTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTQkZUa1FnTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEZ4dUp5azdYRzRnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdMbU5oZEdOb0tHWjFibU4wYVc5dUtISmxZWE52YmlrZ2UxeHVYRzRnSUNBZ0lDQWdJQzh2SUdseklHNXZkQ0J5WldkcGMzUmxaRDljYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVwYm1adktDY3hMaUJKWkhCUWNtOTRlU0J1YjNRZ1ptOTFibVE2Snl3Z2NtVmhjMjl1S1R0Y2JseHVJQ0FnSUNBZ0lDQXZMeUIzWlNCb1lYWmxJR052YlhCc1pYUmxaQ0J6ZEdWd0lETWdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM0psVkVoSlRrc3RjSEp2YW1WamRDOWpiM0psTFdaeVlXMWxkMjl5YXk5aWJHOWlMMjFoYzNSbGNpOWtiMk56TDNOd1pXTnpMM0oxYm5ScGJXVXZaSGx1WVcxcFl5MTJhV1YzTDJKaGMybGpjeTlrWlhCc2Iza3RjSEp2ZEc5emRIVmlMbTFrWEc1Y2JpQWdJQ0FnSUNBZ0x5OGdkMlVnYm1WbFpDQjBieUJuWlhRZ1VISnZkRzlUZEhWaUlHUmxjMk55YVhCMGIzSWdjM1JsY0NBMElHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXlaVlJJU1U1TExYQnliMnBsWTNRdlkyOXlaUzFtY21GdFpYZHZjbXN2WW14dllpOXRZWE4wWlhJdlpHOWpjeTl6Y0dWamN5OXlkVzUwYVcxbEwyUjVibUZ0YVdNdGRtbGxkeTlpWVhOcFkzTXZaR1Z3Ykc5NUxYQnliM1J2YzNSMVlpNXRaRnh1SUNBZ0lDQWdJQ0JmZEdocGN5NXlkVzUwYVcxbFEyRjBZV3h2WjNWbExtZGxkRWxrY0ZCeWIzaDVSR1Z6WTNKcGNIUnZjaWhwWkhCUWNtOTRlVlZTVENsY2JpQWdJQ0FnSUNBZ0xuUm9aVzRvWm5WdVkzUnBiMjRvY0hKdmVIbEVaWE5qY21sd2RHOXlLU0I3WEc1Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSnpJdUlGSmxkSFZ5YmlCMGFHVWdTVVJRVUhKdmVIa2daR1Z6WTNKcGNIUnZjam9uTENCd2NtOTRlVVJsYzJOeWFYQjBiM0lwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdMeThnZDJVZ2FHRjJaU0JqYjIxd2JHVjBaV1FnYzNSbGNDQTFJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzl5WlZSSVNVNUxMWEJ5YjJwbFkzUXZZMjl5WlMxbWNtRnRaWGR2Y21zdllteHZZaTl0WVhOMFpYSXZaRzlqY3k5emNHVmpjeTl5ZFc1MGFXMWxMMlI1Ym1GdGFXTXRkbWxsZHk5aVlYTnBZM012WkdWd2JHOTVMWEJ5YjNSdmMzUjFZaTV0WkZ4dUlDQWdJQ0FnSUNBZ0lGOXdjbTk0ZVVSbGMyTnlhWEIwYjNJZ1BTQndjbTk0ZVVSbGMyTnlhWEIwYjNJN1hHNWNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2MyOTFjbU5sVUdGamEyRm5aVlZTVENBOUlIQnliM2g1UkdWelkzSnBjSFJ2Y2k1emIzVnlZMlZRWVdOcllXZGxWVkpNTzF4dVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hOdmRYSmpaVkJoWTJ0aFoyVlZVa3dnUFQwOUlDY3ZjMjkxY21ObFVHRmphMkZuWlNjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ3Y205NGVVUmxjMk55YVhCMGIzSXVjMjkxY21ObFVHRmphMkZuWlR0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QjNaU0J1WldWa0lIUnZJR2RsZENCUWNtOTBiMU4wZFdJZ1UyOTFjbU5sSUdOdlpHVWdabkp2YlNCa1pYTmpjbWx3ZEc5eUlDMGdjM1JsY0NBMklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXlaVlJJU1U1TExYQnliMnBsWTNRdlkyOXlaUzFtY21GdFpYZHZjbXN2WW14dllpOXRZWE4wWlhJdlpHOWpjeTl6Y0dWamN5OXlkVzUwYVcxbEwyUjVibUZ0YVdNdGRtbGxkeTlpWVhOcFkzTXZaR1Z3Ykc5NUxYQnliM1J2YzNSMVlpNXRaRnh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJmZEdocGN5NXlkVzUwYVcxbFEyRjBZV3h2WjNWbExtZGxkRk52ZFhKalpWQmhZMnRoWjJWR2NtOXRWVkpNS0hOdmRYSmpaVkJoWTJ0aFoyVlZVa3dwTzF4dUlDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0lDQXVZMkYwWTJnb1pYSnliM0pTWldGemIyNHBYRzRnSUNBZ0lDQWdJQzUwYUdWdUtHWjFibU4wYVc5dUtITnZkWEpqWlZCaFkydGhaMlVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSnpNdUlISmxkSFZ5YmlCMGFHVWdTVVJRVUhKdmVIa2djMjkxY21ObElIQmhZMnRoWjJVNklDY3NJSE52ZFhKalpWQmhZMnRoWjJVcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2QyVWdhR0YyWlNCamIyMXdiR1YwWldRZ2MzUmxjQ0EzSUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5eVpWUklTVTVMTFhCeWIycGxZM1F2WTI5eVpTMW1jbUZ0WlhkdmNtc3ZZbXh2WWk5dFlYTjBaWEl2Wkc5amN5OXpjR1ZqY3k5eWRXNTBhVzFsTDJSNWJtRnRhV010ZG1sbGR5OWlZWE5wWTNNdlpHVndiRzk1TFhCeWIzUnZjM1IxWWk1dFpGeHVYRzRnSUNBZ0lDQWdJQ0FnWDNCeWIzaDVVMjkxY21ObFVHRmphMkZuWlNBOUlITnZkWEpqWlZCaFkydGhaMlU3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJVVDBSUE9pQkRhR1ZqYXlCdmJpQlFSVkFnS0hCdmJHbGplU0JGYm1kcGJtVXBJR2xtSUhkbElHNWxaV1FnZEdobElITmhibVJpYjNnZ1lXNWtJR05vWldOcklHbG1JSFJvWlNCVFlXNWtZbTk0SUVaaFkzUnZjbmtnYUdGMlpTQjBhR1VnWTI5dWRHVjRkQ0J6WVc1a1ltOTRPMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQndiMnhwWTNrZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCd2IyeHBZM2s3WEc0Z0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lDNTBhR1Z1S0daMWJtTjBhVzl1S0hCdmJHbGplU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZJSFJvYVhNZ2QybHNiQ0J5WlhSMWNtNGdkR2hsSUhOaGJtUmliM2dnYjNJZ2IyNWxJSEJ5YjIxcGMyVWdkRzhnWjJWMFUyRnVaR0p2ZUR0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1gzUm9hWE11Y21WbmFYTjBjbmt1WjJWMFUyRnVaR0p2ZUNoa2IyMWhhVzRwTzF4dUlDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0lDQXVkR2hsYmlobWRXNWpkR2x2Ymlod2NtOTRlVk5oYm1SaWIzZ3BJSHRjYmx4dUlDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWFXNW1ieWduTkM0Z2FXWWdkR2hsSUhOaGJtUmliM2dnYVhNZ2NtVm5hWE4wWlhKbFpDQjBhR1Z1SUhKbGRIVnliaUIwYUdVZ2MyRnVaR0p2ZUNjc0lIQnliM2g1VTJGdVpHSnZlQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQmZjSEp2ZUhsVFlXNWtZbTk0SUQwZ2NISnZlSGxUWVc1a1ltOTRPMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ3Y205NGVWTmhibVJpYjNnN1hHNGdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQWdJQzVqWVhSamFDaG1kVzVqZEdsdmJpaHlaV0Z6YjI0cElIdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbWx1Wm04b0p6VXVJRk5oYm1SaWIzZ2dkMkZ6SUc1dmRDQm1iM1Z1WkN3Z1kzSmxZWFJwYm1jZ1lTQnVaWGNnYjI1bEp5d2djbVZoYzI5dUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dklHTm9aV05ySUdsbUlIUm9aU0J6WVc1a1ltOTRJR2x6SUhKbFoybHpkR1ZrSUdadmNpQjBhR2x6SUhCeWIzaDVJR1JsYzJOeWFYQjBiM0lnZFhKc08xeHVJQ0FnSUNBZ0lDQWdJQzh2SUUxaGEyVWdVM1JsY0hNZ2VIaDRJQzB0TFNCNGVIaGNiaUFnSUNBZ0lDQWdJQ0F2THlCSmJuTjBZVzUwYVdGMFpTQjBhR1VnVTJGdVpHSnZlRnh1SUNBZ0lDQWdJQ0FnSUd4bGRDQnpZVzVrWW05NElEMGdYM1JvYVhNdWNuVnVkR2x0WlVaaFkzUnZjbmt1WTNKbFlYUmxVMkZ1WkdKdmVDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUhOaGJtUmliM2d1WVdSa1RHbHpkR1Z1WlhJb0p5b25MQ0JtZFc1amRHbHZiaWh0YzJjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbTFsYzNOaFoyVkNkWE11Y0c5emRFMWxjM05oWjJVb2JYTm5LVHRjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ6WVc1a1ltOTRPMXh1SUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnSUNBdWRHaGxiaWhtZFc1amRHbHZiaWh6WVc1a1ltOTRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1cGJtWnZLQ2MyTGlCeVpYUjFjbTRnZEdobElITmhibVJpYjNnZ2FXNXpkR0Z1WTJVZ1lXNWtJSEpsWjJsemRHVnlKeXdnYzJGdVpHSnZlQ3dnSjNSdklHUnZiV0ZwYmlBbkxDQmtiMjFoYVc0cE8xeHVYRzRnSUNBZ0lDQWdJQ0FnWDNCeWIzaDVVMkZ1WkdKdmVDQTlJSE5oYm1SaWIzZzdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QjNaU0J1WldWa0lISmxaMmx6ZEdWeUlITjBkV0lnYjI0Z2NtVm5hWE4wY25rZ0xTQnpkR1Z3SUhoNGVDQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZjbVZVU0VsT1N5MXdjbTlxWldOMEwyTnZjbVV0Wm5KaGJXVjNiM0pyTDJKc2IySXZiV0Z6ZEdWeUwyUnZZM012YzNCbFkzTXZjblZ1ZEdsdFpTOWtlVzVoYldsakxYWnBaWGN2WW1GemFXTnpMMlJsY0d4dmVTMXdjbTkwYjNOMGRXSXViV1JjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWDNSb2FYTXVjbVZuYVhOMGNua3VjbVZuYVhOMFpYSkpaSEJRY205NGVTaHpZVzVrWW05NExDQmtiMjFoYVc0cE8xeHVJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0F1ZEdobGJpaG1kVzVqZEdsdmJpaHlkVzUwYVcxbFNXUndVSEp2ZUhsVlVrd3BJSHRjYmx4dUlDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWFXNW1ieWduTnk0Z1VtVjBkWEp1SUhSb1pTQnlkVzUwYVcxbElFbGtjQ0JRY205NGVTQlZVa3c2SUNjc0lISjFiblJwYldWSlpIQlFjbTk0ZVZWU1RDazdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QjNaU0JvWVhabElHTnZiWEJzWlhSbFpDQnpkR1Z3SUhoNGVDQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZjbVZVU0VsT1N5MXdjbTlxWldOMEwyTnZjbVV0Wm5KaGJXVjNiM0pyTDJKc2IySXZiV0Z6ZEdWeUwyUnZZM012YzNCbFkzTXZjblZ1ZEdsdFpTOWtlVzVoYldsakxYWnBaWGN2WW1GemFXTnpMMlJsY0d4dmVTMXdjbTkwYjNOMGRXSXViV1JjYmx4dUlDQWdJQ0FnSUNBZ0lGOXlkVzUwYVcxbFNXUndVSEp2ZUhsVlVrd2dQU0J5ZFc1MGFXMWxTV1J3VUhKdmVIbFZVa3c3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJGZUhSbGJtUWdiM0pwWjJsdVlXd2dhSGx3WlhKMGVTQmpiMjVtYVdkMWNtRjBhVzl1TzF4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0JqYjI1bWFXZDFjbUYwYVc5dUlEMGdlMzA3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZsYlhCMGVVOWlhbVZqZENoZmNISnZlSGxFWlhOamNtbHdkRzl5TG1OdmJtWnBaM1Z5WVhScGIyNHBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1bWFXZDFjbUYwYVc5dUlEMGdUMkpxWldOMExtRnpjMmxuYmloN2ZTd2dTbE5QVGk1d1lYSnpaU2hmY0hKdmVIbEVaWE5qY21sd2RHOXlMbU52Ym1acFozVnlZWFJwYjI0cEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVabWxuZFhKaGRHbHZiaUE5SUY5d2NtOTRlVVJsYzJOeWFYQjBiM0l1WTI5dVptbG5kWEpoZEdsdmJqdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnWTI5dVptbG5kWEpoZEdsdmJpNXlkVzUwYVcxbFZWSk1JRDBnWDNSb2FYTXVjblZ1ZEdsdFpWVlNURHRjYmx4dUlDQWdJQ0FnSUNBZ0lDOHZJRVJsY0d4dmVTQkRiMjF3YjI1bGJuUWdjM1JsY0NCNGVIaGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdYM0J5YjNoNVUyRnVaR0p2ZUM1a1pYQnNiM2xEYjIxd2IyNWxiblFvWDNCeWIzaDVVMjkxY21ObFVHRmphMkZuWlM1emIzVnlZMlZEYjJSbExDQnlkVzUwYVcxbFNXUndVSEp2ZUhsVlVrd3NJR052Ym1acFozVnlZWFJwYjI0cE8xeHVJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0F1ZEdobGJpaG1kVzVqZEdsdmJpaGtaWEJzYjNsRGIyMXdiMjVsYm5SVGRHRjBkWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSnpnNklISmxkSFZ5YmlCa1pYQnNiM2tnWTI5dGNHOXVaVzUwSUdadmNpQnpZVzVrWW05NElITjBZWFIxY3pvZ0p5d2daR1Z3Ykc5NVEyOXRjRzl1Wlc1MFUzUmhkSFZ6S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQzh2SUhkbElHaGhkbVVnWTI5dGNHeGxkR1ZrSUhOMFpYQWdlSGg0SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5eVpWUklTVTVMTFhCeWIycGxZM1F2WTI5eVpTMW1jbUZ0WlhkdmNtc3ZZbXh2WWk5dFlYTjBaWEl2Wkc5amN5OXpjR1ZqY3k5eWRXNTBhVzFsTDJSNWJtRnRhV010ZG1sbGR5OWlZWE5wWTNNdlpHVndiRzk1TFhCeWIzUnZjM1IxWWk1dFpGeHVYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1FXUmtJSFJvWlNCdFpYTnpZV2RsSUdKMWN5QnNhWE4wWlc1bGNseHVJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtMWxjM05oWjJWQ2RYTXVZV1JrVEdsemRHVnVaWElvWDNKMWJuUnBiV1ZKWkhCUWNtOTRlVlZTVEN3Z1puVnVZM1JwYjI0b2JYTm5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZjSEp2ZUhsVFlXNWtZbTk0TG5CdmMzUk5aWE56WVdkbEtHMXpaeWs3WEc0Z0lDQWdJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QjNaU0JvWVhabElHTnZiWEJzWlhSbFpDQnpkR1Z3SUhoNGVDQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZjbVZVU0VsT1N5MXdjbTlxWldOMEwyTnZjbVV0Wm5KaGJXVjNiM0pyTDJKc2IySXZiV0Z6ZEdWeUwyUnZZM012YzNCbFkzTXZjblZ1ZEdsdFpTOWtlVzVoYldsakxYWnBaWGN2WW1GemFXTnpMMlJsY0d4dmVTMXdjbTkwYjNOMGRXSXViV1JjYmx4dUlDQWdJQ0FnSUNBZ0lDOHZJRXh2WVdRZ1UzUjFZaUJtZFc1amRHbHZiaUJ5WlhOdmJIWmxaQ0IzYVhSb0lITjFZMk5sYzNNN1hHNGdJQ0FnSUNBZ0lDQWdiR1YwSUdsa2NGQnliM2g1SUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY25WdWRHbHRaVWxrY0ZCeWIzaDVWVkpNT2lCZmNuVnVkR2x0WlVsa2NGQnliM2g1VlZKTUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNSaGRIVnpPaUJrWlhCc2IzbERiMjF3YjI1bGJuUlRkR0YwZFhOY2JpQWdJQ0FnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNocFpIQlFjbTk0ZVNrN1hHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXBibVp2S0NjdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdElFVk9SQ0F0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzFjWEc0bktUdGNibHh1SUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnSUNBdVkyRjBZMmdvWlhKeWIzSlNaV0Z6YjI0cE8xeHVYRzRnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJSDBwTzF4dVhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dWWE5sWkNCMGJ5QmpiRzl6WlNCaGJHd2dkR2hsSUhKMWJuUnBiV1U3SUZWdWNtVm5hWE4wWlhJZ1lXeHNJR2g1Y0dWeWRHbGxjenRjYmlBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpUeENiMjlzWldGdVBuMGdjbVZ6ZFd4MElHOW1JSFJvWlNCamJHOXpaU0J0WlhSb2IyUXNJSGRwZEdnZ2RISjFaU0J2Y2lCbVlXeHpaU0IwYnlCMGFHVWdiM0JsY21GMGFXOXVJSE4xWTJObGMzTTdYRzRnSUNBcUwxeHVJQ0JqYkc5elpTZ3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ1kyOXVjMjlzWlM1cGJtWnZLQ2RWYm5KbFoybHpkR1Z5SUdGc2JDQm9lWEJsY25ScFpYTW5LVHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYRzVjYmlBZ0lDQWdJRjkwYUdsekxuSmxaMmx6ZEhKNUxuVnVjbVZuYVhOMFpYSkJiR3hJZVhCbGNuUnBaWE1vS1M1MGFHVnVLR1oxYm1OMGFXOXVLSEpsYzNWc2RDa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbWx1Wm04b0owRnNiQ0IwYUdVZ2FIbHdaWEowYVdWeklHRnlaU0IxYm5KbFoybHpkR1ZrSUhkcGRHZ2dVM1ZqWTJWemN6b25MQ0J5WlhOMWJIUXBPMXh1SUNBZ0lDQWdJQ0J5WlhOdmJIWmxLSFJ5ZFdVcE8xeHVJQ0FnSUNBZ2ZTa3VZMkYwWTJnb1puVnVZM1JwYjI0b2NtVmhjMjl1S1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSjBaaGFXeGxaQ0IwYnlCMWJuSmxaMmx6ZEdWeUlIUm9aU0JvZVhCbGNuUnBaWE1uTENCeVpXRnpiMjRwTzF4dUlDQWdJQ0FnSUNCeVpXcGxZM1FvWm1Gc2MyVXBPMXh1SUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0I5S1R0Y2JseHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2dWWE5sWkNCMGJ5QmphR1ZqYXlCbWIzSWdkWEJrWVhSbGN5QmhZbTkxZENCamIyMXdiMjVsYm5SeklHaGhibVJzWldRZ2FXNGdkR2hsSUVOaGRHRnNiMmQxWlNCcGJtTnNkV1JwYm1jZ2NISnZkRzlqYjJ3Z2MzUjFZbk1nWVc1a0lFaDVjR1Z5ZEdsbGN5NGdZMmhsWTJzZ2NtVnNZWFJwYjI1emFHbHdJSGRwZEdnZ2JHbG1aV041WTJ4bElHMWhibUZuWlcxbGJuUWdjSEp2ZG1sa1pXUWdZbmtnVTJWeWRtbGpaU0JYYjNKclpYSnpYRzRnSUNvZ1FIQmhjbUZ0SUNCN1EyRjBZV3h2WjNWbFZWSk1mU0FnSUNBZ0lDQjFjbXdnZFhKc1hHNGdJQ292WEc0Z0lHTm9aV05yUm05eVZYQmtZWFJsS0hWeWJDa2dlMXh1SUNBZ0lDOHZJRUp2WkhrdUxpNWNiaUFnZlZ4dVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRkoxYm5ScGJXVlZRVHRjYmlJc0lpOHFLbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJRVkNCSmJtOTJZY09udzZOdklHVWdVMmx6ZEdWdFlYTWdVMEZjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnU1U1RlUwTXRTVVJjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVVZWUFFrbFRJRTVGVkZkUFVrdFRJRk5NWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVaU1FWVk9TRTlHUlZJdFIwVlRSVXhNVTBOSVFVWlVJRnBWVWlCR1QwVlNSRVZTVlU1SElFUkZVaUJCVGtkRlYwRk9SRlJGVGlCR1QxSlRRMGhWVGtjZ1JTNVdYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRTlTUVU1SFJTQlRRVnh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJFWlhWMGMyTm9aU0JVWld4bGEyOXRJRUZIWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVGd2FYcGxaVnh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJVUlVOSVRrbFRRMGhGSUZWT1NWWkZVbE5KVkVGVUlFSkZVa3hKVGx4dUtseHVLaUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVWdYQ0pNYVdObGJuTmxYQ0lwTzF4dUtpQjViM1VnYldGNUlHNXZkQ0IxYzJVZ2RHaHBjeUJtYVd4bElHVjRZMlZ3ZENCcGJpQmpiMjF3YkdsaGJtTmxJSGRwZEdnZ2RHaGxJRXhwWTJWdWMyVXVYRzRxSUZsdmRTQnRZWGtnYjJKMFlXbHVJR0VnWTI5d2VTQnZaaUIwYUdVZ1RHbGpaVzV6WlNCaGRGeHVLbHh1S2lBZ0lHaDBkSEE2THk5M2QzY3VZWEJoWTJobExtOXlaeTlzYVdObGJuTmxjeTlNU1VORlRsTkZMVEl1TUZ4dUtseHVLaUJWYm14bGMzTWdjbVZ4ZFdseVpXUWdZbmtnWVhCd2JHbGpZV0pzWlNCc1lYY2diM0lnWVdkeVpXVmtJSFJ2SUdsdUlIZHlhWFJwYm1jc0lITnZablIzWVhKbFhHNHFJR1JwYzNSeWFXSjFkR1ZrSUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sSUdseklHUnBjM1J5YVdKMWRHVmtJRzl1SUdGdUlGd2lRVk1nU1ZOY0lpQkNRVk5KVXl4Y2Jpb2dWMGxVU0U5VlZDQlhRVkpTUVU1VVNVVlRJRTlTSUVOUFRrUkpWRWxQVGxNZ1QwWWdRVTVaSUV0SlRrUXNJR1ZwZEdobGNpQmxlSEJ5WlhOeklHOXlJR2x0Y0d4cFpXUXVYRzRxSUZObFpTQjBhR1VnVEdsalpXNXpaU0JtYjNJZ2RHaGxJSE53WldOcFptbGpJR3hoYm1kMVlXZGxJR2R2ZG1WeWJtbHVaeUJ3WlhKdGFYTnphVzl1Y3lCaGJtUmNiaW9nYkdsdGFYUmhkR2x2Ym5NZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVdVhHNHFLaTljYm1Oc1lYTnpJRTlpYW1WamRFRnNiRzlqWVhScGIyNGdlMXh1SUNBdktpQndjbWwyWVhSbFhHNGdJRjkxY213NklGVlNURnh1SUNCZlluVnpPaUJOYVc1cFFuVnpYRzRnSUNvdlhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOeVpXRjBaU0JoYmlCUFltcGxZM1FnUVd4c2IyTmhkR2x2Ymx4dUlDQWdLaUJBY0dGeVlXMGdJSHRWVWt3dVZWSk1mU0FnSUNBZ0lIVnliQ0F0SUhWeWJDQm1jbTl0SUhkb2J5QnBjeUJ6Wlc1a2FXNW5JSFJvWlNCdFpYTnpZV2RsWEc0Z0lDQXFJRUJ3WVhKaGJTQWdlMDFwYm1sQ2RYTjlJQ0FnSUNBZ1luVnpJQzBnVFdsdWFVSjFjeUIxYzJWa0lHWnZjaUJoWkdSeVpYTnpJR0ZzYkc5allYUnBiMjVjYmlBZ0lDb3ZYRzRnSUdOdmJuTjBjblZqZEc5eUtIVnliQ3dnWW5WektTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUY5MGFHbHpMbDkxY213Z1BTQjFjbXc3WEc0Z0lDQWdYM1JvYVhNdVgySjFjeUE5SUdKMWN6dGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJuWlhRZ2RHaGxJRlZTVENCMllXeDFaVnh1SUNBZ0tpQkFjbVYwZFhKdUlIdHpkSEpwYm1kOUlGUm9aU0IxY213Z2RtRnNkV1U3WEc0Z0lDQXFMMXh1SUNCblpYUWdkWEpzS0NrZ2V5QnlaWFIxY200Z2RHaHBjeTVmZFhKc095QjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFRnpheUJtYjNJZ1kzSmxZWFJwYjI0Z2IyWWdZU0J1ZFcxaVpYSWdiMllnVDJKcVpXTjBJR0ZrWkhKbGMzTmxjeXdnZEc4Z2RHaGxJR1J2YldGcGJpQnRaWE56WVdkbElHNXZaR1V1WEc0Z0lDQXFJRUJ3WVhKaGJTQWdlMFJ2YldGcGJuMGdaRzl0WVdsdUlDMGdSRzl0WVdsdUlHOW1JSFJvWlNCdFpYTnpZV2RsSUc1dlpHVXVYRzRnSUNBcUlFQndZWEpoYlNBZ2UyNTFiV0psY24wZ2JuVnRZbVZ5SUMwZ1RuVnRZbVZ5SUc5bUlHRmtaSEpsYzNObGN5QjBieUJ5WlhGMVpYTjBYRzRnSUNBcUlFQnlaWFIxY201eklIdFFjbTl0YVhObFBFOWlhbVZqZEZWU1RENTlJQ0JCSUd4cGMzUWdiMllnVDJKcVpXTjBWVkpNSjNOY2JpQWdJQ292WEc0Z0lHTnlaV0YwWlNoa2IyMWhhVzRzSUhOamFHVnRaU3dnYm5WdFltVnlLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lDOHZSa3hQVnkxUFZWUTZJRzFsYzNOaFoyVWdjMlZ1ZENCMGJ5QnRjMmN0Ym05a1pTQlBZbXBsWTNSQmJHeHZZMkYwYVc5dVRXRnVZV2RsY2lCamIyMXdiMjVsYm5SY2JpQWdJQ0JzWlhRZ2JYTm5JRDBnZTF4dUlDQWdJQ0FnZEhsd1pUb2dKMk55WldGMFpTY3NJR1p5YjIwNklGOTBhR2x6TGw5MWNtd3NJSFJ2T2lBblpHOXRZV2x1T2k4dmJYTm5MVzV2WkdVdUp5QXJJR1J2YldGcGJpQXJJQ2N2YjJKcVpXTjBMV0ZrWkhKbGMzTXRZV3hzYjJOaGRHbHZiaWNzWEc0Z0lDQWdJQ0JpYjJSNU9pQjdJSE5qYUdWdFpUb2djMk5vWlcxbExDQjJZV3gxWlRvZ2V5QnVkVzFpWlhJNklHNTFiV0psY2lCOUlIMWNiaUFnSUNCOU8xeHVYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtDaHlaWE52YkhabExDQnlaV3BsWTNRcElEMCtJSHRjYmlBZ0lDQWdJRjkwYUdsekxsOWlkWE11Y0c5emRFMWxjM05oWjJVb2JYTm5MQ0FvY21Wd2JIa3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEpsY0d4NUxtSnZaSGt1WTI5a1pTQTlQVDBnTWpBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2h5WlhCc2VTNWliMlI1TG5aaGJIVmxMbUZzYkc5allYUmxaQ2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0hKbGNHeDVMbUp2WkhrdVpHVnpZeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElFOWlhbVZqZEVGc2JHOWpZWFJwYjI0N1hHNGlMQ0pwYlhCdmNuUWdleUJrYVhacFpHVlZVa3dnZlNCbWNtOXRJQ2N1TGk5MWRHbHNjeTkxZEdsc2N5YzdYRzVwYlhCdmNuUWdVM1ZpYzJOeWFYQjBhVzl1SUdaeWIyMGdKeTR2VTNWaWMyTnlhWEIwYVc5dUp6dGNibHh1WTJ4aGMzTWdUMkp6WlhKMlpYSlBZbXBsWTNRZ2UxeHVYRzRnSUdOdmJuTjBjblZqZEc5eUtIQmhjbVZ1ZEN3Z2RYSnNMQ0JqYUdsc1pISmxibk1wSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdYM1JvYVhNdVgzQmhjbVZ1ZENBOUlIQmhjbVZ1ZER0Y2JpQWdJQ0JmZEdocGN5NWZkWEpzSUQwZ2RYSnNPMXh1SUNBZ0lGOTBhR2x6TGw5amFHbHNaSEpsYm5NZ1BTQmphR2xzWkhKbGJuTTdYRzVjYmlBZ0lDQmZkR2hwY3k1ZlluVnpJRDBnY0dGeVpXNTBMbDlpZFhNN1hHNGdJQ0FnWDNSb2FYTXVYM04xWW5OamNtbHdkR2x2Ym5NZ1BTQjdmVHRjYmlBZ2ZWeHVYRzRnSUdGa1pGTjFZbk5qY21sd2RHbHZiaWhvZVhCbGNuUjVLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lGOTBhR2x6TGw5emRXSnpZM0pwY0hScGIyNXpXMmg1Y0dWeWRIbGRJRDBnYm1WM0lGTjFZbk5qY21sd2RHbHZiaWhmZEdocGN5NWZZblZ6TENCb2VYQmxjblI1TENCZmRHaHBjeTVmZFhKc0xDQmZkR2hwY3k1ZlkyaHBiR1J5Wlc1ekxDQm1ZV3h6WlNrN1hHNGdJSDFjYmx4dUlDQnlaVzF2ZG1WVGRXSnpZM0pwY0hScGIyNG9hSGx3WlhKMGVTa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCc1pYUWdaRzl0WVdsdUlEMGdaR2wyYVdSbFZWSk1LR2g1Y0dWeWRIa3BMbVJ2YldGcGJqdGNiaUFnSUNCc1pYUWdiMkpxVlZKTVUzVmljMk55YVhCMGFXOXVJRDBnWDNSb2FYTXVYM1Z5YkNBcklDY3ZjM1ZpYzJOeWFYQjBhVzl1Snp0Y2JseHVJQ0FnSUd4bGRDQnpkV0p6WTNKcGNIUnBiMjRnUFNCZmRHaHBjeTVmYzNWaWMyTnlhWEIwYVc5dWMxdG9lWEJsY25SNVhUdGNiaUFnSUNCcFppQW9jM1ZpYzJOeWFYQjBhVzl1S1NCN1hHNGdJQ0FnSUNBdkwwWk1UMWN0VDFWVU9pQnRaWE56WVdkbElITmxiblFnZEc4Z2NtVnRiM1JsSUZKbGNHOXlkR1Z5VDJKcVpXTjBJQzArSUY5dmJsSmxiVzkwWlZWdVUzVmljMk55YVdKbFhHNGdJQ0FnSUNCZmRHaHBjeTVmWW5WekxuQnZjM1JOWlhOellXZGxLSHRjYmlBZ0lDQWdJQ0FnZEhsd1pUb2dKM1Z1YzNWaWMyTnlhV0psSnl3Z1puSnZiVG9nWDNSb2FYTXVYM0JoY21WdWRDNWZkWEpzTENCMGJ6b2diMkpxVlZKTVUzVmljMk55YVhCMGFXOXVMRnh1SUNBZ0lDQWdJQ0JpYjJSNU9pQjdJSEpsYzI5MWNtTmxPaUJmZEdocGN5NWZkWEpzSUgxY2JpQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQXZMMVJQUkU4NklITm9iM1ZzWkNCSklIZGhhWFFnWm05eUlISmxjM0J2Ym5ObElHSmxabTl5WlNCMWJuTjFZbk5qY21saVpTQnZiaUJ0YzJjdGJtOWtaVnh1SUNBZ0lDQWdMeTlHVEU5WExVOVZWRG9nYldWemMyRm5aU0J6Wlc1MElIUnZJRzF6WnkxdWIyUmxJRk4xWW5OamNtbHdkR2x2YmsxaGJtRm5aWElnWTI5dGNHOXVaVzUwWEc0Z0lDQWdJQ0JmZEdocGN5NWZZblZ6TG5CdmMzUk5aWE56WVdkbEtIdGNiaUFnSUNBZ0lDQWdkSGx3WlRvZ0ozVnVjM1ZpYzJOeWFXSmxKeXdnWm5KdmJUb2dYM1JvYVhNdVgzQmhjbVZ1ZEM1ZmRYSnNMQ0IwYnpvZ0oyUnZiV0ZwYmpvdkwyMXpaeTF1YjJSbExpY2dLeUJrYjIxaGFXNGdLeUFuTDNOdEp5eGNiaUFnSUNBZ0lDQWdZbTlrZVRvZ2V5QnlaWE52ZFhKalpUb2dYM1JvYVhNdVgzVnliQ3dnWTJocGJHUnlaVzVTWlhOdmRYSmpaWE02SUY5MGFHbHpMbDlqYUdsc1pISmxibk1nZlZ4dUlDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lITjFZbk5qY21sd2RHbHZiaTVmY21Wc1pXRnpaVXhwYzNSbGJtVnljeWdwTzF4dUlDQWdJQ0FnWkdWc1pYUmxJRjkwYUdsekxsOXpkV0p6WTNKcGNIUnBiMjV6VzJoNWNHVnlkSGxkTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUU5aWMyVnlkbVZ5VDJKcVpXTjBPMXh1SWl3aWFXMXdiM0owSUhzZ1pHbDJhV1JsVlZKTUlIMGdabkp2YlNBbkxpNHZkWFJwYkhNdmRYUnBiSE1uTzF4dWFXMXdiM0owSUZOMVluTmpjbWx3ZEdsdmJpQm1jbTl0SUNjdUwxTjFZbk5qY21sd2RHbHZiaWM3WEc1Y2JtTnNZWE56SUZKbGNHOXlkR1Z5VDJKcVpXTjBJSHRjYmx4dUlDQmpiMjV6ZEhKMVkzUnZjaWh3WVhKbGJuUXNJRzkzYm1WeUxDQjFjbXdwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdYM1JvYVhNdVgzQmhjbVZ1ZENBOUlIQmhjbVZ1ZER0Y2JpQWdJQ0JmZEdocGN5NWZiM2R1WlhJZ1BTQnZkMjVsY2p0Y2JpQWdJQ0JmZEdocGN5NWZkWEpzSUQwZ2RYSnNPMXh1WEc0Z0lDQWdYM1JvYVhNdVgySjFjeUE5SUhCaGNtVnVkQzVmWW5Wek8xeHVYRzRnSUNBZ1gzUm9hWE11WDJSdmJXRnBiaUE5SUdScGRtbGtaVlZTVENodmQyNWxjaWt1Wkc5dFlXbHVPMXh1SUNBZ0lGOTBhR2x6TGw5dlltcFRkV0p6WTNKcGNIUnZjbFZTVENBOUlGOTBhR2x6TGw5MWNtd2dLeUFuTDNOMVluTmpjbWx3ZEdsdmJpYzdYRzVjYmlBZ0lDQmZkR2hwY3k1ZmMzVmljMk55YVhCMGFXOXVjeUE5SUh0OU8xeHVJQ0FnSUY5MGFHbHpMbDlqYUdsc1pISmxibk1nUFNCYlhUdGNiaUFnSUNCZmRHaHBjeTVmWTJocGJHUnlaVzVNYVhOMFpXNWxjbk1nUFNCYlhUdGNibHh1SUNBZ0lGOTBhR2x6TGw5bWIzSjNZWEprY3lBOUlIdDlPMXh1WEc0Z0lDQWdYM1JvYVhNdVgyRnNiRzlqWVhSbFRHbHpkR1Z1WlhKektDazdYRzRnSUgxY2JseHVJQ0JmWVd4c2IyTmhkR1ZNYVhOMFpXNWxjbk1vS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJQzh2WVdSa0lITjFZbk5qY21sd2RHbHZiaUJzYVhOMFpXNWxjaTR1TGx4dUlDQWdJRjkwYUdsekxsOXpkV0p6WTNKcGNIUnBiMjVNYVhOMFpXNWxjaUE5SUY5MGFHbHpMbDlpZFhNdVlXUmtUR2x6ZEdWdVpYSW9YM1JvYVhNdVgyOWlhbE4xWW5OamNtbHdkRzl5VlZKTUxDQW9iWE5uS1NBOVBpQjdYRzRnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWhmZEdocGN5NWZiMkpxVTNWaWMyTnlhWEIwYjNKVlVrd2dLeUFuTFZKRFZqb2dKeXdnYlhObktUdGNiaUFnSUNBZ0lITjNhWFJqYUNBb2JYTm5MblI1Y0dVcElIdGNiaUFnSUNBZ0lDQWdZMkZ6WlNBbmMzVmljMk55YVdKbEp6b2dYM1JvYVhNdVgyOXVVbVZ0YjNSbFUzVmljMk55YVdKbEtHMXpaeWs3SUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0JqWVhObElDZDFibk4xWW5OamNtbGlaU2M2SUY5MGFHbHpMbDl2YmxKbGJXOTBaVlZ1VTNWaWMyTnlhV0psS0cxelp5azdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQmpZWE5sSUNkeVpYTndiMjV6WlNjNklGOTBhR2x6TGw5dmJsSmxiVzkwWlZKbGMzQnZibk5sS0cxelp5azdJR0p5WldGck8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ2JHVjBJR05vWVc1blpWVlNUQ0E5SUY5MGFHbHpMbDkxY213Z0t5QW5MMk5vWVc1blpYTW5PMXh1SUNBZ0lGOTBhR2x6TGw5amFHRnVaMlZNYVhOMFpXNWxjaUE5SUY5MGFHbHpMbDlpZFhNdVlXUmtUR2x6ZEdWdVpYSW9ZMmhoYm1kbFZWSk1MQ0FvYlhObktTQTlQaUI3WEc0Z0lDQWdJQ0F2TDFSUFJFODZJSGRvWVhRZ2RHOWtieUJvWlhKbFB5QlRZWFpsSUdOb1lXNW5aWE0vWEc0Z0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblUzbHVZMmhsY2sxaGJtRm5aWEl0SnlBcklHTm9ZVzVuWlZWU1RDQXJJQ2N0VWtOV09pQW5MQ0J0YzJjcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdYM0psYkdWaGMyVk1hWE4wWlc1bGNuTW9LU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lGOTBhR2x6TGw5emRXSnpZM0pwY0hScGIyNU1hWE4wWlc1bGNpNXlaVzF2ZG1Vb0tUdGNibHh1SUNBZ0lGOTBhR2x6TGw5amFHRnVaMlZNYVhOMFpXNWxjaTV5WlcxdmRtVW9LVHRjYmx4dUlDQWdJRjkwYUdsekxsOWphR2xzWkhKbGJreHBjM1JsYm1WeWN5NW1iM0pGWVdOb0tDaGpiQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ1kyd3VjbVZ0YjNabEtDazdYRzRnSUNBZ2ZTazdYRzVjYmlBZ0lDQlBZbXBsWTNRdWEyVjVjeWhmZEdocGN5NWZabTl5ZDJGeVpITXBMbVp2Y2tWaFkyZ29LR3RsZVNrZ1BUNGdlMXh1SUNBZ0lDQWdYM1JvYVhNdVptOXlkMkZ5WkZWdVUzVmljMk55YVdKbEtHdGxlU2s3WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0F2TDNKbGJXOTJaU0JoYkd3Z2MzVmljMk55YVhCMGFXOXVjMXh1SUNBZ0lFOWlhbVZqZEM1clpYbHpLRjkwYUdsekxsOXpkV0p6WTNKcGNIUnBiMjV6S1M1bWIzSkZZV05vS0NoclpYa3BJRDArSUh0Y2JpQWdJQ0FnSUY5MGFHbHpMbDl6ZFdKelkzSnBjSFJwYjI1elcydGxlVjB1WDNKbGJHVmhjMlZNYVhOMFpXNWxjbk1vS1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaV2RwYzNSbGNpQmhJR3hwYzNSbGJtVnlJR2x1SUhSb1pTQnRjMmN0Ym05a1pTQmhibVFnYVc0Z2RHaGxJR3h2WTJGc0lFMWxjM05oWjJWQ2RYTXNJSE52SUhSb1lYUWdiV1Z6YzJGblpYTWdiMjRnZEdocGN5QmhaR1J5WlhOeklHRnlaU0JtYjNKM1lYSmtaV1FnZEc4Z2RHaGxJSEpsY0c5eWRHVnlJRzlpYW1WamRGeHVJQ0FnS2lCQWNHRnlZVzBnSUh0emRISnBibWQ5SUdGa1pISmxjM01nTFNCVlVrd2dkRzhnY21WbmFYTjBaWElnZEdobElHeHBjM1JsYm1WeWMxeHVJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNCU1pYUjFjbTRnVUhKdmJXbHpaU0JQU3lCdmNpQmxjbkp2Y2x4dUlDQWdLaTljYmlBZ1ptOXlkMkZ5WkZOMVluTmpjbWxpWlNoaFpHUnlaWE56WlhNcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnTHk5R1RFOVhMVTlWVkRvZ2JXVnpjMkZuWlNCelpXNTBJSFJ2SUhSb1pTQnRjMmN0Ym05a1pTQlRkV0p6WTNKcGNIUnBiMjVOWVc1aFoyVnlJR052YlhCdmJtVnVkRnh1SUNBZ0lHeGxkQ0J1YjJSbFUzVmljMk55YVdKbFRYTm5JRDBnZTF4dUlDQWdJQ0FnZEhsd1pUb2dKM04xWW5OamNtbGlaU2NzSUdaeWIyMDZJRjkwYUdsekxsOXdZWEpsYm5RdVgzVnliQ3dnZEc4NklDZGtiMjFoYVc0Nkx5OXRjMmN0Ym05a1pTNG5JQ3NnWDNSb2FYTXVYMlJ2YldGcGJpQXJJQ2N2YzIwbkxGeHVJQ0FnSUNBZ1ltOWtlVG9nZXlCemRXSnpZM0pwWW1VNklHRmtaSEpsYzNObGN5d2djMjkxY21ObE9pQmZkR2hwY3k1ZmIzZHVaWElnZlZ4dUlDQWdJSDA3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ1gzUm9hWE11WDJKMWN5NXdiM04wVFdWemMyRm5aU2h1YjJSbFUzVmljMk55YVdKbFRYTm5MQ0FvY21Wd2JIa3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMlp2Y25kaGNtUXRjM1ZpYzJOeWFXSmxMWEpsYzNCdmJuTmxLSEpsY0c5eWRHVnlLVG9nSnl3Z2NtVndiSGtwTzF4dUlDQWdJQ0FnSUNCcFppQW9jbVZ3YkhrdVltOWtlUzVqYjJSbElEMDlQU0F5TURBcElIdGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2JtVjNSbTl5ZDJGeVpDQTlJRjkwYUdsekxsOWlkWE11WVdSa1JtOXlkMkZ5WkNoZmRHaHBjeTVmZFhKc0xDQmZkR2hwY3k1ZmIzZHVaWElwTzF4dUlDQWdJQ0FnSUNBZ0lGOTBhR2x6TGw5bWIzSjNZWEprYzF0aFpHUnlaWE56WlhOYk1GMWRJRDBnYm1WM1JtOXlkMkZ5WkR0Y2JpQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtDazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLQ2RGY25KdmNpQnZiaUJ0YzJjdGJtOWtaU0J6ZFdKelkzSnBjSFJwYjI0NklDY2dLeUJ5WlhCc2VTNWliMlI1TG1SbGMyTXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlZibEpsWjJsemRHVnlJR0VnYkdsemRHVnVaWElnYVc0Z2RHaGxJRzF6WnkxdWIyUmxJR0Z1WkNCcGJpQjBhR1VnYkc5allXd2dUV1Z6YzJGblpVSjFjeXdnYzI4Z2RHaGhkQ0J0WlhOellXZGxjeUJ2YmlCMGFHbHpJR0ZrWkhKbGMzTWdZWEpsSUhKbGJXOTJaV1FnWm5KdmJTQm1iM0ozWVhKa1hHNGdJQ0FxSUVCd1lYSmhiU0FnZTNOMGNtbHVaMzBnWVdSa2NtVnpjeUF0SUZWU1RDQjBieUIxYmkxeVpXZHBjM1JsY2lCMGFHVWdiR2x6ZEdWdVpYSnpYRzRnSUNBcUwxeHVJQ0JtYjNKM1lYSmtWVzVUZFdKelkzSnBZbVVvWVdSa2NtVnpjeWtnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQmZkR2hwY3k1ZlptOXlkMkZ5WkhOYllXUmtjbVZ6YzEwdWNtVnRiM1psS0NrN1hHNGdJQ0FnWkdWc1pYUmxJRjkwYUdsekxsOW1iM0ozWVhKa2MxdGhaR1J5WlhOelhUdGNibHh1SUNBZ0lDOHZSa3hQVnkxUFZWUTZJRzFsYzNOaFoyVWdjMlZ1ZENCMGJ5QjBhR1VnYlhObkxXNXZaR1VnVTNWaWMyTnlhWEIwYVc5dVRXRnVZV2RsY2lCamIyMXdiMjVsYm5SY2JpQWdJQ0JzWlhRZ2JtOWtaVlZ1VTNWaWMyTnlhV0psVFhObklEMGdlMXh1SUNBZ0lDQWdkSGx3WlRvZ0ozVnVjM1ZpYzJOeWFXSmxKeXdnWm5KdmJUb2dYM1JvYVhNdVgzQmhjbVZ1ZEM1ZmRYSnNMQ0IwYnpvZ0oyUnZiV0ZwYmpvdkwyMXpaeTF1YjJSbExpY2dLeUJmZEdocGN5NWZaRzl0WVdsdUlDc2dKeTl6YlNjc1hHNGdJQ0FnSUNCaWIyUjVPaUI3SUhOMVluTmpjbWxpWlRvZ1cyRmtaSEpsYzNOZExDQnpiM1Z5WTJVNklGOTBhR2x6TGw5dmQyNWxjaUI5WEc0Z0lDQWdmVHRjYmx4dUlDQWdJRjkwYUdsekxsOWlkWE11Y0c5emRFMWxjM05oWjJVb2JtOWtaVlZ1VTNWaWMyTnlhV0psVFhObktUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWldkcGMzUmxjaUJzYVhOMFpXNWxjbk1nWm05eUlHRWdiR2x6ZENCdlppQmphR2xzWkhKbGJuTXVJRkIxWW14cFl5QmphR0Z1Ym1Wc2N5QjFjMlZrSUhSdklIUnlZVzV6YldsMElHMWxjM05oWjJWekxseHVJQ0FnS2lCQWNHRnlZVzBnSUh0emRISnBibWRiWFgwZ1kyaHBiR1J5Wlc1eklDMGdZMmhoYm01bGJITWdkRzhnY21WbmFYTjBaWEpjYmlBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdVbVYwZFhKdUlGQnliMjFwYzJVZ1Qwc2diM0lnWlhKeWIzSmNiaUFnSUNvdlhHNGdJR0ZrWkVOb2FXeGtjbVZ1Y3loamFHbHNaSEpsYm5NcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0NoeVpYTnZiSFpsTENCeVpXcGxZM1FwSUQwK0lIdGNiaUFnSUNBZ0lHbG1JQ2hqYUdsc1pISmxibk11YkdWdVozUm9JRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJSEpsYzI5c2RtVW9LVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JzWlhRZ1kyaHBiR1JDWVhObFZWSk1JRDBnWDNSb2FYTXVYM1Z5YkNBcklDY3ZZMmhwYkdSeVpXNHZKenRjYmlBZ0lDQWdJRjkwYUdsekxsOWphR2xzWkhKbGJuTXVjSFZ6YUNoamFHbHNaSEpsYm5NcE8xeHVYRzRnSUNBZ0lDQXZLbHh1SUNBZ0lDQWdYM1JvYVhNdVgyTm9hV3hrY21WdWN5NW1iM0pGWVdOb0tDaGphR2xzWkNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JzWlhRZ1kyaHBiR1JKWkNBOUlHTm9hV3hrUW1GelpWVlNUQ0FySUdOb2FXeGtPMXh1WEc0Z0lDQWdJQ0FnSUd4bGRDQnpaV3htUm05eWQyRnlaQ0E5SUY5MGFHbHpMbDlpZFhNdVlXUmtSbTl5ZDJGeVpDaGphR2xzWkVsa0xDQnZkMjVsY2lrN1hHNGdJQ0FnSUNBZ0lGOTBhR2x6TGw5amFHbHNaSEpsYmt4cGMzUmxibVZ5Y3k1d2RYTm9LSE5sYkdaR2IzSjNZWEprS1R0Y2JpQWdJQ0FnSUgwcE95b3ZYRzVjYmlBZ0lDQWdJR3hsZENCemRXSnpZM0pwY0hScGIyNXpJRDBnVzEwN1hHNGdJQ0FnSUNCamFHbHNaSEpsYm5NdVptOXlSV0ZqYUNnb1kyaHBiR1FwSUQwK0lITjFZbk5qY21sd2RHbHZibk11Y0hWemFDaGphR2xzWkVKaGMyVlZVa3dnS3lCamFHbHNaQ2twTzF4dVhHNGdJQ0FnSUNBdkwwWk1UMWN0VDFWVU9pQnRaWE56WVdkbElITmxiblFnZEc4Z2RHaGxJRzF6WnkxdWIyUmxJRk4xWW5OamNtbHdkR2x2YmsxaGJtRm5aWElnWTI5dGNHOXVaVzUwWEc0Z0lDQWdJQ0JzWlhRZ2JtOWtaVk4xWW5OamNtbGlaVTF6WnlBOUlIdGNiaUFnSUNBZ0lDQWdkSGx3WlRvZ0ozTjFZbk5qY21saVpTY3NJR1p5YjIwNklGOTBhR2x6TGw5d1lYSmxiblF1WDNWeWJDd2dkRzg2SUNka2IyMWhhVzQ2THk5dGMyY3RibTlrWlM0bklDc2dYM1JvYVhNdVgyUnZiV0ZwYmlBcklDY3ZjMjBuTEZ4dUlDQWdJQ0FnSUNCaWIyUjVPaUI3SUhOMVluTmpjbWxpWlRvZ2MzVmljMk55YVhCMGFXOXVjeXdnYzI5MWNtTmxPaUJmZEdocGN5NWZiM2R1WlhJZ2ZWeHVJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdYM1JvYVhNdVgySjFjeTV3YjNOMFRXVnpjMkZuWlNodWIyUmxVM1ZpYzJOeWFXSmxUWE5uTENBb2NtVndiSGtwSUQwK0lIdGNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjI1dlpHVXRjM1ZpYzJOeWFXSmxMWEpsYzNCdmJuTmxLSEpsY0c5eWRHVnlLVG9nSnl3Z2NtVndiSGtwTzF4dUlDQWdJQ0FnSUNCcFppQW9jbVZ3YkhrdVltOWtlUzVqYjJSbElEMDlQU0F5TURBcElIdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dllXUmtJR05vYVd4a2NtVnVJR3hwYzNSbGJtVnljeUJ2YmlCc2IyTmhiQ0F1TGk1Y2JpQWdJQ0FnSUNBZ0lDQnpkV0p6WTNKcGNIUnBiMjV6TG1admNrVmhZMmdvS0dOb2FXeGtWVkpNS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZMmhwYkdSTWFYTjBaVzVsY2lBOUlGOTBhR2x6TGw5aWRYTXVZV1JrVEdsemRHVnVaWElvWTJocGJHUlZVa3dzSUNodGMyY3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk5VVQwUlBPaUIzYUdGMElIUnZaRzhnYUdWeVpUOGdVMkYyWlNCamFHbHNaSEpsYm5NL1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZFRlVzVqYUdWeVRXRnVZV2RsY2kwbklDc2dZMmhwYkdSVlVrd2dLeUFuTFZKRFZqb2dKeXdnYlhObktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVYMk5vYVd4a2NtVnVUR2x6ZEdWdVpYSnpMbkIxYzJnb1kyaHBiR1JNYVhOMFpXNWxjaWs3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCelpXeG1SbTl5ZDJGeVpDQTlJRjkwYUdsekxsOWlkWE11WVdSa1JtOXlkMkZ5WkNoamFHbHNaRlZTVEN3Z1gzUm9hWE11WDI5M2JtVnlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TGw5amFHbHNaSEpsYmt4cGMzUmxibVZ5Y3k1d2RYTm9LSE5sYkdaR2IzSjNZWEprS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb0tUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0J5WldwbFkzUW9KMFZ5Y205eUlHOXVJRzF6WnkxdWIyUmxJSE4xWW5OamNtbHdkR2x2YmpvZ0p5QXJJSEpsY0d4NUxtSnZaSGt1WkdWell5azdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ1pHVnNaWFJsS0NrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdiR1YwSUdSdmJXRnBiaUE5SUdScGRtbGtaVlZTVENoZmRHaHBjeTVmYjNkdVpYSXBMbVJ2YldGcGJqdGNibHh1SUNBZ0lDOHZSa3hQVnkxUFZWUTZJRzFsYzNOaFoyVWdjMlZ1ZENCa2FYSmxZM1JzZVNCMGJ5QmhiR3dnYzNWaWMyTnlhV0psY25NZ2IyWWdkR2hsSUhKbGNHOXlkR1Z5WEc0Z0lDQWdYM1JvYVhNdVgySjFjeTV3YjNOMFRXVnpjMkZuWlNoN1hHNGdJQ0FnSUNCMGVYQmxPaUFuWkdWc1pYUmxKeXdnWm5KdmJUb2dYM1JvYVhNdVgyOWlhbE4xWW5OamNtbHdkRzl5VlZKTUxDQjBiem9nWDNSb2FYTXVYM1Z5YkNBcklDY3ZZMmhoYm1kbGN5ZGNiaUFnSUNCOUtUdGNibHh1SUNBZ0lDOHZSa3hQVnkxUFZWUTZJRzFsYzNOaFoyVWdjMlZ1ZENCMGJ5QjBhR1VnYlhObkxXNXZaR1VnVDJKcVpXTjBRV3hzYjJOaGRHbHZiazFoYm1GblpYSWdZMjl0Y0c5dVpXNTBYRzRnSUNBZ1gzUm9hWE11WDJKMWN5NXdiM04wVFdWemMyRm5aU2g3WEc0Z0lDQWdJQ0IwZVhCbE9pQW5aR1ZzWlhSbEp5d2dabkp2YlRvZ1gzUm9hWE11WDNCaGNtVnVkQzVmZFhKc0xDQjBiem9nSjJSdmJXRnBiam92TDIxelp5MXViMlJsTGljZ0t5QmtiMjFoYVc0Z0t5QW5MMjlpYW1WamRDMWhaR1J5WlhOekxXRnNiRzlqWVhScGIyNG5MRnh1SUNBZ0lDQWdZbTlrZVRvZ2V5QnlaWE52ZFhKalpUb2dYM1JvYVhNdVgzVnliQ3dnWTJocGJHUnlaVzVTWlhOdmRYSmpaWE02SUY5MGFHbHpMbDlqYUdsc1pISmxibk1nZlZ4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnWDNSb2FYTXVYM0psYkdWaGMyVk1hWE4wWlc1bGNuTW9LVHRjYmlBZ0lDQmtaV3hsZEdVZ1gzUm9hWE11WDNCaGNtVnVkQzVmY21Wd2IzSjBaWEp6VzE5MGFHbHpMbDkxY214ZE8xeHVJQ0I5WEc1Y2JpQWdYMjl1VW1WdGIzUmxVbVZ6Y0c5dWMyVW9iWE5uS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJRjkwYUdsekxsOWlkWE11Y0c5emRFMWxjM05oWjJVb2UxeHVJQ0FnSUNBZ2FXUTZJRzF6Wnk1cFpDd2dkSGx3WlRvZ0ozSmxjM0J2Ym5ObEp5d2dabkp2YlRvZ2JYTm5MblJ2TENCMGJ6b2dYM1JvYVhNdVgzVnliQ3hjYmlBZ0lDQWdJR0p2WkhrNklIc2dZMjlrWlRvZ2JYTm5MbUp2WkhrdVkyOWtaU3dnYVdSbGJuUnBkSGs2SUcxelp5NWliMlI1TG1sa1pXNTBhWFI1TENCemIzVnlZMlU2SUcxelp5NW1jbTl0SUgxY2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lDOHZSa3hQVnkxSlRqb2diV1Z6YzJGblpTQnlaV05sYVhabFpDQm1jbTl0SUZONWJtTm9aWElnTFQ0Z2MzVmljMk55YVdKbFhHNGdJRjl2YmxKbGJXOTBaVk4xWW5OamNtbGlaU2h0YzJjcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJR3hsZENCb2VYQmxjblI1VlZKTUlEMGdiWE5uTG1KdlpIa3VjM1ZpYzJOeWFXSmxjanRjYmx4dUlDQWdJQzh2ZG1Gc2FXUmhkR1VnYVdZZ2MzVmljMk55YVhCMGFXOXVJR0ZzY21WaFpIa2daWGhwYzNSelAxeHVJQ0FnSUdsbUlDaGZkR2hwY3k1ZmMzVmljMk55YVhCMGFXOXVjMXRvZVhCbGNuUjVWVkpNWFNrZ2UxeHVJQ0FnSUNBZ2JHVjBJR1Z5Y205eVRYTm5JRDBnZTF4dUlDQWdJQ0FnSUNCcFpEb2diWE5uTG1sa0xDQjBlWEJsT2lBbmNtVnpjRzl1YzJVbkxDQm1jbTl0T2lCdGMyY3VkRzhzSUhSdk9pQm9lWEJsY25SNVZWSk1MRnh1SUNBZ0lDQWdJQ0JpYjJSNU9pQjdJR052WkdVNklEVXdNQ3dnWkdWell6b2dKMU4xWW5OamNtbHdkR2x2YmlCbWIzSWdLQ2NnS3lCZmRHaHBjeTVmZFhKc0lDc2dKeUE2SUNjZ0t5QWdhSGx3WlhKMGVWVlNUQ0FySUNjcElHRnNjbVZoWkhrZ1pYaHBjM1J6SVNjZ2ZWeHVJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdYM1JvYVhNdVgySjFjeTV3YjNOMFRXVnpjMkZuWlNobGNuSnZjazF6WnlrN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeTloYzJzZ2RHOGdjM1ZpYzJOeWFXSmxJSFJ2SUZONWJtTm9aWEkvSUNoa1pYQmxibVJ6SUc5dUlIUm9aU0J2Y0dWeVlYUnBiMjRnYlc5a1pTbGNiaUFnSUNBdkwxUlBSRTg2SUdkbGRDQnRiMlJsSUdaeWIyMGdiMkpxWldOMElWeHVJQ0FnSUd4bGRDQnRiMlJsSUQwZ0ozTjFZaTl3ZFdJbk8xeHVYRzRnSUNBZ2FXWWdLRzF2WkdVZ1BUMDlJQ2R6ZFdJdmNIVmlKeWtnZTF4dUlDQWdJQ0FnTHk5R1RFOVhMVTlWVkRvZ2JXVnpjMkZuWlNCelpXNTBJSFJ2SUd4dlkyRnNJR2g1Y0dWeWRIa2dZV1JrY21WemN5QlRlVzVqYUdWeUlDMCtJRjl2YmtadmNuZGhjbVJjYmlBZ0lDQWdJR3hsZENCbWIzSjNZWEprVFhObklEMGdlMXh1SUNBZ0lDQWdJQ0IwZVhCbE9pQW5abTl5ZDJGeVpDY3NJR1p5YjIwNklGOTBhR2x6TGw5MWNtd3NJSFJ2T2lCZmRHaHBjeTVmYjNkdVpYSXNYRzRnSUNBZ0lDQWdJR0p2WkhrNklIc2dkSGx3WlRvZ2JYTm5MblI1Y0dVc0lHWnliMjA2SUdoNWNHVnlkSGxWVWt3c0lIUnZPaUJmZEdocGN5NWZkWEpzTENCcFpHVnVkR2wwZVRvZ2JYTm5MbUp2WkhrdWFXUmxiblJwZEhrZ2ZWeHVJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdYM1JvYVhNdVgySjFjeTV3YjNOMFRXVnpjMkZuWlNobWIzSjNZWEprVFhObkxDQW9jbVZ3YkhrcElEMCtJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oyWnZjbmRoY21RdGNtVndiSGs2SUNjc0lISmxjR3g1S1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEpsY0d4NUxtSnZaSGt1WTI5a1pTQTlQVDBnTWpBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVYM04xWW5OamNtbHdkR2x2Ym5OYmFIbHdaWEowZVZWU1RGMGdQU0J1WlhjZ1UzVmljMk55YVhCMGFXOXVLRjkwYUdsekxsOWlkWE1zSUY5MGFHbHpMbDl2ZDI1bGNpd2dYM1JvYVhNdVgzVnliQ3dnWDNSb2FYTXVYMk5vYVd4a2NtVnVjeXdnZEhKMVpTazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBdkwwWk1UMWN0VDFWVU9pQnpkV0p6WTNKcGNIUnBiMjRnY21WemNHOXVjMlVnYzJWdWRDQW9abTl5ZDJGeVpDQm1jbTl0SUdsdWRHVnlibUZzSUVoNWNHVnlkSGtwWEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbDlpZFhNdWNHOXpkRTFsYzNOaFoyVW9lMXh1SUNBZ0lDQWdJQ0FnSUdsa09pQnRjMmN1YVdRc0lIUjVjR1U2SUNkeVpYTndiMjV6WlNjc0lHWnliMjA2SUcxelp5NTBieXdnZEc4NklHMXpaeTVtY205dExGeHVJQ0FnSUNBZ0lDQWdJR0p2WkhrNklISmxjR3g1TG1KdlpIbGNiaUFnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0I5WEc1Y2JpQWdMeTlHVEU5WExVbE9PaUJ0WlhOellXZGxJSEpsWTJWcGRtVmtJR1p5YjIwZ2NtVnRiM1JsSUU5aWMyVnlkbVZ5VDJKcVpXTjBJQzArSUhKbGJXOTJaVk4xWW5OamNtbHdkR2x2Ymx4dUlDQmZiMjVTWlcxdmRHVlZibE4xWW5OamNtbGlaU2h0YzJjcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJR3hsZENCb2VYQmxjblI1VlZKTUlEMGdiWE5uTG1KdlpIa3VjM1ZpYzJOeWFXSmxjanRjYmx4dUlDQWdJR3hsZENCemRXSnpZM0pwY0hScGIyNGdQU0JmZEdocGN5NWZjM1ZpYzJOeWFYQjBhVzl1YzF0b2VYQmxjblI1VlZKTVhUdGNiaUFnSUNCcFppQW9jM1ZpYzJOeWFYQjBhVzl1S1NCN1hHNGdJQ0FnSUNCemRXSnpZM0pwY0hScGIyNHVYM0psYkdWaGMyVk1hWE4wWlc1bGNuTW9LVHRjYmlBZ0lDQWdJR1JsYkdWMFpTQmZkR2hwY3k1ZmMzVmljMk55YVhCMGFXOXVjMXRvZVhCbGNuUjVWVkpNWFR0Y2JseHVJQ0FnSUNBZ0x5OVVUMFJQT2lCelpXNWtJSFZ1TFhOMVluTmpjbWxpWlNCdFpYTnpZV2RsSUhSdklGTjVibU5vWlhJL0lDaGtaWEJsYm1SeklHOXVJSFJvWlNCdmNHVnlZWFJwYjI0Z2JXOWtaU2xjYmlBZ0lDQjlYRzVjYmlBZ2ZWeHVYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUZKbGNHOXlkR1Z5VDJKcVpXTjBPMXh1SWl3aVkyeGhjM01nVTNWaWMyTnlhWEIwYVc5dUlIdGNibHh1SUNCamIyNXpkSEoxWTNSdmNpaGlkWE1zSUc5M2JtVnlMQ0IxY213c0lHTm9hV3hrY21WdWN5d2dhWE5TWlhCdmNuUmxjaWtnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ2JHVjBJR05vYVd4a1FtRnpaVlZTVENBOUlIVnliQ0FySUNjdlkyaHBiR1J5Wlc0dkp6dGNiaUFnSUNCc1pYUWdZMmhoYm1kbFZWSk1JRDBnZFhKc0lDc2dKeTlqYUdGdVoyVnpKenRjYmx4dUlDQWdJQzh2Y0hKdlkyVnpjeUJrWld4bGRHVWdiV1Z6YzJGblpWeHVJQ0FnSUY5MGFHbHpMbDlrWld4bGRHVk1hWE4wWlc1bGNpQTlJR0oxY3k1aFpHUk1hWE4wWlc1bGNpaGphR0Z1WjJWVlVrd3NJQ2h0YzJjcElEMCtJSHRjYmlBZ0lDQWdJR2xtSUNodGMyY3VkSGx3WlNBOVBUMGdKMlJsYkdWMFpTY3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oxTjFZbk5qY21sd2RHbHZiaTFFUlV4RlZFVTZJQ2NzSUcxelp5azdYRzVjYmlBZ0lDQWdJQ0FnTHk5R1RFOVhMVTlWVkRvZ2JXVnpjMkZuWlNCelpXNTBJSFJ2SUdGc2JDQnpkV0p6WTNKcFltVnljMXh1SUNBZ0lDQWdJQ0JzWlhRZ1pHVnNaWFJsVFdWemMyRm5aVlJ2U0hsd1pYSjBlU0E5SUh0Y2JpQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBblpHVnNaWFJsSnl3Z1puSnZiVG9nYlhObkxtWnliMjBzSUhSdk9pQnZkMjVsY2l4Y2JpQWdJQ0FnSUNBZ0lDQmliMlI1T2lCN0lHbGtaVzUwYVhSNU9pQnRjMmN1WW05a2VTNXBaR1Z1ZEdsMGVTd2djbVZ6YjNWeVkyVTZJSFZ5YkNCOVhHNGdJQ0FnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJQ0FnTHk5elpXNWtJR1JsYkdWMFpTQjBieUJvZVhCbGNuUjVYRzRnSUNBZ0lDQWdJR0oxY3k1d2IzTjBUV1Z6YzJGblpTaGtaV3hsZEdWTlpYTnpZV2RsVkc5SWVYQmxjblI1TENBb2NtVndiSGtwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblUzVmljMk55YVhCMGFXOXVMVVJGVEVWVVJTMVNSVkJNV1RvZ0p5d2djbVZ3YkhrcE8xeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpYQnNlUzVpYjJSNUxtTnZaR1VnUFQwOUlESXdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVgzSmxiR1ZoYzJWTWFYTjBaVzVsY25Nb0tUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ0x5OWhaR1FnWTJoaGJtZGxJSEIxWW14cGMyZ2dZV1JrY21WemN5QnZjaUJtYjNKM1lYSmtYRzRnSUNBZ2FXWWdLR2x6VW1Wd2IzSjBaWElwSUh0Y2JpQWdJQ0FnSUY5MGFHbHpMbDlqYUdGdVoyVk1hWE4wWlc1bGNpQTlJR0oxY3k1aFpHUlFkV0pzYVhOb0tHTm9ZVzVuWlZWU1RDazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUY5MGFHbHpMbDlqYUdGdVoyVk1hWE4wWlc1bGNpQTlJR0oxY3k1aFpHUkdiM0ozWVhKa0tHTm9ZVzVuWlZWU1RDd2diM2R1WlhJcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUY5MGFHbHpMbDlqYUdsc1pISmxia3hwYzNSbGJtVnljeUE5SUZ0ZE8xeHVJQ0FnSUdOb2FXeGtjbVZ1Y3k1bWIzSkZZV05vS0NoamFHbHNaQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ2JHVjBJR05vYVd4a1NXUWdQU0JqYUdsc1pFSmhjMlZWVWt3Z0t5QmphR2xzWkR0Y2JseHVJQ0FnSUNBZ0x5OWhaR1FnWTJocGJHUnlaVzRnY0hWaWJHbHphQ0JoWkdSeVpYTnpYRzRnSUNBZ0lDQnNaWFFnWTJocGJHUnlaVzVHYjNKM1lYSmtJRDBnWW5WekxtRmtaRkIxWW14cGMyZ29ZMmhwYkdSSlpDazdYRzRnSUNBZ0lDQmZkR2hwY3k1ZlkyaHBiR1J5Wlc1TWFYTjBaVzVsY25NdWNIVnphQ2hqYUdsc1pISmxia1p2Y25kaGNtUXBPMXh1WEc0Z0lDQWdJQ0F2TDJGa1pDQnpaV3htSUdadmNuZGhjbVFnYVdZZ1lXNGdiMkp6WlhKMlpYSmNiaUFnSUNBZ0lHbG1JQ2doYVhOU1pYQnZjblJsY2lrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnYzJWc1prWnZjbmRoY21RZ1BTQmlkWE11WVdSa1JtOXlkMkZ5WkNoamFHbHNaRWxrTENCdmQyNWxjaWs3WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbDlqYUdsc1pISmxia3hwYzNSbGJtVnljeTV3ZFhOb0tITmxiR1pHYjNKM1lYSmtLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUY5eVpXeGxZWE5sVEdsemRHVnVaWEp6S0NrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0JmZEdocGN5NWZaR1ZzWlhSbFRHbHpkR1Z1WlhJdWNtVnRiM1psS0NrN1hHNWNiaUFnSUNCZmRHaHBjeTVmWTJoaGJtZGxUR2x6ZEdWdVpYSXVjbVZ0YjNabEtDazdYRzVjYmlBZ0lDQmZkR2hwY3k1ZlkyaHBiR1J5Wlc1TWFYTjBaVzVsY25NdVptOXlSV0ZqYUNnb1ptOXlkMkZ5WkNrZ1BUNGdlMXh1SUNBZ0lDQWdabTl5ZDJGeVpDNXlaVzF2ZG1Vb0tUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRk4xWW5OamNtbHdkR2x2Ymp0Y2JpSXNJaThxS2x4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUVZDQkpibTkyWWNPbnc2TnZJR1VnVTJsemRHVnRZWE1nVTBGY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1NVNUZVME10U1VSY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1VWVlBRa2xUSUU1RlZGZFBVa3RUSUZOTVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFWlNRVlZPU0U5R1JWSXRSMFZUUlV4TVUwTklRVVpVSUZwVlVpQkdUMFZTUkVWU1ZVNUhJRVJGVWlCQlRrZEZWMEZPUkZSRlRpQkdUMUpUUTBoVlRrY2dSUzVXWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUU5U1FVNUhSU0JUUVZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCRVpYVjBjMk5vWlNCVVpXeGxhMjl0SUVGSFhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFRndhWHBsWlZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCVVJVTklUa2xUUTBoRklGVk9TVlpGVWxOSlZFRlVJRUpGVWt4SlRseHVLbHh1S2lCTWFXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FYQmhZMmhsSUV4cFkyVnVjMlVzSUZabGNuTnBiMjRnTWk0d0lDaDBhR1VnWENKTWFXTmxibk5sWENJcE8xeHVLaUI1YjNVZ2JXRjVJRzV2ZENCMWMyVWdkR2hwY3lCbWFXeGxJR1Y0WTJWd2RDQnBiaUJqYjIxd2JHbGhibU5sSUhkcGRHZ2dkR2hsSUV4cFkyVnVjMlV1WEc0cUlGbHZkU0J0WVhrZ2IySjBZV2x1SUdFZ1kyOXdlU0J2WmlCMGFHVWdUR2xqWlc1elpTQmhkRnh1S2x4dUtpQWdJR2gwZEhBNkx5OTNkM2N1WVhCaFkyaGxMbTl5Wnk5c2FXTmxibk5sY3k5TVNVTkZUbE5GTFRJdU1GeHVLbHh1S2lCVmJteGxjM01nY21WeGRXbHlaV1FnWW5rZ1lYQndiR2xqWVdKc1pTQnNZWGNnYjNJZ1lXZHlaV1ZrSUhSdklHbHVJSGR5YVhScGJtY3NJSE52Wm5SM1lYSmxYRzRxSUdScGMzUnlhV0oxZEdWa0lIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObElHbHpJR1JwYzNSeWFXSjFkR1ZrSUc5dUlHRnVJRndpUVZNZ1NWTmNJaUJDUVZOSlV5eGNiaW9nVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WklFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1WEc0cUlGTmxaU0IwYUdVZ1RHbGpaVzV6WlNCbWIzSWdkR2hsSUhOd1pXTnBabWxqSUd4aGJtZDFZV2RsSUdkdmRtVnlibWx1WnlCd1pYSnRhWE56YVc5dWN5QmhibVJjYmlvZ2JHbHRhWFJoZEdsdmJuTWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVXVYRzRxS2k5Y2JtbHRjRzl5ZENCN0lHUnBkbWxrWlZWU1RDQjlJR1p5YjIwZ0p5NHVMM1YwYVd4ekwzVjBhV3h6Snp0Y2JtbHRjRzl5ZENCUFltcGxZM1JCYkd4dlkyRjBhVzl1SUdaeWIyMGdKeTR2VDJKcVpXTjBRV3hzYjJOaGRHbHZiaWM3WEc1cGJYQnZjblFnVW1Wd2IzSjBaWEpQWW1wbFkzUWdabkp2YlNBbkxpOVNaWEJ2Y25SbGNrOWlhbVZqZENjN1hHNXBiWEJ2Y25RZ1QySnpaWEoyWlhKUFltcGxZM1FnWm5KdmJTQW5MaTlQWW5ObGNuWmxjazlpYW1WamRDYzdYRzVwYlhCdmNuUWdkSFkwSUdaeWIyMGdKeTR1TDNWMGFXeHpMM1IyTkNjN1hHNWNibWx0Y0c5eWRDQjdUV1Z6YzJGblpVWmhZM1J2Y25sOUlHWnliMjBnSjNObGNuWnBZMlV0Wm5KaGJXVjNiM0pyTDJScGMzUXZUV1Z6YzJGblpVWmhZM1J2Y25rbk8xeHVYRzR2S2lwY2JpQXFJRUJoZFhSb2IzSWdiV2xqWVdWc2NHVmtjbTl6WVVCbmJXRnBiQzVqYjIxY2JpQXFJRU52Y21VZ1UzbHVZM0p2Ym1sNllYUnBiMjRnYzNsemRHVnRMbHh1SUNvdlhHNWpiR0Z6Y3lCVGVXNWphR1Z5VFdGdVlXZGxjaUI3WEc0Z0lDOHFJSEJ5YVhaaGRHVmNiaUFnWDNWeWJEb2dWVkpNWEc0Z0lGOWlkWE02SUUxcGJtbENkWE5jYmlBZ1gzSmxaMmx6ZEhKNU9pQlNaV2RwYzNSeWVWeHVJQ0JmWVd4c2IyTmhkRzl5T2lCUFltcGxZM1JCYkd4dlkyRjBhVzl1WEc1Y2JpQWdYM0psY0c5eWRHVnljem9nZXlCUFltcGxZM1JWVWt3NklGSmxjRzl5ZEdWeVQySnFaV04wSUgxY2JpQWdYMjlpYzJWeWRtVnljem9nZXlCUFltcGxZM1JWVWt3NklFOWljMlZ5ZG1WeVQySnFaV04wSUgxY2JpQWdLaTljYmx4dUlDQmpiMjV6ZEhKMVkzUnZjaWh5ZFc1MGFXMWxWVkpNTENCaWRYTXNJSEpsWjJsemRISjVMQ0JqWVhSaGJHOW5MQ0JoYkd4dlkyRjBiM0lwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdYM1JvYVhNdVgySjFjeUE5SUdKMWN6dGNiaUFnSUNCZmRHaHBjeTVmY21WbmFYTjBjbmtnUFNCeVpXZHBjM1J5ZVR0Y2JpQWdJQ0JmZEdocGN5NWZZMkYwWVd4dlp5QTlJR05oZEdGc2IyYzdYRzVjYmlBZ0lDQXZMMVJQUkU4NklIUm9aWE5sSUhOb2IzVnNaQ0JpWlNCellYWmxaQ0JwYmlCd1pYSnphWE4wWlc1alpTQmxibWRwYm1VL1hHNGdJQ0FnWDNSb2FYTXVYM1Z5YkNBOUlISjFiblJwYldWVlVrd2dLeUFuTDNOdEp6dGNiaUFnSUNCZmRHaHBjeTVmYjJKcVpXTjBWVkpNSUQwZ2NuVnVkR2x0WlZWU1RDQXJJQ2N2YjJKcVpXTjBMV0ZzYkc5allYUnBiMjRuTzF4dVhHNGdJQ0FnWDNSb2FYTXVYM0psY0c5eWRHVnljeUE5SUh0OU8xeHVJQ0FnSUY5MGFHbHpMbDl2WW5ObGNuWmxjbk1nUFNCN2ZUdGNibHh1SUNBZ0lDOHZWRTlFVHpvZ2RHaHBjeUJ6YUc5MWJHUWdibTkwSUdKbElHaGhjbVJqYjJSbFpDRmNiaUFnSUNCZmRHaHBjeTVmWkc5dFlXbHVJRDBnWkdsMmFXUmxWVkpNS0hKMWJuUnBiV1ZWVWt3cExtUnZiV0ZwYmp0Y2JseHVJQ0FnSUY5MGFHbHpMbDl0WmlBOUlHNWxkeUJOWlhOellXZGxSbUZqZEc5eWVTaG1ZV3h6WlN3Z2UzMHBPMXh1WEc0Z0lDQWdhV1lnS0dGc2JHOWpZWFJ2Y2lrZ2UxeHVJQ0FnSUNBZ1gzUm9hWE11WDJGc2JHOWpZWFJ2Y2lBOUlHRnNiRzlqWVhSdmNqdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnWDNSb2FYTXVYMkZzYkc5allYUnZjaUE5SUc1bGR5QlBZbXBsWTNSQmJHeHZZMkYwYVc5dUtGOTBhR2x6TGw5dlltcGxZM1JWVWt3c0lHSjFjeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZblZ6TG1Ga1pFeHBjM1JsYm1WeUtGOTBhR2x6TGw5MWNtd3NJQ2h0YzJjcElEMCtJSHRjYmlBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkVGVXNWphR1Z5VFdGdVlXZGxjaTFTUTFZNklDY3NJRzF6WnlrN1hHNGdJQ0FnSUNCemQybDBZMmdnS0cxelp5NTBlWEJsS1NCN1hHNGdJQ0FnSUNBZ0lHTmhjMlVnSjJOeVpXRjBaU2M2SUY5MGFHbHpMbDl2YmtOeVpXRjBaU2h0YzJjcE95QmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuWkdWc1pYUmxKem9nWDNSb2FYTXVYMjl1UkdWc1pYUmxLRzF6WnlrN0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNCallYTmxJQ2R6ZFdKelkzSnBZbVVuT2lCZmRHaHBjeTVmYjI1TWIyTmhiRk4xWW5OamNtbGlaU2h0YzJjcE95QmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuZFc1emRXSnpZM0pwWW1Vbk9pQmZkR2hwY3k1ZmIyNU1iMk5oYkZWdVUzVmljMk55YVdKbEtHMXpaeWs3SUdKeVpXRnJPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnWjJWMElIVnliQ2dwSUhzZ2NtVjBkWEp1SUhSb2FYTXVYM1Z5YkRzZ2ZWeHVYRzRnSUM4dlJreFBWeTFKVGpvZ2JXVnpjMkZuWlNCeVpXTmxhWFpsWkNCbWNtOXRJRk41Ym1Ob1pYSWdMVDRnWTNKbFlYUmxYRzRnSUY5dmJrTnlaV0YwWlNodGMyY3BJSHRjYmx4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ2JHVjBJRzkzYm1WeUlEMGdiWE5uTG1aeWIyMDdYRzRnSUNBZ2JHVjBJR1J2YldGcGJpQTlJR1JwZG1sa1pWVlNUQ2h0YzJjdVpuSnZiU2t1Wkc5dFlXbHVPMXh1WEc0Z0lDQWdhV1lnS0cxelp5NWliMlI1TG5KbGMyOTFjbU5sS1NCN1hHNGdJQ0FnSUNCZmRHaHBjeTVmWVhWMGFHOXlhWE5sS0cxelp5d2diWE5uTG1KdlpIa3VjbVZ6YjNWeVkyVXBPMXh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dloyVjBJSE5qYUdWdFlTQm1jbTl0SUdOaGRHRnNiMmQxWlNCaGJtUWdjR0Z5YzJVZ0xUNGdLSE5qYUdWdFpTd2dZMmhwYkdSeVpXNHBYRzRnSUNBZ1gzUm9hWE11WDJOaGRHRnNiMmN1WjJWMFJHRjBZVk5qYUdWdFlVUmxjMk55YVhCMGIzSW9iWE5uTG1KdlpIa3VjMk5vWlcxaEtTNTBhR1Z1S0Noa1pYTmpjbWx3ZEc5eUtTQTlQaUI3WEc1Y2JpQWdJQ0FnSUd4bGRDQndjbTl3WlhKMGFXVnpJRDBnWkdWelkzSnBjSFJ2Y2k1emIzVnlZMlZRWVdOcllXZGxMbk52ZFhKalpVTnZaR1V1Y0hKdmNHVnlkR2xsY3p0Y2JpQWdJQ0FnSUd4bGRDQnpZMmhsYldVZ1BTQndjbTl3WlhKMGFXVnpMbk5qYUdWdFpTQS9JSEJ5YjNCbGNuUnBaWE11YzJOb1pXMWxMbU52Ym5OMFlXNTBJRG9nSjNKbGMyOTFjbU5sSnp0Y2JpQWdJQ0FnSUd4bGRDQmphR2xzWkhKbGJuTWdQU0J3Y205d1pYSjBhV1Z6TG1Ob2FXeGtjbVZ1SUQ4Z2NISnZjR1Z5ZEdsbGN5NWphR2xzWkhKbGJpNWpiMjV6ZEdGdWRDQTZJRnRkTzF4dVhHNGdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25VMk5vWlcxbE9pQW5MQ0J6WTJobGJXVXBPMXh1WEc0Z0lDQWdJQ0F2THlCelkyaGxiV0VnZG1Gc2FXUmhkR2x2Ymx4dUlDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oxSjFibTVwYm1jZ2IySnFaV04wSUhaaGJHbGtZWFJwYjI0dUxpNG5LVHRjYmlBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J2WW1vZ1BTQnRjMmN1WW05a2VTNTJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ2JHVjBJSE5qYUdWdFlTQTlJR1JsYzJOeWFYQjBiM0l1YzI5MWNtTmxVR0ZqYTJGblpTNXpiM1Z5WTJWRGIyUmxPMXh1WEc0Z0lDQWdJQ0FnSUM4dklHRmtaQ0J6ZFhCd2IzSjBJR1p2Y2lCelkyaGxiV0VnY21WbVpYSmxibU5wYm1jZ2FYUnpaV3htWEc0Z0lDQWdJQ0FnSUhSMk5DNWhaR1JUWTJobGJXRW9jMk5vWlcxaExtbGtMQ0J6WTJobGJXRXBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklIWmhiR2xrWVhSbFhHNGdJQ0FnSUNBZ0lHeGxkQ0J5WlhOMWJIUWdQU0IwZGpRdWRtRnNhV1JoZEdWTmRXeDBhWEJzWlNodlltb3NJSE5qYUdWdFlTazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1pHVnNaWFJsSUdWeWNtOXlJSE4wWVdOcmN5QjBieUJwYlhCeWIzWmxJR3h2WjJkcGJtZGNiaUFnSUNBZ0lDQWdjbVZ6ZFd4MExtVnljbTl5Y3k1bWIzSkZZV05vS0NobGNuSnZjaWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJR1JsYkdWMFpTQmxjbkp2Y2k1emRHRmphenRjYmlBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDQWdMeThnY0hKcGJuUWdiVzl5WlNCa1pYUmhhV3h6SUdGaWIzVjBJSFpoYkdsa1lYUnBiMjRnYVdZZ2FYUWdabUZwYkhNZ2IzSWdjMk5vWlcxaElHTnZiblJoYVc1eklDUnlaV1p6WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hjbVZ6ZFd4MExuWmhiR2xrSUh4OElDaHlaWE4xYkhRdWJXbHpjMmx1Wnk1c1pXNW5kR2dnUGlBd0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpZ25UMkpxWldOMElIWmhiR2xrWVhScGIyNGdKeUFySUNoeVpYTjFiSFF1ZG1Gc2FXUWdQeUFuYzNWalkyVmxaR1ZrTENCaWRYUWdjMk5vWlcxaElHTnZiblJoYVc1bFpDQnlaV1psY21WdVkyVnpPaWNnT2lBblptRnBiR1ZrT2ljcExDQktVMDlPTG5OMGNtbHVaMmxtZVNoeVpYTjFiSFFzSUc1MWJHd3NJRElwS1R0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtUmxZblZuS0NkUFltcGxZM1E2Snl3Z1NsTlBUaTV6ZEhKcGJtZHBabmtvYjJKcUxDQnVkV3hzTENBeUtTd2dKMXhjY2x4Y2JsTmphR1Z0WVRvbkxDQktVMDlPTG5OMGNtbHVaMmxtZVNoelkyaGxiV0VzSUc1MWJHd3NJRElwS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduVDJKcVpXTjBJSFpoYkdsa1lYUnBiMjRnYzNWalkyVmxaR1ZrSnlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtDZEZjbkp2Y2lCa2RYSnBibWNnYjJKcVpXTjBJSFpoYkdsa1lYUnBiMjQ2Snl3Z1pTazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2Y21WeGRXVnpkQ0JoWkdSeVpYTnpJR0ZzYkc5allYUnBiMjRnYjJZZ1lTQnVaWGNnYjJKcVpXTjBJR1p5YjIwZ2RHaGxJRzF6WnkxdWIyUmxYRzRnSUNBZ0lDQmZkR2hwY3k1ZllXeHNiMk5oZEc5eUxtTnlaV0YwWlNoa2IyMWhhVzRzSUhOamFHVnRaU3dnTVNrdWRHaGxiaWdvWVd4c2IyTmhkR1ZrS1NBOVBpQjdYRzRnSUNBZ0lDQWdJR3hsZENCdlltcFZVa3dnUFNCaGJHeHZZMkYwWldSYk1GMDdYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0owRk1URTlEUVZSUFVpQkRVa1ZCVkVVNkp5d2dZV3hzYjJOaGRHVmtLVHRjYmx4dUlDQWdJQ0FnSUNCc1pYUWdjM1ZpYzJOeWFYQjBhVzl1VlZKTUlEMGdiMkpxVlZKTUlDc2dKeTl6ZFdKelkzSnBjSFJwYjI0bk8xeHVYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkVGRXSnpZM0pwY0hScGIyNGdWVkpNSnl3Z2MzVmljMk55YVhCMGFXOXVWVkpNS1R0Y2JseHVJQ0FnSUNBZ0lDQXZMMVJ2SUhKbFoybHpkR1Z5SUhSb1pTQmtZWFJoVDJKcVpXTjBJR2x1SUhSb1pTQnlkVzUwYVcxbFVtVm5hWE4wY25sY2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1cGJtWnZLQ2RTWldkcGMzUmxjaUJQWW1wbFkzUTZJQ2NzSUcxelp5NWliMlI1TG5aaGJIVmxMbTVoYldVc0lHMXpaeTVpYjJSNUxuWmhiSFZsTG5OamFHVnRZU3dnYjJKcVZWSk1MQ0J0YzJjdVltOWtlUzUyWVd4MVpTNXlaWEJ2Y25SbGNpd2diWE5uTG1KdlpIa3VkbUZzZFdVdWNtVnpiM1Z5WTJWektUdGNiaUFnSUNBZ0lDQWdYM1JvYVhNdVgzSmxaMmx6ZEhKNUxuSmxaMmx6ZEdWeVJHRjBZVTlpYW1WamRDaHRjMmN1WW05a2VTNTJZV3gxWlM1dVlXMWxMQ0J0YzJjdVltOWtlUzUyWVd4MVpTNXpZMmhsYldFc0lHOWlhbFZTVEN3Z2JYTm5MbUp2WkhrdWRtRnNkV1V1Y21Wd2IzSjBaWElzSUcxelp5NWliMlI1TG5aaGJIVmxMbkpsYzI5MWNtTmxjeWt1ZEdobGJpaG1kVzVqZEdsdmJpaHlaWE52YkhabEtTQjdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0owUmhkR0ZQWW1wbFkzUWdjM1ZqWTJWemMyWjFiR3g1SUhKbFoybHpkR1Z5WldRbkxDQnlaWE52YkhabEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dllXeHNJRTlMSUMwK0lHTnlaV0YwWlNCeVpYQnZjblJsY2lCaGJtUWdjbVZuYVhOMFpYSWdiR2x6ZEdWdVpYSnpYRzRnSUNBZ0lDQWdJQ0FnYkdWMElISmxjRzl5ZEdWeUlEMGdibVYzSUZKbGNHOXlkR1Z5VDJKcVpXTjBLRjkwYUdsekxDQnZkMjVsY2l3Z2IySnFWVkpNS1R0Y2JpQWdJQ0FnSUNBZ0lDQnlaWEJ2Y25SbGNpNW1iM0ozWVhKa1UzVmljMk55YVdKbEtGdHZZbXBWVWt3c2MzVmljMk55YVhCMGFXOXVWVkpNWFNrdWRHaGxiaWdvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYQnZjblJsY2k1aFpHUkRhR2xzWkhKbGJuTW9ZMmhwYkdSeVpXNXpLUzUwYUdWdUtDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVYM0psY0c5eWRHVnljMXR2WW1wVlVreGRJRDBnY21Wd2IzSjBaWEk3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk5R1RFOVhMVTlWVkRvZ2JXVnpjMkZuWlNCeVpYTndiMjV6WlNCMGJ5QlRlVzVqYUdWeUlDMCtJR055WldGMFpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVmWW5WekxuQnZjM1JOWlhOellXZGxLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWkRvZ2JYTm5MbWxrTENCMGVYQmxPaUFuY21WemNHOXVjMlVuTENCbWNtOXRPaUJ0YzJjdWRHOHNJSFJ2T2lCdmQyNWxjaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpYjJSNU9pQjdJR052WkdVNklESXdNQ3dnY21WemIzVnlZMlU2SUc5aWFsVlNUQ3dnWTJocGJHUnlaVzVTWlhOdmRYSmpaWE02SUdOb2FXeGtjbVZ1Y3lCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZjMlZ1WkNCamNtVmhkR1VnZEc4Z1lXeHNJRzlpYzJWeWRtVnljeXdnY21WemNHOXVjMlZ6SUhkcGJHd2dZbVVnWkdWc2FYWmxjaUIwYnlCMGFHVWdTSGx3WlhKMGVTQnZkMjVsY2o5Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk5elkyaGxaSFZzWlNCbWIzSWdibVY0ZENCamVXTnNaU0J1WldWa1pXUXNJR0psWTJGMWMyVWdkR2hsSUZKbGNHOXlkR1Z5SUhOb2IzVnNaQ0JpWlNCaGRtRnBiR0ZpYkdVdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGRGUnBiV1Z2ZFhRb0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dmQybHNiQ0JwYm5acGRHVWdiM1JvWlhJZ2FIbHdaWEowYVdWelhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11WDJGMWRHaHZjbWx6WlNodGMyY3NJRzlpYWxWU1RDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMHNJR1oxYm1OMGFXOXVLR1Z5Y205eUtTQjdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpaGxjbkp2Y2lrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5S1M1allYUmphQ2dvY21WaGMyOXVLU0E5UGlCN1hHNGdJQ0FnSUNBdkwwWk1UMWN0VDFWVU9pQmxjbkp2Y2lCdFpYTnpZV2RsSUhKbGMzQnZibk5sSUhSdklGTjVibU5vWlhJZ0xUNGdZM0psWVhSbFhHNGdJQ0FnSUNCc1pYUWdjbVZ6Y0c5dWMyVk5jMmNnUFNCN1hHNGdJQ0FnSUNBZ0lHbGtPaUJ0YzJjdWFXUXNJSFI1Y0dVNklDZHlaWE53YjI1elpTY3NJR1p5YjIwNklHMXpaeTUwYnl3Z2RHODZJRzkzYm1WeUxGeHVJQ0FnSUNBZ0lDQmliMlI1T2lCN0lHTnZaR1U2SURVd01Dd2daR1Z6WXpvZ2NtVmhjMjl1SUgxY2JpQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lGOTBhR2x6TGw5aWRYTXVjRzl6ZEUxbGMzTmhaMlVvY21WemNHOXVjMlZOYzJjcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdYMkYxZEdodmNtbHpaU2h0YzJjc0lHOWlhbFZTVENrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdiR1YwSUc5aWFsTjFZbk5qY21sd2RHOXlWVkpNSUQwZ2IySnFWVkpNSUNzZ0p5OXpkV0p6WTNKcGNIUnBiMjRuTzF4dVhHNGdJQ0FnYlhObkxtSnZaSGt1WVhWMGFHOXlhWE5sTG1admNrVmhZMmdvS0doNWNHVnlkSGxWVWt3cElEMCtJSHRjYmlBZ0lDQWdJQzh2Umt4UFZ5MVBWVlE2SUhObGJtUWdhVzUyYVhSbGN5QjBieUJzYVhOMElHOW1JSEpsYlc5MFpTQlRlVzVqYUdWeUlDMCtJRjl2YmxKbGJXOTBaVU55WldGMFpTQXRQaUJ2Yms1dmRHbG1hV05oZEdsdmJseHVJQ0FnSUNBZ1gzUm9hWE11WDJKMWN5NXdiM04wVFdWemMyRm5aU2g3WEc0Z0lDQWdJQ0FnSUhSNWNHVTZJQ2RqY21WaGRHVW5MQ0JtY205dE9pQnZZbXBUZFdKelkzSnBjSFJ2Y2xWU1RDd2dkRzg2SUdoNWNHVnlkSGxWVWt3c1hHNGdJQ0FnSUNBZ0lHSnZaSGs2SUhzZ2FXUmxiblJwZEhrNklHMXpaeTVpYjJSNUxtbGtaVzUwYVhSNUxDQnpiM1Z5WTJVNklHMXpaeTVtY205dExDQjJZV3gxWlRvZ2JYTm5MbUp2WkhrdWRtRnNkV1VzSUhOamFHVnRZVG9nYlhObkxtSnZaSGt1YzJOb1pXMWhJSDFjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5OUdURTlYTFVsT09pQnRaWE56WVdkbElISmxZMlZwZG1Wa0lHWnliMjBnUkdGMFlVOWlhbVZqZEZKbGNHOXlkR1Z5SUMwK0lHUmxiR1YwWlZ4dUlDQmZiMjVFWld4bGRHVW9iWE5uS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJR3hsZENCdlltcFZVa3dnUFNCdGMyY3VZbTlrZVM1eVpYTnZkWEpqWlR0Y2JseHVJQ0FnSUd4bGRDQnZZbXBsWTNRZ1BTQmZkR2hwY3k1ZmNtVndiM0owWlhKelcyOWlhbFZTVEYwN1hHNGdJQ0FnYVdZZ0tHOWlhbVZqZENrZ2UxeHVJQ0FnSUNBZ0x5OVVUMFJQT2lCcGN5QjBhR1Z5WlNCaGJua2djRzlzYVdONUlIWmxjbWxtYVdOaGRHbHZiaUJpWldadmNtVWdaR1ZzWlhSbFAxeHVJQ0FnSUNBZ2IySnFaV04wTG1SbGJHVjBaU2dwTzF4dVhHNGdJQ0FnSUNBdkwxUlBSRTg2SUhWdWNtVm5hWE4wWlhJZ2IySnFaV04wUDF4dUlDQWdJQ0FnWDNSb2FYTXVYMkoxY3k1d2IzTjBUV1Z6YzJGblpTaDdYRzRnSUNBZ0lDQWdJR2xrT2lCdGMyY3VhV1FzSUhSNWNHVTZJQ2R5WlhOd2IyNXpaU2NzSUdaeWIyMDZJRzF6Wnk1MGJ5d2dkRzg2SUcxelp5NW1jbTl0TEZ4dUlDQWdJQ0FnSUNCaWIyUjVPaUI3SUdOdlpHVTZJREl3TUNCOVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZMMFpNVDFjdFNVNDZJRzFsYzNOaFoyVWdjbVZqWldsMlpXUWdabkp2YlNCc2IyTmhiQ0JUZVc1amFHVnlJQzArSUhOMVluTmpjbWxpWlZ4dUlDQmZiMjVNYjJOaGJGTjFZbk5qY21saVpTaHRjMmNwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdiR1YwSUdoNWNHVnlkSGxWVWt3Z1BTQnRjMmN1Wm5KdmJUdGNiaUFnSUNCc1pYUWdiMkpxVlZKTUlEMGdiWE5uTG1KdlpIa3VjbVZ6YjNWeVkyVTdYRzRnSUNBZ2JHVjBJRzlpYWxWU1RGTjFZbk5qY21sd2RHbHZiaUE5SUc5aWFsVlNUQ0FySUNjdmMzVmljMk55YVhCMGFXOXVKenRjYmlBZ0lDQnNaWFFnWTJocGJHUkNZWE5sVlZKTUlEMGdiMkpxVlZKTUlDc2dKeTlqYUdsc1pISmxiaThuTzF4dVhHNGdJQ0FnYkdWMElHUnZiV0ZwYmlBOUlHUnBkbWxrWlZWU1RDaHZZbXBWVWt3cExtUnZiV0ZwYmp0Y2JseHVJQ0FnSUM4dloyVjBJSE5qYUdWdFlTQm1jbTl0SUdOaGRHRnNiMmQxWlNCaGJtUWdjR0Z5YzJVZ0xUNGdLR05vYVd4a2NtVnVLVnh1SUNBZ0lGOTBhR2x6TGw5allYUmhiRzluTG1kbGRFUmhkR0ZUWTJobGJXRkVaWE5qY21sd2RHOXlLRzF6Wnk1aWIyUjVMbk5qYUdWdFlTa3VkR2hsYmlnb1pHVnpZM0pwY0hSdmNpa2dQVDRnZTF4dUlDQWdJQ0FnYkdWMElIQnliM0JsY25ScFpYTWdQU0JrWlhOamNtbHdkRzl5TG5OdmRYSmpaVkJoWTJ0aFoyVXVjMjkxY21ObFEyOWtaUzV3Y205d1pYSjBhV1Z6TzF4dUlDQWdJQ0FnYkdWMElHTm9hV3hrY21WdWN5QTlJSEJ5YjNCbGNuUnBaWE11WTJocGJHUnlaVzRnUHlCd2NtOXdaWEowYVdWekxtTm9hV3hrY21WdUxtTnZibk4wWVc1MElEb2dXMTA3WEc1Y2JpQWdJQ0FnSUM4dlkyaHBiR1J5Wlc0Z1lXUmtjbVZ6YzJWelhHNGdJQ0FnSUNCc1pYUWdjM1ZpYzJOeWFYQjBhVzl1Y3lBOUlGdGRPMXh1SUNBZ0lDQWdjM1ZpYzJOeWFYQjBhVzl1Y3k1d2RYTm9LRzlpYWxWU1RDQXJJQ2N2WTJoaGJtZGxjeWNwTzF4dUlDQWdJQ0FnWTJocGJHUnlaVzV6TG1admNrVmhZMmdvS0dOb2FXeGtLU0E5UGlCemRXSnpZM0pwY0hScGIyNXpMbkIxYzJnb1kyaHBiR1JDWVhObFZWSk1JQ3NnWTJocGJHUXBLVHRjYmx4dUlDQWdJQ0FnTHk5R1RFOVhMVTlWVkRvZ2MzVmljMk55YVdKbElHMWxjM05oWjJVZ2RHOGdkR2hsSUcxelp5MXViMlJsTENCeVpXZHBjM1JsY21sdVp5QnNhWE4wWlc1bGNuTWdiMjRnZEdobElHSnliMnRsY2x4dUlDQWdJQ0FnYkdWMElHNXZaR1ZUZFdKelkzSnBZbVZOYzJjZ1BTQjdYRzRnSUNBZ0lDQWdJSFI1Y0dVNklDZHpkV0p6WTNKcFltVW5MQ0JtY205dE9pQmZkR2hwY3k1ZmRYSnNMQ0IwYnpvZ0oyUnZiV0ZwYmpvdkwyMXpaeTF1YjJSbExpY2dLeUJrYjIxaGFXNGdLeUFuTDNOdEp5eGNiaUFnSUNBZ0lDQWdZbTlrZVRvZ2V5QnBaR1Z1ZEdsMGVUb2diWE5uTG1KdlpIa3VhV1JsYm5ScGRIa3NJSE4xWW5OamNtbGlaVG9nYzNWaWMyTnlhWEIwYVc5dWN5d2djMjkxY21ObE9pQm9lWEJsY25SNVZWSk1JSDFjYmlBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUM4dmMzVmljMk55YVdKbElHbHVJRzF6WnkxdWIyUmxYRzRnSUNBZ0lDQmZkR2hwY3k1ZlluVnpMbkJ2YzNSTlpYTnpZV2RsS0c1dlpHVlRkV0p6WTNKcFltVk5jMmNzSUNoeVpYQnNlU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduYm05a1pTMXpkV0p6WTNKcFltVXRjbVZ6Y0c5dWMyVW9iMkp6WlhKMlpYSXBPaUFuTENCeVpYQnNlU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaHlaWEJzZVM1aWIyUjVMbU52WkdVZ1BUMDlJREl3TUNrZ2UxeHVYRzRnSUNBZ0lDQWdJQ0FnTHk5R1RFOVhMVTlWVkRvZ2NtVndiSGtnZDJsMGFDQndjbTkyYVhOcGIyNWhiQ0J5WlhOd2IyNXpaVnh1SUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbDlpZFhNdWNHOXpkRTFsYzNOaFoyVW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXUTZJRzF6Wnk1cFpDd2dkSGx3WlRvZ0ozSmxjM0J2Ym5ObEp5d2dabkp2YlRvZ2JYTm5MblJ2TENCMGJ6b2dhSGx3WlhKMGVWVlNUQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHSnZaSGs2SUhzZ1kyOWtaVG9nTVRBd0xDQmphR2xzWkhKbGJsSmxjMjkxY21ObGN6b2dZMmhwYkdSeVpXNXpJSDFjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dlJreFBWeTFQVlZRNklITjFZbk5qY21saVpTQnRaWE56WVdkbElIUnZJSEpsYlc5MFpTQlNaWEJ2Y25SbGNrOWlhbVZqZENBdFBpQmZiMjVTWlcxdmRHVlRkV0p6WTNKcFltVmNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2IySnFVM1ZpYzJOeWFXSmxUWE5uSUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dKM04xWW5OamNtbGlaU2NzSUdaeWIyMDZJRjkwYUdsekxsOTFjbXdzSUhSdk9pQnZZbXBWVWt4VGRXSnpZM0pwY0hScGIyNHNYRzRnSUNBZ0lDQWdJQ0FnSUNCaWIyUjVPaUI3SUdsa1pXNTBhWFI1T2lCdWIyUmxVM1ZpYzJOeWFXSmxUWE5uTG1KdlpIa3VhV1JsYm5ScGRIa3NJSE4xWW5OamNtbGlaWEk2SUdoNWNHVnlkSGxWVWt3Z2ZWeHVJQ0FnSUNBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMM04xWW5OamNtbGlaU0IwYnlCeVpYQnZjblJsY2lCVFRWeHVJQ0FnSUNBZ0lDQWdJRjkwYUdsekxsOWlkWE11Y0c5emRFMWxjM05oWjJVb2IySnFVM1ZpYzJOeWFXSmxUWE5uTENBb2NtVndiSGtwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZHlaWEJ2Y25SbGNpMXpkV0p6WTNKcFltVXRjbVZ6Y0c5dWMyVTZJQ2NzSUhKbGNHeDVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5WlhCc2VTNWliMlI1TG1OdlpHVWdQVDA5SURJd01Da2dlMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdlluTmxjblpsY2lBOUlGOTBhR2x6TGw5dlluTmxjblpsY25OYmIySnFWVkpNWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnZZbk5sY25abGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzlpYzJWeWRtVnlJRDBnYm1WM0lFOWljMlZ5ZG1WeVQySnFaV04wS0Y5MGFHbHpMQ0J2WW1wVlVrd3NJR05vYVd4a2NtVnVjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVYMjlpYzJWeWRtVnljMXR2WW1wVlVreGRJRDBnYjJKelpYSjJaWEk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0F2TDNKbFoybHpkR1Z5SUdoNWNHVnlkSGtnYzNWaWMyTnlhWEIwYVc5dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUc5aWMyVnlkbVZ5TG1Ga1pGTjFZbk5qY21sd2RHbHZiaWhvZVhCbGNuUjVWVkpNS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkwyWnZjbmRoY21RZ2RHOGdhSGx3WlhKMGVUcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVndiSGt1YVdRZ1BTQnRjMmN1YVdRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGNHeDVMbVp5YjIwZ1BTQmZkR2hwY3k1ZmRYSnNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWEJzZVM1MGJ5QTlJR2g1Y0dWeWRIbFZVa3c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgySjFjeTV3YjNOMFRXVnpjMkZuWlNoeVpYQnNlU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0F2TDJ4cGMzUmxibVZ5SUhKbGFtVmpkR1ZrWEc0Z0lDQWdJQ0FnSUNBZ1gzUm9hWE11WDJKMWN5NXdiM04wVFdWemMyRm5aU2g3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaRG9nYlhObkxtbGtMQ0IwZVhCbE9pQW5jbVZ6Y0c5dWMyVW5MQ0JtY205dE9pQnRjMmN1ZEc4c0lIUnZPaUJvZVhCbGNuUjVWVkpNTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZbTlrZVRvZ2NtVndiSGt1WW05a2VWeHVJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzh2Umt4UFZ5MUpUam9nYldWemMyRm5aU0J5WldObGFYWmxaQ0JtY205dElHeHZZMkZzSUVSaGRHRlBZbXBsWTNSUFluTmxjblpsY2lBdFBpQjFibk4xWW5OamNtbGlaVnh1SUNCZmIyNU1iMk5oYkZWdVUzVmljMk55YVdKbEtHMXpaeWtnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQnNaWFFnYUhsd1pYSjBlVlZTVENBOUlHMXpaeTVtY205dE8xeHVJQ0FnSUd4bGRDQnZZbXBWVWt3Z1BTQnRjMmN1WW05a2VTNXlaWE52ZFhKalpUdGNibHh1SUNBZ0lHeGxkQ0J2WW5ObGNuWmxjaUE5SUY5MGFHbHpMbDl2WW5ObGNuWmxjbk5iYjJKcVZWSk1YVHRjYmlBZ0lDQnBaaUFvYjJKelpYSjJaWElwSUh0Y2JpQWdJQ0FnSUM4dlZFOUVUem9nYVhNZ2RHaGxjbVVnWVc1NUlIQnZiR2xqZVNCMlpYSnBabWxqWVhScGIyNGdZbVZtYjNKbElHUmxiR1YwWlQ5Y2JpQWdJQ0FnSUc5aWMyVnlkbVZ5TG5KbGJXOTJaVk4xWW5OamNtbHdkR2x2Ymlob2VYQmxjblI1VlZKTUtUdGNibHh1SUNBZ0lDQWdMeTlVVDBSUE9pQmtaWE4wY205NUlHOWlhbVZqZENCcGJpQjBhR1VnY21WbmFYTjBjbmsvWEc0Z0lDQWdJQ0JmZEdocGN5NWZZblZ6TG5CdmMzUk5aWE56WVdkbEtIdGNiaUFnSUNBZ0lDQWdhV1E2SUcxelp5NXBaQ3dnZEhsd1pUb2dKM0psYzNCdmJuTmxKeXdnWm5KdmJUb2diWE5uTG5SdkxDQjBiem9nYlhObkxtWnliMjBzWEc0Z0lDQWdJQ0FnSUdKdlpIazZJSHNnWTI5a1pUb2dNakF3SUgxY2JpQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQXZMMVJQUkU4NklISmxiVzkyWlNCUFltcGxZM1FnYVdZZ2JtOGdiVzl5WlNCemRXSnpZM0pwY0hScGIyNC9YRzRnSUNBZ0lDQXZMMlJsYkdWMFpTQmZkR2hwY3k1ZmIySnpaWEoyWlhKelcyOWlhbFZTVEYwN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1UzbHVZMmhsY2sxaGJtRm5aWEk3WEc0aUxDSXZLaXBjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVUZRZ1NXNXZkbUhEcDhPamJ5QmxJRk5wYzNSbGJXRnpJRk5CWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVsT1JWTkRMVWxFWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUZGVlQwSkpVeUJPUlZSWFQxSkxVeUJUVEZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCR1VrRlZUa2hQUmtWU0xVZEZVMFZNVEZORFNFRkdWQ0JhVlZJZ1JrOUZVa1JGVWxWT1J5QkVSVklnUVU1SFJWZEJUa1JVUlU0Z1JrOVNVME5JVlU1SElFVXVWbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJQVWtGT1IwVWdVMEZjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnUkdWMWRITmphR1VnVkdWc1pXdHZiU0JCUjF4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCQmNHbDZaV1ZjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVkVWRFNFNUpVME5JUlNCVlRrbFdSVkpUU1ZSQlZDQkNSVkpNU1U1Y2JpcGNiaW9nVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUVGd1lXTm9aU0JNYVdObGJuTmxMQ0JXWlhKemFXOXVJREl1TUNBb2RHaGxJRndpVEdsalpXNXpaVndpS1R0Y2Jpb2dlVzkxSUcxaGVTQnViM1FnZFhObElIUm9hWE1nWm1sc1pTQmxlR05sY0hRZ2FXNGdZMjl0Y0d4cFlXNWpaU0IzYVhSb0lIUm9aU0JNYVdObGJuTmxMbHh1S2lCWmIzVWdiV0Y1SUc5aWRHRnBiaUJoSUdOdmNIa2diMllnZEdobElFeHBZMlZ1YzJVZ1lYUmNiaXBjYmlvZ0lDQm9kSFJ3T2k4dmQzZDNMbUZ3WVdOb1pTNXZjbWN2YkdsalpXNXpaWE12VEVsRFJVNVRSUzB5TGpCY2JpcGNiaW9nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxDQnpiMlowZDJGeVpWeHVLaUJrYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlNCcGN5QmthWE4wY21saWRYUmxaQ0J2YmlCaGJpQmNJa0ZUSUVsVFhDSWdRa0ZUU1ZNc1hHNHFJRmRKVkVoUFZWUWdWMEZTVWtGT1ZFbEZVeUJQVWlCRFQwNUVTVlJKVDA1VElFOUdJRUZPV1NCTFNVNUVMQ0JsYVhSb1pYSWdaWGh3Y21WemN5QnZjaUJwYlhCc2FXVmtMbHh1S2lCVFpXVWdkR2hsSUV4cFkyVnVjMlVnWm05eUlIUm9aU0J6Y0dWamFXWnBZeUJzWVc1bmRXRm5aU0JuYjNabGNtNXBibWNnY0dWeWJXbHpjMmx2Ym5NZ1lXNWtYRzRxSUd4cGJXbDBZWFJwYjI1eklIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObExseHVLaW92WEc0dktpcGNiaUFxSUVWMlpXNTBSVzFwZEhSbGNseHVJQ29nUVd4c0lHTnNZWE56WlhNZ2QyaHBZMmdnWlhoMFpXNWtjeUIwYUdsekxDQmpZVzRnYUdGMlpTQmhaR1JGZG1WdWRFeHBjM1JsYm1WeUlHRnVaQ0IwY21sbloyVnlJR1YyWlc1MGN6dGNiaUFxTDF4dVkyeGhjM01nUlhabGJuUkZiV2wwZEdWeUlIdGNibHh1SUNBdktpcGNiaUFnSUNvZ1lXUmtSWFpsYm5STWFYTjBaVzVsY2lCc2FYTjBaVzRnWm05eUlHRnVJR1YyWlc1MFZIbHdaVnh1SUNBZ0tpQkFjR0Z5WVcwZ0lIdHpkSEpwYm1kOUlDQWdJQ0FnSUNBZ1pYWmxiblJVZVhCbElDMGdiR2x6ZEdWdWFXNW5JR1p2Y2lCMGFHbHpJSFI1Y0dVZ2IyWWdaWFpsYm5SY2JpQWdJQ29nUUhCaGNtRnRJQ0I3Um5WdVkzUnBiMjU5SUNBZ0lDQWdJR05pSUNBZ0lDQWdJQ0F0SUdOaGJHeGlZV05ySUdaMWJtTjBhVzl1SUhkcGJHd2dZbVVnWlhobFkzVjBaV1FnZDJobGJpQjBhR1VnWlhabGJuUWdhWFFnYVhNZ2FXNTJiMnRsWkZ4dUlDQWdLaTljYmlBZ1lXUmtSWFpsYm5STWFYTjBaVzVsY2lobGRtVnVkRlI1Y0dVc0lHTmlLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNiaUFnSUNCZmRHaHBjMXRsZG1WdWRGUjVjR1ZkSUQwZ1kySTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nU1c1MmIydGxJSFJvWlNCbGRtVnVkRlI1Y0dWY2JpQWdJQ29nUUhCaGNtRnRJQ0I3YzNSeWFXNW5mU0JsZG1WdWRGUjVjR1VnTFNCbGRtVnVkQ0IzYVd4c0lHSmxJR2x1ZG05clpXUmNiaUFnSUNvZ1FIQmhjbUZ0SUNCN2IySnFaV04wZlNCd1lYSmhiWE1nTFNCd1lYSmhiV1YwWlhKeklIZHBiR3dnWW1VZ2NHRnpjMlZrSUhSdklIUm9aU0JoWkdSRmRtVnVkRXhwYzNSbGJtVnlYRzRnSUNBcUwxeHVJQ0IwY21sbloyVnlLR1YyWlc1MFZIbHdaU3dnY0dGeVlXMXpLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lHbG1JQ2hmZEdocGMxdGxkbVZ1ZEZSNWNHVmRLU0I3WEc0Z0lDQWdJQ0JmZEdocGMxdGxkbVZ1ZEZSNWNHVmRLSEJoY21GdGN5azdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JuMWNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdSWFpsYm5SRmJXbDBkR1Z5TzF4dUlpd2lMeXBjYmlCQmRYUm9iM0k2SUVkbGNtRnBiblFnVEhWbVppQmhibVFnYjNSb1pYSnpYRzRnV1dWaGNqb2dNakF4TTF4dVhHNGdWR2hwY3lCamIyUmxJR2x6SUhKbGJHVmhjMlZrSUdsdWRHOGdkR2hsSUZ3aWNIVmliR2xqSUdSdmJXRnBibHdpSUdKNUlHbDBjeUJoZFhSb2IzSW9jeWt1SUNCQmJubGliMlI1SUcxaGVTQjFjMlVzSUdGc2RHVnlJR0Z1WkNCa2FYTjBjbWxpZFhSbElIUm9aU0JqYjJSbElIZHBkR2h2ZFhRZ2NtVnpkSEpwWTNScGIyNHVJQ0JVYUdVZ1lYVjBhRzl5SUcxaGEyVnpJRzV2SUdkMVlYSmhiblJsWlhNc0lHRnVaQ0IwWVd0bGN5QnVieUJzYVdGaWFXeHBkSGtnYjJZZ1lXNTVJR3RwYm1RZ1ptOXlJSFZ6WlNCdlppQjBhR2x6SUdOdlpHVXVYRzVjYmlCSlppQjViM1VnWm1sdVpDQmhJR0oxWnlCdmNpQnRZV3RsSUdGdUlHbHRjSEp2ZG1WdFpXNTBMQ0JwZENCM2IzVnNaQ0JpWlNCamIzVnlkR1Z2ZFhNZ2RHOGdiR1YwSUhSb1pTQmhkWFJvYjNJZ2EyNXZkeXdnWW5WMElHbDBJR2x6SUc1dmRDQmpiMjF3ZFd4emIzSjVMbHh1SUNvdlhHNHZMeUJvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTV0YjNwcGJHeGhMbTl5Wnk5bGJpMVZVeTlrYjJOekwxZGxZaTlLWVhaaFUyTnlhWEIwTDFKbFptVnlaVzVqWlM5SGJHOWlZV3hmVDJKcVpXTjBjeTlQWW1wbFkzUXZhMlY1Y3o5eVpXUnBjbVZqZEd4dlkyRnNaVDFsYmkxVlV5WnlaV1JwY21WamRITnNkV2M5U21GMllWTmpjbWx3ZENVeVJsSmxabVZ5Wlc1alpTVXlSa2RzYjJKaGJGOVBZbXBsWTNSekpUSkdUMkpxWldOMEpUSkdhMlY1YzF4dWFXWWdLQ0ZQWW1wbFkzUXVhMlY1Y3lrZ2UxeHVJQ0FnSUU5aWFtVmpkQzVyWlhseklEMGdLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR2hoYzA5M2JsQnliM0JsY25SNUlEMGdUMkpxWldOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2hoYzBSdmJuUkZiblZ0UW5WbklEMGdJU2g3ZEc5VGRISnBibWM2SUc1MWJHeDlLUzV3Y205d1pYSjBlVWx6Ulc1MWJXVnlZV0pzWlNnbmRHOVRkSEpwYm1jbktTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdSdmJuUkZiblZ0Y3lBOUlGdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5kRzlUZEhKcGJtY25MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2QwYjB4dlkyRnNaVk4wY21sdVp5Y3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKM1poYkhWbFQyWW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RvWVhOUGQyNVFjbTl3WlhKMGVTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMmx6VUhKdmRHOTBlWEJsVDJZbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZHdjbTl3WlhKMGVVbHpSVzUxYldWeVlXSnNaU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjJOdmJuTjBjblZqZEc5eUoxeHVJQ0FnSUNBZ0lDQWdJQ0FnWFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1J2Ym5SRmJuVnRjMHhsYm1kMGFDQTlJR1J2Ym5SRmJuVnRjeTVzWlc1bmRHZzdYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1oxYm1OMGFXOXVJQ2h2WW1vcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2IySnFJQ0U5UFNBbmIySnFaV04wSnlBbUppQjBlWEJsYjJZZ2IySnFJQ0U5UFNBblpuVnVZM1JwYjI0bklIeDhJRzlpYWlBOVBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9KMDlpYW1WamRDNXJaWGx6SUdOaGJHeGxaQ0J2YmlCdWIyNHRiMkpxWldOMEp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnlaWE4xYkhRZ1BTQmJYVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdjSEp2Y0NCcGJpQnZZbW9wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2h2WW1vc0lIQnliM0FwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDNXdkWE5vS0hCeWIzQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2hoYzBSdmJuUkZiblZ0UW5WbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JrYjI1MFJXNTFiWE5NWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaHZZbW9zSUdSdmJuUkZiblZ0YzF0cFhTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDNXdkWE5vS0dSdmJuUkZiblZ0YzF0cFhTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUgwcEtDazdYRzU5WEc0dkx5Qm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNXRiM3BwYkd4aExtOXlaeTlsYmkxVlV5OWtiMk56TDFkbFlpOUtZWFpoVTJOeWFYQjBMMUpsWm1WeVpXNWpaUzlIYkc5aVlXeGZUMkpxWldOMGN5OVBZbXBsWTNRdlkzSmxZWFJsWEc1cFppQW9JVTlpYW1WamRDNWpjbVZoZEdVcElIdGNiaUFnSUNCUFltcGxZM1F1WTNKbFlYUmxJRDBnS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdSaWdwSUh0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9ieWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dGeVozVnRaVzUwY3k1c1pXNW5kR2dnSVQwOUlERXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMDlpYW1WamRDNWpjbVZoZEdVZ2FXMXdiR1Z0Wlc1MFlYUnBiMjRnYjI1c2VTQmhZMk5sY0hSeklHOXVaU0J3WVhKaGJXVjBaWEl1SnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQkdMbkJ5YjNSdmRIbHdaU0E5SUc4N1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUVZb0tUdGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQjlLU2dwTzF4dWZWeHVMeThnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1Ylc5NmFXeHNZUzV2Y21jdlpXNHRWVk12Wkc5amN5OVhaV0l2U21GMllWTmpjbWx3ZEM5U1pXWmxjbVZ1WTJVdlIyeHZZbUZzWDA5aWFtVmpkSE12UVhKeVlYa3ZhWE5CY25KaGVUOXlaV1JwY21WamRHeHZZMkZzWlQxbGJpMVZVeVp5WldScGNtVmpkSE5zZFdjOVNtRjJZVk5qY21sd2RDVXlSbEpsWm1WeVpXNWpaU1V5Umtkc2IySmhiRjlQWW1wbFkzUnpKVEpHUVhKeVlYa2xNa1pwYzBGeWNtRjVYRzVwWmlBb0lVRnljbUY1TG1selFYSnlZWGtwSUh0Y2JpQWdJQ0JCY25KaGVTNXBjMEZ5Y21GNUlEMGdablZ1WTNScGIyNGdLSFpCY21jcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWRHOVRkSEpwYm1jdVkyRnNiQ2gyUVhKbktTQTlQVDBnWENKYmIySnFaV04wSUVGeWNtRjVYVndpTzF4dUlDQWdJSDA3WEc1OVhHNHZMeUJvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTV0YjNwcGJHeGhMbTl5Wnk5bGJpMVZVeTlrYjJOekwxZGxZaTlLWVhaaFUyTnlhWEIwTDFKbFptVnlaVzVqWlM5SGJHOWlZV3hmVDJKcVpXTjBjeTlCY25KaGVTOXBibVJsZUU5bVAzSmxaR2x5WldOMGJHOWpZV3hsUFdWdUxWVlRKbkpsWkdseVpXTjBjMngxWnoxS1lYWmhVMk55YVhCMEpUSkdVbVZtWlhKbGJtTmxKVEpHUjJ4dlltRnNYMDlpYW1WamRITWxNa1pCY25KaGVTVXlSbWx1WkdWNFQyWmNibWxtSUNnaFFYSnlZWGt1Y0hKdmRHOTBlWEJsTG1sdVpHVjRUMllwSUh0Y2JpQWdJQ0JCY25KaGVTNXdjbTkwYjNSNWNHVXVhVzVrWlhoUFppQTlJR1oxYm1OMGFXOXVJQ2h6WldGeVkyaEZiR1Z0Wlc1MElDOHFMQ0JtY205dFNXNWtaWGdnS2k4cElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTWdQVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMllYSWdkQ0E5SUU5aWFtVmpkQ2gwYUdsektUdGNiaUFnSUNBZ0lDQWdkbUZ5SUd4bGJpQTlJSFF1YkdWdVozUm9JRDQrUGlBd08xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoc1pXNGdQVDA5SURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUF0TVR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjJZWElnYmlBOUlEQTdYRzRnSUNBZ0lDQWdJR2xtSUNoaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUQ0Z01Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JpQTlJRTUxYldKbGNpaGhjbWQxYldWdWRITmJNVjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c0Z0lUMDlJRzRwSUhzZ0x5OGdjMmh2Y25SamRYUWdabTl5SUhabGNtbG1lV2x1WnlCcFppQnBkQ2R6SUU1aFRseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNGdQU0F3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h1SUNFOVBTQXdJQ1ltSUc0Z0lUMDlJRWx1Wm1sdWFYUjVJQ1ltSUc0Z0lUMDlJQzFKYm1acGJtbDBlU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc0Z1BTQW9iaUErSURBZ2ZId2dMVEVwSUNvZ1RXRjBhQzVtYkc5dmNpaE5ZWFJvTG1GaWN5aHVLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tHNGdQajBnYkdWdUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnTFRFN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkbUZ5SUdzZ1BTQnVJRDQ5SURBZ1B5QnVJRG9nVFdGMGFDNXRZWGdvYkdWdUlDMGdUV0YwYUM1aFluTW9iaWtzSURBcE8xeHVJQ0FnSUNBZ0lDQm1iM0lnS0RzZ2F5QThJR3hsYmpzZ2F5c3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYXlCcGJpQjBJQ1ltSUhSYmExMGdQVDA5SUhObFlYSmphRVZzWlcxbGJuUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdMVEU3WEc0Z0lDQWdmVHRjYm4xY2JseHVMeThnUjNKMWJtZGxlU0JQWW1wbFkzUXVhWE5HY205NlpXNGdhR0ZqYTF4dWFXWWdLQ0ZQWW1wbFkzUXVhWE5HY205NlpXNHBJSHRjYmlBZ0lDQlBZbXBsWTNRdWFYTkdjbTk2Wlc0Z1BTQm1kVzVqZEdsdmJpQW9iMkpxS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJyWlhrZ1BTQmNJblIyTkY5MFpYTjBYMlp5YjNwbGJsOXJaWGxjSWp0Y2JpQWdJQ0FnSUNBZ2QyaHBiR1VnS0c5aWFpNW9ZWE5QZDI1UWNtOXdaWEowZVNoclpYa3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnJaWGtnS3owZ1RXRjBhQzV5WVc1a2IyMG9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2IySnFXMnRsZVYwZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdaR1ZzWlhSbElHOWlhbHRyWlhsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDA3WEc1OVhHNHZMeUJDWVhObFpDQnZiam9nYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJkbGNtRnBiblJzZFdabUwzVnlhUzEwWlcxd2JHRjBaWE1zSUdKMWRDQjNhWFJvSUdGc2JDQjBhR1VnWkdVdGMzVmljM1JwZEhWMGFXOXVJSE4wZFdabUlISmxiVzkyWldSY2JseHVkbUZ5SUhWeWFWUmxiWEJzWVhSbFIyeHZZbUZzVFc5a2FXWnBaWEp6SUQwZ2UxeHVJQ0FnSUZ3aUsxd2lPaUIwY25WbExGeHVJQ0FnSUZ3aUkxd2lPaUIwY25WbExGeHVJQ0FnSUZ3aUxsd2lPaUIwY25WbExGeHVJQ0FnSUZ3aUwxd2lPaUIwY25WbExGeHVJQ0FnSUZ3aU8xd2lPaUIwY25WbExGeHVJQ0FnSUZ3aVAxd2lPaUIwY25WbExGeHVJQ0FnSUZ3aUpsd2lPaUIwY25WbFhHNTlPMXh1ZG1GeUlIVnlhVlJsYlhCc1lYUmxVM1ZtWm1salpYTWdQU0I3WEc0Z0lDQWdYQ0lxWENJNklIUnlkV1ZjYm4wN1hHNWNibVoxYm1OMGFXOXVJRzV2ZEZKbFlXeHNlVkJsY21ObGJuUkZibU52WkdVb2MzUnlhVzVuS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1Z1WTI5a1pWVlNTU2h6ZEhKcGJtY3BMbkpsY0d4aFkyVW9MeVV5TlZzd0xUbGRXekF0T1Ywdlp5d2dablZ1WTNScGIyNGdLR1J2ZFdKc1pVVnVZMjlrWldRcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGd2lKVndpSUNzZ1pHOTFZbXhsUlc1amIyUmxaQzV6ZFdKemRISnBibWNvTXlrN1hHNGdJQ0FnZlNrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhWeWFWUmxiWEJzWVhSbFUzVmljM1JwZEhWMGFXOXVLSE53WldNcElIdGNiaUFnSUNCMllYSWdiVzlrYVdacFpYSWdQU0JjSWx3aU8xeHVJQ0FnSUdsbUlDaDFjbWxVWlcxd2JHRjBaVWRzYjJKaGJFMXZaR2xtYVdWeWMxdHpjR1ZqTG1Ob1lYSkJkQ2d3S1YwcElIdGNiaUFnSUNBZ0lDQWdiVzlrYVdacFpYSWdQU0J6Y0dWakxtTm9ZWEpCZENnd0tUdGNiaUFnSUNBZ0lDQWdjM0JsWXlBOUlITndaV011YzNWaWMzUnlhVzVuS0RFcE8xeHVJQ0FnSUgxY2JpQWdJQ0IyWVhJZ2MyVndZWEpoZEc5eUlEMGdYQ0pjSWp0Y2JpQWdJQ0IyWVhJZ2NISmxabWw0SUQwZ1hDSmNJanRjYmlBZ0lDQjJZWElnYzJodmRXeGtSWE5qWVhCbElEMGdkSEoxWlR0Y2JpQWdJQ0IyWVhJZ2MyaHZkMVpoY21saFlteGxjeUE5SUdaaGJITmxPMXh1SUNBZ0lIWmhjaUIwY21sdFJXMXdkSGxUZEhKcGJtY2dQU0JtWVd4elpUdGNiaUFnSUNCcFppQW9iVzlrYVdacFpYSWdQVDA5SUNjckp5a2dlMXh1SUNBZ0lDQWdJQ0J6YUc5MWJHUkZjMk5oY0dVZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0cxdlpHbG1hV1Z5SUQwOVBTQmNJaTVjSWlrZ2UxeHVJQ0FnSUNBZ0lDQndjbVZtYVhnZ1BTQmNJaTVjSWp0Y2JpQWdJQ0FnSUNBZ2MyVndZWEpoZEc5eUlEMGdYQ0l1WENJN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNodGIyUnBabWxsY2lBOVBUMGdYQ0l2WENJcElIdGNiaUFnSUNBZ0lDQWdjSEpsWm1sNElEMGdYQ0l2WENJN1hHNGdJQ0FnSUNBZ0lITmxjR0Z5WVhSdmNpQTlJRndpTDF3aU8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2JXOWthV1pwWlhJZ1BUMDlJQ2NqSnlrZ2UxeHVJQ0FnSUNBZ0lDQndjbVZtYVhnZ1BTQmNJaU5jSWp0Y2JpQWdJQ0FnSUNBZ2MyaHZkV3hrUlhOallYQmxJRDBnWm1Gc2MyVTdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaHRiMlJwWm1sbGNpQTlQVDBnSnpzbktTQjdYRzRnSUNBZ0lDQWdJSEJ5WldacGVDQTlJRndpTzF3aU8xeHVJQ0FnSUNBZ0lDQnpaWEJoY21GMGIzSWdQU0JjSWp0Y0lqdGNiaUFnSUNBZ0lDQWdjMmh2ZDFaaGNtbGhZbXhsY3lBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUhSeWFXMUZiWEIwZVZOMGNtbHVaeUE5SUhSeWRXVTdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaHRiMlJwWm1sbGNpQTlQVDBnSno4bktTQjdYRzRnSUNBZ0lDQWdJSEJ5WldacGVDQTlJRndpUDF3aU8xeHVJQ0FnSUNBZ0lDQnpaWEJoY21GMGIzSWdQU0JjSWlaY0lqdGNiaUFnSUNBZ0lDQWdjMmh2ZDFaaGNtbGhZbXhsY3lBOUlIUnlkV1U3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2h0YjJScFptbGxjaUE5UFQwZ0p5WW5LU0I3WEc0Z0lDQWdJQ0FnSUhCeVpXWnBlQ0E5SUZ3aUpsd2lPMXh1SUNBZ0lDQWdJQ0J6WlhCaGNtRjBiM0lnUFNCY0lpWmNJanRjYmlBZ0lDQWdJQ0FnYzJodmQxWmhjbWxoWW14bGN5QTlJSFJ5ZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlIWmhjazVoYldWeklEMGdXMTA3WEc0Z0lDQWdkbUZ5SUhaaGNreHBjM1FnUFNCemNHVmpMbk53YkdsMEtGd2lMRndpS1R0Y2JpQWdJQ0IyWVhJZ2RtRnlVM0JsWTNNZ1BTQmJYVHRjYmlBZ0lDQjJZWElnZG1GeVUzQmxZMDFoY0NBOUlIdDlPMXh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dkbUZ5VEdsemRDNXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdkbUZ5VG1GdFpTQTlJSFpoY2t4cGMzUmJhVjA3WEc0Z0lDQWdJQ0FnSUhaaGNpQjBjblZ1WTJGMFpTQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lHbG1JQ2gyWVhKT1lXMWxMbWx1WkdWNFQyWW9YQ0k2WENJcElDRTlQU0F0TVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIQmhjblJ6SUQwZ2RtRnlUbUZ0WlM1emNHeHBkQ2hjSWpwY0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSk9ZVzFsSUQwZ2NHRnlkSE5iTUYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwY25WdVkyRjBaU0E5SUhCaGNuTmxTVzUwS0hCaGNuUnpXekZkTENBeE1DazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZG1GeUlITjFabVpwWTJWeklEMGdlMzA3WEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2gxY21sVVpXMXdiR0YwWlZOMVptWnBZMlZ6VzNaaGNrNWhiV1V1WTJoaGNrRjBLSFpoY2s1aGJXVXViR1Z1WjNSb0lDMGdNU2xkS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZFdabWFXTmxjMXQyWVhKT1lXMWxMbU5vWVhKQmRDaDJZWEpPWVcxbExteGxibWQwYUNBdElERXBYU0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSk9ZVzFsSUQwZ2RtRnlUbUZ0WlM1emRXSnpkSEpwYm1jb01Dd2dkbUZ5VG1GdFpTNXNaVzVuZEdnZ0xTQXhLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMllYSWdkbUZ5VTNCbFl5QTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnlkVzVqWVhSbE9pQjBjblZ1WTJGMFpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUc1aGJXVTZJSFpoY2s1aGJXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCemRXWm1hV05sY3pvZ2MzVm1abWxqWlhOY2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdkbUZ5VTNCbFkzTXVjSFZ6YUNoMllYSlRjR1ZqS1R0Y2JpQWdJQ0FnSUNBZ2RtRnlVM0JsWTAxaGNGdDJZWEpPWVcxbFhTQTlJSFpoY2xOd1pXTTdYRzRnSUNBZ0lDQWdJSFpoY2s1aGJXVnpMbkIxYzJnb2RtRnlUbUZ0WlNrN1hHNGdJQ0FnZlZ4dUlDQWdJSFpoY2lCemRXSkdkVzVqZEdsdmJpQTlJR1oxYm1OMGFXOXVJQ2gyWVd4MVpVWjFibU4wYVc5dUtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCeVpYTjFiSFFnUFNCY0lsd2lPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2MzUmhjblJKYm1SbGVDQTlJREE3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2RtRnlVM0JsWTNNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUIyWVhKVGNHVmpJRDBnZG1GeVUzQmxZM05iYVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2RtRnNkV1VnUFNCMllXeDFaVVoxYm1OMGFXOXVLSFpoY2xOd1pXTXVibUZ0WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RtRnNkV1VnUFQwOUlHNTFiR3dnZkh3Z2RtRnNkV1VnUFQwOUlIVnVaR1ZtYVc1bFpDQjhmQ0FvUVhKeVlYa3VhWE5CY25KaGVTaDJZV3gxWlNrZ0ppWWdkbUZzZFdVdWJHVnVaM1JvSUQwOVBTQXdLU0I4ZkNBb2RIbHdaVzltSUhaaGJIVmxJRDA5UFNBbmIySnFaV04wSnlBbUppQlBZbXBsWTNRdWEyVjVjeWgyWVd4MVpTa3ViR1Z1WjNSb0lEMDlQU0F3S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBZWEowU1c1a1pYZ3JLenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MGFXNTFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBJRDA5UFNCemRHRnlkRWx1WkdWNEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MElDczlJSEJ5WldacGVEdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBJQ3M5SUNoelpYQmhjbUYwYjNJZ2ZId2dYQ0lzWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29kbUZzZFdVcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOb2IzZFdZWEpwWVdKc1pYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwSUNzOUlIWmhjbE53WldNdWJtRnRaU0FySUZ3aVBWd2lPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJxSUQwZ01Ec2dhaUE4SUhaaGJIVmxMbXhsYm1kMGFEc2dhaXNyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocUlENGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBJQ3M5SUhaaGNsTndaV011YzNWbVptbGpaWE5iSnlvblhTQS9JQ2h6WlhCaGNtRjBiM0lnZkh3Z1hDSXNYQ0lwSURvZ1hDSXNYQ0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RtRnlVM0JsWXk1emRXWm1hV05sYzFzbktpZGRJQ1ltSUhOb2IzZFdZWEpwWVdKc1pYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFFnS3owZ2RtRnlVM0JsWXk1dVlXMWxJQ3NnWENJOVhDSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MElDczlJSE5vYjNWc1pFVnpZMkZ3WlNBL0lHVnVZMjlrWlZWU1NVTnZiWEJ2Ym1WdWRDaDJZV3gxWlZ0cVhTa3VjbVZ3YkdGalpTZ3ZJUzluTENCY0lpVXlNVndpS1NBNklHNXZkRkpsWVd4c2VWQmxjbU5sYm5SRmJtTnZaR1VvZG1Gc2RXVmJhbDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvZEhsd1pXOW1JSFpoYkhWbElEMDlQU0JjSW05aWFtVmpkRndpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE5vYjNkV1lYSnBZV0pzWlhNZ0ppWWdJWFpoY2xOd1pXTXVjM1ZtWm1salpYTmJKeW9uWFNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOMWJIUWdLejBnZG1GeVUzQmxZeTV1WVcxbElDc2dYQ0k5WENJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJtYVhKemRDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2EyVjVJR2x1SUhaaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doWm1seWMzUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDQXJQU0IyWVhKVGNHVmpMbk4xWm1acFkyVnpXeWNxSjEwZ1B5QW9jMlZ3WVhKaGRHOXlJSHg4SUZ3aUxGd2lLU0E2SUZ3aUxGd2lPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1pwY25OMElEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDQXJQU0J6YUc5MWJHUkZjMk5oY0dVZ1B5QmxibU52WkdWVlVrbERiMjF3YjI1bGJuUW9hMlY1S1M1eVpYQnNZV05sS0M4aEwyY3NJRndpSlRJeFhDSXBJRG9nYm05MFVtVmhiR3g1VUdWeVkyVnVkRVZ1WTI5a1pTaHJaWGtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhRZ0t6MGdkbUZ5VTNCbFl5NXpkV1ptYVdObGMxc25LaWRkSUQ4Z0p6MG5JRG9nWENJc1hDSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQ0FyUFNCemFHOTFiR1JGYzJOaGNHVWdQeUJsYm1OdlpHVlZVa2xEYjIxd2IyNWxiblFvZG1Gc2RXVmJhMlY1WFNrdWNtVndiR0ZqWlNndklTOW5MQ0JjSWlVeU1Wd2lLU0E2SUc1dmRGSmxZV3hzZVZCbGNtTmxiblJGYm1OdlpHVW9kbUZzZFdWYmEyVjVYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzJodmQxWmhjbWxoWW14bGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFFnS3owZ2RtRnlVM0JsWXk1dVlXMWxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JWFJ5YVcxRmJYQjBlVk4wY21sdVp5QjhmQ0IyWVd4MVpTQWhQVDBnWENKY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MElDczlJRndpUFZ3aU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDJZWEpUY0dWakxuUnlkVzVqWVhSbElDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVWdQU0IyWVd4MVpTNXpkV0p6ZEhKcGJtY29NQ3dnZG1GeVUzQmxZeTUwY25WdVkyRjBaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQ0FyUFNCemFHOTFiR1JGYzJOaGNHVWdQeUJsYm1OdlpHVlZVa2xEYjIxd2IyNWxiblFvZG1Gc2RXVXBMbkpsY0d4aFkyVW9MeUV2Wnl3Z1hDSWxNakZjSWlrZ09pQnViM1JTWldGc2JIbFFaWEpqWlc1MFJXNWpiMlJsS0haaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0FnSUgwN1hHNGdJQ0FnYzNWaVJuVnVZM1JwYjI0dWRtRnlUbUZ0WlhNZ1BTQjJZWEpPWVcxbGN6dGNiaUFnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNCd2NtVm1hWGc2SUhCeVpXWnBlQ3hjYmlBZ0lDQWdJQ0FnYzNWaWMzUnBkSFYwYVc5dU9pQnpkV0pHZFc1amRHbHZibHh1SUNBZ0lIMDdYRzU5WEc1Y2JtWjFibU4wYVc5dUlGVnlhVlJsYlhCc1lYUmxLSFJsYlhCc1lYUmxLU0I3WEc0Z0lDQWdhV1lnS0NFb2RHaHBjeUJwYm5OMFlXNWpaVzltSUZWeWFWUmxiWEJzWVhSbEtTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZWeWFWUmxiWEJzWVhSbEtIUmxiWEJzWVhSbEtUdGNiaUFnSUNCOVhHNGdJQ0FnZG1GeUlIQmhjblJ6SUQwZ2RHVnRjR3hoZEdVdWMzQnNhWFFvWENKN1hDSXBPMXh1SUNBZ0lIWmhjaUIwWlhoMFVHRnlkSE1nUFNCYmNHRnlkSE11YzJocFpuUW9LVjA3WEc0Z0lDQWdkbUZ5SUhCeVpXWnBlR1Z6SUQwZ1cxMDdYRzRnSUNBZ2RtRnlJSE4xWW5OMGFYUjFkR2x2Ym5NZ1BTQmJYVHRjYmlBZ0lDQjJZWElnZG1GeVRtRnRaWE1nUFNCYlhUdGNiaUFnSUNCM2FHbHNaU0FvY0dGeWRITXViR1Z1WjNSb0lENGdNQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdjR0Z5ZENBOUlIQmhjblJ6TG5Ob2FXWjBLQ2s3WEc0Z0lDQWdJQ0FnSUhaaGNpQnpjR1ZqSUQwZ2NHRnlkQzV6Y0d4cGRDaGNJbjFjSWlsYk1GMDdYRzRnSUNBZ0lDQWdJSFpoY2lCeVpXMWhhVzVrWlhJZ1BTQndZWEowTG5OMVluTjBjbWx1WnloemNHVmpMbXhsYm1kMGFDQXJJREVwTzF4dUlDQWdJQ0FnSUNCMllYSWdablZ1WTNNZ1BTQjFjbWxVWlcxd2JHRjBaVk4xWW5OMGFYUjFkR2x2YmloemNHVmpLVHRjYmlBZ0lDQWdJQ0FnYzNWaWMzUnBkSFYwYVc5dWN5NXdkWE5vS0daMWJtTnpMbk4xWW5OMGFYUjFkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lIQnlaV1pwZUdWekxuQjFjMmdvWm5WdVkzTXVjSEpsWm1sNEtUdGNiaUFnSUNBZ0lDQWdkR1Y0ZEZCaGNuUnpMbkIxYzJnb2NtVnRZV2x1WkdWeUtUdGNiaUFnSUNBZ0lDQWdkbUZ5VG1GdFpYTWdQU0IyWVhKT1lXMWxjeTVqYjI1allYUW9ablZ1WTNNdWMzVmljM1JwZEhWMGFXOXVMblpoY2s1aGJXVnpLVHRjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjeTVtYVd4c0lEMGdablZ1WTNScGIyNGdLSFpoYkhWbFJuVnVZM1JwYjI0cElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhKbGMzVnNkQ0E5SUhSbGVIUlFZWEowYzFzd1hUdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0J6ZFdKemRHbDBkWFJwYjI1ekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnYzNWaWMzUnBkSFYwYVc5dUlEMGdjM1ZpYzNScGRIVjBhVzl1YzF0cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQ0FyUFNCemRXSnpkR2wwZFhScGIyNG9kbUZzZFdWR2RXNWpkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhOMWJIUWdLejBnZEdWNGRGQmhjblJ6VzJrZ0t5QXhYVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY21WemRXeDBPMXh1SUNBZ0lIMDdYRzRnSUNBZ2RHaHBjeTUyWVhKT1lXMWxjeUE5SUhaaGNrNWhiV1Z6TzF4dUlDQWdJSFJvYVhNdWRHVnRjR3hoZEdVZ1BTQjBaVzF3YkdGMFpUdGNibjFjYmx4dVZYSnBWR1Z0Y0d4aGRHVXVjSEp2ZEc5MGVYQmxJRDBnZTF4dUlDQWdJSFJ2VTNSeWFXNW5PaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMblJsYlhCc1lYUmxPMXh1SUNBZ0lIMHNYRzRnSUNBZ1ptbHNiRVp5YjIxUFltcGxZM1E2SUdaMWJtTjBhVzl1SUNodlltb3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVptbHNiQ2htZFc1amRHbHZiaUFvZG1GeVRtRnRaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHOWlhbHQyWVhKT1lXMWxYVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dWZUdGNiblpoY2lCV1lXeHBaR0YwYjNKRGIyNTBaWGgwSUQwZ1puVnVZM1JwYjI0Z1ZtRnNhV1JoZEc5eVEyOXVkR1Y0ZENod1lYSmxiblFzSUdOdmJHeGxZM1JOZFd4MGFYQnNaU3dnWlhKeWIzSlNaWEJ2Y25SbGNpd2dZMmhsWTJ0U1pXTjFjbk5wZG1Vc0lIUnlZV05yVlc1cmJtOTNibEJ5YjNCbGNuUnBaWE1wSUh0Y2JpQWdJQ0IwYUdsekxtMXBjM05wYm1jZ1BTQmJYVHRjYmlBZ0lDQjBhR2x6TG0xcGMzTnBibWROWVhBZ1BTQjdmVHRjYmlBZ0lDQjBhR2x6TG1admNtMWhkRlpoYkdsa1lYUnZjbk1nUFNCd1lYSmxiblFnUHlCUFltcGxZM1F1WTNKbFlYUmxLSEJoY21WdWRDNW1iM0p0WVhSV1lXeHBaR0YwYjNKektTQTZJSHQ5TzF4dUlDQWdJSFJvYVhNdWMyTm9aVzFoY3lBOUlIQmhjbVZ1ZENBL0lFOWlhbVZqZEM1amNtVmhkR1VvY0dGeVpXNTBMbk5qYUdWdFlYTXBJRG9nZTMwN1hHNGdJQ0FnZEdocGN5NWpiMnhzWldOMFRYVnNkR2x3YkdVZ1BTQmpiMnhzWldOMFRYVnNkR2x3YkdVN1hHNGdJQ0FnZEdocGN5NWxjbkp2Y25NZ1BTQmJYVHRjYmlBZ0lDQjBhR2x6TG1oaGJtUnNaVVZ5Y205eUlEMGdZMjlzYkdWamRFMTFiSFJwY0d4bElEOGdkR2hwY3k1amIyeHNaV04wUlhKeWIzSWdPaUIwYUdsekxuSmxkSFZ5YmtWeWNtOXlPMXh1SUNBZ0lHbG1JQ2hqYUdWamExSmxZM1Z5YzJsMlpTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTm9aV05yVW1WamRYSnphWFpsSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpZMkZ1Ym1Wa0lEMGdXMTA3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMk5oYm01bFpFWnliM3BsYmlBOUlGdGRPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmpZVzV1WldSR2NtOTZaVzVUWTJobGJXRnpJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJOaGJtNWxaRVp5YjNwbGJsWmhiR2xrWVhScGIyNUZjbkp2Y25NZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTJZV3hwWkdGMFpXUlRZMmhsYldGelMyVjVJRDBnSjNSMk5GOTJZV3hwWkdGMGFXOXVYMmxrSnp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUyWVd4cFpHRjBhVzl1UlhKeWIzSnpTMlY1SUQwZ0ozUjJORjkyWVd4cFpHRjBhVzl1WDJWeWNtOXljMTlwWkNjN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoMGNtRmphMVZ1YTI1dmQyNVFjbTl3WlhKMGFXVnpLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkSEpoWTJ0VmJtdHViM2R1VUhKdmNHVnlkR2xsY3lBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpJRDBnZTMwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZFc1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhNZ1BTQjdmVHRjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjeTVsY25KdmNsSmxjRzl5ZEdWeUlEMGdaWEp5YjNKU1pYQnZjblJsY2lCOGZDQmtaV1poZFd4MFJYSnliM0pTWlhCdmNuUmxjaWduWlc0bktUdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlIUm9hWE11WlhKeWIzSlNaWEJ2Y25SbGNpQTlQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Nka1pXSjFaeWNwTzF4dUlDQWdJSDFjYmlBZ0lDQjBhR2x6TG1SbFptbHVaV1JMWlhsM2IzSmtjeUE5SUh0OU8xeHVJQ0FnSUdsbUlDaHdZWEpsYm5RcElIdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhMlY1SUdsdUlIQmhjbVZ1ZEM1a1pXWnBibVZrUzJWNWQyOXlaSE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpHVm1hVzVsWkV0bGVYZHZjbVJ6VzJ0bGVWMGdQU0J3WVhKbGJuUXVaR1ZtYVc1bFpFdGxlWGR2Y21SelcydGxlVjB1YzJ4cFkyVW9NQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1OU8xeHVWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDNXdjbTkwYjNSNWNHVXVaR1ZtYVc1bFMyVjVkMjl5WkNBOUlHWjFibU4wYVc5dUlDaHJaWGwzYjNKa0xDQnJaWGwzYjNKa1JuVnVZM1JwYjI0cElIdGNiaUFnSUNCMGFHbHpMbVJsWm1sdVpXUkxaWGwzYjNKa2MxdHJaWGwzYjNKa1hTQTlJSFJvYVhNdVpHVm1hVzVsWkV0bGVYZHZjbVJ6VzJ0bGVYZHZjbVJkSUh4OElGdGRPMXh1SUNBZ0lIUm9hWE11WkdWbWFXNWxaRXRsZVhkdmNtUnpXMnRsZVhkdmNtUmRMbkIxYzJnb2EyVjVkMjl5WkVaMWJtTjBhVzl1S1R0Y2JuMDdYRzVXWVd4cFpHRjBiM0pEYjI1MFpYaDBMbkJ5YjNSdmRIbHdaUzVqY21WaGRHVkZjbkp2Y2lBOUlHWjFibU4wYVc5dUlDaGpiMlJsTENCdFpYTnpZV2RsVUdGeVlXMXpMQ0JrWVhSaFVHRjBhQ3dnYzJOb1pXMWhVR0YwYUN3Z2MzVmlSWEp5YjNKekxDQmtZWFJoTENCelkyaGxiV0VwSUh0Y2JpQWdJQ0IyWVhJZ1pYSnliM0lnUFNCdVpYY2dWbUZzYVdSaGRHbHZia1Z5Y205eUtHTnZaR1VzSUcxbGMzTmhaMlZRWVhKaGJYTXNJR1JoZEdGUVlYUm9MQ0J6WTJobGJXRlFZWFJvTENCemRXSkZjbkp2Y25NcE8xeHVJQ0FnSUdWeWNtOXlMbTFsYzNOaFoyVWdQU0IwYUdsekxtVnljbTl5VW1Wd2IzSjBaWElvWlhKeWIzSXNJR1JoZEdFc0lITmphR1Z0WVNrN1hHNGdJQ0FnY21WMGRYSnVJR1Z5Y205eU8xeHVmVHRjYmxaaGJHbGtZWFJ2Y2tOdmJuUmxlSFF1Y0hKdmRHOTBlWEJsTG5KbGRIVnlia1Z5Y205eUlEMGdablZ1WTNScGIyNGdLR1Z5Y205eUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdWeWNtOXlPMXh1ZlR0Y2JsWmhiR2xrWVhSdmNrTnZiblJsZUhRdWNISnZkRzkwZVhCbExtTnZiR3hsWTNSRmNuSnZjaUE5SUdaMWJtTjBhVzl1SUNobGNuSnZjaWtnZTF4dUlDQWdJR2xtSUNobGNuSnZjaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbVZ5Y205eWN5NXdkWE5vS0dWeWNtOXlLVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzU5TzF4dVZtRnNhV1JoZEc5eVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVdWNISmxabWw0UlhKeWIzSnpJRDBnWm5WdVkzUnBiMjRnS0hOMFlYSjBTVzVrWlhnc0lHUmhkR0ZRWVhSb0xDQnpZMmhsYldGUVlYUm9LU0I3WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SUhOMFlYSjBTVzVrWlhnN0lHa2dQQ0IwYUdsekxtVnljbTl5Y3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtVnljbTl5YzF0cFhTQTlJSFJvYVhNdVpYSnliM0p6VzJsZExuQnlaV1pwZUZkcGRHZ29aR0YwWVZCaGRHZ3NJSE5qYUdWdFlWQmhkR2dwTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2RHaHBjenRjYm4wN1hHNVdZV3hwWkdGMGIzSkRiMjUwWlhoMExuQnliM1J2ZEhsd1pTNWlZVzVWYm10dWIzZHVVSEp2Y0dWeWRHbGxjeUE5SUdaMWJtTjBhVzl1SUNoa1lYUmhMQ0J6WTJobGJXRXBJSHRjYmlBZ0lDQm1iM0lnS0haaGNpQjFibXR1YjNkdVVHRjBhQ0JwYmlCMGFHbHpMblZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJsY25KdmNpQTlJSFJvYVhNdVkzSmxZWFJsUlhKeWIzSW9SWEp5YjNKRGIyUmxjeTVWVGt0T1QxZE9YMUJTVDFCRlVsUlpMQ0I3Y0dGMGFEb2dkVzVyYm05M2JsQmhkR2g5TENCMWJtdHViM2R1VUdGMGFDd2dYQ0pjSWl3Z2JuVnNiQ3dnWkdGMFlTd2djMk5vWlcxaEtUdGNiaUFnSUNBZ0lDQWdkbUZ5SUhKbGMzVnNkQ0E5SUhSb2FYTXVhR0Z1Wkd4bFJYSnliM0lvWlhKeWIzSXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2NtVnpkV3gwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVmVHRjYmx4dVZtRnNhV1JoZEc5eVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVdVlXUmtSbTl5YldGMElEMGdablZ1WTNScGIyNGdLR1p2Y20xaGRDd2dkbUZzYVdSaGRHOXlLU0I3WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJtYjNKdFlYUWdQVDA5SUNkdlltcGxZM1FuS1NCN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHdGxlU0JwYmlCbWIzSnRZWFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVlXUmtSbTl5YldGMEtHdGxlU3dnWm05eWJXRjBXMnRsZVYwcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDFjYmlBZ0lDQjBhR2x6TG1admNtMWhkRlpoYkdsa1lYUnZjbk5iWm05eWJXRjBYU0E5SUhaaGJHbGtZWFJ2Y2p0Y2JuMDdYRzVXWVd4cFpHRjBiM0pEYjI1MFpYaDBMbkJ5YjNSdmRIbHdaUzV5WlhOdmJIWmxVbVZtY3lBOUlHWjFibU4wYVc5dUlDaHpZMmhsYldFc0lIVnliRWhwYzNSdmNua3BJSHRjYmlBZ0lDQnBaaUFvYzJOb1pXMWhXeWNrY21WbUoxMGdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQjFjbXhJYVhOMGIzSjVJRDBnZFhKc1NHbHpkRzl5ZVNCOGZDQjdmVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIVnliRWhwYzNSdmNubGJjMk5vWlcxaFd5Y2tjbVZtSjExZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpjbVZoZEdWRmNuSnZjaWhGY25KdmNrTnZaR1Z6TGtOSlVrTlZURUZTWDFKRlJrVlNSVTVEUlN3Z2UzVnliSE02SUU5aWFtVmpkQzVyWlhsektIVnliRWhwYzNSdmNua3BMbXB2YVc0b0p5d2dKeWw5TENBbkp5d2dKeWNzSUc1MWJHd3NJSFZ1WkdWbWFXNWxaQ3dnYzJOb1pXMWhLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMWNteElhWE4wYjNKNVczTmphR1Z0WVZzbkpISmxaaWRkWFNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUhOamFHVnRZU0E5SUhSb2FYTXVaMlYwVTJOb1pXMWhLSE5qYUdWdFlWc25KSEpsWmlkZExDQjFjbXhJYVhOMGIzSjVLVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhOamFHVnRZVHRjYm4wN1hHNVdZV3hwWkdGMGIzSkRiMjUwWlhoMExuQnliM1J2ZEhsd1pTNW5aWFJUWTJobGJXRWdQU0JtZFc1amRHbHZiaUFvZFhKc0xDQjFjbXhJYVhOMGIzSjVLU0I3WEc0Z0lDQWdkbUZ5SUhOamFHVnRZVHRjYmlBZ0lDQnBaaUFvZEdocGN5NXpZMmhsYldGelczVnliRjBnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0J6WTJobGJXRWdQU0IwYUdsekxuTmphR1Z0WVhOYmRYSnNYVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNtVnpiMngyWlZKbFpuTW9jMk5vWlcxaExDQjFjbXhJYVhOMGIzSjVLVHRjYmlBZ0lDQjlYRzRnSUNBZ2RtRnlJR0poYzJWVmNtd2dQU0IxY213N1hHNGdJQ0FnZG1GeUlHWnlZV2R0Wlc1MElEMGdYQ0pjSWp0Y2JpQWdJQ0JwWmlBb2RYSnNMbWx1WkdWNFQyWW9KeU1uS1NBaFBUMGdMVEVwSUh0Y2JpQWdJQ0FnSUNBZ1puSmhaMjFsYm5RZ1BTQjFjbXd1YzNWaWMzUnlhVzVuS0hWeWJDNXBibVJsZUU5bUtGd2lJMXdpS1NBcklERXBPMXh1SUNBZ0lDQWdJQ0JpWVhObFZYSnNJRDBnZFhKc0xuTjFZbk4wY21sdVp5Z3dMQ0IxY213dWFXNWtaWGhQWmloY0lpTmNJaWtwTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JSFJvYVhNdWMyTm9aVzFoYzF0aVlYTmxWWEpzWFNBOVBUMGdKMjlpYW1WamRDY3BJSHRjYmlBZ0lDQWdJQ0FnYzJOb1pXMWhJRDBnZEdocGN5NXpZMmhsYldGelcySmhjMlZWY214ZE8xeHVJQ0FnSUNBZ0lDQjJZWElnY0c5cGJuUmxjbEJoZEdnZ1BTQmtaV052WkdWVlVrbERiMjF3YjI1bGJuUW9abkpoWjIxbGJuUXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2NHOXBiblJsY2xCaGRHZ2dQVDA5SUZ3aVhDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpsYzI5c2RtVlNaV1p6S0hOamFHVnRZU3dnZFhKc1NHbHpkRzl5ZVNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9jRzlwYm5SbGNsQmhkR2d1WTJoaGNrRjBLREFwSUNFOVBTQmNJaTljSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMllYSWdjR0Z5ZEhNZ1BTQndiMmx1ZEdWeVVHRjBhQzV6Y0d4cGRDaGNJaTljSWlrdWMyeHBZMlVvTVNrN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2djR0Z5ZEhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJqYjIxd2IyNWxiblFnUFNCd1lYSjBjMXRwWFM1eVpYQnNZV05sS0M5K01TOW5MQ0JjSWk5Y0lpa3VjbVZ3YkdGalpTZ3ZmakF2Wnl3Z1hDSitYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOamFHVnRZVnRqYjIxd2IyNWxiblJkSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WTJobGJXRWdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6WTJobGJXRWdQU0J6WTJobGJXRmJZMjl0Y0c5dVpXNTBYVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9jMk5vWlcxaElDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KbGMyOXNkbVZTWldaektITmphR1Z0WVN3Z2RYSnNTR2x6ZEc5eWVTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSFJvYVhNdWJXbHpjMmx1WjF0aVlYTmxWWEpzWFNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViV2x6YzJsdVp5NXdkWE5vS0dKaGMyVlZjbXdwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbTFwYzNOcGJtZGJZbUZ6WlZWeWJGMGdQU0JpWVhObFZYSnNPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtMXBjM05wYm1kTllYQmJZbUZ6WlZWeWJGMGdQU0JpWVhObFZYSnNPMXh1SUNBZ0lIMWNibjA3WEc1V1lXeHBaR0YwYjNKRGIyNTBaWGgwTG5CeWIzUnZkSGx3WlM1elpXRnlZMmhUWTJobGJXRnpJRDBnWm5WdVkzUnBiMjRnS0hOamFHVnRZU3dnZFhKc0tTQjdYRzRnSUNBZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrb2MyTm9aVzFoS1NrZ2UxeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSE5qYUdWdFlTNXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpXRnlZMmhUWTJobGJXRnpLSE5qYUdWdFlWdHBYU3dnZFhKc0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMGdaV3h6WlNCcFppQW9jMk5vWlcxaElDWW1JSFI1Y0dWdlppQnpZMmhsYldFZ1BUMDlJRndpYjJKcVpXTjBYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnpZMmhsYldFdWFXUWdQVDA5SUZ3aWMzUnlhVzVuWENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBjMVJ5ZFhOMFpXUlZjbXdvZFhKc0xDQnpZMmhsYldFdWFXUXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YzJOb1pXMWhjMXR6WTJobGJXRXVhV1JkSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6WTJobGJXRnpXM05qYUdWdFlTNXBaRjBnUFNCelkyaGxiV0U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUd0bGVTQnBiaUJ6WTJobGJXRXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hyWlhrZ0lUMDlJRndpWlc1MWJWd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCelkyaGxiV0ZiYTJWNVhTQTlQVDBnWENKdlltcGxZM1JjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxZWEpqYUZOamFHVnRZWE1vYzJOb1pXMWhXMnRsZVYwc0lIVnliQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoclpYa2dQVDA5SUZ3aUpISmxabHdpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMWNta2dQU0JuWlhSRWIyTjFiV1Z1ZEZWeWFTaHpZMmhsYldGYmEyVjVYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gxY21rZ0ppWWdkR2hwY3k1elkyaGxiV0Z6VzNWeWFWMGdQVDA5SUhWdVpHVm1hVzVsWkNBbUppQjBhR2x6TG0xcGMzTnBibWROWVhCYmRYSnBYU0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG0xcGMzTnBibWROWVhCYmRYSnBYU0E5SUhWeWFUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYm4wN1hHNVdZV3hwWkdGMGIzSkRiMjUwWlhoMExuQnliM1J2ZEhsd1pTNWhaR1JUWTJobGJXRWdQU0JtZFc1amRHbHZiaUFvZFhKc0xDQnpZMmhsYldFcElIdGNiaUFnSUNBdkwyOTJaWEpzYjJGa1hHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCMWNtd2dJVDA5SUNkemRISnBibWNuSUh4OElIUjVjR1Z2WmlCelkyaGxiV0VnUFQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2RYSnNJRDA5UFNBbmIySnFaV04wSnlBbUppQjBlWEJsYjJZZ2RYSnNMbWxrSUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyTm9aVzFoSUQwZ2RYSnNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RYSnNJRDBnYzJOb1pXMWhMbWxrTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaDFjbXdnUFQwOUlHZGxkRVJ2WTNWdFpXNTBWWEpwS0hWeWJDa2dLeUJjSWlOY0lpa2dlMXh1SUNBZ0lDQWdJQ0F2THlCU1pXMXZkbVVnWlcxd2RIa2dabkpoWjIxbGJuUmNiaUFnSUNBZ0lDQWdkWEpzSUQwZ1oyVjBSRzlqZFcxbGJuUlZjbWtvZFhKc0tUdGNiaUFnSUNCOVhHNGdJQ0FnZEdocGN5NXpZMmhsYldGelczVnliRjBnUFNCelkyaGxiV0U3WEc0Z0lDQWdaR1ZzWlhSbElIUm9hWE11YldsemMybHVaMDFoY0Z0MWNteGRPMXh1SUNBZ0lHNXZjbTFUWTJobGJXRW9jMk5vWlcxaExDQjFjbXdwTzF4dUlDQWdJSFJvYVhNdWMyVmhjbU5vVTJOb1pXMWhjeWh6WTJobGJXRXNJSFZ5YkNrN1hHNTlPMXh1WEc1V1lXeHBaR0YwYjNKRGIyNTBaWGgwTG5CeWIzUnZkSGx3WlM1blpYUlRZMmhsYldGTllYQWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnZG1GeUlHMWhjQ0E5SUh0OU8xeHVJQ0FnSUdadmNpQW9kbUZ5SUd0bGVTQnBiaUIwYUdsekxuTmphR1Z0WVhNcElIdGNiaUFnSUNBZ0lDQWdiV0Z3VzJ0bGVWMGdQU0IwYUdsekxuTmphR1Z0WVhOYmEyVjVYVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUcxaGNEdGNibjA3WEc1Y2JsWmhiR2xrWVhSdmNrTnZiblJsZUhRdWNISnZkRzkwZVhCbExtZGxkRk5qYUdWdFlWVnlhWE1nUFNCbWRXNWpkR2x2YmlBb1ptbHNkR1Z5VW1WblJYaHdLU0I3WEc0Z0lDQWdkbUZ5SUd4cGMzUWdQU0JiWFR0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJyWlhrZ2FXNGdkR2hwY3k1elkyaGxiV0Z6S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doWm1sc2RHVnlVbVZuUlhod0lIeDhJR1pwYkhSbGNsSmxaMFY0Y0M1MFpYTjBLR3RsZVNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4cGMzUXVjSFZ6YUNoclpYa3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCc2FYTjBPMXh1ZlR0Y2JseHVWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDNXdjbTkwYjNSNWNHVXVaMlYwVFdsemMybHVaMVZ5YVhNZ1BTQm1kVzVqZEdsdmJpQW9abWxzZEdWeVVtVm5SWGh3S1NCN1hHNGdJQ0FnZG1GeUlHeHBjM1FnUFNCYlhUdGNiaUFnSUNCbWIzSWdLSFpoY2lCclpYa2dhVzRnZEdocGN5NXRhWE56YVc1blRXRndLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2habWxzZEdWeVVtVm5SWGh3SUh4OElHWnBiSFJsY2xKbFowVjRjQzUwWlhOMEtHdGxlU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hwYzNRdWNIVnphQ2hyWlhrcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJzYVhOME8xeHVmVHRjYmx4dVZtRnNhV1JoZEc5eVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVdVpISnZjRk5qYUdWdFlYTWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnZEdocGN5NXpZMmhsYldGeklEMGdlMzA3WEc0Z0lDQWdkR2hwY3k1eVpYTmxkQ2dwTzF4dWZUdGNibFpoYkdsa1lYUnZja052Ym5SbGVIUXVjSEp2ZEc5MGVYQmxMbkpsYzJWMElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJSFJvYVhNdWJXbHpjMmx1WnlBOUlGdGRPMXh1SUNBZ0lIUm9hWE11YldsemMybHVaMDFoY0NBOUlIdDlPMXh1SUNBZ0lIUm9hWE11WlhKeWIzSnpJRDBnVzEwN1hHNTlPMXh1WEc1V1lXeHBaR0YwYjNKRGIyNTBaWGgwTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlVGc2JDQTlJR1oxYm1OMGFXOXVJQ2hrWVhSaExDQnpZMmhsYldFc0lHUmhkR0ZRWVhSb1VHRnlkSE1zSUhOamFHVnRZVkJoZEdoUVlYSjBjeXdnWkdGMFlWQnZhVzUwWlhKUVlYUm9LU0I3WEc0Z0lDQWdkbUZ5SUhSdmNFeGxkbVZzTzF4dUlDQWdJSE5qYUdWdFlTQTlJSFJvYVhNdWNtVnpiMngyWlZKbFpuTW9jMk5vWlcxaEtUdGNiaUFnSUNCcFppQW9JWE5qYUdWdFlTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0hOamFHVnRZU0JwYm5OMFlXNWpaVzltSUZaaGJHbGtZWFJwYjI1RmNuSnZjaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbVZ5Y205eWN5NXdkWE5vS0hOamFHVnRZU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ6WTJobGJXRTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJSE4wWVhKMFJYSnliM0pEYjNWdWRDQTlJSFJvYVhNdVpYSnliM0p6TG14bGJtZDBhRHRjYmlBZ0lDQjJZWElnWm5KdmVtVnVTVzVrWlhnc0lITmpZVzV1WldSR2NtOTZaVzVUWTJobGJXRkpibVJsZUNBOUlHNTFiR3dzSUhOallXNXVaV1JUWTJobGJXRnpTVzVrWlhnZ1BTQnVkV3hzTzF4dUlDQWdJR2xtSUNoMGFHbHpMbU5vWldOclVtVmpkWEp6YVhabElDWW1JR1JoZEdFZ0ppWWdkSGx3Wlc5bUlHUmhkR0VnUFQwOUlDZHZZbXBsWTNRbktTQjdYRzRnSUNBZ0lDQWdJSFJ2Y0V4bGRtVnNJRDBnSVhSb2FYTXVjMk5oYm01bFpDNXNaVzVuZEdnN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hrWVhSaFczUm9hWE11ZG1Gc2FXUmhkR1ZrVTJOb1pXMWhjMHRsZVYwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnpZMmhsYldGSmJtUmxlQ0E5SUdSaGRHRmJkR2hwY3k1MllXeHBaR0YwWldSVFkyaGxiV0Z6UzJWNVhTNXBibVJsZUU5bUtITmphR1Z0WVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MyTm9aVzFoU1c1a1pYZ2dJVDA5SUMweEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bGNuSnZjbk1nUFNCMGFHbHpMbVZ5Y205eWN5NWpiMjVqWVhRb1pHRjBZVnQwYUdsekxuWmhiR2xrWVhScGIyNUZjbkp2Y25OTFpYbGRXM05qYUdWdFlVbHVaR1Y0WFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0U5aWFtVmpkQzVwYzBaeWIzcGxiaWhrWVhSaEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1puSnZlbVZ1U1c1a1pYZ2dQU0IwYUdsekxuTmpZVzV1WldSR2NtOTZaVzR1YVc1a1pYaFBaaWhrWVhSaEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaG1jbTk2Wlc1SmJtUmxlQ0FoUFQwZ0xURXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1puSnZlbVZ1VTJOb1pXMWhTVzVrWlhnZ1BTQjBhR2x6TG5OallXNXVaV1JHY205NlpXNVRZMmhsYldGelcyWnliM3BsYmtsdVpHVjRYUzVwYm1SbGVFOW1LSE5qYUdWdFlTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0daeWIzcGxibE5qYUdWdFlVbHVaR1Y0SUNFOVBTQXRNU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1WeWNtOXljeUE5SUhSb2FYTXVaWEp5YjNKekxtTnZibU5oZENoMGFHbHpMbk5qWVc1dVpXUkdjbTk2Wlc1V1lXeHBaR0YwYVc5dVJYSnliM0p6VzJaeWIzcGxia2x1WkdWNFhWdG1jbTk2Wlc1VFkyaGxiV0ZKYm1SbGVGMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1elkyRnVibVZrTG5CMWMyZ29aR0YwWVNrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hQWW1wbFkzUXVhWE5HY205NlpXNG9aR0YwWVNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaG1jbTk2Wlc1SmJtUmxlQ0E5UFQwZ0xURXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtY205NlpXNUpibVJsZUNBOUlIUm9hWE11YzJOaGJtNWxaRVp5YjNwbGJpNXNaVzVuZEdnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6WTJGdWJtVmtSbkp2ZW1WdUxuQjFjMmdvWkdGMFlTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elkyRnVibVZrUm5KdmVtVnVVMk5vWlcxaGN5NXdkWE5vS0Z0ZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSE5qWVc1dVpXUkdjbTk2Wlc1VFkyaGxiV0ZKYm1SbGVDQTlJSFJvYVhNdWMyTmhibTVsWkVaeWIzcGxibE5qYUdWdFlYTmJabkp2ZW1WdVNXNWtaWGhkTG14bGJtZDBhRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJOaGJtNWxaRVp5YjNwbGJsTmphR1Z0WVhOYlpuSnZlbVZ1U1c1a1pYaGRXM05qWVc1dVpXUkdjbTk2Wlc1VFkyaGxiV0ZKYm1SbGVGMGdQU0J6WTJobGJXRTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5qWVc1dVpXUkdjbTk2Wlc1V1lXeHBaR0YwYVc5dVJYSnliM0p6VzJaeWIzcGxia2x1WkdWNFhWdHpZMkZ1Ym1Wa1JuSnZlbVZ1VTJOb1pXMWhTVzVrWlhoZElEMGdXMTA3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdSaGRHRmJkR2hwY3k1MllXeHBaR0YwWldSVFkyaGxiV0Z6UzJWNVhTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoa1lYUmhMQ0IwYUdsekxuWmhiR2xrWVhSbFpGTmphR1Z0WVhOTFpYa3NJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQmJYU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym1acFozVnlZV0pzWlRvZ2RISjFaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHUmhkR0VzSUhSb2FYTXVkbUZzYVdSaGRHbHZia1Z5Y205eWMwdGxlU3dnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRnRkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dVptbG5kWEpoWW14bE9pQjBjblZsWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeTlKUlNBM0x6Z2dkMjl5YTJGeWIzVnVaRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhXM1JvYVhNdWRtRnNhV1JoZEdWa1UyTm9aVzFoYzB0bGVWMGdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR0YwWVZ0MGFHbHpMblpoYkdsa1lYUnBiMjVGY25KdmNuTkxaWGxkSUQwZ1cxMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJOaGJtNWxaRk5qYUdWdFlYTkpibVJsZUNBOUlHUmhkR0ZiZEdocGN5NTJZV3hwWkdGMFpXUlRZMmhsYldGelMyVjVYUzVzWlc1bmRHZzdYRzRnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhXM1JvYVhNdWRtRnNhV1JoZEdWa1UyTm9aVzFoYzB0bGVWMWJjMk5oYm01bFpGTmphR1Z0WVhOSmJtUmxlRjBnUFNCelkyaGxiV0U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZWFJoVzNSb2FYTXVkbUZzYVdSaGRHbHZia1Z5Y205eWMwdGxlVjFiYzJOaGJtNWxaRk5qYUdWdFlYTkpibVJsZUYwZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCbGNuSnZja052ZFc1MElEMGdkR2hwY3k1bGNuSnZjbk11YkdWdVozUm9PMXh1SUNBZ0lIWmhjaUJsY25KdmNpQTlJSFJvYVhNdWRtRnNhV1JoZEdWQ1lYTnBZeWhrWVhSaExDQnpZMmhsYldFc0lHUmhkR0ZRYjJsdWRHVnlVR0YwYUNsY2JpQWdJQ0FnSUNBZ2ZId2dkR2hwY3k1MllXeHBaR0YwWlU1MWJXVnlhV01vWkdGMFlTd2djMk5vWlcxaExDQmtZWFJoVUc5cGJuUmxjbEJoZEdncFhHNGdJQ0FnSUNBZ0lIeDhJSFJvYVhNdWRtRnNhV1JoZEdWVGRISnBibWNvWkdGMFlTd2djMk5vWlcxaExDQmtZWFJoVUc5cGJuUmxjbEJoZEdncFhHNGdJQ0FnSUNBZ0lIeDhJSFJvYVhNdWRtRnNhV1JoZEdWQmNuSmhlU2hrWVhSaExDQnpZMmhsYldFc0lHUmhkR0ZRYjJsdWRHVnlVR0YwYUNsY2JpQWdJQ0FnSUNBZ2ZId2dkR2hwY3k1MllXeHBaR0YwWlU5aWFtVmpkQ2hrWVhSaExDQnpZMmhsYldFc0lHUmhkR0ZRYjJsdWRHVnlVR0YwYUNsY2JpQWdJQ0FnSUNBZ2ZId2dkR2hwY3k1MllXeHBaR0YwWlVOdmJXSnBibUYwYVc5dWN5aGtZWFJoTENCelkyaGxiV0VzSUdSaGRHRlFiMmx1ZEdWeVVHRjBhQ2xjYmlBZ0lDQWdJQ0FnZkh3Z2RHaHBjeTUyWVd4cFpHRjBaVWg1Y0dWeWJXVmthV0VvWkdGMFlTd2djMk5vWlcxaExDQmtZWFJoVUc5cGJuUmxjbEJoZEdncFhHNGdJQ0FnSUNBZ0lIeDhJSFJvYVhNdWRtRnNhV1JoZEdWR2IzSnRZWFFvWkdGMFlTd2djMk5vWlcxaExDQmtZWFJoVUc5cGJuUmxjbEJoZEdncFhHNGdJQ0FnSUNBZ0lIeDhJSFJvYVhNdWRtRnNhV1JoZEdWRVpXWnBibVZrUzJWNWQyOXlaSE1vWkdGMFlTd2djMk5vWlcxaExDQmtZWFJoVUc5cGJuUmxjbEJoZEdncFhHNGdJQ0FnSUNBZ0lIeDhJRzUxYkd3N1hHNWNiaUFnSUNCcFppQW9kRzl3VEdWMlpXd3BJSHRjYmlBZ0lDQWdJQ0FnZDJocGJHVWdLSFJvYVhNdWMyTmhibTVsWkM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCcGRHVnRJRDBnZEdocGN5NXpZMkZ1Ym1Wa0xuQnZjQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdaR1ZzWlhSbElHbDBaVzFiZEdocGN5NTJZV3hwWkdGMFpXUlRZMmhsYldGelMyVjVYVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGFHbHpMbk5qWVc1dVpXUkdjbTk2Wlc0Z1BTQmJYVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpZMkZ1Ym1Wa1JuSnZlbVZ1VTJOb1pXMWhjeUE5SUZ0ZE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaGxjbkp2Y2lCOGZDQmxjbkp2Y2tOdmRXNTBJQ0U5UFNCMGFHbHpMbVZ5Y205eWN5NXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdkMmhwYkdVZ0tDaGtZWFJoVUdGMGFGQmhjblJ6SUNZbUlHUmhkR0ZRWVhSb1VHRnlkSE11YkdWdVozUm9LU0I4ZkNBb2MyTm9aVzFoVUdGMGFGQmhjblJ6SUNZbUlITmphR1Z0WVZCaGRHaFFZWEowY3k1c1pXNW5kR2dwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1pHRjBZVkJoY25RZ1BTQW9aR0YwWVZCaGRHaFFZWEowY3lBbUppQmtZWFJoVUdGMGFGQmhjblJ6TG14bGJtZDBhQ2tnUHlCY0lsd2lJQ3NnWkdGMFlWQmhkR2hRWVhKMGN5NXdiM0FvS1NBNklHNTFiR3c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnYzJOb1pXMWhVR0Z5ZENBOUlDaHpZMmhsYldGUVlYUm9VR0Z5ZEhNZ0ppWWdjMk5vWlcxaFVHRjBhRkJoY25SekxteGxibWQwYUNrZ1B5QmNJbHdpSUNzZ2MyTm9aVzFoVUdGMGFGQmhjblJ6TG5CdmNDZ3BJRG9nYm5Wc2JEdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGxjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnljbTl5SUQwZ1pYSnliM0l1Y0hKbFptbDRWMmwwYUNoa1lYUmhVR0Z5ZEN3Z2MyTm9aVzFoVUdGeWRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnlaV1pwZUVWeWNtOXljeWhsY25KdmNrTnZkVzUwTENCa1lYUmhVR0Z5ZEN3Z2MyTm9aVzFoVUdGeWRDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvYzJOaGJtNWxaRVp5YjNwbGJsTmphR1Z0WVVsdVpHVjRJQ0U5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMk5oYm01bFpFWnliM3BsYmxaaGJHbGtZWFJwYjI1RmNuSnZjbk5iWm5KdmVtVnVTVzVrWlhoZFczTmpZVzV1WldSR2NtOTZaVzVUWTJobGJXRkpibVJsZUYwZ1BTQjBhR2x6TG1WeWNtOXljeTV6YkdsalpTaHpkR0Z5ZEVWeWNtOXlRMjkxYm5RcE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2MyTmhibTVsWkZOamFHVnRZWE5KYm1SbGVDQWhQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0JrWVhSaFczUm9hWE11ZG1Gc2FXUmhkR2x2YmtWeWNtOXljMHRsZVYxYmMyTmhibTVsWkZOamFHVnRZWE5KYm1SbGVGMGdQU0IwYUdsekxtVnljbTl5Y3k1emJHbGpaU2h6ZEdGeWRFVnljbTl5UTI5MWJuUXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWhoYm1Sc1pVVnljbTl5S0dWeWNtOXlLVHRjYm4wN1hHNVdZV3hwWkdGMGIzSkRiMjUwWlhoMExuQnliM1J2ZEhsd1pTNTJZV3hwWkdGMFpVWnZjbTFoZENBOUlHWjFibU4wYVc5dUlDaGtZWFJoTENCelkyaGxiV0VwSUh0Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUhOamFHVnRZUzVtYjNKdFlYUWdJVDA5SUNkemRISnBibWNuSUh4OElDRjBhR2x6TG1admNtMWhkRlpoYkdsa1lYUnZjbk5iYzJOb1pXMWhMbVp2Y20xaGRGMHBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnZlZ4dUlDQWdJSFpoY2lCbGNuSnZjazFsYzNOaFoyVWdQU0IwYUdsekxtWnZjbTFoZEZaaGJHbGtZWFJ2Y25OYmMyTm9aVzFoTG1admNtMWhkRjB1WTJGc2JDaHVkV3hzTENCa1lYUmhMQ0J6WTJobGJXRXBPMXh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdaWEp5YjNKTlpYTnpZV2RsSUQwOVBTQW5jM1J5YVc1bkp5QjhmQ0IwZVhCbGIyWWdaWEp5YjNKTlpYTnpZV2RsSUQwOVBTQW5iblZ0WW1WeUp5a2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amNtVmhkR1ZGY25KdmNpaEZjbkp2Y2tOdlpHVnpMa1pQVWsxQlZGOURWVk5VVDAwc0lIdHRaWE56WVdkbE9pQmxjbkp2Y2sxbGMzTmhaMlY5TENBbkp5d2dKeTltYjNKdFlYUW5MQ0J1ZFd4c0xDQmtZWFJoTENCelkyaGxiV0VwTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvWlhKeWIzSk5aWE56WVdkbElDWW1JSFI1Y0dWdlppQmxjbkp2Y2sxbGMzTmhaMlVnUFQwOUlDZHZZbXBsWTNRbktTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1OeVpXRjBaVVZ5Y205eUtFVnljbTl5UTI5a1pYTXVSazlTVFVGVVgwTlZVMVJQVFN3Z2UyMWxjM05oWjJVNklHVnljbTl5VFdWemMyRm5aUzV0WlhOellXZGxJSHg4SUZ3aVAxd2lmU3dnWlhKeWIzSk5aWE56WVdkbExtUmhkR0ZRWVhSb0lIeDhJQ2NuTENCbGNuSnZjazFsYzNOaFoyVXVjMk5vWlcxaFVHRjBhQ0I4ZkNCY0lpOW1iM0p0WVhSY0lpd2diblZzYkN3Z1pHRjBZU3dnYzJOb1pXMWhLVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzU5TzF4dVZtRnNhV1JoZEc5eVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWRVpXWnBibVZrUzJWNWQyOXlaSE1nUFNCbWRXNWpkR2x2YmlBb1pHRjBZU3dnYzJOb1pXMWhMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BJSHRjYmlBZ0lDQm1iM0lnS0haaGNpQnJaWGtnYVc0Z2RHaHBjeTVrWldacGJtVmtTMlY1ZDI5eVpITXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCelkyaGxiV0ZiYTJWNVhTQTlQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIWmhjaUIyWVd4cFpHRjBhVzl1Um5WdVkzUnBiMjV6SUQwZ2RHaHBjeTVrWldacGJtVmtTMlY1ZDI5eVpITmJhMlY1WFR0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQjJZV3hwWkdGMGFXOXVSblZ1WTNScGIyNXpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1puVnVZeUE5SUhaaGJHbGtZWFJwYjI1R2RXNWpkR2x2Ym5OYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjbVZ6ZFd4MElEMGdablZ1WXloa1lYUmhMQ0J6WTJobGJXRmJhMlY1WFN3Z2MyTm9aVzFoTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ5WlhOMWJIUWdQVDA5SUNkemRISnBibWNuSUh4OElIUjVjR1Z2WmlCeVpYTjFiSFFnUFQwOUlDZHVkVzFpWlhJbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTNKbFlYUmxSWEp5YjNJb1JYSnliM0pEYjJSbGN5NUxSVmxYVDFKRVgwTlZVMVJQVFN3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JyWlhrNklHdGxlU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlRvZ2NtVnpkV3gwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN3Z0p5Y3NJQ2NuTENCdWRXeHNMQ0JrWVhSaExDQnpZMmhsYldFcExuQnlaV1pwZUZkcGRHZ29iblZzYkN3Z2EyVjVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9jbVZ6ZFd4MElDWW1JSFI1Y0dWdlppQnlaWE4xYkhRZ1BUMDlJQ2R2WW1wbFkzUW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHTnZaR1VnUFNCeVpYTjFiSFF1WTI5a1pUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR052WkdVZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doUlhKeWIzSkRiMlJsYzF0amIyUmxYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RWYm1SbFptbHVaV1FnWlhKeWIzSWdZMjlrWlNBb2RYTmxJR1JsWm1sdVpVVnljbTl5S1RvZ0p5QXJJR052WkdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZaR1VnUFNCRmNuSnZja052WkdWelcyTnZaR1ZkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RIbHdaVzltSUdOdlpHVWdJVDA5SUNkdWRXMWlaWEluS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052WkdVZ1BTQkZjbkp2Y2tOdlpHVnpMa3RGV1ZkUFVrUmZRMVZUVkU5Tk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYldWemMyRm5aVkJoY21GdGN5QTlJQ2gwZVhCbGIyWWdjbVZ6ZFd4MExtMWxjM05oWjJVZ1BUMDlJQ2R2WW1wbFkzUW5LU0EvSUhKbGMzVnNkQzV0WlhOellXZGxJRG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnJaWGs2SUd0bGVTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aVG9nY21WemRXeDBMbTFsYzNOaFoyVWdmSHdnWENJL1hDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCelkyaGxiV0ZRWVhSb0lEMGdjbVZ6ZFd4MExuTmphR1Z0WVZCaGRHZ2dmSHdnS0Z3aUwxd2lJQ3NnYTJWNUxuSmxjR3hoWTJVb0wzNHZaeXdnSjM0d0p5a3VjbVZ3YkdGalpTZ3ZYRnd2TDJjc0lDZCtNU2NwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpjbVZoZEdWRmNuSnZjaWhqYjJSbExDQnRaWE56WVdkbFVHRnlZVzF6TENCeVpYTjFiSFF1WkdGMFlWQmhkR2dnZkh3Z2JuVnNiQ3dnYzJOb1pXMWhVR0YwYUN3Z2JuVnNiQ3dnWkdGMFlTd2djMk5vWlcxaEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JuMDdYRzVjYm1aMWJtTjBhVzl1SUhKbFkzVnljMmwyWlVOdmJYQmhjbVVvUVN3Z1Fpa2dlMXh1SUNBZ0lHbG1JQ2hCSUQwOVBTQkNLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb1FTQW1KaUJDSUNZbUlIUjVjR1Z2WmlCQklEMDlQU0JjSW05aWFtVmpkRndpSUNZbUlIUjVjR1Z2WmlCQ0lEMDlQU0JjSW05aWFtVmpkRndpS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtFRXBJQ0U5UFNCQmNuSmhlUzVwYzBGeWNtRjVLRUlwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoQktTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRUV1YkdWdVozUm9JQ0U5UFNCQ0xteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z1FTNXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hjbVZqZFhKemFYWmxRMjl0Y0dGeVpTaEJXMmxkTENCQ1cybGRLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR3RsZVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2EyVjVJR2x1SUVFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvUWx0clpYbGRJRDA5UFNCMWJtUmxabWx1WldRZ0ppWWdRVnRyWlhsZElDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvYTJWNUlHbHVJRUlwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9RVnRyWlhsZElEMDlQU0IxYm1SbFptbHVaV1FnSmlZZ1FsdHJaWGxkSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9hMlY1SUdsdUlFRXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lYSmxZM1Z5YzJsMlpVTnZiWEJoY21Vb1FWdHJaWGxkTENCQ1cydGxlVjBwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNibjFjYmx4dVZtRnNhV1JoZEc5eVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWQ1lYTnBZeUE5SUdaMWJtTjBhVzl1SUhaaGJHbGtZWFJsUW1GemFXTW9aR0YwWVN3Z2MyTm9aVzFoTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dwSUh0Y2JpQWdJQ0IyWVhJZ1pYSnliM0k3WEc0Z0lDQWdhV1lnS0dWeWNtOXlJRDBnZEdocGN5NTJZV3hwWkdGMFpWUjVjR1VvWkdGMFlTd2djMk5vWlcxaExDQmtZWFJoVUc5cGJuUmxjbEJoZEdncEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmxjbkp2Y2k1d2NtVm1hWGhYYVhSb0tHNTFiR3dzSUZ3aWRIbHdaVndpS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0dWeWNtOXlJRDBnZEdocGN5NTJZV3hwWkdGMFpVVnVkVzBvWkdGMFlTd2djMk5vWlcxaExDQmtZWFJoVUc5cGJuUmxjbEJoZEdncEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmxjbkp2Y2k1d2NtVm1hWGhYYVhSb0tHNTFiR3dzSUZ3aWRIbHdaVndpS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc1OU8xeHVYRzVXWVd4cFpHRjBiM0pEYjI1MFpYaDBMbkJ5YjNSdmRIbHdaUzUyWVd4cFpHRjBaVlI1Y0dVZ1BTQm1kVzVqZEdsdmJpQjJZV3hwWkdGMFpWUjVjR1VvWkdGMFlTd2djMk5vWlcxaEtTQjdYRzRnSUNBZ2FXWWdLSE5qYUdWdFlTNTBlWEJsSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnZlZ4dUlDQWdJSFpoY2lCa1lYUmhWSGx3WlNBOUlIUjVjR1Z2WmlCa1lYUmhPMXh1SUNBZ0lHbG1JQ2hrWVhSaElEMDlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJR1JoZEdGVWVYQmxJRDBnWENKdWRXeHNYQ0k3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtHUmhkR0VwS1NCN1hHNGdJQ0FnSUNBZ0lHUmhkR0ZVZVhCbElEMGdYQ0poY25KaGVWd2lPMXh1SUNBZ0lIMWNiaUFnSUNCMllYSWdZV3hzYjNkbFpGUjVjR1Z6SUQwZ2MyTm9aVzFoTG5SNWNHVTdYRzRnSUNBZ2FXWWdLQ0ZCY25KaGVTNXBjMEZ5Y21GNUtHRnNiRzkzWldSVWVYQmxjeWtwSUh0Y2JpQWdJQ0FnSUNBZ1lXeHNiM2RsWkZSNWNHVnpJRDBnVzJGc2JHOTNaV1JVZVhCbGMxMDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQmhiR3h2ZDJWa1ZIbHdaWE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhSNWNHVWdQU0JoYkd4dmQyVmtWSGx3WlhOYmFWMDdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxJRDA5UFNCa1lYUmhWSGx3WlNCOGZDQW9kSGx3WlNBOVBUMGdYQ0pwYm5SbFoyVnlYQ0lnSmlZZ1pHRjBZVlI1Y0dVZ1BUMDlJRndpYm5WdFltVnlYQ0lnSmlZZ0tHUmhkR0VnSlNBeElEMDlQU0F3S1NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtTnlaV0YwWlVWeWNtOXlLRVZ5Y205eVEyOWtaWE11U1U1V1FVeEpSRjlVV1ZCRkxDQjdYRzRnSUNBZ0lDQWdJSFI1Y0dVNklHUmhkR0ZVZVhCbExGeHVJQ0FnSUNBZ0lDQmxlSEJsWTNSbFpEb2dZV3hzYjNkbFpGUjVjR1Z6TG1wdmFXNG9YQ0l2WENJcFhHNGdJQ0FnZlN3Z0p5Y3NJQ2NuTENCdWRXeHNMQ0JrWVhSaExDQnpZMmhsYldFcE8xeHVmVHRjYmx4dVZtRnNhV1JoZEc5eVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWRmJuVnRJRDBnWm5WdVkzUnBiMjRnZG1Gc2FXUmhkR1ZGYm5WdEtHUmhkR0VzSUhOamFHVnRZU2tnZTF4dUlDQWdJR2xtSUNoelkyaGxiV0ZiWENKbGJuVnRYQ0pkSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnZlZ4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYzJOb1pXMWhXMXdpWlc1MWJWd2lYUzVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWlc1MWJWWmhiQ0E5SUhOamFHVnRZVnRjSW1WdWRXMWNJbDFiYVYwN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h5WldOMWNuTnBkbVZEYjIxd1lYSmxLR1JoZEdFc0lHVnVkVzFXWVd3cEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWpjbVZoZEdWRmNuSnZjaWhGY25KdmNrTnZaR1Z6TGtWT1ZVMWZUVWxUVFVGVVEwZ3NJSHQyWVd4MVpUb2dLSFI1Y0dWdlppQktVMDlPSUNFOVBTQW5kVzVrWldacGJtVmtKeWtnUHlCS1UwOU9Mbk4wY21sdVoybG1lU2hrWVhSaEtTQTZJR1JoZEdGOUxDQW5KeXdnSnljc0lHNTFiR3dzSUdSaGRHRXNJSE5qYUdWdFlTazdYRzU5TzF4dVhHNVdZV3hwWkdGMGIzSkRiMjUwWlhoMExuQnliM1J2ZEhsd1pTNTJZV3hwWkdGMFpVNTFiV1Z5YVdNZ1BTQm1kVzVqZEdsdmJpQjJZV3hwWkdGMFpVNTFiV1Z5YVdNb1pHRjBZU3dnYzJOb1pXMWhMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTUyWVd4cFpHRjBaVTExYkhScGNHeGxUMllvWkdGMFlTd2djMk5vWlcxaExDQmtZWFJoVUc5cGJuUmxjbEJoZEdncFhHNGdJQ0FnSUNBZ0lIeDhJSFJvYVhNdWRtRnNhV1JoZEdWTmFXNU5ZWGdvWkdGMFlTd2djMk5vWlcxaExDQmtZWFJoVUc5cGJuUmxjbEJoZEdncFhHNGdJQ0FnSUNBZ0lIeDhJSFJvYVhNdWRtRnNhV1JoZEdWT1lVNG9aR0YwWVN3Z2MyTm9aVzFoTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dwWEc0Z0lDQWdJQ0FnSUh4OElHNTFiR3c3WEc1OU8xeHVYRzUyWVhJZ1EweFBVMFZmUlU1UFZVZElYMHhQVnlBOUlFMWhkR2d1Y0c5M0tESXNJQzAxTVNrN1hHNTJZWElnUTB4UFUwVmZSVTVQVlVkSVgwaEpSMGdnUFNBeElDMGdRMHhQVTBWZlJVNVBWVWRJWDB4UFZ6dGNibFpoYkdsa1lYUnZja052Ym5SbGVIUXVjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxUWFZzZEdsd2JHVlBaaUE5SUdaMWJtTjBhVzl1SUhaaGJHbGtZWFJsVFhWc2RHbHdiR1ZQWmloa1lYUmhMQ0J6WTJobGJXRXBJSHRjYmlBZ0lDQjJZWElnYlhWc2RHbHdiR1ZQWmlBOUlITmphR1Z0WVM1dGRXeDBhWEJzWlU5bUlIeDhJSE5qYUdWdFlTNWthWFpwYzJsaWJHVkNlVHRjYmlBZ0lDQnBaaUFvYlhWc2RHbHdiR1ZQWmlBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2RIbHdaVzltSUdSaGRHRWdQVDA5SUZ3aWJuVnRZbVZ5WENJcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhKbGJXRnBibVJsY2lBOUlDaGtZWFJoSUM4Z2JYVnNkR2x3YkdWUFppa2dKU0F4TzF4dUlDQWdJQ0FnSUNCcFppQW9jbVZ0WVdsdVpHVnlJRDQ5SUVOTVQxTkZYMFZPVDFWSFNGOU1UMWNnSmlZZ2NtVnRZV2x1WkdWeUlEd2dRMHhQVTBWZlJVNVBWVWRJWDBoSlIwZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU55WldGMFpVVnljbTl5S0VWeWNtOXlRMjlrWlhNdVRsVk5Ra1ZTWDAxVlRGUkpVRXhGWDA5R0xDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHUmhkR0VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYlhWc2RHbHdiR1ZQWmpvZ2JYVnNkR2x3YkdWUFpseHVJQ0FnSUNBZ0lDQWdJQ0FnZlN3Z0p5Y3NJQ2NuTENCdWRXeHNMQ0JrWVhSaExDQnpZMmhsYldFcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVmVHRjYmx4dVZtRnNhV1JoZEc5eVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWTmFXNU5ZWGdnUFNCbWRXNWpkR2x2YmlCMllXeHBaR0YwWlUxcGJrMWhlQ2hrWVhSaExDQnpZMmhsYldFcElIdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHUmhkR0VnSVQwOUlGd2liblZ0WW1WeVhDSXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoelkyaGxiV0V1YldsdWFXMTFiU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoa1lYUmhJRHdnYzJOb1pXMWhMbTFwYm1sdGRXMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU55WldGMFpVVnljbTl5S0VWeWNtOXlRMjlrWlhNdVRsVk5Ra1ZTWDAxSlRrbE5WVTBzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nWkdGMFlTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRhVzVwYlhWdE9pQnpZMmhsYldFdWJXbHVhVzExYlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU3dnSnljc0lDY3ZiV2x1YVcxMWJTY3NJRzUxYkd3c0lHUmhkR0VzSUhOamFHVnRZU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLSE5qYUdWdFlTNWxlR05zZFhOcGRtVk5hVzVwYlhWdElDWW1JR1JoZEdFZ1BUMDlJSE5qYUdWdFlTNXRhVzVwYlhWdEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpjbVZoZEdWRmNuSnZjaWhGY25KdmNrTnZaR1Z6TGs1VlRVSkZVbDlOU1U1SlRWVk5YMFZZUTB4VlUwbFdSU3dnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJrWVhSaExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMXBibWx0ZFcwNklITmphR1Z0WVM1dGFXNXBiWFZ0WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMQ0FuSnl3Z0p5OWxlR05zZFhOcGRtVk5hVzVwYlhWdEp5d2diblZzYkN3Z1pHRjBZU3dnYzJOb1pXMWhLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvYzJOb1pXMWhMbTFoZUdsdGRXMGdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvWkdGMFlTQStJSE5qYUdWdFlTNXRZWGhwYlhWdEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpjbVZoZEdWRmNuSnZjaWhGY25KdmNrTnZaR1Z6TGs1VlRVSkZVbDlOUVZoSlRWVk5MQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJR1JoZEdFc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXRjRhVzExYlRvZ2MyTm9aVzFoTG0xaGVHbHRkVzFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNJQ2NuTENBbkwyMWhlR2x0ZFcwbkxDQnVkV3hzTENCa1lYUmhMQ0J6WTJobGJXRXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaHpZMmhsYldFdVpYaGpiSFZ6YVhabFRXRjRhVzExYlNBbUppQmtZWFJoSUQwOVBTQnpZMmhsYldFdWJXRjRhVzExYlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkzSmxZWFJsUlhKeWIzSW9SWEp5YjNKRGIyUmxjeTVPVlUxQ1JWSmZUVUZZU1UxVlRWOUZXRU5NVlZOSlZrVXNJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2daR0YwWVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFlYaHBiWFZ0T2lCelkyaGxiV0V1YldGNGFXMTFiVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTd2dKeWNzSUNjdlpYaGpiSFZ6YVhabFRXRjRhVzExYlNjc0lHNTFiR3dzSUdSaGRHRXNJSE5qYUdWdFlTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzU5TzF4dVhHNVdZV3hwWkdGMGIzSkRiMjUwWlhoMExuQnliM1J2ZEhsd1pTNTJZV3hwWkdGMFpVNWhUaUE5SUdaMWJtTjBhVzl1SUhaaGJHbGtZWFJsVG1GT0tHUmhkR0VzSUhOamFHVnRZU2tnZTF4dUlDQWdJR2xtSUNoMGVYQmxiMllnWkdGMFlTQWhQVDBnWENKdWRXMWlaWEpjSWlrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLR2x6VG1GT0tHUmhkR0VwSUQwOVBTQjBjblZsSUh4OElHUmhkR0VnUFQwOUlFbHVabWx1YVhSNUlIeDhJR1JoZEdFZ1BUMDlJQzFKYm1acGJtbDBlU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpjbVZoZEdWRmNuSnZjaWhGY25KdmNrTnZaR1Z6TGs1VlRVSkZVbDlPVDFSZlFWOU9WVTFDUlZJc0lIdDJZV3gxWlRvZ1pHRjBZWDBzSUNjbkxDQW5MM1I1Y0dVbkxDQnVkV3hzTENCa1lYUmhMQ0J6WTJobGJXRXBPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnYm5Wc2JEdGNibjA3WEc1Y2JsWmhiR2xrWVhSdmNrTnZiblJsZUhRdWNISnZkRzkwZVhCbExuWmhiR2xrWVhSbFUzUnlhVzVuSUQwZ1puVnVZM1JwYjI0Z2RtRnNhV1JoZEdWVGRISnBibWNvWkdGMFlTd2djMk5vWlcxaExDQmtZWFJoVUc5cGJuUmxjbEJoZEdncElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NTJZV3hwWkdGMFpWTjBjbWx1WjB4bGJtZDBhQ2hrWVhSaExDQnpZMmhsYldFc0lHUmhkR0ZRYjJsdWRHVnlVR0YwYUNsY2JpQWdJQ0FnSUNBZ2ZId2dkR2hwY3k1MllXeHBaR0YwWlZOMGNtbHVaMUJoZEhSbGNtNG9aR0YwWVN3Z2MyTm9aVzFoTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dwWEc0Z0lDQWdJQ0FnSUh4OElHNTFiR3c3WEc1OU8xeHVYRzVXWVd4cFpHRjBiM0pEYjI1MFpYaDBMbkJ5YjNSdmRIbHdaUzUyWVd4cFpHRjBaVk4wY21sdVoweGxibWQwYUNBOUlHWjFibU4wYVc5dUlIWmhiR2xrWVhSbFUzUnlhVzVuVEdWdVozUm9LR1JoZEdFc0lITmphR1Z0WVNrZ2UxeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ1pHRjBZU0FoUFQwZ1hDSnpkSEpwYm1kY0lpa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0hOamFHVnRZUzV0YVc1TVpXNW5kR2dnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1pHRjBZUzVzWlc1bmRHZ2dQQ0J6WTJobGJXRXViV2x1VEdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqY21WaGRHVkZjbkp2Y2loRmNuSnZja052WkdWekxsTlVVa2xPUjE5TVJVNUhWRWhmVTBoUFVsUXNJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlc1bmRHZzZJR1JoZEdFdWJHVnVaM1JvTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxcGJtbHRkVzA2SUhOamFHVnRZUzV0YVc1TVpXNW5kR2hjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNJQ2NuTENBbkwyMXBia3hsYm1kMGFDY3NJRzUxYkd3c0lHUmhkR0VzSUhOamFHVnRZU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0hOamFHVnRZUzV0WVhoTVpXNW5kR2dnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1pHRjBZUzVzWlc1bmRHZ2dQaUJ6WTJobGJXRXViV0Y0VEdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqY21WaGRHVkZjbkp2Y2loRmNuSnZja052WkdWekxsTlVVa2xPUjE5TVJVNUhWRWhmVEU5T1J5d2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsYm1kMGFEb2daR0YwWVM1c1pXNW5kR2dzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldGNGFXMTFiVG9nYzJOb1pXMWhMbTFoZUV4bGJtZDBhRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTd2dKeWNzSUNjdmJXRjRUR1Z1WjNSb0p5d2diblZzYkN3Z1pHRjBZU3dnYzJOb1pXMWhLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYm4wN1hHNWNibFpoYkdsa1lYUnZja052Ym5SbGVIUXVjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxVM1J5YVc1blVHRjBkR1Z5YmlBOUlHWjFibU4wYVc5dUlIWmhiR2xrWVhSbFUzUnlhVzVuVUdGMGRHVnliaWhrWVhSaExDQnpZMmhsYldFcElIdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHUmhkR0VnSVQwOUlGd2ljM1J5YVc1blhDSWdmSHdnS0hSNWNHVnZaaUJ6WTJobGJXRXVjR0YwZEdWeWJpQWhQVDBnWENKemRISnBibWRjSWlBbUppQWhLSE5qYUdWdFlTNXdZWFIwWlhKdUlHbHVjM1JoYm1ObGIyWWdVbVZuUlhod0tTa3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnZlZ4dUlDQWdJSFpoY2lCeVpXZGxlSEE3WEc0Z0lDQWdhV1lnS0hOamFHVnRZUzV3WVhSMFpYSnVJR2x1YzNSaGJtTmxiMllnVW1WblJYaHdLU0I3WEc0Z0lDQWdJQ0FnSUhKbFoyVjRjQ0E5SUhOamFHVnRZUzV3WVhSMFpYSnVPMXh1SUNBZ0lIMWNiaUFnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHSnZaSGtzSUdac1lXZHpJRDBnSnljN1hHNGdJQ0FnSUNBZ0lDOHZJRU5vWldOcklHWnZjaUJ5WldkMWJHRnlJR1Y0Y0hKbGMzTnBiMjRnYkdsMFpYSmhiSE5jYmlBZ0lDQWdJQ0FnTHk4Z1FITmxaU0JvZEhSd09pOHZkM2QzTG1WamJXRXRhVzUwWlhKdVlYUnBiMjVoYkM1dmNtY3ZaV050WVMweU5qSXZOUzR4THlOelpXTXROeTQ0TGpWY2JpQWdJQ0FnSUNBZ2RtRnlJR3hwZEdWeVlXd2dQU0J6WTJobGJXRXVjR0YwZEdWeWJpNXRZWFJqYUNndlhseGNMeWd1S3lsY1hDOG9XMmx0WjEwcUtTUXZLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHeHBkR1Z5WVd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdKdlpIa2dQU0JzYVhSbGNtRnNXekZkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdabXhoWjNNZ1BTQnNhWFJsY21Gc1d6SmRPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ltOWtlU0E5SUhOamFHVnRZUzV3WVhSMFpYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbFoyVjRjQ0E5SUc1bGR5QlNaV2RGZUhBb1ltOWtlU3dnWm14aFozTXBPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9JWEpsWjJWNGNDNTBaWE4wS0dSaGRHRXBLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtTnlaV0YwWlVWeWNtOXlLRVZ5Y205eVEyOWtaWE11VTFSU1NVNUhYMUJCVkZSRlVrNHNJSHR3WVhSMFpYSnVPaUJ6WTJobGJXRXVjR0YwZEdWeWJuMHNJQ2NuTENBbkwzQmhkSFJsY200bkxDQnVkV3hzTENCa1lYUmhMQ0J6WTJobGJXRXBPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnYm5Wc2JEdGNibjA3WEc1Y2JsWmhiR2xrWVhSdmNrTnZiblJsZUhRdWNISnZkRzkwZVhCbExuWmhiR2xrWVhSbFFYSnlZWGtnUFNCbWRXNWpkR2x2YmlCMllXeHBaR0YwWlVGeWNtRjVLR1JoZEdFc0lITmphR1Z0WVN3Z1pHRjBZVkJ2YVc1MFpYSlFZWFJvS1NCN1hHNGdJQ0FnYVdZZ0tDRkJjbkpoZVM1cGMwRnljbUY1S0dSaGRHRXBLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1MllXeHBaR0YwWlVGeWNtRjVUR1Z1WjNSb0tHUmhkR0VzSUhOamFHVnRZU3dnWkdGMFlWQnZhVzUwWlhKUVlYUm9LVnh1SUNBZ0lDQWdJQ0I4ZkNCMGFHbHpMblpoYkdsa1lYUmxRWEp5WVhsVmJtbHhkV1ZKZEdWdGN5aGtZWFJoTENCelkyaGxiV0VzSUdSaGRHRlFiMmx1ZEdWeVVHRjBhQ2xjYmlBZ0lDQWdJQ0FnZkh3Z2RHaHBjeTUyWVd4cFpHRjBaVUZ5Y21GNVNYUmxiWE1vWkdGMFlTd2djMk5vWlcxaExDQmtZWFJoVUc5cGJuUmxjbEJoZEdncFhHNGdJQ0FnSUNBZ0lIeDhJRzUxYkd3N1hHNTlPMXh1WEc1V1lXeHBaR0YwYjNKRGIyNTBaWGgwTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlVGeWNtRjVUR1Z1WjNSb0lEMGdablZ1WTNScGIyNGdkbUZzYVdSaGRHVkJjbkpoZVV4bGJtZDBhQ2hrWVhSaExDQnpZMmhsYldFcElIdGNiaUFnSUNCMllYSWdaWEp5YjNJN1hHNGdJQ0FnYVdZZ0tITmphR1Z0WVM1dGFXNUpkR1Z0Y3lBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaGtZWFJoTG14bGJtZDBhQ0E4SUhOamFHVnRZUzV0YVc1SmRHVnRjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaWEp5YjNJZ1BTQjBhR2x6TG1OeVpXRjBaVVZ5Y205eUtFVnljbTl5UTI5a1pYTXVRVkpTUVZsZlRFVk9SMVJJWDFOSVQxSlVMQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWdVozUm9PaUJrWVhSaExteGxibWQwYUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdGFXNXBiWFZ0T2lCelkyaGxiV0V1YldsdVNYUmxiWE5jYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNJQ2NuTENBbkwyMXBia2wwWlcxekp5d2diblZzYkN3Z1pHRjBZU3dnYzJOb1pXMWhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtaGhibVJzWlVWeWNtOXlLR1Z5Y205eUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmxjbkp2Y2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvYzJOb1pXMWhMbTFoZUVsMFpXMXpJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0dSaGRHRXViR1Z1WjNSb0lENGdjMk5vWlcxaExtMWhlRWwwWlcxektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGNuSnZjaUE5SUhSb2FYTXVZM0psWVhSbFJYSnliM0lvUlhKeWIzSkRiMlJsY3k1QlVsSkJXVjlNUlU1SFZFaGZURTlPUnl3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxibWQwYURvZ1pHRjBZUzVzWlc1bmRHZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV0Y0YVcxMWJUb2djMk5vWlcxaExtMWhlRWwwWlcxelhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TENBbkp5d2dKeTl0WVhoSmRHVnRjeWNzSUc1MWJHd3NJR1JoZEdFc0lITmphR1Z0WVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVvWVc1a2JHVkZjbkp2Y2lobGNuSnZjaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlhKeWIzSTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNTlPMXh1WEc1V1lXeHBaR0YwYjNKRGIyNTBaWGgwTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlVGeWNtRjVWVzVwY1hWbFNYUmxiWE1nUFNCbWRXNWpkR2x2YmlCMllXeHBaR0YwWlVGeWNtRjVWVzVwY1hWbFNYUmxiWE1vWkdGMFlTd2djMk5vWlcxaEtTQjdYRzRnSUNBZ2FXWWdLSE5qYUdWdFlTNTFibWx4ZFdWSmRHVnRjeWtnZTF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHUmhkR0V1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdvZ1BTQnBJQ3NnTVRzZ2FpQThJR1JoZEdFdWJHVnVaM1JvT3lCcUt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NtVmpkWEp6YVhabFEyOXRjR0Z5WlNoa1lYUmhXMmxkTENCa1lYUmhXMnBkS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1pYSnliM0lnUFNCMGFHbHpMbU55WldGMFpVVnljbTl5S0VWeWNtOXlRMjlrWlhNdVFWSlNRVmxmVlU1SlVWVkZMQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WVhSamFERTZJR2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WVhSamFESTZJR3BjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTd2dKeWNzSUNjdmRXNXBjWFZsU1hSbGJYTW5MQ0J1ZFd4c0xDQmtZWFJoTENCelkyaGxiV0VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NW9ZVzVrYkdWRmNuSnZjaWhsY25KdmNpa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmxjbkp2Y2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnYm5Wc2JEdGNibjA3WEc1Y2JsWmhiR2xrWVhSdmNrTnZiblJsZUhRdWNISnZkRzkwZVhCbExuWmhiR2xrWVhSbFFYSnlZWGxKZEdWdGN5QTlJR1oxYm1OMGFXOXVJSFpoYkdsa1lYUmxRWEp5WVhsSmRHVnRjeWhrWVhSaExDQnpZMmhsYldFc0lHUmhkR0ZRYjJsdWRHVnlVR0YwYUNrZ2UxeHVJQ0FnSUdsbUlDaHpZMmhsYldFdWFYUmxiWE1nUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0I5WEc0Z0lDQWdkbUZ5SUdWeWNtOXlMQ0JwTzF4dUlDQWdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLSE5qYUdWdFlTNXBkR1Z0Y3lrcElIdGNiaUFnSUNBZ0lDQWdabTl5SUNocElEMGdNRHNnYVNBOElHUmhkR0V1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBJRHdnYzJOb1pXMWhMbWwwWlcxekxteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hsY25KdmNpQTlJSFJvYVhNdWRtRnNhV1JoZEdWQmJHd29aR0YwWVZ0cFhTd2djMk5vWlcxaExtbDBaVzF6VzJsZExDQmJhVjBzSUZ0Y0ltbDBaVzF6WENJc0lHbGRMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ2dLeUJjSWk5Y0lpQXJJR2twS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmxjbkp2Y2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hOamFHVnRZUzVoWkdScGRHbHZibUZzU1hSbGJYTWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdjMk5vWlcxaExtRmtaR2wwYVc5dVlXeEpkR1Z0Y3lBOVBUMGdYQ0ppYjI5c1pXRnVYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGelkyaGxiV0V1WVdSa2FYUnBiMjVoYkVsMFpXMXpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsY25KdmNpQTlJQ2gwYUdsekxtTnlaV0YwWlVWeWNtOXlLRVZ5Y205eVEyOWtaWE11UVZKU1FWbGZRVVJFU1ZSSlQwNUJURjlKVkVWTlV5d2dlMzBzSUNjdkp5QXJJR2tzSUNjdllXUmthWFJwYjI1aGJFbDBaVzF6Snl3Z2JuVnNiQ3dnWkdGMFlTd2djMk5vWlcxaEtTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NW9ZVzVrYkdWRmNuSnZjaWhsY25KdmNpa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlhKeWIzSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHVnljbTl5SUQwZ2RHaHBjeTUyWVd4cFpHRjBaVUZzYkNoa1lYUmhXMmxkTENCelkyaGxiV0V1WVdSa2FYUnBiMjVoYkVsMFpXMXpMQ0JiYVYwc0lGdGNJbUZrWkdsMGFXOXVZV3hKZEdWdGMxd2lYU3dnWkdGMFlWQnZhVzUwWlhKUVlYUm9JQ3NnWENJdlhDSWdLeUJwS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaWEp5YjNJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnWm05eUlDaHBJRDBnTURzZ2FTQThJR1JoZEdFdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hsY25KdmNpQTlJSFJvYVhNdWRtRnNhV1JoZEdWQmJHd29aR0YwWVZ0cFhTd2djMk5vWlcxaExtbDBaVzF6TENCYmFWMHNJRnRjSW1sMFpXMXpYQ0pkTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dnS3lCY0lpOWNJaUFySUdrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHVnljbTl5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1ZlR0Y2JseHVWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDNXdjbTkwYjNSNWNHVXVkbUZzYVdSaGRHVlBZbXBsWTNRZ1BTQm1kVzVqZEdsdmJpQjJZV3hwWkdGMFpVOWlhbVZqZENoa1lYUmhMQ0J6WTJobGJXRXNJR1JoZEdGUWIybHVkR1Z5VUdGMGFDa2dlMXh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdaR0YwWVNBaFBUMGdYQ0p2WW1wbFkzUmNJaUI4ZkNCa1lYUmhJRDA5UFNCdWRXeHNJSHg4SUVGeWNtRjVMbWx6UVhKeVlYa29aR0YwWVNrcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMblpoYkdsa1lYUmxUMkpxWldOMFRXbHVUV0Y0VUhKdmNHVnlkR2xsY3loa1lYUmhMQ0J6WTJobGJXRXNJR1JoZEdGUWIybHVkR1Z5VUdGMGFDbGNiaUFnSUNBZ0lDQWdmSHdnZEdocGN5NTJZV3hwWkdGMFpVOWlhbVZqZEZKbGNYVnBjbVZrVUhKdmNHVnlkR2xsY3loa1lYUmhMQ0J6WTJobGJXRXNJR1JoZEdGUWIybHVkR1Z5VUdGMGFDbGNiaUFnSUNBZ0lDQWdmSHdnZEdocGN5NTJZV3hwWkdGMFpVOWlhbVZqZEZCeWIzQmxjblJwWlhNb1pHRjBZU3dnYzJOb1pXMWhMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BYRzRnSUNBZ0lDQWdJSHg4SUhSb2FYTXVkbUZzYVdSaGRHVlBZbXBsWTNSRVpYQmxibVJsYm1OcFpYTW9aR0YwWVN3Z2MyTm9aVzFoTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dwWEc0Z0lDQWdJQ0FnSUh4OElHNTFiR3c3WEc1OU8xeHVYRzVXWVd4cFpHRjBiM0pEYjI1MFpYaDBMbkJ5YjNSdmRIbHdaUzUyWVd4cFpHRjBaVTlpYW1WamRFMXBiazFoZUZCeWIzQmxjblJwWlhNZ1BTQm1kVzVqZEdsdmJpQjJZV3hwWkdGMFpVOWlhbVZqZEUxcGJrMWhlRkJ5YjNCbGNuUnBaWE1vWkdGMFlTd2djMk5vWlcxaEtTQjdYRzRnSUNBZ2RtRnlJR3RsZVhNZ1BTQlBZbXBsWTNRdWEyVjVjeWhrWVhSaEtUdGNiaUFnSUNCMllYSWdaWEp5YjNJN1hHNGdJQ0FnYVdZZ0tITmphR1Z0WVM1dGFXNVFjbTl3WlhKMGFXVnpJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0d0bGVYTXViR1Z1WjNSb0lEd2djMk5vWlcxaExtMXBibEJ5YjNCbGNuUnBaWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1Z5Y205eUlEMGdkR2hwY3k1amNtVmhkR1ZGY25KdmNpaEZjbkp2Y2tOdlpHVnpMazlDU2tWRFZGOVFVazlRUlZKVVNVVlRYMDFKVGtsTlZVMHNJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205d1pYSjBlVU52ZFc1ME9pQnJaWGx6TG14bGJtZDBhQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0YVc1cGJYVnRPaUJ6WTJobGJXRXViV2x1VUhKdmNHVnlkR2xsYzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU3dnSnljc0lDY3ZiV2x1VUhKdmNHVnlkR2xsY3ljc0lHNTFiR3dzSUdSaGRHRXNJSE5qYUdWdFlTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1b1lXNWtiR1ZGY25KdmNpaGxjbkp2Y2lrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pYSnliM0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSE5qYUdWdFlTNXRZWGhRY205d1pYSjBhV1Z6SUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHdGxlWE11YkdWdVozUm9JRDRnYzJOb1pXMWhMbTFoZUZCeWIzQmxjblJwWlhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdWeWNtOXlJRDBnZEdocGN5NWpjbVZoZEdWRmNuSnZjaWhGY25KdmNrTnZaR1Z6TGs5Q1NrVkRWRjlRVWs5UVJWSlVTVVZUWDAxQldFbE5WVTBzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtOXdaWEowZVVOdmRXNTBPaUJyWlhsekxteGxibWQwYUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFlYaHBiWFZ0T2lCelkyaGxiV0V1YldGNFVISnZjR1Z5ZEdsbGMxeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN3Z0p5Y3NJQ2N2YldGNFVISnZjR1Z5ZEdsbGN5Y3NJRzUxYkd3c0lHUmhkR0VzSUhOamFHVnRZU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NW9ZVzVrYkdWRmNuSnZjaWhsY25KdmNpa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaWEp5YjNJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc1OU8xeHVYRzVXWVd4cFpHRjBiM0pEYjI1MFpYaDBMbkJ5YjNSdmRIbHdaUzUyWVd4cFpHRjBaVTlpYW1WamRGSmxjWFZwY21Wa1VISnZjR1Z5ZEdsbGN5QTlJR1oxYm1OMGFXOXVJSFpoYkdsa1lYUmxUMkpxWldOMFVtVnhkV2x5WldSUWNtOXdaWEowYVdWektHUmhkR0VzSUhOamFHVnRZU2tnZTF4dUlDQWdJR2xtSUNoelkyaGxiV0V1Y21WeGRXbHlaV1FnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhOamFHVnRZUzV5WlhGMWFYSmxaQzVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHdGxlU0E5SUhOamFHVnRZUzV5WlhGMWFYSmxaRnRwWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoa1lYUmhXMnRsZVYwZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmxjbkp2Y2lBOUlIUm9hWE11WTNKbFlYUmxSWEp5YjNJb1JYSnliM0pEYjJSbGN5NVBRa3BGUTFSZlVrVlJWVWxTUlVRc0lIdHJaWGs2SUd0bGVYMHNJQ2NuTENBbkwzSmxjWFZwY21Wa0x5Y2dLeUJwTENCdWRXeHNMQ0JrWVhSaExDQnpZMmhsYldFcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtaGhibVJzWlVWeWNtOXlLR1Z5Y205eUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlhKeWIzSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVmVHRjYmx4dVZtRnNhV1JoZEc5eVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWUFltcGxZM1JRY205d1pYSjBhV1Z6SUQwZ1puVnVZM1JwYjI0Z2RtRnNhV1JoZEdWUFltcGxZM1JRY205d1pYSjBhV1Z6S0dSaGRHRXNJSE5qYUdWdFlTd2daR0YwWVZCdmFXNTBaWEpRWVhSb0tTQjdYRzRnSUNBZ2RtRnlJR1Z5Y205eU8xeHVJQ0FnSUdadmNpQW9kbUZ5SUd0bGVTQnBiaUJrWVhSaEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCclpYbFFiMmx1ZEdWeVVHRjBhQ0E5SUdSaGRHRlFiMmx1ZEdWeVVHRjBhQ0FySUZ3aUwxd2lJQ3NnYTJWNUxuSmxjR3hoWTJVb0wzNHZaeXdnSjM0d0p5a3VjbVZ3YkdGalpTZ3ZYRnd2TDJjc0lDZCtNU2NwTzF4dUlDQWdJQ0FnSUNCMllYSWdabTkxYm1STllYUmphQ0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0JwWmlBb2MyTm9aVzFoTG5CeWIzQmxjblJwWlhNZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlCelkyaGxiV0V1Y0hKdmNHVnlkR2xsYzF0clpYbGRJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdadmRXNWtUV0YwWTJnZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dWeWNtOXlJRDBnZEdocGN5NTJZV3hwWkdGMFpVRnNiQ2hrWVhSaFcydGxlVjBzSUhOamFHVnRZUzV3Y205d1pYSjBhV1Z6VzJ0bGVWMHNJRnRyWlhsZExDQmJYQ0p3Y205d1pYSjBhV1Z6WENJc0lHdGxlVjBzSUd0bGVWQnZhVzUwWlhKUVlYUm9LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJsY25KdmNqdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvYzJOb1pXMWhMbkJoZEhSbGNtNVFjbTl3WlhKMGFXVnpJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUhCaGRIUmxjbTVMWlhrZ2FXNGdjMk5vWlcxaExuQmhkSFJsY201UWNtOXdaWEowYVdWektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhKbFoyVjRjQ0E5SUc1bGR5QlNaV2RGZUhBb2NHRjBkR1Z5Ymt0bGVTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hKbFoyVjRjQzUwWlhOMEtHdGxlU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTkxYm1STllYUmphQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGxjbkp2Y2lBOUlIUm9hWE11ZG1Gc2FXUmhkR1ZCYkd3b1pHRjBZVnRyWlhsZExDQnpZMmhsYldFdWNHRjBkR1Z5YmxCeWIzQmxjblJwWlhOYmNHRjBkR1Z5Ymt0bGVWMHNJRnRyWlhsZExDQmJYQ0p3WVhSMFpYSnVVSEp2Y0dWeWRHbGxjMXdpTENCd1lYUjBaWEp1UzJWNVhTd2dhMlY1VUc5cGJuUmxjbEJoZEdncEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pYSnliM0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0NGbWIzVnVaRTFoZEdOb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jMk5vWlcxaExtRmtaR2wwYVc5dVlXeFFjbTl3WlhKMGFXVnpJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NTBjbUZqYTFWdWEyNXZkMjVRY205d1pYSjBhV1Z6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWEyNXZkMjVRY205d1pYSjBlVkJoZEdoelcydGxlVkJ2YVc1MFpYSlFZWFJvWFNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxiR1YwWlNCMGFHbHpMblZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6VzJ0bGVWQnZhVzUwWlhKUVlYUm9YVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCelkyaGxiV0V1WVdSa2FYUnBiMjVoYkZCeWIzQmxjblJwWlhNZ1BUMDlJRndpWW05dmJHVmhibHdpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGMyTm9aVzFoTG1Ga1pHbDBhVzl1WVd4UWNtOXdaWEowYVdWektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxjbkp2Y2lBOUlIUm9hWE11WTNKbFlYUmxSWEp5YjNJb1JYSnliM0pEYjJSbGN5NVBRa3BGUTFSZlFVUkVTVlJKVDA1QlRGOVFVazlRUlZKVVNVVlRMQ0I3YTJWNU9pQnJaWGw5TENBbkp5d2dKeTloWkdScGRHbHZibUZzVUhKdmNHVnlkR2xsY3ljc0lHNTFiR3dzSUdSaGRHRXNJSE5qYUdWdFlTa3VjSEpsWm1sNFYybDBhQ2hyWlhrc0lHNTFiR3dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YUdGdVpHeGxSWEp5YjNJb1pYSnliM0lwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHVnljbTl5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHVnljbTl5SUQwZ2RHaHBjeTUyWVd4cFpHRjBaVUZzYkNoa1lYUmhXMnRsZVYwc0lITmphR1Z0WVM1aFpHUnBkR2x2Ym1Gc1VISnZjR1Z5ZEdsbGN5d2dXMnRsZVYwc0lGdGNJbUZrWkdsMGFXOXVZV3hRY205d1pYSjBhV1Z6WENKZExDQnJaWGxRYjJsdWRHVnlVR0YwYUNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbGNuSnZjanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RHaHBjeTUwY21GamExVnVhMjV2ZDI1UWNtOXdaWEowYVdWeklDWW1JQ0YwYUdsekxtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2MxdHJaWGxRYjJsdWRHVnlVR0YwYUYwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5WdWEyNXZkMjVRY205d1pYSjBlVkJoZEdoelcydGxlVkJ2YVc1MFpYSlFZWFJvWFNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvZEdocGN5NTBjbUZqYTFWdWEyNXZkMjVRY205d1pYSjBhV1Z6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2MxdHJaWGxRYjJsdWRHVnlVR0YwYUYwZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdaR1ZzWlhSbElIUm9hWE11ZFc1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhOYmEyVjVVRzlwYm5SbGNsQmhkR2hkTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dWZUdGNibHh1Vm1Gc2FXUmhkRzl5UTI5dWRHVjRkQzV3Y205MGIzUjVjR1V1ZG1Gc2FXUmhkR1ZQWW1wbFkzUkVaWEJsYm1SbGJtTnBaWE1nUFNCbWRXNWpkR2x2YmlCMllXeHBaR0YwWlU5aWFtVmpkRVJsY0dWdVpHVnVZMmxsY3loa1lYUmhMQ0J6WTJobGJXRXNJR1JoZEdGUWIybHVkR1Z5VUdGMGFDa2dlMXh1SUNBZ0lIWmhjaUJsY25KdmNqdGNiaUFnSUNCcFppQW9jMk5vWlcxaExtUmxjR1Z1WkdWdVkybGxjeUFoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR1JsY0V0bGVTQnBiaUJ6WTJobGJXRXVaR1Z3Wlc1a1pXNWphV1Z6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pHRjBZVnRrWlhCTFpYbGRJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWkdWd0lEMGdjMk5vWlcxaExtUmxjR1Z1WkdWdVkybGxjMXRrWlhCTFpYbGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWkdWd0lEMDlQU0JjSW5OMGNtbHVaMXdpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoa1lYUmhXMlJsY0YwZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlhKeWIzSWdQU0IwYUdsekxtTnlaV0YwWlVWeWNtOXlLRVZ5Y205eVEyOWtaWE11VDBKS1JVTlVYMFJGVUVWT1JFVk9RMWxmUzBWWkxDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYTJWNU9pQmtaWEJMWlhrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV2x6YzJsdVp6b2daR1Z3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TENBbkp5d2dKeWNzSUc1MWJHd3NJR1JoZEdFc0lITmphR1Z0WVNrdWNISmxabWw0VjJsMGFDaHVkV3hzTENCa1pYQkxaWGtwTG5CeVpXWnBlRmRwZEdnb2JuVnNiQ3dnWENKa1pYQmxibVJsYm1OcFpYTmNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVvWVc1a2JHVkZjbkp2Y2lobGNuSnZjaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pYSnliM0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrb1pHVndLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR1JsY0M1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhKbGNYVnBjbVZrUzJWNUlEMGdaR1Z3VzJsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1JoZEdGYmNtVnhkV2x5WldSTFpYbGRJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsY25KdmNpQTlJSFJvYVhNdVkzSmxZWFJsUlhKeWIzSW9SWEp5YjNKRGIyUmxjeTVQUWtwRlExUmZSRVZRUlU1RVJVNURXVjlMUlZrc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2EyVjVPaUJrWlhCTFpYa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMXBjM05wYm1jNklISmxjWFZwY21Wa1MyVjVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN3Z0p5Y3NJQ2N2SnlBcklHa3NJRzUxYkd3c0lHUmhkR0VzSUhOamFHVnRZU2t1Y0hKbFptbDRWMmwwYUNodWRXeHNMQ0JrWlhCTFpYa3BMbkJ5WldacGVGZHBkR2dvYm5Wc2JDd2dYQ0prWlhCbGJtUmxibU5wWlhOY0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YUdGdVpHeGxSWEp5YjNJb1pYSnliM0lwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJsY25KdmNqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pYSnliM0lnUFNCMGFHbHpMblpoYkdsa1lYUmxRV3hzS0dSaGRHRXNJR1JsY0N3Z1cxMHNJRnRjSW1SbGNHVnVaR1Z1WTJsbGMxd2lMQ0JrWlhCTFpYbGRMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaWEp5YjNJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzU5TzF4dVhHNVdZV3hwWkdGMGIzSkRiMjUwWlhoMExuQnliM1J2ZEhsd1pTNTJZV3hwWkdGMFpVTnZiV0pwYm1GMGFXOXVjeUE5SUdaMWJtTjBhVzl1SUhaaGJHbGtZWFJsUTI5dFltbHVZWFJwYjI1ektHUmhkR0VzSUhOamFHVnRZU3dnWkdGMFlWQnZhVzUwWlhKUVlYUm9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11ZG1Gc2FXUmhkR1ZCYkd4UFppaGtZWFJoTENCelkyaGxiV0VzSUdSaGRHRlFiMmx1ZEdWeVVHRjBhQ2xjYmlBZ0lDQWdJQ0FnZkh3Z2RHaHBjeTUyWVd4cFpHRjBaVUZ1ZVU5bUtHUmhkR0VzSUhOamFHVnRZU3dnWkdGMFlWQnZhVzUwWlhKUVlYUm9LVnh1SUNBZ0lDQWdJQ0I4ZkNCMGFHbHpMblpoYkdsa1lYUmxUMjVsVDJZb1pHRjBZU3dnYzJOb1pXMWhMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BYRzRnSUNBZ0lDQWdJSHg4SUhSb2FYTXVkbUZzYVdSaGRHVk9iM1FvWkdGMFlTd2djMk5vWlcxaExDQmtZWFJoVUc5cGJuUmxjbEJoZEdncFhHNGdJQ0FnSUNBZ0lIeDhJRzUxYkd3N1hHNTlPMXh1WEc1V1lXeHBaR0YwYjNKRGIyNTBaWGgwTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlVGc2JFOW1JRDBnWm5WdVkzUnBiMjRnZG1Gc2FXUmhkR1ZCYkd4UFppaGtZWFJoTENCelkyaGxiV0VzSUdSaGRHRlFiMmx1ZEdWeVVHRjBhQ2tnZTF4dUlDQWdJR2xtSUNoelkyaGxiV0V1WVd4c1QyWWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQjlYRzRnSUNBZ2RtRnlJR1Z5Y205eU8xeHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2MyTm9aVzFoTG1Gc2JFOW1MbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ6ZFdKVFkyaGxiV0VnUFNCelkyaGxiV0V1WVd4c1QyWmJhVjA3WEc0Z0lDQWdJQ0FnSUdsbUlDaGxjbkp2Y2lBOUlIUm9hWE11ZG1Gc2FXUmhkR1ZCYkd3b1pHRjBZU3dnYzNWaVUyTm9aVzFoTENCYlhTd2dXMXdpWVd4c1QyWmNJaXdnYVYwc0lHUmhkR0ZRYjJsdWRHVnlVR0YwYUNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJsY25KdmNqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnYm5Wc2JEdGNibjA3WEc1Y2JsWmhiR2xrWVhSdmNrTnZiblJsZUhRdWNISnZkRzkwZVhCbExuWmhiR2xrWVhSbFFXNTVUMllnUFNCbWRXNWpkR2x2YmlCMllXeHBaR0YwWlVGdWVVOW1LR1JoZEdFc0lITmphR1Z0WVN3Z1pHRjBZVkJ2YVc1MFpYSlFZWFJvS1NCN1hHNGdJQ0FnYVdZZ0tITmphR1Z0WVM1aGJubFBaaUE5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJSDFjYmlBZ0lDQjJZWElnWlhKeWIzSnpJRDBnVzEwN1hHNGdJQ0FnZG1GeUlITjBZWEowUlhKeWIzSkRiM1Z1ZENBOUlIUm9hWE11WlhKeWIzSnpMbXhsYm1kMGFEdGNiaUFnSUNCMllYSWdiMnhrVlc1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhNc0lHOXNaRXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jenRjYmlBZ0lDQnBaaUFvZEdocGN5NTBjbUZqYTFWdWEyNXZkMjVRY205d1pYSjBhV1Z6S1NCN1hHNGdJQ0FnSUNBZ0lHOXNaRlZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6SUQwZ2RHaHBjeTUxYm10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3p0Y2JpQWdJQ0FnSUNBZ2IyeGtTMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpJRDBnZEdocGN5NXJibTkzYmxCeWIzQmxjblI1VUdGMGFITTdYRzRnSUNBZ2ZWeHVJQ0FnSUhaaGNpQmxjbkp2Y2tGMFJXNWtJRDBnZEhKMVpUdGNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElITmphR1Z0WVM1aGJubFBaaTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NTBjbUZqYTFWdWEyNXZkMjVRY205d1pYSjBhV1Z6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuVnVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpJRDBnZTMwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N5QTlJSHQ5TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIWmhjaUJ6ZFdKVFkyaGxiV0VnUFNCelkyaGxiV0V1WVc1NVQyWmJhVjA3WEc1Y2JpQWdJQ0FnSUNBZ2RtRnlJR1Z5Y205eVEyOTFiblFnUFNCMGFHbHpMbVZ5Y205eWN5NXNaVzVuZEdnN1hHNGdJQ0FnSUNBZ0lIWmhjaUJsY25KdmNpQTlJSFJvYVhNdWRtRnNhV1JoZEdWQmJHd29aR0YwWVN3Z2MzVmlVMk5vWlcxaExDQmJYU3dnVzF3aVlXNTVUMlpjSWl3Z2FWMHNJR1JoZEdGUWIybHVkR1Z5VUdGMGFDazdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHVnljbTl5SUQwOVBTQnVkV3hzSUNZbUlHVnljbTl5UTI5MWJuUWdQVDA5SUhSb2FYTXVaWEp5YjNKekxteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxjbkp2Y25NZ1BTQjBhR2x6TG1WeWNtOXljeTV6YkdsalpTZ3dMQ0J6ZEdGeWRFVnljbTl5UTI5MWJuUXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NTBjbUZqYTFWdWEyNXZkMjVRY205d1pYSjBhV1Z6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2EyNXZkMjVMWlhrZ2FXNGdkR2hwY3k1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjJ4a1MyNXZkMjVRY205d1pYSjBlVkJoZEdoelcydHViM2R1UzJWNVhTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsYkdWMFpTQnZiR1JWYm10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvYzF0cmJtOTNia3RsZVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlIVnVhMjV2ZDI1TFpYa2dhVzRnZEdocGN5NTFibXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVc5c1pFdHViM2R1VUhKdmNHVnlkSGxRWVhSb2MxdDFibXR1YjNkdVMyVjVYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjJ4a1ZXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITmJkVzVyYm05M2JrdGxlVjBnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRmRsSUc1bFpXUWdkRzhnWTI5dWRHbHVkV1VnYkc5dmNHbHVaeUJ6YnlCM1pTQmpZWFJqYUNCaGJHd2dkR2hsSUhCeWIzQmxjblI1SUdSbFptbHVhWFJwYjI1ekxDQmlkWFFnZDJVZ1pHOXVKM1FnZDJGdWRDQjBieUJ5WlhSMWNtNGdZVzRnWlhKeWIzSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxjbkp2Y2tGMFJXNWtJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNobGNuSnZjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaWEp5YjNKekxuQjFjMmdvWlhKeWIzSXVjSEpsWm1sNFYybDBhQ2h1ZFd4c0xDQmNJbHdpSUNzZ2FTa3VjSEpsWm1sNFYybDBhQ2h1ZFd4c0xDQmNJbUZ1ZVU5bVhDSXBLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvZEdocGN5NTBjbUZqYTFWdWEyNXZkMjVRY205d1pYSjBhV1Z6S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZFc1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhNZ1BTQnZiR1JWYm10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3p0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVyYm05M2JsQnliM0JsY25SNVVHRjBhSE1nUFNCdmJHUkxibTkzYmxCeWIzQmxjblI1VUdGMGFITTdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaGxjbkp2Y2tGMFJXNWtLU0I3WEc0Z0lDQWdJQ0FnSUdWeWNtOXljeUE5SUdWeWNtOXljeTVqYjI1allYUW9kR2hwY3k1bGNuSnZjbk11YzJ4cFkyVW9jM1JoY25SRmNuSnZja052ZFc1MEtTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpYSnliM0p6SUQwZ2RHaHBjeTVsY25KdmNuTXVjMnhwWTJVb01Dd2djM1JoY25SRmNuSnZja052ZFc1MEtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTNKbFlYUmxSWEp5YjNJb1JYSnliM0pEYjJSbGN5NUJUbGxmVDBaZlRVbFRVMGxPUnl3Z2UzMHNJRndpWENJc0lGd2lMMkZ1ZVU5bVhDSXNJR1Z5Y205eWN5d2daR0YwWVN3Z2MyTm9aVzFoS1R0Y2JpQWdJQ0I5WEc1OU8xeHVYRzVXWVd4cFpHRjBiM0pEYjI1MFpYaDBMbkJ5YjNSdmRIbHdaUzUyWVd4cFpHRjBaVTl1WlU5bUlEMGdablZ1WTNScGIyNGdkbUZzYVdSaGRHVlBibVZQWmloa1lYUmhMQ0J6WTJobGJXRXNJR1JoZEdGUWIybHVkR1Z5VUdGMGFDa2dlMXh1SUNBZ0lHbG1JQ2h6WTJobGJXRXViMjVsVDJZZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNCOVhHNGdJQ0FnZG1GeUlIWmhiR2xrU1c1a1pYZ2dQU0J1ZFd4c08xeHVJQ0FnSUhaaGNpQmxjbkp2Y25NZ1BTQmJYVHRjYmlBZ0lDQjJZWElnYzNSaGNuUkZjbkp2Y2tOdmRXNTBJRDBnZEdocGN5NWxjbkp2Y25NdWJHVnVaM1JvTzF4dUlDQWdJSFpoY2lCdmJHUlZibXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jeXdnYjJ4a1MyNXZkMjVRY205d1pYSjBlVkJoZEdoek8xeHVJQ0FnSUdsbUlDaDBhR2x6TG5SeVlXTnJWVzVyYm05M2JsQnliM0JsY25ScFpYTXBJSHRjYmlBZ0lDQWdJQ0FnYjJ4a1ZXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITWdQU0IwYUdsekxuVnVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpPMXh1SUNBZ0lDQWdJQ0J2YkdSTGJtOTNibEJ5YjNCbGNuUjVVR0YwYUhNZ1BTQjBhR2x6TG10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3p0Y2JpQWdJQ0I5WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0J6WTJobGJXRXViMjVsVDJZdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11ZEhKaFkydFZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUxYm10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3lBOUlIdDlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVyYm05M2JsQnliM0JsY25SNVVHRjBhSE1nUFNCN2ZUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IyWVhJZ2MzVmlVMk5vWlcxaElEMGdjMk5vWlcxaExtOXVaVTltVzJsZE8xeHVYRzRnSUNBZ0lDQWdJSFpoY2lCbGNuSnZja052ZFc1MElEMGdkR2hwY3k1bGNuSnZjbk11YkdWdVozUm9PMXh1SUNBZ0lDQWdJQ0IyWVhJZ1pYSnliM0lnUFNCMGFHbHpMblpoYkdsa1lYUmxRV3hzS0dSaGRHRXNJSE4xWWxOamFHVnRZU3dnVzEwc0lGdGNJbTl1WlU5bVhDSXNJR2xkTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hsY25KdmNpQTlQVDBnYm5Wc2JDQW1KaUJsY25KdmNrTnZkVzUwSUQwOVBTQjBhR2x6TG1WeWNtOXljeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gyWVd4cFpFbHVaR1Y0SUQwOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNhV1JKYm1SbGVDQTlJR2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WlhKeWIzSnpJRDBnZEdocGN5NWxjbkp2Y25NdWMyeHBZMlVvTUN3Z2MzUmhjblJGY25KdmNrTnZkVzUwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpjbVZoZEdWRmNuSnZjaWhGY25KdmNrTnZaR1Z6TGs5T1JWOVBSbDlOVlV4VVNWQk1SU3dnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBibVJsZURFNklIWmhiR2xrU1c1a1pYZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdVpHVjRNam9nYVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc0lGd2lYQ0lzSUZ3aUwyOXVaVTltWENJc0lHNTFiR3dzSUdSaGRHRXNJSE5qYUdWdFlTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTUwY21GamExVnVhMjV2ZDI1UWNtOXdaWEowYVdWektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdhMjV2ZDI1TFpYa2dhVzRnZEdocGN5NXJibTkzYmxCeWIzQmxjblI1VUdGMGFITXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IyeGtTMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpXMnR1YjNkdVMyVjVYU0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbGJHVjBaU0J2YkdSVmJtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2MxdHJibTkzYmt0bGVWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJSFZ1YTI1dmQyNUxaWGtnYVc0Z2RHaHBjeTUxYm10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXOXNaRXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jMXQxYm10dWIzZHVTMlY1WFNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IyeGtWVzVyYm05M2JsQnliM0JsY25SNVVHRjBhSE5iZFc1cmJtOTNia3RsZVYwZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR1Z5Y205eUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGNuSnZjbk11Y0hWemFDaGxjbkp2Y2lrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIUm9hWE11ZEhKaFkydFZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuVnVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpJRDBnYjJ4a1ZXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWEyNXZkMjVRY205d1pYSjBlVkJoZEdoeklEMGdiMnhrUzI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6TzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvZG1Gc2FXUkpibVJsZUNBOVBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQmxjbkp2Y25NZ1BTQmxjbkp2Y25NdVkyOXVZMkYwS0hSb2FYTXVaWEp5YjNKekxuTnNhV05sS0hOMFlYSjBSWEp5YjNKRGIzVnVkQ2twTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVZ5Y205eWN5QTlJSFJvYVhNdVpYSnliM0p6TG5Oc2FXTmxLREFzSUhOMFlYSjBSWEp5YjNKRGIzVnVkQ2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtTnlaV0YwWlVWeWNtOXlLRVZ5Y205eVEyOWtaWE11VDA1RlgwOUdYMDFKVTFOSlRrY3NJSHQ5TENCY0lsd2lMQ0JjSWk5dmJtVlBabHdpTENCbGNuSnZjbk1zSUdSaGRHRXNJSE5qYUdWdFlTazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsY25KdmNuTWdQU0IwYUdsekxtVnljbTl5Y3k1emJHbGpaU2d3TENCemRHRnlkRVZ5Y205eVEyOTFiblFwTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYm4wN1hHNWNibFpoYkdsa1lYUnZja052Ym5SbGVIUXVjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxUbTkwSUQwZ1puVnVZM1JwYjI0Z2RtRnNhV1JoZEdWT2IzUW9aR0YwWVN3Z2MyTm9aVzFoTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dwSUh0Y2JpQWdJQ0JwWmlBb2MyTm9aVzFoTG01dmRDQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMWNiaUFnSUNCMllYSWdiMnhrUlhKeWIzSkRiM1Z1ZENBOUlIUm9hWE11WlhKeWIzSnpMbXhsYm1kMGFEdGNiaUFnSUNCMllYSWdiMnhrVlc1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhNc0lHOXNaRXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jenRjYmlBZ0lDQnBaaUFvZEdocGN5NTBjbUZqYTFWdWEyNXZkMjVRY205d1pYSjBhV1Z6S1NCN1hHNGdJQ0FnSUNBZ0lHOXNaRlZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6SUQwZ2RHaHBjeTUxYm10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3p0Y2JpQWdJQ0FnSUNBZ2IyeGtTMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpJRDBnZEdocGN5NXJibTkzYmxCeWIzQmxjblI1VUdGMGFITTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITWdQU0I3ZlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVyYm05M2JsQnliM0JsY25SNVVHRjBhSE1nUFNCN2ZUdGNiaUFnSUNCOVhHNGdJQ0FnZG1GeUlHVnljbTl5SUQwZ2RHaHBjeTUyWVd4cFpHRjBaVUZzYkNoa1lYUmhMQ0J6WTJobGJXRXVibTkwTENCdWRXeHNMQ0J1ZFd4c0xDQmtZWFJoVUc5cGJuUmxjbEJoZEdncE8xeHVJQ0FnSUhaaGNpQnViM1JGY25KdmNuTWdQU0IwYUdsekxtVnljbTl5Y3k1emJHbGpaU2h2YkdSRmNuSnZja052ZFc1MEtUdGNiaUFnSUNCMGFHbHpMbVZ5Y205eWN5QTlJSFJvYVhNdVpYSnliM0p6TG5Oc2FXTmxLREFzSUc5c1pFVnljbTl5UTI5MWJuUXBPMXh1SUNBZ0lHbG1JQ2gwYUdsekxuUnlZV05yVlc1cmJtOTNibEJ5YjNCbGNuUnBaWE1wSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUxYm10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3lBOUlHOXNaRlZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jeUE5SUc5c1pFdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N6dGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tHVnljbTl5SUQwOVBTQnVkV3hzSUNZbUlHNXZkRVZ5Y205eWN5NXNaVzVuZEdnZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZM0psWVhSbFJYSnliM0lvUlhKeWIzSkRiMlJsY3k1T1QxUmZVRUZUVTBWRUxDQjdmU3dnWENKY0lpd2dYQ0l2Ym05MFhDSXNJRzUxYkd3c0lHUmhkR0VzSUhOamFHVnRZU2s3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1ZlR0Y2JseHVWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDNXdjbTkwYjNSNWNHVXVkbUZzYVdSaGRHVkllWEJsY20xbFpHbGhJRDBnWm5WdVkzUnBiMjRnZG1Gc2FXUmhkR1ZEYjIxaWFXNWhkR2x2Ym5Nb1pHRjBZU3dnYzJOb1pXMWhMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BJSHRjYmlBZ0lDQnBaaUFvSVhOamFHVnRZUzVzYVc1cmN5a2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0I5WEc0Z0lDQWdkbUZ5SUdWeWNtOXlPMXh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2djMk5vWlcxaExteHBibXR6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCc1pHOGdQU0J6WTJobGJXRXViR2x1YTNOYmFWMDdYRzRnSUNBZ0lDQWdJR2xtSUNoc1pHOHVjbVZzSUQwOVBTQmNJbVJsYzJOeWFXSmxaR0o1WENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQjBaVzF3YkdGMFpTQTlJRzVsZHlCVmNtbFVaVzF3YkdGMFpTaHNaRzh1YUhKbFppazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZV3hzVUhKbGMyVnVkQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcUlEMGdNRHNnYWlBOElIUmxiWEJzWVhSbExuWmhjazVoYldWekxteGxibWQwYURzZ2Fpc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRW9kR1Z0Y0d4aGRHVXVkbUZ5VG1GdFpYTmJhbDBnYVc0Z1pHRjBZU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV3hzVUhKbGMyVnVkQ0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZV3hzVUhKbGMyVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnpZMmhsYldGVmNtd2dQU0IwWlcxd2JHRjBaUzVtYVd4c1JuSnZiVTlpYW1WamRDaGtZWFJoS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjM1ZpVTJOb1pXMWhJRDBnZTF3aUpISmxabHdpT2lCelkyaGxiV0ZWY214OU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hsY25KdmNpQTlJSFJvYVhNdWRtRnNhV1JoZEdWQmJHd29aR0YwWVN3Z2MzVmlVMk5vWlcxaExDQmJYU3dnVzF3aWJHbHVhM05jSWl3Z2FWMHNJR1JoZEdGUWIybHVkR1Z5VUdGMGFDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdWeWNtOXlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibjA3WEc1Y2JpOHZJSEJoY25ObFZWSkpLQ2tnWVc1a0lISmxjMjlzZG1WVmNtd29LU0JoY21VZ1puSnZiU0JvZEhSd2N6b3ZMMmRwYzNRdVoybDBhSFZpTG1OdmJTOHhNRGc0T0RVd1hHNHZMeUFnSUMwZ0lISmxiR1ZoYzJWa0lHRnpJSEIxWW14cFl5QmtiMjFoYVc0Z1lua2dZWFYwYUc5eUlDaGNJbGxoWm1ac1pWd2lLU0F0SUhObFpTQmpiMjF0Wlc1MGN5QnZiaUJuYVhOMFhHNWNibVoxYm1OMGFXOXVJSEJoY25ObFZWSkpLSFZ5YkNrZ2UxeHVJQ0FnSUhaaGNpQnRJRDBnVTNSeWFXNW5LSFZ5YkNrdWNtVndiR0ZqWlNndlhseGNjeXQ4WEZ4ekt5UXZaeXdnSnljcExtMWhkR05vS0M5ZUtGdGVPbHhjTHo4alhTczZLVDhvWEZ3dlhGd3ZLRDg2VzE0NlFGMHFLRDg2T2x0ZU9rQmRLaWsvUUNrL0tDaGJYanBjWEM4L0kxMHFLU2cvT2pvb1hGeGtLaWtwUHlrcFB5aGJYajhqWFNvcEtGeGNQMXRlSTEwcUtUOG9JMXRjWEhOY1hGTmRLaWsvTHlrN1hHNGdJQ0FnTHk4Z1lYVjBhRzl5YVhSNUlEMGdKeTh2SnlBcklIVnpaWElnS3lBbk9pY2dLeUJ3WVhOeklDZEFKeUFySUdodmMzUnVZVzFsSUNzZ0p6b25JSEJ2Y25SY2JpQWdJQ0J5WlhSMWNtNGdLRzBnUHlCN1hHNGdJQ0FnSUNBZ0lHaHlaV1k2SUcxYk1GMGdmSHdnSnljc1hHNGdJQ0FnSUNBZ0lIQnliM1J2WTI5c09pQnRXekZkSUh4OElDY25MRnh1SUNBZ0lDQWdJQ0JoZFhSb2IzSnBkSGs2SUcxYk1sMGdmSHdnSnljc1hHNGdJQ0FnSUNBZ0lHaHZjM1E2SUcxYk0xMGdmSHdnSnljc1hHNGdJQ0FnSUNBZ0lHaHZjM1J1WVcxbE9pQnRXelJkSUh4OElDY25MRnh1SUNBZ0lDQWdJQ0J3YjNKME9pQnRXelZkSUh4OElDY25MRnh1SUNBZ0lDQWdJQ0J3WVhSb2JtRnRaVG9nYlZzMlhTQjhmQ0FuSnl4Y2JpQWdJQ0FnSUNBZ2MyVmhjbU5vT2lCdFd6ZGRJSHg4SUNjbkxGeHVJQ0FnSUNBZ0lDQm9ZWE5vT2lCdFd6aGRJSHg4SUNjblhHNGdJQ0FnZlNBNklHNTFiR3dwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ5WlhOdmJIWmxWWEpzS0dKaGMyVXNJR2h5WldZcElIc3ZMeUJTUmtNZ016azRObHh1WEc0Z0lDQWdablZ1WTNScGIyNGdjbVZ0YjNabFJHOTBVMlZuYldWdWRITW9hVzV3ZFhRcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUc5MWRIQjFkQ0E5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQnBibkIxZEM1eVpYQnNZV05sS0M5ZUtGeGNMbHhjTGo4b1hGd3ZmQ1FwS1NzdkxDQW5KeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDNXlaWEJzWVdObEtDOWNYQzhvWEZ3dUtGeGNMM3drS1NrckwyY3NJQ2N2SnlsY2JpQWdJQ0FnSUNBZ0lDQWdJQzV5WlhCc1lXTmxLQzljWEM5Y1hDNWNYQzRrTHl3Z0p5OHVMaThuS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdMbkpsY0d4aFkyVW9MMXhjTHo5YlhseGNMMTBxTDJjc0lHWjFibU4wYVc5dUlDaHdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIQWdQVDA5SUNjdkxpNG5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOTFkSEIxZEM1d2IzQW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmRYUndkWFF1Y0hWemFDaHdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzkxZEhCMWRDNXFiMmx1S0NjbktTNXlaWEJzWVdObEtDOWVYRnd2THl3Z2FXNXdkWFF1WTJoaGNrRjBLREFwSUQwOVBTQW5MeWNnUHlBbkx5Y2dPaUFuSnlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYUhKbFppQTlJSEJoY25ObFZWSkpLR2h5WldZZ2ZId2dKeWNwTzF4dUlDQWdJR0poYzJVZ1BTQndZWEp6WlZWU1NTaGlZWE5sSUh4OElDY25LVHRjYmx4dUlDQWdJSEpsZEhWeWJpQWhhSEpsWmlCOGZDQWhZbUZ6WlNBL0lHNTFiR3dnT2lBb2FISmxaaTV3Y205MGIyTnZiQ0I4ZkNCaVlYTmxMbkJ5YjNSdlkyOXNLU0FyWEc0Z0lDQWdLR2h5WldZdWNISnZkRzlqYjJ3Z2ZId2dhSEpsWmk1aGRYUm9iM0pwZEhrZ1B5Qm9jbVZtTG1GMWRHaHZjbWwwZVNBNklHSmhjMlV1WVhWMGFHOXlhWFI1S1NBclhHNGdJQ0FnY21WdGIzWmxSRzkwVTJWbmJXVnVkSE1vYUhKbFppNXdjbTkwYjJOdmJDQjhmQ0JvY21WbUxtRjFkR2h2Y21sMGVTQjhmQ0JvY21WbUxuQmhkR2h1WVcxbExtTm9ZWEpCZENnd0tTQTlQVDBnSnk4bklEOGdhSEpsWmk1d1lYUm9ibUZ0WlNBNklDaG9jbVZtTG5CaGRHaHVZVzFsSUQ4Z0tDaGlZWE5sTG1GMWRHaHZjbWwwZVNBbUppQWhZbUZ6WlM1d1lYUm9ibUZ0WlNBL0lDY3ZKeUE2SUNjbktTQXJJR0poYzJVdWNHRjBhRzVoYldVdWMyeHBZMlVvTUN3Z1ltRnpaUzV3WVhSb2JtRnRaUzVzWVhOMFNXNWtaWGhQWmlnbkx5Y3BJQ3NnTVNrZ0t5Qm9jbVZtTG5CaGRHaHVZVzFsS1NBNklHSmhjMlV1Y0dGMGFHNWhiV1VwS1NBclhHNGdJQ0FnS0doeVpXWXVjSEp2ZEc5amIyd2dmSHdnYUhKbFppNWhkWFJvYjNKcGRIa2dmSHdnYUhKbFppNXdZWFJvYm1GdFpTQS9JR2h5WldZdWMyVmhjbU5vSURvZ0tHaHlaV1l1YzJWaGNtTm9JSHg4SUdKaGMyVXVjMlZoY21Ob0tTa2dLMXh1SUNBZ0lHaHlaV1l1YUdGemFEdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1oyVjBSRzlqZFcxbGJuUlZjbWtvZFhKcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhWeWFTNXpjR3hwZENnbkl5Y3BXekJkTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ1YjNKdFUyTm9aVzFoS0hOamFHVnRZU3dnWW1GelpWVnlhU2tnZTF4dUlDQWdJR2xtSUNoelkyaGxiV0VnSmlZZ2RIbHdaVzltSUhOamFHVnRZU0E5UFQwZ1hDSnZZbXBsWTNSY0lpa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1ltRnpaVlZ5YVNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmlZWE5sVlhKcElEMGdjMk5vWlcxaExtbGtPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hSNWNHVnZaaUJ6WTJobGJXRXVhV1FnUFQwOUlGd2ljM1J5YVc1blhDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHSmhjMlZWY21rZ1BTQnlaWE52YkhabFZYSnNLR0poYzJWVmNta3NJSE5qYUdWdFlTNXBaQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpZMmhsYldFdWFXUWdQU0JpWVhObFZYSnBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaEJjbkpoZVM1cGMwRnljbUY1S0hOamFHVnRZU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYzJOb1pXMWhMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtOXliVk5qYUdWdFlTaHpZMmhsYldGYmFWMHNJR0poYzJWVmNta3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCelkyaGxiV0ZiSnlSeVpXWW5YU0E5UFQwZ1hDSnpkSEpwYm1kY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5qYUdWdFlWc25KSEpsWmlkZElEMGdjbVZ6YjJ4MlpWVnliQ2hpWVhObFZYSnBMQ0J6WTJobGJXRmJKeVJ5WldZblhTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJyWlhrZ2FXNGdjMk5vWlcxaEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0d0bGVTQWhQVDBnWENKbGJuVnRYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibTl5YlZOamFHVnRZU2h6WTJobGJXRmJhMlY1WFN3Z1ltRnpaVlZ5YVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJrWldaaGRXeDBSWEp5YjNKU1pYQnZjblJsY2loc1lXNW5kV0ZuWlNrZ2UxeHVJQ0FnSUd4aGJtZDFZV2RsSUQwZ2JHRnVaM1ZoWjJVZ2ZId2dKMlZ1Snp0Y2JseHVJQ0FnSUhaaGNpQmxjbkp2Y2sxbGMzTmhaMlZ6SUQwZ2JHRnVaM1ZoWjJWelcyeGhibWQxWVdkbFhUdGNibHh1SUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlBb1pYSnliM0lwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJRzFsYzNOaFoyVlVaVzF3YkdGMFpTQTlJR1Z5Y205eVRXVnpjMkZuWlhOYlpYSnliM0l1WTI5a1pWMGdmSHdnUlhKeWIzSk5aWE56WVdkbGMwUmxabUYxYkhSYlpYSnliM0l1WTI5a1pWMDdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYldWemMyRm5aVlJsYlhCc1lYUmxJQ0U5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRndpVlc1cmJtOTNiaUJsY25KdmNpQmpiMlJsSUZ3aUlDc2daWEp5YjNJdVkyOWtaU0FySUZ3aU9pQmNJaUFySUVwVFQwNHVjM1J5YVc1bmFXWjVLR1Z5Y205eUxtMWxjM05oWjJWUVlYSmhiWE1wTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIWmhjaUJ0WlhOellXZGxVR0Z5WVcxeklEMGdaWEp5YjNJdWNHRnlZVzF6TzF4dUlDQWdJQ0FnSUNBdkx5QkJaR0Z3ZEdWa0lHWnliMjBnUTNKdlkydG1iM0prSjNNZ2MzVndjR3hoYm5Rb0tWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JXVnpjMkZuWlZSbGJYQnNZWFJsTG5KbGNHeGhZMlVvTDF4Y2V5aGJYbnQ5WFNvcFhGeDlMMmNzSUdaMWJtTjBhVzl1SUNoM2FHOXNaU3dnZG1GeVRtRnRaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhOMVlsWmhiSFZsSUQwZ2JXVnpjMkZuWlZCaGNtRnRjMXQyWVhKT1lXMWxYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGVYQmxiMllnYzNWaVZtRnNkV1VnUFQwOUlDZHpkSEpwYm1jbklIeDhJSFI1Y0dWdlppQnpkV0pXWVd4MVpTQTlQVDBnSjI1MWJXSmxjaWNnUHlCemRXSldZV3gxWlNBNklIZG9iMnhsTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNCOU8xeHVmVnh1WEc1MllYSWdSWEp5YjNKRGIyUmxjeUE5SUh0Y2JpQWdJQ0JKVGxaQlRFbEVYMVJaVUVVNklEQXNYRzRnSUNBZ1JVNVZUVjlOU1ZOTlFWUkRTRG9nTVN4Y2JpQWdJQ0JCVGxsZlQwWmZUVWxUVTBsT1J6b2dNVEFzWEc0Z0lDQWdUMDVGWDA5R1gwMUpVMU5KVGtjNklERXhMRnh1SUNBZ0lFOU9SVjlQUmw5TlZVeFVTVkJNUlRvZ01USXNYRzRnSUNBZ1RrOVVYMUJCVTFORlJEb2dNVE1zWEc0Z0lDQWdMeThnVG5WdFpYSnBZeUJsY25KdmNuTmNiaUFnSUNCT1ZVMUNSVkpmVFZWTVZFbFFURVZmVDBZNklERXdNQ3hjYmlBZ0lDQk9WVTFDUlZKZlRVbE9TVTFWVFRvZ01UQXhMRnh1SUNBZ0lFNVZUVUpGVWw5TlNVNUpUVlZOWDBWWVEweFZVMGxXUlRvZ01UQXlMRnh1SUNBZ0lFNVZUVUpGVWw5TlFWaEpUVlZOT2lBeE1ETXNYRzRnSUNBZ1RsVk5Ra1ZTWDAxQldFbE5WVTFmUlZoRFRGVlRTVlpGT2lBeE1EUXNYRzRnSUNBZ1RsVk5Ra1ZTWDA1UFZGOUJYMDVWVFVKRlVqb2dNVEExTEZ4dUlDQWdJQzh2SUZOMGNtbHVaeUJsY25KdmNuTmNiaUFnSUNCVFZGSkpUa2RmVEVWT1IxUklYMU5JVDFKVU9pQXlNREFzWEc0Z0lDQWdVMVJTU1U1SFgweEZUa2RVU0Y5TVQwNUhPaUF5TURFc1hHNGdJQ0FnVTFSU1NVNUhYMUJCVkZSRlVrNDZJREl3TWl4Y2JpQWdJQ0F2THlCUFltcGxZM1FnWlhKeWIzSnpYRzRnSUNBZ1QwSktSVU5VWDFCU1QxQkZVbFJKUlZOZlRVbE9TVTFWVFRvZ016QXdMRnh1SUNBZ0lFOUNTa1ZEVkY5UVVrOVFSVkpVU1VWVFgwMUJXRWxOVlUwNklETXdNU3hjYmlBZ0lDQlBRa3BGUTFSZlVrVlJWVWxTUlVRNklETXdNaXhjYmlBZ0lDQlBRa3BGUTFSZlFVUkVTVlJKVDA1QlRGOVFVazlRUlZKVVNVVlRPaUF6TURNc1hHNGdJQ0FnVDBKS1JVTlVYMFJGVUVWT1JFVk9RMWxmUzBWWk9pQXpNRFFzWEc0Z0lDQWdMeThnUVhKeVlYa2daWEp5YjNKelhHNGdJQ0FnUVZKU1FWbGZURVZPUjFSSVgxTklUMUpVT2lBME1EQXNYRzRnSUNBZ1FWSlNRVmxmVEVWT1IxUklYMHhQVGtjNklEUXdNU3hjYmlBZ0lDQkJVbEpCV1Y5VlRrbFJWVVU2SURRd01peGNiaUFnSUNCQlVsSkJXVjlCUkVSSlZFbFBUa0ZNWDBsVVJVMVRPaUEwTURNc1hHNGdJQ0FnTHk4Z1EzVnpkRzl0TDNWelpYSXRaR1ZtYVc1bFpDQmxjbkp2Y25OY2JpQWdJQ0JHVDFKTlFWUmZRMVZUVkU5Tk9pQTFNREFzWEc0Z0lDQWdTMFZaVjA5U1JGOURWVk5VVDAwNklEVXdNU3hjYmlBZ0lDQXZMeUJUWTJobGJXRWdjM1J5ZFdOMGRYSmxYRzRnSUNBZ1EwbFNRMVZNUVZKZlVrVkdSVkpGVGtORk9pQTJNREFzWEc0Z0lDQWdMeThnVG05dUxYTjBZVzVrWVhKa0lIWmhiR2xrWVhScGIyNGdiM0IwYVc5dWMxeHVJQ0FnSUZWT1MwNVBWMDVmVUZKUFVFVlNWRms2SURFd01EQmNibjA3WEc1MllYSWdSWEp5YjNKRGIyUmxURzl2YTNWd0lEMGdlMzA3WEc1bWIzSWdLSFpoY2lCclpYa2dhVzRnUlhKeWIzSkRiMlJsY3lrZ2UxeHVJQ0FnSUVWeWNtOXlRMjlrWlV4dmIydDFjRnRGY25KdmNrTnZaR1Z6VzJ0bGVWMWRJRDBnYTJWNU8xeHVmVnh1ZG1GeUlFVnljbTl5VFdWemMyRm5aWE5FWldaaGRXeDBJRDBnZTF4dUlDQWdJRWxPVmtGTVNVUmZWRmxRUlRvZ1hDSkpiblpoYkdsa0lIUjVjR1U2SUh0MGVYQmxmU0FvWlhod1pXTjBaV1FnZTJWNGNHVmpkR1ZrZlNsY0lpeGNiaUFnSUNCRlRsVk5YMDFKVTAxQlZFTklPaUJjSWs1dklHVnVkVzBnYldGMFkyZ2dabTl5T2lCN2RtRnNkV1Y5WENJc1hHNGdJQ0FnUVU1WlgwOUdYMDFKVTFOSlRrYzZJRndpUkdGMFlTQmtiMlZ6SUc1dmRDQnRZWFJqYUNCaGJua2djMk5vWlcxaGN5Qm1jbTl0SUZ4Y1hDSmhibmxQWmx4Y1hDSmNJaXhjYmlBZ0lDQlBUa1ZmVDBaZlRVbFRVMGxPUnpvZ1hDSkVZWFJoSUdSdlpYTWdibTkwSUcxaGRHTm9JR0Z1ZVNCelkyaGxiV0Z6SUdaeWIyMGdYRnhjSW05dVpVOW1YRnhjSWx3aUxGeHVJQ0FnSUU5T1JWOVBSbDlOVlV4VVNWQk1SVG9nWENKRVlYUmhJR2x6SUhaaGJHbGtJR0ZuWVdsdWMzUWdiVzl5WlNCMGFHRnVJRzl1WlNCelkyaGxiV0VnWm5KdmJTQmNYRndpYjI1bFQyWmNYRndpT2lCcGJtUnBZMlZ6SUh0cGJtUmxlREY5SUdGdVpDQjdhVzVrWlhneWZWd2lMRnh1SUNBZ0lFNVBWRjlRUVZOVFJVUTZJRndpUkdGMFlTQnRZWFJqYUdWeklITmphR1Z0WVNCbWNtOXRJRnhjWENKdWIzUmNYRndpWENJc1hHNGdJQ0FnTHk4Z1RuVnRaWEpwWXlCbGNuSnZjbk5jYmlBZ0lDQk9WVTFDUlZKZlRWVk1WRWxRVEVWZlQwWTZJRndpVm1Gc2RXVWdlM1poYkhWbGZTQnBjeUJ1YjNRZ1lTQnRkV3gwYVhCc1pTQnZaaUI3YlhWc2RHbHdiR1ZQWm4xY0lpeGNiaUFnSUNCT1ZVMUNSVkpmVFVsT1NVMVZUVG9nWENKV1lXeDFaU0I3ZG1Gc2RXVjlJR2x6SUd4bGMzTWdkR2hoYmlCdGFXNXBiWFZ0SUh0dGFXNXBiWFZ0ZlZ3aUxGeHVJQ0FnSUU1VlRVSkZVbDlOU1U1SlRWVk5YMFZZUTB4VlUwbFdSVG9nWENKV1lXeDFaU0I3ZG1Gc2RXVjlJR2x6SUdWeGRXRnNJSFJ2SUdWNFkyeDFjMmwyWlNCdGFXNXBiWFZ0SUh0dGFXNXBiWFZ0ZlZ3aUxGeHVJQ0FnSUU1VlRVSkZVbDlOUVZoSlRWVk5PaUJjSWxaaGJIVmxJSHQyWVd4MVpYMGdhWE1nWjNKbFlYUmxjaUIwYUdGdUlHMWhlR2x0ZFcwZ2UyMWhlR2x0ZFcxOVhDSXNYRzRnSUNBZ1RsVk5Ra1ZTWDAxQldFbE5WVTFmUlZoRFRGVlRTVlpGT2lCY0lsWmhiSFZsSUh0MllXeDFaWDBnYVhNZ1pYRjFZV3dnZEc4Z1pYaGpiSFZ6YVhabElHMWhlR2x0ZFcwZ2UyMWhlR2x0ZFcxOVhDSXNYRzRnSUNBZ1RsVk5Ra1ZTWDA1UFZGOUJYMDVWVFVKRlVqb2dYQ0pXWVd4MVpTQjdkbUZzZFdWOUlHbHpJRzV2ZENCaElIWmhiR2xrSUc1MWJXSmxjbHdpTEZ4dUlDQWdJQzh2SUZOMGNtbHVaeUJsY25KdmNuTmNiaUFnSUNCVFZGSkpUa2RmVEVWT1IxUklYMU5JVDFKVU9pQmNJbE4wY21sdVp5QnBjeUIwYjI4Z2MyaHZjblFnS0h0c1pXNW5kR2g5SUdOb1lYSnpLU3dnYldsdWFXMTFiU0I3YldsdWFXMTFiWDFjSWl4Y2JpQWdJQ0JUVkZKSlRrZGZURVZPUjFSSVgweFBUa2M2SUZ3aVUzUnlhVzVuSUdseklIUnZieUJzYjI1bklDaDdiR1Z1WjNSb2ZTQmphR0Z5Y3lrc0lHMWhlR2x0ZFcwZ2UyMWhlR2x0ZFcxOVhDSXNYRzRnSUNBZ1UxUlNTVTVIWDFCQlZGUkZVazQ2SUZ3aVUzUnlhVzVuSUdSdlpYTWdibTkwSUcxaGRHTm9JSEJoZEhSbGNtNDZJSHR3WVhSMFpYSnVmVndpTEZ4dUlDQWdJQzh2SUU5aWFtVmpkQ0JsY25KdmNuTmNiaUFnSUNCUFFrcEZRMVJmVUZKUFVFVlNWRWxGVTE5TlNVNUpUVlZOT2lCY0lsUnZieUJtWlhjZ2NISnZjR1Z5ZEdsbGN5QmtaV1pwYm1Wa0lDaDdjSEp2Y0dWeWRIbERiM1Z1ZEgwcExDQnRhVzVwYlhWdElIdHRhVzVwYlhWdGZWd2lMRnh1SUNBZ0lFOUNTa1ZEVkY5UVVrOVFSVkpVU1VWVFgwMUJXRWxOVlUwNklGd2lWRzl2SUcxaGJua2djSEp2Y0dWeWRHbGxjeUJrWldacGJtVmtJQ2g3Y0hKdmNHVnlkSGxEYjNWdWRIMHBMQ0J0WVhocGJYVnRJSHR0WVhocGJYVnRmVndpTEZ4dUlDQWdJRTlDU2tWRFZGOVNSVkZWU1ZKRlJEb2dYQ0pOYVhOemFXNW5JSEpsY1hWcGNtVmtJSEJ5YjNCbGNuUjVPaUI3YTJWNWZWd2lMRnh1SUNBZ0lFOUNTa1ZEVkY5QlJFUkpWRWxQVGtGTVgxQlNUMUJGVWxSSlJWTTZJRndpUVdSa2FYUnBiMjVoYkNCd2NtOXdaWEowYVdWeklHNXZkQ0JoYkd4dmQyVmtYQ0lzWEc0Z0lDQWdUMEpLUlVOVVgwUkZVRVZPUkVWT1ExbGZTMFZaT2lCY0lrUmxjR1Z1WkdWdVkza2dabUZwYkdWa0lDMGdhMlY1SUcxMWMzUWdaWGhwYzNRNklIdHRhWE56YVc1bmZTQW9aSFZsSUhSdklHdGxlVG9nZTJ0bGVYMHBYQ0lzWEc0Z0lDQWdMeThnUVhKeVlYa2daWEp5YjNKelhHNGdJQ0FnUVZKU1FWbGZURVZPUjFSSVgxTklUMUpVT2lCY0lrRnljbUY1SUdseklIUnZieUJ6YUc5eWRDQW9lMnhsYm1kMGFIMHBMQ0J0YVc1cGJYVnRJSHR0YVc1cGJYVnRmVndpTEZ4dUlDQWdJRUZTVWtGWlgweEZUa2RVU0Y5TVQwNUhPaUJjSWtGeWNtRjVJR2x6SUhSdmJ5QnNiMjVuSUNoN2JHVnVaM1JvZlNrc0lHMWhlR2x0ZFcwZ2UyMWhlR2x0ZFcxOVhDSXNYRzRnSUNBZ1FWSlNRVmxmVlU1SlVWVkZPaUJjSWtGeWNtRjVJR2wwWlcxeklHRnlaU0J1YjNRZ2RXNXBjWFZsSUNocGJtUnBZMlZ6SUh0dFlYUmphREY5SUdGdVpDQjdiV0YwWTJneWZTbGNJaXhjYmlBZ0lDQkJVbEpCV1Y5QlJFUkpWRWxQVGtGTVgwbFVSVTFUT2lCY0lrRmtaR2wwYVc5dVlXd2dhWFJsYlhNZ2JtOTBJR0ZzYkc5M1pXUmNJaXhjYmlBZ0lDQXZMeUJHYjNKdFlYUWdaWEp5YjNKelhHNGdJQ0FnUms5U1RVRlVYME5WVTFSUFRUb2dYQ0pHYjNKdFlYUWdkbUZzYVdSaGRHbHZiaUJtWVdsc1pXUWdLSHR0WlhOellXZGxmU2xjSWl4Y2JpQWdJQ0JMUlZsWFQxSkVYME5WVTFSUFRUb2dYQ0pMWlhsM2IzSmtJR1poYVd4bFpEb2dlMnRsZVgwZ0tIdHRaWE56WVdkbGZTbGNJaXhjYmlBZ0lDQXZMeUJUWTJobGJXRWdjM1J5ZFdOMGRYSmxYRzRnSUNBZ1EwbFNRMVZNUVZKZlVrVkdSVkpGVGtORk9pQmNJa05wY21OMWJHRnlJQ1J5Wldaek9pQjdkWEpzYzMxY0lpeGNiaUFnSUNBdkx5Qk9iMjR0YzNSaGJtUmhjbVFnZG1Gc2FXUmhkR2x2YmlCdmNIUnBiMjV6WEc0Z0lDQWdWVTVMVGs5WFRsOVFVazlRUlZKVVdUb2dYQ0pWYm10dWIzZHVJSEJ5YjNCbGNuUjVJQ2h1YjNRZ2FXNGdjMk5vWlcxaEtWd2lYRzU5TzF4dVhHNW1kVzVqZEdsdmJpQldZV3hwWkdGMGFXOXVSWEp5YjNJb1kyOWtaU3dnY0dGeVlXMXpMQ0JrWVhSaFVHRjBhQ3dnYzJOb1pXMWhVR0YwYUN3Z2MzVmlSWEp5YjNKektTQjdYRzRnSUNBZ1JYSnliM0l1WTJGc2JDaDBhR2x6S1R0Y2JpQWdJQ0JwWmlBb1kyOWtaU0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJazV2SUdWeWNtOXlJR052WkdVZ2MzVndjR3hwWldRNklGd2lJQ3NnYzJOb1pXMWhVR0YwYUNrN1hHNGdJQ0FnZlZ4dUlDQWdJSFJvYVhNdWJXVnpjMkZuWlNBOUlDY25PMXh1SUNBZ0lIUm9hWE11Y0dGeVlXMXpJRDBnY0dGeVlXMXpPMXh1SUNBZ0lIUm9hWE11WTI5a1pTQTlJR052WkdVN1hHNGdJQ0FnZEdocGN5NWtZWFJoVUdGMGFDQTlJR1JoZEdGUVlYUm9JSHg4SUZ3aVhDSTdYRzRnSUNBZ2RHaHBjeTV6WTJobGJXRlFZWFJvSUQwZ2MyTm9aVzFoVUdGMGFDQjhmQ0JjSWx3aU8xeHVJQ0FnSUhSb2FYTXVjM1ZpUlhKeWIzSnpJRDBnYzNWaVJYSnliM0p6SUh4OElHNTFiR3c3WEc1Y2JpQWdJQ0IyWVhJZ1pYSnlJRDBnYm1WM0lFVnljbTl5S0hSb2FYTXViV1Z6YzJGblpTazdYRzRnSUNBZ2RHaHBjeTV6ZEdGamF5QTlJR1Z5Y2k1emRHRmpheUI4ZkNCbGNuSXVjM1JoWTJ0MGNtRmpaVHRjYmlBZ0lDQnBaaUFvSVhSb2FYTXVjM1JoWTJzcElIdGNiaUFnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHVnljanRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCallYUmphQ0FvWlhKeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk4wWVdOcklEMGdaWEp5TG5OMFlXTnJJSHg4SUdWeWNpNXpkR0ZqYTNSeVlXTmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1ZlZ4dVhHNVdZV3hwWkdGMGFXOXVSWEp5YjNJdWNISnZkRzkwZVhCbElEMGdUMkpxWldOMExtTnlaV0YwWlNoRmNuSnZjaTV3Y205MGIzUjVjR1VwTzF4dVZtRnNhV1JoZEdsdmJrVnljbTl5TG5CeWIzUnZkSGx3WlM1amIyNXpkSEoxWTNSdmNpQTlJRlpoYkdsa1lYUnBiMjVGY25KdmNqdGNibFpoYkdsa1lYUnBiMjVGY25KdmNpNXdjbTkwYjNSNWNHVXVibUZ0WlNBOUlDZFdZV3hwWkdGMGFXOXVSWEp5YjNJbk8xeHVYRzVXWVd4cFpHRjBhVzl1UlhKeWIzSXVjSEp2ZEc5MGVYQmxMbkJ5WldacGVGZHBkR2dnUFNCbWRXNWpkR2x2YmlBb1pHRjBZVkJ5WldacGVDd2djMk5vWlcxaFVISmxabWw0S1NCN1hHNGdJQ0FnYVdZZ0tHUmhkR0ZRY21WbWFYZ2dJVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnWkdGMFlWQnlaV1pwZUNBOUlHUmhkR0ZRY21WbWFYZ3VjbVZ3YkdGalpTZ3ZmaTluTENCY0luNHdYQ0lwTG5KbGNHeGhZMlVvTDF4Y0x5OW5MQ0JjSW40eFhDSXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtUmhkR0ZRWVhSb0lEMGdYQ0l2WENJZ0t5QmtZWFJoVUhKbFptbDRJQ3NnZEdocGN5NWtZWFJoVUdGMGFEdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tITmphR1Z0WVZCeVpXWnBlQ0FoUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNCelkyaGxiV0ZRY21WbWFYZ2dQU0J6WTJobGJXRlFjbVZtYVhndWNtVndiR0ZqWlNndmZpOW5MQ0JjSW40d1hDSXBMbkpsY0d4aFkyVW9MMXhjTHk5bkxDQmNJbjR4WENJcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OamFHVnRZVkJoZEdnZ1BTQmNJaTljSWlBcklITmphR1Z0WVZCeVpXWnBlQ0FySUhSb2FYTXVjMk5vWlcxaFVHRjBhRHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSFJvYVhNdWMzVmlSWEp5YjNKeklDRTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnZEdocGN5NXpkV0pGY25KdmNuTXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMzVmlSWEp5YjNKelcybGRMbkJ5WldacGVGZHBkR2dvWkdGMFlWQnlaV1pwZUN3Z2MyTm9aVzFoVUhKbFptbDRLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2RHaHBjenRjYm4wN1hHNWNibVoxYm1OMGFXOXVJR2x6VkhKMWMzUmxaRlZ5YkNoaVlYTmxWWEpzTENCMFpYTjBWWEpzS1NCN1hHNGdJQ0FnYVdZZ0tIUmxjM1JWY213dWMzVmljM1J5YVc1bktEQXNJR0poYzJWVmNtd3ViR1Z1WjNSb0tTQTlQVDBnWW1GelpWVnliQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdjbVZ0WVdsdVpHVnlJRDBnZEdWemRGVnliQzV6ZFdKemRISnBibWNvWW1GelpWVnliQzVzWlc1bmRHZ3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb0tIUmxjM1JWY213dWJHVnVaM1JvSUQ0Z01DQW1KaUIwWlhOMFZYSnNMbU5vWVhKQmRDaGlZWE5sVlhKc0xteGxibWQwYUNBdElERXBJRDA5UFNCY0lpOWNJaWxjYmlBZ0lDQWdJQ0FnSUNBZ0lIeDhJSEpsYldGcGJtUmxjaTVqYUdGeVFYUW9NQ2tnUFQwOUlGd2lJMXdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQjhmQ0J5WlcxaGFXNWtaWEl1WTJoaGNrRjBLREFwSUQwOVBTQmNJajljSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVmVnh1WEc1MllYSWdiR0Z1WjNWaFoyVnpJRDBnZTMwN1hHNWNibVoxYm1OMGFXOXVJR055WldGMFpVRndhU2hzWVc1bmRXRm5aU2tnZTF4dUlDQWdJSFpoY2lCbmJHOWlZV3hEYjI1MFpYaDBJRDBnYm1WM0lGWmhiR2xrWVhSdmNrTnZiblJsZUhRb0tUdGNiaUFnSUNCMllYSWdZM1Z5Y21WdWRFeGhibWQxWVdkbE8xeHVJQ0FnSUhaaGNpQmpkWE4wYjIxRmNuSnZjbEpsY0c5eWRHVnlPMXh1SUNBZ0lIWmhjaUJoY0drZ1BTQjdYRzRnSUNBZ0lDQWdJSE5sZEVWeWNtOXlVbVZ3YjNKMFpYSTZJR1oxYm1OMGFXOXVJQ2h5WlhCdmNuUmxjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ5WlhCdmNuUmxjaUE5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVzWVc1bmRXRm5aU2h5WlhCdmNuUmxjaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCamRYTjBiMjFGY25KdmNsSmxjRzl5ZEdWeUlEMGdjbVZ3YjNKMFpYSTdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnWVdSa1JtOXliV0YwT2lCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbmJHOWlZV3hEYjI1MFpYaDBMbUZrWkVadmNtMWhkQzVoY0hCc2VTaG5iRzlpWVd4RGIyNTBaWGgwTENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0JzWVc1bmRXRm5aVG9nWm5WdVkzUnBiMjRnS0dOdlpHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doWTI5a1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmpkWEp5Wlc1MFRHRnVaM1ZoWjJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVd4aGJtZDFZV2RsYzF0amIyUmxYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdlpHVWdQU0JqYjJSbExuTndiR2wwS0NjdEp5bGJNRjA3SUM4dklHWmhiR3dnWW1GamF5QjBieUJpWVhObElHeGhibWQxWVdkbFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYkdGdVozVmhaMlZ6VzJOdlpHVmRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTNWeWNtVnVkRXhoYm1kMVlXZGxJRDBnWTI5a1pUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyOWtaVHNnTHk4Z2MyOGdlVzkxSUdOaGJpQjBaV3hzSUdsbUlHWmhiR3d0WW1GamF5Qm9ZWE1nYUdGd2NHVnVaV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnWVdSa1RHRnVaM1ZoWjJVNklHWjFibU4wYVc5dUlDaGpiMlJsTENCdFpYTnpZV2RsVFdGd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdhMlY1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoclpYa2dhVzRnUlhKeWIzSkRiMlJsY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h0WlhOellXZGxUV0Z3VzJ0bGVWMGdKaVlnSVcxbGMzTmhaMlZOWVhCYlJYSnliM0pEYjJSbGMxdHJaWGxkWFNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WlhOellXZGxUV0Z3VzBWeWNtOXlRMjlrWlhOYmEyVjVYVjBnUFNCdFpYTnpZV2RsVFdGd1cydGxlVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEp2YjNSRGIyUmxJRDBnWTI5a1pTNXpjR3hwZENnbkxTY3BXekJkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGc1lXNW5kV0ZuWlhOYmNtOXZkRU52WkdWZEtTQjdJQzh2SUhWelpTQm1iM0lnWW1GelpTQnNZVzVuZFdGblpTQnBaaUJ1YjNRZ2VXVjBJR1JsWm1sdVpXUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNZVzVuZFdGblpYTmJZMjlrWlYwZ1BTQnRaWE56WVdkbFRXRndPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hoYm1kMVlXZGxjMXR5YjI5MFEyOWtaVjBnUFNCdFpYTnpZV2RsVFdGd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWVc1bmRXRm5aWE5iWTI5a1pWMGdQU0JQWW1wbFkzUXVZM0psWVhSbEtHeGhibWQxWVdkbGMxdHliMjkwUTI5a1pWMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2EyVjVJR2x1SUcxbGMzTmhaMlZOWVhBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCc1lXNW5kV0ZuWlhOYmNtOXZkRU52WkdWZFcydGxlVjBnUFQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWVc1bmRXRm5aWE5iY205dmRFTnZaR1ZkVzJ0bGVWMGdQU0J0WlhOellXZGxUV0Z3VzJ0bGVWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR0Z1WjNWaFoyVnpXMk52WkdWZFcydGxlVjBnUFNCdFpYTnpZV2RsVFdGd1cydGxlVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUdaeVpYTm9RWEJwT2lCbWRXNWpkR2x2YmlBb2JHRnVaM1ZoWjJVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnlaWE4xYkhRZ1BTQmpjbVZoZEdWQmNHa29LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hzWVc1bmRXRm5aU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQzVzWVc1bmRXRm5aU2hzWVc1bmRXRm5aU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY21WemRXeDBPMXh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCMllXeHBaR0YwWlRvZ1puVnVZM1JwYjI0Z0tHUmhkR0VzSUhOamFHVnRZU3dnWTJobFkydFNaV04xY25OcGRtVXNJR0poYmxWdWEyNXZkMjVRY205d1pYSjBhV1Z6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1pHVm1JRDBnWkdWbVlYVnNkRVZ5Y205eVVtVndiM0owWlhJb1kzVnljbVZ1ZEV4aGJtZDFZV2RsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCbGNuSnZjbEpsY0c5eWRHVnlJRDBnWTNWemRHOXRSWEp5YjNKU1pYQnZjblJsY2lBL0lHWjFibU4wYVc5dUlDaGxjbkp2Y2l3Z1pHRjBZU3dnYzJOb1pXMWhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR04xYzNSdmJVVnljbTl5VW1Wd2IzSjBaWElvWlhKeWIzSXNJR1JoZEdFc0lITmphR1Z0WVNrZ2ZId2daR1ZtS0dWeWNtOXlMQ0JrWVhSaExDQnpZMmhsYldFcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNBNklHUmxaanRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJqYjI1MFpYaDBJRDBnYm1WM0lGWmhiR2xrWVhSdmNrTnZiblJsZUhRb1oyeHZZbUZzUTI5dWRHVjRkQ3dnWm1Gc2MyVXNJR1Z5Y205eVVtVndiM0owWlhJc0lHTm9aV05yVW1WamRYSnphWFpsTENCaVlXNVZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlITmphR1Z0WVNBOVBUMGdYQ0p6ZEhKcGJtZGNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOamFHVnRZU0E5SUh0Y0lpUnlaV1pjSWpvZ2MyTm9aVzFoZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJsZUhRdVlXUmtVMk5vWlcxaEtGd2lYQ0lzSUhOamFHVnRZU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWlhKeWIzSWdQU0JqYjI1MFpYaDBMblpoYkdsa1lYUmxRV3hzS0dSaGRHRXNJSE5qYUdWdFlTd2diblZzYkN3Z2JuVnNiQ3dnWENKY0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JV1Z5Y205eUlDWW1JR0poYmxWdWEyNXZkMjVRY205d1pYSjBhV1Z6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pYSnliM0lnUFNCamIyNTBaWGgwTG1KaGJsVnVhMjV2ZDI1UWNtOXdaWEowYVdWektHUmhkR0VzSUhOamFHVnRZU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVZ5Y205eUlEMGdaWEp5YjNJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtMXBjM05wYm1jZ1BTQmpiMjUwWlhoMExtMXBjM05wYm1jN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuWmhiR2xrSUQwZ0tHVnljbTl5SUQwOVBTQnVkV3hzS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5aaGJHbGtPMXh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCMllXeHBaR0YwWlZKbGMzVnNkRG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlISmxjM1ZzZENBOUlIdDlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUyWVd4cFpHRjBaUzVoY0hCc2VTaHlaWE4xYkhRc0lHRnlaM1Z0Wlc1MGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY21WemRXeDBPMXh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCMllXeHBaR0YwWlUxMWJIUnBjR3hsT2lCbWRXNWpkR2x2YmlBb1pHRjBZU3dnYzJOb1pXMWhMQ0JqYUdWamExSmxZM1Z5YzJsMlpTd2dZbUZ1Vlc1cmJtOTNibEJ5YjNCbGNuUnBaWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCa1pXWWdQU0JrWldaaGRXeDBSWEp5YjNKU1pYQnZjblJsY2loamRYSnlaVzUwVEdGdVozVmhaMlVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdWeWNtOXlVbVZ3YjNKMFpYSWdQU0JqZFhOMGIyMUZjbkp2Y2xKbGNHOXlkR1Z5SUQ4Z1puVnVZM1JwYjI0Z0tHVnljbTl5TENCa1lYUmhMQ0J6WTJobGJXRXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZM1Z6ZEc5dFJYSnliM0pTWlhCdmNuUmxjaWhsY25KdmNpd2daR0YwWVN3Z2MyTm9aVzFoS1NCOGZDQmtaV1lvWlhKeWIzSXNJR1JoZEdFc0lITmphR1Z0WVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SURvZ1pHVm1PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR052Ym5SbGVIUWdQU0J1WlhjZ1ZtRnNhV1JoZEc5eVEyOXVkR1Y0ZENobmJHOWlZV3hEYjI1MFpYaDBMQ0IwY25WbExDQmxjbkp2Y2xKbGNHOXlkR1Z5TENCamFHVmphMUpsWTNWeWMybDJaU3dnWW1GdVZXNXJibTkzYmxCeWIzQmxjblJwWlhNcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCelkyaGxiV0VnUFQwOUlGd2ljM1J5YVc1blhDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WTJobGJXRWdQU0I3WENJa2NtVm1YQ0k2SUhOamFHVnRZWDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNTBaWGgwTG1Ga1pGTmphR1Z0WVNoY0lsd2lMQ0J6WTJobGJXRXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR1Y0ZEM1MllXeHBaR0YwWlVGc2JDaGtZWFJoTENCelkyaGxiV0VzSUc1MWJHd3NJRzUxYkd3c0lGd2lYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dKaGJsVnVhMjV2ZDI1UWNtOXdaWEowYVdWektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdWNGRDNWlZVzVWYm10dWIzZHVVSEp2Y0dWeWRHbGxjeWhrWVhSaExDQnpZMmhsYldFcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhKbGMzVnNkQ0E5SUh0OU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBMbVZ5Y205eWN5QTlJR052Ym5SbGVIUXVaWEp5YjNKek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBMbTFwYzNOcGJtY2dQU0JqYjI1MFpYaDBMbTFwYzNOcGJtYzdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFF1ZG1Gc2FXUWdQU0FvY21WemRXeDBMbVZ5Y205eWN5NXNaVzVuZEdnZ1BUMDlJREFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdZV1JrVTJOb1pXMWhPaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaMnh2WW1Gc1EyOXVkR1Y0ZEM1aFpHUlRZMmhsYldFdVlYQndiSGtvWjJ4dlltRnNRMjl1ZEdWNGRDd2dZWEpuZFcxbGJuUnpLVHRjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ1oyVjBVMk5vWlcxaE9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1oyeHZZbUZzUTI5dWRHVjRkQzVuWlhSVFkyaGxiV0V1WVhCd2JIa29aMnh2WW1Gc1EyOXVkR1Y0ZEN3Z1lYSm5kVzFsYm5SektUdGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnWjJWMFUyTm9aVzFoVFdGd09pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1oyeHZZbUZzUTI5dWRHVjRkQzVuWlhSVFkyaGxiV0ZOWVhBdVlYQndiSGtvWjJ4dlltRnNRMjl1ZEdWNGRDd2dZWEpuZFcxbGJuUnpLVHRjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ1oyVjBVMk5vWlcxaFZYSnBjem9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR2RzYjJKaGJFTnZiblJsZUhRdVoyVjBVMk5vWlcxaFZYSnBjeTVoY0hCc2VTaG5iRzlpWVd4RGIyNTBaWGgwTENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0JuWlhSTmFYTnphVzVuVlhKcGN6b2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHZHNiMkpoYkVOdmJuUmxlSFF1WjJWMFRXbHpjMmx1WjFWeWFYTXVZWEJ3Ykhrb1oyeHZZbUZzUTI5dWRHVjRkQ3dnWVhKbmRXMWxiblJ6S1R0Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdaSEp2Y0ZOamFHVnRZWE02SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdkc2IySmhiRU52Ym5SbGVIUXVaSEp2Y0ZOamFHVnRZWE11WVhCd2JIa29aMnh2WW1Gc1EyOXVkR1Y0ZEN3Z1lYSm5kVzFsYm5SektUdGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnWkdWbWFXNWxTMlY1ZDI5eVpEb2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaMnh2WW1Gc1EyOXVkR1Y0ZEM1a1pXWnBibVZMWlhsM2IzSmtMbUZ3Y0d4NUtHZHNiMkpoYkVOdmJuUmxlSFFzSUdGeVozVnRaVzUwY3lrN1hHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJR1JsWm1sdVpVVnljbTl5T2lCbWRXNWpkR2x2YmlBb1kyOWtaVTVoYldVc0lHTnZaR1ZPZFcxaVpYSXNJR1JsWm1GMWJIUk5aWE56WVdkbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHTnZaR1ZPWVcxbElDRTlQU0FuYzNSeWFXNW5KeUI4ZkNBaEwxNWJRUzFhWFNzb1gxdEJMVnBkS3lrcUpDOHVkR1Z6ZENoamIyUmxUbUZ0WlNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0owTnZaR1VnYm1GdFpTQnRkWE4wSUdKbElHRWdjM1J5YVc1bklHbHVJRlZRVUVWU1gwTkJVMFZmVjBsVVNGOVZUa1JGVWxORFQxSkZVeWNwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQmpiMlJsVG5WdFltVnlJQ0U5UFNBbmJuVnRZbVZ5SnlCOGZDQmpiMlJsVG5WdFltVnlJQ1VnTVNBaFBUMGdNQ0I4ZkNCamIyUmxUblZ0WW1WeUlEd2dNVEF3TURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0owTnZaR1VnYm5WdFltVnlJRzExYzNRZ1ltVWdZVzRnYVc1MFpXZGxjaUErSURFd01EQXdKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlFVnljbTl5UTI5a1pYTmJZMjlrWlU1aGJXVmRJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25SWEp5YjNJZ1lXeHlaV0ZrZVNCa1pXWnBibVZrT2lBbklDc2dZMjlrWlU1aGJXVWdLeUFuSUdGeklDY2dLeUJGY25KdmNrTnZaR1Z6VzJOdlpHVk9ZVzFsWFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JRVZ5Y205eVEyOWtaVXh2YjJ0MWNGdGpiMlJsVG5WdFltVnlYU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMFZ5Y205eUlHTnZaR1VnWVd4eVpXRmtlU0IxYzJWa09pQW5JQ3NnUlhKeWIzSkRiMlJsVEc5dmEzVndXMk52WkdWT2RXMWlaWEpkSUNzZ0p5QmhjeUFuSUNzZ1kyOWtaVTUxYldKbGNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JGY25KdmNrTnZaR1Z6VzJOdlpHVk9ZVzFsWFNBOUlHTnZaR1ZPZFcxaVpYSTdYRzRnSUNBZ0lDQWdJQ0FnSUNCRmNuSnZja052WkdWTWIyOXJkWEJiWTI5a1pVNTFiV0psY2wwZ1BTQmpiMlJsVG1GdFpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUVWeWNtOXlUV1Z6YzJGblpYTkVaV1poZFd4MFcyTnZaR1ZPWVcxbFhTQTlJRVZ5Y205eVRXVnpjMkZuWlhORVpXWmhkV3gwVzJOdlpHVk9kVzFpWlhKZElEMGdaR1ZtWVhWc2RFMWxjM05oWjJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJzWVc1blEyOWtaU0JwYmlCc1lXNW5kV0ZuWlhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYkdGdVozVmhaMlVnUFNCc1lXNW5kV0ZuWlhOYmJHRnVaME52WkdWZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hzWVc1bmRXRm5aVnRqYjJSbFRtRnRaVjBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR0Z1WjNWaFoyVmJZMjlrWlU1MWJXSmxjbDBnUFNCc1lXNW5kV0ZuWlZ0amIyUmxUblZ0WW1WeVhTQjhmQ0JzWVc1bmRXRm5aVnRqYjJSbFRtRnRaVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCeVpYTmxkRG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWjJ4dlltRnNRMjl1ZEdWNGRDNXlaWE5sZENncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxjbkp2Y2lBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG0xcGMzTnBibWNnUFNCYlhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkbUZzYVdRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQnRhWE56YVc1bk9pQmJYU3hjYmlBZ0lDQWdJQ0FnWlhKeWIzSTZJRzUxYkd3c1hHNGdJQ0FnSUNBZ0lIWmhiR2xrT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0J1YjNKdFUyTm9aVzFoT2lCdWIzSnRVMk5vWlcxaExGeHVJQ0FnSUNBZ0lDQnlaWE52YkhabFZYSnNPaUJ5WlhOdmJIWmxWWEpzTEZ4dUlDQWdJQ0FnSUNCblpYUkViMk4xYldWdWRGVnlhVG9nWjJWMFJHOWpkVzFsYm5SVmNta3NYRzRnSUNBZ0lDQWdJR1Z5Y205eVEyOWtaWE02SUVWeWNtOXlRMjlrWlhOY2JpQWdJQ0I5TzF4dUlDQWdJR0Z3YVM1c1lXNW5kV0ZuWlNoc1lXNW5kV0ZuWlNCOGZDQW5aVzRuS1R0Y2JpQWdJQ0J5WlhSMWNtNGdZWEJwTzF4dWZWeHVYRzR2TDJWNGNHOXlkQ0JtZFc1amRHbHZiaUIyWVd4cFpHRjBiM0lvS1NCN1hHNTJZWElnZEhZMElEMGdZM0psWVhSbFFYQnBLQ2s3WEc1MGRqUXVZV1JrVEdGdVozVmhaMlVvSjJWdUxXZGlKeXdnUlhKeWIzSk5aWE56WVdkbGMwUmxabUYxYkhRcE8xeHVYRzR2TDJ4bFoyRmplU0J3Y205d1pYSjBlVnh1ZEhZMExuUjJOQ0E5SUhSMk5EdGNiaTh2Y21WMGRYSnVJSFIyTkR0Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUhSMk5EdGNiaTh2ZlNJc0lpOHFLbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJRVkNCSmJtOTJZY09udzZOdklHVWdVMmx6ZEdWdFlYTWdVMEZjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnU1U1RlUwTXRTVVJjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVVZWUFFrbFRJRTVGVkZkUFVrdFRJRk5NWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVaU1FWVk9TRTlHUlZJdFIwVlRSVXhNVTBOSVFVWlVJRnBWVWlCR1QwVlNSRVZTVlU1SElFUkZVaUJCVGtkRlYwRk9SRlJGVGlCR1QxSlRRMGhWVGtjZ1JTNVdYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRTlTUVU1SFJTQlRRVnh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJFWlhWMGMyTm9aU0JVWld4bGEyOXRJRUZIWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVGd2FYcGxaVnh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJVUlVOSVRrbFRRMGhGSUZWT1NWWkZVbE5KVkVGVUlFSkZVa3hKVGx4dUtseHVLaUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVWdYQ0pNYVdObGJuTmxYQ0lwTzF4dUtpQjViM1VnYldGNUlHNXZkQ0IxYzJVZ2RHaHBjeUJtYVd4bElHVjRZMlZ3ZENCcGJpQmpiMjF3YkdsaGJtTmxJSGRwZEdnZ2RHaGxJRXhwWTJWdWMyVXVYRzRxSUZsdmRTQnRZWGtnYjJKMFlXbHVJR0VnWTI5d2VTQnZaaUIwYUdVZ1RHbGpaVzV6WlNCaGRGeHVLbHh1S2lBZ0lHaDBkSEE2THk5M2QzY3VZWEJoWTJobExtOXlaeTlzYVdObGJuTmxjeTlNU1VORlRsTkZMVEl1TUZ4dUtseHVLaUJWYm14bGMzTWdjbVZ4ZFdseVpXUWdZbmtnWVhCd2JHbGpZV0pzWlNCc1lYY2diM0lnWVdkeVpXVmtJSFJ2SUdsdUlIZHlhWFJwYm1jc0lITnZablIzWVhKbFhHNHFJR1JwYzNSeWFXSjFkR1ZrSUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sSUdseklHUnBjM1J5YVdKMWRHVmtJRzl1SUdGdUlGd2lRVk1nU1ZOY0lpQkNRVk5KVXl4Y2Jpb2dWMGxVU0U5VlZDQlhRVkpTUVU1VVNVVlRJRTlTSUVOUFRrUkpWRWxQVGxNZ1QwWWdRVTVaSUV0SlRrUXNJR1ZwZEdobGNpQmxlSEJ5WlhOeklHOXlJR2x0Y0d4cFpXUXVYRzRxSUZObFpTQjBhR1VnVEdsalpXNXpaU0JtYjNJZ2RHaGxJSE53WldOcFptbGpJR3hoYm1kMVlXZGxJR2R2ZG1WeWJtbHVaeUJ3WlhKdGFYTnphVzl1Y3lCaGJtUmNiaW9nYkdsdGFYUmhkR2x2Ym5NZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVdVhHNHFLaTljYmk4cUtseHVJQ29nVTNWd2NHOXlkQ0J0YjJSMWJHVWdkMmwwYUNCemIyMWxJR1oxYm1OMGFXOXVjeUIzYVd4c0lHSmxJSFZ6WldaMWJGeHVJQ29nUUcxdlpIVnNaU0IxZEdsc2MxeHVJQ292WEc1Y2JpOHFLbHh1SUNvZ1FIUjVjR1ZrWldZZ1pHbDJhV1JsVlZKTVhHNGdLaUJBZEhsd1pTQlBZbXBsWTNSY2JpQXFJRUJ3Y205d1pYSjBlU0I3YzNSeWFXNW5mU0IwZVhCbElGUm9aU0IwZVhCbElHOW1JRlZTVEZ4dUlDb2dRSEJ5YjNCbGNuUjVJSHR6ZEhKcGJtZDlJR1J2YldGcGJpQlVhR1VnWkc5dFlXbHVJRzltSUZWU1RGeHVJQ29nUUhCeWIzQmxjblI1SUh0emRISnBibWQ5SUdsa1pXNTBhWFI1SUZSb1pTQnBaR1Z1ZEdsMGVTQnZaaUJWVWt4Y2JpQXFMMXh1WEc0dktpcGNiaUFxSUVScGRtbGtaU0JoYmlCMWNtd2dhVzRnZEhsd1pTd2daRzl0WVdsdUlHRnVaQ0JwWkdWdWRHbDBlVnh1SUNvZ1FIQmhjbUZ0SUNCN1ZWSk1MbFZTVEgwZ2RYSnNJQzBnZFhKc0lHRmtaSEpsYzNOY2JpQXFJRUJ5WlhSMWNtNGdlMlJwZG1sa1pWVlNUSDBnZEdobElISmxjM1ZzZENCdlppQmthWFpwWkdWVlVreGNiaUFxTDF4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdScGRtbGtaVlZTVENoMWNtd3BJSHRjYmx4dUlDQnBaaUFvSVhWeWJDa2dkR2h5YjNjZ1JYSnliM0lvSjFWU1RDQnBjeUJ1WldWa1pXUWdkRzhnYzNCc2FYUW5LVHRjYmx4dUlDQXZMeUJzWlhRZ2NtVWdQU0F2S0Z0aExYcEJMVm90WFNvcFB6cGNYQzljWEM4b1B6cGNYQzRwUHloYkxXRXRla0V0V2pBdE9VQTZKUzVmWEZ3cmZpTTlYWHN5TERJMU5uMWNYQzViWVMxNlhYc3lMRFo5WEZ4aUtTb29YRnd2VzF4Y0wxeGNaRnhjZDF4Y0xpMWRLaWtxS0Q4NlcxeGNQMTBwS2lndUt5a3FMMmRwTzF4dUlDQnNaWFFnY21VZ1BTQXZLRnRoTFhwQkxWb3RYU29wT2x4Y0wxeGNMeWcvT2x4Y0xpay9LRnN0WVMxNlFTMWFNQzA1UURvbExsOWNYQ3QrSXoxZGV6SXNNalUyZlNrb1d5MWhMWHBCTFZvd0xUbEFPaVV1WDF4Y0szNGpQVnhjTDEwcUtTOW5hVHRjYmlBZ2JHVjBJSE4xWW5OMElEMGdKeVF4TENReUxDUXpKenRjYmlBZ2JHVjBJSEJoY25SeklEMGdkWEpzTG5KbGNHeGhZMlVvY21Vc0lITjFZbk4wS1M1emNHeHBkQ2duTENjcE8xeHVYRzRnSUM4dklFbG1JSFJvWlNCMWNtd2dhR0Z6SUc1dklIQnliM1J2WTI5c0xDQjBhR1VnWkdWbVlYVnNkQ0J3Y205MGIyTnZiQ0J6WlhRZ2FYTWdhSFIwY0hOY2JpQWdhV1lnS0hCaGNuUnpXekJkSUQwOVBTQjFjbXdwSUh0Y2JpQWdJQ0J3WVhKMGMxc3dYU0E5SUNkb2RIUndjeWM3WEc0Z0lDQWdjR0Z5ZEhOYk1WMGdQU0IxY213N1hHNGdJSDFjYmx4dUlDQnNaWFFnY21WemRXeDBJRDBnZTF4dUlDQWdJSFI1Y0dVNklIQmhjblJ6V3pCZExGeHVJQ0FnSUdSdmJXRnBiam9nY0dGeWRITmJNVjBzWEc0Z0lDQWdhV1JsYm5ScGRIazZJSEJoY25Seld6SmRYRzRnSUgwN1hHNWNiaUFnY21WMGRYSnVJSEpsYzNWc2REdGNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdScGRtbGtaVVZ0WVdsc0tHVnRZV2xzS1NCN1hHNGdJR3hsZENCcGJtUmxlRTltUVhRZ1BTQmxiV0ZwYkM1cGJtUmxlRTltS0NkQUp5azdYRzVjYmlBZ2JHVjBJSEpsYzNWc2RDQTlJSHRjYmlBZ0lDQjFjMlZ5Ym1GdFpUb2daVzFoYVd3dWMzVmljM1J5YVc1bktEQXNJR2x1WkdWNFQyWkJkQ2tzWEc0Z0lDQWdaRzl0WVdsdU9pQmxiV0ZwYkM1emRXSnpkSEpwYm1jb2FXNWtaWGhQWmtGMElDc2dNU3dnWlcxaGFXd3ViR1Z1WjNSb0tWeHVJQ0I5TzF4dVhHNGdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNTlYRzVjYmk4cUtseHVJQ29nUTJobFkyc2dhV1lnWVc0Z1QySnFaV04wSUdseklHVnRjSFI1WEc0Z0tpQkFjR0Z5WVcwZ0lIdFBZbXBsWTNSOUlHOWlhbVZqZENCUFltcGxZM1FnZEc4Z1ltVWdZMmhsWTJ0bFpGeHVJQ29nUUhKbGRIVnliaUI3UW05dmJHVmhibjBnSUNBZ0lDQWdjM1JoZEhWeklHOW1JRTlpYW1WamRDd2daVzF3ZEhrZ2IzSWdibTkwSUNoMGNuVmxmR1poYkhObEtUdGNiaUFxTDF4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdWdGNIUjVUMkpxWldOMEtHOWlhbVZqZENrZ2UxeHVJQ0J5WlhSMWNtNGdUMkpxWldOMExtdGxlWE1vYjJKcVpXTjBLUzVzWlc1bmRHZ2dQaUF3SUQ4Z1ptRnNjMlVnT2lCMGNuVmxPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFMWhhMlVnWVNCRFQxQlpJRzltSUhSb1pTQnZjbWxuYVc1aGJDQmtZWFJoWEc0Z0tpQkFjR0Z5WVcwZ0lIdFBZbXBsWTNSOUlDQnZZbW9nTFNCdlltcGxZM1FnZEc4Z1ltVWdZMnh2Ym1Wa1hHNGdLaUJBY21WMGRYSnVJSHRQWW1wbFkzUjlYRzRnS2k5Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCa1pXVndRMnh2Ym1Vb2IySnFLU0I3WEc0Z0lDOHZWRTlFVHpvZ2MybHRjR3hsSUdKMWRDQnBibVZtWm1samFXVnVkQ0JLVTA5T0lHUmxaWEFnWTJ4dmJtVXVMaTVjYmlBZ2FXWWdLRzlpYWlrZ2NtVjBkWEp1SUVwVFQwNHVjR0Z5YzJVb1NsTlBUaTV6ZEhKcGJtZHBabmtvYjJKcUtTazdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1QySjBZV2x1Y3lCMGFHVWdkWE5sY2lCVlVrd2dkR2hoZENCamIzSnlaWE53YjI1a2N5QjBieUJoSUdkcGRtVnVJR1Z0WVdsc1hHNGdLaUJBY0dGeVlXMGdJSHR6ZEhKcGJtZDlJSFZ6WlhKRmJXRnBiQ0JVYUdVZ2RYTmxjaUJsYldGcGJGeHVJQ29nUUhKbGRIVnliaUI3VlZKTUxsVlNUSDBnZFhObGNsVlNUQ0JVYUdVZ2RYTmxjaUJWVWt4Y2JpQXFMMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR2RsZEZWelpYSlZVa3hHY205dFJXMWhhV3dvZFhObGNrVnRZV2xzS1NCN1hHNGdJR3hsZENCcGJtUmxlRTltUVhRZ1BTQjFjMlZ5UlcxaGFXd3VhVzVrWlhoUFppZ25RQ2NwTzF4dUlDQnlaWFIxY200Z0ozVnpaWEk2THk4bklDc2dkWE5sY2tWdFlXbHNMbk4xWW5OMGNtbHVaeWhwYm1SbGVFOW1RWFFnS3lBeExDQjFjMlZ5UlcxaGFXd3ViR1Z1WjNSb0tTQXJJQ2N2SnlBcklIVnpaWEpGYldGcGJDNXpkV0p6ZEhKcGJtY29NQ3dnYVc1a1pYaFBaa0YwS1R0Y2JuMWNibHh1THlvcVhHNGdLaUJQWW5SaGFXNXpJSFJvWlNCMWMyVnlJR1Z0WVdsc0lIUm9ZWFFnWTI5eWNtVnpjRzl1WkhNZ2RHOGdZU0JuYVhabGJpQlZVa3hjYmlBcUlFQndZWEpoYlNBZ2UxVlNUQzVWVWt4OUlIVnpaWEpWVWt3Z1ZHaGxJSFZ6WlhJZ1ZWSk1YRzRnS2lCQWNtVjBkWEp1SUh0emRISnBibWQ5SUhWelpYSkZiV0ZwYkNCVWFHVWdkWE5sY2lCbGJXRnBiRnh1SUNvdlhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1oyVjBWWE5sY2tWdFlXbHNSbkp2YlZWU1RDaDFjMlZ5VlZKTUtTQjdYRzRnSUd4bGRDQjFjbXdnUFNCa2FYWnBaR1ZWVWt3b2RYTmxjbFZTVENrN1hHNGdJSEpsZEhWeWJpQjFjbXd1YVdSbGJuUnBkSGt1Y21Wd2JHRmpaU2duTHljc0lDY25LU0FySUNkQUp5QXJJSFZ5YkM1a2IyMWhhVzQ3SUM4dklHbGtaVzUwYVhSNUlHWnBaV3hrSUdoaGN5QW5MMlY0WVcxd2JHVkpSQ2NnYVc1emRHVmhaQ0J2WmlBblpYaGhiWEJzWlVsRUoxeHVmVnh1WEc1Y2JpOHFLbHh1SUNvZ1EyaGxZMnNnYVdZZ2RHaGxJSFZ6WlhJZ2FXUmxiblJwWm1sbGNpQnBjeUJoYkhKbFlXUjVJR2x1SUhSb1pTQlZVa3dnWm05eWJXRjBMQ0JwWmlCdWIzUXNJR052Ym5abGNuUWdkRzhnVlZKTUlHWnZjbTFoZEZ4dUlDb2dRSEJoY21GdElDQjdjM1J5YVc1bmZTQWdJR2xrWlc1MGFXWnBaWElnSUhWelpYSWdhV1JsYm5ScFptbGxjbHh1SUNvZ1FISmxkSFZ5YmlCN2MzUnlhVzVuZlNBZ0lIVnpaWEpWVWt3Z0lDQWdkR2hsSUhWelpYSWdWVkpNWEc0Z0tpOWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmpiMjUyWlhKMFZHOVZjMlZ5VlZKTUtHbGtaVzUwYVdacFpYSXBJSHRjYmx4dUlDQXZMeUJqYUdWamF5QnBaaUIwYUdVZ2FXUmxiblJwWm1sbGNpQnBjeUJoYkhKbFlXUjVJR2x1SUhSb1pTQjFjbXdnWm05eWJXRjBYRzRnSUdsbUlDaHBaR1Z1ZEdsbWFXVnlMbk4xWW5OMGNtbHVaeWd3TENBM0tTQTlQVDBnSjNWelpYSTZMeThuS1NCN1hHNGdJQ0FnYkdWMElHUnBkbWxrWldSVlVrd2dQU0JrYVhacFpHVlZVa3dvYVdSbGJuUnBabWxsY2lrN1hHNWNiaUFnSUNBdkwyTm9aV05ySUdsbUlIUm9aU0IxY213Z2FYTWdkMlZzYkNCbWIzSnRZWFJsWkZ4dUlDQWdJR2xtSUNoa2FYWnBaR1ZrVlZKTUxtUnZiV0ZwYmlBbUppQmthWFpwWkdWa1ZWSk1MbWxrWlc1MGFYUjVLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdhV1JsYm5ScFptbGxjanRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnSjNWelpYSlZVa3dnZDJsMGFDQjNjbTl1WnlCbWIzSnRZWFFuTzF4dUlDQWdJSDFjYmx4dUlDQXZMMmxtSUc1dmRDd2dZMjl1ZG1WeWRDQjBhR1VnZFhObGNpQmxiV0ZwYkNCMGJ5QlZVa3dnWm05eWJXRjBYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdjbVYwZFhKdUlHZGxkRlZ6WlhKVlVreEdjbTl0UlcxaGFXd29hV1JsYm5ScFptbGxjaWs3WEc0Z0lIMWNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdselJHRjBZVTlpYW1WamRGVlNUQ2gxY213cElIdGNiaUFnYkdWMElITmphR1Z0WVhOVWIwbG5ibTl5WlNBOUlGc25aRzl0WVdsdUxXbGtjQ2NzSUNkeWRXNTBhVzFsSnl3Z0oyUnZiV0ZwYmljc0lDZG9lWEJsY25SNUoxMDdYRzRnSUd4bGRDQnpjR3hwZEZWU1RDQTlJQ2gxY213cExuTndiR2wwS0NjNkx5OG5LVHRjYmlBZ2JHVjBJSFZ5YkZOamFHVnRZU0E5SUhOd2JHbDBWVkpNV3pCZE8xeHVYRzRnSUhKbGRIVnliaUJ6WTJobGJXRnpWRzlKWjI1dmNtVXVhVzVrWlhoUFppaDFjbXhUWTJobGJXRXBJRDA5UFNBdE1UdGNibjFjYmlKZGZRPT0KCi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJ1bnRpbWUuanMubWFwCg==",
      "sourceCodeClassname": "Runtime",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 30001,
    "type": "Runtimes",
    "version": "0.1",
    "description": "Description of Runtime",
    "objectName": "Runtime",
    "configuration": {},
    "runtimeType": "browser",
    "hypertyCapabilities": {
      "mic": true,
      "camera": true,
      "sensor": false,
      "webrtc": true,
      "ortc": true
    },
    "protocolCapabilities": {
      "http": true,
      "https": true,
      "ws": true,
      "wss": true,
      "coap": false,
      "datachannel": false
    },
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  }
}