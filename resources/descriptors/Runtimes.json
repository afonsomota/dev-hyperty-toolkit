{
  "Runtime": {
    "sourcePackage": {
      "sourceCode": "/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

// Distribution file for Runtime.js 
// version: 0.6.0
// Last build: Tue Sep 27 2016 15:08:35 GMT+0100 (WEST)

(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Runtime = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
"use strict";

require("core-js/shim");

require("regenerator-runtime/runtime");

require("core-js/fn/regexp/escape");

/* eslint max-len: 0 */

if (global._babelPolyfill) {
  throw new Error("only one instance of babel-polyfill is allowed");
}
global._babelPolyfill = true;

// Should be removed in the next major release:

var DEFINE_PROPERTY = "defineProperty";
function define(O, key, value) {
  O[key] || Object[DEFINE_PROPERTY](O, key, {
    writable: true,
    configurable: true,
    value: value
  });
}

define(String.prototype, "padLeft", "".padStart);
define(String.prototype, "padRight", "".padEnd);

"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
  [][key] && define(Array, key, Function.call.bind([][key]));
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"core-js/fn/regexp/escape":2,"core-js/shim":295,"regenerator-runtime/runtime":296}],2:[function(require,module,exports){
require('../../modules/core.regexp.escape');
module.exports = require('../../modules/_core').RegExp.escape;
},{"../../modules/_core":23,"../../modules/core.regexp.escape":119}],3:[function(require,module,exports){
module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};
},{}],4:[function(require,module,exports){
var cof = require('./_cof');
module.exports = function(it, msg){
  if(typeof it != 'number' && cof(it) != 'Number')throw TypeError(msg);
  return +it;
};
},{"./_cof":18}],5:[function(require,module,exports){
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = require('./_wks')('unscopables')
  , ArrayProto  = Array.prototype;
if(ArrayProto[UNSCOPABLES] == undefined)require('./_hide')(ArrayProto, UNSCOPABLES, {});
module.exports = function(key){
  ArrayProto[UNSCOPABLES][key] = true;
};
},{"./_hide":40,"./_wks":117}],6:[function(require,module,exports){
module.exports = function(it, Constructor, name, forbiddenField){
  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};
},{}],7:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};
},{"./_is-object":49}],8:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
'use strict';
var toObject = require('./_to-object')
  , toIndex  = require('./_to-index')
  , toLength = require('./_to-length');

module.exports = [].copyWithin || function copyWithin(target/*= 0*/, start/*= 0, end = @length*/){
  var O     = toObject(this)
    , len   = toLength(O.length)
    , to    = toIndex(target, len)
    , from  = toIndex(start, len)
    , end   = arguments.length > 2 ? arguments[2] : undefined
    , count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to)
    , inc   = 1;
  if(from < to && to < from + count){
    inc  = -1;
    from += count - 1;
    to   += count - 1;
  }
  while(count-- > 0){
    if(from in O)O[to] = O[from];
    else delete O[to];
    to   += inc;
    from += inc;
  } return O;
};
},{"./_to-index":105,"./_to-length":108,"./_to-object":109}],9:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
'use strict';
var toObject = require('./_to-object')
  , toIndex  = require('./_to-index')
  , toLength = require('./_to-length');
module.exports = function fill(value /*, start = 0, end = @length */){
  var O      = toObject(this)
    , length = toLength(O.length)
    , aLen   = arguments.length
    , index  = toIndex(aLen > 1 ? arguments[1] : undefined, length)
    , end    = aLen > 2 ? arguments[2] : undefined
    , endPos = end === undefined ? length : toIndex(end, length);
  while(endPos > index)O[index++] = value;
  return O;
};
},{"./_to-index":105,"./_to-length":108,"./_to-object":109}],10:[function(require,module,exports){
var forOf = require('./_for-of');

module.exports = function(iter, ITERATOR){
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};

},{"./_for-of":37}],11:[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject')
  , toLength  = require('./_to-length')
  , toIndex   = require('./_to-index');
module.exports = function(IS_INCLUDES){
  return function($this, el, fromIndex){
    var O      = toIObject($this)
      , length = toLength(O.length)
      , index  = toIndex(fromIndex, length)
      , value;
    // Array#includes uses SameValueZero equality algorithm
    if(IS_INCLUDES && el != el)while(length > index){
      value = O[index++];
      if(value != value)return true;
    // Array#toIndex ignores holes, Array#includes - not
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
      if(O[index] === el)return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};
},{"./_to-index":105,"./_to-iobject":107,"./_to-length":108}],12:[function(require,module,exports){
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx      = require('./_ctx')
  , IObject  = require('./_iobject')
  , toObject = require('./_to-object')
  , toLength = require('./_to-length')
  , asc      = require('./_array-species-create');
module.exports = function(TYPE, $create){
  var IS_MAP        = TYPE == 1
    , IS_FILTER     = TYPE == 2
    , IS_SOME       = TYPE == 3
    , IS_EVERY      = TYPE == 4
    , IS_FIND_INDEX = TYPE == 6
    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
    , create        = $create || asc;
  return function($this, callbackfn, that){
    var O      = toObject($this)
      , self   = IObject(O)
      , f      = ctx(callbackfn, that, 3)
      , length = toLength(self.length)
      , index  = 0
      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
      , val, res;
    for(;length > index; index++)if(NO_HOLES || index in self){
      val = self[index];
      res = f(val, index, O);
      if(TYPE){
        if(IS_MAP)result[index] = res;            // map
        else if(res)switch(TYPE){
          case 3: return true;                    // some
          case 5: return val;                     // find
          case 6: return index;                   // findIndex
          case 2: result.push(val);               // filter
        } else if(IS_EVERY)return false;          // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};
},{"./_array-species-create":15,"./_ctx":25,"./_iobject":45,"./_to-length":108,"./_to-object":109}],13:[function(require,module,exports){
var aFunction = require('./_a-function')
  , toObject  = require('./_to-object')
  , IObject   = require('./_iobject')
  , toLength  = require('./_to-length');

module.exports = function(that, callbackfn, aLen, memo, isRight){
  aFunction(callbackfn);
  var O      = toObject(that)
    , self   = IObject(O)
    , length = toLength(O.length)
    , index  = isRight ? length - 1 : 0
    , i      = isRight ? -1 : 1;
  if(aLen < 2)for(;;){
    if(index in self){
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if(isRight ? index < 0 : length <= index){
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for(;isRight ? index >= 0 : length > index; index += i)if(index in self){
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};
},{"./_a-function":3,"./_iobject":45,"./_to-length":108,"./_to-object":109}],14:[function(require,module,exports){
var isObject = require('./_is-object')
  , isArray  = require('./_is-array')
  , SPECIES  = require('./_wks')('species');

module.exports = function(original){
  var C;
  if(isArray(original)){
    C = original.constructor;
    // cross-realm fallback
    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
    if(isObject(C)){
      C = C[SPECIES];
      if(C === null)C = undefined;
    }
  } return C === undefined ? Array : C;
};
},{"./_is-array":47,"./_is-object":49,"./_wks":117}],15:[function(require,module,exports){
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = require('./_array-species-constructor');

module.exports = function(original, length){
  return new (speciesConstructor(original))(length);
};
},{"./_array-species-constructor":14}],16:[function(require,module,exports){
'use strict';
var aFunction  = require('./_a-function')
  , isObject   = require('./_is-object')
  , invoke     = require('./_invoke')
  , arraySlice = [].slice
  , factories  = {};

var construct = function(F, len, args){
  if(!(len in factories)){
    for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /*, args... */){
  var fn       = aFunction(this)
    , partArgs = arraySlice.call(arguments, 1);
  var bound = function(/* args... */){
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if(isObject(fn.prototype))bound.prototype = fn.prototype;
  return bound;
};
},{"./_a-function":3,"./_invoke":44,"./_is-object":49}],17:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof')
  , TAG = require('./_wks')('toStringTag')
  // ES3 wrong here
  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function(it, key){
  try {
    return it[key];
  } catch(e){ /* empty */ }
};

module.exports = function(it){
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};
},{"./_cof":18,"./_wks":117}],18:[function(require,module,exports){
var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};
},{}],19:[function(require,module,exports){
'use strict';
var dP          = require('./_object-dp').f
  , create      = require('./_object-create')
  , redefineAll = require('./_redefine-all')
  , ctx         = require('./_ctx')
  , anInstance  = require('./_an-instance')
  , defined     = require('./_defined')
  , forOf       = require('./_for-of')
  , $iterDefine = require('./_iter-define')
  , step        = require('./_iter-step')
  , setSpecies  = require('./_set-species')
  , DESCRIPTORS = require('./_descriptors')
  , fastKey     = require('./_meta').fastKey
  , SIZE        = DESCRIPTORS ? '_s' : 'size';

var getEntry = function(that, key){
  // fast case
  var index = fastKey(key), entry;
  if(index !== 'F')return that._i[index];
  // frozen object case
  for(entry = that._f; entry; entry = entry.n){
    if(entry.k == key)return entry;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      anInstance(that, C, NAME, '_i');
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear(){
        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
          entry.r = true;
          if(entry.p)entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function(key){
        var that  = this
          , entry = getEntry(that, key);
        if(entry){
          var next = entry.n
            , prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if(prev)prev.n = next;
          if(next)next.p = prev;
          if(that._f == entry)that._f = next;
          if(that._l == entry)that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /*, that = undefined */){
        anInstance(this, C, 'forEach');
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
          , entry;
        while(entry = entry ? entry.n : this._f){
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while(entry && entry.r)entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key){
        return !!getEntry(this, key);
      }
    });
    if(DESCRIPTORS)dP(C.prototype, 'size', {
      get: function(){
        return defined(this[SIZE]);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var entry = getEntry(that, key)
      , prev, index;
    // change existing entry
    if(entry){
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if(!that._f)that._f = entry;
      if(prev)prev.n = entry;
      that[SIZE]++;
      // add to index
      if(index !== 'F')that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function(C, NAME, IS_MAP){
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function(iterated, kind){
      this._t = iterated;  // target
      this._k = kind;      // kind
      this._l = undefined; // previous
    }, function(){
      var that  = this
        , kind  = that._k
        , entry = that._l;
      // revert to the last existing entry
      while(entry && entry.r)entry = entry.p;
      // get next entry
      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if(kind == 'keys'  )return step(0, entry.k);
      if(kind == 'values')return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};
},{"./_an-instance":6,"./_ctx":25,"./_defined":27,"./_descriptors":28,"./_for-of":37,"./_iter-define":53,"./_iter-step":55,"./_meta":62,"./_object-create":66,"./_object-dp":67,"./_redefine-all":86,"./_set-species":91}],20:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = require('./_classof')
  , from    = require('./_array-from-iterable');
module.exports = function(NAME){
  return function toJSON(){
    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};
},{"./_array-from-iterable":10,"./_classof":17}],21:[function(require,module,exports){
'use strict';
var redefineAll       = require('./_redefine-all')
  , getWeak           = require('./_meta').getWeak
  , anObject          = require('./_an-object')
  , isObject          = require('./_is-object')
  , anInstance        = require('./_an-instance')
  , forOf             = require('./_for-of')
  , createArrayMethod = require('./_array-methods')
  , $has              = require('./_has')
  , arrayFind         = createArrayMethod(5)
  , arrayFindIndex    = createArrayMethod(6)
  , id                = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function(that){
  return that._l || (that._l = new UncaughtFrozenStore);
};
var UncaughtFrozenStore = function(){
  this.a = [];
};
var findUncaughtFrozen = function(store, key){
  return arrayFind(store.a, function(it){
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function(key){
    var entry = findUncaughtFrozen(this, key);
    if(entry)return entry[1];
  },
  has: function(key){
    return !!findUncaughtFrozen(this, key);
  },
  set: function(key, value){
    var entry = findUncaughtFrozen(this, key);
    if(entry)entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function(key){
    var index = arrayFindIndex(this.a, function(it){
      return it[0] === key;
    });
    if(~index)this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      anInstance(that, C, NAME, '_i');
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function(key){
        if(!isObject(key))return false;
        var data = getWeak(key);
        if(data === true)return uncaughtFrozenStore(this)['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key){
        if(!isObject(key))return false;
        var data = getWeak(key);
        if(data === true)return uncaughtFrozenStore(this).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var data = getWeak(anObject(key), true);
    if(data === true)uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};
},{"./_an-instance":6,"./_an-object":7,"./_array-methods":12,"./_for-of":37,"./_has":39,"./_is-object":49,"./_meta":62,"./_redefine-all":86}],22:[function(require,module,exports){
'use strict';
var global            = require('./_global')
  , $export           = require('./_export')
  , redefine          = require('./_redefine')
  , redefineAll       = require('./_redefine-all')
  , meta              = require('./_meta')
  , forOf             = require('./_for-of')
  , anInstance        = require('./_an-instance')
  , isObject          = require('./_is-object')
  , fails             = require('./_fails')
  , $iterDetect       = require('./_iter-detect')
  , setToStringTag    = require('./_set-to-string-tag')
  , inheritIfRequired = require('./_inherit-if-required');

module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
  var Base  = global[NAME]
    , C     = Base
    , ADDER = IS_MAP ? 'set' : 'add'
    , proto = C && C.prototype
    , O     = {};
  var fixMethod = function(KEY){
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function(a){
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a){
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a){
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
    new C().entries().next();
  }))){
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance             = new C
      // early implementations not supports chaining
      , HASNT_CHAINING       = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance
      // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
      , THROWS_ON_PRIMITIVES = fails(function(){ instance.has(1); })
      // most early implementations doesn't supports iterables, most modern - not close it correctly
      , ACCEPT_ITERABLES     = $iterDetect(function(iter){ new C(iter); }) // eslint-disable-line no-new
      // for early implementations -0 and +0 not the same
      , BUGGY_ZERO = !IS_WEAK && fails(function(){
        // V8 ~ Chromium 42- fails only with 5+ elements
        var $instance = new C()
          , index     = 5;
        while(index--)$instance[ADDER](index, index);
        return !$instance.has(-0);
      });
    if(!ACCEPT_ITERABLES){ 
      C = wrapper(function(target, iterable){
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base, target, C);
        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);
    // weak collections should not contains .clear method
    if(IS_WEAK && proto.clear)delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

  return C;
};
},{"./_an-instance":6,"./_export":32,"./_fails":34,"./_for-of":37,"./_global":38,"./_inherit-if-required":43,"./_is-object":49,"./_iter-detect":54,"./_meta":62,"./_redefine":87,"./_redefine-all":86,"./_set-to-string-tag":92}],23:[function(require,module,exports){
var core = module.exports = {version: '2.4.0'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
},{}],24:[function(require,module,exports){
'use strict';
var $defineProperty = require('./_object-dp')
  , createDesc      = require('./_property-desc');

module.exports = function(object, index, value){
  if(index in object)$defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};
},{"./_object-dp":67,"./_property-desc":85}],25:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};
},{"./_a-function":3}],26:[function(require,module,exports){
'use strict';
var anObject    = require('./_an-object')
  , toPrimitive = require('./_to-primitive')
  , NUMBER      = 'number';

module.exports = function(hint){
  if(hint !== 'string' && hint !== NUMBER && hint !== 'default')throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};
},{"./_an-object":7,"./_to-primitive":110}],27:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};
},{}],28:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_fails":34}],29:[function(require,module,exports){
var isObject = require('./_is-object')
  , document = require('./_global').document
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};
},{"./_global":38,"./_is-object":49}],30:[function(require,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');
},{}],31:[function(require,module,exports){
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys')
  , gOPS    = require('./_object-gops')
  , pIE     = require('./_object-pie');
module.exports = function(it){
  var result     = getKeys(it)
    , getSymbols = gOPS.f;
  if(getSymbols){
    var symbols = getSymbols(it)
      , isEnum  = pIE.f
      , i       = 0
      , key;
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
  } return result;
};
},{"./_object-gops":73,"./_object-keys":76,"./_object-pie":77}],32:[function(require,module,exports){
var global    = require('./_global')
  , core      = require('./_core')
  , hide      = require('./_hide')
  , redefine  = require('./_redefine')
  , ctx       = require('./_ctx')
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})
    , key, own, out, exp;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if(target)redefine(target, key, out, type & $export.U);
    // export
    if(exports[key] != out)hide(exports, key, exp);
    if(IS_PROTO && expProto[key] != out)expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library` 
module.exports = $export;
},{"./_core":23,"./_ctx":25,"./_global":38,"./_hide":40,"./_redefine":87}],33:[function(require,module,exports){
var MATCH = require('./_wks')('match');
module.exports = function(KEY){
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch(e){
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch(f){ /* empty */ }
  } return true;
};
},{"./_wks":117}],34:[function(require,module,exports){
module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};
},{}],35:[function(require,module,exports){
'use strict';
var hide     = require('./_hide')
  , redefine = require('./_redefine')
  , fails    = require('./_fails')
  , defined  = require('./_defined')
  , wks      = require('./_wks');

module.exports = function(KEY, length, exec){
  var SYMBOL   = wks(KEY)
    , fns      = exec(defined, SYMBOL, ''[KEY])
    , strfn    = fns[0]
    , rxfn     = fns[1];
  if(fails(function(){
    var O = {};
    O[SYMBOL] = function(){ return 7; };
    return ''[KEY](O) != 7;
  })){
    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function(string, arg){ return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function(string){ return rxfn.call(string, this); }
    );
  }
};
},{"./_defined":27,"./_fails":34,"./_hide":40,"./_redefine":87,"./_wks":117}],36:[function(require,module,exports){
'use strict';
// 21.2.5.3 get RegExp.prototype.flags
var anObject = require('./_an-object');
module.exports = function(){
  var that   = anObject(this)
    , result = '';
  if(that.global)     result += 'g';
  if(that.ignoreCase) result += 'i';
  if(that.multiline)  result += 'm';
  if(that.unicode)    result += 'u';
  if(that.sticky)     result += 'y';
  return result;
};
},{"./_an-object":7}],37:[function(require,module,exports){
var ctx         = require('./_ctx')
  , call        = require('./_iter-call')
  , isArrayIter = require('./_is-array-iter')
  , anObject    = require('./_an-object')
  , toLength    = require('./_to-length')
  , getIterFn   = require('./core.get-iterator-method')
  , BREAK       = {}
  , RETURN      = {};
var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
    , f      = ctx(fn, that, entries ? 2 : 1)
    , index  = 0
    , length, step, iterator, result;
  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if(result === BREAK || result === RETURN)return result;
  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
    result = call(iterator, f, step.value, entries);
    if(result === BREAK || result === RETURN)return result;
  }
};
exports.BREAK  = BREAK;
exports.RETURN = RETURN;
},{"./_an-object":7,"./_ctx":25,"./_is-array-iter":46,"./_iter-call":51,"./_to-length":108,"./core.get-iterator-method":118}],38:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
},{}],39:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key){
  return hasOwnProperty.call(it, key);
};
},{}],40:[function(require,module,exports){
var dP         = require('./_object-dp')
  , createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function(object, key, value){
  return dP.f(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};
},{"./_descriptors":28,"./_object-dp":67,"./_property-desc":85}],41:[function(require,module,exports){
module.exports = require('./_global').document && document.documentElement;
},{"./_global":38}],42:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function(){
  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_descriptors":28,"./_dom-create":29,"./_fails":34}],43:[function(require,module,exports){
var isObject       = require('./_is-object')
  , setPrototypeOf = require('./_set-proto').set;
module.exports = function(that, target, C){
  var P, S = target.constructor;
  if(S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf){
    setPrototypeOf(that, P);
  } return that;
};
},{"./_is-object":49,"./_set-proto":90}],44:[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function(fn, args, that){
  var un = that === undefined;
  switch(args.length){
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return              fn.apply(that, args);
};
},{}],45:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};
},{"./_cof":18}],46:[function(require,module,exports){
// check on default Array iterator
var Iterators  = require('./_iterators')
  , ITERATOR   = require('./_wks')('iterator')
  , ArrayProto = Array.prototype;

module.exports = function(it){
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};
},{"./_iterators":56,"./_wks":117}],47:[function(require,module,exports){
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg){
  return cof(arg) == 'Array';
};
},{"./_cof":18}],48:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var isObject = require('./_is-object')
  , floor    = Math.floor;
module.exports = function isInteger(it){
  return !isObject(it) && isFinite(it) && floor(it) === it;
};
},{"./_is-object":49}],49:[function(require,module,exports){
module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};
},{}],50:[function(require,module,exports){
// 7.2.8 IsRegExp(argument)
var isObject = require('./_is-object')
  , cof      = require('./_cof')
  , MATCH    = require('./_wks')('match');
module.exports = function(it){
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};
},{"./_cof":18,"./_is-object":49,"./_wks":117}],51:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function(iterator, fn, value, entries){
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch(e){
    var ret = iterator['return'];
    if(ret !== undefined)anObject(ret.call(iterator));
    throw e;
  }
};
},{"./_an-object":7}],52:[function(require,module,exports){
'use strict';
var create         = require('./_object-create')
  , descriptor     = require('./_property-desc')
  , setToStringTag = require('./_set-to-string-tag')
  , IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function(){ return this; });

module.exports = function(Constructor, NAME, next){
  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
  setToStringTag(Constructor, NAME + ' Iterator');
};
},{"./_hide":40,"./_object-create":66,"./_property-desc":85,"./_set-to-string-tag":92,"./_wks":117}],53:[function(require,module,exports){
'use strict';
var LIBRARY        = require('./_library')
  , $export        = require('./_export')
  , redefine       = require('./_redefine')
  , hide           = require('./_hide')
  , has            = require('./_has')
  , Iterators      = require('./_iterators')
  , $iterCreate    = require('./_iter-create')
  , setToStringTag = require('./_set-to-string-tag')
  , getPrototypeOf = require('./_object-gpo')
  , ITERATOR       = require('./_wks')('iterator')
  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
  , FF_ITERATOR    = '@@iterator'
  , KEYS           = 'keys'
  , VALUES         = 'values';

var returnThis = function(){ return this; };

module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
  $iterCreate(Constructor, NAME, next);
  var getMethod = function(kind){
    if(!BUGGY && kind in proto)return proto[kind];
    switch(kind){
      case KEYS: return function keys(){ return new Constructor(this, kind); };
      case VALUES: return function values(){ return new Constructor(this, kind); };
    } return function entries(){ return new Constructor(this, kind); };
  };
  var TAG        = NAME + ' Iterator'
    , DEF_VALUES = DEFAULT == VALUES
    , VALUES_BUG = false
    , proto      = Base.prototype
    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
    , $default   = $native || getMethod(DEFAULT)
    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
    , methods, key, IteratorPrototype;
  // Fix native
  if($anyNative){
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
    if(IteratorPrototype !== Object.prototype){
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if(DEF_VALUES && $native && $native.name !== VALUES){
    VALUES_BUG = true;
    $default = function values(){ return $native.call(this); };
  }
  // Define iterator
  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG]  = returnThis;
  if(DEFAULT){
    methods = {
      values:  DEF_VALUES ? $default : getMethod(VALUES),
      keys:    IS_SET     ? $default : getMethod(KEYS),
      entries: $entries
    };
    if(FORCED)for(key in methods){
      if(!(key in proto))redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};
},{"./_export":32,"./_has":39,"./_hide":40,"./_iter-create":52,"./_iterators":56,"./_library":58,"./_object-gpo":74,"./_redefine":87,"./_set-to-string-tag":92,"./_wks":117}],54:[function(require,module,exports){
var ITERATOR     = require('./_wks')('iterator')
  , SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function(){ SAFE_CLOSING = true; };
  Array.from(riter, function(){ throw 2; });
} catch(e){ /* empty */ }

module.exports = function(exec, skipClosing){
  if(!skipClosing && !SAFE_CLOSING)return false;
  var safe = false;
  try {
    var arr  = [7]
      , iter = arr[ITERATOR]();
    iter.next = function(){ return {done: safe = true}; };
    arr[ITERATOR] = function(){ return iter; };
    exec(arr);
  } catch(e){ /* empty */ }
  return safe;
};
},{"./_wks":117}],55:[function(require,module,exports){
module.exports = function(done, value){
  return {value: value, done: !!done};
};
},{}],56:[function(require,module,exports){
module.exports = {};
},{}],57:[function(require,module,exports){
var getKeys   = require('./_object-keys')
  , toIObject = require('./_to-iobject');
module.exports = function(object, el){
  var O      = toIObject(object)
    , keys   = getKeys(O)
    , length = keys.length
    , index  = 0
    , key;
  while(length > index)if(O[key = keys[index++]] === el)return key;
};
},{"./_object-keys":76,"./_to-iobject":107}],58:[function(require,module,exports){
module.exports = false;
},{}],59:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x){
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;
},{}],60:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x){
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};
},{}],61:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x){
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};
},{}],62:[function(require,module,exports){
var META     = require('./_uid')('meta')
  , isObject = require('./_is-object')
  , has      = require('./_has')
  , setDesc  = require('./_object-dp').f
  , id       = 0;
var isExtensible = Object.isExtensible || function(){
  return true;
};
var FREEZE = !require('./_fails')(function(){
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function(it){
  setDesc(it, META, {value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  }});
};
var fastKey = function(it, create){
  // return primitive with prefix
  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return 'F';
    // not necessary to add metadata
    if(!create)return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function(it, create){
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return true;
    // not necessary to add metadata
    if(!create)return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function(it){
  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY:      META,
  NEED:     false,
  fastKey:  fastKey,
  getWeak:  getWeak,
  onFreeze: onFreeze
};
},{"./_fails":34,"./_has":39,"./_is-object":49,"./_object-dp":67,"./_uid":114}],63:[function(require,module,exports){
var Map     = require('./es6.map')
  , $export = require('./_export')
  , shared  = require('./_shared')('metadata')
  , store   = shared.store || (shared.store = new (require('./es6.weak-map')));

var getOrCreateMetadataMap = function(target, targetKey, create){
  var targetMetadata = store.get(target);
  if(!targetMetadata){
    if(!create)return undefined;
    store.set(target, targetMetadata = new Map);
  }
  var keyMetadata = targetMetadata.get(targetKey);
  if(!keyMetadata){
    if(!create)return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map);
  } return keyMetadata;
};
var ordinaryHasOwnMetadata = function(MetadataKey, O, P){
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function(MetadataKey, O, P){
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function(MetadataKey, MetadataValue, O, P){
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function(target, targetKey){
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false)
    , keys        = [];
  if(metadataMap)metadataMap.forEach(function(_, key){ keys.push(key); });
  return keys;
};
var toMetaKey = function(it){
  return it === undefined || typeof it == 'symbol' ? it : String(it);
};
var exp = function(O){
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};
},{"./_export":32,"./_shared":94,"./es6.map":149,"./es6.weak-map":255}],64:[function(require,module,exports){
var global    = require('./_global')
  , macrotask = require('./_task').set
  , Observer  = global.MutationObserver || global.WebKitMutationObserver
  , process   = global.process
  , Promise   = global.Promise
  , isNode    = require('./_cof')(process) == 'process';

module.exports = function(){
  var head, last, notify;

  var flush = function(){
    var parent, fn;
    if(isNode && (parent = process.domain))parent.exit();
    while(head){
      fn   = head.fn;
      head = head.next;
      try {
        fn();
      } catch(e){
        if(head)notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if(parent)parent.enter();
  };

  // Node.js
  if(isNode){
    notify = function(){
      process.nextTick(flush);
    };
  // browsers with MutationObserver
  } else if(Observer){
    var toggle = true
      , node   = document.createTextNode('');
    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
    notify = function(){
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if(Promise && Promise.resolve){
    var promise = Promise.resolve();
    notify = function(){
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function(){
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function(fn){
    var task = {fn: fn, next: undefined};
    if(last)last.next = task;
    if(!head){
      head = task;
      notify();
    } last = task;
  };
};
},{"./_cof":18,"./_global":38,"./_task":104}],65:[function(require,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var getKeys  = require('./_object-keys')
  , gOPS     = require('./_object-gops')
  , pIE      = require('./_object-pie')
  , toObject = require('./_to-object')
  , IObject  = require('./_iobject')
  , $assign  = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function(){
  var A = {}
    , B = {}
    , S = Symbol()
    , K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function(k){ B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
  var T     = toObject(target)
    , aLen  = arguments.length
    , index = 1
    , getSymbols = gOPS.f
    , isEnum     = pIE.f;
  while(aLen > index){
    var S      = IObject(arguments[index++])
      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
  } return T;
} : $assign;
},{"./_fails":34,"./_iobject":45,"./_object-gops":73,"./_object-keys":76,"./_object-pie":77,"./_to-object":109}],66:[function(require,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject    = require('./_an-object')
  , dPs         = require('./_object-dps')
  , enumBugKeys = require('./_enum-bug-keys')
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')
  , Empty       = function(){ /* empty */ }
  , PROTOTYPE   = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function(){
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe')
    , i      = enumBugKeys.length
    , lt     = '<'
    , gt     = '>'
    , iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties){
  var result;
  if(O !== null){
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty;
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":7,"./_dom-create":29,"./_enum-bug-keys":30,"./_html":41,"./_object-dps":68,"./_shared-key":93}],67:[function(require,module,exports){
var anObject       = require('./_an-object')
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')
  , toPrimitive    = require('./_to-primitive')
  , dP             = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if(IE8_DOM_DEFINE)try {
    return dP(O, P, Attributes);
  } catch(e){ /* empty */ }
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
  if('value' in Attributes)O[P] = Attributes.value;
  return O;
};
},{"./_an-object":7,"./_descriptors":28,"./_ie8-dom-define":42,"./_to-primitive":110}],68:[function(require,module,exports){
var dP       = require('./_object-dp')
  , anObject = require('./_an-object')
  , getKeys  = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties){
  anObject(O);
  var keys   = getKeys(Properties)
    , length = keys.length
    , i = 0
    , P;
  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
  return O;
};
},{"./_an-object":7,"./_descriptors":28,"./_object-dp":67,"./_object-keys":76}],69:[function(require,module,exports){
// Forced replacement prototype accessors methods
module.exports = require('./_library')|| !require('./_fails')(function(){
  var K = Math.random();
  // In FF throws only define methods
  __defineSetter__.call(null, K, function(){ /* empty */});
  delete require('./_global')[K];
});
},{"./_fails":34,"./_global":38,"./_library":58}],70:[function(require,module,exports){
var pIE            = require('./_object-pie')
  , createDesc     = require('./_property-desc')
  , toIObject      = require('./_to-iobject')
  , toPrimitive    = require('./_to-primitive')
  , has            = require('./_has')
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')
  , gOPD           = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P){
  O = toIObject(O);
  P = toPrimitive(P, true);
  if(IE8_DOM_DEFINE)try {
    return gOPD(O, P);
  } catch(e){ /* empty */ }
  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
};
},{"./_descriptors":28,"./_has":39,"./_ie8-dom-define":42,"./_object-pie":77,"./_property-desc":85,"./_to-iobject":107,"./_to-primitive":110}],71:[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject')
  , gOPN      = require('./_object-gopn').f
  , toString  = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function(it){
  try {
    return gOPN(it);
  } catch(e){
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it){
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_object-gopn":72,"./_to-iobject":107}],72:[function(require,module,exports){
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys      = require('./_object-keys-internal')
  , hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
  return $keys(O, hiddenKeys);
};
},{"./_enum-bug-keys":30,"./_object-keys-internal":75}],73:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;
},{}],74:[function(require,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has         = require('./_has')
  , toObject    = require('./_to-object')
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')
  , ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function(O){
  O = toObject(O);
  if(has(O, IE_PROTO))return O[IE_PROTO];
  if(typeof O.constructor == 'function' && O instanceof O.constructor){
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};
},{"./_has":39,"./_shared-key":93,"./_to-object":109}],75:[function(require,module,exports){
var has          = require('./_has')
  , toIObject    = require('./_to-iobject')
  , arrayIndexOf = require('./_array-includes')(false)
  , IE_PROTO     = require('./_shared-key')('IE_PROTO');

module.exports = function(object, names){
  var O      = toIObject(object)
    , i      = 0
    , result = []
    , key;
  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while(names.length > i)if(has(O, key = names[i++])){
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};
},{"./_array-includes":11,"./_has":39,"./_shared-key":93,"./_to-iobject":107}],76:[function(require,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys       = require('./_object-keys-internal')
  , enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O){
  return $keys(O, enumBugKeys);
};
},{"./_enum-bug-keys":30,"./_object-keys-internal":75}],77:[function(require,module,exports){
exports.f = {}.propertyIsEnumerable;
},{}],78:[function(require,module,exports){
// most Object methods by ES6 should accept primitives
var $export = require('./_export')
  , core    = require('./_core')
  , fails   = require('./_fails');
module.exports = function(KEY, exec){
  var fn  = (core.Object || {})[KEY] || Object[KEY]
    , exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
};
},{"./_core":23,"./_export":32,"./_fails":34}],79:[function(require,module,exports){
var getKeys   = require('./_object-keys')
  , toIObject = require('./_to-iobject')
  , isEnum    = require('./_object-pie').f;
module.exports = function(isEntries){
  return function(it){
    var O      = toIObject(it)
      , keys   = getKeys(O)
      , length = keys.length
      , i      = 0
      , result = []
      , key;
    while(length > i)if(isEnum.call(O, key = keys[i++])){
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};
},{"./_object-keys":76,"./_object-pie":77,"./_to-iobject":107}],80:[function(require,module,exports){
// all object keys, includes non-enumerable and symbols
var gOPN     = require('./_object-gopn')
  , gOPS     = require('./_object-gops')
  , anObject = require('./_an-object')
  , Reflect  = require('./_global').Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it){
  var keys       = gOPN.f(anObject(it))
    , getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};
},{"./_an-object":7,"./_global":38,"./_object-gopn":72,"./_object-gops":73}],81:[function(require,module,exports){
var $parseFloat = require('./_global').parseFloat
  , $trim       = require('./_string-trim').trim;

module.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str){
  var string = $trim(String(str), 3)
    , result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;
},{"./_global":38,"./_string-trim":102,"./_string-ws":103}],82:[function(require,module,exports){
var $parseInt = require('./_global').parseInt
  , $trim     = require('./_string-trim').trim
  , ws        = require('./_string-ws')
  , hex       = /^[\-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix){
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;
},{"./_global":38,"./_string-trim":102,"./_string-ws":103}],83:[function(require,module,exports){
'use strict';
var path      = require('./_path')
  , invoke    = require('./_invoke')
  , aFunction = require('./_a-function');
module.exports = function(/* ...pargs */){
  var fn     = aFunction(this)
    , length = arguments.length
    , pargs  = Array(length)
    , i      = 0
    , _      = path._
    , holder = false;
  while(length > i)if((pargs[i] = arguments[i++]) === _)holder = true;
  return function(/* ...args */){
    var that = this
      , aLen = arguments.length
      , j = 0, k = 0, args;
    if(!holder && !aLen)return invoke(fn, pargs, that);
    args = pargs.slice();
    if(holder)for(;length > j; j++)if(args[j] === _)args[j] = arguments[k++];
    while(aLen > k)args.push(arguments[k++]);
    return invoke(fn, args, that);
  };
};
},{"./_a-function":3,"./_invoke":44,"./_path":84}],84:[function(require,module,exports){
module.exports = require('./_global');
},{"./_global":38}],85:[function(require,module,exports){
module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};
},{}],86:[function(require,module,exports){
var redefine = require('./_redefine');
module.exports = function(target, src, safe){
  for(var key in src)redefine(target, key, src[key], safe);
  return target;
};
},{"./_redefine":87}],87:[function(require,module,exports){
var global    = require('./_global')
  , hide      = require('./_hide')
  , has       = require('./_has')
  , SRC       = require('./_uid')('src')
  , TO_STRING = 'toString'
  , $toString = Function[TO_STRING]
  , TPL       = ('' + $toString).split(TO_STRING);

require('./_core').inspectSource = function(it){
  return $toString.call(it);
};

(module.exports = function(O, key, val, safe){
  var isFunction = typeof val == 'function';
  if(isFunction)has(val, 'name') || hide(val, 'name', key);
  if(O[key] === val)return;
  if(isFunction)has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if(O === global){
    O[key] = val;
  } else {
    if(!safe){
      delete O[key];
      hide(O, key, val);
    } else {
      if(O[key])O[key] = val;
      else hide(O, key, val);
    }
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString(){
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});
},{"./_core":23,"./_global":38,"./_has":39,"./_hide":40,"./_uid":114}],88:[function(require,module,exports){
module.exports = function(regExp, replace){
  var replacer = replace === Object(replace) ? function(part){
    return replace[part];
  } : replace;
  return function(it){
    return String(it).replace(regExp, replacer);
  };
};
},{}],89:[function(require,module,exports){
// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y){
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};
},{}],90:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object')
  , anObject = require('./_an-object');
var check = function(O, proto){
  anObject(O);
  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function(test, buggy, set){
      try {
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch(e){ buggy = true; }
      return function setPrototypeOf(O, proto){
        check(O, proto);
        if(buggy)O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};
},{"./_an-object":7,"./_ctx":25,"./_is-object":49,"./_object-gopd":70}],91:[function(require,module,exports){
'use strict';
var global      = require('./_global')
  , dP          = require('./_object-dp')
  , DESCRIPTORS = require('./_descriptors')
  , SPECIES     = require('./_wks')('species');

module.exports = function(KEY){
  var C = global[KEY];
  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};
},{"./_descriptors":28,"./_global":38,"./_object-dp":67,"./_wks":117}],92:[function(require,module,exports){
var def = require('./_object-dp').f
  , has = require('./_has')
  , TAG = require('./_wks')('toStringTag');

module.exports = function(it, tag, stat){
  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
};
},{"./_has":39,"./_object-dp":67,"./_wks":117}],93:[function(require,module,exports){
var shared = require('./_shared')('keys')
  , uid    = require('./_uid');
module.exports = function(key){
  return shared[key] || (shared[key] = uid(key));
};
},{"./_shared":94,"./_uid":114}],94:[function(require,module,exports){
var global = require('./_global')
  , SHARED = '__core-js_shared__'
  , store  = global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
  return store[key] || (store[key] = {});
};
},{"./_global":38}],95:[function(require,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject  = require('./_an-object')
  , aFunction = require('./_a-function')
  , SPECIES   = require('./_wks')('species');
module.exports = function(O, D){
  var C = anObject(O).constructor, S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};
},{"./_a-function":3,"./_an-object":7,"./_wks":117}],96:[function(require,module,exports){
var fails = require('./_fails');

module.exports = function(method, arg){
  return !!method && fails(function(){
    arg ? method.call(null, function(){}, 1) : method.call(null);
  });
};
},{"./_fails":34}],97:[function(require,module,exports){
var toInteger = require('./_to-integer')
  , defined   = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function(TO_STRING){
  return function(that, pos){
    var s = String(defined(that))
      , i = toInteger(pos)
      , l = s.length
      , a, b;
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};
},{"./_defined":27,"./_to-integer":106}],98:[function(require,module,exports){
// helper for String#{startsWith, endsWith, includes}
var isRegExp = require('./_is-regexp')
  , defined  = require('./_defined');

module.exports = function(that, searchString, NAME){
  if(isRegExp(searchString))throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};
},{"./_defined":27,"./_is-regexp":50}],99:[function(require,module,exports){
var $export = require('./_export')
  , fails   = require('./_fails')
  , defined = require('./_defined')
  , quot    = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function(string, tag, attribute, value) {
  var S  = String(defined(string))
    , p1 = '<' + tag;
  if(attribute !== '')p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function(NAME, exec){
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function(){
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};
},{"./_defined":27,"./_export":32,"./_fails":34}],100:[function(require,module,exports){
// https://github.com/tc39/proposal-string-pad-start-end
var toLength = require('./_to-length')
  , repeat   = require('./_string-repeat')
  , defined  = require('./_defined');

module.exports = function(that, maxLength, fillString, left){
  var S            = String(defined(that))
    , stringLength = S.length
    , fillStr      = fillString === undefined ? ' ' : String(fillString)
    , intMaxLength = toLength(maxLength);
  if(intMaxLength <= stringLength || fillStr == '')return S;
  var fillLen = intMaxLength - stringLength
    , stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if(stringFiller.length > fillLen)stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

},{"./_defined":27,"./_string-repeat":101,"./_to-length":108}],101:[function(require,module,exports){
'use strict';
var toInteger = require('./_to-integer')
  , defined   = require('./_defined');

module.exports = function repeat(count){
  var str = String(defined(this))
    , res = ''
    , n   = toInteger(count);
  if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;
  return res;
};
},{"./_defined":27,"./_to-integer":106}],102:[function(require,module,exports){
var $export = require('./_export')
  , defined = require('./_defined')
  , fails   = require('./_fails')
  , spaces  = require('./_string-ws')
  , space   = '[' + spaces + ']'
  , non     = '\u200b\u0085'
  , ltrim   = RegExp('^' + space + space + '*')
  , rtrim   = RegExp(space + space + '*$');

var exporter = function(KEY, exec, ALIAS){
  var exp   = {};
  var FORCE = fails(function(){
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if(ALIAS)exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function(string, TYPE){
  string = String(defined(string));
  if(TYPE & 1)string = string.replace(ltrim, '');
  if(TYPE & 2)string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;
},{"./_defined":27,"./_export":32,"./_fails":34,"./_string-ws":103}],103:[function(require,module,exports){
module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';
},{}],104:[function(require,module,exports){
var ctx                = require('./_ctx')
  , invoke             = require('./_invoke')
  , html               = require('./_html')
  , cel                = require('./_dom-create')
  , global             = require('./_global')
  , process            = global.process
  , setTask            = global.setImmediate
  , clearTask          = global.clearImmediate
  , MessageChannel     = global.MessageChannel
  , counter            = 0
  , queue              = {}
  , ONREADYSTATECHANGE = 'onreadystatechange'
  , defer, channel, port;
var run = function(){
  var id = +this;
  if(queue.hasOwnProperty(id)){
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function(event){
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if(!setTask || !clearTask){
  setTask = function setImmediate(fn){
    var args = [], i = 1;
    while(arguments.length > i)args.push(arguments[i++]);
    queue[++counter] = function(){
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id){
    delete queue[id];
  };
  // Node.js 0.8-
  if(require('./_cof')(process) == 'process'){
    defer = function(id){
      process.nextTick(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if(MessageChannel){
    channel = new MessageChannel;
    port    = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
    defer = function(id){
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if(ONREADYSTATECHANGE in cel('script')){
    defer = function(id){
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function(id){
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set:   setTask,
  clear: clearTask
};
},{"./_cof":18,"./_ctx":25,"./_dom-create":29,"./_global":38,"./_html":41,"./_invoke":44}],105:[function(require,module,exports){
var toInteger = require('./_to-integer')
  , max       = Math.max
  , min       = Math.min;
module.exports = function(index, length){
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};
},{"./_to-integer":106}],106:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil  = Math.ceil
  , floor = Math.floor;
module.exports = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};
},{}],107:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject')
  , defined = require('./_defined');
module.exports = function(it){
  return IObject(defined(it));
};
},{"./_defined":27,"./_iobject":45}],108:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./_to-integer')
  , min       = Math.min;
module.exports = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};
},{"./_to-integer":106}],109:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function(it){
  return Object(defined(it));
};
},{"./_defined":27}],110:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(it, S){
  if(!isObject(it))return it;
  var fn, val;
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to primitive value");
};
},{"./_is-object":49}],111:[function(require,module,exports){
'use strict';
if(require('./_descriptors')){
  var LIBRARY             = require('./_library')
    , global              = require('./_global')
    , fails               = require('./_fails')
    , $export             = require('./_export')
    , $typed              = require('./_typed')
    , $buffer             = require('./_typed-buffer')
    , ctx                 = require('./_ctx')
    , anInstance          = require('./_an-instance')
    , propertyDesc        = require('./_property-desc')
    , hide                = require('./_hide')
    , redefineAll         = require('./_redefine-all')
    , toInteger           = require('./_to-integer')
    , toLength            = require('./_to-length')
    , toIndex             = require('./_to-index')
    , toPrimitive         = require('./_to-primitive')
    , has                 = require('./_has')
    , same                = require('./_same-value')
    , classof             = require('./_classof')
    , isObject            = require('./_is-object')
    , toObject            = require('./_to-object')
    , isArrayIter         = require('./_is-array-iter')
    , create              = require('./_object-create')
    , getPrototypeOf      = require('./_object-gpo')
    , gOPN                = require('./_object-gopn').f
    , getIterFn           = require('./core.get-iterator-method')
    , uid                 = require('./_uid')
    , wks                 = require('./_wks')
    , createArrayMethod   = require('./_array-methods')
    , createArrayIncludes = require('./_array-includes')
    , speciesConstructor  = require('./_species-constructor')
    , ArrayIterators      = require('./es6.array.iterator')
    , Iterators           = require('./_iterators')
    , $iterDetect         = require('./_iter-detect')
    , setSpecies          = require('./_set-species')
    , arrayFill           = require('./_array-fill')
    , arrayCopyWithin     = require('./_array-copy-within')
    , $DP                 = require('./_object-dp')
    , $GOPD               = require('./_object-gopd')
    , dP                  = $DP.f
    , gOPD                = $GOPD.f
    , RangeError          = global.RangeError
    , TypeError           = global.TypeError
    , Uint8Array          = global.Uint8Array
    , ARRAY_BUFFER        = 'ArrayBuffer'
    , SHARED_BUFFER       = 'Shared' + ARRAY_BUFFER
    , BYTES_PER_ELEMENT   = 'BYTES_PER_ELEMENT'
    , PROTOTYPE           = 'prototype'
    , ArrayProto          = Array[PROTOTYPE]
    , $ArrayBuffer        = $buffer.ArrayBuffer
    , $DataView           = $buffer.DataView
    , arrayForEach        = createArrayMethod(0)
    , arrayFilter         = createArrayMethod(2)
    , arraySome           = createArrayMethod(3)
    , arrayEvery          = createArrayMethod(4)
    , arrayFind           = createArrayMethod(5)
    , arrayFindIndex      = createArrayMethod(6)
    , arrayIncludes       = createArrayIncludes(true)
    , arrayIndexOf        = createArrayIncludes(false)
    , arrayValues         = ArrayIterators.values
    , arrayKeys           = ArrayIterators.keys
    , arrayEntries        = ArrayIterators.entries
    , arrayLastIndexOf    = ArrayProto.lastIndexOf
    , arrayReduce         = ArrayProto.reduce
    , arrayReduceRight    = ArrayProto.reduceRight
    , arrayJoin           = ArrayProto.join
    , arraySort           = ArrayProto.sort
    , arraySlice          = ArrayProto.slice
    , arrayToString       = ArrayProto.toString
    , arrayToLocaleString = ArrayProto.toLocaleString
    , ITERATOR            = wks('iterator')
    , TAG                 = wks('toStringTag')
    , TYPED_CONSTRUCTOR   = uid('typed_constructor')
    , DEF_CONSTRUCTOR     = uid('def_constructor')
    , ALL_CONSTRUCTORS    = $typed.CONSTR
    , TYPED_ARRAY         = $typed.TYPED
    , VIEW                = $typed.VIEW
    , WRONG_LENGTH        = 'Wrong length!';

  var $map = createArrayMethod(1, function(O, length){
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function(){
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function(){
    new Uint8Array(1).set({});
  });

  var strictToLength = function(it, SAME){
    if(it === undefined)throw TypeError(WRONG_LENGTH);
    var number = +it
      , length = toLength(it);
    if(SAME && !same(number, length))throw RangeError(WRONG_LENGTH);
    return length;
  };

  var toOffset = function(it, BYTES){
    var offset = toInteger(it);
    if(offset < 0 || offset % BYTES)throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function(it){
    if(isObject(it) && TYPED_ARRAY in it)return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function(C, length){
    if(!(isObject(C) && TYPED_CONSTRUCTOR in C)){
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function(O, list){
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function(C, list){
    var index  = 0
      , length = list.length
      , result = allocate(C, length);
    while(length > index)result[index] = list[index++];
    return result;
  };

  var addGetter = function(it, key, internal){
    dP(it, key, {get: function(){ return this._d[internal]; }});
  };

  var $from = function from(source /*, mapfn, thisArg */){
    var O       = toObject(source)
      , aLen    = arguments.length
      , mapfn   = aLen > 1 ? arguments[1] : undefined
      , mapping = mapfn !== undefined
      , iterFn  = getIterFn(O)
      , i, length, values, result, step, iterator;
    if(iterFn != undefined && !isArrayIter(iterFn)){
      for(iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++){
        values.push(step.value);
      } O = values;
    }
    if(mapping && aLen > 2)mapfn = ctx(mapfn, arguments[2], 2);
    for(i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++){
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/*...items*/){
    var index  = 0
      , length = arguments.length
      , result = allocate(this, length);
    while(length > index)result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function(){ arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString(){
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /*, end */){
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /*, thisArg */){
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /*, start, end */){ // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /*, thisArg */){
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /*, thisArg */){
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /*, thisArg */){
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /*, thisArg */){
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /*, fromIndex */){
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /*, fromIndex */){
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator){ // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /*, fromIndex */){ // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /*, thisArg */){
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse(){
      var that   = this
        , length = validate(that).length
        , middle = Math.floor(length / 2)
        , index  = 0
        , value;
      while(index < middle){
        value         = that[index];
        that[index++] = that[--length];
        that[length]  = value;
      } return that;
    },
    some: function some(callbackfn /*, thisArg */){
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn){
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end){
      var O      = validate(this)
        , length = O.length
        , $begin = toIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end){
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /*, offset */){
    validate(this);
    var offset = toOffset(arguments[1], 1)
      , length = this.length
      , src    = toObject(arrayLike)
      , len    = toLength(src.length)
      , index  = 0;
    if(len + offset > length)throw RangeError(WRONG_LENGTH);
    while(index < len)this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries(){
      return arrayEntries.call(validate(this));
    },
    keys: function keys(){
      return arrayKeys.call(validate(this));
    },
    values: function values(){
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function(target, key){
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key){
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc){
    if(isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ){
      target[key] = desc.value;
      return target;
    } else return dP(target, key, desc);
  };

  if(!ALL_CONSTRUCTORS){
    $GOPD.f = $getDesc;
    $DP.f   = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty:           $setDesc
  });

  if(fails(function(){ arrayToString.call({}); })){
    arrayToString = arrayToLocaleString = function toString(){
      return arrayJoin.call(this);
    }
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice:          $slice,
    set:            $set,
    constructor:    function(){ /* noop */ },
    toString:       arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function(){ return this[TYPED_ARRAY]; }
  });

  module.exports = function(KEY, BYTES, wrapper, CLAMPED){
    CLAMPED = !!CLAMPED;
    var NAME       = KEY + (CLAMPED ? 'Clamped' : '') + 'Array'
      , ISNT_UINT8 = NAME != 'Uint8Array'
      , GETTER     = 'get' + KEY
      , SETTER     = 'set' + KEY
      , TypedArray = global[NAME]
      , Base       = TypedArray || {}
      , TAC        = TypedArray && getPrototypeOf(TypedArray)
      , FORCED     = !TypedArray || !$typed.ABV
      , O          = {}
      , TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function(that, index){
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function(that, index, value){
      var data = that._d;
      if(CLAMPED)value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function(that, index){
      dP(that, index, {
        get: function(){
          return getter(this, index);
        },
        set: function(value){
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if(FORCED){
      TypedArray = wrapper(function(that, data, $offset, $length){
        anInstance(that, TypedArray, NAME, '_d');
        var index  = 0
          , offset = 0
          , buffer, byteLength, length, klass;
        if(!isObject(data)){
          length     = strictToLength(data, true)
          byteLength = length * BYTES;
          buffer     = new $ArrayBuffer(byteLength);
        } else if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if($length === undefined){
            if($len % BYTES)throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if(byteLength < 0)throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if(byteLength + offset > $len)throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if(TYPED_ARRAY in data){
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while(index < length)addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if(!$iterDetect(function(iter){
      // V8 works with iterators, but fails in many other cases
      // https://code.google.com/p/v8/issues/detail?id=4552
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)){
      TypedArray = wrapper(function(that, data, $offset, $length){
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if(!isObject(data))return new Base(strictToLength(data, ISNT_UINT8));
        if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if(TYPED_ARRAY in data)return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function(key){
        if(!(key in TypedArray))hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if(!LIBRARY)TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator   = TypedArrayPrototype[ITERATOR]
      , CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined)
      , $iterator         = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if(CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)){
      dP(TypedArrayPrototype, TAG, {
        get: function(){ return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES,
      from: $from,
      of: $of
    });

    if(!(BYTES_PER_ELEMENT in TypedArrayPrototype))hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, {set: $set});

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    $export($export.P + $export.F * (TypedArrayPrototype.toString != arrayToString), NAME, {toString: arrayToString});

    $export($export.P + $export.F * fails(function(){
      new TypedArray(1).slice();
    }), NAME, {slice: $slice});

    $export($export.P + $export.F * (fails(function(){
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString()
    }) || !fails(function(){
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, {toLocaleString: $toLocaleString});

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if(!LIBRARY && !CORRECT_ITER_NAME)hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function(){ /* empty */ };
},{"./_an-instance":6,"./_array-copy-within":8,"./_array-fill":9,"./_array-includes":11,"./_array-methods":12,"./_classof":17,"./_ctx":25,"./_descriptors":28,"./_export":32,"./_fails":34,"./_global":38,"./_has":39,"./_hide":40,"./_is-array-iter":46,"./_is-object":49,"./_iter-detect":54,"./_iterators":56,"./_library":58,"./_object-create":66,"./_object-dp":67,"./_object-gopd":70,"./_object-gopn":72,"./_object-gpo":74,"./_property-desc":85,"./_redefine-all":86,"./_same-value":89,"./_set-species":91,"./_species-constructor":95,"./_to-index":105,"./_to-integer":106,"./_to-length":108,"./_to-object":109,"./_to-primitive":110,"./_typed":113,"./_typed-buffer":112,"./_uid":114,"./_wks":117,"./core.get-iterator-method":118,"./es6.array.iterator":130}],112:[function(require,module,exports){
'use strict';
var global         = require('./_global')
  , DESCRIPTORS    = require('./_descriptors')
  , LIBRARY        = require('./_library')
  , $typed         = require('./_typed')
  , hide           = require('./_hide')
  , redefineAll    = require('./_redefine-all')
  , fails          = require('./_fails')
  , anInstance     = require('./_an-instance')
  , toInteger      = require('./_to-integer')
  , toLength       = require('./_to-length')
  , gOPN           = require('./_object-gopn').f
  , dP             = require('./_object-dp').f
  , arrayFill      = require('./_array-fill')
  , setToStringTag = require('./_set-to-string-tag')
  , ARRAY_BUFFER   = 'ArrayBuffer'
  , DATA_VIEW      = 'DataView'
  , PROTOTYPE      = 'prototype'
  , WRONG_LENGTH   = 'Wrong length!'
  , WRONG_INDEX    = 'Wrong index!'
  , $ArrayBuffer   = global[ARRAY_BUFFER]
  , $DataView      = global[DATA_VIEW]
  , Math           = global.Math
  , RangeError     = global.RangeError
  , Infinity       = global.Infinity
  , BaseBuffer     = $ArrayBuffer
  , abs            = Math.abs
  , pow            = Math.pow
  , floor          = Math.floor
  , log            = Math.log
  , LN2            = Math.LN2
  , BUFFER         = 'buffer'
  , BYTE_LENGTH    = 'byteLength'
  , BYTE_OFFSET    = 'byteOffset'
  , $BUFFER        = DESCRIPTORS ? '_b' : BUFFER
  , $LENGTH        = DESCRIPTORS ? '_l' : BYTE_LENGTH
  , $OFFSET        = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
var packIEEE754 = function(value, mLen, nBytes){
  var buffer = Array(nBytes)
    , eLen   = nBytes * 8 - mLen - 1
    , eMax   = (1 << eLen) - 1
    , eBias  = eMax >> 1
    , rt     = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0
    , i      = 0
    , s      = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0
    , e, m, c;
  value = abs(value)
  if(value != value || value === Infinity){
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if(value * (c = pow(2, -e)) < 1){
      e--;
      c *= 2;
    }
    if(e + eBias >= 1){
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if(value * c >= 2){
      e++;
      c /= 2;
    }
    if(e + eBias >= eMax){
      m = 0;
      e = eMax;
    } else if(e + eBias >= 1){
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for(; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for(; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
};
var unpackIEEE754 = function(buffer, mLen, nBytes){
  var eLen  = nBytes * 8 - mLen - 1
    , eMax  = (1 << eLen) - 1
    , eBias = eMax >> 1
    , nBits = eLen - 7
    , i     = nBytes - 1
    , s     = buffer[i--]
    , e     = s & 127
    , m;
  s >>= 7;
  for(; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for(; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if(e === 0){
    e = 1 - eBias;
  } else if(e === eMax){
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
};

var unpackI32 = function(bytes){
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
};
var packI8 = function(it){
  return [it & 0xff];
};
var packI16 = function(it){
  return [it & 0xff, it >> 8 & 0xff];
};
var packI32 = function(it){
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
};
var packF64 = function(it){
  return packIEEE754(it, 52, 8);
};
var packF32 = function(it){
  return packIEEE754(it, 23, 4);
};

var addGetter = function(C, key, internal){
  dP(C[PROTOTYPE], key, {get: function(){ return this[internal]; }});
};

var get = function(view, bytes, index, isLittleEndian){
  var numIndex = +index
    , intIndex = toInteger(numIndex);
  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b
    , start = intIndex + view[$OFFSET]
    , pack  = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
};
var set = function(view, bytes, index, conversion, value, isLittleEndian){
  var numIndex = +index
    , intIndex = toInteger(numIndex);
  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b
    , start = intIndex + view[$OFFSET]
    , pack  = conversion(+value);
  for(var i = 0; i < bytes; i++)store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
};

var validateArrayBufferArguments = function(that, length){
  anInstance(that, $ArrayBuffer, ARRAY_BUFFER);
  var numberLength = +length
    , byteLength   = toLength(numberLength);
  if(numberLength != byteLength)throw RangeError(WRONG_LENGTH);
  return byteLength;
};

if(!$typed.ABV){
  $ArrayBuffer = function ArrayBuffer(length){
    var byteLength = validateArrayBufferArguments(this, length);
    this._b       = arrayFill.call(Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength){
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH]
      , offset       = toInteger(byteOffset);
    if(offset < 0 || offset > bufferLength)throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if(offset + byteLength > bufferLength)throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if(DESCRIPTORS){
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset){
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset){
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /*, littleEndian */){
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /*, littleEndian */){
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /*, littleEndian */){
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /*, littleEndian */){
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /*, littleEndian */){
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /*, littleEndian */){
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value){
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value){
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /*, littleEndian */){
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /*, littleEndian */){
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /*, littleEndian */){
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if(!fails(function(){
    new $ArrayBuffer;     // eslint-disable-line no-new
  }) || !fails(function(){
    new $ArrayBuffer(.5); // eslint-disable-line no-new
  })){
    $ArrayBuffer = function ArrayBuffer(length){
      return new BaseBuffer(validateArrayBufferArguments(this, length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for(var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j; ){
      if(!((key = keys[j++]) in $ArrayBuffer))hide($ArrayBuffer, key, BaseBuffer[key]);
    };
    if(!LIBRARY)ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2))
    , $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if(view.getInt8(0) || !view.getInt8(1))redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value){
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value){
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;
},{"./_an-instance":6,"./_array-fill":9,"./_descriptors":28,"./_fails":34,"./_global":38,"./_hide":40,"./_library":58,"./_object-dp":67,"./_object-gopn":72,"./_redefine-all":86,"./_set-to-string-tag":92,"./_to-integer":106,"./_to-length":108,"./_typed":113}],113:[function(require,module,exports){
var global = require('./_global')
  , hide   = require('./_hide')
  , uid    = require('./_uid')
  , TYPED  = uid('typed_array')
  , VIEW   = uid('view')
  , ABV    = !!(global.ArrayBuffer && global.DataView)
  , CONSTR = ABV
  , i = 0, l = 9, Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while(i < l){
  if(Typed = global[TypedArrayConstructors[i++]]){
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV:    ABV,
  CONSTR: CONSTR,
  TYPED:  TYPED,
  VIEW:   VIEW
};
},{"./_global":38,"./_hide":40,"./_uid":114}],114:[function(require,module,exports){
var id = 0
  , px = Math.random();
module.exports = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};
},{}],115:[function(require,module,exports){
var global         = require('./_global')
  , core           = require('./_core')
  , LIBRARY        = require('./_library')
  , wksExt         = require('./_wks-ext')
  , defineProperty = require('./_object-dp').f;
module.exports = function(name){
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
};
},{"./_core":23,"./_global":38,"./_library":58,"./_object-dp":67,"./_wks-ext":116}],116:[function(require,module,exports){
exports.f = require('./_wks');
},{"./_wks":117}],117:[function(require,module,exports){
var store      = require('./_shared')('wks')
  , uid        = require('./_uid')
  , Symbol     = require('./_global').Symbol
  , USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function(name){
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;
},{"./_global":38,"./_shared":94,"./_uid":114}],118:[function(require,module,exports){
var classof   = require('./_classof')
  , ITERATOR  = require('./_wks')('iterator')
  , Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function(it){
  if(it != undefined)return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};
},{"./_classof":17,"./_core":23,"./_iterators":56,"./_wks":117}],119:[function(require,module,exports){
// https://github.com/benjamingr/RexExp.escape
var $export = require('./_export')
  , $re     = require('./_replacer')(/[\\^$*+?.()|[\]{}]/g, '\\$&');

$export($export.S, 'RegExp', {escape: function escape(it){ return $re(it); }});

},{"./_export":32,"./_replacer":88}],120:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', {copyWithin: require('./_array-copy-within')});

require('./_add-to-unscopables')('copyWithin');
},{"./_add-to-unscopables":5,"./_array-copy-within":8,"./_export":32}],121:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $every  = require('./_array-methods')(4);

$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */){
    return $every(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":12,"./_export":32,"./_strict-method":96}],122:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', {fill: require('./_array-fill')});

require('./_add-to-unscopables')('fill');
},{"./_add-to-unscopables":5,"./_array-fill":9,"./_export":32}],123:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $filter = require('./_array-methods')(2);

$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */){
    return $filter(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":12,"./_export":32,"./_strict-method":96}],124:[function(require,module,exports){
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = require('./_export')
  , $find   = require('./_array-methods')(6)
  , KEY     = 'findIndex'
  , forced  = true;
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){ forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn/*, that = undefined */){
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);
},{"./_add-to-unscopables":5,"./_array-methods":12,"./_export":32}],125:[function(require,module,exports){
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = require('./_export')
  , $find   = require('./_array-methods')(5)
  , KEY     = 'find'
  , forced  = true;
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){ forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn/*, that = undefined */){
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);
},{"./_add-to-unscopables":5,"./_array-methods":12,"./_export":32}],126:[function(require,module,exports){
'use strict';
var $export  = require('./_export')
  , $forEach = require('./_array-methods')(0)
  , STRICT   = require('./_strict-method')([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */){
    return $forEach(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":12,"./_export":32,"./_strict-method":96}],127:[function(require,module,exports){
'use strict';
var ctx            = require('./_ctx')
  , $export        = require('./_export')
  , toObject       = require('./_to-object')
  , call           = require('./_iter-call')
  , isArrayIter    = require('./_is-array-iter')
  , toLength       = require('./_to-length')
  , createProperty = require('./_create-property')
  , getIterFn      = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function(iter){ Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
    var O       = toObject(arrayLike)
      , C       = typeof this == 'function' ? this : Array
      , aLen    = arguments.length
      , mapfn   = aLen > 1 ? arguments[1] : undefined
      , mapping = mapfn !== undefined
      , index   = 0
      , iterFn  = getIterFn(O)
      , length, result, step, iterator;
    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for(result = new C(length); length > index; index++){
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_create-property":24,"./_ctx":25,"./_export":32,"./_is-array-iter":46,"./_iter-call":51,"./_iter-detect":54,"./_to-length":108,"./_to-object":109,"./core.get-iterator-method":118}],128:[function(require,module,exports){
'use strict';
var $export       = require('./_export')
  , $indexOf      = require('./_array-includes')(false)
  , $native       = [].indexOf
  , NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /*, fromIndex = 0 */){
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});
},{"./_array-includes":11,"./_export":32,"./_strict-method":96}],129:[function(require,module,exports){
// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = require('./_export');

$export($export.S, 'Array', {isArray: require('./_is-array')});
},{"./_export":32,"./_is-array":47}],130:[function(require,module,exports){
'use strict';
var addToUnscopables = require('./_add-to-unscopables')
  , step             = require('./_iter-step')
  , Iterators        = require('./_iterators')
  , toIObject        = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function(iterated, kind){
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , kind  = this._k
    , index = this._i++;
  if(!O || index >= O.length){
    this._t = undefined;
    return step(1);
  }
  if(kind == 'keys'  )return step(0, index);
  if(kind == 'values')return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');
},{"./_add-to-unscopables":5,"./_iter-define":53,"./_iter-step":55,"./_iterators":56,"./_to-iobject":107}],131:[function(require,module,exports){
'use strict';
// 22.1.3.13 Array.prototype.join(separator)
var $export   = require('./_export')
  , toIObject = require('./_to-iobject')
  , arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {
  join: function join(separator){
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});
},{"./_export":32,"./_iobject":45,"./_strict-method":96,"./_to-iobject":107}],132:[function(require,module,exports){
'use strict';
var $export       = require('./_export')
  , toIObject     = require('./_to-iobject')
  , toInteger     = require('./_to-integer')
  , toLength      = require('./_to-length')
  , $native       = [].lastIndexOf
  , NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /*, fromIndex = @[*-1] */){
    // convert -0 to +0
    if(NEGATIVE_ZERO)return $native.apply(this, arguments) || 0;
    var O      = toIObject(this)
      , length = toLength(O.length)
      , index  = length - 1;
    if(arguments.length > 1)index = Math.min(index, toInteger(arguments[1]));
    if(index < 0)index = length + index;
    for(;index >= 0; index--)if(index in O)if(O[index] === searchElement)return index || 0;
    return -1;
  }
});
},{"./_export":32,"./_strict-method":96,"./_to-integer":106,"./_to-iobject":107,"./_to-length":108}],133:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $map    = require('./_array-methods')(1);

$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */){
    return $map(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":12,"./_export":32,"./_strict-method":96}],134:[function(require,module,exports){
'use strict';
var $export        = require('./_export')
  , createProperty = require('./_create-property');

// WebKit Array.of isn't generic
$export($export.S + $export.F * require('./_fails')(function(){
  function F(){}
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */){
    var index  = 0
      , aLen   = arguments.length
      , result = new (typeof this == 'function' ? this : Array)(aLen);
    while(aLen > index)createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});
},{"./_create-property":24,"./_export":32,"./_fails":34}],135:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */){
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});
},{"./_array-reduce":13,"./_export":32,"./_strict-method":96}],136:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */){
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});
},{"./_array-reduce":13,"./_export":32,"./_strict-method":96}],137:[function(require,module,exports){
'use strict';
var $export    = require('./_export')
  , html       = require('./_html')
  , cof        = require('./_cof')
  , toIndex    = require('./_to-index')
  , toLength   = require('./_to-length')
  , arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * require('./_fails')(function(){
  if(html)arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end){
    var len   = toLength(this.length)
      , klass = cof(this);
    end = end === undefined ? len : end;
    if(klass == 'Array')return arraySlice.call(this, begin, end);
    var start  = toIndex(begin, len)
      , upTo   = toIndex(end, len)
      , size   = toLength(upTo - start)
      , cloned = Array(size)
      , i      = 0;
    for(; i < size; i++)cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});
},{"./_cof":18,"./_export":32,"./_fails":34,"./_html":41,"./_to-index":105,"./_to-length":108}],138:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $some   = require('./_array-methods')(3);

$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */){
    return $some(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":12,"./_export":32,"./_strict-method":96}],139:[function(require,module,exports){
'use strict';
var $export   = require('./_export')
  , aFunction = require('./_a-function')
  , toObject  = require('./_to-object')
  , fails     = require('./_fails')
  , $sort     = [].sort
  , test      = [1, 2, 3];

$export($export.P + $export.F * (fails(function(){
  // IE8-
  test.sort(undefined);
}) || !fails(function(){
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !require('./_strict-method')($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn){
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});
},{"./_a-function":3,"./_export":32,"./_fails":34,"./_strict-method":96,"./_to-object":109}],140:[function(require,module,exports){
require('./_set-species')('Array');
},{"./_set-species":91}],141:[function(require,module,exports){
// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = require('./_export');

$export($export.S, 'Date', {now: function(){ return new Date().getTime(); }});
},{"./_export":32}],142:[function(require,module,exports){
'use strict';
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = require('./_export')
  , fails   = require('./_fails')
  , getTime = Date.prototype.getTime;

var lz = function(num){
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (fails(function(){
  return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';
}) || !fails(function(){
  new Date(NaN).toISOString();
})), 'Date', {
  toISOString: function toISOString(){
    if(!isFinite(getTime.call(this)))throw RangeError('Invalid time value');
    var d = this
      , y = d.getUTCFullYear()
      , m = d.getUTCMilliseconds()
      , s = y < 0 ? '-' : y > 9999 ? '+' : '';
    return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
      '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
      'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
      ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
  }
});
},{"./_export":32,"./_fails":34}],143:[function(require,module,exports){
'use strict';
var $export     = require('./_export')
  , toObject    = require('./_to-object')
  , toPrimitive = require('./_to-primitive');

$export($export.P + $export.F * require('./_fails')(function(){
  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({toISOString: function(){ return 1; }}) !== 1;
}), 'Date', {
  toJSON: function toJSON(key){
    var O  = toObject(this)
      , pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});
},{"./_export":32,"./_fails":34,"./_to-object":109,"./_to-primitive":110}],144:[function(require,module,exports){
var TO_PRIMITIVE = require('./_wks')('toPrimitive')
  , proto        = Date.prototype;

if(!(TO_PRIMITIVE in proto))require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));
},{"./_date-to-primitive":26,"./_hide":40,"./_wks":117}],145:[function(require,module,exports){
var DateProto    = Date.prototype
  , INVALID_DATE = 'Invalid Date'
  , TO_STRING    = 'toString'
  , $toString    = DateProto[TO_STRING]
  , getTime      = DateProto.getTime;
if(new Date(NaN) + '' != INVALID_DATE){
  require('./_redefine')(DateProto, TO_STRING, function toString(){
    var value = getTime.call(this);
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}
},{"./_redefine":87}],146:[function(require,module,exports){
// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = require('./_export');

$export($export.P, 'Function', {bind: require('./_bind')});
},{"./_bind":16,"./_export":32}],147:[function(require,module,exports){
'use strict';
var isObject       = require('./_is-object')
  , getPrototypeOf = require('./_object-gpo')
  , HAS_INSTANCE   = require('./_wks')('hasInstance')
  , FunctionProto  = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if(!(HAS_INSTANCE in FunctionProto))require('./_object-dp').f(FunctionProto, HAS_INSTANCE, {value: function(O){
  if(typeof this != 'function' || !isObject(O))return false;
  if(!isObject(this.prototype))return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while(O = getPrototypeOf(O))if(this.prototype === O)return true;
  return false;
}});
},{"./_is-object":49,"./_object-dp":67,"./_object-gpo":74,"./_wks":117}],148:[function(require,module,exports){
var dP         = require('./_object-dp').f
  , createDesc = require('./_property-desc')
  , has        = require('./_has')
  , FProto     = Function.prototype
  , nameRE     = /^\s*function ([^ (]*)/
  , NAME       = 'name';

var isExtensible = Object.isExtensible || function(){
  return true;
};

// 19.2.4.2 name
NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {
  configurable: true,
  get: function(){
    try {
      var that = this
        , name = ('' + that).match(nameRE)[1];
      has(that, NAME) || !isExtensible(that) || dP(that, NAME, createDesc(5, name));
      return name;
    } catch(e){
      return '';
    }
  }
});
},{"./_descriptors":28,"./_has":39,"./_object-dp":67,"./_property-desc":85}],149:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');

// 23.1 Map Objects
module.exports = require('./_collection')('Map', function(get){
  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key){
    var entry = strong.getEntry(this, key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value){
    return strong.def(this, key === 0 ? 0 : key, value);
  }
}, strong, true);
},{"./_collection":22,"./_collection-strong":19}],150:[function(require,module,exports){
// 20.2.2.3 Math.acosh(x)
var $export = require('./_export')
  , log1p   = require('./_math-log1p')
  , sqrt    = Math.sqrt
  , $acosh  = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN 
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x){
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});
},{"./_export":32,"./_math-log1p":60}],151:[function(require,module,exports){
// 20.2.2.5 Math.asinh(x)
var $export = require('./_export')
  , $asinh  = Math.asinh;

function asinh(x){
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0 
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {asinh: asinh});
},{"./_export":32}],152:[function(require,module,exports){
// 20.2.2.7 Math.atanh(x)
var $export = require('./_export')
  , $atanh  = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0 
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x){
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});
},{"./_export":32}],153:[function(require,module,exports){
// 20.2.2.9 Math.cbrt(x)
var $export = require('./_export')
  , sign    = require('./_math-sign');

$export($export.S, 'Math', {
  cbrt: function cbrt(x){
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});
},{"./_export":32,"./_math-sign":61}],154:[function(require,module,exports){
// 20.2.2.11 Math.clz32(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  clz32: function clz32(x){
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});
},{"./_export":32}],155:[function(require,module,exports){
// 20.2.2.12 Math.cosh(x)
var $export = require('./_export')
  , exp     = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x){
    return (exp(x = +x) + exp(-x)) / 2;
  }
});
},{"./_export":32}],156:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $export = require('./_export')
  , $expm1  = require('./_math-expm1');

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {expm1: $expm1});
},{"./_export":32,"./_math-expm1":59}],157:[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var $export   = require('./_export')
  , sign      = require('./_math-sign')
  , pow       = Math.pow
  , EPSILON   = pow(2, -52)
  , EPSILON32 = pow(2, -23)
  , MAX32     = pow(2, 127) * (2 - EPSILON32)
  , MIN32     = pow(2, -126);

var roundTiesToEven = function(n){
  return n + 1 / EPSILON - 1 / EPSILON;
};


$export($export.S, 'Math', {
  fround: function fround(x){
    var $abs  = Math.abs(x)
      , $sign = sign(x)
      , a, result;
    if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
    a = (1 + EPSILON32 / EPSILON) * $abs;
    result = a - (a - $abs);
    if(result > MAX32 || result != result)return $sign * Infinity;
    return $sign * result;
  }
});
},{"./_export":32,"./_math-sign":61}],158:[function(require,module,exports){
// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = require('./_export')
  , abs     = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars
    var sum  = 0
      , i    = 0
      , aLen = arguments.length
      , larg = 0
      , arg, div;
    while(i < aLen){
      arg = abs(arguments[i++]);
      if(larg < arg){
        div  = larg / arg;
        sum  = sum * div * div + 1;
        larg = arg;
      } else if(arg > 0){
        div  = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});
},{"./_export":32}],159:[function(require,module,exports){
// 20.2.2.18 Math.imul(x, y)
var $export = require('./_export')
  , $imul   = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * require('./_fails')(function(){
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y){
    var UINT16 = 0xffff
      , xn = +x
      , yn = +y
      , xl = UINT16 & xn
      , yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});
},{"./_export":32,"./_fails":34}],160:[function(require,module,exports){
// 20.2.2.21 Math.log10(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log10: function log10(x){
    return Math.log(x) / Math.LN10;
  }
});
},{"./_export":32}],161:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
var $export = require('./_export');

$export($export.S, 'Math', {log1p: require('./_math-log1p')});
},{"./_export":32,"./_math-log1p":60}],162:[function(require,module,exports){
// 20.2.2.22 Math.log2(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log2: function log2(x){
    return Math.log(x) / Math.LN2;
  }
});
},{"./_export":32}],163:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
var $export = require('./_export');

$export($export.S, 'Math', {sign: require('./_math-sign')});
},{"./_export":32,"./_math-sign":61}],164:[function(require,module,exports){
// 20.2.2.30 Math.sinh(x)
var $export = require('./_export')
  , expm1   = require('./_math-expm1')
  , exp     = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * require('./_fails')(function(){
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x){
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});
},{"./_export":32,"./_fails":34,"./_math-expm1":59}],165:[function(require,module,exports){
// 20.2.2.33 Math.tanh(x)
var $export = require('./_export')
  , expm1   = require('./_math-expm1')
  , exp     = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x){
    var a = expm1(x = +x)
      , b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});
},{"./_export":32,"./_math-expm1":59}],166:[function(require,module,exports){
// 20.2.2.34 Math.trunc(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  trunc: function trunc(it){
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});
},{"./_export":32}],167:[function(require,module,exports){
'use strict';
var global            = require('./_global')
  , has               = require('./_has')
  , cof               = require('./_cof')
  , inheritIfRequired = require('./_inherit-if-required')
  , toPrimitive       = require('./_to-primitive')
  , fails             = require('./_fails')
  , gOPN              = require('./_object-gopn').f
  , gOPD              = require('./_object-gopd').f
  , dP                = require('./_object-dp').f
  , $trim             = require('./_string-trim').trim
  , NUMBER            = 'Number'
  , $Number           = global[NUMBER]
  , Base              = $Number
  , proto             = $Number.prototype
  // Opera ~12 has broken Object#toString
  , BROKEN_COF        = cof(require('./_object-create')(proto)) == NUMBER
  , TRIM              = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function(argument){
  var it = toPrimitive(argument, false);
  if(typeof it == 'string' && it.length > 2){
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0)
      , third, radix, maxCode;
    if(first === 43 || first === 45){
      third = it.charCodeAt(2);
      if(third === 88 || third === 120)return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if(first === 48){
      switch(it.charCodeAt(1)){
        case 66 : case 98  : radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79 : case 111 : radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default : return +it;
      }
      for(var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++){
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if(code < 48 || code > maxCode)return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if(!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')){
  $Number = function Number(value){
    var it = arguments.length < 1 ? 0 : value
      , that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function(){ proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for(var keys = require('./_descriptors') ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++){
    if(has(Base, key = keys[j]) && !has($Number, key)){
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  require('./_redefine')(global, NUMBER, $Number);
}
},{"./_cof":18,"./_descriptors":28,"./_fails":34,"./_global":38,"./_has":39,"./_inherit-if-required":43,"./_object-create":66,"./_object-dp":67,"./_object-gopd":70,"./_object-gopn":72,"./_redefine":87,"./_string-trim":102,"./_to-primitive":110}],168:[function(require,module,exports){
// 20.1.2.1 Number.EPSILON
var $export = require('./_export');

$export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});
},{"./_export":32}],169:[function(require,module,exports){
// 20.1.2.2 Number.isFinite(number)
var $export   = require('./_export')
  , _isFinite = require('./_global').isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it){
    return typeof it == 'number' && _isFinite(it);
  }
});
},{"./_export":32,"./_global":38}],170:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var $export = require('./_export');

$export($export.S, 'Number', {isInteger: require('./_is-integer')});
},{"./_export":32,"./_is-integer":48}],171:[function(require,module,exports){
// 20.1.2.4 Number.isNaN(number)
var $export = require('./_export');

$export($export.S, 'Number', {
  isNaN: function isNaN(number){
    return number != number;
  }
});
},{"./_export":32}],172:[function(require,module,exports){
// 20.1.2.5 Number.isSafeInteger(number)
var $export   = require('./_export')
  , isInteger = require('./_is-integer')
  , abs       = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number){
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});
},{"./_export":32,"./_is-integer":48}],173:[function(require,module,exports){
// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});
},{"./_export":32}],174:[function(require,module,exports){
// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});
},{"./_export":32}],175:[function(require,module,exports){
var $export     = require('./_export')
  , $parseFloat = require('./_parse-float');
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {parseFloat: $parseFloat});
},{"./_export":32,"./_parse-float":81}],176:[function(require,module,exports){
var $export   = require('./_export')
  , $parseInt = require('./_parse-int');
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {parseInt: $parseInt});
},{"./_export":32,"./_parse-int":82}],177:[function(require,module,exports){
'use strict';
var $export      = require('./_export')
  , toInteger    = require('./_to-integer')
  , aNumberValue = require('./_a-number-value')
  , repeat       = require('./_string-repeat')
  , $toFixed     = 1..toFixed
  , floor        = Math.floor
  , data         = [0, 0, 0, 0, 0, 0]
  , ERROR        = 'Number.toFixed: incorrect invocation!'
  , ZERO         = '0';

var multiply = function(n, c){
  var i  = -1
    , c2 = c;
  while(++i < 6){
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function(n){
  var i = 6
    , c = 0;
  while(--i >= 0){
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function(){
  var i = 6
    , s = '';
  while(--i >= 0){
    if(s !== '' || i === 0 || data[i] !== 0){
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function(x, n, acc){
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function(x){
  var n  = 0
    , x2 = x;
  while(x2 >= 4096){
    n += 12;
    x2 /= 4096;
  }
  while(x2 >= 2){
    n  += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128..toFixed(0) !== '1000000000000000128'
) || !require('./_fails')(function(){
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits){
    var x = aNumberValue(this, ERROR)
      , f = toInteger(fractionDigits)
      , s = ''
      , m = ZERO
      , e, z, j, k;
    if(f < 0 || f > 20)throw RangeError(ERROR);
    if(x != x)return 'NaN';
    if(x <= -1e21 || x >= 1e21)return String(x);
    if(x < 0){
      s = '-';
      x = -x;
    }
    if(x > 1e-21){
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if(e > 0){
        multiply(0, z);
        j = f;
        while(j >= 7){
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while(j >= 23){
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if(f > 0){
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});
},{"./_a-number-value":4,"./_export":32,"./_fails":34,"./_string-repeat":101,"./_to-integer":106}],178:[function(require,module,exports){
'use strict';
var $export      = require('./_export')
  , $fails       = require('./_fails')
  , aNumberValue = require('./_a-number-value')
  , $toPrecision = 1..toPrecision;

$export($export.P + $export.F * ($fails(function(){
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function(){
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision){
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision); 
  }
});
},{"./_a-number-value":4,"./_export":32,"./_fails":34}],179:[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');

$export($export.S + $export.F, 'Object', {assign: require('./_object-assign')});
},{"./_export":32,"./_object-assign":65}],180:[function(require,module,exports){
var $export = require('./_export')
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', {create: require('./_object-create')});
},{"./_export":32,"./_object-create":66}],181:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperties: require('./_object-dps')});
},{"./_descriptors":28,"./_export":32,"./_object-dps":68}],182:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperty: require('./_object-dp').f});
},{"./_descriptors":28,"./_export":32,"./_object-dp":67}],183:[function(require,module,exports){
// 19.1.2.5 Object.freeze(O)
var isObject = require('./_is-object')
  , meta     = require('./_meta').onFreeze;

require('./_object-sap')('freeze', function($freeze){
  return function freeze(it){
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});
},{"./_is-object":49,"./_meta":62,"./_object-sap":78}],184:[function(require,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject                 = require('./_to-iobject')
  , $getOwnPropertyDescriptor = require('./_object-gopd').f;

require('./_object-sap')('getOwnPropertyDescriptor', function(){
  return function getOwnPropertyDescriptor(it, key){
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});
},{"./_object-gopd":70,"./_object-sap":78,"./_to-iobject":107}],185:[function(require,module,exports){
// 19.1.2.7 Object.getOwnPropertyNames(O)
require('./_object-sap')('getOwnPropertyNames', function(){
  return require('./_object-gopn-ext').f;
});
},{"./_object-gopn-ext":71,"./_object-sap":78}],186:[function(require,module,exports){
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject        = require('./_to-object')
  , $getPrototypeOf = require('./_object-gpo');

require('./_object-sap')('getPrototypeOf', function(){
  return function getPrototypeOf(it){
    return $getPrototypeOf(toObject(it));
  };
});
},{"./_object-gpo":74,"./_object-sap":78,"./_to-object":109}],187:[function(require,module,exports){
// 19.1.2.11 Object.isExtensible(O)
var isObject = require('./_is-object');

require('./_object-sap')('isExtensible', function($isExtensible){
  return function isExtensible(it){
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});
},{"./_is-object":49,"./_object-sap":78}],188:[function(require,module,exports){
// 19.1.2.12 Object.isFrozen(O)
var isObject = require('./_is-object');

require('./_object-sap')('isFrozen', function($isFrozen){
  return function isFrozen(it){
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});
},{"./_is-object":49,"./_object-sap":78}],189:[function(require,module,exports){
// 19.1.2.13 Object.isSealed(O)
var isObject = require('./_is-object');

require('./_object-sap')('isSealed', function($isSealed){
  return function isSealed(it){
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});
},{"./_is-object":49,"./_object-sap":78}],190:[function(require,module,exports){
// 19.1.3.10 Object.is(value1, value2)
var $export = require('./_export');
$export($export.S, 'Object', {is: require('./_same-value')});
},{"./_export":32,"./_same-value":89}],191:[function(require,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = require('./_to-object')
  , $keys    = require('./_object-keys');

require('./_object-sap')('keys', function(){
  return function keys(it){
    return $keys(toObject(it));
  };
});
},{"./_object-keys":76,"./_object-sap":78,"./_to-object":109}],192:[function(require,module,exports){
// 19.1.2.15 Object.preventExtensions(O)
var isObject = require('./_is-object')
  , meta     = require('./_meta').onFreeze;

require('./_object-sap')('preventExtensions', function($preventExtensions){
  return function preventExtensions(it){
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});
},{"./_is-object":49,"./_meta":62,"./_object-sap":78}],193:[function(require,module,exports){
// 19.1.2.17 Object.seal(O)
var isObject = require('./_is-object')
  , meta     = require('./_meta').onFreeze;

require('./_object-sap')('seal', function($seal){
  return function seal(it){
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});
},{"./_is-object":49,"./_meta":62,"./_object-sap":78}],194:[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./_export');
$export($export.S, 'Object', {setPrototypeOf: require('./_set-proto').set});
},{"./_export":32,"./_set-proto":90}],195:[function(require,module,exports){
'use strict';
// 19.1.3.6 Object.prototype.toString()
var classof = require('./_classof')
  , test    = {};
test[require('./_wks')('toStringTag')] = 'z';
if(test + '' != '[object z]'){
  require('./_redefine')(Object.prototype, 'toString', function toString(){
    return '[object ' + classof(this) + ']';
  }, true);
}
},{"./_classof":17,"./_redefine":87,"./_wks":117}],196:[function(require,module,exports){
var $export     = require('./_export')
  , $parseFloat = require('./_parse-float');
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), {parseFloat: $parseFloat});
},{"./_export":32,"./_parse-float":81}],197:[function(require,module,exports){
var $export   = require('./_export')
  , $parseInt = require('./_parse-int');
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), {parseInt: $parseInt});
},{"./_export":32,"./_parse-int":82}],198:[function(require,module,exports){
'use strict';
var LIBRARY            = require('./_library')
  , global             = require('./_global')
  , ctx                = require('./_ctx')
  , classof            = require('./_classof')
  , $export            = require('./_export')
  , isObject           = require('./_is-object')
  , aFunction          = require('./_a-function')
  , anInstance         = require('./_an-instance')
  , forOf              = require('./_for-of')
  , speciesConstructor = require('./_species-constructor')
  , task               = require('./_task').set
  , microtask          = require('./_microtask')()
  , PROMISE            = 'Promise'
  , TypeError          = global.TypeError
  , process            = global.process
  , $Promise           = global[PROMISE]
  , process            = global.process
  , isNode             = classof(process) == 'process'
  , empty              = function(){ /* empty */ }
  , Internal, GenericPromiseCapability, Wrapper;

var USE_NATIVE = !!function(){
  try {
    // correct subclassing with @@species support
    var promise     = $Promise.resolve(1)
      , FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function(exec){ exec(empty, empty); };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch(e){ /* empty */ }
}();

// helpers
var sameConstructor = function(a, b){
  // with library wrapper special case
  return a === b || a === $Promise && b === Wrapper;
};
var isThenable = function(it){
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var newPromiseCapability = function(C){
  return sameConstructor($Promise, C)
    ? new PromiseCapability(C)
    : new GenericPromiseCapability(C);
};
var PromiseCapability = GenericPromiseCapability = function(C){
  var resolve, reject;
  this.promise = new C(function($$resolve, $$reject){
    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject  = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject  = aFunction(reject);
};
var perform = function(exec){
  try {
    exec();
  } catch(e){
    return {error: e};
  }
};
var notify = function(promise, isReject){
  if(promise._n)return;
  promise._n = true;
  var chain = promise._c;
  microtask(function(){
    var value = promise._v
      , ok    = promise._s == 1
      , i     = 0;
    var run = function(reaction){
      var handler = ok ? reaction.ok : reaction.fail
        , resolve = reaction.resolve
        , reject  = reaction.reject
        , domain  = reaction.domain
        , result, then;
      try {
        if(handler){
          if(!ok){
            if(promise._h == 2)onHandleUnhandled(promise);
            promise._h = 1;
          }
          if(handler === true)result = value;
          else {
            if(domain)domain.enter();
            result = handler(value);
            if(domain)domain.exit();
          }
          if(result === reaction.promise){
            reject(TypeError('Promise-chain cycle'));
          } else if(then = isThenable(result)){
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch(e){
        reject(e);
      }
    };
    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if(isReject && !promise._h)onUnhandled(promise);
  });
};
var onUnhandled = function(promise){
  task.call(global, function(){
    var value = promise._v
      , abrupt, handler, console;
    if(isUnhandled(promise)){
      abrupt = perform(function(){
        if(isNode){
          process.emit('unhandledRejection', value, promise);
        } else if(handler = global.onunhandledrejection){
          handler({promise: promise, reason: value});
        } else if((console = global.console) && console.error){
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if(abrupt)throw abrupt.error;
  });
};
var isUnhandled = function(promise){
  if(promise._h == 1)return false;
  var chain = promise._a || promise._c
    , i     = 0
    , reaction;
  while(chain.length > i){
    reaction = chain[i++];
    if(reaction.fail || !isUnhandled(reaction.promise))return false;
  } return true;
};
var onHandleUnhandled = function(promise){
  task.call(global, function(){
    var handler;
    if(isNode){
      process.emit('rejectionHandled', promise);
    } else if(handler = global.onrejectionhandled){
      handler({promise: promise, reason: promise._v});
    }
  });
};
var $reject = function(value){
  var promise = this;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if(!promise._a)promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function(value){
  var promise = this
    , then;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if(promise === value)throw TypeError("Promise can't be resolved itself");
    if(then = isThenable(value)){
      microtask(function(){
        var wrapper = {_w: promise, _d: false}; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch(e){
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch(e){
    $reject.call({_w: promise, _d: false}, e); // wrap
  }
};

// constructor polyfill
if(!USE_NATIVE){
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor){
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch(err){
      $reject.call(this, err);
    }
  };
  Internal = function Promise(executor){
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected){
      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail   = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if(this._a)this._a.push(reaction);
      if(this._s)notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function(onRejected){
      return this.then(undefined, onRejected);
    }
  });
  PromiseCapability = function(){
    var promise  = new Internal;
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject  = ctx($reject, promise, 1);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r){
    var capability = newPromiseCapability(this)
      , $$reject   = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x){
    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
    var capability = newPromiseCapability(this)
      , $$resolve  = capability.resolve;
    $$resolve(x);
    return capability.promise;
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function(iter){
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , resolve    = capability.resolve
      , reject     = capability.reject;
    var abrupt = perform(function(){
      var values    = []
        , index     = 0
        , remaining = 1;
      forOf(iterable, false, function(promise){
        var $index        = index++
          , alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function(value){
          if(alreadyCalled)return;
          alreadyCalled  = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , reject     = capability.reject;
    var abrupt = perform(function(){
      forOf(iterable, false, function(promise){
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  }
});
},{"./_a-function":3,"./_an-instance":6,"./_classof":17,"./_core":23,"./_ctx":25,"./_export":32,"./_for-of":37,"./_global":38,"./_is-object":49,"./_iter-detect":54,"./_library":58,"./_microtask":64,"./_redefine-all":86,"./_set-species":91,"./_set-to-string-tag":92,"./_species-constructor":95,"./_task":104,"./_wks":117}],199:[function(require,module,exports){
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export   = require('./_export')
  , aFunction = require('./_a-function')
  , anObject  = require('./_an-object')
  , rApply    = (require('./_global').Reflect || {}).apply
  , fApply    = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !require('./_fails')(function(){
  rApply(function(){});
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList){
    var T = aFunction(target)
      , L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});
},{"./_a-function":3,"./_an-object":7,"./_export":32,"./_fails":34,"./_global":38}],200:[function(require,module,exports){
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export    = require('./_export')
  , create     = require('./_object-create')
  , aFunction  = require('./_a-function')
  , anObject   = require('./_an-object')
  , isObject   = require('./_is-object')
  , fails      = require('./_fails')
  , bind       = require('./_bind')
  , rConstruct = (require('./_global').Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function(){
  function F(){}
  return !(rConstruct(function(){}, [], F) instanceof F);
});
var ARGS_BUG = !fails(function(){
  rConstruct(function(){});
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /*, newTarget*/){
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if(ARGS_BUG && !NEW_TARGET_BUG)return rConstruct(Target, args, newTarget);
    if(Target == newTarget){
      // w/o altered newTarget, optimization for 0-4 arguments
      switch(args.length){
        case 0: return new Target;
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args));
    }
    // with altered newTarget, not support built-in constructors
    var proto    = newTarget.prototype
      , instance = create(isObject(proto) ? proto : Object.prototype)
      , result   = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});
},{"./_a-function":3,"./_an-object":7,"./_bind":16,"./_export":32,"./_fails":34,"./_global":38,"./_is-object":49,"./_object-create":66}],201:[function(require,module,exports){
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP          = require('./_object-dp')
  , $export     = require('./_export')
  , anObject    = require('./_an-object')
  , toPrimitive = require('./_to-primitive');

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * require('./_fails')(function(){
  Reflect.defineProperty(dP.f({}, 1, {value: 1}), 1, {value: 2});
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes){
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./_an-object":7,"./_export":32,"./_fails":34,"./_object-dp":67,"./_to-primitive":110}],202:[function(require,module,exports){
// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export  = require('./_export')
  , gOPD     = require('./_object-gopd').f
  , anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey){
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});
},{"./_an-object":7,"./_export":32,"./_object-gopd":70}],203:[function(require,module,exports){
'use strict';
// 26.1.5 Reflect.enumerate(target)
var $export  = require('./_export')
  , anObject = require('./_an-object');
var Enumerate = function(iterated){
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = []       // keys
    , key;
  for(key in iterated)keys.push(key);
};
require('./_iter-create')(Enumerate, 'Object', function(){
  var that = this
    , keys = that._k
    , key;
  do {
    if(that._i >= keys.length)return {value: undefined, done: true};
  } while(!((key = keys[that._i++]) in that._t));
  return {value: key, done: false};
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target){
    return new Enumerate(target);
  }
});
},{"./_an-object":7,"./_export":32,"./_iter-create":52}],204:[function(require,module,exports){
// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD     = require('./_object-gopd')
  , $export  = require('./_export')
  , anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){
    return gOPD.f(anObject(target), propertyKey);
  }
});
},{"./_an-object":7,"./_export":32,"./_object-gopd":70}],205:[function(require,module,exports){
// 26.1.8 Reflect.getPrototypeOf(target)
var $export  = require('./_export')
  , getProto = require('./_object-gpo')
  , anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target){
    return getProto(anObject(target));
  }
});
},{"./_an-object":7,"./_export":32,"./_object-gpo":74}],206:[function(require,module,exports){
// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD           = require('./_object-gopd')
  , getPrototypeOf = require('./_object-gpo')
  , has            = require('./_has')
  , $export        = require('./_export')
  , isObject       = require('./_is-object')
  , anObject       = require('./_an-object');

function get(target, propertyKey/*, receiver*/){
  var receiver = arguments.length < 3 ? target : arguments[2]
    , desc, proto;
  if(anObject(target) === receiver)return target[propertyKey];
  if(desc = gOPD.f(target, propertyKey))return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if(isObject(proto = getPrototypeOf(target)))return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', {get: get});
},{"./_an-object":7,"./_export":32,"./_has":39,"./_is-object":49,"./_object-gopd":70,"./_object-gpo":74}],207:[function(require,module,exports){
// 26.1.9 Reflect.has(target, propertyKey)
var $export = require('./_export');

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey){
    return propertyKey in target;
  }
});
},{"./_export":32}],208:[function(require,module,exports){
// 26.1.10 Reflect.isExtensible(target)
var $export       = require('./_export')
  , anObject      = require('./_an-object')
  , $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target){
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});
},{"./_an-object":7,"./_export":32}],209:[function(require,module,exports){
// 26.1.11 Reflect.ownKeys(target)
var $export = require('./_export');

$export($export.S, 'Reflect', {ownKeys: require('./_own-keys')});
},{"./_export":32,"./_own-keys":80}],210:[function(require,module,exports){
// 26.1.12 Reflect.preventExtensions(target)
var $export            = require('./_export')
  , anObject           = require('./_an-object')
  , $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target){
    anObject(target);
    try {
      if($preventExtensions)$preventExtensions(target);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./_an-object":7,"./_export":32}],211:[function(require,module,exports){
// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export  = require('./_export')
  , setProto = require('./_set-proto');

if(setProto)$export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto){
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./_export":32,"./_set-proto":90}],212:[function(require,module,exports){
// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP             = require('./_object-dp')
  , gOPD           = require('./_object-gopd')
  , getPrototypeOf = require('./_object-gpo')
  , has            = require('./_has')
  , $export        = require('./_export')
  , createDesc     = require('./_property-desc')
  , anObject       = require('./_an-object')
  , isObject       = require('./_is-object');

function set(target, propertyKey, V/*, receiver*/){
  var receiver = arguments.length < 4 ? target : arguments[3]
    , ownDesc  = gOPD.f(anObject(target), propertyKey)
    , existingDescriptor, proto;
  if(!ownDesc){
    if(isObject(proto = getPrototypeOf(target))){
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if(has(ownDesc, 'value')){
    if(ownDesc.writable === false || !isObject(receiver))return false;
    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
    existingDescriptor.value = V;
    dP.f(receiver, propertyKey, existingDescriptor);
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', {set: set});
},{"./_an-object":7,"./_export":32,"./_has":39,"./_is-object":49,"./_object-dp":67,"./_object-gopd":70,"./_object-gpo":74,"./_property-desc":85}],213:[function(require,module,exports){
var global            = require('./_global')
  , inheritIfRequired = require('./_inherit-if-required')
  , dP                = require('./_object-dp').f
  , gOPN              = require('./_object-gopn').f
  , isRegExp          = require('./_is-regexp')
  , $flags            = require('./_flags')
  , $RegExp           = global.RegExp
  , Base              = $RegExp
  , proto             = $RegExp.prototype
  , re1               = /a/g
  , re2               = /a/g
  // "new" creates a new object, old webkit buggy here
  , CORRECT_NEW       = new $RegExp(re1) !== re1;

if(require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function(){
  re2[require('./_wks')('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))){
  $RegExp = function RegExp(p, f){
    var tiRE = this instanceof $RegExp
      , piRE = isRegExp(p)
      , fiU  = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function(key){
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function(){ return Base[key]; },
      set: function(it){ Base[key] = it; }
    });
  };
  for(var keys = gOPN(Base), i = 0; keys.length > i; )proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  require('./_redefine')(global, 'RegExp', $RegExp);
}

require('./_set-species')('RegExp');
},{"./_descriptors":28,"./_fails":34,"./_flags":36,"./_global":38,"./_inherit-if-required":43,"./_is-regexp":50,"./_object-dp":67,"./_object-gopn":72,"./_redefine":87,"./_set-species":91,"./_wks":117}],214:[function(require,module,exports){
// 21.2.5.3 get RegExp.prototype.flags()
if(require('./_descriptors') && /./g.flags != 'g')require('./_object-dp').f(RegExp.prototype, 'flags', {
  configurable: true,
  get: require('./_flags')
});
},{"./_descriptors":28,"./_flags":36,"./_object-dp":67}],215:[function(require,module,exports){
// @@match logic
require('./_fix-re-wks')('match', 1, function(defined, MATCH, $match){
  // 21.1.3.11 String.prototype.match(regexp)
  return [function match(regexp){
    'use strict';
    var O  = defined(this)
      , fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, $match];
});
},{"./_fix-re-wks":35}],216:[function(require,module,exports){
// @@replace logic
require('./_fix-re-wks')('replace', 2, function(defined, REPLACE, $replace){
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return [function replace(searchValue, replaceValue){
    'use strict';
    var O  = defined(this)
      , fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined
      ? fn.call(searchValue, O, replaceValue)
      : $replace.call(String(O), searchValue, replaceValue);
  }, $replace];
});
},{"./_fix-re-wks":35}],217:[function(require,module,exports){
// @@search logic
require('./_fix-re-wks')('search', 1, function(defined, SEARCH, $search){
  // 21.1.3.15 String.prototype.search(regexp)
  return [function search(regexp){
    'use strict';
    var O  = defined(this)
      , fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  }, $search];
});
},{"./_fix-re-wks":35}],218:[function(require,module,exports){
// @@split logic
require('./_fix-re-wks')('split', 2, function(defined, SPLIT, $split){
  'use strict';
  var isRegExp   = require('./_is-regexp')
    , _split     = $split
    , $push      = [].push
    , $SPLIT     = 'split'
    , LENGTH     = 'length'
    , LAST_INDEX = 'lastIndex';
  if(
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ){
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
    // based on es5-shim implementation, need to rework it
    $split = function(separator, limit){
      var string = String(this);
      if(separator === undefined && limit === 0)return [];
      // If `separator` is not a regex, use native split
      if(!isRegExp(separator))return _split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var separator2, match, lastIndex, lastLength, i;
      // Doesn't need flags gy, but they don't hurt
      if(!NPCG)separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
      while(match = separatorCopy.exec(string)){
        // `separatorCopy.lastIndex` is not reliable cross-browser
        lastIndex = match.index + match[0][LENGTH];
        if(lastIndex > lastLastIndex){
          output.push(string.slice(lastLastIndex, match.index));
          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
          if(!NPCG && match[LENGTH] > 1)match[0].replace(separator2, function(){
            for(i = 1; i < arguments[LENGTH] - 2; i++)if(arguments[i] === undefined)match[i] = undefined;
          });
          if(match[LENGTH] > 1 && match.index < string[LENGTH])$push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if(output[LENGTH] >= splitLimit)break;
        }
        if(separatorCopy[LAST_INDEX] === match.index)separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if(lastLastIndex === string[LENGTH]){
        if(lastLength || !separatorCopy.test(''))output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if('0'[$SPLIT](undefined, 0)[LENGTH]){
    $split = function(separator, limit){
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
    };
  }
  // 21.1.3.17 String.prototype.split(separator, limit)
  return [function split(separator, limit){
    var O  = defined(this)
      , fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
  }, $split];
});
},{"./_fix-re-wks":35,"./_is-regexp":50}],219:[function(require,module,exports){
'use strict';
require('./es6.regexp.flags');
var anObject    = require('./_an-object')
  , $flags      = require('./_flags')
  , DESCRIPTORS = require('./_descriptors')
  , TO_STRING   = 'toString'
  , $toString   = /./[TO_STRING];

var define = function(fn){
  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if(require('./_fails')(function(){ return $toString.call({source: 'a', flags: 'b'}) != '/a/b'; })){
  define(function toString(){
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if($toString.name != TO_STRING){
  define(function toString(){
    return $toString.call(this);
  });
}
},{"./_an-object":7,"./_descriptors":28,"./_fails":34,"./_flags":36,"./_redefine":87,"./es6.regexp.flags":214}],220:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');

// 23.2 Set Objects
module.exports = require('./_collection')('Set', function(get){
  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value){
    return strong.def(this, value = value === 0 ? 0 : value, value);
  }
}, strong);
},{"./_collection":22,"./_collection-strong":19}],221:[function(require,module,exports){
'use strict';
// B.2.3.2 String.prototype.anchor(name)
require('./_string-html')('anchor', function(createHTML){
  return function anchor(name){
    return createHTML(this, 'a', 'name', name);
  }
});
},{"./_string-html":99}],222:[function(require,module,exports){
'use strict';
// B.2.3.3 String.prototype.big()
require('./_string-html')('big', function(createHTML){
  return function big(){
    return createHTML(this, 'big', '', '');
  }
});
},{"./_string-html":99}],223:[function(require,module,exports){
'use strict';
// B.2.3.4 String.prototype.blink()
require('./_string-html')('blink', function(createHTML){
  return function blink(){
    return createHTML(this, 'blink', '', '');
  }
});
},{"./_string-html":99}],224:[function(require,module,exports){
'use strict';
// B.2.3.5 String.prototype.bold()
require('./_string-html')('bold', function(createHTML){
  return function bold(){
    return createHTML(this, 'b', '', '');
  }
});
},{"./_string-html":99}],225:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $at     = require('./_string-at')(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos){
    return $at(this, pos);
  }
});
},{"./_export":32,"./_string-at":97}],226:[function(require,module,exports){
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
'use strict';
var $export   = require('./_export')
  , toLength  = require('./_to-length')
  , context   = require('./_string-context')
  , ENDS_WITH = 'endsWith'
  , $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /*, endPosition = @length */){
    var that = context(this, searchString, ENDS_WITH)
      , endPosition = arguments.length > 1 ? arguments[1] : undefined
      , len    = toLength(that.length)
      , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)
      , search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});
},{"./_export":32,"./_fails-is-regexp":33,"./_string-context":98,"./_to-length":108}],227:[function(require,module,exports){
'use strict';
// B.2.3.6 String.prototype.fixed()
require('./_string-html')('fixed', function(createHTML){
  return function fixed(){
    return createHTML(this, 'tt', '', '');
  }
});
},{"./_string-html":99}],228:[function(require,module,exports){
'use strict';
// B.2.3.7 String.prototype.fontcolor(color)
require('./_string-html')('fontcolor', function(createHTML){
  return function fontcolor(color){
    return createHTML(this, 'font', 'color', color);
  }
});
},{"./_string-html":99}],229:[function(require,module,exports){
'use strict';
// B.2.3.8 String.prototype.fontsize(size)
require('./_string-html')('fontsize', function(createHTML){
  return function fontsize(size){
    return createHTML(this, 'font', 'size', size);
  }
});
},{"./_string-html":99}],230:[function(require,module,exports){
var $export        = require('./_export')
  , toIndex        = require('./_to-index')
  , fromCharCode   = String.fromCharCode
  , $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars
    var res  = []
      , aLen = arguments.length
      , i    = 0
      , code;
    while(aLen > i){
      code = +arguments[i++];
      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});
},{"./_export":32,"./_to-index":105}],231:[function(require,module,exports){
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
'use strict';
var $export  = require('./_export')
  , context  = require('./_string-context')
  , INCLUDES = 'includes';

$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {
  includes: function includes(searchString /*, position = 0 */){
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});
},{"./_export":32,"./_fails-is-regexp":33,"./_string-context":98}],232:[function(require,module,exports){
'use strict';
// B.2.3.9 String.prototype.italics()
require('./_string-html')('italics', function(createHTML){
  return function italics(){
    return createHTML(this, 'i', '', '');
  }
});
},{"./_string-html":99}],233:[function(require,module,exports){
'use strict';
var $at  = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function(iterated){
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , index = this._i
    , point;
  if(index >= O.length)return {value: undefined, done: true};
  point = $at(O, index);
  this._i += point.length;
  return {value: point, done: false};
});
},{"./_iter-define":53,"./_string-at":97}],234:[function(require,module,exports){
'use strict';
// B.2.3.10 String.prototype.link(url)
require('./_string-html')('link', function(createHTML){
  return function link(url){
    return createHTML(this, 'a', 'href', url);
  }
});
},{"./_string-html":99}],235:[function(require,module,exports){
var $export   = require('./_export')
  , toIObject = require('./_to-iobject')
  , toLength  = require('./_to-length');

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite){
    var tpl  = toIObject(callSite.raw)
      , len  = toLength(tpl.length)
      , aLen = arguments.length
      , res  = []
      , i    = 0;
    while(len > i){
      res.push(String(tpl[i++]));
      if(i < aLen)res.push(String(arguments[i]));
    } return res.join('');
  }
});
},{"./_export":32,"./_to-iobject":107,"./_to-length":108}],236:[function(require,module,exports){
var $export = require('./_export');

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: require('./_string-repeat')
});
},{"./_export":32,"./_string-repeat":101}],237:[function(require,module,exports){
'use strict';
// B.2.3.11 String.prototype.small()
require('./_string-html')('small', function(createHTML){
  return function small(){
    return createHTML(this, 'small', '', '');
  }
});
},{"./_string-html":99}],238:[function(require,module,exports){
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
'use strict';
var $export     = require('./_export')
  , toLength    = require('./_to-length')
  , context     = require('./_string-context')
  , STARTS_WITH = 'startsWith'
  , $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /*, position = 0 */){
    var that   = context(this, searchString, STARTS_WITH)
      , index  = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length))
      , search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});
},{"./_export":32,"./_fails-is-regexp":33,"./_string-context":98,"./_to-length":108}],239:[function(require,module,exports){
'use strict';
// B.2.3.12 String.prototype.strike()
require('./_string-html')('strike', function(createHTML){
  return function strike(){
    return createHTML(this, 'strike', '', '');
  }
});
},{"./_string-html":99}],240:[function(require,module,exports){
'use strict';
// B.2.3.13 String.prototype.sub()
require('./_string-html')('sub', function(createHTML){
  return function sub(){
    return createHTML(this, 'sub', '', '');
  }
});
},{"./_string-html":99}],241:[function(require,module,exports){
'use strict';
// B.2.3.14 String.prototype.sup()
require('./_string-html')('sup', function(createHTML){
  return function sup(){
    return createHTML(this, 'sup', '', '');
  }
});
},{"./_string-html":99}],242:[function(require,module,exports){
'use strict';
// 21.1.3.25 String.prototype.trim()
require('./_string-trim')('trim', function($trim){
  return function trim(){
    return $trim(this, 3);
  };
});
},{"./_string-trim":102}],243:[function(require,module,exports){
'use strict';
// ECMAScript 6 symbols shim
var global         = require('./_global')
  , has            = require('./_has')
  , DESCRIPTORS    = require('./_descriptors')
  , $export        = require('./_export')
  , redefine       = require('./_redefine')
  , META           = require('./_meta').KEY
  , $fails         = require('./_fails')
  , shared         = require('./_shared')
  , setToStringTag = require('./_set-to-string-tag')
  , uid            = require('./_uid')
  , wks            = require('./_wks')
  , wksExt         = require('./_wks-ext')
  , wksDefine      = require('./_wks-define')
  , keyOf          = require('./_keyof')
  , enumKeys       = require('./_enum-keys')
  , isArray        = require('./_is-array')
  , anObject       = require('./_an-object')
  , toIObject      = require('./_to-iobject')
  , toPrimitive    = require('./_to-primitive')
  , createDesc     = require('./_property-desc')
  , _create        = require('./_object-create')
  , gOPNExt        = require('./_object-gopn-ext')
  , $GOPD          = require('./_object-gopd')
  , $DP            = require('./_object-dp')
  , $keys          = require('./_object-keys')
  , gOPD           = $GOPD.f
  , dP             = $DP.f
  , gOPN           = gOPNExt.f
  , $Symbol        = global.Symbol
  , $JSON          = global.JSON
  , _stringify     = $JSON && $JSON.stringify
  , PROTOTYPE      = 'prototype'
  , HIDDEN         = wks('_hidden')
  , TO_PRIMITIVE   = wks('toPrimitive')
  , isEnum         = {}.propertyIsEnumerable
  , SymbolRegistry = shared('symbol-registry')
  , AllSymbols     = shared('symbols')
  , OPSymbols      = shared('op-symbols')
  , ObjectProto    = Object[PROTOTYPE]
  , USE_NATIVE     = typeof $Symbol == 'function'
  , QObject        = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function(){
  return _create(dP({}, 'a', {
    get: function(){ return dP(this, 'a', {value: 7}).a; }
  })).a != 7;
}) ? function(it, key, D){
  var protoDesc = gOPD(ObjectProto, key);
  if(protoDesc)delete ObjectProto[key];
  dP(it, key, D);
  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function(tag){
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
  return typeof it == 'symbol';
} : function(it){
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D){
  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if(has(AllSymbols, key)){
    if(!D.enumerable){
      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
      D = _create(D, {enumerable: createDesc(0, false)});
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P){
  anObject(it);
  var keys = enumKeys(P = toIObject(P))
    , i    = 0
    , l = keys.length
    , key;
  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P){
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key){
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
  it  = toIObject(it);
  key = toPrimitive(key, true);
  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
  var D = gOPD(it, key);
  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it){
  var names  = gOPN(toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
  var IS_OP  = it === ObjectProto
    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if(!USE_NATIVE){
  $Symbol = function Symbol(){
    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function(value){
      if(this === ObjectProto)$set.call(OPSymbols, value);
      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f   = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f  = $propertyIsEnumerable;
  require('./_object-gops').f = $getOwnPropertySymbols;

  if(DESCRIPTORS && !require('./_library')){
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function(name){
    return wrap(wks(name));
  }
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

for(var symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);

for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function(key){
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(key){
    if(isSymbol(key))return keyOf(SymbolRegistry, key);
    throw TypeError(key + ' is not a symbol!');
  },
  useSetter: function(){ setter = true; },
  useSimple: function(){ setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it){
    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
    var args = [it]
      , i    = 1
      , replacer, $replacer;
    while(arguments.length > i)args.push(arguments[i++]);
    replacer = args[1];
    if(typeof replacer == 'function')$replacer = replacer;
    if($replacer || !isArray(replacer))replacer = function(key, value){
      if($replacer)value = $replacer.call(this, key, value);
      if(!isSymbol(value))return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);
},{"./_an-object":7,"./_descriptors":28,"./_enum-keys":31,"./_export":32,"./_fails":34,"./_global":38,"./_has":39,"./_hide":40,"./_is-array":47,"./_keyof":57,"./_library":58,"./_meta":62,"./_object-create":66,"./_object-dp":67,"./_object-gopd":70,"./_object-gopn":72,"./_object-gopn-ext":71,"./_object-gops":73,"./_object-keys":76,"./_object-pie":77,"./_property-desc":85,"./_redefine":87,"./_set-to-string-tag":92,"./_shared":94,"./_to-iobject":107,"./_to-primitive":110,"./_uid":114,"./_wks":117,"./_wks-define":115,"./_wks-ext":116}],244:[function(require,module,exports){
'use strict';
var $export      = require('./_export')
  , $typed       = require('./_typed')
  , buffer       = require('./_typed-buffer')
  , anObject     = require('./_an-object')
  , toIndex      = require('./_to-index')
  , toLength     = require('./_to-length')
  , isObject     = require('./_is-object')
  , ArrayBuffer  = require('./_global').ArrayBuffer
  , speciesConstructor = require('./_species-constructor')
  , $ArrayBuffer = buffer.ArrayBuffer
  , $DataView    = buffer.DataView
  , $isView      = $typed.ABV && ArrayBuffer.isView
  , $slice       = $ArrayBuffer.prototype.slice
  , VIEW         = $typed.VIEW
  , ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {ArrayBuffer: $ArrayBuffer});

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it){
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * require('./_fails')(function(){
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end){
    if($slice !== undefined && end === undefined)return $slice.call(anObject(this), start); // FF fix
    var len    = anObject(this).byteLength
      , first  = toIndex(start, len)
      , final  = toIndex(end === undefined ? len : end, len)
      , result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first))
      , viewS  = new $DataView(this)
      , viewT  = new $DataView(result)
      , index  = 0;
    while(first < final){
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

require('./_set-species')(ARRAY_BUFFER);
},{"./_an-object":7,"./_export":32,"./_fails":34,"./_global":38,"./_is-object":49,"./_set-species":91,"./_species-constructor":95,"./_to-index":105,"./_to-length":108,"./_typed":113,"./_typed-buffer":112}],245:[function(require,module,exports){
var $export = require('./_export');
$export($export.G + $export.W + $export.F * !require('./_typed').ABV, {
  DataView: require('./_typed-buffer').DataView
});
},{"./_export":32,"./_typed":113,"./_typed-buffer":112}],246:[function(require,module,exports){
require('./_typed-array')('Float32', 4, function(init){
  return function Float32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":111}],247:[function(require,module,exports){
require('./_typed-array')('Float64', 8, function(init){
  return function Float64Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":111}],248:[function(require,module,exports){
require('./_typed-array')('Int16', 2, function(init){
  return function Int16Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":111}],249:[function(require,module,exports){
require('./_typed-array')('Int32', 4, function(init){
  return function Int32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":111}],250:[function(require,module,exports){
require('./_typed-array')('Int8', 1, function(init){
  return function Int8Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":111}],251:[function(require,module,exports){
require('./_typed-array')('Uint16', 2, function(init){
  return function Uint16Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":111}],252:[function(require,module,exports){
require('./_typed-array')('Uint32', 4, function(init){
  return function Uint32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":111}],253:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function(init){
  return function Uint8Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":111}],254:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function(init){
  return function Uint8ClampedArray(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
}, true);
},{"./_typed-array":111}],255:[function(require,module,exports){
'use strict';
var each         = require('./_array-methods')(0)
  , redefine     = require('./_redefine')
  , meta         = require('./_meta')
  , assign       = require('./_object-assign')
  , weak         = require('./_collection-weak')
  , isObject     = require('./_is-object')
  , getWeak      = meta.getWeak
  , isExtensible = Object.isExtensible
  , uncaughtFrozenStore = weak.ufstore
  , tmp          = {}
  , InternalMap;

var wrapper = function(get){
  return function WeakMap(){
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key){
    if(isObject(key)){
      var data = getWeak(key);
      if(data === true)return uncaughtFrozenStore(this).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value){
    return weak.def(this, key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = require('./_collection')('WeakMap', wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
  InternalMap = weak.getConstructor(wrapper);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function(key){
    var proto  = $WeakMap.prototype
      , method = proto[key];
    redefine(proto, key, function(a, b){
      // store frozen objects on internal weakmap shim
      if(isObject(a) && !isExtensible(a)){
        if(!this._f)this._f = new InternalMap;
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}
},{"./_array-methods":12,"./_collection":22,"./_collection-weak":21,"./_is-object":49,"./_meta":62,"./_object-assign":65,"./_redefine":87}],256:[function(require,module,exports){
'use strict';
var weak = require('./_collection-weak');

// 23.4 WeakSet Objects
require('./_collection')('WeakSet', function(get){
  return function WeakSet(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value){
    return weak.def(this, value, true);
  }
}, weak, false, true);
},{"./_collection":22,"./_collection-weak":21}],257:[function(require,module,exports){
'use strict';
// https://github.com/tc39/Array.prototype.includes
var $export   = require('./_export')
  , $includes = require('./_array-includes')(true);

$export($export.P, 'Array', {
  includes: function includes(el /*, fromIndex = 0 */){
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

require('./_add-to-unscopables')('includes');
},{"./_add-to-unscopables":5,"./_array-includes":11,"./_export":32}],258:[function(require,module,exports){
// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
var $export   = require('./_export')
  , microtask = require('./_microtask')()
  , process   = require('./_global').process
  , isNode    = require('./_cof')(process) == 'process';

$export($export.G, {
  asap: function asap(fn){
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});
},{"./_cof":18,"./_export":32,"./_global":38,"./_microtask":64}],259:[function(require,module,exports){
// https://github.com/ljharb/proposal-is-error
var $export = require('./_export')
  , cof     = require('./_cof');

$export($export.S, 'Error', {
  isError: function isError(it){
    return cof(it) === 'Error';
  }
});
},{"./_cof":18,"./_export":32}],260:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export  = require('./_export');

$export($export.P + $export.R, 'Map', {toJSON: require('./_collection-to-json')('Map')});
},{"./_collection-to-json":20,"./_export":32}],261:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  iaddh: function iaddh(x0, x1, y0, y1){
    var $x0 = x0 >>> 0
      , $x1 = x1 >>> 0
      , $y0 = y0 >>> 0;
    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
  }
});
},{"./_export":32}],262:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  imulh: function imulh(u, v){
    var UINT16 = 0xffff
      , $u = +u
      , $v = +v
      , u0 = $u & UINT16
      , v0 = $v & UINT16
      , u1 = $u >> 16
      , v1 = $v >> 16
      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
  }
});
},{"./_export":32}],263:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  isubh: function isubh(x0, x1, y0, y1){
    var $x0 = x0 >>> 0
      , $x1 = x1 >>> 0
      , $y0 = y0 >>> 0;
    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
  }
});
},{"./_export":32}],264:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  umulh: function umulh(u, v){
    var UINT16 = 0xffff
      , $u = +u
      , $v = +v
      , u0 = $u & UINT16
      , v0 = $v & UINT16
      , u1 = $u >>> 16
      , v1 = $v >>> 16
      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
  }
});
},{"./_export":32}],265:[function(require,module,exports){
'use strict';
var $export         = require('./_export')
  , toObject        = require('./_to-object')
  , aFunction       = require('./_a-function')
  , $defineProperty = require('./_object-dp');

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter){
    $defineProperty.f(toObject(this), P, {get: aFunction(getter), enumerable: true, configurable: true});
  }
});
},{"./_a-function":3,"./_descriptors":28,"./_export":32,"./_object-dp":67,"./_object-forced-pam":69,"./_to-object":109}],266:[function(require,module,exports){
'use strict';
var $export         = require('./_export')
  , toObject        = require('./_to-object')
  , aFunction       = require('./_a-function')
  , $defineProperty = require('./_object-dp');

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter){
    $defineProperty.f(toObject(this), P, {set: aFunction(setter), enumerable: true, configurable: true});
  }
});
},{"./_a-function":3,"./_descriptors":28,"./_export":32,"./_object-dp":67,"./_object-forced-pam":69,"./_to-object":109}],267:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export  = require('./_export')
  , $entries = require('./_object-to-array')(true);

$export($export.S, 'Object', {
  entries: function entries(it){
    return $entries(it);
  }
});
},{"./_export":32,"./_object-to-array":79}],268:[function(require,module,exports){
// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export        = require('./_export')
  , ownKeys        = require('./_own-keys')
  , toIObject      = require('./_to-iobject')
  , gOPD           = require('./_object-gopd')
  , createProperty = require('./_create-property');

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){
    var O       = toIObject(object)
      , getDesc = gOPD.f
      , keys    = ownKeys(O)
      , result  = {}
      , i       = 0
      , key;
    while(keys.length > i)createProperty(result, key = keys[i++], getDesc(O, key));
    return result;
  }
});
},{"./_create-property":24,"./_export":32,"./_object-gopd":70,"./_own-keys":80,"./_to-iobject":107}],269:[function(require,module,exports){
'use strict';
var $export                  = require('./_export')
  , toObject                 = require('./_to-object')
  , toPrimitive              = require('./_to-primitive')
  , getPrototypeOf           = require('./_object-gpo')
  , getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupGetter__: function __lookupGetter__(P){
    var O = toObject(this)
      , K = toPrimitive(P, true)
      , D;
    do {
      if(D = getOwnPropertyDescriptor(O, K))return D.get;
    } while(O = getPrototypeOf(O));
  }
});
},{"./_descriptors":28,"./_export":32,"./_object-forced-pam":69,"./_object-gopd":70,"./_object-gpo":74,"./_to-object":109,"./_to-primitive":110}],270:[function(require,module,exports){
'use strict';
var $export                  = require('./_export')
  , toObject                 = require('./_to-object')
  , toPrimitive              = require('./_to-primitive')
  , getPrototypeOf           = require('./_object-gpo')
  , getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupSetter__: function __lookupSetter__(P){
    var O = toObject(this)
      , K = toPrimitive(P, true)
      , D;
    do {
      if(D = getOwnPropertyDescriptor(O, K))return D.set;
    } while(O = getPrototypeOf(O));
  }
});
},{"./_descriptors":28,"./_export":32,"./_object-forced-pam":69,"./_object-gopd":70,"./_object-gpo":74,"./_to-object":109,"./_to-primitive":110}],271:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export')
  , $values = require('./_object-to-array')(false);

$export($export.S, 'Object', {
  values: function values(it){
    return $values(it);
  }
});
},{"./_export":32,"./_object-to-array":79}],272:[function(require,module,exports){
'use strict';
// https://github.com/zenparsing/es-observable
var $export     = require('./_export')
  , global      = require('./_global')
  , core        = require('./_core')
  , microtask   = require('./_microtask')()
  , OBSERVABLE  = require('./_wks')('observable')
  , aFunction   = require('./_a-function')
  , anObject    = require('./_an-object')
  , anInstance  = require('./_an-instance')
  , redefineAll = require('./_redefine-all')
  , hide        = require('./_hide')
  , forOf       = require('./_for-of')
  , RETURN      = forOf.RETURN;

var getMethod = function(fn){
  return fn == null ? undefined : aFunction(fn);
};

var cleanupSubscription = function(subscription){
  var cleanup = subscription._c;
  if(cleanup){
    subscription._c = undefined;
    cleanup();
  }
};

var subscriptionClosed = function(subscription){
  return subscription._o === undefined;
};

var closeSubscription = function(subscription){
  if(!subscriptionClosed(subscription)){
    subscription._o = undefined;
    cleanupSubscription(subscription);
  }
};

var Subscription = function(observer, subscriber){
  anObject(observer);
  this._c = undefined;
  this._o = observer;
  observer = new SubscriptionObserver(this);
  try {
    var cleanup      = subscriber(observer)
      , subscription = cleanup;
    if(cleanup != null){
      if(typeof cleanup.unsubscribe === 'function')cleanup = function(){ subscription.unsubscribe(); };
      else aFunction(cleanup);
      this._c = cleanup;
    }
  } catch(e){
    observer.error(e);
    return;
  } if(subscriptionClosed(this))cleanupSubscription(this);
};

Subscription.prototype = redefineAll({}, {
  unsubscribe: function unsubscribe(){ closeSubscription(this); }
});

var SubscriptionObserver = function(subscription){
  this._s = subscription;
};

SubscriptionObserver.prototype = redefineAll({}, {
  next: function next(value){
    var subscription = this._s;
    if(!subscriptionClosed(subscription)){
      var observer = subscription._o;
      try {
        var m = getMethod(observer.next);
        if(m)return m.call(observer, value);
      } catch(e){
        try {
          closeSubscription(subscription);
        } finally {
          throw e;
        }
      }
    }
  },
  error: function error(value){
    var subscription = this._s;
    if(subscriptionClosed(subscription))throw value;
    var observer = subscription._o;
    subscription._o = undefined;
    try {
      var m = getMethod(observer.error);
      if(!m)throw value;
      value = m.call(observer, value);
    } catch(e){
      try {
        cleanupSubscription(subscription);
      } finally {
        throw e;
      }
    } cleanupSubscription(subscription);
    return value;
  },
  complete: function complete(value){
    var subscription = this._s;
    if(!subscriptionClosed(subscription)){
      var observer = subscription._o;
      subscription._o = undefined;
      try {
        var m = getMethod(observer.complete);
        value = m ? m.call(observer, value) : undefined;
      } catch(e){
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      } cleanupSubscription(subscription);
      return value;
    }
  }
});

var $Observable = function Observable(subscriber){
  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
};

redefineAll($Observable.prototype, {
  subscribe: function subscribe(observer){
    return new Subscription(observer, this._f);
  },
  forEach: function forEach(fn){
    var that = this;
    return new (core.Promise || global.Promise)(function(resolve, reject){
      aFunction(fn);
      var subscription = that.subscribe({
        next : function(value){
          try {
            return fn(value);
          } catch(e){
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  }
});

redefineAll($Observable, {
  from: function from(x){
    var C = typeof this === 'function' ? this : $Observable;
    var method = getMethod(anObject(x)[OBSERVABLE]);
    if(method){
      var observable = anObject(method.call(x));
      return observable.constructor === C ? observable : new C(function(observer){
        return observable.subscribe(observer);
      });
    }
    return new C(function(observer){
      var done = false;
      microtask(function(){
        if(!done){
          try {
            if(forOf(x, false, function(it){
              observer.next(it);
              if(done)return RETURN;
            }) === RETURN)return;
          } catch(e){
            if(done)throw e;
            observer.error(e);
            return;
          } observer.complete();
        }
      });
      return function(){ done = true; };
    });
  },
  of: function of(){
    for(var i = 0, l = arguments.length, items = Array(l); i < l;)items[i] = arguments[i++];
    return new (typeof this === 'function' ? this : $Observable)(function(observer){
      var done = false;
      microtask(function(){
        if(!done){
          for(var i = 0; i < items.length; ++i){
            observer.next(items[i]);
            if(done)return;
          } observer.complete();
        }
      });
      return function(){ done = true; };
    });
  }
});

hide($Observable.prototype, OBSERVABLE, function(){ return this; });

$export($export.G, {Observable: $Observable});

require('./_set-species')('Observable');
},{"./_a-function":3,"./_an-instance":6,"./_an-object":7,"./_core":23,"./_export":32,"./_for-of":37,"./_global":38,"./_hide":40,"./_microtask":64,"./_redefine-all":86,"./_set-species":91,"./_wks":117}],273:[function(require,module,exports){
var metadata                  = require('./_metadata')
  , anObject                  = require('./_an-object')
  , toMetaKey                 = metadata.key
  , ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey){
  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
}});
},{"./_an-object":7,"./_metadata":63}],274:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , toMetaKey              = metadata.key
  , getOrCreateMetadataMap = metadata.map
  , store                  = metadata.store;

metadata.exp({deleteMetadata: function deleteMetadata(metadataKey, target /*, targetKey */){
  var targetKey   = arguments.length < 3 ? undefined : toMetaKey(arguments[2])
    , metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
  if(metadataMap === undefined || !metadataMap['delete'](metadataKey))return false;
  if(metadataMap.size)return true;
  var targetMetadata = store.get(target);
  targetMetadata['delete'](targetKey);
  return !!targetMetadata.size || store['delete'](target);
}});
},{"./_an-object":7,"./_metadata":63}],275:[function(require,module,exports){
var Set                     = require('./es6.set')
  , from                    = require('./_array-from-iterable')
  , metadata                = require('./_metadata')
  , anObject                = require('./_an-object')
  , getPrototypeOf          = require('./_object-gpo')
  , ordinaryOwnMetadataKeys = metadata.keys
  , toMetaKey               = metadata.key;

var ordinaryMetadataKeys = function(O, P){
  var oKeys  = ordinaryOwnMetadataKeys(O, P)
    , parent = getPrototypeOf(O);
  if(parent === null)return oKeys;
  var pKeys  = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({getMetadataKeys: function getMetadataKeys(target /*, targetKey */){
  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
}});
},{"./_an-object":7,"./_array-from-iterable":10,"./_metadata":63,"./_object-gpo":74,"./es6.set":220}],276:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , getPrototypeOf         = require('./_object-gpo')
  , ordinaryHasOwnMetadata = metadata.has
  , ordinaryGetOwnMetadata = metadata.get
  , toMetaKey              = metadata.key;

var ordinaryGetMetadata = function(MetadataKey, O, P){
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if(hasOwn)return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({getMetadata: function getMetadata(metadataKey, target /*, targetKey */){
  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":7,"./_metadata":63,"./_object-gpo":74}],277:[function(require,module,exports){
var metadata                = require('./_metadata')
  , anObject                = require('./_an-object')
  , ordinaryOwnMetadataKeys = metadata.keys
  , toMetaKey               = metadata.key;

metadata.exp({getOwnMetadataKeys: function getOwnMetadataKeys(target /*, targetKey */){
  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
}});
},{"./_an-object":7,"./_metadata":63}],278:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , ordinaryGetOwnMetadata = metadata.get
  , toMetaKey              = metadata.key;

metadata.exp({getOwnMetadata: function getOwnMetadata(metadataKey, target /*, targetKey */){
  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":7,"./_metadata":63}],279:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , getPrototypeOf         = require('./_object-gpo')
  , ordinaryHasOwnMetadata = metadata.has
  , toMetaKey              = metadata.key;

var ordinaryHasMetadata = function(MetadataKey, O, P){
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if(hasOwn)return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({hasMetadata: function hasMetadata(metadataKey, target /*, targetKey */){
  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":7,"./_metadata":63,"./_object-gpo":74}],280:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , ordinaryHasOwnMetadata = metadata.has
  , toMetaKey              = metadata.key;

metadata.exp({hasOwnMetadata: function hasOwnMetadata(metadataKey, target /*, targetKey */){
  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":7,"./_metadata":63}],281:[function(require,module,exports){
var metadata                  = require('./_metadata')
  , anObject                  = require('./_an-object')
  , aFunction                 = require('./_a-function')
  , toMetaKey                 = metadata.key
  , ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({metadata: function metadata(metadataKey, metadataValue){
  return function decorator(target, targetKey){
    ordinaryDefineOwnMetadata(
      metadataKey, metadataValue,
      (targetKey !== undefined ? anObject : aFunction)(target),
      toMetaKey(targetKey)
    );
  };
}});
},{"./_a-function":3,"./_an-object":7,"./_metadata":63}],282:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export  = require('./_export');

$export($export.P + $export.R, 'Set', {toJSON: require('./_collection-to-json')('Set')});
},{"./_collection-to-json":20,"./_export":32}],283:[function(require,module,exports){
'use strict';
// https://github.com/mathiasbynens/String.prototype.at
var $export = require('./_export')
  , $at     = require('./_string-at')(true);

$export($export.P, 'String', {
  at: function at(pos){
    return $at(this, pos);
  }
});
},{"./_export":32,"./_string-at":97}],284:[function(require,module,exports){
'use strict';
// https://tc39.github.io/String.prototype.matchAll/
var $export     = require('./_export')
  , defined     = require('./_defined')
  , toLength    = require('./_to-length')
  , isRegExp    = require('./_is-regexp')
  , getFlags    = require('./_flags')
  , RegExpProto = RegExp.prototype;

var $RegExpStringIterator = function(regexp, string){
  this._r = regexp;
  this._s = string;
};

require('./_iter-create')($RegExpStringIterator, 'RegExp String', function next(){
  var match = this._r.exec(this._s);
  return {value: match, done: match === null};
});

$export($export.P, 'String', {
  matchAll: function matchAll(regexp){
    defined(this);
    if(!isRegExp(regexp))throw TypeError(regexp + ' is not a regexp!');
    var S     = String(this)
      , flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp)
      , rx    = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
    rx.lastIndex = toLength(regexp.lastIndex);
    return new $RegExpStringIterator(rx, S);
  }
});
},{"./_defined":27,"./_export":32,"./_flags":36,"./_is-regexp":50,"./_iter-create":52,"./_to-length":108}],285:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export')
  , $pad    = require('./_string-pad');

$export($export.P, 'String', {
  padEnd: function padEnd(maxLength /*, fillString = ' ' */){
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});
},{"./_export":32,"./_string-pad":100}],286:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export')
  , $pad    = require('./_string-pad');

$export($export.P, 'String', {
  padStart: function padStart(maxLength /*, fillString = ' ' */){
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});
},{"./_export":32,"./_string-pad":100}],287:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimLeft', function($trim){
  return function trimLeft(){
    return $trim(this, 1);
  };
}, 'trimStart');
},{"./_string-trim":102}],288:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimRight', function($trim){
  return function trimRight(){
    return $trim(this, 2);
  };
}, 'trimEnd');
},{"./_string-trim":102}],289:[function(require,module,exports){
require('./_wks-define')('asyncIterator');
},{"./_wks-define":115}],290:[function(require,module,exports){
require('./_wks-define')('observable');
},{"./_wks-define":115}],291:[function(require,module,exports){
// https://github.com/ljharb/proposal-global
var $export = require('./_export');

$export($export.S, 'System', {global: require('./_global')});
},{"./_export":32,"./_global":38}],292:[function(require,module,exports){
var $iterators    = require('./es6.array.iterator')
  , redefine      = require('./_redefine')
  , global        = require('./_global')
  , hide          = require('./_hide')
  , Iterators     = require('./_iterators')
  , wks           = require('./_wks')
  , ITERATOR      = wks('iterator')
  , TO_STRING_TAG = wks('toStringTag')
  , ArrayValues   = Iterators.Array;

for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
  var NAME       = collections[i]
    , Collection = global[NAME]
    , proto      = Collection && Collection.prototype
    , key;
  if(proto){
    if(!proto[ITERATOR])hide(proto, ITERATOR, ArrayValues);
    if(!proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    for(key in $iterators)if(!proto[key])redefine(proto, key, $iterators[key], true);
  }
}
},{"./_global":38,"./_hide":40,"./_iterators":56,"./_redefine":87,"./_wks":117,"./es6.array.iterator":130}],293:[function(require,module,exports){
var $export = require('./_export')
  , $task   = require('./_task');
$export($export.G + $export.B, {
  setImmediate:   $task.set,
  clearImmediate: $task.clear
});
},{"./_export":32,"./_task":104}],294:[function(require,module,exports){
// ie9- setTimeout & setInterval additional parameters fix
var global     = require('./_global')
  , $export    = require('./_export')
  , invoke     = require('./_invoke')
  , partial    = require('./_partial')
  , navigator  = global.navigator
  , MSIE       = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
var wrap = function(set){
  return MSIE ? function(fn, time /*, ...args */){
    return set(invoke(
      partial,
      [].slice.call(arguments, 2),
      typeof fn == 'function' ? fn : Function(fn)
    ), time);
  } : set;
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout:  wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});
},{"./_export":32,"./_global":38,"./_invoke":44,"./_partial":83}],295:[function(require,module,exports){
require('./modules/es6.symbol');
require('./modules/es6.object.create');
require('./modules/es6.object.define-property');
require('./modules/es6.object.define-properties');
require('./modules/es6.object.get-own-property-descriptor');
require('./modules/es6.object.get-prototype-of');
require('./modules/es6.object.keys');
require('./modules/es6.object.get-own-property-names');
require('./modules/es6.object.freeze');
require('./modules/es6.object.seal');
require('./modules/es6.object.prevent-extensions');
require('./modules/es6.object.is-frozen');
require('./modules/es6.object.is-sealed');
require('./modules/es6.object.is-extensible');
require('./modules/es6.object.assign');
require('./modules/es6.object.is');
require('./modules/es6.object.set-prototype-of');
require('./modules/es6.object.to-string');
require('./modules/es6.function.bind');
require('./modules/es6.function.name');
require('./modules/es6.function.has-instance');
require('./modules/es6.parse-int');
require('./modules/es6.parse-float');
require('./modules/es6.number.constructor');
require('./modules/es6.number.to-fixed');
require('./modules/es6.number.to-precision');
require('./modules/es6.number.epsilon');
require('./modules/es6.number.is-finite');
require('./modules/es6.number.is-integer');
require('./modules/es6.number.is-nan');
require('./modules/es6.number.is-safe-integer');
require('./modules/es6.number.max-safe-integer');
require('./modules/es6.number.min-safe-integer');
require('./modules/es6.number.parse-float');
require('./modules/es6.number.parse-int');
require('./modules/es6.math.acosh');
require('./modules/es6.math.asinh');
require('./modules/es6.math.atanh');
require('./modules/es6.math.cbrt');
require('./modules/es6.math.clz32');
require('./modules/es6.math.cosh');
require('./modules/es6.math.expm1');
require('./modules/es6.math.fround');
require('./modules/es6.math.hypot');
require('./modules/es6.math.imul');
require('./modules/es6.math.log10');
require('./modules/es6.math.log1p');
require('./modules/es6.math.log2');
require('./modules/es6.math.sign');
require('./modules/es6.math.sinh');
require('./modules/es6.math.tanh');
require('./modules/es6.math.trunc');
require('./modules/es6.string.from-code-point');
require('./modules/es6.string.raw');
require('./modules/es6.string.trim');
require('./modules/es6.string.iterator');
require('./modules/es6.string.code-point-at');
require('./modules/es6.string.ends-with');
require('./modules/es6.string.includes');
require('./modules/es6.string.repeat');
require('./modules/es6.string.starts-with');
require('./modules/es6.string.anchor');
require('./modules/es6.string.big');
require('./modules/es6.string.blink');
require('./modules/es6.string.bold');
require('./modules/es6.string.fixed');
require('./modules/es6.string.fontcolor');
require('./modules/es6.string.fontsize');
require('./modules/es6.string.italics');
require('./modules/es6.string.link');
require('./modules/es6.string.small');
require('./modules/es6.string.strike');
require('./modules/es6.string.sub');
require('./modules/es6.string.sup');
require('./modules/es6.date.now');
require('./modules/es6.date.to-json');
require('./modules/es6.date.to-iso-string');
require('./modules/es6.date.to-string');
require('./modules/es6.date.to-primitive');
require('./modules/es6.array.is-array');
require('./modules/es6.array.from');
require('./modules/es6.array.of');
require('./modules/es6.array.join');
require('./modules/es6.array.slice');
require('./modules/es6.array.sort');
require('./modules/es6.array.for-each');
require('./modules/es6.array.map');
require('./modules/es6.array.filter');
require('./modules/es6.array.some');
require('./modules/es6.array.every');
require('./modules/es6.array.reduce');
require('./modules/es6.array.reduce-right');
require('./modules/es6.array.index-of');
require('./modules/es6.array.last-index-of');
require('./modules/es6.array.copy-within');
require('./modules/es6.array.fill');
require('./modules/es6.array.find');
require('./modules/es6.array.find-index');
require('./modules/es6.array.species');
require('./modules/es6.array.iterator');
require('./modules/es6.regexp.constructor');
require('./modules/es6.regexp.to-string');
require('./modules/es6.regexp.flags');
require('./modules/es6.regexp.match');
require('./modules/es6.regexp.replace');
require('./modules/es6.regexp.search');
require('./modules/es6.regexp.split');
require('./modules/es6.promise');
require('./modules/es6.map');
require('./modules/es6.set');
require('./modules/es6.weak-map');
require('./modules/es6.weak-set');
require('./modules/es6.typed.array-buffer');
require('./modules/es6.typed.data-view');
require('./modules/es6.typed.int8-array');
require('./modules/es6.typed.uint8-array');
require('./modules/es6.typed.uint8-clamped-array');
require('./modules/es6.typed.int16-array');
require('./modules/es6.typed.uint16-array');
require('./modules/es6.typed.int32-array');
require('./modules/es6.typed.uint32-array');
require('./modules/es6.typed.float32-array');
require('./modules/es6.typed.float64-array');
require('./modules/es6.reflect.apply');
require('./modules/es6.reflect.construct');
require('./modules/es6.reflect.define-property');
require('./modules/es6.reflect.delete-property');
require('./modules/es6.reflect.enumerate');
require('./modules/es6.reflect.get');
require('./modules/es6.reflect.get-own-property-descriptor');
require('./modules/es6.reflect.get-prototype-of');
require('./modules/es6.reflect.has');
require('./modules/es6.reflect.is-extensible');
require('./modules/es6.reflect.own-keys');
require('./modules/es6.reflect.prevent-extensions');
require('./modules/es6.reflect.set');
require('./modules/es6.reflect.set-prototype-of');
require('./modules/es7.array.includes');
require('./modules/es7.string.at');
require('./modules/es7.string.pad-start');
require('./modules/es7.string.pad-end');
require('./modules/es7.string.trim-left');
require('./modules/es7.string.trim-right');
require('./modules/es7.string.match-all');
require('./modules/es7.symbol.async-iterator');
require('./modules/es7.symbol.observable');
require('./modules/es7.object.get-own-property-descriptors');
require('./modules/es7.object.values');
require('./modules/es7.object.entries');
require('./modules/es7.object.define-getter');
require('./modules/es7.object.define-setter');
require('./modules/es7.object.lookup-getter');
require('./modules/es7.object.lookup-setter');
require('./modules/es7.map.to-json');
require('./modules/es7.set.to-json');
require('./modules/es7.system.global');
require('./modules/es7.error.is-error');
require('./modules/es7.math.iaddh');
require('./modules/es7.math.isubh');
require('./modules/es7.math.imulh');
require('./modules/es7.math.umulh');
require('./modules/es7.reflect.define-metadata');
require('./modules/es7.reflect.delete-metadata');
require('./modules/es7.reflect.get-metadata');
require('./modules/es7.reflect.get-metadata-keys');
require('./modules/es7.reflect.get-own-metadata');
require('./modules/es7.reflect.get-own-metadata-keys');
require('./modules/es7.reflect.has-metadata');
require('./modules/es7.reflect.has-own-metadata');
require('./modules/es7.reflect.metadata');
require('./modules/es7.asap');
require('./modules/es7.observable');
require('./modules/web.timers');
require('./modules/web.immediate');
require('./modules/web.dom.iterable');
module.exports = require('./modules/_core');
},{"./modules/_core":23,"./modules/es6.array.copy-within":120,"./modules/es6.array.every":121,"./modules/es6.array.fill":122,"./modules/es6.array.filter":123,"./modules/es6.array.find":125,"./modules/es6.array.find-index":124,"./modules/es6.array.for-each":126,"./modules/es6.array.from":127,"./modules/es6.array.index-of":128,"./modules/es6.array.is-array":129,"./modules/es6.array.iterator":130,"./modules/es6.array.join":131,"./modules/es6.array.last-index-of":132,"./modules/es6.array.map":133,"./modules/es6.array.of":134,"./modules/es6.array.reduce":136,"./modules/es6.array.reduce-right":135,"./modules/es6.array.slice":137,"./modules/es6.array.some":138,"./modules/es6.array.sort":139,"./modules/es6.array.species":140,"./modules/es6.date.now":141,"./modules/es6.date.to-iso-string":142,"./modules/es6.date.to-json":143,"./modules/es6.date.to-primitive":144,"./modules/es6.date.to-string":145,"./modules/es6.function.bind":146,"./modules/es6.function.has-instance":147,"./modules/es6.function.name":148,"./modules/es6.map":149,"./modules/es6.math.acosh":150,"./modules/es6.math.asinh":151,"./modules/es6.math.atanh":152,"./modules/es6.math.cbrt":153,"./modules/es6.math.clz32":154,"./modules/es6.math.cosh":155,"./modules/es6.math.expm1":156,"./modules/es6.math.fround":157,"./modules/es6.math.hypot":158,"./modules/es6.math.imul":159,"./modules/es6.math.log10":160,"./modules/es6.math.log1p":161,"./modules/es6.math.log2":162,"./modules/es6.math.sign":163,"./modules/es6.math.sinh":164,"./modules/es6.math.tanh":165,"./modules/es6.math.trunc":166,"./modules/es6.number.constructor":167,"./modules/es6.number.epsilon":168,"./modules/es6.number.is-finite":169,"./modules/es6.number.is-integer":170,"./modules/es6.number.is-nan":171,"./modules/es6.number.is-safe-integer":172,"./modules/es6.number.max-safe-integer":173,"./modules/es6.number.min-safe-integer":174,"./modules/es6.number.parse-float":175,"./modules/es6.number.parse-int":176,"./modules/es6.number.to-fixed":177,"./modules/es6.number.to-precision":178,"./modules/es6.object.assign":179,"./modules/es6.object.create":180,"./modules/es6.object.define-properties":181,"./modules/es6.object.define-property":182,"./modules/es6.object.freeze":183,"./modules/es6.object.get-own-property-descriptor":184,"./modules/es6.object.get-own-property-names":185,"./modules/es6.object.get-prototype-of":186,"./modules/es6.object.is":190,"./modules/es6.object.is-extensible":187,"./modules/es6.object.is-frozen":188,"./modules/es6.object.is-sealed":189,"./modules/es6.object.keys":191,"./modules/es6.object.prevent-extensions":192,"./modules/es6.object.seal":193,"./modules/es6.object.set-prototype-of":194,"./modules/es6.object.to-string":195,"./modules/es6.parse-float":196,"./modules/es6.parse-int":197,"./modules/es6.promise":198,"./modules/es6.reflect.apply":199,"./modules/es6.reflect.construct":200,"./modules/es6.reflect.define-property":201,"./modules/es6.reflect.delete-property":202,"./modules/es6.reflect.enumerate":203,"./modules/es6.reflect.get":206,"./modules/es6.reflect.get-own-property-descriptor":204,"./modules/es6.reflect.get-prototype-of":205,"./modules/es6.reflect.has":207,"./modules/es6.reflect.is-extensible":208,"./modules/es6.reflect.own-keys":209,"./modules/es6.reflect.prevent-extensions":210,"./modules/es6.reflect.set":212,"./modules/es6.reflect.set-prototype-of":211,"./modules/es6.regexp.constructor":213,"./modules/es6.regexp.flags":214,"./modules/es6.regexp.match":215,"./modules/es6.regexp.replace":216,"./modules/es6.regexp.search":217,"./modules/es6.regexp.split":218,"./modules/es6.regexp.to-string":219,"./modules/es6.set":220,"./modules/es6.string.anchor":221,"./modules/es6.string.big":222,"./modules/es6.string.blink":223,"./modules/es6.string.bold":224,"./modules/es6.string.code-point-at":225,"./modules/es6.string.ends-with":226,"./modules/es6.string.fixed":227,"./modules/es6.string.fontcolor":228,"./modules/es6.string.fontsize":229,"./modules/es6.string.from-code-point":230,"./modules/es6.string.includes":231,"./modules/es6.string.italics":232,"./modules/es6.string.iterator":233,"./modules/es6.string.link":234,"./modules/es6.string.raw":235,"./modules/es6.string.repeat":236,"./modules/es6.string.small":237,"./modules/es6.string.starts-with":238,"./modules/es6.string.strike":239,"./modules/es6.string.sub":240,"./modules/es6.string.sup":241,"./modules/es6.string.trim":242,"./modules/es6.symbol":243,"./modules/es6.typed.array-buffer":244,"./modules/es6.typed.data-view":245,"./modules/es6.typed.float32-array":246,"./modules/es6.typed.float64-array":247,"./modules/es6.typed.int16-array":248,"./modules/es6.typed.int32-array":249,"./modules/es6.typed.int8-array":250,"./modules/es6.typed.uint16-array":251,"./modules/es6.typed.uint32-array":252,"./modules/es6.typed.uint8-array":253,"./modules/es6.typed.uint8-clamped-array":254,"./modules/es6.weak-map":255,"./modules/es6.weak-set":256,"./modules/es7.array.includes":257,"./modules/es7.asap":258,"./modules/es7.error.is-error":259,"./modules/es7.map.to-json":260,"./modules/es7.math.iaddh":261,"./modules/es7.math.imulh":262,"./modules/es7.math.isubh":263,"./modules/es7.math.umulh":264,"./modules/es7.object.define-getter":265,"./modules/es7.object.define-setter":266,"./modules/es7.object.entries":267,"./modules/es7.object.get-own-property-descriptors":268,"./modules/es7.object.lookup-getter":269,"./modules/es7.object.lookup-setter":270,"./modules/es7.object.values":271,"./modules/es7.observable":272,"./modules/es7.reflect.define-metadata":273,"./modules/es7.reflect.delete-metadata":274,"./modules/es7.reflect.get-metadata":276,"./modules/es7.reflect.get-metadata-keys":275,"./modules/es7.reflect.get-own-metadata":278,"./modules/es7.reflect.get-own-metadata-keys":277,"./modules/es7.reflect.has-metadata":279,"./modules/es7.reflect.has-own-metadata":280,"./modules/es7.reflect.metadata":281,"./modules/es7.set.to-json":282,"./modules/es7.string.at":283,"./modules/es7.string.match-all":284,"./modules/es7.string.pad-end":285,"./modules/es7.string.pad-start":286,"./modules/es7.string.trim-left":287,"./modules/es7.string.trim-right":288,"./modules/es7.symbol.async-iterator":289,"./modules/es7.symbol.observable":290,"./modules/es7.system.global":291,"./modules/web.dom.iterable":292,"./modules/web.immediate":293,"./modules/web.timers":294}],296:[function(require,module,exports){
(function (process,global){
/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var hasOwn = Object.prototype.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided, then outerFn.prototype instanceof Generator.
    var generator = Object.create((outerFn || Generator).prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `value instanceof AwaitArgument` to determine if the yielded value is
  // meant to be awaited. Some may consider the name of this method too
  // cutesy, but they are curmudgeons.
  runtime.awrap = function(arg) {
    return new AwaitArgument(arg);
  };

  function AwaitArgument(arg) {
    this.arg = arg;
  }

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value instanceof AwaitArgument) {
          return Promise.resolve(value.arg).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof process === "object" && process.domain) {
      invoke = process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          if (method === "return" ||
              (method === "throw" && delegate.iterator[method] === undefined)) {
            // A return or throw (when the delegate iterator has no throw
            // method) always terminates the yield* loop.
            context.delegate = null;

            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            var returnMethod = delegate.iterator["return"];
            if (returnMethod) {
              var record = tryCatch(returnMethod, delegate.iterator, arg);
              if (record.type === "throw") {
                // If the return method threw an exception, let that
                // exception prevail over the original return or throw.
                method = "throw";
                arg = record.arg;
                continue;
              }
            }

            if (method === "return") {
              // Continue with the outer return, now that the delegate
              // iterator has been terminated.
              continue;
            }
          }

          var record = tryCatch(
            delegate.iterator[method],
            delegate.iterator,
            arg
          );

          if (record.type === "throw") {
            context.delegate = null;

            // Like returning generator.throw(uncaught), but without the
            // overhead of an extra function call.
            method = "throw";
            arg = record.arg;
            continue;
          }

          // Delegate generator ran and handled its own exceptions so
          // regardless of what the method was, we continue as if it is
          // "next" with an undefined arg.
          method = "next";
          arg = undefined;

          var info = record.arg;
          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
          } else {
            state = GenStateSuspendedYield;
            return info;
          }

          context.delegate = null;
        }

        if (method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = arg;

        } else if (method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw arg;
          }

          if (context.dispatchException(arg)) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            method = "next";
            arg = undefined;
          }

        } else if (method === "return") {
          context.abrupt("return", arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          var info = {
            value: record.arg,
            done: context.done
          };

          if (record.arg === ContinueSentinel) {
            if (context.delegate && method === "next") {
              // Deliberately forget the last sent value so that we don't
              // accidentally pass it on to the delegate.
              arg = undefined;
            }
          } else {
            return info;
          }

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(arg) call above.
          method = "throw";
          arg = record.arg;
        }
      }
    };
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp[toStringTagSymbol] = "Generator";

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;
        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.next = finallyEntry.finallyLoc;
      } else {
        this.complete(record);
      }

      return ContinueSentinel;
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = record.arg;
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":415}],297:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/json/stringify"), __esModule: true };
},{"core-js/library/fn/json/stringify":315}],298:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/assign"), __esModule: true };
},{"core-js/library/fn/object/assign":316}],299:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/create"), __esModule: true };
},{"core-js/library/fn/object/create":317}],300:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/define-property"), __esModule: true };
},{"core-js/library/fn/object/define-property":318}],301:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/get-own-property-descriptor"), __esModule: true };
},{"core-js/library/fn/object/get-own-property-descriptor":319}],302:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/get-prototype-of"), __esModule: true };
},{"core-js/library/fn/object/get-prototype-of":320}],303:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/is-frozen"), __esModule: true };
},{"core-js/library/fn/object/is-frozen":321}],304:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/keys"), __esModule: true };
},{"core-js/library/fn/object/keys":322}],305:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/set-prototype-of"), __esModule: true };
},{"core-js/library/fn/object/set-prototype-of":323}],306:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/promise"), __esModule: true };
},{"core-js/library/fn/promise":324}],307:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/symbol"), __esModule: true };
},{"core-js/library/fn/symbol":325}],308:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/symbol/iterator"), __esModule: true };
},{"core-js/library/fn/symbol/iterator":326}],309:[function(require,module,exports){
"use strict";

exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};
},{}],310:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _defineProperty = require("../core-js/object/define-property");

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();
},{"../core-js/object/define-property":300}],311:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _getPrototypeOf = require("../core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _getOwnPropertyDescriptor = require("../core-js/object/get-own-property-descriptor");

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = (0, _getOwnPropertyDescriptor2.default)(object, property);

  if (desc === undefined) {
    var parent = (0, _getPrototypeOf2.default)(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};
},{"../core-js/object/get-own-property-descriptor":301,"../core-js/object/get-prototype-of":302}],312:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _setPrototypeOf = require("../core-js/object/set-prototype-of");

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _create = require("../core-js/object/create");

var _create2 = _interopRequireDefault(_create);

var _typeof2 = require("../helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
  }

  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
};
},{"../core-js/object/create":299,"../core-js/object/set-prototype-of":305,"../helpers/typeof":314}],313:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _typeof2 = require("../helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
};
},{"../helpers/typeof":314}],314:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _iterator = require("../core-js/symbol/iterator");

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = require("../core-js/symbol");

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};
},{"../core-js/symbol":307,"../core-js/symbol/iterator":308}],315:[function(require,module,exports){
var core  = require('../../modules/_core')
  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});
module.exports = function stringify(it){ // eslint-disable-line no-unused-vars
  return $JSON.stringify.apply($JSON, arguments);
};
},{"../../modules/_core":334}],316:[function(require,module,exports){
require('../../modules/es6.object.assign');
module.exports = require('../../modules/_core').Object.assign;
},{"../../modules/_core":334,"../../modules/es6.object.assign":400}],317:[function(require,module,exports){
require('../../modules/es6.object.create');
var $Object = require('../../modules/_core').Object;
module.exports = function create(P, D){
  return $Object.create(P, D);
};
},{"../../modules/_core":334,"../../modules/es6.object.create":401}],318:[function(require,module,exports){
require('../../modules/es6.object.define-property');
var $Object = require('../../modules/_core').Object;
module.exports = function defineProperty(it, key, desc){
  return $Object.defineProperty(it, key, desc);
};
},{"../../modules/_core":334,"../../modules/es6.object.define-property":402}],319:[function(require,module,exports){
require('../../modules/es6.object.get-own-property-descriptor');
var $Object = require('../../modules/_core').Object;
module.exports = function getOwnPropertyDescriptor(it, key){
  return $Object.getOwnPropertyDescriptor(it, key);
};
},{"../../modules/_core":334,"../../modules/es6.object.get-own-property-descriptor":403}],320:[function(require,module,exports){
require('../../modules/es6.object.get-prototype-of');
module.exports = require('../../modules/_core').Object.getPrototypeOf;
},{"../../modules/_core":334,"../../modules/es6.object.get-prototype-of":404}],321:[function(require,module,exports){
require('../../modules/es6.object.is-frozen');
module.exports = require('../../modules/_core').Object.isFrozen;
},{"../../modules/_core":334,"../../modules/es6.object.is-frozen":405}],322:[function(require,module,exports){
require('../../modules/es6.object.keys');
module.exports = require('../../modules/_core').Object.keys;
},{"../../modules/_core":334,"../../modules/es6.object.keys":406}],323:[function(require,module,exports){
require('../../modules/es6.object.set-prototype-of');
module.exports = require('../../modules/_core').Object.setPrototypeOf;
},{"../../modules/_core":334,"../../modules/es6.object.set-prototype-of":407}],324:[function(require,module,exports){
require('../modules/es6.object.to-string');
require('../modules/es6.string.iterator');
require('../modules/web.dom.iterable');
require('../modules/es6.promise');
module.exports = require('../modules/_core').Promise;
},{"../modules/_core":334,"../modules/es6.object.to-string":408,"../modules/es6.promise":409,"../modules/es6.string.iterator":410,"../modules/web.dom.iterable":414}],325:[function(require,module,exports){
require('../../modules/es6.symbol');
require('../../modules/es6.object.to-string');
require('../../modules/es7.symbol.async-iterator');
require('../../modules/es7.symbol.observable');
module.exports = require('../../modules/_core').Symbol;
},{"../../modules/_core":334,"../../modules/es6.object.to-string":408,"../../modules/es6.symbol":411,"../../modules/es7.symbol.async-iterator":412,"../../modules/es7.symbol.observable":413}],326:[function(require,module,exports){
require('../../modules/es6.string.iterator');
require('../../modules/web.dom.iterable');
module.exports = require('../../modules/_wks-ext').f('iterator');
},{"../../modules/_wks-ext":396,"../../modules/es6.string.iterator":410,"../../modules/web.dom.iterable":414}],327:[function(require,module,exports){
arguments[4][3][0].apply(exports,arguments)
},{"dup":3}],328:[function(require,module,exports){
module.exports = function(){ /* empty */ };
},{}],329:[function(require,module,exports){
arguments[4][6][0].apply(exports,arguments)
},{"dup":6}],330:[function(require,module,exports){
arguments[4][7][0].apply(exports,arguments)
},{"./_is-object":353,"dup":7}],331:[function(require,module,exports){
arguments[4][11][0].apply(exports,arguments)
},{"./_to-index":388,"./_to-iobject":390,"./_to-length":391,"dup":11}],332:[function(require,module,exports){
arguments[4][17][0].apply(exports,arguments)
},{"./_cof":333,"./_wks":397,"dup":17}],333:[function(require,module,exports){
arguments[4][18][0].apply(exports,arguments)
},{"dup":18}],334:[function(require,module,exports){
arguments[4][23][0].apply(exports,arguments)
},{"dup":23}],335:[function(require,module,exports){
arguments[4][25][0].apply(exports,arguments)
},{"./_a-function":327,"dup":25}],336:[function(require,module,exports){
arguments[4][27][0].apply(exports,arguments)
},{"dup":27}],337:[function(require,module,exports){
arguments[4][28][0].apply(exports,arguments)
},{"./_fails":342,"dup":28}],338:[function(require,module,exports){
arguments[4][29][0].apply(exports,arguments)
},{"./_global":344,"./_is-object":353,"dup":29}],339:[function(require,module,exports){
arguments[4][30][0].apply(exports,arguments)
},{"dup":30}],340:[function(require,module,exports){
arguments[4][31][0].apply(exports,arguments)
},{"./_object-gops":371,"./_object-keys":374,"./_object-pie":375,"dup":31}],341:[function(require,module,exports){
var global    = require('./_global')
  , core      = require('./_core')
  , ctx       = require('./_ctx')
  , hide      = require('./_hide')
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , IS_WRAP   = type & $export.W
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE]
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
    , key, own, out;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if(own && key in exports)continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function(C){
      var F = function(a, b, c){
        if(this instanceof C){
          switch(arguments.length){
            case 0: return new C;
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if(IS_PROTO){
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library` 
module.exports = $export;
},{"./_core":334,"./_ctx":335,"./_global":344,"./_hide":346}],342:[function(require,module,exports){
arguments[4][34][0].apply(exports,arguments)
},{"dup":34}],343:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"./_an-object":330,"./_ctx":335,"./_is-array-iter":351,"./_iter-call":354,"./_to-length":391,"./core.get-iterator-method":398,"dup":37}],344:[function(require,module,exports){
arguments[4][38][0].apply(exports,arguments)
},{"dup":38}],345:[function(require,module,exports){
arguments[4][39][0].apply(exports,arguments)
},{"dup":39}],346:[function(require,module,exports){
arguments[4][40][0].apply(exports,arguments)
},{"./_descriptors":337,"./_object-dp":366,"./_property-desc":377,"dup":40}],347:[function(require,module,exports){
arguments[4][41][0].apply(exports,arguments)
},{"./_global":344,"dup":41}],348:[function(require,module,exports){
arguments[4][42][0].apply(exports,arguments)
},{"./_descriptors":337,"./_dom-create":338,"./_fails":342,"dup":42}],349:[function(require,module,exports){
arguments[4][44][0].apply(exports,arguments)
},{"dup":44}],350:[function(require,module,exports){
arguments[4][45][0].apply(exports,arguments)
},{"./_cof":333,"dup":45}],351:[function(require,module,exports){
arguments[4][46][0].apply(exports,arguments)
},{"./_iterators":359,"./_wks":397,"dup":46}],352:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./_cof":333,"dup":47}],353:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"dup":49}],354:[function(require,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"./_an-object":330,"dup":51}],355:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"./_hide":346,"./_object-create":365,"./_property-desc":377,"./_set-to-string-tag":382,"./_wks":397,"dup":52}],356:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"./_export":341,"./_has":345,"./_hide":346,"./_iter-create":355,"./_iterators":359,"./_library":361,"./_object-gpo":372,"./_redefine":379,"./_set-to-string-tag":382,"./_wks":397,"dup":53}],357:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"./_wks":397,"dup":54}],358:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"dup":55}],359:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"dup":56}],360:[function(require,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"./_object-keys":374,"./_to-iobject":390,"dup":57}],361:[function(require,module,exports){
module.exports = true;
},{}],362:[function(require,module,exports){
arguments[4][62][0].apply(exports,arguments)
},{"./_fails":342,"./_has":345,"./_is-object":353,"./_object-dp":366,"./_uid":394,"dup":62}],363:[function(require,module,exports){
arguments[4][64][0].apply(exports,arguments)
},{"./_cof":333,"./_global":344,"./_task":387,"dup":64}],364:[function(require,module,exports){
arguments[4][65][0].apply(exports,arguments)
},{"./_fails":342,"./_iobject":350,"./_object-gops":371,"./_object-keys":374,"./_object-pie":375,"./_to-object":392,"dup":65}],365:[function(require,module,exports){
arguments[4][66][0].apply(exports,arguments)
},{"./_an-object":330,"./_dom-create":338,"./_enum-bug-keys":339,"./_html":347,"./_object-dps":367,"./_shared-key":383,"dup":66}],366:[function(require,module,exports){
arguments[4][67][0].apply(exports,arguments)
},{"./_an-object":330,"./_descriptors":337,"./_ie8-dom-define":348,"./_to-primitive":393,"dup":67}],367:[function(require,module,exports){
arguments[4][68][0].apply(exports,arguments)
},{"./_an-object":330,"./_descriptors":337,"./_object-dp":366,"./_object-keys":374,"dup":68}],368:[function(require,module,exports){
arguments[4][70][0].apply(exports,arguments)
},{"./_descriptors":337,"./_has":345,"./_ie8-dom-define":348,"./_object-pie":375,"./_property-desc":377,"./_to-iobject":390,"./_to-primitive":393,"dup":70}],369:[function(require,module,exports){
arguments[4][71][0].apply(exports,arguments)
},{"./_object-gopn":370,"./_to-iobject":390,"dup":71}],370:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"./_enum-bug-keys":339,"./_object-keys-internal":373,"dup":72}],371:[function(require,module,exports){
arguments[4][73][0].apply(exports,arguments)
},{"dup":73}],372:[function(require,module,exports){
arguments[4][74][0].apply(exports,arguments)
},{"./_has":345,"./_shared-key":383,"./_to-object":392,"dup":74}],373:[function(require,module,exports){
arguments[4][75][0].apply(exports,arguments)
},{"./_array-includes":331,"./_has":345,"./_shared-key":383,"./_to-iobject":390,"dup":75}],374:[function(require,module,exports){
arguments[4][76][0].apply(exports,arguments)
},{"./_enum-bug-keys":339,"./_object-keys-internal":373,"dup":76}],375:[function(require,module,exports){
arguments[4][77][0].apply(exports,arguments)
},{"dup":77}],376:[function(require,module,exports){
arguments[4][78][0].apply(exports,arguments)
},{"./_core":334,"./_export":341,"./_fails":342,"dup":78}],377:[function(require,module,exports){
arguments[4][85][0].apply(exports,arguments)
},{"dup":85}],378:[function(require,module,exports){
var hide = require('./_hide');
module.exports = function(target, src, safe){
  for(var key in src){
    if(safe && target[key])target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};
},{"./_hide":346}],379:[function(require,module,exports){
module.exports = require('./_hide');
},{"./_hide":346}],380:[function(require,module,exports){
arguments[4][90][0].apply(exports,arguments)
},{"./_an-object":330,"./_ctx":335,"./_is-object":353,"./_object-gopd":368,"dup":90}],381:[function(require,module,exports){
'use strict';
var global      = require('./_global')
  , core        = require('./_core')
  , dP          = require('./_object-dp')
  , DESCRIPTORS = require('./_descriptors')
  , SPECIES     = require('./_wks')('species');

module.exports = function(KEY){
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};
},{"./_core":334,"./_descriptors":337,"./_global":344,"./_object-dp":366,"./_wks":397}],382:[function(require,module,exports){
arguments[4][92][0].apply(exports,arguments)
},{"./_has":345,"./_object-dp":366,"./_wks":397,"dup":92}],383:[function(require,module,exports){
arguments[4][93][0].apply(exports,arguments)
},{"./_shared":384,"./_uid":394,"dup":93}],384:[function(require,module,exports){
arguments[4][94][0].apply(exports,arguments)
},{"./_global":344,"dup":94}],385:[function(require,module,exports){
arguments[4][95][0].apply(exports,arguments)
},{"./_a-function":327,"./_an-object":330,"./_wks":397,"dup":95}],386:[function(require,module,exports){
arguments[4][97][0].apply(exports,arguments)
},{"./_defined":336,"./_to-integer":389,"dup":97}],387:[function(require,module,exports){
arguments[4][104][0].apply(exports,arguments)
},{"./_cof":333,"./_ctx":335,"./_dom-create":338,"./_global":344,"./_html":347,"./_invoke":349,"dup":104}],388:[function(require,module,exports){
arguments[4][105][0].apply(exports,arguments)
},{"./_to-integer":389,"dup":105}],389:[function(require,module,exports){
arguments[4][106][0].apply(exports,arguments)
},{"dup":106}],390:[function(require,module,exports){
arguments[4][107][0].apply(exports,arguments)
},{"./_defined":336,"./_iobject":350,"dup":107}],391:[function(require,module,exports){
arguments[4][108][0].apply(exports,arguments)
},{"./_to-integer":389,"dup":108}],392:[function(require,module,exports){
arguments[4][109][0].apply(exports,arguments)
},{"./_defined":336,"dup":109}],393:[function(require,module,exports){
arguments[4][110][0].apply(exports,arguments)
},{"./_is-object":353,"dup":110}],394:[function(require,module,exports){
arguments[4][114][0].apply(exports,arguments)
},{"dup":114}],395:[function(require,module,exports){
arguments[4][115][0].apply(exports,arguments)
},{"./_core":334,"./_global":344,"./_library":361,"./_object-dp":366,"./_wks-ext":396,"dup":115}],396:[function(require,module,exports){
arguments[4][116][0].apply(exports,arguments)
},{"./_wks":397,"dup":116}],397:[function(require,module,exports){
arguments[4][117][0].apply(exports,arguments)
},{"./_global":344,"./_shared":384,"./_uid":394,"dup":117}],398:[function(require,module,exports){
arguments[4][118][0].apply(exports,arguments)
},{"./_classof":332,"./_core":334,"./_iterators":359,"./_wks":397,"dup":118}],399:[function(require,module,exports){
arguments[4][130][0].apply(exports,arguments)
},{"./_add-to-unscopables":328,"./_iter-define":356,"./_iter-step":358,"./_iterators":359,"./_to-iobject":390,"dup":130}],400:[function(require,module,exports){
arguments[4][179][0].apply(exports,arguments)
},{"./_export":341,"./_object-assign":364,"dup":179}],401:[function(require,module,exports){
arguments[4][180][0].apply(exports,arguments)
},{"./_export":341,"./_object-create":365,"dup":180}],402:[function(require,module,exports){
arguments[4][182][0].apply(exports,arguments)
},{"./_descriptors":337,"./_export":341,"./_object-dp":366,"dup":182}],403:[function(require,module,exports){
arguments[4][184][0].apply(exports,arguments)
},{"./_object-gopd":368,"./_object-sap":376,"./_to-iobject":390,"dup":184}],404:[function(require,module,exports){
arguments[4][186][0].apply(exports,arguments)
},{"./_object-gpo":372,"./_object-sap":376,"./_to-object":392,"dup":186}],405:[function(require,module,exports){
arguments[4][188][0].apply(exports,arguments)
},{"./_is-object":353,"./_object-sap":376,"dup":188}],406:[function(require,module,exports){
arguments[4][191][0].apply(exports,arguments)
},{"./_object-keys":374,"./_object-sap":376,"./_to-object":392,"dup":191}],407:[function(require,module,exports){
arguments[4][194][0].apply(exports,arguments)
},{"./_export":341,"./_set-proto":380,"dup":194}],408:[function(require,module,exports){

},{}],409:[function(require,module,exports){
arguments[4][198][0].apply(exports,arguments)
},{"./_a-function":327,"./_an-instance":329,"./_classof":332,"./_core":334,"./_ctx":335,"./_export":341,"./_for-of":343,"./_global":344,"./_is-object":353,"./_iter-detect":357,"./_library":361,"./_microtask":363,"./_redefine-all":378,"./_set-species":381,"./_set-to-string-tag":382,"./_species-constructor":385,"./_task":387,"./_wks":397,"dup":198}],410:[function(require,module,exports){
arguments[4][233][0].apply(exports,arguments)
},{"./_iter-define":356,"./_string-at":386,"dup":233}],411:[function(require,module,exports){
arguments[4][243][0].apply(exports,arguments)
},{"./_an-object":330,"./_descriptors":337,"./_enum-keys":340,"./_export":341,"./_fails":342,"./_global":344,"./_has":345,"./_hide":346,"./_is-array":352,"./_keyof":360,"./_library":361,"./_meta":362,"./_object-create":365,"./_object-dp":366,"./_object-gopd":368,"./_object-gopn":370,"./_object-gopn-ext":369,"./_object-gops":371,"./_object-keys":374,"./_object-pie":375,"./_property-desc":377,"./_redefine":379,"./_set-to-string-tag":382,"./_shared":384,"./_to-iobject":390,"./_to-primitive":393,"./_uid":394,"./_wks":397,"./_wks-define":395,"./_wks-ext":396,"dup":243}],412:[function(require,module,exports){
arguments[4][289][0].apply(exports,arguments)
},{"./_wks-define":395,"dup":289}],413:[function(require,module,exports){
arguments[4][290][0].apply(exports,arguments)
},{"./_wks-define":395,"dup":290}],414:[function(require,module,exports){
require('./es6.array.iterator');
var global        = require('./_global')
  , hide          = require('./_hide')
  , Iterators     = require('./_iterators')
  , TO_STRING_TAG = require('./_wks')('toStringTag');

for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
  var NAME       = collections[i]
    , Collection = global[NAME]
    , proto      = Collection && Collection.prototype;
  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}
},{"./_global":344,"./_hide":346,"./_iterators":359,"./_wks":397,"./es6.array.iterator":399}],415:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],416:[function(require,module,exports){
(function (global){
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

// Distribution file for MessageFactory.js 
// version: 0.4.0
// Last build: Mon Sep 26 2016 18:30:51 GMT+0100 (WEST)

!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,t.MessageFactory=e()}}(function(){var e;return function t(e,r,n){function o(a,s){if(!r[a]){if(!e[a]){var u="function"==typeof require&&require;if(!s&&u)return u(a,!0);if(i)return i(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var l=r[a]={exports:{}};e[a][0].call(l.exports,function(t){var r=e[a][1][t];return o(r?r:t)},l,l.exports,t,e,r,n)}return r[a].exports}for(var i="function"==typeof require&&require,a=0;a<n.length;a++)o(n[a]);return o}({1:[function(e,t,r){t.exports={"default":e("core-js/library/fn/json/stringify"),__esModule:!0}},{"core-js/library/fn/json/stringify":16}],2:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/create"),__esModule:!0}},{"core-js/library/fn/object/create":17}],3:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/define-property"),__esModule:!0}},{"core-js/library/fn/object/define-property":18}],4:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/freeze"),__esModule:!0}},{"core-js/library/fn/object/freeze":19}],5:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/get-prototype-of"),__esModule:!0}},{"core-js/library/fn/object/get-prototype-of":20}],6:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/keys"),__esModule:!0}},{"core-js/library/fn/object/keys":21}],7:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/set-prototype-of"),__esModule:!0}},{"core-js/library/fn/object/set-prototype-of":22}],8:[function(e,t,r){t.exports={"default":e("core-js/library/fn/symbol"),__esModule:!0}},{"core-js/library/fn/symbol":23}],9:[function(e,t,r){t.exports={"default":e("core-js/library/fn/symbol/iterator"),__esModule:!0}},{"core-js/library/fn/symbol/iterator":24}],10:[function(e,t,r){"use strict";r.__esModule=!0,r["default"]=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},{}],11:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var o=e("../core-js/object/define-property"),i=n(o);r["default"]=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),(0,i["default"])(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}()},{"../core-js/object/define-property":3}],12:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var o=e("../core-js/object/set-prototype-of"),i=n(o),a=e("../core-js/object/create"),s=n(a),u=e("../helpers/typeof"),c=n(u);r["default"]=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof t?"undefined":(0,c["default"])(t)));e.prototype=(0,s["default"])(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(i["default"]?(0,i["default"])(e,t):e.__proto__=t)}},{"../core-js/object/create":2,"../core-js/object/set-prototype-of":7,"../helpers/typeof":14}],13:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var o=e("../helpers/typeof"),i=n(o);r["default"]=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==("undefined"==typeof t?"undefined":(0,i["default"])(t))&&"function"!=typeof t?e:t}},{"../helpers/typeof":14}],14:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var o=e("../core-js/symbol/iterator"),i=n(o),a=e("../core-js/symbol"),s=n(a),u="function"==typeof s["default"]&&"symbol"==typeof i["default"]?function(e){return typeof e}:function(e){return e&&"function"==typeof s["default"]&&e.constructor===s["default"]?"symbol":typeof e};r["default"]="function"==typeof s["default"]&&"symbol"===u(i["default"])?function(e){return"undefined"==typeof e?"undefined":u(e)}:function(e){return e&&"function"==typeof s["default"]&&e.constructor===s["default"]?"symbol":"undefined"==typeof e?"undefined":u(e)}},{"../core-js/symbol":8,"../core-js/symbol/iterator":9}],15:[function(e,t,r){t.exports=e("regenerator-runtime")},{"regenerator-runtime":97}],16:[function(e,t,r){var n=e("../../modules/_core"),o=n.JSON||(n.JSON={stringify:JSON.stringify});t.exports=function(e){return o.stringify.apply(o,arguments)}},{"../../modules/_core":30}],17:[function(e,t,r){e("../../modules/es6.object.create");var n=e("../../modules/_core").Object;t.exports=function(e,t){return n.create(e,t)}},{"../../modules/_core":30,"../../modules/es6.object.create":84}],18:[function(e,t,r){e("../../modules/es6.object.define-property");var n=e("../../modules/_core").Object;t.exports=function(e,t,r){return n.defineProperty(e,t,r)}},{"../../modules/_core":30,"../../modules/es6.object.define-property":85}],19:[function(e,t,r){e("../../modules/es6.object.freeze"),t.exports=e("../../modules/_core").Object.freeze},{"../../modules/_core":30,"../../modules/es6.object.freeze":86}],20:[function(e,t,r){e("../../modules/es6.object.get-prototype-of"),t.exports=e("../../modules/_core").Object.getPrototypeOf},{"../../modules/_core":30,"../../modules/es6.object.get-prototype-of":87}],21:[function(e,t,r){e("../../modules/es6.object.keys"),t.exports=e("../../modules/_core").Object.keys},{"../../modules/_core":30,"../../modules/es6.object.keys":88}],22:[function(e,t,r){e("../../modules/es6.object.set-prototype-of"),t.exports=e("../../modules/_core").Object.setPrototypeOf},{"../../modules/_core":30,"../../modules/es6.object.set-prototype-of":89}],23:[function(e,t,r){e("../../modules/es6.symbol"),e("../../modules/es6.object.to-string"),e("../../modules/es7.symbol.async-iterator"),e("../../modules/es7.symbol.observable"),t.exports=e("../../modules/_core").Symbol},{"../../modules/_core":30,"../../modules/es6.object.to-string":90,"../../modules/es6.symbol":92,"../../modules/es7.symbol.async-iterator":93,"../../modules/es7.symbol.observable":94}],24:[function(e,t,r){e("../../modules/es6.string.iterator"),e("../../modules/web.dom.iterable"),t.exports=e("../../modules/_wks-ext").f("iterator")},{"../../modules/_wks-ext":81,"../../modules/es6.string.iterator":91,"../../modules/web.dom.iterable":95}],25:[function(e,t,r){t.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},{}],26:[function(e,t,r){t.exports=function(){}},{}],27:[function(e,t,r){var n=e("./_is-object");t.exports=function(e){if(!n(e))throw TypeError(e+" is not an object!");return e}},{"./_is-object":46}],28:[function(e,t,r){var n=e("./_to-iobject"),o=e("./_to-length"),i=e("./_to-index");t.exports=function(e){return function(t,r,a){var s,u=n(t),c=o(u.length),l=i(a,c);if(e&&r!=r){for(;c>l;)if(s=u[l++],s!=s)return!0}else for(;c>l;l++)if((e||l in u)&&u[l]===r)return e||l||0;return!e&&-1}}},{"./_to-index":73,"./_to-iobject":75,"./_to-length":76}],29:[function(e,t,r){var n={}.toString;t.exports=function(e){return n.call(e).slice(8,-1)}},{}],30:[function(e,t,r){var n=t.exports={version:"2.4.0"};"number"==typeof __e&&(__e=n)},{}],31:[function(e,t,r){var n=e("./_a-function");t.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,o){return e.call(t,r,n,o)}}return function(){return e.apply(t,arguments)}}},{"./_a-function":25}],32:[function(e,t,r){t.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}},{}],33:[function(e,t,r){t.exports=!e("./_fails")(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},{"./_fails":38}],34:[function(e,t,r){var n=e("./_is-object"),o=e("./_global").document,i=n(o)&&n(o.createElement);t.exports=function(e){return i?o.createElement(e):{}}},{"./_global":39,"./_is-object":46}],35:[function(e,t,r){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},{}],36:[function(e,t,r){var n=e("./_object-keys"),o=e("./_object-gops"),i=e("./_object-pie");t.exports=function(e){var t=n(e),r=o.f;if(r)for(var a,s=r(e),u=i.f,c=0;s.length>c;)u.call(e,a=s[c++])&&t.push(a);return t}},{"./_object-gops":60,"./_object-keys":63,"./_object-pie":64}],37:[function(e,t,r){var n=e("./_global"),o=e("./_core"),i=e("./_ctx"),a=e("./_hide"),s="prototype",u=function(e,t,r){var c,l,f,d=e&u.F,p=e&u.G,h=e&u.S,y=e&u.P,m=e&u.B,v=e&u.W,_=p?o:o[t]||(o[t]={}),b=_[s],g=p?n:h?n[t]:(n[t]||{})[s];p&&(r=t);for(c in r)l=!d&&g&&void 0!==g[c],l&&c in _||(f=l?g[c]:r[c],_[c]=p&&"function"!=typeof g[c]?r[c]:m&&l?i(f,n):v&&g[c]==f?function(e){var t=function(t,r,n){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,r)}return new e(t,r,n)}return e.apply(this,arguments)};return t[s]=e[s],t}(f):y&&"function"==typeof f?i(Function.call,f):f,y&&((_.virtual||(_.virtual={}))[c]=f,e&u.R&&b&&!b[c]&&a(b,c,f)))};u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,t.exports=u},{"./_core":30,"./_ctx":31,"./_global":39,"./_hide":41}],38:[function(e,t,r){t.exports=function(e){try{return!!e()}catch(t){return!0}}},{}],39:[function(e,t,r){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},{}],40:[function(e,t,r){var n={}.hasOwnProperty;t.exports=function(e,t){return n.call(e,t)}},{}],41:[function(e,t,r){var n=e("./_object-dp"),o=e("./_property-desc");t.exports=e("./_descriptors")?function(e,t,r){return n.f(e,t,o(1,r))}:function(e,t,r){return e[t]=r,e}},{"./_descriptors":33,"./_object-dp":55,"./_property-desc":66}],42:[function(e,t,r){t.exports=e("./_global").document&&document.documentElement},{"./_global":39}],43:[function(e,t,r){t.exports=!e("./_descriptors")&&!e("./_fails")(function(){return 7!=Object.defineProperty(e("./_dom-create")("div"),"a",{get:function(){return 7}}).a})},{"./_descriptors":33,"./_dom-create":34,"./_fails":38}],44:[function(e,t,r){var n=e("./_cof");t.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==n(e)?e.split(""):Object(e)}},{"./_cof":29}],45:[function(e,t,r){var n=e("./_cof");t.exports=Array.isArray||function(e){return"Array"==n(e)}},{"./_cof":29}],46:[function(e,t,r){t.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},{}],47:[function(e,t,r){"use strict";var n=e("./_object-create"),o=e("./_property-desc"),i=e("./_set-to-string-tag"),a={};e("./_hide")(a,e("./_wks")("iterator"),function(){return this}),t.exports=function(e,t,r){e.prototype=n(a,{next:o(1,r)}),i(e,t+" Iterator")}},{"./_hide":41,"./_object-create":54,"./_property-desc":66,"./_set-to-string-tag":69,"./_wks":82}],48:[function(e,t,r){"use strict";var n=e("./_library"),o=e("./_export"),i=e("./_redefine"),a=e("./_hide"),s=e("./_has"),u=e("./_iterators"),c=e("./_iter-create"),l=e("./_set-to-string-tag"),f=e("./_object-gpo"),d=e("./_wks")("iterator"),p=!([].keys&&"next"in[].keys()),h="@@iterator",y="keys",m="values",v=function(){return this};t.exports=function(e,t,r,_,b,g,E){c(r,t,_);var j,w,O,M=function(e){if(!p&&e in R)return R[e];switch(e){case y:return function(){return new r(this,e)};case m:return function(){return new r(this,e)}}return function(){return new r(this,e)}},x=t+" Iterator",P=b==m,k=!1,R=e.prototype,S=R[d]||R[h]||b&&R[b],A=S||M(b),T=b?P?M("entries"):A:void 0,N="Array"==t?R.entries||S:S;if(N&&(O=f(N.call(new e)),O!==Object.prototype&&(l(O,x,!0),n||s(O,d)||a(O,d,v))),P&&S&&S.name!==m&&(k=!0,A=function(){return S.call(this)}),n&&!E||!p&&!k&&R[d]||a(R,d,A),u[t]=A,u[x]=v,b)if(j={values:P?A:M(m),keys:g?A:M(y),entries:T},E)for(w in j)w in R||i(R,w,j[w]);else o(o.P+o.F*(p||k),t,j);return j}},{"./_export":37,"./_has":40,"./_hide":41,"./_iter-create":47,"./_iterators":50,"./_library":52,"./_object-gpo":61,"./_redefine":67,"./_set-to-string-tag":69,"./_wks":82}],49:[function(e,t,r){t.exports=function(e,t){return{value:t,done:!!e}}},{}],50:[function(e,t,r){t.exports={}},{}],51:[function(e,t,r){var n=e("./_object-keys"),o=e("./_to-iobject");t.exports=function(e,t){for(var r,i=o(e),a=n(i),s=a.length,u=0;s>u;)if(i[r=a[u++]]===t)return r}},{"./_object-keys":63,"./_to-iobject":75}],52:[function(e,t,r){t.exports=!0},{}],53:[function(e,t,r){var n=e("./_uid")("meta"),o=e("./_is-object"),i=e("./_has"),a=e("./_object-dp").f,s=0,u=Object.isExtensible||function(){return!0},c=!e("./_fails")(function(){return u(Object.preventExtensions({}))}),l=function(e){a(e,n,{value:{i:"O"+ ++s,w:{}}})},f=function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,n)){if(!u(e))return"F";if(!t)return"E";l(e)}return e[n].i},d=function(e,t){if(!i(e,n)){if(!u(e))return!0;if(!t)return!1;l(e)}return e[n].w},p=function(e){return c&&h.NEED&&u(e)&&!i(e,n)&&l(e),e},h=t.exports={KEY:n,NEED:!1,fastKey:f,getWeak:d,onFreeze:p}},{"./_fails":38,"./_has":40,"./_is-object":46,"./_object-dp":55,"./_uid":79}],54:[function(e,t,r){var n=e("./_an-object"),o=e("./_object-dps"),i=e("./_enum-bug-keys"),a=e("./_shared-key")("IE_PROTO"),s=function(){},u="prototype",c=function(){var t,r=e("./_dom-create")("iframe"),n=i.length,o=">";for(r.style.display="none",e("./_html").appendChild(r),r.src="javascript:",t=r.contentWindow.document,t.open(),t.write("<script>document.F=Object</script"+o),t.close(),c=t.F;n--;)delete c[u][i[n]];return c()};t.exports=Object.create||function(e,t){var r;return null!==e?(s[u]=n(e),r=new s,s[u]=null,r[a]=e):r=c(),void 0===t?r:o(r,t)}},{"./_an-object":27,"./_dom-create":34,"./_enum-bug-keys":35,"./_html":42,"./_object-dps":56,"./_shared-key":70}],55:[function(e,t,r){var n=e("./_an-object"),o=e("./_ie8-dom-define"),i=e("./_to-primitive"),a=Object.defineProperty;r.f=e("./_descriptors")?Object.defineProperty:function(e,t,r){if(n(e),t=i(t,!0),n(r),o)try{return a(e,t,r)}catch(s){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(e[t]=r.value),e}},{"./_an-object":27,"./_descriptors":33,"./_ie8-dom-define":43,"./_to-primitive":78}],56:[function(e,t,r){var n=e("./_object-dp"),o=e("./_an-object"),i=e("./_object-keys");t.exports=e("./_descriptors")?Object.defineProperties:function(e,t){o(e);for(var r,a=i(t),s=a.length,u=0;s>u;)n.f(e,r=a[u++],t[r]);return e}},{"./_an-object":27,"./_descriptors":33,"./_object-dp":55,"./_object-keys":63}],57:[function(e,t,r){var n=e("./_object-pie"),o=e("./_property-desc"),i=e("./_to-iobject"),a=e("./_to-primitive"),s=e("./_has"),u=e("./_ie8-dom-define"),c=Object.getOwnPropertyDescriptor;r.f=e("./_descriptors")?c:function(e,t){if(e=i(e),t=a(t,!0),u)try{return c(e,t)}catch(r){}if(s(e,t))return o(!n.f.call(e,t),e[t])}},{"./_descriptors":33,"./_has":40,"./_ie8-dom-define":43,"./_object-pie":64,"./_property-desc":66,"./_to-iobject":75,"./_to-primitive":78}],58:[function(e,t,r){var n=e("./_to-iobject"),o=e("./_object-gopn").f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],s=function(e){try{return o(e)}catch(t){return a.slice()}};t.exports.f=function(e){return a&&"[object Window]"==i.call(e)?s(e):o(n(e))}},{"./_object-gopn":59,"./_to-iobject":75}],59:[function(e,t,r){var n=e("./_object-keys-internal"),o=e("./_enum-bug-keys").concat("length","prototype");r.f=Object.getOwnPropertyNames||function(e){return n(e,o)}},{"./_enum-bug-keys":35,"./_object-keys-internal":62}],60:[function(e,t,r){r.f=Object.getOwnPropertySymbols},{}],61:[function(e,t,r){var n=e("./_has"),o=e("./_to-object"),i=e("./_shared-key")("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(e){return e=o(e),n(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},{"./_has":40,"./_shared-key":70,"./_to-object":77}],62:[function(e,t,r){var n=e("./_has"),o=e("./_to-iobject"),i=e("./_array-includes")(!1),a=e("./_shared-key")("IE_PROTO");t.exports=function(e,t){var r,s=o(e),u=0,c=[];for(r in s)r!=a&&n(s,r)&&c.push(r);for(;t.length>u;)n(s,r=t[u++])&&(~i(c,r)||c.push(r));return c}},{"./_array-includes":28,"./_has":40,"./_shared-key":70,"./_to-iobject":75}],63:[function(e,t,r){var n=e("./_object-keys-internal"),o=e("./_enum-bug-keys");t.exports=Object.keys||function(e){return n(e,o)}},{"./_enum-bug-keys":35,"./_object-keys-internal":62}],64:[function(e,t,r){r.f={}.propertyIsEnumerable},{}],65:[function(e,t,r){var n=e("./_export"),o=e("./_core"),i=e("./_fails");t.exports=function(e,t){var r=(o.Object||{})[e]||Object[e],a={};a[e]=t(r),n(n.S+n.F*i(function(){r(1)}),"Object",a)}},{"./_core":30,"./_export":37,"./_fails":38}],66:[function(e,t,r){t.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},{}],67:[function(e,t,r){t.exports=e("./_hide")},{"./_hide":41}],68:[function(e,t,r){var n=e("./_is-object"),o=e("./_an-object"),i=function(e,t){if(o(e),!n(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,r,n){try{n=e("./_ctx")(Function.call,e("./_object-gopd").f(Object.prototype,"__proto__").set,2),n(t,[]),r=!(t instanceof Array)}catch(o){r=!0}return function(e,t){return i(e,t),r?e.__proto__=t:n(e,t),e}}({},!1):void 0),check:i}},{"./_an-object":27,"./_ctx":31,"./_is-object":46,"./_object-gopd":57}],69:[function(e,t,r){var n=e("./_object-dp").f,o=e("./_has"),i=e("./_wks")("toStringTag");t.exports=function(e,t,r){e&&!o(e=r?e:e.prototype,i)&&n(e,i,{configurable:!0,value:t})}},{"./_has":40,"./_object-dp":55,"./_wks":82}],70:[function(e,t,r){var n=e("./_shared")("keys"),o=e("./_uid");t.exports=function(e){return n[e]||(n[e]=o(e))}},{"./_shared":71,"./_uid":79}],71:[function(e,t,r){var n=e("./_global"),o="__core-js_shared__",i=n[o]||(n[o]={});t.exports=function(e){return i[e]||(i[e]={})}},{"./_global":39}],72:[function(e,t,r){var n=e("./_to-integer"),o=e("./_defined");t.exports=function(e){return function(t,r){var i,a,s=String(o(t)),u=n(r),c=s.length;return u<0||u>=c?e?"":void 0:(i=s.charCodeAt(u),i<55296||i>56319||u+1===c||(a=s.charCodeAt(u+1))<56320||a>57343?e?s.charAt(u):i:e?s.slice(u,u+2):(i-55296<<10)+(a-56320)+65536)}}},{"./_defined":32,"./_to-integer":74}],73:[function(e,t,r){var n=e("./_to-integer"),o=Math.max,i=Math.min;t.exports=function(e,t){return e=n(e),e<0?o(e+t,0):i(e,t)}},{"./_to-integer":74}],74:[function(e,t,r){var n=Math.ceil,o=Math.floor;t.exports=function(e){return isNaN(e=+e)?0:(e>0?o:n)(e)}},{}],75:[function(e,t,r){var n=e("./_iobject"),o=e("./_defined");t.exports=function(e){return n(o(e))}},{"./_defined":32,"./_iobject":44}],76:[function(e,t,r){var n=e("./_to-integer"),o=Math.min;t.exports=function(e){return e>0?o(n(e),9007199254740991):0}},{"./_to-integer":74}],77:[function(e,t,r){var n=e("./_defined");t.exports=function(e){return Object(n(e))}},{"./_defined":32}],78:[function(e,t,r){var n=e("./_is-object");t.exports=function(e,t){if(!n(e))return e;var r,o;if(t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;if("function"==typeof(r=e.valueOf)&&!n(o=r.call(e)))return o;if(!t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},{"./_is-object":46}],79:[function(e,t,r){var n=0,o=Math.random();t.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+o).toString(36))}},{}],80:[function(e,t,r){var n=e("./_global"),o=e("./_core"),i=e("./_library"),a=e("./_wks-ext"),s=e("./_object-dp").f;t.exports=function(e){var t=o.Symbol||(o.Symbol=i?{}:n.Symbol||{});"_"==e.charAt(0)||e in t||s(t,e,{value:a.f(e)})}},{"./_core":30,"./_global":39,"./_library":52,"./_object-dp":55,"./_wks-ext":81}],81:[function(e,t,r){r.f=e("./_wks")},{"./_wks":82}],82:[function(e,t,r){var n=e("./_shared")("wks"),o=e("./_uid"),i=e("./_global").Symbol,a="function"==typeof i,s=t.exports=function(e){return n[e]||(n[e]=a&&i[e]||(a?i:o)("Symbol."+e))};s.store=n},{"./_global":39,"./_shared":71,"./_uid":79}],83:[function(e,t,r){"use strict";var n=e("./_add-to-unscopables"),o=e("./_iter-step"),i=e("./_iterators"),a=e("./_to-iobject");t.exports=e("./_iter-define")(Array,"Array",function(e,t){this._t=a(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,r=this._i++;return!e||r>=e.length?(this._t=void 0,o(1)):"keys"==t?o(0,r):"values"==t?o(0,e[r]):o(0,[r,e[r]])},"values"),i.Arguments=i.Array,n("keys"),n("values"),n("entries")},{"./_add-to-unscopables":26,"./_iter-define":48,"./_iter-step":49,"./_iterators":50,"./_to-iobject":75}],84:[function(e,t,r){var n=e("./_export");n(n.S,"Object",{create:e("./_object-create")})},{"./_export":37,"./_object-create":54}],85:[function(e,t,r){var n=e("./_export");n(n.S+n.F*!e("./_descriptors"),"Object",{defineProperty:e("./_object-dp").f})},{"./_descriptors":33,"./_export":37,"./_object-dp":55}],86:[function(e,t,r){var n=e("./_is-object"),o=e("./_meta").onFreeze;e("./_object-sap")("freeze",function(e){return function(t){return e&&n(t)?e(o(t)):t}})},{"./_is-object":46,"./_meta":53,"./_object-sap":65}],87:[function(e,t,r){var n=e("./_to-object"),o=e("./_object-gpo");e("./_object-sap")("getPrototypeOf",function(){return function(e){return o(n(e))}})},{"./_object-gpo":61,"./_object-sap":65,"./_to-object":77}],88:[function(e,t,r){var n=e("./_to-object"),o=e("./_object-keys");e("./_object-sap")("keys",function(){return function(e){return o(n(e))}})},{"./_object-keys":63,"./_object-sap":65,"./_to-object":77}],89:[function(e,t,r){var n=e("./_export");n(n.S,"Object",{setPrototypeOf:e("./_set-proto").set})},{"./_export":37,"./_set-proto":68}],90:[function(e,t,r){},{}],91:[function(e,t,r){"use strict";var n=e("./_string-at")(!0);e("./_iter-define")(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,r=this._i;return r>=t.length?{value:void 0,done:!0}:(e=n(t,r),this._i+=e.length,{value:e,done:!1})})},{"./_iter-define":48,"./_string-at":72}],92:[function(e,t,r){"use strict";var n=e("./_global"),o=e("./_has"),i=e("./_descriptors"),a=e("./_export"),s=e("./_redefine"),u=e("./_meta").KEY,c=e("./_fails"),l=e("./_shared"),f=e("./_set-to-string-tag"),d=e("./_uid"),p=e("./_wks"),h=e("./_wks-ext"),y=e("./_wks-define"),m=e("./_keyof"),v=e("./_enum-keys"),_=e("./_is-array"),b=e("./_an-object"),g=e("./_to-iobject"),E=e("./_to-primitive"),j=e("./_property-desc"),w=e("./_object-create"),O=e("./_object-gopn-ext"),M=e("./_object-gopd"),x=e("./_object-dp"),P=e("./_object-keys"),k=M.f,R=x.f,S=O.f,A=n.Symbol,T=n.JSON,N=T&&T.stringify,I="prototype",U=p("_hidden"),C=p("toPrimitive"),L={}.propertyIsEnumerable,F=l("symbol-registry"),B=l("symbols"),D=l("op-symbols"),G=Object[I],K="function"==typeof A,Y=n.QObject,q=!Y||!Y[I]||!Y[I].findChild,z=i&&c(function(){return 7!=w(R({},"a",{get:function(){return R(this,"a",{value:7}).a}})).a})?function(e,t,r){var n=k(G,t);n&&delete G[t],R(e,t,r),n&&e!==G&&R(G,t,n)}:R,H=function(e){var t=B[e]=w(A[I]);return t._k=e,t},W=K&&"symbol"==typeof A.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof A},J=function(e,t,r){return e===G&&J(D,t,r),b(e),t=E(t,!0),b(r),o(B,t)?(r.enumerable?(o(e,U)&&e[U][t]&&(e[U][t]=!1),r=w(r,{enumerable:j(0,!1)})):(o(e,U)||R(e,U,j(1,{})),e[U][t]=!0),z(e,t,r)):R(e,t,r)},V=function(e,t){b(e);for(var r,n=v(t=g(t)),o=0,i=n.length;i>o;)J(e,r=n[o++],t[r]);return e},$=function(e,t){return void 0===t?w(e):V(w(e),t)},X=function(e){var t=L.call(this,e=E(e,!0));return!(this===G&&o(B,e)&&!o(D,e))&&(!(t||!o(this,e)||!o(B,e)||o(this,U)&&this[U][e])||t)},Q=function(e,t){if(e=g(e),t=E(t,!0),e!==G||!o(B,t)||o(D,t)){var r=k(e,t);return!r||!o(B,t)||o(e,U)&&e[U][t]||(r.enumerable=!0),r}},Z=function(e){for(var t,r=S(g(e)),n=[],i=0;r.length>i;)o(B,t=r[i++])||t==U||t==u||n.push(t);return n},ee=function(e){for(var t,r=e===G,n=S(r?D:g(e)),i=[],a=0;n.length>a;)!o(B,t=n[a++])||r&&!o(G,t)||i.push(B[t]);return i};K||(A=function(){if(this instanceof A)throw TypeError("Symbol is not a constructor!");var e=d(arguments.length>0?arguments[0]:void 0),t=function(r){this===G&&t.call(D,r),o(this,U)&&o(this[U],e)&&(this[U][e]=!1),z(this,e,j(1,r))};return i&&q&&z(G,e,{configurable:!0,set:t}),H(e)},s(A[I],"toString",function(){return this._k}),M.f=Q,x.f=J,e("./_object-gopn").f=O.f=Z,e("./_object-pie").f=X,e("./_object-gops").f=ee,i&&!e("./_library")&&s(G,"propertyIsEnumerable",X,!0),h.f=function(e){return H(p(e))}),a(a.G+a.W+a.F*!K,{Symbol:A});for(var te="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),re=0;te.length>re;)p(te[re++]);for(var te=P(p.store),re=0;te.length>re;)y(te[re++]);a(a.S+a.F*!K,"Symbol",{"for":function(e){return o(F,e+="")?F[e]:F[e]=A(e)},keyFor:function(e){if(W(e))return m(F,e);throw TypeError(e+" is not a symbol!")},useSetter:function(){q=!0},useSimple:function(){q=!1}}),a(a.S+a.F*!K,"Object",{create:$,defineProperty:J,defineProperties:V,getOwnPropertyDescriptor:Q,getOwnPropertyNames:Z,getOwnPropertySymbols:ee}),T&&a(a.S+a.F*(!K||c(function(){var e=A();return"[null]"!=N([e])||"{}"!=N({a:e})||"{}"!=N(Object(e))})),"JSON",{stringify:function(e){if(void 0!==e&&!W(e)){for(var t,r,n=[e],o=1;arguments.length>o;)n.push(arguments[o++]);return t=n[1],"function"==typeof t&&(r=t),!r&&_(t)||(t=function(e,t){if(r&&(t=r.call(this,e,t)),!W(t))return t}),n[1]=t,N.apply(T,n)}}}),A[I][C]||e("./_hide")(A[I],C,A[I].valueOf),f(A,"Symbol"),f(Math,"Math",!0),f(n.JSON,"JSON",!0)},{"./_an-object":27,"./_descriptors":33,"./_enum-keys":36,"./_export":37,"./_fails":38,"./_global":39,"./_has":40,"./_hide":41,"./_is-array":45,"./_keyof":51,"./_library":52,"./_meta":53,"./_object-create":54,"./_object-dp":55,"./_object-gopd":57,"./_object-gopn":59,"./_object-gopn-ext":58,"./_object-gops":60,"./_object-keys":63,"./_object-pie":64,"./_property-desc":66,"./_redefine":67,"./_set-to-string-tag":69,"./_shared":71,"./_to-iobject":75,"./_to-primitive":78,"./_uid":79,"./_wks":82,"./_wks-define":80,"./_wks-ext":81}],93:[function(e,t,r){e("./_wks-define")("asyncIterator")},{"./_wks-define":80}],94:[function(e,t,r){e("./_wks-define")("observable")},{"./_wks-define":80}],95:[function(e,t,r){e("./es6.array.iterator");for(var n=e("./_global"),o=e("./_hide"),i=e("./_iterators"),a=e("./_wks")("toStringTag"),s=["NodeList","DOMTokenList","MediaList","StyleSheetList","CSSRuleList"],u=0;u<5;u++){var c=s[u],l=n[c],f=l&&l.prototype;f&&!f[a]&&o(f,a,c),i[c]=i.Array}},{"./_global":39,"./_hide":41,"./_iterators":50,"./_wks":82,"./es6.array.iterator":83}],96:[function(e,t,r){function n(){d&&l&&(d=!1,l.length?f=l.concat(f):p=-1,f.length&&o())}function o(){if(!d){var e=s(n);d=!0;for(var t=f.length;t;){for(l=f,f=[];++p<t;)l&&l[p].run();p=-1,t=f.length}l=null,d=!1,u(e)}}function i(e,t){this.fun=e,this.array=t}function a(){}var s,u,c=t.exports={};!function(){try{s=setTimeout}catch(e){s=function(){throw new Error("setTimeout is not defined")}}try{u=clearTimeout}catch(e){u=function(){throw new Error("clearTimeout is not defined")}}}();var l,f=[],d=!1,p=-1;c.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];f.push(new i(e,t)),1!==f.length||d||s(o,0)},i.prototype.run=function(){this.fun.apply(null,this.array)},c.title="browser",c.browser=!0,c.env={},c.argv=[],c.version="",c.versions={},c.on=a,c.addListener=a,c.once=a,c.off=a,c.removeListener=a,c.removeAllListeners=a,c.emit=a,c.binding=function(e){throw new Error("process.binding is not supported")},c.cwd=function(){return"/"},c.chdir=function(e){throw new Error("process.chdir is not supported")},c.umask=function(){return 0}},{}],97:[function(e,t,r){(function(r){var n="object"==typeof r?r:"object"==typeof window?window:"object"==typeof self?self:this,o=n.regeneratorRuntime&&Object.getOwnPropertyNames(n).indexOf("regeneratorRuntime")>=0,i=o&&n.regeneratorRuntime;if(n.regeneratorRuntime=void 0,t.exports=e("./runtime"),o)n.regeneratorRuntime=i;else try{delete n.regeneratorRuntime}catch(a){n.regeneratorRuntime=void 0}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./runtime":98}],98:[function(e,t,r){(function(e,r){!function(r){"use strict";function n(e,t,r,n){var o=Object.create((t||i).prototype),a=new h(n||[]);return o._invoke=f(e,r,a),o}function o(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(n){return{type:"throw",arg:n}}}function i(){}function a(){}function s(){}function u(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function c(e){this.arg=e}function l(t){function r(e,n,i,a){var s=o(t[e],t,n);if("throw"!==s.type){var u=s.arg,l=u.value;return l instanceof c?Promise.resolve(l.arg).then(function(e){r("next",e,i,a)},function(e){r("throw",e,i,a)}):Promise.resolve(l).then(function(e){u.value=e,i(u)},a)}a(s.arg)}function n(e,t){function n(){return new Promise(function(n,o){r(e,t,n,o)})}return i=i?i.then(n,n):n()}"object"==typeof e&&e.domain&&(r=e.domain.bind(r));var i;this._invoke=n}function f(e,t,r){var n=O;return function(i,a){if(n===x)throw new Error("Generator is already running");if(n===P){if("throw"===i)throw a;return m()}for(;;){var s=r.delegate;if(s){if("return"===i||"throw"===i&&s.iterator[i]===v){r.delegate=null;var u=s.iterator["return"];if(u){var c=o(u,s.iterator,a);if("throw"===c.type){i="throw",a=c.arg;continue}}if("return"===i)continue}var c=o(s.iterator[i],s.iterator,a);if("throw"===c.type){r.delegate=null,i="throw",a=c.arg;continue}i="next",a=v;var l=c.arg;if(!l.done)return n=M,l;r[s.resultName]=l.value,r.next=s.nextLoc,r.delegate=null}if("next"===i)r.sent=r._sent=a;else if("throw"===i){if(n===O)throw n=P,a;r.dispatchException(a)&&(i="next",a=v)}else"return"===i&&r.abrupt("return",a);n=x;var c=o(e,t,r);if("normal"===c.type){n=r.done?P:M;var l={value:c.arg,done:r.done};if(c.arg!==k)return l;r.delegate&&"next"===i&&(a=v)}else"throw"===c.type&&(n=P,i="throw",a=c.arg)}}}function d(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function p(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function h(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(d,this),this.reset(!0)}function y(e){if(e){var t=e[g];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,n=function o(){for(;++r<e.length;)if(_.call(e,r))return o.value=e[r],o.done=!1,o;return o.value=v,o.done=!0,o};return n.next=n}}return{next:m}}function m(){return{value:v,done:!0}}var v,_=Object.prototype.hasOwnProperty,b="function"==typeof Symbol?Symbol:{},g=b.iterator||"@@iterator",E=b.toStringTag||"@@toStringTag",j="object"==typeof t,w=r.regeneratorRuntime;if(w)return void(j&&(t.exports=w));w=r.regeneratorRuntime=j?t.exports:{},w.wrap=n;var O="suspendedStart",M="suspendedYield",x="executing",P="completed",k={},R=s.prototype=i.prototype;a.prototype=R.constructor=s,s.constructor=a,s[E]=a.displayName="GeneratorFunction",w.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===a||"GeneratorFunction"===(t.displayName||t.name))},w.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,s):(e.__proto__=s,E in e||(e[E]="GeneratorFunction")),e.prototype=Object.create(R),e},w.awrap=function(e){return new c(e)},u(l.prototype),w.async=function(e,t,r,o){var i=new l(n(e,t,r,o));return w.isGeneratorFunction(t)?i:i.next().then(function(e){return e.done?e.value:i.next()})},u(R),R[g]=function(){return this},R[E]="Generator",R.toString=function(){return"[object Generator]"},w.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},w.values=y,h.prototype={constructor:h,reset:function(e){
if(this.prev=0,this.next=0,this.sent=this._sent=v,this.done=!1,this.delegate=null,this.tryEntries.forEach(p),!e)for(var t in this)"t"===t.charAt(0)&&_.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=v)},stop:function(){this.done=!0;var e=this.tryEntries[0],t=e.completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){function t(t,n){return i.type="throw",i.arg=e,r.next=t,!!n}if(this.done)throw e;for(var r=this,n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n],i=o.completion;if("root"===o.tryLoc)return t("end");if(o.tryLoc<=this.prev){var a=_.call(o,"catchLoc"),s=_.call(o,"finallyLoc");if(a&&s){if(this.prev<o.catchLoc)return t(o.catchLoc,!0);if(this.prev<o.finallyLoc)return t(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return t(o.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return t(o.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&_.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var o=n;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?this.next=o.finallyLoc:this.complete(i),k},complete:function(e,t){if("throw"===e.type)throw e.arg;"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=e.arg,this.next="end"):"normal"===e.type&&t&&(this.next=t)},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),p(r),k}},"catch":function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;p(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:y(e),resultName:t,nextLoc:r},k}}}("object"==typeof r?r:"object"==typeof window?window:"object"==typeof self?self:this)}).call(this,e("_process"),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{_process:96}],99:[function(t,r,n){!function(t,n){"function"==typeof e&&e.amd?e([],n):"undefined"!=typeof r&&r.exports?r.exports=n():t.tv4=n()}(this,function(){function e(e){return encodeURI(e).replace(/%25[0-9][0-9]/g,function(e){return"%"+e.substring(3)})}function t(t){var r="";d[t.charAt(0)]&&(r=t.charAt(0),t=t.substring(1));var n="",o="",i=!0,a=!1,s=!1;"+"===r?i=!1:"."===r?(o=".",n="."):"/"===r?(o="/",n="/"):"#"===r?(o="#",i=!1):";"===r?(o=";",n=";",a=!0,s=!0):"?"===r?(o="?",n="&",a=!0):"&"===r&&(o="&",n="&",a=!0);for(var u=[],c=t.split(","),l=[],f={},h=0;h<c.length;h++){var y=c[h],m=null;if(y.indexOf(":")!==-1){var v=y.split(":");y=v[0],m=parseInt(v[1],10)}for(var _={};p[y.charAt(y.length-1)];)_[y.charAt(y.length-1)]=!0,y=y.substring(0,y.length-1);var b={truncate:m,name:y,suffices:_};l.push(b),f[y]=b,u.push(y)}var g=function(t){for(var r="",u=0,c=0;c<l.length;c++){var f=l[c],d=t(f.name);if(null===d||void 0===d||Array.isArray(d)&&0===d.length||"object"==typeof d&&0===Object.keys(d).length)u++;else if(r+=c===u?o:n||",",Array.isArray(d)){a&&(r+=f.name+"=");for(var p=0;p<d.length;p++)p>0&&(r+=f.suffices["*"]?n||",":",",f.suffices["*"]&&a&&(r+=f.name+"=")),r+=i?encodeURIComponent(d[p]).replace(/!/g,"%21"):e(d[p])}else if("object"==typeof d){a&&!f.suffices["*"]&&(r+=f.name+"=");var h=!0;for(var y in d)h||(r+=f.suffices["*"]?n||",":","),h=!1,r+=i?encodeURIComponent(y).replace(/!/g,"%21"):e(y),r+=f.suffices["*"]?"=":",",r+=i?encodeURIComponent(d[y]).replace(/!/g,"%21"):e(d[y])}else a&&(r+=f.name,s&&""===d||(r+="=")),null!=f.truncate&&(d=d.substring(0,f.truncate)),r+=i?encodeURIComponent(d).replace(/!/g,"%21"):e(d)}return r};return g.varNames=u,{prefix:o,substitution:g}}function r(e){if(!(this instanceof r))return new r(e);for(var n=e.split("{"),o=[n.shift()],i=[],a=[],s=[];n.length>0;){var u=n.shift(),c=u.split("}")[0],l=u.substring(c.length+1),f=t(c);a.push(f.substitution),i.push(f.prefix),o.push(l),s=s.concat(f.substitution.varNames)}this.fill=function(e){for(var t=o[0],r=0;r<a.length;r++){var n=a[r];t+=n(e),t+=o[r+1]}return t},this.varNames=s,this.template=e}function n(e,t){if(e===t)return!0;if(e&&t&&"object"==typeof e&&"object"==typeof t){if(Array.isArray(e)!==Array.isArray(t))return!1;if(Array.isArray(e)){if(e.length!==t.length)return!1;for(var r=0;r<e.length;r++)if(!n(e[r],t[r]))return!1}else{var o;for(o in e)if(void 0===t[o]&&void 0!==e[o])return!1;for(o in t)if(void 0===e[o]&&void 0!==t[o])return!1;for(o in e)if(!n(e[o],t[o]))return!1}return!0}return!1}function o(e){var t=String(e).replace(/^\s+|\s+$/g,"").match(/^([^:\/?#]+:)?(\/\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);return t?{href:t[0]||"",protocol:t[1]||"",authority:t[2]||"",host:t[3]||"",hostname:t[4]||"",port:t[5]||"",pathname:t[6]||"",search:t[7]||"",hash:t[8]||""}:null}function i(e,t){function r(e){var t=[];return e.replace(/^(\.\.?(\/|$))+/,"").replace(/\/(\.(\/|$))+/g,"/").replace(/\/\.\.$/,"/../").replace(/\/?[^\/]*/g,function(e){"/.."===e?t.pop():t.push(e)}),t.join("").replace(/^\//,"/"===e.charAt(0)?"/":"")}return t=o(t||""),e=o(e||""),t&&e?(t.protocol||e.protocol)+(t.protocol||t.authority?t.authority:e.authority)+r(t.protocol||t.authority||"/"===t.pathname.charAt(0)?t.pathname:t.pathname?(e.authority&&!e.pathname?"/":"")+e.pathname.slice(0,e.pathname.lastIndexOf("/")+1)+t.pathname:e.pathname)+(t.protocol||t.authority||t.pathname?t.search:t.search||e.search)+t.hash:null}function a(e){return e.split("#")[0]}function s(e,t){if(e&&"object"==typeof e)if(void 0===t?t=e.id:"string"==typeof e.id&&(t=i(t,e.id),e.id=t),Array.isArray(e))for(var r=0;r<e.length;r++)s(e[r],t);else{"string"==typeof e.$ref&&(e.$ref=i(t,e.$ref));for(var n in e)"enum"!==n&&s(e[n],t)}}function u(e){e=e||"en";var t=E[e];return function(e){var r=t[e.code]||g[e.code];if("string"!=typeof r)return"Unknown error code "+e.code+": "+JSON.stringify(e.messageParams);var n=e.params;return r.replace(/\{([^{}]*)\}/g,function(e,t){var r=n[t];return"string"==typeof r||"number"==typeof r?r:e})}}function c(e,t,r,n,o){if(Error.call(this),void 0===e)throw new Error("No error code supplied: "+n);this.message="",this.params=t,this.code=e,this.dataPath=r||"",this.schemaPath=n||"",this.subErrors=o||null;var i=new Error(this.message);if(this.stack=i.stack||i.stacktrace,!this.stack)try{throw i}catch(i){this.stack=i.stack||i.stacktrace}}function l(e,t){if(t.substring(0,e.length)===e){var r=t.substring(e.length);if(t.length>0&&"/"===t.charAt(e.length-1)||"#"===r.charAt(0)||"?"===r.charAt(0))return!0}return!1}function f(e){var t,r,n=new h,o={setErrorReporter:function(e){return"string"==typeof e?this.language(e):(r=e,!0)},addFormat:function(){n.addFormat.apply(n,arguments)},language:function(e){return e?(E[e]||(e=e.split("-")[0]),!!E[e]&&(t=e,e)):t},addLanguage:function(e,t){var r;for(r in v)t[r]&&!t[v[r]]&&(t[v[r]]=t[r]);var n=e.split("-")[0];if(E[n]){E[e]=Object.create(E[n]);for(r in t)"undefined"==typeof E[n][r]&&(E[n][r]=t[r]),E[e][r]=t[r]}else E[e]=t,E[n]=t;return this},freshApi:function(e){var t=f();return e&&t.language(e),t},validate:function(e,o,i,a){var s=u(t),c=r?function(e,t,n){return r(e,t,n)||s(e,t,n)}:s,l=new h(n,(!1),c,i,a);"string"==typeof o&&(o={$ref:o}),l.addSchema("",o);var f=l.validateAll(e,o,null,null,"");return!f&&a&&(f=l.banUnknownProperties(e,o)),this.error=f,this.missing=l.missing,this.valid=null===f,this.valid},validateResult:function(){var e={};return this.validate.apply(e,arguments),e},validateMultiple:function(e,o,i,a){var s=u(t),c=r?function(e,t,n){return r(e,t,n)||s(e,t,n)}:s,l=new h(n,(!0),c,i,a);"string"==typeof o&&(o={$ref:o}),l.addSchema("",o),l.validateAll(e,o,null,null,""),a&&l.banUnknownProperties(e,o);var f={};return f.errors=l.errors,f.missing=l.missing,f.valid=0===f.errors.length,f},addSchema:function(){return n.addSchema.apply(n,arguments)},getSchema:function(){return n.getSchema.apply(n,arguments)},getSchemaMap:function(){return n.getSchemaMap.apply(n,arguments)},getSchemaUris:function(){return n.getSchemaUris.apply(n,arguments)},getMissingUris:function(){return n.getMissingUris.apply(n,arguments)},dropSchemas:function(){n.dropSchemas.apply(n,arguments)},defineKeyword:function(){n.defineKeyword.apply(n,arguments)},defineError:function(e,t,r){if("string"!=typeof e||!/^[A-Z]+(_[A-Z]+)*$/.test(e))throw new Error("Code name must be a string in UPPER_CASE_WITH_UNDERSCORES");if("number"!=typeof t||t%1!==0||t<1e4)throw new Error("Code number must be an integer > 10000");if("undefined"!=typeof v[e])throw new Error("Error already defined: "+e+" as "+v[e]);if("undefined"!=typeof _[t])throw new Error("Error code already used: "+_[t]+" as "+t);v[e]=t,_[t]=e,g[e]=g[t]=r;for(var n in E){var o=E[n];o[e]&&(o[t]=o[t]||o[e])}},reset:function(){n.reset(),this.error=null,this.missing=[],this.valid=!0},missing:[],error:null,valid:!0,normSchema:s,resolveUrl:i,getDocumentUri:a,errorCodes:v};return o.language(e||"en"),o}Object.keys||(Object.keys=function(){var e=Object.prototype.hasOwnProperty,t=!{toString:null}.propertyIsEnumerable("toString"),r=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],n=r.length;return function(o){if("object"!=typeof o&&"function"!=typeof o||null===o)throw new TypeError("Object.keys called on non-object");var i=[];for(var a in o)e.call(o,a)&&i.push(a);if(t)for(var s=0;s<n;s++)e.call(o,r[s])&&i.push(r[s]);return i}}()),Object.create||(Object.create=function(){function e(){}return function(t){if(1!==arguments.length)throw new Error("Object.create implementation only accepts one parameter.");return e.prototype=t,new e}}()),Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),Array.prototype.indexOf||(Array.prototype.indexOf=function(e){if(null===this)throw new TypeError;var t=Object(this),r=t.length>>>0;if(0===r)return-1;var n=0;if(arguments.length>1&&(n=Number(arguments[1]),n!==n?n=0:0!==n&&n!==1/0&&n!==-(1/0)&&(n=(n>0||-1)*Math.floor(Math.abs(n)))),n>=r)return-1;for(var o=n>=0?n:Math.max(r-Math.abs(n),0);o<r;o++)if(o in t&&t[o]===e)return o;return-1}),Object.isFrozen||(Object.isFrozen=function(e){for(var t="tv4_test_frozen_key";e.hasOwnProperty(t);)t+=Math.random();try{return e[t]=!0,delete e[t],!1}catch(r){return!0}});var d={"+":!0,"#":!0,".":!0,"/":!0,";":!0,"?":!0,"&":!0},p={"*":!0};r.prototype={toString:function(){return this.template},fillFromObject:function(e){return this.fill(function(t){return e[t]})}};var h=function(e,t,r,n,o){if(this.missing=[],this.missingMap={},this.formatValidators=e?Object.create(e.formatValidators):{},this.schemas=e?Object.create(e.schemas):{},this.collectMultiple=t,this.errors=[],this.handleError=t?this.collectError:this.returnError,n&&(this.checkRecursive=!0,this.scanned=[],this.scannedFrozen=[],this.scannedFrozenSchemas=[],this.scannedFrozenValidationErrors=[],this.validatedSchemasKey="tv4_validation_id",this.validationErrorsKey="tv4_validation_errors_id"),o&&(this.trackUnknownProperties=!0,this.knownPropertyPaths={},this.unknownPropertyPaths={}),this.errorReporter=r||u("en"),"string"==typeof this.errorReporter)throw new Error("debug");if(this.definedKeywords={},e)for(var i in e.definedKeywords)this.definedKeywords[i]=e.definedKeywords[i].slice(0)};h.prototype.defineKeyword=function(e,t){this.definedKeywords[e]=this.definedKeywords[e]||[],this.definedKeywords[e].push(t)},h.prototype.createError=function(e,t,r,n,o,i,a){var s=new c(e,t,r,n,o);return s.message=this.errorReporter(s,i,a),s},h.prototype.returnError=function(e){return e},h.prototype.collectError=function(e){return e&&this.errors.push(e),null},h.prototype.prefixErrors=function(e,t,r){for(var n=e;n<this.errors.length;n++)this.errors[n]=this.errors[n].prefixWith(t,r);return this},h.prototype.banUnknownProperties=function(e,t){for(var r in this.unknownPropertyPaths){var n=this.createError(v.UNKNOWN_PROPERTY,{path:r},r,"",null,e,t),o=this.handleError(n);if(o)return o}return null},h.prototype.addFormat=function(e,t){if("object"==typeof e){for(var r in e)this.addFormat(r,e[r]);return this}this.formatValidators[e]=t},h.prototype.resolveRefs=function(e,t){if(void 0!==e.$ref){if(t=t||{},t[e.$ref])return this.createError(v.CIRCULAR_REFERENCE,{urls:Object.keys(t).join(", ")},"","",null,void 0,e);t[e.$ref]=!0,e=this.getSchema(e.$ref,t)}return e},h.prototype.getSchema=function(e,t){var r;if(void 0!==this.schemas[e])return r=this.schemas[e],this.resolveRefs(r,t);var n=e,o="";if(e.indexOf("#")!==-1&&(o=e.substring(e.indexOf("#")+1),n=e.substring(0,e.indexOf("#"))),"object"==typeof this.schemas[n]){r=this.schemas[n];var i=decodeURIComponent(o);if(""===i)return this.resolveRefs(r,t);if("/"!==i.charAt(0))return;for(var a=i.split("/").slice(1),s=0;s<a.length;s++){var u=a[s].replace(/~1/g,"/").replace(/~0/g,"~");if(void 0===r[u]){r=void 0;break}r=r[u]}if(void 0!==r)return this.resolveRefs(r,t)}void 0===this.missing[n]&&(this.missing.push(n),this.missing[n]=n,this.missingMap[n]=n)},h.prototype.searchSchemas=function(e,t){if(Array.isArray(e))for(var r=0;r<e.length;r++)this.searchSchemas(e[r],t);else if(e&&"object"==typeof e){"string"==typeof e.id&&l(t,e.id)&&void 0===this.schemas[e.id]&&(this.schemas[e.id]=e);for(var n in e)if("enum"!==n)if("object"==typeof e[n])this.searchSchemas(e[n],t);else if("$ref"===n){var o=a(e[n]);o&&void 0===this.schemas[o]&&void 0===this.missingMap[o]&&(this.missingMap[o]=o)}}},h.prototype.addSchema=function(e,t){if("string"!=typeof e||"undefined"==typeof t){if("object"!=typeof e||"string"!=typeof e.id)return;t=e,e=t.id}e===a(e)+"#"&&(e=a(e)),this.schemas[e]=t,delete this.missingMap[e],s(t,e),this.searchSchemas(t,e)},h.prototype.getSchemaMap=function(){var e={};for(var t in this.schemas)e[t]=this.schemas[t];return e},h.prototype.getSchemaUris=function(e){var t=[];for(var r in this.schemas)e&&!e.test(r)||t.push(r);return t},h.prototype.getMissingUris=function(e){var t=[];for(var r in this.missingMap)e&&!e.test(r)||t.push(r);return t},h.prototype.dropSchemas=function(){this.schemas={},this.reset()},h.prototype.reset=function(){this.missing=[],this.missingMap={},this.errors=[]},h.prototype.validateAll=function(e,t,r,n,o){var i;if(t=this.resolveRefs(t),!t)return null;if(t instanceof c)return this.errors.push(t),t;var a,s=this.errors.length,u=null,l=null;if(this.checkRecursive&&e&&"object"==typeof e){if(i=!this.scanned.length,e[this.validatedSchemasKey]){var f=e[this.validatedSchemasKey].indexOf(t);if(f!==-1)return this.errors=this.errors.concat(e[this.validationErrorsKey][f]),null}if(Object.isFrozen(e)&&(a=this.scannedFrozen.indexOf(e),a!==-1)){var d=this.scannedFrozenSchemas[a].indexOf(t);if(d!==-1)return this.errors=this.errors.concat(this.scannedFrozenValidationErrors[a][d]),null}if(this.scanned.push(e),Object.isFrozen(e))a===-1&&(a=this.scannedFrozen.length,this.scannedFrozen.push(e),this.scannedFrozenSchemas.push([])),u=this.scannedFrozenSchemas[a].length,this.scannedFrozenSchemas[a][u]=t,this.scannedFrozenValidationErrors[a][u]=[];else{if(!e[this.validatedSchemasKey])try{Object.defineProperty(e,this.validatedSchemasKey,{value:[],configurable:!0}),Object.defineProperty(e,this.validationErrorsKey,{value:[],configurable:!0})}catch(p){e[this.validatedSchemasKey]=[],e[this.validationErrorsKey]=[]}l=e[this.validatedSchemasKey].length,e[this.validatedSchemasKey][l]=t,e[this.validationErrorsKey][l]=[]}}var h=this.errors.length,y=this.validateBasic(e,t,o)||this.validateNumeric(e,t,o)||this.validateString(e,t,o)||this.validateArray(e,t,o)||this.validateObject(e,t,o)||this.validateCombinations(e,t,o)||this.validateHypermedia(e,t,o)||this.validateFormat(e,t,o)||this.validateDefinedKeywords(e,t,o)||null;if(i){for(;this.scanned.length;){var m=this.scanned.pop();delete m[this.validatedSchemasKey]}this.scannedFrozen=[],this.scannedFrozenSchemas=[]}if(y||h!==this.errors.length)for(;r&&r.length||n&&n.length;){var v=r&&r.length?""+r.pop():null,_=n&&n.length?""+n.pop():null;y&&(y=y.prefixWith(v,_)),this.prefixErrors(h,v,_)}return null!==u?this.scannedFrozenValidationErrors[a][u]=this.errors.slice(s):null!==l&&(e[this.validationErrorsKey][l]=this.errors.slice(s)),this.handleError(y)},h.prototype.validateFormat=function(e,t){if("string"!=typeof t.format||!this.formatValidators[t.format])return null;var r=this.formatValidators[t.format].call(null,e,t);return"string"==typeof r||"number"==typeof r?this.createError(v.FORMAT_CUSTOM,{message:r},"","/format",null,e,t):r&&"object"==typeof r?this.createError(v.FORMAT_CUSTOM,{message:r.message||"?"},r.dataPath||"",r.schemaPath||"/format",null,e,t):null},h.prototype.validateDefinedKeywords=function(e,t,r){for(var n in this.definedKeywords)if("undefined"!=typeof t[n])for(var o=this.definedKeywords[n],i=0;i<o.length;i++){var a=o[i],s=a(e,t[n],t,r);if("string"==typeof s||"number"==typeof s)return this.createError(v.KEYWORD_CUSTOM,{key:n,message:s},"","",null,e,t).prefixWith(null,n);if(s&&"object"==typeof s){var u=s.code;if("string"==typeof u){if(!v[u])throw new Error("Undefined error code (use defineError): "+u);u=v[u]}else"number"!=typeof u&&(u=v.KEYWORD_CUSTOM);var c="object"==typeof s.message?s.message:{key:n,message:s.message||"?"},l=s.schemaPath||"/"+n.replace(/~/g,"~0").replace(/\//g,"~1");return this.createError(u,c,s.dataPath||null,l,null,e,t)}}return null},h.prototype.validateBasic=function(e,t,r){var n;return(n=this.validateType(e,t,r))?n.prefixWith(null,"type"):(n=this.validateEnum(e,t,r))?n.prefixWith(null,"type"):null},h.prototype.validateType=function(e,t){if(void 0===t.type)return null;var r=typeof e;null===e?r="null":Array.isArray(e)&&(r="array");var n=t.type;Array.isArray(n)||(n=[n]);for(var o=0;o<n.length;o++){var i=n[o];if(i===r||"integer"===i&&"number"===r&&e%1===0)return null}return this.createError(v.INVALID_TYPE,{type:r,expected:n.join("/")},"","",null,e,t)},h.prototype.validateEnum=function(e,t){if(void 0===t["enum"])return null;for(var r=0;r<t["enum"].length;r++){var o=t["enum"][r];if(n(e,o))return null}return this.createError(v.ENUM_MISMATCH,{value:"undefined"!=typeof JSON?JSON.stringify(e):e},"","",null,e,t)},h.prototype.validateNumeric=function(e,t,r){return this.validateMultipleOf(e,t,r)||this.validateMinMax(e,t,r)||this.validateNaN(e,t,r)||null};var y=Math.pow(2,-51),m=1-y;h.prototype.validateMultipleOf=function(e,t){var r=t.multipleOf||t.divisibleBy;if(void 0===r)return null;if("number"==typeof e){var n=e/r%1;if(n>=y&&n<m)return this.createError(v.NUMBER_MULTIPLE_OF,{value:e,multipleOf:r},"","",null,e,t)}return null},h.prototype.validateMinMax=function(e,t){if("number"!=typeof e)return null;if(void 0!==t.minimum){if(e<t.minimum)return this.createError(v.NUMBER_MINIMUM,{value:e,minimum:t.minimum},"","/minimum",null,e,t);if(t.exclusiveMinimum&&e===t.minimum)return this.createError(v.NUMBER_MINIMUM_EXCLUSIVE,{value:e,minimum:t.minimum},"","/exclusiveMinimum",null,e,t)}if(void 0!==t.maximum){if(e>t.maximum)return this.createError(v.NUMBER_MAXIMUM,{value:e,maximum:t.maximum},"","/maximum",null,e,t);if(t.exclusiveMaximum&&e===t.maximum)return this.createError(v.NUMBER_MAXIMUM_EXCLUSIVE,{value:e,maximum:t.maximum},"","/exclusiveMaximum",null,e,t)}return null},h.prototype.validateNaN=function(e,t){return"number"!=typeof e?null:isNaN(e)===!0||e===1/0||e===-(1/0)?this.createError(v.NUMBER_NOT_A_NUMBER,{value:e},"","/type",null,e,t):null},h.prototype.validateString=function(e,t,r){return this.validateStringLength(e,t,r)||this.validateStringPattern(e,t,r)||null},h.prototype.validateStringLength=function(e,t){return"string"!=typeof e?null:void 0!==t.minLength&&e.length<t.minLength?this.createError(v.STRING_LENGTH_SHORT,{length:e.length,minimum:t.minLength},"","/minLength",null,e,t):void 0!==t.maxLength&&e.length>t.maxLength?this.createError(v.STRING_LENGTH_LONG,{length:e.length,maximum:t.maxLength},"","/maxLength",null,e,t):null},h.prototype.validateStringPattern=function(e,t){if("string"!=typeof e||"string"!=typeof t.pattern&&!(t.pattern instanceof RegExp))return null;var r;if(t.pattern instanceof RegExp)r=t.pattern;else{var n,o="",i=t.pattern.match(/^\/(.+)\/([img]*)$/);i?(n=i[1],o=i[2]):n=t.pattern,r=new RegExp(n,o)}return r.test(e)?null:this.createError(v.STRING_PATTERN,{pattern:t.pattern},"","/pattern",null,e,t)},h.prototype.validateArray=function(e,t,r){return Array.isArray(e)?this.validateArrayLength(e,t,r)||this.validateArrayUniqueItems(e,t,r)||this.validateArrayItems(e,t,r)||null:null},h.prototype.validateArrayLength=function(e,t){var r;return void 0!==t.minItems&&e.length<t.minItems&&(r=this.createError(v.ARRAY_LENGTH_SHORT,{length:e.length,minimum:t.minItems},"","/minItems",null,e,t),this.handleError(r))?r:void 0!==t.maxItems&&e.length>t.maxItems&&(r=this.createError(v.ARRAY_LENGTH_LONG,{length:e.length,maximum:t.maxItems},"","/maxItems",null,e,t),this.handleError(r))?r:null},h.prototype.validateArrayUniqueItems=function(e,t){if(t.uniqueItems)for(var r=0;r<e.length;r++)for(var o=r+1;o<e.length;o++)if(n(e[r],e[o])){var i=this.createError(v.ARRAY_UNIQUE,{match1:r,match2:o},"","/uniqueItems",null,e,t);if(this.handleError(i))return i}return null},h.prototype.validateArrayItems=function(e,t,r){if(void 0===t.items)return null;var n,o;if(Array.isArray(t.items)){for(o=0;o<e.length;o++)if(o<t.items.length){if(n=this.validateAll(e[o],t.items[o],[o],["items",o],r+"/"+o))return n}else if(void 0!==t.additionalItems)if("boolean"==typeof t.additionalItems){if(!t.additionalItems&&(n=this.createError(v.ARRAY_ADDITIONAL_ITEMS,{},"/"+o,"/additionalItems",null,e,t),this.handleError(n)))return n}else if(n=this.validateAll(e[o],t.additionalItems,[o],["additionalItems"],r+"/"+o))return n}else for(o=0;o<e.length;o++)if(n=this.validateAll(e[o],t.items,[o],["items"],r+"/"+o))return n;return null},h.prototype.validateObject=function(e,t,r){return"object"!=typeof e||null===e||Array.isArray(e)?null:this.validateObjectMinMaxProperties(e,t,r)||this.validateObjectRequiredProperties(e,t,r)||this.validateObjectProperties(e,t,r)||this.validateObjectDependencies(e,t,r)||null},h.prototype.validateObjectMinMaxProperties=function(e,t){var r,n=Object.keys(e);return void 0!==t.minProperties&&n.length<t.minProperties&&(r=this.createError(v.OBJECT_PROPERTIES_MINIMUM,{propertyCount:n.length,minimum:t.minProperties},"","/minProperties",null,e,t),this.handleError(r))?r:void 0!==t.maxProperties&&n.length>t.maxProperties&&(r=this.createError(v.OBJECT_PROPERTIES_MAXIMUM,{propertyCount:n.length,maximum:t.maxProperties},"","/maxProperties",null,e,t),this.handleError(r))?r:null},h.prototype.validateObjectRequiredProperties=function(e,t){if(void 0!==t.required)for(var r=0;r<t.required.length;r++){var n=t.required[r];if(void 0===e[n]){var o=this.createError(v.OBJECT_REQUIRED,{key:n},"","/required/"+r,null,e,t);if(this.handleError(o))return o}}return null},h.prototype.validateObjectProperties=function(e,t,r){var n;for(var o in e){var i=r+"/"+o.replace(/~/g,"~0").replace(/\//g,"~1"),a=!1;if(void 0!==t.properties&&void 0!==t.properties[o]&&(a=!0,n=this.validateAll(e[o],t.properties[o],[o],["properties",o],i)))return n;if(void 0!==t.patternProperties)for(var s in t.patternProperties){var u=new RegExp(s);if(u.test(o)&&(a=!0,n=this.validateAll(e[o],t.patternProperties[s],[o],["patternProperties",s],i)))return n}if(a)this.trackUnknownProperties&&(this.knownPropertyPaths[i]=!0,delete this.unknownPropertyPaths[i]);else if(void 0!==t.additionalProperties){if(this.trackUnknownProperties&&(this.knownPropertyPaths[i]=!0,delete this.unknownPropertyPaths[i]),"boolean"==typeof t.additionalProperties){if(!t.additionalProperties&&(n=this.createError(v.OBJECT_ADDITIONAL_PROPERTIES,{key:o},"","/additionalProperties",null,e,t).prefixWith(o,null),this.handleError(n)))return n}else if(n=this.validateAll(e[o],t.additionalProperties,[o],["additionalProperties"],i))return n}else this.trackUnknownProperties&&!this.knownPropertyPaths[i]&&(this.unknownPropertyPaths[i]=!0)}return null},h.prototype.validateObjectDependencies=function(e,t,r){var n;if(void 0!==t.dependencies)for(var o in t.dependencies)if(void 0!==e[o]){var i=t.dependencies[o];if("string"==typeof i){if(void 0===e[i]&&(n=this.createError(v.OBJECT_DEPENDENCY_KEY,{key:o,missing:i},"","",null,e,t).prefixWith(null,o).prefixWith(null,"dependencies"),this.handleError(n)))return n}else if(Array.isArray(i))for(var a=0;a<i.length;a++){var s=i[a];if(void 0===e[s]&&(n=this.createError(v.OBJECT_DEPENDENCY_KEY,{key:o,missing:s},"","/"+a,null,e,t).prefixWith(null,o).prefixWith(null,"dependencies"),this.handleError(n)))return n}else if(n=this.validateAll(e,i,[],["dependencies",o],r))return n}return null},h.prototype.validateCombinations=function(e,t,r){return this.validateAllOf(e,t,r)||this.validateAnyOf(e,t,r)||this.validateOneOf(e,t,r)||this.validateNot(e,t,r)||null},h.prototype.validateAllOf=function(e,t,r){if(void 0===t.allOf)return null;for(var n,o=0;o<t.allOf.length;o++){var i=t.allOf[o];if(n=this.validateAll(e,i,[],["allOf",o],r))return n}return null},h.prototype.validateAnyOf=function(e,t,r){if(void 0===t.anyOf)return null;var n,o,i=[],a=this.errors.length;this.trackUnknownProperties&&(n=this.unknownPropertyPaths,o=this.knownPropertyPaths);for(var s=!0,u=0;u<t.anyOf.length;u++){this.trackUnknownProperties&&(this.unknownPropertyPaths={},this.knownPropertyPaths={});var c=t.anyOf[u],l=this.errors.length,f=this.validateAll(e,c,[],["anyOf",u],r);if(null===f&&l===this.errors.length){if(this.errors=this.errors.slice(0,a),this.trackUnknownProperties){for(var d in this.knownPropertyPaths)o[d]=!0,delete n[d];for(var p in this.unknownPropertyPaths)o[p]||(n[p]=!0);s=!1;continue}return null}f&&i.push(f.prefixWith(null,""+u).prefixWith(null,"anyOf"))}return this.trackUnknownProperties&&(this.unknownPropertyPaths=n,this.knownPropertyPaths=o),s?(i=i.concat(this.errors.slice(a)),this.errors=this.errors.slice(0,a),this.createError(v.ANY_OF_MISSING,{},"","/anyOf",i,e,t)):void 0},h.prototype.validateOneOf=function(e,t,r){if(void 0===t.oneOf)return null;var n,o,i=null,a=[],s=this.errors.length;this.trackUnknownProperties&&(n=this.unknownPropertyPaths,o=this.knownPropertyPaths);for(var u=0;u<t.oneOf.length;u++){this.trackUnknownProperties&&(this.unknownPropertyPaths={},this.knownPropertyPaths={});var c=t.oneOf[u],l=this.errors.length,f=this.validateAll(e,c,[],["oneOf",u],r);if(null===f&&l===this.errors.length){if(null!==i)return this.errors=this.errors.slice(0,s),this.createError(v.ONE_OF_MULTIPLE,{index1:i,index2:u},"","/oneOf",null,e,t);if(i=u,this.trackUnknownProperties){for(var d in this.knownPropertyPaths)o[d]=!0,delete n[d];for(var p in this.unknownPropertyPaths)o[p]||(n[p]=!0)}}else f&&a.push(f)}return this.trackUnknownProperties&&(this.unknownPropertyPaths=n,this.knownPropertyPaths=o),null===i?(a=a.concat(this.errors.slice(s)),this.errors=this.errors.slice(0,s),this.createError(v.ONE_OF_MISSING,{},"","/oneOf",a,e,t)):(this.errors=this.errors.slice(0,s),null)},h.prototype.validateNot=function(e,t,r){if(void 0===t.not)return null;var n,o,i=this.errors.length;this.trackUnknownProperties&&(n=this.unknownPropertyPaths,o=this.knownPropertyPaths,this.unknownPropertyPaths={},this.knownPropertyPaths={});var a=this.validateAll(e,t.not,null,null,r),s=this.errors.slice(i);return this.errors=this.errors.slice(0,i),this.trackUnknownProperties&&(this.unknownPropertyPaths=n,this.knownPropertyPaths=o),null===a&&0===s.length?this.createError(v.NOT_PASSED,{},"","/not",null,e,t):null},h.prototype.validateHypermedia=function(e,t,n){if(!t.links)return null;for(var o,i=0;i<t.links.length;i++){var a=t.links[i];if("describedby"===a.rel){for(var s=new r(a.href),u=!0,c=0;c<s.varNames.length;c++)if(!(s.varNames[c]in e)){u=!1;break}if(u){var l=s.fillFromObject(e),f={$ref:l};if(o=this.validateAll(e,f,[],["links",i],n))return o}}}};var v={INVALID_TYPE:0,ENUM_MISMATCH:1,ANY_OF_MISSING:10,ONE_OF_MISSING:11,ONE_OF_MULTIPLE:12,NOT_PASSED:13,NUMBER_MULTIPLE_OF:100,NUMBER_MINIMUM:101,NUMBER_MINIMUM_EXCLUSIVE:102,NUMBER_MAXIMUM:103,NUMBER_MAXIMUM_EXCLUSIVE:104,NUMBER_NOT_A_NUMBER:105,STRING_LENGTH_SHORT:200,STRING_LENGTH_LONG:201,STRING_PATTERN:202,OBJECT_PROPERTIES_MINIMUM:300,OBJECT_PROPERTIES_MAXIMUM:301,OBJECT_REQUIRED:302,OBJECT_ADDITIONAL_PROPERTIES:303,OBJECT_DEPENDENCY_KEY:304,ARRAY_LENGTH_SHORT:400,ARRAY_LENGTH_LONG:401,ARRAY_UNIQUE:402,ARRAY_ADDITIONAL_ITEMS:403,FORMAT_CUSTOM:500,KEYWORD_CUSTOM:501,CIRCULAR_REFERENCE:600,UNKNOWN_PROPERTY:1e3},_={};for(var b in v)_[v[b]]=b;var g={INVALID_TYPE:"Invalid type: {type} (expected {expected})",ENUM_MISMATCH:"No enum match for: {value}",ANY_OF_MISSING:'Data does not match any schemas from "anyOf"',ONE_OF_MISSING:'Data does not match any schemas from "oneOf"',ONE_OF_MULTIPLE:'Data is valid against more than one schema from "oneOf": indices {index1} and {index2}',NOT_PASSED:'Data matches schema from "not"',NUMBER_MULTIPLE_OF:"Value {value} is not a multiple of {multipleOf}",NUMBER_MINIMUM:"Value {value} is less than minimum {minimum}",NUMBER_MINIMUM_EXCLUSIVE:"Value {value} is equal to exclusive minimum {minimum}",NUMBER_MAXIMUM:"Value {value} is greater than maximum {maximum}",NUMBER_MAXIMUM_EXCLUSIVE:"Value {value} is equal to exclusive maximum {maximum}",NUMBER_NOT_A_NUMBER:"Value {value} is not a valid number",STRING_LENGTH_SHORT:"String is too short ({length} chars), minimum {minimum}",STRING_LENGTH_LONG:"String is too long ({length} chars), maximum {maximum}",STRING_PATTERN:"String does not match pattern: {pattern}",OBJECT_PROPERTIES_MINIMUM:"Too few properties defined ({propertyCount}), minimum {minimum}",OBJECT_PROPERTIES_MAXIMUM:"Too many properties defined ({propertyCount}), maximum {maximum}",OBJECT_REQUIRED:"Missing required property: {key}",OBJECT_ADDITIONAL_PROPERTIES:"Additional properties not allowed",OBJECT_DEPENDENCY_KEY:"Dependency failed - key must exist: {missing} (due to key: {key})",ARRAY_LENGTH_SHORT:"Array is too short ({length}), minimum {minimum}",ARRAY_LENGTH_LONG:"Array is too long ({length}), maximum {maximum}",ARRAY_UNIQUE:"Array items are not unique (indices {match1} and {match2})",ARRAY_ADDITIONAL_ITEMS:"Additional items not allowed",FORMAT_CUSTOM:"Format validation failed ({message})",KEYWORD_CUSTOM:"Keyword failed: {key} ({message})",CIRCULAR_REFERENCE:"Circular $refs: {urls}",UNKNOWN_PROPERTY:"Unknown property (not in schema)"};c.prototype=Object.create(Error.prototype),c.prototype.constructor=c,c.prototype.name="ValidationError",c.prototype.prefixWith=function(e,t){if(null!==e&&(e=e.replace(/~/g,"~0").replace(/\//g,"~1"),this.dataPath="/"+e+this.dataPath),null!==t&&(t=t.replace(/~/g,"~0").replace(/\//g,"~1"),this.schemaPath="/"+t+this.schemaPath),null!==this.subErrors)for(var r=0;r<this.subErrors.length;r++)this.subErrors[r].prefixWith(e,t);return this};var E={},j=f();return j.addLanguage("en-gb",g),j.tv4=j,j})},{}],100:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0}),r.MessageFactory=void 0;var o=e("./message-factory/MessageFactory"),i=n(o);r.MessageFactory=i["default"]},{"./message-factory/MessageFactory":103}],101:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0}),r.MessageType=r.Message=void 0;var o=e("babel-runtime/core-js/object/get-prototype-of"),i=n(o),a=e("babel-runtime/helpers/classCallCheck"),s=n(a),u=e("babel-runtime/helpers/createClass"),c=n(u),l=e("babel-runtime/helpers/possibleConstructorReturn"),f=n(l),d=e("babel-runtime/helpers/inherits"),p=n(d),h=e("../reTHINKObject/RethinkObject.js"),y=n(h),m=r.Message=function(e){function t(e,r,n,o,a){(0,s["default"])(this,t);var u=(0,f["default"])(this,(t.__proto__||(0,i["default"])(t)).call(this));return u.id=e,u.from=r,u.to=n,u.type=o,u.body=a,u}return(0,p["default"])(t,e),(0,c["default"])(t,[{key:"assertIdentity",value:function(e,t){if(!e||!t)throw new Error("message, token to be removed, and assertedIdentity must be provided");
var r=this.body;return r.idToken=null,r.assertedIdentity=t,this.body=r,this}},{key:"addIdToken",value:function(e){if(!e)throw new Error("message, token to be added, must be provided");var t=this.body;return t.idToken=e,this.body=t,this}},{key:"addAccessToken",value:function(e){if(!e)throw new Error("message, token to be added, must be provided");var t=this.body;return t.accessToken=e,this.body=t,this}}]),t}(y["default"]);r.MessageType={CREATE:"create",READ:"read",UPDATE:"update",DELETE:"delete",SUBSCRIBE:"subscribe",UNSUBSCRIBE:"unsubscribe",RESPONSE:"response",FORWARD:"forward",EXECUTE:"execute"};r["default"]=m},{"../reTHINKObject/RethinkObject.js":104,"babel-runtime/core-js/object/get-prototype-of":5,"babel-runtime/helpers/classCallCheck":10,"babel-runtime/helpers/createClass":11,"babel-runtime/helpers/inherits":12,"babel-runtime/helpers/possibleConstructorReturn":13}],102:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e){var t=(0,u["default"])(e).reduce(function(t,r){return t[e[r]]=r,t},{});return(0,a["default"])((0,u["default"])(e).reduce(function(t,r){return t[r]=e[r],t},function(e){return t[e]}))}Object.defineProperty(r,"__esModule",{value:!0}),r.UPDATE_OPERATION=r.ATTRIBUTE_TYPE=r.REASON_PHRASE=r.RESPONSE_CODE=r.ExecuteMessageBody=r.ResponseMessageBody=r.ForwardMessageBody=r.UpdateMessageBody=r.DeleteMessageBody=r.ReadMessageBody=r.CreateMessageBody=r.MessageBody=void 0;var i=e("babel-runtime/core-js/object/freeze"),a=n(i),s=e("babel-runtime/core-js/object/keys"),u=n(s),c=e("babel-runtime/core-js/object/get-prototype-of"),l=n(c),f=e("babel-runtime/helpers/classCallCheck"),d=n(f),p=e("babel-runtime/helpers/createClass"),h=n(p),y=e("babel-runtime/helpers/possibleConstructorReturn"),m=n(y),v=e("babel-runtime/helpers/inherits"),_=n(v);r.Enum=o;var b=e("../reTHINKObject/RethinkObject.js"),g=n(b),E=r.MessageBody=function(e){function t(e,r,n,o,i){(0,d["default"])(this,t);var a=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this));return a.idToken=e,a.accessToken=r,a.resource=n,a.schema=o,a.assertedIdentity=i,a}return(0,_["default"])(t,e),(0,h["default"])(t,[{key:"addVia",value:function(e){if(!e)throw new Error("via URL to be added, must be provided");return this.via=e,this}}]),t}(g["default"]),j=(r.CreateMessageBody=function(e){function t(e,r,n,o,i,a,s){if((0,d["default"])(this,t),!e)throw new Error("The value parameter is null");var u=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,n,o,i,a,s,a,s));return u.value=e,r&&(u.policy=r),u}return(0,_["default"])(t,e),t}(E),r.ReadMessageBody=function(e){function t(e,r,n,o,i,a,s,u){(0,d["default"])(this,t);var c=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,n,o,i));return a&&(c.attribute=a),s&&(c.criteriaSyntax=s),u&&(c.criteria=u),c}return(0,_["default"])(t,e),t}(E),r.DeleteMessageBody=function(e){function t(e,r,n,o,i,a){if((0,d["default"])(this,t),n instanceof Array){var s=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,null,o,i));s.childrenResources=n}else var s=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,n,o,i));return a&&(s.attribute=a),(0,m["default"])(s)}return(0,_["default"])(t,e),t}(E),r.UpdateMessageBody=function(e){function t(e,r,n,o,i,a,s){(0,d["default"])(this,t);var u=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,n,o,i));return u.attribute=a,u.value=s,u}return(0,_["default"])(t,e),(0,h["default"])(t,[{key:"addAttributeType",value:function(e){e&&(this.attributeType=e)}},{key:"addOperation",value:function(e){e&&(this.operation=e)}}]),t}(E),r.ForwardMessageBody=function(e){function t(e,r,n,o,i,a){(0,d["default"])(this,t);var s=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,n,o,i));return s.message=a,s}return(0,_["default"])(t,e),t}(E),r.ResponseMessageBody=function(e){function t(e,r,n,o,i){(0,d["default"])(this,t);var a=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,n));return o&&(a.code=o,a.description=j[o]),i&&(a.value=i),a}return(0,_["default"])(t,e),t}(E),r.ExecuteMessageBody=function(e){function t(e,r,n,o,i,a,s){(0,d["default"])(this,t);var u=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,n,o,i));return u.method=a,s&&(s instanceof Array?u.params=s:u.params=[s]),u}return(0,_["default"])(t,e),t}(E),r.RESPONSE_CODE=o({100:"100",101:"101",200:"200",201:"201",202:"202",203:"203",204:"204",205:"205",206:"206",300:"300",301:"301",302:"302",303:"303",304:"304",305:"305",307:"307",400:"400",401:"401",402:"402",403:"403",404:"404",405:"405",406:"406",407:"407",408:"408",409:"409",410:"410",411:"411",412:"412",413:"413",414:"414",415:"415",416:"416",417:"417",426:"426",500:"500",501:"501",502:"502",503:"503",504:"504",505:"505"}),r.REASON_PHRASE=o({100:"Continue",101:"Switching Protocols",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",300:"Multiple Choices",301:"Moved Permanently",302:"Found",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Payload Too Large",414:"Request-URI Too Long",415:"Unsupported Media Type",416:"Range Not Satisfiable",417:"Expectation Failed",426:"Upgrade Required",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Time-out",505:"HTTP Version Not Supported"}));r.ATTRIBUTE_TYPE=o({OBJECT:"OBJECT",ARRAY:"ARRAY"}),r.UPDATE_OPERATION=o({ADD:"ADD",REMOVE:"REMOVE"});r["default"]=E},{"../reTHINKObject/RethinkObject.js":104,"babel-runtime/core-js/object/freeze":4,"babel-runtime/core-js/object/get-prototype-of":5,"babel-runtime/core-js/object/keys":6,"babel-runtime/helpers/classCallCheck":10,"babel-runtime/helpers/createClass":11,"babel-runtime/helpers/inherits":12,"babel-runtime/helpers/possibleConstructorReturn":13}],103:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0}),r.IdGenerator=void 0;var o=e("babel-runtime/regenerator"),i=n(o),a=e("babel-runtime/helpers/classCallCheck"),s=n(a),u=e("babel-runtime/helpers/createClass"),c=n(u),l=e("./Message.js"),f=n(l),d=e("./MessageBody.js"),p=function(){function e(){(0,s["default"])(this,e),this.myGenerator=(new h).idMaker()}return(0,c["default"])(e,[{key:"createCreateMessageRequest",value:function(e,t,r,n){if(!e||!t||!r)throw new Error("from, to, and value of object to be created MUST be specified");var o=""+this.myGenerator.next().value,i=new d.CreateMessageBody(r,n,(void 0),(void 0),(void 0),(void 0),(void 0)),a=new f["default"](o,e,t,l.MessageType.CREATE,i);return a}},{key:"createForwardMessageRequest",value:function(e,t,r){if(!e||!t||!r)throw new Error("from, to, and message to forward MUST be specified");var n=""+this.myGenerator.next().value,o=new d.ForwardMessageBody((void 0),(void 0),(void 0),(void 0),(void 0),r),i=new f["default"](n,e,t,l.MessageType.FORWARD,o);return i}},{key:"createDeleteMessageRequest",value:function(e,t,r,n){if(!e||!t)throw new Error("from and to parameters MUST be specified");var o=""+this.myGenerator.next().value,i=new d.DeleteMessageBody((void 0),(void 0),r,n,(void 0),(void 0)),a=new f["default"](o,e,t,l.MessageType.DELETE,i);return a}},{key:"createUpdateMessageRequest",value:function(e,t,r,n,o){if(!e||!t||!r)throw new Error("from, and to and value MUST be specified");var i=""+this.myGenerator.next().value,a=new d.UpdateMessageBody((void 0),(void 0),n,(void 0),(void 0),o,r),s=new f["default"](i,e,t,l.MessageType.UPDATE,a);return s}},{key:"createReadMessageRequest",value:function(e,t,r,n){if(!e||!t||!r)throw new Error("from, to and the resource to read from MUST be specified");var o=""+this.myGenerator.next().value,i=new d.ReadMessageBody((void 0),(void 0),r,(void 0),(void 0),n,(void 0),(void 0)),a=new f["default"](o,e,t,l.MessageType.READ,i);return a}},{key:"createSubscribeMessageRequest",value:function(e,t,r){if(!e||!t||!r)throw new Error("from, to and the resource to subscribe to MUST be specified");var n=""+this.myGenerator.next().value,o=new d.MessageBody((void 0),(void 0),r,(void 0),(void 0)),i=new f["default"](n,e,t,l.MessageType.SUBSCRIBE,o);return i}},{key:"createUnsubscribeMessageRequest",value:function(e,t,r){if(!e||!t||!r)throw new Error("from, to and the resource to subscribe to MUST be specified");var n=""+this.myGenerator.next().value,o=new d.MessageBody((void 0),(void 0),r,(void 0),(void 0)),i=new f["default"](n,e,t,l.MessageType.UNSUBSCRIBE,o);return i}},{key:"createExecuteMessageRequest",value:function(e,t,r,n){if(!e||!t||!r)throw new Error("from, to and the method to execute MUST be specified");var o=""+this.myGenerator.next().value,i=new d.ExecuteMessageBody((void 0),(void 0),(void 0),(void 0),(void 0),r,n),a=new f["default"](o,e,t,l.MessageType.EXECUTE,i);return a}},{key:"createMessageResponse",value:function(e,t,r,n){if(!t)throw new Error("response Code MUST be specified");var o=new d.ResponseMessageBody((void 0),(void 0),(void 0),t,r,n);return new f["default"](e.id,e.to,e.from,l.MessageType.RESPONSE,o)}},{key:"generateMessageResponse",value:function(e,t,r){if(!e||!t)throw new Error("message and response code MUST be specified");var n=e.body,o=n.idToken,i=n.accessToken,a=n.resource,s=new d.ResponseMessageBody(o,i,a,t,r),u=this.myGenerator.next().value;return new f["default"](u,e.to,e.from,l.MessageType.RESPONSE,s)}}]),e}(),h=r.IdGenerator=function(){function e(){(0,s["default"])(this,e)}return(0,c["default"])(e,[{key:"idMaker",value:i["default"].mark(function t(){var e;return i["default"].wrap(function(t){for(;;)switch(t.prev=t.next){case 0:e=1;case 1:if(!(e<1e6)){t.next=6;break}return t.next=4,e++;case 4:t.next=1;break;case 6:case"end":return t.stop()}},t,this)})}]),e}();r["default"]=p},{"./Message.js":101,"./MessageBody.js":102,"babel-runtime/helpers/classCallCheck":10,"babel-runtime/helpers/createClass":11,"babel-runtime/regenerator":15}],104:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0}),r.RethinkObject=void 0;var o=e("babel-runtime/core-js/json/stringify"),i=n(o),a=e("babel-runtime/helpers/classCallCheck"),s=n(a),u=e("babel-runtime/helpers/createClass"),c=n(u),l=e("tv4"),f=n(l),d=r.RethinkObject=function(){function e(){(0,s["default"])(this,e)}return(0,c["default"])(e,[{key:"validate",value:function(e){f["default"].addSchema(e.id,e);var t=f["default"].validateMultiple(JSON.parse((0,i["default"])(this)),e);return t.errors.forEach(function(e){delete e.stack}),(!t.valid||t.missing.length>0)&&(console.warn("Object validation "+(t.valid?"succeeded, but schema contained references:":"failed:"),(0,i["default"])(t,null,2)),console.debug("Object:",(0,i["default"])(this,null,2))),t.valid}}]),e}();r["default"]=d},{"babel-runtime/core-js/json/stringify":1,"babel-runtime/helpers/classCallCheck":10,"babel-runtime/helpers/createClass":11,tv4:99}]},{},[100])(100)});


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],417:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

/**
* @author micaelpedrosa@gmail.com
* Minimal interface and implementation to send and receive messages. It can be reused in many type of components.
* Components that need a message system should receive this class as a dependency or extend it.
* Extensions should implement the following private methods: _onPostMessage and _registerExternalListener
*/
var Bus = function () {
  /* private
  _msgId: number;
  _subscriptions: <url: MsgListener[]>
   _responseTimeOut: number
  _responseCallbacks: <url+id: (msg) => void>
   */

  function Bus() {
    (0, _classCallCheck3.default)(this, Bus);

    var _this = this;
    _this._msgId = 0;
    _this._subscriptions = {};

    _this._responseTimeOut = 5000; //default to 3s
    _this._responseCallbacks = {};

    _this._registerExternalListener();
  }

  /**
  * Register listener to receive message when "msg.to === url".
  * Special url "*" for default listener is accepted to intercept all messages.
  * @param {URL} url Address to intercept, tha is in the message "to"
  * @param {Listener} listener listener
  * @return {MsgListener} instance of MsgListener
  */


  (0, _createClass3.default)(Bus, [{
    key: 'addListener',
    value: function addListener(url, listener) {
      var _this = this;

      var item = new MsgListener(_this._subscriptions, url, listener);
      var itemList = _this._subscriptions[url];
      if (!itemList) {
        itemList = [];
        _this._subscriptions[url] = itemList;
      }

      itemList.push(item);
      return item;
    }

    /**
     * Manually add a response listener. Only one listener per message ID should exist.
     * ATENTION, there is no timeout for this listener.
     * The listener should be removed with a removeResponseListener, failing to do this will result in a unreleased memory problem.
     * @param {URL} url Origin address of the message sent, "msg.from".
     * @param {number} msgId Message ID that is returned from the postMessage.
     * @param {Function} responseListener Callback function for the response
     */

  }, {
    key: 'addResponseListener',
    value: function addResponseListener(url, msgId, responseListener) {
      this._responseCallbacks[url + msgId] = responseListener;
    }

    /**
     * Remove the response listener.
     * @param {URL} url Origin address of the message sent, "msg.from".
     * @param {number} msgId  Message ID that is returned from the postMessage
     */

  }, {
    key: 'removeResponseListener',
    value: function removeResponseListener(url, msgId) {
      delete this._responseCallbacks[url + msgId];
    }

    /**
     * Remove all existent listeners for the URL
     * @param  {URL} url Address registered
     */

  }, {
    key: 'removeAllListenersOf',
    value: function removeAllListenersOf(url) {
      delete this._subscriptions[url];
    }

    /**
     * Helper method to bind listeners (in both directions) into other MiniBus target.
     * @param  {URL} outUrl Outbound URL, register listener for url in direction "this -> target"
     * @param  {URL} inUrl Inbound URL, register listener for url in direction "target -> this"
     * @param  {MiniBus} target The other target MiniBus
     * @return {Bound} an object that contains the properties [thisListener, targetListener] and the unbind method.
     */

  }, {
    key: 'bind',
    value: function bind(outUrl, inUrl, target) {
      var _this2 = this;

      var _this = this;

      var thisListn = _this.addListener(outUrl, function (msg) {
        target.postMessage(msg);
      });

      var targetListn = target.addListener(inUrl, function (msg) {
        _this.postMessage(msg);
      });

      return {
        thisListener: thisListn,
        targetListener: targetListn,
        unbind: function unbind() {
          _this2.thisListener.remove();
          _this2.targetListener.remove();
        }
      };
    }

    //publish on default listeners

  }, {
    key: '_publishOnDefault',
    value: function _publishOnDefault(msg) {
      //is there any "*" (default) listeners?
      var itemList = this._subscriptions['*'];
      if (itemList) {
        this._publishOn(itemList, msg);
      }
    }

    //publish on a subscription list.

  }, {
    key: '_publishOn',
    value: function _publishOn(itemList, msg) {
      itemList.forEach(function (sub) {
        sub._callback(msg);
      });
    }
  }, {
    key: '_responseCallback',
    value: function _responseCallback(inMsg, responseCallback) {
      var _this = this;

      //automatic management of response handlers
      if (responseCallback) {
        (function () {
          var responseId = inMsg.from + inMsg.id;
          _this._responseCallbacks[responseId] = responseCallback;

          setTimeout(function () {
            var responseFun = _this._responseCallbacks[responseId];
            delete _this._responseCallbacks[responseId];

            if (responseFun) {
              var errorMsg = {
                id: inMsg.id, type: 'response',
                body: { code: 408, desc: 'Response timeout!', value: inMsg }
              };

              responseFun(errorMsg);
            }
          }, _this._responseTimeOut);
        })();
      }
    }
  }, {
    key: '_onResponse',
    value: function _onResponse(msg) {
      var _this = this;

      if (msg.type === 'response') {
        var responseId = msg.to + msg.id;
        var responseFun = _this._responseCallbacks[responseId];

        //if it's a provisional response, don't delete response listener
        if (msg.body.code >= 200) {
          delete _this._responseCallbacks[responseId];
        }

        if (responseFun) {
          responseFun(msg);
          return true;
        }
      }

      return false;
    }

    //receive messages from external interface

  }, {
    key: '_onMessage',
    value: function _onMessage(msg) {
      var _this = this;

      if (!_this._onResponse(msg)) {
        var itemList = _this._subscriptions[msg.to];
        if (itemList) {
          _this._publishOn(itemList, msg);
        } else {
          _this._publishOnDefault(msg);
        }
      }
    }
  }, {
    key: '_genId',
    value: function _genId(inMsg) {
      //TODO: how do we manage message ID's? Should it be a global runtime counter, or per URL address?
      //Global counter will not work, because there will be multiple MiniBus instances!
      //Per URL, can be a lot of data to maintain!
      //Maybe a counter per MiniBus instance. This is the assumed solution for now.
      if (!inMsg.id || inMsg.id === 0) {
        this._msgId++;
        inMsg.id = this._msgId;
      }
    }

    /**
    * Send messages to local listeners, or if not exists to external listeners.
    * It's has an optional mechanism for automatic management of response handlers.
    * The response handler will be unregistered after receiving the response, or after response timeout (default to 3s).
    * @param  {Message} msg Message to send. Message ID is automatically added to the message.
    * @param  {Function} responseCallback Optional parameter, if the developer what's automatic response management.
    * @return {number} Returns the message ID, in case it should be needed for manual management of the response handler.
    */

  }, {
    key: 'postMessage',
    value: function postMessage(inMsg, responseCallback) {}

    /**
     * Not public available, used by the class extension implementation, to process messages from the public "postMessage" without a registered listener.
     * Used to send the message to an external interface, like a WebWorker, IFrame, etc.
     * @param  {Message.Message} msg Message
     */

  }, {
    key: '_onPostMessage',
    value: function _onPostMessage(msg) {} /*implementation will send message to external system*/

    /**
     * Not public available, used by the class extension implementation, to process all messages that enter the MiniBus from an external interface, like a WebWorker, IFrame, etc.
     * This method is called one time in the constructor to register external listeners.
     * The implementation will probably call the "_onMessage" method to publish in the local listeners.
     * DO NOT call "postMessage", there is a danger that the message enters in a cycle!
     */

  }, {
    key: '_registerExternalListener',
    value: function _registerExternalListener() {/*implementation will register external listener and call "this._onMessage(msg)" */}
  }]);
  return Bus;
}();

var MsgListener = function () {
  /* private
  _subscriptions: <string: MsgListener[]>;
  _url: string;
  _callback: (msg) => void;
  */

  function MsgListener(subscriptions, url, callback) {
    (0, _classCallCheck3.default)(this, MsgListener);

    var _this = this;

    _this._subscriptions = subscriptions;
    _this._url = url;
    _this._callback = callback;
  }

  (0, _createClass3.default)(MsgListener, [{
    key: 'remove',


    /**
     * Remove this listener from the Bus
     */
    value: function remove() {
      var _this = this;

      var subs = _this._subscriptions[_this._url];
      if (subs) {
        var index = subs.indexOf(_this);
        subs.splice(index, 1);

        //if there are no listeners, remove the subscription entirely.
        if (subs.length === 0) {
          delete _this._subscriptions[_this._url];
        }
      }
    }
  }, {
    key: 'url',
    get: function get() {
      return this._url;
    }
  }]);
  return MsgListener;
}();

exports.default = Bus;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310}],418:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _Bus2 = require('./Bus');

var _Bus3 = _interopRequireDefault(_Bus2);

var _Pipeline = require('./Pipeline');

var _Pipeline2 = _interopRequireDefault(_Pipeline);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* @author micaelpedrosa@gmail.com
* Message BUS Interface is an extension of the Bus
* It doesn't support the default '*' listener, instead it uses the registry.resolve(..)
*/
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/
var MessageBus = function (_Bus) {
  (0, _inherits3.default)(MessageBus, _Bus);

  /* private
  _registry: Registry
  _forwards: { <from-url>: { fl: MsgListener, sandboxToUrls: Map(Sandbox, [to-url]), urlToSandbox: { to-url: Sandbox } } }
   _pipeline: Pipeline
  */

  //TODO: future optimization
  //1. message batch processing with setInterval
  //2. resolve default gateway/protostub with register.resolve

  function MessageBus(registry) {
    (0, _classCallCheck3.default)(this, MessageBus);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, (MessageBus.__proto__ || (0, _getPrototypeOf2.default)(MessageBus)).call(this));

    _this2._registry = registry;
    _this2._forwards = {};

    _this2._pipeline = new _Pipeline2.default(function (error) {
      console.log('PIPELINE-ERROR: ', (0, _stringify2.default)(error));
    });
    return _this2;
  }

  (0, _createClass3.default)(MessageBus, [{
    key: 'postMessage',


    /**
     * Post a message for routing. It will first search for a listener, if there is no one, it sends to a external routing using the _onPostMessage.
     * External routing use the registry.resolve(..) method to decide the destination sandbox.
     * @param  {Message} inMsg            JSON with mandatory Message structure {id, type, from, to}
     * @param  {Callback} responseCallback Optional callback if a response is expected from the request. A response will be always sent, even if it is a "Timeout".
     * @return {number}                  the Message id
     */
    value: function postMessage(inMsg, responseCallback) {
      var _this = this;

      _this._genId(inMsg);

      _this._pipeline.process(inMsg, function (msg) {

        _this._responseCallback(inMsg, responseCallback);

        if (!_this._onResponse(msg)) {
          var itemList = _this._subscriptions[msg.to];
          if (itemList) {
            //do not publish on default address, because of loopback cycle
            _this._publishOn(itemList, msg);
          } else {
            //if there is no listener, send to external interface
            _this._onPostMessage(msg);
          }
        }
      });

      return inMsg.id;
    }

    /**
     * Adds an external publish address listener. Every message for the address will be forwarded to the external routing by _onPostMessage.
     * This means, even if there is a listener for the address, it will also send the message to the external routing.
     * @param {URL} from Publish address.
     */

  }, {
    key: 'addPublish',
    value: function addPublish(from) {
      var _this3 = this;

      var _this = this;

      //verify if forward exist
      var refCount = _this._forwards[from];
      if (!refCount) {
        var forwardListener = _this.addListener(from, function (msg) {
          console.log('MB-PUBLISH: ( ' + from + ' )');
          _this._onPostMessage(msg);
        });

        refCount = {
          counter: 0,
          fl: forwardListener,
          remove: function remove() {
            _this3.counter--;
            if (_this3.counter === 0) {
              _this3.fl.remove();
              delete _this._forwards[from];
            }
          }
        };

        _this._forwards[from] = refCount;
      }

      refCount.counter++;
      return refCount;
    }

    /**
     * Adds a forward listener for a message destination. Every message reaching an address will be also sent to the forward address.
     * @param {URL} from Message destination, it's actually the field "to" of the message.
     * @param {URL} to   Forward address.
     */

  }, {
    key: 'addForward',
    value: function addForward(from, to) {
      var _this = this;

      return _this.addListener(from, function (msg) {
        console.log('MB-FORWARD: ( ' + from + ' to ' + to + ' )');
        _this.forward(to, msg);
      });
    }

    /**
     * Just forward's a message to the forward address. Listeners should be available for the forward address.
     * @param  {URL} url Forward address.
     * @param  {Message} msg Message to forward
     */

  }, {
    key: 'forward',
    value: function forward(url, msg) {
      var _this = this;

      var itemList = _this._subscriptions[url];
      if (itemList) {
        _this._publishOn(itemList, msg);
      }
    }

    //default route, if there are no listeners available for a message destination.

  }, {
    key: '_onPostMessage',
    value: function _onPostMessage(msg) {
      var _this = this;

      //resolve external protostub...
      _this._registry.resolve(msg.to).then(function (route) {
        _this.forward(route, msg);
      }).catch(function (e) {
        console.log('RESOLVE-ERROR: ', e);
      });
    }
  }, {
    key: 'pipeline',
    get: function get() {
      return this._pipeline;
    }
  }]);
  return MessageBus;
}(_Bus3.default);

exports.default = MessageBus;
module.exports = exports['default'];

},{"./Bus":417,"./Pipeline":419,"babel-runtime/core-js/json/stringify":297,"babel-runtime/core-js/object/get-prototype-of":302,"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310,"babel-runtime/helpers/inherits":312,"babel-runtime/helpers/possibleConstructorReturn":313}],419:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

/**
* @author micaelpedrosa@gmail.com
* Sequencial processor of methods. Similar to how Sequential Promise's work, but better fit for message processing.
* Normal use for this, is to intercept all messages with configured handlers, and act accordingly.
*/
var Pipeline = function () {
  /* public
    handlers: ((PipeContext) => void)[]
    onFail: (error) => void
  */

  function Pipeline(_onFail) {
    (0, _classCallCheck3.default)(this, Pipeline);

    var _this = this;

    _this.handlers = [];
    _this.onFail = _onFail;
  }

  /**
   * Insert a message in the pipeline queue. All messages are wrapped with a PipeContext.
   * @param  {Message} msg       Message for the queue
   * @param  {Callback} onDeliver When message is finished processing from all handlers, it will be delivered in this callback.
   */


  (0, _createClass3.default)(Pipeline, [{
    key: "process",
    value: function process(msg, onDeliver) {
      var _this = this;

      if (_this.handlers.length > 0) {
        var iter = new Iterator(_this.handlers);
        iter.next(new PipeContext(_this, iter, msg, onDeliver));
      } else {
        onDeliver(msg);
      }
    }
  }]);
  return Pipeline;
}();

/**
* @author micaelpedrosa@gmail.com
* Wrapper around a message that adds actions that can be fired by any interceptor handler.
* The Pipeline is asynchronous, so an handler should always call an action, the default one is "next()"
*/


var PipeContext = function () {
  /* private
    _inStop: boolean
     _pipeline: Pipeline
    _iter: Iterator
    _msg: Message
  */

  function PipeContext(pipeline, iter, msg, onDeliver) {
    (0, _classCallCheck3.default)(this, PipeContext);

    var _this = this;

    _this._inStop = false;

    _this._pipeline = pipeline;
    _this._iter = iter;
    _this._msg = msg;
    _this._onDeliver = onDeliver;
  }

  (0, _createClass3.default)(PipeContext, [{
    key: "next",


    /**
     * Proceed to the next interceptor handler, unless there was an error. If it's the last one, proceed to onDeliver handler.
     */
    value: function next() {
      var _this = this;

      if (!_this._inStop) {
        if (_this._iter.hasNext) {
          _this._iter.next(_this);
        } else {
          _this._onDeliver(_this._msg);
        }
      }
    }

    /**
     * Proceed directly to the onDeliver handler, unless there was an error.
     */

  }, {
    key: "deliver",
    value: function deliver() {
      var _this = this;
      if (!_this._inStop) {
        _this._inStop = true;
        _this._onDeliver(_this._msg);
      }
    }

    /**
     * Mark the context with an error and proceed to the onFail handler.
     * @param  {[type]} error [description]
     */

  }, {
    key: "fail",
    value: function fail(error) {
      var _this = this;

      if (!_this._inStop) {
        _this._inStop = true;
        if (_this._pipeline.onFail) {
          _this._pipeline.onFail(error);
        }
      }
    }
  }, {
    key: "pipeline",
    get: function get() {
      return this._pipeline;
    }
  }, {
    key: "msg",
    get: function get() {
      return this._msg;
    },
    set: function set(inMsg) {
      this._msg = inMsg;
    }
  }]);
  return PipeContext;
}();

var Iterator = function () {
  /* private
    _index: number
    _array: []
  */

  function Iterator(array) {
    (0, _classCallCheck3.default)(this, Iterator);

    this._index = -1;
    this._array = array;
  }

  (0, _createClass3.default)(Iterator, [{
    key: "hasNext",
    get: function get() {
      return this._index < this._array.length - 1;
    }
  }, {
    key: "next",
    get: function get() {
      this._index++;
      return this._array[this._index];
    }
  }]);
  return Iterator;
}();

exports.default = Pipeline;
module.exports = exports["default"];

},{"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310}],420:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Class with the cryptographic functions for the authentication protocol
*
*/
var Crypto = function () {
  function Crypto() {
    (0, _classCallCheck3.default)(this, Crypto);

    var _this = this;
  }

  /**
  * encode a byteArray value in base 64 encode
  * @param   {byteArray}    value    byteArray value
  * @return  {string}   encoded value
  */


  (0, _createClass3.default)(Crypto, [{
    key: 'encode',
    value: function encode(value) {
      return btoa(value);
    }

    /**
    * decode a base64 value in a new Uint8Array
    * @param   {string}    value    value encoded in base 64
    * @return  {byteArray} decodedValue
    */

  }, {
    key: 'decode',
    value: function decode(value) {
      return new Uint8Array(JSON.parse('[' + atob(value) + ']'));
    }
  }, {
    key: 'encryptRSA',
    value: function encryptRSA(pubKey, data) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this._importRSAencryptKey(new Uint8Array(pubKey)).then(function (publicKey) {

          crypto.subtle.encrypt({
            name: 'RSA-OAEP'
          }, publicKey, //from generateKey or importKey above
          data //ArrayBuffer of data you want to encrypt
          ).then(function (encrypted) {
            //returns an ArrayBuffer containing the encrypted data
            //console.log('crypto-encryptRSA', new Uint8Array(encrypted));
            resolve(new Uint8Array(encrypted));
          }).catch(function (err) {
            console.log('crypto-encryptRSA', err);
            reject(err);
          });
        });
      });
    }
  }, {
    key: 'decryptRSA',
    value: function decryptRSA(privKey, data) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this._importRSAdecryptKey(privKey).then(function (privateKey) {

          crypto.subtle.decrypt({
            name: 'RSA-OAEP'
          }, privateKey, //from generateKey or importKey above
          data //ArrayBuffer of the data
          ).then(function (decrypted) {

            var decryptedData = new Uint8Array(decrypted);

            //console.log('crypto-decryptRSA', decryptedData);
            resolve(decryptedData);
          }).catch(function (err) {
            console.log('crypto-decryptRSA', err);
            reject(err);
          });
        });
      });
    }
  }, {
    key: 'signRSA',
    value: function signRSA(privKey, data) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this._importRSAsignKey(privKey).then(function (privateKey) {

          crypto.subtle.sign({
            name: 'RSASSA-PKCS1-v1_5'
          }, privateKey, //from generateKey or importKey above
          _this._utf8Encode(data) //ArrayBuffer of data you want to sign
          ).then(function (signature) {
            //returns an ArrayBuffer containing the signature
            //console.log('crypto-signRSA', new Uint8Array(signature));
            resolve(new Uint8Array(signature));
          }).catch(function (err) {
            console.log('crypto-signRSA', err);
            reject(err);
          });
        });
      });
    }
  }, {
    key: 'verifyRSA',
    value: function verifyRSA(pubKey, data, signature) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this._importRSAverifyKey(pubKey).then(function (publicKey) {

          crypto.subtle.verify({
            name: 'RSASSA-PKCS1-v1_5'
          }, publicKey, //from generateKey or importKey above
          signature, //ArrayBuffer of the signature
          _this._utf8Encode(data) //ArrayBuffer of the data
          ).then(function (isvalid) {
            //returns a boolean on whether the signature is true or not
            //console.log('crypto-verifyRSA', isvalid);
            resolve(isvalid);
          }).catch(function (err) {
            console.log('crypto-verifyRSA', err);
            reject(err);
          });
        });
      });
    }
  }, {
    key: 'encryptAES',
    value: function encryptAES(key, data, iv) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this._importAESkey(key).then(function (aesKey) {

          crypto.subtle.encrypt({
            name: 'AES-CBC',
            //Don't re-use initialization vectors!
            //Always generate a new iv every time your encrypt!
            iv: iv
          }, aesKey, //from generateKey or importKey above
          _this._utf8Encode(data) //ArrayBuffer of data you want to encrypt
          ).then(function (encrypted) {
            //returns an ArrayBuffer containing the encrypted data
            //console.log('crypto-encryptAES', new Uint8Array(encrypted));
            resolve(new Uint8Array(encrypted));
          }).catch(function (err) {
            console.log('crypto-encryptAES', err);
            reject(err);
          });
        });
      });
    }
  }, {
    key: 'decryptAES',
    value: function decryptAES(key, data, iv) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this._importAESkey(key).then(function (aesKey) {

          crypto.subtle.decrypt({
            name: 'AES-CBC',
            iv: iv
          }, aesKey, //from generateKey or importKey above
          data //ArrayBuffer of the data
          ).then(function (decrypted) {

            var decodedData = _this._utf8Decode(new Uint8Array(decrypted));
            //console.log('crypto-decryptAES', decodedData);
            resolve(decodedData);
          }).catch(function (err) {
            console.log('crypto-decryptAES', err);
            reject(err);
          });
        });
      });
    }

    /**
    * creates a hash using the HMAC algorithm
    * @param  {byteArray}    key       key to be used in the hmac
    * @param  {string}      data       information to be hashed
    * @return  {byteArray}   signature  resulting hash
    */

  }, {
    key: 'hashHMAC',
    value: function hashHMAC(key, data) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        _this._importHMACkey(key).then(function (hmacKey) {

          crypto.subtle.sign({
            name: 'HMAC'
          }, hmacKey, //from generateKey or importKey above
          _this._utf8Encode(data) //ArrayBuffer of data you want to sign
          ).then(function (signature) {
            //console.log('crypto-hashHMAC', signature);

            //returns an ArrayBuffer containing the signature
            resolve(new Uint8Array(signature));
          }).catch(function (err) {
            console.log('crypto-hashHMAC', err);
            reject(err);
          });
        });
      });
    }

    /**
    * verifies an hash using the HMAC algorithm
    * @param  {byteArray}    key       key to be used in the hmac
    * @param  {string}      data       information to be hashed to compare
    * @param  {byteArray}  signature   hash to compare with the received data
    * @return  {boolean}   isvalid     boolean saying if the data corresponds to the hash received
    */

  }, {
    key: 'verifyHMAC',
    value: function verifyHMAC(key, data, signature) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        _this._importHMACkey(key).then(function (hmacKey) {

          crypto.subtle.verify({
            name: 'HMAC'
          }, hmacKey, //from generateKey or importKey above
          signature, //ArrayBuffer of the signature
          _this._utf8Encode(data) //ArrayBuffer of the data
          ).then(function (isvalid) {
            //returns a boolean on whether the signature is true or not
            //console.log('crypto-verifyHMAC', isvalid);
            isvalid ? resolve(isvalid) : reject(isvalid);
          }).catch(function (err) {
            console.error('crypto-verifyHMAC', err);
            reject(err);
          });
        });
      });
    }

    /**
    * generates a RSA public/private key pair with a modulus length of 2048 bits
    * @return  {JSON}   keyPair    json containing the public and private keys
    */

  }, {
    key: 'generateRSAKeyPair',
    value: function generateRSAKeyPair() {
      var _this = this;
      var keyPair = {};

      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.generateKey({
          name: 'RSA-PSS',
          modulusLength: 2048, //can be 1024, 2048, or 4096
          publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
          hash: { name: 'SHA-256' } //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'
        }, true, //whether the key is extractable (i.e. can be used in exportKey)
        ['sign', 'verify'] //can be any combination of 'sign' and 'verify'

        ).then(function (key) {
          //returns a keypair object
          //console.log(key);

          crypto.subtle.exportKey('spki', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)
          key.publicKey //can be a publicKey or privateKey, as long as extractable was true
          ).then(function (publicKey) {
            //returns the exported key data
            keyPair.public = new Uint8Array(publicKey);
            return crypto.subtle.exportKey('pkcs8', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)
            key.privateKey //can be a publicKey or privateKey, as long as extractable was true
            );
          }).then(function (privateKey) {
            keyPair.private = new Uint8Array(privateKey);
            //console.log('crypto-generateRSAKeyPair', keyPair);

            resolve(keyPair);
          }).catch(function (err) {
            console.error(err);
            reject(err);
          });
        }).catch(function (err) {
          console.error(err);
          reject(err);
        });
      });
    }

    /**
    * Generates a 128 bit random value.
    * @return {byteArray}  array    random value
    */

  }, {
    key: 'generateIV',
    value: function generateIV() {
      var _this = this;

      var array = new Uint8Array(16);
      crypto.getRandomValues(array);

      return array;
    }

    /**
    * Generates a 256 bit random value. 32 bits are extrated from the machine time,
    * the remaining are generated randomly
    * @return {byteArray}  array    random value
    */

  }, {
    key: 'generateRandom',
    value: function generateRandom() {
      var _this = this;

      var array = new Uint8Array(32);
      crypto.getRandomValues(array);

      var date = Date.now();
      var dateEncoded = _this._utf8Encode(date);

      //extract the least significant 4 bytes in the date
      var finalDate = dateEncoded.slice(dateEncoded.length - 4, dateEncoded.length);

      // add in the first 4 bytes of the array the bytes extracted previously;
      for (var i = 0; i < 4; i++) {
        array[i] = finalDate[i];
      }
      return array;
    }

    /**
    * generates a premaster secret (PMS) of 48 bytes (384 bits) randomly
    * @return {byteArray}  array    premaster secret key
    */

  }, {
    key: 'generatePMS',
    value: function generatePMS() {
      var _this = this;

      var array = new Uint8Array(48);
      crypto.getRandomValues(array);
      return array;
    }

    /**
    * generates a masterKey secret (PMS) of 48 bytes (384 bits) using the premaster secret and
    * two randoms
    * @return {byteArray}  array    master secret key with 48 bytes
    */

  }, {
    key: 'generateMasterSecret',
    value: function generateMasterSecret(hmacKey, data) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        var key = new Uint8Array(48);
        var seed = data;

        _this._digest(hmacKey).then(function (digestedKey) {

          _this.hashHMAC(digestedKey, seed).then(function (keypart0) {

            //copy the first 32 bytes into the key
            for (var i = 0; i < 32; i++) {
              key[i] = keypart0[i];
            }
            return _this.hashHMAC(digestedKey, seed + keypart0);
          }).then(function (keypart1) {

            //copy the first 16 bytes to the key remaining 16 bytes
            for (var i = 0; i < 16; i++) {
              key[i + 32] = keypart1[i];
            }
            //console.log('crypto-generateMasterSecret', key);
            resolve(key);
          }).catch(function (err) {
            console.log('crypto-generateMasterSecret', err);
            reject(err);
          });
        });
      });
    }

    /**
    * generates both users MAC and encryption keys. generate as output an array
    * with 4 byteArray each with 32 bytes
    * @param  {byteArray}        secret       secret to be used in the HMAC function
    * @param  {String}           data         information to be used as seed
    * @return {Array<byteArray>} key          array with the information to generate keys
    */

  }, {
    key: 'generateKeys',
    value: function generateKeys(hmacKey, data) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var key = [];
        var seed = data;

        // iterate 4 times to obtain a 1024 key size
        _this.hashHMAC(hmacKey, seed).then(function (keypart0) {
          key.push(keypart0);
          return _this.hashHMAC(hmacKey, seed + keypart0);
        }).then(function (keypart1) {
          key.push(keypart1);
          return _this.hashHMAC(hmacKey, seed + keypart1);
        }).then(function (keypart2) {
          key.push(keypart2);
          return _this.hashHMAC(hmacKey, seed + keypart2);
        }).then(function (keypart3) {
          key.push(keypart3);

          //console.log('crypto-generateKeys', key);
          resolve(key);
        }).catch(function (err) {
          //console.log('crypto-generateKeys', err);
          reject(err);
        });

        //console.log(hmacKey, data);
      });
    }
  }, {
    key: '_importRSAsignKey',
    value: function _importRSAsignKey(privKey) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.importKey('pkcs8', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)
        privKey, { //these are the algorithm options
          name: 'RSASSA-PKCS1-v1_5',
          hash: { name: 'SHA-256' } //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'
        }, true, //whether the key is extractable (i.e. can be used in exportKey)
        ['sign'] //'verify' for public key import, 'sign' for private key imports
        ).then(function (privateKey) {
          //returns a publicKey (or privateKey if you are importing a private key)
          //console.log('crypto-_importRSAsignKey', privateKey);
          resolve(privateKey);
        }).catch(function (err) {
          console.error('crypto-_importRSAsignKey', err);
          reject(err);
        });
      });
    }
  }, {
    key: '_importRSAverifyKey',
    value: function _importRSAverifyKey(pubKey) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.importKey('spki', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)
        pubKey, { //these are the algorithm options
          name: 'RSASSA-PKCS1-v1_5',
          hash: { name: 'SHA-256' } //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'
        }, true, //whether the key is extractable (i.e. can be used in exportKey)
        ['verify'] //'verify' for public key import, 'sign' for private key imports
        ).then(function (publicKey) {
          //returns a publicKey (or privateKey if you are importing a private key)
          //console.log('crypto-_importRSAverifyKey', publicKey);
          resolve(publicKey);
        }).catch(function (err) {
          console.error('crypto-_importRSAverifyKey', err);
          reject(err);
        });
      });
    }
  }, {
    key: '_importRSAencryptKey',
    value: function _importRSAencryptKey(pubKey) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.importKey('spki', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)
        pubKey, { //these are the algorithm options
          name: 'RSA-OAEP',
          hash: { name: 'SHA-256' } //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'
        }, true, //whether the key is extractable (i.e. can be used in exportKey)
        ['encrypt'] //'encrypt' or 'wrapKey' for public key import or
        //'decrypt' or 'unwrapKey' for private key imports
        ).then(function (publicKey) {
          //returns a publicKey (or privateKey if you are importing a private key)
          //console.log('crypto-_importRSAencryptKey', publicKey);
          resolve(publicKey);
        }).catch(function (err) {
          console.error('crypto-_importRSAencryptKey', err);
          reject(err);
        });
      });
    }
  }, {
    key: '_importRSAdecryptKey',
    value: function _importRSAdecryptKey(privKey) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.importKey('pkcs8', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)
        privKey, { //these are the algorithm options
          name: 'RSA-OAEP',
          hash: { name: 'SHA-256' } //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'
        }, true, //whether the key is extractable (i.e. can be used in exportKey)
        ['decrypt'] //'encrypt' or 'wrapKey' for public key import or
        //'decrypt' or 'unwrapKey' for private key imports
        ).then(function (privateKey) {
          //returns a publicKey (or privateKey if you are importing a private key)
          //console.log('crypto-_importRSAdecryptKey', privateKey);
          resolve(privateKey);
        }).catch(function (err) {
          console.error('crypto-_importRSAdecryptKey', err);
          reject(err);
        });
      });
    }
  }, {
    key: 'concatPMSwithRandoms',
    value: function concatPMSwithRandoms(pms, toRandom, fromRandom) {
      var _this = this;

      var finalKey = new Uint8Array(pms.length + toRandom.length + fromRandom.length);

      // add PremasterKey
      for (var i = 0; i < pms.length; i++) {
        finalKey[i] = pms[i];
      }

      //add to random
      for (var _i = 0; _i < toRandom.length; _i++) {
        finalKey[_i + pms.length] = pms[_i];
      }

      //add from random
      for (var _i2 = 0; _i2 < fromRandom.length; _i2++) {
        finalKey[_i2 + pms.length + toRandom.length] = pms[_i2];
      }

      return finalKey;
    }
  }, {
    key: '_generate256bitKey',
    value: function _generate256bitKey() {
      var array = new Uint8Array(32);
      crypto.getRandomValues(array);

      return array;
    }

    /**
    * imports the secret to the HMAC function
    * @param  {byteArray}   arrayBuffer     bytes to import as key
    * @return {JSON}       key              key ready to be used in the HMAC cryptographic function
    */

  }, {
    key: '_importHMACkey',
    value: function _importHMACkey(arrayBuffer) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        _this._digest(arrayBuffer).then(function (key) {

          crypto.subtle.importKey('raw', //can be 'jwk' or 'raw'
          key, { //this is the algorithm options
            name: 'HMAC',
            hash: { name: 'SHA-256' }, //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'
            length: 256 //optional, if you want your key length to differ from the hash function's block length
          }, true, //whether the key is extractable (i.e. can be used in exportKey)
          ['sign', 'verify'] //can be any combination of 'sign' and 'verify'
          ).then(function (key) {
            //returns the symmetric key
            //console.log('crypto-_importHMACkey', key);
            resolve(key);
          }).catch(function (err) {
            reject(err);
          });
        });
      });
    }
  }, {
    key: '_digest',
    value: function _digest(value) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.digest({
          name: 'SHA-256'
        }, value //The data you want to hash as an ArrayBuffer
        ).then(function (hash) {
          //returns the hash as an ArrayBuffer
          //console.log('crypto-digest', new Uint8Array(hash));
          resolve(new Uint8Array(hash));
        }).catch(function (err) {
          console.error(err);
          reject(err);
        });
      });
    }
  }, {
    key: '_importAESkey',
    value: function _importAESkey(arrayBuffer) {
      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.importKey('raw', //can be 'jwk' or 'raw'
        arrayBuffer, { //this is the algorithm options
          name: 'AES-CBC'
        }, true, //whether the key is extractable (i.e. can be used in exportKey)
        ['encrypt', 'decrypt'] //can be 'encrypt', 'decrypt', 'wrapKey', or 'unwrapKey'
        ).then(function (key) {
          //returns the symmetric key
          //console.log('crypto-importAESkey', key);
          resolve(key);
        }).catch(function (err) {
          console.error('crypto-importAESkey', err);
          reject(err);
        });
      });
    }
  }, {
    key: '_utf8Encode',
    value: function _utf8Encode(s) {
      return new TextEncoder('utf-8').encode(s);
    }
  }, {
    key: '_utf8Decode',
    value: function _utf8Decode(s) {
      return new TextDecoder('utf-8').decode(s);
    }
  }]);
  return Crypto;
}();

exports.default = Crypto;
module.exports = exports['default'];

},{"babel-runtime/core-js/promise":306,"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310}],421:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* fake class for the gui to select the identity,
* TODO replace with the proper identity GUI
*
*/
var GuiFake = function GuiFake(url, messageBus) {
  (0, _classCallCheck3.default)(this, GuiFake);

  var _this = this;

  _this._url = url;
  _this._waitTime = 10000;
  _this._messageBus = messageBus;

  _this._messageBus.addListener(_this._url, function (msg) {

    var identities = msg.body.value;

    var replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: { value: identities[0] } };

    // to test on the identity side the listener without the timeout
    // can represent the time the user takes to choose and identity
    if (msg.body.value === 'wait') {

      setTimeout(function () {
        _this._messageBus.postMessage(replyMsg);
      }, _this._waitTime);
    } else {
      _this._messageBus.postMessage(replyMsg);
    }
  });
};

exports.default = GuiFake;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":309}],422:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* The Identity Data Model is used to model the reTHINK User entity. The Identity data model is handled by Identity Management functionality.
*
*/
var Identity = function () {
  function Identity(guid, type) {
    (0, _classCallCheck3.default)(this, Identity);

    var _this = this;

    _this.guid = guid;
    _this.type = type;
    _this.identifiersList = {};
  }

  (0, _createClass3.default)(Identity, [{
    key: 'addIdentity',
    value: function addIdentity(identifier) {
      var _this = this;
      var identityInformation = {
        idAssertion: '',
        serviceAddress: '',
        authenticationData: '',
        authorisationData: '',
        userProfile: ''
      };
      _this.identifiersList[identifier] = identityInformation;
    }
  }, {
    key: 'addIdAssertion',
    value: function addIdAssertion(identifier, assertion, idp, scope) {
      var _this = this;

      var newIdAssertion = new IdAssertion(assertion, idp, scope);

      _this.idAssertionList.push(newIdAssertion);
    }
  }]);
  return Identity;
}();

var IdAssertion = function IdAssertion(assertion, idp, scope) {
  (0, _classCallCheck3.default)(this, IdAssertion);

  var _this = this;

  _this.assertion = assertion;
  _this.idp = idp;
  _this.scope = scope;
};

var IdValidation = function () {
  function IdValidation(identity, contents) {
    (0, _classCallCheck3.default)(this, IdValidation);

    var _this = this;
    _this.identity = identity;
    _this.contents = contents;
  }

  (0, _createClass3.default)(IdValidation, [{
    key: 'validates',
    value: function validates(identity, contents) {
      //TODO implement the logic

    }
  }]);
  return IdValidation;
}();

exports.default = Identity;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310}],423:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils.js');

var _Identity = require('./Identity');

var _Identity2 = _interopRequireDefault(_Identity);

var _Crypto = require('./Crypto');

var _Crypto2 = _interopRequireDefault(_Crypto);

var _GuiFake = require('./GuiFake');

var _GuiFake2 = _interopRequireDefault(_GuiFake);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
*
* The Identity Module (Id Module) is the component responsible for handling the
* user identity and the association of this identity with the Hyperty instances,
* in order to make Hyperty instances identifiable. The identity in the reTHINK project
* is not fixed to a unique Identity Service Provider, but obtained through several
* different Identity sources. With this approach, the Id Module provides to the user the
* option to choose the preferred method for authentication.
* This module will thus able to support multiple Identity acquisition methods,
* such as OpenID connect 1.0, Kerberos System, or authentication through smart cards.
* For example, a user with a Google account can use the Google as an Identity Provider to provide Identity Tokens,
*  which can be used by the Identity Module to associate it with a Hyperty instance.
*
* The Identity Module uses a node package, the HelloJS, which is a client-side JavaScript API for authentication
* that facilitates the requests for the OpenID connect protocol. This method allows for some abstraction
* when making requests for different Identity Providers, such as OpenID connect used by Google, Facebook, Microsoft, for example.
*
* When a request for a user identity is made using the method loginWithRP(identifier, scope),
* this method will analyse the Identity Provider chosen to obtain an identity and will use the HelloJS node package
* with the selected Identity Provider and identity scope. After the HelloJS request for an Access Token
* to the Identity Providers, the user will be prompted to authenticate towards the Identity Provider.
* Upon receiving the Access Token, this token is validated with a RESTful web service request to an endpoint
* on the Identity Provider Authorization Server, and after the validation is done,
* an ID token is obtained with the information according to the scope required.
* This ID token is then preserved in this module that can obtained through the getIdentities()
* and is passed as return value of the loginWithRP function. The methods generateAssertion and validateAssertion have not yet been developed.
*
*/
var IdentityModule = function () {

  /**
  * This is the constructor to initialise the Identity Module it does not require any input.
  */
  function IdentityModule(runtimeURL) {
    (0, _classCallCheck3.default)(this, IdentityModule);

    var _this = this;

    if (!runtimeURL) throw new Error('runtimeURL is missing.');

    _this._runtimeURL = runtimeURL;
    _this._idmURL = _this._runtimeURL + '/idm';
    _this._guiURL = _this._runtimeURL + '/identity-gui';

    _this._domain = (0, _utils.divideURL)(_this._runtimeURL).domain;

    //to store items with this format: {identity: identityURL, token: tokenID}
    _this.identities = [];
    var newIdentity = new _Identity2.default('guid', 'HUMAN');
    _this.identity = newIdentity;
    _this.crypto = new _Crypto2.default();

    //stores the association of the dataObject and the Hyperty registered within
    _this.dataObjectsIdentity = {};

    // hashTable to store all the crypto information between two hyperties
    _this.chatKeys = {};

    // hashTable to store the symmetric keys to be used in the chat group
    _this.dataObjectSessionKeys = {};

    //failsafe to enable/disable all the criptographic functions
    _this.isToUseEncryption = true;

    // verification of nodeJS, and in case it is nodeJS then disable encryption
    // TODO improve later, this exists because the crypto lib uses browser cryptographic methods
    //_this.isToUseEncryption = (window) ? true : false;
  }

  (0, _createClass3.default)(IdentityModule, [{
    key: 'identityRequestToGUI',
    value: function identityRequestToGUI(identities) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var message = { type: 'create', to: _this._guiURL, from: _this._idmURL, body: { value: identities } };

        var id = _this._messageBus.postMessage(message);

        //add listener without timout
        _this._messageBus.addResponseListener(_this._idmURL, id, function (msg) {
          _this._messageBus.removeResponseListener(_this._idmURL, id);

          if (msg.body.code === 200) {
            var selectedIdentity = msg.body.value;

            console.log('selectedIdentity: ', selectedIdentity.identity);
            resolve(selectedIdentity);
          } else {
            reject('error on requesting an identity to the GUI');
          }
        });
      });
    }

    /**
    * return the messageBus in this Registry
    * @param {MessageBus}           messageBus
    */

  }, {
    key: 'getIdentities',


    /**
    * Function to return all the identities registered within a session by a user.
    * These identities are returned in an array containing a JSON package for each user identity.
    * @return {Array<Identities>}         Identities
    */
    value: function getIdentities() {
      var _this = this;
      return _this.identities;
    }

    /**
    * gets all the information from a given userURL
    * @param  {String}  userURL     user url
    * @return {JSON}    identity    identity bundle from the userURL
    */

  }, {
    key: 'getIdentity',
    value: function getIdentity(userURL) {
      var _this = this;

      for (var index in _this.identities) {

        var identity = _this.identities[index];
        if (identity.identity === userURL) {
          return identity;
        }
      }

      throw 'identity not found';
    }
  }, {
    key: 'getIdentityOfHyperty',
    value: function getIdentityOfHyperty(hypertyURL) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        var splitURL = hypertyURL.split('://');
        if (splitURL[0] !== 'hyperty') {
          _this._getHypertyFromDataObject(hypertyURL).then(function (returnedHypertyURL) {
            var userURL = _this.registry.getHypertyOwner(returnedHypertyURL);
            if (userURL) {

              for (var index in _this.identities) {
                var identity = _this.identities[index];
                if (identity.identity === userURL) {
                  return resolve(identity.messageInfo);
                }
              }
            } else {
              return reject('no identity was found ');
            }
          });
        } else {
          var userURL = _this.registry.getHypertyOwner(hypertyURL);
          if (userURL) {

            for (var index in _this.identities) {
              var identity = _this.identities[index];
              if (identity.identity === userURL) {
                return resolve(identity.messageInfo);
              }
            }
          } else {
            return reject('no identity was found.');
          }
        }
      });
    }

    /**
    * Function to return all the users URLs registered within a session
    * These users URLs are returned in an array of strings.
    * @param  {Boolean}  emailFormat (Optional)   boolean to indicate to return in email format
    * @return {Array<String>}         users
    */

  }, {
    key: 'getUsersIDs',
    value: function getUsersIDs(emailFormat) {
      var _this = this;
      var users = [];

      //if request comes with the emailFormat option, then convert url to email format
      var converter = emailFormat ? _utils.getUserEmailFromURL : function (value) {
        return value;
      };

      for (var index in _this.identities) {
        var identity = _this.identities[index];
        users.push(converter(identity.identity));
      }
      return users;
    }

    /**
    * Function to return the selected Identity within a session
    * @return {Identity}        identity         identity
    */

  }, {
    key: 'getCurrentIdentity',
    value: function getCurrentIdentity() {
      var _this = this;
      return _this.currentIdentity;
    }

    /**
    * Function to set the current Identity with a given Identity
    * @param {Identity}        identity         identity
    */

  }, {
    key: 'setCurrentIdentity',
    value: function setCurrentIdentity(identity) {
      var _this = this;
      _this.currentIdentity = identity;
    }

    /**
    * Function to remove the an identity from the Identities array
    * @param {String}    userURL      userURL
    */

  }, {
    key: 'deleteIdentity',
    value: function deleteIdentity(userURL) {
      var _this = this;

      for (var identity in _this.identities) {
        if (_this.identities[identity].identity === userURL) {
          _this.identities.splice(identity, 1);
        }
      }
    }

    /**
    * Function that resolve and create the domainURL in case it is provided one. If not, resolve the default domainURL
    * @param {String}     idpDomain     idpDomain (Optional)
    */

  }, {
    key: '_resolveDomain',
    value: function _resolveDomain(idpDomain) {
      if (!idpDomain) {
        return 'domain-idp://google.com';
      } else {
        return 'domain-idp://' + idpDomain;
      }
    }

    /**
    * Function to login a user within the session, it will start the process to obtain an Identity from a user, including the request for an identity Assertion. The function returns a promise with the token received by the idpProxy.
    *
    * @param  {Identifier}      identifier      identifier
    * @param  {Scope}           scope           scope
    * @return {Promise}         Promise         IDToken containing the user information
    */

  }, {
    key: 'loginWithRP',
    value: function loginWithRP(identifier, scope) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        //TODO remove this verification and refactor this part
        _this.currentIdentity = undefined;
        _this.getIdentityAssertion('identifier', 'origin', 'hint', identifier).then(function (value) {
          console.log('loginWithRP');
          resolve(value);
        }, function (err) {
          console.log('loginWithRP err');
          reject(err);
        });
      });
    }

    /**
    * Function that fetch an identityAssertion from a user.
    *
    * @return {IdAssertion}              IdAssertion
    */

  }, {
    key: 'getIdentityAssertion',
    value: function getIdentityAssertion(identifier, origin, usernameHint, idpDomain) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        if (_this.currentIdentity !== undefined) {
          //TODO verify whether the token is still valid or not.
          // should be needed to make further requests, to obtain a valid token
          return resolve(_this.currentIdentity);
        } else {

          //CHECK whether is browser environment or nodejs
          //if it is browser, then create a fake identity

          try {
            if (window) {
              (function () {

                var publicKey = void 0;
                var userkeyPair = void 0;

                //generates the RSA key pair
                _this.crypto.generateRSAKeyPair().then(function (keyPair) {

                  publicKey = btoa(keyPair.public);
                  userkeyPair = keyPair;
                  return _this.generateAssertion(publicKey, origin, '', userkeyPair, idpDomain);
                }).then(function (url) {
                  return _this.generateAssertion(publicKey, origin, url, userkeyPair, idpDomain);
                }).then(function (value) {
                  if (value) {
                    resolve(value);
                  } else {
                    reject('Error on obtaining Identity');
                  }
                }).catch(function (err) {
                  console.log(err);
                  reject(err);
                });
              })();
            }
          } catch (error) {
            console.log('getIdentityAssertion for nodejs');
            var randomNumber = Math.floor(Math.random() * 10000 + 1);
            var identityBundle = {
              assertion: 'assertion',
              idp: 'nodejs',
              userProfile: {
                avatar: 'https://lh3.googleusercontent.com/-WaCrjVMMV-Q/AAAAAAAAAAI/AAAAAAAAAAs/8OlVqCpSB9c/photo.jpg',
                cn: 'test nodejs',
                username: 'nodejs-' + randomNumber + '@nodejs.com',
                userURL: 'user://nodejs.com/nodejs-' + randomNumber
              } };
            _this.currentIdentity = identityBundle;
            _this.identities.push(identityBundle);
            return resolve(identityBundle);
          }
        }
      });
    }

    /**
    * Requests the IdpProxy from a given Domain for an identityAssertion
    *
    * @param  {DOMString} contents     contents
    * @param  {DOMString} origin       origin
    * @param  {DOMString} usernameHint usernameHint
    * @param  {JSON}      keyPair       user keyPair
    * @return {IdAssertion}              IdAssertion
    */

  }, {
    key: 'generateAssertion',
    value: function generateAssertion(contents, origin, usernameHint, keyPair, idpDomain) {
      var _this = this;
      var domain = _this._resolveDomain(idpDomain);
      var message = void 0;

      console.log('generateAssertion');

      return new _promise2.default(function (resolve, reject) {

        message = { type: 'execute', to: domain, from: _this._idmURL, body: { resource: 'identity', method: 'generateAssertion', params: { contents: contents, origin: origin, usernameHint: usernameHint } } };

        _this._messageBus.postMessage(message, function (res) {
          var result = res.body.value;

          if (result.loginUrl) {
            (function () {

              var win = window.open(result.loginUrl, 'openIDrequest', 'width=800, height=600');
              if (window.cordova) {
                win.addEventListener('loadstart', function (e) {
                  var url = e.url;
                  var code = /\&code=(.+)$/.exec(url);
                  var error = /\&error=(.+)$/.exec(url);

                  if (code || error) {
                    win.close();
                    resolve(url);
                  }
                });
              } else {
                (function () {
                  var pollTimer = setInterval(function () {
                    try {
                      if (win.closed) {
                        reject('Some error occured when trying to get identity.');
                        clearInterval(pollTimer);
                      }

                      if (win.document.URL.indexOf('id_token') !== -1 || win.document.URL.indexOf(location.origin) !== -1) {
                        window.clearInterval(pollTimer);
                        var url = win.document.URL;

                        win.close();
                        resolve(url);
                      }
                    } catch (e) {
                      //console.log(e);
                    }
                  }, 500);
                })();
              }
            })();
          } else if (result) {

            var assertionParsed = JSON.parse(atob(result.assertion));
            var idToken = void 0;

            //TODO remove the verification and remove the tokenIDJSON from the google idpProxy;
            if (assertionParsed.tokenIDJSON) {
              idToken = assertionParsed.tokenIDJSON;
            } else {
              idToken = assertionParsed;
            }

            if (idToken) {
              result.identity = (0, _utils.getUserURLFromEmail)(idToken.email);

              _this.identity.addIdentity(result);

              // check if exists any infoToken in the result received
              var infoToken = result.infoToken ? result.infoToken : {};
              var userProfileBundle = { username: idToken.email, cn: idToken.name, avatar: infoToken.picture, locale: infoToken.locale, userURL: (0, _utils.getUserURLFromEmail)(idToken.email) };

              //creation of a new JSON with the identity to send via messages
              var newIdentity = { userProfile: userProfileBundle, idp: result.idp.domain, assertion: result.assertion };
              result.messageInfo = newIdentity;
              result.keyPair = keyPair;

              _this.currentIdentity = newIdentity;
              _this.identities.push(result);
              resolve(newIdentity);
            }
          } else {
            reject('error on obtaining identity information');
          }
        });
      });
    }

    /**
    * OTHER USER'S IDENTITY
    */

    /**
    * Requests the IdpProxy from a given Domain to validate an IdentityAssertion
    * Returns a promise with the result from the validation.
    * @param  {DOMString} assertion
    * @param  {DOMString} origin       origin
    * @return {Promise}         Promise         promise with the result from the validation
    */

  }, {
    key: 'validateAssertion',
    value: function validateAssertion(assertion, origin, idpDomain) {
      var _this = this;

      var domain = _this._resolveDomain(idpDomain);

      var message = { type: 'EXECUTE', to: domain, from: _this._idmURL, body: { resource: 'identity', method: 'validateAssertion',
          params: { assertion: assertion, origin: origin } } };

      return new _promise2.default(function (resolve, reject) {
        _this._messageBus.postMessage(message, function (result) {
          if (result.body.code === 200) {
            resolve(result.body.value);
          } else {
            reject('error', result.body.code);
          }
        });
      });
    }
  }, {
    key: 'encryptMessage',
    value: function encryptMessage(message) {
      var _this = this;

      console.log('encrypt message ');

      return new _promise2.default(function (resolve, reject) {
        var isHandShakeType = message.type === 'handshake';

        //if is not to apply encryption, then returns resolve
        if (!_this.isToUseEncryption && !isHandShakeType) {
          console.log('encryption disabled');
          return resolve(message);
        }

        //TODO remove this logic and move it to a util function
        var splitedToURL = message.to.split('/');
        var dataObjectURL = splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3];
        if (splitedToURL.length > 6) {
          dataObjectURL = splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3] + '/' + splitedToURL[4];
        }

        var isToDataObject = (0, _utils.isDataObjectURL)(dataObjectURL);
        var isFromHyperty = (0, _utils.divideURL)(message.from).type === 'hyperty';
        var isToHyperty = (0, _utils.divideURL)(message.to).type === 'hyperty';

        if (isFromHyperty && isToHyperty) {
          var userURL = _this._registry.getHypertyOwner(message.from);
          if (userURL) {
            (function () {

              // check if exists any keys between two users
              var chatKeys = _this.chatKeys[message.from + '<->' + message.to];
              if (!chatKeys) {
                chatKeys = _this._newChatCrypto(message, userURL);
                console.log('createChatKey encrypt', message.from + message.to);
                _this.chatKeys[message.from + '<->' + message.to] = chatKeys;
                message.body.handshakePhase = 'startHandShake';
              }

              if (chatKeys.authenticated && !isHandShakeType) {
                (function () {

                  var iv = _this.crypto.generateIV();
                  _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, message.body.value, iv).then(function (encryptedValue) {

                    var filteredMessage = _this._filterMessageToHash(message, message.body.value + iv, chatKeys.hypertyFrom.messageInfo);

                    _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, filteredMessage).then(function (hash) {
                      //console.log('result of hash ', hash);
                      var value = { iv: _this.crypto.encode(iv), value: _this.crypto.encode(encryptedValue), hash: _this.crypto.encode(hash) };
                      message.body.value = btoa((0, _stringify2.default)(value));

                      resolve(message);
                    });
                  });

                  // if is a handshake message, just resolve it
                })();
              } else if (isHandShakeType) {
                resolve(message);

                // else, starts a new handshake protocol
              } else {
                _this._doHandShakePhase(message, chatKeys).then(function (value) {
                  _this.chatKeys[message.from + '<->' + message.to] = value.chatKeys;

                  _this._messageBus.postMessage(value.message);
                  reject('encrypt handshake protocol phase ');
                });
              }
            })();
          }

          //if from hyperty to a dataObjectURL
        } else if (isFromHyperty && isToDataObject) {
          (function () {
            console.log('dataObject value to encrypt: ', message.body.value);

            var dataObjectKey = _this.dataObjectSessionKeys[dataObjectURL];

            //if no key exists, create a new one if is the reporter of dataObject
            if (!dataObjectKey) {
              var isHypertyReporter = _this.registry.getReporterURLSynchonous(dataObjectURL);

              // if the hyperty is the reporter of the dataObject then generates a session key
              if (isHypertyReporter && isHypertyReporter === message.from) {

                var sessionKey = _this.crypto.generateRandom();
                _this.dataObjectSessionKeys[dataObjectURL] = { sessionKey: sessionKey, isToEncrypt: true };

                dataObjectKey = _this.dataObjectSessionKeys[dataObjectURL];
              }
            }

            //check if there is already a session key for the chat room
            if (dataObjectKey) {

              // and if is to apply encryption, encrypt the messages
              if (dataObjectKey.isToEncrypt) {
                (function () {
                  var iv = _this.crypto.generateIV();

                  _this.crypto.encryptAES(dataObjectKey.sessionKey, _this.crypto.encode((0, _stringify2.default)(message.body.value)), iv).then(function (encryptedValue) {

                    var filteredMessage = _this._filterMessageToHash(message, message.body.value + iv, dataObjectKey.sessionKey);

                    _this.crypto.hashHMAC(dataObjectKey.sessionKey, filteredMessage).then(function (hash) {
                      //console.log('hash ', hash);

                      var newValue = btoa((0, _stringify2.default)({ value: _this.crypto.encode(encryptedValue), iv: _this.crypto.encode(iv), hash: _this.crypto.encode(hash) }));

                      message.body.value = newValue;
                      resolve(message);
                    });
                  });

                  // if not, just send the message
                })();
              } else {
                resolve(message);
              }

              // start the generation of a new session Key
            } else {
              reject('failed to decrypt message');
            }
          })();
        }
      });
    }
  }, {
    key: 'decryptMessage',
    value: function decryptMessage(message) {
      var _this = this;

      console.log('decrypt message ');

      return new _promise2.default(function (resolve, reject) {
        var isHandShakeType = message.type === 'handshake';

        //if is not to apply encryption, then returns resolve
        if (!_this.isToUseEncryption && !isHandShakeType) {
          console.log('decryption disabled');
          return resolve(message);
        }

        //TODO remove this logic and move it to a util function

        var splitedToURL = message.to.split('/');
        var dataObjectURL = splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3];
        if (splitedToURL.length > 6) {
          dataObjectURL = splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3] + '/' + splitedToURL[4];
        }

        var isToDataObject = (0, _utils.isDataObjectURL)(dataObjectURL);
        var isFromHyperty = (0, _utils.divideURL)(message.from).type === 'hyperty';
        var isToHyperty = (0, _utils.divideURL)(message.to).type === 'hyperty';

        //is is hyperty to hyperty communication
        if (isFromHyperty && isToHyperty) {
          //console.log('decrypt hyperty to hyperty');
          var userURL = _this._registry.getHypertyOwner(message.to);
          if (userURL) {
            (function () {

              var chatKeys = _this.chatKeys[message.to + '<->' + message.from];
              if (!chatKeys) {
                chatKeys = _this._newChatCrypto(message, userURL, 'decrypt');
                _this.chatKeys[message.to + '<->' + message.from] = chatKeys;
              }

              if (chatKeys.authenticated && !isHandShakeType) {
                (function () {
                  var value = JSON.parse(atob(message.body.value));
                  var iv = _this.crypto.decode(value.iv);
                  var data = _this.crypto.decode(value.value);
                  var hash = _this.crypto.decode(value.hash);
                  _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, data, iv).then(function (decryptedData) {
                    console.log('decrypted value ', decryptedData);
                    message.body.value = decryptedData;

                    var filteredMessage = _this._filterMessageToHash(message, decryptedData + iv);

                    _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, hash).then(function (result) {
                      //console.log('result of hash verification! ', result);
                      message.body.assertedIdentity = true;
                      resolve(message);
                    });
                  });
                })();
              } else if (isHandShakeType) {
                _this._doHandShakePhase(message, chatKeys).then(function (value) {

                  //if it was started by doMutualAuthentication then ends the protocol
                  if (value === 'handShakeEnd') {
                    reject('decrypt handshake protocol phase ');

                    // if was started by a message, then resend that message
                  } else {
                    _this.chatKeys[message.to + '<->' + message.from] = value.chatKeys;
                    _this._messageBus.postMessage(value.message);
                    reject('decrypt handshake protocol phase ');
                  }
                });
              } else {
                reject('wrong message do decrypt');
              }
            })();
          } else {
            reject('error on decrypt message');
          }

          //if from hyperty to a dataObjectURL
        } else if (isFromHyperty && isToDataObject) {
          (function () {
            console.log('dataObject value to decrypt: ', message.body);

            var dataObjectKey = _this.dataObjectSessionKeys[dataObjectURL];

            if (dataObjectKey) {

              //check if is to apply encryption
              if (dataObjectKey.isToEncrypt) {
                (function () {
                  var parsedValue = JSON.parse(atob(message.body.value));
                  var iv = _this.crypto.decode(parsedValue.iv);
                  var encryptedValue = _this.crypto.decode(parsedValue.value);
                  var hash = _this.crypto.decode(parsedValue.hash);

                  _this.crypto.decryptAES(dataObjectKey.sessionKey, encryptedValue, iv).then(function (decryptedValue) {
                    var parsedValue = JSON.parse(atob(decryptedValue));
                    console.log('decrypted Value,', parsedValue);
                    message.body.value = parsedValue;

                    var filteredMessage = _this._filterMessageToHash(message, parsedValue + iv);

                    _this.crypto.verifyHMAC(dataObjectKey.sessionKey, filteredMessage, hash).then(function (result) {
                      //console.log('result of hash verification! ', result);

                      message.body.assertedIdentity = true;
                      resolve(message);
                    });
                  });

                  //if not, just return the message
                })();
              } else {
                message.body.assertedIdentity = true;
                resolve(message);
              }
            } else {
              message.body.assertedIdentity = true;
              resolve(message);

              //reject('no sessionKey for chat room found');
            }
          })();
        } else {
          reject('wrong message to decrypt');
        }
      });
    }
  }, {
    key: 'doMutualAuthentication',
    value: function doMutualAuthentication(sender, receiver) {
      console.log('doMutualAuthentication: ', sender, receiver);
      var _this = this;
      var dataObjectURL = void 0;

      // check if the sender is a dataObject and if so stores that value
      var reporterURL = _this.registry.getReporterURLSynchonous(sender);
      if (reporterURL) {
        dataObjectURL = sender;
        sender = reporterURL;
      }

      var msg = {
        to: receiver,
        from: sender,
        callback: undefined,
        body: { handshakePhase: 'startHandShake', ignore: 'ignoreMessage' }
      };

      return new _promise2.default(function (resolve, reject) {

        if (!sender || !receiver) {
          return reject('sender or receiver missing on doMutualAuthentication');
        }

        var chatKeys = _this.chatKeys[sender + '<->' + receiver];
        var userURL = _this._registry.getHypertyOwner(sender);

        if (userURL) {

          if (!chatKeys) {
            // callback to resolve when finish the mutual authentication
            var resolved = function resolved(value) {
              console.log('callback value:', value);
              resolve(value);
            };
            msg.callback = resolved;
            msg.dataObjectURL = dataObjectURL;

            chatKeys = _this._newChatCrypto(msg, userURL);
            _this.chatKeys[sender + '<->' + receiver] = chatKeys;
          }

          if (chatKeys.authenticated) {

            var startSessionKeyExchange = {
              to: sender,
              from: receiver
            };
            chatKeys.dataObjectURL = dataObjectURL;
            _this._sendReporterSessionKey(startSessionKeyExchange, chatKeys).then(function (value) {

              _this._messageBus.postMessage(value.message);
              resolve('exchange of chat sessionKey initiated');
            });
          } else {

            _this._doHandShakePhase(msg, chatKeys);
          }
        } else {
          reject('error on doMutualAuthentication');
        }
      });
    }
  }, {
    key: '_doHandShakePhase',
    value: function _doHandShakePhase(message, chatKeys) {
      var _this = this;

      //console.log('handshakeType');

      return new _promise2.default(function (resolve, reject) {

        var handshakeType = message.body.handshakePhase;
        var iv = void 0;
        var hash = void 0;
        var value = {};
        var filteredMessage = void 0;

        (function () {
          switch (handshakeType) {

            case 'startHandShake':
              chatKeys.keys.fromRandom = _this.crypto.generateRandom();

              var startHandShakeMsg = {
                type: 'handshake',
                to: message.to,
                from: message.from,
                body: {
                  handshakePhase: 'senderHello',
                  value: _this.crypto.encode(chatKeys.keys.fromRandom)
                }
              };
              chatKeys.handshakeHistory.senderHello = _this._filterMessageToHash(startHandShakeMsg, undefined, chatKeys.hypertyFrom.messageInfo);

              // check if was the encrypt function or the mutual authentication that request the
              // start of the handShakePhase.
              if (chatKeys.initialMessage) {
                resolve({ message: startHandShakeMsg, chatKeys: chatKeys });
              } else {
                _this.chatKeys[message.from + '<->' + message.to] = chatKeys;
                _this._messageBus.postMessage(startHandShakeMsg);
              }

              break;
            case 'senderHello':

              console.log('senderHello');
              chatKeys.handshakeHistory.senderHello = _this._filterMessageToHash(message);
              chatKeys.keys.fromRandom = _this.crypto.decode(message.body.value);
              chatKeys.keys.toRandom = _this.crypto.generateRandom();

              var senderHelloMsg = {
                type: 'handshake',
                to: message.from,
                from: message.to,
                body: {
                  handshakePhase: 'receiverHello',
                  value: _this.crypto.encode(chatKeys.keys.toRandom)
                }
              };
              chatKeys.handshakeHistory.receiverHello = _this._filterMessageToHash(senderHelloMsg, undefined, chatKeys.hypertyFrom.messageInfo);
              resolve({ message: senderHelloMsg, chatKeys: chatKeys });

              break;
            case 'receiverHello':

              console.log('receiverHello');
              chatKeys.handshakeHistory.receiverHello = _this._filterMessageToHash(message);

              _this.validateAssertion(message.body.identity.assertion).then(function (value) {

                var receiverPublicKey = _this.crypto.decode(value.contents.nonce);
                var premasterSecret = _this.crypto.generatePMS();
                var toRandom = message.body.value;
                chatKeys.hypertyTo.assertion = message.body.identity.assertion;
                chatKeys.hypertyTo.publicKey = receiverPublicKey;
                chatKeys.hypertyTo.userID = value.contents.email;
                chatKeys.keys.toRandom = _this.crypto.decode(toRandom);
                chatKeys.keys.premasterKey = premasterSecret;

                var concatKey = _this.crypto.concatPMSwithRandoms(premasterSecret, chatKeys.keys.toRandom, chatKeys.keys.fromRandom);

                return _this.crypto.generateMasterSecret(concatKey, 'messageHistoric' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);

                //generate the master key
              }).then(function (masterKey) {
                chatKeys.keys.masterKey = masterKey;

                return _this.crypto.generateKeys(masterKey, 'key expansion' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);

                //generate the symmetric and hash keys
              }).then(function (keys) {

                chatKeys.keys.hypertyToSessionKey = new Uint8Array(keys[0]);
                chatKeys.keys.hypertyFromSessionKey = new Uint8Array(keys[1]);
                chatKeys.keys.hypertyToHashKey = new Uint8Array(keys[2]);
                chatKeys.keys.hypertyFromHashKey = new Uint8Array(keys[3]);
                iv = _this.crypto.generateIV();
                value.iv = _this.crypto.encode(iv);

                var messageStructure = {
                  type: 'handshake',
                  to: message.from,
                  from: message.to,
                  body: {
                    handshakePhase: 'senderCertificate'
                  }
                };

                // hash the value and the iv
                filteredMessage = _this._filterMessageToHash(messageStructure, 'ok' + iv, chatKeys.hypertyFrom.messageInfo);
                return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, filteredMessage);
              }).then(function (hash) {
                value.hash = _this.crypto.encode(hash);

                //encrypt the data
                return _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, 'ok', iv);
              }).then(function (encryptedData) {
                value.symetricEncryption = _this.crypto.encode(encryptedData);

                return _this.crypto.encryptRSA(chatKeys.hypertyTo.publicKey, chatKeys.keys.premasterKey);
              }).then(function (encryptedValue) {

                value.assymetricEncryption = _this.crypto.encode(encryptedValue);

                var messageStructure = {
                  type: 'handshake',
                  to: message.from,
                  from: message.to,
                  body: {
                    handshakePhase: 'senderCertificate'
                  }
                };

                var messageToHash = _this._filterMessageToHash(messageStructure, chatKeys.keys.premasterKey, chatKeys.hypertyFrom.messageInfo);

                return _this.crypto.signRSA(chatKeys.hypertyFrom.privateKey, (0, _stringify2.default)(chatKeys.handshakeHistory) + (0, _stringify2.default)(messageToHash));
              }).then(function (signature) {

                value.signature = _this.crypto.encode(signature);

                var receiverHelloMsg = {
                  type: 'handshake',
                  to: message.from,
                  from: message.to,
                  body: {
                    handshakePhase: 'senderCertificate',
                    value: btoa((0, _stringify2.default)(value))
                  }
                };
                chatKeys.handshakeHistory.senderCertificate = _this._filterMessageToHash(receiverHelloMsg, 'ok' + iv, chatKeys.hypertyFrom.messageInfo);

                resolve({ message: receiverHelloMsg, chatKeys: chatKeys });
              }, function (error) {
                return reject(error);
              });

              break;
            case 'senderCertificate':

              console.log('senderCertificate');
              var receivedValue = JSON.parse(atob(message.body.value));

              _this.validateAssertion(message.body.identity.assertion).then(function (value) {
                var encryptedPMS = _this.crypto.decode(receivedValue.assymetricEncryption);
                var senderPublicKey = _this.crypto.decode(value.contents.nonce);
                chatKeys.hypertyTo.assertion = message.body.identity.assertion;
                chatKeys.hypertyTo.publicKey = senderPublicKey;
                chatKeys.hypertyTo.userID = value.contents.email;

                return _this.crypto.decryptRSA(chatKeys.hypertyFrom.privateKey, encryptedPMS);
              }, function (error) {
                console.log(error);
                reject('Error during authentication of identity');

                //obtain the PremasterKey using the private key
              }).then(function (pms) {

                chatKeys.keys.premasterKey = new Uint8Array(pms);

                var signature = _this.crypto.decode(receivedValue.signature);

                var receivedmsgToHash = _this._filterMessageToHash(message, chatKeys.keys.premasterKey);

                return _this.crypto.verifyRSA(chatKeys.hypertyTo.publicKey, (0, _stringify2.default)(chatKeys.handshakeHistory) + (0, _stringify2.default)(receivedmsgToHash), signature);

                // validates the signature received
              }).then(function (signValidationResult) {

                console.log('signature validation result ', signValidationResult);
                var concatKey = _this.crypto.concatPMSwithRandoms(chatKeys.keys.premasterKey, chatKeys.keys.toRandom, chatKeys.keys.fromRandom);

                return _this.crypto.generateMasterSecret(concatKey, 'messageHistoric' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);

                // generates the master keys from the Premaster key and the randoms
              }).then(function (masterKey) {
                chatKeys.keys.masterKey = masterKey;

                return _this.crypto.generateKeys(masterKey, 'key expansion' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);

                // generates the symmetric keys to be used in the symmetric encryption
              }).then(function (keys) {
                chatKeys.keys.hypertyFromSessionKey = new Uint8Array(keys[0]);
                chatKeys.keys.hypertyToSessionKey = new Uint8Array(keys[1]);
                chatKeys.keys.hypertyFromHashKey = new Uint8Array(keys[2]);
                chatKeys.keys.hypertyToHashKey = new Uint8Array(keys[3]);
                iv = _this.crypto.decode(receivedValue.iv);
                var data = _this.crypto.decode(receivedValue.symetricEncryption);

                return _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, data, iv);
              }).then(function (decryptedData) {
                //console.log('decryptedData', decryptedData);

                chatKeys.handshakeHistory.senderCertificate = _this._filterMessageToHash(message, decryptedData + iv);

                var hashReceived = _this.crypto.decode(receivedValue.hash);

                filteredMessage = _this._filterMessageToHash(message, decryptedData + iv);

                return _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, hashReceived);
              }).then(function (verifiedHash) {

                //console.log('result of hash verification ', verifiedHash);
                var receiverFinishedMessage = {
                  type: 'handshake',
                  to: message.from,
                  from: message.to,
                  body: {
                    handshakePhase: 'receiverFinishedMessage'
                  }
                };
                iv = _this.crypto.generateIV();
                value.iv = _this.crypto.encode(iv);

                filteredMessage = _this._filterMessageToHash(receiverFinishedMessage, 'ok!' + iv, chatKeys.hypertyFrom.messageInfo);

                return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, receiverFinishedMessage);
              }).then(function (hash) {

                value.hash = _this.crypto.encode(hash);
                return _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, 'ok!', iv);
              }).then(function (encryptedValue) {
                value.value = _this.crypto.encode(encryptedValue);
                var receiverFinishedMessage = {
                  type: 'handshake',
                  to: message.from,
                  from: message.to,
                  body: {
                    handshakePhase: 'receiverFinishedMessage',
                    value: btoa((0, _stringify2.default)(value))
                  }
                };

                chatKeys.handshakeHistory.receiverFinishedMessage = _this._filterMessageToHash(receiverFinishedMessage, 'ok!' + iv, chatKeys.hypertyFrom.messageInfo);
                chatKeys.authenticated = true;
                resolve({ message: receiverFinishedMessage, chatKeys: chatKeys });
              });

              break;
            case 'receiverFinishedMessage':

              console.log('receiverFinishedMessage');
              chatKeys.authenticated = true;

              value = JSON.parse(atob(message.body.value));

              iv = _this.crypto.decode(value.iv);
              var data = _this.crypto.decode(value.value);
              hash = _this.crypto.decode(value.hash);

              _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, data, iv).then(function (decryptedData) {
                console.log('decryptedData', decryptedData);
                chatKeys.handshakeHistory.receiverFinishedMessage = _this._filterMessageToHash(message, decryptedData + iv);

                var filteredMessage = _this._filterMessageToHash(message, data + iv);
                _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, hash).then(function (result) {
                  console.log('hash result', result);

                  // check if there was an initial message that was blocked and send it
                  if (chatKeys.initialMessage) {
                    var initialMessage = {
                      type: 'create',
                      to: message.from,
                      from: message.to,
                      body: {
                        value: chatKeys.initialMessage.body.value
                      }
                    };

                    resolve({ message: initialMessage, chatKeys: chatKeys });

                    //sends the sessionKey to the subscriber hyperty
                  } else {
                    _this._sendReporterSessionKey(message, chatKeys).then(function (value) {
                      resolve(value);
                    });
                  }
                });
              });

              break;
            case 'reporterSessionKey':

              console.log('reporterSessionKey');

              var valueIVandHash = JSON.parse(atob(message.body.value));
              hash = _this.crypto.decode(valueIVandHash.hash);
              iv = _this.crypto.decode(valueIVandHash.iv);
              var encryptedValue = _this.crypto.decode(valueIVandHash.value);
              var parsedValue = void 0;
              var sessionKey = void 0;
              var dataObjectURL = void 0;
              var receiverAcknowledgeMsg = void 0;

              _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, encryptedValue, iv).then(function (decryptedValue) {

                parsedValue = JSON.parse(decryptedValue);
                sessionKey = _this.crypto.decode(parsedValue.value);
                dataObjectURL = parsedValue.dataObjectURL;

                var messageToHash = _this._filterMessageToHash(message, decryptedValue + iv);

                return _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, messageToHash, hash);
              }).then(function (hashResult) {

                //console.log('hash successfully validated ', hashResult);

                _this.dataObjectSessionKeys[dataObjectURL] = { sessionKey: sessionKey, isToEncrypt: true };

                iv = _this.crypto.generateIV();
                value.iv = _this.crypto.encode(iv);

                return _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, 'ok!!', iv);
              }).then(function (encryptedValue) {

                receiverAcknowledgeMsg = {
                  type: 'handshake',
                  to: message.from,
                  from: message.to,
                  body: {
                    handshakePhase: 'receiverAcknowledge'
                  }
                };

                value.value = _this.crypto.encode(encryptedValue);
                var messageToHash = _this._filterMessageToHash(receiverAcknowledgeMsg, 'ok!!' + iv, chatKeys.hypertyFrom.messageInfo);

                return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, messageToHash);
              }).then(function (hashedMessage) {
                var finalValue = btoa((0, _stringify2.default)({ value: value.value, hash: _this.crypto.encode(hashedMessage), iv: value.iv }));

                receiverAcknowledgeMsg.body.value = finalValue;
                resolve({ message: receiverAcknowledgeMsg, chatKeys: chatKeys });
              });

              break;
            case 'receiverAcknowledge':

              console.log('receiverAcknowledge');

              var receivedvalueIVandHash = JSON.parse(atob(message.body.value));
              var receivedHash = _this.crypto.decode(receivedvalueIVandHash.hash);
              iv = _this.crypto.decode(receivedvalueIVandHash.iv);
              var receivedEncryptedValue = _this.crypto.decode(receivedvalueIVandHash.value);

              _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, receivedEncryptedValue, iv).then(function (decryptedValue) {

                var filteredMessage = _this._filterMessageToHash(message, decryptedValue + iv);
                return _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, receivedHash);
              }).then(function (hashResult) {
                //console.log('hashResult ', hashResult);

                var callback = chatKeys.callback;

                if (callback) {
                  callback('handShakeEnd');
                }
                resolve('handShakeEnd');
              });

              break;
            default:
              reject(message);
          }
        })();
      });
    }
  }, {
    key: '_sendReporterSessionKey',
    value: function _sendReporterSessionKey(message, chatKeys) {
      var _this = this;
      var sessionKeyBundle = _this.dataObjectSessionKeys[chatKeys.dataObjectURL];
      var reporterSessionKeyMsg = void 0;
      var valueToEncrypt = void 0;
      var sessionKey = void 0;
      var iv = void 0;
      var value = {};

      return new _promise2.default(function (resolve, reject) {

        //if there is not yet a session Key, generates a new one
        if (!sessionKeyBundle) {
          sessionKey = _this.crypto.generateRandom();
          _this.dataObjectSessionKeys[chatKeys.dataObjectURL] = { sessionKey: sessionKey, isToEncrypt: true };
        } else {
          sessionKey = sessionKeyBundle.sessionKey;
        }

        valueToEncrypt = (0, _stringify2.default)({ value: _this.crypto.encode(sessionKey), dataObjectURL: chatKeys.dataObjectURL });

        iv = _this.crypto.generateIV();
        value.iv = _this.crypto.encode(iv);
        _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, valueToEncrypt, iv).then(function (encryptedValue) {

          reporterSessionKeyMsg = {
            type: 'handshake',
            to: message.from,
            from: message.to,
            body: {
              handshakePhase: 'reporterSessionKey',
              value: _this.crypto.encode(encryptedValue)
            }
          };

          var filteredMessage = _this._filterMessageToHash(reporterSessionKeyMsg, valueToEncrypt + iv, chatKeys.hypertyFrom.messageInfo);

          return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, filteredMessage);
        }).then(function (hashedMessage) {

          var valueWithHash = btoa((0, _stringify2.default)({ value: reporterSessionKeyMsg.body.value, hash: _this.crypto.encode(hashedMessage), iv: value.iv }));

          reporterSessionKeyMsg.body.value = valueWithHash;
          resolve({ message: reporterSessionKeyMsg, chatKeys: chatKeys });
        });
      });
    }

    /**
    * returns the reporter associated to the dataObject URL
    * @param   {String}   dataObjectURL         dataObject url
    * @return   {String}  reporter              dataObject url reporter
    */

  }, {
    key: '_getHypertyFromDataObject',
    value: function _getHypertyFromDataObject(dataObjectURL) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        //TODO remove this logic and move it to a util function

        var splitedURL = dataObjectURL.split('/');
        var finalURL = splitedURL[0] + '//' + splitedURL[2] + '/' + splitedURL[3];
        if (splitedURL.length > 6) {
          finalURL = splitedURL[0] + '//' + splitedURL[2] + '/' + splitedURL[3] + '/' + splitedURL[4];
        }

        // check if is the creator of the hyperty
        var reporterURL = _this.registry.getReporterURLSynchonous(finalURL);

        if (reporterURL) {
          resolve(reporterURL);
        } else {
          // check if there is already an association from an hypertyURL to the dataObject
          var storedReporterURL = _this.dataObjectsIdentity[finalURL];

          if (storedReporterURL) {
            resolve(storedReporterURL);
          } else {
            // check if there is any hyperty that subscribed the dataObjectURL
            var subscriberHyperty = _this.registry.getDataObjectSubscriberHyperty(dataObjectURL);

            if (subscriberHyperty) {
              resolve(subscriberHyperty);
            } else {

              // search in domain registry for the hyperty associated to the dataObject
              // search in case is a subscriber who wants to know the reporter
              _this.registry.discoverDataObjectPerURL(finalURL, splitedURL[2]).then(function (dataObject) {
                _this.dataObjectsIdentity[finalURL] = dataObject.reporter;
                resolve(dataObject.reporter);
              }, function (err) {
                reject(err);
              });
            }
          }
        }
      });
    }

    /**
    * filter the messages to hash, by removing some fields not generated by the runtime core
    * @param {Message}  message                     message
    * @param {String}  decryptedValue (Optional)    value from body.value in case it originally comes encrypted
    * @param {JSON}  identity(Optional)    add the hyperty identity associated in case is not added to the initial message
    * @return {Message}  new message filtered
    */

  }, {
    key: '_filterMessageToHash',
    value: function _filterMessageToHash(message, decryptedValue, identity) {

      return {
        type: message.type,
        from: message.from,
        to: message.to,
        body: {
          identity: identity || message.body.identity,
          value: decryptedValue || message.body.value,
          handshakePhase: message.body.handshakePhase
        }
      };
    }

    /**
    * generates the initial structure for the keys between two users
    * @param {JSON}    message              initial message that triggers the mutual authentication
    * @param {String}  userURL              userURL
    * @param {boolean} receiver(Optional)  indicates if is the sender or the receiver that creates a new chat crypto
    * @return {JSON} newChatCrypto  new JSON structure for the chat crypto
    */

  }, {
    key: '_newChatCrypto',
    value: function _newChatCrypto(message, userURL, receiver) {
      var _this = this;

      //check whether is the sender or the receiver to create a new chatCrypto
      //to mantain consistency on the keys if the receiver create a new chatCrypto,
      //then invert the fields
      var from = receiver ? message.to : message.from;
      var to = receiver ? message.from : message.to;

      var userInfo = _this.getIdentity(userURL);

      var newChatCrypto = {
        hypertyFrom: {
          hyperty: from,
          userID: userInfo.messageInfo.userProfile.username,
          privateKey: userInfo.keyPair.private,
          publicKey: userInfo.keyPair.public,
          assertion: userInfo.assertion,
          messageInfo: userInfo.messageInfo
        },
        hypertyTo: {
          hyperty: to,
          userID: undefined,
          publicKey: undefined,
          assertion: undefined
        },
        keys: {
          hypertyToSessionKey: undefined,
          hypertyFromSessionKey: undefined,
          hypertyToHashKey: undefined,
          hypertyFromHashKey: undefined,
          toRandom: undefined,
          fromRandom: undefined,
          premasterKey: undefined,
          masterKey: undefined
        },
        handshakeHistory: {
          senderHello: undefined,
          receiverHello: undefined,
          senderCertificate: undefined,
          receiverFinishedMessage: undefined
        },
        initialMessage: message.body.ignore ? undefined : message,
        callback: message.callback,
        authenticated: false,
        dataObjectURL: message.dataObjectURL
      };

      return newChatCrypto;
    }
  }, {
    key: 'messageBus',
    get: function get() {
      var _this = this;
      return _this._messageBus;
    }

    /**
    * Set the messageBus in this Registry
    * @param {MessageBus}           messageBus
    */
    ,
    set: function set(messageBus) {
      var _this = this;
      _this._messageBus = messageBus;

      //TODO remove later with the proper GUI message listener
      var guiFake = new _GuiFake2.default(_this._guiURL, _this._messageBus);
      _this.guiFake = guiFake;
    }

    /**
    * return the registry in this idModule
    * @param {registry}           registry
    */

  }, {
    key: 'registry',
    get: function get() {
      var _this = this;
      return _this._registry;
    }

    /**
    * Set the registry in this idModule
    * @param {registry}     reg
    */
    ,
    set: function set(registry) {
      var _this = this;
      _this._registry = registry;
    }
  }]);
  return IdentityModule;
}();

exports.default = IdentityModule;
module.exports = exports['default'];

},{"../utils/utils.js":452,"./Crypto":420,"./GuiFake":421,"./Identity":422,"babel-runtime/core-js/json/stringify":297,"babel-runtime/core-js/promise":306,"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310}],424:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CombiningAlgorithm = function CombiningAlgorithm() {
  (0, _classCallCheck3.default)(this, CombiningAlgorithm);
};

exports.default = CombiningAlgorithm;
module.exports = exports["default"];

},{"babel-runtime/helpers/classCallCheck":309}],425:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Operators = function () {
  function Operators() {
    (0, _classCallCheck3.default)(this, Operators);
  }

  (0, _createClass3.default)(Operators, [{
    key: 'and',
    value: function and(params) {
      return params[0] && params[1];
    }
  }, {
    key: 'between',
    value: function between(params) {
      var start = parseInt(params[0][0]);
      var end = parseInt(params[0][1]);
      var now = params[1];

      if (end < start) {
        now = now < start ? now += 2400 : now;
        end += 2400;
      }

      return now > start && now < end;
    }
  }, {
    key: 'equals',
    value: function equals(params) {
      return params[0] == '*' || params[0] == params[1];
    }
  }, {
    key: 'greaterThan',
    value: function greaterThan(params) {
      return params[1] > params[0];
    }
  }, {
    key: 'in',
    value: function _in(params) {
      return params[0].indexOf(params[1]) > -1;
    }
  }, {
    key: 'lessThan',
    value: function lessThan(params) {
      return params[1] < params[0];
    }
  }, {
    key: 'not',
    value: function not(params) {
      return !params[0];
    }
  }, {
    key: 'or',
    value: function or(params) {
      return params[0] || params[1];
    }
  }]);
  return Operators;
}();

exports.default = Operators;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310}],426:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _Operators = require('./Operators');

var _Operators2 = _interopRequireDefault(_Operators);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* The Policy Decision Point (PDP) decides if a message is to be authorised by checking a set of
* policies. The resource to be verified is specified in the first word of the 'condition' field of
* a Policy object. The implementation that verifies if the message is compliant with a policy is
* specified in a hashtable to allow dynamic definition of the implementation, providing
* extensibility to the Policy Engine functionalities.
*/
var PDP = function () {
  function PDP(context) {
    (0, _classCallCheck3.default)(this, PDP);

    this.context = context;
    this.operators = new _Operators2.default();
  }

  (0, _createClass3.default)(PDP, [{
    key: 'applyPolicies',
    value: function applyPolicies(message, policies) {
      var result = this.evaluateSPPolicy(message, policies.serviceProviderPolicy);
      if (result || result === undefined || result === 'Not Applicable') {
        var userResult = this.evaluateUserPolicy(message, policies.userPolicy);
        if (userResult !== undefined) {
          result = userResult;
        }
      }

      return result;
    }
  }, {
    key: 'evaluateSPPolicy',
    value: function evaluateSPPolicy(message, policy) {
      var result = void 0;

      if (policy) {
        result = policy.evaluate(this.context, message);
      }

      return result;
    }
  }, {
    key: 'evaluateUserPolicy',
    value: function evaluateUserPolicy(message, title) {
      var result = void 0;

      if (title !== undefined) {
        var policy = this.context.userPolicies[title];

        if (policy) {
          result = policy.evaluate(this.context, message);
        }
      }

      return result;
    }
  }, {
    key: 'context',
    get: function get() {
      return this._context;
    },
    set: function set(context) {
      this._context = context;
    }
  }, {
    key: 'operators',
    get: function get() {
      return this._operators;
    },
    set: function set(operators) {
      this._operators = operators;
    }
  }]);
  return PDP;
}();

exports.default = PDP;
module.exports = exports['default'];

},{"./Operators":425,"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310}],427:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PEP = function () {
  function PEP(context) {
    (0, _classCallCheck3.default)(this, PEP);

    this.context = context;
  }

  (0, _createClass3.default)(PEP, [{
    key: "enforcePolicies",
    value: function enforcePolicies(message, policies, authDecision) {
      var policy = void 0;

      if (policies.userPolicy) {
        policy = this.context.userPolicies[policies.userPolicy];
        if (policy) {
          policy.enforceActions(this.context, message, authDecision);
        }
      }
      policy = this.context.serviceProviderPolicy;
      if (policy) {
        policy.enforceActions(this.context, message, authDecision);
      }
    }

    /*sendAutomaticMessage() {}
     forwardToID() {}
     forwardToHyperty() {}*/

  }]);
  return PEP;
}();

exports.default = PEP;
module.exports = exports["default"];

},{"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310}],428:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _DenyOverrides = require('./combiningAlgorithms/DenyOverrides');

var _DenyOverrides2 = _interopRequireDefault(_DenyOverrides);

var _FirstApplicable = require('./combiningAlgorithms/FirstApplicable');

var _FirstApplicable2 = _interopRequireDefault(_FirstApplicable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Policy = function () {
  function Policy(key, rules, actions, combiningAlgorithm) {
    (0, _classCallCheck3.default)(this, Policy);

    this.actions = actions;
    this.key = key;
    this.rules = rules;
    this.combiningAlgorithm = combiningAlgorithm;
  }

  (0, _createClass3.default)(Policy, [{
    key: 'enforceActions',
    value: function enforceActions(context, message, authDecision) {
      for (var i in this.actions) {
        context[this.actions[i]](message, authDecision);
      }
    }
  }, {
    key: 'evaluate',
    value: function evaluate(context, message) {
      var results = [];

      for (var i in this.rules) {
        results.push(this.rules[i].evaluate(context, message));
      }

      return this.combiningAlgorithm.evaluate(results);
    }
  }, {
    key: 'combiningAlgorithm',
    get: function get() {
      return this._combiningAlgorithm;
    },
    set: function set(combiningAlgorithm) {
      if (combiningAlgorithm === 'denyOverrides') {
        this._combiningAlgorithm = new _DenyOverrides2.default();
      } else {
        if (combiningAlgorithm === 'firstApplicable') {
          this._combiningAlgorithm = new _FirstApplicable2.default();
        } else {
          throw Error('Unknown algorithm: ' + combiningAlgorithm);
        }
      }
    }
  }]);
  return Policy;
}();

exports.default = Policy;
module.exports = exports['default'];

},{"./combiningAlgorithms/DenyOverrides":431,"./combiningAlgorithms/FirstApplicable":432,"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310}],429:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _PEP = require('./PEP');

var _PEP2 = _interopRequireDefault(_PEP);

var _PDP = require('./PDP');

var _PDP2 = _interopRequireDefault(_PDP);

var _UserPolicy = require('./policies/UserPolicy');

var _UserPolicy2 = _interopRequireDefault(_UserPolicy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PolicyEngine = function () {
  function PolicyEngine(context) {
    (0, _classCallCheck3.default)(this, PolicyEngine);

    this.context = context;
    context.policyEngine = this;
    context.loadActivePolicy();
    context.loadGroups();
    context.loadSPPolicies();
    context.loadUserPolicies();
    this.pdp = new _PDP2.default(context);
    this.pep = new _PEP2.default(context);
  }

  (0, _createClass3.default)(PolicyEngine, [{
    key: 'addPolicy',
    value: function addPolicy(source, key, policy) {
      if (source === 'SERVICE_PROVIDER') {
        this.context.serviceProviderPolicies[key] = policy;
        this.context.savePolicies(source);
      } else {
        if (source === 'USER') {
          if (!policy) {
            policy = new _UserPolicy2.default(key, [], []);
          }
          this.context.userPolicies[key] = policy;
          this.context.savePolicies(source);
        } else {
          throw Error('Unknown policy source: ' + source);
        }
      }
    }
  }, {
    key: 'removePolicy',
    value: function removePolicy(source, key) {
      if (source === '*') {
        this.context.serviceProviderPolicies = {};
        this.context.userPolicies = {};
        this.context.activeUserPolicy = undefined;
      } else {
        if (source === 'SERVICE_PROVIDER') {
          delete this.context.serviceProviderPolicies[key];
        } else {
          if (source === 'USER') {
            delete this.context.userPolicies[key];
            if (key === this.context.activeUserPolicy) {
              this.context.activeUserPolicy = undefined;
            }
          } else {
            throw Error('Unknown policy source: ' + source);
          }
        }
      }

      this.context.savePolicies('USER');
      this.context.savePolicies('SERVICE_PROVIDER');
      this.context.saveActivePolicy();
    }
  }, {
    key: 'removeRule',
    value: function removeRule(key, rule) {
      delete this.context.userPolicies[key][rule.scope][rule.target][rule.condition];
    }
  }, {
    key: 'authorise',
    value: function authorise(message) {
      var _this = this;
      return _this.context.authorise(message);
    }
  }, {
    key: 'getGroupsNames',
    value: function getGroupsNames() {
      var myGroups = this.context.groups;
      var groupsNames = [];
      if (myGroups !== undefined) {
        for (var groupName in myGroups) {
          groupsNames.push(groupName);
        }
      }
      return groupsNames;
    }
  }, {
    key: 'getGroup',
    value: function getGroup(groupName) {
      var myGroups = this.context.groups;
      var members = [];

      if (myGroups[groupName] !== undefined) {
        members = myGroups[groupName];
      }

      return members;
    }

    /**
    * Creates a group with the given name.
    * @param  {String}  groupName
    */

  }, {
    key: 'createGroup',
    value: function createGroup(groupName) {
      this.context.groups[groupName] = [];
      this.context.saveGroups();
    }
  }, {
    key: 'deleteGroup',
    value: function deleteGroup(groupName) {
      delete this.context.groups[groupName];
      this.context.saveGroups();
    }

    /**
    * Adds the given user email to the group with the given name.
    * @param  {String}  userEmail
    * @param  {String}  groupName
    */

  }, {
    key: 'addToGroup',
    value: function addToGroup(groupName, userEmail) {
      var myGroups = this.context.groups;
      if (myGroups[groupName] !== undefined) {
        if (myGroups[groupName].indexOf(userEmail) === -1) {
          myGroups[groupName].push(userEmail);
          this.context.saveGroups();
        }
      } else {
        throw Error('Group "' + groupName + '" does not exist!');
      }
    }
  }, {
    key: 'removeFromGroup',
    value: function removeFromGroup(groupName, userEmail) {
      var group = this.context.groups[groupName];

      group.splice(group.indexOf(userEmail), 1);
      this.context.saveGroups();
    }
  }]);
  return PolicyEngine;
}();

exports.default = PolicyEngine;
module.exports = exports['default'];

},{"./PDP":426,"./PEP":427,"./policies/UserPolicy":438,"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310}],430:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

var _Operators = require('./Operators');

var _Operators2 = _interopRequireDefault(_Operators);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Rule = function () {
  function Rule(authorise, condition, priority, scope, target) {
    (0, _classCallCheck3.default)(this, Rule);

    this.operators = new _Operators2.default();
    this.authorise = authorise;
    this.condition = condition;
    this.priority = priority;
    this.scope = scope;
    this.target = target;
  }

  (0, _createClass3.default)(Rule, [{
    key: 'evaluate',
    value: function evaluate(context, message) {
      var hypertyName = void 0;
      switch (this.scope) {
        case 'global':
          break;

        case 'hyperty':
          if ((0, _utils.isDataObjectURL)(message.from)) {
            var reporter = context.runtimeRegistry.getReporterURLSynchonous((0, _utils.removePathFromURL)(message.from));
            if (reporter !== undefined) {
              hypertyName = context.runtimeRegistry.getHypertyName(reporter);
            }
          } else {
            if (message.from.split('://')[0] === 'hyperty') {
              hypertyName = context.runtimeRegistry.getHypertyName((0, _utils.removePathFromURL)(message.from));
            }
          }
          if (hypertyName === this.target) {
            break;
          }

          if ((0, _utils.isDataObjectURL)(message.to)) {
            var _reporter = context.runtimeRegistry.getReporterURLSynchonous((0, _utils.removePathFromURL)(message.to));
            if (_reporter !== undefined) {
              hypertyName = context.runtimeRegistry.getHypertyName(_reporter);
            }
          } else {
            if (message.to.split('://')[0] === 'hyperty') {
              hypertyName = context.runtimeRegistry.getHypertyName((0, _utils.removePathFromURL)(message.to));
            }
          }
          if (hypertyName === this.target) {
            break;
          }

          return 'Not Applicable';

        case 'user':
          var owner = void 0;

          if ((0, _utils.isDataObjectURL)(message.from)) {
            var _reporter2 = context.runtimeRegistry.getReporterURLSynchonous((0, _utils.removePathFromURL)(message.from));
            owner = context.runtimeRegistry.getHypertyOwner(_reporter2);
          } else {
            if (message.from.split('://')[0] === 'hyperty') {
              owner = context.runtimeRegistry.getHypertyOwner((0, _utils.removePathFromURL)(message.from));
            }
          }
          if (owner !== undefined) {
            owner = (0, _utils.getUserEmailFromURL)(owner);
          }
          if (owner === this.target) {
            break;
          }

          if ((0, _utils.isDataObjectURL)(message.to)) {
            var _reporter3 = context.runtimeRegistry.getReporterURLSynchonous((0, _utils.removePathFromURL)(message.to));
            owner = context.runtimeRegistry.getHypertyOwner(_reporter3);
            if (owner !== undefined) {
              owner = (0, _utils.getUserEmailFromURL)(owner);
            }
          } else {
            if (message.to.split('://')[0] === 'hyperty') {
              owner = context.runtimeRegistry.getHypertyOwner((0, _utils.removePathFromURL)(message.to));
              if (owner !== undefined) {
                owner = (0, _utils.getUserEmailFromURL)(owner);
              }
            }
          }
          if (owner === this.target) {
            break;
          }

          return 'Not Applicable';
      }
      if (this.condition.isApplicable(context, message, this.scope, this.target)) {
        return this.authorise;
      } else {
        return 'Not Applicable';
      }
    }
  }]);
  return Rule;
}();

exports.default = Rule;
module.exports = exports['default'];

},{"../utils/utils":452,"./Operators":425,"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310}],431:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _CombiningAlgorithm2 = require('../CombiningAlgorithm');

var _CombiningAlgorithm3 = _interopRequireDefault(_CombiningAlgorithm2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DenyOverrides = function (_CombiningAlgorithm) {
  (0, _inherits3.default)(DenyOverrides, _CombiningAlgorithm);

  function DenyOverrides() {
    (0, _classCallCheck3.default)(this, DenyOverrides);
    return (0, _possibleConstructorReturn3.default)(this, (DenyOverrides.__proto__ || (0, _getPrototypeOf2.default)(DenyOverrides)).apply(this, arguments));
  }

  (0, _createClass3.default)(DenyOverrides, [{
    key: 'evaluate',
    value: function evaluate(individualResults) {
      if (individualResults.indexOf(false) !== -1) {
        return false;
      } else {
        if (individualResults.indexOf(true) !== -1) {
          return true;
        } else {
          return 'Not Applicable';
        }
      }
    }
  }]);
  return DenyOverrides;
}(_CombiningAlgorithm3.default);

exports.default = DenyOverrides;
module.exports = exports['default'];

},{"../CombiningAlgorithm":424,"babel-runtime/core-js/object/get-prototype-of":302,"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310,"babel-runtime/helpers/inherits":312,"babel-runtime/helpers/possibleConstructorReturn":313}],432:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _CombiningAlgorithm2 = require('../CombiningAlgorithm');

var _CombiningAlgorithm3 = _interopRequireDefault(_CombiningAlgorithm2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FirstApplicable = function (_CombiningAlgorithm) {
  (0, _inherits3.default)(FirstApplicable, _CombiningAlgorithm);

  function FirstApplicable() {
    (0, _classCallCheck3.default)(this, FirstApplicable);
    return (0, _possibleConstructorReturn3.default)(this, (FirstApplicable.__proto__ || (0, _getPrototypeOf2.default)(FirstApplicable)).apply(this, arguments));
  }

  (0, _createClass3.default)(FirstApplicable, [{
    key: 'evaluate',
    value: function evaluate(individualResults) {
      for (var i in individualResults) {
        if (individualResults[i] !== 'Not Applicable') {
          return individualResults[i];
        }
      }

      return 'Not Applicable';
    }
  }]);
  return FirstApplicable;
}(_CombiningAlgorithm3.default);

exports.default = FirstApplicable;
module.exports = exports['default'];

},{"../CombiningAlgorithm":424,"babel-runtime/core-js/object/get-prototype-of":302,"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310,"babel-runtime/helpers/inherits":312,"babel-runtime/helpers/possibleConstructorReturn":313}],433:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _Condition = require('./Condition');

var _Condition2 = _interopRequireDefault(_Condition);

var _Operators = require('../Operators');

var _Operators2 = _interopRequireDefault(_Operators);

var _SubscriptionCondition = require('./SubscriptionCondition');

var _SubscriptionCondition2 = _interopRequireDefault(_SubscriptionCondition);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AdvancedCondition = function () {
  function AdvancedCondition(condition) {
    (0, _classCallCheck3.default)(this, AdvancedCondition);

    this.operators = new _Operators2.default();
    this.condition = condition;
  }

  (0, _createClass3.default)(AdvancedCondition, [{
    key: 'isApplicable',
    value: function isApplicable(context, message, scope, target, operator, left, right) {
      if (!operator) {
        operator = this.condition[0];
        left = this.condition[1];
        right = this.condition[2];
      }

      while (!(left instanceof _Condition2.default) & !(left instanceof _SubscriptionCondition2.default) & typeof left !== 'boolean') {
        left = this.isApplicable(context, message, scope, target, left[0], left[1], left[2]);
      }
      if (right !== undefined) {
        while (!(right instanceof _Condition2.default) & !(right instanceof _SubscriptionCondition2.default) & typeof right !== 'boolean') {
          right = this.isApplicable(context, message, scope, target, right[0], right[1], right[2]);
        }
      }

      var resultLeft = typeof left === 'boolean' ? left : left.isApplicable(context, message, scope, target);
      var resultRight = void 0;
      if (right !== undefined) {
        resultRight = typeof right === 'boolean' ? right : right.isApplicable(context, message, scope, target);
      }
      return this.operators[operator]([resultLeft, resultRight]);
    }
  }]);
  return AdvancedCondition;
}();

exports.default = AdvancedCondition;
module.exports = exports['default'];

},{"../Operators":425,"./Condition":434,"./SubscriptionCondition":435,"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310}],434:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _Operators = require('../Operators');

var _Operators2 = _interopRequireDefault(_Operators);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Condition = function () {
  function Condition(attribute, operator, params) {
    (0, _classCallCheck3.default)(this, Condition);

    this.attribute = attribute;
    this.operator = operator;
    this.params = params;
    this.operators = new _Operators2.default();
  }

  (0, _createClass3.default)(Condition, [{
    key: 'isApplicable',
    value: function isApplicable(context, message) {
      context[this.attribute] = { message: message };
      var value = context[this.attribute];
      var tempParam = void 0;
      if (this.operator === 'in') {
        if (this.params === 'preauthorised') {
          var dataObjectURL = message.to.split('/');
          dataObjectURL.pop();
          dataObjectURL = dataObjectURL[0] + '//' + dataObjectURL[2];
          tempParam = context.runtimeRegistry.getPreAuthSubscribers(dataObjectURL);
        } else {
          tempParam = context.policyEngine.getGroup(this.params);
        }
      }
      if (!tempParam) {
        return this.operators[this.operator]([this.params, value]);
      } else {
        return this.operators[this.operator]([tempParam, value]);
      }
    }
  }]);
  return Condition;
}();

exports.default = Condition;
module.exports = exports['default'];

},{"../Operators":425,"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310}],435:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _Condition2 = require('./Condition');

var _Condition3 = _interopRequireDefault(_Condition2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SubscriptionCondition = function (_Condition) {
  (0, _inherits3.default)(SubscriptionCondition, _Condition);

  function SubscriptionCondition(attribute, operator, params) {
    (0, _classCallCheck3.default)(this, SubscriptionCondition);
    return (0, _possibleConstructorReturn3.default)(this, (SubscriptionCondition.__proto__ || (0, _getPrototypeOf2.default)(SubscriptionCondition)).call(this, attribute, operator, params));
  }

  (0, _createClass3.default)(SubscriptionCondition, [{
    key: 'isApplicable',
    value: function isApplicable(context, message, scope, target) {
      var isSubscription = message.type === 'subscribe';
      var isFromRemoteSM = context.isFromRemoteSM(message.from);
      if (isSubscription & isFromRemoteSM) {
        return (0, _get3.default)(SubscriptionCondition.prototype.__proto__ || (0, _getPrototypeOf2.default)(SubscriptionCondition.prototype), 'isApplicable', this).call(this, context, message);
      } else {
        return false;
      }
    }
  }]);
  return SubscriptionCondition;
}(_Condition3.default);

exports.default = SubscriptionCondition;
module.exports = exports['default'];

},{"./Condition":434,"babel-runtime/core-js/object/get-prototype-of":302,"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310,"babel-runtime/helpers/get":311,"babel-runtime/helpers/inherits":312,"babel-runtime/helpers/possibleConstructorReturn":313}],436:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CommonCtx = function () {
  function CommonCtx() {
    (0, _classCallCheck3.default)(this, CommonCtx);

    this.defaultBehavior = true;
    this.groups = {};
  }

  (0, _createClass3.default)(CommonCtx, [{
    key: 'defaultBehavior',
    get: function get() {
      return this._defaultBehavior;
    },
    set: function set(behavior) {
      this._defaultBehavior = behavior;
    }
  }, {
    key: 'date',
    set: function set(now) {
      var date = new Date();
      var day = String(date.getDate());
      if (day.length === 1) {
        day = '0' + day;
      }
      var month = String(date.getMonth() + 1);
      if (month.length === 1) {
        month = '0' + month;
      }

      this._date = day + '/' + month + '/' + date.getFullYear();
    },
    get: function get() {
      return this._date;
    }
  }, {
    key: 'domain',
    set: function set(params) {
      if (params.message.body.identity !== undefined) {
        this._domain = (0, _utils.divideEmail)(params.message.body.identity.userProfile.username).domain;
      }
    },
    get: function get() {
      return this._domain;
    }
  }, {
    key: 'source',
    set: function set(params) {
      if (params.message.body.identity !== undefined) {
        this._source = params.message.body.identity.userProfile.username;
      }
    },
    get: function get() {
      var _this = this;
      return _this._source;
    }
  }, {
    key: 'time',
    set: function set(now) {
      now = new Date();
      var minutes = String(now.getMinutes());
      if (minutes.length === 1) {
        minutes = '0' + minutes;
      }
      this._time = parseInt(String(now.getHours()) + minutes);
    },
    get: function get() {
      var _this = this;
      return _this._time;
    }
  }, {
    key: 'weekday',
    set: function set(now) {
      this._weekday = String(new Date().getDay());
    },
    get: function get() {
      return this._weekday;
    }
  }]);
  return CommonCtx;
}();

exports.default = CommonCtx;
module.exports = exports['default'];

},{"../../utils/utils":452,"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310}],437:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _CommonCtx2 = require('./CommonCtx');

var _CommonCtx3 = _interopRequireDefault(_CommonCtx2);

var _Condition = require('../conditions/Condition');

var _Condition2 = _interopRequireDefault(_Condition);

var _utils = require('../../utils/utils');

var _Rule = require('../Rule');

var _Rule2 = _interopRequireDefault(_Rule);

var _UserPolicy = require('../policies/UserPolicy');

var _UserPolicy2 = _interopRequireDefault(_UserPolicy);

var _SubscriptionCondition = require('../conditions/SubscriptionCondition');

var _SubscriptionCondition2 = _interopRequireDefault(_SubscriptionCondition);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RuntimeCoreCtx = function (_CommonCtx) {
  (0, _inherits3.default)(RuntimeCoreCtx, _CommonCtx);

  function RuntimeCoreCtx(idModule, runtimeRegistry, persistenceManager) {
    (0, _classCallCheck3.default)(this, RuntimeCoreCtx);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, (RuntimeCoreCtx.__proto__ || (0, _getPrototypeOf2.default)(RuntimeCoreCtx)).call(this));

    _this2.idModule = idModule;
    _this2.runtimeRegistry = runtimeRegistry;
    _this2.activeUserPolicy = undefined;
    _this2.serviceProviderPolicies = {};
    _this2.userPolicies = {};

    _this2.persistenceManager = persistenceManager;
    return _this2;
  }

  (0, _createClass3.default)(RuntimeCoreCtx, [{
    key: 'authorise',
    value: function authorise(message) {
      var _this = this;
      console.log('--- Policy Engine ---');
      console.log(message);

      return new _promise2.default(function (resolve, reject) {
        message.body = message.body || {};
        var result = void 0;
        var isToVerify = _this._isToVerify(message);
        var isIncomingMessage = _this._isIncomingMessage(message);
        var isToCypher = _this._isToCypherModule(message);
        if (isToVerify) {
          if (isIncomingMessage) {
            if (isToCypher) {
              _this.decrypt(message).then(function (message) {
                var policies = {
                  serviceProviderPolicy: _this.getServiceProviderPolicy(message, isIncomingMessage),
                  userPolicy: _this.activeUserPolicy
                };
                result = _this.policyEngine.pdp.applyPolicies(message, policies);
                _this.policyEngine.pep.enforcePolicies(message, policies, result);
                if (result === undefined || result === 'Not Applicable') {
                  result = _this.defaultBehavior;
                  message.body.auth = false;
                }
                if (result) {
                  var isSubscription = message.type === 'subscribe';
                  var isFromRemoteSM = _this.isFromRemoteSM(message.from);
                  if (isSubscription & isFromRemoteSM) {
                    _this.registerSubscriber(message);
                    _this.doMutualAuthentication(message);
                  }
                  message.body.auth = message.body.auth === undefined ? true : message.body.auth;
                  resolve(message);
                } else {
                  reject('Message blocked');
                }
              }, function (error) {
                reject(error);
              });
            } else {
              var policies = {
                serviceProviderPolicy: _this.getServiceProviderPolicy(message, isIncomingMessage),
                userPolicy: _this.activeUserPolicy
              };
              result = _this.policyEngine.pdp.applyPolicies(message, policies);
              _this.policyEngine.pep.enforcePolicies(message, policies, result);
              if (result === undefined || result === 'Not Applicable') {
                result = _this.defaultBehavior;
                message.body.auth = false;
              }
              if (result) {
                var isSubscription = message.type === 'subscribe';
                var isFromRemoteSM = _this.isFromRemoteSM(message.from);
                if (isSubscription & isFromRemoteSM) {
                  _this.registerSubscriber(message);
                  _this.doMutualAuthentication(message);
                }
                message.body.auth = message.body.auth === undefined ? true : message.body.auth;
                resolve(message);
              } else {
                reject('Message blocked');
              }
            }
          } else {
            var isToSetID = _this._isToSetID(message);
            if (isToSetID) {
              _this._getIdentity(message).then(function (identity) {
                message.body.identity = identity;
                var policies = {
                  serviceProviderPolicy: _this.getServiceProviderPolicy(message, isIncomingMessage),
                  userPolicy: _this.activeUserPolicy
                };
                result = _this.policyEngine.pdp.applyPolicies(message, policies);
                _this.policyEngine.pep.enforcePolicies(message, policies, result);
                if (result === undefined || result === 'Not Applicable') {
                  result = _this.defaultBehavior;
                  message.body.auth = false;
                }
                if (result) {
                  message.body.auth = message.body.auth === undefined ? true : message.body.auth;
                  if (isToCypher) {
                    _this.encrypt(message).then(function (message) {
                      resolve(message);
                    }, function (error) {
                      reject(error);
                    });
                  } else {
                    resolve(message);
                  }
                } else {
                  reject('Message blocked');
                }
              }, function (error) {
                reject(error);
              });
            } else {
              var _policies = {
                serviceProviderPolicy: _this.getServiceProviderPolicy(message, isIncomingMessage),
                userPolicy: _this.activeUserPolicy
              };
              result = _this.policyEngine.pdp.applyPolicies(message, _policies);
              _this.policyEngine.pep.enforcePolicies(message, _policies, result);
              if (result === undefined || result === 'Not Applicable') {
                result = _this.defaultBehavior;
                message.body.auth = false;
              }
              if (result) {
                message.body.auth = message.body.auth === undefined ? true : message.body.auth;
                resolve(message);
              } else {
                reject('Message blocked');
              }
            }
          }
        } else {
          result = _this.defaultBehavior;
          message.body.auth = false;
          if (result) {
            resolve(message);
          } else {
            reject('Message blocked');
          }
        }
      });
    }
  }, {
    key: 'decrypt',
    value: function decrypt(message) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this.idModule.decryptMessage(message).then(function (msg) {
          resolve(msg);
        }, function (error) {
          reject(error);
        });
      });
    }
  }, {
    key: 'doMutualAuthentication',
    value: function doMutualAuthentication(message) {
      var to = message.to.split('/');
      var subsIndex = to.indexOf('subscription');
      var isDataObjectSubscription = subsIndex !== -1;
      var isFromRemoteSM = this.isFromRemoteSM(message.from);
      if (isDataObjectSubscription & isFromRemoteSM) {
        to.pop();
        var dataObjectURL = to[0] + '//' + to[2] + '/' + to[3];
        if (to.length > 4) {
          dataObjectURL = to[0] + '//' + to[2] + '/' + to[3] + '/' + to[4];
        }
        this.idModule.doMutualAuthentication(dataObjectURL, message.body.subscriber);
      }
    }
  }, {
    key: 'encrypt',
    value: function encrypt(message) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this.idModule.encryptMessage(message).then(function (msg) {
          resolve(msg);
        }, function (error) {
          reject(error);
        });
      });
    }
  }, {
    key: 'getMyEmails',
    value: function getMyEmails() {
      var identities = this.idModule.getIdentities();
      var emails = [];

      for (var i in identities) {
        emails.push((0, _utils.getUserEmailFromURL)(identities[i].identity));
      }

      return emails;
    }
  }, {
    key: 'getMyHyperties',
    value: function getMyHyperties() {
      var hyperties = this.runtimeRegistry.hypertiesList;
      var hypertiesNames = [];

      for (var i in hyperties) {
        var hypertyName = hyperties[i].objectName;
        if (hypertiesNames.indexOf(hypertyName) === -1) {
          hypertiesNames.push(hypertyName);
        }
      }

      return hypertiesNames;
    }
  }, {
    key: 'getServiceProviderPolicy',
    value: function getServiceProviderPolicy(message, isIncoming) {
      var policy = void 0;

      if (isIncoming) {
        var toHyperty = this.runtimeRegistry.getHypertyName(message.to);
        policy = this.serviceProviderPolicies[toHyperty];
      } else {
        var fromHyperty = this.runtimeRegistry.getHypertyName(message.from);
        policy = this.serviceProviderPolicies[fromHyperty];
      }
      return policy;
    }
  }, {
    key: 'isFromRemoteSM',
    value: function isFromRemoteSM(from) {
      var splitFrom = from.split('://');
      return splitFrom[0] === 'runtime' && from !== this.runtimeRegistry.runtimeURL + '/sm';
    }
  }, {
    key: '_isToSetID',
    value: function _isToSetID(message) {
      var schemasToIgnore = ['domain-idp', 'runtime', 'domain'];
      var splitFrom = message.from.split('://');
      var fromSchema = splitFrom[0];

      return schemasToIgnore.indexOf(fromSchema) === -1;
    }
  }, {
    key: '_isIncomingMessage',
    value: function _isIncomingMessage(message) {
      return message.body.identity ? true : false;
    }
  }, {
    key: 'getURL',
    value: function getURL(url) {
      var splitURL = url.split('/');
      return splitURL[0] + '//' + splitURL[2] + '/' + splitURL[3];
    }
  }, {
    key: '_getIdentity',
    value: function _getIdentity(message) {
      if (message.type === 'update') {
        return this.idModule.getIdentityOfHyperty(message.body.source);
      }

      if (message.type === 'response' && message.body.source !== undefined) {
        return this.idModule.getIdentityOfHyperty(message.body.source);
      }

      if ((0, _utils.divideURL)(message.from).type === 'hyperty') {
        return this.idModule.getIdentityOfHyperty(message.from);
      } else {
        return this.idModule.getIdentityOfHyperty(this.getURL(message.from));
      }
    }
  }, {
    key: '_isToVerify',
    value: function _isToVerify(message) {
      var schemasToIgnore = ['domain', 'domain-idp', 'global', 'hyperty-runtime', 'runtime'];
      var splitFrom = message.from.split('://');
      var fromSchema = splitFrom[0];
      var splitTo = message.to.split('://');
      var toSchema = splitTo[0];
      if (fromSchema === message.from || toSchema === message.to) {
        return false;
      }
      return schemasToIgnore.indexOf(fromSchema) === -1 || schemasToIgnore.indexOf(toSchema) === -1;
    }

    //TODO use schemasToIgnore instead

  }, {
    key: '_isToCypherModule',
    value: function _isToCypherModule(message) {
      var isCreate = message.type === 'create';
      var isFromHyperty = (0, _utils.divideURL)(message.from).type === 'hyperty';
      var isToHyperty = (0, _utils.divideURL)(message.to).type === 'hyperty';
      var isToDataObject = (0, _utils.isDataObjectURL)(message.to);
      var isHandshake = message.type === 'handshake';

      return isCreate && isFromHyperty && isToHyperty || isCreate && isFromHyperty && isToDataObject || isHandshake;
    }
  }, {
    key: 'loadActivePolicy',
    value: function loadActivePolicy() {
      this.activeUserPolicy = this.persistenceManager.get('rethink:activePolicy');
    }
  }, {
    key: 'loadGroups',
    value: function loadGroups() {
      var groups = this.persistenceManager.get('rethink:groups');
      if (groups != undefined) {
        this.groups = groups;
      }
    }
  }, {
    key: 'loadSPPolicies',
    value: function loadSPPolicies() {
      var policies = this.persistenceManager.get('rethink:spPolicies');
      if (policies !== undefined) {
        this.serviceProviderPolicies = policies;
      }
    }
  }, {
    key: 'loadUserPolicies',
    value: function loadUserPolicies() {
      var policies = this.persistenceManager.get('rethink:userPolicies');

      if (policies !== undefined) {
        for (var i in policies) {
          var rulesPE = [];
          var rules = policies[i].rules;
          for (var j in rules) {
            var condition = void 0;
            if (rules[j].condition.attribute === 'subscription') {
              condition = new _SubscriptionCondition2.default(rules[j].condition.attribute, rules[j].condition.operator, rules[j].condition.params);
            } else {
              condition = new _Condition2.default(rules[j].condition.attribute, rules[j].condition.operator, rules[j].condition.params);
            }
            rulesPE.push(new _Rule2.default(rules[j].authorise, condition, rules[j].priority, rules[j].scope, rules[j].target));
          }
          this.userPolicies[i] = new _UserPolicy2.default(policies[i].key, rulesPE, policies[i].actions, policies[i].combiningAlgorithm);
        }
      }
    }
  }, {
    key: 'registerSubscriber',
    value: function registerSubscriber(message) {
      var to = message.to.split('/');
      var subsIndex = to.indexOf('subscription');
      var isDataObjectSubscription = subsIndex !== -1;
      var isFromRemoteSM = this.isFromRemoteSM(message.from);

      if (isDataObjectSubscription & isFromRemoteSM) {
        to.pop();
        var dataObjectURL = to[0] + '//' + to[2] + '/' + to[3];
        if (to.length > 4) {
          dataObjectURL = to[0] + '//' + to[2] + '/' + to[3] + '/' + to[4];
        }
        this.runtimeRegistry.registerSubscriber(dataObjectURL, message.body.subscriber);
      }
    }
  }, {
    key: '_getLastComponentOfURL',
    value: function _getLastComponentOfURL(url) {
      var split = url.split('/');
      return split[split.length - 1];
    }
  }, {
    key: 'saveActivePolicy',
    value: function saveActivePolicy() {
      this.persistenceManager.set('rethink:activePolicy', 0, this.activeUserPolicy);
    }
  }, {
    key: 'saveGroups',
    value: function saveGroups() {
      this.persistenceManager.set('rethink:groups', 0, this.groups);
    }
  }, {
    key: 'savePolicies',
    value: function savePolicies(source) {
      switch (source) {
        case 'USER':
          this.persistenceManager.set('rethink:userPolicies', 0, this.userPolicies);
          break;
        case 'SERVICE_PROVIDER':
          this.persistenceManager.set('rethink:spPolicies', 0, this.serviceProviderPolicies);
          break;
      }
    }
  }, {
    key: 'dataObjectScheme',
    get: function get() {
      return this._dataObjectScheme;
    },
    set: function set(params) {
      var from = params.message.from;
      if ((0, _utils.isDataObjectURL)(from)) {
        this._dataObjectScheme = (0, _utils.divideURL)(from).type;
      } else {
        this._dataObjectScheme = undefined;
      }
    }
  }, {
    key: 'resourceType',
    get: function get() {
      return this._resourceType;
    },
    set: function set(params) {
      var message = params.message;
      if (message.body.value !== undefined) {
        this._resourceType = message.body.value.resourceType;
      }
    }
  }, {
    key: 'subscription',
    get: function get() {
      return this._subscription;
    },
    set: function set(params) {
      this._subscription = params.message.body.subscriber;
    }
  }]);
  return RuntimeCoreCtx;
}(_CommonCtx3.default);

exports.default = RuntimeCoreCtx;
module.exports = exports['default'];

},{"../../utils/utils":452,"../Rule":430,"../conditions/Condition":434,"../conditions/SubscriptionCondition":435,"../policies/UserPolicy":438,"./CommonCtx":436,"babel-runtime/core-js/object/get-prototype-of":302,"babel-runtime/core-js/promise":306,"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310,"babel-runtime/helpers/inherits":312,"babel-runtime/helpers/possibleConstructorReturn":313}],438:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _AdvancedCondition = require('../conditions/AdvancedCondition');

var _AdvancedCondition2 = _interopRequireDefault(_AdvancedCondition);

var _Condition = require('../conditions/Condition');

var _Condition2 = _interopRequireDefault(_Condition);

var _Policy2 = require('../Policy');

var _Policy3 = _interopRequireDefault(_Policy2);

var _Rule = require('../Rule');

var _Rule2 = _interopRequireDefault(_Rule);

var _SubscriptionCondition = require('../conditions/SubscriptionCondition');

var _SubscriptionCondition2 = _interopRequireDefault(_SubscriptionCondition);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var UserPolicy = function (_Policy) {
  (0, _inherits3.default)(UserPolicy, _Policy);

  function UserPolicy(key, rules, actions, combiningAlgorithm) {
    (0, _classCallCheck3.default)(this, UserPolicy);

    if (!combiningAlgorithm) {
      combiningAlgorithm = 'denyOverrides';
    }
    return (0, _possibleConstructorReturn3.default)(this, (UserPolicy.__proto__ || (0, _getPrototypeOf2.default)(UserPolicy)).call(this, key, rules, actions, combiningAlgorithm));
  }

  (0, _createClass3.default)(UserPolicy, [{
    key: 'createRule',
    value: function createRule(type, authorise, condition, scope, target, priority) {
      if (!(condition instanceof _Condition2.default)) {
        switch (type) {
          case 'advanced':
            condition = new _AdvancedCondition2.default(condition);
            break;
          case 'simple':
            condition = new _Condition2.default(condition[0], condition[1], condition[2]);
            break;
          case 'subscription':
            condition = new _SubscriptionCondition2.default(condition[0], condition[1], condition[2]);
            break;
        }
      }
      if (priority === undefined) {
        priority = this.getLastPriority() + 1;
      }
      var rule = new _Rule2.default(authorise, condition, priority, scope, target);
      this.rules.push(rule);
    }
  }, {
    key: 'deleteRule',
    value: function deleteRule(rule) {
      var indexToRemove = this.rules.indexOf(rule);
      this.rules.splice(indexToRemove, 1);
    }
  }, {
    key: 'getLastPriority',
    value: function getLastPriority() {
      var priorities = [];

      if (this.rules.length !== 0) {
        for (var i in this.rules) {
          priorities.push(this.rules[i].priority);
        }
        return Math.max.apply(Math, priorities);
      } else {
        return -1;
      }
    }
  }, {
    key: 'getRuleByPriority',
    value: function getRuleByPriority(priority) {
      for (var i in this.rules) {
        if (this.rules[i].priority == priority) {
          return this.rules[i];
        }
      }
      throw Error('Rule with priority ' + priority + ' does not exist!');
    }
  }, {
    key: 'hasSubscriptionRule',
    value: function hasSubscriptionRule() {
      for (var i in this.rules) {
        if (this.rules[i].scope !== 'global') {
          continue;
        }
        if (this.rules[i].condition instanceof _SubscriptionCondition2.default) {
          return true;
        } else {
          if (this.rules[i].condition instanceof _AdvancedCondition2.default) {
            for (var j in this.rules[i].condition.condition) {
              if (this.rules[i].condition.condition[j] instanceof _SubscriptionCondition2.default) {
                return true;
              }
            }
          }
        }
      }
      return false;
    }
  }, {
    key: 'sortRules',
    value: function sortRules() {
      return this.rules.sort(function (a, b) {
        var x = a['priority'];var y = b['priority'];
        return x < y ? -1 : x > y ? 1 : 0;
      });
    }
  }]);
  return UserPolicy;
}(_Policy3.default);

exports.default = UserPolicy;
module.exports = exports['default'];

},{"../Policy":428,"../Rule":430,"../conditions/AdvancedCondition":433,"../conditions/Condition":434,"../conditions/SubscriptionCondition":435,"babel-runtime/core-js/object/get-prototype-of":302,"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310,"babel-runtime/helpers/inherits":312,"babel-runtime/helpers/possibleConstructorReturn":313}],439:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/
// import MessageFactory from '../../resources/MessageFactory';

/**
 * Class will ask to the message node for addresses
 */
var AddressAllocation = function () {
  /* private
  _url: URL
  _bus: MiniBus
  */

  /**
   * Create an Address Allocation
   * @param  {URL.URL}      url - url from who is sending the message
   * @param  {MiniBus}      bus - MiniBus used for address allocation
   */
  function AddressAllocation(url, bus) {
    (0, _classCallCheck3.default)(this, AddressAllocation);

    var _this = this;

    // let messageFactory = new MessageFactory();
    //
    // _this._messageFactory = messageFactory;
    _this._url = url;
    _this._bus = bus;
  }

  /**
   * get the URL value
   * @return {string} The url value;
   */


  (0, _createClass3.default)(AddressAllocation, [{
    key: 'create',


    /**
     * Ask for creation of a number of Hyperty addresses, to the domain message node.
     * @param  {Domain} domain - Domain of the message node.
     * @param  {number} number - Number of addresses to request
     * @returns {Promise<HypertyURL>}  A list of HypertyURL's
     */
    value: function create(domain, number) {
      var _this = this;

      // let messageFactory = _this._messageFactory;

      var msg = {
        type: 'create', from: _this._url, to: 'domain://msg-node.' + domain + '/hyperty-address-allocation',
        body: { value: { number: number } }
      };

      // TODO: Apply the message factory
      // The msg-node-vertx should be changed the body field to receive
      // the following format body: {value: {number: number}} because
      // the message is generated in that way by the message factory;
      // let msg = messageFactory.createMessageRequest(_this._url, 'domain://msg-node.' + domain + '/hyperty-address-allocation', '', {number: number});

      return new _promise2.default(function (resolve, reject) {

        // TODO: change this response Message using the MessageFactory
        _this._bus.postMessage(msg, function (reply) {
          if (reply.body.code === 200) {
            resolve(reply.body.value.allocated);
          } else {
            reject(reply.body.desc);
          }
        });
      });
    }

    /**
    * Send a request to the domain message node, to deallocate one or more addresses
    * @param  {Domain} domain - Domain of the message node.
    * @param  {addresses} addresses to request the deallocation
    * @returns {Promise}  the response by the message node
    */

  }, {
    key: 'delete',
    value: function _delete(domain, addresses) {
      var _this = this;

      var message = {
        type: 'delete', from: _this._url, to: 'domain://msg-node.' + domain + '/hyperty-address-allocation',
        body: { childrenResources: addresses }
      };

      return new _promise2.default(function (resolve, reject) {

        _this._bus.postMessage(message, function (reply) {
          console.log('reply', reply);
          if (reply.body.code === 200) {
            resolve(reply.body.code);
          } else {
            reject(reply.body.desc);
          }
        });
      });
    }
  }, {
    key: 'url',
    get: function get() {
      return this._url;
    }
  }]);
  return AddressAllocation;
}();

exports.default = AddressAllocation;
module.exports = exports['default'];

},{"babel-runtime/core-js/promise":306,"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310}],440:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _RegistryDataModel2 = require('./RegistryDataModel');

var _RegistryDataModel3 = _interopRequireDefault(_RegistryDataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
*   @author: Gil Dias (gil.dias@tecnico.ulisboa.pt)
*   HypertyInstance Data Model used to model instances of Hyperties running in devices and servers.
*/
var HypertyInstance = function (_RegistryDataModel) {
  (0, _inherits3.default)(HypertyInstance, _RegistryDataModel);

  function HypertyInstance(id, url, descriptorURL, descriptor, hypertyURL, user, guid, runtime, context) {
    (0, _classCallCheck3.default)(this, HypertyInstance);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, (HypertyInstance.__proto__ || (0, _getPrototypeOf2.default)(HypertyInstance)).call(this, id, url, descriptorURL));

    var _this = _this2;
    _this._descriptor = descriptor;
    _this._hypertyURL = hypertyURL;
    _this._user = user;
    _this._guid = guid;
    _this._runtime = runtime;
    _this._context = context;
    return _this2;
  }

  (0, _createClass3.default)(HypertyInstance, [{
    key: 'user',
    set: function set(identity) {
      var _this = this;
      _this.user = identity;
    },
    get: function get() {
      var _this = this;
      return _this._user;
    }
  }, {
    key: 'hypertyURL',
    get: function get() {
      var _this = this;
      return _this._hypertyURL;
    }
  }, {
    key: 'descriptor',
    get: function get() {
      var _this = this;
      return _this._descriptor;
    }
  }, {
    key: 'objectName',
    get: function get() {
      var _this = this;
      return _this._descriptor._objectName;
    }
  }]);
  return HypertyInstance;
}(_RegistryDataModel3.default); /**
                                * Copyright 2016 PT Inovação e Sistemas SA
                                * Copyright 2016 INESC-ID
                                * Copyright 2016 QUOBIS NETWORKS SL
                                * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
                                * Copyright 2016 ORANGE SA
                                * Copyright 2016 Deutsche Telekom AG
                                * Copyright 2016 Apizee
                                * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
                                *
                                * Licensed under the Apache License, Version 2.0 (the "License");
                                * you may not use this file except in compliance with the License.
                                * You may obtain a copy of the License at
                                *
                                *   http://www.apache.org/licenses/LICENSE-2.0
                                *
                                * Unless required by applicable law or agreed to in writing, software
                                * distributed under the License is distributed on an "AS IS" BASIS,
                                * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                * See the License for the specific language governing permissions and
                                * limitations under the License.
                                **/


exports.default = HypertyInstance;
module.exports = exports['default'];

},{"./RegistryDataModel":442,"babel-runtime/core-js/object/get-prototype-of":302,"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310,"babel-runtime/helpers/inherits":312,"babel-runtime/helpers/possibleConstructorReturn":313}],441:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _AddressAllocation = require('./AddressAllocation');

var _AddressAllocation2 = _interopRequireDefault(_AddressAllocation);

var _ObjectAllocation = require('../syncher/ObjectAllocation');

var _ObjectAllocation2 = _interopRequireDefault(_ObjectAllocation);

var _HypertyInstance = require('./HypertyInstance');

var _HypertyInstance2 = _interopRequireDefault(_HypertyInstance);

var _MessageFactory = require('service-framework/dist/MessageFactory');

var _utils = require('../utils/utils.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*import IdentityManager from './IdentityManager';
import Discovery from './Discovery';*/

/**
* Runtime Registry Interface
*/
var Registry = function () {

  /**
  * To initialise the Runtime Registry with the RuntimeURL that will be the basis to derive the internal runtime addresses when allocating addresses to internal runtime component. In addition, the Registry domain back-end to be used to remotely register Runtime components, is also passed as input parameter.
  * @param  {MessageBus}          msgbus                msgbus
  * @param  {HypertyRuntimeURL}   runtimeURL            runtimeURL
  * @param  {AppSandbox}          appSandbox            appSandbox
  * @param  {runtimeCatalogue}    runtimeCatalogue      runtimeCatalogue
  * @param  {DomainURL}           remoteRegistry        remoteRegistry
  */
  function Registry(runtimeURL, appSandbox, identityModule, runtimeCatalogue, remoteRegistry) {
    (0, _classCallCheck3.default)(this, Registry);


    // how some functions receive the parameters for example:
    // new Registry('hyperty-runtime://sp1/123', appSandbox, idModule, remoteRegistry);
    // registry.registerStub(sandbox, 'sp1');
    // registry.registerHyperty(sandBox, 'hyperty-runtime://sp1/123');
    // registry.resolve('hyperty-runtime://sp1/123');

    if (!runtimeURL) throw new Error('runtimeURL is missing.');
    /*if (!remoteRegistry) throw new Error('remoteRegistry is missing');*/

    var _this = this;

    _this.registryURL = runtimeURL + '/registry/';
    _this.appSandbox = appSandbox;
    _this.runtimeURL = runtimeURL;
    _this.runtimeCatalogue = runtimeCatalogue;
    _this.remoteRegistry = remoteRegistry;
    _this.idModule = identityModule;
    _this.identifier = Math.floor(Math.random() * 10000 + 1);

    // the expires in 3600, represents 1 hour
    //the expires is in seconds, unit of measure received by the domain registry
    _this.expiresTime = 3600;

    _this.hypertiesListToRemove = {};
    _this.hypertiesList = [];
    var protostubsList = {};
    var idpProxyList = {};
    _this.dataObjectList = {};
    _this.subscribedDataObjectList = {};
    _this.sandboxesList = { sandbox: {}, appSandbox: {} };
    _this.pepList = {};

    var handler = {
      get: function get(target, name) {
        return name in target ? target[name] : {};
      },
      set: function set(target, property, value) {
        target[property] = value;
        return true;
      }
    };

    _this.protostubsList = new Proxy(protostubsList, handler);
    _this.idpProxyList = new Proxy(idpProxyList, handler);

    window.protostubsList = _this.protostubsList;
    window.idpProxyList = _this.idpProxyList;

    _this._domain = (0, _utils.divideURL)(_this.registryURL).domain;
    _this.sandboxesList.appSandbox[runtimeURL] = appSandbox;
    var msgFactory = new _MessageFactory.MessageFactory('false', '{}');
    _this.messageFactory = msgFactory;
  }

  (0, _createClass3.default)(Registry, [{
    key: '_getIdentityAssociated',
    value: function _getIdentityAssociated(type, hypertyURL) {
      var _this = this;

      for (var hyperty in _this.hypertiesList) {
        var value = _this.hypertiesList[hyperty];
        if (value._hypertyURL === hypertyURL) {
          switch (type) {
            case 'username':
              return value._user.username;
            case 'cn':
              return value._user.cn;
            case 'locale':
              return value._user.locale;
            case 'avatar':
              return value._user.avatar;
            case 'userURL':
              return value._user.userURL;
            case '.':
              return value._user;
            default:
              return '';
          }
        }
      }
      return '';
    }

    /**
    * query the domain registry for information from a dataObject URL
    * @param  {String}   url            dataObject URL
    * @return {JSON}     dataObject     data object
    */

  }, {
    key: 'discoverDataObjectPerURL',
    value: function discoverDataObjectPerURL(url, domain) {

      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var activeDomain = void 0;

        if (!domain) {
          activeDomain = _this._domain;
        } else {
          activeDomain = domain;
        }

        var msg = {
          type: 'read', from: _this.registryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: url, search: 'dataObjectPerURL' }
        };

        _this._messageBus.postMessage(msg, function (reply) {

          var dataObject = reply.body.value;

          if (dataObject) {
            resolve(dataObject);
          } else {
            reject('DataObject not found');
          }
        });
      });
    }

    /**
    * This function is used to return the sandbox instance where the Application is executing. It is assumed there is just one App per Runtime instance.
    */

  }, {
    key: 'getAppSandbox',
    value: function getAppSandbox() {
      var _this = this;
      return _this.appSandbox;
    }

    /**
    * This function returns the user associated to the hyperty URL
    * @param    {String}    hypertyURL      hyperty URL
    * @return   {String}    userURL         user URL
    */

  }, {
    key: 'getHypertyOwner',
    value: function getHypertyOwner(hypertyURL) {

      var _this = this;
      var userURL = void 0;

      for (var index in _this.hypertiesList) {
        var hyperty = _this.hypertiesList[index];
        if (hyperty.hypertyURL === hypertyURL) {
          userURL = hyperty.user.userURL;
        }
      }
      return userURL;
    }

    /**
    * returns the hyperty Name from a given url. This url could be from a dataObject or hyperty
    * @param    {String}    url      hyperty or dataObject URL
    * @return   {String}    hypertyName     hyperty Name
    */

  }, {
    key: 'getHypertyName',
    value: function getHypertyName(url) {
      var _this = this;

      var isHypertyURL = (0, _utils.divideURL)(url).type === 'hyperty';

      //value to be returned in the end
      var hypertyName = void 0;

      //if is not an hyperty, check if is a dataObject and obtain his reporter
      var hypertyURL = isHypertyURL ? hypertyURL = url : _this.getReporterURLSynchonous(url);

      for (var index in _this.hypertiesList) {
        var hyperty = _this.hypertiesList[index];
        if (hyperty.hypertyURL === hypertyURL) {
          hypertyName = hyperty.objectName;
          break;
        }
      }
      return hypertyName;
    }

    /**
    * function to return the reporterURL associated with the dataobject URL
    * @param    {String}     dataObjectURL    dataObjectURL
    * @return   {String}     reporterURL      reporterURL
    */

  }, {
    key: 'getReporterURL',
    value: function getReporterURL(dataObjectURL) {
      var _this = this;

      var dataObject = _this.dataObjectList[dataObjectURL];

      return new _promise2.default(function (resolve, reject) {
        if (dataObject) {
          resolve(dataObject.reporter);
        } else {
          reject('No reporter was found');
        }
      });
    }

    /**
    * function to return the reporterURL associated with the dataobject URL. no promise returned
    * @param    {String}     dataObjectURL    dataObjectURL
    * @return   {String}     reporterURL      reporterURL
    */

  }, {
    key: 'getReporterURLSynchonous',
    value: function getReporterURLSynchonous(dataObjectURL) {
      var _this = this;

      var dataObject = _this.dataObjectList[dataObjectURL];

      return dataObject ? dataObject.reporter : undefined;
    }

    /**
    * returns the hyperty URL that subscribed the dataObject
    * @param    {String}     url            url format
    * @return   {String}    Hyperty URL subscribed to the URL
    */

  }, {
    key: 'getDataObjectSubscriberHyperty',
    value: function getDataObjectSubscriberHyperty(url) {
      var _this = this;

      return _this.subscribedDataObjectList[url];
    }

    /**
    * register a desired dataObject to subscribe
    * @param    {String}    dataObjectURL      dataObject URL
    */

  }, {
    key: 'registerSubscribedDataObject',
    value: function registerSubscribedDataObject(dataObjectURL, hypertyURL) {
      var _this = this;
      if (_this.subscribedDataObjectList[dataObjectURL] === undefined) {
        _this.subscribedDataObjectList[dataObjectURL] = hypertyURL;
      }
    }

    /**
    * Function to return the list of pre authorised users received in the creation of a data object
    * @param    {String}            dataObjectURL    dataObjectURL
    * @return   {Array<String>}     preAuth         List of pre authorised users
    */

  }, {
    key: 'getPreAuthSubscribers',
    value: function getPreAuthSubscribers(dataObjectURL) {
      var _this = this;
      var dataObject = _this.dataObjectList[dataObjectURL];
      var preAuth = [];

      if (dataObject) {
        preAuth = dataObject.preAuth;
      }
      return preAuth;
    }

    /**
    * send requests to unregister all hyperties registered in domain registry
    * @return   {Promise}     return a promise if the result of unregistration all hyperties
    */

  }, {
    key: 'unregisterAllHyperties',
    value: function unregisterAllHyperties() {
      var _this = this;

      var unregisterResults = [];

      return new _promise2.default(function (resolve, reject) {

        for (var index in _this.hypertiesList) {
          var hyperty = _this.hypertiesList[index];
          var result = _this.unregisterHypertyInstance(hyperty.user.userURL, hyperty.hypertyURL);
          unregisterResults.push(result);
        }

        _promise2.default.all(unregisterResults).then(function () {

          resolve('successfully unregistered all hyperties');
        }, function (error) {
          reject(error);
        });
      });
    }

    /**
    *  function to unregister an hypertyInstance in the Domain Registry
    *  @param   {String}      user        user url
    *  @param   {String}      hypertyInstance   HypertyInsntance url
    *
    */

  }, {
    key: 'unregisterHypertyInstance',
    value: function unregisterHypertyInstance(user, hypertyInstance) {
      //TODO working but the user
      var _this = this;

      var message = { type: 'delete', from: _this.registryURL,
        to: 'domain://registry.' + _this._domain + '/',
        body: { value: { user: user, url: hypertyInstance } } };

      _this._messageBus.postMessage(message, function (reply) {
        console.log('unregister hyperty Reply', reply);
      });
    }

    /**
    *  function to delete an dataObjectInstance in the Domain Registry
    *  @param   {String}    name      DataObjectName
    */

  }, {
    key: 'deleteDataObjectInstance',
    value: function deleteDataObjectInstance(name) {
      var _this = this;

      var message = { type: 'delete', from: _this.registryURL,
        to: 'domain://registry.' + _this._domain + '/',
        body: { value: { name: name } } };

      _this._messageBus.postMessage(message, function (reply) {
        console.log('unregister dataObject Reply', reply);
      });
    }

    /**
    * Function to update an Hyperty
    */

  }, {
    key: 'updateHypertyInstance',
    value: function updateHypertyInstance(resource, value) {
      var _this = this;

      var message = { type: 'UPDATE', from: _this.registryURL,
        to: 'domain://registry.' + _this._domain + '/',
        body: { resource: resource, value: value } };

      _this._messageBus.post.postMessage(message, function (reply) {
        console.log('Updated hyperty reply', reply);
      });
    }

    /**
    * register a new subscriber in the dataObject registered
    * @param  {String}   dataObjectURL    dataObject URL
    * @param  {String}   subscriberURL    subscriber URL
    */

  }, {
    key: 'registerSubscriber',
    value: function registerSubscriber(dataObjectURL, subscriberURL) {
      var _this = this;
      var dataObject = _this.dataObjectList[dataObjectURL];

      if (dataObject) {
        dataObject.subscribers.push(subscriberURL);
        _this.dataObjectList[dataObjectURL] = dataObject;
      }
    }

    /**
    * get the subscribers registered within a dataObject
    * @param  {String}          dataObjectURL    dataObject URL
    * @param  {Array<String>}   Substribers List
    */

  }, {
    key: 'getDataObjectSubscribers',
    value: function getDataObjectSubscribers(dataObjectURL) {
      var _this = this;
      var dataObject = _this.dataObjectList[dataObjectURL];

      if (dataObject) {
        return dataObject.subscribers;
      } else {
        throw 'No dataObject was found';
      }
    }

    /**
    * To register a new Data Object in the runtime which returns the dataObjectURL allocated to the new Data Object.
    * @param  {String}      identifier                  identifier
    * @param  {String}      dataObjectschema            dataObjectschema
    * @param  {String}      dataObjectUrl               dataObjectUrl
    * @param {String}      dataObjectReporter           dataObjectReporter
    * @param  {Array}     resources                     dataObject resources
    * @param  {Array}     authorise                     list of pre authorised authorised IDs
    */

  }, {
    key: 'registerDataObject',
    value: function registerDataObject(identifier, dataObjectschema, dataObjectUrl, dataObjectReporter, resources, authorise) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var dataScheme = [];
        var filteredDataScheme = dataObjectUrl.split(':');
        dataScheme.push(filteredDataScheme[0]);

        //message to register the new hyperty, within the domain registry
        var messageValue = { name: identifier, resources: resources, dataSchemes: dataScheme, schema: dataObjectschema, url: dataObjectUrl, expires: _this.expiresTime, reporter: dataObjectReporter, preAuth: authorise, subscribers: [] };

        _this.dataObjectList[dataObjectUrl] = messageValue;

        /*let message = _this.messageFactory.createCreateMessageRequest(
          _this.registryURL,
          'domain://registry.' + _this.registryDomain + '/',
          messageValue,
          'policy'
        );*/

        var message = { type: 'create', from: _this.registryURL, to: 'domain://registry.' + _this.registryDomain + '/', body: { value: messageValue, policy: 'policy' } };

        _this._messageBus.postMessage(message, function (reply) {
          console.log('===> registerDataObject Reply: ', reply);
          if (reply.body.code === 200) {
            resolve('ok');
          } else {
            reject('error on register DataObject');
          }
        });
      });
    }

    /**
    * To register a new Hyperty in the runtime which returns the HypertyURL allocated to the new Hyperty.
    * @param  {Sandbox}             sandbox               sandbox
    * @param  {HypertyCatalogueURL} HypertyCatalogueURL   descriptor
    * @return {HypertyURL}          HypertyURL
    */

  }, {
    key: 'registerHyperty',
    value: function registerHyperty(sandbox, descriptorURL, descriptor) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        //assuming descriptor come in this format, the service-provider-domain url is retrieved by a split instruction
        //hyperty-catalogue://<service-provider-domain>/<catalogue-object-identifier>
        var domainUrl = (0, _utils.divideURL)(descriptorURL).domain;

        if (domainUrl.includes('catalogue')) {
          domainUrl = domainUrl.replace('catalogue.', '');
        }

        _this.idModule.getIdentityAssertion().then(function (result) {
          var userProfile = result.userProfile;
          var identityURL = userProfile.userURL;

          if (_this._messageBus === undefined) {
            reject('MessageBus not found on registerStub');
          } else {
            //call check if the protostub exist
            _this.resolve('hyperty-runtime://' + domainUrl).then(function () {

              _this.registryDomain = domainUrl;

              // TODO: should be implemented with addresses poll
              // In this case we will request and return only one
              // address
              var numberOfAddresses = 1;
              _this.addressAllocation.create(domainUrl, numberOfAddresses).then(function (adderessList) {

                adderessList.forEach(function (address) {

                  _this._messageBus.addListener(address + '/status', function (msg) {
                    console.log('Message addListener for : ', address + '/status -> ' + msg);
                  });
                });

                //check whether the received sanbox e ApplicationSandbox or a normal sandbox
                if (sandbox.type === 'app') {
                  _this.sandboxesList.appSandbox[adderessList[0]] = sandbox;
                } else if (sandbox.type === 'normal') {
                  _this.sandboxesList.sandbox[adderessList[0]] = sandbox;
                } else {
                  reject('Wrong SandboxType');
                }

                var resources = void 0;

                // check if the hyperty resources is a vector or a string
                // TODO delete later when catalogue is fixed
                if (typeof descriptor.hypertyType === 'string') {
                  resources = [];
                  resources.push(descriptor.hypertyType);
                } else {
                  resources = descriptor.hypertyType;
                }

                var descriptorDataSchema = descriptor.dataObjects;
                var dataSchemasArray = [];

                //this will create a array with a Promise in each position
                for (var index in descriptorDataSchema) {
                  dataSchemasArray.push(_this.runtimeCatalogue.getDataSchemaDescriptor(descriptorDataSchema[index]));
                }

                // as soon as the previous array is completed, this will wait for the resolve of all promises in the array
                _promise2.default.all(dataSchemasArray).then(function (dataSchemas) {

                  var filteredDataSchemas = [];
                  for (var _index in dataSchemas) {
                    var dataSchema = dataSchemas[_index];
                    filteredDataSchemas.push(dataSchema.sourcePackage.sourceCode.properties.scheme.constant);
                  }

                  var hyperty = new _HypertyInstance2.default(_this.identifier, _this.registryURL, descriptorURL, descriptor, adderessList[0], userProfile);

                  hyperty._resources = resources;
                  hyperty._dataSchemes = filteredDataSchemas;
                  _this.hypertiesList.push(hyperty);

                  //message to register the new hyperty, within the domain registry
                  var messageValue = { user: identityURL, descriptor: descriptorURL, url: adderessList[0], expires: _this.expiresTime, resources: resources, dataSchemes: filteredDataSchemas };

                  /*let message = _this.messageFactory.createCreateMessageRequest(
                    _this.registryURL,
                    'domain://registry.' + _this.registryDomain + '/',
                    messageValue,
                    'policy'
                  );*/

                  var message = { type: 'create', from: _this.registryURL, to: 'domain://registry.' + _this.registryDomain + '/', body: { value: messageValue, policy: 'policy' } };

                  _this._messageBus.postMessage(message, function (reply) {
                    console.log('===> RegisterHyperty Reply: ', reply);

                    if (reply.body.code === 200) {
                      resolve(adderessList[0]);
                    } else {
                      reject('Failed to register an Hyperty');
                    }
                  });

                  //timer to keep the registration alive
                  // the time is defined by a little less than half of the expires time defined
                  var keepAliveTimer = setInterval(function () {

                    /*let message = _this.messageFactory.createCreateMessageRequest(
                      _this.registryURL,
                      'domain://registry.' + _this.registryDomain + '/',
                      messageValue,
                      'policy'
                    );*/
                    var message = { type: 'create', from: _this.registryURL, to: 'domain://registry.' + _this.registryDomain + '/', body: { value: messageValue, policy: 'policy' } };

                    _this._messageBus.postMessage(message, function (reply) {
                      console.log('===> KeepAlive Reply: ', reply);
                    });
                  }, _this.expiresTime / 1.1 / 2 * 1000);

                  console.log('Hyperty Schemas', filteredDataSchemas);
                  console.log('Hyperty resources', resources);
                });
              }).catch(function (reason) {
                console.log('Address Reason: ', reason);
                reject(reason);
              });
            });
          }
        }, function (err) {
          reject('Failed to obtain an identity');
        });
      });
    }

    /**
    * To unregister a previously registered Hyperty
    * @param  {HypertyURL}          HypertyURL url        url
    */

  }, {
    key: 'unregisterHyperty',
    value: function unregisterHyperty(url) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var found = false;
        var index = 0;

        for (index = 0; index < _this.hypertiesList.length; index++) {
          var hyperty = _this.hypertiesList[index];
          if (hyperty !== undefined) {
            if (hyperty.hypertyURL === url) {
              found = true;
              break;
            }
          }
        }

        if (found === false) {
          reject('Hyperty not found');
        } else {
          delete _this.hypertiesList[index];
          resolve('Hyperty successfully deleted');
        }
      });
    }

    /**
    * To discover protocol stubs available in the runtime for a certain domain. If available, it returns the runtime url for the protocol stub that connects to the requested domain. Required by the runtime BUS to route messages to remote servers or peers (do we need something similar for Hyperties?).
    * @param  {DomainURL}           DomainURL            url
    * @return {RuntimeURL}           RuntimeURL
    */

  }, {
    key: 'discoverProtostub',
    value: function discoverProtostub(url) {
      if (!url) throw new Error('Parameter url needed');
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        if (_this.protostubsList.hasOwnProperty(url)) {
          resolve(_this.protostubsList[url]);
        } else {
          reject('requestUpdate couldn\'t get the ProtostubURL');
        }
      });
    }

    /**
     * To register a new Protocol Stub in the runtime including as input parameters the function to postMessage, the DomainURL that is connected with the stub, which returns the RuntimeURL allocated to the new ProtocolStub.
     * @param {Sandbox}        Sandbox
     * @param  {DomainURL}     DomainURL service provider domain
     * @return {RuntimeProtoStubURL}
     */

  }, {
    key: 'registerStub',
    value: function registerStub(sandbox, domainURL) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var runtimeProtoStubURL = void 0;

        //check if messageBus is registered in registry or not
        if (_this._messageBus === undefined) {
          reject('MessageBus not found on registerStub');
        }

        //TODO implement a unique number for the protostubURL
        if (!domainURL.indexOf('msg-node.')) {
          domainURL = domainURL.substring(domainURL.indexOf('.') + 1);
        }

        runtimeProtoStubURL = 'msg-node.' + domainURL + '/protostub/' + Math.floor(Math.random() * 10000 + 1);

        // TODO: Optimize this
        // Proxy;
        _this.protostubsList[domainURL] = {
          url: runtimeProtoStubURL,
          status: 'in-progress'
        };

        // _this.protostubsList[domainURL] = runtimeProtoStubURL;
        _this.sandboxesList.sandbox[runtimeProtoStubURL] = sandbox;

        // sandbox.addListener('*', function(msg) {
        //   _this._messageBus.postMessage(msg);
        // });

        resolve(runtimeProtoStubURL);

        _this._messageBus.addListener(runtimeProtoStubURL + '/status', function (msg) {
          if (msg.resource === msg.to + '/status') {
            console.log('RuntimeProtostubURL/status message: ', msg.body.value);
          }
        });
      });
    }

    /**
    * To unregister a previously registered protocol stub
    * @param  {HypertyRuntimeURL}   HypertyRuntimeURL     hypertyRuntimeURL
    */

  }, {
    key: 'unregisterStub',
    value: function unregisterStub(hypertyRuntimeURL) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        if (_this.protostubsList.hasOwnProperty(hypertyRuntimeURL)) {
          delete _this.protostubsList[hypertyRuntimeURL];
          resolve('ProtostubURL removed');
        } else {
          reject('Error on unregisterStub: Hyperty not found');
        }
      });
    }

    /**
     * To register a new Identity Provider proxy in the runtime including as input parameters the function to postMessage, the DomainURL that is connected with the stub, which returns the RuntimeURL allocated to the new ProtocolStub.
     * @param {Sandbox}        Sandbox
     * @param  {DomainURL}     DomainURL service provider domain
     * @return {RuntimeIdpProxyURL}
     */

  }, {
    key: 'registerIdpProxy',
    value: function registerIdpProxy(sandbox, domainURL) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var idpProxyStubURL = void 0;

        //check if messageBus is registered in registry or not
        if (_this._messageBus === undefined) {
          reject('MessageBus not found on registerStub');
        }

        idpProxyStubURL = 'domain-idp://' + domainURL + '/stub/' + Math.floor(Math.random() * 10000 + 1);

        // TODO: Optimize this
        _this.idpProxyList[domainURL] = {
          url: idpProxyStubURL,
          status: 'in-progress'
        };

        _this.sandboxesList.sandbox[idpProxyStubURL] = sandbox;

        // sandbox.addListener('*', function(msg) {
        //   _this._messageBus.postMessage(msg);
        // });

        resolve(idpProxyStubURL);

        _this._messageBus.addListener(idpProxyStubURL + '/status', function (msg) {
          if (msg.resource === msg.to + '/status') {
            console.log('idpProxyStubURL/status message: ', msg.body.value);
          }
        });
      });
    }

    /**
    * To discover idpProxy stubs available in the runtime for a certain domain. If available, it returns the runtime url for the idpProxy stub that connects to the requested domain. Required by the runtime BUS to route messages to remote servers or peers
    * @param  {DomainURL}           DomainURL            url
    * @return {RuntimeURL}           RuntimeURL         idpProxyUrl
    */

  }, {
    key: 'discoverIdpProxy',
    value: function discoverIdpProxy(url) {
      if (!url) throw new Error('Parameter url needed');
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        if (_this.idpProxyList.hasOwnProperty(url)) {
          resolve(_this.idpProxyList[url]);
        } else {
          reject('requestUpdate couldn\'t get the idpProxyURL');
        }
      });
    }

    /**
    * To register a new Policy Enforcer in the runtime including as input parameters the function to postMessage, the HypertyURL associated with the PEP, which returns the RuntimeURL allocated to the new Policy Enforcer component.
    * @param  {Message.Message} postMessage postMessage
    * @param  {HypertyURL}          HypertyURL            hyperty
    * @return {HypertyRuntimeURL}   HypertyRuntimeURL
    */

  }, {
    key: 'registerPEP',
    value: function registerPEP(postMessage, hyperty) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        //TODO check what parameter in the postMessage the pep is.
        _this.pepList[hyperty] = postMessage;
        resolve('PEP registered with success');
      });
    }

    /**
    * To unregister a previously registered protocol stub
    * @param  {HypertyRuntimeURL}   HypertyRuntimeURL     HypertyRuntimeURL
    */

  }, {
    key: 'unregisterPEP',
    value: function unregisterPEP(HypertyRuntimeURL) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var result = _this.pepList[HypertyRuntimeURL];

        if (result === undefined) {
          reject('Pep Not found.');
        } else {
          resolve('PEP successfully removed.');
        }
      });
    }

    /**
    * To receive status events from components registered in the Registry.
    * @param  {Message.Message}     Message.Message       event
    */

  }, {
    key: 'onEvent',
    value: function onEvent(event) {
      // TODO body...
      console.log('onEvent');
    }

    /**
    * To discover sandboxes available in the runtime for a certain domain. Required by the runtime UA to avoid more than one sandbox for the same domain.
    * @param  {DomainURL} DomainURL url
    * @return {RuntimeSandbox}           RuntimeSandbox
    */

  }, {
    key: 'getSandbox',
    value: function getSandbox(url) {
      if (!url) throw new Error('Parameter url needed');
      console.log('getSandbox: ', url);

      var _this = this;
      return new _promise2.default(function (resolve, reject) {

        var request = void 0;

        //first try to find the url in the appSandbox list
        request = _this.sandboxesList.appSandbox[url];

        //if no appSandbox was found, try to search in the normal sandboxes list
        if (!request) {
          request = _this.sandboxesList.sandbox[url];

          if (!request) {

            var domain = (0, _utils.divideURL)(url).domain;

            // search in the sandboxes list for a entry containing the domain given
            for (var sandbox in _this.sandboxesList.sandbox) {
              if (sandbox.includes(domain)) {
                request = _this.sandboxesList.sandbox[sandbox];
                break;
              }
            }
          }
        }

        if (!request) {
          reject('no sandbox found for: ' + url);
        } else {
          resolve(request);
        }
      });
    }

    /**
    * To verify if source is valid and to resolve target runtime url address if needed (eg protostub runtime url in case the message is to be dispatched to a remote endpoint).
    * @param  {URL.URL}  url       url
    * @return {Promise<URL.URL>}                 Promise <URL.URL>
    */

  }, {
    key: 'resolve',
    value: function resolve(url) {
      console.log('resolve ' + url);
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        //split the url to find the domainURL. deals with the url for example as:
        //"hyperty-runtime://sp1/protostub/123",
        var dividedURL = (0, _utils.divideURL)(url);
        var domainUrl = dividedURL.domain;
        var type = dividedURL.type;

        // resolve the domain protostub in case of a message to global registry
        if (url.includes('global://registry')) {
          domainUrl = _this._domain;
        }

        if (!domainUrl.indexOf('msg-node.') || !domainUrl.indexOf('registry.')) {
          domainUrl = domainUrl.substring(domainUrl.indexOf('.') + 1);
        }

        var request = void 0;
        if (type === 'domain-idp') {
          request = _this.idpProxyList.hasOwnProperty(domainUrl) ? _this.idpProxyList[domainUrl] : false;
        } else {
          request = _this.protostubsList.hasOwnProperty(domainUrl) ? _this.protostubsList[domainUrl] : false;
        }

        if (request) {
          console.info('Resolved: ', request.url);
          resolve(request.url);
        } else {
          if (type === 'domain-idp') {
            // _this.trigger('runtime:loadIdpProxy', domainUrl);

            _this._loader.loadIdpProxy(domainUrl).then(function (result) {
              request = _this.idpProxyList[domainUrl];
              console.info('Resolved IDPProxy: ', request, result);
              _this.idpProxyList[domainUrl].status = 'deployed';
              resolve(request.url);
            }).catch(function (reason) {
              console.error('Error resolving IDPProxy: ', reason);
              reject(reason);
            });
          } else {
            // _this.trigger('runtime:loadStub', domainUrl);

            _this._loader.loadStub(domainUrl).then(function (result) {
              request = _this.protostubsList[domainUrl];
              console.info('Resolved Protostub: ', request, result);
              _this.protostubsList[domainUrl].status = 'deployed';
              resolve(request.url);
            }).catch(function (reason) {
              console.error('Error resolving Protostub: ', reason);
              reject(reason);
            });
          }
        }
      });
    }
  }, {
    key: 'loader',
    set: function set(loader) {
      var _this = this;
      _this._loader = loader;
    },
    get: function get() {
      var _this = this;
      return _this._loader;
    }

    /**
    * return the messageBus in this Registry
    * @param {MessageBus}           messageBus
    */

  }, {
    key: 'messageBus',
    get: function get() {
      var _this = this;
      return _this._messageBus;
    }

    /**
    * Set the messageBus in this Registry
    * @param {MessageBus}           messageBus
    */
    ,
    set: function set(messageBus) {
      var _this = this;
      _this._messageBus = messageBus;

      _this._messageBus.addListener(_this.registryURL, function (msg) {

        var userUrl = _this._getIdentityAssociated(msg.body.resource, msg.body.criteria);

        var reply = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: { resource: userUrl } };
        reply.body.code = userUrl ? 200 : 404;

        _this._messageBus.postMessage(reply);
      });

      // also set up messageBus in the IdentityModule component
      // TODO redefine a better way to add the messageBus in the IdModule
      _this.idModule.messageBus = messageBus;

      // Install AddressAllocation
      var addressAllocation = new _AddressAllocation2.default(_this.registryURL, messageBus);
      _this.addressAllocation = addressAllocation;

      //Install ObjectAllocation
      var objectAllocation = new _ObjectAllocation2.default(_this.registryURL + '/object-allocation', messageBus);
      _this.objectAllocation = objectAllocation;

      /*let discovery = new Discovery(_this.registryURL, messageBus);
      _this.discovery = discovery;
       let identityManager = new IdentityManager('hyperty://localhost/833a6e52-515b-498b-a57b-e3daeece48d2', _this.runtimeURL, messageBus);
      _this.identityManager = identityManager;*/
    }
  }]);
  return Registry;
}(); /**
     * Copyright 2016 PT Inovação e Sistemas SA
     * Copyright 2016 INESC-ID
     * Copyright 2016 QUOBIS NETWORKS SL
     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
     * Copyright 2016 ORANGE SA
     * Copyright 2016 Deutsche Telekom AG
     * Copyright 2016 Apizee
     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     **/


exports.default = Registry;
module.exports = exports['default'];

},{"../syncher/ObjectAllocation":446,"../utils/utils.js":452,"./AddressAllocation":439,"./HypertyInstance":440,"babel-runtime/core-js/promise":306,"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310,"service-framework/dist/MessageFactory":416}],442:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/
/**
*   @author: Gil Dias (gil.dias@tecnico.ulisboa.pt)
*   Registry Data Model includes all Objects to be handled by the Registry functionality including
*/
var RegistryDataModel = function () {
  function RegistryDataModel(id, url, descriptorURL, startingTime, lastModified, status, stubs, stubsConfiguration) {
    (0, _classCallCheck3.default)(this, RegistryDataModel);

    var _this = this;

    _this._id = id;
    _this._url = url;
    _this._descriptorURL = descriptorURL;
    _this._startingTime = startingTime;
    _this._lastModified = lastModified;
    _this._status = status;
    _this._stubs = stubs;
    _this._stubsConfiguration = stubsConfiguration;
  }

  (0, _createClass3.default)(RegistryDataModel, [{
    key: "id",
    get: function get() {
      var _this = this;
      return _this._id;
    }
  }, {
    key: "url",
    get: function get() {
      var _this = this;
      return _this._url;
    }
  }, {
    key: "descriptor",
    get: function get() {
      var _this = this;
      return _this._descriptorURL;
    }
  }]);
  return RegistryDataModel;
}();

exports.default = RegistryDataModel;
module.exports = exports["default"];

},{"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310}],443:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Descriptors = function () {
  function Descriptors(runtimeURL, catalogue, runtimeConfiguration) {
    (0, _classCallCheck3.default)(this, Descriptors);

    if (!runtimeURL) throw Error('The descriptor know the runtime url to be used');
    if (!catalogue) throw Error('The descriptor needs the catalogue instance');
    if (!runtimeConfiguration) throw Error('The descriptor needs the runtime configuration');

    this.runtimeConfiguration = runtimeConfiguration;
    this.runtimeURL = runtimeURL;
    this.catalogue = catalogue;
  }

  (0, _createClass3.default)(Descriptors, [{
    key: 'getHypertyDescriptor',
    value: function getHypertyDescriptor(hypertyURL) {
      var dividedURL = (0, _utils.divideURL)(hypertyURL);
      var type = dividedURL.type;
      var domain = dividedURL.domain;
      var hyperty = dividedURL.identity;

      var prefix = (0, _utils.getPrefix)(this.runtimeConfiguration, 'cataloguePrefix');

      console.log(type, domain, hyperty);

      hypertyURL = type + '://' + prefix + domain + hyperty;

      return this.catalogue.getHypertyDescriptor(hypertyURL);
    }
  }, {
    key: 'getStubDescriptor',
    value: function getStubDescriptor(stubURL) {
      var dividedURL = (0, _utils.divideURL)(stubURL);
      var type = dividedURL.type;
      var domain = dividedURL.domain;
      var protostub = dividedURL.identity;

      if (!protostub) {
        protostub = 'default';
      } else {
        protostub = protostub.substring(protostub.lastIndexOf('/') + 1);
      }

      var prefix = (0, _utils.getPrefix)(this.runtimeConfiguration, 'cataloguePrefix');

      stubURL = type + '://' + prefix + domain + '/.well-known/protocolstub/' + protostub;

      return this.catalogue.getStubDescriptor(stubURL);
    }
  }, {
    key: 'getIdpProxyDescriptor',
    value: function getIdpProxyDescriptor(idpProxyURL) {
      var _this = this;

      console.log('IDP ProxyURL: ', idpProxyURL);

      return new _promise2.default(function (resolve, reject) {

        var dividedURL = (0, _utils.divideURL)(idpProxyURL);
        var type = dividedURL.type;
        var domain = dividedURL.domain;
        var idpproxy = dividedURL.identity;

        var originDividedURL = (0, _utils.divideURL)(_this.runtimeURL);
        var originDomain = originDividedURL.domain;

        if (!domain) {
          domain = idpProxyURL;
        }

        if (domain === originDomain || !idpproxy) {
          idpproxy = 'default';
        } else {
          idpproxy = idpproxy.substring(idpproxy.lastIndexOf('/') + 1);
        }

        var prefix = (0, _utils.getPrefix)(_this.runtimeConfiguration, 'cataloguePrefix');

        idpProxyURL = type + '://' + prefix + domain + '/.well-known/idp-proxy/' + idpproxy;

        return _this.catalogue.getIdpProxyDescriptor(idpProxyURL).then(function (result) {

          // console.log('result: ', result);
          resolve(result);
        }).catch(function () {

          idpproxy = domain;
          domain = originDomain;

          // console.log('Get an specific protostub for domain', domain, ' specific for: ', idpproxy);
          idpProxyURL = type + '://' + prefix + domain + '/.well-known/idp-proxy/' + idpproxy;

          return _this.catalogue.getIdpProxyDescriptor(idpProxyURL);
        }).then(function (result) {
          resolve(result);
        }).catch(function (reason) {
          reject(reason);
        });
      });
    }
  }]);
  return Descriptors;
}();

exports.default = Descriptors;
module.exports = exports['default'];

},{"../utils/utils":452,"babel-runtime/core-js/promise":306,"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310}],444:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

var _Descriptors = require('./Descriptors');

var _Descriptors2 = _interopRequireDefault(_Descriptors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Loader = function () {
  function Loader(runtimeConfiguration) {
    (0, _classCallCheck3.default)(this, Loader);

    if (!runtimeConfiguration) throw Error('The descriptor need to know the runtime configuration');
    this.runtimeConfiguration = runtimeConfiguration;
  }

  /**
   * Set runtime url
   * @param  {string} value runtimeURL
   */


  (0, _createClass3.default)(Loader, [{
    key: 'loadHyperty',


    /**
    * Deploy Hyperty from Catalogue URL
    * @param  {URL.HypertyCatalogueURL}    hyperty hypertyDescriptor url;
    */
    value: function loadHyperty(hypertyDescriptorURL) {
      var _this = this;

      if (!this._readyToUse()) return false;
      if (!hypertyDescriptorURL) throw new Error('Hyperty descriptor url parameter is needed');

      return new _promise2.default(function (resolve, reject) {

        var _hypertyURL = void 0;
        var _hypertySandbox = void 0;
        var _hypertyDescriptor = void 0;
        var _hypertySourcePackage = void 0;
        var haveError = false;

        var errorReason = function errorReason(reason) {
          console.error('Something failed on the deploy hyperty: ', reason);
          reject(reason);
        };

        var handleError = function handleError(reason) {
          haveError = true;
          reject(reason);
        };

        // Get Hyperty descriptor
        // TODO: the request Module should be changed,
        // because at this moment it is incompatible with nodejs;
        // Probably we need to pass a factory like we do for sandboxes;
        console.info('------------------ Hyperty ------------------------');
        console.info('Get hyperty descriptor for :', hypertyDescriptorURL);
        return _this.descriptors.getHypertyDescriptor(hypertyDescriptorURL).then(function (hypertyDescriptor) {
          // at this point, we have completed "step 2 and 3" as shown in https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md
          console.info('1: return hyperty descriptor');

          // hyperty contains the full path of the catalogue URL, e.g.
          // catalogue.rethink.eu/.well-known/..........
          _hypertyDescriptor = hypertyDescriptor;

          var sourcePackageURL = hypertyDescriptor.sourcePackageURL;

          if (sourcePackageURL === '/sourcePackage') {
            return hypertyDescriptor.sourcePackage;
          }

          // Get the hyperty source code
          return _this.runtimeCatalogue.getSourcePackageFromURL(sourcePackageURL);
        }, handleError).then(function (sourcePackage) {
          if (haveError) return false;

          console.info('2: return hyperty source code');

          // at this point, we have completed "step 4 and 5" as shown in https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md

          _hypertySourcePackage = sourcePackage;

          //
          // steps 6 -- 9 are skipped.
          // TODO: on release of core 0.2;
          // TODO: Promise to check the policy engine

          // mock-up code;
          // temporary code, only
          var policy = true;

          return policy;
        }, handleError).then(function (policyResult) {
          if (haveError) return false;
          console.info('3: return policy engine result' + policyResult);

          // we have completed step 6 to 9 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.
          //
          // Steps 6 -- 9
          // As a result of the sipped steps, we know at this point if we execute
          // inSameSandbox or not.
          //

          // For testing, just assume we execute in same Sandbox.
          var inSameSandbox = true;
          var sandbox = void 0;

          if (inSameSandbox) {

            // this don't need be a Promise;
            sandbox = _this.registry.getAppSandbox();

            // we have completed step 11 here.
          } else {

            var domain = (0, _utils.divideURL)(hypertyDescriptorURL).domain;

            // getSandbox, this will return a promise;
            sandbox = _this.registry.getSandbox(domain);
          }

          // this will return the sandbox or one promise to getSandbox;
          return sandbox;
        }, handleError).then(function (sandbox) {
          if (haveError) return false;
          console.info('4: return the sandbox', sandbox);

          // Return the sandbox indepentely if it running in the same sandbox or not
          // we have completed step 14 here.
          return sandbox;
        }, function (reason) {
          if (haveError) return false;
          console.error('4.1: Try to register a new sandbox');

          // check if the sandbox is registed for this hyperty descriptor url;
          // Make Steps xxx --- xxx
          // Instantiate the Sandbox
          var sandbox = _this._runtimeFactory.createSandbox();

          sandbox.addListener('*', function (msg) {
            _this.messageBus.postMessage(msg);
          });

          return sandbox;
        }, handleError).then(function (sandbox) {
          if (haveError) return false;
          console.info('5: return sandbox and register');

          _hypertySandbox = sandbox;

          // Register hyperty
          return _this.registry.registerHyperty(sandbox, hypertyDescriptorURL, _hypertyDescriptor);
        }, handleError).then(function (hypertyURL) {
          if (haveError) return false;
          console.info('6: Hyperty url, after register hyperty', hypertyURL);

          // we have completed step 16 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.
          _hypertyURL = hypertyURL;

          // Extend original hyperty configuration;
          var configuration = {};
          if (!(0, _utils.emptyObject)(_hypertyDescriptor.configuration)) {
            try {
              configuration = (0, _assign2.default)({}, JSON.parse(_hypertyDescriptor.configuration));
            } catch (e) {
              configuration = _hypertyDescriptor.configuration;
            }
          }
          configuration.runtimeURL = _this._runtimeURL;

          // We will deploy the component - step 17 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.

          try {
            return _hypertySandbox.deployComponent(_hypertySourcePackage.sourceCode, _hypertyURL, configuration);
          } catch (e) {
            console.error('Error on deploy component:', e);
            reject(e);
          }
        }, handleError).then(function (deployComponentStatus) {
          if (haveError) return false;
          console.info('7: Deploy component status for hyperty: ', deployComponentStatus);

          // we have completed step 19 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.

          // Add the message bus listener to the appSandbox or hypertSandbox;
          _this.messageBus.addListener(_hypertyURL, function (msg) {
            _hypertySandbox.postMessage(msg);
          });

          // we have completed step 20 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.
          var hyperty = {
            runtimeHypertyURL: _hypertyURL,
            status: deployComponentStatus
          };

          resolve(hyperty);

          // we have completed step 21 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.
          console.info('------------------ END ------------------------');
        }, handleError).catch(errorReason);
      });
    }

    /**
    * Deploy Stub from Catalogue URL or domain url
    * @param  {URL.URL}     domain          domain
    */

  }, {
    key: 'loadStub',
    value: function loadStub(protostubURL) {
      var _this2 = this;

      if (!this._readyToUse()) return false;
      if (!protostubURL) throw new Error('ProtoStub descriptor url parameter is needed');

      return new _promise2.default(function (resolve, reject) {

        var domain = (0, _utils.divideURL)(protostubURL).domain;

        if (!domain) {
          domain = protostubURL;
        }

        var _stubSandbox = void 0;
        var _stubDescriptor = void 0;
        var _runtimeProtoStubURL = void 0;
        var _stubSourcePackage = void 0;
        var haveError = false;

        var errorReason = function errorReason(reason) {
          console.error('Something failed on the deploy of protocolstub: ', reason);
          reject(reason);
        };

        var handleError = function handleError(reason) {
          haveError = true;
          reject(reason);
        };

        // Discover Protocol Stub
        console.info('------------------- ProtoStub ---------------------------\n');
        console.info('Discover or Create a new ProtoStub for domain: ', domain);
        _this2.registry.discoverProtostub(domain).then(function (runtimeProtoStubURL) {
          // Is registed?
          console.info('1. Proto Stub Discovered for ', domain, ': ', runtimeProtoStubURL);

          // we have completed step 2 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

          // TODO: Check if the status is saved in the status of sandbox;
          // let stub = {
          //   runtimeProtoStubURL: runtimeProtoStubURL,
          //   status: 'deployed'
          // };
          var stub = _this2.registry.protostubsList[domain];
          resolve(stub);
          console.info('------------------- END ---------------------------\n');
        }).catch(function (reason) {

          // is not registed?
          console.info('1. Proto Stub not found ' + reason);

          // we have completed step 3 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

          // we need to get ProtoStub descriptor step 4 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
          _this2.descriptors.getStubDescriptor(protostubURL).then(function (stubDescriptor) {
            if (haveError) return false;
            console.info('2. return the ProtoStub descriptor');

            // we have completed step 5 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            _stubDescriptor = stubDescriptor;

            var sourcePackageURL = stubDescriptor.sourcePackageURL;

            if (sourcePackageURL === '/sourcePackage') {
              return stubDescriptor.sourcePackage;
            }

            // we need to get ProtoStub Source code from descriptor - step 6 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            return _this2.runtimeCatalogue.getSourcePackageFromURL(sourcePackageURL);
          }, handleError).catch(errorReason).then(function (stubSourcePackage) {
            if (haveError) return false;
            console.info('3. return the ProtoStub Source Code');

            // we have completed step 7 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

            _stubSourcePackage = stubSourcePackage;

            // TODO: Check on PEP (policy Engine) if we need the sandbox and check if the Sandbox Factory have the context sandbox;
            var policy = true;
            return policy;
          }, handleError).then(function (policy) {
            if (haveError) return false;

            // this will return the sandbox or one promise to getSandbox;
            return _this2.registry.getSandbox(domain);
          }).then(function (stubSandbox) {
            if (haveError) return false;
            console.info('4. if the sandbox is registered then return the sandbox ', stubSandbox);

            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

            _stubSandbox = stubSandbox;
            return stubSandbox;
          }).catch(function (reason) {
            if (haveError) return false;
            console.info('5. Sandbox was not found, creating a new one ', reason);

            // check if the sandbox is registed for this stub descriptor url;
            // Make Steps xxx --- xxx
            // Instantiate the Sandbox
            var sandbox = _this2._runtimeFactory.createSandbox();
            sandbox.addListener('*', function (msg) {
              _this2.messageBus.postMessage(msg);
            });

            return sandbox;
          }).then(function (sandbox) {
            if (haveError) return false;
            console.info('6. return the sandbox instance and register', sandbox, 'to domain ', domain);

            _stubSandbox = sandbox;

            // we need register stub on registry - step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            return _this2.registry.registerStub(_stubSandbox, domain);
          }, handleError).then(function (runtimeProtoStubURL) {
            if (haveError) return false;
            console.info('7. return the runtime protostub url: ', runtimeProtoStubURL);

            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

            _runtimeProtoStubURL = runtimeProtoStubURL;

            // Extend original hyperty configuration;
            var configuration = {};
            if (!(0, _utils.emptyObject)(_stubDescriptor.configuration)) {
              try {
                configuration = (0, _assign2.default)({}, JSON.parse(_stubDescriptor.configuration));
              } catch (e) {
                configuration = _stubDescriptor.configuration;
              }
            }

            configuration.runtimeURL = _this2._runtimeURL;

            // Deploy Component step xxx
            try {
              return _stubSandbox.deployComponent(_stubSourcePackage.sourceCode, runtimeProtoStubURL, configuration);
            } catch (e) {
              console.error('Error on deploy component:', e);
              reject(e);
            }
          }, handleError).then(function (deployComponentStatus) {
            if (haveError) return false;
            console.info('8: return deploy component for sandbox status: ', deployComponentStatus);

            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

            // Add the message bus listener
            _this2.messageBus.addListener(_runtimeProtoStubURL, function (msg) {
              _stubSandbox.postMessage(msg);
            });

            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            var stub = _this2.registry.protostubsList[domain];

            // // Load Stub function resolved with success;
            // let stub = {
            //   runtimeProtoStubURL: _runtimeProtoStubURL,
            //   status: deployComponentStatus
            // };

            console.log('Deployed: ', stub, domain, _this2.registry.protostubsList);

            resolve(stub);
            console.info('------------------- END ---------------------------\n');
          }, handleError).catch(errorReason);
        });
      });
    }

    /**
    * Deploy idpProxy from Catalogue URL or domain url
    * @param  {URL.URL}     domain          domain
    */

  }, {
    key: 'loadIdpProxy',
    value: function loadIdpProxy(idpProxyURL) {
      var _this3 = this;

      if (!this._readyToUse()) return false;
      if (!idpProxyURL) throw new Error('IdpProxy descriptor url parameter is needed');

      return new _promise2.default(function (resolve, reject) {

        var domain = (0, _utils.divideURL)(idpProxyURL).domain;

        if (!domain) {
          domain = idpProxyURL;
        }

        var _proxySandbox = void 0;
        var _proxyDescriptor = void 0;
        var _runtimeIdpProxyURL = void 0;
        var _proxySourcePackage = void 0;
        var haveError = false;

        var errorReason = function errorReason(reason) {
          console.error('Something failed on the deploy of IdpProxy: ', reason);
          reject(reason);
        };

        var handleError = function handleError(reason) {
          haveError = true;
          reject(reason);
        };

        // Discover IDPProxy
        console.info('------------------- IDP Proxy Deploy ---------------------------\n');
        console.info('Discover or Create a new IdpProxy for domain/URL: ', domain);
        return _this3.registry.discoverIdpProxy(domain).then(function (runtimeIdpProxyURL) {
          // Is registed?
          console.info('1. IDPProxy Discovered: ', runtimeIdpProxyURL);

          // we have completed step 2 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

          var idpProxy = _this3.registry.idpProxyList[domain];
          console.log('Deployed: ', idpProxy);

          resolve(idpProxy);
          console.info('------------------- END ---------------------------\n');
        }).catch(function (reason) {

          // is not registed?
          console.info('1. IdpProxy not found:', reason);

          // we have completed step 3 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

          // we need to get ProtoStub descriptor step 4 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
          _this3.descriptors.getIdpProxyDescriptor(idpProxyURL).then(function (proxyDescriptor) {

            console.info('2. Return the IDPProxy descriptor');

            // we have completed step 5 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            _proxyDescriptor = proxyDescriptor;

            var sourcePackageURL = proxyDescriptor.sourcePackageURL;

            if (sourcePackageURL === '/sourcePackage') {
              return proxyDescriptor.sourcePackage;
            }

            // we need to get ProtoStub Source code from descriptor - step 6 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            return _this3.runtimeCatalogue.getSourcePackageFromURL(sourcePackageURL);
          }, handleError).then(function (sourcePackage) {
            if (haveError) return false;
            console.info('3. return the IDPProxy source package');

            // we have completed step 7 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

            _proxySourcePackage = sourcePackage;

            // TODO: Check on PEP (policy Engine) if we need the sandbox and check if the Sandbox Factory have the context sandbox;
            var policy = true;
            return policy;
          }, handleError).then(function (policy) {
            if (haveError) return false;

            // this will return the sandbox or one promise to getSandbox;
            return _this3.registry.getSandbox(domain);
          }).then(function (proxySandbox) {
            if (haveError) return false;
            console.info('4. if the sandbox is registered then return the sandbox', proxySandbox);

            _proxySandbox = proxySandbox;
            return proxySandbox;
          }).catch(function (reason) {
            if (haveError) return false;
            console.info('5. Sandbox was not found, creating a new one', reason);

            // check if the sandbox is registed for this proxy descriptor url;
            // Make Steps xxx --- xxx
            // Instantiate the Sandbox
            var sandbox = _this3._runtimeFactory.createSandbox();
            sandbox.addListener('*', function (msg) {
              _this3.messageBus.postMessage(msg);
            });

            return sandbox;
          }).then(function (sandbox) {
            if (haveError) return false;
            console.info('6. return the sandbox instance and register', sandbox, 'to domain ', domain);

            _proxySandbox = sandbox;

            // we need register stub on registry - step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            return _this3.registry.registerIdpProxy(sandbox, domain);
          }, handleError).then(function (runtimeIdpProxyURL) {
            if (haveError) return false;
            console.info('7. Return the runtime Idp Proxy URL: ', runtimeIdpProxyURL);

            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

            _runtimeIdpProxyURL = runtimeIdpProxyURL;

            // Extend original hyperty configuration;
            var configuration = {};
            if (!(0, _utils.emptyObject)(_proxyDescriptor.configuration)) {
              try {
                configuration = (0, _assign2.default)({}, JSON.parse(_proxyDescriptor.configuration));
              } catch (e) {
                configuration = _proxyDescriptor.configuration;
              }
            }
            configuration.runtimeURL = _this3._runtimeURL;

            // Deploy Component step xxx
            try {
              return _proxySandbox.deployComponent(_proxySourcePackage.sourceCode, runtimeIdpProxyURL, configuration);
            } catch (e) {
              console.error('Error on deploy component:', e);
              reject(e);
            }
          }, handleError).then(function (deployComponentStatus) {
            if (haveError) return false;
            console.info('8: return deploy component for sandbox status: ', deployComponentStatus);

            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

            // Add the message bus listener
            _this3.messageBus.addListener(_runtimeIdpProxyURL, function (msg) {
              _proxySandbox.postMessage(msg);
            });

            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

            // Load Stub function resolved with success;
            // let idpProxy = {
            //   runtimeIdpProxyURL: _runtimeIdpProxyURL,
            //   status: deployComponentStatus
            // };

            _this3.registry.idpProxyList[domain].status = 'deployed';
            var idpProxy = _this3.registry.idpProxyList[domain];

            console.log('Deployed: ', idpProxy);

            resolve(idpProxy);
            console.info('------------------- END ---------------------------\n');
          }, handleError).catch(errorReason);
        });
      });
    }

    // Check if the loader is ready to load all components

  }, {
    key: '_readyToUse',
    value: function _readyToUse() {

      var status = false;

      if (!this._runtimeURL) throw new Error('The loader need the runtime url address');
      if (!this._messagesBus) throw new Error('The loader need the messageBus component');
      if (!this._runtimeCatalogue) throw new Error('The loader need the runtimeCatalogue component');
      if (!this._registry) throw new Error('The loader need the registry component');
      if (!this._runtimeFactory) throw new Error('The loader need the runtime factory component');

      status = true;
      return status;
    }
  }, {
    key: 'runtimeURL',
    set: function set(value) {
      this._runtimeURL = value;
    }

    /**
     * Get runtime url
     * @return {string} value runtimeURL
     */
    ,
    get: function get() {
      return this._runtimeURL;
    }

    /**
     * Set Registry component
     * @param  {Registry} value Registry Component
     */

  }, {
    key: 'registry',
    set: function set(value) {
      this._registry = value;
    }

    /**
     * Get Registry component
     * @return {Registry} Registry component
     */
    ,
    get: function get() {
      return this._registry;
    }

    /**
     * Set Runtime Catalogue Component
     * @param  {RuntimeCatalogue} value runtime catalogue component
     */

  }, {
    key: 'runtimeCatalogue',
    set: function set(value) {
      this._runtimeCatalogue = value;

      this.descriptors = new _Descriptors2.default(this._runtimeURL, value, this.runtimeConfiguration);
    }

    /**
     * Get Runtime Catalogue component
     * @return {RuntimeCatalogue} Runtime Catalogue component
     */
    ,
    get: function get() {
      return this._runtimeCatalogue;
    }

    /**
     * Set Message Bus component
     * @param  {MessageBus} value Message bus component
     */

  }, {
    key: 'messageBus',
    set: function set(value) {
      this._messagesBus = value;
    }

    /**
     * Get Message Bus component
     * @return {MessageBus} Message Bus component
     */
    ,
    get: function get() {
      return this._messagesBus;
    }

    /**
     * Set Runtime Factory component
     * @param  {runtimeFactory} value Factory includes the specific implementations for each environment
     */

  }, {
    key: 'runtimeFactory',
    set: function set(value) {
      this._runtimeFactory = value;
    }

    /**
     * Get Runtime Factory component
     * @return {runtimeFactory} Runtime Factory component
     */
    ,
    get: function get() {
      return this._runtimeFactory;
    }
  }]);
  return Loader;
}();

exports.default = Loader;
module.exports = exports['default'];

},{"../utils/utils":452,"./Descriptors":443,"babel-runtime/core-js/object/assign":298,"babel-runtime/core-js/promise":306,"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310}],445:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

require('babel-polyfill');

var _Registry = require('../registry/Registry');

var _Registry2 = _interopRequireDefault(_Registry);

var _IdentityModule = require('../identity/IdentityModule');

var _IdentityModule2 = _interopRequireDefault(_IdentityModule);

var _PolicyEngine = require('../policy/PolicyEngine');

var _PolicyEngine2 = _interopRequireDefault(_PolicyEngine);

var _MessageBus = require('../bus/MessageBus');

var _MessageBus2 = _interopRequireDefault(_MessageBus);

var _Loader = require('./Loader');

var _Loader2 = _interopRequireDefault(_Loader);

var _SyncherManager = require('../syncher/SyncherManager');

var _SyncherManager2 = _interopRequireDefault(_SyncherManager);

var _RuntimeCoreCtx = require('../policy/context/RuntimeCoreCtx');

var _RuntimeCoreCtx2 = _interopRequireDefault(_RuntimeCoreCtx);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Runtime User Agent Interface will process all the dependecies of the core runtime;
 * @author Vitor Silva [vitor-t-silva@telecom.pt]
 * @version 0.4.0
 *
 * @property {runtimeFactory} runtimeFactory - Specific implementation for all environments;
 * @property {RuntimeCatalogue} runtimeCatalogue - Catalogue of components can be installed;
 * @property {runtimeURL} runtimeURL - This identify the core runtime, should be unique;
 * @property {IdentityModule} identityModule - Identity Module;
 * @property {PolicyEngine} policyEngine - Policy Engine Module;
 * @property {Registry} registry - Registry Module;
 * @property {MessageBus} messageBus - Message Bus is used like a router to redirect the messages from one component to other(s)
 * @property {GraphConnector} graphConnector - Graph Connector handling GUID and contacts
 */


// import GraphConnector from '../graphconnector/GraphConnector';

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

var RuntimeUA = function () {

  /**
   * Create a new instance of Runtime User Agent
   * @param {runtimeFactory} runtimeFactory - Specific implementation for the environment where the core runtime will run;
   * @param {domain} domainURL - specify the domain base for the runtime;
   */
  function RuntimeUA(runtimeFactory, domain) {
    (0, _classCallCheck3.default)(this, RuntimeUA);


    if (!runtimeFactory) throw new Error('The sandbox factory is a needed parameter');
    if (!domain) throw new Error('You need the domain of runtime');

    var _this = this;

    // Configuration object with information related with servers
    _this.runtimeConfiguration = {
      domain: domain,
      cataloguePrefix: 'catalogue',
      registryPrefix: 'registry',
      msgNodePrefix: 'mgs-node'
    };

    _this.runtimeFactory = runtimeFactory;
    _this.runtimeCatalogue = runtimeFactory.createRuntimeCatalogue();
    _this.persistenceManager = runtimeFactory.persistenceManager();

    // Prepare the loader to load the hyperties, protostubs and idpproxy;
    _this.loader = new _Loader2.default(_this.runtimeConfiguration);

    // TODO: post and return registry/hypertyRuntimeInstance to and from Back-end Service
    // the response is like: runtime://sp1/123

    var runtimeURL = 'runtime://' + domain + '/' + Math.floor(Math.random() * 10000 + 1);
    _this.runtimeURL = runtimeURL;
    _this.domain = domain;

    // TODO: check if runtime catalogue need the runtimeURL;
    _this.runtimeCatalogue.runtimeURL = runtimeURL;

    // Instantiate the identity Module
    _this.identityModule = new _IdentityModule2.default(runtimeURL);

    // Use the sandbox factory to create an AppSandbox;
    // In the future can be decided by policyEngine if we need
    // create a AppSandbox or not;
    var appSandbox = runtimeFactory.createAppSandbox();

    // Instantiate the Registry Module
    _this.registry = new _Registry2.default(runtimeURL, appSandbox, _this.identityModule, _this.runtimeCatalogue);

    // Set the loader to load Hyperties, Stubs and IdpProxies
    _this.registry.loader = _this.loader;

    // Instantiate the Message Bus
    _this.messageBus = new _MessageBus2.default(_this.registry);

    // Instantiate the Policy Engine
    _this.policyEngine = new _PolicyEngine2.default(new _RuntimeCoreCtx2.default(_this.identityModule, _this.registry, _this.persistenceManager));

    _this.messageBus.pipeline.handlers = [

    // Policy message authorise
    function (ctx) {
      _this.policyEngine.authorise(ctx.msg).then(function (changedMgs) {
        ctx.msg = changedMgs;
        ctx.next();
      }).catch(function (reason) {
        console.error(reason);
        ctx.fail(reason);
      });
    }];

    // Add to App Sandbox the listener;
    appSandbox.addListener('*', function (msg) {
      _this.messageBus.postMessage(msg);
    });

    // Register messageBus on Registry
    _this.registry.messageBus = _this.messageBus;

    // Register registry on IdentityModule
    _this.identityModule.registry = _this.registry;

    // Use sandbox factory to use specific methods
    // and set the message bus to the factory
    runtimeFactory.messageBus = _this.messageBus;

    // Instanciate the SyncherManager;
    _this.syncherManager = new _SyncherManager2.default(_this.runtimeURL, _this.messageBus, _this.registry, _this.runtimeCatalogue);

    // Set into loader the needed components;
    _this.loader.registry = _this.registry;
    _this.loader.runtimeURL = _this.runtimeURL;
    _this.loader.messageBus = _this.messageBus;
    _this.loader.runtimeCatalogue = _this.runtimeCatalogue;
    _this.loader.runtimeFactory = _this.runtimeFactory;

    // Instantiate the Graph Connector
    // _this.graphConnector = new GraphConnector(_this.runtimeURL, _this.messageBus);
  }

  /**
  * Accomodate interoperability in H2H and proto on the fly for newly discovered devices in M2M
  * @param  {CatalogueDataObject.HypertyDescriptor}   descriptor    descriptor
  */


  (0, _createClass3.default)(RuntimeUA, [{
    key: 'discoverHiperty',
    value: function discoverHiperty(descriptor) {}
    // Body...


    /**
    * Register Hyperty deployed by the App that is passed as input parameter. To be used when App and Hyperties are from the same domain otherwise the RuntimeUA will raise an exception and the App has to use the loadHyperty(..) function.
    * @param  {Object} Object                   hypertyInstance
    * @param  {URL.HypertyCatalogueURL}         descriptor      descriptor
    */

  }, {
    key: 'registerHyperty',
    value: function registerHyperty(hypertyInstance, descriptor) {}
    // Body...


    /**
    * Deploy Hyperty from Catalogue URL
    * @param  {URL.HypertyCatalogueURL}    hyperty hypertyDescriptor url;
    */

  }, {
    key: 'loadHyperty',
    value: function loadHyperty(hypertyDescriptorURL) {
      var _this2 = this;

      if (!hypertyDescriptorURL) throw new Error('Hyperty descriptor url parameter is needed');

      return new _promise2.default(function (resolve, reject) {

        _this2.loader.loadHyperty(hypertyDescriptorURL).then(function (result) {
          resolve(result);
        }).catch(function (reason) {
          reject(reason);
        });
      });
    }

    /**
    * Deploy Stub from Catalogue URL or domain url
    * @param  {URL.URL}     domain          domain
    */

  }, {
    key: 'loadStub',
    value: function loadStub(protostubURL) {
      var _this3 = this;

      if (!protostubURL) throw new Error('ProtoStub descriptor url parameter is needed');

      return new _promise2.default(function (resolve, reject) {

        _this3.loader.loadStub(protostubURL).then(function (result) {
          resolve(result);
        }).catch(function (reason) {
          reject(reason);
        });
      });
    }

    /**
    * Deploy idpProxy from Catalogue URL or domain url
    * @param  {URL.URL}     domain          domain
    */

  }, {
    key: 'loadIdpProxy',
    value: function loadIdpProxy(idpProxyURL) {
      var _this4 = this;

      if (!idpProxyURL) throw new Error('The IDP Proxy URL is a needed parameter, could be a DOMAIN or a URL');

      return new _promise2.default(function (resolve, reject) {
        _this4.loader.loadIdpProxy(idpProxyURL).then(function (result) {
          resolve(result);
        }).catch(function (reason) {
          reject(reason);
        });
      });
    }

    /**
     * Used to close all the runtime; Unregister all hyperties;
     * @return {Promise<Boolean>} result of the close method, with true or false to the operation success;
     */

  }, {
    key: 'close',
    value: function close() {
      var _this = this;

      console.info('Unregister all hyperties');
      return new _promise2.default(function (resolve, reject) {

        _this.registry.unregisterAllHyperties().then(function (result) {
          console.info('All the hyperties are unregisted with Success:', result);
          resolve(true);
        }).catch(function (reason) {
          console.error('Failed to unregister the hyperties', reason);
          reject(false);
        });
      });
    }

    /**
    * Used to check for updates about components handled in the Catalogue including protocol stubs and Hyperties. check relationship with lifecycle management provided by Service Workers
    * @param  {CatalogueURL}       url url
    */

  }, {
    key: 'checkForUpdate',
    value: function checkForUpdate(url) {
      // Body...
    }
  }]);
  return RuntimeUA;
}();

//Main dependecies


exports.default = RuntimeUA;
module.exports = exports['default'];

},{"../bus/MessageBus":418,"../identity/IdentityModule":423,"../policy/PolicyEngine":429,"../policy/context/RuntimeCoreCtx":437,"../registry/Registry":441,"../syncher/SyncherManager":450,"./Loader":444,"babel-polyfill":1,"babel-runtime/core-js/promise":306,"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310}],446:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/
var ObjectAllocation = function () {
  /* private
  _url: URL
  _bus: MiniBus
  */

  /**
   * Create an Object Allocation
   * @param  {URL.URL}      url - url from who is sending the message
   * @param  {MiniBus}      bus - MiniBus used for address allocation
   */
  function ObjectAllocation(url, bus) {
    (0, _classCallCheck3.default)(this, ObjectAllocation);

    var _this = this;

    _this._url = url;
    _this._bus = bus;
  }

  /**
   * get the URL value
   * @return {string} The url value;
   */


  (0, _createClass3.default)(ObjectAllocation, [{
    key: 'create',


    /**
     * Ask for creation of a number of Object addresses, to the domain message node.
     * @param  {Domain} domain - Domain of the message node.
     * @param  {number} number - Number of addresses to request
     * @returns {Promise<ObjectURL>}  A list of ObjectURL's
     */
    value: function create(domain, scheme, number) {
      var _this = this;

      //FLOW-OUT: message sent to msg-node ObjectAllocationManager component
      var msg = {
        type: 'create', from: _this._url, to: 'domain://msg-node.' + domain + '/object-address-allocation',
        body: { scheme: scheme, value: { number: number } }
      };

      return new _promise2.default(function (resolve, reject) {
        _this._bus.postMessage(msg, function (reply) {
          if (reply.body.code === 200) {
            resolve(reply.body.value.allocated);
          } else {
            reject(reply.body.desc);
          }
        });
      });
    }
  }, {
    key: 'url',
    get: function get() {
      return this._url;
    }
  }]);
  return ObjectAllocation;
}();

exports.default = ObjectAllocation;
module.exports = exports['default'];

},{"babel-runtime/core-js/promise":306,"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310}],447:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

var _Subscription = require('./Subscription');

var _Subscription2 = _interopRequireDefault(_Subscription);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ObserverObject = function () {
  function ObserverObject(parent, url, childrens) {
    (0, _classCallCheck3.default)(this, ObserverObject);

    var _this = this;

    _this._parent = parent;
    _this._url = url;
    _this._childrens = childrens;

    _this._bus = parent._bus;
    _this._subscriptions = {};
  }

  (0, _createClass3.default)(ObserverObject, [{
    key: 'addSubscription',
    value: function addSubscription(hyperty) {
      var _this = this;

      _this._subscriptions[hyperty] = new _Subscription2.default(_this._bus, hyperty, _this._url, _this._childrens, false);
    }
  }, {
    key: 'removeSubscription',
    value: function removeSubscription(hyperty) {
      var _this = this;

      var domain = (0, _utils.divideURL)(hyperty).domain;
      var objURLSubscription = _this._url + '/subscription';

      var subscription = _this._subscriptions[hyperty];
      if (subscription) {
        //FLOW-OUT: message sent to remote ReporterObject -> _onRemoteUnSubscribe
        _this._bus.postMessage({
          type: 'unsubscribe', from: _this._parent._url, to: objURLSubscription,
          body: { resource: _this._url }
        });

        //TODO: should I wait for response before unsubscribe on msg-node
        //FLOW-OUT: message sent to msg-node SubscriptionManager component
        _this._bus.postMessage({
          type: 'unsubscribe', from: _this._parent._url, to: 'domain://msg-node.' + domain + '/sm',
          body: { resource: _this._url, childrenResources: _this._childrens }
        });

        subscription._releaseListeners();
        delete _this._subscriptions[hyperty];
      }
    }
  }]);
  return ObserverObject;
}();

exports.default = ObserverObject;
module.exports = exports['default'];

},{"../utils/utils":452,"./Subscription":449,"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310}],448:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

var _Subscription = require('./Subscription');

var _Subscription2 = _interopRequireDefault(_Subscription);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ReporterObject = function () {
  function ReporterObject(parent, owner, url) {
    (0, _classCallCheck3.default)(this, ReporterObject);

    var _this = this;

    _this._parent = parent;
    _this._owner = owner;
    _this._url = url;

    _this._bus = parent._bus;

    _this._domain = (0, _utils.divideURL)(owner).domain;
    _this._objSubscriptorURL = _this._url + '/subscription';

    _this._subscriptions = {};
    _this._childrens = [];
    _this._childrenListeners = [];

    _this._forwards = {};

    _this._allocateListeners();
  }

  (0, _createClass3.default)(ReporterObject, [{
    key: '_allocateListeners',
    value: function _allocateListeners() {
      var _this = this;

      //add subscription listener...
      _this._subscriptionListener = _this._bus.addListener(_this._objSubscriptorURL, function (msg) {
        console.log(_this._objSubscriptorURL + '-RCV: ', msg);
        switch (msg.type) {
          case 'subscribe':
            _this._onRemoteSubscribe(msg);break;
          case 'unsubscribe':
            _this._onRemoteUnSubscribe(msg);break;
          case 'response':
            _this._onRemoteResponse(msg);break;
        }
      });

      var changeURL = _this._url + '/changes';
      _this._changeListener = _this._bus.addListener(changeURL, function (msg) {
        //TODO: what todo here? Save changes?
        console.log('SyncherManager-' + changeURL + '-RCV: ', msg);
      });
    }
  }, {
    key: '_releaseListeners',
    value: function _releaseListeners() {
      var _this = this;

      _this._subscriptionListener.remove();

      _this._changeListener.remove();

      _this._childrenListeners.forEach(function (cl) {
        cl.remove();
      });

      (0, _keys2.default)(_this._forwards).forEach(function (key) {
        _this.forwardUnSubscribe(key);
      });

      //remove all subscriptions
      (0, _keys2.default)(_this._subscriptions).forEach(function (key) {
        _this._subscriptions[key]._releaseListeners();
      });
    }

    /**
     * Register a listener in the msg-node and in the local MessageBus, so that messages on this address are forwarded to the reporter object
     * @param  {string} address - URL to register the listeners
     * @return {Promise} Return Promise OK or error
     */

  }, {
    key: 'forwardSubscribe',
    value: function forwardSubscribe(addresses) {
      var _this = this;

      //FLOW-OUT: message sent to the msg-node SubscriptionManager component
      var nodeSubscribeMsg = {
        type: 'subscribe', from: _this._parent._url, to: 'domain://msg-node.' + _this._domain + '/sm',
        body: { subscribe: addresses, source: _this._owner }
      };

      return new _promise2.default(function (resolve, reject) {
        _this._bus.postMessage(nodeSubscribeMsg, function (reply) {
          console.log('forward-subscribe-response(reporter): ', reply);
          if (reply.body.code === 200) {
            var newForward = _this._bus.addForward(_this._url, _this._owner);
            _this._forwards[addresses[0]] = newForward;
            resolve();
          } else {
            reject('Error on msg-node subscription: ' + reply.body.desc);
          }
        });
      });
    }

    /**
     * UnRegister a listener in the msg-node and in the local MessageBus, so that messages on this address are removed from forward
     * @param  {string} address - URL to un-register the listeners
     */

  }, {
    key: 'forwardUnSubscribe',
    value: function forwardUnSubscribe(address) {
      var _this = this;

      _this._forwards[address].remove();
      delete _this._forwards[address];

      //FLOW-OUT: message sent to the msg-node SubscriptionManager component
      var nodeUnSubscribeMsg = {
        type: 'unsubscribe', from: _this._parent._url, to: 'domain://msg-node.' + _this._domain + '/sm',
        body: { subscribe: [address], source: _this._owner }
      };

      _this._bus.postMessage(nodeUnSubscribeMsg);
    }

    /**
     * Register listeners for a list of childrens. Public channels used to transmit messages.
     * @param  {string[]} childrens - channels to register
     * @return {Promise} Return Promise OK or error
     */

  }, {
    key: 'addChildrens',
    value: function addChildrens(childrens) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        if (childrens.length === 0) {
          resolve();
          return;
        }

        var childBaseURL = _this._url + '/children/';
        _this._childrens.push(childrens);

        /*
        _this._childrens.forEach((child) => {
          let childId = childBaseURL + child;
           let selfForward = _this._bus.addForward(childId, owner);
          _this._childrenListeners.push(selfForward);
        });*/

        var subscriptions = [];
        childrens.forEach(function (child) {
          return subscriptions.push(childBaseURL + child);
        });

        //FLOW-OUT: message sent to the msg-node SubscriptionManager component
        var nodeSubscribeMsg = {
          type: 'subscribe', from: _this._parent._url, to: 'domain://msg-node.' + _this._domain + '/sm',
          body: { subscribe: subscriptions, source: _this._owner }
        };

        _this._bus.postMessage(nodeSubscribeMsg, function (reply) {
          console.log('node-subscribe-response(reporter): ', reply);
          if (reply.body.code === 200) {

            //add children listeners on local ...
            subscriptions.forEach(function (childURL) {
              var childListener = _this._bus.addListener(childURL, function (msg) {
                //TODO: what todo here? Save childrens?
                console.log('SyncherManager-' + childURL + '-RCV: ', msg);
              });
              _this._childrenListeners.push(childListener);

              var selfForward = _this._bus.addForward(childURL, _this._owner);
              _this._childrenListeners.push(selfForward);
            });

            resolve();
          } else {
            reject('Error on msg-node subscription: ' + reply.body.desc);
          }
        });
      });
    }
  }, {
    key: 'delete',
    value: function _delete() {
      var _this = this;
      var domain = (0, _utils.divideURL)(_this._owner).domain;

      //FLOW-OUT: message sent directly to all subscribers of the reporter
      _this._bus.postMessage({
        type: 'delete', from: _this._objSubscriptorURL, to: _this._url + '/changes'
      });

      //FLOW-OUT: message sent to the msg-node ObjectAllocationManager component
      _this._bus.postMessage({
        type: 'delete', from: _this._parent._url, to: 'domain://msg-node.' + domain + '/object-address-allocation',
        body: { resource: _this._url, childrenResources: _this._childrens }
      });

      _this._releaseListeners();
      delete _this._parent._reporters[_this._url];
    }
  }, {
    key: '_onRemoteResponse',
    value: function _onRemoteResponse(msg) {
      var _this = this;

      _this._bus.postMessage({
        id: msg.id, type: 'response', from: msg.to, to: _this._url,
        body: { code: msg.body.code, identity: msg.body.identity, source: msg.from }
      });
    }

    //FLOW-IN: message received from Syncher -> subscribe

  }, {
    key: '_onRemoteSubscribe',
    value: function _onRemoteSubscribe(msg) {
      var _this = this;
      var hypertyURL = msg.body.subscriber;

      //validate if subscription already exists?
      if (_this._subscriptions[hypertyURL]) {
        var errorMsg = {
          id: msg.id, type: 'response', from: msg.to, to: hypertyURL,
          body: { code: 500, desc: 'Subscription for (' + _this._url + ' : ' + hypertyURL + ') already exists!' }
        };

        _this._bus.postMessage(errorMsg);
        return;
      }

      //ask to subscribe to Syncher? (depends on the operation mode)
      //TODO: get mode from object!
      var mode = 'sub/pub';

      if (mode === 'sub/pub') {
        //FLOW-OUT: message sent to local hyperty address Syncher -> _onForward
        var forwardMsg = {
          type: 'forward', from: _this._url, to: _this._owner,
          body: { type: msg.type, from: hypertyURL, to: _this._url, identity: msg.body.identity }
        };

        _this._bus.postMessage(forwardMsg, function (reply) {
          console.log('forward-reply: ', reply);
          if (reply.body.code === 200) {
            _this._subscriptions[hypertyURL] = new _Subscription2.default(_this._bus, _this._owner, _this._url, _this._childrens, true);
          }

          //FLOW-OUT: subscription response sent (forward from internal Hyperty)
          _this._bus.postMessage({
            id: msg.id, type: 'response', from: msg.to, to: msg.from,
            body: reply.body
          });
        });
      }
    }

    //FLOW-IN: message received from remote ObserverObject -> removeSubscription

  }, {
    key: '_onRemoteUnSubscribe',
    value: function _onRemoteUnSubscribe(msg) {
      var _this = this;
      var hypertyURL = msg.body.subscriber;

      var subscription = _this._subscriptions[hypertyURL];
      if (subscription) {
        subscription._releaseListeners();
        delete _this._subscriptions[hypertyURL];

        //TODO: send un-subscribe message to Syncher? (depends on the operation mode)
      }
    }
  }]);
  return ReporterObject;
}();

exports.default = ReporterObject;
module.exports = exports['default'];

},{"../utils/utils":452,"./Subscription":449,"babel-runtime/core-js/object/keys":304,"babel-runtime/core-js/promise":306,"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310}],449:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Subscription = function () {
  function Subscription(bus, owner, url, childrens, isReporter) {
    (0, _classCallCheck3.default)(this, Subscription);

    var _this = this;
    var childBaseURL = url + '/children/';
    var changeURL = url + '/changes';

    //process delete message
    _this._deleteListener = bus.addListener(changeURL, function (msg) {
      if (msg.type === 'delete') {
        console.log('Subscription-DELETE: ', msg);

        //FLOW-OUT: message sent to all subscribers
        var deleteMessageToHyperty = {
          type: 'delete', from: msg.from, to: owner,
          body: { identity: msg.body.identity, resource: url }
        };

        //send delete to hyperty
        bus.postMessage(deleteMessageToHyperty, function (reply) {
          console.log('Subscription-DELETE-REPLY: ', reply);
          if (reply.body.code === 200) {
            _this._releaseListeners();
          }
        });
      }
    });

    //add change publish address or forward
    if (isReporter) {
      _this._changeListener = bus.addPublish(changeURL);
    } else {
      _this._changeListener = bus.addForward(changeURL, owner);
    }

    _this._childrenListeners = [];
    childrens.forEach(function (child) {
      var childId = childBaseURL + child;

      //add children publish address
      var childrenForward = bus.addPublish(childId);
      _this._childrenListeners.push(childrenForward);

      //add self forward if an observer
      if (!isReporter) {
        var selfForward = bus.addForward(childId, owner);
        _this._childrenListeners.push(selfForward);
      }
    });
  }

  (0, _createClass3.default)(Subscription, [{
    key: '_releaseListeners',
    value: function _releaseListeners() {
      var _this = this;

      _this._deleteListener.remove();

      _this._changeListener.remove();

      _this._childrenListeners.forEach(function (forward) {
        forward.remove();
      });
    }
  }]);
  return Subscription;
}();

exports.default = Subscription;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310}],450:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

var _ObjectAllocation = require('./ObjectAllocation');

var _ObjectAllocation2 = _interopRequireDefault(_ObjectAllocation);

var _ReporterObject = require('./ReporterObject');

var _ReporterObject2 = _interopRequireDefault(_ReporterObject);

var _ObserverObject = require('./ObserverObject');

var _ObserverObject2 = _interopRequireDefault(_ObserverObject);

var _tv = require('../utils/tv4');

var _tv2 = _interopRequireDefault(_tv);

var _MessageFactory = require('service-framework/dist/MessageFactory');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @author micaelpedrosa@gmail.com
 * Core Syncronization system.
 */
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/
var SyncherManager = function () {
  /* private
  _url: URL
  _bus: MiniBus
  _registry: Registry
  _allocator: ObjectAllocation
   _reporters: { ObjectURL: ReporterObject }
  _observers: { ObjectURL: ObserverObject }
  */

  function SyncherManager(runtimeURL, bus, registry, catalog, allocator) {
    (0, _classCallCheck3.default)(this, SyncherManager);

    var _this = this;

    _this._bus = bus;
    _this._registry = registry;
    _this._catalog = catalog;

    //TODO: these should be saved in persistence engine?
    _this._url = runtimeURL + '/sm';
    _this._objectURL = runtimeURL + '/object-allocation';

    _this._reporters = {};
    _this._observers = {};

    //TODO: this should not be hardcoded!
    _this._domain = (0, _utils.divideURL)(runtimeURL).domain;

    _this._mf = new _MessageFactory.MessageFactory(false, {});

    if (allocator) {
      _this._allocator = allocator;
    } else {
      _this._allocator = new _ObjectAllocation2.default(_this._objectURL, bus);
    }

    bus.addListener(_this._url, function (msg) {
      console.log('SyncherManager-RCV: ', msg);
      switch (msg.type) {
        case 'create':
          _this._onCreate(msg);break;
        case 'delete':
          _this._onDelete(msg);break;
        case 'subscribe':
          _this._onLocalSubscribe(msg);break;
        case 'unsubscribe':
          _this._onLocalUnSubscribe(msg);break;
      }
    });
  }

  (0, _createClass3.default)(SyncherManager, [{
    key: '_onCreate',


    //FLOW-IN: message received from Syncher -> create
    value: function _onCreate(msg) {

      var _this = this;
      var owner = msg.from;
      var domain = (0, _utils.divideURL)(msg.from).domain;

      if (msg.body.resource) {
        _this._authorise(msg, msg.body.resource);
        return;
      }

      //get schema from catalogue and parse -> (scheme, children)
      _this._catalog.getDataSchemaDescriptor(msg.body.schema).then(function (descriptor) {

        var properties = descriptor.sourcePackage.sourceCode.properties;
        var scheme = properties.scheme ? properties.scheme.constant : 'resource';
        var childrens = properties.children ? properties.children.constant : [];

        console.log('Scheme: ', scheme);

        // schema validation
        console.log('Running object validation...');
        try {
          var obj = msg.body.value;
          var schema = descriptor.sourcePackage.sourceCode;

          // add support for schema referencing itself
          _tv2.default.addSchema(schema.id, schema);

          // validate
          var result = _tv2.default.validateMultiple(obj, schema);

          // delete error stacks to improve logging
          result.errors.forEach(function (error) {
            delete error.stack;
          });

          // print more details about validation if it fails or schema contains $refs
          if (!result.valid || result.missing.length > 0) {
            console.warn('Object validation ' + (result.valid ? 'succeeded, but schema contained references:' : 'failed:'), (0, _stringify2.default)(result, null, 2));
            console.debug('Object:', (0, _stringify2.default)(obj, null, 2), '\r\nSchema:', (0, _stringify2.default)(schema, null, 2));
          } else {
            console.log('Object validation succeeded');
          }
        } catch (e) {
          console.warn('Error during object validation:', e);
        }

        //request address allocation of a new object from the msg-node
        _this._allocator.create(domain, scheme, 1).then(function (allocated) {
          var objURL = allocated[0];

          console.log('ALLOCATOR CREATE:', allocated);

          var subscriptionURL = objURL + '/subscription';

          console.log('Subscription URL', subscriptionURL);

          //To register the dataObject in the runtimeRegistry
          console.info('Register Object: ', msg.body.value.name, msg.body.value.schema, objURL, msg.body.value.reporter, msg.body.value.resources);
          _this._registry.registerDataObject(msg.body.value.name, msg.body.value.schema, objURL, msg.body.value.reporter, msg.body.value.resources, msg.body.authorise).then(function (resolve) {
            console.log('DataObject successfully registered', resolve);

            //all OK -> create reporter and register listeners
            var reporter = new _ReporterObject2.default(_this, owner, objURL);
            reporter.forwardSubscribe([objURL, subscriptionURL]).then(function () {
              reporter.addChildrens(childrens).then(function () {
                _this._reporters[objURL] = reporter;

                //FLOW-OUT: message response to Syncher -> create
                _this._bus.postMessage({
                  id: msg.id, type: 'response', from: msg.to, to: owner,
                  body: { code: 200, resource: objURL, childrenResources: childrens }
                });

                //send create to all observers, responses will be deliver to the Hyperty owner?
                //schedule for next cycle needed, because the Reporter should be available.
                setTimeout(function () {
                  //will invite other hyperties
                  _this._authorise(msg, objURL);
                });
              });
            });
          }, function (error) {
            console.error(error);
          });
        });
      }).catch(function (reason) {
        //FLOW-OUT: error message response to Syncher -> create
        var responseMsg = {
          id: msg.id, type: 'response', from: msg.to, to: owner,
          body: { code: 500, desc: reason }
        };

        _this._bus.postMessage(responseMsg);
      });
    }
  }, {
    key: '_authorise',
    value: function _authorise(msg, objURL) {
      var _this = this;
      var objSubscriptorURL = objURL + '/subscription';

      msg.body.authorise.forEach(function (hypertyURL) {
        //FLOW-OUT: send invites to list of remote Syncher -> _onRemoteCreate -> onNotification
        _this._bus.postMessage({
          type: 'create', from: objSubscriptorURL, to: hypertyURL,
          body: { identity: msg.body.identity, source: msg.from, value: msg.body.value, schema: msg.body.schema }
        });
      });
    }

    //FLOW-IN: message received from DataObjectReporter -> delete

  }, {
    key: '_onDelete',
    value: function _onDelete(msg) {
      var _this = this;

      var objURL = msg.body.resource;

      var object = _this._reporters[objURL];
      if (object) {
        //TODO: is there any policy verification before delete?
        object.delete();

        //TODO: unregister object?
        _this._bus.postMessage({
          id: msg.id, type: 'response', from: msg.to, to: msg.from,
          body: { code: 200 }
        });
      }
    }

    //FLOW-IN: message received from local Syncher -> subscribe

  }, {
    key: '_onLocalSubscribe',
    value: function _onLocalSubscribe(msg) {
      var _this2 = this;

      var _this = this;

      var hypertyURL = msg.from;
      var objURL = msg.body.resource;
      var objURLSubscription = objURL + '/subscription';
      var childBaseURL = objURL + '/children/';

      var domain = (0, _utils.divideURL)(objURL).domain;

      //get schema from catalogue and parse -> (children)
      _this._catalog.getDataSchemaDescriptor(msg.body.schema).then(function (descriptor) {
        var properties = descriptor.sourcePackage.sourceCode.properties;
        var childrens = properties.children ? properties.children.constant : [];

        //children addresses
        var subscriptions = [];
        subscriptions.push(objURL + '/changes');
        childrens.forEach(function (child) {
          return subscriptions.push(childBaseURL + child);
        });

        //FLOW-OUT: subscribe message to the msg-node, registering listeners on the broker
        var nodeSubscribeMsg = {
          type: 'subscribe', from: _this._url, to: 'domain://msg-node.' + domain + '/sm',
          body: { identity: msg.body.identity, subscribe: subscriptions, source: hypertyURL }
        };

        //subscribe in msg-node
        _this._bus.postMessage(nodeSubscribeMsg, function (reply) {
          console.log('node-subscribe-response(observer): ', reply);
          if (reply.body.code === 200) {

            //FLOW-OUT: reply with provisional response
            _this._bus.postMessage({
              id: msg.id, type: 'response', from: msg.to, to: hypertyURL,
              body: { code: 100, childrenResources: childrens }
            });

            //FLOW-OUT: subscribe message to remote ReporterObject -> _onRemoteSubscribe
            var objSubscribeMsg = {
              type: 'subscribe', from: _this._url, to: objURLSubscription,
              body: { identity: nodeSubscribeMsg.body.identity, subscriber: hypertyURL }
            };

            //subscribe to reporter SM
            _this._bus.postMessage(objSubscribeMsg, function (reply) {
              console.log('reporter-subscribe-response: ', reply);
              if (reply.body.code === 200) {

                var observer = _this._observers[objURL];
                if (!observer) {
                  observer = new _ObserverObject2.default(_this, objURL, childrens);
                  _this._observers[objURL] = observer;
                }

                //register hyperty subscription
                observer.addSubscription(hypertyURL);

                //forward to hyperty:
                reply.id = msg.id;
                reply.from = _this._url;
                reply.to = hypertyURL;
                _this2._bus.postMessage(reply);
              }
            });
          } else {
            //listener rejected
            _this._bus.postMessage({
              id: msg.id, type: 'response', from: msg.to, to: hypertyURL,
              body: reply.body
            });
          }
        });
      });
    }

    //FLOW-IN: message received from local DataObjectObserver -> unsubscribe

  }, {
    key: '_onLocalUnSubscribe',
    value: function _onLocalUnSubscribe(msg) {
      var _this = this;

      var hypertyURL = msg.from;
      var objURL = msg.body.resource;

      var observer = _this._observers[objURL];
      if (observer) {
        //TODO: is there any policy verification before delete?
        observer.removeSubscription(hypertyURL);

        //TODO: destroy object in the registry?
        _this._bus.postMessage({
          id: msg.id, type: 'response', from: msg.to, to: msg.from,
          body: { code: 200 }
        });

        //TODO: remove Object if no more subscription?
        //delete _this._observers[objURL];
      }
    }
  }, {
    key: 'url',
    get: function get() {
      return this._url;
    }
  }]);
  return SyncherManager;
}();

exports.default = SyncherManager;
module.exports = exports['default'];

},{"../utils/tv4":451,"../utils/utils":452,"./ObjectAllocation":446,"./ObserverObject":447,"./ReporterObject":448,"babel-runtime/core-js/json/stringify":297,"babel-runtime/helpers/classCallCheck":309,"babel-runtime/helpers/createClass":310,"service-framework/dist/MessageFactory":416}],451:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _defineProperty = require('babel-runtime/core-js/object/define-property');

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _isFrozen = require('babel-runtime/core-js/object/is-frozen');

var _isFrozen2 = _interopRequireDefault(_isFrozen);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 Author: Geraint Luff and others
 Year: 2013

 This code is released into the "public domain" by its author(s).  Anybody may use, alter and distribute the code without restriction.  The author makes no guarantees, and takes no liability of any kind for use of this code.

 If you find a bug or make an improvement, it would be courteous to let the author know, but it is not compulsory.
 */
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FObject%2Fkeys
if (!_keys2.default) {
    Object.keys = function () {
        var hasOwnProperty = Object.prototype.hasOwnProperty,
            hasDontEnumBug = !{ toString: null }.propertyIsEnumerable('toString'),
            dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'],
            dontEnumsLength = dontEnums.length;

        return function (obj) {
            if ((typeof obj === 'undefined' ? 'undefined' : (0, _typeof3.default)(obj)) !== 'object' && typeof obj !== 'function' || obj === null) {
                throw new TypeError('Object.keys called on non-object');
            }

            var result = [];

            for (var prop in obj) {
                if (hasOwnProperty.call(obj, prop)) {
                    result.push(prop);
                }
            }

            if (hasDontEnumBug) {
                for (var i = 0; i < dontEnumsLength; i++) {
                    if (hasOwnProperty.call(obj, dontEnums[i])) {
                        result.push(dontEnums[i]);
                    }
                }
            }
            return result;
        };
    }();
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create
if (!_create2.default) {
    Object.create = function () {
        function F() {}

        return function (o) {
            if (arguments.length !== 1) {
                throw new Error('Object.create implementation only accepts one parameter.');
            }
            F.prototype = o;
            return new F();
        };
    }();
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FisArray
if (!Array.isArray) {
    Array.isArray = function (vArg) {
        return Object.prototype.toString.call(vArg) === "[object Array]";
    };
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FindexOf
if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function (searchElement /*, fromIndex */) {
        if (this === null) {
            throw new TypeError();
        }
        var t = Object(this);
        var len = t.length >>> 0;

        if (len === 0) {
            return -1;
        }
        var n = 0;
        if (arguments.length > 1) {
            n = Number(arguments[1]);
            if (n !== n) {
                // shortcut for verifying if it's NaN
                n = 0;
            } else if (n !== 0 && n !== Infinity && n !== -Infinity) {
                n = (n > 0 || -1) * Math.floor(Math.abs(n));
            }
        }
        if (n >= len) {
            return -1;
        }
        var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);
        for (; k < len; k++) {
            if (k in t && t[k] === searchElement) {
                return k;
            }
        }
        return -1;
    };
}

// Grungey Object.isFrozen hack
if (!_isFrozen2.default) {
    Object.isFrozen = function (obj) {
        var key = "tv4_test_frozen_key";
        while (obj.hasOwnProperty(key)) {
            key += Math.random();
        }
        try {
            obj[key] = true;
            delete obj[key];
            return false;
        } catch (e) {
            return true;
        }
    };
}
// Based on: https://github.com/geraintluff/uri-templates, but with all the de-substitution stuff removed

var uriTemplateGlobalModifiers = {
    "+": true,
    "#": true,
    ".": true,
    "/": true,
    ";": true,
    "?": true,
    "&": true
};
var uriTemplateSuffices = {
    "*": true
};

function notReallyPercentEncode(string) {
    return encodeURI(string).replace(/%25[0-9][0-9]/g, function (doubleEncoded) {
        return "%" + doubleEncoded.substring(3);
    });
}

function uriTemplateSubstitution(spec) {
    var modifier = "";
    if (uriTemplateGlobalModifiers[spec.charAt(0)]) {
        modifier = spec.charAt(0);
        spec = spec.substring(1);
    }
    var separator = "";
    var prefix = "";
    var shouldEscape = true;
    var showVariables = false;
    var trimEmptyString = false;
    if (modifier === '+') {
        shouldEscape = false;
    } else if (modifier === ".") {
        prefix = ".";
        separator = ".";
    } else if (modifier === "/") {
        prefix = "/";
        separator = "/";
    } else if (modifier === '#') {
        prefix = "#";
        shouldEscape = false;
    } else if (modifier === ';') {
        prefix = ";";
        separator = ";";
        showVariables = true;
        trimEmptyString = true;
    } else if (modifier === '?') {
        prefix = "?";
        separator = "&";
        showVariables = true;
    } else if (modifier === '&') {
        prefix = "&";
        separator = "&";
        showVariables = true;
    }

    var varNames = [];
    var varList = spec.split(",");
    var varSpecs = [];
    var varSpecMap = {};
    for (var i = 0; i < varList.length; i++) {
        var varName = varList[i];
        var truncate = null;
        if (varName.indexOf(":") !== -1) {
            var parts = varName.split(":");
            varName = parts[0];
            truncate = parseInt(parts[1], 10);
        }
        var suffices = {};
        while (uriTemplateSuffices[varName.charAt(varName.length - 1)]) {
            suffices[varName.charAt(varName.length - 1)] = true;
            varName = varName.substring(0, varName.length - 1);
        }
        var varSpec = {
            truncate: truncate,
            name: varName,
            suffices: suffices
        };
        varSpecs.push(varSpec);
        varSpecMap[varName] = varSpec;
        varNames.push(varName);
    }
    var subFunction = function subFunction(valueFunction) {
        var result = "";
        var startIndex = 0;
        for (var i = 0; i < varSpecs.length; i++) {
            var varSpec = varSpecs[i];
            var value = valueFunction(varSpec.name);
            if (value === null || value === undefined || Array.isArray(value) && value.length === 0 || (typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === 'object' && (0, _keys2.default)(value).length === 0) {
                startIndex++;
                continue;
            }
            if (i === startIndex) {
                result += prefix;
            } else {
                result += separator || ",";
            }
            if (Array.isArray(value)) {
                if (showVariables) {
                    result += varSpec.name + "=";
                }
                for (var j = 0; j < value.length; j++) {
                    if (j > 0) {
                        result += varSpec.suffices['*'] ? separator || "," : ",";
                        if (varSpec.suffices['*'] && showVariables) {
                            result += varSpec.name + "=";
                        }
                    }
                    result += shouldEscape ? encodeURIComponent(value[j]).replace(/!/g, "%21") : notReallyPercentEncode(value[j]);
                }
            } else if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === "object") {
                if (showVariables && !varSpec.suffices['*']) {
                    result += varSpec.name + "=";
                }
                var first = true;
                for (var key in value) {
                    if (!first) {
                        result += varSpec.suffices['*'] ? separator || "," : ",";
                    }
                    first = false;
                    result += shouldEscape ? encodeURIComponent(key).replace(/!/g, "%21") : notReallyPercentEncode(key);
                    result += varSpec.suffices['*'] ? '=' : ",";
                    result += shouldEscape ? encodeURIComponent(value[key]).replace(/!/g, "%21") : notReallyPercentEncode(value[key]);
                }
            } else {
                if (showVariables) {
                    result += varSpec.name;
                    if (!trimEmptyString || value !== "") {
                        result += "=";
                    }
                }
                if (varSpec.truncate != null) {
                    value = value.substring(0, varSpec.truncate);
                }
                result += shouldEscape ? encodeURIComponent(value).replace(/!/g, "%21") : notReallyPercentEncode(value);
            }
        }
        return result;
    };
    subFunction.varNames = varNames;
    return {
        prefix: prefix,
        substitution: subFunction
    };
}

function UriTemplate(template) {
    if (!(this instanceof UriTemplate)) {
        return new UriTemplate(template);
    }
    var parts = template.split("{");
    var textParts = [parts.shift()];
    var prefixes = [];
    var substitutions = [];
    var varNames = [];
    while (parts.length > 0) {
        var part = parts.shift();
        var spec = part.split("}")[0];
        var remainder = part.substring(spec.length + 1);
        var funcs = uriTemplateSubstitution(spec);
        substitutions.push(funcs.substitution);
        prefixes.push(funcs.prefix);
        textParts.push(remainder);
        varNames = varNames.concat(funcs.substitution.varNames);
    }
    this.fill = function (valueFunction) {
        var result = textParts[0];
        for (var i = 0; i < substitutions.length; i++) {
            var substitution = substitutions[i];
            result += substitution(valueFunction);
            result += textParts[i + 1];
        }
        return result;
    };
    this.varNames = varNames;
    this.template = template;
}

UriTemplate.prototype = {
    toString: function toString() {
        return this.template;
    },
    fillFromObject: function fillFromObject(obj) {
        return this.fill(function (varName) {
            return obj[varName];
        });
    }
};
var ValidatorContext = function ValidatorContext(parent, collectMultiple, errorReporter, checkRecursive, trackUnknownProperties) {
    this.missing = [];
    this.missingMap = {};
    this.formatValidators = parent ? (0, _create2.default)(parent.formatValidators) : {};
    this.schemas = parent ? (0, _create2.default)(parent.schemas) : {};
    this.collectMultiple = collectMultiple;
    this.errors = [];
    this.handleError = collectMultiple ? this.collectError : this.returnError;
    if (checkRecursive) {
        this.checkRecursive = true;
        this.scanned = [];
        this.scannedFrozen = [];
        this.scannedFrozenSchemas = [];
        this.scannedFrozenValidationErrors = [];
        this.validatedSchemasKey = 'tv4_validation_id';
        this.validationErrorsKey = 'tv4_validation_errors_id';
    }
    if (trackUnknownProperties) {
        this.trackUnknownProperties = true;
        this.knownPropertyPaths = {};
        this.unknownPropertyPaths = {};
    }
    this.errorReporter = errorReporter || defaultErrorReporter('en');
    if (typeof this.errorReporter === 'string') {
        throw new Error('debug');
    }
    this.definedKeywords = {};
    if (parent) {
        for (var key in parent.definedKeywords) {
            this.definedKeywords[key] = parent.definedKeywords[key].slice(0);
        }
    }
};
ValidatorContext.prototype.defineKeyword = function (keyword, keywordFunction) {
    this.definedKeywords[keyword] = this.definedKeywords[keyword] || [];
    this.definedKeywords[keyword].push(keywordFunction);
};
ValidatorContext.prototype.createError = function (code, messageParams, dataPath, schemaPath, subErrors, data, schema) {
    var error = new ValidationError(code, messageParams, dataPath, schemaPath, subErrors);
    error.message = this.errorReporter(error, data, schema);
    return error;
};
ValidatorContext.prototype.returnError = function (error) {
    return error;
};
ValidatorContext.prototype.collectError = function (error) {
    if (error) {
        this.errors.push(error);
    }
    return null;
};
ValidatorContext.prototype.prefixErrors = function (startIndex, dataPath, schemaPath) {
    for (var i = startIndex; i < this.errors.length; i++) {
        this.errors[i] = this.errors[i].prefixWith(dataPath, schemaPath);
    }
    return this;
};
ValidatorContext.prototype.banUnknownProperties = function (data, schema) {
    for (var unknownPath in this.unknownPropertyPaths) {
        var error = this.createError(ErrorCodes.UNKNOWN_PROPERTY, { path: unknownPath }, unknownPath, "", null, data, schema);
        var result = this.handleError(error);
        if (result) {
            return result;
        }
    }
    return null;
};

ValidatorContext.prototype.addFormat = function (format, validator) {
    if ((typeof format === 'undefined' ? 'undefined' : (0, _typeof3.default)(format)) === 'object') {
        for (var key in format) {
            this.addFormat(key, format[key]);
        }
        return this;
    }
    this.formatValidators[format] = validator;
};
ValidatorContext.prototype.resolveRefs = function (schema, urlHistory) {
    if (schema['$ref'] !== undefined) {
        urlHistory = urlHistory || {};
        if (urlHistory[schema['$ref']]) {
            return this.createError(ErrorCodes.CIRCULAR_REFERENCE, { urls: (0, _keys2.default)(urlHistory).join(', ') }, '', '', null, undefined, schema);
        }
        urlHistory[schema['$ref']] = true;
        schema = this.getSchema(schema['$ref'], urlHistory);
    }
    return schema;
};
ValidatorContext.prototype.getSchema = function (url, urlHistory) {
    var schema;
    if (this.schemas[url] !== undefined) {
        schema = this.schemas[url];
        return this.resolveRefs(schema, urlHistory);
    }
    var baseUrl = url;
    var fragment = "";
    if (url.indexOf('#') !== -1) {
        fragment = url.substring(url.indexOf("#") + 1);
        baseUrl = url.substring(0, url.indexOf("#"));
    }
    if ((0, _typeof3.default)(this.schemas[baseUrl]) === 'object') {
        schema = this.schemas[baseUrl];
        var pointerPath = decodeURIComponent(fragment);
        if (pointerPath === "") {
            return this.resolveRefs(schema, urlHistory);
        } else if (pointerPath.charAt(0) !== "/") {
            return undefined;
        }
        var parts = pointerPath.split("/").slice(1);
        for (var i = 0; i < parts.length; i++) {
            var component = parts[i].replace(/~1/g, "/").replace(/~0/g, "~");
            if (schema[component] === undefined) {
                schema = undefined;
                break;
            }
            schema = schema[component];
        }
        if (schema !== undefined) {
            return this.resolveRefs(schema, urlHistory);
        }
    }
    if (this.missing[baseUrl] === undefined) {
        this.missing.push(baseUrl);
        this.missing[baseUrl] = baseUrl;
        this.missingMap[baseUrl] = baseUrl;
    }
};
ValidatorContext.prototype.searchSchemas = function (schema, url) {
    if (Array.isArray(schema)) {
        for (var i = 0; i < schema.length; i++) {
            this.searchSchemas(schema[i], url);
        }
    } else if (schema && (typeof schema === 'undefined' ? 'undefined' : (0, _typeof3.default)(schema)) === "object") {
        if (typeof schema.id === "string") {
            if (isTrustedUrl(url, schema.id)) {
                if (this.schemas[schema.id] === undefined) {
                    this.schemas[schema.id] = schema;
                }
            }
        }
        for (var key in schema) {
            if (key !== "enum") {
                if ((0, _typeof3.default)(schema[key]) === "object") {
                    this.searchSchemas(schema[key], url);
                } else if (key === "$ref") {
                    var uri = getDocumentUri(schema[key]);
                    if (uri && this.schemas[uri] === undefined && this.missingMap[uri] === undefined) {
                        this.missingMap[uri] = uri;
                    }
                }
            }
        }
    }
};
ValidatorContext.prototype.addSchema = function (url, schema) {
    //overload
    if (typeof url !== 'string' || typeof schema === 'undefined') {
        if ((typeof url === 'undefined' ? 'undefined' : (0, _typeof3.default)(url)) === 'object' && typeof url.id === 'string') {
            schema = url;
            url = schema.id;
        } else {
            return;
        }
    }
    if (url === getDocumentUri(url) + "#") {
        // Remove empty fragment
        url = getDocumentUri(url);
    }
    this.schemas[url] = schema;
    delete this.missingMap[url];
    normSchema(schema, url);
    this.searchSchemas(schema, url);
};

ValidatorContext.prototype.getSchemaMap = function () {
    var map = {};
    for (var key in this.schemas) {
        map[key] = this.schemas[key];
    }
    return map;
};

ValidatorContext.prototype.getSchemaUris = function (filterRegExp) {
    var list = [];
    for (var key in this.schemas) {
        if (!filterRegExp || filterRegExp.test(key)) {
            list.push(key);
        }
    }
    return list;
};

ValidatorContext.prototype.getMissingUris = function (filterRegExp) {
    var list = [];
    for (var key in this.missingMap) {
        if (!filterRegExp || filterRegExp.test(key)) {
            list.push(key);
        }
    }
    return list;
};

ValidatorContext.prototype.dropSchemas = function () {
    this.schemas = {};
    this.reset();
};
ValidatorContext.prototype.reset = function () {
    this.missing = [];
    this.missingMap = {};
    this.errors = [];
};

ValidatorContext.prototype.validateAll = function (data, schema, dataPathParts, schemaPathParts, dataPointerPath) {
    var topLevel;
    schema = this.resolveRefs(schema);
    if (!schema) {
        return null;
    } else if (schema instanceof ValidationError) {
        this.errors.push(schema);
        return schema;
    }

    var startErrorCount = this.errors.length;
    var frozenIndex,
        scannedFrozenSchemaIndex = null,
        scannedSchemasIndex = null;
    if (this.checkRecursive && data && (typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data)) === 'object') {
        topLevel = !this.scanned.length;
        if (data[this.validatedSchemasKey]) {
            var schemaIndex = data[this.validatedSchemasKey].indexOf(schema);
            if (schemaIndex !== -1) {
                this.errors = this.errors.concat(data[this.validationErrorsKey][schemaIndex]);
                return null;
            }
        }
        if ((0, _isFrozen2.default)(data)) {
            frozenIndex = this.scannedFrozen.indexOf(data);
            if (frozenIndex !== -1) {
                var frozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].indexOf(schema);
                if (frozenSchemaIndex !== -1) {
                    this.errors = this.errors.concat(this.scannedFrozenValidationErrors[frozenIndex][frozenSchemaIndex]);
                    return null;
                }
            }
        }
        this.scanned.push(data);
        if ((0, _isFrozen2.default)(data)) {
            if (frozenIndex === -1) {
                frozenIndex = this.scannedFrozen.length;
                this.scannedFrozen.push(data);
                this.scannedFrozenSchemas.push([]);
            }
            scannedFrozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].length;
            this.scannedFrozenSchemas[frozenIndex][scannedFrozenSchemaIndex] = schema;
            this.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = [];
        } else {
            if (!data[this.validatedSchemasKey]) {
                try {
                    (0, _defineProperty2.default)(data, this.validatedSchemasKey, {
                        value: [],
                        configurable: true
                    });
                    (0, _defineProperty2.default)(data, this.validationErrorsKey, {
                        value: [],
                        configurable: true
                    });
                } catch (e) {
                    //IE 7/8 workaround
                    data[this.validatedSchemasKey] = [];
                    data[this.validationErrorsKey] = [];
                }
            }
            scannedSchemasIndex = data[this.validatedSchemasKey].length;
            data[this.validatedSchemasKey][scannedSchemasIndex] = schema;
            data[this.validationErrorsKey][scannedSchemasIndex] = [];
        }
    }

    var errorCount = this.errors.length;
    var error = this.validateBasic(data, schema, dataPointerPath) || this.validateNumeric(data, schema, dataPointerPath) || this.validateString(data, schema, dataPointerPath) || this.validateArray(data, schema, dataPointerPath) || this.validateObject(data, schema, dataPointerPath) || this.validateCombinations(data, schema, dataPointerPath) || this.validateHypermedia(data, schema, dataPointerPath) || this.validateFormat(data, schema, dataPointerPath) || this.validateDefinedKeywords(data, schema, dataPointerPath) || null;

    if (topLevel) {
        while (this.scanned.length) {
            var item = this.scanned.pop();
            delete item[this.validatedSchemasKey];
        }
        this.scannedFrozen = [];
        this.scannedFrozenSchemas = [];
    }

    if (error || errorCount !== this.errors.length) {
        while (dataPathParts && dataPathParts.length || schemaPathParts && schemaPathParts.length) {
            var dataPart = dataPathParts && dataPathParts.length ? "" + dataPathParts.pop() : null;
            var schemaPart = schemaPathParts && schemaPathParts.length ? "" + schemaPathParts.pop() : null;
            if (error) {
                error = error.prefixWith(dataPart, schemaPart);
            }
            this.prefixErrors(errorCount, dataPart, schemaPart);
        }
    }

    if (scannedFrozenSchemaIndex !== null) {
        this.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = this.errors.slice(startErrorCount);
    } else if (scannedSchemasIndex !== null) {
        data[this.validationErrorsKey][scannedSchemasIndex] = this.errors.slice(startErrorCount);
    }

    return this.handleError(error);
};
ValidatorContext.prototype.validateFormat = function (data, schema) {
    if (typeof schema.format !== 'string' || !this.formatValidators[schema.format]) {
        return null;
    }
    var errorMessage = this.formatValidators[schema.format].call(null, data, schema);
    if (typeof errorMessage === 'string' || typeof errorMessage === 'number') {
        return this.createError(ErrorCodes.FORMAT_CUSTOM, { message: errorMessage }, '', '/format', null, data, schema);
    } else if (errorMessage && (typeof errorMessage === 'undefined' ? 'undefined' : (0, _typeof3.default)(errorMessage)) === 'object') {
        return this.createError(ErrorCodes.FORMAT_CUSTOM, { message: errorMessage.message || "?" }, errorMessage.dataPath || '', errorMessage.schemaPath || "/format", null, data, schema);
    }
    return null;
};
ValidatorContext.prototype.validateDefinedKeywords = function (data, schema, dataPointerPath) {
    for (var key in this.definedKeywords) {
        if (typeof schema[key] === 'undefined') {
            continue;
        }
        var validationFunctions = this.definedKeywords[key];
        for (var i = 0; i < validationFunctions.length; i++) {
            var func = validationFunctions[i];
            var result = func(data, schema[key], schema, dataPointerPath);
            if (typeof result === 'string' || typeof result === 'number') {
                return this.createError(ErrorCodes.KEYWORD_CUSTOM, {
                    key: key,
                    message: result
                }, '', '', null, data, schema).prefixWith(null, key);
            } else if (result && (typeof result === 'undefined' ? 'undefined' : (0, _typeof3.default)(result)) === 'object') {
                var code = result.code;
                if (typeof code === 'string') {
                    if (!ErrorCodes[code]) {
                        throw new Error('Undefined error code (use defineError): ' + code);
                    }
                    code = ErrorCodes[code];
                } else if (typeof code !== 'number') {
                    code = ErrorCodes.KEYWORD_CUSTOM;
                }
                var messageParams = (0, _typeof3.default)(result.message) === 'object' ? result.message : {
                    key: key,
                    message: result.message || "?"
                };
                var schemaPath = result.schemaPath || "/" + key.replace(/~/g, '~0').replace(/\//g, '~1');
                return this.createError(code, messageParams, result.dataPath || null, schemaPath, null, data, schema);
            }
        }
    }
    return null;
};

function recursiveCompare(A, B) {
    if (A === B) {
        return true;
    }
    if (A && B && (typeof A === 'undefined' ? 'undefined' : (0, _typeof3.default)(A)) === "object" && (typeof B === 'undefined' ? 'undefined' : (0, _typeof3.default)(B)) === "object") {
        if (Array.isArray(A) !== Array.isArray(B)) {
            return false;
        } else if (Array.isArray(A)) {
            if (A.length !== B.length) {
                return false;
            }
            for (var i = 0; i < A.length; i++) {
                if (!recursiveCompare(A[i], B[i])) {
                    return false;
                }
            }
        } else {
            var key;
            for (key in A) {
                if (B[key] === undefined && A[key] !== undefined) {
                    return false;
                }
            }
            for (key in B) {
                if (A[key] === undefined && B[key] !== undefined) {
                    return false;
                }
            }
            for (key in A) {
                if (!recursiveCompare(A[key], B[key])) {
                    return false;
                }
            }
        }
        return true;
    }
    return false;
}

ValidatorContext.prototype.validateBasic = function validateBasic(data, schema, dataPointerPath) {
    var error;
    if (error = this.validateType(data, schema, dataPointerPath)) {
        return error.prefixWith(null, "type");
    }
    if (error = this.validateEnum(data, schema, dataPointerPath)) {
        return error.prefixWith(null, "type");
    }
    return null;
};

ValidatorContext.prototype.validateType = function validateType(data, schema) {
    if (schema.type === undefined) {
        return null;
    }
    var dataType = typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data);
    if (data === null) {
        dataType = "null";
    } else if (Array.isArray(data)) {
        dataType = "array";
    }
    var allowedTypes = schema.type;
    if (!Array.isArray(allowedTypes)) {
        allowedTypes = [allowedTypes];
    }

    for (var i = 0; i < allowedTypes.length; i++) {
        var type = allowedTypes[i];
        if (type === dataType || type === "integer" && dataType === "number" && data % 1 === 0) {
            return null;
        }
    }
    return this.createError(ErrorCodes.INVALID_TYPE, {
        type: dataType,
        expected: allowedTypes.join("/")
    }, '', '', null, data, schema);
};

ValidatorContext.prototype.validateEnum = function validateEnum(data, schema) {
    if (schema["enum"] === undefined) {
        return null;
    }
    for (var i = 0; i < schema["enum"].length; i++) {
        var enumVal = schema["enum"][i];
        if (recursiveCompare(data, enumVal)) {
            return null;
        }
    }
    return this.createError(ErrorCodes.ENUM_MISMATCH, { value: typeof JSON !== 'undefined' ? (0, _stringify2.default)(data) : data }, '', '', null, data, schema);
};

ValidatorContext.prototype.validateNumeric = function validateNumeric(data, schema, dataPointerPath) {
    return this.validateMultipleOf(data, schema, dataPointerPath) || this.validateMinMax(data, schema, dataPointerPath) || this.validateNaN(data, schema, dataPointerPath) || null;
};

var CLOSE_ENOUGH_LOW = Math.pow(2, -51);
var CLOSE_ENOUGH_HIGH = 1 - CLOSE_ENOUGH_LOW;
ValidatorContext.prototype.validateMultipleOf = function validateMultipleOf(data, schema) {
    var multipleOf = schema.multipleOf || schema.divisibleBy;
    if (multipleOf === undefined) {
        return null;
    }
    if (typeof data === "number") {
        var remainder = data / multipleOf % 1;
        if (remainder >= CLOSE_ENOUGH_LOW && remainder < CLOSE_ENOUGH_HIGH) {
            return this.createError(ErrorCodes.NUMBER_MULTIPLE_OF, {
                value: data,
                multipleOf: multipleOf
            }, '', '', null, data, schema);
        }
    }
    return null;
};

ValidatorContext.prototype.validateMinMax = function validateMinMax(data, schema) {
    if (typeof data !== "number") {
        return null;
    }
    if (schema.minimum !== undefined) {
        if (data < schema.minimum) {
            return this.createError(ErrorCodes.NUMBER_MINIMUM, {
                value: data,
                minimum: schema.minimum
            }, '', '/minimum', null, data, schema);
        }
        if (schema.exclusiveMinimum && data === schema.minimum) {
            return this.createError(ErrorCodes.NUMBER_MINIMUM_EXCLUSIVE, {
                value: data,
                minimum: schema.minimum
            }, '', '/exclusiveMinimum', null, data, schema);
        }
    }
    if (schema.maximum !== undefined) {
        if (data > schema.maximum) {
            return this.createError(ErrorCodes.NUMBER_MAXIMUM, {
                value: data,
                maximum: schema.maximum
            }, '', '/maximum', null, data, schema);
        }
        if (schema.exclusiveMaximum && data === schema.maximum) {
            return this.createError(ErrorCodes.NUMBER_MAXIMUM_EXCLUSIVE, {
                value: data,
                maximum: schema.maximum
            }, '', '/exclusiveMaximum', null, data, schema);
        }
    }
    return null;
};

ValidatorContext.prototype.validateNaN = function validateNaN(data, schema) {
    if (typeof data !== "number") {
        return null;
    }
    if (isNaN(data) === true || data === Infinity || data === -Infinity) {
        return this.createError(ErrorCodes.NUMBER_NOT_A_NUMBER, { value: data }, '', '/type', null, data, schema);
    }
    return null;
};

ValidatorContext.prototype.validateString = function validateString(data, schema, dataPointerPath) {
    return this.validateStringLength(data, schema, dataPointerPath) || this.validateStringPattern(data, schema, dataPointerPath) || null;
};

ValidatorContext.prototype.validateStringLength = function validateStringLength(data, schema) {
    if (typeof data !== "string") {
        return null;
    }
    if (schema.minLength !== undefined) {
        if (data.length < schema.minLength) {
            return this.createError(ErrorCodes.STRING_LENGTH_SHORT, {
                length: data.length,
                minimum: schema.minLength
            }, '', '/minLength', null, data, schema);
        }
    }
    if (schema.maxLength !== undefined) {
        if (data.length > schema.maxLength) {
            return this.createError(ErrorCodes.STRING_LENGTH_LONG, {
                length: data.length,
                maximum: schema.maxLength
            }, '', '/maxLength', null, data, schema);
        }
    }
    return null;
};

ValidatorContext.prototype.validateStringPattern = function validateStringPattern(data, schema) {
    if (typeof data !== "string" || typeof schema.pattern !== "string" && !(schema.pattern instanceof RegExp)) {
        return null;
    }
    var regexp;
    if (schema.pattern instanceof RegExp) {
        regexp = schema.pattern;
    } else {
        var body,
            flags = '';
        // Check for regular expression literals
        // @see http://www.ecma-international.org/ecma-262/5.1/#sec-7.8.5
        var literal = schema.pattern.match(/^\/(.+)\/([img]*)$/);
        if (literal) {
            body = literal[1];
            flags = literal[2];
        } else {
            body = schema.pattern;
        }
        regexp = new RegExp(body, flags);
    }
    if (!regexp.test(data)) {
        return this.createError(ErrorCodes.STRING_PATTERN, { pattern: schema.pattern }, '', '/pattern', null, data, schema);
    }
    return null;
};

ValidatorContext.prototype.validateArray = function validateArray(data, schema, dataPointerPath) {
    if (!Array.isArray(data)) {
        return null;
    }
    return this.validateArrayLength(data, schema, dataPointerPath) || this.validateArrayUniqueItems(data, schema, dataPointerPath) || this.validateArrayItems(data, schema, dataPointerPath) || null;
};

ValidatorContext.prototype.validateArrayLength = function validateArrayLength(data, schema) {
    var error;
    if (schema.minItems !== undefined) {
        if (data.length < schema.minItems) {
            error = this.createError(ErrorCodes.ARRAY_LENGTH_SHORT, {
                length: data.length,
                minimum: schema.minItems
            }, '', '/minItems', null, data, schema);
            if (this.handleError(error)) {
                return error;
            }
        }
    }
    if (schema.maxItems !== undefined) {
        if (data.length > schema.maxItems) {
            error = this.createError(ErrorCodes.ARRAY_LENGTH_LONG, {
                length: data.length,
                maximum: schema.maxItems
            }, '', '/maxItems', null, data, schema);
            if (this.handleError(error)) {
                return error;
            }
        }
    }
    return null;
};

ValidatorContext.prototype.validateArrayUniqueItems = function validateArrayUniqueItems(data, schema) {
    if (schema.uniqueItems) {
        for (var i = 0; i < data.length; i++) {
            for (var j = i + 1; j < data.length; j++) {
                if (recursiveCompare(data[i], data[j])) {
                    var error = this.createError(ErrorCodes.ARRAY_UNIQUE, {
                        match1: i,
                        match2: j
                    }, '', '/uniqueItems', null, data, schema);
                    if (this.handleError(error)) {
                        return error;
                    }
                }
            }
        }
    }
    return null;
};

ValidatorContext.prototype.validateArrayItems = function validateArrayItems(data, schema, dataPointerPath) {
    if (schema.items === undefined) {
        return null;
    }
    var error, i;
    if (Array.isArray(schema.items)) {
        for (i = 0; i < data.length; i++) {
            if (i < schema.items.length) {
                if (error = this.validateAll(data[i], schema.items[i], [i], ["items", i], dataPointerPath + "/" + i)) {
                    return error;
                }
            } else if (schema.additionalItems !== undefined) {
                if (typeof schema.additionalItems === "boolean") {
                    if (!schema.additionalItems) {
                        error = this.createError(ErrorCodes.ARRAY_ADDITIONAL_ITEMS, {}, '/' + i, '/additionalItems', null, data, schema);
                        if (this.handleError(error)) {
                            return error;
                        }
                    }
                } else if (error = this.validateAll(data[i], schema.additionalItems, [i], ["additionalItems"], dataPointerPath + "/" + i)) {
                    return error;
                }
            }
        }
    } else {
        for (i = 0; i < data.length; i++) {
            if (error = this.validateAll(data[i], schema.items, [i], ["items"], dataPointerPath + "/" + i)) {
                return error;
            }
        }
    }
    return null;
};

ValidatorContext.prototype.validateObject = function validateObject(data, schema, dataPointerPath) {
    if ((typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data)) !== "object" || data === null || Array.isArray(data)) {
        return null;
    }
    return this.validateObjectMinMaxProperties(data, schema, dataPointerPath) || this.validateObjectRequiredProperties(data, schema, dataPointerPath) || this.validateObjectProperties(data, schema, dataPointerPath) || this.validateObjectDependencies(data, schema, dataPointerPath) || null;
};

ValidatorContext.prototype.validateObjectMinMaxProperties = function validateObjectMinMaxProperties(data, schema) {
    var keys = (0, _keys2.default)(data);
    var error;
    if (schema.minProperties !== undefined) {
        if (keys.length < schema.minProperties) {
            error = this.createError(ErrorCodes.OBJECT_PROPERTIES_MINIMUM, {
                propertyCount: keys.length,
                minimum: schema.minProperties
            }, '', '/minProperties', null, data, schema);
            if (this.handleError(error)) {
                return error;
            }
        }
    }
    if (schema.maxProperties !== undefined) {
        if (keys.length > schema.maxProperties) {
            error = this.createError(ErrorCodes.OBJECT_PROPERTIES_MAXIMUM, {
                propertyCount: keys.length,
                maximum: schema.maxProperties
            }, '', '/maxProperties', null, data, schema);
            if (this.handleError(error)) {
                return error;
            }
        }
    }
    return null;
};

ValidatorContext.prototype.validateObjectRequiredProperties = function validateObjectRequiredProperties(data, schema) {
    if (schema.required !== undefined) {
        for (var i = 0; i < schema.required.length; i++) {
            var key = schema.required[i];
            if (data[key] === undefined) {
                var error = this.createError(ErrorCodes.OBJECT_REQUIRED, { key: key }, '', '/required/' + i, null, data, schema);
                if (this.handleError(error)) {
                    return error;
                }
            }
        }
    }
    return null;
};

ValidatorContext.prototype.validateObjectProperties = function validateObjectProperties(data, schema, dataPointerPath) {
    var error;
    for (var key in data) {
        var keyPointerPath = dataPointerPath + "/" + key.replace(/~/g, '~0').replace(/\//g, '~1');
        var foundMatch = false;
        if (schema.properties !== undefined && schema.properties[key] !== undefined) {
            foundMatch = true;
            if (error = this.validateAll(data[key], schema.properties[key], [key], ["properties", key], keyPointerPath)) {
                return error;
            }
        }
        if (schema.patternProperties !== undefined) {
            for (var patternKey in schema.patternProperties) {
                var regexp = new RegExp(patternKey);
                if (regexp.test(key)) {
                    foundMatch = true;
                    if (error = this.validateAll(data[key], schema.patternProperties[patternKey], [key], ["patternProperties", patternKey], keyPointerPath)) {
                        return error;
                    }
                }
            }
        }
        if (!foundMatch) {
            if (schema.additionalProperties !== undefined) {
                if (this.trackUnknownProperties) {
                    this.knownPropertyPaths[keyPointerPath] = true;
                    delete this.unknownPropertyPaths[keyPointerPath];
                }
                if (typeof schema.additionalProperties === "boolean") {
                    if (!schema.additionalProperties) {
                        error = this.createError(ErrorCodes.OBJECT_ADDITIONAL_PROPERTIES, { key: key }, '', '/additionalProperties', null, data, schema).prefixWith(key, null);
                        if (this.handleError(error)) {
                            return error;
                        }
                    }
                } else {
                    if (error = this.validateAll(data[key], schema.additionalProperties, [key], ["additionalProperties"], keyPointerPath)) {
                        return error;
                    }
                }
            } else if (this.trackUnknownProperties && !this.knownPropertyPaths[keyPointerPath]) {
                this.unknownPropertyPaths[keyPointerPath] = true;
            }
        } else if (this.trackUnknownProperties) {
            this.knownPropertyPaths[keyPointerPath] = true;
            delete this.unknownPropertyPaths[keyPointerPath];
        }
    }
    return null;
};

ValidatorContext.prototype.validateObjectDependencies = function validateObjectDependencies(data, schema, dataPointerPath) {
    var error;
    if (schema.dependencies !== undefined) {
        for (var depKey in schema.dependencies) {
            if (data[depKey] !== undefined) {
                var dep = schema.dependencies[depKey];
                if (typeof dep === "string") {
                    if (data[dep] === undefined) {
                        error = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {
                            key: depKey,
                            missing: dep
                        }, '', '', null, data, schema).prefixWith(null, depKey).prefixWith(null, "dependencies");
                        if (this.handleError(error)) {
                            return error;
                        }
                    }
                } else if (Array.isArray(dep)) {
                    for (var i = 0; i < dep.length; i++) {
                        var requiredKey = dep[i];
                        if (data[requiredKey] === undefined) {
                            error = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {
                                key: depKey,
                                missing: requiredKey
                            }, '', '/' + i, null, data, schema).prefixWith(null, depKey).prefixWith(null, "dependencies");
                            if (this.handleError(error)) {
                                return error;
                            }
                        }
                    }
                } else {
                    if (error = this.validateAll(data, dep, [], ["dependencies", depKey], dataPointerPath)) {
                        return error;
                    }
                }
            }
        }
    }
    return null;
};

ValidatorContext.prototype.validateCombinations = function validateCombinations(data, schema, dataPointerPath) {
    return this.validateAllOf(data, schema, dataPointerPath) || this.validateAnyOf(data, schema, dataPointerPath) || this.validateOneOf(data, schema, dataPointerPath) || this.validateNot(data, schema, dataPointerPath) || null;
};

ValidatorContext.prototype.validateAllOf = function validateAllOf(data, schema, dataPointerPath) {
    if (schema.allOf === undefined) {
        return null;
    }
    var error;
    for (var i = 0; i < schema.allOf.length; i++) {
        var subSchema = schema.allOf[i];
        if (error = this.validateAll(data, subSchema, [], ["allOf", i], dataPointerPath)) {
            return error;
        }
    }
    return null;
};

ValidatorContext.prototype.validateAnyOf = function validateAnyOf(data, schema, dataPointerPath) {
    if (schema.anyOf === undefined) {
        return null;
    }
    var errors = [];
    var startErrorCount = this.errors.length;
    var oldUnknownPropertyPaths, oldKnownPropertyPaths;
    if (this.trackUnknownProperties) {
        oldUnknownPropertyPaths = this.unknownPropertyPaths;
        oldKnownPropertyPaths = this.knownPropertyPaths;
    }
    var errorAtEnd = true;
    for (var i = 0; i < schema.anyOf.length; i++) {
        if (this.trackUnknownProperties) {
            this.unknownPropertyPaths = {};
            this.knownPropertyPaths = {};
        }
        var subSchema = schema.anyOf[i];

        var errorCount = this.errors.length;
        var error = this.validateAll(data, subSchema, [], ["anyOf", i], dataPointerPath);

        if (error === null && errorCount === this.errors.length) {
            this.errors = this.errors.slice(0, startErrorCount);

            if (this.trackUnknownProperties) {
                for (var knownKey in this.knownPropertyPaths) {
                    oldKnownPropertyPaths[knownKey] = true;
                    delete oldUnknownPropertyPaths[knownKey];
                }
                for (var unknownKey in this.unknownPropertyPaths) {
                    if (!oldKnownPropertyPaths[unknownKey]) {
                        oldUnknownPropertyPaths[unknownKey] = true;
                    }
                }
                // We need to continue looping so we catch all the property definitions, but we don't want to return an error
                errorAtEnd = false;
                continue;
            }

            return null;
        }
        if (error) {
            errors.push(error.prefixWith(null, "" + i).prefixWith(null, "anyOf"));
        }
    }
    if (this.trackUnknownProperties) {
        this.unknownPropertyPaths = oldUnknownPropertyPaths;
        this.knownPropertyPaths = oldKnownPropertyPaths;
    }
    if (errorAtEnd) {
        errors = errors.concat(this.errors.slice(startErrorCount));
        this.errors = this.errors.slice(0, startErrorCount);
        return this.createError(ErrorCodes.ANY_OF_MISSING, {}, "", "/anyOf", errors, data, schema);
    }
};

ValidatorContext.prototype.validateOneOf = function validateOneOf(data, schema, dataPointerPath) {
    if (schema.oneOf === undefined) {
        return null;
    }
    var validIndex = null;
    var errors = [];
    var startErrorCount = this.errors.length;
    var oldUnknownPropertyPaths, oldKnownPropertyPaths;
    if (this.trackUnknownProperties) {
        oldUnknownPropertyPaths = this.unknownPropertyPaths;
        oldKnownPropertyPaths = this.knownPropertyPaths;
    }
    for (var i = 0; i < schema.oneOf.length; i++) {
        if (this.trackUnknownProperties) {
            this.unknownPropertyPaths = {};
            this.knownPropertyPaths = {};
        }
        var subSchema = schema.oneOf[i];

        var errorCount = this.errors.length;
        var error = this.validateAll(data, subSchema, [], ["oneOf", i], dataPointerPath);

        if (error === null && errorCount === this.errors.length) {
            if (validIndex === null) {
                validIndex = i;
            } else {
                this.errors = this.errors.slice(0, startErrorCount);
                return this.createError(ErrorCodes.ONE_OF_MULTIPLE, {
                    index1: validIndex,
                    index2: i
                }, "", "/oneOf", null, data, schema);
            }
            if (this.trackUnknownProperties) {
                for (var knownKey in this.knownPropertyPaths) {
                    oldKnownPropertyPaths[knownKey] = true;
                    delete oldUnknownPropertyPaths[knownKey];
                }
                for (var unknownKey in this.unknownPropertyPaths) {
                    if (!oldKnownPropertyPaths[unknownKey]) {
                        oldUnknownPropertyPaths[unknownKey] = true;
                    }
                }
            }
        } else if (error) {
            errors.push(error);
        }
    }
    if (this.trackUnknownProperties) {
        this.unknownPropertyPaths = oldUnknownPropertyPaths;
        this.knownPropertyPaths = oldKnownPropertyPaths;
    }
    if (validIndex === null) {
        errors = errors.concat(this.errors.slice(startErrorCount));
        this.errors = this.errors.slice(0, startErrorCount);
        return this.createError(ErrorCodes.ONE_OF_MISSING, {}, "", "/oneOf", errors, data, schema);
    } else {
        this.errors = this.errors.slice(0, startErrorCount);
    }
    return null;
};

ValidatorContext.prototype.validateNot = function validateNot(data, schema, dataPointerPath) {
    if (schema.not === undefined) {
        return null;
    }
    var oldErrorCount = this.errors.length;
    var oldUnknownPropertyPaths, oldKnownPropertyPaths;
    if (this.trackUnknownProperties) {
        oldUnknownPropertyPaths = this.unknownPropertyPaths;
        oldKnownPropertyPaths = this.knownPropertyPaths;
        this.unknownPropertyPaths = {};
        this.knownPropertyPaths = {};
    }
    var error = this.validateAll(data, schema.not, null, null, dataPointerPath);
    var notErrors = this.errors.slice(oldErrorCount);
    this.errors = this.errors.slice(0, oldErrorCount);
    if (this.trackUnknownProperties) {
        this.unknownPropertyPaths = oldUnknownPropertyPaths;
        this.knownPropertyPaths = oldKnownPropertyPaths;
    }
    if (error === null && notErrors.length === 0) {
        return this.createError(ErrorCodes.NOT_PASSED, {}, "", "/not", null, data, schema);
    }
    return null;
};

ValidatorContext.prototype.validateHypermedia = function validateCombinations(data, schema, dataPointerPath) {
    if (!schema.links) {
        return null;
    }
    var error;
    for (var i = 0; i < schema.links.length; i++) {
        var ldo = schema.links[i];
        if (ldo.rel === "describedby") {
            var template = new UriTemplate(ldo.href);
            var allPresent = true;
            for (var j = 0; j < template.varNames.length; j++) {
                if (!(template.varNames[j] in data)) {
                    allPresent = false;
                    break;
                }
            }
            if (allPresent) {
                var schemaUrl = template.fillFromObject(data);
                var subSchema = { "$ref": schemaUrl };
                if (error = this.validateAll(data, subSchema, [], ["links", i], dataPointerPath)) {
                    return error;
                }
            }
        }
    }
};

// parseURI() and resolveUrl() are from https://gist.github.com/1088850
//   -  released as public domain by author ("Yaffle") - see comments on gist

function parseURI(url) {
    var m = String(url).replace(/^\s+|\s+$/g, '').match(/^([^:\/?#]+:)?(\/\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);
    // authority = '//' + user + ':' + pass '@' + hostname + ':' port
    return m ? {
        href: m[0] || '',
        protocol: m[1] || '',
        authority: m[2] || '',
        host: m[3] || '',
        hostname: m[4] || '',
        port: m[5] || '',
        pathname: m[6] || '',
        search: m[7] || '',
        hash: m[8] || ''
    } : null;
}

function resolveUrl(base, href) {
    // RFC 3986

    function removeDotSegments(input) {
        var output = [];
        input.replace(/^(\.\.?(\/|$))+/, '').replace(/\/(\.(\/|$))+/g, '/').replace(/\/\.\.$/, '/../').replace(/\/?[^\/]*/g, function (p) {
            if (p === '/..') {
                output.pop();
            } else {
                output.push(p);
            }
        });
        return output.join('').replace(/^\//, input.charAt(0) === '/' ? '/' : '');
    }

    href = parseURI(href || '');
    base = parseURI(base || '');

    return !href || !base ? null : (href.protocol || base.protocol) + (href.protocol || href.authority ? href.authority : base.authority) + removeDotSegments(href.protocol || href.authority || href.pathname.charAt(0) === '/' ? href.pathname : href.pathname ? (base.authority && !base.pathname ? '/' : '') + base.pathname.slice(0, base.pathname.lastIndexOf('/') + 1) + href.pathname : base.pathname) + (href.protocol || href.authority || href.pathname ? href.search : href.search || base.search) + href.hash;
}

function getDocumentUri(uri) {
    return uri.split('#')[0];
}

function normSchema(schema, baseUri) {
    if (schema && (typeof schema === 'undefined' ? 'undefined' : (0, _typeof3.default)(schema)) === "object") {
        if (baseUri === undefined) {
            baseUri = schema.id;
        } else if (typeof schema.id === "string") {
            baseUri = resolveUrl(baseUri, schema.id);
            schema.id = baseUri;
        }
        if (Array.isArray(schema)) {
            for (var i = 0; i < schema.length; i++) {
                normSchema(schema[i], baseUri);
            }
        } else {
            if (typeof schema['$ref'] === "string") {
                schema['$ref'] = resolveUrl(baseUri, schema['$ref']);
            }
            for (var key in schema) {
                if (key !== "enum") {
                    normSchema(schema[key], baseUri);
                }
            }
        }
    }
}

function defaultErrorReporter(language) {
    language = language || 'en';

    var errorMessages = languages[language];

    return function (error) {
        var messageTemplate = errorMessages[error.code] || ErrorMessagesDefault[error.code];
        if (typeof messageTemplate !== 'string') {
            return "Unknown error code " + error.code + ": " + (0, _stringify2.default)(error.messageParams);
        }
        var messageParams = error.params;
        // Adapted from Crockford's supplant()
        return messageTemplate.replace(/\{([^{}]*)\}/g, function (whole, varName) {
            var subValue = messageParams[varName];
            return typeof subValue === 'string' || typeof subValue === 'number' ? subValue : whole;
        });
    };
}

var ErrorCodes = {
    INVALID_TYPE: 0,
    ENUM_MISMATCH: 1,
    ANY_OF_MISSING: 10,
    ONE_OF_MISSING: 11,
    ONE_OF_MULTIPLE: 12,
    NOT_PASSED: 13,
    // Numeric errors
    NUMBER_MULTIPLE_OF: 100,
    NUMBER_MINIMUM: 101,
    NUMBER_MINIMUM_EXCLUSIVE: 102,
    NUMBER_MAXIMUM: 103,
    NUMBER_MAXIMUM_EXCLUSIVE: 104,
    NUMBER_NOT_A_NUMBER: 105,
    // String errors
    STRING_LENGTH_SHORT: 200,
    STRING_LENGTH_LONG: 201,
    STRING_PATTERN: 202,
    // Object errors
    OBJECT_PROPERTIES_MINIMUM: 300,
    OBJECT_PROPERTIES_MAXIMUM: 301,
    OBJECT_REQUIRED: 302,
    OBJECT_ADDITIONAL_PROPERTIES: 303,
    OBJECT_DEPENDENCY_KEY: 304,
    // Array errors
    ARRAY_LENGTH_SHORT: 400,
    ARRAY_LENGTH_LONG: 401,
    ARRAY_UNIQUE: 402,
    ARRAY_ADDITIONAL_ITEMS: 403,
    // Custom/user-defined errors
    FORMAT_CUSTOM: 500,
    KEYWORD_CUSTOM: 501,
    // Schema structure
    CIRCULAR_REFERENCE: 600,
    // Non-standard validation options
    UNKNOWN_PROPERTY: 1000
};
var ErrorCodeLookup = {};
for (var key in ErrorCodes) {
    ErrorCodeLookup[ErrorCodes[key]] = key;
}
var ErrorMessagesDefault = {
    INVALID_TYPE: "Invalid type: {type} (expected {expected})",
    ENUM_MISMATCH: "No enum match for: {value}",
    ANY_OF_MISSING: "Data does not match any schemas from \"anyOf\"",
    ONE_OF_MISSING: "Data does not match any schemas from \"oneOf\"",
    ONE_OF_MULTIPLE: "Data is valid against more than one schema from \"oneOf\": indices {index1} and {index2}",
    NOT_PASSED: "Data matches schema from \"not\"",
    // Numeric errors
    NUMBER_MULTIPLE_OF: "Value {value} is not a multiple of {multipleOf}",
    NUMBER_MINIMUM: "Value {value} is less than minimum {minimum}",
    NUMBER_MINIMUM_EXCLUSIVE: "Value {value} is equal to exclusive minimum {minimum}",
    NUMBER_MAXIMUM: "Value {value} is greater than maximum {maximum}",
    NUMBER_MAXIMUM_EXCLUSIVE: "Value {value} is equal to exclusive maximum {maximum}",
    NUMBER_NOT_A_NUMBER: "Value {value} is not a valid number",
    // String errors
    STRING_LENGTH_SHORT: "String is too short ({length} chars), minimum {minimum}",
    STRING_LENGTH_LONG: "String is too long ({length} chars), maximum {maximum}",
    STRING_PATTERN: "String does not match pattern: {pattern}",
    // Object errors
    OBJECT_PROPERTIES_MINIMUM: "Too few properties defined ({propertyCount}), minimum {minimum}",
    OBJECT_PROPERTIES_MAXIMUM: "Too many properties defined ({propertyCount}), maximum {maximum}",
    OBJECT_REQUIRED: "Missing required property: {key}",
    OBJECT_ADDITIONAL_PROPERTIES: "Additional properties not allowed",
    OBJECT_DEPENDENCY_KEY: "Dependency failed - key must exist: {missing} (due to key: {key})",
    // Array errors
    ARRAY_LENGTH_SHORT: "Array is too short ({length}), minimum {minimum}",
    ARRAY_LENGTH_LONG: "Array is too long ({length}), maximum {maximum}",
    ARRAY_UNIQUE: "Array items are not unique (indices {match1} and {match2})",
    ARRAY_ADDITIONAL_ITEMS: "Additional items not allowed",
    // Format errors
    FORMAT_CUSTOM: "Format validation failed ({message})",
    KEYWORD_CUSTOM: "Keyword failed: {key} ({message})",
    // Schema structure
    CIRCULAR_REFERENCE: "Circular $refs: {urls}",
    // Non-standard validation options
    UNKNOWN_PROPERTY: "Unknown property (not in schema)"
};

function ValidationError(code, params, dataPath, schemaPath, subErrors) {
    Error.call(this);
    if (code === undefined) {
        throw new Error("No error code supplied: " + schemaPath);
    }
    this.message = '';
    this.params = params;
    this.code = code;
    this.dataPath = dataPath || "";
    this.schemaPath = schemaPath || "";
    this.subErrors = subErrors || null;

    var err = new Error(this.message);
    this.stack = err.stack || err.stacktrace;
    if (!this.stack) {
        try {
            throw err;
        } catch (err) {
            this.stack = err.stack || err.stacktrace;
        }
    }
}

ValidationError.prototype = (0, _create2.default)(Error.prototype);
ValidationError.prototype.constructor = ValidationError;
ValidationError.prototype.name = 'ValidationError';

ValidationError.prototype.prefixWith = function (dataPrefix, schemaPrefix) {
    if (dataPrefix !== null) {
        dataPrefix = dataPrefix.replace(/~/g, "~0").replace(/\//g, "~1");
        this.dataPath = "/" + dataPrefix + this.dataPath;
    }
    if (schemaPrefix !== null) {
        schemaPrefix = schemaPrefix.replace(/~/g, "~0").replace(/\//g, "~1");
        this.schemaPath = "/" + schemaPrefix + this.schemaPath;
    }
    if (this.subErrors !== null) {
        for (var i = 0; i < this.subErrors.length; i++) {
            this.subErrors[i].prefixWith(dataPrefix, schemaPrefix);
        }
    }
    return this;
};

function isTrustedUrl(baseUrl, testUrl) {
    if (testUrl.substring(0, baseUrl.length) === baseUrl) {
        var remainder = testUrl.substring(baseUrl.length);
        if (testUrl.length > 0 && testUrl.charAt(baseUrl.length - 1) === "/" || remainder.charAt(0) === "#" || remainder.charAt(0) === "?") {
            return true;
        }
    }
    return false;
}

var languages = {};

function createApi(language) {
    var globalContext = new ValidatorContext();
    var currentLanguage;
    var customErrorReporter;
    var api = {
        setErrorReporter: function setErrorReporter(reporter) {
            if (typeof reporter === 'string') {
                return this.language(reporter);
            }
            customErrorReporter = reporter;
            return true;
        },
        addFormat: function addFormat() {
            globalContext.addFormat.apply(globalContext, arguments);
        },
        language: function language(code) {
            if (!code) {
                return currentLanguage;
            }
            if (!languages[code]) {
                code = code.split('-')[0]; // fall back to base language
            }
            if (languages[code]) {
                currentLanguage = code;
                return code; // so you can tell if fall-back has happened
            }
            return false;
        },
        addLanguage: function addLanguage(code, messageMap) {
            var key;
            for (key in ErrorCodes) {
                if (messageMap[key] && !messageMap[ErrorCodes[key]]) {
                    messageMap[ErrorCodes[key]] = messageMap[key];
                }
            }
            var rootCode = code.split('-')[0];
            if (!languages[rootCode]) {
                // use for base language if not yet defined
                languages[code] = messageMap;
                languages[rootCode] = messageMap;
            } else {
                languages[code] = (0, _create2.default)(languages[rootCode]);
                for (key in messageMap) {
                    if (typeof languages[rootCode][key] === 'undefined') {
                        languages[rootCode][key] = messageMap[key];
                    }
                    languages[code][key] = messageMap[key];
                }
            }
            return this;
        },
        freshApi: function freshApi(language) {
            var result = createApi();
            if (language) {
                result.language(language);
            }
            return result;
        },
        validate: function validate(data, schema, checkRecursive, banUnknownProperties) {
            var def = defaultErrorReporter(currentLanguage);
            var errorReporter = customErrorReporter ? function (error, data, schema) {
                return customErrorReporter(error, data, schema) || def(error, data, schema);
            } : def;
            var context = new ValidatorContext(globalContext, false, errorReporter, checkRecursive, banUnknownProperties);
            if (typeof schema === "string") {
                schema = { "$ref": schema };
            }
            context.addSchema("", schema);
            var error = context.validateAll(data, schema, null, null, "");
            if (!error && banUnknownProperties) {
                error = context.banUnknownProperties(data, schema);
            }
            this.error = error;
            this.missing = context.missing;
            this.valid = error === null;
            return this.valid;
        },
        validateResult: function validateResult() {
            var result = {};
            this.validate.apply(result, arguments);
            return result;
        },
        validateMultiple: function validateMultiple(data, schema, checkRecursive, banUnknownProperties) {
            var def = defaultErrorReporter(currentLanguage);
            var errorReporter = customErrorReporter ? function (error, data, schema) {
                return customErrorReporter(error, data, schema) || def(error, data, schema);
            } : def;
            var context = new ValidatorContext(globalContext, true, errorReporter, checkRecursive, banUnknownProperties);
            if (typeof schema === "string") {
                schema = { "$ref": schema };
            }
            context.addSchema("", schema);
            context.validateAll(data, schema, null, null, "");
            if (banUnknownProperties) {
                context.banUnknownProperties(data, schema);
            }
            var result = {};
            result.errors = context.errors;
            result.missing = context.missing;
            result.valid = result.errors.length === 0;
            return result;
        },
        addSchema: function addSchema() {
            return globalContext.addSchema.apply(globalContext, arguments);
        },
        getSchema: function getSchema() {
            return globalContext.getSchema.apply(globalContext, arguments);
        },
        getSchemaMap: function getSchemaMap() {
            return globalContext.getSchemaMap.apply(globalContext, arguments);
        },
        getSchemaUris: function getSchemaUris() {
            return globalContext.getSchemaUris.apply(globalContext, arguments);
        },
        getMissingUris: function getMissingUris() {
            return globalContext.getMissingUris.apply(globalContext, arguments);
        },
        dropSchemas: function dropSchemas() {
            globalContext.dropSchemas.apply(globalContext, arguments);
        },
        defineKeyword: function defineKeyword() {
            globalContext.defineKeyword.apply(globalContext, arguments);
        },
        defineError: function defineError(codeName, codeNumber, defaultMessage) {
            if (typeof codeName !== 'string' || !/^[A-Z]+(_[A-Z]+)*$/.test(codeName)) {
                throw new Error('Code name must be a string in UPPER_CASE_WITH_UNDERSCORES');
            }
            if (typeof codeNumber !== 'number' || codeNumber % 1 !== 0 || codeNumber < 10000) {
                throw new Error('Code number must be an integer > 10000');
            }
            if (typeof ErrorCodes[codeName] !== 'undefined') {
                throw new Error('Error already defined: ' + codeName + ' as ' + ErrorCodes[codeName]);
            }
            if (typeof ErrorCodeLookup[codeNumber] !== 'undefined') {
                throw new Error('Error code already used: ' + ErrorCodeLookup[codeNumber] + ' as ' + codeNumber);
            }
            ErrorCodes[codeName] = codeNumber;
            ErrorCodeLookup[codeNumber] = codeName;
            ErrorMessagesDefault[codeName] = ErrorMessagesDefault[codeNumber] = defaultMessage;
            for (var langCode in languages) {
                var language = languages[langCode];
                if (language[codeName]) {
                    language[codeNumber] = language[codeNumber] || language[codeName];
                }
            }
        },
        reset: function reset() {
            globalContext.reset();
            this.error = null;
            this.missing = [];
            this.valid = true;
        },
        missing: [],
        error: null,
        valid: true,
        normSchema: normSchema,
        resolveUrl: resolveUrl,
        getDocumentUri: getDocumentUri,
        errorCodes: ErrorCodes
    };
    api.language(language || 'en');
    return api;
}

//export function validator() {
var tv4 = createApi();
tv4.addLanguage('en-gb', ErrorMessagesDefault);

//legacy property
tv4.tv4 = tv4;
//return tv4;
exports.default = tv4;
//}

module.exports = exports['default'];

},{"babel-runtime/core-js/json/stringify":297,"babel-runtime/core-js/object/create":299,"babel-runtime/core-js/object/define-property":300,"babel-runtime/core-js/object/is-frozen":303,"babel-runtime/core-js/object/keys":304,"babel-runtime/helpers/typeof":314}],452:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

exports.divideURL = divideURL;
exports.divideEmail = divideEmail;
exports.emptyObject = emptyObject;
exports.deepClone = deepClone;
exports.removePathFromURL = removePathFromURL;
exports.getUserURLFromEmail = getUserURLFromEmail;
exports.getUserEmailFromURL = getUserEmailFromURL;
exports.convertToUserURL = convertToUserURL;
exports.isDataObjectURL = isDataObjectURL;
exports.getPrefix = getPrefix;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/
/**
 * Support module with some functions will be useful
 * @module utils
 */

/**
 * @typedef divideURL
 * @type Object
 * @property {string} type The type of URL
 * @property {string} domain The domain of URL
 * @property {string} identity The identity of URL
 */

/**
 * Divide an url in type, domain and identity
 * @param  {URL.URL} url - url address
 * @return {divideURL} the result of divideURL
 */
function divideURL(url) {

  if (!url) throw Error('URL is needed to split');

  // let re = /([a-zA-Z-]*)?:\/\/(?:\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b)*(\/[\/\d\w\.-]*)*(?:[\?])*(.+)*/gi;
  var re = /([a-zA-Z-]*):\/\/(?:\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256})([-a-zA-Z0-9@:%._\+~#=\/]*)/gi;
  var subst = '$1,$2,$3';
  var parts = url.replace(re, subst).split(',');

  // If the url has no protocol, the default protocol set is https
  if (parts[0] === url) {
    parts[0] = 'https';
    parts[1] = url;
  }

  var result = {
    type: parts[0],
    domain: parts[1],
    identity: parts[2]
  };

  return result;
}

function divideEmail(email) {
  var indexOfAt = email.indexOf('@');

  var result = {
    username: email.substring(0, indexOfAt),
    domain: email.substring(indexOfAt + 1, email.length)
  };

  return result;
}

/**
 * Check if an Object is empty
 * @param  {Object} object Object to be checked
 * @return {Boolean}       status of Object, empty or not (true|false);
 */
function emptyObject(object) {
  return (0, _keys2.default)(object).length > 0 ? false : true;
}

/**
 * Make a COPY of the original data
 * @param  {Object}  obj - object to be cloned
 * @return {Object}
 */
function deepClone(obj) {
  //TODO: simple but inefficient JSON deep clone...
  if (obj) return JSON.parse((0, _stringify2.default)(obj));
}

function removePathFromURL(url) {
  var splitURL = url.split('/');
  return splitURL[0] + '//' + splitURL[2] + '/' + splitURL[3];
}

/**
 * Obtains the user URL that corresponds to a given email
 * @param  {string} userEmail The user email
 * @return {URL.URL} userURL The user URL
 */
function getUserURLFromEmail(userEmail) {
  var indexOfAt = userEmail.indexOf('@');
  return 'user://' + userEmail.substring(indexOfAt + 1, userEmail.length) + '/' + userEmail.substring(0, indexOfAt);
}

/**
 * Obtains the user email that corresponds to a given URL
 * @param  {URL.URL} userURL The user URL
 * @return {string} userEmail The user email
 */
function getUserEmailFromURL(userURL) {
  var url = divideURL(userURL);
  return url.identity.replace('/', '') + '@' + url.domain; // identity field has '/exampleID' instead of 'exampleID'
}

/**
 * Check if the user identifier is already in the URL format, if not, convert to URL format
 * @param  {string}   identifier  user identifier
 * @return {string}   userURL    the user URL
 */
function convertToUserURL(identifier) {

  // check if the identifier is already in the url format
  if (identifier.substring(0, 7) === 'user://') {
    var dividedURL = divideURL(identifier);

    //check if the url is well formated
    if (dividedURL.domain && dividedURL.identity) {
      return identifier;
    } else {
      throw 'userURL with wrong format';
    }

    //if not, convert the user email to URL format
  } else {
    return getUserURLFromEmail(identifier);
  }
}

function isDataObjectURL(url) {
  var schemasToIgnore = ['domain-idp', 'runtime', 'domain', 'hyperty'];
  var splitURL = url.split('://');
  var urlSchema = splitURL[0];

  return schemasToIgnore.indexOf(urlSchema) === -1;
}

function getPrefix(object, key) {
  return object.hasOwnProperty(key) && object.key ? object[key] + '.' : '';
}

},{"babel-runtime/core-js/json/stringify":297,"babel-runtime/core-js/object/keys":304}]},{},[445])(445)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbGliL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLW51bWJlci12YWx1ZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4taW5zdGFuY2UuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWNvcHktd2l0aGluLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZpbGwuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZnJvbS1pdGVyYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXJlZHVjZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2JpbmQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi10by1qc29uLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2N0eC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLXByaW1pdGl2ZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLWlzLXJlZ2V4cC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19maXgtcmUtd2tzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Zvci1vZi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGFzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faHRtbC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ludm9rZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRldGVjdC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2tleW9mLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1leHBtMS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWxvZzFwLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21pY3JvdGFzay5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWZvcmNlZC1wYW0uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qtc2FwLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC10by1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vd24ta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1mbG9hdC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFydGlhbC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXRoLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlcGxhY2VyLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NhbWUtdmFsdWUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWh0bWwuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcmVwZWF0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy10cmltLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy13cy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190YXNrLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWluZGV4LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdWlkLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZXZlcnkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsbC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZyb20uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuam9pbi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5vZi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvbWUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUubm93LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hY29zaC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXRhbmguanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jYnJ0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2x6MzIuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jb3NoLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5mcm91bmQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5oeXBvdC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmltdWwuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpZ24uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaW5oLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudGFuaC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRydW5jLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3Rvci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWludC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3IuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5iaWcuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3IuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcubGluay5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmF3LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdWIuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1tYXAuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXNhcC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAudG8tanNvbi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaW11bGguanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pc3ViaC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnVtdWxoLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtZ2V0dGVyLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtc2V0dGVyLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtZ2V0dGVyLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtc2V0dGVyLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JzZXJ2YWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlZmluZS1tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zZXQudG8tanNvbi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcuYXQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5c3RlbS5nbG9iYWwuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvc2hpbS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2Fzc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2NyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9pcy1mcm96ZW4uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wvaXRlcmF0b3IuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvZ2V0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9qc29uL3N0cmluZ2lmeS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2Fzc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2RlZmluZS1wcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1wcm90b3R5cGUtb2YuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9pcy1mcm96ZW4uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vcHJvbWlzZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3IuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19saWJyYXJ5LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3JlZGVmaW5lLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9zZXJ2aWNlLWZyYW1ld29yay9kaXN0L01lc3NhZ2VGYWN0b3J5LmpzIiwic3JjL2J1cy9CdXMuanMiLCJzcmMvYnVzL01lc3NhZ2VCdXMuanMiLCJzcmMvYnVzL1BpcGVsaW5lLmpzIiwic3JjL2lkZW50aXR5L0NyeXB0by5qcyIsInNyYy9pZGVudGl0eS9HdWlGYWtlLmpzIiwic3JjL2lkZW50aXR5L0lkZW50aXR5LmpzIiwic3JjL2lkZW50aXR5L0lkZW50aXR5TW9kdWxlLmpzIiwic3JjL3BvbGljeS9Db21iaW5pbmdBbGdvcml0aG0uanMiLCJzcmMvcG9saWN5L09wZXJhdG9ycy5qcyIsInNyYy9wb2xpY3kvUERQLmpzIiwic3JjL3BvbGljeS9QRVAuanMiLCJzcmMvcG9saWN5L1BvbGljeS5qcyIsInNyYy9wb2xpY3kvUG9saWN5RW5naW5lLmpzIiwic3JjL3BvbGljeS9SdWxlLmpzIiwic3JjL3BvbGljeS9jb21iaW5pbmdBbGdvcml0aG1zL0RlbnlPdmVycmlkZXMuanMiLCJzcmMvcG9saWN5L2NvbWJpbmluZ0FsZ29yaXRobXMvRmlyc3RBcHBsaWNhYmxlLmpzIiwic3JjL3BvbGljeS9jb25kaXRpb25zL0FkdmFuY2VkQ29uZGl0aW9uLmpzIiwic3JjL3BvbGljeS9jb25kaXRpb25zL0NvbmRpdGlvbi5qcyIsInNyYy9wb2xpY3kvY29uZGl0aW9ucy9TdWJzY3JpcHRpb25Db25kaXRpb24uanMiLCJzcmMvcG9saWN5L2NvbnRleHQvQ29tbW9uQ3R4LmpzIiwic3JjL3BvbGljeS9jb250ZXh0L1J1bnRpbWVDb3JlQ3R4LmpzIiwic3JjL3BvbGljeS9wb2xpY2llcy9Vc2VyUG9saWN5LmpzIiwic3JjL3JlZ2lzdHJ5L0FkZHJlc3NBbGxvY2F0aW9uLmpzIiwic3JjL3JlZ2lzdHJ5L0h5cGVydHlJbnN0YW5jZS5qcyIsInNyYy9yZWdpc3RyeS9SZWdpc3RyeS5qcyIsInNyYy9yZWdpc3RyeS9SZWdpc3RyeURhdGFNb2RlbC5qcyIsInNyYy9ydW50aW1lL0Rlc2NyaXB0b3JzLmpzIiwic3JjL3J1bnRpbWUvTG9hZGVyLmpzIiwic3JjL3J1bnRpbWUvUnVudGltZVVBLmpzIiwic3JjL3N5bmNoZXIvT2JqZWN0QWxsb2NhdGlvbi5qcyIsInNyYy9zeW5jaGVyL09ic2VydmVyT2JqZWN0LmpzIiwic3JjL3N5bmNoZXIvUmVwb3J0ZXJPYmplY3QuanMiLCJzcmMvc3luY2hlci9TdWJzY3JpcHRpb24uanMiLCJzcmMvc3luY2hlci9TeW5jaGVyTWFuYWdlci5qcyIsInNyYy91dGlscy90djQuanMiLCJzcmMvdXRpbHMvdXRpbHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQy9CQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0lBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwRkE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTs7QUNBQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTs7QUNGQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdCQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5ZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEVBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdDQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BOztBQ0FBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDL0tBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQzVwQkE7O0FDQUE7O0FDQUE7O0FDQUE7O0FDQUE7O0FDQUE7O0FDQUE7O0FDQUE7O0FDQUE7O0FDQUE7O0FDQUE7O0FDQUE7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBOztBQ0RBO0FBQ0E7O0FDREE7QUFDQTs7QUNEQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7Ozs7QUNGQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzVEQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BOzs7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDYkE7Ozs7Ozs7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QUtPLFNBQVMsZ0JBQVQsQ0FBMEIsVUFBMUIsRUFBc0M7O0FBRTNDO0FBQ0EsTUFBSSxXQUFXLFNBQVgsQ0FBcUIsQ0FBckIsRUFBd0IsQ0FBeEIsTUFBK0IsU0FBbkMsRUFBOEM7QUFDNUMsUUFBSSxhQUFhLFVBQVUsVUFBVixDQUFqQjs7QUFFQTtBQUNBLFFBQUksV0FBVyxNQUFYLElBQXFCLFdBQVcsUUFBcEMsRUFBOEM7QUFDNUMsYUFBTyxVQUFQO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsWUFBTSwyQkFBTjtBQUNEOztBQUVIO0FBQ0MsR0FYRCxNQVdPO0FBQ0wsV0FBTyxvQkFBb0IsVUFBcEIsQ0FBUDtBQUNEO0FBQ0Y7O0FBRU0sU0FBUyxlQUFULENBQXlCLEdBQXpCLEVBQThCO0FBQ25DLE1BQUksa0JBQWtCLENBQUMsWUFBRCxFQUFlLFNBQWYsRUFBMEIsUUFBMUIsRUFBb0MsU0FBcEMsQ0FBdEI7QUFDQSxNQUFJLFdBQVksR0FBRCxDQUFNLEtBQU4sQ0FBWSxLQUFaLENBQWY7QUFDQSxNQUFJLFlBQVksU0FBUyxDQUFULENBQWhCOztBQUVBLFNBQU8sZ0JBQWdCLE9BQWhCLENBQXdCLFNBQXhCLE1BQXVDLENBQUMsQ0FBL0M7QUFDRDs7QUFFTSxTQUFTLFNBQVQsQ0FBbUIsTUFBbkIsRUFBMkIsR0FBM0IsRUFBZ0M7QUFDckMsU0FBTyxPQUFPLGNBQVAsQ0FBc0IsR0FBdEIsS0FBOEIsT0FBTyxHQUFyQyxHQUEyQyxPQUFPLEdBQVAsSUFBYyxHQUF6RCxHQUErRCxFQUF0RTtBQUNEIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9zaGltXCIpO1xuXG5yZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlXCIpO1xuXG4vKiBlc2xpbnQgbWF4LWxlbjogMCAqL1xuXG5pZiAoZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIm9ubHkgb25lIGluc3RhbmNlIG9mIGJhYmVsLXBvbHlmaWxsIGlzIGFsbG93ZWRcIik7XG59XG5nbG9iYWwuX2JhYmVsUG9seWZpbGwgPSB0cnVlO1xuXG4vLyBTaG91bGQgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlOlxuXG52YXIgREVGSU5FX1BST1BFUlRZID0gXCJkZWZpbmVQcm9wZXJ0eVwiO1xuZnVuY3Rpb24gZGVmaW5lKE8sIGtleSwgdmFsdWUpIHtcbiAgT1trZXldIHx8IE9iamVjdFtERUZJTkVfUFJPUEVSVFldKE8sIGtleSwge1xuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSk7XG59XG5cbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZExlZnRcIiwgXCJcIi5wYWRTdGFydCk7XG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRSaWdodFwiLCBcIlwiLnBhZEVuZCk7XG5cblwicG9wLHJldmVyc2Usc2hpZnQsa2V5cyx2YWx1ZXMsZW50cmllcyxpbmRleE9mLGV2ZXJ5LHNvbWUsZm9yRWFjaCxtYXAsZmlsdGVyLGZpbmQsZmluZEluZGV4LGluY2x1ZGVzLGpvaW4sc2xpY2UsY29uY2F0LHB1c2gsc3BsaWNlLHVuc2hpZnQsc29ydCxsYXN0SW5kZXhPZixyZWR1Y2UscmVkdWNlUmlnaHQsY29weVdpdGhpbixmaWxsXCIuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBbXVtrZXldICYmIGRlZmluZShBcnJheSwga2V5LCBGdW5jdGlvbi5jYWxsLmJpbmQoW11ba2V5XSkpO1xufSk7IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlJlZ0V4cC5lc2NhcGU7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07IiwidmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgbXNnKXtcbiAgaWYodHlwZW9mIGl0ICE9ICdudW1iZXInICYmIGNvZihpdCkgIT0gJ051bWJlcicpdGhyb3cgVHlwZUVycm9yKG1zZyk7XG4gIHJldHVybiAraXQ7XG59OyIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpXG4gICwgQXJyYXlQcm90byAgPSBBcnJheS5wcm90b3R5cGU7XG5pZihBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpcmVxdWlyZSgnLi9faGlkZScpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpe1xuICBpZighKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IChmb3JiaWRkZW5GaWVsZCAhPT0gdW5kZWZpbmVkICYmIGZvcmJpZGRlbkZpZWxkIGluIGl0KSl7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59OyIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKCFpc09iamVjdChpdCkpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59OyIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCB0b0luZGV4ICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4JylcbiAgLCB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFtdLmNvcHlXaXRoaW4gfHwgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQvKj0gMCovLCBzdGFydC8qPSAwLCBlbmQgPSBAbGVuZ3RoKi8pe1xuICB2YXIgTyAgICAgPSB0b09iamVjdCh0aGlzKVxuICAgICwgbGVuICAgPSB0b0xlbmd0aChPLmxlbmd0aClcbiAgICAsIHRvICAgID0gdG9JbmRleCh0YXJnZXQsIGxlbilcbiAgICAsIGZyb20gID0gdG9JbmRleChzdGFydCwgbGVuKVxuICAgICwgZW5kICAgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZFxuICAgICwgY291bnQgPSBNYXRoLm1pbigoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB0b0luZGV4KGVuZCwgbGVuKSkgLSBmcm9tLCBsZW4gLSB0bylcbiAgICAsIGluYyAgID0gMTtcbiAgaWYoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KXtcbiAgICBpbmMgID0gLTE7XG4gICAgZnJvbSArPSBjb3VudCAtIDE7XG4gICAgdG8gICArPSBjb3VudCAtIDE7XG4gIH1cbiAgd2hpbGUoY291bnQtLSA+IDApe1xuICAgIGlmKGZyb20gaW4gTylPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gICArPSBpbmM7XG4gICAgZnJvbSArPSBpbmM7XG4gIH0gcmV0dXJuIE87XG59OyIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCB0b0luZGV4ICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4JylcbiAgLCB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qLCBzdGFydCA9IDAsIGVuZCA9IEBsZW5ndGggKi8pe1xuICB2YXIgTyAgICAgID0gdG9PYmplY3QodGhpcylcbiAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKVxuICAgICwgYUxlbiAgID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICwgaW5kZXggID0gdG9JbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKVxuICAgICwgZW5kICAgID0gYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWRcbiAgICAsIGVuZFBvcyA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9JbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlKGVuZFBvcyA+IGluZGV4KU9baW5kZXgrK10gPSB2YWx1ZTtcbiAgcmV0dXJuIE87XG59OyIsInZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZXIsIElURVJBVE9SKXtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3JPZihpdGVyLCBmYWxzZSwgcmVzdWx0LnB1c2gsIHJlc3VsdCwgSVRFUkFUT1IpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgdG9MZW5ndGggID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCB0b0luZGV4ICAgPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihJU19JTkNMVURFUyl7XG4gIHJldHVybiBmdW5jdGlvbigkdGhpcywgZWwsIGZyb21JbmRleCl7XG4gICAgdmFyIE8gICAgICA9IHRvSU9iamVjdCgkdGhpcylcbiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpXG4gICAgICAsIGluZGV4ICA9IHRvSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpXG4gICAgICAsIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICBpZihJU19JTkNMVURFUyAmJiBlbCAhPSBlbCl3aGlsZShsZW5ndGggPiBpbmRleCl7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICBpZih2YWx1ZSAhPSB2YWx1ZSlyZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSN0b0luZGV4IGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvcig7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspaWYoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTyl7XG4gICAgICBpZihPW2luZGV4XSA9PT0gZWwpcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTsiLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIElPYmplY3QgID0gcmVxdWlyZSgnLi9faW9iamVjdCcpXG4gICwgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBhc2MgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFRZUEUsICRjcmVhdGUpe1xuICB2YXIgSVNfTUFQICAgICAgICA9IFRZUEUgPT0gMVxuICAgICwgSVNfRklMVEVSICAgICA9IFRZUEUgPT0gMlxuICAgICwgSVNfU09NRSAgICAgICA9IFRZUEUgPT0gM1xuICAgICwgSVNfRVZFUlkgICAgICA9IFRZUEUgPT0gNFxuICAgICwgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNlxuICAgICwgTk9fSE9MRVMgICAgICA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYXG4gICAgLCBjcmVhdGUgICAgICAgID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbigkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCl7XG4gICAgdmFyIE8gICAgICA9IHRvT2JqZWN0KCR0aGlzKVxuICAgICAgLCBzZWxmICAgPSBJT2JqZWN0KE8pXG4gICAgICAsIGYgICAgICA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKVxuICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aClcbiAgICAgICwgaW5kZXggID0gMFxuICAgICAgLCByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkXG4gICAgICAsIHZhbCwgcmVzO1xuICAgIGZvcig7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspaWYoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZil7XG4gICAgICB2YWwgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlcyA9IGYodmFsLCBpbmRleCwgTyk7XG4gICAgICBpZihUWVBFKXtcbiAgICAgICAgaWYoSVNfTUFQKXJlc3VsdFtpbmRleF0gPSByZXM7ICAgICAgICAgICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYocmVzKXN3aXRjaChUWVBFKXtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmKElTX0VWRVJZKXJldHVybiBmYWxzZTsgICAgICAgICAgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHJlc3VsdDtcbiAgfTtcbn07IiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIHRvT2JqZWN0ICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgSU9iamVjdCAgID0gcmVxdWlyZSgnLi9faW9iamVjdCcpXG4gICwgdG9MZW5ndGggID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgY2FsbGJhY2tmbiwgYUxlbiwgbWVtbywgaXNSaWdodCl7XG4gIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgdmFyIE8gICAgICA9IHRvT2JqZWN0KHRoYXQpXG4gICAgLCBzZWxmICAgPSBJT2JqZWN0KE8pXG4gICAgLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aClcbiAgICAsIGluZGV4ICA9IGlzUmlnaHQgPyBsZW5ndGggLSAxIDogMFxuICAgICwgaSAgICAgID0gaXNSaWdodCA/IC0xIDogMTtcbiAgaWYoYUxlbiA8IDIpZm9yKDs7KXtcbiAgICBpZihpbmRleCBpbiBzZWxmKXtcbiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaW5kZXggKz0gaTtcbiAgICBpZihpc1JpZ2h0ID8gaW5kZXggPCAwIDogbGVuZ3RoIDw9IGluZGV4KXtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgIH1cbiAgfVxuICBmb3IoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpaWYoaW5kZXggaW4gc2VsZil7XG4gICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgfVxuICByZXR1cm4gbWVtbztcbn07IiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBpc0FycmF5ICA9IHJlcXVpcmUoJy4vX2lzLWFycmF5JylcbiAgLCBTUEVDSUVTICA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWwpe1xuICB2YXIgQztcbiAgaWYoaXNBcnJheShvcmlnaW5hbCkpe1xuICAgIEMgPSBvcmlnaW5hbC5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSlDID0gdW5kZWZpbmVkO1xuICAgIGlmKGlzT2JqZWN0KEMpKXtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYoQyA9PT0gbnVsbClDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDO1xufTsiLCIvLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpXG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsLCBsZW5ndGgpe1xuICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpO1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIGlzT2JqZWN0ICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGludm9rZSAgICAgPSByZXF1aXJlKCcuL19pbnZva2UnKVxuICAsIGFycmF5U2xpY2UgPSBbXS5zbGljZVxuICAsIGZhY3RvcmllcyAgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uKEYsIGxlbiwgYXJncyl7XG4gIGlmKCEobGVuIGluIGZhY3Rvcmllcykpe1xuICAgIGZvcih2YXIgbiA9IFtdLCBpID0gMDsgaSA8IGxlbjsgaSsrKW5baV0gPSAnYVsnICsgaSArICddJztcbiAgICBmYWN0b3JpZXNbbGVuXSA9IEZ1bmN0aW9uKCdGLGEnLCAncmV0dXJuIG5ldyBGKCcgKyBuLmpvaW4oJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1tsZW5dKEYsIGFyZ3MpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiwgYXJncy4uLiAqLyl7XG4gIHZhciBmbiAgICAgICA9IGFGdW5jdGlvbih0aGlzKVxuICAgICwgcGFydEFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGJvdW5kID0gZnVuY3Rpb24oLyogYXJncy4uLiAqLyl7XG4gICAgdmFyIGFyZ3MgPSBwYXJ0QXJncy5jb25jYXQoYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmQgPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGludm9rZShmbiwgYXJncywgdGhhdCk7XG4gIH07XG4gIGlmKGlzT2JqZWN0KGZuLnByb3RvdHlwZSkpYm91bmQucHJvdG90eXBlID0gZm4ucHJvdG90eXBlO1xuICByZXR1cm4gYm91bmQ7XG59OyIsIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJylcbiAgLCBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKVxuICAvLyBFUzMgd3JvbmcgaGVyZVxuICAsIEFSRyA9IGNvZihmdW5jdGlvbigpeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uKGl0LCBrZXkpe1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07IiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgZFAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgY3JlYXRlICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJylcbiAgLCByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpXG4gICwgY3R4ICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIGFuSW5zdGFuY2UgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKVxuICAsIGRlZmluZWQgICAgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpXG4gICwgZm9yT2YgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKVxuICAsICRpdGVyRGVmaW5lID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKVxuICAsIHN0ZXAgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJylcbiAgLCBzZXRTcGVjaWVzICA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJylcbiAgLCBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJylcbiAgLCBmYXN0S2V5ICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5XG4gICwgU0laRSAgICAgICAgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uKHRoYXQsIGtleSl7XG4gIC8vIGZhc3QgY2FzZVxuICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSksIGVudHJ5O1xuICBpZihpbmRleCAhPT0gJ0YnKXJldHVybiB0aGF0Ll9pW2luZGV4XTtcbiAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gIGZvcihlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pe1xuICAgIGlmKGVudHJ5LmsgPT0ga2V5KXJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKXtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgaXRlcmFibGUpe1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYoaXRlcmFibGUgIT0gdW5kZWZpbmVkKWZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMS4zLjEgTWFwLnByb3RvdHlwZS5jbGVhcigpXG4gICAgICAvLyAyMy4yLjMuMiBTZXQucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpe1xuICAgICAgICBmb3IodmFyIHRoYXQgPSB0aGlzLCBkYXRhID0gdGhhdC5faSwgZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKXtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZihlbnRyeS5wKWVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoYXRbU0laRV0gPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjIuMy40IFNldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uKGtleSl7XG4gICAgICAgIHZhciB0aGF0ICA9IHRoaXNcbiAgICAgICAgICAsIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYoZW50cnkpe1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkublxuICAgICAgICAgICAgLCBwcmV2ID0gZW50cnkucDtcbiAgICAgICAgICBkZWxldGUgdGhhdC5faVtlbnRyeS5pXTtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZihwcmV2KXByZXYubiA9IG5leHQ7XG4gICAgICAgICAgaWYobmV4dCluZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmKHRoYXQuX2YgPT0gZW50cnkpdGhhdC5fZiA9IG5leHQ7XG4gICAgICAgICAgaWYodGhhdC5fbCA9PSBlbnRyeSl0aGF0Ll9sID0gcHJldjtcbiAgICAgICAgICB0aGF0W1NJWkVdLS07XG4gICAgICAgIH0gcmV0dXJuICEhZW50cnk7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMi4zLjYgU2V0LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICAvLyAyMy4xLjMuNSBNYXAucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiwgdGhhdCA9IHVuZGVmaW5lZCAqLyl7XG4gICAgICAgIGFuSW5zdGFuY2UodGhpcywgQywgJ2ZvckVhY2gnKTtcbiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpXG4gICAgICAgICAgLCBlbnRyeTtcbiAgICAgICAgd2hpbGUoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGlzLl9mKXtcbiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlKGVudHJ5ICYmIGVudHJ5LnIpZW50cnkgPSBlbnRyeS5wO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpe1xuICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh0aGlzLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmKERFU0NSSVBUT1JTKWRQKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIGRlZmluZWQodGhpc1tTSVpFXSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24odGhhdCwga2V5LCB2YWx1ZSl7XG4gICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KVxuICAgICAgLCBwcmV2LCBpbmRleDtcbiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcbiAgICBpZihlbnRyeSl7XG4gICAgICBlbnRyeS52ID0gdmFsdWU7XG4gICAgLy8gY3JlYXRlIG5ldyBlbnRyeVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGF0Ll9sID0gZW50cnkgPSB7XG4gICAgICAgIGk6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLCAvLyA8LSBpbmRleFxuICAgICAgICBrOiBrZXksICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0ga2V5XG4gICAgICAgIHY6IHZhbHVlLCAgICAgICAgICAgICAgICAgICAgICAvLyA8LSB2YWx1ZVxuICAgICAgICBwOiBwcmV2ID0gdGhhdC5fbCwgICAgICAgICAgICAgLy8gPC0gcHJldmlvdXMgZW50cnlcbiAgICAgICAgbjogdW5kZWZpbmVkLCAgICAgICAgICAgICAgICAgIC8vIDwtIG5leHQgZW50cnlcbiAgICAgICAgcjogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHJlbW92ZWRcbiAgICAgIH07XG4gICAgICBpZighdGhhdC5fZil0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZihwcmV2KXByZXYubiA9IGVudHJ5O1xuICAgICAgdGhhdFtTSVpFXSsrO1xuICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICBpZihpbmRleCAhPT0gJ0YnKXRoYXQuX2lbaW5kZXhdID0gZW50cnk7XG4gICAgfSByZXR1cm4gdGhhdDtcbiAgfSxcbiAgZ2V0RW50cnk6IGdldEVudHJ5LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uKEMsIE5BTUUsIElTX01BUCl7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uKGl0ZXJhdGVkLCBraW5kKXtcbiAgICAgIHRoaXMuX3QgPSBpdGVyYXRlZDsgIC8vIHRhcmdldFxuICAgICAgdGhpcy5fayA9IGtpbmQ7ICAgICAgLy8ga2luZFxuICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgLy8gcHJldmlvdXNcbiAgICB9LCBmdW5jdGlvbigpe1xuICAgICAgdmFyIHRoYXQgID0gdGhpc1xuICAgICAgICAsIGtpbmQgID0gdGhhdC5fa1xuICAgICAgICAsIGVudHJ5ID0gdGhhdC5fbDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUoZW50cnkgJiYgZW50cnkucillbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYoIXRoYXQuX3QgfHwgISh0aGF0Ll9sID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGF0Ll90Ll9mKSl7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHRoYXQuX3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBzdGVwKDEpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHN0ZXAgYnkga2luZFxuICAgICAgaWYoa2luZCA9PSAna2V5cycgIClyZXR1cm4gc3RlcCgwLCBlbnRyeS5rKTtcbiAgICAgIGlmKGtpbmQgPT0gJ3ZhbHVlcycpcmV0dXJuIHN0ZXAoMCwgZW50cnkudik7XG4gICAgICByZXR1cm4gc3RlcCgwLCBbZW50cnkuaywgZW50cnkudl0pO1xuICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6ICd2YWx1ZXMnICwgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJylcbiAgLCBmcm9tICAgID0gcmVxdWlyZSgnLi9fYXJyYXktZnJvbS1pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihOQU1FKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRvSlNPTigpe1xuICAgIGlmKGNsYXNzb2YodGhpcykgIT0gTkFNRSl0aHJvdyBUeXBlRXJyb3IoTkFNRSArIFwiI3RvSlNPTiBpc24ndCBnZW5lcmljXCIpO1xuICAgIHJldHVybiBmcm9tKHRoaXMpO1xuICB9O1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmVBbGwgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKVxuICAsIGdldFdlYWsgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpLmdldFdlYWtcbiAgLCBhbk9iamVjdCAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgaXNPYmplY3QgICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGFuSW5zdGFuY2UgICAgICAgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKVxuICAsIGZvck9mICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJylcbiAgLCBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKVxuICAsICRoYXMgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBhcnJheUZpbmQgICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpXG4gICwgYXJyYXlGaW5kSW5kZXggICAgPSBjcmVhdGVBcnJheU1ldGhvZCg2KVxuICAsIGlkICAgICAgICAgICAgICAgID0gMDtcblxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uKHRoYXQpe1xuICByZXR1cm4gdGhhdC5fbCB8fCAodGhhdC5fbCA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKTtcbn07XG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuYSA9IFtdO1xufTtcbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbihzdG9yZSwga2V5KXtcbiAgcmV0dXJuIGFycmF5RmluZChzdG9yZS5hLCBmdW5jdGlvbihpdCl7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uKGtleSl7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYoZW50cnkpcmV0dXJuIGVudHJ5WzFdO1xuICB9LFxuICBoYXM6IGZ1bmN0aW9uKGtleSl7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSl7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYoZW50cnkpZW50cnlbMV0gPSB2YWx1ZTtcbiAgICBlbHNlIHRoaXMuYS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0sXG4gICdkZWxldGUnOiBmdW5jdGlvbihrZXkpe1xuICAgIHZhciBpbmRleCA9IGFycmF5RmluZEluZGV4KHRoaXMuYSwgZnVuY3Rpb24oaXQpe1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYofmluZGV4KXRoaXMuYS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiAhIX5pbmRleDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKXtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgaXRlcmFibGUpe1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX2kgPSBpZCsrOyAgICAgIC8vIGNvbGxlY3Rpb24gaWRcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7IC8vIGxlYWsgc3RvcmUgZm9yIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RzXG4gICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uKGtleSl7XG4gICAgICAgIGlmKCFpc09iamVjdChrZXkpKXJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmKGRhdGEgPT09IHRydWUpcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhpcylbJ2RlbGV0ZSddKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSkgJiYgZGVsZXRlIGRhdGFbdGhpcy5faV07XG4gICAgICB9LFxuICAgICAgLy8gMjMuMy4zLjQgV2Vha01hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjQuMy40IFdlYWtTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSl7XG4gICAgICAgIGlmKCFpc09iamVjdChrZXkpKXJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmKGRhdGEgPT09IHRydWUpcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhpcykuaGFzKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24odGhhdCwga2V5LCB2YWx1ZSl7XG4gICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgIGlmKGRhdGEgPT09IHRydWUpdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCAkZXhwb3J0ICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgcmVkZWZpbmUgICAgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgcmVkZWZpbmVBbGwgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKVxuICAsIG1ldGEgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpXG4gICwgZm9yT2YgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKVxuICAsIGFuSW5zdGFuY2UgICAgICAgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKVxuICAsIGlzT2JqZWN0ICAgICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBmYWlscyAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCAkaXRlckRldGVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JylcbiAgLCBzZXRUb1N0cmluZ1RhZyAgICA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJylcbiAgLCBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSyl7XG4gIHZhciBCYXNlICA9IGdsb2JhbFtOQU1FXVxuICAgICwgQyAgICAgPSBCYXNlXG4gICAgLCBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCdcbiAgICAsIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZVxuICAgICwgTyAgICAgPSB7fTtcbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uKEtFWSl7XG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcbiAgICByZWRlZmluZShwcm90bywgS0VZLFxuICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24oYSl7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhhKXtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpe1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKGEpeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7IHJldHVybiB0aGlzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gc2V0KGEsIGIpeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9XG4gICAgKTtcbiAgfTtcbiAgaWYodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24oKXtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSl7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBpbnN0YW5jZSAgICAgICAgICAgICA9IG5ldyBDXG4gICAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nXG4gICAgICAsIEhBU05UX0NIQUlOSU5HICAgICAgID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZVxuICAgICAgLy8gVjggfiAgQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgICAsIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24oKXsgaW5zdGFuY2UuaGFzKDEpOyB9KVxuICAgICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgICAgLCBBQ0NFUFRfSVRFUkFCTEVTICAgICA9ICRpdGVyRGV0ZWN0KGZ1bmN0aW9uKGl0ZXIpeyBuZXcgQyhpdGVyKTsgfSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgICAgLCBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24oKXtcbiAgICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpXG4gICAgICAgICAgLCBpbmRleCAgICAgPSA1O1xuICAgICAgICB3aGlsZShpbmRleC0tKSRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICAgIH0pO1xuICAgIGlmKCFBQ0NFUFRfSVRFUkFCTEVTKXsgXG4gICAgICBDID0gd3JhcHBlcihmdW5jdGlvbih0YXJnZXQsIGl0ZXJhYmxlKXtcbiAgICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlLCB0YXJnZXQsIEMpO1xuICAgICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQy5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gQztcbiAgICB9XG4gICAgaWYoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTyl7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cbiAgICBpZihCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKWZpeE1ldGhvZChBRERFUik7XG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZihJU19XRUFLICYmIHByb3RvLmNsZWFyKWRlbGV0ZSBwcm90by5jbGVhcjtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChDICE9IEJhc2UpLCBPKTtcblxuICBpZighSVNfV0VBSyljb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59OyIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7dmVyc2lvbjogJzIuNC4wJ307XG5pZih0eXBlb2YgX19lID09ICdudW1iZXInKV9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWYiLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCBjcmVhdGVEZXNjICAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBpbmRleCwgdmFsdWUpe1xuICBpZihpbmRleCBpbiBvYmplY3QpJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07IiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgdGhhdCwgbGVuZ3RoKXtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYodGhhdCA9PT0gdW5kZWZpbmVkKXJldHVybiBmbjtcbiAgc3dpdGNoKGxlbmd0aCl7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24oYSl7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uKGEsIGIpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbihhLCBiLCBjKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pe1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgLCBOVU1CRVIgICAgICA9ICdudW1iZXInO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGhpbnQpe1xuICBpZihoaW50ICE9PSAnc3RyaW5nJyAmJiBoaW50ICE9PSBOVU1CRVIgJiYgaGludCAhPT0gJ2RlZmF1bHQnKXRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGhpbnQnKTtcbiAgcmV0dXJuIHRvUHJpbWl0aXZlKGFuT2JqZWN0KHRoaXMpLCBoaW50ICE9IE5VTUJFUik7XG59OyIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoaXQgPT0gdW5kZWZpbmVkKXRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTsiLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIDc7IH19KS5hICE9IDc7XG59KTsiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnRcbiAgLy8gaW4gb2xkIElFIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnXG4gICwgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07IiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7IiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKVxuICAsIGdPUFMgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpXG4gICwgcElFICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICB2YXIgcmVzdWx0ICAgICA9IGdldEtleXMoaXQpXG4gICAgLCBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZihnZXRTeW1ib2xzKXtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpXG4gICAgICAsIGlzRW51bSAgPSBwSUUuZlxuICAgICAgLCBpICAgICAgID0gMFxuICAgICAgLCBrZXk7XG4gICAgd2hpbGUoc3ltYm9scy5sZW5ndGggPiBpKWlmKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKXJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07IiwidmFyIGdsb2JhbCAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgY29yZSAgICAgID0gcmVxdWlyZSgnLi9fY29yZScpXG4gICwgaGlkZSAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgcmVkZWZpbmUgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKVxuICAsIGN0eCAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24odHlwZSwgbmFtZSwgc291cmNlKXtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkZcbiAgICAsIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0LkdcbiAgICAsIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlNcbiAgICAsIElTX1BST1RPICA9IHR5cGUgJiAkZXhwb3J0LlBcbiAgICAsIElTX0JJTkQgICA9IHR5cGUgJiAkZXhwb3J0LkJcbiAgICAsIHRhcmdldCAgICA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXVxuICAgICwgZXhwb3J0cyAgID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSlcbiAgICAsIGV4cFByb3RvICA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pXG4gICAgLCBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmKElTX0dMT0JBTClzb3VyY2UgPSBuYW1lO1xuICBmb3Ioa2V5IGluIHNvdXJjZSl7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYodGFyZ2V0KXJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmKGV4cG9ydHNba2V5XSAhPSBvdXQpaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpZXhwUHJvdG9ba2V5XSA9IG91dDtcbiAgfVxufTtcbmdsb2JhbC5jb3JlID0gY29yZTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWAgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7IiwidmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSl7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaChlKXtcbiAgICB0cnkge1xuICAgICAgcmVbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gIScvLi8nW0tFWV0ocmUpO1xuICAgIH0gY2F0Y2goZil7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gdHJ1ZTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjKXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGhpZGUgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgZmFpbHMgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgZGVmaW5lZCAgPSByZXF1aXJlKCcuL19kZWZpbmVkJylcbiAgLCB3a3MgICAgICA9IHJlcXVpcmUoJy4vX3drcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSwgbGVuZ3RoLCBleGVjKXtcbiAgdmFyIFNZTUJPTCAgID0gd2tzKEtFWSlcbiAgICAsIGZucyAgICAgID0gZXhlYyhkZWZpbmVkLCBTWU1CT0wsICcnW0tFWV0pXG4gICAgLCBzdHJmbiAgICA9IGZuc1swXVxuICAgICwgcnhmbiAgICAgPSBmbnNbMV07XG4gIGlmKGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbigpeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KSl7XG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbihzdHJpbmcsIGFyZyl7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24oc3RyaW5nKXsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgfVxufTsiLCIndXNlIHN0cmljdCc7XG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCl7XG4gIHZhciB0aGF0ICAgPSBhbk9iamVjdCh0aGlzKVxuICAgICwgcmVzdWx0ID0gJyc7XG4gIGlmKHRoYXQuZ2xvYmFsKSAgICAgcmVzdWx0ICs9ICdnJztcbiAgaWYodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZih0aGF0Lm11bHRpbGluZSkgIHJlc3VsdCArPSAnbSc7XG4gIGlmKHRoYXQudW5pY29kZSkgICAgcmVzdWx0ICs9ICd1JztcbiAgaWYodGhhdC5zdGlja3kpICAgICByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTsiLCJ2YXIgY3R4ICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIGNhbGwgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJylcbiAgLCBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKVxuICAsIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCB0b0xlbmd0aCAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgZ2V0SXRlckZuICAgPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpXG4gICwgQlJFQUsgICAgICAgPSB7fVxuICAsIFJFVFVSTiAgICAgID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUil7XG4gIHZhciBpdGVyRm4gPSBJVEVSQVRPUiA/IGZ1bmN0aW9uKCl7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSlcbiAgICAsIGYgICAgICA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKVxuICAgICwgaW5kZXggID0gMFxuICAgICwgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZih0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZihpc0FycmF5SXRlcihpdGVyRm4pKWZvcihsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKyl7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvcihpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyApe1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgID0gQlJFQUs7XG5leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBrZXkpe1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07IiwidmFyIGRQICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpe1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OyIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiA3OyB9fSkuYSAhPSA3O1xufSk7IiwidmFyIGlzT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgdGFyZ2V0LCBDKXtcbiAgdmFyIFAsIFMgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gIGlmKFMgIT09IEMgJiYgdHlwZW9mIFMgPT0gJ2Z1bmN0aW9uJyAmJiAoUCA9IFMucHJvdG90eXBlKSAhPT0gQy5wcm90b3R5cGUgJiYgaXNPYmplY3QoUCkgJiYgc2V0UHJvdG90eXBlT2Ype1xuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xuICB9IHJldHVybiB0aGF0O1xufTsiLCIvLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4sIGFyZ3MsIHRoYXQpe1xuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XG4gIHN3aXRjaChhcmdzLmxlbmd0aCl7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuICAgICAgICAgICAgICBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbn07IiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07IiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKVxuICAsIElURVJBVE9SICAgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKVxuICAsIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpO1xufTsiLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKXtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59OyIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBmbG9vciAgICA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSW50ZWdlcihpdCl7XG4gIHJldHVybiAhaXNPYmplY3QoaXQpICYmIGlzRmluaXRlKGl0KSAmJiBmbG9vcihpdCkgPT09IGl0O1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07IiwiLy8gNy4yLjggSXNSZWdFeHAoYXJndW1lbnQpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGNvZiAgICAgID0gcmVxdWlyZSgnLi9fY29mJylcbiAgLCBNQVRDSCAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTsiLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcyl7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaChlKXtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmKHJldCAhPT0gdW5kZWZpbmVkKWFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTsiLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJylcbiAgLCBkZXNjcmlwdG9yICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKVxuICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKVxuICAsIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpe1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHtuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSAgICAgICAgPSByZXF1aXJlKCcuL19saWJyYXJ5JylcbiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgcmVkZWZpbmUgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgaGlkZSAgICAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgSXRlcmF0b3JzICAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKVxuICAsICRpdGVyQ3JlYXRlICAgID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKVxuICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKVxuICAsIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICwgSVRFUkFUT1IgICAgICAgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKVxuICAsIEJVR0dZICAgICAgICAgID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpIC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbiAgLCBGRl9JVEVSQVRPUiAgICA9ICdAQGl0ZXJhdG9yJ1xuICAsIEtFWVMgICAgICAgICAgID0gJ2tleXMnXG4gICwgVkFMVUVTICAgICAgICAgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpe1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbihraW5kKXtcbiAgICBpZighQlVHR1kgJiYga2luZCBpbiBwcm90bylyZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoKGtpbmQpe1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCl7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgICAgICAgID0gTkFNRSArICcgSXRlcmF0b3InXG4gICAgLCBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVNcbiAgICAsIFZBTFVFU19CVUcgPSBmYWxzZVxuICAgICwgcHJvdG8gICAgICA9IEJhc2UucHJvdG90eXBlXG4gICAgLCAkbmF0aXZlICAgID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdXG4gICAgLCAkZGVmYXVsdCAgID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVClcbiAgICAsICRlbnRyaWVzICAgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkXG4gICAgLCAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZVxuICAgICwgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZigkYW55TmF0aXZlKXtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSkpO1xuICAgIGlmKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKXtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZighTElCUkFSWSAmJiAhaGFzKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUikpaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUyl7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKXsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpe1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gID0gcmV0dXJuVGhpcztcbiAgaWYoREVGQVVMVCl7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogIERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogICAgSVNfU0VUICAgICA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmKEZPUkNFRClmb3Ioa2V5IGluIG1ldGhvZHMpe1xuICAgICAgaWYoIShrZXkgaW4gcHJvdG8pKXJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07IiwidmFyIElURVJBVE9SICAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpXG4gICwgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24oKXsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24oKXsgdGhyb3cgMjsgfSk7XG59IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYywgc2tpcENsb3Npbmcpe1xuICBpZighc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORylyZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciAgPSBbN11cbiAgICAgICwgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbigpeyByZXR1cm4ge2RvbmU6IHNhZmUgPSB0cnVlfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24oKXsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGRvbmUsIHZhbHVlKXtcbiAgcmV0dXJuIHt2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZX07XG59OyIsIm1vZHVsZS5leHBvcnRzID0ge307IiwidmFyIGdldEtleXMgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJylcbiAgLCB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgZWwpe1xuICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KG9iamVjdClcbiAgICAsIGtleXMgICA9IGdldEtleXMoTylcbiAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoXG4gICAgLCBpbmRleCAgPSAwXG4gICAgLCBrZXk7XG4gIHdoaWxlKGxlbmd0aCA+IGluZGV4KWlmKE9ba2V5ID0ga2V5c1tpbmRleCsrXV0gPT09IGVsKXJldHVybiBrZXk7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7IiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwbTEgPSBNYXRoLmV4cG0xO1xubW9kdWxlLmV4cG9ydHMgPSAoISRleHBtMVxuICAvLyBPbGQgRkYgYnVnXG4gIHx8ICRleHBtMSgxMCkgPiAyMjAyNS40NjU3OTQ4MDY3MTkgfHwgJGV4cG0xKDEwKSA8IDIyMDI1LjQ2NTc5NDgwNjcxNjUxNjhcbiAgLy8gVG9yIEJyb3dzZXIgYnVnXG4gIHx8ICRleHBtMSgtMmUtMTcpICE9IC0yZS0xN1xuKSA/IGZ1bmN0aW9uIGV4cG0xKHgpe1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogTWF0aC5leHAoeCkgLSAxO1xufSA6ICRleHBtMTsiLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzFwIHx8IGZ1bmN0aW9uIGxvZzFwKHgpe1xuICByZXR1cm4gKHggPSAreCkgPiAtMWUtOCAmJiB4IDwgMWUtOCA/IHggLSB4ICogeCAvIDIgOiBNYXRoLmxvZygxICsgeCk7XG59OyIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uIHNpZ24oeCl7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwIHx8IHggIT0geCA/IHggOiB4IDwgMCA/IC0xIDogMTtcbn07IiwidmFyIE1FVEEgICAgID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKVxuICAsIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBoYXMgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgc2V0RGVzYyAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgaWQgICAgICAgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24oaXQpe1xuICBzZXREZXNjKGl0LCBNRVRBLCB7dmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9fSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbihpdCwgY3JlYXRlKXtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZighaXNPYmplY3QoaXQpKXJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmKCFoYXMoaXQsIE1FVEEpKXtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmKCFpc0V4dGVuc2libGUoaXQpKXJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZighY3JlYXRlKXJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24oaXQsIGNyZWF0ZSl7XG4gIGlmKCFoYXMoaXQsIE1FVEEpKXtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmKCFpc0V4dGVuc2libGUoaXQpKXJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYoIWNyZWF0ZSlyZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKXNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiAgICAgIE1FVEEsXG4gIE5FRUQ6ICAgICBmYWxzZSxcbiAgZmFzdEtleTogIGZhc3RLZXksXG4gIGdldFdlYWs6ICBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07IiwidmFyIE1hcCAgICAgPSByZXF1aXJlKCcuL2VzNi5tYXAnKVxuICAsICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHNoYXJlZCAgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbWV0YWRhdGEnKVxuICAsIHN0b3JlICAgPSBzaGFyZWQuc3RvcmUgfHwgKHNoYXJlZC5zdG9yZSA9IG5ldyAocmVxdWlyZSgnLi9lczYud2Vhay1tYXAnKSkpO1xuXG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IGZ1bmN0aW9uKHRhcmdldCwgdGFyZ2V0S2V5LCBjcmVhdGUpe1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgaWYoIXRhcmdldE1ldGFkYXRhKXtcbiAgICBpZighY3JlYXRlKXJldHVybiB1bmRlZmluZWQ7XG4gICAgc3RvcmUuc2V0KHRhcmdldCwgdGFyZ2V0TWV0YWRhdGEgPSBuZXcgTWFwKTtcbiAgfVxuICB2YXIga2V5TWV0YWRhdGEgPSB0YXJnZXRNZXRhZGF0YS5nZXQodGFyZ2V0S2V5KTtcbiAgaWYoIWtleU1ldGFkYXRhKXtcbiAgICBpZighY3JlYXRlKXJldHVybiB1bmRlZmluZWQ7XG4gICAgdGFyZ2V0TWV0YWRhdGEuc2V0KHRhcmdldEtleSwga2V5TWV0YWRhdGEgPSBuZXcgTWFwKTtcbiAgfSByZXR1cm4ga2V5TWV0YWRhdGE7XG59O1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBmdW5jdGlvbihNZXRhZGF0YUtleSwgTywgUCl7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgZmFsc2UpO1xuICByZXR1cm4gbWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogbWV0YWRhdGFNYXAuaGFzKE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBPLCBQKXtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlLCBPLCBQKXtcbiAgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCB0cnVlKS5zZXQoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUpO1xufTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uKHRhcmdldCwgdGFyZ2V0S2V5KXtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCh0YXJnZXQsIHRhcmdldEtleSwgZmFsc2UpXG4gICAgLCBrZXlzICAgICAgICA9IFtdO1xuICBpZihtZXRhZGF0YU1hcCltZXRhZGF0YU1hcC5mb3JFYWNoKGZ1bmN0aW9uKF8sIGtleSl7IGtleXMucHVzaChrZXkpOyB9KTtcbiAgcmV0dXJuIGtleXM7XG59O1xudmFyIHRvTWV0YUtleSA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiBTdHJpbmcoaXQpO1xufTtcbnZhciBleHAgPSBmdW5jdGlvbihPKXtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgTyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RvcmU6IHN0b3JlLFxuICBtYXA6IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAsXG4gIGhhczogb3JkaW5hcnlIYXNPd25NZXRhZGF0YSxcbiAgZ2V0OiBvcmRpbmFyeUdldE93bk1ldGFkYXRhLFxuICBzZXQ6IG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEsXG4gIGtleXM6IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzLFxuICBrZXk6IHRvTWV0YUtleSxcbiAgZXhwOiBleHBcbn07IiwidmFyIGdsb2JhbCAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldFxuICAsIE9ic2VydmVyICA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyXG4gICwgcHJvY2VzcyAgID0gZ2xvYmFsLnByb2Nlc3NcbiAgLCBQcm9taXNlICAgPSBnbG9iYWwuUHJvbWlzZVxuICAsIGlzTm9kZSAgICA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpe1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZShoZWFkKXtcbiAgICAgIGZuICAgPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoKGUpe1xuICAgICAgICBpZihoZWFkKW5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmKHBhcmVudClwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmKGlzTm9kZSl7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24oKXtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlclxuICB9IGVsc2UgaWYoT2JzZXJ2ZXIpe1xuICAgIHZhciB0b2dnbGUgPSB0cnVlXG4gICAgICAsIG5vZGUgICA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwge2NoYXJhY3RlckRhdGE6IHRydWV9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBub3RpZnkgPSBmdW5jdGlvbigpe1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpe1xuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24oKXtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uKCl7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGZuKXtcbiAgICB2YXIgdGFzayA9IHtmbjogZm4sIG5leHQ6IHVuZGVmaW5lZH07XG4gICAgaWYobGFzdClsYXN0Lm5leHQgPSB0YXNrO1xuICAgIGlmKCFoZWFkKXtcbiAgICAgIGhlYWQgPSB0YXNrO1xuICAgICAgbm90aWZ5KCk7XG4gICAgfSBsYXN0ID0gdGFzaztcbiAgfTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIGdldEtleXMgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKVxuICAsIGdPUFMgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKVxuICAsIHBJRSAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpXG4gICwgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIElPYmplY3QgID0gcmVxdWlyZSgnLi9faW9iamVjdCcpXG4gICwgJGFzc2lnbiAgPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICB2YXIgQSA9IHt9XG4gICAgLCBCID0ge31cbiAgICAsIFMgPSBTeW1ib2woKVxuICAgICwgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uKGspeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUICAgICA9IHRvT2JqZWN0KHRhcmdldClcbiAgICAsIGFMZW4gID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICwgaW5kZXggPSAxXG4gICAgLCBnZXRTeW1ib2xzID0gZ09QUy5mXG4gICAgLCBpc0VudW0gICAgID0gcElFLmY7XG4gIHdoaWxlKGFMZW4gPiBpbmRleCl7XG4gICAgdmFyIFMgICAgICA9IElPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKVxuICAgICAgLCBrZXlzICAgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpXG4gICAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoXG4gICAgICAsIGogICAgICA9IDBcbiAgICAgICwga2V5O1xuICAgIHdoaWxlKGxlbmd0aCA+IGopaWYoaXNFbnVtLmNhbGwoUywga2V5ID0ga2V5c1tqKytdKSlUW2tleV0gPSBTW2tleV07XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjsiLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgZFBzICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJylcbiAgLCBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKVxuICAsIElFX1BST1RPICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpXG4gICwgRW1wdHkgICAgICAgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9XG4gICwgUFJPVE9UWVBFICAgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbigpe1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKVxuICAgICwgaSAgICAgID0gZW51bUJ1Z0tleXMubGVuZ3RoXG4gICAgLCBsdCAgICAgPSAnPCdcbiAgICAsIGd0ICAgICA9ICc+J1xuICAgICwgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUoaS0tKWRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKXtcbiAgdmFyIHJlc3VsdDtcbiAgaWYoTyAhPT0gbnVsbCl7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKVxuICAsIHRvUHJpbWl0aXZlICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgLCBkUCAgICAgICAgICAgICA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpe1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYoSUU4X0RPTV9ERUZJTkUpdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbiAgaWYoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKXRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmKCd2YWx1ZScgaW4gQXR0cmlidXRlcylPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59OyIsInZhciBkUCAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGdldEtleXMgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpe1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgICA9IGdldEtleXMoUHJvcGVydGllcylcbiAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoXG4gICAgLCBpID0gMFxuICAgICwgUDtcbiAgd2hpbGUobGVuZ3RoID4gaSlkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07IiwiLy8gRm9yY2VkIHJlcGxhY2VtZW50IHByb3RvdHlwZSBhY2Nlc3NvcnMgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyl8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICB2YXIgSyA9IE1hdGgucmFuZG9tKCk7XG4gIC8vIEluIEZGIHRocm93cyBvbmx5IGRlZmluZSBtZXRob2RzXG4gIF9fZGVmaW5lU2V0dGVyX18uY2FsbChudWxsLCBLLCBmdW5jdGlvbigpeyAvKiBlbXB0eSAqL30pO1xuICBkZWxldGUgcmVxdWlyZSgnLi9fZ2xvYmFsJylbS107XG59KTsiLCJ2YXIgcElFICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJylcbiAgLCBjcmVhdGVEZXNjICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKVxuICAsIHRvSU9iamVjdCAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgdG9QcmltaXRpdmUgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJylcbiAgLCBnT1BEICAgICAgICAgICA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApe1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmKElFOF9ET01fREVGSU5FKXRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbiAgaWYoaGFzKE8sIFApKXJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07IiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIGdPUE4gICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZlxuICAsIHRvU3RyaW5nICA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24oaXQpe1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpe1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKVxuICAsIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTyl7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07IiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sczsiLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCB0b09iamVjdCAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgSUVfUFJPVE8gICAgPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJylcbiAgLCBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uKE8pe1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmKGhhcyhPLCBJRV9QUk9UTykpcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZih0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKXtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59OyIsInZhciBoYXMgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIHRvSU9iamVjdCAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpXG4gICwgSUVfUFJPVE8gICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgbmFtZXMpe1xuICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KG9iamVjdClcbiAgICAsIGkgICAgICA9IDBcbiAgICAsIHJlc3VsdCA9IFtdXG4gICAgLCBrZXk7XG4gIGZvcihrZXkgaW4gTylpZihrZXkgIT0gSUVfUFJPVE8paGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKWlmKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSl7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTsiLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJylcbiAgLCBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pe1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTsiLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTsiLCIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBjb3JlICAgID0gcmVxdWlyZSgnLi9fY29yZScpXG4gICwgZmFpbHMgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSwgZXhlYyl7XG4gIHZhciBmbiAgPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV1cbiAgICAsIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uKCl7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59OyIsInZhciBnZXRLZXlzICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpXG4gICwgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgaXNFbnVtICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGlzRW50cmllcyl7XG4gIHJldHVybiBmdW5jdGlvbihpdCl7XG4gICAgdmFyIE8gICAgICA9IHRvSU9iamVjdChpdClcbiAgICAgICwga2V5cyAgID0gZ2V0S2V5cyhPKVxuICAgICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICAgLCBpICAgICAgPSAwXG4gICAgICAsIHJlc3VsdCA9IFtdXG4gICAgICAsIGtleTtcbiAgICB3aGlsZShsZW5ndGggPiBpKWlmKGlzRW51bS5jYWxsKE8sIGtleSA9IGtleXNbaSsrXSkpe1xuICAgICAgcmVzdWx0LnB1c2goaXNFbnRyaWVzID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9O1xufTsiLCIvLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG52YXIgZ09QTiAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpXG4gICwgZ09QUyAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIFJlZmxlY3QgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdDtcbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdCAmJiBSZWZsZWN0Lm93bktleXMgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCl7XG4gIHZhciBrZXlzICAgICAgID0gZ09QTi5mKGFuT2JqZWN0KGl0KSlcbiAgICAsIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHJldHVybiBnZXRTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0U3ltYm9scyhpdCkpIDoga2V5cztcbn07IiwidmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VGbG9hdFxuICAsICR0cmltICAgICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xuXG5tb2R1bGUuZXhwb3J0cyA9IDEgLyAkcGFyc2VGbG9hdChyZXF1aXJlKCcuL19zdHJpbmctd3MnKSArICctMCcpICE9PSAtSW5maW5pdHkgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cil7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMylcbiAgICAsIHJlc3VsdCA9ICRwYXJzZUZsb2F0KHN0cmluZyk7XG4gIHJldHVybiByZXN1bHQgPT09IDAgJiYgc3RyaW5nLmNoYXJBdCgwKSA9PSAnLScgPyAtMCA6IHJlc3VsdDtcbn0gOiAkcGFyc2VGbG9hdDsiLCJ2YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VJbnRcbiAgLCAkdHJpbSAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW1cbiAgLCB3cyAgICAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKVxuICAsIGhleCAgICAgICA9IC9eW1xcLStdPzBbeFhdLztcblxubW9kdWxlLmV4cG9ydHMgPSAkcGFyc2VJbnQod3MgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQod3MgKyAnMHgxNicpICE9PSAyMiA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0ciwgcmFkaXgpe1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICByZXR1cm4gJHBhcnNlSW50KHN0cmluZywgKHJhZGl4ID4+PiAwKSB8fCAoaGV4LnRlc3Qoc3RyaW5nKSA/IDE2IDogMTApKTtcbn0gOiAkcGFyc2VJbnQ7IiwiJ3VzZSBzdHJpY3QnO1xudmFyIHBhdGggICAgICA9IHJlcXVpcmUoJy4vX3BhdGgnKVxuICAsIGludm9rZSAgICA9IHJlcXVpcmUoJy4vX2ludm9rZScpXG4gICwgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigvKiAuLi5wYXJncyAqLyl7XG4gIHZhciBmbiAgICAgPSBhRnVuY3Rpb24odGhpcylcbiAgICAsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIHBhcmdzICA9IEFycmF5KGxlbmd0aClcbiAgICAsIGkgICAgICA9IDBcbiAgICAsIF8gICAgICA9IHBhdGguX1xuICAgICwgaG9sZGVyID0gZmFsc2U7XG4gIHdoaWxlKGxlbmd0aCA+IGkpaWYoKHBhcmdzW2ldID0gYXJndW1lbnRzW2krK10pID09PSBfKWhvbGRlciA9IHRydWU7XG4gIHJldHVybiBmdW5jdGlvbigvKiAuLi5hcmdzICovKXtcbiAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICAgICwgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgaiA9IDAsIGsgPSAwLCBhcmdzO1xuICAgIGlmKCFob2xkZXIgJiYgIWFMZW4pcmV0dXJuIGludm9rZShmbiwgcGFyZ3MsIHRoYXQpO1xuICAgIGFyZ3MgPSBwYXJncy5zbGljZSgpO1xuICAgIGlmKGhvbGRlcilmb3IoO2xlbmd0aCA+IGo7IGorKylpZihhcmdzW2pdID09PSBfKWFyZ3Nbal0gPSBhcmd1bWVudHNbaysrXTtcbiAgICB3aGlsZShhTGVuID4gaylhcmdzLnB1c2goYXJndW1lbnRzW2srK10pO1xuICAgIHJldHVybiBpbnZva2UoZm4sIGFyZ3MsIHRoYXQpO1xuICB9O1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpOyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYml0bWFwLCB2YWx1ZSl7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZSAgOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZSAgICA6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWUgICAgICAgOiB2YWx1ZVxuICB9O1xufTsiLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0YXJnZXQsIHNyYywgc2FmZSl7XG4gIGZvcih2YXIga2V5IGluIHNyYylyZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIHNhZmUpO1xuICByZXR1cm4gdGFyZ2V0O1xufTsiLCJ2YXIgZ2xvYmFsICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBoaWRlICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCBoYXMgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIFNSQyAgICAgICA9IHJlcXVpcmUoJy4vX3VpZCcpKCdzcmMnKVxuICAsIFRPX1NUUklORyA9ICd0b1N0cmluZydcbiAgLCAkdG9TdHJpbmcgPSBGdW5jdGlvbltUT19TVFJJTkddXG4gICwgVFBMICAgICAgID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE8sIGtleSwgdmFsLCBzYWZlKXtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG4gIGlmKGlzRnVuY3Rpb24paGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZihPW2tleV0gPT09IHZhbClyZXR1cm47XG4gIGlmKGlzRnVuY3Rpb24paGFzKHZhbCwgU1JDKSB8fCBoaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7XG4gIGlmKE8gPT09IGdsb2JhbCl7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGlmKCFzYWZlKXtcbiAgICAgIGRlbGV0ZSBPW2tleV07XG4gICAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYoT1trZXldKU9ba2V5XSA9IHZhbDtcbiAgICAgIGVsc2UgaGlkZShPLCBrZXksIHZhbCk7XG4gICAgfVxuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpe1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHJlZ0V4cCwgcmVwbGFjZSl7XG4gIHZhciByZXBsYWNlciA9IHJlcGxhY2UgPT09IE9iamVjdChyZXBsYWNlKSA/IGZ1bmN0aW9uKHBhcnQpe1xuICAgIHJldHVybiByZXBsYWNlW3BhcnRdO1xuICB9IDogcmVwbGFjZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGl0KXtcbiAgICByZXR1cm4gU3RyaW5nKGl0KS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZXIpO1xuICB9O1xufTsiLCIvLyA3LjIuOSBTYW1lVmFsdWUoeCwgeSlcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmlzIHx8IGZ1bmN0aW9uIGlzKHgsIHkpe1xuICByZXR1cm4geCA9PT0geSA/IHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5IDogeCAhPSB4ICYmIHkgIT0geTtcbn07IiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24oTywgcHJvdG8pe1xuICBhbk9iamVjdChPKTtcbiAgaWYoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCl0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmdW5jdGlvbih0ZXN0LCBidWdneSwgc2V0KXtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoKGUpeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90byl7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYoYnVnZ3kpTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgZFAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKVxuICAsIFNQRUNJRVMgICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVkpe1xuICB2YXIgQyA9IGdsb2JhbFtLRVldO1xuICBpZihERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKWRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTsiLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIHRhZywgc3RhdCl7XG4gIGlmKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpZGVmKGl0LCBUQUcsIHtjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWd9KTtcbn07IiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJylcbiAgLCB1aWQgICAgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07IiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXydcbiAgLCBzdG9yZSAgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0ge30pO1xufTsiLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIFNQRUNJRVMgICA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE8sIEQpe1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yLCBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59OyIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obWV0aG9kLCBhcmcpe1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24oKXtcbiAgICBhcmcgPyBtZXRob2QuY2FsbChudWxsLCBmdW5jdGlvbigpe30sIDEpIDogbWV0aG9kLmNhbGwobnVsbCk7XG4gIH0pO1xufTsiLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgZGVmaW5lZCAgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oVE9fU1RSSU5HKXtcbiAgcmV0dXJuIGZ1bmN0aW9uKHRoYXQsIHBvcyl7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSlcbiAgICAgICwgaSA9IHRvSW50ZWdlcihwb3MpXG4gICAgICAsIGwgPSBzLmxlbmd0aFxuICAgICAgLCBhLCBiO1xuICAgIGlmKGkgPCAwIHx8IGkgPj0gbClyZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTsiLCIvLyBoZWxwZXIgZm9yIFN0cmluZyN7c3RhcnRzV2l0aCwgZW5kc1dpdGgsIGluY2x1ZGVzfVxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJylcbiAgLCBkZWZpbmVkICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpe1xuICBpZihpc1JlZ0V4cChzZWFyY2hTdHJpbmcpKXRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTsiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgZmFpbHMgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpXG4gICwgcXVvdCAgICA9IC9cIi9nO1xuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXG52YXIgY3JlYXRlSFRNTCA9IGZ1bmN0aW9uKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gIHZhciBTICA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpXG4gICAgLCBwMSA9ICc8JyArIHRhZztcbiAgaWYoYXR0cmlidXRlICE9PSAnJylwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE5BTUUsIGV4ZWMpe1xuICB2YXIgTyA9IHt9O1xuICBPW05BTUVdID0gZXhlYyhjcmVhdGVIVE1MKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbigpe1xuICAgIHZhciB0ZXN0ID0gJydbTkFNRV0oJ1wiJyk7XG4gICAgcmV0dXJuIHRlc3QgIT09IHRlc3QudG9Mb3dlckNhc2UoKSB8fCB0ZXN0LnNwbGl0KCdcIicpLmxlbmd0aCA+IDM7XG4gIH0pLCAnU3RyaW5nJywgTyk7XG59OyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIHJlcGVhdCAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG4gICwgZGVmaW5lZCAgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nLCBsZWZ0KXtcbiAgdmFyIFMgICAgICAgICAgICA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKVxuICAgICwgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGhcbiAgICAsIGZpbGxTdHIgICAgICA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKVxuICAgICwgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcbiAgaWYoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCB8fCBmaWxsU3RyID09ICcnKXJldHVybiBTO1xuICB2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aFxuICAgICwgc3RyaW5nRmlsbGVyID0gcmVwZWF0LmNhbGwoZmlsbFN0ciwgTWF0aC5jZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpO1xuICBpZihzdHJpbmdGaWxsZXIubGVuZ3RoID4gZmlsbExlbilzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gIHJldHVybiBsZWZ0ID8gc3RyaW5nRmlsbGVyICsgUyA6IFMgKyBzdHJpbmdGaWxsZXI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIGRlZmluZWQgICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpe1xuICB2YXIgc3RyID0gU3RyaW5nKGRlZmluZWQodGhpcykpXG4gICAgLCByZXMgPSAnJ1xuICAgICwgbiAgID0gdG9JbnRlZ2VyKGNvdW50KTtcbiAgaWYobiA8IDAgfHwgbiA9PSBJbmZpbml0eSl0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvcig7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKWlmKG4gJiAxKXJlcyArPSBzdHI7XG4gIHJldHVybiByZXM7XG59OyIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpXG4gICwgZmFpbHMgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBzcGFjZXMgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJylcbiAgLCBzcGFjZSAgID0gJ1snICsgc3BhY2VzICsgJ10nXG4gICwgbm9uICAgICA9ICdcXHUyMDBiXFx1MDA4NSdcbiAgLCBsdHJpbSAgID0gUmVnRXhwKCdeJyArIHNwYWNlICsgc3BhY2UgKyAnKicpXG4gICwgcnRyaW0gICA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7XG5cbnZhciBleHBvcnRlciA9IGZ1bmN0aW9uKEtFWSwgZXhlYywgQUxJQVMpe1xuICB2YXIgZXhwICAgPSB7fTtcbiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gISFzcGFjZXNbS0VZXSgpIHx8IG5vbltLRVldKCkgIT0gbm9uO1xuICB9KTtcbiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTtcbiAgaWYoQUxJQVMpZXhwW0FMSUFTXSA9IGZuO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFLCAnU3RyaW5nJywgZXhwKTtcbn07XG5cbi8vIDEgLT4gU3RyaW5nI3RyaW1MZWZ0XG4vLyAyIC0+IFN0cmluZyN0cmltUmlnaHRcbi8vIDMgLT4gU3RyaW5nI3RyaW1cbnZhciB0cmltID0gZXhwb3J0ZXIudHJpbSA9IGZ1bmN0aW9uKHN0cmluZywgVFlQRSl7XG4gIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICBpZihUWVBFICYgMSlzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICBpZihUWVBFICYgMilzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICByZXR1cm4gc3RyaW5nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlcjsiLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7IiwidmFyIGN0eCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgaW52b2tlICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faW52b2tlJylcbiAgLCBodG1sICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19odG1sJylcbiAgLCBjZWwgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJylcbiAgLCBnbG9iYWwgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIHByb2Nlc3MgICAgICAgICAgICA9IGdsb2JhbC5wcm9jZXNzXG4gICwgc2V0VGFzayAgICAgICAgICAgID0gZ2xvYmFsLnNldEltbWVkaWF0ZVxuICAsIGNsZWFyVGFzayAgICAgICAgICA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZVxuICAsIE1lc3NhZ2VDaGFubmVsICAgICA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbFxuICAsIGNvdW50ZXIgICAgICAgICAgICA9IDBcbiAgLCBxdWV1ZSAgICAgICAgICAgICAgPSB7fVxuICAsIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnXG4gICwgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24oKXtcbiAgdmFyIGlkID0gK3RoaXM7XG4gIGlmKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSl7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50KXtcbiAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7XG59O1xuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYoIXNldFRhc2sgfHwgIWNsZWFyVGFzayl7XG4gIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pe1xuICAgIHZhciBhcmdzID0gW10sIGkgPSAxO1xuICAgIHdoaWxlKGFyZ3VtZW50cy5sZW5ndGggPiBpKWFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uKCl7XG4gICAgICBpbnZva2UodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpe1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZihyZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcycpe1xuICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpe1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgfSBlbHNlIGlmKE1lc3NhZ2VDaGFubmVsKXtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsO1xuICAgIHBvcnQgICAgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKXtcbiAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXtcbiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpO1xuICAgIH07XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZihPTlJFQURZU1RBVEVDSEFOR0UgaW4gY2VsKCdzY3JpcHQnKSl7XG4gICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNlbCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbigpe1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4uY2FsbChpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogICBzZXRUYXNrLFxuICBjbGVhcjogY2xlYXJUYXNrXG59OyIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBtYXggICAgICAgPSBNYXRoLm1heFxuICAsIG1pbiAgICAgICA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpbmRleCwgbGVuZ3RoKXtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07IiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCAgPSBNYXRoLmNlaWxcbiAgLCBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59OyIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0JylcbiAgLCBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07IiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgbWluICAgICAgID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07IiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59OyIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIFMpe1xuICBpZighaXNPYmplY3QoaXQpKXJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDtcbiAgaWYodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsO1xuICBpZighUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59OyIsIid1c2Ugc3RyaWN0JztcbmlmKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykpe1xuICB2YXIgTElCUkFSWSAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKVxuICAgICwgZ2xvYmFsICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICAgLCBmYWlscyAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAgICwgJGV4cG9ydCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICAgLCAkdHlwZWQgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdHlwZWQnKVxuICAgICwgJGJ1ZmZlciAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpXG4gICAgLCBjdHggICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgICAsIGFuSW5zdGFuY2UgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpXG4gICAgLCBwcm9wZXJ0eURlc2MgICAgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpXG4gICAgLCBoaWRlICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICAgLCByZWRlZmluZUFsbCAgICAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJylcbiAgICAsIHRvSW50ZWdlciAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgICAsIHRvTGVuZ3RoICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAgICwgdG9JbmRleCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4JylcbiAgICAsIHRvUHJpbWl0aXZlICAgICAgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAgICwgaGFzICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICAgLCBzYW1lICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpXG4gICAgLCBjbGFzc29mICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpXG4gICAgLCBpc09iamVjdCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgICAsIHRvT2JqZWN0ICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAgICwgaXNBcnJheUl0ZXIgICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKVxuICAgICwgY3JlYXRlICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKVxuICAgICwgZ2V0UHJvdG90eXBlT2YgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAgICwgZ09QTiAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZlxuICAgICwgZ2V0SXRlckZuICAgICAgICAgICA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJylcbiAgICAsIHVpZCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL191aWQnKVxuICAgICwgd2tzICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3drcycpXG4gICAgLCBjcmVhdGVBcnJheU1ldGhvZCAgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpXG4gICAgLCBjcmVhdGVBcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKVxuICAgICwgc3BlY2llc0NvbnN0cnVjdG9yICA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKVxuICAgICwgQXJyYXlJdGVyYXRvcnMgICAgICA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJylcbiAgICAsIEl0ZXJhdG9ycyAgICAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKVxuICAgICwgJGl0ZXJEZXRlY3QgICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JylcbiAgICAsIHNldFNwZWNpZXMgICAgICAgICAgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpXG4gICAgLCBhcnJheUZpbGwgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpXG4gICAgLCBhcnJheUNvcHlXaXRoaW4gICAgID0gcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKVxuICAgICwgJERQICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICAgLCAkR09QRCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKVxuICAgICwgZFAgICAgICAgICAgICAgICAgICA9ICREUC5mXG4gICAgLCBnT1BEICAgICAgICAgICAgICAgID0gJEdPUEQuZlxuICAgICwgUmFuZ2VFcnJvciAgICAgICAgICA9IGdsb2JhbC5SYW5nZUVycm9yXG4gICAgLCBUeXBlRXJyb3IgICAgICAgICAgID0gZ2xvYmFsLlR5cGVFcnJvclxuICAgICwgVWludDhBcnJheSAgICAgICAgICA9IGdsb2JhbC5VaW50OEFycmF5XG4gICAgLCBBUlJBWV9CVUZGRVIgICAgICAgID0gJ0FycmF5QnVmZmVyJ1xuICAgICwgU0hBUkVEX0JVRkZFUiAgICAgICA9ICdTaGFyZWQnICsgQVJSQVlfQlVGRkVSXG4gICAgLCBCWVRFU19QRVJfRUxFTUVOVCAgID0gJ0JZVEVTX1BFUl9FTEVNRU5UJ1xuICAgICwgUFJPVE9UWVBFICAgICAgICAgICA9ICdwcm90b3R5cGUnXG4gICAgLCBBcnJheVByb3RvICAgICAgICAgID0gQXJyYXlbUFJPVE9UWVBFXVxuICAgICwgJEFycmF5QnVmZmVyICAgICAgICA9ICRidWZmZXIuQXJyYXlCdWZmZXJcbiAgICAsICREYXRhVmlldyAgICAgICAgICAgPSAkYnVmZmVyLkRhdGFWaWV3XG4gICAgLCBhcnJheUZvckVhY2ggICAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoMClcbiAgICAsIGFycmF5RmlsdGVyICAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCgyKVxuICAgICwgYXJyYXlTb21lICAgICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpXG4gICAgLCBhcnJheUV2ZXJ5ICAgICAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoNClcbiAgICAsIGFycmF5RmluZCAgICAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCg1KVxuICAgICwgYXJyYXlGaW5kSW5kZXggICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpXG4gICAgLCBhcnJheUluY2x1ZGVzICAgICAgID0gY3JlYXRlQXJyYXlJbmNsdWRlcyh0cnVlKVxuICAgICwgYXJyYXlJbmRleE9mICAgICAgICA9IGNyZWF0ZUFycmF5SW5jbHVkZXMoZmFsc2UpXG4gICAgLCBhcnJheVZhbHVlcyAgICAgICAgID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzXG4gICAgLCBhcnJheUtleXMgICAgICAgICAgID0gQXJyYXlJdGVyYXRvcnMua2V5c1xuICAgICwgYXJyYXlFbnRyaWVzICAgICAgICA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXNcbiAgICAsIGFycmF5TGFzdEluZGV4T2YgICAgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mXG4gICAgLCBhcnJheVJlZHVjZSAgICAgICAgID0gQXJyYXlQcm90by5yZWR1Y2VcbiAgICAsIGFycmF5UmVkdWNlUmlnaHQgICAgPSBBcnJheVByb3RvLnJlZHVjZVJpZ2h0XG4gICAgLCBhcnJheUpvaW4gICAgICAgICAgID0gQXJyYXlQcm90by5qb2luXG4gICAgLCBhcnJheVNvcnQgICAgICAgICAgID0gQXJyYXlQcm90by5zb3J0XG4gICAgLCBhcnJheVNsaWNlICAgICAgICAgID0gQXJyYXlQcm90by5zbGljZVxuICAgICwgYXJyYXlUb1N0cmluZyAgICAgICA9IEFycmF5UHJvdG8udG9TdHJpbmdcbiAgICAsIGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBBcnJheVByb3RvLnRvTG9jYWxlU3RyaW5nXG4gICAgLCBJVEVSQVRPUiAgICAgICAgICAgID0gd2tzKCdpdGVyYXRvcicpXG4gICAgLCBUQUcgICAgICAgICAgICAgICAgID0gd2tzKCd0b1N0cmluZ1RhZycpXG4gICAgLCBUWVBFRF9DT05TVFJVQ1RPUiAgID0gdWlkKCd0eXBlZF9jb25zdHJ1Y3RvcicpXG4gICAgLCBERUZfQ09OU1RSVUNUT1IgICAgID0gdWlkKCdkZWZfY29uc3RydWN0b3InKVxuICAgICwgQUxMX0NPTlNUUlVDVE9SUyAgICA9ICR0eXBlZC5DT05TVFJcbiAgICAsIFRZUEVEX0FSUkFZICAgICAgICAgPSAkdHlwZWQuVFlQRURcbiAgICAsIFZJRVcgICAgICAgICAgICAgICAgPSAkdHlwZWQuVklFV1xuICAgICwgV1JPTkdfTEVOR1RIICAgICAgICA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uKE8sIGxlbmd0aCl7XG4gICAgcmV0dXJuIGFsbG9jYXRlKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsZW5ndGgpO1xuICB9KTtcblxuICB2YXIgTElUVExFX0VORElBTiA9IGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG5ldyBVaW50MTZBcnJheShbMV0pLmJ1ZmZlcilbMF0gPT09IDE7XG4gIH0pO1xuXG4gIHZhciBGT1JDRURfU0VUID0gISFVaW50OEFycmF5ICYmICEhVWludDhBcnJheVtQUk9UT1RZUEVdLnNldCAmJiBmYWlscyhmdW5jdGlvbigpe1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciBzdHJpY3RUb0xlbmd0aCA9IGZ1bmN0aW9uKGl0LCBTQU1FKXtcbiAgICBpZihpdCA9PT0gdW5kZWZpbmVkKXRocm93IFR5cGVFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHZhciBudW1iZXIgPSAraXRcbiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoaXQpO1xuICAgIGlmKFNBTUUgJiYgIXNhbWUobnVtYmVyLCBsZW5ndGgpKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICByZXR1cm4gbGVuZ3RoO1xuICB9O1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uKGl0LCBCWVRFUyl7XG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihpdCk7XG4gICAgaWYob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUyl0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfTtcblxuICB2YXIgdmFsaWRhdGUgPSBmdW5jdGlvbihpdCl7XG4gICAgaWYoaXNPYmplY3QoaXQpICYmIFRZUEVEX0FSUkFZIGluIGl0KXJldHVybiBpdDtcbiAgICB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIHR5cGVkIGFycmF5IScpO1xuICB9O1xuXG4gIHZhciBhbGxvY2F0ZSA9IGZ1bmN0aW9uKEMsIGxlbmd0aCl7XG4gICAgaWYoIShpc09iamVjdChDKSAmJiBUWVBFRF9DT05TVFJVQ1RPUiBpbiBDKSl7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uKE8sIGxpc3Qpe1xuICAgIHJldHVybiBmcm9tTGlzdChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGlzdCk7XG4gIH07XG5cbiAgdmFyIGZyb21MaXN0ID0gZnVuY3Rpb24oQywgbGlzdCl7XG4gICAgdmFyIGluZGV4ICA9IDBcbiAgICAgICwgbGVuZ3RoID0gbGlzdC5sZW5ndGhcbiAgICAgICwgcmVzdWx0ID0gYWxsb2NhdGUoQywgbGVuZ3RoKTtcbiAgICB3aGlsZShsZW5ndGggPiBpbmRleClyZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbihpdCwga2V5LCBpbnRlcm5hbCl7XG4gICAgZFAoaXQsIGtleSwge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9fSk7XG4gIH07XG5cbiAgdmFyICRmcm9tID0gZnVuY3Rpb24gZnJvbShzb3VyY2UgLyosIG1hcGZuLCB0aGlzQXJnICovKXtcbiAgICB2YXIgTyAgICAgICA9IHRvT2JqZWN0KHNvdXJjZSlcbiAgICAgICwgYUxlbiAgICA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgbWFwZm4gICA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkXG4gICAgICAsIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICAsIGl0ZXJGbiAgPSBnZXRJdGVyRm4oTylcbiAgICAgICwgaSwgbGVuZ3RoLCB2YWx1ZXMsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSl7XG4gICAgICBmb3IoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgdmFsdWVzID0gW10sIGkgPSAwOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGkrKyl7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfSBPID0gdmFsdWVzO1xuICAgIH1cbiAgICBpZihtYXBwaW5nICYmIGFMZW4gPiAyKW1hcGZuID0gY3R4KG1hcGZuLCBhcmd1bWVudHNbMl0sIDIpO1xuICAgIGZvcihpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspe1xuICAgICAgcmVzdWx0W2ldID0gbWFwcGluZyA/IG1hcGZuKE9baV0sIGkpIDogT1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgJG9mID0gZnVuY3Rpb24gb2YoLyouLi5pdGVtcyovKXtcbiAgICB2YXIgaW5kZXggID0gMFxuICAgICAgLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7XG4gICAgd2hpbGUobGVuZ3RoID4gaW5kZXgpcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIGlPUyBTYWZhcmkgNi54IGZhaWxzIGhlcmVcbiAgdmFyIFRPX0xPQ0FMRV9CVUcgPSAhIVVpbnQ4QXJyYXkgJiYgZmFpbHMoZnVuY3Rpb24oKXsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XG5cbiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCl7XG4gICAgcmV0dXJuIGFycmF5VG9Mb2NhbGVTdHJpbmcuYXBwbHkoVE9fTE9DQUxFX0JVRyA/IGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSkgOiB2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICB2YXIgcHJvdG8gPSB7XG4gICAgY29weVdpdGhpbjogZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0IC8qLCBlbmQgKi8pe1xuICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiwgdGhpc0FyZyAqLyl7XG4gICAgICByZXR1cm4gYXJyYXlFdmVyeSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmlsbDogZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiwgc3RhcnQsIGVuZCAqLyl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUZpbGwuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qLCB0aGlzQXJnICovKXtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiwgdGhpc0FyZyAqLyl7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kKHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSAvKiwgdGhpc0FyZyAqLyl7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kSW5kZXgodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qLCB0aGlzQXJnICovKXtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXggKi8pe1xuICAgICAgcmV0dXJuIGFycmF5SW5kZXhPZih2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCAqLyl7XG4gICAgICByZXR1cm4gYXJyYXlJbmNsdWRlcyh2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlKb2luLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCAqLyl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUxhc3RJbmRleE9mLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbWFwOiBmdW5jdGlvbiBtYXAobWFwZm4gLyosIHRoaXNBcmcgKi8pe1xuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qLCBpbml0aWFsVmFsdWUgKi8peyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiwgaW5pdGlhbFZhbHVlICovKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlUmlnaHQuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCl7XG4gICAgICB2YXIgdGhhdCAgID0gdGhpc1xuICAgICAgICAsIGxlbmd0aCA9IHZhbGlkYXRlKHRoYXQpLmxlbmd0aFxuICAgICAgICAsIG1pZGRsZSA9IE1hdGguZmxvb3IobGVuZ3RoIC8gMilcbiAgICAgICAgLCBpbmRleCAgPSAwXG4gICAgICAgICwgdmFsdWU7XG4gICAgICB3aGlsZShpbmRleCA8IG1pZGRsZSl7XG4gICAgICAgIHZhbHVlICAgICAgICAgPSB0aGF0W2luZGV4XTtcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgICAgICB0aGF0W2xlbmd0aF0gID0gdmFsdWU7XG4gICAgICB9IHJldHVybiB0aGF0O1xuICAgIH0sXG4gICAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qLCB0aGlzQXJnICovKXtcbiAgICAgIHJldHVybiBhcnJheVNvbWUodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKXtcbiAgICAgIHJldHVybiBhcnJheVNvcnQuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgY29tcGFyZWZuKTtcbiAgICB9LFxuICAgIHN1YmFycmF5OiBmdW5jdGlvbiBzdWJhcnJheShiZWdpbiwgZW5kKXtcbiAgICAgIHZhciBPICAgICAgPSB2YWxpZGF0ZSh0aGlzKVxuICAgICAgICAsIGxlbmd0aCA9IE8ubGVuZ3RoXG4gICAgICAgICwgJGJlZ2luID0gdG9JbmRleChiZWdpbiwgbGVuZ3RoKTtcbiAgICAgIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pKShcbiAgICAgICAgTy5idWZmZXIsXG4gICAgICAgIE8uYnl0ZU9mZnNldCArICRiZWdpbiAqIE8uQllURVNfUEVSX0VMRU1FTlQsXG4gICAgICAgIHRvTGVuZ3RoKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvSW5kZXgoZW5kLCBsZW5ndGgpKSAtICRiZWdpbilcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIHZhciAkc2xpY2UgPSBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKXtcbiAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgc3RhcnQsIGVuZCkpO1xuICB9O1xuXG4gIHZhciAkc2V0ID0gZnVuY3Rpb24gc2V0KGFycmF5TGlrZSAvKiwgb2Zmc2V0ICovKXtcbiAgICB2YWxpZGF0ZSh0aGlzKTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9PZmZzZXQoYXJndW1lbnRzWzFdLCAxKVxuICAgICAgLCBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgICAgLCBzcmMgICAgPSB0b09iamVjdChhcnJheUxpa2UpXG4gICAgICAsIGxlbiAgICA9IHRvTGVuZ3RoKHNyYy5sZW5ndGgpXG4gICAgICAsIGluZGV4ICA9IDA7XG4gICAgaWYobGVuICsgb2Zmc2V0ID4gbGVuZ3RoKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZShpbmRleCA8IGxlbil0aGlzW29mZnNldCArIGluZGV4XSA9IHNyY1tpbmRleCsrXTtcbiAgfTtcblxuICB2YXIgJGl0ZXJhdG9ycyA9IHtcbiAgICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCl7XG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpe1xuICAgICAgcmV0dXJuIGFycmF5S2V5cy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCl7XG4gICAgICByZXR1cm4gYXJyYXlWYWx1ZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc1RBSW5kZXggPSBmdW5jdGlvbih0YXJnZXQsIGtleSl7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRhcmdldClcbiAgICAgICYmIHRhcmdldFtUWVBFRF9BUlJBWV1cbiAgICAgICYmIHR5cGVvZiBrZXkgIT0gJ3N5bWJvbCdcbiAgICAgICYmIGtleSBpbiB0YXJnZXRcbiAgICAgICYmIFN0cmluZygra2V5KSA9PSBTdHJpbmcoa2V5KTtcbiAgfTtcbiAgdmFyICRnZXREZXNjID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KXtcbiAgICByZXR1cm4gaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICAgID8gcHJvcGVydHlEZXNjKDIsIHRhcmdldFtrZXldKVxuICAgICAgOiBnT1BEKHRhcmdldCwga2V5KTtcbiAgfTtcbiAgdmFyICRzZXREZXNjID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2Mpe1xuICAgIGlmKGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICAmJiBpc09iamVjdChkZXNjKVxuICAgICAgJiYgaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgICAmJiAhaGFzKGRlc2MsICdnZXQnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnc2V0JylcbiAgICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzXG4gICAgICAmJiAhZGVzYy5jb25maWd1cmFibGVcbiAgICAgICYmICghaGFzKGRlc2MsICd3cml0YWJsZScpIHx8IGRlc2Mud3JpdGFibGUpXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnZW51bWVyYWJsZScpIHx8IGRlc2MuZW51bWVyYWJsZSlcbiAgICApe1xuICAgICAgdGFyZ2V0W2tleV0gPSBkZXNjLnZhbHVlO1xuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9IGVsc2UgcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZighQUxMX0NPTlNUUlVDVE9SUyl7XG4gICAgJEdPUEQuZiA9ICRnZXREZXNjO1xuICAgICREUC5mICAgPSAkc2V0RGVzYztcbiAgfVxuXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcbiAgICBkZWZpbmVQcm9wZXJ0eTogICAgICAgICAgICRzZXREZXNjXG4gIH0pO1xuXG4gIGlmKGZhaWxzKGZ1bmN0aW9uKCl7IGFycmF5VG9TdHJpbmcuY2FsbCh7fSk7IH0pKXtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gICAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgdmFyICRUeXBlZEFycmF5UHJvdG90eXBlJCA9IHJlZGVmaW5lQWxsKHt9LCBwcm90byk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJGl0ZXJhdG9ycyk7XG4gIGhpZGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBJVEVSQVRPUiwgJGl0ZXJhdG9ycy52YWx1ZXMpO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIHtcbiAgICBzbGljZTogICAgICAgICAgJHNsaWNlLFxuICAgIHNldDogICAgICAgICAgICAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiAgICBmdW5jdGlvbigpeyAvKiBub29wICovIH0sXG4gICAgdG9TdHJpbmc6ICAgICAgIGFycmF5VG9TdHJpbmcsXG4gICAgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZ1xuICB9KTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J1ZmZlcicsICdiJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlT2Zmc2V0JywgJ28nKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVMZW5ndGgnLCAnbCcpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnbGVuZ3RoJywgJ2UnKTtcbiAgZFAoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBUQUcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzW1RZUEVEX0FSUkFZXTsgfVxuICB9KTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpe1xuICAgIENMQU1QRUQgPSAhIUNMQU1QRUQ7XG4gICAgdmFyIE5BTUUgICAgICAgPSBLRVkgKyAoQ0xBTVBFRCA/ICdDbGFtcGVkJyA6ICcnKSArICdBcnJheSdcbiAgICAgICwgSVNOVF9VSU5UOCA9IE5BTUUgIT0gJ1VpbnQ4QXJyYXknXG4gICAgICAsIEdFVFRFUiAgICAgPSAnZ2V0JyArIEtFWVxuICAgICAgLCBTRVRURVIgICAgID0gJ3NldCcgKyBLRVlcbiAgICAgICwgVHlwZWRBcnJheSA9IGdsb2JhbFtOQU1FXVxuICAgICAgLCBCYXNlICAgICAgID0gVHlwZWRBcnJheSB8fCB7fVxuICAgICAgLCBUQUMgICAgICAgID0gVHlwZWRBcnJheSAmJiBnZXRQcm90b3R5cGVPZihUeXBlZEFycmF5KVxuICAgICAgLCBGT1JDRUQgICAgID0gIVR5cGVkQXJyYXkgfHwgISR0eXBlZC5BQlZcbiAgICAgICwgTyAgICAgICAgICA9IHt9XG4gICAgICAsIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5ICYmIFR5cGVkQXJyYXlbUFJPVE9UWVBFXTtcbiAgICB2YXIgZ2V0dGVyID0gZnVuY3Rpb24odGhhdCwgaW5kZXgpe1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uKHRoYXQsIGluZGV4LCB2YWx1ZSl7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICBpZihDTEFNUEVEKXZhbHVlID0gKHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSkpIDwgMCA/IDAgOiB2YWx1ZSA+IDB4ZmYgPyAweGZmIDogdmFsdWUgJiAweGZmO1xuICAgICAgZGF0YS52W1NFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgdmFsdWUsIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIGFkZEVsZW1lbnQgPSBmdW5jdGlvbih0aGF0LCBpbmRleCl7XG4gICAgICBkUCh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgcmV0dXJuIGdldHRlcih0aGlzLCBpbmRleCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpe1xuICAgICAgICAgIHJldHVybiBzZXR0ZXIodGhpcywgaW5kZXgsIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBpZihGT1JDRUQpe1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCl7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSwgJ19kJyk7XG4gICAgICAgIHZhciBpbmRleCAgPSAwXG4gICAgICAgICAgLCBvZmZzZXQgPSAwXG4gICAgICAgICAgLCBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7XG4gICAgICAgIGlmKCFpc09iamVjdChkYXRhKSl7XG4gICAgICAgICAgbGVuZ3RoICAgICA9IHN0cmljdFRvTGVuZ3RoKGRhdGEsIHRydWUpXG4gICAgICAgICAgYnl0ZUxlbmd0aCA9IGxlbmd0aCAqIEJZVEVTO1xuICAgICAgICAgIGJ1ZmZlciAgICAgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUil7XG4gICAgICAgICAgYnVmZmVyID0gZGF0YTtcbiAgICAgICAgICBvZmZzZXQgPSB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyk7XG4gICAgICAgICAgdmFyICRsZW4gPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgaWYoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgIGlmKCRsZW4gJSBCWVRFUyl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmKGJ5dGVMZW5ndGggPCAwKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9IHRvTGVuZ3RoKCRsZW5ndGgpICogQllURVM7XG4gICAgICAgICAgICBpZihieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbil0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aCA9IGJ5dGVMZW5ndGggLyBCWVRFUztcbiAgICAgICAgfSBlbHNlIGlmKFRZUEVEX0FSUkFZIGluIGRhdGEpe1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcbiAgICAgICAgICBiOiBidWZmZXIsXG4gICAgICAgICAgbzogb2Zmc2V0LFxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZTogbGVuZ3RoLFxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUoaW5kZXggPCBsZW5ndGgpYWRkRWxlbWVudCh0aGF0LCBpbmRleCsrKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IGNyZWF0ZSgkVHlwZWRBcnJheVByb3RvdHlwZSQpO1xuICAgICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBUeXBlZEFycmF5KTtcbiAgICB9IGVsc2UgaWYoISRpdGVyRGV0ZWN0KGZ1bmN0aW9uKGl0ZXIpe1xuICAgICAgLy8gVjggd29ya3Mgd2l0aCBpdGVyYXRvcnMsIGJ1dCBmYWlscyBpbiBtYW55IG90aGVyIGNhc2VzXG4gICAgICAvLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDU1MlxuICAgICAgbmV3IFR5cGVkQXJyYXkobnVsbCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9LCB0cnVlKSl7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbih0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKXtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NVxuICAgICAgICBpZighaXNPYmplY3QoZGF0YSkpcmV0dXJuIG5ldyBCYXNlKHN0cmljdFRvTGVuZ3RoKGRhdGEsIElTTlRfVUlOVDgpKTtcbiAgICAgICAgaWYoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUil7XG4gICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZihUWVBFRF9BUlJBWSBpbiBkYXRhKXJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICB9KTtcbiAgICAgIGFycmF5Rm9yRWFjaChUQUMgIT09IEZ1bmN0aW9uLnByb3RvdHlwZSA/IGdPUE4oQmFzZSkuY29uY2F0KGdPUE4oVEFDKSkgOiBnT1BOKEJhc2UpLCBmdW5jdGlvbihrZXkpe1xuICAgICAgICBpZighKGtleSBpbiBUeXBlZEFycmF5KSloaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTtcbiAgICAgIGlmKCFMSUJSQVJZKVR5cGVkQXJyYXlQcm90b3R5cGUuY29uc3RydWN0b3IgPSBUeXBlZEFycmF5O1xuICAgIH1cbiAgICB2YXIgJG5hdGl2ZUl0ZXJhdG9yICAgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXVxuICAgICAgLCBDT1JSRUNUX0lURVJfTkFNRSA9ICEhJG5hdGl2ZUl0ZXJhdG9yICYmICgkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSAndmFsdWVzJyB8fCAkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSB1bmRlZmluZWQpXG4gICAgICAsICRpdGVyYXRvciAgICAgICAgID0gJGl0ZXJhdG9ycy52YWx1ZXM7XG4gICAgaGlkZShUeXBlZEFycmF5LCBUWVBFRF9DT05TVFJVQ1RPUiwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBUWVBFRF9BUlJBWSwgTkFNRSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIERFRl9DT05TVFJVQ1RPUiwgVHlwZWRBcnJheSk7XG5cbiAgICBpZihDTEFNUEVEID8gbmV3IFR5cGVkQXJyYXkoMSlbVEFHXSAhPSBOQU1FIDogIShUQUcgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpe1xuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIE5BTUU7IH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIE9bTkFNRV0gPSBUeXBlZEFycmF5O1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoVHlwZWRBcnJheSAhPSBCYXNlKSwgTyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUywgTkFNRSwge1xuICAgICAgQllURVNfUEVSX0VMRU1FTlQ6IEJZVEVTLFxuICAgICAgZnJvbTogJGZyb20sXG4gICAgICBvZjogJG9mXG4gICAgfSk7XG5cbiAgICBpZighKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKWhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QLCBOQU1FLCBwcm90byk7XG5cbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRURfU0VULCBOQU1FLCB7c2V0OiAkc2V0fSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nICE9IGFycmF5VG9TdHJpbmcpLCBOQU1FLCB7dG9TdHJpbmc6IGFycmF5VG9TdHJpbmd9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24oKXtcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEpLnNsaWNlKCk7XG4gICAgfSksIE5BTUUsIHtzbGljZTogJHNsaWNlfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKVxuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbigpe1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7dG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZ30pO1xuXG4gICAgSXRlcmF0b3JzW05BTUVdID0gQ09SUkVDVF9JVEVSX05BTUUgPyAkbmF0aXZlSXRlcmF0b3IgOiAkaXRlcmF0b3I7XG4gICAgaWYoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKWhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgSVRFUkFUT1IsICRpdGVyYXRvcik7XG4gIH07XG59IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9OyIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgREVTQ1JJUFRPUlMgICAgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpXG4gICwgTElCUkFSWSAgICAgICAgPSByZXF1aXJlKCcuL19saWJyYXJ5JylcbiAgLCAkdHlwZWQgICAgICAgICA9IHJlcXVpcmUoJy4vX3R5cGVkJylcbiAgLCBoaWRlICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIHJlZGVmaW5lQWxsICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJylcbiAgLCBmYWlscyAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBhbkluc3RhbmNlICAgICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJylcbiAgLCB0b0ludGVnZXIgICAgICA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIHRvTGVuZ3RoICAgICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBnT1BOICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZlxuICAsIGRQICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGFycmF5RmlsbCAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpXG4gICwgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpXG4gICwgQVJSQVlfQlVGRkVSICAgPSAnQXJyYXlCdWZmZXInXG4gICwgREFUQV9WSUVXICAgICAgPSAnRGF0YVZpZXcnXG4gICwgUFJPVE9UWVBFICAgICAgPSAncHJvdG90eXBlJ1xuICAsIFdST05HX0xFTkdUSCAgID0gJ1dyb25nIGxlbmd0aCEnXG4gICwgV1JPTkdfSU5ERVggICAgPSAnV3JvbmcgaW5kZXghJ1xuICAsICRBcnJheUJ1ZmZlciAgID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl1cbiAgLCAkRGF0YVZpZXcgICAgICA9IGdsb2JhbFtEQVRBX1ZJRVddXG4gICwgTWF0aCAgICAgICAgICAgPSBnbG9iYWwuTWF0aFxuICAsIFJhbmdlRXJyb3IgICAgID0gZ2xvYmFsLlJhbmdlRXJyb3JcbiAgLCBJbmZpbml0eSAgICAgICA9IGdsb2JhbC5JbmZpbml0eVxuICAsIEJhc2VCdWZmZXIgICAgID0gJEFycmF5QnVmZmVyXG4gICwgYWJzICAgICAgICAgICAgPSBNYXRoLmFic1xuICAsIHBvdyAgICAgICAgICAgID0gTWF0aC5wb3dcbiAgLCBmbG9vciAgICAgICAgICA9IE1hdGguZmxvb3JcbiAgLCBsb2cgICAgICAgICAgICA9IE1hdGgubG9nXG4gICwgTE4yICAgICAgICAgICAgPSBNYXRoLkxOMlxuICAsIEJVRkZFUiAgICAgICAgID0gJ2J1ZmZlcidcbiAgLCBCWVRFX0xFTkdUSCAgICA9ICdieXRlTGVuZ3RoJ1xuICAsIEJZVEVfT0ZGU0VUICAgID0gJ2J5dGVPZmZzZXQnXG4gICwgJEJVRkZFUiAgICAgICAgPSBERVNDUklQVE9SUyA/ICdfYicgOiBCVUZGRVJcbiAgLCAkTEVOR1RIICAgICAgICA9IERFU0NSSVBUT1JTID8gJ19sJyA6IEJZVEVfTEVOR1RIXG4gICwgJE9GRlNFVCAgICAgICAgPSBERVNDUklQVE9SUyA/ICdfbycgOiBCWVRFX09GRlNFVDtcblxuLy8gSUVFRTc1NCBjb252ZXJzaW9ucyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2llZWU3NTRcbnZhciBwYWNrSUVFRTc1NCA9IGZ1bmN0aW9uKHZhbHVlLCBtTGVuLCBuQnl0ZXMpe1xuICB2YXIgYnVmZmVyID0gQXJyYXkobkJ5dGVzKVxuICAgICwgZUxlbiAgID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxXG4gICAgLCBlTWF4ICAgPSAoMSA8PCBlTGVuKSAtIDFcbiAgICAsIGVCaWFzICA9IGVNYXggPj4gMVxuICAgICwgcnQgICAgID0gbUxlbiA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMFxuICAgICwgaSAgICAgID0gMFxuICAgICwgcyAgICAgID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMFxuICAgICwgZSwgbSwgYztcbiAgdmFsdWUgPSBhYnModmFsdWUpXG4gIGlmKHZhbHVlICE9IHZhbHVlIHx8IHZhbHVlID09PSBJbmZpbml0eSl7XG4gICAgbSA9IHZhbHVlICE9IHZhbHVlID8gMSA6IDA7XG4gICAgZSA9IGVNYXg7XG4gIH0gZWxzZSB7XG4gICAgZSA9IGZsb29yKGxvZyh2YWx1ZSkgLyBMTjIpO1xuICAgIGlmKHZhbHVlICogKGMgPSBwb3coMiwgLWUpKSA8IDEpe1xuICAgICAgZS0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZihlICsgZUJpYXMgPj0gMSl7XG4gICAgICB2YWx1ZSArPSBydCAvIGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogcG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmKHZhbHVlICogYyA+PSAyKXtcbiAgICAgIGUrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG4gICAgaWYoZSArIGVCaWFzID49IGVNYXgpe1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYoZSArIGVCaWFzID49IDEpe1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSBlICsgZUJpYXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IDA7XG4gICAgfVxuICB9XG4gIGZvcig7IG1MZW4gPj0gODsgYnVmZmVyW2krK10gPSBtICYgMjU1LCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcbiAgZSA9IGUgPDwgbUxlbiB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yKDsgZUxlbiA+IDA7IGJ1ZmZlcltpKytdID0gZSAmIDI1NSwgZSAvPSAyNTYsIGVMZW4gLT0gOCk7XG4gIGJ1ZmZlclstLWldIHw9IHMgKiAxMjg7XG4gIHJldHVybiBidWZmZXI7XG59O1xudmFyIHVucGFja0lFRUU3NTQgPSBmdW5jdGlvbihidWZmZXIsIG1MZW4sIG5CeXRlcyl7XG4gIHZhciBlTGVuICA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICAgICwgZU1heCAgPSAoMSA8PCBlTGVuKSAtIDFcbiAgICAsIGVCaWFzID0gZU1heCA+PiAxXG4gICAgLCBuQml0cyA9IGVMZW4gLSA3XG4gICAgLCBpICAgICA9IG5CeXRlcyAtIDFcbiAgICAsIHMgICAgID0gYnVmZmVyW2ktLV1cbiAgICAsIGUgICAgID0gcyAmIDEyN1xuICAgICwgbTtcbiAgcyA+Pj0gNztcbiAgZm9yKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcbiAgbSA9IGUgJiAoMSA8PCAtbkJpdHMpIC0gMTtcbiAgZSA+Pj0gLW5CaXRzO1xuICBuQml0cyArPSBtTGVuO1xuICBmb3IoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBpZihlID09PSAwKXtcbiAgICBlID0gMSAtIGVCaWFzO1xuICB9IGVsc2UgaWYoZSA9PT0gZU1heCl7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiBzID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBwb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7XG59O1xuXG52YXIgdW5wYWNrSTMyID0gZnVuY3Rpb24oYnl0ZXMpe1xuICByZXR1cm4gYnl0ZXNbM10gPDwgMjQgfCBieXRlc1syXSA8PCAxNiB8IGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbn07XG52YXIgcGFja0k4ID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gW2l0ICYgMHhmZl07XG59O1xudmFyIHBhY2tJMTYgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZl07XG59O1xudmFyIHBhY2tJMzIgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZiwgaXQgPj4gMTYgJiAweGZmLCBpdCA+PiAyNCAmIDB4ZmZdO1xufTtcbnZhciBwYWNrRjY0ID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDUyLCA4KTtcbn07XG52YXIgcGFja0YzMiA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCAyMywgNCk7XG59O1xuXG52YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24oQywga2V5LCBpbnRlcm5hbCl7XG4gIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gdGhpc1tpbnRlcm5hbF07IH19KTtcbn07XG5cbnZhciBnZXQgPSBmdW5jdGlvbih2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKXtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4XG4gICAgLCBpbnRJbmRleCA9IHRvSW50ZWdlcihudW1JbmRleCk7XG4gIGlmKG51bUluZGV4ICE9IGludEluZGV4IHx8IGludEluZGV4IDwgMCB8fCBpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSl0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYlxuICAgICwgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF1cbiAgICAsIHBhY2sgID0gc3RvcmUuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgYnl0ZXMpO1xuICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcGFjay5yZXZlcnNlKCk7XG59O1xudmFyIHNldCA9IGZ1bmN0aW9uKHZpZXcsIGJ5dGVzLCBpbmRleCwgY29udmVyc2lvbiwgdmFsdWUsIGlzTGl0dGxlRW5kaWFuKXtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4XG4gICAgLCBpbnRJbmRleCA9IHRvSW50ZWdlcihudW1JbmRleCk7XG4gIGlmKG51bUluZGV4ICE9IGludEluZGV4IHx8IGludEluZGV4IDwgMCB8fCBpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSl0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYlxuICAgICwgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF1cbiAgICAsIHBhY2sgID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgYnl0ZXM7IGkrKylzdG9yZVtzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBieXRlcyAtIGkgLSAxXTtcbn07XG5cbnZhciB2YWxpZGF0ZUFycmF5QnVmZmVyQXJndW1lbnRzID0gZnVuY3Rpb24odGhhdCwgbGVuZ3RoKXtcbiAgYW5JbnN0YW5jZSh0aGF0LCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG4gIHZhciBudW1iZXJMZW5ndGggPSArbGVuZ3RoXG4gICAgLCBieXRlTGVuZ3RoICAgPSB0b0xlbmd0aChudW1iZXJMZW5ndGgpO1xuICBpZihudW1iZXJMZW5ndGggIT0gYnl0ZUxlbmd0aCl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gIHJldHVybiBieXRlTGVuZ3RoO1xufTtcblxuaWYoISR0eXBlZC5BQlYpe1xuICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpe1xuICAgIHZhciBieXRlTGVuZ3RoID0gdmFsaWRhdGVBcnJheUJ1ZmZlckFyZ3VtZW50cyh0aGlzLCBsZW5ndGgpO1xuICAgIHRoaXMuX2IgICAgICAgPSBhcnJheUZpbGwuY2FsbChBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKXtcbiAgICBhbkluc3RhbmNlKHRoaXMsICREYXRhVmlldywgREFUQV9WSUVXKTtcbiAgICBhbkluc3RhbmNlKGJ1ZmZlciwgJEFycmF5QnVmZmVyLCBEQVRBX1ZJRVcpO1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBidWZmZXJbJExFTkdUSF1cbiAgICAgICwgb2Zmc2V0ICAgICAgID0gdG9JbnRlZ2VyKGJ5dGVPZmZzZXQpO1xuICAgIGlmKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKXRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCEnKTtcbiAgICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gYnVmZmVyTGVuZ3RoIC0gb2Zmc2V0IDogdG9MZW5ndGgoYnl0ZUxlbmd0aCk7XG4gICAgaWYob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmKERFU0NSSVBUT1JTKXtcbiAgICBhZGRHZXR0ZXIoJEFycmF5QnVmZmVyLCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQlVGRkVSLCAnX2InKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9PRkZTRVQsICdfbycpO1xuICB9XG5cbiAgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBnZXRJbnQ4OiBmdW5jdGlvbiBnZXRJbnQ4KGJ5dGVPZmZzZXQpe1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KXtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF07XG4gICAgfSxcbiAgICBnZXRJbnQxNjogZnVuY3Rpb24gZ2V0SW50MTYoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbiAgICB9LFxuICAgIGdldEludDMyOiBmdW5jdGlvbiBnZXRJbnQzMihieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSk7XG4gICAgfSxcbiAgICBnZXRVaW50MzI6IGZ1bmN0aW9uIGdldFVpbnQzMihieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgMjMsIDQpO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDUyLCA4KTtcbiAgICB9LFxuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpe1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKXtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQxNjogZnVuY3Rpb24gc2V0VWludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0SW50MzI6IGZ1bmN0aW9uIHNldEludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDMyOiBmdW5jdGlvbiBzZXRGbG9hdDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tGMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0RmxvYXQ2NDogZnVuY3Rpb24gc2V0RmxvYXQ2NChieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYoIWZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcjsgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gIH0pIHx8ICFmYWlscyhmdW5jdGlvbigpe1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSl7XG4gICAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKXtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih2YWxpZGF0ZUFycmF5QnVmZmVyQXJndW1lbnRzKHRoaXMsIGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IodmFyIGtleXMgPSBnT1BOKEJhc2VCdWZmZXIpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7ICl7XG4gICAgICBpZighKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9O1xuICAgIGlmKCFMSUJSQVJZKUFycmF5QnVmZmVyUHJvdG8uY29uc3RydWN0b3IgPSAkQXJyYXlCdWZmZXI7XG4gIH1cbiAgLy8gaU9TIFNhZmFyaSA3LnggYnVnXG4gIHZhciB2aWV3ID0gbmV3ICREYXRhVmlldyhuZXcgJEFycmF5QnVmZmVyKDIpKVxuICAgICwgJHNldEludDggPSAkRGF0YVZpZXdbUFJPVE9UWVBFXS5zZXRJbnQ4O1xuICB2aWV3LnNldEludDgoMCwgMjE0NzQ4MzY0OCk7XG4gIHZpZXcuc2V0SW50OCgxLCAyMTQ3NDgzNjQ5KTtcbiAgaWYodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKXtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKXtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7IiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgaGlkZSAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgdWlkICAgID0gcmVxdWlyZSgnLi9fdWlkJylcbiAgLCBUWVBFRCAgPSB1aWQoJ3R5cGVkX2FycmF5JylcbiAgLCBWSUVXICAgPSB1aWQoJ3ZpZXcnKVxuICAsIEFCViAgICA9ICEhKGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBnbG9iYWwuRGF0YVZpZXcpXG4gICwgQ09OU1RSID0gQUJWXG4gICwgaSA9IDAsIGwgPSA5LCBUeXBlZDtcblxudmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMgPSAoXG4gICdJbnQ4QXJyYXksVWludDhBcnJheSxVaW50OENsYW1wZWRBcnJheSxJbnQxNkFycmF5LFVpbnQxNkFycmF5LEludDMyQXJyYXksVWludDMyQXJyYXksRmxvYXQzMkFycmF5LEZsb2F0NjRBcnJheSdcbikuc3BsaXQoJywnKTtcblxud2hpbGUoaSA8IGwpe1xuICBpZihUeXBlZCA9IGdsb2JhbFtUeXBlZEFycmF5Q29uc3RydWN0b3JzW2krK11dKXtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVFlQRUQsIHRydWUpO1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgfSBlbHNlIENPTlNUUiA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQUJWOiAgICBBQlYsXG4gIENPTlNUUjogQ09OU1RSLFxuICBUWVBFRDogIFRZUEVELFxuICBWSUVXOiAgIFZJRVdcbn07IiwidmFyIGlkID0gMFxuICAsIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07IiwidmFyIGdsb2JhbCAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBjb3JlICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKVxuICAsIExJQlJBUlkgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpXG4gICwgd2tzRXh0ICAgICAgICAgPSByZXF1aXJlKCcuL193a3MtZXh0JylcbiAgLCBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5hbWUpe1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZihuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKWRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHt2YWx1ZTogd2tzRXh0LmYobmFtZSl9KTtcbn07IiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7IiwidmFyIHN0b3JlICAgICAgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJylcbiAgLCB1aWQgICAgICAgID0gcmVxdWlyZSgnLi9fdWlkJylcbiAgLCBTeW1ib2wgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sXG4gICwgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihuYW1lKXtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7IiwidmFyIGNsYXNzb2YgICA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKVxuICAsIElURVJBVE9SICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpXG4gICwgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoaXQgIT0gdW5kZWZpbmVkKXJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2JlbmphbWluZ3IvUmV4RXhwLmVzY2FwZVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRyZSAgICAgPSByZXF1aXJlKCcuL19yZXBsYWNlcicpKC9bXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZ0V4cCcsIHtlc2NhcGU6IGZ1bmN0aW9uIGVzY2FwZShpdCl7IHJldHVybiAkcmUoaXQpOyB9fSk7XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7Y29weVdpdGhpbjogcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKX0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnY29weVdpdGhpbicpOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkZXZlcnkgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZXZlcnksIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pe1xuICAgIHJldHVybiAkZXZlcnkodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7IiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge2ZpbGw6IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKX0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmlsbCcpOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkZmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZmlsdGVyLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNyAvIDE1LjQuNC4yMCBBcnJheS5wcm90b3R5cGUuZmlsdGVyKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKXtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkZmluZCAgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDYpXG4gICwgS0VZICAgICA9ICdmaW5kSW5kZXgnXG4gICwgZm9yY2VkICA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYoS0VZIGluIFtdKUFycmF5KDEpW0tFWV0oZnVuY3Rpb24oKXsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbi8qLCB0aGF0ID0gdW5kZWZpbmVkICovKXtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjggQXJyYXkucHJvdG90eXBlLmZpbmQocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRmaW5kICAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNSlcbiAgLCBLRVkgICAgID0gJ2ZpbmQnXG4gICwgZm9yY2VkICA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYoS0VZIGluIFtdKUFycmF5KDEpW0tFWV0oZnVuY3Rpb24oKXsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuLyosIHRoYXQgPSB1bmRlZmluZWQgKi8pe1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRmb3JFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApXG4gICwgU1RSSUNUICAgPSByZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZm9yRWFjaCwgdHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIVNUUklDVCwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTAgLyAxNS40LjQuMTggQXJyYXkucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLyl7XG4gICAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciBjdHggICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBjYWxsICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpXG4gICwgaXNBcnJheUl0ZXIgICAgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJylcbiAgLCB0b0xlbmd0aCAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKVxuICAsIGdldEl0ZXJGbiAgICAgID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbihpdGVyKXsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZS8qLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCovKXtcbiAgICB2YXIgTyAgICAgICA9IHRvT2JqZWN0KGFycmF5TGlrZSlcbiAgICAgICwgQyAgICAgICA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXlcbiAgICAgICwgYUxlbiAgICA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgbWFwZm4gICA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkXG4gICAgICAsIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICAsIGluZGV4ICAgPSAwXG4gICAgICAsIGl0ZXJGbiAgPSBnZXRJdGVyRm4oTylcbiAgICAgICwgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmKG1hcHBpbmcpbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZihpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSl7XG4gICAgICBmb3IoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEM7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKyl7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKXtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkaW5kZXhPZiAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSlcbiAgLCAkbmF0aXZlICAgICAgID0gW10uaW5kZXhPZlxuICAsIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjExIC8gMTUuNC40LjE0IEFycmF5LnByb3RvdHlwZS5pbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXggPSAwICovKXtcbiAgICByZXR1cm4gTkVHQVRJVkVfWkVST1xuICAgICAgLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMFxuICAgICAgOiAkaW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTsiLCIvLyAyMi4xLjIuMiAvIDE1LjQuMy4yIEFycmF5LmlzQXJyYXkoYXJnKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdBcnJheScsIHtpc0FycmF5OiByZXF1aXJlKCcuL19pcy1hcnJheScpfSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKVxuICAsIHN0ZXAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKVxuICAsIEl0ZXJhdG9ycyAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKVxuICAsIHRvSU9iamVjdCAgICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24oaXRlcmF0ZWQsIGtpbmQpe1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uKCl7XG4gIHZhciBPICAgICA9IHRoaXMuX3RcbiAgICAsIGtpbmQgID0gdGhpcy5fa1xuICAgICwgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKXtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmKGtpbmQgPT0gJ2tleXMnICApcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZihraW5kID09ICd2YWx1ZXMnKXJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTsiLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmpvaW4oc2VwYXJhdG9yKVxudmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgYXJyYXlKb2luID0gW10uam9pbjtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIHN0cmluZ3NcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKHJlcXVpcmUoJy4vX2lvYmplY3QnKSAhPSBPYmplY3QgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShhcnJheUpvaW4pKSwgJ0FycmF5Jywge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcil7XG4gICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRvSU9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9JT2JqZWN0ICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIHRvSW50ZWdlciAgICAgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCB0b0xlbmd0aCAgICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCAkbmF0aXZlICAgICAgID0gW10ubGFzdEluZGV4T2ZcbiAgLCBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTQgLyAxNS40LjQuMTUgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCA9IEBbKi0xXSAqLyl7XG4gICAgLy8gY29udmVydCAtMCB0byArMFxuICAgIGlmKE5FR0FUSVZFX1pFUk8pcmV0dXJuICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwO1xuICAgIHZhciBPICAgICAgPSB0b0lPYmplY3QodGhpcylcbiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpXG4gICAgICAsIGluZGV4ICA9IGxlbmd0aCAtIDE7XG4gICAgaWYoYXJndW1lbnRzLmxlbmd0aCA+IDEpaW5kZXggPSBNYXRoLm1pbihpbmRleCwgdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpO1xuICAgIGlmKGluZGV4IDwgMClpbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICAgIGZvcig7aW5kZXggPj0gMDsgaW5kZXgtLSlpZihpbmRleCBpbiBPKWlmKE9baW5kZXhdID09PSBzZWFyY2hFbGVtZW50KXJldHVybiBpbmRleCB8fCAwO1xuICAgIHJldHVybiAtMTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRtYXAgICAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5tYXAsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNSAvIDE1LjQuNC4xOSBBcnJheS5wcm90b3R5cGUubWFwKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKXtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIFdlYktpdCBBcnJheS5vZiBpc24ndCBnZW5lcmljXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgZnVuY3Rpb24gRigpe31cbiAgcmV0dXJuICEoQXJyYXkub2YuY2FsbChGKSBpbnN0YW5jZW9mIEYpO1xufSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjMgQXJyYXkub2YoIC4uLml0ZW1zKVxuICBvZjogZnVuY3Rpb24gb2YoLyogLi4uYXJncyAqLyl7XG4gICAgdmFyIGluZGV4ICA9IDBcbiAgICAgICwgYUxlbiAgID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCByZXN1bHQgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpKGFMZW4pO1xuICAgIHdoaWxlKGFMZW4gPiBpbmRleCljcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBhTGVuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2VSaWdodCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE5IC8gMTUuNC40LjIyIEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodChjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKXtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIHRydWUpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTggLyAxNS40LjQuMjEgQXJyYXkucHJvdG90eXBlLnJlZHVjZShjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pe1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgZmFsc2UpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgaHRtbCAgICAgICA9IHJlcXVpcmUoJy4vX2h0bWwnKVxuICAsIGNvZiAgICAgICAgPSByZXF1aXJlKCcuL19jb2YnKVxuICAsIHRvSW5kZXggICAgPSByZXF1aXJlKCcuL190by1pbmRleCcpXG4gICwgdG9MZW5ndGggICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgaWYoaHRtbClhcnJheVNsaWNlLmNhbGwoaHRtbCk7XG59KSwgJ0FycmF5Jywge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2UoYmVnaW4sIGVuZCl7XG4gICAgdmFyIGxlbiAgID0gdG9MZW5ndGgodGhpcy5sZW5ndGgpXG4gICAgICAsIGtsYXNzID0gY29mKHRoaXMpO1xuICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kO1xuICAgIGlmKGtsYXNzID09ICdBcnJheScpcmV0dXJuIGFycmF5U2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICB2YXIgc3RhcnQgID0gdG9JbmRleChiZWdpbiwgbGVuKVxuICAgICAgLCB1cFRvICAgPSB0b0luZGV4KGVuZCwgbGVuKVxuICAgICAgLCBzaXplICAgPSB0b0xlbmd0aCh1cFRvIC0gc3RhcnQpXG4gICAgICAsIGNsb25lZCA9IEFycmF5KHNpemUpXG4gICAgICAsIGkgICAgICA9IDA7XG4gICAgZm9yKDsgaSA8IHNpemU7IGkrKyljbG9uZWRbaV0gPSBrbGFzcyA9PSAnU3RyaW5nJ1xuICAgICAgPyB0aGlzLmNoYXJBdChzdGFydCArIGkpXG4gICAgICA6IHRoaXNbc3RhcnQgKyBpXTtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHNvbWUgICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnNvbWUsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yMyAvIDE1LjQuNC4xNyBBcnJheS5wcm90b3R5cGUuc29tZShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKXtcbiAgICByZXR1cm4gJHNvbWUodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgdG9PYmplY3QgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBmYWlscyAgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgJHNvcnQgICAgID0gW10uc29ydFxuICAsIHRlc3QgICAgICA9IFsxLCAyLCAzXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24oKXtcbiAgLy8gSUU4LVxuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbigpe1xuICAvLyBWOCBidWdcbiAgdGVzdC5zb3J0KG51bGwpO1xuICAvLyBPbGQgV2ViS2l0XG59KSB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRzb3J0KSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjI1IEFycmF5LnByb3RvdHlwZS5zb3J0KGNvbXBhcmVmbilcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pe1xuICAgIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZFxuICAgICAgPyAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpKVxuICAgICAgOiAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpLCBhRnVuY3Rpb24oY29tcGFyZWZuKSk7XG4gIH1cbn0pOyIsInJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ0FycmF5Jyk7IiwiLy8gMjAuMy4zLjEgLyAxNS45LjQuNCBEYXRlLm5vdygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0RhdGUnLCB7bm93OiBmdW5jdGlvbigpeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH19KTsiLCIndXNlIHN0cmljdCc7XG4vLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGZhaWxzICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgZ2V0VGltZSA9IERhdGUucHJvdG90eXBlLmdldFRpbWU7XG5cbnZhciBseiA9IGZ1bmN0aW9uKG51bSl7XG4gIHJldHVybiBudW0gPiA5ID8gbnVtIDogJzAnICsgbnVtO1xufTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbigpe1xuICByZXR1cm4gbmV3IERhdGUoLTVlMTMgLSAxKS50b0lTT1N0cmluZygpICE9ICcwMzg1LTA3LTI1VDA3OjA2OjM5Ljk5OVonO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uKCl7XG4gIG5ldyBEYXRlKE5hTikudG9JU09TdHJpbmcoKTtcbn0pKSwgJ0RhdGUnLCB7XG4gIHRvSVNPU3RyaW5nOiBmdW5jdGlvbiB0b0lTT1N0cmluZygpe1xuICAgIGlmKCFpc0Zpbml0ZShnZXRUaW1lLmNhbGwodGhpcykpKXRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICAgIHZhciBkID0gdGhpc1xuICAgICAgLCB5ID0gZC5nZXRVVENGdWxsWWVhcigpXG4gICAgICAsIG0gPSBkLmdldFVUQ01pbGxpc2Vjb25kcygpXG4gICAgICAsIHMgPSB5IDwgMCA/ICctJyA6IHkgPiA5OTk5ID8gJysnIDogJyc7XG4gICAgcmV0dXJuIHMgKyAoJzAwMDAwJyArIE1hdGguYWJzKHkpKS5zbGljZShzID8gLTYgOiAtNCkgK1xuICAgICAgJy0nICsgbHooZC5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKyBseihkLmdldFVUQ0RhdGUoKSkgK1xuICAgICAgJ1QnICsgbHooZC5nZXRVVENIb3VycygpKSArICc6JyArIGx6KGQuZ2V0VVRDTWludXRlcygpKSArXG4gICAgICAnOicgKyBseihkLmdldFVUQ1NlY29uZHMoKSkgKyAnLicgKyAobSA+IDk5ID8gbSA6ICcwJyArIGx6KG0pKSArICdaJztcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b09iamVjdCAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBuZXcgRGF0ZShOYU4pLnRvSlNPTigpICE9PSBudWxsIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHt0b0lTT1N0cmluZzogZnVuY3Rpb24oKXsgcmV0dXJuIDE7IH19KSAhPT0gMTtcbn0pLCAnRGF0ZScsIHtcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oa2V5KXtcbiAgICB2YXIgTyAgPSB0b09iamVjdCh0aGlzKVxuICAgICAgLCBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pOyIsInZhciBUT19QUklNSVRJVkUgPSByZXF1aXJlKCcuL193a3MnKSgndG9QcmltaXRpdmUnKVxuICAsIHByb3RvICAgICAgICA9IERhdGUucHJvdG90eXBlO1xuXG5pZighKFRPX1BSSU1JVElWRSBpbiBwcm90bykpcmVxdWlyZSgnLi9faGlkZScpKHByb3RvLCBUT19QUklNSVRJVkUsIHJlcXVpcmUoJy4vX2RhdGUtdG8tcHJpbWl0aXZlJykpOyIsInZhciBEYXRlUHJvdG8gICAgPSBEYXRlLnByb3RvdHlwZVxuICAsIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnXG4gICwgVE9fU1RSSU5HICAgID0gJ3RvU3RyaW5nJ1xuICAsICR0b1N0cmluZyAgICA9IERhdGVQcm90b1tUT19TVFJJTkddXG4gICwgZ2V0VGltZSAgICAgID0gRGF0ZVByb3RvLmdldFRpbWU7XG5pZihuZXcgRGF0ZShOYU4pICsgJycgIT0gSU5WQUxJRF9EQVRFKXtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShEYXRlUHJvdG8sIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lLmNhbGwodGhpcyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/ICR0b1N0cmluZy5jYWxsKHRoaXMpIDogSU5WQUxJRF9EQVRFO1xuICB9KTtcbn0iLCIvLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywge2JpbmQ6IHJlcXVpcmUoJy4vX2JpbmQnKX0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciBpc09iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBIQVNfSU5TVEFOQ0UgICA9IHJlcXVpcmUoJy4vX3drcycpKCdoYXNJbnN0YW5jZScpXG4gICwgRnVuY3Rpb25Qcm90byAgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4vLyAxOS4yLjMuNiBGdW5jdGlvbi5wcm90b3R5cGVbQEBoYXNJbnN0YW5jZV0oVilcbmlmKCEoSEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG8pKXJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoRnVuY3Rpb25Qcm90bywgSEFTX0lOU1RBTkNFLCB7dmFsdWU6IGZ1bmN0aW9uKE8pe1xuICBpZih0eXBlb2YgdGhpcyAhPSAnZnVuY3Rpb24nIHx8ICFpc09iamVjdChPKSlyZXR1cm4gZmFsc2U7XG4gIGlmKCFpc09iamVjdCh0aGlzLnByb3RvdHlwZSkpcmV0dXJuIE8gaW5zdGFuY2VvZiB0aGlzO1xuICAvLyBmb3IgZW52aXJvbm1lbnQgdy9vIG5hdGl2ZSBgQEBoYXNJbnN0YW5jZWAgbG9naWMgZW5vdWdoIGBpbnN0YW5jZW9mYCwgYnV0IGFkZCB0aGlzOlxuICB3aGlsZShPID0gZ2V0UHJvdG90eXBlT2YoTykpaWYodGhpcy5wcm90b3R5cGUgPT09IE8pcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn19KTsiLCJ2YXIgZFAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZcbiAgLCBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpXG4gICwgaGFzICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgRlByb3RvICAgICA9IEZ1bmN0aW9uLnByb3RvdHlwZVxuICAsIG5hbWVSRSAgICAgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS9cbiAgLCBOQU1FICAgICAgID0gJ25hbWUnO1xuXG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbigpe1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8vIDE5LjIuNC4yIG5hbWVcbk5BTUUgaW4gRlByb3RvIHx8IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgZFAoRlByb3RvLCBOQU1FLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpe1xuICAgIHRyeSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICAgICAgLCBuYW1lID0gKCcnICsgdGhhdCkubWF0Y2gobmFtZVJFKVsxXTtcbiAgICAgIGhhcyh0aGF0LCBOQU1FKSB8fCAhaXNFeHRlbnNpYmxlKHRoYXQpIHx8IGRQKHRoYXQsIE5BTUUsIGNyZWF0ZURlc2MoNSwgbmFtZSkpO1xuICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xuXG4vLyAyMy4xIE1hcCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKSgnTWFwJywgZnVuY3Rpb24oZ2V0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpe1xuICAgIHZhciBlbnRyeSA9IHN0cm9uZy5nZXRFbnRyeSh0aGlzLCBrZXkpO1xuICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52O1xuICB9LFxuICAvLyAyMy4xLjMuOSBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKXtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZywgdHJ1ZSk7IiwiLy8gMjAuMi4yLjMgTWF0aC5hY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGxvZzFwICAgPSByZXF1aXJlKCcuL19tYXRoLWxvZzFwJylcbiAgLCBzcXJ0ICAgID0gTWF0aC5zcXJ0XG4gICwgJGFjb3NoICA9IE1hdGguYWNvc2g7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYWNvc2hcbiAgLy8gVjggYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzUwOVxuICAmJiBNYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgPT0gNzEwXG4gIC8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hY29zaChJbmZpbml0eSkgLT4gTmFOIFxuICAmJiAkYWNvc2goSW5maW5pdHkpID09IEluZmluaXR5XG4pLCAnTWF0aCcsIHtcbiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpe1xuICAgIHJldHVybiAoeCA9ICt4KSA8IDEgPyBOYU4gOiB4ID4gOTQ5MDYyNjUuNjI0MjUxNTZcbiAgICAgID8gTWF0aC5sb2coeCkgKyBNYXRoLkxOMlxuICAgICAgOiBsb2cxcCh4IC0gMSArIHNxcnQoeCAtIDEpICogc3FydCh4ICsgMSkpO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGFzaW5oICA9IE1hdGguYXNpbmg7XG5cbmZ1bmN0aW9uIGFzaW5oKHgpe1xuICByZXR1cm4gIWlzRmluaXRlKHggPSAreCkgfHwgeCA9PSAwID8geCA6IHggPCAwID8gLWFzaW5oKC14KSA6IE1hdGgubG9nKHggKyBNYXRoLnNxcnQoeCAqIHggKyAxKSk7XG59XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hc2luaCgwKSAtPiAtMCBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXNpbmggJiYgMSAvICRhc2luaCgwKSA+IDApLCAnTWF0aCcsIHthc2luaDogYXNpbmh9KTsiLCIvLyAyMC4yLjIuNyBNYXRoLmF0YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGF0YW5oICA9IE1hdGguYXRhbmg7XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hdGFuaCgtMCkgLT4gMCBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXRhbmggJiYgMSAvICRhdGFuaCgtMCkgPCAwKSwgJ01hdGgnLCB7XG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KXtcbiAgICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiBNYXRoLmxvZygoMSArIHgpIC8gKDEgLSB4KSkgLyAyO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuOSBNYXRoLmNicnQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBzaWduICAgID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2JydDogZnVuY3Rpb24gY2JydCh4KXtcbiAgICByZXR1cm4gc2lnbih4ID0gK3gpICogTWF0aC5wb3coTWF0aC5hYnMoeCksIDEgLyAzKTtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjExIE1hdGguY2x6MzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2x6MzI6IGZ1bmN0aW9uIGNsejMyKHgpe1xuICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBNYXRoLmZsb29yKE1hdGgubG9nKHggKyAwLjUpICogTWF0aC5MT0cyRSkgOiAzMjtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjEyIE1hdGguY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGV4cCAgICAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjb3NoOiBmdW5jdGlvbiBjb3NoKHgpe1xuICAgIHJldHVybiAoZXhwKHggPSAreCkgKyBleHAoLXgpKSAvIDI7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGV4cG0xICA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoJGV4cG0xICE9IE1hdGguZXhwbTEpLCAnTWF0aCcsIHtleHBtMTogJGV4cG0xfSk7IiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBzaWduICAgICAgPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKVxuICAsIHBvdyAgICAgICA9IE1hdGgucG93XG4gICwgRVBTSUxPTiAgID0gcG93KDIsIC01MilcbiAgLCBFUFNJTE9OMzIgPSBwb3coMiwgLTIzKVxuICAsIE1BWDMyICAgICA9IHBvdygyLCAxMjcpICogKDIgLSBFUFNJTE9OMzIpXG4gICwgTUlOMzIgICAgID0gcG93KDIsIC0xMjYpO1xuXG52YXIgcm91bmRUaWVzVG9FdmVuID0gZnVuY3Rpb24obil7XG4gIHJldHVybiBuICsgMSAvIEVQU0lMT04gLSAxIC8gRVBTSUxPTjtcbn07XG5cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBmcm91bmQ6IGZ1bmN0aW9uIGZyb3VuZCh4KXtcbiAgICB2YXIgJGFicyAgPSBNYXRoLmFicyh4KVxuICAgICAgLCAkc2lnbiA9IHNpZ24oeClcbiAgICAgICwgYSwgcmVzdWx0O1xuICAgIGlmKCRhYnMgPCBNSU4zMilyZXR1cm4gJHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oJGFicyAvIE1JTjMyIC8gRVBTSUxPTjMyKSAqIE1JTjMyICogRVBTSUxPTjMyO1xuICAgIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgICBpZihyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KXJldHVybiAkc2lnbiAqIEluZmluaXR5O1xuICAgIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjE3IE1hdGguaHlwb3QoW3ZhbHVlMVssIHZhbHVlMlssIOKApiBdXV0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgYWJzICAgICA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMil7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgc3VtICA9IDBcbiAgICAgICwgaSAgICA9IDBcbiAgICAgICwgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgbGFyZyA9IDBcbiAgICAgICwgYXJnLCBkaXY7XG4gICAgd2hpbGUoaSA8IGFMZW4pe1xuICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTtcbiAgICAgIGlmKGxhcmcgPCBhcmcpe1xuICAgICAgICBkaXYgID0gbGFyZyAvIGFyZztcbiAgICAgICAgc3VtICA9IHN1bSAqIGRpdiAqIGRpdiArIDE7XG4gICAgICAgIGxhcmcgPSBhcmc7XG4gICAgICB9IGVsc2UgaWYoYXJnID4gMCl7XG4gICAgICAgIGRpdiAgPSBhcmcgLyBsYXJnO1xuICAgICAgICBzdW0gKz0gZGl2ICogZGl2O1xuICAgICAgfSBlbHNlIHN1bSArPSBhcmc7XG4gICAgfVxuICAgIHJldHVybiBsYXJnID09PSBJbmZpbml0eSA/IEluZmluaXR5IDogbGFyZyAqIE1hdGguc3FydChzdW0pO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuMTggTWF0aC5pbXVsKHgsIHkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGltdWwgICA9IE1hdGguaW11bDtcblxuLy8gc29tZSBXZWJLaXQgdmVyc2lvbnMgZmFpbHMgd2l0aCBiaWcgbnVtYmVycywgc29tZSBoYXMgd3JvbmcgYXJpdHlcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByZXR1cm4gJGltdWwoMHhmZmZmZmZmZiwgNSkgIT0gLTUgfHwgJGltdWwubGVuZ3RoICE9IDI7XG59KSwgJ01hdGgnLCB7XG4gIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSl7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZlxuICAgICAgLCB4biA9ICt4XG4gICAgICAsIHluID0gK3lcbiAgICAgICwgeGwgPSBVSU5UMTYgJiB4blxuICAgICAgLCB5bCA9IFVJTlQxNiAmIHluO1xuICAgIHJldHVybiAwIHwgeGwgKiB5bCArICgoVUlOVDE2ICYgeG4gPj4+IDE2KSAqIHlsICsgeGwgKiAoVUlOVDE2ICYgeW4gPj4+IDE2KSA8PCAxNiA+Pj4gMCk7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi4yMSBNYXRoLmxvZzEwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzEwOiBmdW5jdGlvbiBsb2cxMCh4KXtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMTA7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7bG9nMXA6IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKX0pOyIsIi8vIDIwLjIuMi4yMiBNYXRoLmxvZzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMjogZnVuY3Rpb24gbG9nMih4KXtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMjtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge3NpZ246IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpfSk7IiwiLy8gMjAuMi4yLjMwIE1hdGguc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGV4cG0xICAgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJylcbiAgLCBleHAgICAgID0gTWF0aC5leHA7XG5cbi8vIFY4IG5lYXIgQ2hyb21pdW0gMzggaGFzIGEgcHJvYmxlbSB3aXRoIHZlcnkgc21hbGwgbnVtYmVyc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiAhTWF0aC5zaW5oKC0yZS0xNykgIT0gLTJlLTE3O1xufSksICdNYXRoJywge1xuICBzaW5oOiBmdW5jdGlvbiBzaW5oKHgpe1xuICAgIHJldHVybiBNYXRoLmFicyh4ID0gK3gpIDwgMVxuICAgICAgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMlxuICAgICAgOiAoZXhwKHggLSAxKSAtIGV4cCgteCAtIDEpKSAqIChNYXRoLkUgLyAyKTtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGV4cG0xICAgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJylcbiAgLCBleHAgICAgID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdGFuaDogZnVuY3Rpb24gdGFuaCh4KXtcbiAgICB2YXIgYSA9IGV4cG0xKHggPSAreClcbiAgICAgICwgYiA9IGV4cG0xKC14KTtcbiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cCh4KSArIGV4cCgteCkpO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpe1xuICAgIHJldHVybiAoaXQgPiAwID8gTWF0aC5mbG9vciA6IE1hdGguY2VpbCkoaXQpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGhhcyAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBjb2YgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2NvZicpXG4gICwgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJylcbiAgLCB0b1ByaW1pdGl2ZSAgICAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXG4gICwgZmFpbHMgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgZ09QTiAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmZcbiAgLCBnT1BEICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZlxuICAsIGRQICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsICR0cmltICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltXG4gICwgTlVNQkVSICAgICAgICAgICAgPSAnTnVtYmVyJ1xuICAsICROdW1iZXIgICAgICAgICAgID0gZ2xvYmFsW05VTUJFUl1cbiAgLCBCYXNlICAgICAgICAgICAgICA9ICROdW1iZXJcbiAgLCBwcm90byAgICAgICAgICAgICA9ICROdW1iZXIucHJvdG90eXBlXG4gIC8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZ1xuICAsIEJST0tFTl9DT0YgICAgICAgID0gY29mKHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKShwcm90bykpID09IE5VTUJFUlxuICAsIFRSSU0gICAgICAgICAgICAgID0gJ3RyaW0nIGluIFN0cmluZy5wcm90b3R5cGU7XG5cbi8vIDcuMS4zIFRvTnVtYmVyKGFyZ3VtZW50KVxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24oYXJndW1lbnQpe1xuICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgZmFsc2UpO1xuICBpZih0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMil7XG4gICAgaXQgPSBUUklNID8gaXQudHJpbSgpIDogJHRyaW0oaXQsIDMpO1xuICAgIHZhciBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMClcbiAgICAgICwgdGhpcmQsIHJhZGl4LCBtYXhDb2RlO1xuICAgIGlmKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpe1xuICAgICAgdGhpcmQgPSBpdC5jaGFyQ29kZUF0KDIpO1xuICAgICAgaWYodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZihmaXJzdCA9PT0gNDgpe1xuICAgICAgc3dpdGNoKGl0LmNoYXJDb2RlQXQoMSkpe1xuICAgICAgICBjYXNlIDY2IDogY2FzZSA5OCAgOiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzkgOiBjYXNlIDExMSA6IHJhZGl4ID0gODsgbWF4Q29kZSA9IDU1OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBvWzAtN10rJC9pXG4gICAgICAgIGRlZmF1bHQgOiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZm9yKHZhciBkaWdpdHMgPSBpdC5zbGljZSgyKSwgaSA9IDAsIGwgPSBkaWdpdHMubGVuZ3RoLCBjb2RlOyBpIDwgbDsgaSsrKXtcbiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKXJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbmlmKCEkTnVtYmVyKCcgMG8xJykgfHwgISROdW1iZXIoJzBiMScpIHx8ICROdW1iZXIoJysweDEnKSl7XG4gICROdW1iZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpe1xuICAgIHZhciBpdCA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IHZhbHVlXG4gICAgICAsIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiB0aGF0IGluc3RhbmNlb2YgJE51bWJlclxuICAgICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gICAgICAmJiAoQlJPS0VOX0NPRiA/IGZhaWxzKGZ1bmN0aW9uKCl7IHByb3RvLnZhbHVlT2YuY2FsbCh0aGF0KTsgfSkgOiBjb2YodGhhdCkgIT0gTlVNQkVSKVxuICAgICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKHRvTnVtYmVyKGl0KSksIHRoYXQsICROdW1iZXIpIDogdG9OdW1iZXIoaXQpO1xuICB9O1xuICBmb3IodmFyIGtleXMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QTihCYXNlKSA6IChcbiAgICAvLyBFUzM6XG4gICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgK1xuICAgIC8vIEVTNiAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTNiBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxuICAgICdFUFNJTE9OLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLE1BWF9TQUZFX0lOVEVHRVIsJyArXG4gICAgJ01JTl9TQUZFX0lOVEVHRVIscGFyc2VGbG9hdCxwYXJzZUludCxpc0ludGVnZXInXG4gICkuc3BsaXQoJywnKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyBqKyspe1xuICAgIGlmKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpe1xuICAgICAgZFAoJE51bWJlciwga2V5LCBnT1BEKEJhc2UsIGtleSkpO1xuICAgIH1cbiAgfVxuICAkTnVtYmVyLnByb3RvdHlwZSA9IHByb3RvO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICROdW1iZXI7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCBOVU1CRVIsICROdW1iZXIpO1xufSIsIi8vIDIwLjEuMi4xIE51bWJlci5FUFNJTE9OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtFUFNJTE9OOiBNYXRoLnBvdygyLCAtNTIpfSk7IiwiLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlKG51bWJlcilcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIF9pc0Zpbml0ZSA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmlzRmluaXRlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KXtcbiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIF9pc0Zpbml0ZShpdCk7XG4gIH1cbn0pOyIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7aXNJbnRlZ2VyOiByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJyl9KTsiLCIvLyAyMC4xLjIuNCBOdW1iZXIuaXNOYU4obnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzTmFOOiBmdW5jdGlvbiBpc05hTihudW1iZXIpe1xuICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyO1xuICB9XG59KTsiLCIvLyAyMC4xLjIuNSBOdW1iZXIuaXNTYWZlSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBpc0ludGVnZXIgPSByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJylcbiAgLCBhYnMgICAgICAgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKXtcbiAgICByZXR1cm4gaXNJbnRlZ2VyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxZmZmZmZmZmZmZmZmZjtcbiAgfVxufSk7IiwiLy8gMjAuMS4yLjYgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge01BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmZ9KTsiLCIvLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge01JTl9TQUZFX0lOVEVHRVI6IC0weDFmZmZmZmZmZmZmZmZmfSk7IiwidmFyICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAyMC4xLjIuMTIgTnVtYmVyLnBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCAnTnVtYmVyJywge3BhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0fSk7IiwidmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgJ051bWJlcicsIHtwYXJzZUludDogJHBhcnNlSW50fSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9JbnRlZ2VyICAgID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKVxuICAsIHJlcGVhdCAgICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKVxuICAsICR0b0ZpeGVkICAgICA9IDEuLnRvRml4ZWRcbiAgLCBmbG9vciAgICAgICAgPSBNYXRoLmZsb29yXG4gICwgZGF0YSAgICAgICAgID0gWzAsIDAsIDAsIDAsIDAsIDBdXG4gICwgRVJST1IgICAgICAgID0gJ051bWJlci50b0ZpeGVkOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnXG4gICwgWkVSTyAgICAgICAgID0gJzAnO1xuXG52YXIgbXVsdGlwbHkgPSBmdW5jdGlvbihuLCBjKXtcbiAgdmFyIGkgID0gLTFcbiAgICAsIGMyID0gYztcbiAgd2hpbGUoKytpIDwgNil7XG4gICAgYzIgKz0gbiAqIGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xudmFyIGRpdmlkZSA9IGZ1bmN0aW9uKG4pe1xuICB2YXIgaSA9IDZcbiAgICAsIGMgPSAwO1xuICB3aGlsZSgtLWkgPj0gMCl7XG4gICAgYyArPSBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBmbG9vcihjIC8gbik7XG4gICAgYyA9IChjICUgbikgKiAxZTc7XG4gIH1cbn07XG52YXIgbnVtVG9TdHJpbmcgPSBmdW5jdGlvbigpe1xuICB2YXIgaSA9IDZcbiAgICAsIHMgPSAnJztcbiAgd2hpbGUoLS1pID49IDApe1xuICAgIGlmKHMgIT09ICcnIHx8IGkgPT09IDAgfHwgZGF0YVtpXSAhPT0gMCl7XG4gICAgICB2YXIgdCA9IFN0cmluZyhkYXRhW2ldKTtcbiAgICAgIHMgPSBzID09PSAnJyA/IHQgOiBzICsgcmVwZWF0LmNhbGwoWkVSTywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgfVxuICB9IHJldHVybiBzO1xufTtcbnZhciBwb3cgPSBmdW5jdGlvbih4LCBuLCBhY2Mpe1xuICByZXR1cm4gbiA9PT0gMCA/IGFjYyA6IG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYyk7XG59O1xudmFyIGxvZyA9IGZ1bmN0aW9uKHgpe1xuICB2YXIgbiAgPSAwXG4gICAgLCB4MiA9IHg7XG4gIHdoaWxlKHgyID49IDQwOTYpe1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSh4MiA+PSAyKXtcbiAgICBuICArPSAxO1xuICAgIHgyIC89IDI7XG4gIH0gcmV0dXJuIG47XG59O1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICghISR0b0ZpeGVkICYmIChcbiAgMC4wMDAwOC50b0ZpeGVkKDMpICE9PSAnMC4wMDAnIHx8XG4gIDAuOS50b0ZpeGVkKDApICE9PSAnMScgfHxcbiAgMS4yNTUudG9GaXhlZCgyKSAhPT0gJzEuMjUnIHx8XG4gIDEwMDAwMDAwMDAwMDAwMDAxMjguLnRvRml4ZWQoMCkgIT09ICcxMDAwMDAwMDAwMDAwMDAwMTI4J1xuKSB8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9GaXhlZC5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cyl7XG4gICAgdmFyIHggPSBhTnVtYmVyVmFsdWUodGhpcywgRVJST1IpXG4gICAgICAsIGYgPSB0b0ludGVnZXIoZnJhY3Rpb25EaWdpdHMpXG4gICAgICAsIHMgPSAnJ1xuICAgICAgLCBtID0gWkVST1xuICAgICAgLCBlLCB6LCBqLCBrO1xuICAgIGlmKGYgPCAwIHx8IGYgPiAyMCl0aHJvdyBSYW5nZUVycm9yKEVSUk9SKTtcbiAgICBpZih4ICE9IHgpcmV0dXJuICdOYU4nO1xuICAgIGlmKHggPD0gLTFlMjEgfHwgeCA+PSAxZTIxKXJldHVybiBTdHJpbmcoeCk7XG4gICAgaWYoeCA8IDApe1xuICAgICAgcyA9ICctJztcbiAgICAgIHggPSAteDtcbiAgICB9XG4gICAgaWYoeCA+IDFlLTIxKXtcbiAgICAgIGUgPSBsb2coeCAqIHBvdygyLCA2OSwgMSkpIC0gNjk7XG4gICAgICB6ID0gZSA8IDAgPyB4ICogcG93KDIsIC1lLCAxKSA6IHggLyBwb3coMiwgZSwgMSk7XG4gICAgICB6ICo9IDB4MTAwMDAwMDAwMDAwMDA7XG4gICAgICBlID0gNTIgLSBlO1xuICAgICAgaWYoZSA+IDApe1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgaiA9IGY7XG4gICAgICAgIHdoaWxlKGogPj0gNyl7XG4gICAgICAgICAgbXVsdGlwbHkoMWU3LCAwKTtcbiAgICAgICAgICBqIC09IDc7XG4gICAgICAgIH1cbiAgICAgICAgbXVsdGlwbHkocG93KDEwLCBqLCAxKSwgMCk7XG4gICAgICAgIGogPSBlIC0gMTtcbiAgICAgICAgd2hpbGUoaiA+PSAyMyl7XG4gICAgICAgICAgZGl2aWRlKDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KDEsIDEpO1xuICAgICAgICBkaXZpZGUoMik7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIG11bHRpcGx5KDEgPDwgLWUsIDApO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKSArIHJlcGVhdC5jYWxsKFpFUk8sIGYpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZihmID4gMCl7XG4gICAgICBrID0gbS5sZW5ndGg7XG4gICAgICBtID0gcyArIChrIDw9IGYgPyAnMC4nICsgcmVwZWF0LmNhbGwoWkVSTywgZiAtIGspICsgbSA6IG0uc2xpY2UoMCwgayAtIGYpICsgJy4nICsgbS5zbGljZShrIC0gZikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gcyArIG07XG4gICAgfSByZXR1cm4gbTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGZhaWxzICAgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAsIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJylcbiAgLCAkdG9QcmVjaXNpb24gPSAxLi50b1ByZWNpc2lvbjtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoJGZhaWxzKGZ1bmN0aW9uKCl7XG4gIC8vIElFNy1cbiAgcmV0dXJuICR0b1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJztcbn0pIHx8ICEkZmFpbHMoZnVuY3Rpb24oKXtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvUHJlY2lzaW9uLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b1ByZWNpc2lvbjogZnVuY3Rpb24gdG9QcmVjaXNpb24ocHJlY2lzaW9uKXtcbiAgICB2YXIgdGhhdCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCAnTnVtYmVyI3RvUHJlY2lzaW9uOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyAkdG9QcmVjaXNpb24uY2FsbCh0aGF0KSA6ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQsIHByZWNpc2lvbik7IFxuICB9XG59KTsiLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7YXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJyl9KTsiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge2NyZWF0ZTogcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpfSk7IiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7ZGVmaW5lUHJvcGVydGllczogcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpfSk7IiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0Jywge2RlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mfSk7IiwiLy8gMTkuMS4yLjUgT2JqZWN0LmZyZWV6ZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBtZXRhICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdmcmVlemUnLCBmdW5jdGlvbigkZnJlZXplKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZyZWV6ZShpdCl7XG4gICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pOyIsIi8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbnZhciB0b0lPYmplY3QgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbigpe1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpe1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7XG4gIH07XG59KTsiLCIvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpLmY7XG59KTsiLCIvLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciB0b09iamVjdCAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uKCl7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCl7XG4gICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9O1xufSk7IiwiLy8gMTkuMS4yLjExIE9iamVjdC5pc0V4dGVuc2libGUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRXh0ZW5zaWJsZScsIGZ1bmN0aW9uKCRpc0V4dGVuc2libGUpe1xuICByZXR1cm4gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KXtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZSA6IGZhbHNlO1xuICB9O1xufSk7IiwiLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNGcm96ZW4nLCBmdW5jdGlvbigkaXNGcm96ZW4pe1xuICByZXR1cm4gZnVuY3Rpb24gaXNGcm96ZW4oaXQpe1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNGcm96ZW4gPyAkaXNGcm96ZW4oaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7IiwiLy8gMTkuMS4yLjEzIE9iamVjdC5pc1NlYWxlZChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNTZWFsZWQnLCBmdW5jdGlvbigkaXNTZWFsZWQpe1xuICByZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaXQpe1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNTZWFsZWQgPyAkaXNTZWFsZWQoaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7IiwiLy8gMTkuMS4zLjEwIE9iamVjdC5pcyh2YWx1ZTEsIHZhbHVlMilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtpczogcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpfSk7IiwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsICRrZXlzICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdrZXlzJywgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpe1xuICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xuICB9O1xufSk7IiwiLy8gMTkuMS4yLjE1IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBtZXRhICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdwcmV2ZW50RXh0ZW5zaW9ucycsIGZ1bmN0aW9uKCRwcmV2ZW50RXh0ZW5zaW9ucyl7XG4gIHJldHVybiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyhpdCl7XG4gICAgcmV0dXJuICRwcmV2ZW50RXh0ZW5zaW9ucyAmJiBpc09iamVjdChpdCkgPyAkcHJldmVudEV4dGVuc2lvbnMobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTsiLCIvLyAxOS4xLjIuMTcgT2JqZWN0LnNlYWwoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgbWV0YSAgICAgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnc2VhbCcsIGZ1bmN0aW9uKCRzZWFsKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpe1xuICAgIHJldHVybiAkc2VhbCAmJiBpc09iamVjdChpdCkgPyAkc2VhbChtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pOyIsIi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7c2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldH0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJylcbiAgLCB0ZXN0ICAgID0ge307XG50ZXN0W3JlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpXSA9ICd6JztcbmlmKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpe1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gICAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xuICB9LCB0cnVlKTtcbn0iLCJ2YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDE4LjIuNCBwYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCB7cGFyc2VGbG9hdDogJHBhcnNlRmxvYXR9KTsiLCJ2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDE4LjIuNSBwYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VJbnQgIT0gJHBhcnNlSW50KSwge3BhcnNlSW50OiAkcGFyc2VJbnR9KTsiLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpXG4gICwgZ2xvYmFsICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBjdHggICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIGNsYXNzb2YgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKVxuICAsICRleHBvcnQgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgaXNPYmplY3QgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBhRnVuY3Rpb24gICAgICAgICAgPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcbiAgLCBhbkluc3RhbmNlICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpXG4gICwgZm9yT2YgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJylcbiAgLCBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJylcbiAgLCB0YXNrICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190YXNrJykuc2V0XG4gICwgbWljcm90YXNrICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKVxuICAsIFBST01JU0UgICAgICAgICAgICA9ICdQcm9taXNlJ1xuICAsIFR5cGVFcnJvciAgICAgICAgICA9IGdsb2JhbC5UeXBlRXJyb3JcbiAgLCBwcm9jZXNzICAgICAgICAgICAgPSBnbG9iYWwucHJvY2Vzc1xuICAsICRQcm9taXNlICAgICAgICAgICA9IGdsb2JhbFtQUk9NSVNFXVxuICAsIHByb2Nlc3MgICAgICAgICAgICA9IGdsb2JhbC5wcm9jZXNzXG4gICwgaXNOb2RlICAgICAgICAgICAgID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2VzcydcbiAgLCBlbXB0eSAgICAgICAgICAgICAgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9XG4gICwgSW50ZXJuYWwsIEdlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uKCl7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgICAgID0gJFByb21pc2UucmVzb2x2ZSgxKVxuICAgICAgLCBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyldID0gZnVuY3Rpb24oZXhlYyl7IGV4ZWMoZW1wdHksIGVtcHR5KTsgfTtcbiAgICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gICAgcmV0dXJuIChpc05vZGUgfHwgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nKSAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2U7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbn0oKTtcblxuLy8gaGVscGVyc1xudmFyIHNhbWVDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKGEsIGIpe1xuICAvLyB3aXRoIGxpYnJhcnkgd3JhcHBlciBzcGVjaWFsIGNhc2VcbiAgcmV0dXJuIGEgPT09IGIgfHwgYSA9PT0gJFByb21pc2UgJiYgYiA9PT0gV3JhcHBlcjtcbn07XG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uKGl0KXtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbihDKXtcbiAgcmV0dXJuIHNhbWVDb25zdHJ1Y3RvcigkUHJvbWlzZSwgQylcbiAgICA/IG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgIDogbmV3IEdlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG52YXIgUHJvbWlzZUNhcGFiaWxpdHkgPSBHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbihDKXtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24oJCRyZXNvbHZlLCAkJHJlamVjdCl7XG4gICAgaWYocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKXRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCAgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59O1xudmFyIHBlcmZvcm0gPSBmdW5jdGlvbihleGVjKXtcbiAgdHJ5IHtcbiAgICBleGVjKCk7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIHtlcnJvcjogZX07XG4gIH1cbn07XG52YXIgbm90aWZ5ID0gZnVuY3Rpb24ocHJvbWlzZSwgaXNSZWplY3Qpe1xuICBpZihwcm9taXNlLl9uKXJldHVybjtcbiAgcHJvbWlzZS5fbiA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2M7XG4gIG1pY3JvdGFzayhmdW5jdGlvbigpe1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3ZcbiAgICAgICwgb2sgICAgPSBwcm9taXNlLl9zID09IDFcbiAgICAgICwgaSAgICAgPSAwO1xuICAgIHZhciBydW4gPSBmdW5jdGlvbihyZWFjdGlvbil7XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsXG4gICAgICAgICwgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmVcbiAgICAgICAgLCByZWplY3QgID0gcmVhY3Rpb24ucmVqZWN0XG4gICAgICAgICwgZG9tYWluICA9IHJlYWN0aW9uLmRvbWFpblxuICAgICAgICAsIHJlc3VsdCwgdGhlbjtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmKGhhbmRsZXIpe1xuICAgICAgICAgIGlmKCFvayl7XG4gICAgICAgICAgICBpZihwcm9taXNlLl9oID09IDIpb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoaGFuZGxlciA9PT0gdHJ1ZSlyZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmKGRvbWFpbilkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpO1xuICAgICAgICAgICAgaWYoZG9tYWluKWRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSl7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZih0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKXtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoKGUpe1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZShjaGFpbi5sZW5ndGggPiBpKXJ1bihjaGFpbltpKytdKTsgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2hcbiAgICBwcm9taXNlLl9jID0gW107XG4gICAgcHJvbWlzZS5fbiA9IGZhbHNlO1xuICAgIGlmKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKW9uVW5oYW5kbGVkKHByb21pc2UpO1xuICB9KTtcbn07XG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbihwcm9taXNlKXtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24oKXtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92XG4gICAgICAsIGFicnVwdCwgaGFuZGxlciwgY29uc29sZTtcbiAgICBpZihpc1VuaGFuZGxlZChwcm9taXNlKSl7XG4gICAgICBhYnJ1cHQgPSBwZXJmb3JtKGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmKGlzTm9kZSl7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBpZihoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKXtcbiAgICAgICAgICBoYW5kbGVyKHtwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHZhbHVlfSk7XG4gICAgICAgIH0gZWxzZSBpZigoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKXtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHByb21pc2UuX2ggPSBpc05vZGUgfHwgaXNVbmhhbmRsZWQocHJvbWlzZSkgPyAyIDogMTtcbiAgICB9IHByb21pc2UuX2EgPSB1bmRlZmluZWQ7XG4gICAgaWYoYWJydXB0KXRocm93IGFicnVwdC5lcnJvcjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24ocHJvbWlzZSl7XG4gIGlmKHByb21pc2UuX2ggPT0gMSlyZXR1cm4gZmFsc2U7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2EgfHwgcHJvbWlzZS5fY1xuICAgICwgaSAgICAgPSAwXG4gICAgLCByZWFjdGlvbjtcbiAgd2hpbGUoY2hhaW4ubGVuZ3RoID4gaSl7XG4gICAgcmVhY3Rpb24gPSBjaGFpbltpKytdO1xuICAgIGlmKHJlYWN0aW9uLmZhaWwgfHwgIWlzVW5oYW5kbGVkKHJlYWN0aW9uLnByb21pc2UpKXJldHVybiBmYWxzZTtcbiAgfSByZXR1cm4gdHJ1ZTtcbn07XG52YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbihwcm9taXNlKXtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24oKXtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZihpc05vZGUpe1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKXtcbiAgICAgIGhhbmRsZXIoe3Byb21pc2U6IHByb21pc2UsIHJlYXNvbjogcHJvbWlzZS5fdn0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbih2YWx1ZSl7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgaWYocHJvbWlzZS5fZClyZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICBwcm9taXNlLl9zID0gMjtcbiAgaWYoIXByb21pc2UuX2EpcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xufTtcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uKHZhbHVlKXtcbiAgdmFyIHByb21pc2UgPSB0aGlzXG4gICAgLCB0aGVuO1xuICBpZihwcm9taXNlLl9kKXJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICB0cnkge1xuICAgIGlmKHByb21pc2UgPT09IHZhbHVlKXRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIGlmKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSl7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7X3c6IHByb21pc2UsIF9kOiBmYWxzZX07IC8vIHdyYXBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaChlKXtcbiAgICAkcmVqZWN0LmNhbGwoe193OiBwcm9taXNlLCBfZDogZmFsc2V9LCBlKTsgLy8gd3JhcFxuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYoIVVTRV9OQVRJVkUpe1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3Ipe1xuICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTtcbiAgICB9IGNhdGNoKGVycil7XG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcbiAgICB9XG4gIH07XG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcil7XG4gICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcbiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zXG4gICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZVxuICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZVxuICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWVcbiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkXG4gICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnlcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykoJFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKXtcbiAgICAgIHZhciByZWFjdGlvbiAgICA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgICAgID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsICAgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XG4gICAgICBpZih0aGlzLl9hKXRoaXMuX2EucHVzaChyZWFjdGlvbik7XG4gICAgICBpZih0aGlzLl9zKW5vdGlmeSh0aGlzLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24ob25SZWplY3RlZCl7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbigpe1xuICAgIHZhciBwcm9taXNlICA9IG5ldyBJbnRlcm5hbDtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7UHJvbWlzZTogJFByb21pc2V9KTtcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocil7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKVxuICAgICAgLCAkJHJlamVjdCAgID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KXtcbiAgICAvLyBpbnN0YW5jZW9mIGluc3RlYWQgb2YgaW50ZXJuYWwgc2xvdCBjaGVjayBiZWNhdXNlIHdlIHNob3VsZCBmaXggaXQgd2l0aG91dCByZXBsYWNlbWVudCBuYXRpdmUgUHJvbWlzZSBjb3JlXG4gICAgaWYoeCBpbnN0YW5jZW9mICRQcm9taXNlICYmIHNhbWVDb25zdHJ1Y3Rvcih4LmNvbnN0cnVjdG9yLCB0aGlzKSlyZXR1cm4geDtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpXG4gICAgICAsICQkcmVzb2x2ZSAgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgJCRyZXNvbHZlKHgpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbihpdGVyKXtcbiAgJFByb21pc2UuYWxsKGl0ZXIpWydjYXRjaCddKGVtcHR5KTtcbn0pKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbChpdGVyYWJsZSlcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpe1xuICAgIHZhciBDICAgICAgICAgID0gdGhpc1xuICAgICAgLCBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgICwgcmVzb2x2ZSAgICA9IGNhcGFiaWxpdHkucmVzb2x2ZVxuICAgICAgLCByZWplY3QgICAgID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIGFicnVwdCA9IHBlcmZvcm0oZnVuY3Rpb24oKXtcbiAgICAgIHZhciB2YWx1ZXMgICAgPSBbXVxuICAgICAgICAsIGluZGV4ICAgICA9IDBcbiAgICAgICAgLCByZW1haW5pbmcgPSAxO1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbihwcm9taXNlKXtcbiAgICAgICAgdmFyICRpbmRleCAgICAgICAgPSBpbmRleCsrXG4gICAgICAgICAgLCBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgICAgaWYoYWxyZWFkeUNhbGxlZClyZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCAgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYoYWJydXB0KXJlamVjdChhYnJ1cHQuZXJyb3IpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSl7XG4gICAgdmFyIEMgICAgICAgICAgPSB0aGlzXG4gICAgICAsIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgLCByZWplY3QgICAgID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIGFicnVwdCA9IHBlcmZvcm0oZnVuY3Rpb24oKXtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24ocHJvbWlzZSl7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmKGFicnVwdClyZWplY3QoYWJydXB0LmVycm9yKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTsiLCIvLyAyNi4xLjEgUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdClcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIGFuT2JqZWN0ICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgckFwcGx5ICAgID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmFwcGx5XG4gICwgZkFwcGx5ICAgID0gRnVuY3Rpb24uYXBwbHk7XG4vLyBNUyBFZGdlIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgckFwcGx5KGZ1bmN0aW9uKCl7fSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCl7XG4gICAgdmFyIFQgPSBhRnVuY3Rpb24odGFyZ2V0KVxuICAgICAgLCBMID0gYW5PYmplY3QoYXJndW1lbnRzTGlzdCk7XG4gICAgcmV0dXJuIHJBcHBseSA/IHJBcHBseShULCB0aGlzQXJndW1lbnQsIEwpIDogZkFwcGx5LmNhbGwoVCwgdGhpc0FyZ3VtZW50LCBMKTtcbiAgfVxufSk7IiwiLy8gMjYuMS4yIFJlZmxlY3QuY29uc3RydWN0KHRhcmdldCwgYXJndW1lbnRzTGlzdCBbLCBuZXdUYXJnZXRdKVxudmFyICRleHBvcnQgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGNyZWF0ZSAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJylcbiAgLCBhRnVuY3Rpb24gID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgYW5PYmplY3QgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgaXNPYmplY3QgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgZmFpbHMgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBiaW5kICAgICAgID0gcmVxdWlyZSgnLi9fYmluZCcpXG4gICwgckNvbnN0cnVjdCA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5jb25zdHJ1Y3Q7XG5cbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24oKXtcbiAgZnVuY3Rpb24gRigpe31cbiAgcmV0dXJuICEockNvbnN0cnVjdChmdW5jdGlvbigpe30sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24oKXtcbiAgckNvbnN0cnVjdChmdW5jdGlvbigpe30pO1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHKSwgJ1JlZmxlY3QnLCB7XG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiwgbmV3VGFyZ2V0Ki8pe1xuICAgIGFGdW5jdGlvbihUYXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3MpO1xuICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFGdW5jdGlvbihhcmd1bWVudHNbMl0pO1xuICAgIGlmKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRylyZXR1cm4gckNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgaWYoVGFyZ2V0ID09IG5ld1RhcmdldCl7XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50c1xuICAgICAgc3dpdGNoKGFyZ3MubGVuZ3RoKXtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldDtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTtcbiAgICAgIHJldHVybiBuZXcgKGJpbmQuYXBwbHkoVGFyZ2V0LCAkYXJncykpO1xuICAgIH1cbiAgICAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnNcbiAgICB2YXIgcHJvdG8gICAgPSBuZXdUYXJnZXQucHJvdG90eXBlXG4gICAgICAsIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSlcbiAgICAgICwgcmVzdWx0ICAgPSBGdW5jdGlvbi5hcHBseS5jYWxsKFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpO1xuICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XG4gIH1cbn0pOyIsIi8vIDI2LjEuMyBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpXG52YXIgZFAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZFAuZih7fSwgMSwge3ZhbHVlOiAxfSksIDEsIHt2YWx1ZTogMn0pO1xufSksICdSZWZsZWN0Jywge1xuICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyl7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKHByb3BlcnR5S2V5LCB0cnVlKTtcbiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTtcbiAgICB0cnkge1xuICAgICAgZFAuZih0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTsiLCIvLyAyNi4xLjQgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBnT1BEICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZlxuICAsIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZGVsZXRlUHJvcGVydHk6IGZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpe1xuICAgIHZhciBkZXNjID0gZ09QRChhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gICAgcmV0dXJuIGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjYuMS41IFJlZmxlY3QuZW51bWVyYXRlKHRhcmdldClcbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBFbnVtZXJhdGUgPSBmdW5jdGlvbihpdGVyYXRlZCl7XG4gIHRoaXMuX3QgPSBhbk9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHZhciBrZXlzID0gdGhpcy5fayA9IFtdICAgICAgIC8vIGtleXNcbiAgICAsIGtleTtcbiAgZm9yKGtleSBpbiBpdGVyYXRlZClrZXlzLnB1c2goa2V5KTtcbn07XG5yZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uKCl7XG4gIHZhciB0aGF0ID0gdGhpc1xuICAgICwga2V5cyA9IHRoYXQuX2tcbiAgICAsIGtleTtcbiAgZG8ge1xuICAgIGlmKHRoYXQuX2kgPj0ga2V5cy5sZW5ndGgpcmV0dXJuIHt2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlfTtcbiAgfSB3aGlsZSghKChrZXkgPSBrZXlzW3RoYXQuX2krK10pIGluIHRoYXQuX3QpKTtcbiAgcmV0dXJuIHt2YWx1ZToga2V5LCBkb25lOiBmYWxzZX07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBlbnVtZXJhdGU6IGZ1bmN0aW9uIGVudW1lcmF0ZSh0YXJnZXQpe1xuICAgIHJldHVybiBuZXcgRW51bWVyYXRlKHRhcmdldCk7XG4gIH1cbn0pOyIsIi8vIDI2LjEuNyBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyIGdPUEQgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKVxuICAsICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpe1xuICAgIHJldHVybiBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB9XG59KTsiLCIvLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGdldFByb3RvID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KXtcbiAgICByZXR1cm4gZ2V0UHJvdG8oYW5PYmplY3QodGFyZ2V0KSk7XG4gIH1cbn0pOyIsIi8vIDI2LjEuNiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3BlcnR5S2V5IFssIHJlY2VpdmVyXSlcbnZhciBnT1BEICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJylcbiAgLCBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgaXNPYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGFuT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5LyosIHJlY2VpdmVyKi8pe1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXVxuICAgICwgZGVzYywgcHJvdG87XG4gIGlmKGFuT2JqZWN0KHRhcmdldCkgPT09IHJlY2VpdmVyKXJldHVybiB0YXJnZXRbcHJvcGVydHlLZXldO1xuICBpZihkZXNjID0gZ09QRC5mKHRhcmdldCwgcHJvcGVydHlLZXkpKXJldHVybiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICA/IGRlc2MudmFsdWVcbiAgICA6IGRlc2MuZ2V0ICE9PSB1bmRlZmluZWRcbiAgICAgID8gZGVzYy5nZXQuY2FsbChyZWNlaXZlcilcbiAgICAgIDogdW5kZWZpbmVkO1xuICBpZihpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKXJldHVybiBnZXQocHJvdG8sIHByb3BlcnR5S2V5LCByZWNlaXZlcik7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtnZXQ6IGdldH0pOyIsIi8vIDI2LjEuOSBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KXtcbiAgICByZXR1cm4gcHJvcGVydHlLZXkgaW4gdGFyZ2V0O1xuICB9XG59KTsiLCIvLyAyNi4xLjEwIFJlZmxlY3QuaXNFeHRlbnNpYmxlKHRhcmdldClcbnZhciAkZXhwb3J0ICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBhbk9iamVjdCAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCAkaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZSh0YXJnZXQpe1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKHRhcmdldCkgOiB0cnVlO1xuICB9XG59KTsiLCIvLyAyNi4xLjExIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7b3duS2V5czogcmVxdWlyZSgnLi9fb3duLWtleXMnKX0pOyIsIi8vIDI2LjEuMTIgUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpXG52YXIgJGV4cG9ydCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KXtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHRyeSB7XG4gICAgICBpZigkcHJldmVudEV4dGVuc2lvbnMpJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7IiwiLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHNldFByb3RvID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJyk7XG5cbmlmKHNldFByb3RvKSRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgc2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pe1xuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7IiwiLy8gMjYuMS4xMyBSZWZsZWN0LnNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIFssIHJlY2VpdmVyXSlcbnZhciBkUCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgZ09QRCAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpXG4gICwgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGNyZWF0ZURlc2MgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpXG4gICwgYW5PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGlzT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWLyosIHJlY2VpdmVyKi8pe1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHRhcmdldCA6IGFyZ3VtZW50c1szXVxuICAgICwgb3duRGVzYyAgPSBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpXG4gICAgLCBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvO1xuICBpZighb3duRGVzYyl7XG4gICAgaWYoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSl7XG4gICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTtcbiAgfVxuICBpZihoYXMob3duRGVzYywgJ3ZhbHVlJykpe1xuICAgIGlmKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpcmV0dXJuIGZhbHNlO1xuICAgIGV4aXN0aW5nRGVzY3JpcHRvciA9IGdPUEQuZihyZWNlaXZlciwgcHJvcGVydHlLZXkpIHx8IGNyZWF0ZURlc2MoMCk7XG4gICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb3duRGVzYy5zZXQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogKG93bkRlc2Muc2V0LmNhbGwocmVjZWl2ZXIsIFYpLCB0cnVlKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge3NldDogc2V0fSk7IiwidmFyIGdsb2JhbCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKVxuICAsIGRQICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGdPUE4gICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mXG4gICwgaXNSZWdFeHAgICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKVxuICAsICRmbGFncyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZmxhZ3MnKVxuICAsICRSZWdFeHAgICAgICAgICAgID0gZ2xvYmFsLlJlZ0V4cFxuICAsIEJhc2UgICAgICAgICAgICAgID0gJFJlZ0V4cFxuICAsIHByb3RvICAgICAgICAgICAgID0gJFJlZ0V4cC5wcm90b3R5cGVcbiAgLCByZTEgICAgICAgICAgICAgICA9IC9hL2dcbiAgLCByZTIgICAgICAgICAgICAgICA9IC9hL2dcbiAgLy8gXCJuZXdcIiBjcmVhdGVzIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdneSBoZXJlXG4gICwgQ09SUkVDVF9ORVcgICAgICAgPSBuZXcgJFJlZ0V4cChyZTEpICE9PSByZTE7XG5cbmlmKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgKCFDT1JSRUNUX05FVyB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJlMltyZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKV0gPSBmYWxzZTtcbiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcbiAgcmV0dXJuICRSZWdFeHAocmUxKSAhPSByZTEgfHwgJFJlZ0V4cChyZTIpID09IHJlMiB8fCAkUmVnRXhwKHJlMSwgJ2knKSAhPSAnL2EvaSc7XG59KSkpe1xuICAkUmVnRXhwID0gZnVuY3Rpb24gUmVnRXhwKHAsIGYpe1xuICAgIHZhciB0aVJFID0gdGhpcyBpbnN0YW5jZW9mICRSZWdFeHBcbiAgICAgICwgcGlSRSA9IGlzUmVnRXhwKHApXG4gICAgICAsIGZpVSAgPSBmID09PSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuICF0aVJFICYmIHBpUkUgJiYgcC5jb25zdHJ1Y3RvciA9PT0gJFJlZ0V4cCAmJiBmaVUgPyBwXG4gICAgICA6IGluaGVyaXRJZlJlcXVpcmVkKENPUlJFQ1RfTkVXXG4gICAgICAgID8gbmV3IEJhc2UocGlSRSAmJiAhZmlVID8gcC5zb3VyY2UgOiBwLCBmKVxuICAgICAgICA6IEJhc2UoKHBpUkUgPSBwIGluc3RhbmNlb2YgJFJlZ0V4cCkgPyBwLnNvdXJjZSA6IHAsIHBpUkUgJiYgZmlVID8gJGZsYWdzLmNhbGwocCkgOiBmKVxuICAgICAgLCB0aVJFID8gdGhpcyA6IHByb3RvLCAkUmVnRXhwKTtcbiAgfTtcbiAgdmFyIHByb3h5ID0gZnVuY3Rpb24oa2V5KXtcbiAgICBrZXkgaW4gJFJlZ0V4cCB8fCBkUCgkUmVnRXhwLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIEJhc2Vba2V5XTsgfSxcbiAgICAgIHNldDogZnVuY3Rpb24oaXQpeyBCYXNlW2tleV0gPSBpdDsgfVxuICAgIH0pO1xuICB9O1xuICBmb3IodmFyIGtleXMgPSBnT1BOKEJhc2UpLCBpID0gMDsga2V5cy5sZW5ndGggPiBpOyApcHJveHkoa2V5c1tpKytdKTtcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwO1xuICAkUmVnRXhwLnByb3RvdHlwZSA9IHByb3RvO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgJ1JlZ0V4cCcsICRSZWdFeHApO1xufVxuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdSZWdFeHAnKTsiLCIvLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFncygpXG5pZihyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKXJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVxdWlyZSgnLi9fZmxhZ3MnKVxufSk7IiwiLy8gQEBtYXRjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uKGRlZmluZWQsIE1BVENILCAkbWF0Y2gpe1xuICAvLyAyMS4xLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5tYXRjaChyZWdleHApXG4gIHJldHVybiBbZnVuY3Rpb24gbWF0Y2gocmVnZXhwKXtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE8gID0gZGVmaW5lZCh0aGlzKVxuICAgICAgLCBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpO1xuICB9LCAkbWF0Y2hdO1xufSk7IiwiLy8gQEByZXBsYWNlIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbihkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSl7XG4gIC8vIDIxLjEuMy4xNCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSlcbiAgcmV0dXJuIFtmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpe1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyAgPSBkZWZpbmVkKHRoaXMpXG4gICAgICAsIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gIH0sICRyZXBsYWNlXTtcbn0pOyIsIi8vIEBAc2VhcmNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NlYXJjaCcsIDEsIGZ1bmN0aW9uKGRlZmluZWQsIFNFQVJDSCwgJHNlYXJjaCl7XG4gIC8vIDIxLjEuMy4xNSBTdHJpbmcucHJvdG90eXBlLnNlYXJjaChyZWdleHApXG4gIHJldHVybiBbZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCl7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPICA9IGRlZmluZWQodGhpcylcbiAgICAgICwgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbU0VBUkNIXShTdHJpbmcoTykpO1xuICB9LCAkc2VhcmNoXTtcbn0pOyIsIi8vIEBAc3BsaXQgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc3BsaXQnLCAyLCBmdW5jdGlvbihkZWZpbmVkLCBTUExJVCwgJHNwbGl0KXtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgaXNSZWdFeHAgICA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpXG4gICAgLCBfc3BsaXQgICAgID0gJHNwbGl0XG4gICAgLCAkcHVzaCAgICAgID0gW10ucHVzaFxuICAgICwgJFNQTElUICAgICA9ICdzcGxpdCdcbiAgICAsIExFTkdUSCAgICAgPSAnbGVuZ3RoJ1xuICAgICwgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuICBpZihcbiAgICAnYWJiYydbJFNQTElUXSgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fFxuICAgICdhYidbJFNQTElUXSgvKD86YWIpKi8pW0xFTkdUSF0gIT0gMiB8fFxuICAgICcuJ1skU1BMSVRdKC8oLj8pKC4/KS8pW0xFTkdUSF0gIT0gNCB8fFxuICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHxcbiAgICAnJ1skU1BMSVRdKC8uPy8pW0xFTkdUSF1cbiAgKXtcbiAgICB2YXIgTlBDRyA9IC8oKT8/Ly5leGVjKCcnKVsxXSA9PT0gdW5kZWZpbmVkOyAvLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cFxuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgICRzcGxpdCA9IGZ1bmN0aW9uKHNlcGFyYXRvciwgbGltaXQpe1xuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwKXJldHVybiBbXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZighaXNSZWdFeHAoc2VwYXJhdG9yKSlyZXR1cm4gX3NwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgc3BsaXRMaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyA0Mjk0OTY3Mjk1IDogbGltaXQgPj4+IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBzZXBhcmF0b3IyLCBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoLCBpO1xuICAgICAgLy8gRG9lc24ndCBuZWVkIGZsYWdzIGd5LCBidXQgdGhleSBkb24ndCBodXJ0XG4gICAgICBpZighTlBDRylzZXBhcmF0b3IyID0gbmV3IFJlZ0V4cCgnXicgKyBzZXBhcmF0b3JDb3B5LnNvdXJjZSArICckKD8hXFxcXHMpJywgZmxhZ3MpO1xuICAgICAgd2hpbGUobWF0Y2ggPSBzZXBhcmF0b3JDb3B5LmV4ZWMoc3RyaW5nKSl7XG4gICAgICAgIC8vIGBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleGAgaXMgbm90IHJlbGlhYmxlIGNyb3NzLWJyb3dzZXJcbiAgICAgICAgbGFzdEluZGV4ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICBpZihsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KXtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYCBmb3IgTlBDR1xuICAgICAgICAgIGlmKCFOUENHICYmIG1hdGNoW0xFTkdUSF0gPiAxKW1hdGNoWzBdLnJlcGxhY2Uoc2VwYXJhdG9yMiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGZvcihpID0gMTsgaSA8IGFyZ3VtZW50c1tMRU5HVEhdIC0gMjsgaSsrKWlmKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKW1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZihvdXRwdXRbTEVOR1RIXSA+PSBzcGxpdExpbWl0KWJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmKHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0gPT09IG1hdGNoLmluZGV4KXNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0rKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgICAgaWYobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nW0xFTkdUSF0pe1xuICAgICAgICBpZihsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKW91dHB1dC5wdXNoKCcnKTtcbiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dFtMRU5HVEhdID4gc3BsaXRMaW1pdCA/IG91dHB1dC5zbGljZSgwLCBzcGxpdExpbWl0KSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZignMCdbJFNQTElUXSh1bmRlZmluZWQsIDApW0xFTkdUSF0pe1xuICAgICRzcGxpdCA9IGZ1bmN0aW9uKHNlcGFyYXRvciwgbGltaXQpe1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiBfc3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9XG4gIC8vIDIxLjEuMy4xNyBTdHJpbmcucHJvdG90eXBlLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpXG4gIHJldHVybiBbZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCl7XG4gICAgdmFyIE8gID0gZGVmaW5lZCh0aGlzKVxuICAgICAgLCBmbiA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChzZXBhcmF0b3IsIE8sIGxpbWl0KSA6ICRzcGxpdC5jYWxsKFN0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gIH0sICRzcGxpdF07XG59KTsiLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnZhciBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgJGZsYWdzICAgICAgPSByZXF1aXJlKCcuL19mbGFncycpXG4gICwgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpXG4gICwgVE9fU1RSSU5HICAgPSAndG9TdHJpbmcnXG4gICwgJHRvU3RyaW5nICAgPSAvLi9bVE9fU1RSSU5HXTtcblxudmFyIGRlZmluZSA9IGZ1bmN0aW9uKGZuKXtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZuLCB0cnVlKTtcbn07XG5cbi8vIDIxLjIuNS4xNCBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nKClcbmlmKHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXsgcmV0dXJuICR0b1N0cmluZy5jYWxsKHtzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJ30pICE9ICcvYS9iJzsgfSkpe1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZigkdG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkcpe1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufSIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xuXG4vLyAyMy4yIFNldCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKSgnU2V0JywgZnVuY3Rpb24oZ2V0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKXtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih0aGlzLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZyk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMiBTdHJpbmcucHJvdG90eXBlLmFuY2hvcihuYW1lKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYW5jaG9yJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBhbmNob3IobmFtZSl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnbmFtZScsIG5hbWUpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4zIFN0cmluZy5wcm90b3R5cGUuYmlnKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JpZycsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gYmlnKCl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JpZycsICcnLCAnJyk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjQgU3RyaW5nLnByb3RvdHlwZS5ibGluaygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdibGluaycsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gYmxpbmsoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmxpbmsnLCAnJywgJycpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy41IFN0cmluZy5wcm90b3R5cGUuYm9sZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdib2xkJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBib2xkKCl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2InLCAnJywgJycpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGF0ICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKGZhbHNlKTtcbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMyBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0KHBvcylcbiAgY29kZVBvaW50QXQ6IGZ1bmN0aW9uIGNvZGVQb2ludEF0KHBvcyl7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTsiLCIvLyAyMS4xLjMuNiBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoKHNlYXJjaFN0cmluZyBbLCBlbmRQb3NpdGlvbl0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b0xlbmd0aCAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIGNvbnRleHQgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0JylcbiAgLCBFTkRTX1dJVEggPSAnZW5kc1dpdGgnXG4gICwgJGVuZHNXaXRoID0gJydbRU5EU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShFTkRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nIC8qLCBlbmRQb3NpdGlvbiA9IEBsZW5ndGggKi8pe1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSClcbiAgICAgICwgZW5kUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZFxuICAgICAgLCBsZW4gICAgPSB0b0xlbmd0aCh0aGF0Lmxlbmd0aClcbiAgICAgICwgZW5kICAgID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKVxuICAgICAgLCBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJGVuZHNXaXRoXG4gICAgICA/ICRlbmRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgZW5kKVxuICAgICAgOiB0aGF0LnNsaWNlKGVuZCAtIHNlYXJjaC5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaDtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZpeGVkJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBmaXhlZCgpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjcgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3IoY29sb3IpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250Y29sb3InLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRjb2xvcihjb2xvcil7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udHNpemUnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRzaXplKHNpemUpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcbiAgfVxufSk7IiwidmFyICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b0luZGV4ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4JylcbiAgLCBmcm9tQ2hhckNvZGUgICA9IFN0cmluZy5mcm9tQ2hhckNvZGVcbiAgLCAkZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50O1xuXG4vLyBsZW5ndGggc2hvdWxkIGJlIDEsIG9sZCBGRiBwcm9ibGVtXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghISRmcm9tQ29kZVBvaW50ICYmICRmcm9tQ29kZVBvaW50Lmxlbmd0aCAhPSAxKSwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjIgU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uY29kZVBvaW50cylcbiAgZnJvbUNvZGVQb2ludDogZnVuY3Rpb24gZnJvbUNvZGVQb2ludCh4KXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciByZXMgID0gW11cbiAgICAgICwgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgaSAgICA9IDBcbiAgICAgICwgY29kZTtcbiAgICB3aGlsZShhTGVuID4gaSl7XG4gICAgICBjb2RlID0gK2FyZ3VtZW50c1tpKytdO1xuICAgICAgaWYodG9JbmRleChjb2RlLCAweDEwZmZmZikgIT09IGNvZGUpdGhyb3cgUmFuZ2VFcnJvcihjb2RlICsgJyBpcyBub3QgYSB2YWxpZCBjb2RlIHBvaW50Jyk7XG4gICAgICByZXMucHVzaChjb2RlIDwgMHgxMDAwMFxuICAgICAgICA/IGZyb21DaGFyQ29kZShjb2RlKVxuICAgICAgICA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhkODAwLCBjb2RlICUgMHg0MDAgKyAweGRjMDApXG4gICAgICApO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7IiwiLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgY29udGV4dCAgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpXG4gICwgSU5DTFVERVMgPSAnaW5jbHVkZXMnO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKElOQ0xVREVTKSwgJ1N0cmluZycsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiwgcG9zaXRpb24gPSAwICovKXtcbiAgICByZXR1cm4gISF+Y29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIElOQ0xVREVTKVxuICAgICAgLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjkgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2l0YWxpY3MnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGl0YWxpY3MoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24oaXRlcmF0ZWQpe1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbigpe1xuICB2YXIgTyAgICAgPSB0aGlzLl90XG4gICAgLCBpbmRleCA9IHRoaXMuX2lcbiAgICAsIHBvaW50O1xuICBpZihpbmRleCA+PSBPLmxlbmd0aClyZXR1cm4ge3ZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWV9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4ge3ZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2V9O1xufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTAgU3RyaW5nLnByb3RvdHlwZS5saW5rKHVybClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2xpbmsnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGxpbmsodXJsKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfVxufSk7IiwidmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgdG9MZW5ndGggID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuNCBTdHJpbmcucmF3KGNhbGxTaXRlLCAuLi5zdWJzdGl0dXRpb25zKVxuICByYXc6IGZ1bmN0aW9uIHJhdyhjYWxsU2l0ZSl7XG4gICAgdmFyIHRwbCAgPSB0b0lPYmplY3QoY2FsbFNpdGUucmF3KVxuICAgICAgLCBsZW4gID0gdG9MZW5ndGgodHBsLmxlbmd0aClcbiAgICAgICwgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgcmVzICA9IFtdXG4gICAgICAsIGkgICAgPSAwO1xuICAgIHdoaWxlKGxlbiA+IGkpe1xuICAgICAgcmVzLnB1c2goU3RyaW5nKHRwbFtpKytdKSk7XG4gICAgICBpZihpIDwgYUxlbilyZXMucHVzaChTdHJpbmcoYXJndW1lbnRzW2ldKSk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTsiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KVxuICByZXBlYXQ6IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzbWFsbCcsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gc21hbGwoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc21hbGwnLCAnJywgJycpO1xuICB9XG59KTsiLCIvLyAyMS4xLjMuMTggU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKHNlYXJjaFN0cmluZyBbLCBwb3NpdGlvbiBdKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b0xlbmd0aCAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgY29udGV4dCAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpXG4gICwgU1RBUlRTX1dJVEggPSAnc3RhcnRzV2l0aCdcbiAgLCAkc3RhcnRzV2l0aCA9ICcnW1NUQVJUU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShTVEFSVFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qLCBwb3NpdGlvbiA9IDAgKi8pe1xuICAgIHZhciB0aGF0ICAgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpXG4gICAgICAsIGluZGV4ICA9IHRvTGVuZ3RoKE1hdGgubWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpXG4gICAgICAsIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkc3RhcnRzV2l0aFxuICAgICAgPyAkc3RhcnRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgaW5kZXgpXG4gICAgICA6IHRoYXQuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTIgU3RyaW5nLnByb3RvdHlwZS5zdHJpa2UoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3RyaWtlJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBzdHJpa2UoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3RyaWtlJywgJycsICcnKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5zdWIoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3ViJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBzdWIoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3ViJywgJycsICcnKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5zdXAoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3VwJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBzdXAoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3VwJywgJycsICcnKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMS4zLjI1IFN0cmluZy5wcm90b3R5cGUudHJpbSgpXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltJywgZnVuY3Rpb24oJHRyaW0pe1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbSgpe1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAzKTtcbiAgfTtcbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIERFU0NSSVBUT1JTICAgID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKVxuICAsICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCByZWRlZmluZSAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJylcbiAgLCBNRVRBICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVlcbiAgLCAkZmFpbHMgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBzaGFyZWQgICAgICAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpXG4gICwgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpXG4gICwgdWlkICAgICAgICAgICAgPSByZXF1aXJlKCcuL191aWQnKVxuICAsIHdrcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fd2tzJylcbiAgLCB3a3NFeHQgICAgICAgICA9IHJlcXVpcmUoJy4vX3drcy1leHQnKVxuICAsIHdrc0RlZmluZSAgICAgID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpXG4gICwga2V5T2YgICAgICAgICAgPSByZXF1aXJlKCcuL19rZXlvZicpXG4gICwgZW51bUtleXMgICAgICAgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKVxuICAsIGlzQXJyYXkgICAgICAgID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKVxuICAsIGFuT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCB0b0lPYmplY3QgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIHRvUHJpbWl0aXZlICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgLCBjcmVhdGVEZXNjICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKVxuICAsIF9jcmVhdGUgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpXG4gICwgZ09QTkV4dCAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKVxuICAsICRHT1BEICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKVxuICAsICREUCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCAka2V5cyAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJylcbiAgLCBnT1BEICAgICAgICAgICA9ICRHT1BELmZcbiAgLCBkUCAgICAgICAgICAgICA9ICREUC5mXG4gICwgZ09QTiAgICAgICAgICAgPSBnT1BORXh0LmZcbiAgLCAkU3ltYm9sICAgICAgICA9IGdsb2JhbC5TeW1ib2xcbiAgLCAkSlNPTiAgICAgICAgICA9IGdsb2JhbC5KU09OXG4gICwgX3N0cmluZ2lmeSAgICAgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnlcbiAgLCBQUk9UT1RZUEUgICAgICA9ICdwcm90b3R5cGUnXG4gICwgSElEREVOICAgICAgICAgPSB3a3MoJ19oaWRkZW4nKVxuICAsIFRPX1BSSU1JVElWRSAgID0gd2tzKCd0b1ByaW1pdGl2ZScpXG4gICwgaXNFbnVtICAgICAgICAgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZVxuICAsIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKVxuICAsIEFsbFN5bWJvbHMgICAgID0gc2hhcmVkKCdzeW1ib2xzJylcbiAgLCBPUFN5bWJvbHMgICAgICA9IHNoYXJlZCgnb3Atc3ltYm9scycpXG4gICwgT2JqZWN0UHJvdG8gICAgPSBPYmplY3RbUFJPVE9UWVBFXVxuICAsIFVTRV9OQVRJVkUgICAgID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJ1xuICAsIFFPYmplY3QgICAgICAgID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBzZXR0ZXIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiBkUCh0aGlzLCAnYScsIHt2YWx1ZTogN30pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24oaXQsIGtleSwgRCl7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZihwcm90b0Rlc2MpZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZihwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKWRQKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG59IDogZFA7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24odGFnKXtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCl7XG4gIGlmKGl0ID09PSBPYmplY3RQcm90bykkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpO1xuICBhbk9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEQpO1xuICBpZihoYXMoQWxsU3ltYm9scywga2V5KSl7XG4gICAgaWYoIUQuZW51bWVyYWJsZSl7XG4gICAgICBpZighaGFzKGl0LCBISURERU4pKWRQKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTtcbiAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0paXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7ZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSl9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKXtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpXG4gICAgLCBpICAgID0gMFxuICAgICwgbCA9IGtleXMubGVuZ3RoXG4gICAgLCBrZXk7XG4gIHdoaWxlKGwgPiBpKSRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApe1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSl7XG4gIHZhciBFID0gaXNFbnVtLmNhbGwodGhpcywga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSk7XG4gIGlmKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKXJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpe1xuICBpdCAgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZihpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSlELmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gRDtcbn07XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KXtcbiAgdmFyIG5hbWVzICA9IGdPUE4odG9JT2JqZWN0KGl0KSlcbiAgICAsIHJlc3VsdCA9IFtdXG4gICAgLCBpICAgICAgPSAwXG4gICAgLCBrZXk7XG4gIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpe1xuICAgIGlmKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSlyZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpe1xuICB2YXIgSVNfT1AgID0gaXQgPT09IE9iamVjdFByb3RvXG4gICAgLCBuYW1lcyAgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSlcbiAgICAsIHJlc3VsdCA9IFtdXG4gICAgLCBpICAgICAgPSAwXG4gICAgLCBrZXk7XG4gIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpe1xuICAgIGlmKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSlyZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmKCFVU0VfTkFUSVZFKXtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpe1xuICAgIGlmKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKXRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpO1xuICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICAgIHZhciAkc2V0ID0gZnVuY3Rpb24odmFsdWUpe1xuICAgICAgaWYodGhpcyA9PT0gT2JqZWN0UHJvdG8pJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSl0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmKERFU0NSSVBUT1JTICYmIHNldHRlcilzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHtjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mICAgPSAkZGVmaW5lUHJvcGVydHk7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZiAgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSl7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uKG5hbWUpe1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH1cbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwge1N5bWJvbDogJFN5bWJvbH0pO1xuXG5mb3IodmFyIHN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaSA9IDA7IHN5bWJvbHMubGVuZ3RoID4gaTsgKXdrcyhzeW1ib2xzW2krK10pO1xuXG5mb3IodmFyIHN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBpID0gMDsgc3ltYm9scy5sZW5ndGggPiBpOyApd2tzRGVmaW5lKHN5bWJvbHNbaSsrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24oa2V5KXtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKGtleSl7XG4gICAgaWYoaXNTeW1ib2woa2V5KSlyZXR1cm4ga2V5T2YoU3ltYm9sUmVnaXN0cnksIGtleSk7XG4gICAgdGhyb3cgVHlwZUVycm9yKGtleSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uKCl7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24oKXsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24oKXtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoe2E6IFN9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpe1xuICAgIGlmKGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKXJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIHZhciBhcmdzID0gW2l0XVxuICAgICAgLCBpICAgID0gMVxuICAgICAgLCByZXBsYWNlciwgJHJlcGxhY2VyO1xuICAgIHdoaWxlKGFyZ3VtZW50cy5sZW5ndGggPiBpKWFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmKHR5cGVvZiByZXBsYWNlciA9PSAnZnVuY3Rpb24nKSRyZXBsYWNlciA9IHJlcGxhY2VyO1xuICAgIGlmKCRyZXBsYWNlciB8fCAhaXNBcnJheShyZXBsYWNlcikpcmVwbGFjZXIgPSBmdW5jdGlvbihrZXksIHZhbHVlKXtcbiAgICAgIGlmKCRyZXBsYWNlcil2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYoIWlzU3ltYm9sKHZhbHVlKSlyZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICR0eXBlZCAgICAgICA9IHJlcXVpcmUoJy4vX3R5cGVkJylcbiAgLCBidWZmZXIgICAgICAgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKVxuICAsIGFuT2JqZWN0ICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgdG9JbmRleCAgICAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKVxuICAsIHRvTGVuZ3RoICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgaXNPYmplY3QgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBBcnJheUJ1ZmZlciAgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5BcnJheUJ1ZmZlclxuICAsIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKVxuICAsICRBcnJheUJ1ZmZlciA9IGJ1ZmZlci5BcnJheUJ1ZmZlclxuICAsICREYXRhVmlldyAgICA9IGJ1ZmZlci5EYXRhVmlld1xuICAsICRpc1ZpZXcgICAgICA9ICR0eXBlZC5BQlYgJiYgQXJyYXlCdWZmZXIuaXNWaWV3XG4gICwgJHNsaWNlICAgICAgID0gJEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZVxuICAsIFZJRVcgICAgICAgICA9ICR0eXBlZC5WSUVXXG4gICwgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQXJyYXlCdWZmZXIgIT09ICRBcnJheUJ1ZmZlciksIHtBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISR0eXBlZC5DT05TVFIsIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjMuMSBBcnJheUJ1ZmZlci5pc1ZpZXcoYXJnKVxuICBpc1ZpZXc6IGZ1bmN0aW9uIGlzVmlldyhpdCl7XG4gICAgcmV0dXJuICRpc1ZpZXcgJiYgJGlzVmlldyhpdCkgfHwgaXNPYmplY3QoaXQpICYmIFZJRVcgaW4gaXQ7XG4gIH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuVSArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuICFuZXcgJEFycmF5QnVmZmVyKDIpLnNsaWNlKDEsIHVuZGVmaW5lZCkuYnl0ZUxlbmd0aDtcbn0pLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS40LjMgQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKXtcbiAgICBpZigkc2xpY2UgIT09IHVuZGVmaW5lZCAmJiBlbmQgPT09IHVuZGVmaW5lZClyZXR1cm4gJHNsaWNlLmNhbGwoYW5PYmplY3QodGhpcyksIHN0YXJ0KTsgLy8gRkYgZml4XG4gICAgdmFyIGxlbiAgICA9IGFuT2JqZWN0KHRoaXMpLmJ5dGVMZW5ndGhcbiAgICAgICwgZmlyc3QgID0gdG9JbmRleChzdGFydCwgbGVuKVxuICAgICAgLCBmaW5hbCAgPSB0b0luZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pXG4gICAgICAsIHJlc3VsdCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRBcnJheUJ1ZmZlcikpKHRvTGVuZ3RoKGZpbmFsIC0gZmlyc3QpKVxuICAgICAgLCB2aWV3UyAgPSBuZXcgJERhdGFWaWV3KHRoaXMpXG4gICAgICAsIHZpZXdUICA9IG5ldyAkRGF0YVZpZXcocmVzdWx0KVxuICAgICAgLCBpbmRleCAgPSAwO1xuICAgIHdoaWxlKGZpcnN0IDwgZmluYWwpe1xuICAgICAgdmlld1Quc2V0VWludDgoaW5kZXgrKywgdmlld1MuZ2V0VWludDgoZmlyc3QrKykpO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoQVJSQVlfQlVGRkVSKTsiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fdHlwZWQnKS5BQlYsIHtcbiAgRGF0YVZpZXc6IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpLkRhdGFWaWV3XG59KTsiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24oaW5pdCl7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7IiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQ2NCcsIDgsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQ2NEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pOyIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDE2JywgMiwgZnVuY3Rpb24oaW5pdCl7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pOyIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDMyJywgNCwgZnVuY3Rpb24oaW5pdCl7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pOyIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDgnLCAxLCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpe1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTsiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MTYnLCAyLCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pOyIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQzMicsIDQsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gVWludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7IiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7IiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0sIHRydWUpOyIsIid1c2Ugc3RyaWN0JztcbnZhciBlYWNoICAgICAgICAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMClcbiAgLCByZWRlZmluZSAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgbWV0YSAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpXG4gICwgYXNzaWduICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpXG4gICwgd2VhayAgICAgICAgID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJylcbiAgLCBpc09iamVjdCAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGdldFdlYWsgICAgICA9IG1ldGEuZ2V0V2Vha1xuICAsIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGVcbiAgLCB1bmNhdWdodEZyb3plblN0b3JlID0gd2Vhay51ZnN0b3JlXG4gICwgdG1wICAgICAgICAgID0ge31cbiAgLCBJbnRlcm5hbE1hcDtcblxudmFyIHdyYXBwZXIgPSBmdW5jdGlvbihnZXQpe1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpe1xuICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufTtcblxudmFyIG1ldGhvZHMgPSB7XG4gIC8vIDIzLjMuMy4zIFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSl7XG4gICAgaWYoaXNPYmplY3Qoa2V5KSl7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgIGlmKGRhdGEgPT09IHRydWUpcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhpcykuZ2V0KGtleSk7XG4gICAgICByZXR1cm4gZGF0YSA/IGRhdGFbdGhpcy5faV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuICAvLyAyMy4zLjMuNSBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSl7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHRoaXMsIGtleSwgdmFsdWUpO1xuICB9XG59O1xuXG4vLyAyMy4zIFdlYWtNYXAgT2JqZWN0c1xudmFyICRXZWFrTWFwID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoJ1dlYWtNYXAnLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuaWYobmV3ICRXZWFrTWFwKCkuc2V0KChPYmplY3QuZnJlZXplIHx8IE9iamVjdCkodG1wKSwgNykuZ2V0KHRtcCkgIT0gNyl7XG4gIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyKTtcbiAgYXNzaWduKEludGVybmFsTWFwLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gIG1ldGEuTkVFRCA9IHRydWU7XG4gIGVhY2goWydkZWxldGUnLCAnaGFzJywgJ2dldCcsICdzZXQnXSwgZnVuY3Rpb24oa2V5KXtcbiAgICB2YXIgcHJvdG8gID0gJFdlYWtNYXAucHJvdG90eXBlXG4gICAgICAsIG1ldGhvZCA9IHByb3RvW2tleV07XG4gICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24oYSwgYil7XG4gICAgICAvLyBzdG9yZSBmcm96ZW4gb2JqZWN0cyBvbiBpbnRlcm5hbCB3ZWFrbWFwIHNoaW1cbiAgICAgIGlmKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpe1xuICAgICAgICBpZighdGhpcy5fZil0aGlzLl9mID0gbmV3IEludGVybmFsTWFwO1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZltrZXldKGEsIGIpO1xuICAgICAgICByZXR1cm4ga2V5ID09ICdzZXQnID8gdGhpcyA6IHJlc3VsdDtcbiAgICAgIC8vIHN0b3JlIGFsbCB0aGUgcmVzdCBvbiBuYXRpdmUgd2Vha21hcFxuICAgICAgfSByZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgYSwgYik7XG4gICAgfSk7XG4gIH0pO1xufSIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG5cbi8vIDIzLjQgV2Vha1NldCBPYmplY3RzXG5yZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoJ1dlYWtTZXQnLCBmdW5jdGlvbihnZXQpe1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha1NldCgpeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuNC4zLjEgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSl7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHRoaXMsIHZhbHVlLCB0cnVlKTtcbiAgfVxufSwgd2VhaywgZmFsc2UsIHRydWUpOyIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L0FycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xudmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qLCBmcm9tSW5kZXggPSAwICovKXtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnaW5jbHVkZXMnKTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vcndhbGRyb24vdGMzOS1ub3Rlcy9ibG9iL21hc3Rlci9lczYvMjAxNC0wOS9zZXB0LTI1Lm1kIzUxMC1nbG9iYWxhc2FwLWZvci1lbnF1ZXVpbmctYS1taWNyb3Rhc2tcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKClcbiAgLCBwcm9jZXNzICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wcm9jZXNzXG4gICwgaXNOb2RlICAgID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG4kZXhwb3J0KCRleHBvcnQuRywge1xuICBhc2FwOiBmdW5jdGlvbiBhc2FwKGZuKXtcbiAgICB2YXIgZG9tYWluID0gaXNOb2RlICYmIHByb2Nlc3MuZG9tYWluO1xuICAgIG1pY3JvdGFzayhkb21haW4gPyBkb21haW4uYmluZChmbikgOiBmbik7XG4gIH1cbn0pOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvcHJvcG9zYWwtaXMtZXJyb3JcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBjb2YgICAgID0gcmVxdWlyZSgnLi9fY29mJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRXJyb3InLCB7XG4gIGlzRXJyb3I6IGZ1bmN0aW9uIGlzRXJyb3IoaXQpe1xuICAgIHJldHVybiBjb2YoaXQpID09PSAnRXJyb3InO1xuICB9XG59KTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdNYXAnLCB7dG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnTWFwJyl9KTsiLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpYWRkaDogZnVuY3Rpb24gaWFkZGgoeDAsIHgxLCB5MCwgeTEpe1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMFxuICAgICAgLCAkeDEgPSB4MSA+Pj4gMFxuICAgICAgLCAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxICsgKHkxID4+PiAwKSArICgoJHgwICYgJHkwIHwgKCR4MCB8ICR5MCkgJiB+KCR4MCArICR5MCA+Pj4gMCkpID4+PiAzMSkgfCAwO1xuICB9XG59KTsiLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpbXVsaDogZnVuY3Rpb24gaW11bGgodSwgdil7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZlxuICAgICAgLCAkdSA9ICt1XG4gICAgICAsICR2ID0gK3ZcbiAgICAgICwgdTAgPSAkdSAmIFVJTlQxNlxuICAgICAgLCB2MCA9ICR2ICYgVUlOVDE2XG4gICAgICAsIHUxID0gJHUgPj4gMTZcbiAgICAgICwgdjEgPSAkdiA+PiAxNlxuICAgICAgLCB0ICA9ICh1MSAqIHYwID4+PiAwKSArICh1MCAqIHYwID4+PiAxNik7XG4gICAgcmV0dXJuIHUxICogdjEgKyAodCA+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+IDE2KTtcbiAgfVxufSk7IiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaXN1Ymg6IGZ1bmN0aW9uIGlzdWJoKHgwLCB4MSwgeTAsIHkxKXtcbiAgICB2YXIgJHgwID0geDAgPj4+IDBcbiAgICAgICwgJHgxID0geDEgPj4+IDBcbiAgICAgICwgJHkwID0geTAgPj4+IDA7XG4gICAgcmV0dXJuICR4MSAtICh5MSA+Pj4gMCkgLSAoKH4keDAgJiAkeTAgfCB+KCR4MCBeICR5MCkgJiAkeDAgLSAkeTAgPj4+IDApID4+PiAzMSkgfCAwO1xuICB9XG59KTsiLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB1bXVsaDogZnVuY3Rpb24gdW11bGgodSwgdil7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZlxuICAgICAgLCAkdSA9ICt1XG4gICAgICAsICR2ID0gK3ZcbiAgICAgICwgdTAgPSAkdSAmIFVJTlQxNlxuICAgICAgLCB2MCA9ICR2ICYgVUlOVDE2XG4gICAgICAsIHUxID0gJHUgPj4+IDE2XG4gICAgICAsIHYxID0gJHYgPj4+IDE2XG4gICAgICAsIHQgID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTtcbiAgICByZXR1cm4gdTEgKiB2MSArICh0ID4+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+PiAxNik7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvT2JqZWN0ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgYUZ1bmN0aW9uICAgICAgID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG5cbi8vIEIuMi4yLjIgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcilcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2RlZmluZUdldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcil7XG4gICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHtnZXQ6IGFGdW5jdGlvbihnZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9KTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9PYmplY3QgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBhRnVuY3Rpb24gICAgICAgPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcbiAgLCAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcblxuLy8gQi4yLjIuMyBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fZGVmaW5lU2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKXtcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwge3NldDogYUZ1bmN0aW9uKHNldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0pO1xuICB9XG59KTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGVudHJpZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoaXQpe1xuICAgIHJldHVybiAkZW50cmllcyhpdCk7XG4gIH1cbn0pOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG52YXIgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIG93bktleXMgICAgICAgID0gcmVxdWlyZSgnLi9fb3duLWtleXMnKVxuICAsIHRvSU9iamVjdCAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgZ09QRCAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpXG4gICwgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KXtcbiAgICB2YXIgTyAgICAgICA9IHRvSU9iamVjdChvYmplY3QpXG4gICAgICAsIGdldERlc2MgPSBnT1BELmZcbiAgICAgICwga2V5cyAgICA9IG93bktleXMoTylcbiAgICAgICwgcmVzdWx0ICA9IHt9XG4gICAgICAsIGkgICAgICAgPSAwXG4gICAgICAsIGtleTtcbiAgICB3aGlsZShrZXlzLmxlbmd0aCA+IGkpY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXkgPSBrZXlzW2krK10sIGdldERlc2MoTywga2V5KSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9PYmplY3QgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCB0b1ByaW1pdGl2ZSAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAsIGdldFByb3RvdHlwZU9mICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxuLy8gQi4yLjIuNCBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwR2V0dGVyX18oUClcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2xvb2t1cEdldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cEdldHRlcl9fKFApe1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcylcbiAgICAgICwgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpXG4gICAgICAsIEQ7XG4gICAgZG8ge1xuICAgICAgaWYoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSlyZXR1cm4gRC5nZXQ7XG4gICAgfSB3aGlsZShPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b09iamVjdCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIHRvUHJpbWl0aXZlICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXG4gICwgZ2V0UHJvdG90eXBlT2YgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG4vLyBCLjIuMi41IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBTZXR0ZXJfXyhQKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fbG9va3VwU2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwU2V0dGVyX18oUCl7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKVxuICAgICAgLCBLID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSlcbiAgICAgICwgRDtcbiAgICBkbyB7XG4gICAgICBpZihEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKXJldHVybiBELnNldDtcbiAgICB9IHdoaWxlKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gIH1cbn0pOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCl7XG4gICAgcmV0dXJuICR2YWx1ZXMoaXQpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemVucGFyc2luZy9lcy1vYnNlcnZhYmxlXG52YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGdsb2JhbCAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBjb3JlICAgICAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKVxuICAsIG1pY3JvdGFzayAgID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKVxuICAsIE9CU0VSVkFCTEUgID0gcmVxdWlyZSgnLi9fd2tzJykoJ29ic2VydmFibGUnKVxuICAsIGFGdW5jdGlvbiAgID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGFuSW5zdGFuY2UgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKVxuICAsIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJylcbiAgLCBoaWRlICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIGZvck9mICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJylcbiAgLCBSRVRVUk4gICAgICA9IGZvck9mLlJFVFVSTjtcblxudmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uKGZuKXtcbiAgcmV0dXJuIGZuID09IG51bGwgPyB1bmRlZmluZWQgOiBhRnVuY3Rpb24oZm4pO1xufTtcblxudmFyIGNsZWFudXBTdWJzY3JpcHRpb24gPSBmdW5jdGlvbihzdWJzY3JpcHRpb24pe1xuICB2YXIgY2xlYW51cCA9IHN1YnNjcmlwdGlvbi5fYztcbiAgaWYoY2xlYW51cCl7XG4gICAgc3Vic2NyaXB0aW9uLl9jID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXAoKTtcbiAgfVxufTtcblxudmFyIHN1YnNjcmlwdGlvbkNsb3NlZCA9IGZ1bmN0aW9uKHN1YnNjcmlwdGlvbil7XG4gIHJldHVybiBzdWJzY3JpcHRpb24uX28gPT09IHVuZGVmaW5lZDtcbn07XG5cbnZhciBjbG9zZVN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uKHN1YnNjcmlwdGlvbil7XG4gIGlmKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSl7XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgfVxufTtcblxudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uKG9ic2VydmVyLCBzdWJzY3JpYmVyKXtcbiAgYW5PYmplY3Qob2JzZXJ2ZXIpO1xuICB0aGlzLl9jID0gdW5kZWZpbmVkO1xuICB0aGlzLl9vID0gb2JzZXJ2ZXI7XG4gIG9ic2VydmVyID0gbmV3IFN1YnNjcmlwdGlvbk9ic2VydmVyKHRoaXMpO1xuICB0cnkge1xuICAgIHZhciBjbGVhbnVwICAgICAgPSBzdWJzY3JpYmVyKG9ic2VydmVyKVxuICAgICAgLCBzdWJzY3JpcHRpb24gPSBjbGVhbnVwO1xuICAgIGlmKGNsZWFudXAgIT0gbnVsbCl7XG4gICAgICBpZih0eXBlb2YgY2xlYW51cC51bnN1YnNjcmliZSA9PT0gJ2Z1bmN0aW9uJyljbGVhbnVwID0gZnVuY3Rpb24oKXsgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7IH07XG4gICAgICBlbHNlIGFGdW5jdGlvbihjbGVhbnVwKTtcbiAgICAgIHRoaXMuX2MgPSBjbGVhbnVwO1xuICAgIH1cbiAgfSBjYXRjaChlKXtcbiAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICByZXR1cm47XG4gIH0gaWYoc3Vic2NyaXB0aW9uQ2xvc2VkKHRoaXMpKWNsZWFudXBTdWJzY3JpcHRpb24odGhpcyk7XG59O1xuXG5TdWJzY3JpcHRpb24ucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcbiAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCl7IGNsb3NlU3Vic2NyaXB0aW9uKHRoaXMpOyB9XG59KTtcblxudmFyIFN1YnNjcmlwdGlvbk9ic2VydmVyID0gZnVuY3Rpb24oc3Vic2NyaXB0aW9uKXtcbiAgdGhpcy5fcyA9IHN1YnNjcmlwdGlvbjtcbn07XG5cblN1YnNjcmlwdGlvbk9ic2VydmVyLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7XG4gIG5leHQ6IGZ1bmN0aW9uIG5leHQodmFsdWUpe1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSl7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5uZXh0KTtcbiAgICAgICAgaWYobSlyZXR1cm4gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7XG4gICAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsb3NlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKHZhbHVlKXtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZihzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSl0aHJvdyB2YWx1ZTtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIHRyeSB7XG4gICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5lcnJvcik7XG4gICAgICBpZighbSl0aHJvdyB2YWx1ZTtcbiAgICAgIHZhbHVlID0gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUodmFsdWUpe1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSl7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5jb21wbGV0ZSk7XG4gICAgICAgIHZhbHVlID0gbSA/IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpIDogdW5kZWZpbmVkO1xuICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG59KTtcblxudmFyICRPYnNlcnZhYmxlID0gZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmVyKXtcbiAgYW5JbnN0YW5jZSh0aGlzLCAkT2JzZXJ2YWJsZSwgJ09ic2VydmFibGUnLCAnX2YnKS5fZiA9IGFGdW5jdGlvbihzdWJzY3JpYmVyKTtcbn07XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwge1xuICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcil7XG4gICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24ob2JzZXJ2ZXIsIHRoaXMuX2YpO1xuICB9LFxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGZuKXtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyAoY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgICAgYUZ1bmN0aW9uKGZuKTtcbiAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGF0LnN1YnNjcmliZSh7XG4gICAgICAgIG5leHQgOiBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmbih2YWx1ZSk7XG4gICAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IHJlamVjdCxcbiAgICAgICAgY29tcGxldGU6IHJlc29sdmVcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59KTtcblxucmVkZWZpbmVBbGwoJE9ic2VydmFibGUsIHtcbiAgZnJvbTogZnVuY3Rpb24gZnJvbSh4KXtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlO1xuICAgIHZhciBtZXRob2QgPSBnZXRNZXRob2QoYW5PYmplY3QoeClbT0JTRVJWQUJMRV0pO1xuICAgIGlmKG1ldGhvZCl7XG4gICAgICB2YXIgb2JzZXJ2YWJsZSA9IGFuT2JqZWN0KG1ldGhvZC5jYWxsKHgpKTtcbiAgICAgIHJldHVybiBvYnNlcnZhYmxlLmNvbnN0cnVjdG9yID09PSBDID8gb2JzZXJ2YWJsZSA6IG5ldyBDKGZ1bmN0aW9uKG9ic2VydmVyKXtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24ob2JzZXJ2ZXIpe1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbigpe1xuICAgICAgICBpZighZG9uZSl7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmKGZvck9mKHgsIGZhbHNlLCBmdW5jdGlvbihpdCl7XG4gICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXQpO1xuICAgICAgICAgICAgICBpZihkb25lKXJldHVybiBSRVRVUk47XG4gICAgICAgICAgICB9KSA9PT0gUkVUVVJOKXJldHVybjtcbiAgICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgaWYoZG9uZSl0aHJvdyBlO1xuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfSxcbiAgb2Y6IGZ1bmN0aW9uIG9mKCl7XG4gICAgZm9yKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGgsIGl0ZW1zID0gQXJyYXkobCk7IGkgPCBsOylpdGVtc1tpXSA9IGFyZ3VtZW50c1tpKytdO1xuICAgIHJldHVybiBuZXcgKHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlKShmdW5jdGlvbihvYnNlcnZlcil7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmKCFkb25lKXtcbiAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyArK2kpe1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdGVtc1tpXSk7XG4gICAgICAgICAgICBpZihkb25lKXJldHVybjtcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7IGRvbmUgPSB0cnVlOyB9O1xuICAgIH0pO1xuICB9XG59KTtcblxuaGlkZSgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIE9CU0VSVkFCTEUsIGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHtPYnNlcnZhYmxlOiAkT2JzZXJ2YWJsZX0pO1xuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdPYnNlcnZhYmxlJyk7IiwidmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleVxuICAsIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5zZXQ7XG5cbm1ldGFkYXRhLmV4cCh7ZGVmaW5lTWV0YWRhdGE6IGZ1bmN0aW9uIGRlZmluZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHRhcmdldEtleSl7XG4gIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIGFuT2JqZWN0KHRhcmdldCksIHRvTWV0YUtleSh0YXJnZXRLZXkpKTtcbn19KTsiLCJ2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5XG4gICwgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IG1ldGFkYXRhLm1hcFxuICAsIHN0b3JlICAgICAgICAgICAgICAgICAgPSBtZXRhZGF0YS5zdG9yZTtcblxubWV0YWRhdGEuZXhwKHtkZWxldGVNZXRhZGF0YTogZnVuY3Rpb24gZGVsZXRlTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXtcbiAgdmFyIHRhcmdldEtleSAgID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKVxuICAgICwgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKGFuT2JqZWN0KHRhcmdldCksIHRhcmdldEtleSwgZmFsc2UpO1xuICBpZihtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkIHx8ICFtZXRhZGF0YU1hcFsnZGVsZXRlJ10obWV0YWRhdGFLZXkpKXJldHVybiBmYWxzZTtcbiAgaWYobWV0YWRhdGFNYXAuc2l6ZSlyZXR1cm4gdHJ1ZTtcbiAgdmFyIHRhcmdldE1ldGFkYXRhID0gc3RvcmUuZ2V0KHRhcmdldCk7XG4gIHRhcmdldE1ldGFkYXRhWydkZWxldGUnXSh0YXJnZXRLZXkpO1xuICByZXR1cm4gISF0YXJnZXRNZXRhZGF0YS5zaXplIHx8IHN0b3JlWydkZWxldGUnXSh0YXJnZXQpO1xufX0pOyIsInZhciBTZXQgICAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vZXM2LnNldCcpXG4gICwgZnJvbSAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJylcbiAgLCBtZXRhZGF0YSAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgZ2V0UHJvdG90eXBlT2YgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IG1ldGFkYXRhLmtleXNcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5TWV0YWRhdGFLZXlzID0gZnVuY3Rpb24oTywgUCl7XG4gIHZhciBvS2V5cyAgPSBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhPLCBQKVxuICAgICwgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIGlmKHBhcmVudCA9PT0gbnVsbClyZXR1cm4gb0tleXM7XG4gIHZhciBwS2V5cyAgPSBvcmRpbmFyeU1ldGFkYXRhS2V5cyhwYXJlbnQsIFApO1xuICByZXR1cm4gcEtleXMubGVuZ3RoID8gb0tleXMubGVuZ3RoID8gZnJvbShuZXcgU2V0KG9LZXlzLmNvbmNhdChwS2V5cykpKSA6IHBLZXlzIDogb0tleXM7XG59O1xuXG5tZXRhZGF0YS5leHAoe2dldE1ldGFkYXRhS2V5czogZnVuY3Rpb24gZ2V0TWV0YWRhdGFLZXlzKHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXtcbiAgcmV0dXJuIG9yZGluYXJ5TWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpO1xufX0pOyIsInZhciBtZXRhZGF0YSAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGdldFByb3RvdHlwZU9mICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzXG4gICwgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldFxuICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeUdldE1ldGFkYXRhID0gZnVuY3Rpb24oTWV0YWRhdGFLZXksIE8sIFApe1xuICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIGlmKGhhc093bilyZXR1cm4gb3JkaW5hcnlHZXRPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5R2V0TWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiB1bmRlZmluZWQ7XG59O1xuXG5tZXRhZGF0YS5leHAoe2dldE1ldGFkYXRhOiBmdW5jdGlvbiBnZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pe1xuICByZXR1cm4gb3JkaW5hcnlHZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59fSk7IiwidmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IG1ldGFkYXRhLmtleXNcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHtnZXRPd25NZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhS2V5cyh0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7XG4gIHJldHVybiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn19KTsiLCJ2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0XG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHtnZXRPd25NZXRhZGF0YTogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufX0pOyIsInZhciBtZXRhZGF0YSAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGdldFByb3RvdHlwZU9mICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzXG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5SGFzTWV0YWRhdGEgPSBmdW5jdGlvbihNZXRhZGF0YUtleSwgTywgUCl7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYoaGFzT3duKXJldHVybiB0cnVlO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIHJldHVybiBwYXJlbnQgIT09IG51bGwgPyBvcmRpbmFyeUhhc01ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApIDogZmFsc2U7XG59O1xuXG5tZXRhZGF0YS5leHAoe2hhc01ldGFkYXRhOiBmdW5jdGlvbiBoYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pe1xuICByZXR1cm4gb3JkaW5hcnlIYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59fSk7IiwidmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhc1xuICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7aGFzT3duTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7XG4gIHJldHVybiBvcmRpbmFyeUhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpXG4gICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn19KTsiLCJ2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBhRnVuY3Rpb24gICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleVxuICAsIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5zZXQ7XG5cbm1ldGFkYXRhLmV4cCh7bWV0YWRhdGE6IGZ1bmN0aW9uIG1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGRlY29yYXRvcih0YXJnZXQsIHRhcmdldEtleSl7XG4gICAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShcbiAgICAgIG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLFxuICAgICAgKHRhcmdldEtleSAhPT0gdW5kZWZpbmVkID8gYW5PYmplY3QgOiBhRnVuY3Rpb24pKHRhcmdldCksXG4gICAgICB0b01ldGFLZXkodGFyZ2V0S2V5KVxuICAgICk7XG4gIH07XG59fSk7IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnU2V0Jywge3RvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ1NldCcpfSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRhdCAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIGF0OiBmdW5jdGlvbiBhdChwb3Mpe1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9TdHJpbmcucHJvdG90eXBlLm1hdGNoQWxsL1xudmFyICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBkZWZpbmVkICAgICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKVxuICAsIHRvTGVuZ3RoICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBpc1JlZ0V4cCAgICA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpXG4gICwgZ2V0RmxhZ3MgICAgPSByZXF1aXJlKCcuL19mbGFncycpXG4gICwgUmVnRXhwUHJvdG8gPSBSZWdFeHAucHJvdG90eXBlO1xuXG52YXIgJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yID0gZnVuY3Rpb24ocmVnZXhwLCBzdHJpbmcpe1xuICB0aGlzLl9yID0gcmVnZXhwO1xuICB0aGlzLl9zID0gc3RyaW5nO1xufTtcblxucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKSgkUmVnRXhwU3RyaW5nSXRlcmF0b3IsICdSZWdFeHAgU3RyaW5nJywgZnVuY3Rpb24gbmV4dCgpe1xuICB2YXIgbWF0Y2ggPSB0aGlzLl9yLmV4ZWModGhpcy5fcyk7XG4gIHJldHVybiB7dmFsdWU6IG1hdGNoLCBkb25lOiBtYXRjaCA9PT0gbnVsbH07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIG1hdGNoQWxsOiBmdW5jdGlvbiBtYXRjaEFsbChyZWdleHApe1xuICAgIGRlZmluZWQodGhpcyk7XG4gICAgaWYoIWlzUmVnRXhwKHJlZ2V4cCkpdGhyb3cgVHlwZUVycm9yKHJlZ2V4cCArICcgaXMgbm90IGEgcmVnZXhwIScpO1xuICAgIHZhciBTICAgICA9IFN0cmluZyh0aGlzKVxuICAgICAgLCBmbGFncyA9ICdmbGFncycgaW4gUmVnRXhwUHJvdG8gPyBTdHJpbmcocmVnZXhwLmZsYWdzKSA6IGdldEZsYWdzLmNhbGwocmVnZXhwKVxuICAgICAgLCByeCAgICA9IG5ldyBSZWdFeHAocmVnZXhwLnNvdXJjZSwgfmZsYWdzLmluZGV4T2YoJ2cnKSA/IGZsYWdzIDogJ2cnICsgZmxhZ3MpO1xuICAgIHJ4Lmxhc3RJbmRleCA9IHRvTGVuZ3RoKHJlZ2V4cC5sYXN0SW5kZXgpO1xuICAgIHJldHVybiBuZXcgJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yKHJ4LCBTKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkcGFkICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoIC8qLCBmaWxsU3RyaW5nID0gJyAnICovKXtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmYWxzZSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHBhZCAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIHBhZFN0YXJ0OiBmdW5jdGlvbiBwYWRTdGFydChtYXhMZW5ndGggLyosIGZpbGxTdHJpbmcgPSAnICcgKi8pe1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltTGVmdCcsIGZ1bmN0aW9uKCR0cmltKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1MZWZ0KCl7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDEpO1xuICB9O1xufSwgJ3RyaW1TdGFydCcpOyIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1SaWdodCcsIGZ1bmN0aW9uKCR0cmltKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1SaWdodCgpe1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAyKTtcbiAgfTtcbn0sICd0cmltRW5kJyk7IiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7IiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdvYnNlcnZhYmxlJyk7IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3lzdGVtJywge2dsb2JhbDogcmVxdWlyZSgnLi9fZ2xvYmFsJyl9KTsiLCJ2YXIgJGl0ZXJhdG9ycyAgICA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJylcbiAgLCByZWRlZmluZSAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKVxuICAsIGdsb2JhbCAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGhpZGUgICAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCBJdGVyYXRvcnMgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgLCB3a3MgICAgICAgICAgID0gcmVxdWlyZSgnLi9fd2tzJylcbiAgLCBJVEVSQVRPUiAgICAgID0gd2tzKCdpdGVyYXRvcicpXG4gICwgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKVxuICAsIEFycmF5VmFsdWVzICAgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmZvcih2YXIgY29sbGVjdGlvbnMgPSBbJ05vZGVMaXN0JywgJ0RPTVRva2VuTGlzdCcsICdNZWRpYUxpc3QnLCAnU3R5bGVTaGVldExpc3QnLCAnQ1NTUnVsZUxpc3QnXSwgaSA9IDA7IGkgPCA1OyBpKyspe1xuICB2YXIgTkFNRSAgICAgICA9IGNvbGxlY3Rpb25zW2ldXG4gICAgLCBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdXG4gICAgLCBwcm90byAgICAgID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZVxuICAgICwga2V5O1xuICBpZihwcm90byl7XG4gICAgaWYoIXByb3RvW0lURVJBVE9SXSloaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmKCFwcm90b1tUT19TVFJJTkdfVEFHXSloaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBmb3Ioa2V5IGluICRpdGVyYXRvcnMpaWYoIXByb3RvW2tleV0pcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgfVxufSIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkdGFzayAgID0gcmVxdWlyZSgnLi9fdGFzaycpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIsIHtcbiAgc2V0SW1tZWRpYXRlOiAgICR0YXNrLnNldCxcbiAgY2xlYXJJbW1lZGlhdGU6ICR0YXNrLmNsZWFyXG59KTsiLCIvLyBpZTktIHNldFRpbWVvdXQgJiBzZXRJbnRlcnZhbCBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZml4XG52YXIgZ2xvYmFsICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgJGV4cG9ydCAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgaW52b2tlICAgICA9IHJlcXVpcmUoJy4vX2ludm9rZScpXG4gICwgcGFydGlhbCAgICA9IHJlcXVpcmUoJy4vX3BhcnRpYWwnKVxuICAsIG5hdmlnYXRvciAgPSBnbG9iYWwubmF2aWdhdG9yXG4gICwgTVNJRSAgICAgICA9ICEhbmF2aWdhdG9yICYmIC9NU0lFIC5cXC4vLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7IC8vIDwtIGRpcnR5IGllOS0gY2hlY2tcbnZhciB3cmFwID0gZnVuY3Rpb24oc2V0KXtcbiAgcmV0dXJuIE1TSUUgPyBmdW5jdGlvbihmbiwgdGltZSAvKiwgLi4uYXJncyAqLyl7XG4gICAgcmV0dXJuIHNldChpbnZva2UoXG4gICAgICBwYXJ0aWFsLFxuICAgICAgW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpLFxuICAgICAgdHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKVxuICAgICksIHRpbWUpO1xuICB9IDogc2V0O1xufTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CICsgJGV4cG9ydC5GICogTVNJRSwge1xuICBzZXRUaW1lb3V0OiAgd3JhcChnbG9iYWwuc2V0VGltZW91dCksXG4gIHNldEludGVydmFsOiB3cmFwKGdsb2JhbC5zZXRJbnRlcnZhbClcbn0pOyIsInJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYWNvc2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hc2luaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY2JydCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNsejMyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY29zaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5pbXVsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cxcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaWduJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguc2luaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnRhbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC50cnVuYycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yYXcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJpZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5saW5rJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdWInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN1cCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLm5vdycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuam9pbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zbGljZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb3J0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lm1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc29tZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmlsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLW1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLXNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmhhcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLmF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtZ2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtc2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtZ2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtc2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5c3RlbS5nbG9iYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuZXJyb3IuaXMtZXJyb3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pYWRkaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaW11bGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC51bXVsaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlZmluZS1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hc2FwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9ic2VydmFibGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIudGltZXJzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLmltbWVkaWF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9tb2R1bGVzL19jb3JlJyk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9tYXN0ZXIvTElDRU5TRSBmaWxlLiBBblxuICogYWRkaXRpb25hbCBncmFudCBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluXG4gKiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuIShmdW5jdGlvbihnbG9iYWwpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIHZhciBpbk1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCI7XG4gIHZhciBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgaWYgKHJ1bnRpbWUpIHtcbiAgICBpZiAoaW5Nb2R1bGUpIHtcbiAgICAgIC8vIElmIHJlZ2VuZXJhdG9yUnVudGltZSBpcyBkZWZpbmVkIGdsb2JhbGx5IGFuZCB3ZSdyZSBpbiBhIG1vZHVsZSxcbiAgICAgIC8vIG1ha2UgdGhlIGV4cG9ydHMgb2JqZWN0IGlkZW50aWNhbCB0byByZWdlbmVyYXRvclJ1bnRpbWUuXG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHJ1bnRpbWU7XG4gICAgfVxuICAgIC8vIERvbid0IGJvdGhlciBldmFsdWF0aW5nIHRoZSByZXN0IG9mIHRoaXMgZmlsZSBpZiB0aGUgcnVudGltZSB3YXNcbiAgICAvLyBhbHJlYWR5IGRlZmluZWQgZ2xvYmFsbHkuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRGVmaW5lIHRoZSBydW50aW1lIGdsb2JhbGx5IChhcyBleHBlY3RlZCBieSBnZW5lcmF0ZWQgY29kZSkgYXMgZWl0aGVyXG4gIC8vIG1vZHVsZS5leHBvcnRzIChpZiB3ZSdyZSBpbiBhIG1vZHVsZSkgb3IgYSBuZXcsIGVtcHR5IG9iamVjdC5cbiAgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWUgPSBpbk1vZHVsZSA/IG1vZHVsZS5leHBvcnRzIDoge307XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUoKG91dGVyRm4gfHwgR2VuZXJhdG9yKS5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIHJ1bnRpbWUud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9IEdlbmVyYXRvci5wcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9IEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIHJ1bnRpbWUubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYHZhbHVlIGluc3RhbmNlb2YgQXdhaXRBcmd1bWVudGAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuIFNvbWUgbWF5IGNvbnNpZGVyIHRoZSBuYW1lIG9mIHRoaXMgbWV0aG9kIHRvb1xuICAvLyBjdXRlc3ksIGJ1dCB0aGV5IGFyZSBjdXJtdWRnZW9ucy5cbiAgcnVudGltZS5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBuZXcgQXdhaXRBcmd1bWVudChhcmcpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIEF3YWl0QXJndW1lbnQoYXJnKSB7XG4gICAgdGhpcy5hcmcgPSBhcmc7XG4gIH1cblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEF3YWl0QXJndW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLmFyZykudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi4gSWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIGhvd2V2ZXIsIHRoZVxuICAgICAgICAgIC8vIHJlc3VsdCBmb3IgdGhpcyBpdGVyYXRpb24gd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSBzYW1lXG4gICAgICAgICAgLy8gcmVhc29uLiBOb3RlIHRoYXQgcmVqZWN0aW9ucyBvZiB5aWVsZGVkIFByb21pc2VzIGFyZSBub3RcbiAgICAgICAgICAvLyB0aHJvd24gYmFjayBpbnRvIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIGFzIGlzIHRoZSBjYXNlXG4gICAgICAgICAgLy8gd2hlbiBhbiBhd2FpdGVkIFByb21pc2UgaXMgcmVqZWN0ZWQuIFRoaXMgZGlmZmVyZW5jZSBpblxuICAgICAgICAgIC8vIGJlaGF2aW9yIGJldHdlZW4geWllbGQgYW5kIGF3YWl0IGlzIGltcG9ydGFudCwgYmVjYXVzZSBpdFxuICAgICAgICAgIC8vIGFsbG93cyB0aGUgY29uc3VtZXIgdG8gZGVjaWRlIHdoYXQgdG8gZG8gd2l0aCB0aGUgeWllbGRlZFxuICAgICAgICAgIC8vIHJlamVjdGlvbiAoc3dhbGxvdyBpdCBhbmQgY29udGludWUsIG1hbnVhbGx5IC50aHJvdyBpdCBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgZ2VuZXJhdG9yLCBhYmFuZG9uIGl0ZXJhdGlvbiwgd2hhdGV2ZXIpLiBXaXRoXG4gICAgICAgICAgLy8gYXdhaXQsIGJ5IGNvbnRyYXN0LCB0aGVyZSBpcyBubyBvcHBvcnR1bml0eSB0byBleGFtaW5lIHRoZVxuICAgICAgICAgIC8vIHJlamVjdGlvbiByZWFzb24gb3V0c2lkZSB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBzbyB0aGVcbiAgICAgICAgICAvLyBvbmx5IG9wdGlvbiBpcyB0byB0aHJvdyBpdCBmcm9tIHRoZSBhd2FpdCBleHByZXNzaW9uLCBhbmRcbiAgICAgICAgICAvLyBsZXQgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiBoYW5kbGUgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJiBwcm9jZXNzLmRvbWFpbikge1xuICAgICAgaW52b2tlID0gcHJvY2Vzcy5kb21haW4uYmluZChpbnZva2UpO1xuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICBpZiAobWV0aG9kID09PSBcInJldHVyblwiIHx8XG4gICAgICAgICAgICAgIChtZXRob2QgPT09IFwidGhyb3dcIiAmJiBkZWxlZ2F0ZS5pdGVyYXRvclttZXRob2RdID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICAvLyBBIHJldHVybiBvciB0aHJvdyAod2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIHRocm93XG4gICAgICAgICAgICAvLyBtZXRob2QpIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgICAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgICB2YXIgcmV0dXJuTWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl07XG4gICAgICAgICAgICBpZiAocmV0dXJuTWV0aG9kKSB7XG4gICAgICAgICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChyZXR1cm5NZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBhcmcpO1xuICAgICAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSByZXR1cm4gbWV0aG9kIHRocmV3IGFuIGV4Y2VwdGlvbiwgbGV0IHRoYXRcbiAgICAgICAgICAgICAgICAvLyBleGNlcHRpb24gcHJldmFpbCBvdmVyIHRoZSBvcmlnaW5hbCByZXR1cm4gb3IgdGhyb3cuXG4gICAgICAgICAgICAgICAgbWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgICAgICAgIGFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgICAgICAvLyBDb250aW51ZSB3aXRoIHRoZSBvdXRlciByZXR1cm4sIG5vdyB0aGF0IHRoZSBkZWxlZ2F0ZVxuICAgICAgICAgICAgICAvLyBpdGVyYXRvciBoYXMgYmVlbiB0ZXJtaW5hdGVkLlxuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goXG4gICAgICAgICAgICBkZWxlZ2F0ZS5pdGVyYXRvclttZXRob2RdLFxuICAgICAgICAgICAgZGVsZWdhdGUuaXRlcmF0b3IsXG4gICAgICAgICAgICBhcmdcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICAgICAgICAvLyBMaWtlIHJldHVybmluZyBnZW5lcmF0b3IudGhyb3codW5jYXVnaHQpLCBidXQgd2l0aG91dCB0aGVcbiAgICAgICAgICAgIC8vIG92ZXJoZWFkIG9mIGFuIGV4dHJhIGZ1bmN0aW9uIGNhbGwuXG4gICAgICAgICAgICBtZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgICBhcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gRGVsZWdhdGUgZ2VuZXJhdG9yIHJhbiBhbmQgaGFuZGxlZCBpdHMgb3duIGV4Y2VwdGlvbnMgc29cbiAgICAgICAgICAvLyByZWdhcmRsZXNzIG9mIHdoYXQgdGhlIG1ldGhvZCB3YXMsIHdlIGNvbnRpbnVlIGFzIGlmIGl0IGlzXG4gICAgICAgICAgLy8gXCJuZXh0XCIgd2l0aCBhbiB1bmRlZmluZWQgYXJnLlxuICAgICAgICAgIG1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcbiAgICAgICAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAgICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcbiAgICAgICAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcbiAgICAgICAgICAgIHJldHVybiBpbmZvO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBhcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihhcmcpKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICAgIG1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgICAgYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgdmFyIGluZm8gPSB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgaWYgKGNvbnRleHQuZGVsZWdhdGUgJiYgbWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgICAgICAgIGFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGluZm87XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIG1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBhcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcbiAgICAgICAgcmV0dXJuICEhY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcbn0pKFxuICAvLyBBbW9uZyB0aGUgdmFyaW91cyB0cmlja3MgZm9yIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsXG4gIC8vIG9iamVjdCwgdGhpcyBzZWVtcyB0byBiZSB0aGUgbW9zdCByZWxpYWJsZSB0ZWNobmlxdWUgdGhhdCBkb2VzIG5vdFxuICAvLyB1c2UgaW5kaXJlY3QgZXZhbCAod2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kpLlxuICB0eXBlb2YgZ2xvYmFsID09PSBcIm9iamVjdFwiID8gZ2xvYmFsIDpcbiAgdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiA/IHdpbmRvdyA6XG4gIHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiID8gc2VsZiA6IHRoaXNcbik7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vanNvbi9zdHJpbmdpZnlcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2Fzc2lnblwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvclwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZlwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvaXMtZnJvemVuXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9zZXQtcHJvdG90eXBlLW9mXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3Byb21pc2VcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvclwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIik7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVmaW5lUHJvcGVydHkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mXCIpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yXCIpO1xuXG52YXIgX2dldE93blByb3BlcnR5RGVzY3JpcHRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHtcbiAgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuICB2YXIgZGVzYyA9ICgwLCBfZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yMi5kZWZhdWx0KShvYmplY3QsIHByb3BlcnR5KTtcblxuICBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIHBhcmVudCA9ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKG9iamVjdCk7XG5cbiAgICBpZiAocGFyZW50ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHtcbiAgICByZXR1cm4gZGVzYy52YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7XG5cbiAgICBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTtcbiAgfVxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9zZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mXCIpO1xuXG52YXIgX3NldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NldFByb3RvdHlwZU9mKTtcblxudmFyIF9jcmVhdGUgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvY3JlYXRlXCIpO1xuXG52YXIgX2NyZWF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGUpO1xuXG52YXIgX3R5cGVvZjIgPSByZXF1aXJlKFwiLi4vaGVscGVycy90eXBlb2ZcIik7XG5cbnZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgKHR5cGVvZiBzdXBlckNsYXNzID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShzdXBlckNsYXNzKSkpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gKDAsIF9jcmVhdGUyLmRlZmF1bHQpKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2YyLmRlZmF1bHQgPyAoMCwgX3NldFByb3RvdHlwZU9mMi5kZWZhdWx0KShzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHNlbGYsIGNhbGwpIHtcbiAgaWYgKCFzZWxmKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIGNhbGwgJiYgKCh0eXBlb2YgY2FsbCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoY2FsbCkpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2l0ZXJhdG9yID0gcmVxdWlyZShcIi4uL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yXCIpO1xuXG52YXIgX2l0ZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2l0ZXJhdG9yKTtcblxudmFyIF9zeW1ib2wgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9zeW1ib2xcIik7XG5cbnZhciBfc3ltYm9sMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N5bWJvbCk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgX2l0ZXJhdG9yMi5kZWZhdWx0ID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gX3N5bWJvbDIuZGVmYXVsdCA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIF90eXBlb2YoX2l0ZXJhdG9yMi5kZWZhdWx0KSA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gX3N5bWJvbDIuZGVmYXVsdCA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yob2JqKTtcbn07IiwidmFyIGNvcmUgID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpXG4gICwgJEpTT04gPSBjb3JlLkpTT04gfHwgKGNvcmUuSlNPTiA9IHtzdHJpbmdpZnk6IEpTT04uc3RyaW5naWZ5fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgcmV0dXJuICRKU09OLnN0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJndW1lbnRzKTtcbn07IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmFzc2lnbjsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZShQLCBEKXtcbiAgcmV0dXJuICRPYmplY3QuY3JlYXRlKFAsIEQpO1xufTsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIGRlc2Mpe1xuICByZXR1cm4gJE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKTtcbn07IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSl7XG4gIHJldHVybiAkT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KTtcbn07IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5nZXRQcm90b3R5cGVPZjsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QuaXNGcm96ZW47IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5rZXlzOyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Quc2V0UHJvdG90eXBlT2Y7IiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpLlByb21pc2U7IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TeW1ib2w7IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fd2tzLWV4dCcpLmYoJ2l0ZXJhdG9yJyk7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9OyIsInZhciBnbG9iYWwgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGNvcmUgICAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKVxuICAsIGN0eCAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgaGlkZSAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24odHlwZSwgbmFtZSwgc291cmNlKXtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkZcbiAgICAsIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0LkdcbiAgICAsIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlNcbiAgICAsIElTX1BST1RPICA9IHR5cGUgJiAkZXhwb3J0LlBcbiAgICAsIElTX0JJTkQgICA9IHR5cGUgJiAkZXhwb3J0LkJcbiAgICAsIElTX1dSQVAgICA9IHR5cGUgJiAkZXhwb3J0LldcbiAgICAsIGV4cG9ydHMgICA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pXG4gICAgLCBleHBQcm90byAgPSBleHBvcnRzW1BST1RPVFlQRV1cbiAgICAsIHRhcmdldCAgICA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV1cbiAgICAsIGtleSwgb3duLCBvdXQ7XG4gIGlmKElTX0dMT0JBTClzb3VyY2UgPSBuYW1lO1xuICBmb3Ioa2V5IGluIHNvdXJjZSl7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICBpZihvd24gJiYga2V5IGluIGV4cG9ydHMpY29udGludWU7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSBvd24gPyB0YXJnZXRba2V5XSA6IHNvdXJjZVtrZXldO1xuICAgIC8vIHByZXZlbnQgZ2xvYmFsIHBvbGx1dGlvbiBmb3IgbmFtZXNwYWNlc1xuICAgIGV4cG9ydHNba2V5XSA9IElTX0dMT0JBTCAmJiB0eXBlb2YgdGFyZ2V0W2tleV0gIT0gJ2Z1bmN0aW9uJyA/IHNvdXJjZVtrZXldXG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICA6IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKVxuICAgIC8vIHdyYXAgZ2xvYmFsIGNvbnN0cnVjdG9ycyBmb3IgcHJldmVudCBjaGFuZ2UgdGhlbSBpbiBsaWJyYXJ5XG4gICAgOiBJU19XUkFQICYmIHRhcmdldFtrZXldID09IG91dCA/IChmdW5jdGlvbihDKXtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24oYSwgYiwgYyl7XG4gICAgICAgIGlmKHRoaXMgaW5zdGFuY2VvZiBDKXtcbiAgICAgICAgICBzd2l0Y2goYXJndW1lbnRzLmxlbmd0aCl7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQztcbiAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDKGEpO1xuICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEMoYSwgYik7XG4gICAgICAgICAgfSByZXR1cm4gbmV3IEMoYSwgYiwgYyk7XG4gICAgICAgIH0gcmV0dXJuIEMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgICBGW1BST1RPVFlQRV0gPSBDW1BST1RPVFlQRV07XG4gICAgICByZXR1cm4gRjtcbiAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHNcbiAgICB9KShvdXQpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLm1ldGhvZHMuJU5BTUUlXG4gICAgaWYoSVNfUFJPVE8pe1xuICAgICAgKGV4cG9ydHMudmlydHVhbCB8fCAoZXhwb3J0cy52aXJ0dWFsID0ge30pKVtrZXldID0gb3V0O1xuICAgICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLnByb3RvdHlwZS4lTkFNRSVcbiAgICAgIGlmKHR5cGUgJiAkZXhwb3J0LlIgJiYgZXhwUHJvdG8gJiYgIWV4cFByb3RvW2tleV0paGlkZShleHBQcm90bywga2V5LCBvdXQpO1xuICAgIH1cbiAgfVxufTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWAgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7IiwibW9kdWxlLmV4cG9ydHMgPSB0cnVlOyIsInZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0YXJnZXQsIHNyYywgc2FmZSl7XG4gIGZvcih2YXIga2V5IGluIHNyYyl7XG4gICAgaWYoc2FmZSAmJiB0YXJnZXRba2V5XSl0YXJnZXRba2V5XSA9IHNyY1trZXldO1xuICAgIGVsc2UgaGlkZSh0YXJnZXQsIGtleSwgc3JjW2tleV0pO1xuICB9IHJldHVybiB0YXJnZXQ7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faGlkZScpOyIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgY29yZSAgICAgICAgPSByZXF1aXJlKCcuL19jb3JlJylcbiAgLCBkUCAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpXG4gICwgU1BFQ0lFUyAgICAgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSl7XG4gIHZhciBDID0gdHlwZW9mIGNvcmVbS0VZXSA9PSAnZnVuY3Rpb24nID8gY29yZVtLRVldIDogZ2xvYmFsW0tFWV07XG4gIGlmKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pZFAuZihDLCBTUEVDSUVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59OyIsIiIsInJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2xvYmFsICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgaGlkZSAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIEl0ZXJhdG9ycyAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKVxuICAsIFRPX1NUUklOR19UQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxuZm9yKHZhciBjb2xsZWN0aW9ucyA9IFsnTm9kZUxpc3QnLCAnRE9NVG9rZW5MaXN0JywgJ01lZGlhTGlzdCcsICdTdHlsZVNoZWV0TGlzdCcsICdDU1NSdWxlTGlzdCddLCBpID0gMDsgaSA8IDU7IGkrKyl7XG4gIHZhciBOQU1FICAgICAgID0gY29sbGVjdGlvbnNbaV1cbiAgICAsIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV1cbiAgICAsIHByb3RvICAgICAgPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICBpZihwcm90byAmJiAhcHJvdG9bVE9fU1RSSU5HX1RBR10paGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IEl0ZXJhdG9ycy5BcnJheTtcbn0iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiLyoqXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXG4qXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbioqL1xuXG4vLyBEaXN0cmlidXRpb24gZmlsZSBmb3IgTWVzc2FnZUZhY3RvcnkuanMgXG4vLyB2ZXJzaW9uOiAwLjQuMFxuLy8gTGFzdCBidWlsZDogTW9uIFNlcCAyNiAyMDE2IDE4OjMwOjUxIEdNVCswMTAwIChXRVNUKVxuXG4hZnVuY3Rpb24oZSl7aWYoXCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUpbW9kdWxlLmV4cG9ydHM9ZSgpO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShbXSxlKTtlbHNle3ZhciB0O3Q9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjp0aGlzLHQuTWVzc2FnZUZhY3Rvcnk9ZSgpfX0oZnVuY3Rpb24oKXt2YXIgZTtyZXR1cm4gZnVuY3Rpb24gdChlLHIsbil7ZnVuY3Rpb24gbyhhLHMpe2lmKCFyW2FdKXtpZighZVthXSl7dmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighcyYmdSlyZXR1cm4gdShhLCEwKTtpZihpKXJldHVybiBpKGEsITApO3ZhciBjPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrYStcIidcIik7dGhyb3cgYy5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGN9dmFyIGw9clthXT17ZXhwb3J0czp7fX07ZVthXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbih0KXt2YXIgcj1lW2FdWzFdW3RdO3JldHVybiBvKHI/cjp0KX0sbCxsLmV4cG9ydHMsdCxlLHIsbil9cmV0dXJuIHJbYV0uZXhwb3J0c31mb3IodmFyIGk9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxhPTA7YTxuLmxlbmd0aDthKyspbyhuW2FdKTtyZXR1cm4gb30oezE6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9e1wiZGVmYXVsdFwiOmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vanNvbi9zdHJpbmdpZnlcIiksX19lc01vZHVsZTohMH19LHtcImNvcmUtanMvbGlicmFyeS9mbi9qc29uL3N0cmluZ2lmeVwiOjE2fV0sMjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17XCJkZWZhdWx0XCI6ZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlXCIpLF9fZXNNb2R1bGU6ITB9fSx7XCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZVwiOjE3fV0sMzpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17XCJkZWZhdWx0XCI6ZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCIpLF9fZXNNb2R1bGU6ITB9fSx7XCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2RlZmluZS1wcm9wZXJ0eVwiOjE4fV0sNDpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17XCJkZWZhdWx0XCI6ZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZnJlZXplXCIpLF9fZXNNb2R1bGU6ITB9fSx7XCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2ZyZWV6ZVwiOjE5fV0sNTpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17XCJkZWZhdWx0XCI6ZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZlwiKSxfX2VzTW9kdWxlOiEwfX0se1wiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtcHJvdG90eXBlLW9mXCI6MjB9XSw2OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXtcImRlZmF1bHRcIjplKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzXCIpLF9fZXNNb2R1bGU6ITB9fSx7XCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2tleXNcIjoyMX1dLDc6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9e1wiZGVmYXVsdFwiOmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2ZcIiksX19lc01vZHVsZTohMH19LHtcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZlwiOjIyfV0sODpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17XCJkZWZhdWx0XCI6ZShcImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2xcIiksX19lc01vZHVsZTohMH19LHtcImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2xcIjoyM31dLDk6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9e1wiZGVmYXVsdFwiOmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yXCIpLF9fZXNNb2R1bGU6ITB9fSx7XCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yXCI6MjR9XSwxMDpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3IuX19lc01vZHVsZT0hMCxyW1wiZGVmYXVsdFwiXT1mdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9fSx7fV0sMTE6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7XCJkZWZhdWx0XCI6ZX19ci5fX2VzTW9kdWxlPSEwO3ZhciBvPWUoXCIuLi9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIiksaT1uKG8pO3JbXCJkZWZhdWx0XCJdPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgbj10W3JdO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSwoMCxpW1wiZGVmYXVsdFwiXSkoZSxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKHQscixuKXtyZXR1cm4gciYmZSh0LnByb3RvdHlwZSxyKSxuJiZlKHQsbiksdH19KCl9LHtcIi4uL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eVwiOjN9XSwxMjpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntcImRlZmF1bHRcIjplfX1yLl9fZXNNb2R1bGU9ITA7dmFyIG89ZShcIi4uL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2ZcIiksaT1uKG8pLGE9ZShcIi4uL2NvcmUtanMvb2JqZWN0L2NyZWF0ZVwiKSxzPW4oYSksdT1lKFwiLi4vaGVscGVycy90eXBlb2ZcIiksYz1uKHUpO3JbXCJkZWZhdWx0XCJdPWZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrKFwidW5kZWZpbmVkXCI9PXR5cGVvZiB0P1widW5kZWZpbmVkXCI6KDAsY1tcImRlZmF1bHRcIl0pKHQpKSk7ZS5wcm90b3R5cGU9KDAsc1tcImRlZmF1bHRcIl0pKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoaVtcImRlZmF1bHRcIl0/KDAsaVtcImRlZmF1bHRcIl0pKGUsdCk6ZS5fX3Byb3RvX189dCl9fSx7XCIuLi9jb3JlLWpzL29iamVjdC9jcmVhdGVcIjoyLFwiLi4vY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZlwiOjcsXCIuLi9oZWxwZXJzL3R5cGVvZlwiOjE0fV0sMTM6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7XCJkZWZhdWx0XCI6ZX19ci5fX2VzTW9kdWxlPSEwO3ZhciBvPWUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKSxpPW4obyk7cltcImRlZmF1bHRcIl09ZnVuY3Rpb24oZSx0KXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIXR8fFwib2JqZWN0XCIhPT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIHQ/XCJ1bmRlZmluZWRcIjooMCxpW1wiZGVmYXVsdFwiXSkodCkpJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2U6dH19LHtcIi4uL2hlbHBlcnMvdHlwZW9mXCI6MTR9XSwxNDpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntcImRlZmF1bHRcIjplfX1yLl9fZXNNb2R1bGU9ITA7dmFyIG89ZShcIi4uL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yXCIpLGk9bihvKSxhPWUoXCIuLi9jb3JlLWpzL3N5bWJvbFwiKSxzPW4oYSksdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBzW1wiZGVmYXVsdFwiXSYmXCJzeW1ib2xcIj09dHlwZW9mIGlbXCJkZWZhdWx0XCJdP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHNbXCJkZWZhdWx0XCJdJiZlLmNvbnN0cnVjdG9yPT09c1tcImRlZmF1bHRcIl0/XCJzeW1ib2xcIjp0eXBlb2YgZX07cltcImRlZmF1bHRcIl09XCJmdW5jdGlvblwiPT10eXBlb2Ygc1tcImRlZmF1bHRcIl0mJlwic3ltYm9sXCI9PT11KGlbXCJkZWZhdWx0XCJdKT9mdW5jdGlvbihlKXtyZXR1cm5cInVuZGVmaW5lZFwiPT10eXBlb2YgZT9cInVuZGVmaW5lZFwiOnUoZSl9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBzW1wiZGVmYXVsdFwiXSYmZS5jb25zdHJ1Y3Rvcj09PXNbXCJkZWZhdWx0XCJdP1wic3ltYm9sXCI6XCJ1bmRlZmluZWRcIj09dHlwZW9mIGU/XCJ1bmRlZmluZWRcIjp1KGUpfX0se1wiLi4vY29yZS1qcy9zeW1ib2xcIjo4LFwiLi4vY29yZS1qcy9zeW1ib2wvaXRlcmF0b3JcIjo5fV0sMTU6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIil9LHtcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIjo5N31dLDE2OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4uLy4uL21vZHVsZXMvX2NvcmVcIiksbz1uLkpTT058fChuLkpTT049e3N0cmluZ2lmeTpKU09OLnN0cmluZ2lmeX0pO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gby5zdHJpbmdpZnkuYXBwbHkobyxhcmd1bWVudHMpfX0se1wiLi4vLi4vbW9kdWxlcy9fY29yZVwiOjMwfV0sMTc6W2Z1bmN0aW9uKGUsdCxyKXtlKFwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZVwiKTt2YXIgbj1lKFwiLi4vLi4vbW9kdWxlcy9fY29yZVwiKS5PYmplY3Q7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG4uY3JlYXRlKGUsdCl9fSx7XCIuLi8uLi9tb2R1bGVzL19jb3JlXCI6MzAsXCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlXCI6ODR9XSwxODpbZnVuY3Rpb24oZSx0LHIpe2UoXCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5XCIpO3ZhciBuPWUoXCIuLi8uLi9tb2R1bGVzL19jb3JlXCIpLk9iamVjdDt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBuLmRlZmluZVByb3BlcnR5KGUsdCxyKX19LHtcIi4uLy4uL21vZHVsZXMvX2NvcmVcIjozMCxcIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHlcIjo4NX1dLDE5OltmdW5jdGlvbihlLHQscil7ZShcIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemVcIiksdC5leHBvcnRzPWUoXCIuLi8uLi9tb2R1bGVzL19jb3JlXCIpLk9iamVjdC5mcmVlemV9LHtcIi4uLy4uL21vZHVsZXMvX2NvcmVcIjozMCxcIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemVcIjo4Nn1dLDIwOltmdW5jdGlvbihlLHQscil7ZShcIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mXCIpLHQuZXhwb3J0cz1lKFwiLi4vLi4vbW9kdWxlcy9fY29yZVwiKS5PYmplY3QuZ2V0UHJvdG90eXBlT2Z9LHtcIi4uLy4uL21vZHVsZXMvX2NvcmVcIjozMCxcIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mXCI6ODd9XSwyMTpbZnVuY3Rpb24oZSx0LHIpe2UoXCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5c1wiKSx0LmV4cG9ydHM9ZShcIi4uLy4uL21vZHVsZXMvX2NvcmVcIikuT2JqZWN0LmtleXN9LHtcIi4uLy4uL21vZHVsZXMvX2NvcmVcIjozMCxcIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzXCI6ODh9XSwyMjpbZnVuY3Rpb24oZSx0LHIpe2UoXCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZlwiKSx0LmV4cG9ydHM9ZShcIi4uLy4uL21vZHVsZXMvX2NvcmVcIikuT2JqZWN0LnNldFByb3RvdHlwZU9mfSx7XCIuLi8uLi9tb2R1bGVzL19jb3JlXCI6MzAsXCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZlwiOjg5fV0sMjM6W2Z1bmN0aW9uKGUsdCxyKXtlKFwiLi4vLi4vbW9kdWxlcy9lczYuc3ltYm9sXCIpLGUoXCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nXCIpLGUoXCIuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3JcIiksZShcIi4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlXCIpLHQuZXhwb3J0cz1lKFwiLi4vLi4vbW9kdWxlcy9fY29yZVwiKS5TeW1ib2x9LHtcIi4uLy4uL21vZHVsZXMvX2NvcmVcIjozMCxcIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmdcIjo5MCxcIi4uLy4uL21vZHVsZXMvZXM2LnN5bWJvbFwiOjkyLFwiLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yXCI6OTMsXCIuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZVwiOjk0fV0sMjQ6W2Z1bmN0aW9uKGUsdCxyKXtlKFwiLi4vLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yXCIpLGUoXCIuLi8uLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGVcIiksdC5leHBvcnRzPWUoXCIuLi8uLi9tb2R1bGVzL193a3MtZXh0XCIpLmYoXCJpdGVyYXRvclwiKX0se1wiLi4vLi4vbW9kdWxlcy9fd2tzLWV4dFwiOjgxLFwiLi4vLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yXCI6OTEsXCIuLi8uLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGVcIjo5NX1dLDI1OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpdGhyb3cgVHlwZUVycm9yKGUrXCIgaXMgbm90IGEgZnVuY3Rpb24hXCIpO3JldHVybiBlfX0se31dLDI2OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWZ1bmN0aW9uKCl7fX0se31dLDI3OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX2lzLW9iamVjdFwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYoIW4oZSkpdGhyb3cgVHlwZUVycm9yKGUrXCIgaXMgbm90IGFuIG9iamVjdCFcIik7cmV0dXJuIGV9fSx7XCIuL19pcy1vYmplY3RcIjo0Nn1dLDI4OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX3RvLWlvYmplY3RcIiksbz1lKFwiLi9fdG8tbGVuZ3RoXCIpLGk9ZShcIi4vX3RvLWluZGV4XCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxyLGEpe3ZhciBzLHU9bih0KSxjPW8odS5sZW5ndGgpLGw9aShhLGMpO2lmKGUmJnIhPXIpe2Zvcig7Yz5sOylpZihzPXVbbCsrXSxzIT1zKXJldHVybiEwfWVsc2UgZm9yKDtjPmw7bCsrKWlmKChlfHxsIGluIHUpJiZ1W2xdPT09cilyZXR1cm4gZXx8bHx8MDtyZXR1cm4hZSYmLTF9fX0se1wiLi9fdG8taW5kZXhcIjo3MyxcIi4vX3RvLWlvYmplY3RcIjo3NSxcIi4vX3RvLWxlbmd0aFwiOjc2fV0sMjk6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj17fS50b1N0cmluZzt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG4uY2FsbChlKS5zbGljZSg4LC0xKX19LHt9XSwzMDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXQuZXhwb3J0cz17dmVyc2lvbjpcIjIuNC4wXCJ9O1wibnVtYmVyXCI9PXR5cGVvZiBfX2UmJihfX2U9bil9LHt9XSwzMTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19hLWZ1bmN0aW9uXCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7aWYobihlKSx2b2lkIDA9PT10KXJldHVybiBlO3N3aXRjaChyKXtjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKHIpe3JldHVybiBlLmNhbGwodCxyKX07Y2FzZSAyOnJldHVybiBmdW5jdGlvbihyLG4pe3JldHVybiBlLmNhbGwodCxyLG4pfTtjYXNlIDM6cmV0dXJuIGZ1bmN0aW9uKHIsbixvKXtyZXR1cm4gZS5jYWxsKHQscixuLG8pfX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZS5hcHBseSh0LGFyZ3VtZW50cyl9fX0se1wiLi9fYS1mdW5jdGlvblwiOjI1fV0sMzI6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYodm9pZCAwPT1lKXRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIitlKTtyZXR1cm4gZX19LHt9XSwzMzpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz0hZShcIi4vX2ZhaWxzXCIpKGZ1bmN0aW9uKCl7cmV0dXJuIDchPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSxcImFcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIDd9fSkuYX0pfSx7XCIuL19mYWlsc1wiOjM4fV0sMzQ6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9faXMtb2JqZWN0XCIpLG89ZShcIi4vX2dsb2JhbFwiKS5kb2N1bWVudCxpPW4obykmJm4oby5jcmVhdGVFbGVtZW50KTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGk/by5jcmVhdGVFbGVtZW50KGUpOnt9fX0se1wiLi9fZ2xvYmFsXCI6MzksXCIuL19pcy1vYmplY3RcIjo0Nn1dLDM1OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPVwiY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mXCIuc3BsaXQoXCIsXCIpfSx7fV0sMzY6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fb2JqZWN0LWtleXNcIiksbz1lKFwiLi9fb2JqZWN0LWdvcHNcIiksaT1lKFwiLi9fb2JqZWN0LXBpZVwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9bihlKSxyPW8uZjtpZihyKWZvcih2YXIgYSxzPXIoZSksdT1pLmYsYz0wO3MubGVuZ3RoPmM7KXUuY2FsbChlLGE9c1tjKytdKSYmdC5wdXNoKGEpO3JldHVybiB0fX0se1wiLi9fb2JqZWN0LWdvcHNcIjo2MCxcIi4vX29iamVjdC1rZXlzXCI6NjMsXCIuL19vYmplY3QtcGllXCI6NjR9XSwzNzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19nbG9iYWxcIiksbz1lKFwiLi9fY29yZVwiKSxpPWUoXCIuL19jdHhcIiksYT1lKFwiLi9faGlkZVwiKSxzPVwicHJvdG90eXBlXCIsdT1mdW5jdGlvbihlLHQscil7dmFyIGMsbCxmLGQ9ZSZ1LkYscD1lJnUuRyxoPWUmdS5TLHk9ZSZ1LlAsbT1lJnUuQix2PWUmdS5XLF89cD9vOm9bdF18fChvW3RdPXt9KSxiPV9bc10sZz1wP246aD9uW3RdOihuW3RdfHx7fSlbc107cCYmKHI9dCk7Zm9yKGMgaW4gcilsPSFkJiZnJiZ2b2lkIDAhPT1nW2NdLGwmJmMgaW4gX3x8KGY9bD9nW2NdOnJbY10sX1tjXT1wJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBnW2NdP3JbY106bSYmbD9pKGYsbik6diYmZ1tjXT09Zj9mdW5jdGlvbihlKXt2YXIgdD1mdW5jdGlvbih0LHIsbil7aWYodGhpcyBpbnN0YW5jZW9mIGUpe3N3aXRjaChhcmd1bWVudHMubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIG5ldyBlO2Nhc2UgMTpyZXR1cm4gbmV3IGUodCk7Y2FzZSAyOnJldHVybiBuZXcgZSh0LHIpfXJldHVybiBuZXcgZSh0LHIsbil9cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfTtyZXR1cm4gdFtzXT1lW3NdLHR9KGYpOnkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGY/aShGdW5jdGlvbi5jYWxsLGYpOmYseSYmKChfLnZpcnR1YWx8fChfLnZpcnR1YWw9e30pKVtjXT1mLGUmdS5SJiZiJiYhYltjXSYmYShiLGMsZikpKX07dS5GPTEsdS5HPTIsdS5TPTQsdS5QPTgsdS5CPTE2LHUuVz0zMix1LlU9NjQsdS5SPTEyOCx0LmV4cG9ydHM9dX0se1wiLi9fY29yZVwiOjMwLFwiLi9fY3R4XCI6MzEsXCIuL19nbG9iYWxcIjozOSxcIi4vX2hpZGVcIjo0MX1dLDM4OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3RyeXtyZXR1cm4hIWUoKX1jYXRjaCh0KXtyZXR1cm4hMH19fSx7fV0sMzk6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj10LmV4cG9ydHM9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93Lk1hdGg9PU1hdGg/d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLk1hdGg9PU1hdGg/c2VsZjpGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XCJudW1iZXJcIj09dHlwZW9mIF9fZyYmKF9fZz1uKX0se31dLDQwOltmdW5jdGlvbihlLHQscil7dmFyIG49e30uaGFzT3duUHJvcGVydHk7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG4uY2FsbChlLHQpfX0se31dLDQxOltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX29iamVjdC1kcFwiKSxvPWUoXCIuL19wcm9wZXJ0eS1kZXNjXCIpO3QuZXhwb3J0cz1lKFwiLi9fZGVzY3JpcHRvcnNcIik/ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBuLmYoZSx0LG8oMSxyKSl9OmZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZVt0XT1yLGV9fSx7XCIuL19kZXNjcmlwdG9yc1wiOjMzLFwiLi9fb2JqZWN0LWRwXCI6NTUsXCIuL19wcm9wZXJ0eS1kZXNjXCI6NjZ9XSw0MjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1lKFwiLi9fZ2xvYmFsXCIpLmRvY3VtZW50JiZkb2N1bWVudC5kb2N1bWVudEVsZW1lbnR9LHtcIi4vX2dsb2JhbFwiOjM5fV0sNDM6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9IWUoXCIuL19kZXNjcmlwdG9yc1wiKSYmIWUoXCIuL19mYWlsc1wiKShmdW5jdGlvbigpe3JldHVybiA3IT1PYmplY3QuZGVmaW5lUHJvcGVydHkoZShcIi4vX2RvbS1jcmVhdGVcIikoXCJkaXZcIiksXCJhXCIse2dldDpmdW5jdGlvbigpe3JldHVybiA3fX0pLmF9KX0se1wiLi9fZGVzY3JpcHRvcnNcIjozMyxcIi4vX2RvbS1jcmVhdGVcIjozNCxcIi4vX2ZhaWxzXCI6Mzh9XSw0NDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19jb2ZcIik7dC5leHBvcnRzPU9iamVjdChcInpcIikucHJvcGVydHlJc0VudW1lcmFibGUoMCk/T2JqZWN0OmZ1bmN0aW9uKGUpe3JldHVyblwiU3RyaW5nXCI9PW4oZSk/ZS5zcGxpdChcIlwiKTpPYmplY3QoZSl9fSx7XCIuL19jb2ZcIjoyOX1dLDQ1OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX2NvZlwiKTt0LmV4cG9ydHM9QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24oZSl7cmV0dXJuXCJBcnJheVwiPT1uKGUpfX0se1wiLi9fY29mXCI6Mjl9XSw0NjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgZT9udWxsIT09ZTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBlfX0se31dLDQ3OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vX29iamVjdC1jcmVhdGVcIiksbz1lKFwiLi9fcHJvcGVydHktZGVzY1wiKSxpPWUoXCIuL19zZXQtdG8tc3RyaW5nLXRhZ1wiKSxhPXt9O2UoXCIuL19oaWRlXCIpKGEsZShcIi4vX3drc1wiKShcIml0ZXJhdG9yXCIpLGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSx0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe2UucHJvdG90eXBlPW4oYSx7bmV4dDpvKDEscil9KSxpKGUsdCtcIiBJdGVyYXRvclwiKX19LHtcIi4vX2hpZGVcIjo0MSxcIi4vX29iamVjdC1jcmVhdGVcIjo1NCxcIi4vX3Byb3BlcnR5LWRlc2NcIjo2NixcIi4vX3NldC10by1zdHJpbmctdGFnXCI6NjksXCIuL193a3NcIjo4Mn1dLDQ4OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vX2xpYnJhcnlcIiksbz1lKFwiLi9fZXhwb3J0XCIpLGk9ZShcIi4vX3JlZGVmaW5lXCIpLGE9ZShcIi4vX2hpZGVcIikscz1lKFwiLi9faGFzXCIpLHU9ZShcIi4vX2l0ZXJhdG9yc1wiKSxjPWUoXCIuL19pdGVyLWNyZWF0ZVwiKSxsPWUoXCIuL19zZXQtdG8tc3RyaW5nLXRhZ1wiKSxmPWUoXCIuL19vYmplY3QtZ3BvXCIpLGQ9ZShcIi4vX3drc1wiKShcIml0ZXJhdG9yXCIpLHA9IShbXS5rZXlzJiZcIm5leHRcImluW10ua2V5cygpKSxoPVwiQEBpdGVyYXRvclwiLHk9XCJrZXlzXCIsbT1cInZhbHVlc1wiLHY9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc307dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyLF8sYixnLEUpe2Mocix0LF8pO3ZhciBqLHcsTyxNPWZ1bmN0aW9uKGUpe2lmKCFwJiZlIGluIFIpcmV0dXJuIFJbZV07c3dpdGNoKGUpe2Nhc2UgeTpyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHIodGhpcyxlKX07Y2FzZSBtOnJldHVybiBmdW5jdGlvbigpe3JldHVybiBuZXcgcih0aGlzLGUpfX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHIodGhpcyxlKX19LHg9dCtcIiBJdGVyYXRvclwiLFA9Yj09bSxrPSExLFI9ZS5wcm90b3R5cGUsUz1SW2RdfHxSW2hdfHxiJiZSW2JdLEE9U3x8TShiKSxUPWI/UD9NKFwiZW50cmllc1wiKTpBOnZvaWQgMCxOPVwiQXJyYXlcIj09dD9SLmVudHJpZXN8fFM6UztpZihOJiYoTz1mKE4uY2FsbChuZXcgZSkpLE8hPT1PYmplY3QucHJvdG90eXBlJiYobChPLHgsITApLG58fHMoTyxkKXx8YShPLGQsdikpKSxQJiZTJiZTLm5hbWUhPT1tJiYoaz0hMCxBPWZ1bmN0aW9uKCl7cmV0dXJuIFMuY2FsbCh0aGlzKX0pLG4mJiFFfHwhcCYmIWsmJlJbZF18fGEoUixkLEEpLHVbdF09QSx1W3hdPXYsYilpZihqPXt2YWx1ZXM6UD9BOk0obSksa2V5czpnP0E6TSh5KSxlbnRyaWVzOlR9LEUpZm9yKHcgaW4gail3IGluIFJ8fGkoUix3LGpbd10pO2Vsc2UgbyhvLlArby5GKihwfHxrKSx0LGopO3JldHVybiBqfX0se1wiLi9fZXhwb3J0XCI6MzcsXCIuL19oYXNcIjo0MCxcIi4vX2hpZGVcIjo0MSxcIi4vX2l0ZXItY3JlYXRlXCI6NDcsXCIuL19pdGVyYXRvcnNcIjo1MCxcIi4vX2xpYnJhcnlcIjo1MixcIi4vX29iamVjdC1ncG9cIjo2MSxcIi4vX3JlZGVmaW5lXCI6NjcsXCIuL19zZXQtdG8tc3RyaW5nLXRhZ1wiOjY5LFwiLi9fd2tzXCI6ODJ9XSw0OTpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybnt2YWx1ZTp0LGRvbmU6ISFlfX19LHt9XSw1MDpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17fX0se31dLDUxOltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX29iamVjdC1rZXlzXCIpLG89ZShcIi4vX3RvLWlvYmplY3RcIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByLGk9byhlKSxhPW4oaSkscz1hLmxlbmd0aCx1PTA7cz51OylpZihpW3I9YVt1KytdXT09PXQpcmV0dXJuIHJ9fSx7XCIuL19vYmplY3Qta2V5c1wiOjYzLFwiLi9fdG8taW9iamVjdFwiOjc1fV0sNTI6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ITB9LHt9XSw1MzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL191aWRcIikoXCJtZXRhXCIpLG89ZShcIi4vX2lzLW9iamVjdFwiKSxpPWUoXCIuL19oYXNcIiksYT1lKFwiLi9fb2JqZWN0LWRwXCIpLmYscz0wLHU9T2JqZWN0LmlzRXh0ZW5zaWJsZXx8ZnVuY3Rpb24oKXtyZXR1cm4hMH0sYz0hZShcIi4vX2ZhaWxzXCIpKGZ1bmN0aW9uKCl7cmV0dXJuIHUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSl9KSxsPWZ1bmN0aW9uKGUpe2EoZSxuLHt2YWx1ZTp7aTpcIk9cIisgKytzLHc6e319fSl9LGY9ZnVuY3Rpb24oZSx0KXtpZighbyhlKSlyZXR1cm5cInN5bWJvbFwiPT10eXBlb2YgZT9lOihcInN0cmluZ1wiPT10eXBlb2YgZT9cIlNcIjpcIlBcIikrZTtpZighaShlLG4pKXtpZighdShlKSlyZXR1cm5cIkZcIjtpZighdClyZXR1cm5cIkVcIjtsKGUpfXJldHVybiBlW25dLml9LGQ9ZnVuY3Rpb24oZSx0KXtpZighaShlLG4pKXtpZighdShlKSlyZXR1cm4hMDtpZighdClyZXR1cm4hMTtsKGUpfXJldHVybiBlW25dLnd9LHA9ZnVuY3Rpb24oZSl7cmV0dXJuIGMmJmguTkVFRCYmdShlKSYmIWkoZSxuKSYmbChlKSxlfSxoPXQuZXhwb3J0cz17S0VZOm4sTkVFRDohMSxmYXN0S2V5OmYsZ2V0V2VhazpkLG9uRnJlZXplOnB9fSx7XCIuL19mYWlsc1wiOjM4LFwiLi9faGFzXCI6NDAsXCIuL19pcy1vYmplY3RcIjo0NixcIi4vX29iamVjdC1kcFwiOjU1LFwiLi9fdWlkXCI6Nzl9XSw1NDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19hbi1vYmplY3RcIiksbz1lKFwiLi9fb2JqZWN0LWRwc1wiKSxpPWUoXCIuL19lbnVtLWJ1Zy1rZXlzXCIpLGE9ZShcIi4vX3NoYXJlZC1rZXlcIikoXCJJRV9QUk9UT1wiKSxzPWZ1bmN0aW9uKCl7fSx1PVwicHJvdG90eXBlXCIsYz1mdW5jdGlvbigpe3ZhciB0LHI9ZShcIi4vX2RvbS1jcmVhdGVcIikoXCJpZnJhbWVcIiksbj1pLmxlbmd0aCxvPVwiPlwiO2ZvcihyLnN0eWxlLmRpc3BsYXk9XCJub25lXCIsZShcIi4vX2h0bWxcIikuYXBwZW5kQ2hpbGQociksci5zcmM9XCJqYXZhc2NyaXB0OlwiLHQ9ci5jb250ZW50V2luZG93LmRvY3VtZW50LHQub3BlbigpLHQud3JpdGUoXCI8c2NyaXB0PmRvY3VtZW50LkY9T2JqZWN0PC9zY3JpcHRcIitvKSx0LmNsb3NlKCksYz10LkY7bi0tOylkZWxldGUgY1t1XVtpW25dXTtyZXR1cm4gYygpfTt0LmV4cG9ydHM9T2JqZWN0LmNyZWF0ZXx8ZnVuY3Rpb24oZSx0KXt2YXIgcjtyZXR1cm4gbnVsbCE9PWU/KHNbdV09bihlKSxyPW5ldyBzLHNbdV09bnVsbCxyW2FdPWUpOnI9YygpLHZvaWQgMD09PXQ/cjpvKHIsdCl9fSx7XCIuL19hbi1vYmplY3RcIjoyNyxcIi4vX2RvbS1jcmVhdGVcIjozNCxcIi4vX2VudW0tYnVnLWtleXNcIjozNSxcIi4vX2h0bWxcIjo0MixcIi4vX29iamVjdC1kcHNcIjo1NixcIi4vX3NoYXJlZC1rZXlcIjo3MH1dLDU1OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX2FuLW9iamVjdFwiKSxvPWUoXCIuL19pZTgtZG9tLWRlZmluZVwiKSxpPWUoXCIuL190by1wcmltaXRpdmVcIiksYT1PYmplY3QuZGVmaW5lUHJvcGVydHk7ci5mPWUoXCIuL19kZXNjcmlwdG9yc1wiKT9PYmplY3QuZGVmaW5lUHJvcGVydHk6ZnVuY3Rpb24oZSx0LHIpe2lmKG4oZSksdD1pKHQsITApLG4ociksbyl0cnl7cmV0dXJuIGEoZSx0LHIpfWNhdGNoKHMpe31pZihcImdldFwiaW4gcnx8XCJzZXRcImluIHIpdGhyb3cgVHlwZUVycm9yKFwiQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhXCIpO3JldHVyblwidmFsdWVcImluIHImJihlW3RdPXIudmFsdWUpLGV9fSx7XCIuL19hbi1vYmplY3RcIjoyNyxcIi4vX2Rlc2NyaXB0b3JzXCI6MzMsXCIuL19pZTgtZG9tLWRlZmluZVwiOjQzLFwiLi9fdG8tcHJpbWl0aXZlXCI6Nzh9XSw1NjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19vYmplY3QtZHBcIiksbz1lKFwiLi9fYW4tb2JqZWN0XCIpLGk9ZShcIi4vX29iamVjdC1rZXlzXCIpO3QuZXhwb3J0cz1lKFwiLi9fZGVzY3JpcHRvcnNcIik/T2JqZWN0LmRlZmluZVByb3BlcnRpZXM6ZnVuY3Rpb24oZSx0KXtvKGUpO2Zvcih2YXIgcixhPWkodCkscz1hLmxlbmd0aCx1PTA7cz51OyluLmYoZSxyPWFbdSsrXSx0W3JdKTtyZXR1cm4gZX19LHtcIi4vX2FuLW9iamVjdFwiOjI3LFwiLi9fZGVzY3JpcHRvcnNcIjozMyxcIi4vX29iamVjdC1kcFwiOjU1LFwiLi9fb2JqZWN0LWtleXNcIjo2M31dLDU3OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX29iamVjdC1waWVcIiksbz1lKFwiLi9fcHJvcGVydHktZGVzY1wiKSxpPWUoXCIuL190by1pb2JqZWN0XCIpLGE9ZShcIi4vX3RvLXByaW1pdGl2ZVwiKSxzPWUoXCIuL19oYXNcIiksdT1lKFwiLi9faWU4LWRvbS1kZWZpbmVcIiksYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO3IuZj1lKFwiLi9fZGVzY3JpcHRvcnNcIik/YzpmdW5jdGlvbihlLHQpe2lmKGU9aShlKSx0PWEodCwhMCksdSl0cnl7cmV0dXJuIGMoZSx0KX1jYXRjaChyKXt9aWYocyhlLHQpKXJldHVybiBvKCFuLmYuY2FsbChlLHQpLGVbdF0pfX0se1wiLi9fZGVzY3JpcHRvcnNcIjozMyxcIi4vX2hhc1wiOjQwLFwiLi9faWU4LWRvbS1kZWZpbmVcIjo0MyxcIi4vX29iamVjdC1waWVcIjo2NCxcIi4vX3Byb3BlcnR5LWRlc2NcIjo2NixcIi4vX3RvLWlvYmplY3RcIjo3NSxcIi4vX3RvLXByaW1pdGl2ZVwiOjc4fV0sNTg6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fdG8taW9iamVjdFwiKSxvPWUoXCIuL19vYmplY3QtZ29wblwiKS5mLGk9e30udG9TdHJpbmcsYT1cIm9iamVjdFwiPT10eXBlb2Ygd2luZG93JiZ3aW5kb3cmJk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzP09iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdyk6W10scz1mdW5jdGlvbihlKXt0cnl7cmV0dXJuIG8oZSl9Y2F0Y2godCl7cmV0dXJuIGEuc2xpY2UoKX19O3QuZXhwb3J0cy5mPWZ1bmN0aW9uKGUpe3JldHVybiBhJiZcIltvYmplY3QgV2luZG93XVwiPT1pLmNhbGwoZSk/cyhlKTpvKG4oZSkpfX0se1wiLi9fb2JqZWN0LWdvcG5cIjo1OSxcIi4vX3RvLWlvYmplY3RcIjo3NX1dLDU5OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX29iamVjdC1rZXlzLWludGVybmFsXCIpLG89ZShcIi4vX2VudW0tYnVnLWtleXNcIikuY29uY2F0KFwibGVuZ3RoXCIsXCJwcm90b3R5cGVcIik7ci5mPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzfHxmdW5jdGlvbihlKXtyZXR1cm4gbihlLG8pfX0se1wiLi9fZW51bS1idWcta2V5c1wiOjM1LFwiLi9fb2JqZWN0LWtleXMtaW50ZXJuYWxcIjo2Mn1dLDYwOltmdW5jdGlvbihlLHQscil7ci5mPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHN9LHt9XSw2MTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19oYXNcIiksbz1lKFwiLi9fdG8tb2JqZWN0XCIpLGk9ZShcIi4vX3NoYXJlZC1rZXlcIikoXCJJRV9QUk9UT1wiKSxhPU9iamVjdC5wcm90b3R5cGU7dC5leHBvcnRzPU9iamVjdC5nZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24oZSl7cmV0dXJuIGU9byhlKSxuKGUsaSk/ZVtpXTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmNvbnN0cnVjdG9yJiZlIGluc3RhbmNlb2YgZS5jb25zdHJ1Y3Rvcj9lLmNvbnN0cnVjdG9yLnByb3RvdHlwZTplIGluc3RhbmNlb2YgT2JqZWN0P2E6bnVsbH19LHtcIi4vX2hhc1wiOjQwLFwiLi9fc2hhcmVkLWtleVwiOjcwLFwiLi9fdG8tb2JqZWN0XCI6Nzd9XSw2MjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19oYXNcIiksbz1lKFwiLi9fdG8taW9iamVjdFwiKSxpPWUoXCIuL19hcnJheS1pbmNsdWRlc1wiKSghMSksYT1lKFwiLi9fc2hhcmVkLWtleVwiKShcIklFX1BST1RPXCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciByLHM9byhlKSx1PTAsYz1bXTtmb3IociBpbiBzKXIhPWEmJm4ocyxyKSYmYy5wdXNoKHIpO2Zvcig7dC5sZW5ndGg+dTspbihzLHI9dFt1KytdKSYmKH5pKGMscil8fGMucHVzaChyKSk7cmV0dXJuIGN9fSx7XCIuL19hcnJheS1pbmNsdWRlc1wiOjI4LFwiLi9faGFzXCI6NDAsXCIuL19zaGFyZWQta2V5XCI6NzAsXCIuL190by1pb2JqZWN0XCI6NzV9XSw2MzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19vYmplY3Qta2V5cy1pbnRlcm5hbFwiKSxvPWUoXCIuL19lbnVtLWJ1Zy1rZXlzXCIpO3QuZXhwb3J0cz1PYmplY3Qua2V5c3x8ZnVuY3Rpb24oZSl7cmV0dXJuIG4oZSxvKX19LHtcIi4vX2VudW0tYnVnLWtleXNcIjozNSxcIi4vX29iamVjdC1rZXlzLWludGVybmFsXCI6NjJ9XSw2NDpbZnVuY3Rpb24oZSx0LHIpe3IuZj17fS5wcm9wZXJ0eUlzRW51bWVyYWJsZX0se31dLDY1OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX2V4cG9ydFwiKSxvPWUoXCIuL19jb3JlXCIpLGk9ZShcIi4vX2ZhaWxzXCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciByPShvLk9iamVjdHx8e30pW2VdfHxPYmplY3RbZV0sYT17fTthW2VdPXQociksbihuLlMrbi5GKmkoZnVuY3Rpb24oKXtyKDEpfSksXCJPYmplY3RcIixhKX19LHtcIi4vX2NvcmVcIjozMCxcIi4vX2V4cG9ydFwiOjM3LFwiLi9fZmFpbHNcIjozOH1dLDY2OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJue2VudW1lcmFibGU6ISgxJmUpLGNvbmZpZ3VyYWJsZTohKDImZSksd3JpdGFibGU6ISg0JmUpLHZhbHVlOnR9fX0se31dLDY3OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWUoXCIuL19oaWRlXCIpfSx7XCIuL19oaWRlXCI6NDF9XSw2ODpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19pcy1vYmplY3RcIiksbz1lKFwiLi9fYW4tb2JqZWN0XCIpLGk9ZnVuY3Rpb24oZSx0KXtpZihvKGUpLCFuKHQpJiZudWxsIT09dCl0aHJvdyBUeXBlRXJyb3IodCtcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIil9O3QuZXhwb3J0cz17c2V0Ok9iamVjdC5zZXRQcm90b3R5cGVPZnx8KFwiX19wcm90b19fXCJpbnt9P2Z1bmN0aW9uKHQscixuKXt0cnl7bj1lKFwiLi9fY3R4XCIpKEZ1bmN0aW9uLmNhbGwsZShcIi4vX29iamVjdC1nb3BkXCIpLmYoT2JqZWN0LnByb3RvdHlwZSxcIl9fcHJvdG9fX1wiKS5zZXQsMiksbih0LFtdKSxyPSEodCBpbnN0YW5jZW9mIEFycmF5KX1jYXRjaChvKXtyPSEwfXJldHVybiBmdW5jdGlvbihlLHQpe3JldHVybiBpKGUsdCkscj9lLl9fcHJvdG9fXz10Om4oZSx0KSxlfX0oe30sITEpOnZvaWQgMCksY2hlY2s6aX19LHtcIi4vX2FuLW9iamVjdFwiOjI3LFwiLi9fY3R4XCI6MzEsXCIuL19pcy1vYmplY3RcIjo0NixcIi4vX29iamVjdC1nb3BkXCI6NTd9XSw2OTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19vYmplY3QtZHBcIikuZixvPWUoXCIuL19oYXNcIiksaT1lKFwiLi9fd2tzXCIpKFwidG9TdHJpbmdUYWdcIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyKXtlJiYhbyhlPXI/ZTplLnByb3RvdHlwZSxpKSYmbihlLGkse2NvbmZpZ3VyYWJsZTohMCx2YWx1ZTp0fSl9fSx7XCIuL19oYXNcIjo0MCxcIi4vX29iamVjdC1kcFwiOjU1LFwiLi9fd2tzXCI6ODJ9XSw3MDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19zaGFyZWRcIikoXCJrZXlzXCIpLG89ZShcIi4vX3VpZFwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG5bZV18fChuW2VdPW8oZSkpfX0se1wiLi9fc2hhcmVkXCI6NzEsXCIuL191aWRcIjo3OX1dLDcxOltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX2dsb2JhbFwiKSxvPVwiX19jb3JlLWpzX3NoYXJlZF9fXCIsaT1uW29dfHwobltvXT17fSk7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBpW2VdfHwoaVtlXT17fSl9fSx7XCIuL19nbG9iYWxcIjozOX1dLDcyOltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX3RvLWludGVnZXJcIiksbz1lKFwiLi9fZGVmaW5lZFwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQscil7dmFyIGksYSxzPVN0cmluZyhvKHQpKSx1PW4ociksYz1zLmxlbmd0aDtyZXR1cm4gdTwwfHx1Pj1jP2U/XCJcIjp2b2lkIDA6KGk9cy5jaGFyQ29kZUF0KHUpLGk8NTUyOTZ8fGk+NTYzMTl8fHUrMT09PWN8fChhPXMuY2hhckNvZGVBdCh1KzEpKTw1NjMyMHx8YT41NzM0Mz9lP3MuY2hhckF0KHUpOmk6ZT9zLnNsaWNlKHUsdSsyKTooaS01NTI5Njw8MTApKyhhLTU2MzIwKSs2NTUzNil9fX0se1wiLi9fZGVmaW5lZFwiOjMyLFwiLi9fdG8taW50ZWdlclwiOjc0fV0sNzM6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fdG8taW50ZWdlclwiKSxvPU1hdGgubWF4LGk9TWF0aC5taW47dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9bihlKSxlPDA/byhlK3QsMCk6aShlLHQpfX0se1wiLi9fdG8taW50ZWdlclwiOjc0fV0sNzQ6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1NYXRoLmNlaWwsbz1NYXRoLmZsb29yO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gaXNOYU4oZT0rZSk/MDooZT4wP286bikoZSl9fSx7fV0sNzU6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9faW9iamVjdFwiKSxvPWUoXCIuL19kZWZpbmVkXCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gbihvKGUpKX19LHtcIi4vX2RlZmluZWRcIjozMixcIi4vX2lvYmplY3RcIjo0NH1dLDc2OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX3RvLWludGVnZXJcIiksbz1NYXRoLm1pbjt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGU+MD9vKG4oZSksOTAwNzE5OTI1NDc0MDk5MSk6MH19LHtcIi4vX3RvLWludGVnZXJcIjo3NH1dLDc3OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX2RlZmluZWRcIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QobihlKSl9fSx7XCIuL19kZWZpbmVkXCI6MzJ9XSw3ODpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19pcy1vYmplY3RcIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7aWYoIW4oZSkpcmV0dXJuIGU7dmFyIHIsbztpZih0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZihyPWUudG9TdHJpbmcpJiYhbihvPXIuY2FsbChlKSkpcmV0dXJuIG87aWYoXCJmdW5jdGlvblwiPT10eXBlb2Yocj1lLnZhbHVlT2YpJiYhbihvPXIuY2FsbChlKSkpcmV0dXJuIG87aWYoIXQmJlwiZnVuY3Rpb25cIj09dHlwZW9mKHI9ZS50b1N0cmluZykmJiFuKG89ci5jYWxsKGUpKSlyZXR1cm4gbzt0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIil9fSx7XCIuL19pcy1vYmplY3RcIjo0Nn1dLDc5OltmdW5jdGlvbihlLHQscil7dmFyIG49MCxvPU1hdGgucmFuZG9tKCk7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVyblwiU3ltYm9sKFwiLmNvbmNhdCh2b2lkIDA9PT1lP1wiXCI6ZSxcIilfXCIsKCsrbitvKS50b1N0cmluZygzNikpfX0se31dLDgwOltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX2dsb2JhbFwiKSxvPWUoXCIuL19jb3JlXCIpLGk9ZShcIi4vX2xpYnJhcnlcIiksYT1lKFwiLi9fd2tzLWV4dFwiKSxzPWUoXCIuL19vYmplY3QtZHBcIikuZjt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9by5TeW1ib2x8fChvLlN5bWJvbD1pP3t9Om4uU3ltYm9sfHx7fSk7XCJfXCI9PWUuY2hhckF0KDApfHxlIGluIHR8fHModCxlLHt2YWx1ZTphLmYoZSl9KX19LHtcIi4vX2NvcmVcIjozMCxcIi4vX2dsb2JhbFwiOjM5LFwiLi9fbGlicmFyeVwiOjUyLFwiLi9fb2JqZWN0LWRwXCI6NTUsXCIuL193a3MtZXh0XCI6ODF9XSw4MTpbZnVuY3Rpb24oZSx0LHIpe3IuZj1lKFwiLi9fd2tzXCIpfSx7XCIuL193a3NcIjo4Mn1dLDgyOltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX3NoYXJlZFwiKShcIndrc1wiKSxvPWUoXCIuL191aWRcIiksaT1lKFwiLi9fZ2xvYmFsXCIpLlN5bWJvbCxhPVwiZnVuY3Rpb25cIj09dHlwZW9mIGkscz10LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG5bZV18fChuW2VdPWEmJmlbZV18fChhP2k6bykoXCJTeW1ib2wuXCIrZSkpfTtzLnN0b3JlPW59LHtcIi4vX2dsb2JhbFwiOjM5LFwiLi9fc2hhcmVkXCI6NzEsXCIuL191aWRcIjo3OX1dLDgzOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vX2FkZC10by11bnNjb3BhYmxlc1wiKSxvPWUoXCIuL19pdGVyLXN0ZXBcIiksaT1lKFwiLi9faXRlcmF0b3JzXCIpLGE9ZShcIi4vX3RvLWlvYmplY3RcIik7dC5leHBvcnRzPWUoXCIuL19pdGVyLWRlZmluZVwiKShBcnJheSxcIkFycmF5XCIsZnVuY3Rpb24oZSx0KXt0aGlzLl90PWEoZSksdGhpcy5faT0wLHRoaXMuX2s9dH0sZnVuY3Rpb24oKXt2YXIgZT10aGlzLl90LHQ9dGhpcy5fayxyPXRoaXMuX2krKztyZXR1cm4hZXx8cj49ZS5sZW5ndGg/KHRoaXMuX3Q9dm9pZCAwLG8oMSkpOlwia2V5c1wiPT10P28oMCxyKTpcInZhbHVlc1wiPT10P28oMCxlW3JdKTpvKDAsW3IsZVtyXV0pfSxcInZhbHVlc1wiKSxpLkFyZ3VtZW50cz1pLkFycmF5LG4oXCJrZXlzXCIpLG4oXCJ2YWx1ZXNcIiksbihcImVudHJpZXNcIil9LHtcIi4vX2FkZC10by11bnNjb3BhYmxlc1wiOjI2LFwiLi9faXRlci1kZWZpbmVcIjo0OCxcIi4vX2l0ZXItc3RlcFwiOjQ5LFwiLi9faXRlcmF0b3JzXCI6NTAsXCIuL190by1pb2JqZWN0XCI6NzV9XSw4NDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19leHBvcnRcIik7bihuLlMsXCJPYmplY3RcIix7Y3JlYXRlOmUoXCIuL19vYmplY3QtY3JlYXRlXCIpfSl9LHtcIi4vX2V4cG9ydFwiOjM3LFwiLi9fb2JqZWN0LWNyZWF0ZVwiOjU0fV0sODU6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fZXhwb3J0XCIpO24obi5TK24uRiohZShcIi4vX2Rlc2NyaXB0b3JzXCIpLFwiT2JqZWN0XCIse2RlZmluZVByb3BlcnR5OmUoXCIuL19vYmplY3QtZHBcIikuZn0pfSx7XCIuL19kZXNjcmlwdG9yc1wiOjMzLFwiLi9fZXhwb3J0XCI6MzcsXCIuL19vYmplY3QtZHBcIjo1NX1dLDg2OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX2lzLW9iamVjdFwiKSxvPWUoXCIuL19tZXRhXCIpLm9uRnJlZXplO2UoXCIuL19vYmplY3Qtc2FwXCIpKFwiZnJlZXplXCIsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBlJiZuKHQpP2Uobyh0KSk6dH19KX0se1wiLi9faXMtb2JqZWN0XCI6NDYsXCIuL19tZXRhXCI6NTMsXCIuL19vYmplY3Qtc2FwXCI6NjV9XSw4NzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL190by1vYmplY3RcIiksbz1lKFwiLi9fb2JqZWN0LWdwb1wiKTtlKFwiLi9fb2JqZWN0LXNhcFwiKShcImdldFByb3RvdHlwZU9mXCIsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIG8obihlKSl9fSl9LHtcIi4vX29iamVjdC1ncG9cIjo2MSxcIi4vX29iamVjdC1zYXBcIjo2NSxcIi4vX3RvLW9iamVjdFwiOjc3fV0sODg6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fdG8tb2JqZWN0XCIpLG89ZShcIi4vX29iamVjdC1rZXlzXCIpO2UoXCIuL19vYmplY3Qtc2FwXCIpKFwia2V5c1wiLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBvKG4oZSkpfX0pfSx7XCIuL19vYmplY3Qta2V5c1wiOjYzLFwiLi9fb2JqZWN0LXNhcFwiOjY1LFwiLi9fdG8tb2JqZWN0XCI6Nzd9XSw4OTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19leHBvcnRcIik7bihuLlMsXCJPYmplY3RcIix7c2V0UHJvdG90eXBlT2Y6ZShcIi4vX3NldC1wcm90b1wiKS5zZXR9KX0se1wiLi9fZXhwb3J0XCI6MzcsXCIuL19zZXQtcHJvdG9cIjo2OH1dLDkwOltmdW5jdGlvbihlLHQscil7fSx7fV0sOTE6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi9fc3RyaW5nLWF0XCIpKCEwKTtlKFwiLi9faXRlci1kZWZpbmVcIikoU3RyaW5nLFwiU3RyaW5nXCIsZnVuY3Rpb24oZSl7dGhpcy5fdD1TdHJpbmcoZSksdGhpcy5faT0wfSxmdW5jdGlvbigpe3ZhciBlLHQ9dGhpcy5fdCxyPXRoaXMuX2k7cmV0dXJuIHI+PXQubGVuZ3RoP3t2YWx1ZTp2b2lkIDAsZG9uZTohMH06KGU9bih0LHIpLHRoaXMuX2krPWUubGVuZ3RoLHt2YWx1ZTplLGRvbmU6ITF9KX0pfSx7XCIuL19pdGVyLWRlZmluZVwiOjQ4LFwiLi9fc3RyaW5nLWF0XCI6NzJ9XSw5MjpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuL19nbG9iYWxcIiksbz1lKFwiLi9faGFzXCIpLGk9ZShcIi4vX2Rlc2NyaXB0b3JzXCIpLGE9ZShcIi4vX2V4cG9ydFwiKSxzPWUoXCIuL19yZWRlZmluZVwiKSx1PWUoXCIuL19tZXRhXCIpLktFWSxjPWUoXCIuL19mYWlsc1wiKSxsPWUoXCIuL19zaGFyZWRcIiksZj1lKFwiLi9fc2V0LXRvLXN0cmluZy10YWdcIiksZD1lKFwiLi9fdWlkXCIpLHA9ZShcIi4vX3drc1wiKSxoPWUoXCIuL193a3MtZXh0XCIpLHk9ZShcIi4vX3drcy1kZWZpbmVcIiksbT1lKFwiLi9fa2V5b2ZcIiksdj1lKFwiLi9fZW51bS1rZXlzXCIpLF89ZShcIi4vX2lzLWFycmF5XCIpLGI9ZShcIi4vX2FuLW9iamVjdFwiKSxnPWUoXCIuL190by1pb2JqZWN0XCIpLEU9ZShcIi4vX3RvLXByaW1pdGl2ZVwiKSxqPWUoXCIuL19wcm9wZXJ0eS1kZXNjXCIpLHc9ZShcIi4vX29iamVjdC1jcmVhdGVcIiksTz1lKFwiLi9fb2JqZWN0LWdvcG4tZXh0XCIpLE09ZShcIi4vX29iamVjdC1nb3BkXCIpLHg9ZShcIi4vX29iamVjdC1kcFwiKSxQPWUoXCIuL19vYmplY3Qta2V5c1wiKSxrPU0uZixSPXguZixTPU8uZixBPW4uU3ltYm9sLFQ9bi5KU09OLE49VCYmVC5zdHJpbmdpZnksST1cInByb3RvdHlwZVwiLFU9cChcIl9oaWRkZW5cIiksQz1wKFwidG9QcmltaXRpdmVcIiksTD17fS5wcm9wZXJ0eUlzRW51bWVyYWJsZSxGPWwoXCJzeW1ib2wtcmVnaXN0cnlcIiksQj1sKFwic3ltYm9sc1wiKSxEPWwoXCJvcC1zeW1ib2xzXCIpLEc9T2JqZWN0W0ldLEs9XCJmdW5jdGlvblwiPT10eXBlb2YgQSxZPW4uUU9iamVjdCxxPSFZfHwhWVtJXXx8IVlbSV0uZmluZENoaWxkLHo9aSYmYyhmdW5jdGlvbigpe3JldHVybiA3IT13KFIoe30sXCJhXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBSKHRoaXMsXCJhXCIse3ZhbHVlOjd9KS5hfX0pKS5hfSk/ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWsoRyx0KTtuJiZkZWxldGUgR1t0XSxSKGUsdCxyKSxuJiZlIT09RyYmUihHLHQsbil9OlIsSD1mdW5jdGlvbihlKXt2YXIgdD1CW2VdPXcoQVtJXSk7cmV0dXJuIHQuX2s9ZSx0fSxXPUsmJlwic3ltYm9sXCI9PXR5cGVvZiBBLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVyblwic3ltYm9sXCI9PXR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIEF9LEo9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlPT09RyYmSihELHQsciksYihlKSx0PUUodCwhMCksYihyKSxvKEIsdCk/KHIuZW51bWVyYWJsZT8obyhlLFUpJiZlW1VdW3RdJiYoZVtVXVt0XT0hMSkscj13KHIse2VudW1lcmFibGU6aigwLCExKX0pKToobyhlLFUpfHxSKGUsVSxqKDEse30pKSxlW1VdW3RdPSEwKSx6KGUsdCxyKSk6UihlLHQscil9LFY9ZnVuY3Rpb24oZSx0KXtiKGUpO2Zvcih2YXIgcixuPXYodD1nKHQpKSxvPTAsaT1uLmxlbmd0aDtpPm87KUooZSxyPW5bbysrXSx0W3JdKTtyZXR1cm4gZX0sJD1mdW5jdGlvbihlLHQpe3JldHVybiB2b2lkIDA9PT10P3coZSk6Vih3KGUpLHQpfSxYPWZ1bmN0aW9uKGUpe3ZhciB0PUwuY2FsbCh0aGlzLGU9RShlLCEwKSk7cmV0dXJuISh0aGlzPT09RyYmbyhCLGUpJiYhbyhELGUpKSYmKCEodHx8IW8odGhpcyxlKXx8IW8oQixlKXx8byh0aGlzLFUpJiZ0aGlzW1VdW2VdKXx8dCl9LFE9ZnVuY3Rpb24oZSx0KXtpZihlPWcoZSksdD1FKHQsITApLGUhPT1HfHwhbyhCLHQpfHxvKEQsdCkpe3ZhciByPWsoZSx0KTtyZXR1cm4hcnx8IW8oQix0KXx8byhlLFUpJiZlW1VdW3RdfHwoci5lbnVtZXJhYmxlPSEwKSxyfX0sWj1mdW5jdGlvbihlKXtmb3IodmFyIHQscj1TKGcoZSkpLG49W10saT0wO3IubGVuZ3RoPmk7KW8oQix0PXJbaSsrXSl8fHQ9PVV8fHQ9PXV8fG4ucHVzaCh0KTtyZXR1cm4gbn0sZWU9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHI9ZT09PUcsbj1TKHI/RDpnKGUpKSxpPVtdLGE9MDtuLmxlbmd0aD5hOykhbyhCLHQ9blthKytdKXx8ciYmIW8oRyx0KXx8aS5wdXNoKEJbdF0pO3JldHVybiBpfTtLfHwoQT1mdW5jdGlvbigpe2lmKHRoaXMgaW5zdGFuY2VvZiBBKXRocm93IFR5cGVFcnJvcihcIlN5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciFcIik7dmFyIGU9ZChhcmd1bWVudHMubGVuZ3RoPjA/YXJndW1lbnRzWzBdOnZvaWQgMCksdD1mdW5jdGlvbihyKXt0aGlzPT09RyYmdC5jYWxsKEQsciksbyh0aGlzLFUpJiZvKHRoaXNbVV0sZSkmJih0aGlzW1VdW2VdPSExKSx6KHRoaXMsZSxqKDEscikpfTtyZXR1cm4gaSYmcSYmeihHLGUse2NvbmZpZ3VyYWJsZTohMCxzZXQ6dH0pLEgoZSl9LHMoQVtJXSxcInRvU3RyaW5nXCIsZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fa30pLE0uZj1RLHguZj1KLGUoXCIuL19vYmplY3QtZ29wblwiKS5mPU8uZj1aLGUoXCIuL19vYmplY3QtcGllXCIpLmY9WCxlKFwiLi9fb2JqZWN0LWdvcHNcIikuZj1lZSxpJiYhZShcIi4vX2xpYnJhcnlcIikmJnMoRyxcInByb3BlcnR5SXNFbnVtZXJhYmxlXCIsWCwhMCksaC5mPWZ1bmN0aW9uKGUpe3JldHVybiBIKHAoZSkpfSksYShhLkcrYS5XK2EuRiohSyx7U3ltYm9sOkF9KTtmb3IodmFyIHRlPVwiaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXNcIi5zcGxpdChcIixcIikscmU9MDt0ZS5sZW5ndGg+cmU7KXAodGVbcmUrK10pO2Zvcih2YXIgdGU9UChwLnN0b3JlKSxyZT0wO3RlLmxlbmd0aD5yZTspeSh0ZVtyZSsrXSk7YShhLlMrYS5GKiFLLFwiU3ltYm9sXCIse1wiZm9yXCI6ZnVuY3Rpb24oZSl7cmV0dXJuIG8oRixlKz1cIlwiKT9GW2VdOkZbZV09QShlKX0sa2V5Rm9yOmZ1bmN0aW9uKGUpe2lmKFcoZSkpcmV0dXJuIG0oRixlKTt0aHJvdyBUeXBlRXJyb3IoZStcIiBpcyBub3QgYSBzeW1ib2whXCIpfSx1c2VTZXR0ZXI6ZnVuY3Rpb24oKXtxPSEwfSx1c2VTaW1wbGU6ZnVuY3Rpb24oKXtxPSExfX0pLGEoYS5TK2EuRiohSyxcIk9iamVjdFwiLHtjcmVhdGU6JCxkZWZpbmVQcm9wZXJ0eTpKLGRlZmluZVByb3BlcnRpZXM6VixnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6USxnZXRPd25Qcm9wZXJ0eU5hbWVzOlosZ2V0T3duUHJvcGVydHlTeW1ib2xzOmVlfSksVCYmYShhLlMrYS5GKighS3x8YyhmdW5jdGlvbigpe3ZhciBlPUEoKTtyZXR1cm5cIltudWxsXVwiIT1OKFtlXSl8fFwie31cIiE9Tih7YTplfSl8fFwie31cIiE9TihPYmplY3QoZSkpfSkpLFwiSlNPTlwiLHtzdHJpbmdpZnk6ZnVuY3Rpb24oZSl7aWYodm9pZCAwIT09ZSYmIVcoZSkpe2Zvcih2YXIgdCxyLG49W2VdLG89MTthcmd1bWVudHMubGVuZ3RoPm87KW4ucHVzaChhcmd1bWVudHNbbysrXSk7cmV0dXJuIHQ9blsxXSxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiYocj10KSwhciYmXyh0KXx8KHQ9ZnVuY3Rpb24oZSx0KXtpZihyJiYodD1yLmNhbGwodGhpcyxlLHQpKSwhVyh0KSlyZXR1cm4gdH0pLG5bMV09dCxOLmFwcGx5KFQsbil9fX0pLEFbSV1bQ118fGUoXCIuL19oaWRlXCIpKEFbSV0sQyxBW0ldLnZhbHVlT2YpLGYoQSxcIlN5bWJvbFwiKSxmKE1hdGgsXCJNYXRoXCIsITApLGYobi5KU09OLFwiSlNPTlwiLCEwKX0se1wiLi9fYW4tb2JqZWN0XCI6MjcsXCIuL19kZXNjcmlwdG9yc1wiOjMzLFwiLi9fZW51bS1rZXlzXCI6MzYsXCIuL19leHBvcnRcIjozNyxcIi4vX2ZhaWxzXCI6MzgsXCIuL19nbG9iYWxcIjozOSxcIi4vX2hhc1wiOjQwLFwiLi9faGlkZVwiOjQxLFwiLi9faXMtYXJyYXlcIjo0NSxcIi4vX2tleW9mXCI6NTEsXCIuL19saWJyYXJ5XCI6NTIsXCIuL19tZXRhXCI6NTMsXCIuL19vYmplY3QtY3JlYXRlXCI6NTQsXCIuL19vYmplY3QtZHBcIjo1NSxcIi4vX29iamVjdC1nb3BkXCI6NTcsXCIuL19vYmplY3QtZ29wblwiOjU5LFwiLi9fb2JqZWN0LWdvcG4tZXh0XCI6NTgsXCIuL19vYmplY3QtZ29wc1wiOjYwLFwiLi9fb2JqZWN0LWtleXNcIjo2MyxcIi4vX29iamVjdC1waWVcIjo2NCxcIi4vX3Byb3BlcnR5LWRlc2NcIjo2NixcIi4vX3JlZGVmaW5lXCI6NjcsXCIuL19zZXQtdG8tc3RyaW5nLXRhZ1wiOjY5LFwiLi9fc2hhcmVkXCI6NzEsXCIuL190by1pb2JqZWN0XCI6NzUsXCIuL190by1wcmltaXRpdmVcIjo3OCxcIi4vX3VpZFwiOjc5LFwiLi9fd2tzXCI6ODIsXCIuL193a3MtZGVmaW5lXCI6ODAsXCIuL193a3MtZXh0XCI6ODF9XSw5MzpbZnVuY3Rpb24oZSx0LHIpe2UoXCIuL193a3MtZGVmaW5lXCIpKFwiYXN5bmNJdGVyYXRvclwiKX0se1wiLi9fd2tzLWRlZmluZVwiOjgwfV0sOTQ6W2Z1bmN0aW9uKGUsdCxyKXtlKFwiLi9fd2tzLWRlZmluZVwiKShcIm9ic2VydmFibGVcIil9LHtcIi4vX3drcy1kZWZpbmVcIjo4MH1dLDk1OltmdW5jdGlvbihlLHQscil7ZShcIi4vZXM2LmFycmF5Lml0ZXJhdG9yXCIpO2Zvcih2YXIgbj1lKFwiLi9fZ2xvYmFsXCIpLG89ZShcIi4vX2hpZGVcIiksaT1lKFwiLi9faXRlcmF0b3JzXCIpLGE9ZShcIi4vX3drc1wiKShcInRvU3RyaW5nVGFnXCIpLHM9W1wiTm9kZUxpc3RcIixcIkRPTVRva2VuTGlzdFwiLFwiTWVkaWFMaXN0XCIsXCJTdHlsZVNoZWV0TGlzdFwiLFwiQ1NTUnVsZUxpc3RcIl0sdT0wO3U8NTt1Kyspe3ZhciBjPXNbdV0sbD1uW2NdLGY9bCYmbC5wcm90b3R5cGU7ZiYmIWZbYV0mJm8oZixhLGMpLGlbY109aS5BcnJheX19LHtcIi4vX2dsb2JhbFwiOjM5LFwiLi9faGlkZVwiOjQxLFwiLi9faXRlcmF0b3JzXCI6NTAsXCIuL193a3NcIjo4MixcIi4vZXM2LmFycmF5Lml0ZXJhdG9yXCI6ODN9XSw5NjpbZnVuY3Rpb24oZSx0LHIpe2Z1bmN0aW9uIG4oKXtkJiZsJiYoZD0hMSxsLmxlbmd0aD9mPWwuY29uY2F0KGYpOnA9LTEsZi5sZW5ndGgmJm8oKSl9ZnVuY3Rpb24gbygpe2lmKCFkKXt2YXIgZT1zKG4pO2Q9ITA7Zm9yKHZhciB0PWYubGVuZ3RoO3Q7KXtmb3IobD1mLGY9W107KytwPHQ7KWwmJmxbcF0ucnVuKCk7cD0tMSx0PWYubGVuZ3RofWw9bnVsbCxkPSExLHUoZSl9fWZ1bmN0aW9uIGkoZSx0KXt0aGlzLmZ1bj1lLHRoaXMuYXJyYXk9dH1mdW5jdGlvbiBhKCl7fXZhciBzLHUsYz10LmV4cG9ydHM9e307IWZ1bmN0aW9uKCl7dHJ5e3M9c2V0VGltZW91dH1jYXRjaChlKXtzPWZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwic2V0VGltZW91dCBpcyBub3QgZGVmaW5lZFwiKX19dHJ5e3U9Y2xlYXJUaW1lb3V0fWNhdGNoKGUpe3U9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJjbGVhclRpbWVvdXQgaXMgbm90IGRlZmluZWRcIil9fX0oKTt2YXIgbCxmPVtdLGQ9ITEscD0tMTtjLm5leHRUaWNrPWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoLTEpO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSlmb3IodmFyIHI9MTtyPGFyZ3VtZW50cy5sZW5ndGg7cisrKXRbci0xXT1hcmd1bWVudHNbcl07Zi5wdXNoKG5ldyBpKGUsdCkpLDEhPT1mLmxlbmd0aHx8ZHx8cyhvLDApfSxpLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXt0aGlzLmZ1bi5hcHBseShudWxsLHRoaXMuYXJyYXkpfSxjLnRpdGxlPVwiYnJvd3NlclwiLGMuYnJvd3Nlcj0hMCxjLmVudj17fSxjLmFyZ3Y9W10sYy52ZXJzaW9uPVwiXCIsYy52ZXJzaW9ucz17fSxjLm9uPWEsYy5hZGRMaXN0ZW5lcj1hLGMub25jZT1hLGMub2ZmPWEsYy5yZW1vdmVMaXN0ZW5lcj1hLGMucmVtb3ZlQWxsTGlzdGVuZXJzPWEsYy5lbWl0PWEsYy5iaW5kaW5nPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkXCIpfSxjLmN3ZD1mdW5jdGlvbigpe3JldHVyblwiL1wifSxjLmNoZGlyPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZFwiKX0sYy51bWFzaz1mdW5jdGlvbigpe3JldHVybiAwfX0se31dLDk3OltmdW5jdGlvbihlLHQscil7KGZ1bmN0aW9uKHIpe3ZhciBuPVwib2JqZWN0XCI9PXR5cGVvZiByP3I6XCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdz93aW5kb3c6XCJvYmplY3RcIj09dHlwZW9mIHNlbGY/c2VsZjp0aGlzLG89bi5yZWdlbmVyYXRvclJ1bnRpbWUmJk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG4pLmluZGV4T2YoXCJyZWdlbmVyYXRvclJ1bnRpbWVcIik+PTAsaT1vJiZuLnJlZ2VuZXJhdG9yUnVudGltZTtpZihuLnJlZ2VuZXJhdG9yUnVudGltZT12b2lkIDAsdC5leHBvcnRzPWUoXCIuL3J1bnRpbWVcIiksbyluLnJlZ2VuZXJhdG9yUnVudGltZT1pO2Vsc2UgdHJ5e2RlbGV0ZSBuLnJlZ2VuZXJhdG9yUnVudGltZX1jYXRjaChhKXtuLnJlZ2VuZXJhdG9yUnVudGltZT12b2lkIDB9fSkuY2FsbCh0aGlzLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30pfSx7XCIuL3J1bnRpbWVcIjo5OH1dLDk4OltmdW5jdGlvbihlLHQscil7KGZ1bmN0aW9uKGUscil7IWZ1bmN0aW9uKHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSx0LHIsbil7dmFyIG89T2JqZWN0LmNyZWF0ZSgodHx8aSkucHJvdG90eXBlKSxhPW5ldyBoKG58fFtdKTtyZXR1cm4gby5faW52b2tlPWYoZSxyLGEpLG99ZnVuY3Rpb24gbyhlLHQscil7dHJ5e3JldHVybnt0eXBlOlwibm9ybWFsXCIsYXJnOmUuY2FsbCh0LHIpfX1jYXRjaChuKXtyZXR1cm57dHlwZTpcInRocm93XCIsYXJnOm59fX1mdW5jdGlvbiBpKCl7fWZ1bmN0aW9uIGEoKXt9ZnVuY3Rpb24gcygpe31mdW5jdGlvbiB1KGUpe1tcIm5leHRcIixcInRocm93XCIsXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbih0KXtlW3RdPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9pbnZva2UodCxlKX19KX1mdW5jdGlvbiBjKGUpe3RoaXMuYXJnPWV9ZnVuY3Rpb24gbCh0KXtmdW5jdGlvbiByKGUsbixpLGEpe3ZhciBzPW8odFtlXSx0LG4pO2lmKFwidGhyb3dcIiE9PXMudHlwZSl7dmFyIHU9cy5hcmcsbD11LnZhbHVlO3JldHVybiBsIGluc3RhbmNlb2YgYz9Qcm9taXNlLnJlc29sdmUobC5hcmcpLnRoZW4oZnVuY3Rpb24oZSl7cihcIm5leHRcIixlLGksYSl9LGZ1bmN0aW9uKGUpe3IoXCJ0aHJvd1wiLGUsaSxhKX0pOlByb21pc2UucmVzb2x2ZShsKS50aGVuKGZ1bmN0aW9uKGUpe3UudmFsdWU9ZSxpKHUpfSxhKX1hKHMuYXJnKX1mdW5jdGlvbiBuKGUsdCl7ZnVuY3Rpb24gbigpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihuLG8pe3IoZSx0LG4sbyl9KX1yZXR1cm4gaT1pP2kudGhlbihuLG4pOm4oKX1cIm9iamVjdFwiPT10eXBlb2YgZSYmZS5kb21haW4mJihyPWUuZG9tYWluLmJpbmQocikpO3ZhciBpO3RoaXMuX2ludm9rZT1ufWZ1bmN0aW9uIGYoZSx0LHIpe3ZhciBuPU87cmV0dXJuIGZ1bmN0aW9uKGksYSl7aWYobj09PXgpdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtpZihuPT09UCl7aWYoXCJ0aHJvd1wiPT09aSl0aHJvdyBhO3JldHVybiBtKCl9Zm9yKDs7KXt2YXIgcz1yLmRlbGVnYXRlO2lmKHMpe2lmKFwicmV0dXJuXCI9PT1pfHxcInRocm93XCI9PT1pJiZzLml0ZXJhdG9yW2ldPT09dil7ci5kZWxlZ2F0ZT1udWxsO3ZhciB1PXMuaXRlcmF0b3JbXCJyZXR1cm5cIl07aWYodSl7dmFyIGM9byh1LHMuaXRlcmF0b3IsYSk7aWYoXCJ0aHJvd1wiPT09Yy50eXBlKXtpPVwidGhyb3dcIixhPWMuYXJnO2NvbnRpbnVlfX1pZihcInJldHVyblwiPT09aSljb250aW51ZX12YXIgYz1vKHMuaXRlcmF0b3JbaV0scy5pdGVyYXRvcixhKTtpZihcInRocm93XCI9PT1jLnR5cGUpe3IuZGVsZWdhdGU9bnVsbCxpPVwidGhyb3dcIixhPWMuYXJnO2NvbnRpbnVlfWk9XCJuZXh0XCIsYT12O3ZhciBsPWMuYXJnO2lmKCFsLmRvbmUpcmV0dXJuIG49TSxsO3Jbcy5yZXN1bHROYW1lXT1sLnZhbHVlLHIubmV4dD1zLm5leHRMb2Msci5kZWxlZ2F0ZT1udWxsfWlmKFwibmV4dFwiPT09aSlyLnNlbnQ9ci5fc2VudD1hO2Vsc2UgaWYoXCJ0aHJvd1wiPT09aSl7aWYobj09PU8pdGhyb3cgbj1QLGE7ci5kaXNwYXRjaEV4Y2VwdGlvbihhKSYmKGk9XCJuZXh0XCIsYT12KX1lbHNlXCJyZXR1cm5cIj09PWkmJnIuYWJydXB0KFwicmV0dXJuXCIsYSk7bj14O3ZhciBjPW8oZSx0LHIpO2lmKFwibm9ybWFsXCI9PT1jLnR5cGUpe249ci5kb25lP1A6TTt2YXIgbD17dmFsdWU6Yy5hcmcsZG9uZTpyLmRvbmV9O2lmKGMuYXJnIT09aylyZXR1cm4gbDtyLmRlbGVnYXRlJiZcIm5leHRcIj09PWkmJihhPXYpfWVsc2VcInRocm93XCI9PT1jLnR5cGUmJihuPVAsaT1cInRocm93XCIsYT1jLmFyZyl9fX1mdW5jdGlvbiBkKGUpe3ZhciB0PXt0cnlMb2M6ZVswXX07MSBpbiBlJiYodC5jYXRjaExvYz1lWzFdKSwyIGluIGUmJih0LmZpbmFsbHlMb2M9ZVsyXSx0LmFmdGVyTG9jPWVbM10pLHRoaXMudHJ5RW50cmllcy5wdXNoKHQpfWZ1bmN0aW9uIHAoZSl7dmFyIHQ9ZS5jb21wbGV0aW9ufHx7fTt0LnR5cGU9XCJub3JtYWxcIixkZWxldGUgdC5hcmcsZS5jb21wbGV0aW9uPXR9ZnVuY3Rpb24gaChlKXt0aGlzLnRyeUVudHJpZXM9W3t0cnlMb2M6XCJyb290XCJ9XSxlLmZvckVhY2goZCx0aGlzKSx0aGlzLnJlc2V0KCEwKX1mdW5jdGlvbiB5KGUpe2lmKGUpe3ZhciB0PWVbZ107aWYodClyZXR1cm4gdC5jYWxsKGUpO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUubmV4dClyZXR1cm4gZTtpZighaXNOYU4oZS5sZW5ndGgpKXt2YXIgcj0tMSxuPWZ1bmN0aW9uIG8oKXtmb3IoOysrcjxlLmxlbmd0aDspaWYoXy5jYWxsKGUscikpcmV0dXJuIG8udmFsdWU9ZVtyXSxvLmRvbmU9ITEsbztyZXR1cm4gby52YWx1ZT12LG8uZG9uZT0hMCxvfTtyZXR1cm4gbi5uZXh0PW59fXJldHVybntuZXh0Om19fWZ1bmN0aW9uIG0oKXtyZXR1cm57dmFsdWU6dixkb25lOiEwfX12YXIgdixfPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksYj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2w/U3ltYm9sOnt9LGc9Yi5pdGVyYXRvcnx8XCJAQGl0ZXJhdG9yXCIsRT1iLnRvU3RyaW5nVGFnfHxcIkBAdG9TdHJpbmdUYWdcIixqPVwib2JqZWN0XCI9PXR5cGVvZiB0LHc9ci5yZWdlbmVyYXRvclJ1bnRpbWU7aWYodylyZXR1cm4gdm9pZChqJiYodC5leHBvcnRzPXcpKTt3PXIucmVnZW5lcmF0b3JSdW50aW1lPWo/dC5leHBvcnRzOnt9LHcud3JhcD1uO3ZhciBPPVwic3VzcGVuZGVkU3RhcnRcIixNPVwic3VzcGVuZGVkWWllbGRcIix4PVwiZXhlY3V0aW5nXCIsUD1cImNvbXBsZXRlZFwiLGs9e30sUj1zLnByb3RvdHlwZT1pLnByb3RvdHlwZTthLnByb3RvdHlwZT1SLmNvbnN0cnVjdG9yPXMscy5jb25zdHJ1Y3Rvcj1hLHNbRV09YS5kaXNwbGF5TmFtZT1cIkdlbmVyYXRvckZ1bmN0aW9uXCIsdy5pc0dlbmVyYXRvckZ1bmN0aW9uPWZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJmUuY29uc3RydWN0b3I7cmV0dXJuISF0JiYodD09PWF8fFwiR2VuZXJhdG9yRnVuY3Rpb25cIj09PSh0LmRpc3BsYXlOYW1lfHx0Lm5hbWUpKX0sdy5tYXJrPWZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKGUscyk6KGUuX19wcm90b19fPXMsRSBpbiBlfHwoZVtFXT1cIkdlbmVyYXRvckZ1bmN0aW9uXCIpKSxlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFIpLGV9LHcuYXdyYXA9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBjKGUpfSx1KGwucHJvdG90eXBlKSx3LmFzeW5jPWZ1bmN0aW9uKGUsdCxyLG8pe3ZhciBpPW5ldyBsKG4oZSx0LHIsbykpO3JldHVybiB3LmlzR2VuZXJhdG9yRnVuY3Rpb24odCk/aTppLm5leHQoKS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiBlLmRvbmU/ZS52YWx1ZTppLm5leHQoKX0pfSx1KFIpLFJbZ109ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sUltFXT1cIkdlbmVyYXRvclwiLFIudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIltvYmplY3QgR2VuZXJhdG9yXVwifSx3LmtleXM9ZnVuY3Rpb24oZSl7dmFyIHQ9W107Zm9yKHZhciByIGluIGUpdC5wdXNoKHIpO3JldHVybiB0LnJldmVyc2UoKSxmdW5jdGlvbiBuKCl7Zm9yKDt0Lmxlbmd0aDspe3ZhciByPXQucG9wKCk7aWYociBpbiBlKXJldHVybiBuLnZhbHVlPXIsbi5kb25lPSExLG59cmV0dXJuIG4uZG9uZT0hMCxufX0sdy52YWx1ZXM9eSxoLnByb3RvdHlwZT17Y29uc3RydWN0b3I6aCxyZXNldDpmdW5jdGlvbihlKXtcbmlmKHRoaXMucHJldj0wLHRoaXMubmV4dD0wLHRoaXMuc2VudD10aGlzLl9zZW50PXYsdGhpcy5kb25lPSExLHRoaXMuZGVsZWdhdGU9bnVsbCx0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChwKSwhZSlmb3IodmFyIHQgaW4gdGhpcylcInRcIj09PXQuY2hhckF0KDApJiZfLmNhbGwodGhpcyx0KSYmIWlzTmFOKCt0LnNsaWNlKDEpKSYmKHRoaXNbdF09dil9LHN0b3A6ZnVuY3Rpb24oKXt0aGlzLmRvbmU9ITA7dmFyIGU9dGhpcy50cnlFbnRyaWVzWzBdLHQ9ZS5jb21wbGV0aW9uO2lmKFwidGhyb3dcIj09PXQudHlwZSl0aHJvdyB0LmFyZztyZXR1cm4gdGhpcy5ydmFsfSxkaXNwYXRjaEV4Y2VwdGlvbjpmdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQsbil7cmV0dXJuIGkudHlwZT1cInRocm93XCIsaS5hcmc9ZSxyLm5leHQ9dCwhIW59aWYodGhpcy5kb25lKXRocm93IGU7Zm9yKHZhciByPXRoaXMsbj10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7bj49MDstLW4pe3ZhciBvPXRoaXMudHJ5RW50cmllc1tuXSxpPW8uY29tcGxldGlvbjtpZihcInJvb3RcIj09PW8udHJ5TG9jKXJldHVybiB0KFwiZW5kXCIpO2lmKG8udHJ5TG9jPD10aGlzLnByZXYpe3ZhciBhPV8uY2FsbChvLFwiY2F0Y2hMb2NcIikscz1fLmNhbGwobyxcImZpbmFsbHlMb2NcIik7aWYoYSYmcyl7aWYodGhpcy5wcmV2PG8uY2F0Y2hMb2MpcmV0dXJuIHQoby5jYXRjaExvYywhMCk7aWYodGhpcy5wcmV2PG8uZmluYWxseUxvYylyZXR1cm4gdChvLmZpbmFsbHlMb2MpfWVsc2UgaWYoYSl7aWYodGhpcy5wcmV2PG8uY2F0Y2hMb2MpcmV0dXJuIHQoby5jYXRjaExvYywhMCl9ZWxzZXtpZighcyl0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtpZih0aGlzLnByZXY8by5maW5hbGx5TG9jKXJldHVybiB0KG8uZmluYWxseUxvYyl9fX19LGFicnVwdDpmdW5jdGlvbihlLHQpe2Zvcih2YXIgcj10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7cj49MDstLXIpe3ZhciBuPXRoaXMudHJ5RW50cmllc1tyXTtpZihuLnRyeUxvYzw9dGhpcy5wcmV2JiZfLmNhbGwobixcImZpbmFsbHlMb2NcIikmJnRoaXMucHJldjxuLmZpbmFsbHlMb2Mpe3ZhciBvPW47YnJlYWt9fW8mJihcImJyZWFrXCI9PT1lfHxcImNvbnRpbnVlXCI9PT1lKSYmby50cnlMb2M8PXQmJnQ8PW8uZmluYWxseUxvYyYmKG89bnVsbCk7dmFyIGk9bz9vLmNvbXBsZXRpb246e307cmV0dXJuIGkudHlwZT1lLGkuYXJnPXQsbz90aGlzLm5leHQ9by5maW5hbGx5TG9jOnRoaXMuY29tcGxldGUoaSksa30sY29tcGxldGU6ZnVuY3Rpb24oZSx0KXtpZihcInRocm93XCI9PT1lLnR5cGUpdGhyb3cgZS5hcmc7XCJicmVha1wiPT09ZS50eXBlfHxcImNvbnRpbnVlXCI9PT1lLnR5cGU/dGhpcy5uZXh0PWUuYXJnOlwicmV0dXJuXCI9PT1lLnR5cGU/KHRoaXMucnZhbD1lLmFyZyx0aGlzLm5leHQ9XCJlbmRcIik6XCJub3JtYWxcIj09PWUudHlwZSYmdCYmKHRoaXMubmV4dD10KX0sZmluaXNoOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7dD49MDstLXQpe3ZhciByPXRoaXMudHJ5RW50cmllc1t0XTtpZihyLmZpbmFsbHlMb2M9PT1lKXJldHVybiB0aGlzLmNvbXBsZXRlKHIuY29tcGxldGlvbixyLmFmdGVyTG9jKSxwKHIpLGt9fSxcImNhdGNoXCI6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTt0Pj0wOy0tdCl7dmFyIHI9dGhpcy50cnlFbnRyaWVzW3RdO2lmKHIudHJ5TG9jPT09ZSl7dmFyIG49ci5jb21wbGV0aW9uO2lmKFwidGhyb3dcIj09PW4udHlwZSl7dmFyIG89bi5hcmc7cChyKX1yZXR1cm4gb319dGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpfSxkZWxlZ2F0ZVlpZWxkOmZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdGhpcy5kZWxlZ2F0ZT17aXRlcmF0b3I6eShlKSxyZXN1bHROYW1lOnQsbmV4dExvYzpyfSxrfX19KFwib2JqZWN0XCI9PXR5cGVvZiByP3I6XCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdz93aW5kb3c6XCJvYmplY3RcIj09dHlwZW9mIHNlbGY/c2VsZjp0aGlzKX0pLmNhbGwodGhpcyxlKFwiX3Byb2Nlc3NcIiksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHtfcHJvY2Vzczo5Nn1dLDk5OltmdW5jdGlvbih0LHIsbil7IWZ1bmN0aW9uKHQsbil7XCJmdW5jdGlvblwiPT10eXBlb2YgZSYmZS5hbWQ/ZShbXSxuKTpcInVuZGVmaW5lZFwiIT10eXBlb2YgciYmci5leHBvcnRzP3IuZXhwb3J0cz1uKCk6dC50djQ9bigpfSh0aGlzLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXtyZXR1cm4gZW5jb2RlVVJJKGUpLnJlcGxhY2UoLyUyNVswLTldWzAtOV0vZyxmdW5jdGlvbihlKXtyZXR1cm5cIiVcIitlLnN1YnN0cmluZygzKX0pfWZ1bmN0aW9uIHQodCl7dmFyIHI9XCJcIjtkW3QuY2hhckF0KDApXSYmKHI9dC5jaGFyQXQoMCksdD10LnN1YnN0cmluZygxKSk7dmFyIG49XCJcIixvPVwiXCIsaT0hMCxhPSExLHM9ITE7XCIrXCI9PT1yP2k9ITE6XCIuXCI9PT1yPyhvPVwiLlwiLG49XCIuXCIpOlwiL1wiPT09cj8obz1cIi9cIixuPVwiL1wiKTpcIiNcIj09PXI/KG89XCIjXCIsaT0hMSk6XCI7XCI9PT1yPyhvPVwiO1wiLG49XCI7XCIsYT0hMCxzPSEwKTpcIj9cIj09PXI/KG89XCI/XCIsbj1cIiZcIixhPSEwKTpcIiZcIj09PXImJihvPVwiJlwiLG49XCImXCIsYT0hMCk7Zm9yKHZhciB1PVtdLGM9dC5zcGxpdChcIixcIiksbD1bXSxmPXt9LGg9MDtoPGMubGVuZ3RoO2grKyl7dmFyIHk9Y1toXSxtPW51bGw7aWYoeS5pbmRleE9mKFwiOlwiKSE9PS0xKXt2YXIgdj15LnNwbGl0KFwiOlwiKTt5PXZbMF0sbT1wYXJzZUludCh2WzFdLDEwKX1mb3IodmFyIF89e307cFt5LmNoYXJBdCh5Lmxlbmd0aC0xKV07KV9beS5jaGFyQXQoeS5sZW5ndGgtMSldPSEwLHk9eS5zdWJzdHJpbmcoMCx5Lmxlbmd0aC0xKTt2YXIgYj17dHJ1bmNhdGU6bSxuYW1lOnksc3VmZmljZXM6X307bC5wdXNoKGIpLGZbeV09Yix1LnB1c2goeSl9dmFyIGc9ZnVuY3Rpb24odCl7Zm9yKHZhciByPVwiXCIsdT0wLGM9MDtjPGwubGVuZ3RoO2MrKyl7dmFyIGY9bFtjXSxkPXQoZi5uYW1lKTtpZihudWxsPT09ZHx8dm9pZCAwPT09ZHx8QXJyYXkuaXNBcnJheShkKSYmMD09PWQubGVuZ3RofHxcIm9iamVjdFwiPT10eXBlb2YgZCYmMD09PU9iamVjdC5rZXlzKGQpLmxlbmd0aCl1Kys7ZWxzZSBpZihyKz1jPT09dT9vOm58fFwiLFwiLEFycmF5LmlzQXJyYXkoZCkpe2EmJihyKz1mLm5hbWUrXCI9XCIpO2Zvcih2YXIgcD0wO3A8ZC5sZW5ndGg7cCsrKXA+MCYmKHIrPWYuc3VmZmljZXNbXCIqXCJdP258fFwiLFwiOlwiLFwiLGYuc3VmZmljZXNbXCIqXCJdJiZhJiYocis9Zi5uYW1lK1wiPVwiKSkscis9aT9lbmNvZGVVUklDb21wb25lbnQoZFtwXSkucmVwbGFjZSgvIS9nLFwiJTIxXCIpOmUoZFtwXSl9ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2YgZCl7YSYmIWYuc3VmZmljZXNbXCIqXCJdJiYocis9Zi5uYW1lK1wiPVwiKTt2YXIgaD0hMDtmb3IodmFyIHkgaW4gZClofHwocis9Zi5zdWZmaWNlc1tcIipcIl0/bnx8XCIsXCI6XCIsXCIpLGg9ITEscis9aT9lbmNvZGVVUklDb21wb25lbnQoeSkucmVwbGFjZSgvIS9nLFwiJTIxXCIpOmUoeSkscis9Zi5zdWZmaWNlc1tcIipcIl0/XCI9XCI6XCIsXCIscis9aT9lbmNvZGVVUklDb21wb25lbnQoZFt5XSkucmVwbGFjZSgvIS9nLFwiJTIxXCIpOmUoZFt5XSl9ZWxzZSBhJiYocis9Zi5uYW1lLHMmJlwiXCI9PT1kfHwocis9XCI9XCIpKSxudWxsIT1mLnRydW5jYXRlJiYoZD1kLnN1YnN0cmluZygwLGYudHJ1bmNhdGUpKSxyKz1pP2VuY29kZVVSSUNvbXBvbmVudChkKS5yZXBsYWNlKC8hL2csXCIlMjFcIik6ZShkKX1yZXR1cm4gcn07cmV0dXJuIGcudmFyTmFtZXM9dSx7cHJlZml4Om8sc3Vic3RpdHV0aW9uOmd9fWZ1bmN0aW9uIHIoZSl7aWYoISh0aGlzIGluc3RhbmNlb2YgcikpcmV0dXJuIG5ldyByKGUpO2Zvcih2YXIgbj1lLnNwbGl0KFwie1wiKSxvPVtuLnNoaWZ0KCldLGk9W10sYT1bXSxzPVtdO24ubGVuZ3RoPjA7KXt2YXIgdT1uLnNoaWZ0KCksYz11LnNwbGl0KFwifVwiKVswXSxsPXUuc3Vic3RyaW5nKGMubGVuZ3RoKzEpLGY9dChjKTthLnB1c2goZi5zdWJzdGl0dXRpb24pLGkucHVzaChmLnByZWZpeCksby5wdXNoKGwpLHM9cy5jb25jYXQoZi5zdWJzdGl0dXRpb24udmFyTmFtZXMpfXRoaXMuZmlsbD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9b1swXSxyPTA7cjxhLmxlbmd0aDtyKyspe3ZhciBuPWFbcl07dCs9bihlKSx0Kz1vW3IrMV19cmV0dXJuIHR9LHRoaXMudmFyTmFtZXM9cyx0aGlzLnRlbXBsYXRlPWV9ZnVuY3Rpb24gbihlLHQpe2lmKGU9PT10KXJldHVybiEwO2lmKGUmJnQmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZcIm9iamVjdFwiPT10eXBlb2YgdCl7aWYoQXJyYXkuaXNBcnJheShlKSE9PUFycmF5LmlzQXJyYXkodCkpcmV0dXJuITE7aWYoQXJyYXkuaXNBcnJheShlKSl7aWYoZS5sZW5ndGghPT10Lmxlbmd0aClyZXR1cm4hMTtmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKylpZighbihlW3JdLHRbcl0pKXJldHVybiExfWVsc2V7dmFyIG87Zm9yKG8gaW4gZSlpZih2b2lkIDA9PT10W29dJiZ2b2lkIDAhPT1lW29dKXJldHVybiExO2ZvcihvIGluIHQpaWYodm9pZCAwPT09ZVtvXSYmdm9pZCAwIT09dFtvXSlyZXR1cm4hMTtmb3IobyBpbiBlKWlmKCFuKGVbb10sdFtvXSkpcmV0dXJuITF9cmV0dXJuITB9cmV0dXJuITF9ZnVuY3Rpb24gbyhlKXt2YXIgdD1TdHJpbmcoZSkucmVwbGFjZSgvXlxccyt8XFxzKyQvZyxcIlwiKS5tYXRjaCgvXihbXjpcXC8/I10rOik/KFxcL1xcLyg/OlteOkBdKig/OjpbXjpAXSopP0ApPygoW146XFwvPyNdKikoPzo6KFxcZCopKT8pKT8oW14/I10qKShcXD9bXiNdKik/KCNbXFxzXFxTXSopPy8pO3JldHVybiB0P3tocmVmOnRbMF18fFwiXCIscHJvdG9jb2w6dFsxXXx8XCJcIixhdXRob3JpdHk6dFsyXXx8XCJcIixob3N0OnRbM118fFwiXCIsaG9zdG5hbWU6dFs0XXx8XCJcIixwb3J0OnRbNV18fFwiXCIscGF0aG5hbWU6dFs2XXx8XCJcIixzZWFyY2g6dFs3XXx8XCJcIixoYXNoOnRbOF18fFwiXCJ9Om51bGx9ZnVuY3Rpb24gaShlLHQpe2Z1bmN0aW9uIHIoZSl7dmFyIHQ9W107cmV0dXJuIGUucmVwbGFjZSgvXihcXC5cXC4/KFxcL3wkKSkrLyxcIlwiKS5yZXBsYWNlKC9cXC8oXFwuKFxcL3wkKSkrL2csXCIvXCIpLnJlcGxhY2UoL1xcL1xcLlxcLiQvLFwiLy4uL1wiKS5yZXBsYWNlKC9cXC8/W15cXC9dKi9nLGZ1bmN0aW9uKGUpe1wiLy4uXCI9PT1lP3QucG9wKCk6dC5wdXNoKGUpfSksdC5qb2luKFwiXCIpLnJlcGxhY2UoL15cXC8vLFwiL1wiPT09ZS5jaGFyQXQoMCk/XCIvXCI6XCJcIil9cmV0dXJuIHQ9byh0fHxcIlwiKSxlPW8oZXx8XCJcIiksdCYmZT8odC5wcm90b2NvbHx8ZS5wcm90b2NvbCkrKHQucHJvdG9jb2x8fHQuYXV0aG9yaXR5P3QuYXV0aG9yaXR5OmUuYXV0aG9yaXR5KStyKHQucHJvdG9jb2x8fHQuYXV0aG9yaXR5fHxcIi9cIj09PXQucGF0aG5hbWUuY2hhckF0KDApP3QucGF0aG5hbWU6dC5wYXRobmFtZT8oZS5hdXRob3JpdHkmJiFlLnBhdGhuYW1lP1wiL1wiOlwiXCIpK2UucGF0aG5hbWUuc2xpY2UoMCxlLnBhdGhuYW1lLmxhc3RJbmRleE9mKFwiL1wiKSsxKSt0LnBhdGhuYW1lOmUucGF0aG5hbWUpKyh0LnByb3RvY29sfHx0LmF1dGhvcml0eXx8dC5wYXRobmFtZT90LnNlYXJjaDp0LnNlYXJjaHx8ZS5zZWFyY2gpK3QuaGFzaDpudWxsfWZ1bmN0aW9uIGEoZSl7cmV0dXJuIGUuc3BsaXQoXCIjXCIpWzBdfWZ1bmN0aW9uIHMoZSx0KXtpZihlJiZcIm9iamVjdFwiPT10eXBlb2YgZSlpZih2b2lkIDA9PT10P3Q9ZS5pZDpcInN0cmluZ1wiPT10eXBlb2YgZS5pZCYmKHQ9aSh0LGUuaWQpLGUuaWQ9dCksQXJyYXkuaXNBcnJheShlKSlmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKylzKGVbcl0sdCk7ZWxzZXtcInN0cmluZ1wiPT10eXBlb2YgZS4kcmVmJiYoZS4kcmVmPWkodCxlLiRyZWYpKTtmb3IodmFyIG4gaW4gZSlcImVudW1cIiE9PW4mJnMoZVtuXSx0KX19ZnVuY3Rpb24gdShlKXtlPWV8fFwiZW5cIjt2YXIgdD1FW2VdO3JldHVybiBmdW5jdGlvbihlKXt2YXIgcj10W2UuY29kZV18fGdbZS5jb2RlXTtpZihcInN0cmluZ1wiIT10eXBlb2YgcilyZXR1cm5cIlVua25vd24gZXJyb3IgY29kZSBcIitlLmNvZGUrXCI6IFwiK0pTT04uc3RyaW5naWZ5KGUubWVzc2FnZVBhcmFtcyk7dmFyIG49ZS5wYXJhbXM7cmV0dXJuIHIucmVwbGFjZSgvXFx7KFtee31dKilcXH0vZyxmdW5jdGlvbihlLHQpe3ZhciByPW5bdF07cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHJ8fFwibnVtYmVyXCI9PXR5cGVvZiByP3I6ZX0pfX1mdW5jdGlvbiBjKGUsdCxyLG4sbyl7aWYoRXJyb3IuY2FsbCh0aGlzKSx2b2lkIDA9PT1lKXRocm93IG5ldyBFcnJvcihcIk5vIGVycm9yIGNvZGUgc3VwcGxpZWQ6IFwiK24pO3RoaXMubWVzc2FnZT1cIlwiLHRoaXMucGFyYW1zPXQsdGhpcy5jb2RlPWUsdGhpcy5kYXRhUGF0aD1yfHxcIlwiLHRoaXMuc2NoZW1hUGF0aD1ufHxcIlwiLHRoaXMuc3ViRXJyb3JzPW98fG51bGw7dmFyIGk9bmV3IEVycm9yKHRoaXMubWVzc2FnZSk7aWYodGhpcy5zdGFjaz1pLnN0YWNrfHxpLnN0YWNrdHJhY2UsIXRoaXMuc3RhY2spdHJ5e3Rocm93IGl9Y2F0Y2goaSl7dGhpcy5zdGFjaz1pLnN0YWNrfHxpLnN0YWNrdHJhY2V9fWZ1bmN0aW9uIGwoZSx0KXtpZih0LnN1YnN0cmluZygwLGUubGVuZ3RoKT09PWUpe3ZhciByPXQuc3Vic3RyaW5nKGUubGVuZ3RoKTtpZih0Lmxlbmd0aD4wJiZcIi9cIj09PXQuY2hhckF0KGUubGVuZ3RoLTEpfHxcIiNcIj09PXIuY2hhckF0KDApfHxcIj9cIj09PXIuY2hhckF0KDApKXJldHVybiEwfXJldHVybiExfWZ1bmN0aW9uIGYoZSl7dmFyIHQscixuPW5ldyBoLG89e3NldEVycm9yUmVwb3J0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGU/dGhpcy5sYW5ndWFnZShlKToocj1lLCEwKX0sYWRkRm9ybWF0OmZ1bmN0aW9uKCl7bi5hZGRGb3JtYXQuYXBwbHkobixhcmd1bWVudHMpfSxsYW5ndWFnZTpmdW5jdGlvbihlKXtyZXR1cm4gZT8oRVtlXXx8KGU9ZS5zcGxpdChcIi1cIilbMF0pLCEhRVtlXSYmKHQ9ZSxlKSk6dH0sYWRkTGFuZ3VhZ2U6ZnVuY3Rpb24oZSx0KXt2YXIgcjtmb3IociBpbiB2KXRbcl0mJiF0W3Zbcl1dJiYodFt2W3JdXT10W3JdKTt2YXIgbj1lLnNwbGl0KFwiLVwiKVswXTtpZihFW25dKXtFW2VdPU9iamVjdC5jcmVhdGUoRVtuXSk7Zm9yKHIgaW4gdClcInVuZGVmaW5lZFwiPT10eXBlb2YgRVtuXVtyXSYmKEVbbl1bcl09dFtyXSksRVtlXVtyXT10W3JdfWVsc2UgRVtlXT10LEVbbl09dDtyZXR1cm4gdGhpc30sZnJlc2hBcGk6ZnVuY3Rpb24oZSl7dmFyIHQ9ZigpO3JldHVybiBlJiZ0Lmxhbmd1YWdlKGUpLHR9LHZhbGlkYXRlOmZ1bmN0aW9uKGUsbyxpLGEpe3ZhciBzPXUodCksYz1yP2Z1bmN0aW9uKGUsdCxuKXtyZXR1cm4gcihlLHQsbil8fHMoZSx0LG4pfTpzLGw9bmV3IGgobiwoITEpLGMsaSxhKTtcInN0cmluZ1wiPT10eXBlb2YgbyYmKG89eyRyZWY6b30pLGwuYWRkU2NoZW1hKFwiXCIsbyk7dmFyIGY9bC52YWxpZGF0ZUFsbChlLG8sbnVsbCxudWxsLFwiXCIpO3JldHVybiFmJiZhJiYoZj1sLmJhblVua25vd25Qcm9wZXJ0aWVzKGUsbykpLHRoaXMuZXJyb3I9Zix0aGlzLm1pc3Npbmc9bC5taXNzaW5nLHRoaXMudmFsaWQ9bnVsbD09PWYsdGhpcy52YWxpZH0sdmFsaWRhdGVSZXN1bHQ6ZnVuY3Rpb24oKXt2YXIgZT17fTtyZXR1cm4gdGhpcy52YWxpZGF0ZS5hcHBseShlLGFyZ3VtZW50cyksZX0sdmFsaWRhdGVNdWx0aXBsZTpmdW5jdGlvbihlLG8saSxhKXt2YXIgcz11KHQpLGM9cj9mdW5jdGlvbihlLHQsbil7cmV0dXJuIHIoZSx0LG4pfHxzKGUsdCxuKX06cyxsPW5ldyBoKG4sKCEwKSxjLGksYSk7XCJzdHJpbmdcIj09dHlwZW9mIG8mJihvPXskcmVmOm99KSxsLmFkZFNjaGVtYShcIlwiLG8pLGwudmFsaWRhdGVBbGwoZSxvLG51bGwsbnVsbCxcIlwiKSxhJiZsLmJhblVua25vd25Qcm9wZXJ0aWVzKGUsbyk7dmFyIGY9e307cmV0dXJuIGYuZXJyb3JzPWwuZXJyb3JzLGYubWlzc2luZz1sLm1pc3NpbmcsZi52YWxpZD0wPT09Zi5lcnJvcnMubGVuZ3RoLGZ9LGFkZFNjaGVtYTpmdW5jdGlvbigpe3JldHVybiBuLmFkZFNjaGVtYS5hcHBseShuLGFyZ3VtZW50cyl9LGdldFNjaGVtYTpmdW5jdGlvbigpe3JldHVybiBuLmdldFNjaGVtYS5hcHBseShuLGFyZ3VtZW50cyl9LGdldFNjaGVtYU1hcDpmdW5jdGlvbigpe3JldHVybiBuLmdldFNjaGVtYU1hcC5hcHBseShuLGFyZ3VtZW50cyl9LGdldFNjaGVtYVVyaXM6ZnVuY3Rpb24oKXtyZXR1cm4gbi5nZXRTY2hlbWFVcmlzLmFwcGx5KG4sYXJndW1lbnRzKX0sZ2V0TWlzc2luZ1VyaXM6ZnVuY3Rpb24oKXtyZXR1cm4gbi5nZXRNaXNzaW5nVXJpcy5hcHBseShuLGFyZ3VtZW50cyl9LGRyb3BTY2hlbWFzOmZ1bmN0aW9uKCl7bi5kcm9wU2NoZW1hcy5hcHBseShuLGFyZ3VtZW50cyl9LGRlZmluZUtleXdvcmQ6ZnVuY3Rpb24oKXtuLmRlZmluZUtleXdvcmQuYXBwbHkobixhcmd1bWVudHMpfSxkZWZpbmVFcnJvcjpmdW5jdGlvbihlLHQscil7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGV8fCEvXltBLVpdKyhfW0EtWl0rKSokLy50ZXN0KGUpKXRocm93IG5ldyBFcnJvcihcIkNvZGUgbmFtZSBtdXN0IGJlIGEgc3RyaW5nIGluIFVQUEVSX0NBU0VfV0lUSF9VTkRFUlNDT1JFU1wiKTtpZihcIm51bWJlclwiIT10eXBlb2YgdHx8dCUxIT09MHx8dDwxZTQpdGhyb3cgbmV3IEVycm9yKFwiQ29kZSBudW1iZXIgbXVzdCBiZSBhbiBpbnRlZ2VyID4gMTAwMDBcIik7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHZbZV0pdGhyb3cgbmV3IEVycm9yKFwiRXJyb3IgYWxyZWFkeSBkZWZpbmVkOiBcIitlK1wiIGFzIFwiK3ZbZV0pO2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBfW3RdKXRocm93IG5ldyBFcnJvcihcIkVycm9yIGNvZGUgYWxyZWFkeSB1c2VkOiBcIitfW3RdK1wiIGFzIFwiK3QpO3ZbZV09dCxfW3RdPWUsZ1tlXT1nW3RdPXI7Zm9yKHZhciBuIGluIEUpe3ZhciBvPUVbbl07b1tlXSYmKG9bdF09b1t0XXx8b1tlXSl9fSxyZXNldDpmdW5jdGlvbigpe24ucmVzZXQoKSx0aGlzLmVycm9yPW51bGwsdGhpcy5taXNzaW5nPVtdLHRoaXMudmFsaWQ9ITB9LG1pc3Npbmc6W10sZXJyb3I6bnVsbCx2YWxpZDohMCxub3JtU2NoZW1hOnMscmVzb2x2ZVVybDppLGdldERvY3VtZW50VXJpOmEsZXJyb3JDb2Rlczp2fTtyZXR1cm4gby5sYW5ndWFnZShlfHxcImVuXCIpLG99T2JqZWN0LmtleXN8fChPYmplY3Qua2V5cz1mdW5jdGlvbigpe3ZhciBlPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksdD0he3RvU3RyaW5nOm51bGx9LnByb3BlcnR5SXNFbnVtZXJhYmxlKFwidG9TdHJpbmdcIikscj1bXCJ0b1N0cmluZ1wiLFwidG9Mb2NhbGVTdHJpbmdcIixcInZhbHVlT2ZcIixcImhhc093blByb3BlcnR5XCIsXCJpc1Byb3RvdHlwZU9mXCIsXCJwcm9wZXJ0eUlzRW51bWVyYWJsZVwiLFwiY29uc3RydWN0b3JcIl0sbj1yLmxlbmd0aDtyZXR1cm4gZnVuY3Rpb24obyl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIG8mJlwiZnVuY3Rpb25cIiE9dHlwZW9mIG98fG51bGw9PT1vKXRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3Qua2V5cyBjYWxsZWQgb24gbm9uLW9iamVjdFwiKTt2YXIgaT1bXTtmb3IodmFyIGEgaW4gbyllLmNhbGwobyxhKSYmaS5wdXNoKGEpO2lmKHQpZm9yKHZhciBzPTA7czxuO3MrKyllLmNhbGwobyxyW3NdKSYmaS5wdXNoKHJbc10pO3JldHVybiBpfX0oKSksT2JqZWN0LmNyZWF0ZXx8KE9iamVjdC5jcmVhdGU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7fXJldHVybiBmdW5jdGlvbih0KXtpZigxIT09YXJndW1lbnRzLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJPYmplY3QuY3JlYXRlIGltcGxlbWVudGF0aW9uIG9ubHkgYWNjZXB0cyBvbmUgcGFyYW1ldGVyLlwiKTtyZXR1cm4gZS5wcm90b3R5cGU9dCxuZXcgZX19KCkpLEFycmF5LmlzQXJyYXl8fChBcnJheS5pc0FycmF5PWZ1bmN0aW9uKGUpe3JldHVyblwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKX0pLEFycmF5LnByb3RvdHlwZS5pbmRleE9mfHwoQXJyYXkucHJvdG90eXBlLmluZGV4T2Y9ZnVuY3Rpb24oZSl7aWYobnVsbD09PXRoaXMpdGhyb3cgbmV3IFR5cGVFcnJvcjt2YXIgdD1PYmplY3QodGhpcykscj10Lmxlbmd0aD4+PjA7aWYoMD09PXIpcmV0dXJuLTE7dmFyIG49MDtpZihhcmd1bWVudHMubGVuZ3RoPjEmJihuPU51bWJlcihhcmd1bWVudHNbMV0pLG4hPT1uP249MDowIT09biYmbiE9PTEvMCYmbiE9PS0oMS8wKSYmKG49KG4+MHx8LTEpKk1hdGguZmxvb3IoTWF0aC5hYnMobikpKSksbj49cilyZXR1cm4tMTtmb3IodmFyIG89bj49MD9uOk1hdGgubWF4KHItTWF0aC5hYnMobiksMCk7bzxyO28rKylpZihvIGluIHQmJnRbb109PT1lKXJldHVybiBvO3JldHVybi0xfSksT2JqZWN0LmlzRnJvemVufHwoT2JqZWN0LmlzRnJvemVuPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1cInR2NF90ZXN0X2Zyb3plbl9rZXlcIjtlLmhhc093blByb3BlcnR5KHQpOyl0Kz1NYXRoLnJhbmRvbSgpO3RyeXtyZXR1cm4gZVt0XT0hMCxkZWxldGUgZVt0XSwhMX1jYXRjaChyKXtyZXR1cm4hMH19KTt2YXIgZD17XCIrXCI6ITAsXCIjXCI6ITAsXCIuXCI6ITAsXCIvXCI6ITAsXCI7XCI6ITAsXCI/XCI6ITAsXCImXCI6ITB9LHA9e1wiKlwiOiEwfTtyLnByb3RvdHlwZT17dG9TdHJpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50ZW1wbGF0ZX0sZmlsbEZyb21PYmplY3Q6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZmlsbChmdW5jdGlvbih0KXtyZXR1cm4gZVt0XX0pfX07dmFyIGg9ZnVuY3Rpb24oZSx0LHIsbixvKXtpZih0aGlzLm1pc3Npbmc9W10sdGhpcy5taXNzaW5nTWFwPXt9LHRoaXMuZm9ybWF0VmFsaWRhdG9ycz1lP09iamVjdC5jcmVhdGUoZS5mb3JtYXRWYWxpZGF0b3JzKTp7fSx0aGlzLnNjaGVtYXM9ZT9PYmplY3QuY3JlYXRlKGUuc2NoZW1hcyk6e30sdGhpcy5jb2xsZWN0TXVsdGlwbGU9dCx0aGlzLmVycm9ycz1bXSx0aGlzLmhhbmRsZUVycm9yPXQ/dGhpcy5jb2xsZWN0RXJyb3I6dGhpcy5yZXR1cm5FcnJvcixuJiYodGhpcy5jaGVja1JlY3Vyc2l2ZT0hMCx0aGlzLnNjYW5uZWQ9W10sdGhpcy5zY2FubmVkRnJvemVuPVtdLHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXM9W10sdGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9ycz1bXSx0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXk9XCJ0djRfdmFsaWRhdGlvbl9pZFwiLHRoaXMudmFsaWRhdGlvbkVycm9yc0tleT1cInR2NF92YWxpZGF0aW9uX2Vycm9yc19pZFwiKSxvJiYodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzPSEwLHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzPXt9LHRoaXMudW5rbm93blByb3BlcnR5UGF0aHM9e30pLHRoaXMuZXJyb3JSZXBvcnRlcj1yfHx1KFwiZW5cIiksXCJzdHJpbmdcIj09dHlwZW9mIHRoaXMuZXJyb3JSZXBvcnRlcil0aHJvdyBuZXcgRXJyb3IoXCJkZWJ1Z1wiKTtpZih0aGlzLmRlZmluZWRLZXl3b3Jkcz17fSxlKWZvcih2YXIgaSBpbiBlLmRlZmluZWRLZXl3b3Jkcyl0aGlzLmRlZmluZWRLZXl3b3Jkc1tpXT1lLmRlZmluZWRLZXl3b3Jkc1tpXS5zbGljZSgwKX07aC5wcm90b3R5cGUuZGVmaW5lS2V5d29yZD1mdW5jdGlvbihlLHQpe3RoaXMuZGVmaW5lZEtleXdvcmRzW2VdPXRoaXMuZGVmaW5lZEtleXdvcmRzW2VdfHxbXSx0aGlzLmRlZmluZWRLZXl3b3Jkc1tlXS5wdXNoKHQpfSxoLnByb3RvdHlwZS5jcmVhdGVFcnJvcj1mdW5jdGlvbihlLHQscixuLG8saSxhKXt2YXIgcz1uZXcgYyhlLHQscixuLG8pO3JldHVybiBzLm1lc3NhZ2U9dGhpcy5lcnJvclJlcG9ydGVyKHMsaSxhKSxzfSxoLnByb3RvdHlwZS5yZXR1cm5FcnJvcj1mdW5jdGlvbihlKXtyZXR1cm4gZX0saC5wcm90b3R5cGUuY29sbGVjdEVycm9yPWZ1bmN0aW9uKGUpe3JldHVybiBlJiZ0aGlzLmVycm9ycy5wdXNoKGUpLG51bGx9LGgucHJvdG90eXBlLnByZWZpeEVycm9ycz1mdW5jdGlvbihlLHQscil7Zm9yKHZhciBuPWU7bjx0aGlzLmVycm9ycy5sZW5ndGg7bisrKXRoaXMuZXJyb3JzW25dPXRoaXMuZXJyb3JzW25dLnByZWZpeFdpdGgodCxyKTtyZXR1cm4gdGhpc30saC5wcm90b3R5cGUuYmFuVW5rbm93blByb3BlcnRpZXM9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdGhpcy51bmtub3duUHJvcGVydHlQYXRocyl7dmFyIG49dGhpcy5jcmVhdGVFcnJvcih2LlVOS05PV05fUFJPUEVSVFkse3BhdGg6cn0scixcIlwiLG51bGwsZSx0KSxvPXRoaXMuaGFuZGxlRXJyb3Iobik7aWYobylyZXR1cm4gb31yZXR1cm4gbnVsbH0saC5wcm90b3R5cGUuYWRkRm9ybWF0PWZ1bmN0aW9uKGUsdCl7aWYoXCJvYmplY3RcIj09dHlwZW9mIGUpe2Zvcih2YXIgciBpbiBlKXRoaXMuYWRkRm9ybWF0KHIsZVtyXSk7cmV0dXJuIHRoaXN9dGhpcy5mb3JtYXRWYWxpZGF0b3JzW2VdPXR9LGgucHJvdG90eXBlLnJlc29sdmVSZWZzPWZ1bmN0aW9uKGUsdCl7aWYodm9pZCAwIT09ZS4kcmVmKXtpZih0PXR8fHt9LHRbZS4kcmVmXSlyZXR1cm4gdGhpcy5jcmVhdGVFcnJvcih2LkNJUkNVTEFSX1JFRkVSRU5DRSx7dXJsczpPYmplY3Qua2V5cyh0KS5qb2luKFwiLCBcIil9LFwiXCIsXCJcIixudWxsLHZvaWQgMCxlKTt0W2UuJHJlZl09ITAsZT10aGlzLmdldFNjaGVtYShlLiRyZWYsdCl9cmV0dXJuIGV9LGgucHJvdG90eXBlLmdldFNjaGVtYT1mdW5jdGlvbihlLHQpe3ZhciByO2lmKHZvaWQgMCE9PXRoaXMuc2NoZW1hc1tlXSlyZXR1cm4gcj10aGlzLnNjaGVtYXNbZV0sdGhpcy5yZXNvbHZlUmVmcyhyLHQpO3ZhciBuPWUsbz1cIlwiO2lmKGUuaW5kZXhPZihcIiNcIikhPT0tMSYmKG89ZS5zdWJzdHJpbmcoZS5pbmRleE9mKFwiI1wiKSsxKSxuPWUuc3Vic3RyaW5nKDAsZS5pbmRleE9mKFwiI1wiKSkpLFwib2JqZWN0XCI9PXR5cGVvZiB0aGlzLnNjaGVtYXNbbl0pe3I9dGhpcy5zY2hlbWFzW25dO3ZhciBpPWRlY29kZVVSSUNvbXBvbmVudChvKTtpZihcIlwiPT09aSlyZXR1cm4gdGhpcy5yZXNvbHZlUmVmcyhyLHQpO2lmKFwiL1wiIT09aS5jaGFyQXQoMCkpcmV0dXJuO2Zvcih2YXIgYT1pLnNwbGl0KFwiL1wiKS5zbGljZSgxKSxzPTA7czxhLmxlbmd0aDtzKyspe3ZhciB1PWFbc10ucmVwbGFjZSgvfjEvZyxcIi9cIikucmVwbGFjZSgvfjAvZyxcIn5cIik7aWYodm9pZCAwPT09clt1XSl7cj12b2lkIDA7YnJlYWt9cj1yW3VdfWlmKHZvaWQgMCE9PXIpcmV0dXJuIHRoaXMucmVzb2x2ZVJlZnMocix0KX12b2lkIDA9PT10aGlzLm1pc3Npbmdbbl0mJih0aGlzLm1pc3NpbmcucHVzaChuKSx0aGlzLm1pc3Npbmdbbl09bix0aGlzLm1pc3NpbmdNYXBbbl09bil9LGgucHJvdG90eXBlLnNlYXJjaFNjaGVtYXM9ZnVuY3Rpb24oZSx0KXtpZihBcnJheS5pc0FycmF5KGUpKWZvcih2YXIgcj0wO3I8ZS5sZW5ndGg7cisrKXRoaXMuc2VhcmNoU2NoZW1hcyhlW3JdLHQpO2Vsc2UgaWYoZSYmXCJvYmplY3RcIj09dHlwZW9mIGUpe1wic3RyaW5nXCI9PXR5cGVvZiBlLmlkJiZsKHQsZS5pZCkmJnZvaWQgMD09PXRoaXMuc2NoZW1hc1tlLmlkXSYmKHRoaXMuc2NoZW1hc1tlLmlkXT1lKTtmb3IodmFyIG4gaW4gZSlpZihcImVudW1cIiE9PW4paWYoXCJvYmplY3RcIj09dHlwZW9mIGVbbl0pdGhpcy5zZWFyY2hTY2hlbWFzKGVbbl0sdCk7ZWxzZSBpZihcIiRyZWZcIj09PW4pe3ZhciBvPWEoZVtuXSk7byYmdm9pZCAwPT09dGhpcy5zY2hlbWFzW29dJiZ2b2lkIDA9PT10aGlzLm1pc3NpbmdNYXBbb10mJih0aGlzLm1pc3NpbmdNYXBbb109byl9fX0saC5wcm90b3R5cGUuYWRkU2NoZW1hPWZ1bmN0aW9uKGUsdCl7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGV8fFwidW5kZWZpbmVkXCI9PXR5cGVvZiB0KXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8XCJzdHJpbmdcIiE9dHlwZW9mIGUuaWQpcmV0dXJuO3Q9ZSxlPXQuaWR9ZT09PWEoZSkrXCIjXCImJihlPWEoZSkpLHRoaXMuc2NoZW1hc1tlXT10LGRlbGV0ZSB0aGlzLm1pc3NpbmdNYXBbZV0scyh0LGUpLHRoaXMuc2VhcmNoU2NoZW1hcyh0LGUpfSxoLnByb3RvdHlwZS5nZXRTY2hlbWFNYXA9ZnVuY3Rpb24oKXt2YXIgZT17fTtmb3IodmFyIHQgaW4gdGhpcy5zY2hlbWFzKWVbdF09dGhpcy5zY2hlbWFzW3RdO3JldHVybiBlfSxoLnByb3RvdHlwZS5nZXRTY2hlbWFVcmlzPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO2Zvcih2YXIgciBpbiB0aGlzLnNjaGVtYXMpZSYmIWUudGVzdChyKXx8dC5wdXNoKHIpO3JldHVybiB0fSxoLnByb3RvdHlwZS5nZXRNaXNzaW5nVXJpcz1mdW5jdGlvbihlKXt2YXIgdD1bXTtmb3IodmFyIHIgaW4gdGhpcy5taXNzaW5nTWFwKWUmJiFlLnRlc3Qocil8fHQucHVzaChyKTtyZXR1cm4gdH0saC5wcm90b3R5cGUuZHJvcFNjaGVtYXM9ZnVuY3Rpb24oKXt0aGlzLnNjaGVtYXM9e30sdGhpcy5yZXNldCgpfSxoLnByb3RvdHlwZS5yZXNldD1mdW5jdGlvbigpe3RoaXMubWlzc2luZz1bXSx0aGlzLm1pc3NpbmdNYXA9e30sdGhpcy5lcnJvcnM9W119LGgucHJvdG90eXBlLnZhbGlkYXRlQWxsPWZ1bmN0aW9uKGUsdCxyLG4sbyl7dmFyIGk7aWYodD10aGlzLnJlc29sdmVSZWZzKHQpLCF0KXJldHVybiBudWxsO2lmKHQgaW5zdGFuY2VvZiBjKXJldHVybiB0aGlzLmVycm9ycy5wdXNoKHQpLHQ7dmFyIGEscz10aGlzLmVycm9ycy5sZW5ndGgsdT1udWxsLGw9bnVsbDtpZih0aGlzLmNoZWNrUmVjdXJzaXZlJiZlJiZcIm9iamVjdFwiPT10eXBlb2YgZSl7aWYoaT0hdGhpcy5zY2FubmVkLmxlbmd0aCxlW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV0pe3ZhciBmPWVbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XS5pbmRleE9mKHQpO2lmKGYhPT0tMSlyZXR1cm4gdGhpcy5lcnJvcnM9dGhpcy5lcnJvcnMuY29uY2F0KGVbdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5XVtmXSksbnVsbH1pZihPYmplY3QuaXNGcm96ZW4oZSkmJihhPXRoaXMuc2Nhbm5lZEZyb3plbi5pbmRleE9mKGUpLGEhPT0tMSkpe3ZhciBkPXRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXNbYV0uaW5kZXhPZih0KTtpZihkIT09LTEpcmV0dXJuIHRoaXMuZXJyb3JzPXRoaXMuZXJyb3JzLmNvbmNhdCh0aGlzLnNjYW5uZWRGcm96ZW5WYWxpZGF0aW9uRXJyb3JzW2FdW2RdKSxudWxsfWlmKHRoaXMuc2Nhbm5lZC5wdXNoKGUpLE9iamVjdC5pc0Zyb3plbihlKSlhPT09LTEmJihhPXRoaXMuc2Nhbm5lZEZyb3plbi5sZW5ndGgsdGhpcy5zY2FubmVkRnJvemVuLnB1c2goZSksdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hcy5wdXNoKFtdKSksdT10aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzW2FdLmxlbmd0aCx0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzW2FdW3VdPXQsdGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9yc1thXVt1XT1bXTtlbHNle2lmKCFlW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV0pdHJ5e09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHRoaXMudmFsaWRhdGVkU2NoZW1hc0tleSx7dmFsdWU6W10sY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5LHt2YWx1ZTpbXSxjb25maWd1cmFibGU6ITB9KX1jYXRjaChwKXtlW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV09W10sZVt0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXldPVtdfWw9ZVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldLmxlbmd0aCxlW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV1bbF09dCxlW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV1bbF09W119fXZhciBoPXRoaXMuZXJyb3JzLmxlbmd0aCx5PXRoaXMudmFsaWRhdGVCYXNpYyhlLHQsbyl8fHRoaXMudmFsaWRhdGVOdW1lcmljKGUsdCxvKXx8dGhpcy52YWxpZGF0ZVN0cmluZyhlLHQsbyl8fHRoaXMudmFsaWRhdGVBcnJheShlLHQsbyl8fHRoaXMudmFsaWRhdGVPYmplY3QoZSx0LG8pfHx0aGlzLnZhbGlkYXRlQ29tYmluYXRpb25zKGUsdCxvKXx8dGhpcy52YWxpZGF0ZUh5cGVybWVkaWEoZSx0LG8pfHx0aGlzLnZhbGlkYXRlRm9ybWF0KGUsdCxvKXx8dGhpcy52YWxpZGF0ZURlZmluZWRLZXl3b3JkcyhlLHQsbyl8fG51bGw7aWYoaSl7Zm9yKDt0aGlzLnNjYW5uZWQubGVuZ3RoOyl7dmFyIG09dGhpcy5zY2FubmVkLnBvcCgpO2RlbGV0ZSBtW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV19dGhpcy5zY2FubmVkRnJvemVuPVtdLHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXM9W119aWYoeXx8aCE9PXRoaXMuZXJyb3JzLmxlbmd0aClmb3IoO3ImJnIubGVuZ3RofHxuJiZuLmxlbmd0aDspe3ZhciB2PXImJnIubGVuZ3RoP1wiXCIrci5wb3AoKTpudWxsLF89biYmbi5sZW5ndGg/XCJcIituLnBvcCgpOm51bGw7eSYmKHk9eS5wcmVmaXhXaXRoKHYsXykpLHRoaXMucHJlZml4RXJyb3JzKGgsdixfKX1yZXR1cm4gbnVsbCE9PXU/dGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9yc1thXVt1XT10aGlzLmVycm9ycy5zbGljZShzKTpudWxsIT09bCYmKGVbdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5XVtsXT10aGlzLmVycm9ycy5zbGljZShzKSksdGhpcy5oYW5kbGVFcnJvcih5KX0saC5wcm90b3R5cGUudmFsaWRhdGVGb3JtYXQ9ZnVuY3Rpb24oZSx0KXtpZihcInN0cmluZ1wiIT10eXBlb2YgdC5mb3JtYXR8fCF0aGlzLmZvcm1hdFZhbGlkYXRvcnNbdC5mb3JtYXRdKXJldHVybiBudWxsO3ZhciByPXRoaXMuZm9ybWF0VmFsaWRhdG9yc1t0LmZvcm1hdF0uY2FsbChudWxsLGUsdCk7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHJ8fFwibnVtYmVyXCI9PXR5cGVvZiByP3RoaXMuY3JlYXRlRXJyb3Iodi5GT1JNQVRfQ1VTVE9NLHttZXNzYWdlOnJ9LFwiXCIsXCIvZm9ybWF0XCIsbnVsbCxlLHQpOnImJlwib2JqZWN0XCI9PXR5cGVvZiByP3RoaXMuY3JlYXRlRXJyb3Iodi5GT1JNQVRfQ1VTVE9NLHttZXNzYWdlOnIubWVzc2FnZXx8XCI/XCJ9LHIuZGF0YVBhdGh8fFwiXCIsci5zY2hlbWFQYXRofHxcIi9mb3JtYXRcIixudWxsLGUsdCk6bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVEZWZpbmVkS2V5d29yZHM9ZnVuY3Rpb24oZSx0LHIpe2Zvcih2YXIgbiBpbiB0aGlzLmRlZmluZWRLZXl3b3JkcylpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgdFtuXSlmb3IodmFyIG89dGhpcy5kZWZpbmVkS2V5d29yZHNbbl0saT0wO2k8by5sZW5ndGg7aSsrKXt2YXIgYT1vW2ldLHM9YShlLHRbbl0sdCxyKTtpZihcInN0cmluZ1wiPT10eXBlb2Ygc3x8XCJudW1iZXJcIj09dHlwZW9mIHMpcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Iodi5LRVlXT1JEX0NVU1RPTSx7a2V5Om4sbWVzc2FnZTpzfSxcIlwiLFwiXCIsbnVsbCxlLHQpLnByZWZpeFdpdGgobnVsbCxuKTtpZihzJiZcIm9iamVjdFwiPT10eXBlb2Ygcyl7dmFyIHU9cy5jb2RlO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB1KXtpZighdlt1XSl0aHJvdyBuZXcgRXJyb3IoXCJVbmRlZmluZWQgZXJyb3IgY29kZSAodXNlIGRlZmluZUVycm9yKTogXCIrdSk7dT12W3VdfWVsc2VcIm51bWJlclwiIT10eXBlb2YgdSYmKHU9di5LRVlXT1JEX0NVU1RPTSk7dmFyIGM9XCJvYmplY3RcIj09dHlwZW9mIHMubWVzc2FnZT9zLm1lc3NhZ2U6e2tleTpuLG1lc3NhZ2U6cy5tZXNzYWdlfHxcIj9cIn0sbD1zLnNjaGVtYVBhdGh8fFwiL1wiK24ucmVwbGFjZSgvfi9nLFwifjBcIikucmVwbGFjZSgvXFwvL2csXCJ+MVwiKTtyZXR1cm4gdGhpcy5jcmVhdGVFcnJvcih1LGMscy5kYXRhUGF0aHx8bnVsbCxsLG51bGwsZSx0KX19cmV0dXJuIG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlQmFzaWM9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuO3JldHVybihuPXRoaXMudmFsaWRhdGVUeXBlKGUsdCxyKSk/bi5wcmVmaXhXaXRoKG51bGwsXCJ0eXBlXCIpOihuPXRoaXMudmFsaWRhdGVFbnVtKGUsdCxyKSk/bi5wcmVmaXhXaXRoKG51bGwsXCJ0eXBlXCIpOm51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlVHlwZT1mdW5jdGlvbihlLHQpe2lmKHZvaWQgMD09PXQudHlwZSlyZXR1cm4gbnVsbDt2YXIgcj10eXBlb2YgZTtudWxsPT09ZT9yPVwibnVsbFwiOkFycmF5LmlzQXJyYXkoZSkmJihyPVwiYXJyYXlcIik7dmFyIG49dC50eXBlO0FycmF5LmlzQXJyYXkobil8fChuPVtuXSk7Zm9yKHZhciBvPTA7bzxuLmxlbmd0aDtvKyspe3ZhciBpPW5bb107aWYoaT09PXJ8fFwiaW50ZWdlclwiPT09aSYmXCJudW1iZXJcIj09PXImJmUlMT09PTApcmV0dXJuIG51bGx9cmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Iodi5JTlZBTElEX1RZUEUse3R5cGU6cixleHBlY3RlZDpuLmpvaW4oXCIvXCIpfSxcIlwiLFwiXCIsbnVsbCxlLHQpfSxoLnByb3RvdHlwZS52YWxpZGF0ZUVudW09ZnVuY3Rpb24oZSx0KXtpZih2b2lkIDA9PT10W1wiZW51bVwiXSlyZXR1cm4gbnVsbDtmb3IodmFyIHI9MDtyPHRbXCJlbnVtXCJdLmxlbmd0aDtyKyspe3ZhciBvPXRbXCJlbnVtXCJdW3JdO2lmKG4oZSxvKSlyZXR1cm4gbnVsbH1yZXR1cm4gdGhpcy5jcmVhdGVFcnJvcih2LkVOVU1fTUlTTUFUQ0gse3ZhbHVlOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBKU09OP0pTT04uc3RyaW5naWZ5KGUpOmV9LFwiXCIsXCJcIixudWxsLGUsdCl9LGgucHJvdG90eXBlLnZhbGlkYXRlTnVtZXJpYz1mdW5jdGlvbihlLHQscil7cmV0dXJuIHRoaXMudmFsaWRhdGVNdWx0aXBsZU9mKGUsdCxyKXx8dGhpcy52YWxpZGF0ZU1pbk1heChlLHQscil8fHRoaXMudmFsaWRhdGVOYU4oZSx0LHIpfHxudWxsfTt2YXIgeT1NYXRoLnBvdygyLC01MSksbT0xLXk7aC5wcm90b3R5cGUudmFsaWRhdGVNdWx0aXBsZU9mPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dC5tdWx0aXBsZU9mfHx0LmRpdmlzaWJsZUJ5O2lmKHZvaWQgMD09PXIpcmV0dXJuIG51bGw7aWYoXCJudW1iZXJcIj09dHlwZW9mIGUpe3ZhciBuPWUvciUxO2lmKG4+PXkmJm48bSlyZXR1cm4gdGhpcy5jcmVhdGVFcnJvcih2Lk5VTUJFUl9NVUxUSVBMRV9PRix7dmFsdWU6ZSxtdWx0aXBsZU9mOnJ9LFwiXCIsXCJcIixudWxsLGUsdCl9cmV0dXJuIG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlTWluTWF4PWZ1bmN0aW9uKGUsdCl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGUpcmV0dXJuIG51bGw7aWYodm9pZCAwIT09dC5taW5pbXVtKXtpZihlPHQubWluaW11bSlyZXR1cm4gdGhpcy5jcmVhdGVFcnJvcih2Lk5VTUJFUl9NSU5JTVVNLHt2YWx1ZTplLG1pbmltdW06dC5taW5pbXVtfSxcIlwiLFwiL21pbmltdW1cIixudWxsLGUsdCk7aWYodC5leGNsdXNpdmVNaW5pbXVtJiZlPT09dC5taW5pbXVtKXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHYuTlVNQkVSX01JTklNVU1fRVhDTFVTSVZFLHt2YWx1ZTplLG1pbmltdW06dC5taW5pbXVtfSxcIlwiLFwiL2V4Y2x1c2l2ZU1pbmltdW1cIixudWxsLGUsdCl9aWYodm9pZCAwIT09dC5tYXhpbXVtKXtpZihlPnQubWF4aW11bSlyZXR1cm4gdGhpcy5jcmVhdGVFcnJvcih2Lk5VTUJFUl9NQVhJTVVNLHt2YWx1ZTplLG1heGltdW06dC5tYXhpbXVtfSxcIlwiLFwiL21heGltdW1cIixudWxsLGUsdCk7aWYodC5leGNsdXNpdmVNYXhpbXVtJiZlPT09dC5tYXhpbXVtKXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHYuTlVNQkVSX01BWElNVU1fRVhDTFVTSVZFLHt2YWx1ZTplLG1heGltdW06dC5tYXhpbXVtfSxcIlwiLFwiL2V4Y2x1c2l2ZU1heGltdW1cIixudWxsLGUsdCl9cmV0dXJuIG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlTmFOPWZ1bmN0aW9uKGUsdCl7cmV0dXJuXCJudW1iZXJcIiE9dHlwZW9mIGU/bnVsbDppc05hTihlKT09PSEwfHxlPT09MS8wfHxlPT09LSgxLzApP3RoaXMuY3JlYXRlRXJyb3Iodi5OVU1CRVJfTk9UX0FfTlVNQkVSLHt2YWx1ZTplfSxcIlwiLFwiL3R5cGVcIixudWxsLGUsdCk6bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVTdHJpbmc9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0aGlzLnZhbGlkYXRlU3RyaW5nTGVuZ3RoKGUsdCxyKXx8dGhpcy52YWxpZGF0ZVN0cmluZ1BhdHRlcm4oZSx0LHIpfHxudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZVN0cmluZ0xlbmd0aD1mdW5jdGlvbihlLHQpe3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiBlP251bGw6dm9pZCAwIT09dC5taW5MZW5ndGgmJmUubGVuZ3RoPHQubWluTGVuZ3RoP3RoaXMuY3JlYXRlRXJyb3Iodi5TVFJJTkdfTEVOR1RIX1NIT1JULHtsZW5ndGg6ZS5sZW5ndGgsbWluaW11bTp0Lm1pbkxlbmd0aH0sXCJcIixcIi9taW5MZW5ndGhcIixudWxsLGUsdCk6dm9pZCAwIT09dC5tYXhMZW5ndGgmJmUubGVuZ3RoPnQubWF4TGVuZ3RoP3RoaXMuY3JlYXRlRXJyb3Iodi5TVFJJTkdfTEVOR1RIX0xPTkcse2xlbmd0aDplLmxlbmd0aCxtYXhpbXVtOnQubWF4TGVuZ3RofSxcIlwiLFwiL21heExlbmd0aFwiLG51bGwsZSx0KTpudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZVN0cmluZ1BhdHRlcm49ZnVuY3Rpb24oZSx0KXtpZihcInN0cmluZ1wiIT10eXBlb2YgZXx8XCJzdHJpbmdcIiE9dHlwZW9mIHQucGF0dGVybiYmISh0LnBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHApKXJldHVybiBudWxsO3ZhciByO2lmKHQucGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cClyPXQucGF0dGVybjtlbHNle3ZhciBuLG89XCJcIixpPXQucGF0dGVybi5tYXRjaCgvXlxcLyguKylcXC8oW2ltZ10qKSQvKTtpPyhuPWlbMV0sbz1pWzJdKTpuPXQucGF0dGVybixyPW5ldyBSZWdFeHAobixvKX1yZXR1cm4gci50ZXN0KGUpP251bGw6dGhpcy5jcmVhdGVFcnJvcih2LlNUUklOR19QQVRURVJOLHtwYXR0ZXJuOnQucGF0dGVybn0sXCJcIixcIi9wYXR0ZXJuXCIsbnVsbCxlLHQpfSxoLnByb3RvdHlwZS52YWxpZGF0ZUFycmF5PWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gQXJyYXkuaXNBcnJheShlKT90aGlzLnZhbGlkYXRlQXJyYXlMZW5ndGgoZSx0LHIpfHx0aGlzLnZhbGlkYXRlQXJyYXlVbmlxdWVJdGVtcyhlLHQscil8fHRoaXMudmFsaWRhdGVBcnJheUl0ZW1zKGUsdCxyKXx8bnVsbDpudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZUFycmF5TGVuZ3RoPWZ1bmN0aW9uKGUsdCl7dmFyIHI7cmV0dXJuIHZvaWQgMCE9PXQubWluSXRlbXMmJmUubGVuZ3RoPHQubWluSXRlbXMmJihyPXRoaXMuY3JlYXRlRXJyb3Iodi5BUlJBWV9MRU5HVEhfU0hPUlQse2xlbmd0aDplLmxlbmd0aCxtaW5pbXVtOnQubWluSXRlbXN9LFwiXCIsXCIvbWluSXRlbXNcIixudWxsLGUsdCksdGhpcy5oYW5kbGVFcnJvcihyKSk/cjp2b2lkIDAhPT10Lm1heEl0ZW1zJiZlLmxlbmd0aD50Lm1heEl0ZW1zJiYocj10aGlzLmNyZWF0ZUVycm9yKHYuQVJSQVlfTEVOR1RIX0xPTkcse2xlbmd0aDplLmxlbmd0aCxtYXhpbXVtOnQubWF4SXRlbXN9LFwiXCIsXCIvbWF4SXRlbXNcIixudWxsLGUsdCksdGhpcy5oYW5kbGVFcnJvcihyKSk/cjpudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZUFycmF5VW5pcXVlSXRlbXM9ZnVuY3Rpb24oZSx0KXtpZih0LnVuaXF1ZUl0ZW1zKWZvcih2YXIgcj0wO3I8ZS5sZW5ndGg7cisrKWZvcih2YXIgbz1yKzE7bzxlLmxlbmd0aDtvKyspaWYobihlW3JdLGVbb10pKXt2YXIgaT10aGlzLmNyZWF0ZUVycm9yKHYuQVJSQVlfVU5JUVVFLHttYXRjaDE6cixtYXRjaDI6b30sXCJcIixcIi91bmlxdWVJdGVtc1wiLG51bGwsZSx0KTtpZih0aGlzLmhhbmRsZUVycm9yKGkpKXJldHVybiBpfXJldHVybiBudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZUFycmF5SXRlbXM9ZnVuY3Rpb24oZSx0LHIpe2lmKHZvaWQgMD09PXQuaXRlbXMpcmV0dXJuIG51bGw7dmFyIG4sbztpZihBcnJheS5pc0FycmF5KHQuaXRlbXMpKXtmb3Iobz0wO288ZS5sZW5ndGg7bysrKWlmKG88dC5pdGVtcy5sZW5ndGgpe2lmKG49dGhpcy52YWxpZGF0ZUFsbChlW29dLHQuaXRlbXNbb10sW29dLFtcIml0ZW1zXCIsb10scitcIi9cIitvKSlyZXR1cm4gbn1lbHNlIGlmKHZvaWQgMCE9PXQuYWRkaXRpb25hbEl0ZW1zKWlmKFwiYm9vbGVhblwiPT10eXBlb2YgdC5hZGRpdGlvbmFsSXRlbXMpe2lmKCF0LmFkZGl0aW9uYWxJdGVtcyYmKG49dGhpcy5jcmVhdGVFcnJvcih2LkFSUkFZX0FERElUSU9OQUxfSVRFTVMse30sXCIvXCIrbyxcIi9hZGRpdGlvbmFsSXRlbXNcIixudWxsLGUsdCksdGhpcy5oYW5kbGVFcnJvcihuKSkpcmV0dXJuIG59ZWxzZSBpZihuPXRoaXMudmFsaWRhdGVBbGwoZVtvXSx0LmFkZGl0aW9uYWxJdGVtcyxbb10sW1wiYWRkaXRpb25hbEl0ZW1zXCJdLHIrXCIvXCIrbykpcmV0dXJuIG59ZWxzZSBmb3Iobz0wO288ZS5sZW5ndGg7bysrKWlmKG49dGhpcy52YWxpZGF0ZUFsbChlW29dLHQuaXRlbXMsW29dLFtcIml0ZW1zXCJdLHIrXCIvXCIrbykpcmV0dXJuIG47cmV0dXJuIG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0PWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm5cIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWV8fEFycmF5LmlzQXJyYXkoZSk/bnVsbDp0aGlzLnZhbGlkYXRlT2JqZWN0TWluTWF4UHJvcGVydGllcyhlLHQscil8fHRoaXMudmFsaWRhdGVPYmplY3RSZXF1aXJlZFByb3BlcnRpZXMoZSx0LHIpfHx0aGlzLnZhbGlkYXRlT2JqZWN0UHJvcGVydGllcyhlLHQscil8fHRoaXMudmFsaWRhdGVPYmplY3REZXBlbmRlbmNpZXMoZSx0LHIpfHxudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdE1pbk1heFByb3BlcnRpZXM9ZnVuY3Rpb24oZSx0KXt2YXIgcixuPU9iamVjdC5rZXlzKGUpO3JldHVybiB2b2lkIDAhPT10Lm1pblByb3BlcnRpZXMmJm4ubGVuZ3RoPHQubWluUHJvcGVydGllcyYmKHI9dGhpcy5jcmVhdGVFcnJvcih2Lk9CSkVDVF9QUk9QRVJUSUVTX01JTklNVU0se3Byb3BlcnR5Q291bnQ6bi5sZW5ndGgsbWluaW11bTp0Lm1pblByb3BlcnRpZXN9LFwiXCIsXCIvbWluUHJvcGVydGllc1wiLG51bGwsZSx0KSx0aGlzLmhhbmRsZUVycm9yKHIpKT9yOnZvaWQgMCE9PXQubWF4UHJvcGVydGllcyYmbi5sZW5ndGg+dC5tYXhQcm9wZXJ0aWVzJiYocj10aGlzLmNyZWF0ZUVycm9yKHYuT0JKRUNUX1BST1BFUlRJRVNfTUFYSU1VTSx7cHJvcGVydHlDb3VudDpuLmxlbmd0aCxtYXhpbXVtOnQubWF4UHJvcGVydGllc30sXCJcIixcIi9tYXhQcm9wZXJ0aWVzXCIsbnVsbCxlLHQpLHRoaXMuaGFuZGxlRXJyb3IocikpP3I6bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVPYmplY3RSZXF1aXJlZFByb3BlcnRpZXM9ZnVuY3Rpb24oZSx0KXtpZih2b2lkIDAhPT10LnJlcXVpcmVkKWZvcih2YXIgcj0wO3I8dC5yZXF1aXJlZC5sZW5ndGg7cisrKXt2YXIgbj10LnJlcXVpcmVkW3JdO2lmKHZvaWQgMD09PWVbbl0pe3ZhciBvPXRoaXMuY3JlYXRlRXJyb3Iodi5PQkpFQ1RfUkVRVUlSRUQse2tleTpufSxcIlwiLFwiL3JlcXVpcmVkL1wiK3IsbnVsbCxlLHQpO2lmKHRoaXMuaGFuZGxlRXJyb3IobykpcmV0dXJuIG99fXJldHVybiBudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdFByb3BlcnRpZXM9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuO2Zvcih2YXIgbyBpbiBlKXt2YXIgaT1yK1wiL1wiK28ucmVwbGFjZSgvfi9nLFwifjBcIikucmVwbGFjZSgvXFwvL2csXCJ+MVwiKSxhPSExO2lmKHZvaWQgMCE9PXQucHJvcGVydGllcyYmdm9pZCAwIT09dC5wcm9wZXJ0aWVzW29dJiYoYT0hMCxuPXRoaXMudmFsaWRhdGVBbGwoZVtvXSx0LnByb3BlcnRpZXNbb10sW29dLFtcInByb3BlcnRpZXNcIixvXSxpKSkpcmV0dXJuIG47aWYodm9pZCAwIT09dC5wYXR0ZXJuUHJvcGVydGllcylmb3IodmFyIHMgaW4gdC5wYXR0ZXJuUHJvcGVydGllcyl7dmFyIHU9bmV3IFJlZ0V4cChzKTtpZih1LnRlc3QobykmJihhPSEwLG49dGhpcy52YWxpZGF0ZUFsbChlW29dLHQucGF0dGVyblByb3BlcnRpZXNbc10sW29dLFtcInBhdHRlcm5Qcm9wZXJ0aWVzXCIsc10saSkpKXJldHVybiBufWlmKGEpdGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYodGhpcy5rbm93blByb3BlcnR5UGF0aHNbaV09ITAsZGVsZXRlIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHNbaV0pO2Vsc2UgaWYodm9pZCAwIT09dC5hZGRpdGlvbmFsUHJvcGVydGllcyl7aWYodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYodGhpcy5rbm93blByb3BlcnR5UGF0aHNbaV09ITAsZGVsZXRlIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHNbaV0pLFwiYm9vbGVhblwiPT10eXBlb2YgdC5hZGRpdGlvbmFsUHJvcGVydGllcyl7aWYoIXQuYWRkaXRpb25hbFByb3BlcnRpZXMmJihuPXRoaXMuY3JlYXRlRXJyb3Iodi5PQkpFQ1RfQURESVRJT05BTF9QUk9QRVJUSUVTLHtrZXk6b30sXCJcIixcIi9hZGRpdGlvbmFsUHJvcGVydGllc1wiLG51bGwsZSx0KS5wcmVmaXhXaXRoKG8sbnVsbCksdGhpcy5oYW5kbGVFcnJvcihuKSkpcmV0dXJuIG59ZWxzZSBpZihuPXRoaXMudmFsaWRhdGVBbGwoZVtvXSx0LmFkZGl0aW9uYWxQcm9wZXJ0aWVzLFtvXSxbXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiXSxpKSlyZXR1cm4gbn1lbHNlIHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmIXRoaXMua25vd25Qcm9wZXJ0eVBhdGhzW2ldJiYodGhpcy51bmtub3duUHJvcGVydHlQYXRoc1tpXT0hMCl9cmV0dXJuIG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0RGVwZW5kZW5jaWVzPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbjtpZih2b2lkIDAhPT10LmRlcGVuZGVuY2llcylmb3IodmFyIG8gaW4gdC5kZXBlbmRlbmNpZXMpaWYodm9pZCAwIT09ZVtvXSl7dmFyIGk9dC5kZXBlbmRlbmNpZXNbb107aWYoXCJzdHJpbmdcIj09dHlwZW9mIGkpe2lmKHZvaWQgMD09PWVbaV0mJihuPXRoaXMuY3JlYXRlRXJyb3Iodi5PQkpFQ1RfREVQRU5ERU5DWV9LRVkse2tleTpvLG1pc3Npbmc6aX0sXCJcIixcIlwiLG51bGwsZSx0KS5wcmVmaXhXaXRoKG51bGwsbykucHJlZml4V2l0aChudWxsLFwiZGVwZW5kZW5jaWVzXCIpLHRoaXMuaGFuZGxlRXJyb3IobikpKXJldHVybiBufWVsc2UgaWYoQXJyYXkuaXNBcnJheShpKSlmb3IodmFyIGE9MDthPGkubGVuZ3RoO2ErKyl7dmFyIHM9aVthXTtpZih2b2lkIDA9PT1lW3NdJiYobj10aGlzLmNyZWF0ZUVycm9yKHYuT0JKRUNUX0RFUEVOREVOQ1lfS0VZLHtrZXk6byxtaXNzaW5nOnN9LFwiXCIsXCIvXCIrYSxudWxsLGUsdCkucHJlZml4V2l0aChudWxsLG8pLnByZWZpeFdpdGgobnVsbCxcImRlcGVuZGVuY2llc1wiKSx0aGlzLmhhbmRsZUVycm9yKG4pKSlyZXR1cm4gbn1lbHNlIGlmKG49dGhpcy52YWxpZGF0ZUFsbChlLGksW10sW1wiZGVwZW5kZW5jaWVzXCIsb10scikpcmV0dXJuIG59cmV0dXJuIG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlQ29tYmluYXRpb25zPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdGhpcy52YWxpZGF0ZUFsbE9mKGUsdCxyKXx8dGhpcy52YWxpZGF0ZUFueU9mKGUsdCxyKXx8dGhpcy52YWxpZGF0ZU9uZU9mKGUsdCxyKXx8dGhpcy52YWxpZGF0ZU5vdChlLHQscil8fG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlQWxsT2Y9ZnVuY3Rpb24oZSx0LHIpe2lmKHZvaWQgMD09PXQuYWxsT2YpcmV0dXJuIG51bGw7Zm9yKHZhciBuLG89MDtvPHQuYWxsT2YubGVuZ3RoO28rKyl7dmFyIGk9dC5hbGxPZltvXTtpZihuPXRoaXMudmFsaWRhdGVBbGwoZSxpLFtdLFtcImFsbE9mXCIsb10scikpcmV0dXJuIG59cmV0dXJuIG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlQW55T2Y9ZnVuY3Rpb24oZSx0LHIpe2lmKHZvaWQgMD09PXQuYW55T2YpcmV0dXJuIG51bGw7dmFyIG4sbyxpPVtdLGE9dGhpcy5lcnJvcnMubGVuZ3RoO3RoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmKG49dGhpcy51bmtub3duUHJvcGVydHlQYXRocyxvPXRoaXMua25vd25Qcm9wZXJ0eVBhdGhzKTtmb3IodmFyIHM9ITAsdT0wO3U8dC5hbnlPZi5sZW5ndGg7dSsrKXt0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJih0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzPXt9LHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzPXt9KTt2YXIgYz10LmFueU9mW3VdLGw9dGhpcy5lcnJvcnMubGVuZ3RoLGY9dGhpcy52YWxpZGF0ZUFsbChlLGMsW10sW1wiYW55T2ZcIix1XSxyKTtpZihudWxsPT09ZiYmbD09PXRoaXMuZXJyb3JzLmxlbmd0aCl7aWYodGhpcy5lcnJvcnM9dGhpcy5lcnJvcnMuc2xpY2UoMCxhKSx0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpe2Zvcih2YXIgZCBpbiB0aGlzLmtub3duUHJvcGVydHlQYXRocylvW2RdPSEwLGRlbGV0ZSBuW2RdO2Zvcih2YXIgcCBpbiB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzKW9bcF18fChuW3BdPSEwKTtzPSExO2NvbnRpbnVlfXJldHVybiBudWxsfWYmJmkucHVzaChmLnByZWZpeFdpdGgobnVsbCxcIlwiK3UpLnByZWZpeFdpdGgobnVsbCxcImFueU9mXCIpKX1yZXR1cm4gdGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYodGhpcy51bmtub3duUHJvcGVydHlQYXRocz1uLHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzPW8pLHM/KGk9aS5jb25jYXQodGhpcy5lcnJvcnMuc2xpY2UoYSkpLHRoaXMuZXJyb3JzPXRoaXMuZXJyb3JzLnNsaWNlKDAsYSksdGhpcy5jcmVhdGVFcnJvcih2LkFOWV9PRl9NSVNTSU5HLHt9LFwiXCIsXCIvYW55T2ZcIixpLGUsdCkpOnZvaWQgMH0saC5wcm90b3R5cGUudmFsaWRhdGVPbmVPZj1mdW5jdGlvbihlLHQscil7aWYodm9pZCAwPT09dC5vbmVPZilyZXR1cm4gbnVsbDt2YXIgbixvLGk9bnVsbCxhPVtdLHM9dGhpcy5lcnJvcnMubGVuZ3RoO3RoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmKG49dGhpcy51bmtub3duUHJvcGVydHlQYXRocyxvPXRoaXMua25vd25Qcm9wZXJ0eVBhdGhzKTtmb3IodmFyIHU9MDt1PHQub25lT2YubGVuZ3RoO3UrKyl7dGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYodGhpcy51bmtub3duUHJvcGVydHlQYXRocz17fSx0aGlzLmtub3duUHJvcGVydHlQYXRocz17fSk7dmFyIGM9dC5vbmVPZlt1XSxsPXRoaXMuZXJyb3JzLmxlbmd0aCxmPXRoaXMudmFsaWRhdGVBbGwoZSxjLFtdLFtcIm9uZU9mXCIsdV0scik7aWYobnVsbD09PWYmJmw9PT10aGlzLmVycm9ycy5sZW5ndGgpe2lmKG51bGwhPT1pKXJldHVybiB0aGlzLmVycm9ycz10aGlzLmVycm9ycy5zbGljZSgwLHMpLHRoaXMuY3JlYXRlRXJyb3Iodi5PTkVfT0ZfTVVMVElQTEUse2luZGV4MTppLGluZGV4Mjp1fSxcIlwiLFwiL29uZU9mXCIsbnVsbCxlLHQpO2lmKGk9dSx0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpe2Zvcih2YXIgZCBpbiB0aGlzLmtub3duUHJvcGVydHlQYXRocylvW2RdPSEwLGRlbGV0ZSBuW2RdO2Zvcih2YXIgcCBpbiB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzKW9bcF18fChuW3BdPSEwKX19ZWxzZSBmJiZhLnB1c2goZil9cmV0dXJuIHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmKHRoaXMudW5rbm93blByb3BlcnR5UGF0aHM9bix0aGlzLmtub3duUHJvcGVydHlQYXRocz1vKSxudWxsPT09aT8oYT1hLmNvbmNhdCh0aGlzLmVycm9ycy5zbGljZShzKSksdGhpcy5lcnJvcnM9dGhpcy5lcnJvcnMuc2xpY2UoMCxzKSx0aGlzLmNyZWF0ZUVycm9yKHYuT05FX09GX01JU1NJTkcse30sXCJcIixcIi9vbmVPZlwiLGEsZSx0KSk6KHRoaXMuZXJyb3JzPXRoaXMuZXJyb3JzLnNsaWNlKDAscyksbnVsbCl9LGgucHJvdG90eXBlLnZhbGlkYXRlTm90PWZ1bmN0aW9uKGUsdCxyKXtpZih2b2lkIDA9PT10Lm5vdClyZXR1cm4gbnVsbDt2YXIgbixvLGk9dGhpcy5lcnJvcnMubGVuZ3RoO3RoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmKG49dGhpcy51bmtub3duUHJvcGVydHlQYXRocyxvPXRoaXMua25vd25Qcm9wZXJ0eVBhdGhzLHRoaXMudW5rbm93blByb3BlcnR5UGF0aHM9e30sdGhpcy5rbm93blByb3BlcnR5UGF0aHM9e30pO3ZhciBhPXRoaXMudmFsaWRhdGVBbGwoZSx0Lm5vdCxudWxsLG51bGwscikscz10aGlzLmVycm9ycy5zbGljZShpKTtyZXR1cm4gdGhpcy5lcnJvcnM9dGhpcy5lcnJvcnMuc2xpY2UoMCxpKSx0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJih0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzPW4sdGhpcy5rbm93blByb3BlcnR5UGF0aHM9byksbnVsbD09PWEmJjA9PT1zLmxlbmd0aD90aGlzLmNyZWF0ZUVycm9yKHYuTk9UX1BBU1NFRCx7fSxcIlwiLFwiL25vdFwiLG51bGwsZSx0KTpudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZUh5cGVybWVkaWE9ZnVuY3Rpb24oZSx0LG4pe2lmKCF0LmxpbmtzKXJldHVybiBudWxsO2Zvcih2YXIgbyxpPTA7aTx0LmxpbmtzLmxlbmd0aDtpKyspe3ZhciBhPXQubGlua3NbaV07aWYoXCJkZXNjcmliZWRieVwiPT09YS5yZWwpe2Zvcih2YXIgcz1uZXcgcihhLmhyZWYpLHU9ITAsYz0wO2M8cy52YXJOYW1lcy5sZW5ndGg7YysrKWlmKCEocy52YXJOYW1lc1tjXWluIGUpKXt1PSExO2JyZWFrfWlmKHUpe3ZhciBsPXMuZmlsbEZyb21PYmplY3QoZSksZj17JHJlZjpsfTtpZihvPXRoaXMudmFsaWRhdGVBbGwoZSxmLFtdLFtcImxpbmtzXCIsaV0sbikpcmV0dXJuIG99fX19O3ZhciB2PXtJTlZBTElEX1RZUEU6MCxFTlVNX01JU01BVENIOjEsQU5ZX09GX01JU1NJTkc6MTAsT05FX09GX01JU1NJTkc6MTEsT05FX09GX01VTFRJUExFOjEyLE5PVF9QQVNTRUQ6MTMsTlVNQkVSX01VTFRJUExFX09GOjEwMCxOVU1CRVJfTUlOSU1VTToxMDEsTlVNQkVSX01JTklNVU1fRVhDTFVTSVZFOjEwMixOVU1CRVJfTUFYSU1VTToxMDMsTlVNQkVSX01BWElNVU1fRVhDTFVTSVZFOjEwNCxOVU1CRVJfTk9UX0FfTlVNQkVSOjEwNSxTVFJJTkdfTEVOR1RIX1NIT1JUOjIwMCxTVFJJTkdfTEVOR1RIX0xPTkc6MjAxLFNUUklOR19QQVRURVJOOjIwMixPQkpFQ1RfUFJPUEVSVElFU19NSU5JTVVNOjMwMCxPQkpFQ1RfUFJPUEVSVElFU19NQVhJTVVNOjMwMSxPQkpFQ1RfUkVRVUlSRUQ6MzAyLE9CSkVDVF9BRERJVElPTkFMX1BST1BFUlRJRVM6MzAzLE9CSkVDVF9ERVBFTkRFTkNZX0tFWTozMDQsQVJSQVlfTEVOR1RIX1NIT1JUOjQwMCxBUlJBWV9MRU5HVEhfTE9ORzo0MDEsQVJSQVlfVU5JUVVFOjQwMixBUlJBWV9BRERJVElPTkFMX0lURU1TOjQwMyxGT1JNQVRfQ1VTVE9NOjUwMCxLRVlXT1JEX0NVU1RPTTo1MDEsQ0lSQ1VMQVJfUkVGRVJFTkNFOjYwMCxVTktOT1dOX1BST1BFUlRZOjFlM30sXz17fTtmb3IodmFyIGIgaW4gdilfW3ZbYl1dPWI7dmFyIGc9e0lOVkFMSURfVFlQRTpcIkludmFsaWQgdHlwZToge3R5cGV9IChleHBlY3RlZCB7ZXhwZWN0ZWR9KVwiLEVOVU1fTUlTTUFUQ0g6XCJObyBlbnVtIG1hdGNoIGZvcjoge3ZhbHVlfVwiLEFOWV9PRl9NSVNTSU5HOidEYXRhIGRvZXMgbm90IG1hdGNoIGFueSBzY2hlbWFzIGZyb20gXCJhbnlPZlwiJyxPTkVfT0ZfTUlTU0lORzonRGF0YSBkb2VzIG5vdCBtYXRjaCBhbnkgc2NoZW1hcyBmcm9tIFwib25lT2ZcIicsT05FX09GX01VTFRJUExFOidEYXRhIGlzIHZhbGlkIGFnYWluc3QgbW9yZSB0aGFuIG9uZSBzY2hlbWEgZnJvbSBcIm9uZU9mXCI6IGluZGljZXMge2luZGV4MX0gYW5kIHtpbmRleDJ9JyxOT1RfUEFTU0VEOidEYXRhIG1hdGNoZXMgc2NoZW1hIGZyb20gXCJub3RcIicsTlVNQkVSX01VTFRJUExFX09GOlwiVmFsdWUge3ZhbHVlfSBpcyBub3QgYSBtdWx0aXBsZSBvZiB7bXVsdGlwbGVPZn1cIixOVU1CRVJfTUlOSU1VTTpcIlZhbHVlIHt2YWx1ZX0gaXMgbGVzcyB0aGFuIG1pbmltdW0ge21pbmltdW19XCIsTlVNQkVSX01JTklNVU1fRVhDTFVTSVZFOlwiVmFsdWUge3ZhbHVlfSBpcyBlcXVhbCB0byBleGNsdXNpdmUgbWluaW11bSB7bWluaW11bX1cIixOVU1CRVJfTUFYSU1VTTpcIlZhbHVlIHt2YWx1ZX0gaXMgZ3JlYXRlciB0aGFuIG1heGltdW0ge21heGltdW19XCIsTlVNQkVSX01BWElNVU1fRVhDTFVTSVZFOlwiVmFsdWUge3ZhbHVlfSBpcyBlcXVhbCB0byBleGNsdXNpdmUgbWF4aW11bSB7bWF4aW11bX1cIixOVU1CRVJfTk9UX0FfTlVNQkVSOlwiVmFsdWUge3ZhbHVlfSBpcyBub3QgYSB2YWxpZCBudW1iZXJcIixTVFJJTkdfTEVOR1RIX1NIT1JUOlwiU3RyaW5nIGlzIHRvbyBzaG9ydCAoe2xlbmd0aH0gY2hhcnMpLCBtaW5pbXVtIHttaW5pbXVtfVwiLFNUUklOR19MRU5HVEhfTE9ORzpcIlN0cmluZyBpcyB0b28gbG9uZyAoe2xlbmd0aH0gY2hhcnMpLCBtYXhpbXVtIHttYXhpbXVtfVwiLFNUUklOR19QQVRURVJOOlwiU3RyaW5nIGRvZXMgbm90IG1hdGNoIHBhdHRlcm46IHtwYXR0ZXJufVwiLE9CSkVDVF9QUk9QRVJUSUVTX01JTklNVU06XCJUb28gZmV3IHByb3BlcnRpZXMgZGVmaW5lZCAoe3Byb3BlcnR5Q291bnR9KSwgbWluaW11bSB7bWluaW11bX1cIixPQkpFQ1RfUFJPUEVSVElFU19NQVhJTVVNOlwiVG9vIG1hbnkgcHJvcGVydGllcyBkZWZpbmVkICh7cHJvcGVydHlDb3VudH0pLCBtYXhpbXVtIHttYXhpbXVtfVwiLE9CSkVDVF9SRVFVSVJFRDpcIk1pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHk6IHtrZXl9XCIsT0JKRUNUX0FERElUSU9OQUxfUFJPUEVSVElFUzpcIkFkZGl0aW9uYWwgcHJvcGVydGllcyBub3QgYWxsb3dlZFwiLE9CSkVDVF9ERVBFTkRFTkNZX0tFWTpcIkRlcGVuZGVuY3kgZmFpbGVkIC0ga2V5IG11c3QgZXhpc3Q6IHttaXNzaW5nfSAoZHVlIHRvIGtleToge2tleX0pXCIsQVJSQVlfTEVOR1RIX1NIT1JUOlwiQXJyYXkgaXMgdG9vIHNob3J0ICh7bGVuZ3RofSksIG1pbmltdW0ge21pbmltdW19XCIsQVJSQVlfTEVOR1RIX0xPTkc6XCJBcnJheSBpcyB0b28gbG9uZyAoe2xlbmd0aH0pLCBtYXhpbXVtIHttYXhpbXVtfVwiLEFSUkFZX1VOSVFVRTpcIkFycmF5IGl0ZW1zIGFyZSBub3QgdW5pcXVlIChpbmRpY2VzIHttYXRjaDF9IGFuZCB7bWF0Y2gyfSlcIixBUlJBWV9BRERJVElPTkFMX0lURU1TOlwiQWRkaXRpb25hbCBpdGVtcyBub3QgYWxsb3dlZFwiLEZPUk1BVF9DVVNUT006XCJGb3JtYXQgdmFsaWRhdGlvbiBmYWlsZWQgKHttZXNzYWdlfSlcIixLRVlXT1JEX0NVU1RPTTpcIktleXdvcmQgZmFpbGVkOiB7a2V5fSAoe21lc3NhZ2V9KVwiLENJUkNVTEFSX1JFRkVSRU5DRTpcIkNpcmN1bGFyICRyZWZzOiB7dXJsc31cIixVTktOT1dOX1BST1BFUlRZOlwiVW5rbm93biBwcm9wZXJ0eSAobm90IGluIHNjaGVtYSlcIn07Yy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpLGMucHJvdG90eXBlLmNvbnN0cnVjdG9yPWMsYy5wcm90b3R5cGUubmFtZT1cIlZhbGlkYXRpb25FcnJvclwiLGMucHJvdG90eXBlLnByZWZpeFdpdGg9ZnVuY3Rpb24oZSx0KXtpZihudWxsIT09ZSYmKGU9ZS5yZXBsYWNlKC9+L2csXCJ+MFwiKS5yZXBsYWNlKC9cXC8vZyxcIn4xXCIpLHRoaXMuZGF0YVBhdGg9XCIvXCIrZSt0aGlzLmRhdGFQYXRoKSxudWxsIT09dCYmKHQ9dC5yZXBsYWNlKC9+L2csXCJ+MFwiKS5yZXBsYWNlKC9cXC8vZyxcIn4xXCIpLHRoaXMuc2NoZW1hUGF0aD1cIi9cIit0K3RoaXMuc2NoZW1hUGF0aCksbnVsbCE9PXRoaXMuc3ViRXJyb3JzKWZvcih2YXIgcj0wO3I8dGhpcy5zdWJFcnJvcnMubGVuZ3RoO3IrKyl0aGlzLnN1YkVycm9yc1tyXS5wcmVmaXhXaXRoKGUsdCk7cmV0dXJuIHRoaXN9O3ZhciBFPXt9LGo9ZigpO3JldHVybiBqLmFkZExhbmd1YWdlKFwiZW4tZ2JcIixnKSxqLnR2ND1qLGp9KX0se31dLDEwMDpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntcImRlZmF1bHRcIjplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkocixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxyLk1lc3NhZ2VGYWN0b3J5PXZvaWQgMDt2YXIgbz1lKFwiLi9tZXNzYWdlLWZhY3RvcnkvTWVzc2FnZUZhY3RvcnlcIiksaT1uKG8pO3IuTWVzc2FnZUZhY3Rvcnk9aVtcImRlZmF1bHRcIl19LHtcIi4vbWVzc2FnZS1mYWN0b3J5L01lc3NhZ2VGYWN0b3J5XCI6MTAzfV0sMTAxOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e1wiZGVmYXVsdFwiOmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHIuTWVzc2FnZVR5cGU9ci5NZXNzYWdlPXZvaWQgMDt2YXIgbz1lKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mXCIpLGk9bihvKSxhPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikscz1uKGEpLHU9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSxjPW4odSksbD1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIiksZj1uKGwpLGQ9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSxwPW4oZCksaD1lKFwiLi4vcmVUSElOS09iamVjdC9SZXRoaW5rT2JqZWN0LmpzXCIpLHk9bihoKSxtPXIuTWVzc2FnZT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8sYSl7KDAsc1tcImRlZmF1bHRcIl0pKHRoaXMsdCk7dmFyIHU9KDAsZltcImRlZmF1bHRcIl0pKHRoaXMsKHQuX19wcm90b19ffHwoMCxpW1wiZGVmYXVsdFwiXSkodCkpLmNhbGwodGhpcykpO3JldHVybiB1LmlkPWUsdS5mcm9tPXIsdS50bz1uLHUudHlwZT1vLHUuYm9keT1hLHV9cmV0dXJuKDAscFtcImRlZmF1bHRcIl0pKHQsZSksKDAsY1tcImRlZmF1bHRcIl0pKHQsW3trZXk6XCJhc3NlcnRJZGVudGl0eVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7aWYoIWV8fCF0KXRocm93IG5ldyBFcnJvcihcIm1lc3NhZ2UsIHRva2VuIHRvIGJlIHJlbW92ZWQsIGFuZCBhc3NlcnRlZElkZW50aXR5IG11c3QgYmUgcHJvdmlkZWRcIik7XG52YXIgcj10aGlzLmJvZHk7cmV0dXJuIHIuaWRUb2tlbj1udWxsLHIuYXNzZXJ0ZWRJZGVudGl0eT10LHRoaXMuYm9keT1yLHRoaXN9fSx7a2V5OlwiYWRkSWRUb2tlblwiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKCFlKXRocm93IG5ldyBFcnJvcihcIm1lc3NhZ2UsIHRva2VuIHRvIGJlIGFkZGVkLCBtdXN0IGJlIHByb3ZpZGVkXCIpO3ZhciB0PXRoaXMuYm9keTtyZXR1cm4gdC5pZFRva2VuPWUsdGhpcy5ib2R5PXQsdGhpc319LHtrZXk6XCJhZGRBY2Nlc3NUb2tlblwiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKCFlKXRocm93IG5ldyBFcnJvcihcIm1lc3NhZ2UsIHRva2VuIHRvIGJlIGFkZGVkLCBtdXN0IGJlIHByb3ZpZGVkXCIpO3ZhciB0PXRoaXMuYm9keTtyZXR1cm4gdC5hY2Nlc3NUb2tlbj1lLHRoaXMuYm9keT10LHRoaXN9fV0pLHR9KHlbXCJkZWZhdWx0XCJdKTtyLk1lc3NhZ2VUeXBlPXtDUkVBVEU6XCJjcmVhdGVcIixSRUFEOlwicmVhZFwiLFVQREFURTpcInVwZGF0ZVwiLERFTEVURTpcImRlbGV0ZVwiLFNVQlNDUklCRTpcInN1YnNjcmliZVwiLFVOU1VCU0NSSUJFOlwidW5zdWJzY3JpYmVcIixSRVNQT05TRTpcInJlc3BvbnNlXCIsRk9SV0FSRDpcImZvcndhcmRcIixFWEVDVVRFOlwiZXhlY3V0ZVwifTtyW1wiZGVmYXVsdFwiXT1tfSx7XCIuLi9yZVRISU5LT2JqZWN0L1JldGhpbmtPYmplY3QuanNcIjoxMDQsXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2ZcIjo1LFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6MTAsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjoxMSxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjEyLFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxM31dLDEwMjpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntcImRlZmF1bHRcIjplfX1mdW5jdGlvbiBvKGUpe3ZhciB0PSgwLHVbXCJkZWZhdWx0XCJdKShlKS5yZWR1Y2UoZnVuY3Rpb24odCxyKXtyZXR1cm4gdFtlW3JdXT1yLHR9LHt9KTtyZXR1cm4oMCxhW1wiZGVmYXVsdFwiXSkoKDAsdVtcImRlZmF1bHRcIl0pKGUpLnJlZHVjZShmdW5jdGlvbih0LHIpe3JldHVybiB0W3JdPWVbcl0sdH0sZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19KSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksci5VUERBVEVfT1BFUkFUSU9OPXIuQVRUUklCVVRFX1RZUEU9ci5SRUFTT05fUEhSQVNFPXIuUkVTUE9OU0VfQ09ERT1yLkV4ZWN1dGVNZXNzYWdlQm9keT1yLlJlc3BvbnNlTWVzc2FnZUJvZHk9ci5Gb3J3YXJkTWVzc2FnZUJvZHk9ci5VcGRhdGVNZXNzYWdlQm9keT1yLkRlbGV0ZU1lc3NhZ2VCb2R5PXIuUmVhZE1lc3NhZ2VCb2R5PXIuQ3JlYXRlTWVzc2FnZUJvZHk9ci5NZXNzYWdlQm9keT12b2lkIDA7dmFyIGk9ZShcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZnJlZXplXCIpLGE9bihpKSxzPWUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXNcIiksdT1uKHMpLGM9ZShcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZlwiKSxsPW4oYyksZj1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpLGQ9bihmKSxwPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIiksaD1uKHApLHk9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpLG09bih5KSx2PWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIiksXz1uKHYpO3IuRW51bT1vO3ZhciBiPWUoXCIuLi9yZVRISU5LT2JqZWN0L1JldGhpbmtPYmplY3QuanNcIiksZz1uKGIpLEU9ci5NZXNzYWdlQm9keT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8saSl7KDAsZFtcImRlZmF1bHRcIl0pKHRoaXMsdCk7dmFyIGE9KDAsbVtcImRlZmF1bHRcIl0pKHRoaXMsKHQuX19wcm90b19ffHwoMCxsW1wiZGVmYXVsdFwiXSkodCkpLmNhbGwodGhpcykpO3JldHVybiBhLmlkVG9rZW49ZSxhLmFjY2Vzc1Rva2VuPXIsYS5yZXNvdXJjZT1uLGEuc2NoZW1hPW8sYS5hc3NlcnRlZElkZW50aXR5PWksYX1yZXR1cm4oMCxfW1wiZGVmYXVsdFwiXSkodCxlKSwoMCxoW1wiZGVmYXVsdFwiXSkodCxbe2tleTpcImFkZFZpYVwiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKCFlKXRocm93IG5ldyBFcnJvcihcInZpYSBVUkwgdG8gYmUgYWRkZWQsIG11c3QgYmUgcHJvdmlkZWRcIik7cmV0dXJuIHRoaXMudmlhPWUsdGhpc319XSksdH0oZ1tcImRlZmF1bHRcIl0pLGo9KHIuQ3JlYXRlTWVzc2FnZUJvZHk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHIsbixvLGksYSxzKXtpZigoMCxkW1wiZGVmYXVsdFwiXSkodGhpcyx0KSwhZSl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgdmFsdWUgcGFyYW1ldGVyIGlzIG51bGxcIik7dmFyIHU9KDAsbVtcImRlZmF1bHRcIl0pKHRoaXMsKHQuX19wcm90b19ffHwoMCxsW1wiZGVmYXVsdFwiXSkodCkpLmNhbGwodGhpcyxuLG8saSxhLHMsYSxzKSk7cmV0dXJuIHUudmFsdWU9ZSxyJiYodS5wb2xpY3k9ciksdX1yZXR1cm4oMCxfW1wiZGVmYXVsdFwiXSkodCxlKSx0fShFKSxyLlJlYWRNZXNzYWdlQm9keT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8saSxhLHMsdSl7KDAsZFtcImRlZmF1bHRcIl0pKHRoaXMsdCk7dmFyIGM9KDAsbVtcImRlZmF1bHRcIl0pKHRoaXMsKHQuX19wcm90b19ffHwoMCxsW1wiZGVmYXVsdFwiXSkodCkpLmNhbGwodGhpcyxlLHIsbixvLGkpKTtyZXR1cm4gYSYmKGMuYXR0cmlidXRlPWEpLHMmJihjLmNyaXRlcmlhU3ludGF4PXMpLHUmJihjLmNyaXRlcmlhPXUpLGN9cmV0dXJuKDAsX1tcImRlZmF1bHRcIl0pKHQsZSksdH0oRSksci5EZWxldGVNZXNzYWdlQm9keT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8saSxhKXtpZigoMCxkW1wiZGVmYXVsdFwiXSkodGhpcyx0KSxuIGluc3RhbmNlb2YgQXJyYXkpe3ZhciBzPSgwLG1bXCJkZWZhdWx0XCJdKSh0aGlzLCh0Ll9fcHJvdG9fX3x8KDAsbFtcImRlZmF1bHRcIl0pKHQpKS5jYWxsKHRoaXMsZSxyLG51bGwsbyxpKSk7cy5jaGlsZHJlblJlc291cmNlcz1ufWVsc2UgdmFyIHM9KDAsbVtcImRlZmF1bHRcIl0pKHRoaXMsKHQuX19wcm90b19ffHwoMCxsW1wiZGVmYXVsdFwiXSkodCkpLmNhbGwodGhpcyxlLHIsbixvLGkpKTtyZXR1cm4gYSYmKHMuYXR0cmlidXRlPWEpLCgwLG1bXCJkZWZhdWx0XCJdKShzKX1yZXR1cm4oMCxfW1wiZGVmYXVsdFwiXSkodCxlKSx0fShFKSxyLlVwZGF0ZU1lc3NhZ2VCb2R5PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSxyLG4sbyxpLGEscyl7KDAsZFtcImRlZmF1bHRcIl0pKHRoaXMsdCk7dmFyIHU9KDAsbVtcImRlZmF1bHRcIl0pKHRoaXMsKHQuX19wcm90b19ffHwoMCxsW1wiZGVmYXVsdFwiXSkodCkpLmNhbGwodGhpcyxlLHIsbixvLGkpKTtyZXR1cm4gdS5hdHRyaWJ1dGU9YSx1LnZhbHVlPXMsdX1yZXR1cm4oMCxfW1wiZGVmYXVsdFwiXSkodCxlKSwoMCxoW1wiZGVmYXVsdFwiXSkodCxbe2tleTpcImFkZEF0dHJpYnV0ZVR5cGVcIix2YWx1ZTpmdW5jdGlvbihlKXtlJiYodGhpcy5hdHRyaWJ1dGVUeXBlPWUpfX0se2tleTpcImFkZE9wZXJhdGlvblwiLHZhbHVlOmZ1bmN0aW9uKGUpe2UmJih0aGlzLm9wZXJhdGlvbj1lKX19XSksdH0oRSksci5Gb3J3YXJkTWVzc2FnZUJvZHk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHIsbixvLGksYSl7KDAsZFtcImRlZmF1bHRcIl0pKHRoaXMsdCk7dmFyIHM9KDAsbVtcImRlZmF1bHRcIl0pKHRoaXMsKHQuX19wcm90b19ffHwoMCxsW1wiZGVmYXVsdFwiXSkodCkpLmNhbGwodGhpcyxlLHIsbixvLGkpKTtyZXR1cm4gcy5tZXNzYWdlPWEsc31yZXR1cm4oMCxfW1wiZGVmYXVsdFwiXSkodCxlKSx0fShFKSxyLlJlc3BvbnNlTWVzc2FnZUJvZHk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHIsbixvLGkpeygwLGRbXCJkZWZhdWx0XCJdKSh0aGlzLHQpO3ZhciBhPSgwLG1bXCJkZWZhdWx0XCJdKSh0aGlzLCh0Ll9fcHJvdG9fX3x8KDAsbFtcImRlZmF1bHRcIl0pKHQpKS5jYWxsKHRoaXMsZSxyLG4pKTtyZXR1cm4gbyYmKGEuY29kZT1vLGEuZGVzY3JpcHRpb249altvXSksaSYmKGEudmFsdWU9aSksYX1yZXR1cm4oMCxfW1wiZGVmYXVsdFwiXSkodCxlKSx0fShFKSxyLkV4ZWN1dGVNZXNzYWdlQm9keT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8saSxhLHMpeygwLGRbXCJkZWZhdWx0XCJdKSh0aGlzLHQpO3ZhciB1PSgwLG1bXCJkZWZhdWx0XCJdKSh0aGlzLCh0Ll9fcHJvdG9fX3x8KDAsbFtcImRlZmF1bHRcIl0pKHQpKS5jYWxsKHRoaXMsZSxyLG4sbyxpKSk7cmV0dXJuIHUubWV0aG9kPWEscyYmKHMgaW5zdGFuY2VvZiBBcnJheT91LnBhcmFtcz1zOnUucGFyYW1zPVtzXSksdX1yZXR1cm4oMCxfW1wiZGVmYXVsdFwiXSkodCxlKSx0fShFKSxyLlJFU1BPTlNFX0NPREU9byh7MTAwOlwiMTAwXCIsMTAxOlwiMTAxXCIsMjAwOlwiMjAwXCIsMjAxOlwiMjAxXCIsMjAyOlwiMjAyXCIsMjAzOlwiMjAzXCIsMjA0OlwiMjA0XCIsMjA1OlwiMjA1XCIsMjA2OlwiMjA2XCIsMzAwOlwiMzAwXCIsMzAxOlwiMzAxXCIsMzAyOlwiMzAyXCIsMzAzOlwiMzAzXCIsMzA0OlwiMzA0XCIsMzA1OlwiMzA1XCIsMzA3OlwiMzA3XCIsNDAwOlwiNDAwXCIsNDAxOlwiNDAxXCIsNDAyOlwiNDAyXCIsNDAzOlwiNDAzXCIsNDA0OlwiNDA0XCIsNDA1OlwiNDA1XCIsNDA2OlwiNDA2XCIsNDA3OlwiNDA3XCIsNDA4OlwiNDA4XCIsNDA5OlwiNDA5XCIsNDEwOlwiNDEwXCIsNDExOlwiNDExXCIsNDEyOlwiNDEyXCIsNDEzOlwiNDEzXCIsNDE0OlwiNDE0XCIsNDE1OlwiNDE1XCIsNDE2OlwiNDE2XCIsNDE3OlwiNDE3XCIsNDI2OlwiNDI2XCIsNTAwOlwiNTAwXCIsNTAxOlwiNTAxXCIsNTAyOlwiNTAyXCIsNTAzOlwiNTAzXCIsNTA0OlwiNTA0XCIsNTA1OlwiNTA1XCJ9KSxyLlJFQVNPTl9QSFJBU0U9byh7MTAwOlwiQ29udGludWVcIiwxMDE6XCJTd2l0Y2hpbmcgUHJvdG9jb2xzXCIsMjAwOlwiT0tcIiwyMDE6XCJDcmVhdGVkXCIsMjAyOlwiQWNjZXB0ZWRcIiwyMDM6XCJOb24tQXV0aG9yaXRhdGl2ZSBJbmZvcm1hdGlvblwiLDIwNDpcIk5vIENvbnRlbnRcIiwyMDU6XCJSZXNldCBDb250ZW50XCIsMjA2OlwiUGFydGlhbCBDb250ZW50XCIsMzAwOlwiTXVsdGlwbGUgQ2hvaWNlc1wiLDMwMTpcIk1vdmVkIFBlcm1hbmVudGx5XCIsMzAyOlwiRm91bmRcIiwzMDM6XCJTZWUgT3RoZXJcIiwzMDQ6XCJOb3QgTW9kaWZpZWRcIiwzMDU6XCJVc2UgUHJveHlcIiwzMDc6XCJUZW1wb3JhcnkgUmVkaXJlY3RcIiw0MDA6XCJCYWQgUmVxdWVzdFwiLDQwMTpcIlVuYXV0aG9yaXplZFwiLDQwMjpcIlBheW1lbnQgUmVxdWlyZWRcIiw0MDM6XCJGb3JiaWRkZW5cIiw0MDQ6XCJOb3QgRm91bmRcIiw0MDU6XCJNZXRob2QgTm90IEFsbG93ZWRcIiw0MDY6XCJOb3QgQWNjZXB0YWJsZVwiLDQwNzpcIlByb3h5IEF1dGhlbnRpY2F0aW9uIFJlcXVpcmVkXCIsNDA4OlwiUmVxdWVzdCBUaW1lb3V0XCIsNDA5OlwiQ29uZmxpY3RcIiw0MTA6XCJHb25lXCIsNDExOlwiTGVuZ3RoIFJlcXVpcmVkXCIsNDEyOlwiUHJlY29uZGl0aW9uIEZhaWxlZFwiLDQxMzpcIlBheWxvYWQgVG9vIExhcmdlXCIsNDE0OlwiUmVxdWVzdC1VUkkgVG9vIExvbmdcIiw0MTU6XCJVbnN1cHBvcnRlZCBNZWRpYSBUeXBlXCIsNDE2OlwiUmFuZ2UgTm90IFNhdGlzZmlhYmxlXCIsNDE3OlwiRXhwZWN0YXRpb24gRmFpbGVkXCIsNDI2OlwiVXBncmFkZSBSZXF1aXJlZFwiLDUwMDpcIkludGVybmFsIFNlcnZlciBFcnJvclwiLDUwMTpcIk5vdCBJbXBsZW1lbnRlZFwiLDUwMjpcIkJhZCBHYXRld2F5XCIsNTAzOlwiU2VydmljZSBVbmF2YWlsYWJsZVwiLDUwNDpcIkdhdGV3YXkgVGltZS1vdXRcIiw1MDU6XCJIVFRQIFZlcnNpb24gTm90IFN1cHBvcnRlZFwifSkpO3IuQVRUUklCVVRFX1RZUEU9byh7T0JKRUNUOlwiT0JKRUNUXCIsQVJSQVk6XCJBUlJBWVwifSksci5VUERBVEVfT1BFUkFUSU9OPW8oe0FERDpcIkFERFwiLFJFTU9WRTpcIlJFTU9WRVwifSk7cltcImRlZmF1bHRcIl09RX0se1wiLi4vcmVUSElOS09iamVjdC9SZXRoaW5rT2JqZWN0LmpzXCI6MTA0LFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9mcmVlemVcIjo0LFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mXCI6NSxcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5c1wiOjYsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjoxMCxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiOjExLFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTIsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjEzfV0sMTAzOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e1wiZGVmYXVsdFwiOmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHIuSWRHZW5lcmF0b3I9dm9pZCAwO3ZhciBvPWUoXCJiYWJlbC1ydW50aW1lL3JlZ2VuZXJhdG9yXCIpLGk9bihvKSxhPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikscz1uKGEpLHU9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSxjPW4odSksbD1lKFwiLi9NZXNzYWdlLmpzXCIpLGY9bihsKSxkPWUoXCIuL01lc3NhZ2VCb2R5LmpzXCIpLHA9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7KDAsc1tcImRlZmF1bHRcIl0pKHRoaXMsZSksdGhpcy5teUdlbmVyYXRvcj0obmV3IGgpLmlkTWFrZXIoKX1yZXR1cm4oMCxjW1wiZGVmYXVsdFwiXSkoZSxbe2tleTpcImNyZWF0ZUNyZWF0ZU1lc3NhZ2VSZXF1ZXN0XCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIsbil7aWYoIWV8fCF0fHwhcil0aHJvdyBuZXcgRXJyb3IoXCJmcm9tLCB0bywgYW5kIHZhbHVlIG9mIG9iamVjdCB0byBiZSBjcmVhdGVkIE1VU1QgYmUgc3BlY2lmaWVkXCIpO3ZhciBvPVwiXCIrdGhpcy5teUdlbmVyYXRvci5uZXh0KCkudmFsdWUsaT1uZXcgZC5DcmVhdGVNZXNzYWdlQm9keShyLG4sKHZvaWQgMCksKHZvaWQgMCksKHZvaWQgMCksKHZvaWQgMCksKHZvaWQgMCkpLGE9bmV3IGZbXCJkZWZhdWx0XCJdKG8sZSx0LGwuTWVzc2FnZVR5cGUuQ1JFQVRFLGkpO3JldHVybiBhfX0se2tleTpcImNyZWF0ZUZvcndhcmRNZXNzYWdlUmVxdWVzdFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyKXtpZighZXx8IXR8fCFyKXRocm93IG5ldyBFcnJvcihcImZyb20sIHRvLCBhbmQgbWVzc2FnZSB0byBmb3J3YXJkIE1VU1QgYmUgc3BlY2lmaWVkXCIpO3ZhciBuPVwiXCIrdGhpcy5teUdlbmVyYXRvci5uZXh0KCkudmFsdWUsbz1uZXcgZC5Gb3J3YXJkTWVzc2FnZUJvZHkoKHZvaWQgMCksKHZvaWQgMCksKHZvaWQgMCksKHZvaWQgMCksKHZvaWQgMCksciksaT1uZXcgZltcImRlZmF1bHRcIl0obixlLHQsbC5NZXNzYWdlVHlwZS5GT1JXQVJELG8pO3JldHVybiBpfX0se2tleTpcImNyZWF0ZURlbGV0ZU1lc3NhZ2VSZXF1ZXN0XCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIsbil7aWYoIWV8fCF0KXRocm93IG5ldyBFcnJvcihcImZyb20gYW5kIHRvIHBhcmFtZXRlcnMgTVVTVCBiZSBzcGVjaWZpZWRcIik7dmFyIG89XCJcIit0aGlzLm15R2VuZXJhdG9yLm5leHQoKS52YWx1ZSxpPW5ldyBkLkRlbGV0ZU1lc3NhZ2VCb2R5KCh2b2lkIDApLCh2b2lkIDApLHIsbiwodm9pZCAwKSwodm9pZCAwKSksYT1uZXcgZltcImRlZmF1bHRcIl0obyxlLHQsbC5NZXNzYWdlVHlwZS5ERUxFVEUsaSk7cmV0dXJuIGF9fSx7a2V5OlwiY3JlYXRlVXBkYXRlTWVzc2FnZVJlcXVlc3RcIix2YWx1ZTpmdW5jdGlvbihlLHQscixuLG8pe2lmKCFlfHwhdHx8IXIpdGhyb3cgbmV3IEVycm9yKFwiZnJvbSwgYW5kIHRvIGFuZCB2YWx1ZSBNVVNUIGJlIHNwZWNpZmllZFwiKTt2YXIgaT1cIlwiK3RoaXMubXlHZW5lcmF0b3IubmV4dCgpLnZhbHVlLGE9bmV3IGQuVXBkYXRlTWVzc2FnZUJvZHkoKHZvaWQgMCksKHZvaWQgMCksbiwodm9pZCAwKSwodm9pZCAwKSxvLHIpLHM9bmV3IGZbXCJkZWZhdWx0XCJdKGksZSx0LGwuTWVzc2FnZVR5cGUuVVBEQVRFLGEpO3JldHVybiBzfX0se2tleTpcImNyZWF0ZVJlYWRNZXNzYWdlUmVxdWVzdFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4pe2lmKCFlfHwhdHx8IXIpdGhyb3cgbmV3IEVycm9yKFwiZnJvbSwgdG8gYW5kIHRoZSByZXNvdXJjZSB0byByZWFkIGZyb20gTVVTVCBiZSBzcGVjaWZpZWRcIik7dmFyIG89XCJcIit0aGlzLm15R2VuZXJhdG9yLm5leHQoKS52YWx1ZSxpPW5ldyBkLlJlYWRNZXNzYWdlQm9keSgodm9pZCAwKSwodm9pZCAwKSxyLCh2b2lkIDApLCh2b2lkIDApLG4sKHZvaWQgMCksKHZvaWQgMCkpLGE9bmV3IGZbXCJkZWZhdWx0XCJdKG8sZSx0LGwuTWVzc2FnZVR5cGUuUkVBRCxpKTtyZXR1cm4gYX19LHtrZXk6XCJjcmVhdGVTdWJzY3JpYmVNZXNzYWdlUmVxdWVzdFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyKXtpZighZXx8IXR8fCFyKXRocm93IG5ldyBFcnJvcihcImZyb20sIHRvIGFuZCB0aGUgcmVzb3VyY2UgdG8gc3Vic2NyaWJlIHRvIE1VU1QgYmUgc3BlY2lmaWVkXCIpO3ZhciBuPVwiXCIrdGhpcy5teUdlbmVyYXRvci5uZXh0KCkudmFsdWUsbz1uZXcgZC5NZXNzYWdlQm9keSgodm9pZCAwKSwodm9pZCAwKSxyLCh2b2lkIDApLCh2b2lkIDApKSxpPW5ldyBmW1wiZGVmYXVsdFwiXShuLGUsdCxsLk1lc3NhZ2VUeXBlLlNVQlNDUklCRSxvKTtyZXR1cm4gaX19LHtrZXk6XCJjcmVhdGVVbnN1YnNjcmliZU1lc3NhZ2VSZXF1ZXN0XCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIpe2lmKCFlfHwhdHx8IXIpdGhyb3cgbmV3IEVycm9yKFwiZnJvbSwgdG8gYW5kIHRoZSByZXNvdXJjZSB0byBzdWJzY3JpYmUgdG8gTVVTVCBiZSBzcGVjaWZpZWRcIik7dmFyIG49XCJcIit0aGlzLm15R2VuZXJhdG9yLm5leHQoKS52YWx1ZSxvPW5ldyBkLk1lc3NhZ2VCb2R5KCh2b2lkIDApLCh2b2lkIDApLHIsKHZvaWQgMCksKHZvaWQgMCkpLGk9bmV3IGZbXCJkZWZhdWx0XCJdKG4sZSx0LGwuTWVzc2FnZVR5cGUuVU5TVUJTQ1JJQkUsbyk7cmV0dXJuIGl9fSx7a2V5OlwiY3JlYXRlRXhlY3V0ZU1lc3NhZ2VSZXF1ZXN0XCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIsbil7aWYoIWV8fCF0fHwhcil0aHJvdyBuZXcgRXJyb3IoXCJmcm9tLCB0byBhbmQgdGhlIG1ldGhvZCB0byBleGVjdXRlIE1VU1QgYmUgc3BlY2lmaWVkXCIpO3ZhciBvPVwiXCIrdGhpcy5teUdlbmVyYXRvci5uZXh0KCkudmFsdWUsaT1uZXcgZC5FeGVjdXRlTWVzc2FnZUJvZHkoKHZvaWQgMCksKHZvaWQgMCksKHZvaWQgMCksKHZvaWQgMCksKHZvaWQgMCkscixuKSxhPW5ldyBmW1wiZGVmYXVsdFwiXShvLGUsdCxsLk1lc3NhZ2VUeXBlLkVYRUNVVEUsaSk7cmV0dXJuIGF9fSx7a2V5OlwiY3JlYXRlTWVzc2FnZVJlc3BvbnNlXCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIsbil7aWYoIXQpdGhyb3cgbmV3IEVycm9yKFwicmVzcG9uc2UgQ29kZSBNVVNUIGJlIHNwZWNpZmllZFwiKTt2YXIgbz1uZXcgZC5SZXNwb25zZU1lc3NhZ2VCb2R5KCh2b2lkIDApLCh2b2lkIDApLCh2b2lkIDApLHQscixuKTtyZXR1cm4gbmV3IGZbXCJkZWZhdWx0XCJdKGUuaWQsZS50byxlLmZyb20sbC5NZXNzYWdlVHlwZS5SRVNQT05TRSxvKX19LHtrZXk6XCJnZW5lcmF0ZU1lc3NhZ2VSZXNwb25zZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyKXtpZighZXx8IXQpdGhyb3cgbmV3IEVycm9yKFwibWVzc2FnZSBhbmQgcmVzcG9uc2UgY29kZSBNVVNUIGJlIHNwZWNpZmllZFwiKTt2YXIgbj1lLmJvZHksbz1uLmlkVG9rZW4saT1uLmFjY2Vzc1Rva2VuLGE9bi5yZXNvdXJjZSxzPW5ldyBkLlJlc3BvbnNlTWVzc2FnZUJvZHkobyxpLGEsdCxyKSx1PXRoaXMubXlHZW5lcmF0b3IubmV4dCgpLnZhbHVlO3JldHVybiBuZXcgZltcImRlZmF1bHRcIl0odSxlLnRvLGUuZnJvbSxsLk1lc3NhZ2VUeXBlLlJFU1BPTlNFLHMpfX1dKSxlfSgpLGg9ci5JZEdlbmVyYXRvcj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXsoMCxzW1wiZGVmYXVsdFwiXSkodGhpcyxlKX1yZXR1cm4oMCxjW1wiZGVmYXVsdFwiXSkoZSxbe2tleTpcImlkTWFrZXJcIix2YWx1ZTppW1wiZGVmYXVsdFwiXS5tYXJrKGZ1bmN0aW9uIHQoKXt2YXIgZTtyZXR1cm4gaVtcImRlZmF1bHRcIl0ud3JhcChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDplPTE7Y2FzZSAxOmlmKCEoZTwxZTYpKXt0Lm5leHQ9NjticmVha31yZXR1cm4gdC5uZXh0PTQsZSsrO2Nhc2UgNDp0Lm5leHQ9MTticmVhaztjYXNlIDY6Y2FzZVwiZW5kXCI6cmV0dXJuIHQuc3RvcCgpfX0sdCx0aGlzKX0pfV0pLGV9KCk7cltcImRlZmF1bHRcIl09cH0se1wiLi9NZXNzYWdlLmpzXCI6MTAxLFwiLi9NZXNzYWdlQm9keS5qc1wiOjEwMixcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjEwLFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI6MTEsXCJiYWJlbC1ydW50aW1lL3JlZ2VuZXJhdG9yXCI6MTV9XSwxMDQ6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7XCJkZWZhdWx0XCI6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksci5SZXRoaW5rT2JqZWN0PXZvaWQgMDt2YXIgbz1lKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5XCIpLGk9bihvKSxhPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikscz1uKGEpLHU9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSxjPW4odSksbD1lKFwidHY0XCIpLGY9bihsKSxkPXIuUmV0aGlua09iamVjdD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXsoMCxzW1wiZGVmYXVsdFwiXSkodGhpcyxlKX1yZXR1cm4oMCxjW1wiZGVmYXVsdFwiXSkoZSxbe2tleTpcInZhbGlkYXRlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7ZltcImRlZmF1bHRcIl0uYWRkU2NoZW1hKGUuaWQsZSk7dmFyIHQ9ZltcImRlZmF1bHRcIl0udmFsaWRhdGVNdWx0aXBsZShKU09OLnBhcnNlKCgwLGlbXCJkZWZhdWx0XCJdKSh0aGlzKSksZSk7cmV0dXJuIHQuZXJyb3JzLmZvckVhY2goZnVuY3Rpb24oZSl7ZGVsZXRlIGUuc3RhY2t9KSwoIXQudmFsaWR8fHQubWlzc2luZy5sZW5ndGg+MCkmJihjb25zb2xlLndhcm4oXCJPYmplY3QgdmFsaWRhdGlvbiBcIisodC52YWxpZD9cInN1Y2NlZWRlZCwgYnV0IHNjaGVtYSBjb250YWluZWQgcmVmZXJlbmNlczpcIjpcImZhaWxlZDpcIiksKDAsaVtcImRlZmF1bHRcIl0pKHQsbnVsbCwyKSksY29uc29sZS5kZWJ1ZyhcIk9iamVjdDpcIiwoMCxpW1wiZGVmYXVsdFwiXSkodGhpcyxudWxsLDIpKSksdC52YWxpZH19XSksZX0oKTtyW1wiZGVmYXVsdFwiXT1kfSx7XCJiYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnlcIjoxLFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6MTAsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjoxMSx0djQ6OTl9XX0se30sWzEwMF0pKDEwMCl9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1lc3NhZ2VGYWN0b3J5LmpzLm1hcFxuIiwiLyoqXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXG4qXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbioqL1xuXG4vKipcbiogQGF1dGhvciBtaWNhZWxwZWRyb3NhQGdtYWlsLmNvbVxuKiBNaW5pbWFsIGludGVyZmFjZSBhbmQgaW1wbGVtZW50YXRpb24gdG8gc2VuZCBhbmQgcmVjZWl2ZSBtZXNzYWdlcy4gSXQgY2FuIGJlIHJldXNlZCBpbiBtYW55IHR5cGUgb2YgY29tcG9uZW50cy5cbiogQ29tcG9uZW50cyB0aGF0IG5lZWQgYSBtZXNzYWdlIHN5c3RlbSBzaG91bGQgcmVjZWl2ZSB0aGlzIGNsYXNzIGFzIGEgZGVwZW5kZW5jeSBvciBleHRlbmQgaXQuXG4qIEV4dGVuc2lvbnMgc2hvdWxkIGltcGxlbWVudCB0aGUgZm9sbG93aW5nIHByaXZhdGUgbWV0aG9kczogX29uUG9zdE1lc3NhZ2UgYW5kIF9yZWdpc3RlckV4dGVybmFsTGlzdGVuZXJcbiovXG5jbGFzcyBCdXMge1xuICAvKiBwcml2YXRlXG4gIF9tc2dJZDogbnVtYmVyO1xuICBfc3Vic2NyaXB0aW9uczogPHVybDogTXNnTGlzdGVuZXJbXT5cblxuICBfcmVzcG9uc2VUaW1lT3V0OiBudW1iZXJcbiAgX3Jlc3BvbnNlQ2FsbGJhY2tzOiA8dXJsK2lkOiAobXNnKSA9PiB2b2lkPlxuXG4gICovXG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBfdGhpcy5fbXNnSWQgPSAwO1xuICAgIF90aGlzLl9zdWJzY3JpcHRpb25zID0ge307XG5cbiAgICBfdGhpcy5fcmVzcG9uc2VUaW1lT3V0ID0gNTAwMDsgLy9kZWZhdWx0IHRvIDNzXG4gICAgX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzID0ge307XG5cbiAgICBfdGhpcy5fcmVnaXN0ZXJFeHRlcm5hbExpc3RlbmVyKCk7XG4gIH1cblxuICAvKipcbiAgKiBSZWdpc3RlciBsaXN0ZW5lciB0byByZWNlaXZlIG1lc3NhZ2Ugd2hlbiBcIm1zZy50byA9PT0gdXJsXCIuXG4gICogU3BlY2lhbCB1cmwgXCIqXCIgZm9yIGRlZmF1bHQgbGlzdGVuZXIgaXMgYWNjZXB0ZWQgdG8gaW50ZXJjZXB0IGFsbCBtZXNzYWdlcy5cbiAgKiBAcGFyYW0ge1VSTH0gdXJsIEFkZHJlc3MgdG8gaW50ZXJjZXB0LCB0aGEgaXMgaW4gdGhlIG1lc3NhZ2UgXCJ0b1wiXG4gICogQHBhcmFtIHtMaXN0ZW5lcn0gbGlzdGVuZXIgbGlzdGVuZXJcbiAgKiBAcmV0dXJuIHtNc2dMaXN0ZW5lcn0gaW5zdGFuY2Ugb2YgTXNnTGlzdGVuZXJcbiAgKi9cbiAgYWRkTGlzdGVuZXIodXJsLCBsaXN0ZW5lcikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgaXRlbSA9IG5ldyBNc2dMaXN0ZW5lcihfdGhpcy5fc3Vic2NyaXB0aW9ucywgdXJsLCBsaXN0ZW5lcik7XG4gICAgbGV0IGl0ZW1MaXN0ID0gX3RoaXMuX3N1YnNjcmlwdGlvbnNbdXJsXTtcbiAgICBpZiAoIWl0ZW1MaXN0KSB7XG4gICAgICBpdGVtTGlzdCA9IFtdO1xuICAgICAgX3RoaXMuX3N1YnNjcmlwdGlvbnNbdXJsXSA9IGl0ZW1MaXN0O1xuICAgIH1cblxuICAgIGl0ZW1MaXN0LnB1c2goaXRlbSk7XG4gICAgcmV0dXJuIGl0ZW07XG4gIH1cblxuICAvKipcbiAgICogTWFudWFsbHkgYWRkIGEgcmVzcG9uc2UgbGlzdGVuZXIuIE9ubHkgb25lIGxpc3RlbmVyIHBlciBtZXNzYWdlIElEIHNob3VsZCBleGlzdC5cbiAgICogQVRFTlRJT04sIHRoZXJlIGlzIG5vIHRpbWVvdXQgZm9yIHRoaXMgbGlzdGVuZXIuXG4gICAqIFRoZSBsaXN0ZW5lciBzaG91bGQgYmUgcmVtb3ZlZCB3aXRoIGEgcmVtb3ZlUmVzcG9uc2VMaXN0ZW5lciwgZmFpbGluZyB0byBkbyB0aGlzIHdpbGwgcmVzdWx0IGluIGEgdW5yZWxlYXNlZCBtZW1vcnkgcHJvYmxlbS5cbiAgICogQHBhcmFtIHtVUkx9IHVybCBPcmlnaW4gYWRkcmVzcyBvZiB0aGUgbWVzc2FnZSBzZW50LCBcIm1zZy5mcm9tXCIuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtc2dJZCBNZXNzYWdlIElEIHRoYXQgaXMgcmV0dXJuZWQgZnJvbSB0aGUgcG9zdE1lc3NhZ2UuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc3BvbnNlTGlzdGVuZXIgQ2FsbGJhY2sgZnVuY3Rpb24gZm9yIHRoZSByZXNwb25zZVxuICAgKi9cbiAgYWRkUmVzcG9uc2VMaXN0ZW5lcih1cmwsIG1zZ0lkLCByZXNwb25zZUxpc3RlbmVyKSB7XG4gICAgdGhpcy5fcmVzcG9uc2VDYWxsYmFja3NbdXJsICsgbXNnSWRdID0gcmVzcG9uc2VMaXN0ZW5lcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgdGhlIHJlc3BvbnNlIGxpc3RlbmVyLlxuICAgKiBAcGFyYW0ge1VSTH0gdXJsIE9yaWdpbiBhZGRyZXNzIG9mIHRoZSBtZXNzYWdlIHNlbnQsIFwibXNnLmZyb21cIi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG1zZ0lkICBNZXNzYWdlIElEIHRoYXQgaXMgcmV0dXJuZWQgZnJvbSB0aGUgcG9zdE1lc3NhZ2VcbiAgICovXG4gIHJlbW92ZVJlc3BvbnNlTGlzdGVuZXIodXJsLCBtc2dJZCkge1xuICAgIGRlbGV0ZSB0aGlzLl9yZXNwb25zZUNhbGxiYWNrc1t1cmwgKyBtc2dJZF07XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFsbCBleGlzdGVudCBsaXN0ZW5lcnMgZm9yIHRoZSBVUkxcbiAgICogQHBhcmFtICB7VVJMfSB1cmwgQWRkcmVzcyByZWdpc3RlcmVkXG4gICAqL1xuICByZW1vdmVBbGxMaXN0ZW5lcnNPZih1cmwpIHtcbiAgICBkZWxldGUgdGhpcy5fc3Vic2NyaXB0aW9uc1t1cmxdO1xuICB9XG5cbiAgLyoqXG4gICAqIEhlbHBlciBtZXRob2QgdG8gYmluZCBsaXN0ZW5lcnMgKGluIGJvdGggZGlyZWN0aW9ucykgaW50byBvdGhlciBNaW5pQnVzIHRhcmdldC5cbiAgICogQHBhcmFtICB7VVJMfSBvdXRVcmwgT3V0Ym91bmQgVVJMLCByZWdpc3RlciBsaXN0ZW5lciBmb3IgdXJsIGluIGRpcmVjdGlvbiBcInRoaXMgLT4gdGFyZ2V0XCJcbiAgICogQHBhcmFtICB7VVJMfSBpblVybCBJbmJvdW5kIFVSTCwgcmVnaXN0ZXIgbGlzdGVuZXIgZm9yIHVybCBpbiBkaXJlY3Rpb24gXCJ0YXJnZXQgLT4gdGhpc1wiXG4gICAqIEBwYXJhbSAge01pbmlCdXN9IHRhcmdldCBUaGUgb3RoZXIgdGFyZ2V0IE1pbmlCdXNcbiAgICogQHJldHVybiB7Qm91bmR9IGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZSBwcm9wZXJ0aWVzIFt0aGlzTGlzdGVuZXIsIHRhcmdldExpc3RlbmVyXSBhbmQgdGhlIHVuYmluZCBtZXRob2QuXG4gICAqL1xuICBiaW5kKG91dFVybCwgaW5VcmwsIHRhcmdldCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgdGhpc0xpc3RuID0gX3RoaXMuYWRkTGlzdGVuZXIob3V0VXJsLCAobXNnKSA9PiB7XG4gICAgICB0YXJnZXQucG9zdE1lc3NhZ2UobXNnKTtcbiAgICB9KTtcblxuICAgIGxldCB0YXJnZXRMaXN0biA9IHRhcmdldC5hZGRMaXN0ZW5lcihpblVybCwgKG1zZykgPT4ge1xuICAgICAgX3RoaXMucG9zdE1lc3NhZ2UobXNnKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICB0aGlzTGlzdGVuZXI6IHRoaXNMaXN0bixcbiAgICAgIHRhcmdldExpc3RlbmVyOiB0YXJnZXRMaXN0bixcbiAgICAgIHVuYmluZDogKCkgPT4ge1xuICAgICAgICB0aGlzLnRoaXNMaXN0ZW5lci5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy50YXJnZXRMaXN0ZW5lci5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy9wdWJsaXNoIG9uIGRlZmF1bHQgbGlzdGVuZXJzXG4gIF9wdWJsaXNoT25EZWZhdWx0KG1zZykge1xuICAgIC8vaXMgdGhlcmUgYW55IFwiKlwiIChkZWZhdWx0KSBsaXN0ZW5lcnM/XG4gICAgbGV0IGl0ZW1MaXN0ID0gdGhpcy5fc3Vic2NyaXB0aW9uc1snKiddO1xuICAgIGlmIChpdGVtTGlzdCkge1xuICAgICAgdGhpcy5fcHVibGlzaE9uKGl0ZW1MaXN0LCBtc2cpO1xuICAgIH1cbiAgfVxuXG4gIC8vcHVibGlzaCBvbiBhIHN1YnNjcmlwdGlvbiBsaXN0LlxuICBfcHVibGlzaE9uKGl0ZW1MaXN0LCBtc2cpIHtcbiAgICBpdGVtTGlzdC5mb3JFYWNoKChzdWIpID0+IHtcbiAgICAgIHN1Yi5fY2FsbGJhY2sobXNnKTtcbiAgICB9KTtcbiAgfVxuXG4gIF9yZXNwb25zZUNhbGxiYWNrKGluTXNnLCByZXNwb25zZUNhbGxiYWNrKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIC8vYXV0b21hdGljIG1hbmFnZW1lbnQgb2YgcmVzcG9uc2UgaGFuZGxlcnNcbiAgICBpZiAocmVzcG9uc2VDYWxsYmFjaykge1xuICAgICAgbGV0IHJlc3BvbnNlSWQgPSBpbk1zZy5mcm9tICsgaW5Nc2cuaWQ7XG4gICAgICBfdGhpcy5fcmVzcG9uc2VDYWxsYmFja3NbcmVzcG9uc2VJZF0gPSByZXNwb25zZUNhbGxiYWNrO1xuXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgbGV0IHJlc3BvbnNlRnVuID0gX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3Jlc3BvbnNlSWRdO1xuICAgICAgICBkZWxldGUgX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3Jlc3BvbnNlSWRdO1xuXG4gICAgICAgIGlmIChyZXNwb25zZUZ1bikge1xuICAgICAgICAgIGxldCBlcnJvck1zZyA9IHtcbiAgICAgICAgICAgIGlkOiBpbk1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJyxcbiAgICAgICAgICAgIGJvZHk6IHsgY29kZTogNDA4LCBkZXNjOiAnUmVzcG9uc2UgdGltZW91dCEnLCB2YWx1ZTogaW5Nc2cgfVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICByZXNwb25zZUZ1bihlcnJvck1zZyk7XG4gICAgICAgIH1cbiAgICAgIH0sIF90aGlzLl9yZXNwb25zZVRpbWVPdXQpO1xuICAgIH1cbiAgfVxuXG4gIF9vblJlc3BvbnNlKG1zZykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAobXNnLnR5cGUgPT09ICdyZXNwb25zZScpIHtcbiAgICAgIGxldCByZXNwb25zZUlkID0gbXNnLnRvICsgbXNnLmlkO1xuICAgICAgbGV0IHJlc3BvbnNlRnVuID0gX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3Jlc3BvbnNlSWRdO1xuXG4gICAgICAvL2lmIGl0J3MgYSBwcm92aXNpb25hbCByZXNwb25zZSwgZG9uJ3QgZGVsZXRlIHJlc3BvbnNlIGxpc3RlbmVyXG4gICAgICBpZiAobXNnLmJvZHkuY29kZSA+PSAyMDApIHtcbiAgICAgICAgZGVsZXRlIF90aGlzLl9yZXNwb25zZUNhbGxiYWNrc1tyZXNwb25zZUlkXTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlc3BvbnNlRnVuKSB7XG4gICAgICAgIHJlc3BvbnNlRnVuKG1zZyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vcmVjZWl2ZSBtZXNzYWdlcyBmcm9tIGV4dGVybmFsIGludGVyZmFjZVxuICBfb25NZXNzYWdlKG1zZykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoIV90aGlzLl9vblJlc3BvbnNlKG1zZykpIHtcbiAgICAgIGxldCBpdGVtTGlzdCA9IF90aGlzLl9zdWJzY3JpcHRpb25zW21zZy50b107XG4gICAgICBpZiAoaXRlbUxpc3QpIHtcbiAgICAgICAgX3RoaXMuX3B1Ymxpc2hPbihpdGVtTGlzdCwgbXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLl9wdWJsaXNoT25EZWZhdWx0KG1zZyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX2dlbklkKGluTXNnKSB7XG4gICAgLy9UT0RPOiBob3cgZG8gd2UgbWFuYWdlIG1lc3NhZ2UgSUQncz8gU2hvdWxkIGl0IGJlIGEgZ2xvYmFsIHJ1bnRpbWUgY291bnRlciwgb3IgcGVyIFVSTCBhZGRyZXNzP1xuICAgIC8vR2xvYmFsIGNvdW50ZXIgd2lsbCBub3Qgd29yaywgYmVjYXVzZSB0aGVyZSB3aWxsIGJlIG11bHRpcGxlIE1pbmlCdXMgaW5zdGFuY2VzIVxuICAgIC8vUGVyIFVSTCwgY2FuIGJlIGEgbG90IG9mIGRhdGEgdG8gbWFpbnRhaW4hXG4gICAgLy9NYXliZSBhIGNvdW50ZXIgcGVyIE1pbmlCdXMgaW5zdGFuY2UuIFRoaXMgaXMgdGhlIGFzc3VtZWQgc29sdXRpb24gZm9yIG5vdy5cbiAgICBpZiAoIWluTXNnLmlkIHx8IGluTXNnLmlkID09PSAwKSB7XG4gICAgICB0aGlzLl9tc2dJZCsrO1xuICAgICAgaW5Nc2cuaWQgPSB0aGlzLl9tc2dJZDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgKiBTZW5kIG1lc3NhZ2VzIHRvIGxvY2FsIGxpc3RlbmVycywgb3IgaWYgbm90IGV4aXN0cyB0byBleHRlcm5hbCBsaXN0ZW5lcnMuXG4gICogSXQncyBoYXMgYW4gb3B0aW9uYWwgbWVjaGFuaXNtIGZvciBhdXRvbWF0aWMgbWFuYWdlbWVudCBvZiByZXNwb25zZSBoYW5kbGVycy5cbiAgKiBUaGUgcmVzcG9uc2UgaGFuZGxlciB3aWxsIGJlIHVucmVnaXN0ZXJlZCBhZnRlciByZWNlaXZpbmcgdGhlIHJlc3BvbnNlLCBvciBhZnRlciByZXNwb25zZSB0aW1lb3V0IChkZWZhdWx0IHRvIDNzKS5cbiAgKiBAcGFyYW0gIHtNZXNzYWdlfSBtc2cgTWVzc2FnZSB0byBzZW5kLiBNZXNzYWdlIElEIGlzIGF1dG9tYXRpY2FsbHkgYWRkZWQgdG8gdGhlIG1lc3NhZ2UuXG4gICogQHBhcmFtICB7RnVuY3Rpb259IHJlc3BvbnNlQ2FsbGJhY2sgT3B0aW9uYWwgcGFyYW1ldGVyLCBpZiB0aGUgZGV2ZWxvcGVyIHdoYXQncyBhdXRvbWF0aWMgcmVzcG9uc2UgbWFuYWdlbWVudC5cbiAgKiBAcmV0dXJuIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lc3NhZ2UgSUQsIGluIGNhc2UgaXQgc2hvdWxkIGJlIG5lZWRlZCBmb3IgbWFudWFsIG1hbmFnZW1lbnQgb2YgdGhlIHJlc3BvbnNlIGhhbmRsZXIuXG4gICovXG4gIHBvc3RNZXNzYWdlKGluTXNnLCByZXNwb25zZUNhbGxiYWNrKSB7IH1cblxuICAvKipcbiAgICogTm90IHB1YmxpYyBhdmFpbGFibGUsIHVzZWQgYnkgdGhlIGNsYXNzIGV4dGVuc2lvbiBpbXBsZW1lbnRhdGlvbiwgdG8gcHJvY2VzcyBtZXNzYWdlcyBmcm9tIHRoZSBwdWJsaWMgXCJwb3N0TWVzc2FnZVwiIHdpdGhvdXQgYSByZWdpc3RlcmVkIGxpc3RlbmVyLlxuICAgKiBVc2VkIHRvIHNlbmQgdGhlIG1lc3NhZ2UgdG8gYW4gZXh0ZXJuYWwgaW50ZXJmYWNlLCBsaWtlIGEgV2ViV29ya2VyLCBJRnJhbWUsIGV0Yy5cbiAgICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSBtc2cgTWVzc2FnZVxuICAgKi9cbiAgX29uUG9zdE1lc3NhZ2UobXNnKSB7IC8qaW1wbGVtZW50YXRpb24gd2lsbCBzZW5kIG1lc3NhZ2UgdG8gZXh0ZXJuYWwgc3lzdGVtKi8gfVxuXG4gIC8qKlxuICAgKiBOb3QgcHVibGljIGF2YWlsYWJsZSwgdXNlZCBieSB0aGUgY2xhc3MgZXh0ZW5zaW9uIGltcGxlbWVudGF0aW9uLCB0byBwcm9jZXNzIGFsbCBtZXNzYWdlcyB0aGF0IGVudGVyIHRoZSBNaW5pQnVzIGZyb20gYW4gZXh0ZXJuYWwgaW50ZXJmYWNlLCBsaWtlIGEgV2ViV29ya2VyLCBJRnJhbWUsIGV0Yy5cbiAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIG9uZSB0aW1lIGluIHRoZSBjb25zdHJ1Y3RvciB0byByZWdpc3RlciBleHRlcm5hbCBsaXN0ZW5lcnMuXG4gICAqIFRoZSBpbXBsZW1lbnRhdGlvbiB3aWxsIHByb2JhYmx5IGNhbGwgdGhlIFwiX29uTWVzc2FnZVwiIG1ldGhvZCB0byBwdWJsaXNoIGluIHRoZSBsb2NhbCBsaXN0ZW5lcnMuXG4gICAqIERPIE5PVCBjYWxsIFwicG9zdE1lc3NhZ2VcIiwgdGhlcmUgaXMgYSBkYW5nZXIgdGhhdCB0aGUgbWVzc2FnZSBlbnRlcnMgaW4gYSBjeWNsZSFcbiAgICovXG4gIF9yZWdpc3RlckV4dGVybmFsTGlzdGVuZXIoKSB7IC8qaW1wbGVtZW50YXRpb24gd2lsbCByZWdpc3RlciBleHRlcm5hbCBsaXN0ZW5lciBhbmQgY2FsbCBcInRoaXMuX29uTWVzc2FnZShtc2cpXCIgKi8gfVxuXG59XG5cbmNsYXNzIE1zZ0xpc3RlbmVyIHtcbiAgLyogcHJpdmF0ZVxuICBfc3Vic2NyaXB0aW9uczogPHN0cmluZzogTXNnTGlzdGVuZXJbXT47XG4gIF91cmw6IHN0cmluZztcbiAgX2NhbGxiYWNrOiAobXNnKSA9PiB2b2lkO1xuICAqL1xuXG4gIGNvbnN0cnVjdG9yKHN1YnNjcmlwdGlvbnMsIHVybCwgY2FsbGJhY2spIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuX3N1YnNjcmlwdGlvbnMgPSBzdWJzY3JpcHRpb25zO1xuICAgIF90aGlzLl91cmwgPSB1cmw7XG4gICAgX3RoaXMuX2NhbGxiYWNrID0gY2FsbGJhY2s7XG4gIH1cblxuICBnZXQgdXJsKCkgeyByZXR1cm4gdGhpcy5fdXJsOyB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB0aGlzIGxpc3RlbmVyIGZyb20gdGhlIEJ1c1xuICAgKi9cbiAgcmVtb3ZlKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgc3VicyA9IF90aGlzLl9zdWJzY3JpcHRpb25zW190aGlzLl91cmxdO1xuICAgIGlmIChzdWJzKSB7XG4gICAgICBsZXQgaW5kZXggPSBzdWJzLmluZGV4T2YoX3RoaXMpO1xuICAgICAgc3Vicy5zcGxpY2UoaW5kZXgsIDEpO1xuXG4gICAgICAvL2lmIHRoZXJlIGFyZSBubyBsaXN0ZW5lcnMsIHJlbW92ZSB0aGUgc3Vic2NyaXB0aW9uIGVudGlyZWx5LlxuICAgICAgaWYgKHN1YnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGRlbGV0ZSBfdGhpcy5fc3Vic2NyaXB0aW9uc1tfdGhpcy5fdXJsXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQnVzO1xuIiwiLyoqXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXG4qXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbioqL1xuaW1wb3J0IEJ1cyBmcm9tICcuL0J1cyc7XG5pbXBvcnQgUGlwZWxpbmUgZnJvbSAnLi9QaXBlbGluZSc7XG5cbi8qKlxuKiBAYXV0aG9yIG1pY2FlbHBlZHJvc2FAZ21haWwuY29tXG4qIE1lc3NhZ2UgQlVTIEludGVyZmFjZSBpcyBhbiBleHRlbnNpb24gb2YgdGhlIEJ1c1xuKiBJdCBkb2Vzbid0IHN1cHBvcnQgdGhlIGRlZmF1bHQgJyonIGxpc3RlbmVyLCBpbnN0ZWFkIGl0IHVzZXMgdGhlIHJlZ2lzdHJ5LnJlc29sdmUoLi4pXG4qL1xuY2xhc3MgTWVzc2FnZUJ1cyBleHRlbmRzIEJ1cyB7XG4gIC8qIHByaXZhdGVcbiAgX3JlZ2lzdHJ5OiBSZWdpc3RyeVxuICBfZm9yd2FyZHM6IHsgPGZyb20tdXJsPjogeyBmbDogTXNnTGlzdGVuZXIsIHNhbmRib3hUb1VybHM6IE1hcChTYW5kYm94LCBbdG8tdXJsXSksIHVybFRvU2FuZGJveDogeyB0by11cmw6IFNhbmRib3ggfSB9IH1cblxuICBfcGlwZWxpbmU6IFBpcGVsaW5lXG4gICovXG5cbiAgLy9UT0RPOiBmdXR1cmUgb3B0aW1pemF0aW9uXG4gIC8vMS4gbWVzc2FnZSBiYXRjaCBwcm9jZXNzaW5nIHdpdGggc2V0SW50ZXJ2YWxcbiAgLy8yLiByZXNvbHZlIGRlZmF1bHQgZ2F0ZXdheS9wcm90b3N0dWIgd2l0aCByZWdpc3Rlci5yZXNvbHZlXG5cbiAgY29uc3RydWN0b3IocmVnaXN0cnkpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3JlZ2lzdHJ5ID0gcmVnaXN0cnk7XG4gICAgdGhpcy5fZm9yd2FyZHMgPSB7fTtcblxuICAgIHRoaXMuX3BpcGVsaW5lID0gbmV3IFBpcGVsaW5lKChlcnJvcikgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ1BJUEVMSU5FLUVSUk9SOiAnLCBKU09OLnN0cmluZ2lmeShlcnJvcikpO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0IHBpcGVsaW5lKCkgeyByZXR1cm4gdGhpcy5fcGlwZWxpbmU7IH1cblxuICAvKipcbiAgICogUG9zdCBhIG1lc3NhZ2UgZm9yIHJvdXRpbmcuIEl0IHdpbGwgZmlyc3Qgc2VhcmNoIGZvciBhIGxpc3RlbmVyLCBpZiB0aGVyZSBpcyBubyBvbmUsIGl0IHNlbmRzIHRvIGEgZXh0ZXJuYWwgcm91dGluZyB1c2luZyB0aGUgX29uUG9zdE1lc3NhZ2UuXG4gICAqIEV4dGVybmFsIHJvdXRpbmcgdXNlIHRoZSByZWdpc3RyeS5yZXNvbHZlKC4uKSBtZXRob2QgdG8gZGVjaWRlIHRoZSBkZXN0aW5hdGlvbiBzYW5kYm94LlxuICAgKiBAcGFyYW0gIHtNZXNzYWdlfSBpbk1zZyAgICAgICAgICAgIEpTT04gd2l0aCBtYW5kYXRvcnkgTWVzc2FnZSBzdHJ1Y3R1cmUge2lkLCB0eXBlLCBmcm9tLCB0b31cbiAgICogQHBhcmFtICB7Q2FsbGJhY2t9IHJlc3BvbnNlQ2FsbGJhY2sgT3B0aW9uYWwgY2FsbGJhY2sgaWYgYSByZXNwb25zZSBpcyBleHBlY3RlZCBmcm9tIHRoZSByZXF1ZXN0LiBBIHJlc3BvbnNlIHdpbGwgYmUgYWx3YXlzIHNlbnQsIGV2ZW4gaWYgaXQgaXMgYSBcIlRpbWVvdXRcIi5cbiAgICogQHJldHVybiB7bnVtYmVyfSAgICAgICAgICAgICAgICAgIHRoZSBNZXNzYWdlIGlkXG4gICAqL1xuICBwb3N0TWVzc2FnZShpbk1zZywgcmVzcG9uc2VDYWxsYmFjaykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5fZ2VuSWQoaW5Nc2cpO1xuXG4gICAgX3RoaXMuX3BpcGVsaW5lLnByb2Nlc3MoaW5Nc2csIChtc2cpID0+IHtcblxuICAgICAgX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2soaW5Nc2csIHJlc3BvbnNlQ2FsbGJhY2spO1xuXG4gICAgICBpZiAoIV90aGlzLl9vblJlc3BvbnNlKG1zZykpIHtcbiAgICAgICAgbGV0IGl0ZW1MaXN0ID0gX3RoaXMuX3N1YnNjcmlwdGlvbnNbbXNnLnRvXTtcbiAgICAgICAgaWYgKGl0ZW1MaXN0KSB7XG4gICAgICAgICAgLy9kbyBub3QgcHVibGlzaCBvbiBkZWZhdWx0IGFkZHJlc3MsIGJlY2F1c2Ugb2YgbG9vcGJhY2sgY3ljbGVcbiAgICAgICAgICBfdGhpcy5fcHVibGlzaE9uKGl0ZW1MaXN0LCBtc2cpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vaWYgdGhlcmUgaXMgbm8gbGlzdGVuZXIsIHNlbmQgdG8gZXh0ZXJuYWwgaW50ZXJmYWNlXG4gICAgICAgICAgX3RoaXMuX29uUG9zdE1lc3NhZ2UobXNnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGluTXNnLmlkO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYW4gZXh0ZXJuYWwgcHVibGlzaCBhZGRyZXNzIGxpc3RlbmVyLiBFdmVyeSBtZXNzYWdlIGZvciB0aGUgYWRkcmVzcyB3aWxsIGJlIGZvcndhcmRlZCB0byB0aGUgZXh0ZXJuYWwgcm91dGluZyBieSBfb25Qb3N0TWVzc2FnZS5cbiAgICogVGhpcyBtZWFucywgZXZlbiBpZiB0aGVyZSBpcyBhIGxpc3RlbmVyIGZvciB0aGUgYWRkcmVzcywgaXQgd2lsbCBhbHNvIHNlbmQgdGhlIG1lc3NhZ2UgdG8gdGhlIGV4dGVybmFsIHJvdXRpbmcuXG4gICAqIEBwYXJhbSB7VVJMfSBmcm9tIFB1Ymxpc2ggYWRkcmVzcy5cbiAgICovXG4gIGFkZFB1Ymxpc2goZnJvbSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICAvL3ZlcmlmeSBpZiBmb3J3YXJkIGV4aXN0XG4gICAgbGV0IHJlZkNvdW50ID0gX3RoaXMuX2ZvcndhcmRzW2Zyb21dO1xuICAgIGlmICghcmVmQ291bnQpIHtcbiAgICAgIGxldCBmb3J3YXJkTGlzdGVuZXIgPSBfdGhpcy5hZGRMaXN0ZW5lcihmcm9tLCAobXNnKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdNQi1QVUJMSVNIOiAoICcgKyBmcm9tICsgJyApJyk7XG4gICAgICAgIF90aGlzLl9vblBvc3RNZXNzYWdlKG1zZyk7XG4gICAgICB9KTtcblxuICAgICAgcmVmQ291bnQgPSB7XG4gICAgICAgIGNvdW50ZXI6IDAsXG4gICAgICAgIGZsOiBmb3J3YXJkTGlzdGVuZXIsXG4gICAgICAgIHJlbW92ZTogKCkgPT4ge1xuICAgICAgICAgIHRoaXMuY291bnRlci0tO1xuICAgICAgICAgIGlmICh0aGlzLmNvdW50ZXIgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZmwucmVtb3ZlKCk7XG4gICAgICAgICAgICBkZWxldGUgX3RoaXMuX2ZvcndhcmRzW2Zyb21dO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICBfdGhpcy5fZm9yd2FyZHNbZnJvbV0gPSByZWZDb3VudDtcbiAgIH1cblxuICAgcmVmQ291bnQuY291bnRlcisrO1xuICAgcmV0dXJuIHJlZkNvdW50O1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBmb3J3YXJkIGxpc3RlbmVyIGZvciBhIG1lc3NhZ2UgZGVzdGluYXRpb24uIEV2ZXJ5IG1lc3NhZ2UgcmVhY2hpbmcgYW4gYWRkcmVzcyB3aWxsIGJlIGFsc28gc2VudCB0byB0aGUgZm9yd2FyZCBhZGRyZXNzLlxuICAgKiBAcGFyYW0ge1VSTH0gZnJvbSBNZXNzYWdlIGRlc3RpbmF0aW9uLCBpdCdzIGFjdHVhbGx5IHRoZSBmaWVsZCBcInRvXCIgb2YgdGhlIG1lc3NhZ2UuXG4gICAqIEBwYXJhbSB7VVJMfSB0byAgIEZvcndhcmQgYWRkcmVzcy5cbiAgICovXG4gICBhZGRGb3J3YXJkKGZyb20sIHRvKSB7XG4gICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICAgcmV0dXJuIF90aGlzLmFkZExpc3RlbmVyKGZyb20sIChtc2cpID0+IHtcbiAgICAgICBjb25zb2xlLmxvZygnTUItRk9SV0FSRDogKCAnICsgZnJvbSArICcgdG8gJyArIHRvICsgJyApJyk7XG4gICAgICAgX3RoaXMuZm9yd2FyZCh0bywgbXNnKTtcbiAgICAgfSk7XG4gICB9XG5cbiAgIC8qKlxuICAgICogSnVzdCBmb3J3YXJkJ3MgYSBtZXNzYWdlIHRvIHRoZSBmb3J3YXJkIGFkZHJlc3MuIExpc3RlbmVycyBzaG91bGQgYmUgYXZhaWxhYmxlIGZvciB0aGUgZm9yd2FyZCBhZGRyZXNzLlxuICAgICogQHBhcmFtICB7VVJMfSB1cmwgRm9yd2FyZCBhZGRyZXNzLlxuICAgICogQHBhcmFtICB7TWVzc2FnZX0gbXNnIE1lc3NhZ2UgdG8gZm9yd2FyZFxuICAgICovXG4gICBmb3J3YXJkKHVybCwgbXNnKSB7XG4gICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICAgbGV0IGl0ZW1MaXN0ID0gX3RoaXMuX3N1YnNjcmlwdGlvbnNbdXJsXTtcbiAgICAgaWYgKGl0ZW1MaXN0KSB7XG4gICAgICAgX3RoaXMuX3B1Ymxpc2hPbihpdGVtTGlzdCwgbXNnKTtcbiAgICAgfVxuICAgfVxuXG4gICAvL2RlZmF1bHQgcm91dGUsIGlmIHRoZXJlIGFyZSBubyBsaXN0ZW5lcnMgYXZhaWxhYmxlIGZvciBhIG1lc3NhZ2UgZGVzdGluYXRpb24uXG4gICBfb25Qb3N0TWVzc2FnZShtc2cpIHtcbiAgICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgICAvL3Jlc29sdmUgZXh0ZXJuYWwgcHJvdG9zdHViLi4uXG4gICAgIF90aGlzLl9yZWdpc3RyeS5yZXNvbHZlKG1zZy50bykudGhlbigocm91dGUpID0+IHtcbiAgICAgICBfdGhpcy5mb3J3YXJkKHJvdXRlLCBtc2cpO1xuICAgICB9KS5jYXRjaChmdW5jdGlvbihlKSB7XG4gICAgICAgY29uc29sZS5sb2coJ1JFU09MVkUtRVJST1I6ICcsIGUpO1xuICAgICB9KTtcbiAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTWVzc2FnZUJ1cztcbiIsIi8qKlxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxuKlxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qKi9cblxuLyoqXG4qIEBhdXRob3IgbWljYWVscGVkcm9zYUBnbWFpbC5jb21cbiogU2VxdWVuY2lhbCBwcm9jZXNzb3Igb2YgbWV0aG9kcy4gU2ltaWxhciB0byBob3cgU2VxdWVudGlhbCBQcm9taXNlJ3Mgd29yaywgYnV0IGJldHRlciBmaXQgZm9yIG1lc3NhZ2UgcHJvY2Vzc2luZy5cbiogTm9ybWFsIHVzZSBmb3IgdGhpcywgaXMgdG8gaW50ZXJjZXB0IGFsbCBtZXNzYWdlcyB3aXRoIGNvbmZpZ3VyZWQgaGFuZGxlcnMsIGFuZCBhY3QgYWNjb3JkaW5nbHkuXG4qL1xuY2xhc3MgUGlwZWxpbmUge1xuICAvKiBwdWJsaWNcbiAgICBoYW5kbGVyczogKChQaXBlQ29udGV4dCkgPT4gdm9pZClbXVxuICAgIG9uRmFpbDogKGVycm9yKSA9PiB2b2lkXG4gICovXG5cbiAgY29uc3RydWN0b3IoX29uRmFpbCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVycyA9IFtdO1xuICAgIF90aGlzLm9uRmFpbCA9IF9vbkZhaWw7XG4gIH1cblxuICAvKipcbiAgICogSW5zZXJ0IGEgbWVzc2FnZSBpbiB0aGUgcGlwZWxpbmUgcXVldWUuIEFsbCBtZXNzYWdlcyBhcmUgd3JhcHBlZCB3aXRoIGEgUGlwZUNvbnRleHQuXG4gICAqIEBwYXJhbSAge01lc3NhZ2V9IG1zZyAgICAgICBNZXNzYWdlIGZvciB0aGUgcXVldWVcbiAgICogQHBhcmFtICB7Q2FsbGJhY2t9IG9uRGVsaXZlciBXaGVuIG1lc3NhZ2UgaXMgZmluaXNoZWQgcHJvY2Vzc2luZyBmcm9tIGFsbCBoYW5kbGVycywgaXQgd2lsbCBiZSBkZWxpdmVyZWQgaW4gdGhpcyBjYWxsYmFjay5cbiAgICovXG4gIHByb2Nlc3MobXNnLCBvbkRlbGl2ZXIpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKF90aGlzLmhhbmRsZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIGxldCBpdGVyID0gbmV3IEl0ZXJhdG9yKF90aGlzLmhhbmRsZXJzKTtcbiAgICAgIGl0ZXIubmV4dChuZXcgUGlwZUNvbnRleHQoX3RoaXMsIGl0ZXIsIG1zZywgb25EZWxpdmVyKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uRGVsaXZlcihtc2cpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiogQGF1dGhvciBtaWNhZWxwZWRyb3NhQGdtYWlsLmNvbVxuKiBXcmFwcGVyIGFyb3VuZCBhIG1lc3NhZ2UgdGhhdCBhZGRzIGFjdGlvbnMgdGhhdCBjYW4gYmUgZmlyZWQgYnkgYW55IGludGVyY2VwdG9yIGhhbmRsZXIuXG4qIFRoZSBQaXBlbGluZSBpcyBhc3luY2hyb25vdXMsIHNvIGFuIGhhbmRsZXIgc2hvdWxkIGFsd2F5cyBjYWxsIGFuIGFjdGlvbiwgdGhlIGRlZmF1bHQgb25lIGlzIFwibmV4dCgpXCJcbiovXG5jbGFzcyBQaXBlQ29udGV4dCB7XG4gIC8qIHByaXZhdGVcbiAgICBfaW5TdG9wOiBib29sZWFuXG5cbiAgICBfcGlwZWxpbmU6IFBpcGVsaW5lXG4gICAgX2l0ZXI6IEl0ZXJhdG9yXG4gICAgX21zZzogTWVzc2FnZVxuICAqL1xuXG4gIGNvbnN0cnVjdG9yKHBpcGVsaW5lLCBpdGVyLCBtc2csIG9uRGVsaXZlcikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5faW5TdG9wID0gZmFsc2U7XG5cbiAgICBfdGhpcy5fcGlwZWxpbmUgPSBwaXBlbGluZTtcbiAgICBfdGhpcy5faXRlciA9IGl0ZXI7XG4gICAgX3RoaXMuX21zZyA9IG1zZztcbiAgICBfdGhpcy5fb25EZWxpdmVyID0gb25EZWxpdmVyO1xuICB9XG5cbiAgZ2V0IHBpcGVsaW5lKCkgeyByZXR1cm4gdGhpcy5fcGlwZWxpbmU7IH1cblxuICBnZXQgbXNnKCkgeyByZXR1cm4gdGhpcy5fbXNnOyB9XG4gIHNldCBtc2coaW5Nc2cpIHsgdGhpcy5fbXNnID0gaW5Nc2c7IH1cblxuICAvKipcbiAgICogUHJvY2VlZCB0byB0aGUgbmV4dCBpbnRlcmNlcHRvciBoYW5kbGVyLCB1bmxlc3MgdGhlcmUgd2FzIGFuIGVycm9yLiBJZiBpdCdzIHRoZSBsYXN0IG9uZSwgcHJvY2VlZCB0byBvbkRlbGl2ZXIgaGFuZGxlci5cbiAgICovXG4gIG5leHQoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGlmICghX3RoaXMuX2luU3RvcCkge1xuICAgICAgaWYgKF90aGlzLl9pdGVyLmhhc05leHQpIHtcbiAgICAgICAgX3RoaXMuX2l0ZXIubmV4dChfdGhpcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5fb25EZWxpdmVyKF90aGlzLl9tc2cpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZWVkIGRpcmVjdGx5IHRvIHRoZSBvbkRlbGl2ZXIgaGFuZGxlciwgdW5sZXNzIHRoZXJlIHdhcyBhbiBlcnJvci5cbiAgICovXG4gIGRlbGl2ZXIoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBpZiAoIV90aGlzLl9pblN0b3ApIHtcbiAgICAgIF90aGlzLl9pblN0b3AgPSB0cnVlO1xuICAgICAgX3RoaXMuX29uRGVsaXZlcihfdGhpcy5fbXNnKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTWFyayB0aGUgY29udGV4dCB3aXRoIGFuIGVycm9yIGFuZCBwcm9jZWVkIHRvIHRoZSBvbkZhaWwgaGFuZGxlci5cbiAgICogQHBhcmFtICB7W3R5cGVdfSBlcnJvciBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBmYWlsKGVycm9yKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGlmICghX3RoaXMuX2luU3RvcCkge1xuICAgICAgX3RoaXMuX2luU3RvcCA9IHRydWU7XG4gICAgICBpZiAoX3RoaXMuX3BpcGVsaW5lLm9uRmFpbCkge1xuICAgICAgICBfdGhpcy5fcGlwZWxpbmUub25GYWlsKGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgSXRlcmF0b3Ige1xuICAvKiBwcml2YXRlXG4gICAgX2luZGV4OiBudW1iZXJcbiAgICBfYXJyYXk6IFtdXG4gICovXG5cbiAgY29uc3RydWN0b3IoYXJyYXkpIHtcbiAgICB0aGlzLl9pbmRleCA9IC0xO1xuICAgIHRoaXMuX2FycmF5ID0gYXJyYXk7XG4gIH1cblxuICBnZXQgaGFzTmV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5faW5kZXggPCB0aGlzLl9hcnJheS5sZW5ndGggLSAxO1xuICB9XG5cbiAgZ2V0IG5leHQoKSB7XG4gICAgdGhpcy5faW5kZXgrKztcbiAgICByZXR1cm4gdGhpcy5fYXJyYXlbdGhpcy5faW5kZXhdO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBpcGVsaW5lO1xuIiwiLyoqXG4qIENsYXNzIHdpdGggdGhlIGNyeXB0b2dyYXBoaWMgZnVuY3Rpb25zIGZvciB0aGUgYXV0aGVudGljYXRpb24gcHJvdG9jb2xcbipcbiovXG5jbGFzcyBDcnlwdG8ge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgfVxuXG4gIC8qKlxuICAqIGVuY29kZSBhIGJ5dGVBcnJheSB2YWx1ZSBpbiBiYXNlIDY0IGVuY29kZVxuICAqIEBwYXJhbSAgIHtieXRlQXJyYXl9ICAgIHZhbHVlICAgIGJ5dGVBcnJheSB2YWx1ZVxuICAqIEByZXR1cm4gIHtzdHJpbmd9ICAgZW5jb2RlZCB2YWx1ZVxuICAqL1xuICBlbmNvZGUodmFsdWUpIHtcbiAgICByZXR1cm4gYnRvYSh2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgKiBkZWNvZGUgYSBiYXNlNjQgdmFsdWUgaW4gYSBuZXcgVWludDhBcnJheVxuICAqIEBwYXJhbSAgIHtzdHJpbmd9ICAgIHZhbHVlICAgIHZhbHVlIGVuY29kZWQgaW4gYmFzZSA2NFxuICAqIEByZXR1cm4gIHtieXRlQXJyYXl9IGRlY29kZWRWYWx1ZVxuICAqL1xuICBkZWNvZGUodmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoSlNPTi5wYXJzZSgnWycgKyBhdG9iKHZhbHVlKSArICddJykpO1xuICB9XG5cbiAgZW5jcnlwdFJTQShwdWJLZXksIGRhdGEpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgX3RoaXMuX2ltcG9ydFJTQWVuY3J5cHRLZXkobmV3IFVpbnQ4QXJyYXkocHViS2V5KSkudGhlbihmdW5jdGlvbihwdWJsaWNLZXkpIHtcblxuICAgICAgICBjcnlwdG8uc3VidGxlLmVuY3J5cHQoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5hbWU6ICdSU0EtT0FFUCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwdWJsaWNLZXksIC8vZnJvbSBnZW5lcmF0ZUtleSBvciBpbXBvcnRLZXkgYWJvdmVcbiAgICAgICAgICAgIGRhdGEgLy9BcnJheUJ1ZmZlciBvZiBkYXRhIHlvdSB3YW50IHRvIGVuY3J5cHRcbiAgICAgICAgKVxuICAgICAgICAudGhlbihmdW5jdGlvbihlbmNyeXB0ZWQpIHtcbiAgICAgICAgICAvL3JldHVybnMgYW4gQXJyYXlCdWZmZXIgY29udGFpbmluZyB0aGUgZW5jcnlwdGVkIGRhdGFcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tZW5jcnlwdFJTQScsIG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZCkpO1xuICAgICAgICAgIHJlc29sdmUobmV3IFVpbnQ4QXJyYXkoZW5jcnlwdGVkKSk7XG5cbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2NyeXB0by1lbmNyeXB0UlNBJywgZXJyKTtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIH0pO1xuXG4gICAgfSk7XG5cbiAgfVxuXG4gIGRlY3J5cHRSU0EocHJpdktleSwgZGF0YSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBfdGhpcy5faW1wb3J0UlNBZGVjcnlwdEtleShwcml2S2V5KS50aGVuKGZ1bmN0aW9uKHByaXZhdGVLZXkpIHtcblxuICAgICAgICBjcnlwdG8uc3VidGxlLmRlY3J5cHQoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5hbWU6ICdSU0EtT0FFUCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcml2YXRlS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlXG4gICAgICAgICAgICBkYXRhIC8vQXJyYXlCdWZmZXIgb2YgdGhlIGRhdGFcbiAgICAgICAgKVxuICAgICAgICAudGhlbihmdW5jdGlvbihkZWNyeXB0ZWQpIHtcblxuICAgICAgICAgIGxldCBkZWNyeXB0ZWREYXRhID0gbmV3IFVpbnQ4QXJyYXkoZGVjcnlwdGVkKTtcblxuICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1kZWNyeXB0UlNBJywgZGVjcnlwdGVkRGF0YSk7XG4gICAgICAgICAgcmVzb2x2ZShkZWNyeXB0ZWREYXRhKTtcblxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWRlY3J5cHRSU0EnLCBlcnIpO1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgfSk7XG4gIH1cblxuICBzaWduUlNBKHByaXZLZXksIGRhdGEpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgX3RoaXMuX2ltcG9ydFJTQXNpZ25LZXkocHJpdktleSkudGhlbihmdW5jdGlvbihwcml2YXRlS2V5KSB7XG5cbiAgICAgICAgY3J5cHRvLnN1YnRsZS5zaWduKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBuYW1lOiAnUlNBU1NBLVBLQ1MxLXYxXzUnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJpdmF0ZUtleSwgLy9mcm9tIGdlbmVyYXRlS2V5IG9yIGltcG9ydEtleSBhYm92ZVxuICAgICAgICAgICAgX3RoaXMuX3V0ZjhFbmNvZGUoZGF0YSkgLy9BcnJheUJ1ZmZlciBvZiBkYXRhIHlvdSB3YW50IHRvIHNpZ25cbiAgICAgICAgKVxuICAgICAgICAudGhlbihmdW5jdGlvbihzaWduYXR1cmUpIHtcbiAgICAgICAgICAvL3JldHVybnMgYW4gQXJyYXlCdWZmZXIgY29udGFpbmluZyB0aGUgc2lnbmF0dXJlXG4gICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLXNpZ25SU0EnLCBuZXcgVWludDhBcnJheShzaWduYXR1cmUpKTtcbiAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KHNpZ25hdHVyZSkpO1xuXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdjcnlwdG8tc2lnblJTQScsIGVycik7XG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuXG4gICAgICB9KTtcblxuICAgIH0pO1xuICB9XG5cbiAgdmVyaWZ5UlNBKHB1YktleSwgZGF0YSwgc2lnbmF0dXJlKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIF90aGlzLl9pbXBvcnRSU0F2ZXJpZnlLZXkocHViS2V5KS50aGVuKGZ1bmN0aW9uKHB1YmxpY0tleSkge1xuXG4gICAgICAgIGNyeXB0by5zdWJ0bGUudmVyaWZ5KFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBuYW1lOiAnUlNBU1NBLVBLQ1MxLXYxXzUnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHVibGljS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlXG4gICAgICAgICAgICBzaWduYXR1cmUsIC8vQXJyYXlCdWZmZXIgb2YgdGhlIHNpZ25hdHVyZVxuICAgICAgICAgICAgX3RoaXMuX3V0ZjhFbmNvZGUoZGF0YSkgLy9BcnJheUJ1ZmZlciBvZiB0aGUgZGF0YVxuICAgICAgICApXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGlzdmFsaWQpIHtcbiAgICAgICAgICAvL3JldHVybnMgYSBib29sZWFuIG9uIHdoZXRoZXIgdGhlIHNpZ25hdHVyZSBpcyB0cnVlIG9yIG5vdFxuICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by12ZXJpZnlSU0EnLCBpc3ZhbGlkKTtcbiAgICAgICAgICByZXNvbHZlKGlzdmFsaWQpO1xuXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdjcnlwdG8tdmVyaWZ5UlNBJywgZXJyKTtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIH0pO1xuXG4gICAgfSk7XG4gIH1cblxuICBlbmNyeXB0QUVTKGtleSwgZGF0YSwgaXYpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgX3RoaXMuX2ltcG9ydEFFU2tleShrZXkpLnRoZW4oZnVuY3Rpb24oYWVzS2V5KSB7XG5cbiAgICAgICAgY3J5cHRvLnN1YnRsZS5lbmNyeXB0KFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBuYW1lOiAnQUVTLUNCQycsXG4gICAgICAgICAgICAgIC8vRG9uJ3QgcmUtdXNlIGluaXRpYWxpemF0aW9uIHZlY3RvcnMhXG4gICAgICAgICAgICAgIC8vQWx3YXlzIGdlbmVyYXRlIGEgbmV3IGl2IGV2ZXJ5IHRpbWUgeW91ciBlbmNyeXB0IVxuICAgICAgICAgICAgICBpdjogaXZcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhZXNLZXksIC8vZnJvbSBnZW5lcmF0ZUtleSBvciBpbXBvcnRLZXkgYWJvdmVcbiAgICAgICAgICAgIF90aGlzLl91dGY4RW5jb2RlKGRhdGEpIC8vQXJyYXlCdWZmZXIgb2YgZGF0YSB5b3Ugd2FudCB0byBlbmNyeXB0XG4gICAgICAgIClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oZW5jcnlwdGVkKSB7XG4gICAgICAgICAgLy9yZXR1cm5zIGFuIEFycmF5QnVmZmVyIGNvbnRhaW5pbmcgdGhlIGVuY3J5cHRlZCBkYXRhXG4gICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWVuY3J5cHRBRVMnLCBuZXcgVWludDhBcnJheShlbmNyeXB0ZWQpKTtcbiAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZCkpO1xuXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdjcnlwdG8tZW5jcnlwdEFFUycsIGVycik7XG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuXG4gICAgICB9KTtcblxuICAgIH0pO1xuICB9XG5cbiAgZGVjcnlwdEFFUyhrZXksIGRhdGEsIGl2KSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIF90aGlzLl9pbXBvcnRBRVNrZXkoa2V5KS50aGVuKGZ1bmN0aW9uKGFlc0tleSkge1xuXG4gICAgICAgIGNyeXB0by5zdWJ0bGUuZGVjcnlwdChcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbmFtZTogJ0FFUy1DQkMnLFxuICAgICAgICAgICAgICBpdjogaXZcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhZXNLZXksIC8vZnJvbSBnZW5lcmF0ZUtleSBvciBpbXBvcnRLZXkgYWJvdmVcbiAgICAgICAgICAgIGRhdGEgLy9BcnJheUJ1ZmZlciBvZiB0aGUgZGF0YVxuICAgICAgICApXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGRlY3J5cHRlZCkge1xuXG4gICAgICAgICAgbGV0IGRlY29kZWREYXRhID0gX3RoaXMuX3V0ZjhEZWNvZGUobmV3IFVpbnQ4QXJyYXkoZGVjcnlwdGVkKSk7XG4gICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWRlY3J5cHRBRVMnLCBkZWNvZGVkRGF0YSk7XG4gICAgICAgICAgcmVzb2x2ZShkZWNvZGVkRGF0YSk7XG5cbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2NyeXB0by1kZWNyeXB0QUVTJywgZXJyKTtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIH0pO1xuXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBjcmVhdGVzIGEgaGFzaCB1c2luZyB0aGUgSE1BQyBhbGdvcml0aG1cbiAgKiBAcGFyYW0gIHtieXRlQXJyYXl9ICAgIGtleSAgICAgICBrZXkgdG8gYmUgdXNlZCBpbiB0aGUgaG1hY1xuICAqIEBwYXJhbSAge3N0cmluZ30gICAgICBkYXRhICAgICAgIGluZm9ybWF0aW9uIHRvIGJlIGhhc2hlZFxuICAqIEByZXR1cm4gIHtieXRlQXJyYXl9ICAgc2lnbmF0dXJlICByZXN1bHRpbmcgaGFzaFxuICAqL1xuICBoYXNoSE1BQyhrZXksIGRhdGEpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KSB7XG5cbiAgICAgIF90aGlzLl9pbXBvcnRITUFDa2V5KGtleSkudGhlbihmdW5jdGlvbihobWFjS2V5KSB7XG5cbiAgICAgICAgY3J5cHRvLnN1YnRsZS5zaWduKFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ0hNQUMnXG4gICAgICAgIH0sXG4gICAgICAgIGhtYWNLZXksIC8vZnJvbSBnZW5lcmF0ZUtleSBvciBpbXBvcnRLZXkgYWJvdmVcbiAgICAgICAgX3RoaXMuX3V0ZjhFbmNvZGUoZGF0YSkgLy9BcnJheUJ1ZmZlciBvZiBkYXRhIHlvdSB3YW50IHRvIHNpZ25cbiAgICAgICAgKVxuICAgICAgICAudGhlbihmdW5jdGlvbihzaWduYXR1cmUpIHtcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8taGFzaEhNQUMnLCBzaWduYXR1cmUpO1xuXG4gICAgICAgICAgLy9yZXR1cm5zIGFuIEFycmF5QnVmZmVyIGNvbnRhaW5pbmcgdGhlIHNpZ25hdHVyZVxuICAgICAgICAgIHJlc29sdmUobmV3IFVpbnQ4QXJyYXkoc2lnbmF0dXJlKSk7XG5cbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2NyeXB0by1oYXNoSE1BQycsIGVycik7XG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiB2ZXJpZmllcyBhbiBoYXNoIHVzaW5nIHRoZSBITUFDIGFsZ29yaXRobVxuICAqIEBwYXJhbSAge2J5dGVBcnJheX0gICAga2V5ICAgICAgIGtleSB0byBiZSB1c2VkIGluIHRoZSBobWFjXG4gICogQHBhcmFtICB7c3RyaW5nfSAgICAgIGRhdGEgICAgICAgaW5mb3JtYXRpb24gdG8gYmUgaGFzaGVkIHRvIGNvbXBhcmVcbiAgKiBAcGFyYW0gIHtieXRlQXJyYXl9ICBzaWduYXR1cmUgICBoYXNoIHRvIGNvbXBhcmUgd2l0aCB0aGUgcmVjZWl2ZWQgZGF0YVxuICAqIEByZXR1cm4gIHtib29sZWFufSAgIGlzdmFsaWQgICAgIGJvb2xlYW4gc2F5aW5nIGlmIHRoZSBkYXRhIGNvcnJlc3BvbmRzIHRvIHRoZSBoYXNoIHJlY2VpdmVkXG4gICovXG4gIHZlcmlmeUhNQUMoa2V5LCBkYXRhLCBzaWduYXR1cmUpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KSB7XG5cbiAgICAgIF90aGlzLl9pbXBvcnRITUFDa2V5KGtleSkudGhlbihmdW5jdGlvbihobWFjS2V5KSB7XG5cbiAgICAgICAgY3J5cHRvLnN1YnRsZS52ZXJpZnkoXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ0hNQUMnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBobWFjS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlXG4gICAgICAgICAgc2lnbmF0dXJlLCAvL0FycmF5QnVmZmVyIG9mIHRoZSBzaWduYXR1cmVcbiAgICAgICAgICBfdGhpcy5fdXRmOEVuY29kZShkYXRhKSAvL0FycmF5QnVmZmVyIG9mIHRoZSBkYXRhXG4gICAgICAgIClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oaXN2YWxpZCkge1xuICAgICAgICAgIC8vcmV0dXJucyBhIGJvb2xlYW4gb24gd2hldGhlciB0aGUgc2lnbmF0dXJlIGlzIHRydWUgb3Igbm90XG4gICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLXZlcmlmeUhNQUMnLCBpc3ZhbGlkKTtcbiAgICAgICAgICAoaXN2YWxpZCkgPyByZXNvbHZlKGlzdmFsaWQpIDogcmVqZWN0KGlzdmFsaWQpO1xuXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2NyeXB0by12ZXJpZnlITUFDJywgZXJyKTtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogZ2VuZXJhdGVzIGEgUlNBIHB1YmxpYy9wcml2YXRlIGtleSBwYWlyIHdpdGggYSBtb2R1bHVzIGxlbmd0aCBvZiAyMDQ4IGJpdHNcbiAgKiBAcmV0dXJuICB7SlNPTn0gICBrZXlQYWlyICAgIGpzb24gY29udGFpbmluZyB0aGUgcHVibGljIGFuZCBwcml2YXRlIGtleXNcbiAgKi9cbiAgZ2VuZXJhdGVSU0FLZXlQYWlyKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGtleVBhaXIgPSB7fTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGNyeXB0by5zdWJ0bGUuZ2VuZXJhdGVLZXkoXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdSU0EtUFNTJyxcbiAgICAgICAgbW9kdWx1c0xlbmd0aDogMjA0OCwgLy9jYW4gYmUgMTAyNCwgMjA0OCwgb3IgNDA5NlxuICAgICAgICBwdWJsaWNFeHBvbmVudDogbmV3IFVpbnQ4QXJyYXkoWzB4MDEsIDB4MDAsIDB4MDFdKSxcbiAgICAgICAgaGFzaDoge25hbWU6ICdTSEEtMjU2J30gLy9jYW4gYmUgJ1NIQS0xJywgJ1NIQS0yNTYnLCAnU0hBLTM4NCcsIG9yICdTSEEtNTEyJ1xuICAgICAgfSxcbiAgICAgIHRydWUsIC8vd2hldGhlciB0aGUga2V5IGlzIGV4dHJhY3RhYmxlIChpLmUuIGNhbiBiZSB1c2VkIGluIGV4cG9ydEtleSlcbiAgICAgIFsnc2lnbicsICd2ZXJpZnknXSAvL2NhbiBiZSBhbnkgY29tYmluYXRpb24gb2YgJ3NpZ24nIGFuZCAndmVyaWZ5J1xuXG4gICAgICApLnRoZW4oZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIC8vcmV0dXJucyBhIGtleXBhaXIgb2JqZWN0XG4gICAgICAgIC8vY29uc29sZS5sb2coa2V5KTtcblxuICAgICAgICBjcnlwdG8uc3VidGxlLmV4cG9ydEtleShcbiAgICAgICAgICAnc3BraScsIC8vY2FuIGJlICdqd2snIChwdWJsaWMgb3IgcHJpdmF0ZSksICdzcGtpJyAocHVibGljIG9ubHkpLCBvciAncGtjczgnIChwcml2YXRlIG9ubHkpXG4gICAgICAgICAga2V5LnB1YmxpY0tleSAvL2NhbiBiZSBhIHB1YmxpY0tleSBvciBwcml2YXRlS2V5LCBhcyBsb25nIGFzIGV4dHJhY3RhYmxlIHdhcyB0cnVlXG4gICAgICAgICkudGhlbihmdW5jdGlvbihwdWJsaWNLZXkpIHtcbiAgICAgICAgICAvL3JldHVybnMgdGhlIGV4cG9ydGVkIGtleSBkYXRhXG4gICAgICAgICAga2V5UGFpci5wdWJsaWMgID0gbmV3IFVpbnQ4QXJyYXkocHVibGljS2V5KTtcbiAgICAgICAgICByZXR1cm4gY3J5cHRvLnN1YnRsZS5leHBvcnRLZXkoXG4gICAgICAgICAgICAncGtjczgnLCAvL2NhbiBiZSAnandrJyAocHVibGljIG9yIHByaXZhdGUpLCAnc3BraScgKHB1YmxpYyBvbmx5KSwgb3IgJ3BrY3M4JyAocHJpdmF0ZSBvbmx5KVxuICAgICAgICAgICAga2V5LnByaXZhdGVLZXkgLy9jYW4gYmUgYSBwdWJsaWNLZXkgb3IgcHJpdmF0ZUtleSwgYXMgbG9uZyBhcyBleHRyYWN0YWJsZSB3YXMgdHJ1ZVxuICAgICAgICAgICk7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocHJpdmF0ZUtleSkge1xuICAgICAgICAgIGtleVBhaXIucHJpdmF0ZSAgPSBuZXcgVWludDhBcnJheShwcml2YXRlS2V5KTtcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tZ2VuZXJhdGVSU0FLZXlQYWlyJywga2V5UGFpcik7XG5cbiAgICAgICAgICByZXNvbHZlKGtleVBhaXIpO1xuXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBHZW5lcmF0ZXMgYSAxMjggYml0IHJhbmRvbSB2YWx1ZS5cbiAgKiBAcmV0dXJuIHtieXRlQXJyYXl9ICBhcnJheSAgICByYW5kb20gdmFsdWVcbiAgKi9cbiAgZ2VuZXJhdGVJVigpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IGFycmF5ID0gbmV3ICBVaW50OEFycmF5KDE2KTtcbiAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycmF5KTtcblxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAqIEdlbmVyYXRlcyBhIDI1NiBiaXQgcmFuZG9tIHZhbHVlLiAzMiBiaXRzIGFyZSBleHRyYXRlZCBmcm9tIHRoZSBtYWNoaW5lIHRpbWUsXG4gICogdGhlIHJlbWFpbmluZyBhcmUgZ2VuZXJhdGVkIHJhbmRvbWx5XG4gICogQHJldHVybiB7Ynl0ZUFycmF5fSAgYXJyYXkgICAgcmFuZG9tIHZhbHVlXG4gICovXG4gIGdlbmVyYXRlUmFuZG9tKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgYXJyYXkgPSBuZXcgIFVpbnQ4QXJyYXkoMzIpO1xuICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYXJyYXkpO1xuXG4gICAgbGV0IGRhdGUgPSBEYXRlLm5vdygpO1xuICAgIGxldCBkYXRlRW5jb2RlZCA9IF90aGlzLl91dGY4RW5jb2RlKGRhdGUpO1xuXG4gICAgLy9leHRyYWN0IHRoZSBsZWFzdCBzaWduaWZpY2FudCA0IGJ5dGVzIGluIHRoZSBkYXRlXG4gICAgbGV0IGZpbmFsRGF0ZSA9IGRhdGVFbmNvZGVkLnNsaWNlKGRhdGVFbmNvZGVkLmxlbmd0aCAtIDQsIGRhdGVFbmNvZGVkLmxlbmd0aCk7XG5cbiAgICAvLyBhZGQgaW4gdGhlIGZpcnN0IDQgYnl0ZXMgb2YgdGhlIGFycmF5IHRoZSBieXRlcyBleHRyYWN0ZWQgcHJldmlvdXNseTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykgeyBhcnJheVtpXSA9IGZpbmFsRGF0ZVtpXTsgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAqIGdlbmVyYXRlcyBhIHByZW1hc3RlciBzZWNyZXQgKFBNUykgb2YgNDggYnl0ZXMgKDM4NCBiaXRzKSByYW5kb21seVxuICAqIEByZXR1cm4ge2J5dGVBcnJheX0gIGFycmF5ICAgIHByZW1hc3RlciBzZWNyZXQga2V5XG4gICovXG4gIGdlbmVyYXRlUE1TKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgYXJyYXkgPSBuZXcgVWludDhBcnJheSg0OCk7XG4gICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnJheSk7XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICogZ2VuZXJhdGVzIGEgbWFzdGVyS2V5IHNlY3JldCAoUE1TKSBvZiA0OCBieXRlcyAoMzg0IGJpdHMpIHVzaW5nIHRoZSBwcmVtYXN0ZXIgc2VjcmV0IGFuZFxuICAqIHR3byByYW5kb21zXG4gICogQHJldHVybiB7Ynl0ZUFycmF5fSAgYXJyYXkgICAgbWFzdGVyIHNlY3JldCBrZXkgd2l0aCA0OCBieXRlc1xuICAqL1xuICBnZW5lcmF0ZU1hc3RlclNlY3JldChobWFjS2V5LCBkYXRhKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGxldCBrZXkgPSBuZXcgVWludDhBcnJheSg0OCk7XG4gICAgICBsZXQgc2VlZCA9IGRhdGE7XG5cbiAgICAgIF90aGlzLl9kaWdlc3QoaG1hY0tleSkudGhlbigoZGlnZXN0ZWRLZXkpID0+IHtcblxuICAgICAgICBfdGhpcy5oYXNoSE1BQyhkaWdlc3RlZEtleSwgc2VlZCkudGhlbihmdW5jdGlvbihrZXlwYXJ0MCkge1xuXG4gICAgICAgICAgLy9jb3B5IHRoZSBmaXJzdCAzMiBieXRlcyBpbnRvIHRoZSBrZXlcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDMyOyBpKyspIHsga2V5W2ldID0ga2V5cGFydDBbaV07IH1cbiAgICAgICAgICByZXR1cm4gX3RoaXMuaGFzaEhNQUMoZGlnZXN0ZWRLZXksIHNlZWQgKyBrZXlwYXJ0MCk7XG5cbiAgICAgICAgfSkudGhlbihmdW5jdGlvbihrZXlwYXJ0MSkge1xuXG4gICAgICAgICAgLy9jb3B5IHRoZSBmaXJzdCAxNiBieXRlcyB0byB0aGUga2V5IHJlbWFpbmluZyAxNiBieXRlc1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykgeyBrZXlbaSArIDMyXSA9IGtleXBhcnQxW2ldOyB9XG4gICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWdlbmVyYXRlTWFzdGVyU2VjcmV0Jywga2V5KTtcbiAgICAgICAgICByZXNvbHZlKGtleSk7XG5cbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2NyeXB0by1nZW5lcmF0ZU1hc3RlclNlY3JldCcsIGVycik7XG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIGdlbmVyYXRlcyBib3RoIHVzZXJzIE1BQyBhbmQgZW5jcnlwdGlvbiBrZXlzLiBnZW5lcmF0ZSBhcyBvdXRwdXQgYW4gYXJyYXlcbiAgKiB3aXRoIDQgYnl0ZUFycmF5IGVhY2ggd2l0aCAzMiBieXRlc1xuICAqIEBwYXJhbSAge2J5dGVBcnJheX0gICAgICAgIHNlY3JldCAgICAgICBzZWNyZXQgdG8gYmUgdXNlZCBpbiB0aGUgSE1BQyBmdW5jdGlvblxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIGRhdGEgICAgICAgICBpbmZvcm1hdGlvbiB0byBiZSB1c2VkIGFzIHNlZWRcbiAgKiBAcmV0dXJuIHtBcnJheTxieXRlQXJyYXk+fSBrZXkgICAgICAgICAgYXJyYXkgd2l0aCB0aGUgaW5mb3JtYXRpb24gdG8gZ2VuZXJhdGUga2V5c1xuICAqL1xuICBnZW5lcmF0ZUtleXMoaG1hY0tleSwgZGF0YSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIGxldCBrZXkgPSBbXTtcbiAgICAgIGxldCBzZWVkID0gZGF0YTtcblxuICAgICAgLy8gaXRlcmF0ZSA0IHRpbWVzIHRvIG9idGFpbiBhIDEwMjQga2V5IHNpemVcbiAgICAgIF90aGlzLmhhc2hITUFDKGhtYWNLZXksIHNlZWQpLnRoZW4oZnVuY3Rpb24oa2V5cGFydDApIHtcbiAgICAgICAga2V5LnB1c2goa2V5cGFydDApO1xuICAgICAgICByZXR1cm4gX3RoaXMuaGFzaEhNQUMoaG1hY0tleSwgc2VlZCArIGtleXBhcnQwKTtcblxuICAgICAgfSkudGhlbihmdW5jdGlvbihrZXlwYXJ0MSkge1xuICAgICAgICBrZXkucHVzaChrZXlwYXJ0MSk7XG4gICAgICAgIHJldHVybiBfdGhpcy5oYXNoSE1BQyhobWFjS2V5LCBzZWVkICsga2V5cGFydDEpO1xuXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uKGtleXBhcnQyKSB7XG4gICAgICAgIGtleS5wdXNoKGtleXBhcnQyKTtcbiAgICAgICAgcmV0dXJuIF90aGlzLmhhc2hITUFDKGhtYWNLZXksIHNlZWQgKyBrZXlwYXJ0Mik7XG5cbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24oa2V5cGFydDMpIHtcbiAgICAgICAga2V5LnB1c2goa2V5cGFydDMpO1xuXG4gICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1nZW5lcmF0ZUtleXMnLCBrZXkpO1xuICAgICAgICByZXNvbHZlKGtleSk7XG5cbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tZ2VuZXJhdGVLZXlzJywgZXJyKTtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9KTtcblxuICAgICAgLy9jb25zb2xlLmxvZyhobWFjS2V5LCBkYXRhKTtcbiAgICB9KTtcbiAgfVxuXG4gIF9pbXBvcnRSU0FzaWduS2V5KHByaXZLZXkpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoXG4gICAgICAgICAgJ3BrY3M4JywgLy9jYW4gYmUgJ2p3aycgKHB1YmxpYyBvciBwcml2YXRlKSwgJ3Nwa2knIChwdWJsaWMgb25seSksIG9yICdwa2NzOCcgKHByaXZhdGUgb25seSlcbiAgICAgICAgICBwcml2S2V5LFxuICAgICAgICAgIHsgICAvL3RoZXNlIGFyZSB0aGUgYWxnb3JpdGhtIG9wdGlvbnNcbiAgICAgICAgICAgIG5hbWU6ICdSU0FTU0EtUEtDUzEtdjFfNScsXG4gICAgICAgICAgICBoYXNoOiB7bmFtZTogJ1NIQS0yNTYnfSAvL2NhbiBiZSAnU0hBLTEnLCAnU0hBLTI1NicsICdTSEEtMzg0Jywgb3IgJ1NIQS01MTInXG4gICAgICAgICAgfSxcbiAgICAgICAgICB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpXG4gICAgICAgICAgWydzaWduJ10gLy8ndmVyaWZ5JyBmb3IgcHVibGljIGtleSBpbXBvcnQsICdzaWduJyBmb3IgcHJpdmF0ZSBrZXkgaW1wb3J0c1xuICAgICAgKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocHJpdmF0ZUtleSkge1xuICAgICAgICAvL3JldHVybnMgYSBwdWJsaWNLZXkgKG9yIHByaXZhdGVLZXkgaWYgeW91IGFyZSBpbXBvcnRpbmcgYSBwcml2YXRlIGtleSlcbiAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLV9pbXBvcnRSU0FzaWduS2V5JywgcHJpdmF0ZUtleSk7XG4gICAgICAgIHJlc29sdmUocHJpdmF0ZUtleSk7XG5cbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdjcnlwdG8tX2ltcG9ydFJTQXNpZ25LZXknLCBlcnIpO1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgX2ltcG9ydFJTQXZlcmlmeUtleShwdWJLZXkpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoXG4gICAgICAgICAgJ3Nwa2knLCAvL2NhbiBiZSAnandrJyAocHVibGljIG9yIHByaXZhdGUpLCAnc3BraScgKHB1YmxpYyBvbmx5KSwgb3IgJ3BrY3M4JyAocHJpdmF0ZSBvbmx5KVxuICAgICAgICAgIHB1YktleSxcbiAgICAgICAgICB7ICAgLy90aGVzZSBhcmUgdGhlIGFsZ29yaXRobSBvcHRpb25zXG4gICAgICAgICAgICBuYW1lOiAnUlNBU1NBLVBLQ1MxLXYxXzUnLFxuICAgICAgICAgICAgaGFzaDoge25hbWU6ICdTSEEtMjU2J30gLy9jYW4gYmUgJ1NIQS0xJywgJ1NIQS0yNTYnLCAnU0hBLTM4NCcsIG9yICdTSEEtNTEyJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdHJ1ZSwgLy93aGV0aGVyIHRoZSBrZXkgaXMgZXh0cmFjdGFibGUgKGkuZS4gY2FuIGJlIHVzZWQgaW4gZXhwb3J0S2V5KVxuICAgICAgICAgIFsndmVyaWZ5J10gLy8ndmVyaWZ5JyBmb3IgcHVibGljIGtleSBpbXBvcnQsICdzaWduJyBmb3IgcHJpdmF0ZSBrZXkgaW1wb3J0c1xuICAgICAgKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocHVibGljS2V5KSB7XG4gICAgICAgIC8vcmV0dXJucyBhIHB1YmxpY0tleSAob3IgcHJpdmF0ZUtleSBpZiB5b3UgYXJlIGltcG9ydGluZyBhIHByaXZhdGUga2V5KVxuICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tX2ltcG9ydFJTQXZlcmlmeUtleScsIHB1YmxpY0tleSk7XG4gICAgICAgIHJlc29sdmUocHVibGljS2V5KTtcblxuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ2NyeXB0by1faW1wb3J0UlNBdmVyaWZ5S2V5JywgZXJyKTtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIF9pbXBvcnRSU0FlbmNyeXB0S2V5KHB1YktleSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBjcnlwdG8uc3VidGxlLmltcG9ydEtleShcbiAgICAgICAgICAnc3BraScsIC8vY2FuIGJlICdqd2snIChwdWJsaWMgb3IgcHJpdmF0ZSksICdzcGtpJyAocHVibGljIG9ubHkpLCBvciAncGtjczgnIChwcml2YXRlIG9ubHkpXG4gICAgICAgICAgcHViS2V5LFxuICAgICAgICAgIHsgICAvL3RoZXNlIGFyZSB0aGUgYWxnb3JpdGhtIG9wdGlvbnNcbiAgICAgICAgICAgIG5hbWU6ICdSU0EtT0FFUCcsXG4gICAgICAgICAgICBoYXNoOiB7bmFtZTogJ1NIQS0yNTYnfSAvL2NhbiBiZSAnU0hBLTEnLCAnU0hBLTI1NicsICdTSEEtMzg0Jywgb3IgJ1NIQS01MTInXG4gICAgICAgICAgfSxcbiAgICAgICAgICB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpXG4gICAgICAgICAgWydlbmNyeXB0J10gLy8nZW5jcnlwdCcgb3IgJ3dyYXBLZXknIGZvciBwdWJsaWMga2V5IGltcG9ydCBvclxuICAgICAgICAgICAgICAgICAgICAgIC8vJ2RlY3J5cHQnIG9yICd1bndyYXBLZXknIGZvciBwcml2YXRlIGtleSBpbXBvcnRzXG4gICAgICApXG4gICAgICAudGhlbihmdW5jdGlvbihwdWJsaWNLZXkpIHtcbiAgICAgICAgLy9yZXR1cm5zIGEgcHVibGljS2V5IChvciBwcml2YXRlS2V5IGlmIHlvdSBhcmUgaW1wb3J0aW5nIGEgcHJpdmF0ZSBrZXkpXG4gICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1faW1wb3J0UlNBZW5jcnlwdEtleScsIHB1YmxpY0tleSk7XG4gICAgICAgIHJlc29sdmUocHVibGljS2V5KTtcblxuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ2NyeXB0by1faW1wb3J0UlNBZW5jcnlwdEtleScsIGVycik7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBfaW1wb3J0UlNBZGVjcnlwdEtleShwcml2S2V5KSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFxuICAgICAgICAgICdwa2NzOCcsIC8vY2FuIGJlICdqd2snIChwdWJsaWMgb3IgcHJpdmF0ZSksICdzcGtpJyAocHVibGljIG9ubHkpLCBvciAncGtjczgnIChwcml2YXRlIG9ubHkpXG4gICAgICAgICAgcHJpdktleSxcbiAgICAgICAgICB7ICAgLy90aGVzZSBhcmUgdGhlIGFsZ29yaXRobSBvcHRpb25zXG4gICAgICAgICAgICBuYW1lOiAnUlNBLU9BRVAnLFxuICAgICAgICAgICAgaGFzaDoge25hbWU6ICdTSEEtMjU2J30gLy9jYW4gYmUgJ1NIQS0xJywgJ1NIQS0yNTYnLCAnU0hBLTM4NCcsIG9yICdTSEEtNTEyJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdHJ1ZSwgLy93aGV0aGVyIHRoZSBrZXkgaXMgZXh0cmFjdGFibGUgKGkuZS4gY2FuIGJlIHVzZWQgaW4gZXhwb3J0S2V5KVxuICAgICAgICAgIFsnZGVjcnlwdCddIC8vJ2VuY3J5cHQnIG9yICd3cmFwS2V5JyBmb3IgcHVibGljIGtleSBpbXBvcnQgb3JcbiAgICAgICAgICAgICAgICAgICAgICAvLydkZWNyeXB0JyBvciAndW53cmFwS2V5JyBmb3IgcHJpdmF0ZSBrZXkgaW1wb3J0c1xuICAgICAgKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocHJpdmF0ZUtleSkge1xuICAgICAgICAvL3JldHVybnMgYSBwdWJsaWNLZXkgKG9yIHByaXZhdGVLZXkgaWYgeW91IGFyZSBpbXBvcnRpbmcgYSBwcml2YXRlIGtleSlcbiAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLV9pbXBvcnRSU0FkZWNyeXB0S2V5JywgcHJpdmF0ZUtleSk7XG4gICAgICAgIHJlc29sdmUocHJpdmF0ZUtleSk7XG5cbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdjcnlwdG8tX2ltcG9ydFJTQWRlY3J5cHRLZXknLCBlcnIpO1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgY29uY2F0UE1Td2l0aFJhbmRvbXMocG1zLCB0b1JhbmRvbSwgZnJvbVJhbmRvbSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgZmluYWxLZXkgPSBuZXcgVWludDhBcnJheShwbXMubGVuZ3RoICsgdG9SYW5kb20ubGVuZ3RoICsgZnJvbVJhbmRvbS5sZW5ndGgpO1xuXG4gICAgLy8gYWRkIFByZW1hc3RlcktleVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBmaW5hbEtleVtpXSA9IHBtc1tpXTtcbiAgICB9XG5cbiAgICAvL2FkZCB0byByYW5kb21cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvUmFuZG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgICBmaW5hbEtleVtpICsgcG1zLmxlbmd0aF0gPSBwbXNbaV07XG4gICAgfVxuXG4gICAgLy9hZGQgZnJvbSByYW5kb21cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZyb21SYW5kb20ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZpbmFsS2V5W2kgKyBwbXMubGVuZ3RoICsgdG9SYW5kb20ubGVuZ3RoXSA9IHBtc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmluYWxLZXk7XG4gIH1cblxuICBfZ2VuZXJhdGUyNTZiaXRLZXkoKSB7XG4gICAgbGV0IGFycmF5ID0gbmV3ICBVaW50OEFycmF5KDMyKTtcbiAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycmF5KTtcblxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAqIGltcG9ydHMgdGhlIHNlY3JldCB0byB0aGUgSE1BQyBmdW5jdGlvblxuICAqIEBwYXJhbSAge2J5dGVBcnJheX0gICBhcnJheUJ1ZmZlciAgICAgYnl0ZXMgdG8gaW1wb3J0IGFzIGtleVxuICAqIEByZXR1cm4ge0pTT059ICAgICAgIGtleSAgICAgICAgICAgICAga2V5IHJlYWR5IHRvIGJlIHVzZWQgaW4gdGhlIEhNQUMgY3J5cHRvZ3JhcGhpYyBmdW5jdGlvblxuICAqL1xuICBfaW1wb3J0SE1BQ2tleShhcnJheUJ1ZmZlcikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIF90aGlzLl9kaWdlc3QoYXJyYXlCdWZmZXIpLnRoZW4oKGtleSkgPT4ge1xuXG4gICAgICAgIGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFxuICAgICAgICAncmF3JywgLy9jYW4gYmUgJ2p3aycgb3IgJ3JhdydcbiAgICAgICAga2V5LFxuICAgICAgICB7ICAgLy90aGlzIGlzIHRoZSBhbGdvcml0aG0gb3B0aW9uc1xuICAgICAgICAgIG5hbWU6ICdITUFDJyxcbiAgICAgICAgICBoYXNoOiB7bmFtZTogJ1NIQS0yNTYnfSwgLy9jYW4gYmUgJ1NIQS0xJywgJ1NIQS0yNTYnLCAnU0hBLTM4NCcsIG9yICdTSEEtNTEyJ1xuICAgICAgICAgIGxlbmd0aDogMjU2IC8vb3B0aW9uYWwsIGlmIHlvdSB3YW50IHlvdXIga2V5IGxlbmd0aCB0byBkaWZmZXIgZnJvbSB0aGUgaGFzaCBmdW5jdGlvbidzIGJsb2NrIGxlbmd0aFxuICAgICAgICB9LFxuICAgICAgICB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpXG4gICAgICAgIFsnc2lnbicsICd2ZXJpZnknXSAvL2NhbiBiZSBhbnkgY29tYmluYXRpb24gb2YgJ3NpZ24nIGFuZCAndmVyaWZ5J1xuICAgICAgICApLnRoZW4oZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgLy9yZXR1cm5zIHRoZSBzeW1tZXRyaWMga2V5XG4gICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLV9pbXBvcnRITUFDa2V5Jywga2V5KTtcbiAgICAgICAgICByZXNvbHZlKGtleSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIF9kaWdlc3QodmFsdWUpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgY3J5cHRvLnN1YnRsZS5kaWdlc3QoXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ1NIQS0yNTYnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB2YWx1ZSAvL1RoZSBkYXRhIHlvdSB3YW50IHRvIGhhc2ggYXMgYW4gQXJyYXlCdWZmZXJcbiAgICAgIClcbiAgICAgIC50aGVuKGZ1bmN0aW9uKGhhc2gpIHtcbiAgICAgICAgLy9yZXR1cm5zIHRoZSBoYXNoIGFzIGFuIEFycmF5QnVmZmVyXG4gICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1kaWdlc3QnLCBuZXcgVWludDhBcnJheShoYXNoKSk7XG4gICAgICAgIHJlc29sdmUobmV3IFVpbnQ4QXJyYXkoaGFzaCkpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH0pO1xuXG4gICAgfSk7XG4gIH1cblxuICBfaW1wb3J0QUVTa2V5KGFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoXG4gICAgICAgICAgJ3JhdycsIC8vY2FuIGJlICdqd2snIG9yICdyYXcnXG4gICAgICAgICAgYXJyYXlCdWZmZXIsXG4gICAgICAgICAgeyAgIC8vdGhpcyBpcyB0aGUgYWxnb3JpdGhtIG9wdGlvbnNcbiAgICAgICAgICAgIG5hbWU6ICdBRVMtQ0JDJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdHJ1ZSwgLy93aGV0aGVyIHRoZSBrZXkgaXMgZXh0cmFjdGFibGUgKGkuZS4gY2FuIGJlIHVzZWQgaW4gZXhwb3J0S2V5KVxuICAgICAgICAgIFsnZW5jcnlwdCcsICdkZWNyeXB0J10gLy9jYW4gYmUgJ2VuY3J5cHQnLCAnZGVjcnlwdCcsICd3cmFwS2V5Jywgb3IgJ3Vud3JhcEtleSdcbiAgICAgIClcbiAgICAgIC50aGVuKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAvL3JldHVybnMgdGhlIHN5bW1ldHJpYyBrZXlcbiAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWltcG9ydEFFU2tleScsIGtleSk7XG4gICAgICAgIHJlc29sdmUoa2V5KTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ2NyeXB0by1pbXBvcnRBRVNrZXknLCBlcnIpO1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgX3V0ZjhFbmNvZGUocykge1xuICAgIHJldHVybiBuZXcgVGV4dEVuY29kZXIoJ3V0Zi04JykuZW5jb2RlKHMpO1xuICB9XG5cbiAgX3V0ZjhEZWNvZGUocykge1xuICAgIHJldHVybiBuZXcgVGV4dERlY29kZXIoJ3V0Zi04JykuZGVjb2RlKHMpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENyeXB0bztcbiIsIi8qKlxuKiBmYWtlIGNsYXNzIGZvciB0aGUgZ3VpIHRvIHNlbGVjdCB0aGUgaWRlbnRpdHksXG4qIFRPRE8gcmVwbGFjZSB3aXRoIHRoZSBwcm9wZXIgaWRlbnRpdHkgR1VJXG4qXG4qL1xuY2xhc3MgR3VpRmFrZSB7XG5cbiAgY29uc3RydWN0b3IodXJsLCBtZXNzYWdlQnVzKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLl91cmwgPSB1cmw7XG4gICAgX3RoaXMuX3dhaXRUaW1lID0gMTAwMDA7XG4gICAgX3RoaXMuX21lc3NhZ2VCdXMgPSBtZXNzYWdlQnVzO1xuXG4gICAgX3RoaXMuX21lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoX3RoaXMuX3VybCwgbXNnID0+IHtcblxuICAgICAgbGV0IGlkZW50aXRpZXMgPSBtc2cuYm9keS52YWx1ZTtcblxuICAgICAgbGV0IHJlcGx5TXNnID0ge2lkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLCBib2R5OiB7dmFsdWU6IGlkZW50aXRpZXNbMF19fTtcblxuICAgICAgLy8gdG8gdGVzdCBvbiB0aGUgaWRlbnRpdHkgc2lkZSB0aGUgbGlzdGVuZXIgd2l0aG91dCB0aGUgdGltZW91dFxuICAgICAgLy8gY2FuIHJlcHJlc2VudCB0aGUgdGltZSB0aGUgdXNlciB0YWtlcyB0byBjaG9vc2UgYW5kIGlkZW50aXR5XG4gICAgICBpZiAobXNnLmJvZHkudmFsdWUgPT09ICd3YWl0Jykge1xuXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHJlcGx5TXNnKTtcbiAgICAgICAgfSwgX3RoaXMuX3dhaXRUaW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHJlcGx5TXNnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEd1aUZha2U7XG4iLCIvKipcbiogVGhlIElkZW50aXR5IERhdGEgTW9kZWwgaXMgdXNlZCB0byBtb2RlbCB0aGUgcmVUSElOSyBVc2VyIGVudGl0eS4gVGhlIElkZW50aXR5IGRhdGEgbW9kZWwgaXMgaGFuZGxlZCBieSBJZGVudGl0eSBNYW5hZ2VtZW50IGZ1bmN0aW9uYWxpdHkuXG4qXG4qL1xuY2xhc3MgSWRlbnRpdHkge1xuXG4gIGNvbnN0cnVjdG9yKGd1aWQsIHR5cGUpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuZ3VpZCA9IGd1aWQ7XG4gICAgX3RoaXMudHlwZSA9IHR5cGU7XG4gICAgX3RoaXMuaWRlbnRpZmllcnNMaXN0ID0ge307XG5cbiAgfVxuXG4gIGFkZElkZW50aXR5KGlkZW50aWZpZXIpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGxldCBpZGVudGl0eUluZm9ybWF0aW9uID0ge1xuICAgICAgaWRBc3NlcnRpb246ICcnLFxuICAgICAgc2VydmljZUFkZHJlc3M6ICcnLFxuICAgICAgYXV0aGVudGljYXRpb25EYXRhOiAnJyxcbiAgICAgIGF1dGhvcmlzYXRpb25EYXRhOiAnJyxcbiAgICAgIHVzZXJQcm9maWxlOiAnJ1xuICAgIH07XG4gICAgX3RoaXMuaWRlbnRpZmllcnNMaXN0W2lkZW50aWZpZXJdID0gaWRlbnRpdHlJbmZvcm1hdGlvbjtcbiAgfVxuXG4gIGFkZElkQXNzZXJ0aW9uKGlkZW50aWZpZXIsIGFzc2VydGlvbiwgaWRwLCBzY29wZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgbmV3SWRBc3NlcnRpb24gPSBuZXcgSWRBc3NlcnRpb24oYXNzZXJ0aW9uLCBpZHAsIHNjb3BlKTtcblxuICAgIF90aGlzLmlkQXNzZXJ0aW9uTGlzdC5wdXNoKG5ld0lkQXNzZXJ0aW9uKTtcbiAgfVxufVxuXG5jbGFzcyBJZEFzc2VydGlvbiB7XG5cbiAgY29uc3RydWN0b3IoYXNzZXJ0aW9uLCBpZHAsIHNjb3BlKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLmFzc2VydGlvbiA9IGFzc2VydGlvbjtcbiAgICBfdGhpcy5pZHAgPSBpZHA7XG4gICAgX3RoaXMuc2NvcGUgPSBzY29wZTtcbiAgfVxuXG59XG5cbmNsYXNzIElkVmFsaWRhdGlvbiB7XG5cbiAgY29uc3RydWN0b3IoaWRlbnRpdHksIGNvbnRlbnRzKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBfdGhpcy5pZGVudGl0eSA9IGlkZW50aXR5O1xuICAgIF90aGlzLmNvbnRlbnRzID0gY29udGVudHM7XG4gIH1cblxuICB2YWxpZGF0ZXMoaWRlbnRpdHksIGNvbnRlbnRzKSB7XG4gICAgLy9UT0RPIGltcGxlbWVudCB0aGUgbG9naWNcblxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IElkZW50aXR5O1xuIiwiXG5pbXBvcnQge2RpdmlkZVVSTCwgZ2V0VXNlclVSTEZyb21FbWFpbCwgZ2V0VXNlckVtYWlsRnJvbVVSTCwgaXNEYXRhT2JqZWN0VVJMfSBmcm9tICcuLi91dGlscy91dGlscy5qcyc7XG5pbXBvcnQgSWRlbnRpdHkgZnJvbSAnLi9JZGVudGl0eSc7XG5pbXBvcnQgQ3J5cHRvIGZyb20gJy4vQ3J5cHRvJztcbmltcG9ydCBHdWlGYWtlIGZyb20gJy4vR3VpRmFrZSc7XG5cbi8qKlxuKlxuKiBUaGUgSWRlbnRpdHkgTW9kdWxlIChJZCBNb2R1bGUpIGlzIHRoZSBjb21wb25lbnQgcmVzcG9uc2libGUgZm9yIGhhbmRsaW5nIHRoZVxuKiB1c2VyIGlkZW50aXR5IGFuZCB0aGUgYXNzb2NpYXRpb24gb2YgdGhpcyBpZGVudGl0eSB3aXRoIHRoZSBIeXBlcnR5IGluc3RhbmNlcyxcbiogaW4gb3JkZXIgdG8gbWFrZSBIeXBlcnR5IGluc3RhbmNlcyBpZGVudGlmaWFibGUuIFRoZSBpZGVudGl0eSBpbiB0aGUgcmVUSElOSyBwcm9qZWN0XG4qIGlzIG5vdCBmaXhlZCB0byBhIHVuaXF1ZSBJZGVudGl0eSBTZXJ2aWNlIFByb3ZpZGVyLCBidXQgb2J0YWluZWQgdGhyb3VnaCBzZXZlcmFsXG4qIGRpZmZlcmVudCBJZGVudGl0eSBzb3VyY2VzLiBXaXRoIHRoaXMgYXBwcm9hY2gsIHRoZSBJZCBNb2R1bGUgcHJvdmlkZXMgdG8gdGhlIHVzZXIgdGhlXG4qIG9wdGlvbiB0byBjaG9vc2UgdGhlIHByZWZlcnJlZCBtZXRob2QgZm9yIGF1dGhlbnRpY2F0aW9uLlxuKiBUaGlzIG1vZHVsZSB3aWxsIHRodXMgYWJsZSB0byBzdXBwb3J0IG11bHRpcGxlIElkZW50aXR5IGFjcXVpc2l0aW9uIG1ldGhvZHMsXG4qIHN1Y2ggYXMgT3BlbklEIGNvbm5lY3QgMS4wLCBLZXJiZXJvcyBTeXN0ZW0sIG9yIGF1dGhlbnRpY2F0aW9uIHRocm91Z2ggc21hcnQgY2FyZHMuXG4qIEZvciBleGFtcGxlLCBhIHVzZXIgd2l0aCBhIEdvb2dsZSBhY2NvdW50IGNhbiB1c2UgdGhlIEdvb2dsZSBhcyBhbiBJZGVudGl0eSBQcm92aWRlciB0byBwcm92aWRlIElkZW50aXR5IFRva2VucyxcbiogIHdoaWNoIGNhbiBiZSB1c2VkIGJ5IHRoZSBJZGVudGl0eSBNb2R1bGUgdG8gYXNzb2NpYXRlIGl0IHdpdGggYSBIeXBlcnR5IGluc3RhbmNlLlxuKlxuKiBUaGUgSWRlbnRpdHkgTW9kdWxlIHVzZXMgYSBub2RlIHBhY2thZ2UsIHRoZSBIZWxsb0pTLCB3aGljaCBpcyBhIGNsaWVudC1zaWRlIEphdmFTY3JpcHQgQVBJIGZvciBhdXRoZW50aWNhdGlvblxuKiB0aGF0IGZhY2lsaXRhdGVzIHRoZSByZXF1ZXN0cyBmb3IgdGhlIE9wZW5JRCBjb25uZWN0IHByb3RvY29sLiBUaGlzIG1ldGhvZCBhbGxvd3MgZm9yIHNvbWUgYWJzdHJhY3Rpb25cbiogd2hlbiBtYWtpbmcgcmVxdWVzdHMgZm9yIGRpZmZlcmVudCBJZGVudGl0eSBQcm92aWRlcnMsIHN1Y2ggYXMgT3BlbklEIGNvbm5lY3QgdXNlZCBieSBHb29nbGUsIEZhY2Vib29rLCBNaWNyb3NvZnQsIGZvciBleGFtcGxlLlxuKlxuKiBXaGVuIGEgcmVxdWVzdCBmb3IgYSB1c2VyIGlkZW50aXR5IGlzIG1hZGUgdXNpbmcgdGhlIG1ldGhvZCBsb2dpbldpdGhSUChpZGVudGlmaWVyLCBzY29wZSksXG4qIHRoaXMgbWV0aG9kIHdpbGwgYW5hbHlzZSB0aGUgSWRlbnRpdHkgUHJvdmlkZXIgY2hvc2VuIHRvIG9idGFpbiBhbiBpZGVudGl0eSBhbmQgd2lsbCB1c2UgdGhlIEhlbGxvSlMgbm9kZSBwYWNrYWdlXG4qIHdpdGggdGhlIHNlbGVjdGVkIElkZW50aXR5IFByb3ZpZGVyIGFuZCBpZGVudGl0eSBzY29wZS4gQWZ0ZXIgdGhlIEhlbGxvSlMgcmVxdWVzdCBmb3IgYW4gQWNjZXNzIFRva2VuXG4qIHRvIHRoZSBJZGVudGl0eSBQcm92aWRlcnMsIHRoZSB1c2VyIHdpbGwgYmUgcHJvbXB0ZWQgdG8gYXV0aGVudGljYXRlIHRvd2FyZHMgdGhlIElkZW50aXR5IFByb3ZpZGVyLlxuKiBVcG9uIHJlY2VpdmluZyB0aGUgQWNjZXNzIFRva2VuLCB0aGlzIHRva2VuIGlzIHZhbGlkYXRlZCB3aXRoIGEgUkVTVGZ1bCB3ZWIgc2VydmljZSByZXF1ZXN0IHRvIGFuIGVuZHBvaW50XG4qIG9uIHRoZSBJZGVudGl0eSBQcm92aWRlciBBdXRob3JpemF0aW9uIFNlcnZlciwgYW5kIGFmdGVyIHRoZSB2YWxpZGF0aW9uIGlzIGRvbmUsXG4qIGFuIElEIHRva2VuIGlzIG9idGFpbmVkIHdpdGggdGhlIGluZm9ybWF0aW9uIGFjY29yZGluZyB0byB0aGUgc2NvcGUgcmVxdWlyZWQuXG4qIFRoaXMgSUQgdG9rZW4gaXMgdGhlbiBwcmVzZXJ2ZWQgaW4gdGhpcyBtb2R1bGUgdGhhdCBjYW4gb2J0YWluZWQgdGhyb3VnaCB0aGUgZ2V0SWRlbnRpdGllcygpXG4qIGFuZCBpcyBwYXNzZWQgYXMgcmV0dXJuIHZhbHVlIG9mIHRoZSBsb2dpbldpdGhSUCBmdW5jdGlvbi4gVGhlIG1ldGhvZHMgZ2VuZXJhdGVBc3NlcnRpb24gYW5kIHZhbGlkYXRlQXNzZXJ0aW9uIGhhdmUgbm90IHlldCBiZWVuIGRldmVsb3BlZC5cbipcbiovXG5jbGFzcyBJZGVudGl0eU1vZHVsZSB7XG5cbiAgLyoqXG4gICogVGhpcyBpcyB0aGUgY29uc3RydWN0b3IgdG8gaW5pdGlhbGlzZSB0aGUgSWRlbnRpdHkgTW9kdWxlIGl0IGRvZXMgbm90IHJlcXVpcmUgYW55IGlucHV0LlxuICAqL1xuICBjb25zdHJ1Y3RvcihydW50aW1lVVJMKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGlmICghcnVudGltZVVSTCkgdGhyb3cgbmV3IEVycm9yKCdydW50aW1lVVJMIGlzIG1pc3NpbmcuJyk7XG5cbiAgICBfdGhpcy5fcnVudGltZVVSTCA9IHJ1bnRpbWVVUkw7XG4gICAgX3RoaXMuX2lkbVVSTCA9IF90aGlzLl9ydW50aW1lVVJMICsgJy9pZG0nO1xuICAgIF90aGlzLl9ndWlVUkwgPSBfdGhpcy5fcnVudGltZVVSTCArICcvaWRlbnRpdHktZ3VpJztcblxuICAgIF90aGlzLl9kb21haW4gPSBkaXZpZGVVUkwoX3RoaXMuX3J1bnRpbWVVUkwpLmRvbWFpbjtcblxuICAgIC8vdG8gc3RvcmUgaXRlbXMgd2l0aCB0aGlzIGZvcm1hdDoge2lkZW50aXR5OiBpZGVudGl0eVVSTCwgdG9rZW46IHRva2VuSUR9XG4gICAgX3RoaXMuaWRlbnRpdGllcyA9IFtdO1xuICAgIGxldCBuZXdJZGVudGl0eSA9IG5ldyBJZGVudGl0eSgnZ3VpZCcsJ0hVTUFOJyk7XG4gICAgX3RoaXMuaWRlbnRpdHkgPSBuZXdJZGVudGl0eTtcbiAgICBfdGhpcy5jcnlwdG8gPSBuZXcgQ3J5cHRvKCk7XG5cbiAgICAvL3N0b3JlcyB0aGUgYXNzb2NpYXRpb24gb2YgdGhlIGRhdGFPYmplY3QgYW5kIHRoZSBIeXBlcnR5IHJlZ2lzdGVyZWQgd2l0aGluXG4gICAgX3RoaXMuZGF0YU9iamVjdHNJZGVudGl0eSA9IHt9O1xuXG4gICAgLy8gaGFzaFRhYmxlIHRvIHN0b3JlIGFsbCB0aGUgY3J5cHRvIGluZm9ybWF0aW9uIGJldHdlZW4gdHdvIGh5cGVydGllc1xuICAgIF90aGlzLmNoYXRLZXlzID0ge307XG5cbiAgICAvLyBoYXNoVGFibGUgdG8gc3RvcmUgdGhlIHN5bW1ldHJpYyBrZXlzIHRvIGJlIHVzZWQgaW4gdGhlIGNoYXQgZ3JvdXBcbiAgICBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXMgPSB7fTtcblxuICAgIC8vZmFpbHNhZmUgdG8gZW5hYmxlL2Rpc2FibGUgYWxsIHRoZSBjcmlwdG9ncmFwaGljIGZ1bmN0aW9uc1xuICAgIF90aGlzLmlzVG9Vc2VFbmNyeXB0aW9uID0gdHJ1ZTtcblxuICAgIC8vIHZlcmlmaWNhdGlvbiBvZiBub2RlSlMsIGFuZCBpbiBjYXNlIGl0IGlzIG5vZGVKUyB0aGVuIGRpc2FibGUgZW5jcnlwdGlvblxuICAgIC8vIFRPRE8gaW1wcm92ZSBsYXRlciwgdGhpcyBleGlzdHMgYmVjYXVzZSB0aGUgY3J5cHRvIGxpYiB1c2VzIGJyb3dzZXIgY3J5cHRvZ3JhcGhpYyBtZXRob2RzXG4gICAgLy9fdGhpcy5pc1RvVXNlRW5jcnlwdGlvbiA9ICh3aW5kb3cpID8gdHJ1ZSA6IGZhbHNlO1xuXG4gIH1cblxuICBpZGVudGl0eVJlcXVlc3RUb0dVSShpZGVudGl0aWVzKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xuXG4gICAgICBsZXQgbWVzc2FnZSA9IHt0eXBlOidjcmVhdGUnLCB0bzogX3RoaXMuX2d1aVVSTCwgZnJvbTogX3RoaXMuX2lkbVVSTCwgYm9keToge3ZhbHVlOiBpZGVudGl0aWVzfX07XG5cbiAgICAgIGxldCBpZCA9IF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuXG4gICAgICAvL2FkZCBsaXN0ZW5lciB3aXRob3V0IHRpbW91dFxuICAgICAgX3RoaXMuX21lc3NhZ2VCdXMuYWRkUmVzcG9uc2VMaXN0ZW5lcihfdGhpcy5faWRtVVJMLCBpZCwgbXNnID0+IHtcbiAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucmVtb3ZlUmVzcG9uc2VMaXN0ZW5lcihfdGhpcy5faWRtVVJMLCBpZCk7XG5cbiAgICAgICAgaWYgKG1zZy5ib2R5LmNvZGUgPT09IDIwMCkge1xuICAgICAgICAgIGxldCBzZWxlY3RlZElkZW50aXR5ID0gbXNnLmJvZHkudmFsdWU7XG5cbiAgICAgICAgICBjb25zb2xlLmxvZygnc2VsZWN0ZWRJZGVudGl0eTogJywgc2VsZWN0ZWRJZGVudGl0eS5pZGVudGl0eSk7XG4gICAgICAgICAgcmVzb2x2ZShzZWxlY3RlZElkZW50aXR5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoJ2Vycm9yIG9uIHJlcXVlc3RpbmcgYW4gaWRlbnRpdHkgdG8gdGhlIEdVSScpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIHJldHVybiB0aGUgbWVzc2FnZUJ1cyBpbiB0aGlzIFJlZ2lzdHJ5XG4gICogQHBhcmFtIHtNZXNzYWdlQnVzfSAgICAgICAgICAgbWVzc2FnZUJ1c1xuICAqL1xuICBnZXQgbWVzc2FnZUJ1cygpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBfdGhpcy5fbWVzc2FnZUJ1cztcbiAgfVxuXG4gIC8qKlxuICAqIFNldCB0aGUgbWVzc2FnZUJ1cyBpbiB0aGlzIFJlZ2lzdHJ5XG4gICogQHBhcmFtIHtNZXNzYWdlQnVzfSAgICAgICAgICAgbWVzc2FnZUJ1c1xuICAqL1xuICBzZXQgbWVzc2FnZUJ1cyhtZXNzYWdlQnVzKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBfdGhpcy5fbWVzc2FnZUJ1cyA9IG1lc3NhZ2VCdXM7XG5cbiAgICAvL1RPRE8gcmVtb3ZlIGxhdGVyIHdpdGggdGhlIHByb3BlciBHVUkgbWVzc2FnZSBsaXN0ZW5lclxuICAgIGxldCBndWlGYWtlID0gbmV3IEd1aUZha2UoX3RoaXMuX2d1aVVSTCwgX3RoaXMuX21lc3NhZ2VCdXMpO1xuICAgIF90aGlzLmd1aUZha2UgPSBndWlGYWtlO1xuICB9XG5cbiAgLyoqXG4gICogcmV0dXJuIHRoZSByZWdpc3RyeSBpbiB0aGlzIGlkTW9kdWxlXG4gICogQHBhcmFtIHtyZWdpc3RyeX0gICAgICAgICAgIHJlZ2lzdHJ5XG4gICovXG4gIGdldCByZWdpc3RyeSgpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBfdGhpcy5fcmVnaXN0cnk7XG4gIH1cblxuICAvKipcbiAgKiBTZXQgdGhlIHJlZ2lzdHJ5IGluIHRoaXMgaWRNb2R1bGVcbiAgKiBAcGFyYW0ge3JlZ2lzdHJ5fSAgICAgcmVnXG4gICovXG4gIHNldCByZWdpc3RyeShyZWdpc3RyeSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgX3RoaXMuX3JlZ2lzdHJ5ID0gcmVnaXN0cnk7XG4gIH1cblxuICAvKipcbiAgKiBGdW5jdGlvbiB0byByZXR1cm4gYWxsIHRoZSBpZGVudGl0aWVzIHJlZ2lzdGVyZWQgd2l0aGluIGEgc2Vzc2lvbiBieSBhIHVzZXIuXG4gICogVGhlc2UgaWRlbnRpdGllcyBhcmUgcmV0dXJuZWQgaW4gYW4gYXJyYXkgY29udGFpbmluZyBhIEpTT04gcGFja2FnZSBmb3IgZWFjaCB1c2VyIGlkZW50aXR5LlxuICAqIEByZXR1cm4ge0FycmF5PElkZW50aXRpZXM+fSAgICAgICAgIElkZW50aXRpZXNcbiAgKi9cbiAgZ2V0SWRlbnRpdGllcygpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBfdGhpcy5pZGVudGl0aWVzO1xuICB9XG5cbiAgLyoqXG4gICogZ2V0cyBhbGwgdGhlIGluZm9ybWF0aW9uIGZyb20gYSBnaXZlbiB1c2VyVVJMXG4gICogQHBhcmFtICB7U3RyaW5nfSAgdXNlclVSTCAgICAgdXNlciB1cmxcbiAgKiBAcmV0dXJuIHtKU09OfSAgICBpZGVudGl0eSAgICBpZGVudGl0eSBidW5kbGUgZnJvbSB0aGUgdXNlclVSTFxuICAqL1xuICBnZXRJZGVudGl0eSh1c2VyVVJMKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGZvciAobGV0IGluZGV4IGluIF90aGlzLmlkZW50aXRpZXMpIHtcblxuICAgICAgbGV0IGlkZW50aXR5ID0gX3RoaXMuaWRlbnRpdGllc1tpbmRleF07XG4gICAgICBpZiAoaWRlbnRpdHkuaWRlbnRpdHkgPT09IHVzZXJVUkwpIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgICAgfVxuICAgIH1cblxuICAgIHRocm93ICdpZGVudGl0eSBub3QgZm91bmQnO1xuICB9XG5cbiAgZ2V0SWRlbnRpdHlPZkh5cGVydHkoaHlwZXJ0eVVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBsZXQgc3BsaXRVUkwgPSBoeXBlcnR5VVJMLnNwbGl0KCc6Ly8nKTtcbiAgICAgIGlmIChzcGxpdFVSTFswXSAhPT0gJ2h5cGVydHknKSB7XG4gICAgICAgIF90aGlzLl9nZXRIeXBlcnR5RnJvbURhdGFPYmplY3QoaHlwZXJ0eVVSTCkudGhlbigocmV0dXJuZWRIeXBlcnR5VVJMKSA9PiB7XG4gICAgICAgICAgbGV0IHVzZXJVUkwgPSBfdGhpcy5yZWdpc3RyeS5nZXRIeXBlcnR5T3duZXIocmV0dXJuZWRIeXBlcnR5VVJMKTtcbiAgICAgICAgICBpZiAodXNlclVSTCkge1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCBpbiBfdGhpcy5pZGVudGl0aWVzKSB7XG4gICAgICAgICAgICAgIGxldCBpZGVudGl0eSA9IF90aGlzLmlkZW50aXRpZXNbaW5kZXhdO1xuICAgICAgICAgICAgICBpZiAoaWRlbnRpdHkuaWRlbnRpdHkgPT09IHVzZXJVUkwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShpZGVudGl0eS5tZXNzYWdlSW5mbyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnbm8gaWRlbnRpdHkgd2FzIGZvdW5kICcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgdXNlclVSTCA9IF90aGlzLnJlZ2lzdHJ5LmdldEh5cGVydHlPd25lcihoeXBlcnR5VVJMKTtcbiAgICAgICAgaWYgKHVzZXJVUkwpIHtcblxuICAgICAgICAgIGZvciAobGV0IGluZGV4IGluIF90aGlzLmlkZW50aXRpZXMpIHtcbiAgICAgICAgICAgIGxldCBpZGVudGl0eSA9IF90aGlzLmlkZW50aXRpZXNbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKGlkZW50aXR5LmlkZW50aXR5ID09PSB1c2VyVVJMKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGlkZW50aXR5Lm1lc3NhZ2VJbmZvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdCgnbm8gaWRlbnRpdHkgd2FzIGZvdW5kLicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBGdW5jdGlvbiB0byByZXR1cm4gYWxsIHRoZSB1c2VycyBVUkxzIHJlZ2lzdGVyZWQgd2l0aGluIGEgc2Vzc2lvblxuICAqIFRoZXNlIHVzZXJzIFVSTHMgYXJlIHJldHVybmVkIGluIGFuIGFycmF5IG9mIHN0cmluZ3MuXG4gICogQHBhcmFtICB7Qm9vbGVhbn0gIGVtYWlsRm9ybWF0IChPcHRpb25hbCkgICBib29sZWFuIHRvIGluZGljYXRlIHRvIHJldHVybiBpbiBlbWFpbCBmb3JtYXRcbiAgKiBAcmV0dXJuIHtBcnJheTxTdHJpbmc+fSAgICAgICAgIHVzZXJzXG4gICovXG4gIGdldFVzZXJzSURzKGVtYWlsRm9ybWF0KSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQgdXNlcnMgPSBbXTtcblxuICAgIC8vaWYgcmVxdWVzdCBjb21lcyB3aXRoIHRoZSBlbWFpbEZvcm1hdCBvcHRpb24sIHRoZW4gY29udmVydCB1cmwgdG8gZW1haWwgZm9ybWF0XG4gICAgbGV0IGNvbnZlcnRlciA9IChlbWFpbEZvcm1hdCkgPyBnZXRVc2VyRW1haWxGcm9tVVJMIDogKHZhbHVlKSA9PiB7cmV0dXJuIHZhbHVlO307XG5cbiAgICBmb3IgKGxldCBpbmRleCBpbiBfdGhpcy5pZGVudGl0aWVzKSB7XG4gICAgICBsZXQgaWRlbnRpdHkgPSBfdGhpcy5pZGVudGl0aWVzW2luZGV4XTtcbiAgICAgIHVzZXJzLnB1c2goY29udmVydGVyKGlkZW50aXR5LmlkZW50aXR5KSk7XG4gICAgfVxuICAgIHJldHVybiB1c2VycztcbiAgfVxuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgSWRlbnRpdHkgd2l0aGluIGEgc2Vzc2lvblxuICAqIEByZXR1cm4ge0lkZW50aXR5fSAgICAgICAgaWRlbnRpdHkgICAgICAgICBpZGVudGl0eVxuICAqL1xuICBnZXRDdXJyZW50SWRlbnRpdHkoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gX3RoaXMuY3VycmVudElkZW50aXR5O1xuICB9XG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gc2V0IHRoZSBjdXJyZW50IElkZW50aXR5IHdpdGggYSBnaXZlbiBJZGVudGl0eVxuICAqIEBwYXJhbSB7SWRlbnRpdHl9ICAgICAgICBpZGVudGl0eSAgICAgICAgIGlkZW50aXR5XG4gICovXG4gIHNldEN1cnJlbnRJZGVudGl0eShpZGVudGl0eSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgX3RoaXMuY3VycmVudElkZW50aXR5ID0gaWRlbnRpdHk7XG4gIH1cblxuICAvKipcbiAgKiBGdW5jdGlvbiB0byByZW1vdmUgdGhlIGFuIGlkZW50aXR5IGZyb20gdGhlIElkZW50aXRpZXMgYXJyYXlcbiAgKiBAcGFyYW0ge1N0cmluZ30gICAgdXNlclVSTCAgICAgIHVzZXJVUkxcbiAgKi9cbiAgZGVsZXRlSWRlbnRpdHkodXNlclVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBmb3IgKGxldCBpZGVudGl0eSBpbiBfdGhpcy5pZGVudGl0aWVzKSB7XG4gICAgICBpZiAoX3RoaXMuaWRlbnRpdGllc1tpZGVudGl0eV0uaWRlbnRpdHkgPT09IHVzZXJVUkwpIHtcbiAgICAgICAgX3RoaXMuaWRlbnRpdGllcy5zcGxpY2UoaWRlbnRpdHksIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRoYXQgcmVzb2x2ZSBhbmQgY3JlYXRlIHRoZSBkb21haW5VUkwgaW4gY2FzZSBpdCBpcyBwcm92aWRlZCBvbmUuIElmIG5vdCwgcmVzb2x2ZSB0aGUgZGVmYXVsdCBkb21haW5VUkxcbiAgKiBAcGFyYW0ge1N0cmluZ30gICAgIGlkcERvbWFpbiAgICAgaWRwRG9tYWluIChPcHRpb25hbClcbiAgKi9cbiAgX3Jlc29sdmVEb21haW4oaWRwRG9tYWluKSB7XG4gICAgaWYgKCFpZHBEb21haW4pIHtcbiAgICAgIHJldHVybiAnZG9tYWluLWlkcDovL2dvb2dsZS5jb20nO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ2RvbWFpbi1pZHA6Ly8nICsgaWRwRG9tYWluO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRvIGxvZ2luIGEgdXNlciB3aXRoaW4gdGhlIHNlc3Npb24sIGl0IHdpbGwgc3RhcnQgdGhlIHByb2Nlc3MgdG8gb2J0YWluIGFuIElkZW50aXR5IGZyb20gYSB1c2VyLCBpbmNsdWRpbmcgdGhlIHJlcXVlc3QgZm9yIGFuIGlkZW50aXR5IEFzc2VydGlvbi4gVGhlIGZ1bmN0aW9uIHJldHVybnMgYSBwcm9taXNlIHdpdGggdGhlIHRva2VuIHJlY2VpdmVkIGJ5IHRoZSBpZHBQcm94eS5cbiAgKlxuICAqIEBwYXJhbSAge0lkZW50aWZpZXJ9ICAgICAgaWRlbnRpZmllciAgICAgIGlkZW50aWZpZXJcbiAgKiBAcGFyYW0gIHtTY29wZX0gICAgICAgICAgIHNjb3BlICAgICAgICAgICBzY29wZVxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgUHJvbWlzZSAgICAgICAgIElEVG9rZW4gY29udGFpbmluZyB0aGUgdXNlciBpbmZvcm1hdGlvblxuICAqL1xuICBsb2dpbldpdGhSUChpZGVudGlmaWVyLCBzY29wZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIC8vVE9ETyByZW1vdmUgdGhpcyB2ZXJpZmljYXRpb24gYW5kIHJlZmFjdG9yIHRoaXMgcGFydFxuICAgICAgX3RoaXMuY3VycmVudElkZW50aXR5ID0gdW5kZWZpbmVkO1xuICAgICAgX3RoaXMuZ2V0SWRlbnRpdHlBc3NlcnRpb24oJ2lkZW50aWZpZXInLCAnb3JpZ2luJywgJ2hpbnQnLCBpZGVudGlmaWVyKS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdsb2dpbldpdGhSUCcpO1xuICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZygnbG9naW5XaXRoUlAgZXJyJyk7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBGdW5jdGlvbiB0aGF0IGZldGNoIGFuIGlkZW50aXR5QXNzZXJ0aW9uIGZyb20gYSB1c2VyLlxuICAqXG4gICogQHJldHVybiB7SWRBc3NlcnRpb259ICAgICAgICAgICAgICBJZEFzc2VydGlvblxuICAqL1xuICBnZXRJZGVudGl0eUFzc2VydGlvbihpZGVudGlmaWVyLCBvcmlnaW4sIHVzZXJuYW1lSGludCwgaWRwRG9tYWluKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xuXG4gICAgICBpZiAoX3RoaXMuY3VycmVudElkZW50aXR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy9UT0RPIHZlcmlmeSB3aGV0aGVyIHRoZSB0b2tlbiBpcyBzdGlsbCB2YWxpZCBvciBub3QuXG4gICAgICAgIC8vIHNob3VsZCBiZSBuZWVkZWQgdG8gbWFrZSBmdXJ0aGVyIHJlcXVlc3RzLCB0byBvYnRhaW4gYSB2YWxpZCB0b2tlblxuICAgICAgICByZXR1cm4gcmVzb2x2ZShfdGhpcy5jdXJyZW50SWRlbnRpdHkpO1xuICAgICAgfSBlbHNlIHtcblxuICAgICAgICAvL0NIRUNLIHdoZXRoZXIgaXMgYnJvd3NlciBlbnZpcm9ubWVudCBvciBub2RlanNcbiAgICAgICAgLy9pZiBpdCBpcyBicm93c2VyLCB0aGVuIGNyZWF0ZSBhIGZha2UgaWRlbnRpdHlcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICh3aW5kb3cpIHtcblxuICAgICAgICAgICAgbGV0IHB1YmxpY0tleTtcbiAgICAgICAgICAgIGxldCB1c2Vya2V5UGFpcjtcblxuICAgICAgICAgICAgLy9nZW5lcmF0ZXMgdGhlIFJTQSBrZXkgcGFpclxuICAgICAgICAgICAgX3RoaXMuY3J5cHRvLmdlbmVyYXRlUlNBS2V5UGFpcigpLnRoZW4oZnVuY3Rpb24oa2V5UGFpcikge1xuXG4gICAgICAgICAgICAgIHB1YmxpY0tleSA9IGJ0b2Eoa2V5UGFpci5wdWJsaWMpO1xuICAgICAgICAgICAgICB1c2Vya2V5UGFpciA9IGtleVBhaXI7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpcy5nZW5lcmF0ZUFzc2VydGlvbihwdWJsaWNLZXksIG9yaWdpbiwgJycsIHVzZXJrZXlQYWlyLCBpZHBEb21haW4pO1xuXG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZ2VuZXJhdGVBc3NlcnRpb24ocHVibGljS2V5LCBvcmlnaW4sIHVybCwgdXNlcmtleVBhaXIsIGlkcERvbWFpbik7XG5cbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KCdFcnJvciBvbiBvYnRhaW5pbmcgSWRlbnRpdHknKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdnZXRJZGVudGl0eUFzc2VydGlvbiBmb3Igbm9kZWpzJyk7XG4gICAgICAgICAgbGV0IHJhbmRvbU51bWJlciA9IE1hdGguZmxvb3IoKE1hdGgucmFuZG9tKCkgKiAxMDAwMCkgKyAxKTtcbiAgICAgICAgICBsZXQgaWRlbnRpdHlCdW5kbGUgPSB7XG4gICAgICAgICAgICBhc3NlcnRpb246ICdhc3NlcnRpb24nLFxuICAgICAgICAgICAgaWRwOidub2RlanMnLFxuICAgICAgICAgICAgdXNlclByb2ZpbGU6IHtcbiAgICAgICAgICAgICAgYXZhdGFyOiAnaHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tLy1XYUNyalZNTVYtUS9BQUFBQUFBQUFBSS9BQUFBQUFBQUFBcy84T2xWcUNwU0I5Yy9waG90by5qcGcnLFxuICAgICAgICAgICAgICBjbjogJ3Rlc3Qgbm9kZWpzJyxcbiAgICAgICAgICAgICAgdXNlcm5hbWU6ICdub2RlanMtJyArIHJhbmRvbU51bWJlciArICdAbm9kZWpzLmNvbScsXG4gICAgICAgICAgICAgIHVzZXJVUkw6ICd1c2VyOi8vbm9kZWpzLmNvbS9ub2RlanMtJyArIHJhbmRvbU51bWJlclxuICAgICAgICAgICAgfX07XG4gICAgICAgICAgX3RoaXMuY3VycmVudElkZW50aXR5ID0gaWRlbnRpdHlCdW5kbGU7XG4gICAgICAgICAgX3RoaXMuaWRlbnRpdGllcy5wdXNoKGlkZW50aXR5QnVuZGxlKTtcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZShpZGVudGl0eUJ1bmRsZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIFJlcXVlc3RzIHRoZSBJZHBQcm94eSBmcm9tIGEgZ2l2ZW4gRG9tYWluIGZvciBhbiBpZGVudGl0eUFzc2VydGlvblxuICAqXG4gICogQHBhcmFtICB7RE9NU3RyaW5nfSBjb250ZW50cyAgICAgY29udGVudHNcbiAgKiBAcGFyYW0gIHtET01TdHJpbmd9IG9yaWdpbiAgICAgICBvcmlnaW5cbiAgKiBAcGFyYW0gIHtET01TdHJpbmd9IHVzZXJuYW1lSGludCB1c2VybmFtZUhpbnRcbiAgKiBAcGFyYW0gIHtKU09OfSAgICAgIGtleVBhaXIgICAgICAgdXNlciBrZXlQYWlyXG4gICogQHJldHVybiB7SWRBc3NlcnRpb259ICAgICAgICAgICAgICBJZEFzc2VydGlvblxuICAqL1xuICBnZW5lcmF0ZUFzc2VydGlvbihjb250ZW50cywgb3JpZ2luLCB1c2VybmFtZUhpbnQsIGtleVBhaXIsIGlkcERvbWFpbikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGRvbWFpbiA9IF90aGlzLl9yZXNvbHZlRG9tYWluKGlkcERvbWFpbik7XG4gICAgbGV0IG1lc3NhZ2U7XG5cbiAgICBjb25zb2xlLmxvZygnZ2VuZXJhdGVBc3NlcnRpb24nKTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xuXG4gICAgICBtZXNzYWdlID0ge3R5cGU6J2V4ZWN1dGUnLCB0bzogZG9tYWluLCBmcm9tOiBfdGhpcy5faWRtVVJMLCBib2R5OiB7cmVzb3VyY2U6ICdpZGVudGl0eScsIG1ldGhvZDogJ2dlbmVyYXRlQXNzZXJ0aW9uJywgcGFyYW1zOiB7Y29udGVudHM6IGNvbnRlbnRzLCBvcmlnaW46IG9yaWdpbiwgdXNlcm5hbWVIaW50OiB1c2VybmFtZUhpbnR9fX07XG5cbiAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIChyZXMpID0+IHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHJlcy5ib2R5LnZhbHVlO1xuXG4gICAgICAgIGlmIChyZXN1bHQubG9naW5VcmwpIHtcblxuICAgICAgICAgIGxldCB3aW4gPSB3aW5kb3cub3BlbihyZXN1bHQubG9naW5VcmwsICdvcGVuSURyZXF1ZXN0JywgJ3dpZHRoPTgwMCwgaGVpZ2h0PTYwMCcpO1xuICAgICAgICAgIGlmICh3aW5kb3cuY29yZG92YSkge1xuICAgICAgICAgICAgd2luLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRzdGFydCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgbGV0IHVybCA9IGUudXJsO1xuICAgICAgICAgICAgICBsZXQgY29kZSA9IC9cXCZjb2RlPSguKykkLy5leGVjKHVybCk7XG4gICAgICAgICAgICAgIGxldCBlcnJvciA9IC9cXCZlcnJvcj0oLispJC8uZXhlYyh1cmwpO1xuXG4gICAgICAgICAgICAgIGlmIChjb2RlIHx8IGVycm9yKSB7XG4gICAgICAgICAgICAgICAgd2luLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh1cmwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHBvbGxUaW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICh3aW4uY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICByZWplY3QoJ1NvbWUgZXJyb3Igb2NjdXJlZCB3aGVuIHRyeWluZyB0byBnZXQgaWRlbnRpdHkuJyk7XG4gICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHBvbGxUaW1lcik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHdpbi5kb2N1bWVudC5VUkwuaW5kZXhPZignaWRfdG9rZW4nKSAhPT0gLTEgfHwgd2luLmRvY3VtZW50LlVSTC5pbmRleE9mKGxvY2F0aW9uLm9yaWdpbikgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbChwb2xsVGltZXIpO1xuICAgICAgICAgICAgICAgICAgbGV0IHVybCA9ICAgd2luLmRvY3VtZW50LlVSTDtcblxuICAgICAgICAgICAgICAgICAgd2luLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICByZXNvbHZlKHVybCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocmVzdWx0KSB7XG5cbiAgICAgICAgICBsZXQgYXNzZXJ0aW9uUGFyc2VkID0gSlNPTi5wYXJzZShhdG9iKHJlc3VsdC5hc3NlcnRpb24pKTtcbiAgICAgICAgICBsZXQgaWRUb2tlbjtcblxuICAgICAgICAgIC8vVE9ETyByZW1vdmUgdGhlIHZlcmlmaWNhdGlvbiBhbmQgcmVtb3ZlIHRoZSB0b2tlbklESlNPTiBmcm9tIHRoZSBnb29nbGUgaWRwUHJveHk7XG4gICAgICAgICAgaWYgKGFzc2VydGlvblBhcnNlZC50b2tlbklESlNPTikge1xuICAgICAgICAgICAgaWRUb2tlbiA9IGFzc2VydGlvblBhcnNlZC50b2tlbklESlNPTjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWRUb2tlbiA9IGFzc2VydGlvblBhcnNlZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaWRUb2tlbikge1xuICAgICAgICAgICAgcmVzdWx0LmlkZW50aXR5ID0gZ2V0VXNlclVSTEZyb21FbWFpbChpZFRva2VuLmVtYWlsKTtcblxuICAgICAgICAgICAgX3RoaXMuaWRlbnRpdHkuYWRkSWRlbnRpdHkocmVzdWx0KTtcblxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgZXhpc3RzIGFueSBpbmZvVG9rZW4gaW4gdGhlIHJlc3VsdCByZWNlaXZlZFxuICAgICAgICAgICAgbGV0IGluZm9Ub2tlbiA9IChyZXN1bHQuaW5mb1Rva2VuKSA/IHJlc3VsdC5pbmZvVG9rZW4gOiB7fTtcbiAgICAgICAgICAgIGxldCB1c2VyUHJvZmlsZUJ1bmRsZSA9IHt1c2VybmFtZTogaWRUb2tlbi5lbWFpbCwgY246IGlkVG9rZW4ubmFtZSwgYXZhdGFyOiBpbmZvVG9rZW4ucGljdHVyZSwgbG9jYWxlOiBpbmZvVG9rZW4ubG9jYWxlLCB1c2VyVVJMOiBnZXRVc2VyVVJMRnJvbUVtYWlsKGlkVG9rZW4uZW1haWwpfTtcblxuICAgICAgICAgICAgLy9jcmVhdGlvbiBvZiBhIG5ldyBKU09OIHdpdGggdGhlIGlkZW50aXR5IHRvIHNlbmQgdmlhIG1lc3NhZ2VzXG4gICAgICAgICAgICBsZXQgbmV3SWRlbnRpdHkgPSB7dXNlclByb2ZpbGU6IHVzZXJQcm9maWxlQnVuZGxlLCBpZHA6IHJlc3VsdC5pZHAuZG9tYWluLCBhc3NlcnRpb246IHJlc3VsdC5hc3NlcnRpb259O1xuICAgICAgICAgICAgcmVzdWx0Lm1lc3NhZ2VJbmZvID0gbmV3SWRlbnRpdHk7XG4gICAgICAgICAgICByZXN1bHQua2V5UGFpciA9IGtleVBhaXI7XG5cbiAgICAgICAgICAgIF90aGlzLmN1cnJlbnRJZGVudGl0eSA9IG5ld0lkZW50aXR5O1xuICAgICAgICAgICAgX3RoaXMuaWRlbnRpdGllcy5wdXNoKHJlc3VsdCk7XG4gICAgICAgICAgICByZXNvbHZlKG5ld0lkZW50aXR5KTtcblxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoJ2Vycm9yIG9uIG9idGFpbmluZyBpZGVudGl0eSBpbmZvcm1hdGlvbicpO1xuICAgICAgICB9XG5cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogT1RIRVIgVVNFUidTIElERU5USVRZXG4gICovXG5cbiAgLyoqXG4gICogUmVxdWVzdHMgdGhlIElkcFByb3h5IGZyb20gYSBnaXZlbiBEb21haW4gdG8gdmFsaWRhdGUgYW4gSWRlbnRpdHlBc3NlcnRpb25cbiAgKiBSZXR1cm5zIGEgcHJvbWlzZSB3aXRoIHRoZSByZXN1bHQgZnJvbSB0aGUgdmFsaWRhdGlvbi5cbiAgKiBAcGFyYW0gIHtET01TdHJpbmd9IGFzc2VydGlvblxuICAqIEBwYXJhbSAge0RPTVN0cmluZ30gb3JpZ2luICAgICAgIG9yaWdpblxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgUHJvbWlzZSAgICAgICAgIHByb21pc2Ugd2l0aCB0aGUgcmVzdWx0IGZyb20gdGhlIHZhbGlkYXRpb25cbiAgKi9cbiAgdmFsaWRhdGVBc3NlcnRpb24oYXNzZXJ0aW9uLCBvcmlnaW4sIGlkcERvbWFpbikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgZG9tYWluID0gX3RoaXMuX3Jlc29sdmVEb21haW4oaWRwRG9tYWluKTtcblxuICAgIGxldCBtZXNzYWdlID0ge3R5cGU6J0VYRUNVVEUnLCB0bzogZG9tYWluLCBmcm9tOiBfdGhpcy5faWRtVVJMLCBib2R5OiB7cmVzb3VyY2U6ICdpZGVudGl0eScsIG1ldGhvZDogJ3ZhbGlkYXRlQXNzZXJ0aW9uJyxcbiAgICAgICAgICAgIHBhcmFtczoge2Fzc2VydGlvbjogYXNzZXJ0aW9uLCBvcmlnaW46IG9yaWdpbn19fTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIChyZXN1bHQpID0+IHtcbiAgICAgICAgaWYgKHJlc3VsdC5ib2R5LmNvZGUgPT09IDIwMCkge1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0LmJvZHkudmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlamVjdCgnZXJyb3InLCByZXN1bHQuYm9keS5jb2RlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBlbmNyeXB0TWVzc2FnZShtZXNzYWdlKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGNvbnNvbGUubG9nKCdlbmNyeXB0IG1lc3NhZ2UgJyk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBsZXQgaXNIYW5kU2hha2VUeXBlID0gbWVzc2FnZS50eXBlID09PSAnaGFuZHNoYWtlJztcblxuICAgICAgLy9pZiBpcyBub3QgdG8gYXBwbHkgZW5jcnlwdGlvbiwgdGhlbiByZXR1cm5zIHJlc29sdmVcbiAgICAgIGlmICghX3RoaXMuaXNUb1VzZUVuY3J5cHRpb24gJiYgIWlzSGFuZFNoYWtlVHlwZSkge1xuICAgICAgICBjb25zb2xlLmxvZygnZW5jcnlwdGlvbiBkaXNhYmxlZCcpO1xuICAgICAgICByZXR1cm4gcmVzb2x2ZShtZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgLy9UT0RPIHJlbW92ZSB0aGlzIGxvZ2ljIGFuZCBtb3ZlIGl0IHRvIGEgdXRpbCBmdW5jdGlvblxuICAgICAgbGV0IHNwbGl0ZWRUb1VSTCA9IG1lc3NhZ2UudG8uc3BsaXQoJy8nKTtcbiAgICAgIGxldCBkYXRhT2JqZWN0VVJMID0gc3BsaXRlZFRvVVJMWzBdICsgJy8vJyArIHNwbGl0ZWRUb1VSTFsyXSArICcvJyArIHNwbGl0ZWRUb1VSTFszXTtcbiAgICAgIGlmIChzcGxpdGVkVG9VUkwubGVuZ3RoID4gNikge1xuICAgICAgICBkYXRhT2JqZWN0VVJMID0gc3BsaXRlZFRvVVJMWzBdICsgJy8vJyArIHNwbGl0ZWRUb1VSTFsyXSArICcvJyArIHNwbGl0ZWRUb1VSTFszXSArICcvJyArIHNwbGl0ZWRUb1VSTFs0XTtcbiAgICAgIH1cblxuICAgICAgbGV0IGlzVG9EYXRhT2JqZWN0ID0gaXNEYXRhT2JqZWN0VVJMKGRhdGFPYmplY3RVUkwpO1xuICAgICAgbGV0IGlzRnJvbUh5cGVydHkgPSBkaXZpZGVVUkwobWVzc2FnZS5mcm9tKS50eXBlID09PSAnaHlwZXJ0eSc7XG4gICAgICBsZXQgaXNUb0h5cGVydHkgPSBkaXZpZGVVUkwobWVzc2FnZS50bykudHlwZSA9PT0gJ2h5cGVydHknO1xuXG4gICAgICBpZiAoaXNGcm9tSHlwZXJ0eSAmJiBpc1RvSHlwZXJ0eSkge1xuICAgICAgICBsZXQgdXNlclVSTCA9IF90aGlzLl9yZWdpc3RyeS5nZXRIeXBlcnR5T3duZXIobWVzc2FnZS5mcm9tKTtcbiAgICAgICAgaWYgKHVzZXJVUkwpIHtcblxuICAgICAgICAgIC8vIGNoZWNrIGlmIGV4aXN0cyBhbnkga2V5cyBiZXR3ZWVuIHR3byB1c2Vyc1xuICAgICAgICAgIGxldCBjaGF0S2V5cyA9IF90aGlzLmNoYXRLZXlzW21lc3NhZ2UuZnJvbSArICc8LT4nICsgbWVzc2FnZS50b107XG4gICAgICAgICAgaWYgKCFjaGF0S2V5cykge1xuICAgICAgICAgICAgY2hhdEtleXMgPSBfdGhpcy5fbmV3Q2hhdENyeXB0byhtZXNzYWdlLCB1c2VyVVJMKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjcmVhdGVDaGF0S2V5IGVuY3J5cHQnLCBtZXNzYWdlLmZyb20gKyBtZXNzYWdlLnRvKTtcbiAgICAgICAgICAgIF90aGlzLmNoYXRLZXlzW21lc3NhZ2UuZnJvbSArICc8LT4nICsgbWVzc2FnZS50b10gPSBjaGF0S2V5cztcbiAgICAgICAgICAgIG1lc3NhZ2UuYm9keS5oYW5kc2hha2VQaGFzZSA9ICdzdGFydEhhbmRTaGFrZSc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGNoYXRLZXlzLmF1dGhlbnRpY2F0ZWQgJiYgIWlzSGFuZFNoYWtlVHlwZSkge1xuXG4gICAgICAgICAgICBsZXQgaXYgPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVJVigpO1xuICAgICAgICAgICAgX3RoaXMuY3J5cHRvLmVuY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbVNlc3Npb25LZXksIG1lc3NhZ2UuYm9keS52YWx1ZSwgaXYpLnRoZW4oZW5jcnlwdGVkVmFsdWUgPT4ge1xuXG4gICAgICAgICAgICAgIGxldCBmaWx0ZXJlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBtZXNzYWdlLmJvZHkudmFsdWUgKyBpdiwgY2hhdEtleXMuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pO1xuXG4gICAgICAgICAgICAgIF90aGlzLmNyeXB0by5oYXNoSE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tSGFzaEtleSwgZmlsdGVyZWRNZXNzYWdlKS50aGVuKGhhc2ggPT4ge1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ3Jlc3VsdCBvZiBoYXNoICcsIGhhc2gpO1xuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IHtpdjogX3RoaXMuY3J5cHRvLmVuY29kZShpdiksIHZhbHVlOiBfdGhpcy5jcnlwdG8uZW5jb2RlKGVuY3J5cHRlZFZhbHVlKSwgaGFzaDogX3RoaXMuY3J5cHRvLmVuY29kZShoYXNoKX07XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LnZhbHVlID0gYnRvYShKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xuXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gaWYgaXMgYSBoYW5kc2hha2UgbWVzc2FnZSwganVzdCByZXNvbHZlIGl0XG4gICAgICAgICAgfSBlbHNlIGlmIChpc0hhbmRTaGFrZVR5cGUpIHtcbiAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XG5cbiAgICAgICAgICAgIC8vIGVsc2UsIHN0YXJ0cyBhIG5ldyBoYW5kc2hha2UgcHJvdG9jb2xcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMuX2RvSGFuZFNoYWtlUGhhc2UobWVzc2FnZSwgY2hhdEtleXMpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgX3RoaXMuY2hhdEtleXNbbWVzc2FnZS5mcm9tICsgJzwtPicgKyBtZXNzYWdlLnRvXSA9IHZhbHVlLmNoYXRLZXlzO1xuXG4gICAgICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHZhbHVlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICByZWplY3QoJ2VuY3J5cHQgaGFuZHNoYWtlIHByb3RvY29sIHBoYXNlICcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIC8vaWYgZnJvbSBoeXBlcnR5IHRvIGEgZGF0YU9iamVjdFVSTFxuICAgICAgfSBlbHNlIGlmIChpc0Zyb21IeXBlcnR5ICYmIGlzVG9EYXRhT2JqZWN0KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdkYXRhT2JqZWN0IHZhbHVlIHRvIGVuY3J5cHQ6ICcsIG1lc3NhZ2UuYm9keS52YWx1ZSk7XG5cbiAgICAgICAgbGV0IGRhdGFPYmplY3RLZXkgPSBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXNbZGF0YU9iamVjdFVSTF07XG5cbiAgICAgICAgLy9pZiBubyBrZXkgZXhpc3RzLCBjcmVhdGUgYSBuZXcgb25lIGlmIGlzIHRoZSByZXBvcnRlciBvZiBkYXRhT2JqZWN0XG4gICAgICAgIGlmICghZGF0YU9iamVjdEtleSkge1xuICAgICAgICAgIGxldCBpc0h5cGVydHlSZXBvcnRlciA9IF90aGlzLnJlZ2lzdHJ5LmdldFJlcG9ydGVyVVJMU3luY2hvbm91cyhkYXRhT2JqZWN0VVJMKTtcblxuICAgICAgICAgIC8vIGlmIHRoZSBoeXBlcnR5IGlzIHRoZSByZXBvcnRlciBvZiB0aGUgZGF0YU9iamVjdCB0aGVuIGdlbmVyYXRlcyBhIHNlc3Npb24ga2V5XG4gICAgICAgICAgaWYgKGlzSHlwZXJ0eVJlcG9ydGVyICYmIGlzSHlwZXJ0eVJlcG9ydGVyID09PSBtZXNzYWdlLmZyb20pIHtcblxuICAgICAgICAgICAgbGV0IHNlc3Npb25LZXkgPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVSYW5kb20oKTtcbiAgICAgICAgICAgIF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5c1tkYXRhT2JqZWN0VVJMXSA9IHtzZXNzaW9uS2V5OiBzZXNzaW9uS2V5LCBpc1RvRW5jcnlwdDogdHJ1ZX07XG5cbiAgICAgICAgICAgIGRhdGFPYmplY3RLZXkgPSBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXNbZGF0YU9iamVjdFVSTF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy9jaGVjayBpZiB0aGVyZSBpcyBhbHJlYWR5IGEgc2Vzc2lvbiBrZXkgZm9yIHRoZSBjaGF0IHJvb21cbiAgICAgICAgaWYgKGRhdGFPYmplY3RLZXkpIHtcblxuICAgICAgICAgIC8vIGFuZCBpZiBpcyB0byBhcHBseSBlbmNyeXB0aW9uLCBlbmNyeXB0IHRoZSBtZXNzYWdlc1xuICAgICAgICAgIGlmIChkYXRhT2JqZWN0S2V5LmlzVG9FbmNyeXB0KSB7XG4gICAgICAgICAgICBsZXQgaXYgPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVJVigpO1xuXG4gICAgICAgICAgICBfdGhpcy5jcnlwdG8uZW5jcnlwdEFFUyhkYXRhT2JqZWN0S2V5LnNlc3Npb25LZXksIF90aGlzLmNyeXB0by5lbmNvZGUoSlNPTi5zdHJpbmdpZnkobWVzc2FnZS5ib2R5LnZhbHVlKSksIGl2KS50aGVuKGVuY3J5cHRlZFZhbHVlID0+IHtcblxuICAgICAgICAgICAgICBsZXQgZmlsdGVyZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgbWVzc2FnZS5ib2R5LnZhbHVlICsgaXYsIGRhdGFPYmplY3RLZXkuc2Vzc2lvbktleSk7XG5cbiAgICAgICAgICAgICAgX3RoaXMuY3J5cHRvLmhhc2hITUFDKGRhdGFPYmplY3RLZXkuc2Vzc2lvbktleSwgZmlsdGVyZWRNZXNzYWdlKS50aGVuKGhhc2ggPT4ge1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2hhc2ggJywgaGFzaCk7XG5cbiAgICAgICAgICAgICAgICBsZXQgbmV3VmFsdWUgPSBidG9hKEpTT04uc3RyaW5naWZ5KHt2YWx1ZTogX3RoaXMuY3J5cHRvLmVuY29kZShlbmNyeXB0ZWRWYWx1ZSksIGl2OiBfdGhpcy5jcnlwdG8uZW5jb2RlKGl2KSwgaGFzaDogX3RoaXMuY3J5cHRvLmVuY29kZShoYXNoKX0pKTtcblxuICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBpZiBub3QsIGp1c3Qgc2VuZCB0aGUgbWVzc2FnZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHN0YXJ0IHRoZSBnZW5lcmF0aW9uIG9mIGEgbmV3IHNlc3Npb24gS2V5XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KCdmYWlsZWQgdG8gZGVjcnlwdCBtZXNzYWdlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGRlY3J5cHRNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgY29uc29sZS5sb2coJ2RlY3J5cHQgbWVzc2FnZSAnKTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGxldCBpc0hhbmRTaGFrZVR5cGUgPSBtZXNzYWdlLnR5cGUgPT09ICdoYW5kc2hha2UnO1xuXG4gICAgICAvL2lmIGlzIG5vdCB0byBhcHBseSBlbmNyeXB0aW9uLCB0aGVuIHJldHVybnMgcmVzb2x2ZVxuICAgICAgaWYgKCFfdGhpcy5pc1RvVXNlRW5jcnlwdGlvbiAmJiAhaXNIYW5kU2hha2VUeXBlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdkZWNyeXB0aW9uIGRpc2FibGVkJyk7XG4gICAgICAgIHJldHVybiByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgfVxuXG4gICAgICAvL1RPRE8gcmVtb3ZlIHRoaXMgbG9naWMgYW5kIG1vdmUgaXQgdG8gYSB1dGlsIGZ1bmN0aW9uXG5cbiAgICAgIGxldCBzcGxpdGVkVG9VUkwgPSBtZXNzYWdlLnRvLnNwbGl0KCcvJyk7XG4gICAgICBsZXQgZGF0YU9iamVjdFVSTCA9IHNwbGl0ZWRUb1VSTFswXSArICcvLycgKyBzcGxpdGVkVG9VUkxbMl0gKyAnLycgKyBzcGxpdGVkVG9VUkxbM107XG4gICAgICBpZiAoc3BsaXRlZFRvVVJMLmxlbmd0aCA+IDYpIHtcbiAgICAgICAgZGF0YU9iamVjdFVSTCA9IHNwbGl0ZWRUb1VSTFswXSArICcvLycgKyBzcGxpdGVkVG9VUkxbMl0gKyAnLycgKyBzcGxpdGVkVG9VUkxbM10gKyAnLycgKyBzcGxpdGVkVG9VUkxbNF07XG4gICAgICB9XG5cbiAgICAgIGxldCBpc1RvRGF0YU9iamVjdCA9IGlzRGF0YU9iamVjdFVSTChkYXRhT2JqZWN0VVJMKTtcbiAgICAgIGxldCBpc0Zyb21IeXBlcnR5ID0gZGl2aWRlVVJMKG1lc3NhZ2UuZnJvbSkudHlwZSA9PT0gJ2h5cGVydHknO1xuICAgICAgbGV0IGlzVG9IeXBlcnR5ID0gZGl2aWRlVVJMKG1lc3NhZ2UudG8pLnR5cGUgPT09ICdoeXBlcnR5JztcblxuICAgICAgLy9pcyBpcyBoeXBlcnR5IHRvIGh5cGVydHkgY29tbXVuaWNhdGlvblxuICAgICAgaWYgKGlzRnJvbUh5cGVydHkgJiYgaXNUb0h5cGVydHkpIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZygnZGVjcnlwdCBoeXBlcnR5IHRvIGh5cGVydHknKTtcbiAgICAgICAgbGV0IHVzZXJVUkwgPSBfdGhpcy5fcmVnaXN0cnkuZ2V0SHlwZXJ0eU93bmVyKG1lc3NhZ2UudG8pO1xuICAgICAgICBpZiAodXNlclVSTCkge1xuXG4gICAgICAgICAgbGV0IGNoYXRLZXlzID0gX3RoaXMuY2hhdEtleXNbbWVzc2FnZS50byArICc8LT4nICsgbWVzc2FnZS5mcm9tXTtcbiAgICAgICAgICBpZiAoIWNoYXRLZXlzKSB7XG4gICAgICAgICAgICBjaGF0S2V5cyA9IF90aGlzLl9uZXdDaGF0Q3J5cHRvKG1lc3NhZ2UsIHVzZXJVUkwsICdkZWNyeXB0Jyk7XG4gICAgICAgICAgICBfdGhpcy5jaGF0S2V5c1ttZXNzYWdlLnRvICsgJzwtPicgKyBtZXNzYWdlLmZyb21dID0gY2hhdEtleXM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGNoYXRLZXlzLmF1dGhlbnRpY2F0ZWQgJiYgIWlzSGFuZFNoYWtlVHlwZSkge1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gSlNPTi5wYXJzZShhdG9iKG1lc3NhZ2UuYm9keS52YWx1ZSkpO1xuICAgICAgICAgICAgbGV0IGl2ID0gX3RoaXMuY3J5cHRvLmRlY29kZSh2YWx1ZS5pdik7XG4gICAgICAgICAgICBsZXQgZGF0YSA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWUudmFsdWUpO1xuICAgICAgICAgICAgbGV0IGhhc2ggPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHZhbHVlLmhhc2gpO1xuICAgICAgICAgICAgX3RoaXMuY3J5cHRvLmRlY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5VG9TZXNzaW9uS2V5LCBkYXRhLCBpdikudGhlbihkZWNyeXB0ZWREYXRhID0+IHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2RlY3J5cHRlZCB2YWx1ZSAnLCBkZWNyeXB0ZWREYXRhKTtcbiAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LnZhbHVlID0gZGVjcnlwdGVkRGF0YTtcblxuICAgICAgICAgICAgICBsZXQgZmlsdGVyZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkRGF0YSArIGl2KTtcblxuICAgICAgICAgICAgICBfdGhpcy5jcnlwdG8udmVyaWZ5SE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb0hhc2hLZXksIGZpbHRlcmVkTWVzc2FnZSwgaGFzaCkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ3Jlc3VsdCBvZiBoYXNoIHZlcmlmaWNhdGlvbiEgJywgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICBtZXNzYWdlLmJvZHkuYXNzZXJ0ZWRJZGVudGl0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNIYW5kU2hha2VUeXBlKSB7XG4gICAgICAgICAgICBfdGhpcy5fZG9IYW5kU2hha2VQaGFzZShtZXNzYWdlLCBjaGF0S2V5cykudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuXG4gICAgICAgICAgICAgIC8vaWYgaXQgd2FzIHN0YXJ0ZWQgYnkgZG9NdXR1YWxBdXRoZW50aWNhdGlvbiB0aGVuIGVuZHMgdGhlIHByb3RvY29sXG4gICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gJ2hhbmRTaGFrZUVuZCcpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoJ2RlY3J5cHQgaGFuZHNoYWtlIHByb3RvY29sIHBoYXNlICcpO1xuXG4gICAgICAgICAgICAgIC8vIGlmIHdhcyBzdGFydGVkIGJ5IGEgbWVzc2FnZSwgdGhlbiByZXNlbmQgdGhhdCBtZXNzYWdlXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuY2hhdEtleXNbbWVzc2FnZS50byArICc8LT4nICsgbWVzc2FnZS5mcm9tXSA9IHZhbHVlLmNoYXRLZXlzO1xuICAgICAgICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHZhbHVlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHJlamVjdCgnZGVjcnlwdCBoYW5kc2hha2UgcHJvdG9jb2wgcGhhc2UgJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QoJ3dyb25nIG1lc3NhZ2UgZG8gZGVjcnlwdCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoJ2Vycm9yIG9uIGRlY3J5cHQgbWVzc2FnZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9pZiBmcm9tIGh5cGVydHkgdG8gYSBkYXRhT2JqZWN0VVJMXG4gICAgICB9IGVsc2UgaWYgKGlzRnJvbUh5cGVydHkgJiYgaXNUb0RhdGFPYmplY3QpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2RhdGFPYmplY3QgdmFsdWUgdG8gZGVjcnlwdDogJywgbWVzc2FnZS5ib2R5KTtcblxuICAgICAgICBsZXQgZGF0YU9iamVjdEtleSA9IF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5c1tkYXRhT2JqZWN0VVJMXTtcblxuICAgICAgICBpZiAoZGF0YU9iamVjdEtleSkge1xuXG4gICAgICAgICAgLy9jaGVjayBpZiBpcyB0byBhcHBseSBlbmNyeXB0aW9uXG4gICAgICAgICAgaWYgKGRhdGFPYmplY3RLZXkuaXNUb0VuY3J5cHQpIHtcbiAgICAgICAgICAgIGxldCBwYXJzZWRWYWx1ZSA9IEpTT04ucGFyc2UoYXRvYihtZXNzYWdlLmJvZHkudmFsdWUpKTtcbiAgICAgICAgICAgIGxldCBpdiA9IF90aGlzLmNyeXB0by5kZWNvZGUocGFyc2VkVmFsdWUuaXYpO1xuICAgICAgICAgICAgbGV0IGVuY3J5cHRlZFZhbHVlID0gX3RoaXMuY3J5cHRvLmRlY29kZShwYXJzZWRWYWx1ZS52YWx1ZSk7XG4gICAgICAgICAgICBsZXQgaGFzaCA9IF90aGlzLmNyeXB0by5kZWNvZGUocGFyc2VkVmFsdWUuaGFzaCk7XG5cbiAgICAgICAgICAgIF90aGlzLmNyeXB0by5kZWNyeXB0QUVTKGRhdGFPYmplY3RLZXkuc2Vzc2lvbktleSwgZW5jcnlwdGVkVmFsdWUsIGl2KS50aGVuKGRlY3J5cHRlZFZhbHVlID0+IHtcbiAgICAgICAgICAgICAgbGV0IHBhcnNlZFZhbHVlID0gSlNPTi5wYXJzZShhdG9iKGRlY3J5cHRlZFZhbHVlKSk7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkZWNyeXB0ZWQgVmFsdWUsJywgcGFyc2VkVmFsdWUpO1xuICAgICAgICAgICAgICBtZXNzYWdlLmJvZHkudmFsdWUgPSBwYXJzZWRWYWx1ZTtcblxuICAgICAgICAgICAgICBsZXQgZmlsdGVyZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgcGFyc2VkVmFsdWUgKyBpdik7XG5cbiAgICAgICAgICAgICAgX3RoaXMuY3J5cHRvLnZlcmlmeUhNQUMoZGF0YU9iamVjdEtleS5zZXNzaW9uS2V5LCBmaWx0ZXJlZE1lc3NhZ2UsIGhhc2gpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdyZXN1bHQgb2YgaGFzaCB2ZXJpZmljYXRpb24hICcsIHJlc3VsdCk7XG5cbiAgICAgICAgICAgICAgICBtZXNzYWdlLmJvZHkuYXNzZXJ0ZWRJZGVudGl0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vaWYgbm90LCBqdXN0IHJldHVybiB0aGUgbWVzc2FnZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtZXNzYWdlLmJvZHkuYXNzZXJ0ZWRJZGVudGl0eSA9IHRydWU7XG4gICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1lc3NhZ2UuYm9keS5hc3NlcnRlZElkZW50aXR5ID0gdHJ1ZTtcbiAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuXG4gICAgICAgICAgLy9yZWplY3QoJ25vIHNlc3Npb25LZXkgZm9yIGNoYXQgcm9vbSBmb3VuZCcpO1xuICAgICAgICB9XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdCgnd3JvbmcgbWVzc2FnZSB0byBkZWNyeXB0Jyk7XG4gICAgICB9XG5cbiAgICB9KTtcbiAgfVxuXG4gIGRvTXV0dWFsQXV0aGVudGljYXRpb24oc2VuZGVyLCByZWNlaXZlcikge1xuICAgIGNvbnNvbGUubG9nKCdkb011dHVhbEF1dGhlbnRpY2F0aW9uOiAnLCBzZW5kZXIsIHJlY2VpdmVyKTtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGxldCBkYXRhT2JqZWN0VVJMO1xuXG4gICAgLy8gY2hlY2sgaWYgdGhlIHNlbmRlciBpcyBhIGRhdGFPYmplY3QgYW5kIGlmIHNvIHN0b3JlcyB0aGF0IHZhbHVlXG4gICAgbGV0IHJlcG9ydGVyVVJMID0gX3RoaXMucmVnaXN0cnkuZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzKHNlbmRlcik7XG4gICAgaWYgKHJlcG9ydGVyVVJMKSB7XG4gICAgICBkYXRhT2JqZWN0VVJMID0gc2VuZGVyO1xuICAgICAgc2VuZGVyID0gcmVwb3J0ZXJVUkw7XG4gICAgfVxuXG4gICAgbGV0IG1zZyA9IHtcbiAgICAgIHRvOiByZWNlaXZlcixcbiAgICAgIGZyb206IHNlbmRlcixcbiAgICAgIGNhbGxiYWNrOiB1bmRlZmluZWQsXG4gICAgICBib2R5OiB7aGFuZHNoYWtlUGhhc2U6ICdzdGFydEhhbmRTaGFrZScsIGlnbm9yZTogJ2lnbm9yZU1lc3NhZ2UnfVxuICAgIH07XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIGlmICghc2VuZGVyIHx8ICFyZWNlaXZlcikge1xuICAgICAgICByZXR1cm4gcmVqZWN0KCdzZW5kZXIgb3IgcmVjZWl2ZXIgbWlzc2luZyBvbiBkb011dHVhbEF1dGhlbnRpY2F0aW9uJyk7XG4gICAgICB9XG5cbiAgICAgIGxldCBjaGF0S2V5cyA9IF90aGlzLmNoYXRLZXlzW3NlbmRlciArICc8LT4nICsgcmVjZWl2ZXJdO1xuICAgICAgbGV0IHVzZXJVUkwgPSBfdGhpcy5fcmVnaXN0cnkuZ2V0SHlwZXJ0eU93bmVyKHNlbmRlcik7XG5cbiAgICAgIGlmICh1c2VyVVJMKSB7XG5cbiAgICAgICAgaWYgKCFjaGF0S2V5cykge1xuICAgICAgICAgIC8vIGNhbGxiYWNrIHRvIHJlc29sdmUgd2hlbiBmaW5pc2ggdGhlIG11dHVhbCBhdXRoZW50aWNhdGlvblxuICAgICAgICAgIGxldCByZXNvbHZlZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnY2FsbGJhY2sgdmFsdWU6JywgdmFsdWUpO1xuICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBtc2cuY2FsbGJhY2sgPSByZXNvbHZlZDtcbiAgICAgICAgICBtc2cuZGF0YU9iamVjdFVSTCA9IGRhdGFPYmplY3RVUkw7XG5cbiAgICAgICAgICBjaGF0S2V5cyA9IF90aGlzLl9uZXdDaGF0Q3J5cHRvKG1zZywgdXNlclVSTCk7XG4gICAgICAgICAgX3RoaXMuY2hhdEtleXNbc2VuZGVyICsgJzwtPicgKyByZWNlaXZlcl0gPSBjaGF0S2V5cztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGF0S2V5cy5hdXRoZW50aWNhdGVkKSB7XG5cbiAgICAgICAgICBsZXQgc3RhcnRTZXNzaW9uS2V5RXhjaGFuZ2UgPSB7XG4gICAgICAgICAgICB0bzogc2VuZGVyLFxuICAgICAgICAgICAgZnJvbTogcmVjZWl2ZXJcbiAgICAgICAgICB9O1xuICAgICAgICAgIGNoYXRLZXlzLmRhdGFPYmplY3RVUkwgPSBkYXRhT2JqZWN0VVJMO1xuICAgICAgICAgIF90aGlzLl9zZW5kUmVwb3J0ZXJTZXNzaW9uS2V5KHN0YXJ0U2Vzc2lvbktleUV4Y2hhbmdlLCBjaGF0S2V5cykudGhlbih2YWx1ZSA9PiB7XG5cbiAgICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHZhbHVlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgcmVzb2x2ZSgnZXhjaGFuZ2Ugb2YgY2hhdCBzZXNzaW9uS2V5IGluaXRpYXRlZCcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgX3RoaXMuX2RvSGFuZFNoYWtlUGhhc2UobXNnLCBjaGF0S2V5cyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdCgnZXJyb3Igb24gZG9NdXR1YWxBdXRoZW50aWNhdGlvbicpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIH1cblxuICBfZG9IYW5kU2hha2VQaGFzZShtZXNzYWdlLCBjaGF0S2V5cykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICAvL2NvbnNvbGUubG9nKCdoYW5kc2hha2VUeXBlJyk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcblxuICAgICAgbGV0IGhhbmRzaGFrZVR5cGUgPSBtZXNzYWdlLmJvZHkuaGFuZHNoYWtlUGhhc2U7XG4gICAgICBsZXQgaXY7XG4gICAgICBsZXQgaGFzaDtcbiAgICAgIGxldCB2YWx1ZSA9IHt9O1xuICAgICAgbGV0IGZpbHRlcmVkTWVzc2FnZTtcbiAgICAgIHN3aXRjaCAoaGFuZHNoYWtlVHlwZSkge1xuXG4gICAgICAgIGNhc2UgJ3N0YXJ0SGFuZFNoYWtlJzpcbiAgICAgICAgICBjaGF0S2V5cy5rZXlzLmZyb21SYW5kb20gPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVSYW5kb20oKTtcblxuICAgICAgICAgIGxldCBzdGFydEhhbmRTaGFrZU1zZyA9IHtcbiAgICAgICAgICAgIHR5cGU6ICdoYW5kc2hha2UnLFxuICAgICAgICAgICAgdG86IG1lc3NhZ2UudG8sXG4gICAgICAgICAgICBmcm9tOiBtZXNzYWdlLmZyb20sXG4gICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAnc2VuZGVySGVsbG8nLFxuICAgICAgICAgICAgICB2YWx1ZTogX3RoaXMuY3J5cHRvLmVuY29kZShjaGF0S2V5cy5rZXlzLmZyb21SYW5kb20pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5LnNlbmRlckhlbGxvID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2goc3RhcnRIYW5kU2hha2VNc2csIHVuZGVmaW5lZCwgY2hhdEtleXMuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pO1xuXG4gICAgICAgICAgLy8gY2hlY2sgaWYgd2FzIHRoZSBlbmNyeXB0IGZ1bmN0aW9uIG9yIHRoZSBtdXR1YWwgYXV0aGVudGljYXRpb24gdGhhdCByZXF1ZXN0IHRoZVxuICAgICAgICAgIC8vIHN0YXJ0IG9mIHRoZSBoYW5kU2hha2VQaGFzZS5cbiAgICAgICAgICBpZiAoY2hhdEtleXMuaW5pdGlhbE1lc3NhZ2UpIHtyZXNvbHZlKHttZXNzYWdlOiBzdGFydEhhbmRTaGFrZU1zZywgY2hhdEtleXM6IGNoYXRLZXlzfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLmNoYXRLZXlzW21lc3NhZ2UuZnJvbSArICc8LT4nICsgbWVzc2FnZS50b10gPSBjaGF0S2V5cztcbiAgICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHN0YXJ0SGFuZFNoYWtlTXNnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3NlbmRlckhlbGxvJzpcblxuICAgICAgICAgIGNvbnNvbGUubG9nKCdzZW5kZXJIZWxsbycpO1xuICAgICAgICAgIGNoYXRLZXlzLmhhbmRzaGFrZUhpc3Rvcnkuc2VuZGVySGVsbG8gPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlKTtcbiAgICAgICAgICBjaGF0S2V5cy5rZXlzLmZyb21SYW5kb20gPSBfdGhpcy5jcnlwdG8uZGVjb2RlKG1lc3NhZ2UuYm9keS52YWx1ZSk7XG4gICAgICAgICAgY2hhdEtleXMua2V5cy50b1JhbmRvbSA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZVJhbmRvbSgpO1xuXG4gICAgICAgICAgbGV0IHNlbmRlckhlbGxvTXNnID0ge1xuICAgICAgICAgICAgdHlwZTogJ2hhbmRzaGFrZScsXG4gICAgICAgICAgICB0bzogbWVzc2FnZS5mcm9tLFxuICAgICAgICAgICAgZnJvbTogbWVzc2FnZS50byxcbiAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgaGFuZHNoYWtlUGhhc2U6ICdyZWNlaXZlckhlbGxvJyxcbiAgICAgICAgICAgICAgdmFsdWU6IF90aGlzLmNyeXB0by5lbmNvZGUoY2hhdEtleXMua2V5cy50b1JhbmRvbSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIGNoYXRLZXlzLmhhbmRzaGFrZUhpc3RvcnkucmVjZWl2ZXJIZWxsbyA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKHNlbmRlckhlbGxvTXNnLCB1bmRlZmluZWQsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTtcbiAgICAgICAgICByZXNvbHZlKHttZXNzYWdlOiBzZW5kZXJIZWxsb01zZywgY2hhdEtleXM6IGNoYXRLZXlzfSk7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3JlY2VpdmVySGVsbG8nOlxuXG4gICAgICAgICAgY29uc29sZS5sb2coJ3JlY2VpdmVySGVsbG8nKTtcbiAgICAgICAgICBjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5LnJlY2VpdmVySGVsbG8gPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlKTtcblxuICAgICAgICAgIF90aGlzLnZhbGlkYXRlQXNzZXJ0aW9uKG1lc3NhZ2UuYm9keS5pZGVudGl0eS5hc3NlcnRpb24pLnRoZW4oKHZhbHVlKSA9PiB7XG5cbiAgICAgICAgICAgIGxldCByZWNlaXZlclB1YmxpY0tleSA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWUuY29udGVudHMubm9uY2UpO1xuICAgICAgICAgICAgbGV0IHByZW1hc3RlclNlY3JldCA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZVBNUygpO1xuICAgICAgICAgICAgbGV0IHRvUmFuZG9tID0gbWVzc2FnZS5ib2R5LnZhbHVlO1xuICAgICAgICAgICAgY2hhdEtleXMuaHlwZXJ0eVRvLmFzc2VydGlvbiA9IG1lc3NhZ2UuYm9keS5pZGVudGl0eS5hc3NlcnRpb247XG4gICAgICAgICAgICBjaGF0S2V5cy5oeXBlcnR5VG8ucHVibGljS2V5ID0gcmVjZWl2ZXJQdWJsaWNLZXk7XG4gICAgICAgICAgICBjaGF0S2V5cy5oeXBlcnR5VG8udXNlcklEICAgID0gdmFsdWUuY29udGVudHMuZW1haWw7XG4gICAgICAgICAgICBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tICA9IF90aGlzLmNyeXB0by5kZWNvZGUodG9SYW5kb20pO1xuICAgICAgICAgICAgY2hhdEtleXMua2V5cy5wcmVtYXN0ZXJLZXkgPSBwcmVtYXN0ZXJTZWNyZXQ7XG5cbiAgICAgICAgICAgIGxldCBjb25jYXRLZXkgPSBfdGhpcy5jcnlwdG8uY29uY2F0UE1Td2l0aFJhbmRvbXMocHJlbWFzdGVyU2VjcmV0LCBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tLCBjaGF0S2V5cy5rZXlzLmZyb21SYW5kb20pO1xuXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmdlbmVyYXRlTWFzdGVyU2VjcmV0KGNvbmNhdEtleSwgJ21lc3NhZ2VIaXN0b3JpYycgKyBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tICsgY2hhdEtleXMua2V5cy5mcm9tUmFuZG9tKTtcblxuICAgICAgICAgICAgLy9nZW5lcmF0ZSB0aGUgbWFzdGVyIGtleVxuICAgICAgICAgIH0pLnRoZW4oKG1hc3RlcktleSkgPT4ge1xuICAgICAgICAgICAgY2hhdEtleXMua2V5cy5tYXN0ZXJLZXkgPSBtYXN0ZXJLZXk7XG5cbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVLZXlzKG1hc3RlcktleSwgJ2tleSBleHBhbnNpb24nICsgY2hhdEtleXMua2V5cy50b1JhbmRvbSArIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSk7XG5cbiAgICAgICAgICAgIC8vZ2VuZXJhdGUgdGhlIHN5bW1ldHJpYyBhbmQgaGFzaCBrZXlzXG4gICAgICAgICAgfSkudGhlbigoa2V5cykgPT4ge1xuXG4gICAgICAgICAgICBjaGF0S2V5cy5rZXlzLmh5cGVydHlUb1Nlc3Npb25LZXkgPSBuZXcgVWludDhBcnJheShrZXlzWzBdKTtcbiAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5ID0gbmV3IFVpbnQ4QXJyYXkoa2V5c1sxXSk7XG4gICAgICAgICAgICBjaGF0S2V5cy5rZXlzLmh5cGVydHlUb0hhc2hLZXkgPSBuZXcgVWludDhBcnJheShrZXlzWzJdKTtcbiAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21IYXNoS2V5ID0gbmV3IFVpbnQ4QXJyYXkoa2V5c1szXSk7XG4gICAgICAgICAgICBpdiA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZUlWKCk7XG4gICAgICAgICAgICB2YWx1ZS5pdiA9IF90aGlzLmNyeXB0by5lbmNvZGUoaXYpO1xuXG4gICAgICAgICAgICBsZXQgbWVzc2FnZVN0cnVjdHVyZSA9IHtcbiAgICAgICAgICAgICAgdHlwZTogJ2hhbmRzaGFrZScsXG4gICAgICAgICAgICAgIHRvOiBtZXNzYWdlLmZyb20sXG4gICAgICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sXG4gICAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICBoYW5kc2hha2VQaGFzZTogJ3NlbmRlckNlcnRpZmljYXRlJ1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBoYXNoIHRoZSB2YWx1ZSBhbmQgdGhlIGl2XG4gICAgICAgICAgICBmaWx0ZXJlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlU3RydWN0dXJlLCAnb2snICsgaXYsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uaGFzaEhNQUMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbUhhc2hLZXksIGZpbHRlcmVkTWVzc2FnZSk7XG4gICAgICAgICAgfSkudGhlbigoaGFzaCkgPT4ge1xuICAgICAgICAgICAgdmFsdWUuaGFzaCA9IF90aGlzLmNyeXB0by5lbmNvZGUoaGFzaCk7XG5cbiAgICAgICAgICAgIC8vZW5jcnlwdCB0aGUgZGF0YVxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5lbmNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5LCAnb2snLCBpdik7XG4gICAgICAgICAgfSkudGhlbigoZW5jcnlwdGVkRGF0YSkgPT4ge1xuICAgICAgICAgICAgdmFsdWUuc3ltZXRyaWNFbmNyeXB0aW9uID0gX3RoaXMuY3J5cHRvLmVuY29kZShlbmNyeXB0ZWREYXRhKTtcblxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5lbmNyeXB0UlNBKGNoYXRLZXlzLmh5cGVydHlUby5wdWJsaWNLZXksIGNoYXRLZXlzLmtleXMucHJlbWFzdGVyS2V5KTtcblxuICAgICAgICAgIH0pLnRoZW4oKGVuY3J5cHRlZFZhbHVlKSA9PiB7XG5cbiAgICAgICAgICAgIHZhbHVlLmFzc3ltZXRyaWNFbmNyeXB0aW9uID0gX3RoaXMuY3J5cHRvLmVuY29kZShlbmNyeXB0ZWRWYWx1ZSk7XG5cbiAgICAgICAgICAgIGxldCBtZXNzYWdlU3RydWN0dXJlID0ge1xuICAgICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJyxcbiAgICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSxcbiAgICAgICAgICAgICAgZnJvbTogbWVzc2FnZS50byxcbiAgICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAnc2VuZGVyQ2VydGlmaWNhdGUnXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGxldCBtZXNzYWdlVG9IYXNoID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZVN0cnVjdHVyZSwgY2hhdEtleXMua2V5cy5wcmVtYXN0ZXJLZXksIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTtcblxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5zaWduUlNBKGNoYXRLZXlzLmh5cGVydHlGcm9tLnByaXZhdGVLZXksIEpTT04uc3RyaW5naWZ5KGNoYXRLZXlzLmhhbmRzaGFrZUhpc3RvcnkpICsgSlNPTi5zdHJpbmdpZnkobWVzc2FnZVRvSGFzaCkpO1xuXG4gICAgICAgICAgfSkudGhlbihzaWduYXR1cmUgPT4ge1xuXG4gICAgICAgICAgICB2YWx1ZS5zaWduYXR1cmUgPSBfdGhpcy5jcnlwdG8uZW5jb2RlKHNpZ25hdHVyZSk7XG5cbiAgICAgICAgICAgIGxldCByZWNlaXZlckhlbGxvTXNnID0ge1xuICAgICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJyxcbiAgICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSxcbiAgICAgICAgICAgICAgZnJvbTogbWVzc2FnZS50byxcbiAgICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAnc2VuZGVyQ2VydGlmaWNhdGUnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBidG9hKEpTT04uc3RyaW5naWZ5KHZhbHVlKSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNoYXRLZXlzLmhhbmRzaGFrZUhpc3Rvcnkuc2VuZGVyQ2VydGlmaWNhdGUgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChyZWNlaXZlckhlbGxvTXNnLCAnb2snICsgaXYsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTtcblxuICAgICAgICAgICAgcmVzb2x2ZSh7bWVzc2FnZTogcmVjZWl2ZXJIZWxsb01zZywgY2hhdEtleXM6IGNoYXRLZXlzfSk7XG5cbiAgICAgICAgICB9LCBlcnJvciA9PiByZWplY3QoZXJyb3IpKTtcblxuICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnc2VuZGVyQ2VydGlmaWNhdGUnOlxuXG4gICAgICAgICAgY29uc29sZS5sb2coJ3NlbmRlckNlcnRpZmljYXRlJyk7XG4gICAgICAgICAgbGV0IHJlY2VpdmVkVmFsdWUgPSBKU09OLnBhcnNlKGF0b2IobWVzc2FnZS5ib2R5LnZhbHVlKSk7XG5cbiAgICAgICAgICBfdGhpcy52YWxpZGF0ZUFzc2VydGlvbihtZXNzYWdlLmJvZHkuaWRlbnRpdHkuYXNzZXJ0aW9uKS50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgbGV0IGVuY3J5cHRlZFBNUyA9IF90aGlzLmNyeXB0by5kZWNvZGUocmVjZWl2ZWRWYWx1ZS5hc3N5bWV0cmljRW5jcnlwdGlvbik7XG4gICAgICAgICAgICBsZXQgc2VuZGVyUHVibGljS2V5ID0gX3RoaXMuY3J5cHRvLmRlY29kZSh2YWx1ZS5jb250ZW50cy5ub25jZSk7XG4gICAgICAgICAgICBjaGF0S2V5cy5oeXBlcnR5VG8uYXNzZXJ0aW9uID0gbWVzc2FnZS5ib2R5LmlkZW50aXR5LmFzc2VydGlvbjtcbiAgICAgICAgICAgIGNoYXRLZXlzLmh5cGVydHlUby5wdWJsaWNLZXkgPSBzZW5kZXJQdWJsaWNLZXk7XG4gICAgICAgICAgICBjaGF0S2V5cy5oeXBlcnR5VG8udXNlcklEICAgID0gdmFsdWUuY29udGVudHMuZW1haWw7XG5cbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uZGVjcnlwdFJTQShjaGF0S2V5cy5oeXBlcnR5RnJvbS5wcml2YXRlS2V5LCBlbmNyeXB0ZWRQTVMpO1xuXG4gICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgICByZWplY3QoJ0Vycm9yIGR1cmluZyBhdXRoZW50aWNhdGlvbiBvZiBpZGVudGl0eScpO1xuXG4gICAgICAgICAgICAvL29idGFpbiB0aGUgUHJlbWFzdGVyS2V5IHVzaW5nIHRoZSBwcml2YXRlIGtleVxuICAgICAgICAgIH0pLnRoZW4ocG1zID0+IHtcblxuICAgICAgICAgICAgY2hhdEtleXMua2V5cy5wcmVtYXN0ZXJLZXkgPSBuZXcgVWludDhBcnJheShwbXMpO1xuXG4gICAgICAgICAgICBsZXQgc2lnbmF0dXJlID0gX3RoaXMuY3J5cHRvLmRlY29kZShyZWNlaXZlZFZhbHVlLnNpZ25hdHVyZSk7XG5cbiAgICAgICAgICAgIGxldCByZWNlaXZlZG1zZ1RvSGFzaCA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIGNoYXRLZXlzLmtleXMucHJlbWFzdGVyS2V5KTtcblxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by52ZXJpZnlSU0EoY2hhdEtleXMuaHlwZXJ0eVRvLnB1YmxpY0tleSwgSlNPTi5zdHJpbmdpZnkoY2hhdEtleXMuaGFuZHNoYWtlSGlzdG9yeSkgKyBKU09OLnN0cmluZ2lmeShyZWNlaXZlZG1zZ1RvSGFzaCksIHNpZ25hdHVyZSk7XG5cbiAgICAgICAgICAgIC8vIHZhbGlkYXRlcyB0aGUgc2lnbmF0dXJlIHJlY2VpdmVkXG4gICAgICAgICAgfSkudGhlbihzaWduVmFsaWRhdGlvblJlc3VsdCA9PiB7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzaWduYXR1cmUgdmFsaWRhdGlvbiByZXN1bHQgJywgc2lnblZhbGlkYXRpb25SZXN1bHQpO1xuICAgICAgICAgICAgbGV0IGNvbmNhdEtleSA9IF90aGlzLmNyeXB0by5jb25jYXRQTVN3aXRoUmFuZG9tcyhjaGF0S2V5cy5rZXlzLnByZW1hc3RlcktleSwgY2hhdEtleXMua2V5cy50b1JhbmRvbSwgY2hhdEtleXMua2V5cy5mcm9tUmFuZG9tKTtcblxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5nZW5lcmF0ZU1hc3RlclNlY3JldChjb25jYXRLZXksICdtZXNzYWdlSGlzdG9yaWMnICsgY2hhdEtleXMua2V5cy50b1JhbmRvbSArIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSk7XG5cbiAgICAgICAgICAgIC8vIGdlbmVyYXRlcyB0aGUgbWFzdGVyIGtleXMgZnJvbSB0aGUgUHJlbWFzdGVyIGtleSBhbmQgdGhlIHJhbmRvbXNcbiAgICAgICAgICB9KS50aGVuKG1hc3RlcktleSA9PiB7XG4gICAgICAgICAgICBjaGF0S2V5cy5rZXlzLm1hc3RlcktleSA9IG1hc3RlcktleTtcblxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5nZW5lcmF0ZUtleXMobWFzdGVyS2V5LCAna2V5IGV4cGFuc2lvbicgKyBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tICsgY2hhdEtleXMua2V5cy5mcm9tUmFuZG9tKTtcblxuICAgICAgICAgICAgLy8gZ2VuZXJhdGVzIHRoZSBzeW1tZXRyaWMga2V5cyB0byBiZSB1c2VkIGluIHRoZSBzeW1tZXRyaWMgZW5jcnlwdGlvblxuICAgICAgICAgIH0pLnRoZW4oa2V5cyA9PiB7XG4gICAgICAgICAgICBjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tU2Vzc2lvbktleSA9IG5ldyBVaW50OEFycmF5KGtleXNbMF0pO1xuICAgICAgICAgICAgY2hhdEtleXMua2V5cy5oeXBlcnR5VG9TZXNzaW9uS2V5ID0gbmV3IFVpbnQ4QXJyYXkoa2V5c1sxXSk7XG4gICAgICAgICAgICBjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tSGFzaEtleSA9IG5ldyBVaW50OEFycmF5KGtleXNbMl0pO1xuICAgICAgICAgICAgY2hhdEtleXMua2V5cy5oeXBlcnR5VG9IYXNoS2V5ID0gbmV3IFVpbnQ4QXJyYXkoa2V5c1szXSk7XG4gICAgICAgICAgICBpdiA9IF90aGlzLmNyeXB0by5kZWNvZGUocmVjZWl2ZWRWYWx1ZS5pdik7XG4gICAgICAgICAgICBsZXQgZGF0YSA9IF90aGlzLmNyeXB0by5kZWNvZGUocmVjZWl2ZWRWYWx1ZS5zeW1ldHJpY0VuY3J5cHRpb24pO1xuXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmRlY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5VG9TZXNzaW9uS2V5LCBkYXRhLCBpdik7XG5cbiAgICAgICAgICB9KS50aGVuKGRlY3J5cHRlZERhdGEgPT4ge1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnZGVjcnlwdGVkRGF0YScsIGRlY3J5cHRlZERhdGEpO1xuXG4gICAgICAgICAgICBjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5LnNlbmRlckNlcnRpZmljYXRlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkRGF0YSArIGl2KTtcblxuICAgICAgICAgICAgbGV0IGhhc2hSZWNlaXZlZCA9IF90aGlzLmNyeXB0by5kZWNvZGUocmVjZWl2ZWRWYWx1ZS5oYXNoKTtcblxuICAgICAgICAgICAgZmlsdGVyZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkRGF0YSArIGl2KTtcblxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by52ZXJpZnlITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvSGFzaEtleSwgZmlsdGVyZWRNZXNzYWdlLCBoYXNoUmVjZWl2ZWQpO1xuXG4gICAgICAgICAgfSkudGhlbih2ZXJpZmllZEhhc2ggID0+IHtcblxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZygncmVzdWx0IG9mIGhhc2ggdmVyaWZpY2F0aW9uICcsIHZlcmlmaWVkSGFzaCk7XG4gICAgICAgICAgICBsZXQgcmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgIHR5cGU6ICdoYW5kc2hha2UnLFxuICAgICAgICAgICAgICB0bzogbWVzc2FnZS5mcm9tLFxuICAgICAgICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLFxuICAgICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgaGFuZHNoYWtlUGhhc2U6ICdyZWNlaXZlckZpbmlzaGVkTWVzc2FnZSdcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGl2ID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlSVYoKTtcbiAgICAgICAgICAgIHZhbHVlLml2ID0gX3RoaXMuY3J5cHRvLmVuY29kZShpdik7XG5cbiAgICAgICAgICAgIGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKHJlY2VpdmVyRmluaXNoZWRNZXNzYWdlLCAnb2shJyArIGl2LCBjaGF0S2V5cy5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7XG5cbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uaGFzaEhNQUMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbUhhc2hLZXksIHJlY2VpdmVyRmluaXNoZWRNZXNzYWdlKTtcbiAgICAgICAgICB9KS50aGVuKGhhc2ggPT4ge1xuXG4gICAgICAgICAgICB2YWx1ZS5oYXNoID0gX3RoaXMuY3J5cHRvLmVuY29kZShoYXNoKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uZW5jcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tU2Vzc2lvbktleSwgJ29rIScsIGl2KTtcblxuICAgICAgICAgIH0pLnRoZW4oZW5jcnlwdGVkVmFsdWUgPT4ge1xuICAgICAgICAgICAgdmFsdWUudmFsdWUgPSBfdGhpcy5jcnlwdG8uZW5jb2RlKGVuY3J5cHRlZFZhbHVlKTtcbiAgICAgICAgICAgIGxldCByZWNlaXZlckZpbmlzaGVkTWVzc2FnZSA9IHtcbiAgICAgICAgICAgICAgdHlwZTogJ2hhbmRzaGFrZScsXG4gICAgICAgICAgICAgIHRvOiBtZXNzYWdlLmZyb20sXG4gICAgICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sXG4gICAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICBoYW5kc2hha2VQaGFzZTogJ3JlY2VpdmVyRmluaXNoZWRNZXNzYWdlJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogYnRvYShKU09OLnN0cmluZ2lmeSh2YWx1ZSkpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNoYXRLZXlzLmhhbmRzaGFrZUhpc3RvcnkucmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChyZWNlaXZlckZpbmlzaGVkTWVzc2FnZSwgJ29rIScgKyBpdiwgY2hhdEtleXMuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pO1xuICAgICAgICAgICAgY2hhdEtleXMuYXV0aGVudGljYXRlZCA9IHRydWU7XG4gICAgICAgICAgICByZXNvbHZlKHttZXNzYWdlOiByZWNlaXZlckZpbmlzaGVkTWVzc2FnZSwgY2hhdEtleXM6IGNoYXRLZXlzfSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3JlY2VpdmVyRmluaXNoZWRNZXNzYWdlJzpcblxuICAgICAgICAgIGNvbnNvbGUubG9nKCdyZWNlaXZlckZpbmlzaGVkTWVzc2FnZScpO1xuICAgICAgICAgIGNoYXRLZXlzLmF1dGhlbnRpY2F0ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgdmFsdWUgPSBKU09OLnBhcnNlKGF0b2IobWVzc2FnZS5ib2R5LnZhbHVlKSk7XG5cbiAgICAgICAgICBpdiA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWUuaXYpO1xuICAgICAgICAgIGxldCBkYXRhID0gX3RoaXMuY3J5cHRvLmRlY29kZSh2YWx1ZS52YWx1ZSk7XG4gICAgICAgICAgaGFzaCA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWUuaGFzaCk7XG5cbiAgICAgICAgICBfdGhpcy5jcnlwdG8uZGVjcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb1Nlc3Npb25LZXksIGRhdGEsIGl2KS50aGVuKGRlY3J5cHRlZERhdGEgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2RlY3J5cHRlZERhdGEnLCBkZWNyeXB0ZWREYXRhKTtcbiAgICAgICAgICAgIGNoYXRLZXlzLmhhbmRzaGFrZUhpc3RvcnkucmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBkZWNyeXB0ZWREYXRhICsgaXYpO1xuXG4gICAgICAgICAgICBsZXQgZmlsdGVyZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGF0YSArIGl2KTtcbiAgICAgICAgICAgIF90aGlzLmNyeXB0by52ZXJpZnlITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvSGFzaEtleSwgZmlsdGVyZWRNZXNzYWdlLCBoYXNoKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdoYXNoIHJlc3VsdCcsIHJlc3VsdCk7XG5cbiAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgd2FzIGFuIGluaXRpYWwgbWVzc2FnZSB0aGF0IHdhcyBibG9ja2VkIGFuZCBzZW5kIGl0XG4gICAgICAgICAgICAgIGlmIChjaGF0S2V5cy5pbml0aWFsTWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIGxldCBpbml0aWFsTWVzc2FnZSA9IHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6ICdjcmVhdGUnLFxuICAgICAgICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSxcbiAgICAgICAgICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sXG4gICAgICAgICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjaGF0S2V5cy5pbml0aWFsTWVzc2FnZS5ib2R5LnZhbHVlXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHJlc29sdmUoe21lc3NhZ2U6IGluaXRpYWxNZXNzYWdlLCBjaGF0S2V5czogY2hhdEtleXN9KTtcblxuICAgICAgICAgICAgICAgIC8vc2VuZHMgdGhlIHNlc3Npb25LZXkgdG8gdGhlIHN1YnNjcmliZXIgaHlwZXJ0eVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzLl9zZW5kUmVwb3J0ZXJTZXNzaW9uS2V5KG1lc3NhZ2UsIGNoYXRLZXlzKS50aGVuKHZhbHVlID0+IHtcbiAgICAgICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncmVwb3J0ZXJTZXNzaW9uS2V5JzpcblxuICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXBvcnRlclNlc3Npb25LZXknKTtcblxuICAgICAgICAgIGxldCB2YWx1ZUlWYW5kSGFzaCA9IEpTT04ucGFyc2UoYXRvYihtZXNzYWdlLmJvZHkudmFsdWUpKTtcbiAgICAgICAgICBoYXNoID0gX3RoaXMuY3J5cHRvLmRlY29kZSh2YWx1ZUlWYW5kSGFzaC5oYXNoKTtcbiAgICAgICAgICBpdiA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWVJVmFuZEhhc2guaXYpO1xuICAgICAgICAgIGxldCBlbmNyeXB0ZWRWYWx1ZSA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWVJVmFuZEhhc2gudmFsdWUpO1xuICAgICAgICAgIGxldCBwYXJzZWRWYWx1ZTtcbiAgICAgICAgICBsZXQgc2Vzc2lvbktleTtcbiAgICAgICAgICBsZXQgZGF0YU9iamVjdFVSTDtcbiAgICAgICAgICBsZXQgcmVjZWl2ZXJBY2tub3dsZWRnZU1zZztcblxuICAgICAgICAgIF90aGlzLmNyeXB0by5kZWNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSwgZW5jcnlwdGVkVmFsdWUsIGl2KS50aGVuKGRlY3J5cHRlZFZhbHVlID0+IHtcblxuICAgICAgICAgICAgcGFyc2VkVmFsdWUgPSBKU09OLnBhcnNlKGRlY3J5cHRlZFZhbHVlKTtcbiAgICAgICAgICAgIHNlc3Npb25LZXkgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHBhcnNlZFZhbHVlLnZhbHVlKTtcbiAgICAgICAgICAgIGRhdGFPYmplY3RVUkwgPSBwYXJzZWRWYWx1ZS5kYXRhT2JqZWN0VVJMO1xuXG4gICAgICAgICAgICBsZXQgbWVzc2FnZVRvSGFzaCA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIGRlY3J5cHRlZFZhbHVlICsgaXYpO1xuXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLnZlcmlmeUhNQUMoY2hhdEtleXMua2V5cy5oeXBlcnR5VG9IYXNoS2V5LCBtZXNzYWdlVG9IYXNoLCBoYXNoKTtcblxuICAgICAgICAgIH0pLnRoZW4oaGFzaFJlc3VsdCA9PiB7XG5cbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2hhc2ggc3VjY2Vzc2Z1bGx5IHZhbGlkYXRlZCAnLCBoYXNoUmVzdWx0KTtcblxuICAgICAgICAgICAgX3RoaXMuZGF0YU9iamVjdFNlc3Npb25LZXlzW2RhdGFPYmplY3RVUkxdID0gIHtzZXNzaW9uS2V5OiBzZXNzaW9uS2V5LCBpc1RvRW5jcnlwdDogdHJ1ZX07XG5cbiAgICAgICAgICAgIGl2ID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlSVYoKTtcbiAgICAgICAgICAgIHZhbHVlLml2ID0gX3RoaXMuY3J5cHRvLmVuY29kZShpdik7XG5cbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uZW5jcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tU2Vzc2lvbktleSwgJ29rISEnLCBpdik7XG4gICAgICAgICAgfSkudGhlbihlbmNyeXB0ZWRWYWx1ZSA9PiB7XG5cbiAgICAgICAgICAgIHJlY2VpdmVyQWNrbm93bGVkZ2VNc2cgPSB7XG4gICAgICAgICAgICAgIHR5cGU6ICdoYW5kc2hha2UnLFxuICAgICAgICAgICAgICB0bzogbWVzc2FnZS5mcm9tLFxuICAgICAgICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLFxuICAgICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgaGFuZHNoYWtlUGhhc2U6ICdyZWNlaXZlckFja25vd2xlZGdlJ1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YWx1ZS52YWx1ZSA9IF90aGlzLmNyeXB0by5lbmNvZGUoZW5jcnlwdGVkVmFsdWUpO1xuICAgICAgICAgICAgbGV0IG1lc3NhZ2VUb0hhc2ggPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChyZWNlaXZlckFja25vd2xlZGdlTXNnLCAnb2shIScgKyBpdiwgY2hhdEtleXMuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pO1xuXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmhhc2hITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21IYXNoS2V5LCBtZXNzYWdlVG9IYXNoKTtcbiAgICAgICAgICB9KS50aGVuKGhhc2hlZE1lc3NhZ2UgPT4ge1xuICAgICAgICAgICAgbGV0IGZpbmFsVmFsdWUgPSBidG9hKEpTT04uc3RyaW5naWZ5KHt2YWx1ZTogdmFsdWUudmFsdWUsIGhhc2g6IF90aGlzLmNyeXB0by5lbmNvZGUoaGFzaGVkTWVzc2FnZSksIGl2OiB2YWx1ZS5pdn0pKTtcblxuICAgICAgICAgICAgcmVjZWl2ZXJBY2tub3dsZWRnZU1zZy5ib2R5LnZhbHVlID0gZmluYWxWYWx1ZTtcbiAgICAgICAgICAgIHJlc29sdmUoe21lc3NhZ2U6IHJlY2VpdmVyQWNrbm93bGVkZ2VNc2csIGNoYXRLZXlzOiBjaGF0S2V5c30pO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyZWNlaXZlckFja25vd2xlZGdlJzpcblxuICAgICAgICAgIGNvbnNvbGUubG9nKCdyZWNlaXZlckFja25vd2xlZGdlJyk7XG5cbiAgICAgICAgICBsZXQgcmVjZWl2ZWR2YWx1ZUlWYW5kSGFzaCA9IEpTT04ucGFyc2UoYXRvYihtZXNzYWdlLmJvZHkudmFsdWUpKTtcbiAgICAgICAgICBsZXQgcmVjZWl2ZWRIYXNoID0gX3RoaXMuY3J5cHRvLmRlY29kZShyZWNlaXZlZHZhbHVlSVZhbmRIYXNoLmhhc2gpO1xuICAgICAgICAgIGl2ID0gX3RoaXMuY3J5cHRvLmRlY29kZShyZWNlaXZlZHZhbHVlSVZhbmRIYXNoLml2KTtcbiAgICAgICAgICBsZXQgcmVjZWl2ZWRFbmNyeXB0ZWRWYWx1ZSA9IF90aGlzLmNyeXB0by5kZWNvZGUocmVjZWl2ZWR2YWx1ZUlWYW5kSGFzaC52YWx1ZSk7XG5cbiAgICAgICAgICBfdGhpcy5jcnlwdG8uZGVjcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb1Nlc3Npb25LZXksIHJlY2VpdmVkRW5jcnlwdGVkVmFsdWUsIGl2KS50aGVuKGRlY3J5cHRlZFZhbHVlID0+IHtcblxuICAgICAgICAgICAgbGV0IGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIGRlY3J5cHRlZFZhbHVlICsgaXYpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by52ZXJpZnlITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvSGFzaEtleSwgZmlsdGVyZWRNZXNzYWdlLCByZWNlaXZlZEhhc2gpO1xuICAgICAgICAgIH0pLnRoZW4oaGFzaFJlc3VsdCA9PiB7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdoYXNoUmVzdWx0ICcsIGhhc2hSZXN1bHQpO1xuXG4gICAgICAgICAgICBsZXQgY2FsbGJhY2sgPSBjaGF0S2V5cy5jYWxsYmFjaztcblxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrKCdoYW5kU2hha2VFbmQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc29sdmUoJ2hhbmRTaGFrZUVuZCcpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJlamVjdChtZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIF9zZW5kUmVwb3J0ZXJTZXNzaW9uS2V5KG1lc3NhZ2UsIGNoYXRLZXlzKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQgc2Vzc2lvbktleUJ1bmRsZSA9IF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5c1tjaGF0S2V5cy5kYXRhT2JqZWN0VVJMXTtcbiAgICBsZXQgcmVwb3J0ZXJTZXNzaW9uS2V5TXNnO1xuICAgIGxldCB2YWx1ZVRvRW5jcnlwdDtcbiAgICBsZXQgc2Vzc2lvbktleTtcbiAgICBsZXQgaXY7XG4gICAgbGV0IHZhbHVlID0ge307XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIC8vaWYgdGhlcmUgaXMgbm90IHlldCBhIHNlc3Npb24gS2V5LCBnZW5lcmF0ZXMgYSBuZXcgb25lXG4gICAgICBpZiAoIXNlc3Npb25LZXlCdW5kbGUpIHtcbiAgICAgICAgc2Vzc2lvbktleSA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZVJhbmRvbSgpO1xuICAgICAgICBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXNbY2hhdEtleXMuZGF0YU9iamVjdFVSTF0gPSB7c2Vzc2lvbktleTogc2Vzc2lvbktleSwgaXNUb0VuY3J5cHQ6IHRydWV9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2Vzc2lvbktleSA9IHNlc3Npb25LZXlCdW5kbGUuc2Vzc2lvbktleTtcbiAgICAgIH1cblxuICAgICAgdmFsdWVUb0VuY3J5cHQgPSBKU09OLnN0cmluZ2lmeSh7dmFsdWU6IF90aGlzLmNyeXB0by5lbmNvZGUoc2Vzc2lvbktleSksIGRhdGFPYmplY3RVUkw6IGNoYXRLZXlzLmRhdGFPYmplY3RVUkx9KTtcblxuICAgICAgaXYgPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVJVigpO1xuICAgICAgdmFsdWUuaXYgPSBfdGhpcy5jcnlwdG8uZW5jb2RlKGl2KTtcbiAgICAgIF90aGlzLmNyeXB0by5lbmNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5LCB2YWx1ZVRvRW5jcnlwdCwgaXYpLnRoZW4oZW5jcnlwdGVkVmFsdWUgPT4ge1xuXG4gICAgICAgIHJlcG9ydGVyU2Vzc2lvbktleU1zZyA9IHtcbiAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJyxcbiAgICAgICAgICB0bzogbWVzc2FnZS5mcm9tLFxuICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sXG4gICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgaGFuZHNoYWtlUGhhc2U6ICdyZXBvcnRlclNlc3Npb25LZXknLFxuICAgICAgICAgICAgdmFsdWU6IF90aGlzLmNyeXB0by5lbmNvZGUoZW5jcnlwdGVkVmFsdWUpXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGxldCBmaWx0ZXJlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChyZXBvcnRlclNlc3Npb25LZXlNc2csIHZhbHVlVG9FbmNyeXB0ICsgaXYsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTtcblxuICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmhhc2hITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21IYXNoS2V5LCBmaWx0ZXJlZE1lc3NhZ2UpO1xuICAgICAgfSkudGhlbihoYXNoZWRNZXNzYWdlID0+IHtcblxuICAgICAgICBsZXQgdmFsdWVXaXRoSGFzaCA9IGJ0b2EoSlNPTi5zdHJpbmdpZnkoe3ZhbHVlOiByZXBvcnRlclNlc3Npb25LZXlNc2cuYm9keS52YWx1ZSwgaGFzaDogX3RoaXMuY3J5cHRvLmVuY29kZShoYXNoZWRNZXNzYWdlKSwgaXY6IHZhbHVlLml2fSkpO1xuXG4gICAgICAgIHJlcG9ydGVyU2Vzc2lvbktleU1zZy5ib2R5LnZhbHVlID0gdmFsdWVXaXRoSGFzaDtcbiAgICAgICAgcmVzb2x2ZSh7bWVzc2FnZTogcmVwb3J0ZXJTZXNzaW9uS2V5TXNnLCBjaGF0S2V5czogY2hhdEtleXN9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogcmV0dXJucyB0aGUgcmVwb3J0ZXIgYXNzb2NpYXRlZCB0byB0aGUgZGF0YU9iamVjdCBVUkxcbiAgKiBAcGFyYW0gICB7U3RyaW5nfSAgIGRhdGFPYmplY3RVUkwgICAgICAgICBkYXRhT2JqZWN0IHVybFxuICAqIEByZXR1cm4gICB7U3RyaW5nfSAgcmVwb3J0ZXIgICAgICAgICAgICAgIGRhdGFPYmplY3QgdXJsIHJlcG9ydGVyXG4gICovXG4gIF9nZXRIeXBlcnR5RnJvbURhdGFPYmplY3QoZGF0YU9iamVjdFVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIC8vVE9ETyByZW1vdmUgdGhpcyBsb2dpYyBhbmQgbW92ZSBpdCB0byBhIHV0aWwgZnVuY3Rpb25cblxuICAgICAgbGV0IHNwbGl0ZWRVUkwgPSBkYXRhT2JqZWN0VVJMLnNwbGl0KCcvJyk7XG4gICAgICBsZXQgZmluYWxVUkwgPSBzcGxpdGVkVVJMWzBdICsgJy8vJyArIHNwbGl0ZWRVUkxbMl0gKyAnLycgKyBzcGxpdGVkVVJMWzNdO1xuICAgICAgaWYgKHNwbGl0ZWRVUkwubGVuZ3RoID4gNikge1xuICAgICAgICBmaW5hbFVSTCA9IHNwbGl0ZWRVUkxbMF0gKyAnLy8nICsgc3BsaXRlZFVSTFsyXSArICcvJyArIHNwbGl0ZWRVUkxbM10gKyAnLycgKyBzcGxpdGVkVVJMWzRdO1xuICAgICAgfVxuXG4gICAgICAvLyBjaGVjayBpZiBpcyB0aGUgY3JlYXRvciBvZiB0aGUgaHlwZXJ0eVxuICAgICAgbGV0IHJlcG9ydGVyVVJMID0gX3RoaXMucmVnaXN0cnkuZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzKGZpbmFsVVJMKTtcblxuICAgICAgaWYgKHJlcG9ydGVyVVJMKSB7XG4gICAgICAgIHJlc29sdmUocmVwb3J0ZXJVUkwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgaXMgYWxyZWFkeSBhbiBhc3NvY2lhdGlvbiBmcm9tIGFuIGh5cGVydHlVUkwgdG8gdGhlIGRhdGFPYmplY3RcbiAgICAgICAgbGV0IHN0b3JlZFJlcG9ydGVyVVJMID0gX3RoaXMuZGF0YU9iamVjdHNJZGVudGl0eVtmaW5hbFVSTF07XG5cbiAgICAgICAgaWYgKHN0b3JlZFJlcG9ydGVyVVJMKSB7XG4gICAgICAgICAgcmVzb2x2ZShzdG9yZWRSZXBvcnRlclVSTCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgaXMgYW55IGh5cGVydHkgdGhhdCBzdWJzY3JpYmVkIHRoZSBkYXRhT2JqZWN0VVJMXG4gICAgICAgICAgbGV0IHN1YnNjcmliZXJIeXBlcnR5ID0gX3RoaXMucmVnaXN0cnkuZ2V0RGF0YU9iamVjdFN1YnNjcmliZXJIeXBlcnR5KGRhdGFPYmplY3RVUkwpO1xuXG4gICAgICAgICAgaWYgKHN1YnNjcmliZXJIeXBlcnR5KSB7XG4gICAgICAgICAgICByZXNvbHZlKHN1YnNjcmliZXJIeXBlcnR5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAvLyBzZWFyY2ggaW4gZG9tYWluIHJlZ2lzdHJ5IGZvciB0aGUgaHlwZXJ0eSBhc3NvY2lhdGVkIHRvIHRoZSBkYXRhT2JqZWN0XG4gICAgICAgICAgICAvLyBzZWFyY2ggaW4gY2FzZSBpcyBhIHN1YnNjcmliZXIgd2hvIHdhbnRzIHRvIGtub3cgdGhlIHJlcG9ydGVyXG4gICAgICAgICAgICBfdGhpcy5yZWdpc3RyeS5kaXNjb3ZlckRhdGFPYmplY3RQZXJVUkwoZmluYWxVUkwsIHNwbGl0ZWRVUkxbMl0pLnRoZW4oZGF0YU9iamVjdCA9PiB7XG4gICAgICAgICAgICAgIF90aGlzLmRhdGFPYmplY3RzSWRlbnRpdHlbZmluYWxVUkxdID0gZGF0YU9iamVjdC5yZXBvcnRlcjtcbiAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhT2JqZWN0LnJlcG9ydGVyKTtcbiAgICAgICAgICAgIH0sIGVyciA9PiB7XG4gICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBmaWx0ZXIgdGhlIG1lc3NhZ2VzIHRvIGhhc2gsIGJ5IHJlbW92aW5nIHNvbWUgZmllbGRzIG5vdCBnZW5lcmF0ZWQgYnkgdGhlIHJ1bnRpbWUgY29yZVxuICAqIEBwYXJhbSB7TWVzc2FnZX0gIG1lc3NhZ2UgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlXG4gICogQHBhcmFtIHtTdHJpbmd9ICBkZWNyeXB0ZWRWYWx1ZSAoT3B0aW9uYWwpICAgIHZhbHVlIGZyb20gYm9keS52YWx1ZSBpbiBjYXNlIGl0IG9yaWdpbmFsbHkgY29tZXMgZW5jcnlwdGVkXG4gICogQHBhcmFtIHtKU09OfSAgaWRlbnRpdHkoT3B0aW9uYWwpICAgIGFkZCB0aGUgaHlwZXJ0eSBpZGVudGl0eSBhc3NvY2lhdGVkIGluIGNhc2UgaXMgbm90IGFkZGVkIHRvIHRoZSBpbml0aWFsIG1lc3NhZ2VcbiAgKiBAcmV0dXJuIHtNZXNzYWdlfSAgbmV3IG1lc3NhZ2UgZmlsdGVyZWRcbiAgKi9cbiAgX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkVmFsdWUsIGlkZW50aXR5KSB7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogbWVzc2FnZS50eXBlLFxuICAgICAgZnJvbTogbWVzc2FnZS5mcm9tLFxuICAgICAgdG86ICAgbWVzc2FnZS50byxcbiAgICAgIGJvZHk6IHtcbiAgICAgICAgaWRlbnRpdHk6IGlkZW50aXR5IHx8IG1lc3NhZ2UuYm9keS5pZGVudGl0eSxcbiAgICAgICAgdmFsdWU6IGRlY3J5cHRlZFZhbHVlIHx8IG1lc3NhZ2UuYm9keS52YWx1ZSxcbiAgICAgICAgaGFuZHNoYWtlUGhhc2U6IG1lc3NhZ2UuYm9keS5oYW5kc2hha2VQaGFzZVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgKiBnZW5lcmF0ZXMgdGhlIGluaXRpYWwgc3RydWN0dXJlIGZvciB0aGUga2V5cyBiZXR3ZWVuIHR3byB1c2Vyc1xuICAqIEBwYXJhbSB7SlNPTn0gICAgbWVzc2FnZSAgICAgICAgICAgICAgaW5pdGlhbCBtZXNzYWdlIHRoYXQgdHJpZ2dlcnMgdGhlIG11dHVhbCBhdXRoZW50aWNhdGlvblxuICAqIEBwYXJhbSB7U3RyaW5nfSAgdXNlclVSTCAgICAgICAgICAgICAgdXNlclVSTFxuICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVjZWl2ZXIoT3B0aW9uYWwpICBpbmRpY2F0ZXMgaWYgaXMgdGhlIHNlbmRlciBvciB0aGUgcmVjZWl2ZXIgdGhhdCBjcmVhdGVzIGEgbmV3IGNoYXQgY3J5cHRvXG4gICogQHJldHVybiB7SlNPTn0gbmV3Q2hhdENyeXB0byAgbmV3IEpTT04gc3RydWN0dXJlIGZvciB0aGUgY2hhdCBjcnlwdG9cbiAgKi9cbiAgX25ld0NoYXRDcnlwdG8obWVzc2FnZSwgdXNlclVSTCwgcmVjZWl2ZXIpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy9jaGVjayB3aGV0aGVyIGlzIHRoZSBzZW5kZXIgb3IgdGhlIHJlY2VpdmVyIHRvIGNyZWF0ZSBhIG5ldyBjaGF0Q3J5cHRvXG4gICAgLy90byBtYW50YWluIGNvbnNpc3RlbmN5IG9uIHRoZSBrZXlzIGlmIHRoZSByZWNlaXZlciBjcmVhdGUgYSBuZXcgY2hhdENyeXB0byxcbiAgICAvL3RoZW4gaW52ZXJ0IHRoZSBmaWVsZHNcbiAgICBsZXQgZnJvbSA9IChyZWNlaXZlcikgPyBtZXNzYWdlLnRvIDogbWVzc2FnZS5mcm9tO1xuICAgIGxldCB0byA9IChyZWNlaXZlcikgPyBtZXNzYWdlLmZyb20gOiBtZXNzYWdlLnRvO1xuXG4gICAgbGV0IHVzZXJJbmZvID0gX3RoaXMuZ2V0SWRlbnRpdHkodXNlclVSTCk7XG5cbiAgICBsZXQgbmV3Q2hhdENyeXB0byA9XG4gICAge1xuICAgICAgaHlwZXJ0eUZyb206XG4gICAgICB7XG4gICAgICAgIGh5cGVydHk6IGZyb20sXG4gICAgICAgIHVzZXJJRDogdXNlckluZm8ubWVzc2FnZUluZm8udXNlclByb2ZpbGUudXNlcm5hbWUsXG4gICAgICAgIHByaXZhdGVLZXk6IHVzZXJJbmZvLmtleVBhaXIucHJpdmF0ZSxcbiAgICAgICAgcHVibGljS2V5OiB1c2VySW5mby5rZXlQYWlyLnB1YmxpYyxcbiAgICAgICAgYXNzZXJ0aW9uOiB1c2VySW5mby5hc3NlcnRpb24sXG4gICAgICAgIG1lc3NhZ2VJbmZvOiB1c2VySW5mby5tZXNzYWdlSW5mb1xuICAgICAgfSxcbiAgICAgIGh5cGVydHlUbzpcbiAgICAgIHtcbiAgICAgICAgaHlwZXJ0eTogdG8sXG4gICAgICAgIHVzZXJJRDogdW5kZWZpbmVkLFxuICAgICAgICBwdWJsaWNLZXk6IHVuZGVmaW5lZCxcbiAgICAgICAgYXNzZXJ0aW9uOiB1bmRlZmluZWRcbiAgICAgIH0sXG4gICAgICBrZXlzOlxuICAgICAge1xuICAgICAgICBoeXBlcnR5VG9TZXNzaW9uS2V5OiB1bmRlZmluZWQsXG4gICAgICAgIGh5cGVydHlGcm9tU2Vzc2lvbktleTogdW5kZWZpbmVkLFxuICAgICAgICBoeXBlcnR5VG9IYXNoS2V5OiB1bmRlZmluZWQsXG4gICAgICAgIGh5cGVydHlGcm9tSGFzaEtleTogdW5kZWZpbmVkLFxuICAgICAgICB0b1JhbmRvbTogdW5kZWZpbmVkLFxuICAgICAgICBmcm9tUmFuZG9tOiB1bmRlZmluZWQsXG4gICAgICAgIHByZW1hc3RlcktleTogdW5kZWZpbmVkLFxuICAgICAgICBtYXN0ZXJLZXk6IHVuZGVmaW5lZFxuICAgICAgfSxcbiAgICAgIGhhbmRzaGFrZUhpc3Rvcnk6IHtcbiAgICAgICAgc2VuZGVySGVsbG86IHVuZGVmaW5lZCxcbiAgICAgICAgcmVjZWl2ZXJIZWxsbzogdW5kZWZpbmVkLFxuICAgICAgICBzZW5kZXJDZXJ0aWZpY2F0ZTogdW5kZWZpbmVkLFxuICAgICAgICByZWNlaXZlckZpbmlzaGVkTWVzc2FnZTogdW5kZWZpbmVkXG4gICAgICB9LFxuICAgICAgaW5pdGlhbE1lc3NhZ2U6IChtZXNzYWdlLmJvZHkuaWdub3JlKSA/IHVuZGVmaW5lZCA6IG1lc3NhZ2UsXG4gICAgICBjYWxsYmFjazogbWVzc2FnZS5jYWxsYmFjayxcbiAgICAgIGF1dGhlbnRpY2F0ZWQ6IGZhbHNlLFxuICAgICAgZGF0YU9iamVjdFVSTDogbWVzc2FnZS5kYXRhT2JqZWN0VVJMXG4gICAgfTtcblxuICAgIHJldHVybiBuZXdDaGF0Q3J5cHRvO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IElkZW50aXR5TW9kdWxlO1xuIiwiY2xhc3MgQ29tYmluaW5nQWxnb3JpdGhtIHtcblxufVxuXG5leHBvcnQgZGVmYXVsdCBDb21iaW5pbmdBbGdvcml0aG07XG4iLCJjbGFzcyBPcGVyYXRvcnMge1xuXG4gIGFuZChwYXJhbXMpIHtcbiAgICByZXR1cm4gcGFyYW1zWzBdICYmIHBhcmFtc1sxXTtcbiAgfVxuXG4gIGJldHdlZW4ocGFyYW1zKSB7XG4gICAgbGV0IHN0YXJ0ID0gcGFyc2VJbnQocGFyYW1zWzBdWzBdKTtcbiAgICBsZXQgZW5kID0gcGFyc2VJbnQocGFyYW1zWzBdWzFdKTtcbiAgICBsZXQgbm93ID0gcGFyYW1zWzFdO1xuXG4gICAgaWYgKGVuZCA8IHN0YXJ0KSB7XG4gICAgICBub3cgPSAobm93IDwgc3RhcnQpID8gbm93ICs9IDI0MDAgOiBub3c7XG4gICAgICBlbmQgKz0gMjQwMDtcbiAgICB9XG5cbiAgICByZXR1cm4gKG5vdyA+IHN0YXJ0ICYmIG5vdyA8IGVuZCk7XG4gIH1cblxuICBlcXVhbHMocGFyYW1zKSB7XG4gICAgcmV0dXJuIHBhcmFtc1swXSA9PSAnKicgfHwgcGFyYW1zWzBdID09IHBhcmFtc1sxXTtcbiAgfVxuXG4gIGdyZWF0ZXJUaGFuKHBhcmFtcykge1xuICAgIHJldHVybiBwYXJhbXNbMV0gPiBwYXJhbXNbMF07XG4gIH1cblxuICBpbihwYXJhbXMpIHtcbiAgICByZXR1cm4gcGFyYW1zWzBdLmluZGV4T2YocGFyYW1zWzFdKSA+IC0xO1xuICB9XG5cbiAgbGVzc1RoYW4ocGFyYW1zKSB7XG4gICAgcmV0dXJuIHBhcmFtc1sxXSA8IHBhcmFtc1swXTtcbiAgfVxuXG4gIG5vdChwYXJhbXMpIHtcbiAgICByZXR1cm4gIXBhcmFtc1swXTtcbiAgfVxuXG4gIG9yKHBhcmFtcykge1xuICAgIHJldHVybiBwYXJhbXNbMF0gfHwgcGFyYW1zWzFdO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgT3BlcmF0b3JzO1xuIiwiaW1wb3J0IE9wZXJhdG9ycyBmcm9tICcuL09wZXJhdG9ycyc7XG5cbi8qKlxuKiBUaGUgUG9saWN5IERlY2lzaW9uIFBvaW50IChQRFApIGRlY2lkZXMgaWYgYSBtZXNzYWdlIGlzIHRvIGJlIGF1dGhvcmlzZWQgYnkgY2hlY2tpbmcgYSBzZXQgb2ZcbiogcG9saWNpZXMuIFRoZSByZXNvdXJjZSB0byBiZSB2ZXJpZmllZCBpcyBzcGVjaWZpZWQgaW4gdGhlIGZpcnN0IHdvcmQgb2YgdGhlICdjb25kaXRpb24nIGZpZWxkIG9mXG4qIGEgUG9saWN5IG9iamVjdC4gVGhlIGltcGxlbWVudGF0aW9uIHRoYXQgdmVyaWZpZXMgaWYgdGhlIG1lc3NhZ2UgaXMgY29tcGxpYW50IHdpdGggYSBwb2xpY3kgaXNcbiogc3BlY2lmaWVkIGluIGEgaGFzaHRhYmxlIHRvIGFsbG93IGR5bmFtaWMgZGVmaW5pdGlvbiBvZiB0aGUgaW1wbGVtZW50YXRpb24sIHByb3ZpZGluZ1xuKiBleHRlbnNpYmlsaXR5IHRvIHRoZSBQb2xpY3kgRW5naW5lIGZ1bmN0aW9uYWxpdGllcy5cbiovXG5jbGFzcyBQRFAge1xuXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQpIHtcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgIHRoaXMub3BlcmF0b3JzID0gbmV3IE9wZXJhdG9ycygpO1xuICB9XG5cbiAgZ2V0IGNvbnRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQ7XG4gIH1cblxuICBnZXQgb3BlcmF0b3JzKCkge1xuICAgIHJldHVybiB0aGlzLl9vcGVyYXRvcnM7XG4gIH1cblxuICBzZXQgY29udGV4dChjb250ZXh0KSB7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIH1cblxuICBzZXQgb3BlcmF0b3JzKG9wZXJhdG9ycykge1xuICAgIHRoaXMuX29wZXJhdG9ycyA9IG9wZXJhdG9ycztcbiAgfVxuXG4gIGFwcGx5UG9saWNpZXMobWVzc2FnZSwgcG9saWNpZXMpIHtcbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5ldmFsdWF0ZVNQUG9saWN5KG1lc3NhZ2UsIHBvbGljaWVzLnNlcnZpY2VQcm92aWRlclBvbGljeSk7XG4gICAgaWYgKHJlc3VsdCB8fCByZXN1bHQgPT09IHVuZGVmaW5lZCB8fCByZXN1bHQgPT09ICdOb3QgQXBwbGljYWJsZScpIHtcbiAgICAgIGxldCB1c2VyUmVzdWx0ID0gdGhpcy5ldmFsdWF0ZVVzZXJQb2xpY3kobWVzc2FnZSwgcG9saWNpZXMudXNlclBvbGljeSk7XG4gICAgICBpZiAodXNlclJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdCA9IHVzZXJSZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGV2YWx1YXRlU1BQb2xpY3kobWVzc2FnZSwgcG9saWN5KSB7XG4gICAgbGV0IHJlc3VsdDtcblxuICAgIGlmIChwb2xpY3kpIHtcbiAgICAgIHJlc3VsdCA9IHBvbGljeS5ldmFsdWF0ZSh0aGlzLmNvbnRleHQsIG1lc3NhZ2UpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBldmFsdWF0ZVVzZXJQb2xpY3kobWVzc2FnZSwgdGl0bGUpIHtcbiAgICBsZXQgcmVzdWx0O1xuXG4gICAgaWYgKHRpdGxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGxldCBwb2xpY3kgPSB0aGlzLmNvbnRleHQudXNlclBvbGljaWVzW3RpdGxlXTtcblxuICAgICAgaWYgKHBvbGljeSkge1xuICAgICAgICByZXN1bHQgPSBwb2xpY3kuZXZhbHVhdGUodGhpcy5jb250ZXh0LCBtZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUERQO1xuIiwiY2xhc3MgUEVQIHtcblxuICBjb25zdHJ1Y3Rvcihjb250ZXh0KSB7XG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgfVxuXG4gIGVuZm9yY2VQb2xpY2llcyhtZXNzYWdlLCBwb2xpY2llcywgYXV0aERlY2lzaW9uKSB7XG4gICAgbGV0IHBvbGljeTtcblxuICAgIGlmIChwb2xpY2llcy51c2VyUG9saWN5KSB7XG4gICAgICBwb2xpY3kgPSB0aGlzLmNvbnRleHQudXNlclBvbGljaWVzW3BvbGljaWVzLnVzZXJQb2xpY3ldO1xuICAgICAgaWYgKHBvbGljeSkge1xuICAgICAgICBwb2xpY3kuZW5mb3JjZUFjdGlvbnModGhpcy5jb250ZXh0LCBtZXNzYWdlLCBhdXRoRGVjaXNpb24pO1xuICAgICAgfVxuICAgIH1cbiAgICBwb2xpY3kgPSB0aGlzLmNvbnRleHQuc2VydmljZVByb3ZpZGVyUG9saWN5O1xuICAgIGlmIChwb2xpY3kpIHtcbiAgICAgIHBvbGljeS5lbmZvcmNlQWN0aW9ucyh0aGlzLmNvbnRleHQsIG1lc3NhZ2UsIGF1dGhEZWNpc2lvbik7XG4gICAgfVxuICB9XG5cbiAgLypzZW5kQXV0b21hdGljTWVzc2FnZSgpIHt9XG5cbiAgZm9yd2FyZFRvSUQoKSB7fVxuXG4gIGZvcndhcmRUb0h5cGVydHkoKSB7fSovXG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUEVQO1xuIiwiaW1wb3J0IERlbnlPdmVycmlkZXMgZnJvbSAnLi9jb21iaW5pbmdBbGdvcml0aG1zL0RlbnlPdmVycmlkZXMnO1xuaW1wb3J0IEZpcnN0QXBwbGljYWJsZSBmcm9tICcuL2NvbWJpbmluZ0FsZ29yaXRobXMvRmlyc3RBcHBsaWNhYmxlJztcblxuY2xhc3MgUG9saWN5IHtcblxuICBjb25zdHJ1Y3RvcihrZXksIHJ1bGVzLCBhY3Rpb25zLCBjb21iaW5pbmdBbGdvcml0aG0pIHtcbiAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMucnVsZXMgPSBydWxlcztcbiAgICB0aGlzLmNvbWJpbmluZ0FsZ29yaXRobSA9IGNvbWJpbmluZ0FsZ29yaXRobTtcbiAgfVxuXG4gIGdldCBjb21iaW5pbmdBbGdvcml0aG0oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbWJpbmluZ0FsZ29yaXRobTtcbiAgfVxuXG4gIHNldCBjb21iaW5pbmdBbGdvcml0aG0oY29tYmluaW5nQWxnb3JpdGhtKSB7XG4gICAgaWYgKGNvbWJpbmluZ0FsZ29yaXRobSA9PT0gJ2RlbnlPdmVycmlkZXMnKSB7XG4gICAgICB0aGlzLl9jb21iaW5pbmdBbGdvcml0aG0gPSBuZXcgRGVueU92ZXJyaWRlcygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoY29tYmluaW5nQWxnb3JpdGhtID09PSAnZmlyc3RBcHBsaWNhYmxlJykge1xuICAgICAgICB0aGlzLl9jb21iaW5pbmdBbGdvcml0aG0gPSBuZXcgRmlyc3RBcHBsaWNhYmxlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBFcnJvcignVW5rbm93biBhbGdvcml0aG06ICcgKyBjb21iaW5pbmdBbGdvcml0aG0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVuZm9yY2VBY3Rpb25zKGNvbnRleHQsIG1lc3NhZ2UsIGF1dGhEZWNpc2lvbikge1xuICAgIGZvciAobGV0IGkgaW4gdGhpcy5hY3Rpb25zKSB7XG4gICAgICBjb250ZXh0W3RoaXMuYWN0aW9uc1tpXV0obWVzc2FnZSwgYXV0aERlY2lzaW9uKTtcbiAgICB9XG4gIH1cblxuICBldmFsdWF0ZShjb250ZXh0LCBtZXNzYWdlKSB7XG4gICAgbGV0IHJlc3VsdHMgPSBbXTtcblxuICAgIGZvciAobGV0IGkgaW4gdGhpcy5ydWxlcykge1xuICAgICAgcmVzdWx0cy5wdXNoKHRoaXMucnVsZXNbaV0uZXZhbHVhdGUoY29udGV4dCwgbWVzc2FnZSkpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gdGhpcy5jb21iaW5pbmdBbGdvcml0aG0uZXZhbHVhdGUocmVzdWx0cyk7XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBQb2xpY3k7XG4iLCJpbXBvcnQgUEVQIGZyb20gJy4vUEVQJztcbmltcG9ydCBQRFAgZnJvbSAnLi9QRFAnO1xuaW1wb3J0IFVzZXJQb2xpY3kgZnJvbSAnLi9wb2xpY2llcy9Vc2VyUG9saWN5JztcblxuY2xhc3MgUG9saWN5RW5naW5lIHtcblxuICBjb25zdHJ1Y3Rvcihjb250ZXh0KSB7XG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICBjb250ZXh0LnBvbGljeUVuZ2luZSA9IHRoaXM7XG4gICAgY29udGV4dC5sb2FkQWN0aXZlUG9saWN5KCk7XG4gICAgY29udGV4dC5sb2FkR3JvdXBzKCk7XG4gICAgY29udGV4dC5sb2FkU1BQb2xpY2llcygpO1xuICAgIGNvbnRleHQubG9hZFVzZXJQb2xpY2llcygpO1xuICAgIHRoaXMucGRwID0gbmV3IFBEUChjb250ZXh0KTtcbiAgICB0aGlzLnBlcCA9IG5ldyBQRVAoY29udGV4dCk7XG4gIH1cblxuICBhZGRQb2xpY3koc291cmNlLCBrZXksIHBvbGljeSkge1xuICAgIGlmIChzb3VyY2UgPT09ICdTRVJWSUNFX1BST1ZJREVSJykge1xuICAgICAgdGhpcy5jb250ZXh0LnNlcnZpY2VQcm92aWRlclBvbGljaWVzW2tleV0gPSBwb2xpY3k7XG4gICAgICB0aGlzLmNvbnRleHQuc2F2ZVBvbGljaWVzKHNvdXJjZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzb3VyY2UgPT09ICdVU0VSJykge1xuICAgICAgICBpZiAoIXBvbGljeSkge1xuICAgICAgICAgIHBvbGljeSA9IG5ldyBVc2VyUG9saWN5KGtleSwgW10sIFtdKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbnRleHQudXNlclBvbGljaWVzW2tleV0gPSBwb2xpY3k7XG4gICAgICAgIHRoaXMuY29udGV4dC5zYXZlUG9saWNpZXMoc291cmNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IEVycm9yKCdVbmtub3duIHBvbGljeSBzb3VyY2U6ICcgKyBzb3VyY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJlbW92ZVBvbGljeShzb3VyY2UsIGtleSkge1xuICAgIGlmIChzb3VyY2UgPT09ICcqJykge1xuICAgICAgdGhpcy5jb250ZXh0LnNlcnZpY2VQcm92aWRlclBvbGljaWVzID0ge307XG4gICAgICB0aGlzLmNvbnRleHQudXNlclBvbGljaWVzID0ge307XG4gICAgICB0aGlzLmNvbnRleHQuYWN0aXZlVXNlclBvbGljeSA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHNvdXJjZSA9PT0gJ1NFUlZJQ0VfUFJPVklERVInKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmNvbnRleHQuc2VydmljZVByb3ZpZGVyUG9saWNpZXNba2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzb3VyY2UgPT09ICdVU0VSJykge1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLmNvbnRleHQudXNlclBvbGljaWVzW2tleV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gdGhpcy5jb250ZXh0LmFjdGl2ZVVzZXJQb2xpY3kpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5hY3RpdmVVc2VyUG9saWN5ID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBFcnJvcignVW5rbm93biBwb2xpY3kgc291cmNlOiAnICsgc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuY29udGV4dC5zYXZlUG9saWNpZXMoJ1VTRVInKTtcbiAgICB0aGlzLmNvbnRleHQuc2F2ZVBvbGljaWVzKCdTRVJWSUNFX1BST1ZJREVSJyk7XG4gICAgdGhpcy5jb250ZXh0LnNhdmVBY3RpdmVQb2xpY3koKTtcbiAgfVxuXG4gIHJlbW92ZVJ1bGUoa2V5LCBydWxlKSB7XG4gICAgZGVsZXRlIHRoaXMuY29udGV4dC51c2VyUG9saWNpZXNba2V5XVtydWxlLnNjb3BlXVtydWxlLnRhcmdldF1bcnVsZS5jb25kaXRpb25dO1xuICB9XG5cbiAgYXV0aG9yaXNlKG1lc3NhZ2UpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBfdGhpcy5jb250ZXh0LmF1dGhvcmlzZShtZXNzYWdlKTtcbiAgfVxuXG4gIGdldEdyb3Vwc05hbWVzKCkge1xuICAgIGxldCBteUdyb3VwcyA9IHRoaXMuY29udGV4dC5ncm91cHM7XG4gICAgbGV0IGdyb3Vwc05hbWVzID0gW107XG4gICAgaWYgKG15R3JvdXBzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGZvciAobGV0IGdyb3VwTmFtZSBpbiBteUdyb3Vwcykge1xuICAgICAgICBncm91cHNOYW1lcy5wdXNoKGdyb3VwTmFtZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBncm91cHNOYW1lcztcbiAgfVxuXG4gIGdldEdyb3VwKGdyb3VwTmFtZSkge1xuICAgIGxldCBteUdyb3VwcyA9IHRoaXMuY29udGV4dC5ncm91cHM7XG4gICAgbGV0IG1lbWJlcnMgPSBbXTtcblxuICAgIGlmIChteUdyb3Vwc1tncm91cE5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG1lbWJlcnMgPSBteUdyb3Vwc1tncm91cE5hbWVdO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1iZXJzO1xuICB9XG5cbiAgLyoqXG4gICogQ3JlYXRlcyBhIGdyb3VwIHdpdGggdGhlIGdpdmVuIG5hbWUuXG4gICogQHBhcmFtICB7U3RyaW5nfSAgZ3JvdXBOYW1lXG4gICovXG4gIGNyZWF0ZUdyb3VwKGdyb3VwTmFtZSkge1xuICAgIHRoaXMuY29udGV4dC5ncm91cHNbZ3JvdXBOYW1lXSA9IFtdO1xuICAgIHRoaXMuY29udGV4dC5zYXZlR3JvdXBzKCk7XG4gIH1cblxuICBkZWxldGVHcm91cChncm91cE5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5jb250ZXh0Lmdyb3Vwc1tncm91cE5hbWVdO1xuICAgIHRoaXMuY29udGV4dC5zYXZlR3JvdXBzKCk7XG4gIH1cblxuICAvKipcbiAgKiBBZGRzIHRoZSBnaXZlbiB1c2VyIGVtYWlsIHRvIHRoZSBncm91cCB3aXRoIHRoZSBnaXZlbiBuYW1lLlxuICAqIEBwYXJhbSAge1N0cmluZ30gIHVzZXJFbWFpbFxuICAqIEBwYXJhbSAge1N0cmluZ30gIGdyb3VwTmFtZVxuICAqL1xuICBhZGRUb0dyb3VwKGdyb3VwTmFtZSwgdXNlckVtYWlsKSB7XG4gICAgbGV0IG15R3JvdXBzID0gdGhpcy5jb250ZXh0Lmdyb3VwcztcbiAgICBpZiAobXlHcm91cHNbZ3JvdXBOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAobXlHcm91cHNbZ3JvdXBOYW1lXS5pbmRleE9mKHVzZXJFbWFpbCkgPT09IC0xKSB7XG4gICAgICAgIG15R3JvdXBzW2dyb3VwTmFtZV0ucHVzaCh1c2VyRW1haWwpO1xuICAgICAgICB0aGlzLmNvbnRleHQuc2F2ZUdyb3VwcygpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBFcnJvcignR3JvdXAgXCInICsgZ3JvdXBOYW1lICsgJ1wiIGRvZXMgbm90IGV4aXN0IScpO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZUZyb21Hcm91cChncm91cE5hbWUsIHVzZXJFbWFpbCkge1xuICAgIGxldCBncm91cCA9IHRoaXMuY29udGV4dC5ncm91cHNbZ3JvdXBOYW1lXTtcblxuICAgIGdyb3VwLnNwbGljZShncm91cC5pbmRleE9mKHVzZXJFbWFpbCksIDEpO1xuICAgIHRoaXMuY29udGV4dC5zYXZlR3JvdXBzKCk7XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBQb2xpY3lFbmdpbmU7XG4iLCJpbXBvcnQge2dldFVzZXJFbWFpbEZyb21VUkwsIGlzRGF0YU9iamVjdFVSTCwgcmVtb3ZlUGF0aEZyb21VUkx9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCBPcGVyYXRvcnMgZnJvbSAnLi9PcGVyYXRvcnMnO1xuXG5jbGFzcyBSdWxlIHtcblxuICBjb25zdHJ1Y3RvcihhdXRob3Jpc2UsIGNvbmRpdGlvbiwgcHJpb3JpdHksIHNjb3BlLCB0YXJnZXQpIHtcbiAgICB0aGlzLm9wZXJhdG9ycyA9IG5ldyBPcGVyYXRvcnMoKTtcbiAgICB0aGlzLmF1dGhvcmlzZSA9IGF1dGhvcmlzZTtcbiAgICB0aGlzLmNvbmRpdGlvbiA9IGNvbmRpdGlvbjtcbiAgICB0aGlzLnByaW9yaXR5ID0gcHJpb3JpdHk7XG4gICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICB9XG5cbiAgZXZhbHVhdGUoY29udGV4dCwgbWVzc2FnZSkge1xuICAgIGxldCBoeXBlcnR5TmFtZTtcbiAgICBzd2l0Y2ggKHRoaXMuc2NvcGUpIHtcbiAgICAgIGNhc2UgJ2dsb2JhbCc6XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdoeXBlcnR5JzpcbiAgICAgICAgaWYgKGlzRGF0YU9iamVjdFVSTChtZXNzYWdlLmZyb20pKSB7XG4gICAgICAgICAgbGV0IHJlcG9ydGVyID0gY29udGV4dC5ydW50aW1lUmVnaXN0cnkuZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzKHJlbW92ZVBhdGhGcm9tVVJMKG1lc3NhZ2UuZnJvbSkpO1xuICAgICAgICAgIGlmIChyZXBvcnRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoeXBlcnR5TmFtZSA9IGNvbnRleHQucnVudGltZVJlZ2lzdHJ5LmdldEh5cGVydHlOYW1lKHJlcG9ydGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKG1lc3NhZ2UuZnJvbS5zcGxpdCgnOi8vJylbMF0gPT09ICdoeXBlcnR5Jykge1xuICAgICAgICAgICAgaHlwZXJ0eU5hbWUgPSBjb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5nZXRIeXBlcnR5TmFtZShyZW1vdmVQYXRoRnJvbVVSTChtZXNzYWdlLmZyb20pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh5cGVydHlOYW1lID09PSB0aGlzLnRhcmdldCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGF0YU9iamVjdFVSTChtZXNzYWdlLnRvKSkge1xuICAgICAgICAgIGxldCByZXBvcnRlciA9IGNvbnRleHQucnVudGltZVJlZ2lzdHJ5LmdldFJlcG9ydGVyVVJMU3luY2hvbm91cyhyZW1vdmVQYXRoRnJvbVVSTChtZXNzYWdlLnRvKSk7XG4gICAgICAgICAgaWYgKHJlcG9ydGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGh5cGVydHlOYW1lID0gY29udGV4dC5ydW50aW1lUmVnaXN0cnkuZ2V0SHlwZXJ0eU5hbWUocmVwb3J0ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAobWVzc2FnZS50by5zcGxpdCgnOi8vJylbMF0gPT09ICdoeXBlcnR5Jykge1xuICAgICAgICAgICAgaHlwZXJ0eU5hbWUgPSBjb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5nZXRIeXBlcnR5TmFtZShyZW1vdmVQYXRoRnJvbVVSTChtZXNzYWdlLnRvKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChoeXBlcnR5TmFtZSA9PT0gdGhpcy50YXJnZXQpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnTm90IEFwcGxpY2FibGUnO1xuXG4gICAgICBjYXNlICd1c2VyJzpcbiAgICAgICAgbGV0IG93bmVyO1xuXG4gICAgICAgIGlmIChpc0RhdGFPYmplY3RVUkwobWVzc2FnZS5mcm9tKSkge1xuICAgICAgICAgIGxldCByZXBvcnRlciA9IGNvbnRleHQucnVudGltZVJlZ2lzdHJ5LmdldFJlcG9ydGVyVVJMU3luY2hvbm91cyhyZW1vdmVQYXRoRnJvbVVSTChtZXNzYWdlLmZyb20pKTtcbiAgICAgICAgICBvd25lciA9IGNvbnRleHQucnVudGltZVJlZ2lzdHJ5LmdldEh5cGVydHlPd25lcihyZXBvcnRlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKG1lc3NhZ2UuZnJvbS5zcGxpdCgnOi8vJylbMF0gPT09ICdoeXBlcnR5Jykge1xuICAgICAgICAgICAgb3duZXIgPSBjb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5nZXRIeXBlcnR5T3duZXIocmVtb3ZlUGF0aEZyb21VUkwobWVzc2FnZS5mcm9tKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChvd25lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgb3duZXIgPSBnZXRVc2VyRW1haWxGcm9tVVJMKG93bmVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3duZXIgPT09IHRoaXMudGFyZ2V0KSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEYXRhT2JqZWN0VVJMKG1lc3NhZ2UudG8pKSB7XG4gICAgICAgICAgbGV0IHJlcG9ydGVyID0gY29udGV4dC5ydW50aW1lUmVnaXN0cnkuZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzKHJlbW92ZVBhdGhGcm9tVVJMKG1lc3NhZ2UudG8pKTtcbiAgICAgICAgICBvd25lciA9IGNvbnRleHQucnVudGltZVJlZ2lzdHJ5LmdldEh5cGVydHlPd25lcihyZXBvcnRlcik7XG4gICAgICAgICAgaWYgKG93bmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG93bmVyID0gZ2V0VXNlckVtYWlsRnJvbVVSTChvd25lcik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChtZXNzYWdlLnRvLnNwbGl0KCc6Ly8nKVswXSA9PT0gJ2h5cGVydHknKSB7XG4gICAgICAgICAgICBvd25lciA9IGNvbnRleHQucnVudGltZVJlZ2lzdHJ5LmdldEh5cGVydHlPd25lcihyZW1vdmVQYXRoRnJvbVVSTChtZXNzYWdlLnRvKSk7XG4gICAgICAgICAgICBpZiAob3duZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBvd25lciA9IGdldFVzZXJFbWFpbEZyb21VUkwob3duZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAob3duZXIgPT09IHRoaXMudGFyZ2V0KSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJ05vdCBBcHBsaWNhYmxlJztcbiAgICB9XG4gICAgaWYgKHRoaXMuY29uZGl0aW9uLmlzQXBwbGljYWJsZShjb250ZXh0LCBtZXNzYWdlLCB0aGlzLnNjb3BlLCB0aGlzLnRhcmdldCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmF1dGhvcmlzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICdOb3QgQXBwbGljYWJsZSc7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJ1bGU7XG4iLCJpbXBvcnQgQ29tYmluaW5nQWxnb3JpdGhtIGZyb20gJy4uL0NvbWJpbmluZ0FsZ29yaXRobSc7XG5cbmNsYXNzIERlbnlPdmVycmlkZXMgZXh0ZW5kcyBDb21iaW5pbmdBbGdvcml0aG0ge1xuXG4gIGV2YWx1YXRlKGluZGl2aWR1YWxSZXN1bHRzKSB7XG4gICAgaWYgKGluZGl2aWR1YWxSZXN1bHRzLmluZGV4T2YoZmFsc2UpICE9PSAtMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaW5kaXZpZHVhbFJlc3VsdHMuaW5kZXhPZih0cnVlKSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJ05vdCBBcHBsaWNhYmxlJztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBEZW55T3ZlcnJpZGVzO1xuIiwiaW1wb3J0IENvbWJpbmluZ0FsZ29yaXRobSBmcm9tICcuLi9Db21iaW5pbmdBbGdvcml0aG0nO1xuXG5jbGFzcyBGaXJzdEFwcGxpY2FibGUgZXh0ZW5kcyBDb21iaW5pbmdBbGdvcml0aG0ge1xuXG4gIGV2YWx1YXRlKGluZGl2aWR1YWxSZXN1bHRzKSB7XG4gICAgZm9yIChsZXQgaSBpbiBpbmRpdmlkdWFsUmVzdWx0cykge1xuICAgICAgaWYgKGluZGl2aWR1YWxSZXN1bHRzW2ldICE9PSAnTm90IEFwcGxpY2FibGUnKSB7XG4gICAgICAgIHJldHVybiBpbmRpdmlkdWFsUmVzdWx0c1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gJ05vdCBBcHBsaWNhYmxlJztcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGaXJzdEFwcGxpY2FibGU7XG4iLCJpbXBvcnQgQ29uZGl0aW9uIGZyb20gJy4vQ29uZGl0aW9uJztcbmltcG9ydCBPcGVyYXRvcnMgZnJvbSAnLi4vT3BlcmF0b3JzJztcbmltcG9ydCBTdWJzY3JpcHRpb25Db25kaXRpb24gZnJvbSAnLi9TdWJzY3JpcHRpb25Db25kaXRpb24nO1xuXG5jbGFzcyBBZHZhbmNlZENvbmRpdGlvbiB7XG5cbiAgY29uc3RydWN0b3IoY29uZGl0aW9uKSB7XG4gICAgdGhpcy5vcGVyYXRvcnMgPSBuZXcgT3BlcmF0b3JzKCk7XG4gICAgdGhpcy5jb25kaXRpb24gPSBjb25kaXRpb247XG4gIH1cblxuICBpc0FwcGxpY2FibGUoY29udGV4dCwgbWVzc2FnZSwgc2NvcGUsIHRhcmdldCwgb3BlcmF0b3IsIGxlZnQsIHJpZ2h0KSB7XG4gICAgaWYgKCFvcGVyYXRvcikge1xuICAgICAgb3BlcmF0b3IgPSB0aGlzLmNvbmRpdGlvblswXTtcbiAgICAgIGxlZnQgPSB0aGlzLmNvbmRpdGlvblsxXTtcbiAgICAgIHJpZ2h0ID0gdGhpcy5jb25kaXRpb25bMl07XG4gICAgfVxuXG4gICAgd2hpbGUgKCEobGVmdCBpbnN0YW5jZW9mIENvbmRpdGlvbikgJiAhKGxlZnQgaW5zdGFuY2VvZiBTdWJzY3JpcHRpb25Db25kaXRpb24pICYgKHR5cGVvZiBsZWZ0ICE9PSAnYm9vbGVhbicpKSB7XG4gICAgICBsZWZ0ID0gdGhpcy5pc0FwcGxpY2FibGUoY29udGV4dCwgbWVzc2FnZSwgc2NvcGUsIHRhcmdldCwgbGVmdFswXSwgbGVmdFsxXSwgbGVmdFsyXSk7XG4gICAgfVxuICAgIGlmIChyaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3aGlsZSAoIShyaWdodCBpbnN0YW5jZW9mIENvbmRpdGlvbikgJiAhKHJpZ2h0IGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uQ29uZGl0aW9uKSAmICh0eXBlb2YgcmlnaHQgIT09ICdib29sZWFuJykpIHtcbiAgICAgICAgcmlnaHQgPSB0aGlzLmlzQXBwbGljYWJsZShjb250ZXh0LCBtZXNzYWdlLCBzY29wZSwgdGFyZ2V0LCByaWdodFswXSwgcmlnaHRbMV0sIHJpZ2h0WzJdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0TGVmdCA9ICh0eXBlb2YgbGVmdCA9PT0gJ2Jvb2xlYW4nKSA/IGxlZnQgOiBsZWZ0LmlzQXBwbGljYWJsZShjb250ZXh0LCBtZXNzYWdlLCBzY29wZSwgdGFyZ2V0KTtcbiAgICBsZXQgcmVzdWx0UmlnaHQ7XG4gICAgaWYgKHJpZ2h0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlc3VsdFJpZ2h0ID0gKHR5cGVvZiByaWdodCA9PT0gJ2Jvb2xlYW4nKSA/IHJpZ2h0IDogcmlnaHQuaXNBcHBsaWNhYmxlKGNvbnRleHQsIG1lc3NhZ2UsIHNjb3BlLCB0YXJnZXQpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5vcGVyYXRvcnNbb3BlcmF0b3JdKFtyZXN1bHRMZWZ0LCByZXN1bHRSaWdodF0pO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQWR2YW5jZWRDb25kaXRpb247XG4iLCJpbXBvcnQgT3BlcmF0b3JzIGZyb20gJy4uL09wZXJhdG9ycyc7XG5cbmNsYXNzIENvbmRpdGlvbiB7XG5cbiAgY29uc3RydWN0b3IoYXR0cmlidXRlLCBvcGVyYXRvciwgcGFyYW1zKSB7XG4gICAgdGhpcy5hdHRyaWJ1dGUgPSBhdHRyaWJ1dGU7XG4gICAgdGhpcy5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgIHRoaXMucGFyYW1zID0gcGFyYW1zO1xuICAgIHRoaXMub3BlcmF0b3JzID0gbmV3IE9wZXJhdG9ycygpO1xuICB9XG5cbiAgaXNBcHBsaWNhYmxlKGNvbnRleHQsIG1lc3NhZ2UpIHtcbiAgICBjb250ZXh0W3RoaXMuYXR0cmlidXRlXSA9IHsgbWVzc2FnZTogbWVzc2FnZSB9O1xuICAgIGxldCB2YWx1ZSA9IGNvbnRleHRbdGhpcy5hdHRyaWJ1dGVdO1xuICAgIGxldCB0ZW1wUGFyYW07XG4gICAgaWYgKHRoaXMub3BlcmF0b3IgPT09ICdpbicpIHtcbiAgICAgIGlmICh0aGlzLnBhcmFtcyA9PT0gJ3ByZWF1dGhvcmlzZWQnKSB7XG4gICAgICAgIGxldCBkYXRhT2JqZWN0VVJMID0gbWVzc2FnZS50by5zcGxpdCgnLycpO1xuICAgICAgICBkYXRhT2JqZWN0VVJMLnBvcCgpO1xuICAgICAgICBkYXRhT2JqZWN0VVJMID0gZGF0YU9iamVjdFVSTFswXSArICcvLycgKyBkYXRhT2JqZWN0VVJMWzJdO1xuICAgICAgICB0ZW1wUGFyYW0gPSBjb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5nZXRQcmVBdXRoU3Vic2NyaWJlcnMoZGF0YU9iamVjdFVSTCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZW1wUGFyYW0gPSBjb250ZXh0LnBvbGljeUVuZ2luZS5nZXRHcm91cCh0aGlzLnBhcmFtcyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghdGVtcFBhcmFtKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcGVyYXRvcnNbdGhpcy5vcGVyYXRvcl0oW3RoaXMucGFyYW1zLCB2YWx1ZV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5vcGVyYXRvcnNbdGhpcy5vcGVyYXRvcl0oW3RlbXBQYXJhbSwgdmFsdWVdKTtcbiAgICB9XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBDb25kaXRpb247XG4iLCJpbXBvcnQgQ29uZGl0aW9uIGZyb20gJy4vQ29uZGl0aW9uJztcblxuY2xhc3MgU3Vic2NyaXB0aW9uQ29uZGl0aW9uIGV4dGVuZHMgQ29uZGl0aW9uIHtcblxuICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGUsIG9wZXJhdG9yLCBwYXJhbXMpIHtcbiAgICBzdXBlcihhdHRyaWJ1dGUsIG9wZXJhdG9yLCBwYXJhbXMpO1xuICB9XG5cbiAgaXNBcHBsaWNhYmxlKGNvbnRleHQsIG1lc3NhZ2UsIHNjb3BlLCB0YXJnZXQpIHtcbiAgICBsZXQgaXNTdWJzY3JpcHRpb24gPSBtZXNzYWdlLnR5cGUgPT09ICdzdWJzY3JpYmUnO1xuICAgIGxldCBpc0Zyb21SZW1vdGVTTSA9IGNvbnRleHQuaXNGcm9tUmVtb3RlU00obWVzc2FnZS5mcm9tKTtcbiAgICBpZiAoaXNTdWJzY3JpcHRpb24gJiBpc0Zyb21SZW1vdGVTTSkge1xuICAgICAgcmV0dXJuIHN1cGVyLmlzQXBwbGljYWJsZShjb250ZXh0LCBtZXNzYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTdWJzY3JpcHRpb25Db25kaXRpb247XG4iLCJpbXBvcnQge2RpdmlkZUVtYWlsfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5cbmNsYXNzIENvbW1vbkN0eCB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5kZWZhdWx0QmVoYXZpb3IgPSB0cnVlO1xuICAgIHRoaXMuZ3JvdXBzID0ge307XG4gIH1cblxuICBnZXQgZGVmYXVsdEJlaGF2aW9yKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWZhdWx0QmVoYXZpb3I7XG4gIH1cblxuICBzZXQgZGVmYXVsdEJlaGF2aW9yKGJlaGF2aW9yKSB7XG4gICAgdGhpcy5fZGVmYXVsdEJlaGF2aW9yID0gYmVoYXZpb3I7XG4gIH1cblxuICBzZXQgZGF0ZShub3cpIHtcbiAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgbGV0IGRheSA9IFN0cmluZyhkYXRlLmdldERhdGUoKSk7XG4gICAgaWYgKGRheS5sZW5ndGggPT09IDEpIHtcbiAgICAgIGRheSA9ICcwJyArIGRheTtcbiAgICB9XG4gICAgbGV0IG1vbnRoID0gU3RyaW5nKGRhdGUuZ2V0TW9udGgoKSArIDEpO1xuICAgIGlmIChtb250aC5sZW5ndGggPT09IDEpIHtcbiAgICAgIG1vbnRoID0gJzAnICsgbW9udGg7XG4gICAgfVxuXG4gICAgdGhpcy5fZGF0ZSA9IGRheSArICcvJyArIG1vbnRoICsgJy8nICsgZGF0ZS5nZXRGdWxsWWVhcigpO1xuICB9XG5cbiAgc2V0IGRvbWFpbihwYXJhbXMpIHtcbiAgICBpZiAocGFyYW1zLm1lc3NhZ2UuYm9keS5pZGVudGl0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl9kb21haW4gPSBkaXZpZGVFbWFpbChwYXJhbXMubWVzc2FnZS5ib2R5LmlkZW50aXR5LnVzZXJQcm9maWxlLnVzZXJuYW1lKS5kb21haW47XG4gICAgfVxuICB9XG5cbiAgc2V0IHNvdXJjZShwYXJhbXMpIHtcbiAgICBpZiAocGFyYW1zLm1lc3NhZ2UuYm9keS5pZGVudGl0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl9zb3VyY2UgPSBwYXJhbXMubWVzc2FnZS5ib2R5LmlkZW50aXR5LnVzZXJQcm9maWxlLnVzZXJuYW1lO1xuICAgIH1cbiAgfVxuXG4gIHNldCB0aW1lKG5vdykge1xuICAgIG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgbGV0IG1pbnV0ZXMgPSBTdHJpbmcobm93LmdldE1pbnV0ZXMoKSk7XG4gICAgaWYgKG1pbnV0ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICBtaW51dGVzID0gJzAnICsgbWludXRlcztcbiAgICB9XG4gICAgdGhpcy5fdGltZSA9IHBhcnNlSW50KFN0cmluZyhub3cuZ2V0SG91cnMoKSkgKyBtaW51dGVzKTtcbiAgfVxuXG4gIHNldCB3ZWVrZGF5KG5vdykge1xuICAgIHRoaXMuX3dlZWtkYXkgPSBTdHJpbmcobmV3IERhdGUoKS5nZXREYXkoKSk7XG4gIH1cblxuICBnZXQgZGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0ZTtcbiAgfVxuXG4gIGdldCBkb21haW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RvbWFpbjtcbiAgfVxuXG4gIGdldCBzb3VyY2UoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gX3RoaXMuX3NvdXJjZTtcbiAgfVxuXG4gIGdldCB0aW1lKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIF90aGlzLl90aW1lO1xuICB9XG5cbiAgZ2V0IHdlZWtkYXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dlZWtkYXk7XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBDb21tb25DdHg7XG4iLCJpbXBvcnQgQ29tbW9uQ3R4IGZyb20gJy4vQ29tbW9uQ3R4JztcbmltcG9ydCBDb25kaXRpb24gZnJvbSAnLi4vY29uZGl0aW9ucy9Db25kaXRpb24nO1xuaW1wb3J0IHtkaXZpZGVVUkwsIGdldFVzZXJFbWFpbEZyb21VUkwsIGlzRGF0YU9iamVjdFVSTH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IFJ1bGUgZnJvbSAnLi4vUnVsZSc7XG5pbXBvcnQgVXNlclBvbGljeSBmcm9tICcuLi9wb2xpY2llcy9Vc2VyUG9saWN5JztcbmltcG9ydCBTdWJzY3JpcHRpb25Db25kaXRpb24gZnJvbSAnLi4vY29uZGl0aW9ucy9TdWJzY3JpcHRpb25Db25kaXRpb24nO1xuXG5jbGFzcyBSdW50aW1lQ29yZUN0eCBleHRlbmRzIENvbW1vbkN0eCB7XG5cbiAgY29uc3RydWN0b3IoaWRNb2R1bGUsIHJ1bnRpbWVSZWdpc3RyeSwgcGVyc2lzdGVuY2VNYW5hZ2VyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmlkTW9kdWxlID0gaWRNb2R1bGU7XG4gICAgdGhpcy5ydW50aW1lUmVnaXN0cnkgPSBydW50aW1lUmVnaXN0cnk7XG4gICAgdGhpcy5hY3RpdmVVc2VyUG9saWN5ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuc2VydmljZVByb3ZpZGVyUG9saWNpZXMgPSB7fTtcbiAgICB0aGlzLnVzZXJQb2xpY2llcyA9IHt9O1xuXG4gICAgdGhpcy5wZXJzaXN0ZW5jZU1hbmFnZXIgPSBwZXJzaXN0ZW5jZU1hbmFnZXI7XG4gIH1cblxuICBnZXQgZGF0YU9iamVjdFNjaGVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YU9iamVjdFNjaGVtZTtcbiAgfVxuXG4gIGdldCByZXNvdXJjZVR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc291cmNlVHlwZTtcbiAgfVxuXG4gIGdldCBzdWJzY3JpcHRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N1YnNjcmlwdGlvbjtcbiAgfVxuXG4gIHNldCBkYXRhT2JqZWN0U2NoZW1lKHBhcmFtcykge1xuICAgIGxldCBmcm9tID0gcGFyYW1zLm1lc3NhZ2UuZnJvbTtcbiAgICBpZiAoaXNEYXRhT2JqZWN0VVJMKGZyb20pKSB7XG4gICAgICB0aGlzLl9kYXRhT2JqZWN0U2NoZW1lID0gZGl2aWRlVVJMKGZyb20pLnR5cGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2RhdGFPYmplY3RTY2hlbWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgc2V0IHJlc291cmNlVHlwZShwYXJhbXMpIHtcbiAgICBsZXQgbWVzc2FnZSA9IHBhcmFtcy5tZXNzYWdlO1xuICAgIGlmIChtZXNzYWdlLmJvZHkudmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5fcmVzb3VyY2VUeXBlID0gbWVzc2FnZS5ib2R5LnZhbHVlLnJlc291cmNlVHlwZTtcbiAgICB9XG4gIH1cblxuICBzZXQgc3Vic2NyaXB0aW9uKHBhcmFtcykge1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvbiA9IHBhcmFtcy5tZXNzYWdlLmJvZHkuc3Vic2NyaWJlcjtcbiAgfVxuXG4gIGF1dGhvcmlzZShtZXNzYWdlKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBjb25zb2xlLmxvZygnLS0tIFBvbGljeSBFbmdpbmUgLS0tJyk7XG4gICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbWVzc2FnZS5ib2R5ID0gbWVzc2FnZS5ib2R5IHx8IHt9O1xuICAgICAgbGV0IHJlc3VsdDtcbiAgICAgIGxldCBpc1RvVmVyaWZ5ID0gX3RoaXMuX2lzVG9WZXJpZnkobWVzc2FnZSk7XG4gICAgICBsZXQgaXNJbmNvbWluZ01lc3NhZ2UgPSBfdGhpcy5faXNJbmNvbWluZ01lc3NhZ2UobWVzc2FnZSk7XG4gICAgICBsZXQgaXNUb0N5cGhlciA9IF90aGlzLl9pc1RvQ3lwaGVyTW9kdWxlKG1lc3NhZ2UpO1xuICAgICAgaWYgKGlzVG9WZXJpZnkpIHtcbiAgICAgICAgaWYgKGlzSW5jb21pbmdNZXNzYWdlKSB7XG4gICAgICAgICAgaWYgKGlzVG9DeXBoZXIpIHtcbiAgICAgICAgICAgIF90aGlzLmRlY3J5cHQobWVzc2FnZSkudGhlbihtZXNzYWdlID0+IHtcbiAgICAgICAgICAgICAgbGV0IHBvbGljaWVzID0ge1xuICAgICAgICAgICAgICAgIHNlcnZpY2VQcm92aWRlclBvbGljeTogX3RoaXMuZ2V0U2VydmljZVByb3ZpZGVyUG9saWN5KG1lc3NhZ2UsIGlzSW5jb21pbmdNZXNzYWdlKSxcbiAgICAgICAgICAgICAgICB1c2VyUG9saWN5OiBfdGhpcy5hY3RpdmVVc2VyUG9saWN5XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIHJlc3VsdCA9IF90aGlzLnBvbGljeUVuZ2luZS5wZHAuYXBwbHlQb2xpY2llcyhtZXNzYWdlLCBwb2xpY2llcyk7XG4gICAgICAgICAgICAgIF90aGlzLnBvbGljeUVuZ2luZS5wZXAuZW5mb3JjZVBvbGljaWVzKG1lc3NhZ2UsIHBvbGljaWVzLCByZXN1bHQpO1xuICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQgfHwgcmVzdWx0ID09PSAnTm90IEFwcGxpY2FibGUnKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gX3RoaXMuZGVmYXVsdEJlaGF2aW9yO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS5hdXRoID0gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGxldCBpc1N1YnNjcmlwdGlvbiA9IG1lc3NhZ2UudHlwZSA9PT0gJ3N1YnNjcmliZSc7XG4gICAgICAgICAgICAgICAgbGV0IGlzRnJvbVJlbW90ZVNNID0gX3RoaXMuaXNGcm9tUmVtb3RlU00obWVzc2FnZS5mcm9tKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNTdWJzY3JpcHRpb24gJiBpc0Zyb21SZW1vdGVTTSkge1xuICAgICAgICAgICAgICAgICAgX3RoaXMucmVnaXN0ZXJTdWJzY3JpYmVyKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgX3RoaXMuZG9NdXR1YWxBdXRoZW50aWNhdGlvbihtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmF1dGggPSAobWVzc2FnZS5ib2R5LmF1dGggPT09IHVuZGVmaW5lZCkgPyB0cnVlIDogbWVzc2FnZS5ib2R5LmF1dGg7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWplY3QoJ01lc3NhZ2UgYmxvY2tlZCcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAoZXJyb3IpID0+IHsgcmVqZWN0KGVycm9yKTsgfSk7XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHBvbGljaWVzID0ge1xuICAgICAgICAgICAgICBzZXJ2aWNlUHJvdmlkZXJQb2xpY3k6IF90aGlzLmdldFNlcnZpY2VQcm92aWRlclBvbGljeShtZXNzYWdlLCBpc0luY29taW5nTWVzc2FnZSksXG4gICAgICAgICAgICAgIHVzZXJQb2xpY3k6IF90aGlzLmFjdGl2ZVVzZXJQb2xpY3lcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXN1bHQgPSBfdGhpcy5wb2xpY3lFbmdpbmUucGRwLmFwcGx5UG9saWNpZXMobWVzc2FnZSwgcG9saWNpZXMpO1xuICAgICAgICAgICAgX3RoaXMucG9saWN5RW5naW5lLnBlcC5lbmZvcmNlUG9saWNpZXMobWVzc2FnZSwgcG9saWNpZXMsIHJlc3VsdCk7XG4gICAgICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQgfHwgcmVzdWx0ID09PSAnTm90IEFwcGxpY2FibGUnKSB7XG4gICAgICAgICAgICAgIHJlc3VsdCA9IF90aGlzLmRlZmF1bHRCZWhhdmlvcjtcbiAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmF1dGggPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgbGV0IGlzU3Vic2NyaXB0aW9uID0gbWVzc2FnZS50eXBlID09PSAnc3Vic2NyaWJlJztcbiAgICAgICAgICAgICAgbGV0IGlzRnJvbVJlbW90ZVNNID0gX3RoaXMuaXNGcm9tUmVtb3RlU00obWVzc2FnZS5mcm9tKTtcbiAgICAgICAgICAgICAgaWYgKGlzU3Vic2NyaXB0aW9uICYgaXNGcm9tUmVtb3RlU00pIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5yZWdpc3RlclN1YnNjcmliZXIobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgX3RoaXMuZG9NdXR1YWxBdXRoZW50aWNhdGlvbihtZXNzYWdlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBtZXNzYWdlLmJvZHkuYXV0aCA9IChtZXNzYWdlLmJvZHkuYXV0aCA9PT0gdW5kZWZpbmVkKSA/IHRydWUgOiBtZXNzYWdlLmJvZHkuYXV0aDtcbiAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlamVjdCgnTWVzc2FnZSBibG9ja2VkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldCBpc1RvU2V0SUQgPSBfdGhpcy5faXNUb1NldElEKG1lc3NhZ2UpO1xuICAgICAgICAgIGlmIChpc1RvU2V0SUQpIHtcbiAgICAgICAgICAgIF90aGlzLl9nZXRJZGVudGl0eShtZXNzYWdlKS50aGVuKGlkZW50aXR5ID0+IHtcbiAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmlkZW50aXR5ID0gaWRlbnRpdHk7XG4gICAgICAgICAgICAgIGxldCBwb2xpY2llcyA9IHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlUHJvdmlkZXJQb2xpY3k6IF90aGlzLmdldFNlcnZpY2VQcm92aWRlclBvbGljeShtZXNzYWdlLCBpc0luY29taW5nTWVzc2FnZSksXG4gICAgICAgICAgICAgICAgdXNlclBvbGljeTogX3RoaXMuYWN0aXZlVXNlclBvbGljeVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICByZXN1bHQgPSBfdGhpcy5wb2xpY3lFbmdpbmUucGRwLmFwcGx5UG9saWNpZXMobWVzc2FnZSwgcG9saWNpZXMpO1xuICAgICAgICAgICAgICBfdGhpcy5wb2xpY3lFbmdpbmUucGVwLmVuZm9yY2VQb2xpY2llcyhtZXNzYWdlLCBwb2xpY2llcywgcmVzdWx0KTtcbiAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkIHx8IHJlc3VsdCA9PT0gJ05vdCBBcHBsaWNhYmxlJykge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IF90aGlzLmRlZmF1bHRCZWhhdmlvcjtcbiAgICAgICAgICAgICAgICBtZXNzYWdlLmJvZHkuYXV0aCA9IGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlLmJvZHkuYXV0aCA9IChtZXNzYWdlLmJvZHkuYXV0aCA9PT0gdW5kZWZpbmVkKSA/IHRydWUgOiBtZXNzYWdlLmJvZHkuYXV0aDtcbiAgICAgICAgICAgICAgICBpZiAoaXNUb0N5cGhlcikge1xuICAgICAgICAgICAgICAgICAgX3RoaXMuZW5jcnlwdChtZXNzYWdlKS50aGVuKG1lc3NhZ2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7IHJlamVjdChlcnJvcik7IH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWplY3QoJ01lc3NhZ2UgYmxvY2tlZCcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAoZXJyb3IpID0+IHsgcmVqZWN0KGVycm9yKTsgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBwb2xpY2llcyA9IHtcbiAgICAgICAgICAgICAgc2VydmljZVByb3ZpZGVyUG9saWN5OiBfdGhpcy5nZXRTZXJ2aWNlUHJvdmlkZXJQb2xpY3kobWVzc2FnZSwgaXNJbmNvbWluZ01lc3NhZ2UpLFxuICAgICAgICAgICAgICB1c2VyUG9saWN5OiBfdGhpcy5hY3RpdmVVc2VyUG9saWN5XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmVzdWx0ID0gX3RoaXMucG9saWN5RW5naW5lLnBkcC5hcHBseVBvbGljaWVzKG1lc3NhZ2UsIHBvbGljaWVzKTtcbiAgICAgICAgICAgIF90aGlzLnBvbGljeUVuZ2luZS5wZXAuZW5mb3JjZVBvbGljaWVzKG1lc3NhZ2UsIHBvbGljaWVzLCByZXN1bHQpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkIHx8IHJlc3VsdCA9PT0gJ05vdCBBcHBsaWNhYmxlJykge1xuICAgICAgICAgICAgICByZXN1bHQgPSBfdGhpcy5kZWZhdWx0QmVoYXZpb3I7XG4gICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS5hdXRoID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS5hdXRoID0gKG1lc3NhZ2UuYm9keS5hdXRoID09PSB1bmRlZmluZWQpID8gdHJ1ZSA6IG1lc3NhZ2UuYm9keS5hdXRoO1xuICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVqZWN0KCdNZXNzYWdlIGJsb2NrZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IF90aGlzLmRlZmF1bHRCZWhhdmlvcjtcbiAgICAgICAgbWVzc2FnZS5ib2R5LmF1dGggPSBmYWxzZTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KCdNZXNzYWdlIGJsb2NrZWQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZGVjcnlwdChtZXNzYWdlKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xuICAgICAgX3RoaXMuaWRNb2R1bGUuZGVjcnlwdE1lc3NhZ2UobWVzc2FnZSkudGhlbihmdW5jdGlvbihtc2cpIHtcbiAgICAgICAgcmVzb2x2ZShtc2cpO1xuICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGRvTXV0dWFsQXV0aGVudGljYXRpb24obWVzc2FnZSkge1xuICAgIGxldCB0byA9IG1lc3NhZ2UudG8uc3BsaXQoJy8nKTtcbiAgICBsZXQgc3Vic0luZGV4ID0gdG8uaW5kZXhPZignc3Vic2NyaXB0aW9uJyk7XG4gICAgbGV0IGlzRGF0YU9iamVjdFN1YnNjcmlwdGlvbiA9IHN1YnNJbmRleCAhPT0gLTE7XG4gICAgbGV0IGlzRnJvbVJlbW90ZVNNID0gdGhpcy5pc0Zyb21SZW1vdGVTTShtZXNzYWdlLmZyb20pO1xuICAgIGlmIChpc0RhdGFPYmplY3RTdWJzY3JpcHRpb24gJiBpc0Zyb21SZW1vdGVTTSkge1xuICAgICAgdG8ucG9wKCk7XG4gICAgICBsZXQgZGF0YU9iamVjdFVSTCA9IHRvWzBdICsgJy8vJyArIHRvWzJdICsgJy8nICsgdG9bM107XG4gICAgICBpZiAodG8ubGVuZ3RoID4gNCkge1xuICAgICAgICBkYXRhT2JqZWN0VVJMID0gdG9bMF0gKyAnLy8nICsgdG9bMl0gKyAnLycgKyB0b1szXSArICcvJyArIHRvWzRdO1xuICAgICAgfVxuICAgICAgdGhpcy5pZE1vZHVsZS5kb011dHVhbEF1dGhlbnRpY2F0aW9uKGRhdGFPYmplY3RVUkwsIG1lc3NhZ2UuYm9keS5zdWJzY3JpYmVyKTtcbiAgICB9XG4gIH1cblxuICBlbmNyeXB0KG1lc3NhZ2UpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KSB7XG4gICAgICBfdGhpcy5pZE1vZHVsZS5lbmNyeXB0TWVzc2FnZShtZXNzYWdlKS50aGVuKChtc2cpID0+IHtcbiAgICAgICAgcmVzb2x2ZShtc2cpO1xuICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldE15RW1haWxzKCkge1xuICAgIGxldCBpZGVudGl0aWVzID0gdGhpcy5pZE1vZHVsZS5nZXRJZGVudGl0aWVzKCk7XG4gICAgbGV0IGVtYWlscyA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSBpbiBpZGVudGl0aWVzKSB7XG4gICAgICBlbWFpbHMucHVzaChnZXRVc2VyRW1haWxGcm9tVVJMKGlkZW50aXRpZXNbaV0uaWRlbnRpdHkpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW1haWxzO1xuICB9XG5cbiAgZ2V0TXlIeXBlcnRpZXMoKSB7XG4gICAgbGV0IGh5cGVydGllcyA9IHRoaXMucnVudGltZVJlZ2lzdHJ5Lmh5cGVydGllc0xpc3Q7XG4gICAgbGV0IGh5cGVydGllc05hbWVzID0gW107XG5cbiAgICBmb3IgKGxldCBpIGluIGh5cGVydGllcykge1xuICAgICAgbGV0IGh5cGVydHlOYW1lID0gaHlwZXJ0aWVzW2ldLm9iamVjdE5hbWU7XG4gICAgICBpZiAoaHlwZXJ0aWVzTmFtZXMuaW5kZXhPZihoeXBlcnR5TmFtZSkgPT09IC0xKSB7XG4gICAgICAgIGh5cGVydGllc05hbWVzLnB1c2goaHlwZXJ0eU5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBoeXBlcnRpZXNOYW1lcztcbiAgfVxuXG4gIGdldFNlcnZpY2VQcm92aWRlclBvbGljeShtZXNzYWdlLCBpc0luY29taW5nKSB7XG4gICAgbGV0IHBvbGljeTtcblxuICAgIGlmIChpc0luY29taW5nKSB7XG4gICAgICBsZXQgdG9IeXBlcnR5ID0gdGhpcy5ydW50aW1lUmVnaXN0cnkuZ2V0SHlwZXJ0eU5hbWUobWVzc2FnZS50byk7XG4gICAgICBwb2xpY3kgPSB0aGlzLnNlcnZpY2VQcm92aWRlclBvbGljaWVzW3RvSHlwZXJ0eV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBmcm9tSHlwZXJ0eSA9IHRoaXMucnVudGltZVJlZ2lzdHJ5LmdldEh5cGVydHlOYW1lKG1lc3NhZ2UuZnJvbSk7XG4gICAgICBwb2xpY3kgPSB0aGlzLnNlcnZpY2VQcm92aWRlclBvbGljaWVzW2Zyb21IeXBlcnR5XTtcbiAgICB9XG4gICAgcmV0dXJuIHBvbGljeTtcbiAgfVxuXG4gIGlzRnJvbVJlbW90ZVNNKGZyb20pIHtcbiAgICBsZXQgc3BsaXRGcm9tID0gZnJvbS5zcGxpdCgnOi8vJyk7XG4gICAgcmV0dXJuIHNwbGl0RnJvbVswXSA9PT0gJ3J1bnRpbWUnICYmIGZyb20gIT09IHRoaXMucnVudGltZVJlZ2lzdHJ5LnJ1bnRpbWVVUkwgKyAnL3NtJztcbiAgfVxuXG4gIF9pc1RvU2V0SUQobWVzc2FnZSkge1xuICAgIGxldCBzY2hlbWFzVG9JZ25vcmUgPSBbJ2RvbWFpbi1pZHAnLCAncnVudGltZScsICdkb21haW4nXTtcbiAgICBsZXQgc3BsaXRGcm9tID0gKG1lc3NhZ2UuZnJvbSkuc3BsaXQoJzovLycpO1xuICAgIGxldCBmcm9tU2NoZW1hID0gc3BsaXRGcm9tWzBdO1xuXG4gICAgcmV0dXJuIHNjaGVtYXNUb0lnbm9yZS5pbmRleE9mKGZyb21TY2hlbWEpID09PSAtMTtcbiAgfVxuXG4gIF9pc0luY29taW5nTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgcmV0dXJuIChtZXNzYWdlLmJvZHkuaWRlbnRpdHkpID8gdHJ1ZSA6IGZhbHNlO1xuICB9XG5cbiAgZ2V0VVJMKHVybCkge1xuICAgIGxldCBzcGxpdFVSTCA9IHVybC5zcGxpdCgnLycpO1xuICAgIHJldHVybiBzcGxpdFVSTFswXSArICcvLycgKyBzcGxpdFVSTFsyXSArICcvJyArIHNwbGl0VVJMWzNdO1xuICB9XG5cbiAgX2dldElkZW50aXR5KG1lc3NhZ2UpIHtcbiAgICBpZiAobWVzc2FnZS50eXBlID09PSAndXBkYXRlJykge1xuICAgICAgcmV0dXJuIHRoaXMuaWRNb2R1bGUuZ2V0SWRlbnRpdHlPZkh5cGVydHkobWVzc2FnZS5ib2R5LnNvdXJjZSk7XG4gICAgfVxuXG4gICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gJ3Jlc3BvbnNlJyAmJiBtZXNzYWdlLmJvZHkuc291cmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmlkTW9kdWxlLmdldElkZW50aXR5T2ZIeXBlcnR5KG1lc3NhZ2UuYm9keS5zb3VyY2UpO1xuICAgIH1cblxuICAgIGlmIChkaXZpZGVVUkwobWVzc2FnZS5mcm9tKS50eXBlID09PSAnaHlwZXJ0eScpIHtcbiAgICAgIHJldHVybiB0aGlzLmlkTW9kdWxlLmdldElkZW50aXR5T2ZIeXBlcnR5KG1lc3NhZ2UuZnJvbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmlkTW9kdWxlLmdldElkZW50aXR5T2ZIeXBlcnR5KHRoaXMuZ2V0VVJMKG1lc3NhZ2UuZnJvbSkpO1xuICAgIH1cbiAgfVxuXG4gIF9pc1RvVmVyaWZ5KG1lc3NhZ2UpIHtcbiAgICBsZXQgc2NoZW1hc1RvSWdub3JlID0gWydkb21haW4nLCAnZG9tYWluLWlkcCcsICdnbG9iYWwnLCAnaHlwZXJ0eS1ydW50aW1lJywgJ3J1bnRpbWUnXTtcbiAgICBsZXQgc3BsaXRGcm9tID0gKG1lc3NhZ2UuZnJvbSkuc3BsaXQoJzovLycpO1xuICAgIGxldCBmcm9tU2NoZW1hID0gc3BsaXRGcm9tWzBdO1xuICAgIGxldCBzcGxpdFRvID0gKG1lc3NhZ2UudG8pLnNwbGl0KCc6Ly8nKTtcbiAgICBsZXQgdG9TY2hlbWEgPSAgc3BsaXRUb1swXTtcbiAgICBpZiAoZnJvbVNjaGVtYSA9PT0gbWVzc2FnZS5mcm9tIHx8IHRvU2NoZW1hID09PSBtZXNzYWdlLnRvKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBzY2hlbWFzVG9JZ25vcmUuaW5kZXhPZihmcm9tU2NoZW1hKSA9PT0gLTEgfHwgc2NoZW1hc1RvSWdub3JlLmluZGV4T2YodG9TY2hlbWEpID09PSAtMTtcbiAgfVxuXG4gIC8vVE9ETyB1c2Ugc2NoZW1hc1RvSWdub3JlIGluc3RlYWRcbiAgX2lzVG9DeXBoZXJNb2R1bGUobWVzc2FnZSkge1xuICAgIGxldCBpc0NyZWF0ZSA9IG1lc3NhZ2UudHlwZSA9PT0gJ2NyZWF0ZSc7XG4gICAgbGV0IGlzRnJvbUh5cGVydHkgPSBkaXZpZGVVUkwobWVzc2FnZS5mcm9tKS50eXBlID09PSAnaHlwZXJ0eSc7XG4gICAgbGV0IGlzVG9IeXBlcnR5ID0gZGl2aWRlVVJMKG1lc3NhZ2UudG8pLnR5cGUgPT09ICdoeXBlcnR5JztcbiAgICBsZXQgaXNUb0RhdGFPYmplY3QgPSBpc0RhdGFPYmplY3RVUkwobWVzc2FnZS50byk7XG4gICAgbGV0IGlzSGFuZHNoYWtlID0gbWVzc2FnZS50eXBlID09PSAnaGFuZHNoYWtlJztcblxuICAgIHJldHVybiAoaXNDcmVhdGUgJiYgaXNGcm9tSHlwZXJ0eSAmJiBpc1RvSHlwZXJ0eSkgfHwgKGlzQ3JlYXRlICYmIGlzRnJvbUh5cGVydHkgJiYgaXNUb0RhdGFPYmplY3QpIHx8IGlzSGFuZHNoYWtlO1xuICB9XG5cbiAgbG9hZEFjdGl2ZVBvbGljeSgpIHtcbiAgICB0aGlzLmFjdGl2ZVVzZXJQb2xpY3kgPSB0aGlzLnBlcnNpc3RlbmNlTWFuYWdlci5nZXQoJ3JldGhpbms6YWN0aXZlUG9saWN5Jyk7XG4gIH1cblxuICBsb2FkR3JvdXBzKCkge1xuICAgIGxldCBncm91cHMgPSB0aGlzLnBlcnNpc3RlbmNlTWFuYWdlci5nZXQoJ3JldGhpbms6Z3JvdXBzJyk7XG4gICAgaWYgKGdyb3VwcyAhPSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuZ3JvdXBzID0gZ3JvdXBzO1xuICAgIH1cbiAgfVxuXG4gIGxvYWRTUFBvbGljaWVzKCkge1xuICAgIGxldCBwb2xpY2llcyA9IHRoaXMucGVyc2lzdGVuY2VNYW5hZ2VyLmdldCgncmV0aGluazpzcFBvbGljaWVzJyk7XG4gICAgaWYgKHBvbGljaWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuc2VydmljZVByb3ZpZGVyUG9saWNpZXMgPSBwb2xpY2llcztcbiAgICB9XG4gIH1cblxuICBsb2FkVXNlclBvbGljaWVzKCkge1xuICAgIGxldCBwb2xpY2llcyA9IHRoaXMucGVyc2lzdGVuY2VNYW5hZ2VyLmdldCgncmV0aGluazp1c2VyUG9saWNpZXMnKTtcblxuICAgIGlmIChwb2xpY2llcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBmb3IgKGxldCBpIGluIHBvbGljaWVzKSB7XG4gICAgICAgIGxldCBydWxlc1BFID0gW107XG4gICAgICAgIGxldCBydWxlcyA9IHBvbGljaWVzW2ldLnJ1bGVzO1xuICAgICAgICBmb3IgKGxldCBqIGluIHJ1bGVzKSB7XG4gICAgICAgICAgbGV0IGNvbmRpdGlvbjtcbiAgICAgICAgICBpZiAocnVsZXNbal0uY29uZGl0aW9uLmF0dHJpYnV0ZSA9PT0gJ3N1YnNjcmlwdGlvbicpIHtcbiAgICAgICAgICAgIGNvbmRpdGlvbiA9IG5ldyBTdWJzY3JpcHRpb25Db25kaXRpb24ocnVsZXNbal0uY29uZGl0aW9uLmF0dHJpYnV0ZSwgcnVsZXNbal0uY29uZGl0aW9uLm9wZXJhdG9yLCBydWxlc1tqXS5jb25kaXRpb24ucGFyYW1zKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uZGl0aW9uID0gbmV3IENvbmRpdGlvbihydWxlc1tqXS5jb25kaXRpb24uYXR0cmlidXRlLCBydWxlc1tqXS5jb25kaXRpb24ub3BlcmF0b3IsIHJ1bGVzW2pdLmNvbmRpdGlvbi5wYXJhbXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBydWxlc1BFLnB1c2gobmV3IFJ1bGUocnVsZXNbal0uYXV0aG9yaXNlLCBjb25kaXRpb24sIHJ1bGVzW2pdLnByaW9yaXR5LCBydWxlc1tqXS5zY29wZSwgcnVsZXNbal0udGFyZ2V0KSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51c2VyUG9saWNpZXNbaV0gPSBuZXcgVXNlclBvbGljeShwb2xpY2llc1tpXS5rZXksIHJ1bGVzUEUsIHBvbGljaWVzW2ldLmFjdGlvbnMsIHBvbGljaWVzW2ldLmNvbWJpbmluZ0FsZ29yaXRobSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmVnaXN0ZXJTdWJzY3JpYmVyKG1lc3NhZ2UpIHtcbiAgICBsZXQgdG8gPSBtZXNzYWdlLnRvLnNwbGl0KCcvJyk7XG4gICAgbGV0IHN1YnNJbmRleCA9IHRvLmluZGV4T2YoJ3N1YnNjcmlwdGlvbicpO1xuICAgIGxldCBpc0RhdGFPYmplY3RTdWJzY3JpcHRpb24gPSBzdWJzSW5kZXggIT09IC0xO1xuICAgIGxldCBpc0Zyb21SZW1vdGVTTSA9IHRoaXMuaXNGcm9tUmVtb3RlU00obWVzc2FnZS5mcm9tKTtcblxuICAgIGlmIChpc0RhdGFPYmplY3RTdWJzY3JpcHRpb24gJiBpc0Zyb21SZW1vdGVTTSkge1xuICAgICAgdG8ucG9wKCk7XG4gICAgICBsZXQgZGF0YU9iamVjdFVSTCA9IHRvWzBdICsgJy8vJyArIHRvWzJdICsgJy8nICsgdG9bM107XG4gICAgICBpZiAodG8ubGVuZ3RoID4gNCkge1xuICAgICAgICBkYXRhT2JqZWN0VVJMID0gdG9bMF0gKyAnLy8nICsgdG9bMl0gKyAnLycgKyB0b1szXSArICcvJyArIHRvWzRdO1xuICAgICAgfVxuICAgICAgdGhpcy5ydW50aW1lUmVnaXN0cnkucmVnaXN0ZXJTdWJzY3JpYmVyKGRhdGFPYmplY3RVUkwsIG1lc3NhZ2UuYm9keS5zdWJzY3JpYmVyKTtcbiAgICB9XG4gIH1cblxuICBfZ2V0TGFzdENvbXBvbmVudE9mVVJMKHVybCkge1xuICAgIGxldCBzcGxpdCA9IHVybC5zcGxpdCgnLycpO1xuICAgIHJldHVybiBzcGxpdFtzcGxpdC5sZW5ndGggLSAxXTtcbiAgfVxuXG4gIHNhdmVBY3RpdmVQb2xpY3koKSB7XG4gICAgdGhpcy5wZXJzaXN0ZW5jZU1hbmFnZXIuc2V0KCdyZXRoaW5rOmFjdGl2ZVBvbGljeScsIDAsIHRoaXMuYWN0aXZlVXNlclBvbGljeSk7XG4gIH1cblxuICBzYXZlR3JvdXBzKCkge1xuICAgIHRoaXMucGVyc2lzdGVuY2VNYW5hZ2VyLnNldCgncmV0aGluazpncm91cHMnLCAwLCB0aGlzLmdyb3Vwcyk7XG4gIH1cblxuICBzYXZlUG9saWNpZXMoc291cmNlKSB7XG4gICAgc3dpdGNoKHNvdXJjZSkge1xuICAgICAgY2FzZSAnVVNFUic6XG4gICAgICAgIHRoaXMucGVyc2lzdGVuY2VNYW5hZ2VyLnNldCgncmV0aGluazp1c2VyUG9saWNpZXMnLCAwLCB0aGlzLnVzZXJQb2xpY2llcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnU0VSVklDRV9QUk9WSURFUic6XG4gICAgICAgIHRoaXMucGVyc2lzdGVuY2VNYW5hZ2VyLnNldCgncmV0aGluazpzcFBvbGljaWVzJywgMCwgdGhpcy5zZXJ2aWNlUHJvdmlkZXJQb2xpY2llcyk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJ1bnRpbWVDb3JlQ3R4O1xuIiwiaW1wb3J0IEFkdmFuY2VkQ29uZGl0aW9uIGZyb20gJy4uL2NvbmRpdGlvbnMvQWR2YW5jZWRDb25kaXRpb24nO1xuaW1wb3J0IENvbmRpdGlvbiBmcm9tICcuLi9jb25kaXRpb25zL0NvbmRpdGlvbidcbmltcG9ydCBQb2xpY3kgZnJvbSAnLi4vUG9saWN5JztcbmltcG9ydCBSdWxlIGZyb20gJy4uL1J1bGUnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbkNvbmRpdGlvbiBmcm9tICcuLi9jb25kaXRpb25zL1N1YnNjcmlwdGlvbkNvbmRpdGlvbic7XG5cbmNsYXNzIFVzZXJQb2xpY3kgZXh0ZW5kcyBQb2xpY3kge1xuICBjb25zdHJ1Y3RvcihrZXksIHJ1bGVzLCBhY3Rpb25zLCBjb21iaW5pbmdBbGdvcml0aG0pIHtcbiAgICBpZiAoIWNvbWJpbmluZ0FsZ29yaXRobSkge1xuICAgICAgY29tYmluaW5nQWxnb3JpdGhtID0gJ2RlbnlPdmVycmlkZXMnO1xuICAgIH1cbiAgICBzdXBlcihrZXksIHJ1bGVzLCBhY3Rpb25zLCBjb21iaW5pbmdBbGdvcml0aG0pO1xuICB9XG5cbiAgY3JlYXRlUnVsZSh0eXBlLCBhdXRob3Jpc2UsIGNvbmRpdGlvbiwgc2NvcGUsIHRhcmdldCwgcHJpb3JpdHkpIHtcbiAgICBpZiAoIShjb25kaXRpb24gaW5zdGFuY2VvZiBDb25kaXRpb24pKSB7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnYWR2YW5jZWQnOlxuICAgICAgICAgIGNvbmRpdGlvbiA9IG5ldyBBZHZhbmNlZENvbmRpdGlvbihjb25kaXRpb24pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdzaW1wbGUnOlxuICAgICAgICAgIGNvbmRpdGlvbiA9IG5ldyBDb25kaXRpb24oY29uZGl0aW9uWzBdLCBjb25kaXRpb25bMV0sIGNvbmRpdGlvblsyXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3N1YnNjcmlwdGlvbic6XG4gICAgICAgICAgY29uZGl0aW9uID0gbmV3IFN1YnNjcmlwdGlvbkNvbmRpdGlvbihjb25kaXRpb25bMF0sIGNvbmRpdGlvblsxXSwgY29uZGl0aW9uWzJdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByaW9yaXR5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHByaW9yaXR5ID0gdGhpcy5nZXRMYXN0UHJpb3JpdHkoKSArIDE7XG4gICAgfVxuICAgIGxldCBydWxlID0gbmV3IFJ1bGUoYXV0aG9yaXNlLCBjb25kaXRpb24sIHByaW9yaXR5LCBzY29wZSwgdGFyZ2V0KTtcbiAgICB0aGlzLnJ1bGVzLnB1c2gocnVsZSk7XG4gIH1cblxuICBkZWxldGVSdWxlKHJ1bGUpIHtcbiAgICBsZXQgaW5kZXhUb1JlbW92ZSA9IHRoaXMucnVsZXMuaW5kZXhPZihydWxlKTtcbiAgICB0aGlzLnJ1bGVzLnNwbGljZShpbmRleFRvUmVtb3ZlLCAxKTtcbiAgfVxuXG4gIGdldExhc3RQcmlvcml0eSgpIHtcbiAgICBsZXQgcHJpb3JpdGllcyA9IFtdO1xuXG4gICAgaWYgKHRoaXMucnVsZXMubGVuZ3RoICE9PSAwKSB7XG4gICAgICBmb3IgKGxldCBpIGluIHRoaXMucnVsZXMpIHtcbiAgICAgICAgcHJpb3JpdGllcy5wdXNoKHRoaXMucnVsZXNbaV0ucHJpb3JpdHkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KE1hdGgsIHByaW9yaXRpZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICB9XG5cbiAgZ2V0UnVsZUJ5UHJpb3JpdHkocHJpb3JpdHkpIHtcbiAgICBmb3IgKGxldCBpIGluIHRoaXMucnVsZXMpIHtcbiAgICAgIGlmICh0aGlzLnJ1bGVzW2ldLnByaW9yaXR5ID09IHByaW9yaXR5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJ1bGVzW2ldO1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBFcnJvcignUnVsZSB3aXRoIHByaW9yaXR5ICcgKyBwcmlvcml0eSArICcgZG9lcyBub3QgZXhpc3QhJylcbiAgfVxuXG4gIGhhc1N1YnNjcmlwdGlvblJ1bGUoKSB7XG4gICAgZm9yIChsZXQgaSBpbiB0aGlzLnJ1bGVzKSB7XG4gICAgICBpZiAodGhpcy5ydWxlc1tpXS5zY29wZSAhPT0gJ2dsb2JhbCcpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5ydWxlc1tpXS5jb25kaXRpb24gaW5zdGFuY2VvZiBTdWJzY3JpcHRpb25Db25kaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5ydWxlc1tpXS5jb25kaXRpb24gaW5zdGFuY2VvZiBBZHZhbmNlZENvbmRpdGlvbikge1xuICAgICAgICAgIGZvciAobGV0IGogaW4gdGhpcy5ydWxlc1tpXS5jb25kaXRpb24uY29uZGl0aW9uKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5ydWxlc1tpXS5jb25kaXRpb24uY29uZGl0aW9uW2pdIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uQ29uZGl0aW9uKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzb3J0UnVsZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIGxldCB4ID0gYVsncHJpb3JpdHknXTsgbGV0IHkgPSBiWydwcmlvcml0eSddO1xuICAgICAgICByZXR1cm4gKCh4IDwgeSkgPyAtMSA6ICgoeCA+IHkpID8gMSA6IDApKTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBVc2VyUG9saWN5O1xuIiwiLyoqXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXG4qXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbioqL1xuLy8gaW1wb3J0IE1lc3NhZ2VGYWN0b3J5IGZyb20gJy4uLy4uL3Jlc291cmNlcy9NZXNzYWdlRmFjdG9yeSc7XG5cbi8qKlxuICogQ2xhc3Mgd2lsbCBhc2sgdG8gdGhlIG1lc3NhZ2Ugbm9kZSBmb3IgYWRkcmVzc2VzXG4gKi9cbmNsYXNzIEFkZHJlc3NBbGxvY2F0aW9uIHtcbiAgLyogcHJpdmF0ZVxuICBfdXJsOiBVUkxcbiAgX2J1czogTWluaUJ1c1xuICAqL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gQWRkcmVzcyBBbGxvY2F0aW9uXG4gICAqIEBwYXJhbSAge1VSTC5VUkx9ICAgICAgdXJsIC0gdXJsIGZyb20gd2hvIGlzIHNlbmRpbmcgdGhlIG1lc3NhZ2VcbiAgICogQHBhcmFtICB7TWluaUJ1c30gICAgICBidXMgLSBNaW5pQnVzIHVzZWQgZm9yIGFkZHJlc3MgYWxsb2NhdGlvblxuICAgKi9cbiAgY29uc3RydWN0b3IodXJsLCBidXMpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy8gbGV0IG1lc3NhZ2VGYWN0b3J5ID0gbmV3IE1lc3NhZ2VGYWN0b3J5KCk7XG4gICAgLy9cbiAgICAvLyBfdGhpcy5fbWVzc2FnZUZhY3RvcnkgPSBtZXNzYWdlRmFjdG9yeTtcbiAgICBfdGhpcy5fdXJsID0gdXJsO1xuICAgIF90aGlzLl9idXMgPSBidXM7XG4gIH1cblxuICAvKipcbiAgICogZ2V0IHRoZSBVUkwgdmFsdWVcbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgdXJsIHZhbHVlO1xuICAgKi9cbiAgZ2V0IHVybCgpIHsgcmV0dXJuIHRoaXMuX3VybDsgfVxuXG4gIC8qKlxuICAgKiBBc2sgZm9yIGNyZWF0aW9uIG9mIGEgbnVtYmVyIG9mIEh5cGVydHkgYWRkcmVzc2VzLCB0byB0aGUgZG9tYWluIG1lc3NhZ2Ugbm9kZS5cbiAgICogQHBhcmFtICB7RG9tYWlufSBkb21haW4gLSBEb21haW4gb2YgdGhlIG1lc3NhZ2Ugbm9kZS5cbiAgICogQHBhcmFtICB7bnVtYmVyfSBudW1iZXIgLSBOdW1iZXIgb2YgYWRkcmVzc2VzIHRvIHJlcXVlc3RcbiAgICogQHJldHVybnMge1Byb21pc2U8SHlwZXJ0eVVSTD59ICBBIGxpc3Qgb2YgSHlwZXJ0eVVSTCdzXG4gICAqL1xuICBjcmVhdGUoZG9tYWluLCBudW1iZXIpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy8gbGV0IG1lc3NhZ2VGYWN0b3J5ID0gX3RoaXMuX21lc3NhZ2VGYWN0b3J5O1xuXG4gICAgbGV0IG1zZyA9IHtcbiAgICAgIHR5cGU6ICdjcmVhdGUnLCBmcm9tOiBfdGhpcy5fdXJsLCB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyBkb21haW4gKyAnL2h5cGVydHktYWRkcmVzcy1hbGxvY2F0aW9uJyxcbiAgICAgIGJvZHk6IHt2YWx1ZToge251bWJlcjogbnVtYmVyfX1cbiAgICB9O1xuXG4gICAgLy8gVE9ETzogQXBwbHkgdGhlIG1lc3NhZ2UgZmFjdG9yeVxuICAgIC8vIFRoZSBtc2ctbm9kZS12ZXJ0eCBzaG91bGQgYmUgY2hhbmdlZCB0aGUgYm9keSBmaWVsZCB0byByZWNlaXZlXG4gICAgLy8gdGhlIGZvbGxvd2luZyBmb3JtYXQgYm9keToge3ZhbHVlOiB7bnVtYmVyOiBudW1iZXJ9fSBiZWNhdXNlXG4gICAgLy8gdGhlIG1lc3NhZ2UgaXMgZ2VuZXJhdGVkIGluIHRoYXQgd2F5IGJ5IHRoZSBtZXNzYWdlIGZhY3Rvcnk7XG4gICAgLy8gbGV0IG1zZyA9IG1lc3NhZ2VGYWN0b3J5LmNyZWF0ZU1lc3NhZ2VSZXF1ZXN0KF90aGlzLl91cmwsICdkb21haW46Ly9tc2ctbm9kZS4nICsgZG9tYWluICsgJy9oeXBlcnR5LWFkZHJlc3MtYWxsb2NhdGlvbicsICcnLCB7bnVtYmVyOiBudW1iZXJ9KTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIC8vIFRPRE86IGNoYW5nZSB0aGlzIHJlc3BvbnNlIE1lc3NhZ2UgdXNpbmcgdGhlIE1lc3NhZ2VGYWN0b3J5XG4gICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG1zZywgKHJlcGx5KSA9PiB7XG4gICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkge1xuICAgICAgICAgIHJlc29sdmUocmVwbHkuYm9keS52YWx1ZS5hbGxvY2F0ZWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlamVjdChyZXBseS5ib2R5LmRlc2MpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIFNlbmQgYSByZXF1ZXN0IHRvIHRoZSBkb21haW4gbWVzc2FnZSBub2RlLCB0byBkZWFsbG9jYXRlIG9uZSBvciBtb3JlIGFkZHJlc3Nlc1xuICAqIEBwYXJhbSAge0RvbWFpbn0gZG9tYWluIC0gRG9tYWluIG9mIHRoZSBtZXNzYWdlIG5vZGUuXG4gICogQHBhcmFtICB7YWRkcmVzc2VzfSBhZGRyZXNzZXMgdG8gcmVxdWVzdCB0aGUgZGVhbGxvY2F0aW9uXG4gICogQHJldHVybnMge1Byb21pc2V9ICB0aGUgcmVzcG9uc2UgYnkgdGhlIG1lc3NhZ2Ugbm9kZVxuICAqL1xuICBkZWxldGUoZG9tYWluLCBhZGRyZXNzZXMpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IG1lc3NhZ2UgPSB7XG4gICAgICB0eXBlOiAnZGVsZXRlJywgZnJvbTogX3RoaXMuX3VybCwgdG86ICdkb21haW46Ly9tc2ctbm9kZS4nICsgZG9tYWluICsgJy9oeXBlcnR5LWFkZHJlc3MtYWxsb2NhdGlvbicsXG4gICAgICBib2R5OiB7Y2hpbGRyZW5SZXNvdXJjZXM6IGFkZHJlc3Nlc31cbiAgICB9O1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCAocmVwbHkpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ3JlcGx5JywgcmVwbHkpO1xuICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHtcbiAgICAgICAgICByZXNvbHZlKHJlcGx5LmJvZHkuY29kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KHJlcGx5LmJvZHkuZGVzYyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQWRkcmVzc0FsbG9jYXRpb247XG4iLCIvKipcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKiovXG5pbXBvcnQgUmVnaXN0cnlEYXRhTW9kZWwgZnJvbSAnLi9SZWdpc3RyeURhdGFNb2RlbCc7XG5cbi8qKlxuKiAgIEBhdXRob3I6IEdpbCBEaWFzIChnaWwuZGlhc0B0ZWNuaWNvLnVsaXNib2EucHQpXG4qICAgSHlwZXJ0eUluc3RhbmNlIERhdGEgTW9kZWwgdXNlZCB0byBtb2RlbCBpbnN0YW5jZXMgb2YgSHlwZXJ0aWVzIHJ1bm5pbmcgaW4gZGV2aWNlcyBhbmQgc2VydmVycy5cbiovXG5jbGFzcyBIeXBlcnR5SW5zdGFuY2UgZXh0ZW5kcyBSZWdpc3RyeURhdGFNb2RlbCB7XG5cbiAgY29uc3RydWN0b3IoaWQsIHVybCwgZGVzY3JpcHRvclVSTCxkZXNjcmlwdG9yLCBoeXBlcnR5VVJMLCB1c2VyLCBndWlkLCBydW50aW1lLCBjb250ZXh0KSB7XG4gICAgc3VwZXIoaWQsIHVybCwgZGVzY3JpcHRvclVSTCk7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBfdGhpcy5fZGVzY3JpcHRvciA9IGRlc2NyaXB0b3I7XG4gICAgX3RoaXMuX2h5cGVydHlVUkwgPSBoeXBlcnR5VVJMO1xuICAgIF90aGlzLl91c2VyID0gdXNlcjtcbiAgICBfdGhpcy5fZ3VpZCA9IGd1aWQ7XG4gICAgX3RoaXMuX3J1bnRpbWUgPSBydW50aW1lO1xuICAgIF90aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgfVxuXG4gIHNldCB1c2VyKGlkZW50aXR5KSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBfdGhpcy51c2VyID0gaWRlbnRpdHk7XG4gIH1cblxuICBnZXQgdXNlcigpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBfdGhpcy5fdXNlcjtcbiAgfVxuXG4gIGdldCBoeXBlcnR5VVJMKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIF90aGlzLl9oeXBlcnR5VVJMO1xuICB9XG5cbiAgZ2V0IGRlc2NyaXB0b3IoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gX3RoaXMuX2Rlc2NyaXB0b3I7XG4gIH1cblxuICBnZXQgb2JqZWN0TmFtZSgpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBfdGhpcy5fZGVzY3JpcHRvci5fb2JqZWN0TmFtZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBIeXBlcnR5SW5zdGFuY2U7XG4iLCIvKipcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKiovXG5pbXBvcnQgQWRkcmVzc0FsbG9jYXRpb24gZnJvbSAnLi9BZGRyZXNzQWxsb2NhdGlvbic7XG5pbXBvcnQgT2JqZWN0QWxsb2NhdGlvbiBmcm9tICcuLi9zeW5jaGVyL09iamVjdEFsbG9jYXRpb24nO1xuaW1wb3J0IEh5cGVydHlJbnN0YW5jZSBmcm9tICcuL0h5cGVydHlJbnN0YW5jZSc7XG5cbmltcG9ydCB7TWVzc2FnZUZhY3Rvcnl9IGZyb20gJ3NlcnZpY2UtZnJhbWV3b3JrL2Rpc3QvTWVzc2FnZUZhY3RvcnknO1xuaW1wb3J0IHtkaXZpZGVVUkx9IGZyb20gJy4uL3V0aWxzL3V0aWxzLmpzJztcblxuLyppbXBvcnQgSWRlbnRpdHlNYW5hZ2VyIGZyb20gJy4vSWRlbnRpdHlNYW5hZ2VyJztcbmltcG9ydCBEaXNjb3ZlcnkgZnJvbSAnLi9EaXNjb3ZlcnknOyovXG5cbi8qKlxuKiBSdW50aW1lIFJlZ2lzdHJ5IEludGVyZmFjZVxuKi9cbmNsYXNzIFJlZ2lzdHJ5IHtcblxuICAvKipcbiAgKiBUbyBpbml0aWFsaXNlIHRoZSBSdW50aW1lIFJlZ2lzdHJ5IHdpdGggdGhlIFJ1bnRpbWVVUkwgdGhhdCB3aWxsIGJlIHRoZSBiYXNpcyB0byBkZXJpdmUgdGhlIGludGVybmFsIHJ1bnRpbWUgYWRkcmVzc2VzIHdoZW4gYWxsb2NhdGluZyBhZGRyZXNzZXMgdG8gaW50ZXJuYWwgcnVudGltZSBjb21wb25lbnQuIEluIGFkZGl0aW9uLCB0aGUgUmVnaXN0cnkgZG9tYWluIGJhY2stZW5kIHRvIGJlIHVzZWQgdG8gcmVtb3RlbHkgcmVnaXN0ZXIgUnVudGltZSBjb21wb25lbnRzLCBpcyBhbHNvIHBhc3NlZCBhcyBpbnB1dCBwYXJhbWV0ZXIuXG4gICogQHBhcmFtICB7TWVzc2FnZUJ1c30gICAgICAgICAgbXNnYnVzICAgICAgICAgICAgICAgIG1zZ2J1c1xuICAqIEBwYXJhbSAge0h5cGVydHlSdW50aW1lVVJMfSAgIHJ1bnRpbWVVUkwgICAgICAgICAgICBydW50aW1lVVJMXG4gICogQHBhcmFtICB7QXBwU2FuZGJveH0gICAgICAgICAgYXBwU2FuZGJveCAgICAgICAgICAgIGFwcFNhbmRib3hcbiAgKiBAcGFyYW0gIHtydW50aW1lQ2F0YWxvZ3VlfSAgICBydW50aW1lQ2F0YWxvZ3VlICAgICAgcnVudGltZUNhdGFsb2d1ZVxuICAqIEBwYXJhbSAge0RvbWFpblVSTH0gICAgICAgICAgIHJlbW90ZVJlZ2lzdHJ5ICAgICAgICByZW1vdGVSZWdpc3RyeVxuICAqL1xuICBjb25zdHJ1Y3RvcihydW50aW1lVVJMLCBhcHBTYW5kYm94LCBpZGVudGl0eU1vZHVsZSwgcnVudGltZUNhdGFsb2d1ZSwgcmVtb3RlUmVnaXN0cnkpIHtcblxuICAgIC8vIGhvdyBzb21lIGZ1bmN0aW9ucyByZWNlaXZlIHRoZSBwYXJhbWV0ZXJzIGZvciBleGFtcGxlOlxuICAgIC8vIG5ldyBSZWdpc3RyeSgnaHlwZXJ0eS1ydW50aW1lOi8vc3AxLzEyMycsIGFwcFNhbmRib3gsIGlkTW9kdWxlLCByZW1vdGVSZWdpc3RyeSk7XG4gICAgLy8gcmVnaXN0cnkucmVnaXN0ZXJTdHViKHNhbmRib3gsICdzcDEnKTtcbiAgICAvLyByZWdpc3RyeS5yZWdpc3Rlckh5cGVydHkoc2FuZEJveCwgJ2h5cGVydHktcnVudGltZTovL3NwMS8xMjMnKTtcbiAgICAvLyByZWdpc3RyeS5yZXNvbHZlKCdoeXBlcnR5LXJ1bnRpbWU6Ly9zcDEvMTIzJyk7XG5cbiAgICBpZiAoIXJ1bnRpbWVVUkwpIHRocm93IG5ldyBFcnJvcigncnVudGltZVVSTCBpcyBtaXNzaW5nLicpO1xuICAgIC8qaWYgKCFyZW1vdGVSZWdpc3RyeSkgdGhyb3cgbmV3IEVycm9yKCdyZW1vdGVSZWdpc3RyeSBpcyBtaXNzaW5nJyk7Ki9cblxuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5yZWdpc3RyeVVSTCA9IHJ1bnRpbWVVUkwgKyAnL3JlZ2lzdHJ5Lyc7XG4gICAgX3RoaXMuYXBwU2FuZGJveCA9IGFwcFNhbmRib3g7XG4gICAgX3RoaXMucnVudGltZVVSTCA9IHJ1bnRpbWVVUkw7XG4gICAgX3RoaXMucnVudGltZUNhdGFsb2d1ZSA9IHJ1bnRpbWVDYXRhbG9ndWU7XG4gICAgX3RoaXMucmVtb3RlUmVnaXN0cnkgPSByZW1vdGVSZWdpc3RyeTtcbiAgICBfdGhpcy5pZE1vZHVsZSA9IGlkZW50aXR5TW9kdWxlO1xuICAgIF90aGlzLmlkZW50aWZpZXIgPSBNYXRoLmZsb29yKChNYXRoLnJhbmRvbSgpICogMTAwMDApICsgMSk7XG5cbiAgICAvLyB0aGUgZXhwaXJlcyBpbiAzNjAwLCByZXByZXNlbnRzIDEgaG91clxuICAgIC8vdGhlIGV4cGlyZXMgaXMgaW4gc2Vjb25kcywgdW5pdCBvZiBtZWFzdXJlIHJlY2VpdmVkIGJ5IHRoZSBkb21haW4gcmVnaXN0cnlcbiAgICBfdGhpcy5leHBpcmVzVGltZSA9IDM2MDA7XG5cbiAgICBfdGhpcy5oeXBlcnRpZXNMaXN0VG9SZW1vdmUgPSB7fTtcbiAgICBfdGhpcy5oeXBlcnRpZXNMaXN0ID0gW107XG4gICAgbGV0IHByb3Rvc3R1YnNMaXN0ID0ge307XG4gICAgbGV0IGlkcFByb3h5TGlzdCA9IHt9O1xuICAgIF90aGlzLmRhdGFPYmplY3RMaXN0ID0ge307XG4gICAgX3RoaXMuc3Vic2NyaWJlZERhdGFPYmplY3RMaXN0ID0ge307XG4gICAgX3RoaXMuc2FuZGJveGVzTGlzdCA9IHtzYW5kYm94OiB7fSwgYXBwU2FuZGJveDoge30gfTtcbiAgICBfdGhpcy5wZXBMaXN0ID0ge307XG5cbiAgICBsZXQgaGFuZGxlciA9IHtcbiAgICAgIGdldDogZnVuY3Rpb24odGFyZ2V0LCBuYW1lKSB7XG4gICAgICAgIHJldHVybiBuYW1lIGluIHRhcmdldCA/IHRhcmdldFtuYW1lXSA6IHt9O1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICAgICAgdGFyZ2V0W3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMucHJvdG9zdHVic0xpc3QgPSBuZXcgUHJveHkocHJvdG9zdHVic0xpc3QsIGhhbmRsZXIpO1xuICAgIF90aGlzLmlkcFByb3h5TGlzdCA9IG5ldyBQcm94eShpZHBQcm94eUxpc3QsIGhhbmRsZXIpO1xuXG4gICAgd2luZG93LnByb3Rvc3R1YnNMaXN0ID0gX3RoaXMucHJvdG9zdHVic0xpc3Q7XG4gICAgd2luZG93LmlkcFByb3h5TGlzdCA9IF90aGlzLmlkcFByb3h5TGlzdDtcblxuICAgIF90aGlzLl9kb21haW4gPSBkaXZpZGVVUkwoX3RoaXMucmVnaXN0cnlVUkwpLmRvbWFpbjtcbiAgICBfdGhpcy5zYW5kYm94ZXNMaXN0LmFwcFNhbmRib3hbcnVudGltZVVSTF0gPSBhcHBTYW5kYm94O1xuICAgIGxldCBtc2dGYWN0b3J5ID0gbmV3IE1lc3NhZ2VGYWN0b3J5KCdmYWxzZScsICd7fScpO1xuICAgIF90aGlzLm1lc3NhZ2VGYWN0b3J5ID0gbXNnRmFjdG9yeTtcbiAgfVxuXG4gIHNldCBsb2FkZXIobG9hZGVyKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBfdGhpcy5fbG9hZGVyID0gbG9hZGVyO1xuICB9XG5cbiAgZ2V0IGxvYWRlcigpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBfdGhpcy5fbG9hZGVyO1xuICB9XG5cbiAgLyoqXG4gICogcmV0dXJuIHRoZSBtZXNzYWdlQnVzIGluIHRoaXMgUmVnaXN0cnlcbiAgKiBAcGFyYW0ge01lc3NhZ2VCdXN9ICAgICAgICAgICBtZXNzYWdlQnVzXG4gICovXG4gIGdldCBtZXNzYWdlQnVzKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIF90aGlzLl9tZXNzYWdlQnVzO1xuICB9XG5cbiAgLyoqXG4gICogU2V0IHRoZSBtZXNzYWdlQnVzIGluIHRoaXMgUmVnaXN0cnlcbiAgKiBAcGFyYW0ge01lc3NhZ2VCdXN9ICAgICAgICAgICBtZXNzYWdlQnVzXG4gICovXG4gIHNldCBtZXNzYWdlQnVzKG1lc3NhZ2VCdXMpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIF90aGlzLl9tZXNzYWdlQnVzID0gbWVzc2FnZUJ1cztcblxuICAgIF90aGlzLl9tZXNzYWdlQnVzLmFkZExpc3RlbmVyKF90aGlzLnJlZ2lzdHJ5VVJMLCBmdW5jdGlvbihtc2cpIHtcblxuICAgICAgbGV0IHVzZXJVcmwgPSBfdGhpcy5fZ2V0SWRlbnRpdHlBc3NvY2lhdGVkKG1zZy5ib2R5LnJlc291cmNlLCBtc2cuYm9keS5jcml0ZXJpYSk7XG5cbiAgICAgIGxldCByZXBseSA9IHtpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCB0bzogbXNnLmZyb20sIGZyb206IG1zZy50bywgYm9keToge3Jlc291cmNlOiB1c2VyVXJsfX07XG4gICAgICByZXBseS5ib2R5LmNvZGUgPSAodXNlclVybCkgPyAyMDAgOiA0MDQ7XG5cbiAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHJlcGx5KTtcbiAgICB9KTtcblxuICAgIC8vIGFsc28gc2V0IHVwIG1lc3NhZ2VCdXMgaW4gdGhlIElkZW50aXR5TW9kdWxlIGNvbXBvbmVudFxuICAgIC8vIFRPRE8gcmVkZWZpbmUgYSBiZXR0ZXIgd2F5IHRvIGFkZCB0aGUgbWVzc2FnZUJ1cyBpbiB0aGUgSWRNb2R1bGVcbiAgICBfdGhpcy5pZE1vZHVsZS5tZXNzYWdlQnVzID0gbWVzc2FnZUJ1cztcblxuICAgIC8vIEluc3RhbGwgQWRkcmVzc0FsbG9jYXRpb25cbiAgICBsZXQgYWRkcmVzc0FsbG9jYXRpb24gPSBuZXcgQWRkcmVzc0FsbG9jYXRpb24oX3RoaXMucmVnaXN0cnlVUkwsIG1lc3NhZ2VCdXMpO1xuICAgIF90aGlzLmFkZHJlc3NBbGxvY2F0aW9uID0gYWRkcmVzc0FsbG9jYXRpb247XG5cbiAgICAvL0luc3RhbGwgT2JqZWN0QWxsb2NhdGlvblxuICAgIGxldCBvYmplY3RBbGxvY2F0aW9uID0gbmV3IE9iamVjdEFsbG9jYXRpb24oX3RoaXMucmVnaXN0cnlVUkwgKyAnL29iamVjdC1hbGxvY2F0aW9uJywgbWVzc2FnZUJ1cyk7XG4gICAgX3RoaXMub2JqZWN0QWxsb2NhdGlvbiA9IG9iamVjdEFsbG9jYXRpb247XG5cbiAgICAvKmxldCBkaXNjb3ZlcnkgPSBuZXcgRGlzY292ZXJ5KF90aGlzLnJlZ2lzdHJ5VVJMLCBtZXNzYWdlQnVzKTtcbiAgICBfdGhpcy5kaXNjb3ZlcnkgPSBkaXNjb3Zlcnk7XG5cbiAgICBsZXQgaWRlbnRpdHlNYW5hZ2VyID0gbmV3IElkZW50aXR5TWFuYWdlcignaHlwZXJ0eTovL2xvY2FsaG9zdC84MzNhNmU1Mi01MTViLTQ5OGItYTU3Yi1lM2RhZWVjZTQ4ZDInLCBfdGhpcy5ydW50aW1lVVJMLCBtZXNzYWdlQnVzKTtcbiAgICBfdGhpcy5pZGVudGl0eU1hbmFnZXIgPSBpZGVudGl0eU1hbmFnZXI7Ki9cbiAgfVxuXG4gIF9nZXRJZGVudGl0eUFzc29jaWF0ZWQodHlwZSwgaHlwZXJ0eVVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBmb3IgKGxldCBoeXBlcnR5IGluIF90aGlzLmh5cGVydGllc0xpc3QpIHtcbiAgICAgIGxldCB2YWx1ZSA9IF90aGlzLmh5cGVydGllc0xpc3RbaHlwZXJ0eV07XG4gICAgICBpZiAodmFsdWUuX2h5cGVydHlVUkwgPT09IGh5cGVydHlVUkwpIHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgY2FzZSAndXNlcm5hbWUnOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLl91c2VyLnVzZXJuYW1lO1xuICAgICAgICAgIGNhc2UgJ2NuJzpcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5fdXNlci5jbjtcbiAgICAgICAgICBjYXNlICdsb2NhbGUnOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLl91c2VyLmxvY2FsZTtcbiAgICAgICAgICBjYXNlICdhdmF0YXInOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLl91c2VyLmF2YXRhcjtcbiAgICAgICAgICBjYXNlICd1c2VyVVJMJzpcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5fdXNlci51c2VyVVJMO1xuICAgICAgICAgIGNhc2UgJy4nOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLl91c2VyO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgLyoqXG4gICogcXVlcnkgdGhlIGRvbWFpbiByZWdpc3RyeSBmb3IgaW5mb3JtYXRpb24gZnJvbSBhIGRhdGFPYmplY3QgVVJMXG4gICogQHBhcmFtICB7U3RyaW5nfSAgIHVybCAgICAgICAgICAgIGRhdGFPYmplY3QgVVJMXG4gICogQHJldHVybiB7SlNPTn0gICAgIGRhdGFPYmplY3QgICAgIGRhdGEgb2JqZWN0XG4gICovXG4gIGRpc2NvdmVyRGF0YU9iamVjdFBlclVSTCh1cmwsIGRvbWFpbikge1xuXG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgbGV0IGFjdGl2ZURvbWFpbjtcblxuICAgICAgaWYgKCFkb21haW4pIHtcbiAgICAgICAgYWN0aXZlRG9tYWluID0gX3RoaXMuX2RvbWFpbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2ZURvbWFpbiA9IGRvbWFpbjtcbiAgICAgIH1cblxuICAgICAgbGV0IG1zZyA9IHtcbiAgICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBfdGhpcy5yZWdpc3RyeVVSTCwgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgYWN0aXZlRG9tYWluICsgJy8nLCBib2R5OiB7IHJlc291cmNlOiB1cmwsIHNlYXJjaDonZGF0YU9iamVjdFBlclVSTCd9XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIChyZXBseSkgPT4ge1xuXG4gICAgICAgIGxldCBkYXRhT2JqZWN0ID0gcmVwbHkuYm9keS52YWx1ZTtcblxuICAgICAgICBpZiAoZGF0YU9iamVjdCkge1xuICAgICAgICAgIHJlc29sdmUoZGF0YU9iamVjdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KCdEYXRhT2JqZWN0IG5vdCBmb3VuZCcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byByZXR1cm4gdGhlIHNhbmRib3ggaW5zdGFuY2Ugd2hlcmUgdGhlIEFwcGxpY2F0aW9uIGlzIGV4ZWN1dGluZy4gSXQgaXMgYXNzdW1lZCB0aGVyZSBpcyBqdXN0IG9uZSBBcHAgcGVyIFJ1bnRpbWUgaW5zdGFuY2UuXG4gICovXG4gIGdldEFwcFNhbmRib3goKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gX3RoaXMuYXBwU2FuZGJveDtcbiAgfVxuXG4gIC8qKlxuICAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgdXNlciBhc3NvY2lhdGVkIHRvIHRoZSBoeXBlcnR5IFVSTFxuICAqIEBwYXJhbSAgICB7U3RyaW5nfSAgICBoeXBlcnR5VVJMICAgICAgaHlwZXJ0eSBVUkxcbiAgKiBAcmV0dXJuICAge1N0cmluZ30gICAgdXNlclVSTCAgICAgICAgIHVzZXIgVVJMXG4gICovXG4gIGdldEh5cGVydHlPd25lcihoeXBlcnR5VVJMKSB7XG5cbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGxldCB1c2VyVVJMO1xuXG4gICAgZm9yIChsZXQgaW5kZXggaW4gX3RoaXMuaHlwZXJ0aWVzTGlzdCkge1xuICAgICAgbGV0IGh5cGVydHkgPSBfdGhpcy5oeXBlcnRpZXNMaXN0W2luZGV4XTtcbiAgICAgIGlmIChoeXBlcnR5Lmh5cGVydHlVUkwgPT09IGh5cGVydHlVUkwpIHtcbiAgICAgICAgdXNlclVSTCA9IGh5cGVydHkudXNlci51c2VyVVJMO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdXNlclVSTDtcbiAgfVxuXG4gIC8qKlxuICAqIHJldHVybnMgdGhlIGh5cGVydHkgTmFtZSBmcm9tIGEgZ2l2ZW4gdXJsLiBUaGlzIHVybCBjb3VsZCBiZSBmcm9tIGEgZGF0YU9iamVjdCBvciBoeXBlcnR5XG4gICogQHBhcmFtICAgIHtTdHJpbmd9ICAgIHVybCAgICAgIGh5cGVydHkgb3IgZGF0YU9iamVjdCBVUkxcbiAgKiBAcmV0dXJuICAge1N0cmluZ30gICAgaHlwZXJ0eU5hbWUgICAgIGh5cGVydHkgTmFtZVxuICAqL1xuICBnZXRIeXBlcnR5TmFtZSh1cmwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IGlzSHlwZXJ0eVVSTCA9IGRpdmlkZVVSTCh1cmwpLnR5cGUgPT09ICdoeXBlcnR5JztcblxuICAgIC8vdmFsdWUgdG8gYmUgcmV0dXJuZWQgaW4gdGhlIGVuZFxuICAgIGxldCBoeXBlcnR5TmFtZTtcblxuICAgIC8vaWYgaXMgbm90IGFuIGh5cGVydHksIGNoZWNrIGlmIGlzIGEgZGF0YU9iamVjdCBhbmQgb2J0YWluIGhpcyByZXBvcnRlclxuICAgIGxldCBoeXBlcnR5VVJMID0gKGlzSHlwZXJ0eVVSTCkgPyBoeXBlcnR5VVJMID0gdXJsIDogX3RoaXMuZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzKHVybCk7XG5cbiAgICBmb3IgKGxldCBpbmRleCBpbiBfdGhpcy5oeXBlcnRpZXNMaXN0KSB7XG4gICAgICBsZXQgaHlwZXJ0eSA9IF90aGlzLmh5cGVydGllc0xpc3RbaW5kZXhdO1xuICAgICAgaWYgKGh5cGVydHkuaHlwZXJ0eVVSTCA9PT0gaHlwZXJ0eVVSTCkge1xuICAgICAgICBoeXBlcnR5TmFtZSA9IGh5cGVydHkub2JqZWN0TmFtZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBoeXBlcnR5TmFtZTtcbiAgfVxuXG4gIC8qKlxuICAqIGZ1bmN0aW9uIHRvIHJldHVybiB0aGUgcmVwb3J0ZXJVUkwgYXNzb2NpYXRlZCB3aXRoIHRoZSBkYXRhb2JqZWN0IFVSTFxuICAqIEBwYXJhbSAgICB7U3RyaW5nfSAgICAgZGF0YU9iamVjdFVSTCAgICBkYXRhT2JqZWN0VVJMXG4gICogQHJldHVybiAgIHtTdHJpbmd9ICAgICByZXBvcnRlclVSTCAgICAgIHJlcG9ydGVyVVJMXG4gICovXG4gIGdldFJlcG9ydGVyVVJMKGRhdGFPYmplY3RVUkwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IGRhdGFPYmplY3QgPSBfdGhpcy5kYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VVJMXTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGlmIChkYXRhT2JqZWN0KSB7XG4gICAgICAgIHJlc29sdmUoZGF0YU9iamVjdC5yZXBvcnRlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWplY3QoJ05vIHJlcG9ydGVyIHdhcyBmb3VuZCcpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogZnVuY3Rpb24gdG8gcmV0dXJuIHRoZSByZXBvcnRlclVSTCBhc3NvY2lhdGVkIHdpdGggdGhlIGRhdGFvYmplY3QgVVJMLiBubyBwcm9taXNlIHJldHVybmVkXG4gICogQHBhcmFtICAgIHtTdHJpbmd9ICAgICBkYXRhT2JqZWN0VVJMICAgIGRhdGFPYmplY3RVUkxcbiAgKiBAcmV0dXJuICAge1N0cmluZ30gICAgIHJlcG9ydGVyVVJMICAgICAgcmVwb3J0ZXJVUkxcbiAgKi9cbiAgZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzKGRhdGFPYmplY3RVUkwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IGRhdGFPYmplY3QgPSBfdGhpcy5kYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VVJMXTtcblxuICAgIHJldHVybiAoZGF0YU9iamVjdCkgPyBkYXRhT2JqZWN0LnJlcG9ydGVyIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgLyoqXG4gICogcmV0dXJucyB0aGUgaHlwZXJ0eSBVUkwgdGhhdCBzdWJzY3JpYmVkIHRoZSBkYXRhT2JqZWN0XG4gICogQHBhcmFtICAgIHtTdHJpbmd9ICAgICB1cmwgICAgICAgICAgICB1cmwgZm9ybWF0XG4gICogQHJldHVybiAgIHtTdHJpbmd9ICAgIEh5cGVydHkgVVJMIHN1YnNjcmliZWQgdG8gdGhlIFVSTFxuICAqL1xuICBnZXREYXRhT2JqZWN0U3Vic2NyaWJlckh5cGVydHkodXJsKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBfdGhpcy5zdWJzY3JpYmVkRGF0YU9iamVjdExpc3RbdXJsXTtcbiAgfVxuXG4gIC8qKlxuICAqIHJlZ2lzdGVyIGEgZGVzaXJlZCBkYXRhT2JqZWN0IHRvIHN1YnNjcmliZVxuICAqIEBwYXJhbSAgICB7U3RyaW5nfSAgICBkYXRhT2JqZWN0VVJMICAgICAgZGF0YU9iamVjdCBVUkxcbiAgKi9cbiAgcmVnaXN0ZXJTdWJzY3JpYmVkRGF0YU9iamVjdChkYXRhT2JqZWN0VVJMLCBoeXBlcnR5VVJMKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBpZiAoX3RoaXMuc3Vic2NyaWJlZERhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIF90aGlzLnN1YnNjcmliZWREYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VVJMXSA9IGh5cGVydHlVUkw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gcmV0dXJuIHRoZSBsaXN0IG9mIHByZSBhdXRob3Jpc2VkIHVzZXJzIHJlY2VpdmVkIGluIHRoZSBjcmVhdGlvbiBvZiBhIGRhdGEgb2JqZWN0XG4gICogQHBhcmFtICAgIHtTdHJpbmd9ICAgICAgICAgICAgZGF0YU9iamVjdFVSTCAgICBkYXRhT2JqZWN0VVJMXG4gICogQHJldHVybiAgIHtBcnJheTxTdHJpbmc+fSAgICAgcHJlQXV0aCAgICAgICAgIExpc3Qgb2YgcHJlIGF1dGhvcmlzZWQgdXNlcnNcbiAgKi9cbiAgZ2V0UHJlQXV0aFN1YnNjcmliZXJzKGRhdGFPYmplY3RVUkwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGxldCBkYXRhT2JqZWN0ID0gX3RoaXMuZGF0YU9iamVjdExpc3RbZGF0YU9iamVjdFVSTF07XG4gICAgbGV0IHByZUF1dGggPSBbXTtcblxuICAgIGlmIChkYXRhT2JqZWN0KSB7XG4gICAgICBwcmVBdXRoID0gZGF0YU9iamVjdC5wcmVBdXRoO1xuICAgIH1cbiAgICByZXR1cm4gcHJlQXV0aDtcbiAgfVxuXG4gIC8qKlxuICAqIHNlbmQgcmVxdWVzdHMgdG8gdW5yZWdpc3RlciBhbGwgaHlwZXJ0aWVzIHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5XG4gICogQHJldHVybiAgIHtQcm9taXNlfSAgICAgcmV0dXJuIGEgcHJvbWlzZSBpZiB0aGUgcmVzdWx0IG9mIHVucmVnaXN0cmF0aW9uIGFsbCBoeXBlcnRpZXNcbiAgKi9cbiAgdW5yZWdpc3RlckFsbEh5cGVydGllcygpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IHVucmVnaXN0ZXJSZXN1bHRzID0gW107XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcblxuICAgICAgZm9yIChsZXQgaW5kZXggaW4gX3RoaXMuaHlwZXJ0aWVzTGlzdCkge1xuICAgICAgICBsZXQgaHlwZXJ0eSA9IF90aGlzLmh5cGVydGllc0xpc3RbaW5kZXhdO1xuICAgICAgICBsZXQgcmVzdWx0ID0gX3RoaXMudW5yZWdpc3Rlckh5cGVydHlJbnN0YW5jZShoeXBlcnR5LnVzZXIudXNlclVSTCwgaHlwZXJ0eS5oeXBlcnR5VVJMKTtcbiAgICAgICAgdW5yZWdpc3RlclJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgfVxuXG4gICAgICBQcm9taXNlLmFsbCh1bnJlZ2lzdGVyUmVzdWx0cykudGhlbigoKSA9PiB7XG5cbiAgICAgICAgcmVzb2x2ZSgnc3VjY2Vzc2Z1bGx5IHVucmVnaXN0ZXJlZCBhbGwgaHlwZXJ0aWVzJyk7XG4gICAgICB9LCBlcnJvciA9PiB7IHJlamVjdChlcnJvcik7fSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiAgZnVuY3Rpb24gdG8gdW5yZWdpc3RlciBhbiBoeXBlcnR5SW5zdGFuY2UgaW4gdGhlIERvbWFpbiBSZWdpc3RyeVxuICAqICBAcGFyYW0gICB7U3RyaW5nfSAgICAgIHVzZXIgICAgICAgIHVzZXIgdXJsXG4gICogIEBwYXJhbSAgIHtTdHJpbmd9ICAgICAgaHlwZXJ0eUluc3RhbmNlICAgSHlwZXJ0eUluc250YW5jZSB1cmxcbiAgKlxuICAqL1xuICB1bnJlZ2lzdGVySHlwZXJ0eUluc3RhbmNlKHVzZXIsIGh5cGVydHlJbnN0YW5jZSkge1xuICAgIC8vVE9ETyB3b3JraW5nIGJ1dCB0aGUgdXNlclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgbWVzc2FnZSA9IHsgdHlwZTogJ2RlbGV0ZScsIGZyb206IF90aGlzLnJlZ2lzdHJ5VVJMLFxuICAgICAgICAgICAgICAgICAgICB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5fZG9tYWluICsgJy8nLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiB7IHZhbHVlOiB7dXNlcjogdXNlciwgdXJsOiBoeXBlcnR5SW5zdGFuY2UgfX19O1xuXG4gICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgKHJlcGx5KSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygndW5yZWdpc3RlciBoeXBlcnR5IFJlcGx5JywgcmVwbHkpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogIGZ1bmN0aW9uIHRvIGRlbGV0ZSBhbiBkYXRhT2JqZWN0SW5zdGFuY2UgaW4gdGhlIERvbWFpbiBSZWdpc3RyeVxuICAqICBAcGFyYW0gICB7U3RyaW5nfSAgICBuYW1lICAgICAgRGF0YU9iamVjdE5hbWVcbiAgKi9cbiAgZGVsZXRlRGF0YU9iamVjdEluc3RhbmNlKG5hbWUpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IG1lc3NhZ2UgPSB7IHR5cGU6ICdkZWxldGUnLCBmcm9tOiBfdGhpcy5yZWdpc3RyeVVSTCxcbiAgICAgICAgICAgICAgICAgICAgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMuX2RvbWFpbiArICcvJyxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogeyB2YWx1ZToge25hbWU6IG5hbWV9fX07XG5cbiAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCAocmVwbHkpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCd1bnJlZ2lzdGVyIGRhdGFPYmplY3QgUmVwbHknLCByZXBseSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBGdW5jdGlvbiB0byB1cGRhdGUgYW4gSHlwZXJ0eVxuICAqL1xuICB1cGRhdGVIeXBlcnR5SW5zdGFuY2UocmVzb3VyY2UsIHZhbHVlKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxldCBtZXNzYWdlID0geyB0eXBlOiAnVVBEQVRFJywgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsXG4gICAgICAgICAgICAgICAgICAgIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLl9kb21haW4gKyAnLycsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IHsgcmVzb3VyY2U6IHJlc291cmNlLCB2YWx1ZTogdmFsdWV9fTtcblxuICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3QucG9zdE1lc3NhZ2UobWVzc2FnZSwgKHJlcGx5KSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnVXBkYXRlZCBoeXBlcnR5IHJlcGx5JywgcmVwbHkpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogcmVnaXN0ZXIgYSBuZXcgc3Vic2NyaWJlciBpbiB0aGUgZGF0YU9iamVjdCByZWdpc3RlcmVkXG4gICogQHBhcmFtICB7U3RyaW5nfSAgIGRhdGFPYmplY3RVUkwgICAgZGF0YU9iamVjdCBVUkxcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgc3Vic2NyaWJlclVSTCAgICBzdWJzY3JpYmVyIFVSTFxuICAqL1xuICByZWdpc3RlclN1YnNjcmliZXIoZGF0YU9iamVjdFVSTCwgc3Vic2NyaWJlclVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGRhdGFPYmplY3QgPSBfdGhpcy5kYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VVJMXTtcblxuICAgIGlmIChkYXRhT2JqZWN0KSB7XG4gICAgICBkYXRhT2JqZWN0LnN1YnNjcmliZXJzLnB1c2goc3Vic2NyaWJlclVSTCk7XG4gICAgICBfdGhpcy5kYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VVJMXSA9IGRhdGFPYmplY3Q7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogZ2V0IHRoZSBzdWJzY3JpYmVycyByZWdpc3RlcmVkIHdpdGhpbiBhIGRhdGFPYmplY3RcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgIGRhdGFPYmplY3RVUkwgICAgZGF0YU9iamVjdCBVUkxcbiAgKiBAcGFyYW0gIHtBcnJheTxTdHJpbmc+fSAgIFN1YnN0cmliZXJzIExpc3RcbiAgKi9cbiAgZ2V0RGF0YU9iamVjdFN1YnNjcmliZXJzKGRhdGFPYmplY3RVUkwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGxldCBkYXRhT2JqZWN0ID0gX3RoaXMuZGF0YU9iamVjdExpc3RbZGF0YU9iamVjdFVSTF07XG5cbiAgICBpZiAoZGF0YU9iamVjdCkge1xuICAgICAgcmV0dXJuIGRhdGFPYmplY3Quc3Vic2NyaWJlcnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93ICdObyBkYXRhT2JqZWN0IHdhcyBmb3VuZCc7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogVG8gcmVnaXN0ZXIgYSBuZXcgRGF0YSBPYmplY3QgaW4gdGhlIHJ1bnRpbWUgd2hpY2ggcmV0dXJucyB0aGUgZGF0YU9iamVjdFVSTCBhbGxvY2F0ZWQgdG8gdGhlIG5ldyBEYXRhIE9iamVjdC5cbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgaWRlbnRpZmllciAgICAgICAgICAgICAgICAgIGlkZW50aWZpZXJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgZGF0YU9iamVjdHNjaGVtYSAgICAgICAgICAgIGRhdGFPYmplY3RzY2hlbWFcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgZGF0YU9iamVjdFVybCAgICAgICAgICAgICAgIGRhdGFPYmplY3RVcmxcbiAgKiBAcGFyYW0ge1N0cmluZ30gICAgICBkYXRhT2JqZWN0UmVwb3J0ZXIgICAgICAgICAgIGRhdGFPYmplY3RSZXBvcnRlclxuICAqIEBwYXJhbSAge0FycmF5fSAgICAgcmVzb3VyY2VzICAgICAgICAgICAgICAgICAgICAgZGF0YU9iamVjdCByZXNvdXJjZXNcbiAgKiBAcGFyYW0gIHtBcnJheX0gICAgIGF1dGhvcmlzZSAgICAgICAgICAgICAgICAgICAgIGxpc3Qgb2YgcHJlIGF1dGhvcmlzZWQgYXV0aG9yaXNlZCBJRHNcbiAgKi9cbiAgcmVnaXN0ZXJEYXRhT2JqZWN0KGlkZW50aWZpZXIsIGRhdGFPYmplY3RzY2hlbWEsIGRhdGFPYmplY3RVcmwsIGRhdGFPYmplY3RSZXBvcnRlciwgcmVzb3VyY2VzLCBhdXRob3Jpc2UpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICBsZXQgZGF0YVNjaGVtZSA9IFtdO1xuICAgICAgbGV0IGZpbHRlcmVkRGF0YVNjaGVtZSA9IGRhdGFPYmplY3RVcmwuc3BsaXQoJzonKTtcbiAgICAgIGRhdGFTY2hlbWUucHVzaChmaWx0ZXJlZERhdGFTY2hlbWVbMF0pO1xuXG4gICAgICAvL21lc3NhZ2UgdG8gcmVnaXN0ZXIgdGhlIG5ldyBoeXBlcnR5LCB3aXRoaW4gdGhlIGRvbWFpbiByZWdpc3RyeVxuICAgICAgbGV0IG1lc3NhZ2VWYWx1ZSA9IHtuYW1lOiBpZGVudGlmaWVyLCByZXNvdXJjZXM6IHJlc291cmNlcywgZGF0YVNjaGVtZXM6IGRhdGFTY2hlbWUsIHNjaGVtYTogZGF0YU9iamVjdHNjaGVtYSwgdXJsOiBkYXRhT2JqZWN0VXJsLCBleHBpcmVzOiBfdGhpcy5leHBpcmVzVGltZSwgcmVwb3J0ZXI6IGRhdGFPYmplY3RSZXBvcnRlciwgcHJlQXV0aDogYXV0aG9yaXNlLCBzdWJzY3JpYmVyczogW119O1xuXG4gICAgICBfdGhpcy5kYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VXJsXSA9IG1lc3NhZ2VWYWx1ZTtcblxuICAgICAgLypsZXQgbWVzc2FnZSA9IF90aGlzLm1lc3NhZ2VGYWN0b3J5LmNyZWF0ZUNyZWF0ZU1lc3NhZ2VSZXF1ZXN0KFxuICAgICAgICBfdGhpcy5yZWdpc3RyeVVSTCxcbiAgICAgICAgJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5yZWdpc3RyeURvbWFpbiArICcvJyxcbiAgICAgICAgbWVzc2FnZVZhbHVlLFxuICAgICAgICAncG9saWN5J1xuICAgICAgKTsqL1xuXG4gICAgICBsZXQgbWVzc2FnZSA9IHt0eXBlOidjcmVhdGUnLCBmcm9tOiBfdGhpcy5yZWdpc3RyeVVSTCwgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMucmVnaXN0cnlEb21haW4gKyAnLycsIGJvZHk6IHt2YWx1ZTogbWVzc2FnZVZhbHVlLCBwb2xpY3k6ICdwb2xpY3knfX07XG5cbiAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIChyZXBseSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnPT09PiByZWdpc3RlckRhdGFPYmplY3QgUmVwbHk6ICcsIHJlcGx5KTtcbiAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7XG4gICAgICAgICAgcmVzb2x2ZSgnb2snKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoJ2Vycm9yIG9uIHJlZ2lzdGVyIERhdGFPYmplY3QnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIFRvIHJlZ2lzdGVyIGEgbmV3IEh5cGVydHkgaW4gdGhlIHJ1bnRpbWUgd2hpY2ggcmV0dXJucyB0aGUgSHlwZXJ0eVVSTCBhbGxvY2F0ZWQgdG8gdGhlIG5ldyBIeXBlcnR5LlxuICAqIEBwYXJhbSAge1NhbmRib3h9ICAgICAgICAgICAgIHNhbmRib3ggICAgICAgICAgICAgICBzYW5kYm94XG4gICogQHBhcmFtICB7SHlwZXJ0eUNhdGFsb2d1ZVVSTH0gSHlwZXJ0eUNhdGFsb2d1ZVVSTCAgIGRlc2NyaXB0b3JcbiAgKiBAcmV0dXJuIHtIeXBlcnR5VVJMfSAgICAgICAgICBIeXBlcnR5VVJMXG4gICovXG4gIHJlZ2lzdGVySHlwZXJ0eShzYW5kYm94LCBkZXNjcmlwdG9yVVJMLCBkZXNjcmlwdG9yKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgLy9hc3N1bWluZyBkZXNjcmlwdG9yIGNvbWUgaW4gdGhpcyBmb3JtYXQsIHRoZSBzZXJ2aWNlLXByb3ZpZGVyLWRvbWFpbiB1cmwgaXMgcmV0cmlldmVkIGJ5IGEgc3BsaXQgaW5zdHJ1Y3Rpb25cbiAgICAgIC8vaHlwZXJ0eS1jYXRhbG9ndWU6Ly88c2VydmljZS1wcm92aWRlci1kb21haW4+LzxjYXRhbG9ndWUtb2JqZWN0LWlkZW50aWZpZXI+XG4gICAgICBsZXQgZG9tYWluVXJsID0gZGl2aWRlVVJMKGRlc2NyaXB0b3JVUkwpLmRvbWFpbjtcblxuICAgICAgaWYgKGRvbWFpblVybC5pbmNsdWRlcygnY2F0YWxvZ3VlJykpIHtcbiAgICAgICAgZG9tYWluVXJsID0gZG9tYWluVXJsLnJlcGxhY2UoJ2NhdGFsb2d1ZS4nLCAnJyk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmlkTW9kdWxlLmdldElkZW50aXR5QXNzZXJ0aW9uKCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgbGV0IHVzZXJQcm9maWxlID0gcmVzdWx0LnVzZXJQcm9maWxlO1xuICAgICAgICBsZXQgaWRlbnRpdHlVUkwgPSB1c2VyUHJvZmlsZS51c2VyVVJMO1xuXG4gICAgICAgIGlmIChfdGhpcy5fbWVzc2FnZUJ1cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVqZWN0KCdNZXNzYWdlQnVzIG5vdCBmb3VuZCBvbiByZWdpc3RlclN0dWInKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvL2NhbGwgY2hlY2sgaWYgdGhlIHByb3Rvc3R1YiBleGlzdFxuICAgICAgICAgIF90aGlzLnJlc29sdmUoJ2h5cGVydHktcnVudGltZTovLycgKyBkb21haW5VcmwpLnRoZW4oZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIF90aGlzLnJlZ2lzdHJ5RG9tYWluID0gZG9tYWluVXJsO1xuXG4gICAgICAgICAgICAvLyBUT0RPOiBzaG91bGQgYmUgaW1wbGVtZW50ZWQgd2l0aCBhZGRyZXNzZXMgcG9sbFxuICAgICAgICAgICAgLy8gSW4gdGhpcyBjYXNlIHdlIHdpbGwgcmVxdWVzdCBhbmQgcmV0dXJuIG9ubHkgb25lXG4gICAgICAgICAgICAvLyBhZGRyZXNzXG4gICAgICAgICAgICBsZXQgbnVtYmVyT2ZBZGRyZXNzZXMgPSAxO1xuICAgICAgICAgICAgX3RoaXMuYWRkcmVzc0FsbG9jYXRpb24uY3JlYXRlKGRvbWFpblVybCwgbnVtYmVyT2ZBZGRyZXNzZXMpLnRoZW4oZnVuY3Rpb24oYWRkZXJlc3NMaXN0KSB7XG5cbiAgICAgICAgICAgICAgYWRkZXJlc3NMaXN0LmZvckVhY2goZnVuY3Rpb24oYWRkcmVzcykge1xuXG4gICAgICAgICAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoYWRkcmVzcyArICcvc3RhdHVzJywgKG1zZykgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ01lc3NhZ2UgYWRkTGlzdGVuZXIgZm9yIDogJywgYWRkcmVzcyArICcvc3RhdHVzIC0+ICcgICsgbXNnKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAvL2NoZWNrIHdoZXRoZXIgdGhlIHJlY2VpdmVkIHNhbmJveCBlIEFwcGxpY2F0aW9uU2FuZGJveCBvciBhIG5vcm1hbCBzYW5kYm94XG4gICAgICAgICAgICAgIGlmIChzYW5kYm94LnR5cGUgPT09ICdhcHAnKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2FuZGJveGVzTGlzdC5hcHBTYW5kYm94W2FkZGVyZXNzTGlzdFswXV0gPSBzYW5kYm94O1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNhbmRib3gudHlwZSA9PT0gJ25vcm1hbCcpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5zYW5kYm94ZXNMaXN0LnNhbmRib3hbYWRkZXJlc3NMaXN0WzBdXSA9IHNhbmRib3g7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KCdXcm9uZyBTYW5kYm94VHlwZScpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgbGV0IHJlc291cmNlcztcblxuICAgICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgaHlwZXJ0eSByZXNvdXJjZXMgaXMgYSB2ZWN0b3Igb3IgYSBzdHJpbmdcbiAgICAgICAgICAgICAgLy8gVE9ETyBkZWxldGUgbGF0ZXIgd2hlbiBjYXRhbG9ndWUgaXMgZml4ZWRcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiAoZGVzY3JpcHRvci5oeXBlcnR5VHlwZSkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgcmVzb3VyY2VzID0gW107XG4gICAgICAgICAgICAgICAgcmVzb3VyY2VzLnB1c2goZGVzY3JpcHRvci5oeXBlcnR5VHlwZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb3VyY2VzID0gZGVzY3JpcHRvci5oeXBlcnR5VHlwZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGxldCBkZXNjcmlwdG9yRGF0YVNjaGVtYSA9IGRlc2NyaXB0b3IuZGF0YU9iamVjdHM7XG4gICAgICAgICAgICAgIGxldCBkYXRhU2NoZW1hc0FycmF5ID0gW107XG5cbiAgICAgICAgICAgICAgLy90aGlzIHdpbGwgY3JlYXRlIGEgYXJyYXkgd2l0aCBhIFByb21pc2UgaW4gZWFjaCBwb3NpdGlvblxuICAgICAgICAgICAgICBmb3IgKGxldCBpbmRleCBpbiBkZXNjcmlwdG9yRGF0YVNjaGVtYSkge1xuICAgICAgICAgICAgICAgIGRhdGFTY2hlbWFzQXJyYXkucHVzaChfdGhpcy5ydW50aW1lQ2F0YWxvZ3VlLmdldERhdGFTY2hlbWFEZXNjcmlwdG9yKGRlc2NyaXB0b3JEYXRhU2NoZW1hW2luZGV4XSkpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gYXMgc29vbiBhcyB0aGUgcHJldmlvdXMgYXJyYXkgaXMgY29tcGxldGVkLCB0aGlzIHdpbGwgd2FpdCBmb3IgdGhlIHJlc29sdmUgb2YgYWxsIHByb21pc2VzIGluIHRoZSBhcnJheVxuICAgICAgICAgICAgICBQcm9taXNlLmFsbChkYXRhU2NoZW1hc0FycmF5KS50aGVuKGZ1bmN0aW9uKGRhdGFTY2hlbWFzKSB7XG5cbiAgICAgICAgICAgICAgICBsZXQgZmlsdGVyZWREYXRhU2NoZW1hcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGluZGV4IGluIGRhdGFTY2hlbWFzKSB7XG4gICAgICAgICAgICAgICAgICBsZXQgZGF0YVNjaGVtYSA9IGRhdGFTY2hlbWFzW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgIGZpbHRlcmVkRGF0YVNjaGVtYXMucHVzaChkYXRhU2NoZW1hLnNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZS5wcm9wZXJ0aWVzLnNjaGVtZS5jb25zdGFudCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IGh5cGVydHkgPSBuZXcgSHlwZXJ0eUluc3RhbmNlKF90aGlzLmlkZW50aWZpZXIsIF90aGlzLnJlZ2lzdHJ5VVJMLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3JVUkwsIGRlc2NyaXB0b3IsIGFkZGVyZXNzTGlzdFswXSwgdXNlclByb2ZpbGUpO1xuXG4gICAgICAgICAgICAgICAgaHlwZXJ0eS5fcmVzb3VyY2VzID0gcmVzb3VyY2VzO1xuICAgICAgICAgICAgICAgIGh5cGVydHkuX2RhdGFTY2hlbWVzID0gZmlsdGVyZWREYXRhU2NoZW1hcztcbiAgICAgICAgICAgICAgICBfdGhpcy5oeXBlcnRpZXNMaXN0LnB1c2goaHlwZXJ0eSk7XG5cbiAgICAgICAgICAgICAgICAvL21lc3NhZ2UgdG8gcmVnaXN0ZXIgdGhlIG5ldyBoeXBlcnR5LCB3aXRoaW4gdGhlIGRvbWFpbiByZWdpc3RyeVxuICAgICAgICAgICAgICAgIGxldCBtZXNzYWdlVmFsdWUgPSB7dXNlcjogaWRlbnRpdHlVUkwsICBkZXNjcmlwdG9yOiBkZXNjcmlwdG9yVVJMLCB1cmw6IGFkZGVyZXNzTGlzdFswXSwgZXhwaXJlczogX3RoaXMuZXhwaXJlc1RpbWUsIHJlc291cmNlczogcmVzb3VyY2VzLCBkYXRhU2NoZW1lczogZmlsdGVyZWREYXRhU2NoZW1hc307XG5cbiAgICAgICAgICAgICAgICAvKmxldCBtZXNzYWdlID0gX3RoaXMubWVzc2FnZUZhY3RvcnkuY3JlYXRlQ3JlYXRlTWVzc2FnZVJlcXVlc3QoXG4gICAgICAgICAgICAgICAgICBfdGhpcy5yZWdpc3RyeVVSTCxcbiAgICAgICAgICAgICAgICAgICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMucmVnaXN0cnlEb21haW4gKyAnLycsXG4gICAgICAgICAgICAgICAgICBtZXNzYWdlVmFsdWUsXG4gICAgICAgICAgICAgICAgICAncG9saWN5J1xuICAgICAgICAgICAgICAgICk7Ki9cblxuICAgICAgICAgICAgICAgIGxldCBtZXNzYWdlID0ge3R5cGU6J2NyZWF0ZScsIGZyb206IF90aGlzLnJlZ2lzdHJ5VVJMLCB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5yZWdpc3RyeURvbWFpbiArICcvJywgYm9keToge3ZhbHVlOiBtZXNzYWdlVmFsdWUsIHBvbGljeTogJ3BvbGljeSd9fTtcblxuICAgICAgICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIChyZXBseSkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJz09PT4gUmVnaXN0ZXJIeXBlcnR5IFJlcGx5OiAnLCByZXBseSk7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGFkZGVyZXNzTGlzdFswXSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoJ0ZhaWxlZCB0byByZWdpc3RlciBhbiBIeXBlcnR5Jyk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvL3RpbWVyIHRvIGtlZXAgdGhlIHJlZ2lzdHJhdGlvbiBhbGl2ZVxuICAgICAgICAgICAgICAgIC8vIHRoZSB0aW1lIGlzIGRlZmluZWQgYnkgYSBsaXR0bGUgbGVzcyB0aGFuIGhhbGYgb2YgdGhlIGV4cGlyZXMgdGltZSBkZWZpbmVkXG4gICAgICAgICAgICAgICAgbGV0IGtlZXBBbGl2ZVRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgIC8qbGV0IG1lc3NhZ2UgPSBfdGhpcy5tZXNzYWdlRmFjdG9yeS5jcmVhdGVDcmVhdGVNZXNzYWdlUmVxdWVzdChcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVnaXN0cnlVUkwsXG4gICAgICAgICAgICAgICAgICAgICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMucmVnaXN0cnlEb21haW4gKyAnLycsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgJ3BvbGljeSdcbiAgICAgICAgICAgICAgICAgICk7Ki9cbiAgICAgICAgICAgICAgICAgIGxldCBtZXNzYWdlID0ge3R5cGU6J2NyZWF0ZScsIGZyb206IF90aGlzLnJlZ2lzdHJ5VVJMLCB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5yZWdpc3RyeURvbWFpbiArICcvJywgYm9keToge3ZhbHVlOiBtZXNzYWdlVmFsdWUsIHBvbGljeTogJ3BvbGljeSd9fTtcblxuICAgICAgICAgICAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgKHJlcGx5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCc9PT0+IEtlZXBBbGl2ZSBSZXBseTogJywgcmVwbHkpO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwoKChfdGhpcy5leHBpcmVzVGltZSAvIDEuMSkgLyAyKSAqIDEwMDApKTtcblxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdIeXBlcnR5IFNjaGVtYXMnLCBmaWx0ZXJlZERhdGFTY2hlbWFzKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnSHlwZXJ0eSByZXNvdXJjZXMnLCByZXNvdXJjZXMpO1xuXG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0FkZHJlc3MgUmVhc29uOiAnLCByZWFzb24pO1xuICAgICAgICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgcmVqZWN0KCdGYWlsZWQgdG8gb2J0YWluIGFuIGlkZW50aXR5Jyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICB9XG5cbiAgLyoqXG4gICogVG8gdW5yZWdpc3RlciBhIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBIeXBlcnR5XG4gICogQHBhcmFtICB7SHlwZXJ0eVVSTH0gICAgICAgICAgSHlwZXJ0eVVSTCB1cmwgICAgICAgIHVybFxuICAqL1xuICB1bnJlZ2lzdGVySHlwZXJ0eSh1cmwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KSB7XG5cbiAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xuICAgICAgbGV0IGluZGV4ID0gMDtcblxuICAgICAgZm9yXHQoaW5kZXggPSAwOyBpbmRleCA8IF90aGlzLmh5cGVydGllc0xpc3QubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGxldCBoeXBlcnR5ID0gX3RoaXMuaHlwZXJ0aWVzTGlzdFtpbmRleF07XG4gICAgICAgIGlmIChoeXBlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoaHlwZXJ0eS5oeXBlcnR5VVJMID09PSB1cmwpIHtcbiAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZm91bmQgPT09IGZhbHNlKSB7XG4gICAgICAgIHJlamVjdCgnSHlwZXJ0eSBub3QgZm91bmQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlbGV0ZSBfdGhpcy5oeXBlcnRpZXNMaXN0W2luZGV4XTtcbiAgICAgICAgcmVzb2x2ZSgnSHlwZXJ0eSBzdWNjZXNzZnVsbHkgZGVsZXRlZCcpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIH1cblxuICAvKipcbiAgKiBUbyBkaXNjb3ZlciBwcm90b2NvbCBzdHVicyBhdmFpbGFibGUgaW4gdGhlIHJ1bnRpbWUgZm9yIGEgY2VydGFpbiBkb21haW4uIElmIGF2YWlsYWJsZSwgaXQgcmV0dXJucyB0aGUgcnVudGltZSB1cmwgZm9yIHRoZSBwcm90b2NvbCBzdHViIHRoYXQgY29ubmVjdHMgdG8gdGhlIHJlcXVlc3RlZCBkb21haW4uIFJlcXVpcmVkIGJ5IHRoZSBydW50aW1lIEJVUyB0byByb3V0ZSBtZXNzYWdlcyB0byByZW1vdGUgc2VydmVycyBvciBwZWVycyAoZG8gd2UgbmVlZCBzb21ldGhpbmcgc2ltaWxhciBmb3IgSHlwZXJ0aWVzPykuXG4gICogQHBhcmFtICB7RG9tYWluVVJMfSAgICAgICAgICAgRG9tYWluVVJMICAgICAgICAgICAgdXJsXG4gICogQHJldHVybiB7UnVudGltZVVSTH0gICAgICAgICAgIFJ1bnRpbWVVUkxcbiAgKi9cbiAgZGlzY292ZXJQcm90b3N0dWIodXJsKSB7XG4gICAgaWYgKCF1cmwpIHRocm93IG5ldyBFcnJvcignUGFyYW1ldGVyIHVybCBuZWVkZWQnKTtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KSB7XG5cbiAgICAgIGlmIChfdGhpcy5wcm90b3N0dWJzTGlzdC5oYXNPd25Qcm9wZXJ0eSh1cmwpKSB7XG4gICAgICAgIHJlc29sdmUoX3RoaXMucHJvdG9zdHVic0xpc3RbdXJsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWplY3QoJ3JlcXVlc3RVcGRhdGUgY291bGRuXFwndCBnZXQgdGhlIFByb3Rvc3R1YlVSTCcpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIH1cblxuICAvKipcbiAgICogVG8gcmVnaXN0ZXIgYSBuZXcgUHJvdG9jb2wgU3R1YiBpbiB0aGUgcnVudGltZSBpbmNsdWRpbmcgYXMgaW5wdXQgcGFyYW1ldGVycyB0aGUgZnVuY3Rpb24gdG8gcG9zdE1lc3NhZ2UsIHRoZSBEb21haW5VUkwgdGhhdCBpcyBjb25uZWN0ZWQgd2l0aCB0aGUgc3R1Yiwgd2hpY2ggcmV0dXJucyB0aGUgUnVudGltZVVSTCBhbGxvY2F0ZWQgdG8gdGhlIG5ldyBQcm90b2NvbFN0dWIuXG4gICAqIEBwYXJhbSB7U2FuZGJveH0gICAgICAgIFNhbmRib3hcbiAgICogQHBhcmFtICB7RG9tYWluVVJMfSAgICAgRG9tYWluVVJMIHNlcnZpY2UgcHJvdmlkZXIgZG9tYWluXG4gICAqIEByZXR1cm4ge1J1bnRpbWVQcm90b1N0dWJVUkx9XG4gICAqL1xuICByZWdpc3RlclN0dWIoc2FuZGJveCwgZG9tYWluVVJMKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xuXG4gICAgICBsZXQgcnVudGltZVByb3RvU3R1YlVSTDtcblxuICAgICAgLy9jaGVjayBpZiBtZXNzYWdlQnVzIGlzIHJlZ2lzdGVyZWQgaW4gcmVnaXN0cnkgb3Igbm90XG4gICAgICBpZiAoX3RoaXMuX21lc3NhZ2VCdXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZWplY3QoJ01lc3NhZ2VCdXMgbm90IGZvdW5kIG9uIHJlZ2lzdGVyU3R1YicpO1xuICAgICAgfVxuXG4gICAgICAvL1RPRE8gaW1wbGVtZW50IGEgdW5pcXVlIG51bWJlciBmb3IgdGhlIHByb3Rvc3R1YlVSTFxuICAgICAgaWYgKCFkb21haW5VUkwuaW5kZXhPZignbXNnLW5vZGUuJykpIHtcbiAgICAgICAgZG9tYWluVVJMID0gZG9tYWluVVJMLnN1YnN0cmluZyhkb21haW5VUkwuaW5kZXhPZignLicpICsgMSk7XG4gICAgICB9XG5cbiAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgPSAnbXNnLW5vZGUuJyArIGRvbWFpblVSTCArICcvcHJvdG9zdHViLycgKyBNYXRoLmZsb29yKChNYXRoLnJhbmRvbSgpICogMTAwMDApICsgMSk7XG5cbiAgICAgIC8vIFRPRE86IE9wdGltaXplIHRoaXNcbiAgICAgIC8vIFByb3h5O1xuICAgICAgX3RoaXMucHJvdG9zdHVic0xpc3RbZG9tYWluVVJMXSA9IHtcbiAgICAgICAgdXJsOiBydW50aW1lUHJvdG9TdHViVVJMLFxuICAgICAgICBzdGF0dXM6ICdpbi1wcm9ncmVzcydcbiAgICAgIH07XG5cbiAgICAgIC8vIF90aGlzLnByb3Rvc3R1YnNMaXN0W2RvbWFpblVSTF0gPSBydW50aW1lUHJvdG9TdHViVVJMO1xuICAgICAgX3RoaXMuc2FuZGJveGVzTGlzdC5zYW5kYm94W3J1bnRpbWVQcm90b1N0dWJVUkxdID0gc2FuZGJveDtcblxuICAgICAgLy8gc2FuZGJveC5hZGRMaXN0ZW5lcignKicsIGZ1bmN0aW9uKG1zZykge1xuICAgICAgLy8gICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpO1xuICAgICAgLy8gfSk7XG5cbiAgICAgIHJlc29sdmUocnVudGltZVByb3RvU3R1YlVSTCk7XG5cbiAgICAgIF90aGlzLl9tZXNzYWdlQnVzLmFkZExpc3RlbmVyKHJ1bnRpbWVQcm90b1N0dWJVUkwgKyAnL3N0YXR1cycsIChtc2cpID0+IHtcbiAgICAgICAgaWYgKG1zZy5yZXNvdXJjZSA9PT0gbXNnLnRvICsgJy9zdGF0dXMnKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1J1bnRpbWVQcm90b3N0dWJVUkwvc3RhdHVzIG1lc3NhZ2U6ICcsIG1zZy5ib2R5LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgfVxuXG4gIC8qKlxuICAqIFRvIHVucmVnaXN0ZXIgYSBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgcHJvdG9jb2wgc3R1YlxuICAqIEBwYXJhbSAge0h5cGVydHlSdW50aW1lVVJMfSAgIEh5cGVydHlSdW50aW1lVVJMICAgICBoeXBlcnR5UnVudGltZVVSTFxuICAqL1xuICB1bnJlZ2lzdGVyU3R1YihoeXBlcnR5UnVudGltZVVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIGlmIChfdGhpcy5wcm90b3N0dWJzTGlzdC5oYXNPd25Qcm9wZXJ0eShoeXBlcnR5UnVudGltZVVSTCkpIHtcbiAgICAgICAgZGVsZXRlIF90aGlzLnByb3Rvc3R1YnNMaXN0W2h5cGVydHlSdW50aW1lVVJMXTtcbiAgICAgICAgcmVzb2x2ZSgnUHJvdG9zdHViVVJMIHJlbW92ZWQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdCgnRXJyb3Igb24gdW5yZWdpc3RlclN0dWI6IEh5cGVydHkgbm90IGZvdW5kJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVG8gcmVnaXN0ZXIgYSBuZXcgSWRlbnRpdHkgUHJvdmlkZXIgcHJveHkgaW4gdGhlIHJ1bnRpbWUgaW5jbHVkaW5nIGFzIGlucHV0IHBhcmFtZXRlcnMgdGhlIGZ1bmN0aW9uIHRvIHBvc3RNZXNzYWdlLCB0aGUgRG9tYWluVVJMIHRoYXQgaXMgY29ubmVjdGVkIHdpdGggdGhlIHN0dWIsIHdoaWNoIHJldHVybnMgdGhlIFJ1bnRpbWVVUkwgYWxsb2NhdGVkIHRvIHRoZSBuZXcgUHJvdG9jb2xTdHViLlxuICAgKiBAcGFyYW0ge1NhbmRib3h9ICAgICAgICBTYW5kYm94XG4gICAqIEBwYXJhbSAge0RvbWFpblVSTH0gICAgIERvbWFpblVSTCBzZXJ2aWNlIHByb3ZpZGVyIGRvbWFpblxuICAgKiBAcmV0dXJuIHtSdW50aW1lSWRwUHJveHlVUkx9XG4gICAqL1xuICByZWdpc3RlcklkcFByb3h5KHNhbmRib3gsIGRvbWFpblVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcblxuICAgICAgbGV0IGlkcFByb3h5U3R1YlVSTDtcblxuICAgICAgLy9jaGVjayBpZiBtZXNzYWdlQnVzIGlzIHJlZ2lzdGVyZWQgaW4gcmVnaXN0cnkgb3Igbm90XG4gICAgICBpZiAoX3RoaXMuX21lc3NhZ2VCdXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZWplY3QoJ01lc3NhZ2VCdXMgbm90IGZvdW5kIG9uIHJlZ2lzdGVyU3R1YicpO1xuICAgICAgfVxuXG4gICAgICBpZHBQcm94eVN0dWJVUkwgPSAnZG9tYWluLWlkcDovLycgKyBkb21haW5VUkwgKyAnL3N0dWIvJyArIE1hdGguZmxvb3IoKE1hdGgucmFuZG9tKCkgKiAxMDAwMCkgKyAxKTtcblxuICAgICAgLy8gVE9ETzogT3B0aW1pemUgdGhpc1xuICAgICAgX3RoaXMuaWRwUHJveHlMaXN0W2RvbWFpblVSTF0gPSB7XG4gICAgICAgIHVybDogaWRwUHJveHlTdHViVVJMLFxuICAgICAgICBzdGF0dXM6ICdpbi1wcm9ncmVzcydcbiAgICAgIH07XG5cbiAgICAgIF90aGlzLnNhbmRib3hlc0xpc3Quc2FuZGJveFtpZHBQcm94eVN0dWJVUkxdID0gc2FuZGJveDtcblxuICAgICAgLy8gc2FuZGJveC5hZGRMaXN0ZW5lcignKicsIGZ1bmN0aW9uKG1zZykge1xuICAgICAgLy8gICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpO1xuICAgICAgLy8gfSk7XG5cbiAgICAgIHJlc29sdmUoaWRwUHJveHlTdHViVVJMKTtcblxuICAgICAgX3RoaXMuX21lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoaWRwUHJveHlTdHViVVJMICsgJy9zdGF0dXMnLCAobXNnKSA9PiB7XG4gICAgICAgIGlmIChtc2cucmVzb3VyY2UgPT09IG1zZy50byArICcvc3RhdHVzJykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdpZHBQcm94eVN0dWJVUkwvc3RhdHVzIG1lc3NhZ2U6ICcsIG1zZy5ib2R5LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBUbyBkaXNjb3ZlciBpZHBQcm94eSBzdHVicyBhdmFpbGFibGUgaW4gdGhlIHJ1bnRpbWUgZm9yIGEgY2VydGFpbiBkb21haW4uIElmIGF2YWlsYWJsZSwgaXQgcmV0dXJucyB0aGUgcnVudGltZSB1cmwgZm9yIHRoZSBpZHBQcm94eSBzdHViIHRoYXQgY29ubmVjdHMgdG8gdGhlIHJlcXVlc3RlZCBkb21haW4uIFJlcXVpcmVkIGJ5IHRoZSBydW50aW1lIEJVUyB0byByb3V0ZSBtZXNzYWdlcyB0byByZW1vdGUgc2VydmVycyBvciBwZWVyc1xuICAqIEBwYXJhbSAge0RvbWFpblVSTH0gICAgICAgICAgIERvbWFpblVSTCAgICAgICAgICAgIHVybFxuICAqIEByZXR1cm4ge1J1bnRpbWVVUkx9ICAgICAgICAgICBSdW50aW1lVVJMICAgICAgICAgaWRwUHJveHlVcmxcbiAgKi9cbiAgZGlzY292ZXJJZHBQcm94eSh1cmwpIHtcbiAgICBpZiAoIXVybCkgdGhyb3cgbmV3IEVycm9yKCdQYXJhbWV0ZXIgdXJsIG5lZWRlZCcpO1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIGlmIChfdGhpcy5pZHBQcm94eUxpc3QuaGFzT3duUHJvcGVydHkodXJsKSkge1xuICAgICAgICByZXNvbHZlKF90aGlzLmlkcFByb3h5TGlzdFt1cmxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdCgncmVxdWVzdFVwZGF0ZSBjb3VsZG5cXCd0IGdldCB0aGUgaWRwUHJveHlVUkwnKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICB9XG5cbiAgLyoqXG4gICogVG8gcmVnaXN0ZXIgYSBuZXcgUG9saWN5IEVuZm9yY2VyIGluIHRoZSBydW50aW1lIGluY2x1ZGluZyBhcyBpbnB1dCBwYXJhbWV0ZXJzIHRoZSBmdW5jdGlvbiB0byBwb3N0TWVzc2FnZSwgdGhlIEh5cGVydHlVUkwgYXNzb2NpYXRlZCB3aXRoIHRoZSBQRVAsIHdoaWNoIHJldHVybnMgdGhlIFJ1bnRpbWVVUkwgYWxsb2NhdGVkIHRvIHRoZSBuZXcgUG9saWN5IEVuZm9yY2VyIGNvbXBvbmVudC5cbiAgKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9IHBvc3RNZXNzYWdlIHBvc3RNZXNzYWdlXG4gICogQHBhcmFtICB7SHlwZXJ0eVVSTH0gICAgICAgICAgSHlwZXJ0eVVSTCAgICAgICAgICAgIGh5cGVydHlcbiAgKiBAcmV0dXJuIHtIeXBlcnR5UnVudGltZVVSTH0gICBIeXBlcnR5UnVudGltZVVSTFxuICAqL1xuICByZWdpc3RlclBFUChwb3N0TWVzc2FnZSwgaHlwZXJ0eSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcbiAgICAgIC8vVE9ETyBjaGVjayB3aGF0IHBhcmFtZXRlciBpbiB0aGUgcG9zdE1lc3NhZ2UgdGhlIHBlcCBpcy5cbiAgICAgIF90aGlzLnBlcExpc3RbaHlwZXJ0eV0gPSBwb3N0TWVzc2FnZTtcbiAgICAgIHJlc29sdmUoJ1BFUCByZWdpc3RlcmVkIHdpdGggc3VjY2VzcycpO1xuICAgIH0pO1xuXG4gIH1cblxuICAvKipcbiAgKiBUbyB1bnJlZ2lzdGVyIGEgcHJldmlvdXNseSByZWdpc3RlcmVkIHByb3RvY29sIHN0dWJcbiAgKiBAcGFyYW0gIHtIeXBlcnR5UnVudGltZVVSTH0gICBIeXBlcnR5UnVudGltZVVSTCAgICAgSHlwZXJ0eVJ1bnRpbWVVUkxcbiAgKi9cbiAgdW5yZWdpc3RlclBFUChIeXBlcnR5UnVudGltZVVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcblxuICAgICAgbGV0IHJlc3VsdCA9IF90aGlzLnBlcExpc3RbSHlwZXJ0eVJ1bnRpbWVVUkxdO1xuXG4gICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVqZWN0KCdQZXAgTm90IGZvdW5kLicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZSgnUEVQIHN1Y2Nlc3NmdWxseSByZW1vdmVkLicpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIH1cblxuICAvKipcbiAgKiBUbyByZWNlaXZlIHN0YXR1cyBldmVudHMgZnJvbSBjb21wb25lbnRzIHJlZ2lzdGVyZWQgaW4gdGhlIFJlZ2lzdHJ5LlxuICAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgIE1lc3NhZ2UuTWVzc2FnZSAgICAgICBldmVudFxuICAqL1xuICBvbkV2ZW50KGV2ZW50KSB7XG4gICAgLy8gVE9ETyBib2R5Li4uXG4gICAgY29uc29sZS5sb2coJ29uRXZlbnQnKTtcbiAgfVxuXG4gIC8qKlxuICAqIFRvIGRpc2NvdmVyIHNhbmRib3hlcyBhdmFpbGFibGUgaW4gdGhlIHJ1bnRpbWUgZm9yIGEgY2VydGFpbiBkb21haW4uIFJlcXVpcmVkIGJ5IHRoZSBydW50aW1lIFVBIHRvIGF2b2lkIG1vcmUgdGhhbiBvbmUgc2FuZGJveCBmb3IgdGhlIHNhbWUgZG9tYWluLlxuICAqIEBwYXJhbSAge0RvbWFpblVSTH0gRG9tYWluVVJMIHVybFxuICAqIEByZXR1cm4ge1J1bnRpbWVTYW5kYm94fSAgICAgICAgICAgUnVudGltZVNhbmRib3hcbiAgKi9cbiAgZ2V0U2FuZGJveCh1cmwpIHtcbiAgICBpZiAoIXVybCkgdGhyb3cgbmV3IEVycm9yKCdQYXJhbWV0ZXIgdXJsIG5lZWRlZCcpO1xuICAgIGNvbnNvbGUubG9nKCdnZXRTYW5kYm94OiAnLCB1cmwpO1xuXG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcblxuICAgICAgbGV0IHJlcXVlc3Q7XG5cbiAgICAgIC8vZmlyc3QgdHJ5IHRvIGZpbmQgdGhlIHVybCBpbiB0aGUgYXBwU2FuZGJveCBsaXN0XG4gICAgICByZXF1ZXN0ID0gX3RoaXMuc2FuZGJveGVzTGlzdC5hcHBTYW5kYm94W3VybF07XG5cbiAgICAgIC8vaWYgbm8gYXBwU2FuZGJveCB3YXMgZm91bmQsIHRyeSB0byBzZWFyY2ggaW4gdGhlIG5vcm1hbCBzYW5kYm94ZXMgbGlzdFxuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJlcXVlc3QgPSBfdGhpcy5zYW5kYm94ZXNMaXN0LnNhbmRib3hbdXJsXTtcblxuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcblxuICAgICAgICAgIGxldCBkb21haW4gPSBkaXZpZGVVUkwodXJsKS5kb21haW47XG5cbiAgICAgICAgICAvLyBzZWFyY2ggaW4gdGhlIHNhbmRib3hlcyBsaXN0IGZvciBhIGVudHJ5IGNvbnRhaW5pbmcgdGhlIGRvbWFpbiBnaXZlblxuICAgICAgICAgIGZvciAobGV0IHNhbmRib3ggaW4gX3RoaXMuc2FuZGJveGVzTGlzdC5zYW5kYm94KSB7XG4gICAgICAgICAgICBpZiAoc2FuZGJveC5pbmNsdWRlcyhkb21haW4pKSB7XG4gICAgICAgICAgICAgIHJlcXVlc3QgPSBfdGhpcy5zYW5kYm94ZXNMaXN0LnNhbmRib3hbc2FuZGJveF07XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmVqZWN0KCdubyBzYW5kYm94IGZvdW5kIGZvcjogJyArIHVybCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKHJlcXVlc3QpO1xuICAgICAgfVxuXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBUbyB2ZXJpZnkgaWYgc291cmNlIGlzIHZhbGlkIGFuZCB0byByZXNvbHZlIHRhcmdldCBydW50aW1lIHVybCBhZGRyZXNzIGlmIG5lZWRlZCAoZWcgcHJvdG9zdHViIHJ1bnRpbWUgdXJsIGluIGNhc2UgdGhlIG1lc3NhZ2UgaXMgdG8gYmUgZGlzcGF0Y2hlZCB0byBhIHJlbW90ZSBlbmRwb2ludCkuXG4gICogQHBhcmFtICB7VVJMLlVSTH0gIHVybCAgICAgICB1cmxcbiAgKiBAcmV0dXJuIHtQcm9taXNlPFVSTC5VUkw+fSAgICAgICAgICAgICAgICAgUHJvbWlzZSA8VVJMLlVSTD5cbiAgKi9cbiAgcmVzb2x2ZSh1cmwpIHtcbiAgICBjb25zb2xlLmxvZygncmVzb2x2ZSAnICsgdXJsKTtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgLy9zcGxpdCB0aGUgdXJsIHRvIGZpbmQgdGhlIGRvbWFpblVSTC4gZGVhbHMgd2l0aCB0aGUgdXJsIGZvciBleGFtcGxlIGFzOlxuICAgICAgLy9cImh5cGVydHktcnVudGltZTovL3NwMS9wcm90b3N0dWIvMTIzXCIsXG4gICAgICBsZXQgZGl2aWRlZFVSTCA9IGRpdmlkZVVSTCh1cmwpO1xuICAgICAgbGV0IGRvbWFpblVybCA9IGRpdmlkZWRVUkwuZG9tYWluO1xuICAgICAgbGV0IHR5cGUgPSBkaXZpZGVkVVJMLnR5cGU7XG5cbiAgICAgIC8vIHJlc29sdmUgdGhlIGRvbWFpbiBwcm90b3N0dWIgaW4gY2FzZSBvZiBhIG1lc3NhZ2UgdG8gZ2xvYmFsIHJlZ2lzdHJ5XG4gICAgICBpZiAodXJsLmluY2x1ZGVzKCdnbG9iYWw6Ly9yZWdpc3RyeScpKSB7XG4gICAgICAgIGRvbWFpblVybCA9IF90aGlzLl9kb21haW47XG4gICAgICB9XG5cbiAgICAgIGlmICghZG9tYWluVXJsLmluZGV4T2YoJ21zZy1ub2RlLicpIHx8ICFkb21haW5VcmwuaW5kZXhPZigncmVnaXN0cnkuJykpIHtcbiAgICAgICAgZG9tYWluVXJsID0gZG9tYWluVXJsLnN1YnN0cmluZyhkb21haW5VcmwuaW5kZXhPZignLicpICsgMSk7XG4gICAgICB9XG5cbiAgICAgIGxldCByZXF1ZXN0O1xuICAgICAgaWYgKHR5cGUgPT09ICdkb21haW4taWRwJykge1xuICAgICAgICByZXF1ZXN0ICA9IF90aGlzLmlkcFByb3h5TGlzdC5oYXNPd25Qcm9wZXJ0eShkb21haW5VcmwpID8gX3RoaXMuaWRwUHJveHlMaXN0W2RvbWFpblVybF0gOiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcXVlc3QgID0gX3RoaXMucHJvdG9zdHVic0xpc3QuaGFzT3duUHJvcGVydHkoZG9tYWluVXJsKSA/IF90aGlzLnByb3Rvc3R1YnNMaXN0W2RvbWFpblVybF0gOiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlcXVlc3QpIHtcbiAgICAgICAgY29uc29sZS5pbmZvKCdSZXNvbHZlZDogJywgcmVxdWVzdC51cmwpO1xuICAgICAgICByZXNvbHZlKHJlcXVlc3QudXJsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0eXBlID09PSAnZG9tYWluLWlkcCcpIHtcbiAgICAgICAgICAvLyBfdGhpcy50cmlnZ2VyKCdydW50aW1lOmxvYWRJZHBQcm94eScsIGRvbWFpblVybCk7XG5cbiAgICAgICAgICBfdGhpcy5fbG9hZGVyLmxvYWRJZHBQcm94eShkb21haW5VcmwpLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgcmVxdWVzdCAgPSBfdGhpcy5pZHBQcm94eUxpc3RbZG9tYWluVXJsXTtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnUmVzb2x2ZWQgSURQUHJveHk6ICcsIHJlcXVlc3QsIHJlc3VsdCk7XG4gICAgICAgICAgICBfdGhpcy5pZHBQcm94eUxpc3RbZG9tYWluVXJsXS5zdGF0dXMgPSAnZGVwbG95ZWQnO1xuICAgICAgICAgICAgcmVzb2x2ZShyZXF1ZXN0LnVybCk7XG4gICAgICAgICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVzb2x2aW5nIElEUFByb3h5OiAnLCByZWFzb24pO1xuICAgICAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBfdGhpcy50cmlnZ2VyKCdydW50aW1lOmxvYWRTdHViJywgZG9tYWluVXJsKTtcblxuICAgICAgICAgIF90aGlzLl9sb2FkZXIubG9hZFN0dWIoZG9tYWluVXJsKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgIHJlcXVlc3QgID0gX3RoaXMucHJvdG9zdHVic0xpc3RbZG9tYWluVXJsXTtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnUmVzb2x2ZWQgUHJvdG9zdHViOiAnLCByZXF1ZXN0LCByZXN1bHQpO1xuICAgICAgICAgICAgX3RoaXMucHJvdG9zdHVic0xpc3RbZG9tYWluVXJsXS5zdGF0dXMgPSAnZGVwbG95ZWQnO1xuICAgICAgICAgICAgcmVzb2x2ZShyZXF1ZXN0LnVybCk7XG4gICAgICAgICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVzb2x2aW5nIFByb3Rvc3R1YjogJywgcmVhc29uKTtcbiAgICAgICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgIH1cblxuICAgIH0pO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVnaXN0cnk7XG4iLCIvKipcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKiovXG4vKipcbiogICBAYXV0aG9yOiBHaWwgRGlhcyAoZ2lsLmRpYXNAdGVjbmljby51bGlzYm9hLnB0KVxuKiAgIFJlZ2lzdHJ5IERhdGEgTW9kZWwgaW5jbHVkZXMgYWxsIE9iamVjdHMgdG8gYmUgaGFuZGxlZCBieSB0aGUgUmVnaXN0cnkgZnVuY3Rpb25hbGl0eSBpbmNsdWRpbmdcbiovXG5jbGFzcyBSZWdpc3RyeURhdGFNb2RlbCB7XG5cbiAgY29uc3RydWN0b3IoaWQsIHVybCwgZGVzY3JpcHRvclVSTCwgc3RhcnRpbmdUaW1lLCBsYXN0TW9kaWZpZWQsIHN0YXR1cywgc3R1YnMsIHN0dWJzQ29uZmlndXJhdGlvbikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5faWQgPSBpZDtcbiAgICBfdGhpcy5fdXJsID0gdXJsO1xuICAgIF90aGlzLl9kZXNjcmlwdG9yVVJMID0gZGVzY3JpcHRvclVSTDtcbiAgICBfdGhpcy5fc3RhcnRpbmdUaW1lID0gc3RhcnRpbmdUaW1lO1xuICAgIF90aGlzLl9sYXN0TW9kaWZpZWQgPSBsYXN0TW9kaWZpZWQ7XG4gICAgX3RoaXMuX3N0YXR1cyA9IHN0YXR1cztcbiAgICBfdGhpcy5fc3R1YnMgPSBzdHVicztcbiAgICBfdGhpcy5fc3R1YnNDb25maWd1cmF0aW9uID0gc3R1YnNDb25maWd1cmF0aW9uO1xuICB9XG5cbiAgZ2V0IGlkKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIF90aGlzLl9pZDtcbiAgfVxuXG4gIGdldCB1cmwoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gX3RoaXMuX3VybDtcbiAgfVxuXG4gIGdldCBkZXNjcmlwdG9yKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIF90aGlzLl9kZXNjcmlwdG9yVVJMO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVnaXN0cnlEYXRhTW9kZWw7XG4iLCJpbXBvcnQge2RpdmlkZVVSTCwgZ2V0UHJlZml4fSBmcm9tICcuLi91dGlscy91dGlscyc7XG5cbmNsYXNzIERlc2NyaXB0b3JzIHtcblxuICBjb25zdHJ1Y3RvcihydW50aW1lVVJMLCBjYXRhbG9ndWUsIHJ1bnRpbWVDb25maWd1cmF0aW9uKSB7XG4gICAgaWYgKCFydW50aW1lVVJMKSB0aHJvdyBFcnJvcignVGhlIGRlc2NyaXB0b3Iga25vdyB0aGUgcnVudGltZSB1cmwgdG8gYmUgdXNlZCcpO1xuICAgIGlmICghY2F0YWxvZ3VlKSB0aHJvdyBFcnJvcignVGhlIGRlc2NyaXB0b3IgbmVlZHMgdGhlIGNhdGFsb2d1ZSBpbnN0YW5jZScpO1xuICAgIGlmICghcnVudGltZUNvbmZpZ3VyYXRpb24pIHRocm93IEVycm9yKCdUaGUgZGVzY3JpcHRvciBuZWVkcyB0aGUgcnVudGltZSBjb25maWd1cmF0aW9uJyk7XG5cbiAgICB0aGlzLnJ1bnRpbWVDb25maWd1cmF0aW9uID0gcnVudGltZUNvbmZpZ3VyYXRpb247XG4gICAgdGhpcy5ydW50aW1lVVJMID0gcnVudGltZVVSTDtcbiAgICB0aGlzLmNhdGFsb2d1ZSA9IGNhdGFsb2d1ZTtcbiAgfVxuXG4gIGdldEh5cGVydHlEZXNjcmlwdG9yIChoeXBlcnR5VVJMKSB7XG4gICAgbGV0IGRpdmlkZWRVUkwgPSBkaXZpZGVVUkwoaHlwZXJ0eVVSTCk7XG4gICAgbGV0IHR5cGUgPSBkaXZpZGVkVVJMLnR5cGU7XG4gICAgbGV0IGRvbWFpbiA9IGRpdmlkZWRVUkwuZG9tYWluO1xuICAgIGxldCBoeXBlcnR5ID0gZGl2aWRlZFVSTC5pZGVudGl0eTtcblxuICAgIGxldCBwcmVmaXggPSBnZXRQcmVmaXgodGhpcy5ydW50aW1lQ29uZmlndXJhdGlvbiwgJ2NhdGFsb2d1ZVByZWZpeCcpO1xuXG4gICAgY29uc29sZS5sb2codHlwZSwgZG9tYWluLCBoeXBlcnR5KTtcblxuICAgIGh5cGVydHlVUkwgPSB0eXBlICsgJzovLycgKyBwcmVmaXggKyBkb21haW4gKyBoeXBlcnR5O1xuXG4gICAgcmV0dXJuIHRoaXMuY2F0YWxvZ3VlLmdldEh5cGVydHlEZXNjcmlwdG9yKGh5cGVydHlVUkwpO1xuICB9XG5cbiAgZ2V0U3R1YkRlc2NyaXB0b3IgKHN0dWJVUkwpIHtcbiAgICBsZXQgZGl2aWRlZFVSTCA9IGRpdmlkZVVSTChzdHViVVJMKTtcbiAgICBsZXQgdHlwZSA9IGRpdmlkZWRVUkwudHlwZTtcbiAgICBsZXQgZG9tYWluID0gZGl2aWRlZFVSTC5kb21haW47XG4gICAgbGV0IHByb3Rvc3R1YiA9IGRpdmlkZWRVUkwuaWRlbnRpdHk7XG5cbiAgICBpZiAoIXByb3Rvc3R1Yikge1xuICAgICAgcHJvdG9zdHViID0gJ2RlZmF1bHQnO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm90b3N0dWIgPSBwcm90b3N0dWIuc3Vic3RyaW5nKHByb3Rvc3R1Yi5sYXN0SW5kZXhPZignLycpICsgMSk7XG4gICAgfVxuXG4gICAgbGV0IHByZWZpeCA9IGdldFByZWZpeCh0aGlzLnJ1bnRpbWVDb25maWd1cmF0aW9uLCAnY2F0YWxvZ3VlUHJlZml4Jyk7XG5cbiAgICBzdHViVVJMID0gdHlwZSArICc6Ly8nICsgcHJlZml4ICsgZG9tYWluICsgJy8ud2VsbC1rbm93bi9wcm90b2NvbHN0dWIvJyArIHByb3Rvc3R1YjtcblxuICAgIHJldHVybiB0aGlzLmNhdGFsb2d1ZS5nZXRTdHViRGVzY3JpcHRvcihzdHViVVJMKTtcbiAgfVxuXG4gIGdldElkcFByb3h5RGVzY3JpcHRvcihpZHBQcm94eVVSTCkge1xuICAgIGNvbnNvbGUubG9nKCdJRFAgUHJveHlVUkw6ICcsIGlkcFByb3h5VVJMKTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIGxldCBkaXZpZGVkVVJMID0gZGl2aWRlVVJMKGlkcFByb3h5VVJMKTtcbiAgICAgIGxldCB0eXBlID0gZGl2aWRlZFVSTC50eXBlO1xuICAgICAgbGV0IGRvbWFpbiA9IGRpdmlkZWRVUkwuZG9tYWluO1xuICAgICAgbGV0IGlkcHByb3h5ID0gZGl2aWRlZFVSTC5pZGVudGl0eTtcblxuICAgICAgbGV0IG9yaWdpbkRpdmlkZWRVUkwgPSBkaXZpZGVVUkwodGhpcy5ydW50aW1lVVJMKTtcbiAgICAgIGxldCBvcmlnaW5Eb21haW4gPSBvcmlnaW5EaXZpZGVkVVJMLmRvbWFpbjtcblxuICAgICAgaWYgKCFkb21haW4pIHtcbiAgICAgICAgZG9tYWluID0gaWRwUHJveHlVUkw7XG4gICAgICB9XG5cbiAgICAgIGlmIChkb21haW4gPT09IG9yaWdpbkRvbWFpbiB8fCAhaWRwcHJveHkpIHtcbiAgICAgICAgaWRwcHJveHkgPSAnZGVmYXVsdCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZHBwcm94eSA9IGlkcHByb3h5LnN1YnN0cmluZyhpZHBwcm94eS5sYXN0SW5kZXhPZignLycpICsgMSk7XG4gICAgICB9XG5cbiAgICAgIGxldCBwcmVmaXggPSBnZXRQcmVmaXgodGhpcy5ydW50aW1lQ29uZmlndXJhdGlvbiwgJ2NhdGFsb2d1ZVByZWZpeCcpO1xuXG4gICAgICBpZHBQcm94eVVSTCA9IHR5cGUgKyAnOi8vJyArIHByZWZpeCArIGRvbWFpbiArICcvLndlbGwta25vd24vaWRwLXByb3h5LycgKyBpZHBwcm94eTtcblxuICAgICAgcmV0dXJuIHRoaXMuY2F0YWxvZ3VlLmdldElkcFByb3h5RGVzY3JpcHRvcihpZHBQcm94eVVSTCkudGhlbigocmVzdWx0KSA9PiB7XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3Jlc3VsdDogJywgcmVzdWx0KTtcbiAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuXG4gICAgICB9KS5jYXRjaCgoKSA9PiB7XG5cbiAgICAgICAgaWRwcHJveHkgPSBkb21haW47XG4gICAgICAgIGRvbWFpbiA9IG9yaWdpbkRvbWFpbjtcblxuICAgICAgICAvLyBjb25zb2xlLmxvZygnR2V0IGFuIHNwZWNpZmljIHByb3Rvc3R1YiBmb3IgZG9tYWluJywgZG9tYWluLCAnIHNwZWNpZmljIGZvcjogJywgaWRwcHJveHkpO1xuICAgICAgICBpZHBQcm94eVVSTCA9IHR5cGUgKyAnOi8vJyArIHByZWZpeCArIGRvbWFpbiArICcvLndlbGwta25vd24vaWRwLXByb3h5LycgKyBpZHBwcm94eTtcblxuICAgICAgICByZXR1cm4gdGhpcy5jYXRhbG9ndWUuZ2V0SWRwUHJveHlEZXNjcmlwdG9yKGlkcFByb3h5VVJMKTtcbiAgICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICB9KS5jYXRjaCgocmVhc29uKSA9PiB7XG4gICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgfSk7XG5cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEZXNjcmlwdG9ycztcbiIsImltcG9ydCB7ZGl2aWRlVVJMLCBlbXB0eU9iamVjdH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IERlc2NyaXB0b3JzIGZyb20gJy4vRGVzY3JpcHRvcnMnO1xuXG5jbGFzcyBMb2FkZXIge1xuXG4gIGNvbnN0cnVjdG9yKHJ1bnRpbWVDb25maWd1cmF0aW9uKSB7XG4gICAgaWYgKCFydW50aW1lQ29uZmlndXJhdGlvbikgdGhyb3cgRXJyb3IoJ1RoZSBkZXNjcmlwdG9yIG5lZWQgdG8ga25vdyB0aGUgcnVudGltZSBjb25maWd1cmF0aW9uJyk7XG4gICAgdGhpcy5ydW50aW1lQ29uZmlndXJhdGlvbiA9IHJ1bnRpbWVDb25maWd1cmF0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBydW50aW1lIHVybFxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IHZhbHVlIHJ1bnRpbWVVUkxcbiAgICovXG4gIHNldCBydW50aW1lVVJMKHZhbHVlKSB7XG4gICAgdGhpcy5fcnVudGltZVVSTCA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBydW50aW1lIHVybFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IHZhbHVlIHJ1bnRpbWVVUkxcbiAgICovXG4gIGdldCBydW50aW1lVVJMKCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lVVJMO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBSZWdpc3RyeSBjb21wb25lbnRcbiAgICogQHBhcmFtICB7UmVnaXN0cnl9IHZhbHVlIFJlZ2lzdHJ5IENvbXBvbmVudFxuICAgKi9cbiAgc2V0IHJlZ2lzdHJ5KHZhbHVlKSB7XG4gICAgdGhpcy5fcmVnaXN0cnkgPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgUmVnaXN0cnkgY29tcG9uZW50XG4gICAqIEByZXR1cm4ge1JlZ2lzdHJ5fSBSZWdpc3RyeSBjb21wb25lbnRcbiAgICovXG4gIGdldCByZWdpc3RyeSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVnaXN0cnk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IFJ1bnRpbWUgQ2F0YWxvZ3VlIENvbXBvbmVudFxuICAgKiBAcGFyYW0gIHtSdW50aW1lQ2F0YWxvZ3VlfSB2YWx1ZSBydW50aW1lIGNhdGFsb2d1ZSBjb21wb25lbnRcbiAgICovXG4gIHNldCBydW50aW1lQ2F0YWxvZ3VlKHZhbHVlKSB7XG4gICAgdGhpcy5fcnVudGltZUNhdGFsb2d1ZSA9IHZhbHVlO1xuXG4gICAgdGhpcy5kZXNjcmlwdG9ycyA9IG5ldyBEZXNjcmlwdG9ycyh0aGlzLl9ydW50aW1lVVJMLCB2YWx1ZSwgdGhpcy5ydW50aW1lQ29uZmlndXJhdGlvbik7XG4gIH1cblxuICAvKipcbiAgICogR2V0IFJ1bnRpbWUgQ2F0YWxvZ3VlIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtSdW50aW1lQ2F0YWxvZ3VlfSBSdW50aW1lIENhdGFsb2d1ZSBjb21wb25lbnRcbiAgICovXG4gIGdldCBydW50aW1lQ2F0YWxvZ3VlKCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lQ2F0YWxvZ3VlO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBNZXNzYWdlIEJ1cyBjb21wb25lbnRcbiAgICogQHBhcmFtICB7TWVzc2FnZUJ1c30gdmFsdWUgTWVzc2FnZSBidXMgY29tcG9uZW50XG4gICAqL1xuICBzZXQgbWVzc2FnZUJ1cyh2YWx1ZSkge1xuICAgIHRoaXMuX21lc3NhZ2VzQnVzID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogR2V0IE1lc3NhZ2UgQnVzIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtNZXNzYWdlQnVzfSBNZXNzYWdlIEJ1cyBjb21wb25lbnRcbiAgICovXG4gIGdldCBtZXNzYWdlQnVzKCkge1xuICAgIHJldHVybiB0aGlzLl9tZXNzYWdlc0J1cztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgUnVudGltZSBGYWN0b3J5IGNvbXBvbmVudFxuICAgKiBAcGFyYW0gIHtydW50aW1lRmFjdG9yeX0gdmFsdWUgRmFjdG9yeSBpbmNsdWRlcyB0aGUgc3BlY2lmaWMgaW1wbGVtZW50YXRpb25zIGZvciBlYWNoIGVudmlyb25tZW50XG4gICAqL1xuICBzZXQgcnVudGltZUZhY3RvcnkodmFsdWUpIHtcbiAgICB0aGlzLl9ydW50aW1lRmFjdG9yeSA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBSdW50aW1lIEZhY3RvcnkgY29tcG9uZW50XG4gICAqIEByZXR1cm4ge3J1bnRpbWVGYWN0b3J5fSBSdW50aW1lIEZhY3RvcnkgY29tcG9uZW50XG4gICAqL1xuICBnZXQgcnVudGltZUZhY3RvcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWVGYWN0b3J5O1xuICB9XG5cbiAgLyoqXG4gICogRGVwbG95IEh5cGVydHkgZnJvbSBDYXRhbG9ndWUgVVJMXG4gICogQHBhcmFtICB7VVJMLkh5cGVydHlDYXRhbG9ndWVVUkx9ICAgIGh5cGVydHkgaHlwZXJ0eURlc2NyaXB0b3IgdXJsO1xuICAqL1xuICBsb2FkSHlwZXJ0eShoeXBlcnR5RGVzY3JpcHRvclVSTCkge1xuXG4gICAgaWYgKCF0aGlzLl9yZWFkeVRvVXNlKCkpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoIWh5cGVydHlEZXNjcmlwdG9yVVJMKSB0aHJvdyBuZXcgRXJyb3IoJ0h5cGVydHkgZGVzY3JpcHRvciB1cmwgcGFyYW1ldGVyIGlzIG5lZWRlZCcpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgbGV0IF9oeXBlcnR5VVJMO1xuICAgICAgbGV0IF9oeXBlcnR5U2FuZGJveDtcbiAgICAgIGxldCBfaHlwZXJ0eURlc2NyaXB0b3I7XG4gICAgICBsZXQgX2h5cGVydHlTb3VyY2VQYWNrYWdlO1xuICAgICAgbGV0IGhhdmVFcnJvciA9IGZhbHNlO1xuXG4gICAgICBsZXQgZXJyb3JSZWFzb24gPSAocmVhc29uKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1NvbWV0aGluZyBmYWlsZWQgb24gdGhlIGRlcGxveSBoeXBlcnR5OiAnLCByZWFzb24pO1xuICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgIH07XG5cbiAgICAgIGxldCBoYW5kbGVFcnJvciA9IChyZWFzb24pID0+IHtcbiAgICAgICAgaGF2ZUVycm9yID0gdHJ1ZTtcbiAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICB9O1xuXG4gICAgICAvLyBHZXQgSHlwZXJ0eSBkZXNjcmlwdG9yXG4gICAgICAvLyBUT0RPOiB0aGUgcmVxdWVzdCBNb2R1bGUgc2hvdWxkIGJlIGNoYW5nZWQsXG4gICAgICAvLyBiZWNhdXNlIGF0IHRoaXMgbW9tZW50IGl0IGlzIGluY29tcGF0aWJsZSB3aXRoIG5vZGVqcztcbiAgICAgIC8vIFByb2JhYmx5IHdlIG5lZWQgdG8gcGFzcyBhIGZhY3RvcnkgbGlrZSB3ZSBkbyBmb3Igc2FuZGJveGVzO1xuICAgICAgY29uc29sZS5pbmZvKCctLS0tLS0tLS0tLS0tLS0tLS0gSHlwZXJ0eSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKTtcbiAgICAgIGNvbnNvbGUuaW5mbygnR2V0IGh5cGVydHkgZGVzY3JpcHRvciBmb3IgOicsIGh5cGVydHlEZXNjcmlwdG9yVVJMKTtcbiAgICAgIHJldHVybiB0aGlzLmRlc2NyaXB0b3JzLmdldEh5cGVydHlEZXNjcmlwdG9yKGh5cGVydHlEZXNjcmlwdG9yVVJMKVxuICAgICAgLnRoZW4oKGh5cGVydHlEZXNjcmlwdG9yKSA9PiB7XG4gICAgICAgIC8vIGF0IHRoaXMgcG9pbnQsIHdlIGhhdmUgY29tcGxldGVkIFwic3RlcCAyIGFuZCAzXCIgYXMgc2hvd24gaW4gaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktaHlwZXJ0eS5tZFxuICAgICAgICBjb25zb2xlLmluZm8oJzE6IHJldHVybiBoeXBlcnR5IGRlc2NyaXB0b3InKTtcblxuICAgICAgICAvLyBoeXBlcnR5IGNvbnRhaW5zIHRoZSBmdWxsIHBhdGggb2YgdGhlIGNhdGFsb2d1ZSBVUkwsIGUuZy5cbiAgICAgICAgLy8gY2F0YWxvZ3VlLnJldGhpbmsuZXUvLndlbGwta25vd24vLi4uLi4uLi4uLlxuICAgICAgICBfaHlwZXJ0eURlc2NyaXB0b3IgPSBoeXBlcnR5RGVzY3JpcHRvcjtcblxuICAgICAgICBsZXQgc291cmNlUGFja2FnZVVSTCA9IGh5cGVydHlEZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2VVUkw7XG5cbiAgICAgICAgaWYgKHNvdXJjZVBhY2thZ2VVUkwgPT09ICcvc291cmNlUGFja2FnZScpIHtcbiAgICAgICAgICByZXR1cm4gaHlwZXJ0eURlc2NyaXB0b3Iuc291cmNlUGFja2FnZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdldCB0aGUgaHlwZXJ0eSBzb3VyY2UgY29kZVxuICAgICAgICByZXR1cm4gdGhpcy5ydW50aW1lQ2F0YWxvZ3VlLmdldFNvdXJjZVBhY2thZ2VGcm9tVVJMKHNvdXJjZVBhY2thZ2VVUkwpO1xuICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAudGhlbigoc291cmNlUGFja2FnZSkgPT4ge1xuICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgY29uc29sZS5pbmZvKCcyOiByZXR1cm4gaHlwZXJ0eSBzb3VyY2UgY29kZScpO1xuXG4gICAgICAgIC8vIGF0IHRoaXMgcG9pbnQsIHdlIGhhdmUgY29tcGxldGVkIFwic3RlcCA0IGFuZCA1XCIgYXMgc2hvd24gaW4gaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktaHlwZXJ0eS5tZFxuXG4gICAgICAgIF9oeXBlcnR5U291cmNlUGFja2FnZSA9IHNvdXJjZVBhY2thZ2U7XG5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gc3RlcHMgNiAtLSA5IGFyZSBza2lwcGVkLlxuICAgICAgICAvLyBUT0RPOiBvbiByZWxlYXNlIG9mIGNvcmUgMC4yO1xuICAgICAgICAvLyBUT0RPOiBQcm9taXNlIHRvIGNoZWNrIHRoZSBwb2xpY3kgZW5naW5lXG5cbiAgICAgICAgLy8gbW9jay11cCBjb2RlO1xuICAgICAgICAvLyB0ZW1wb3JhcnkgY29kZSwgb25seVxuICAgICAgICBsZXQgcG9saWN5ID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4gcG9saWN5O1xuICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAudGhlbigocG9saWN5UmVzdWx0KSA9PiB7XG4gICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc29sZS5pbmZvKCczOiByZXR1cm4gcG9saWN5IGVuZ2luZSByZXN1bHQnICsgcG9saWN5UmVzdWx0KTtcblxuICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDYgdG8gOSBvZiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1oeXBlcnR5Lm1kIHJpZ2h0IG5vdy5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gU3RlcHMgNiAtLSA5XG4gICAgICAgIC8vIEFzIGEgcmVzdWx0IG9mIHRoZSBzaXBwZWQgc3RlcHMsIHdlIGtub3cgYXQgdGhpcyBwb2ludCBpZiB3ZSBleGVjdXRlXG4gICAgICAgIC8vIGluU2FtZVNhbmRib3ggb3Igbm90LlxuICAgICAgICAvL1xuXG4gICAgICAgIC8vIEZvciB0ZXN0aW5nLCBqdXN0IGFzc3VtZSB3ZSBleGVjdXRlIGluIHNhbWUgU2FuZGJveC5cbiAgICAgICAgbGV0IGluU2FtZVNhbmRib3ggPSB0cnVlO1xuICAgICAgICBsZXQgc2FuZGJveDtcblxuICAgICAgICBpZiAoaW5TYW1lU2FuZGJveCkge1xuXG4gICAgICAgICAgLy8gdGhpcyBkb24ndCBuZWVkIGJlIGEgUHJvbWlzZTtcbiAgICAgICAgICBzYW5kYm94ID0gdGhpcy5yZWdpc3RyeS5nZXRBcHBTYW5kYm94KCk7XG5cbiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDExIGhlcmUuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICBsZXQgZG9tYWluID0gZGl2aWRlVVJMKGh5cGVydHlEZXNjcmlwdG9yVVJMKS5kb21haW47XG5cbiAgICAgICAgICAvLyBnZXRTYW5kYm94LCB0aGlzIHdpbGwgcmV0dXJuIGEgcHJvbWlzZTtcbiAgICAgICAgICBzYW5kYm94ID0gdGhpcy5yZWdpc3RyeS5nZXRTYW5kYm94KGRvbWFpbik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aGlzIHdpbGwgcmV0dXJuIHRoZSBzYW5kYm94IG9yIG9uZSBwcm9taXNlIHRvIGdldFNhbmRib3g7XG4gICAgICAgIHJldHVybiBzYW5kYm94O1xuICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAudGhlbigoc2FuZGJveCkgPT4ge1xuICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnNvbGUuaW5mbygnNDogcmV0dXJuIHRoZSBzYW5kYm94Jywgc2FuZGJveCk7XG5cbiAgICAgICAgLy8gUmV0dXJuIHRoZSBzYW5kYm94IGluZGVwZW50ZWx5IGlmIGl0IHJ1bm5pbmcgaW4gdGhlIHNhbWUgc2FuZGJveCBvciBub3RcbiAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCAxNCBoZXJlLlxuICAgICAgICByZXR1cm4gc2FuZGJveDtcbiAgICAgIH0sIChyZWFzb24pID0+IHtcbiAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb25zb2xlLmVycm9yKCc0LjE6IFRyeSB0byByZWdpc3RlciBhIG5ldyBzYW5kYm94Jyk7XG5cbiAgICAgICAgLy8gY2hlY2sgaWYgdGhlIHNhbmRib3ggaXMgcmVnaXN0ZWQgZm9yIHRoaXMgaHlwZXJ0eSBkZXNjcmlwdG9yIHVybDtcbiAgICAgICAgLy8gTWFrZSBTdGVwcyB4eHggLS0tIHh4eFxuICAgICAgICAvLyBJbnN0YW50aWF0ZSB0aGUgU2FuZGJveFxuICAgICAgICBsZXQgc2FuZGJveCA9IHRoaXMuX3J1bnRpbWVGYWN0b3J5LmNyZWF0ZVNhbmRib3goKTtcblxuICAgICAgICBzYW5kYm94LmFkZExpc3RlbmVyKCcqJywgKG1zZykgPT4ge1xuICAgICAgICAgIHRoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gc2FuZGJveDtcbiAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgLnRoZW4oKHNhbmRib3gpID0+IHtcbiAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb25zb2xlLmluZm8oJzU6IHJldHVybiBzYW5kYm94IGFuZCByZWdpc3RlcicpO1xuXG4gICAgICAgIF9oeXBlcnR5U2FuZGJveCA9IHNhbmRib3g7XG5cbiAgICAgICAgLy8gUmVnaXN0ZXIgaHlwZXJ0eVxuICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3RyeS5yZWdpc3Rlckh5cGVydHkoc2FuZGJveCwgaHlwZXJ0eURlc2NyaXB0b3JVUkwsIF9oeXBlcnR5RGVzY3JpcHRvcik7XG4gICAgICB9LCBoYW5kbGVFcnJvcilcbiAgICAgIC50aGVuKChoeXBlcnR5VVJMKSA9PiB7XG4gICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc29sZS5pbmZvKCc2OiBIeXBlcnR5IHVybCwgYWZ0ZXIgcmVnaXN0ZXIgaHlwZXJ0eScsIGh5cGVydHlVUkwpO1xuXG4gICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgMTYgb2YgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktaHlwZXJ0eS5tZCByaWdodCBub3cuXG4gICAgICAgIF9oeXBlcnR5VVJMID0gaHlwZXJ0eVVSTDtcblxuICAgICAgICAvLyBFeHRlbmQgb3JpZ2luYWwgaHlwZXJ0eSBjb25maWd1cmF0aW9uO1xuICAgICAgICBsZXQgY29uZmlndXJhdGlvbiA9IHt9O1xuICAgICAgICBpZiAoIWVtcHR5T2JqZWN0KF9oeXBlcnR5RGVzY3JpcHRvci5jb25maWd1cmF0aW9uKSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25maWd1cmF0aW9uID0gT2JqZWN0LmFzc2lnbih7fSwgSlNPTi5wYXJzZShfaHlwZXJ0eURlc2NyaXB0b3IuY29uZmlndXJhdGlvbikpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24gPSBfaHlwZXJ0eURlc2NyaXB0b3IuY29uZmlndXJhdGlvbjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uZmlndXJhdGlvbi5ydW50aW1lVVJMID0gdGhpcy5fcnVudGltZVVSTDtcblxuICAgICAgICAvLyBXZSB3aWxsIGRlcGxveSB0aGUgY29tcG9uZW50IC0gc3RlcCAxNyBvZiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1oeXBlcnR5Lm1kIHJpZ2h0IG5vdy5cblxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBfaHlwZXJ0eVNhbmRib3guZGVwbG95Q29tcG9uZW50KF9oeXBlcnR5U291cmNlUGFja2FnZS5zb3VyY2VDb2RlLCBfaHlwZXJ0eVVSTCwgY29uZmlndXJhdGlvbik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBvbiBkZXBsb3kgY29tcG9uZW50OicsIGUpO1xuICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfVxuICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAudGhlbigoZGVwbG95Q29tcG9uZW50U3RhdHVzKSA9PiB7XG4gICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc29sZS5pbmZvKCc3OiBEZXBsb3kgY29tcG9uZW50IHN0YXR1cyBmb3IgaHlwZXJ0eTogJywgZGVwbG95Q29tcG9uZW50U3RhdHVzKTtcblxuICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDE5IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQgcmlnaHQgbm93LlxuXG4gICAgICAgIC8vIEFkZCB0aGUgbWVzc2FnZSBidXMgbGlzdGVuZXIgdG8gdGhlIGFwcFNhbmRib3ggb3IgaHlwZXJ0U2FuZGJveDtcbiAgICAgICAgdGhpcy5tZXNzYWdlQnVzLmFkZExpc3RlbmVyKF9oeXBlcnR5VVJMLCAobXNnKSA9PiB7XG4gICAgICAgICAgX2h5cGVydHlTYW5kYm94LnBvc3RNZXNzYWdlKG1zZyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgMjAgb2YgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktaHlwZXJ0eS5tZCByaWdodCBub3cuXG4gICAgICAgIGxldCBoeXBlcnR5ID0ge1xuICAgICAgICAgIHJ1bnRpbWVIeXBlcnR5VVJMOiBfaHlwZXJ0eVVSTCxcbiAgICAgICAgICBzdGF0dXM6IGRlcGxveUNvbXBvbmVudFN0YXR1c1xuICAgICAgICB9O1xuXG4gICAgICAgIHJlc29sdmUoaHlwZXJ0eSk7XG5cbiAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCAyMSBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1oeXBlcnR5Lm1kIHJpZ2h0IG5vdy5cbiAgICAgICAgY29uc29sZS5pbmZvKCctLS0tLS0tLS0tLS0tLS0tLS0gRU5EIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpO1xuICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAuY2F0Y2goZXJyb3JSZWFzb24pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogRGVwbG95IFN0dWIgZnJvbSBDYXRhbG9ndWUgVVJMIG9yIGRvbWFpbiB1cmxcbiAgKiBAcGFyYW0gIHtVUkwuVVJMfSAgICAgZG9tYWluICAgICAgICAgIGRvbWFpblxuICAqL1xuICBsb2FkU3R1Yihwcm90b3N0dWJVUkwpIHtcblxuICAgIGlmICghdGhpcy5fcmVhZHlUb1VzZSgpKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKCFwcm90b3N0dWJVUkwpIHRocm93IG5ldyBFcnJvcignUHJvdG9TdHViIGRlc2NyaXB0b3IgdXJsIHBhcmFtZXRlciBpcyBuZWVkZWQnKTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIGxldCBkb21haW4gPSBkaXZpZGVVUkwocHJvdG9zdHViVVJMKS5kb21haW47XG5cbiAgICAgIGlmICghZG9tYWluKSB7XG4gICAgICAgIGRvbWFpbiA9IHByb3Rvc3R1YlVSTDtcbiAgICAgIH1cblxuICAgICAgbGV0IF9zdHViU2FuZGJveDtcbiAgICAgIGxldCBfc3R1YkRlc2NyaXB0b3I7XG4gICAgICBsZXQgX3J1bnRpbWVQcm90b1N0dWJVUkw7XG4gICAgICBsZXQgX3N0dWJTb3VyY2VQYWNrYWdlO1xuICAgICAgbGV0IGhhdmVFcnJvciA9IGZhbHNlO1xuXG4gICAgICBsZXQgZXJyb3JSZWFzb24gPSAocmVhc29uKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1NvbWV0aGluZyBmYWlsZWQgb24gdGhlIGRlcGxveSBvZiBwcm90b2NvbHN0dWI6ICcsIHJlYXNvbik7XG4gICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgfTtcblxuICAgICAgbGV0IGhhbmRsZUVycm9yID0gKHJlYXNvbikgPT4ge1xuICAgICAgICBoYXZlRXJyb3IgPSB0cnVlO1xuICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgIH07XG5cbiAgICAgIC8vIERpc2NvdmVyIFByb3RvY29sIFN0dWJcbiAgICAgIGNvbnNvbGUuaW5mbygnLS0tLS0tLS0tLS0tLS0tLS0tLSBQcm90b1N0dWIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuJyk7XG4gICAgICBjb25zb2xlLmluZm8oJ0Rpc2NvdmVyIG9yIENyZWF0ZSBhIG5ldyBQcm90b1N0dWIgZm9yIGRvbWFpbjogJywgZG9tYWluKTtcbiAgICAgIHRoaXMucmVnaXN0cnkuZGlzY292ZXJQcm90b3N0dWIoZG9tYWluKS50aGVuKChydW50aW1lUHJvdG9TdHViVVJMKSA9PiB7XG4gICAgICAgIC8vIElzIHJlZ2lzdGVkP1xuICAgICAgICBjb25zb2xlLmluZm8oJzEuIFByb3RvIFN0dWIgRGlzY292ZXJlZCBmb3IgJywgZG9tYWluLCAnOiAnLCBydW50aW1lUHJvdG9TdHViVVJMKTtcblxuICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDIgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG5cbiAgICAgICAgLy8gVE9ETzogQ2hlY2sgaWYgdGhlIHN0YXR1cyBpcyBzYXZlZCBpbiB0aGUgc3RhdHVzIG9mIHNhbmRib3g7XG4gICAgICAgIC8vIGxldCBzdHViID0ge1xuICAgICAgICAvLyAgIHJ1bnRpbWVQcm90b1N0dWJVUkw6IHJ1bnRpbWVQcm90b1N0dWJVUkwsXG4gICAgICAgIC8vICAgc3RhdHVzOiAnZGVwbG95ZWQnXG4gICAgICAgIC8vIH07XG4gICAgICAgIGxldCBzdHViID0gdGhpcy5yZWdpc3RyeS5wcm90b3N0dWJzTGlzdFtkb21haW5dO1xuICAgICAgICByZXNvbHZlKHN0dWIpO1xuICAgICAgICBjb25zb2xlLmluZm8oJy0tLS0tLS0tLS0tLS0tLS0tLS0gRU5EIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcbicpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgocmVhc29uKSA9PiB7XG5cbiAgICAgICAgLy8gaXMgbm90IHJlZ2lzdGVkP1xuICAgICAgICBjb25zb2xlLmluZm8oJzEuIFByb3RvIFN0dWIgbm90IGZvdW5kICcgKyByZWFzb24pO1xuXG4gICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgMyBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcblxuICAgICAgICAvLyB3ZSBuZWVkIHRvIGdldCBQcm90b1N0dWIgZGVzY3JpcHRvciBzdGVwIDQgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG4gICAgICAgIHRoaXMuZGVzY3JpcHRvcnMuZ2V0U3R1YkRlc2NyaXB0b3IocHJvdG9zdHViVVJMKVxuICAgICAgICAudGhlbigoc3R1YkRlc2NyaXB0b3IpID0+IHtcbiAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgY29uc29sZS5pbmZvKCcyLiByZXR1cm4gdGhlIFByb3RvU3R1YiBkZXNjcmlwdG9yJyk7XG5cbiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDUgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG4gICAgICAgICAgX3N0dWJEZXNjcmlwdG9yID0gc3R1YkRlc2NyaXB0b3I7XG5cbiAgICAgICAgICBsZXQgc291cmNlUGFja2FnZVVSTCA9IHN0dWJEZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2VVUkw7XG5cbiAgICAgICAgICBpZiAoc291cmNlUGFja2FnZVVSTCA9PT0gJy9zb3VyY2VQYWNrYWdlJykge1xuICAgICAgICAgICAgcmV0dXJuIHN0dWJEZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gd2UgbmVlZCB0byBnZXQgUHJvdG9TdHViIFNvdXJjZSBjb2RlIGZyb20gZGVzY3JpcHRvciAtIHN0ZXAgNiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgICByZXR1cm4gdGhpcy5ydW50aW1lQ2F0YWxvZ3VlLmdldFNvdXJjZVBhY2thZ2VGcm9tVVJMKHNvdXJjZVBhY2thZ2VVUkwpO1xuICAgICAgICB9LCBoYW5kbGVFcnJvcilcbiAgICAgICAgLmNhdGNoKGVycm9yUmVhc29uKVxuICAgICAgICAudGhlbigoc3R1YlNvdXJjZVBhY2thZ2UpID0+IHtcbiAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgY29uc29sZS5pbmZvKCczLiByZXR1cm4gdGhlIFByb3RvU3R1YiBTb3VyY2UgQ29kZScpO1xuXG4gICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCA3IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuXG4gICAgICAgICAgX3N0dWJTb3VyY2VQYWNrYWdlID0gc3R1YlNvdXJjZVBhY2thZ2U7XG5cbiAgICAgICAgICAvLyBUT0RPOiBDaGVjayBvbiBQRVAgKHBvbGljeSBFbmdpbmUpIGlmIHdlIG5lZWQgdGhlIHNhbmRib3ggYW5kIGNoZWNrIGlmIHRoZSBTYW5kYm94IEZhY3RvcnkgaGF2ZSB0aGUgY29udGV4dCBzYW5kYm94O1xuICAgICAgICAgIGxldCBwb2xpY3kgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBwb2xpY3k7XG4gICAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgICAudGhlbigocG9saWN5KSA9PiB7XG4gICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgLy8gdGhpcyB3aWxsIHJldHVybiB0aGUgc2FuZGJveCBvciBvbmUgcHJvbWlzZSB0byBnZXRTYW5kYm94O1xuICAgICAgICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5LmdldFNhbmRib3goZG9tYWluKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oKHN0dWJTYW5kYm94KSA9PiB7XG4gICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGNvbnNvbGUuaW5mbygnNC4gaWYgdGhlIHNhbmRib3ggaXMgcmVnaXN0ZXJlZCB0aGVuIHJldHVybiB0aGUgc2FuZGJveCAnLCBzdHViU2FuZGJveCk7XG5cbiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcblxuICAgICAgICAgIF9zdHViU2FuZGJveCA9IHN0dWJTYW5kYm94O1xuICAgICAgICAgIHJldHVybiBzdHViU2FuZGJveDtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChyZWFzb24pID0+IHtcbiAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgY29uc29sZS5pbmZvKCc1LiBTYW5kYm94IHdhcyBub3QgZm91bmQsIGNyZWF0aW5nIGEgbmV3IG9uZSAnLCByZWFzb24pO1xuXG4gICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIHNhbmRib3ggaXMgcmVnaXN0ZWQgZm9yIHRoaXMgc3R1YiBkZXNjcmlwdG9yIHVybDtcbiAgICAgICAgICAvLyBNYWtlIFN0ZXBzIHh4eCAtLS0geHh4XG4gICAgICAgICAgLy8gSW5zdGFudGlhdGUgdGhlIFNhbmRib3hcbiAgICAgICAgICBsZXQgc2FuZGJveCA9IHRoaXMuX3J1bnRpbWVGYWN0b3J5LmNyZWF0ZVNhbmRib3goKTtcbiAgICAgICAgICBzYW5kYm94LmFkZExpc3RlbmVyKCcqJywgKG1zZykgPT4ge1xuICAgICAgICAgICAgdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gc2FuZGJveDtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oKHNhbmRib3gpID0+IHtcbiAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgY29uc29sZS5pbmZvKCc2LiByZXR1cm4gdGhlIHNhbmRib3ggaW5zdGFuY2UgYW5kIHJlZ2lzdGVyJywgc2FuZGJveCwgJ3RvIGRvbWFpbiAnLCBkb21haW4pO1xuXG4gICAgICAgICAgX3N0dWJTYW5kYm94ID0gc2FuZGJveDtcblxuICAgICAgICAgIC8vIHdlIG5lZWQgcmVnaXN0ZXIgc3R1YiBvbiByZWdpc3RyeSAtIHN0ZXAgeHh4IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5LnJlZ2lzdGVyU3R1Yihfc3R1YlNhbmRib3gsIGRvbWFpbik7XG4gICAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgICAudGhlbigocnVudGltZVByb3RvU3R1YlVSTCkgPT4ge1xuICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBjb25zb2xlLmluZm8oJzcuIHJldHVybiB0aGUgcnVudGltZSBwcm90b3N0dWIgdXJsOiAnLCBydW50aW1lUHJvdG9TdHViVVJMKTtcblxuICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgeHh4IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuXG4gICAgICAgICAgX3J1bnRpbWVQcm90b1N0dWJVUkwgPSBydW50aW1lUHJvdG9TdHViVVJMO1xuXG4gICAgICAgICAgLy8gRXh0ZW5kIG9yaWdpbmFsIGh5cGVydHkgY29uZmlndXJhdGlvbjtcbiAgICAgICAgICBsZXQgY29uZmlndXJhdGlvbiA9IHt9O1xuICAgICAgICAgIGlmICghZW1wdHlPYmplY3QoX3N0dWJEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb24pKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBjb25maWd1cmF0aW9uID0gT2JqZWN0LmFzc2lnbih7fSwgSlNPTi5wYXJzZShfc3R1YkRlc2NyaXB0b3IuY29uZmlndXJhdGlvbikpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBjb25maWd1cmF0aW9uID0gX3N0dWJEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uZmlndXJhdGlvbi5ydW50aW1lVVJMID0gdGhpcy5fcnVudGltZVVSTDtcblxuICAgICAgICAgIC8vIERlcGxveSBDb21wb25lbnQgc3RlcCB4eHhcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdHViU2FuZGJveC5kZXBsb3lDb21wb25lbnQoX3N0dWJTb3VyY2VQYWNrYWdlLnNvdXJjZUNvZGUsIHJ1bnRpbWVQcm90b1N0dWJVUkwsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIG9uIGRlcGxveSBjb21wb25lbnQ6JywgZSk7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBoYW5kbGVFcnJvcilcbiAgICAgICAgLnRoZW4oKGRlcGxveUNvbXBvbmVudFN0YXR1cykgPT4ge1xuICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBjb25zb2xlLmluZm8oJzg6IHJldHVybiBkZXBsb3kgY29tcG9uZW50IGZvciBzYW5kYm94IHN0YXR1czogJywgZGVwbG95Q29tcG9uZW50U3RhdHVzKTtcblxuICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgeHh4IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuXG4gICAgICAgICAgLy8gQWRkIHRoZSBtZXNzYWdlIGJ1cyBsaXN0ZW5lclxuICAgICAgICAgIHRoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihfcnVudGltZVByb3RvU3R1YlVSTCwgKG1zZykgPT4ge1xuICAgICAgICAgICAgX3N0dWJTYW5kYm94LnBvc3RNZXNzYWdlKG1zZyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgICBsZXQgc3R1YiA9IHRoaXMucmVnaXN0cnkucHJvdG9zdHVic0xpc3RbZG9tYWluXTtcblxuICAgICAgICAgIC8vIC8vIExvYWQgU3R1YiBmdW5jdGlvbiByZXNvbHZlZCB3aXRoIHN1Y2Nlc3M7XG4gICAgICAgICAgLy8gbGV0IHN0dWIgPSB7XG4gICAgICAgICAgLy8gICBydW50aW1lUHJvdG9TdHViVVJMOiBfcnVudGltZVByb3RvU3R1YlVSTCxcbiAgICAgICAgICAvLyAgIHN0YXR1czogZGVwbG95Q29tcG9uZW50U3RhdHVzXG4gICAgICAgICAgLy8gfTtcblxuICAgICAgICAgIGNvbnNvbGUubG9nKCdEZXBsb3llZDogJywgc3R1YiwgZG9tYWluLCB0aGlzLnJlZ2lzdHJ5LnByb3Rvc3R1YnNMaXN0KTtcblxuICAgICAgICAgIHJlc29sdmUoc3R1Yik7XG4gICAgICAgICAgY29uc29sZS5pbmZvKCctLS0tLS0tLS0tLS0tLS0tLS0tIEVORCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG4nKTtcblxuICAgICAgICB9LCBoYW5kbGVFcnJvcilcbiAgICAgICAgLmNhdGNoKGVycm9yUmVhc29uKTtcblxuICAgICAgfSk7XG5cbiAgICB9KTtcblxuICB9XG5cbiAgLyoqXG4gICogRGVwbG95IGlkcFByb3h5IGZyb20gQ2F0YWxvZ3VlIFVSTCBvciBkb21haW4gdXJsXG4gICogQHBhcmFtICB7VVJMLlVSTH0gICAgIGRvbWFpbiAgICAgICAgICBkb21haW5cbiAgKi9cbiAgbG9hZElkcFByb3h5KGlkcFByb3h5VVJMKSB7XG5cbiAgICBpZiAoIXRoaXMuX3JlYWR5VG9Vc2UoKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmICghaWRwUHJveHlVUkwpIHRocm93IG5ldyBFcnJvcignSWRwUHJveHkgZGVzY3JpcHRvciB1cmwgcGFyYW1ldGVyIGlzIG5lZWRlZCcpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgbGV0IGRvbWFpbiA9IGRpdmlkZVVSTChpZHBQcm94eVVSTCkuZG9tYWluO1xuXG4gICAgICBpZiAoIWRvbWFpbikge1xuICAgICAgICBkb21haW4gPSBpZHBQcm94eVVSTDtcbiAgICAgIH1cblxuICAgICAgbGV0IF9wcm94eVNhbmRib3g7XG4gICAgICBsZXQgX3Byb3h5RGVzY3JpcHRvcjtcbiAgICAgIGxldCBfcnVudGltZUlkcFByb3h5VVJMO1xuICAgICAgbGV0IF9wcm94eVNvdXJjZVBhY2thZ2U7XG4gICAgICBsZXQgaGF2ZUVycm9yID0gZmFsc2U7XG5cbiAgICAgIGxldCBlcnJvclJlYXNvbiA9IChyZWFzb24pID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcignU29tZXRoaW5nIGZhaWxlZCBvbiB0aGUgZGVwbG95IG9mIElkcFByb3h5OiAnLCByZWFzb24pO1xuICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgIH07XG5cbiAgICAgIGxldCBoYW5kbGVFcnJvciA9IChyZWFzb24pID0+IHtcbiAgICAgICAgaGF2ZUVycm9yID0gdHJ1ZTtcbiAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICB9O1xuXG4gICAgICAvLyBEaXNjb3ZlciBJRFBQcm94eVxuICAgICAgY29uc29sZS5pbmZvKCctLS0tLS0tLS0tLS0tLS0tLS0tIElEUCBQcm94eSBEZXBsb3kgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuJyk7XG4gICAgICBjb25zb2xlLmluZm8oJ0Rpc2NvdmVyIG9yIENyZWF0ZSBhIG5ldyBJZHBQcm94eSBmb3IgZG9tYWluL1VSTDogJywgZG9tYWluKTtcbiAgICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5LmRpc2NvdmVySWRwUHJveHkoZG9tYWluKVxuICAgICAgLnRoZW4oKHJ1bnRpbWVJZHBQcm94eVVSTCkgPT4ge1xuICAgICAgICAvLyBJcyByZWdpc3RlZD9cbiAgICAgICAgY29uc29sZS5pbmZvKCcxLiBJRFBQcm94eSBEaXNjb3ZlcmVkOiAnLCBydW50aW1lSWRwUHJveHlVUkwpO1xuXG4gICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgMiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcblxuICAgICAgICBsZXQgaWRwUHJveHkgPSB0aGlzLnJlZ2lzdHJ5LmlkcFByb3h5TGlzdFtkb21haW5dO1xuICAgICAgICBjb25zb2xlLmxvZygnRGVwbG95ZWQ6ICcsIGlkcFByb3h5KTtcblxuICAgICAgICByZXNvbHZlKGlkcFByb3h5KTtcbiAgICAgICAgY29uc29sZS5pbmZvKCctLS0tLS0tLS0tLS0tLS0tLS0tIEVORCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG4nKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKHJlYXNvbikgPT4ge1xuXG4gICAgICAgIC8vIGlzIG5vdCByZWdpc3RlZD9cbiAgICAgICAgY29uc29sZS5pbmZvKCcxLiBJZHBQcm94eSBub3QgZm91bmQ6JywgcmVhc29uKTtcblxuICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDMgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG5cbiAgICAgICAgLy8gd2UgbmVlZCB0byBnZXQgUHJvdG9TdHViIGRlc2NyaXB0b3Igc3RlcCA0IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICB0aGlzLmRlc2NyaXB0b3JzLmdldElkcFByb3h5RGVzY3JpcHRvcihpZHBQcm94eVVSTClcbiAgICAgICAgLnRoZW4oKHByb3h5RGVzY3JpcHRvcikgPT4ge1xuXG4gICAgICAgICAgY29uc29sZS5pbmZvKCcyLiBSZXR1cm4gdGhlIElEUFByb3h5IGRlc2NyaXB0b3InKTtcblxuICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgNSBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgICBfcHJveHlEZXNjcmlwdG9yID0gcHJveHlEZXNjcmlwdG9yO1xuXG4gICAgICAgICAgbGV0IHNvdXJjZVBhY2thZ2VVUkwgPSBwcm94eURlc2NyaXB0b3Iuc291cmNlUGFja2FnZVVSTDtcblxuICAgICAgICAgIGlmIChzb3VyY2VQYWNrYWdlVVJMID09PSAnL3NvdXJjZVBhY2thZ2UnKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJveHlEZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gd2UgbmVlZCB0byBnZXQgUHJvdG9TdHViIFNvdXJjZSBjb2RlIGZyb20gZGVzY3JpcHRvciAtIHN0ZXAgNiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgICByZXR1cm4gdGhpcy5ydW50aW1lQ2F0YWxvZ3VlLmdldFNvdXJjZVBhY2thZ2VGcm9tVVJMKHNvdXJjZVBhY2thZ2VVUkwpO1xuICAgICAgICB9LCBoYW5kbGVFcnJvcilcbiAgICAgICAgLnRoZW4oKHNvdXJjZVBhY2thZ2UpID0+IHtcbiAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgY29uc29sZS5pbmZvKCczLiByZXR1cm4gdGhlIElEUFByb3h5IHNvdXJjZSBwYWNrYWdlJyk7XG5cbiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDcgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG5cbiAgICAgICAgICBfcHJveHlTb3VyY2VQYWNrYWdlID0gc291cmNlUGFja2FnZTtcblxuICAgICAgICAgIC8vIFRPRE86IENoZWNrIG9uIFBFUCAocG9saWN5IEVuZ2luZSkgaWYgd2UgbmVlZCB0aGUgc2FuZGJveCBhbmQgY2hlY2sgaWYgdGhlIFNhbmRib3ggRmFjdG9yeSBoYXZlIHRoZSBjb250ZXh0IHNhbmRib3g7XG4gICAgICAgICAgbGV0IHBvbGljeSA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIHBvbGljeTtcbiAgICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAgIC50aGVuKChwb2xpY3kpID0+IHtcbiAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAvLyB0aGlzIHdpbGwgcmV0dXJuIHRoZSBzYW5kYm94IG9yIG9uZSBwcm9taXNlIHRvIGdldFNhbmRib3g7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVnaXN0cnkuZ2V0U2FuZGJveChkb21haW4pO1xuICAgICAgICB9KVxuICAgICAgICAudGhlbigocHJveHlTYW5kYm94KSA9PiB7XG4gICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGNvbnNvbGUuaW5mbygnNC4gaWYgdGhlIHNhbmRib3ggaXMgcmVnaXN0ZXJlZCB0aGVuIHJldHVybiB0aGUgc2FuZGJveCcsIHByb3h5U2FuZGJveCk7XG5cbiAgICAgICAgICBfcHJveHlTYW5kYm94ID0gcHJveHlTYW5kYm94O1xuICAgICAgICAgIHJldHVybiBwcm94eVNhbmRib3g7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgocmVhc29uKSA9PiB7XG4gICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGNvbnNvbGUuaW5mbygnNS4gU2FuZGJveCB3YXMgbm90IGZvdW5kLCBjcmVhdGluZyBhIG5ldyBvbmUnLCByZWFzb24pO1xuXG4gICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIHNhbmRib3ggaXMgcmVnaXN0ZWQgZm9yIHRoaXMgcHJveHkgZGVzY3JpcHRvciB1cmw7XG4gICAgICAgICAgLy8gTWFrZSBTdGVwcyB4eHggLS0tIHh4eFxuICAgICAgICAgIC8vIEluc3RhbnRpYXRlIHRoZSBTYW5kYm94XG4gICAgICAgICAgbGV0IHNhbmRib3ggPSB0aGlzLl9ydW50aW1lRmFjdG9yeS5jcmVhdGVTYW5kYm94KCk7XG4gICAgICAgICAgc2FuZGJveC5hZGRMaXN0ZW5lcignKicsIChtc2cpID0+IHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIHNhbmRib3g7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKChzYW5kYm94KSA9PiB7XG4gICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGNvbnNvbGUuaW5mbygnNi4gcmV0dXJuIHRoZSBzYW5kYm94IGluc3RhbmNlIGFuZCByZWdpc3RlcicsIHNhbmRib3gsICd0byBkb21haW4gJywgZG9tYWluKTtcblxuICAgICAgICAgIF9wcm94eVNhbmRib3ggPSBzYW5kYm94O1xuXG4gICAgICAgICAgLy8gd2UgbmVlZCByZWdpc3RlciBzdHViIG9uIHJlZ2lzdHJ5IC0gc3RlcCB4eHggaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVnaXN0cnkucmVnaXN0ZXJJZHBQcm94eShzYW5kYm94LCBkb21haW4pO1xuICAgICAgICB9LCBoYW5kbGVFcnJvcilcbiAgICAgICAgLnRoZW4oKHJ1bnRpbWVJZHBQcm94eVVSTCkgPT4ge1xuICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBjb25zb2xlLmluZm8oJzcuIFJldHVybiB0aGUgcnVudGltZSBJZHAgUHJveHkgVVJMOiAnLCBydW50aW1lSWRwUHJveHlVUkwpO1xuXG4gICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCB4eHggaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG5cbiAgICAgICAgICBfcnVudGltZUlkcFByb3h5VVJMID0gcnVudGltZUlkcFByb3h5VVJMO1xuXG4gICAgICAgICAgLy8gRXh0ZW5kIG9yaWdpbmFsIGh5cGVydHkgY29uZmlndXJhdGlvbjtcbiAgICAgICAgICBsZXQgY29uZmlndXJhdGlvbiA9IHt9O1xuICAgICAgICAgIGlmICghZW1wdHlPYmplY3QoX3Byb3h5RGVzY3JpcHRvci5jb25maWd1cmF0aW9uKSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiA9IE9iamVjdC5hc3NpZ24oe30sIEpTT04ucGFyc2UoX3Byb3h5RGVzY3JpcHRvci5jb25maWd1cmF0aW9uKSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24gPSBfcHJveHlEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucnVudGltZVVSTCA9IHRoaXMuX3J1bnRpbWVVUkw7XG5cbiAgICAgICAgICAvLyBEZXBsb3kgQ29tcG9uZW50IHN0ZXAgeHh4XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBfcHJveHlTYW5kYm94LmRlcGxveUNvbXBvbmVudChfcHJveHlTb3VyY2VQYWNrYWdlLnNvdXJjZUNvZGUsIHJ1bnRpbWVJZHBQcm94eVVSTCwgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igb24gZGVwbG95IGNvbXBvbmVudDonLCBlKTtcbiAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgICAudGhlbigoZGVwbG95Q29tcG9uZW50U3RhdHVzKSA9PiB7XG4gICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGNvbnNvbGUuaW5mbygnODogcmV0dXJuIGRlcGxveSBjb21wb25lbnQgZm9yIHNhbmRib3ggc3RhdHVzOiAnLCBkZXBsb3lDb21wb25lbnRTdGF0dXMpO1xuXG4gICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCB4eHggaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG5cbiAgICAgICAgICAvLyBBZGQgdGhlIG1lc3NhZ2UgYnVzIGxpc3RlbmVyXG4gICAgICAgICAgdGhpcy5tZXNzYWdlQnVzLmFkZExpc3RlbmVyKF9ydW50aW1lSWRwUHJveHlVUkwsIChtc2cpID0+IHtcbiAgICAgICAgICAgIF9wcm94eVNhbmRib3gucG9zdE1lc3NhZ2UobXNnKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgeHh4IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuXG4gICAgICAgICAgLy8gTG9hZCBTdHViIGZ1bmN0aW9uIHJlc29sdmVkIHdpdGggc3VjY2VzcztcbiAgICAgICAgICAvLyBsZXQgaWRwUHJveHkgPSB7XG4gICAgICAgICAgLy8gICBydW50aW1lSWRwUHJveHlVUkw6IF9ydW50aW1lSWRwUHJveHlVUkwsXG4gICAgICAgICAgLy8gICBzdGF0dXM6IGRlcGxveUNvbXBvbmVudFN0YXR1c1xuICAgICAgICAgIC8vIH07XG5cbiAgICAgICAgICB0aGlzLnJlZ2lzdHJ5LmlkcFByb3h5TGlzdFtkb21haW5dLnN0YXR1cyA9ICdkZXBsb3llZCc7XG4gICAgICAgICAgbGV0IGlkcFByb3h5ID0gdGhpcy5yZWdpc3RyeS5pZHBQcm94eUxpc3RbZG9tYWluXTtcblxuICAgICAgICAgIGNvbnNvbGUubG9nKCdEZXBsb3llZDogJywgaWRwUHJveHkpO1xuXG4gICAgICAgICAgcmVzb2x2ZShpZHBQcm94eSk7XG4gICAgICAgICAgY29uc29sZS5pbmZvKCctLS0tLS0tLS0tLS0tLS0tLS0tIEVORCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG4nKTtcblxuICAgICAgICB9LCBoYW5kbGVFcnJvcilcbiAgICAgICAgLmNhdGNoKGVycm9yUmVhc29uKTtcbiAgICAgIH0pO1xuXG4gICAgfSk7XG4gIH1cblxuICAvLyBDaGVjayBpZiB0aGUgbG9hZGVyIGlzIHJlYWR5IHRvIGxvYWQgYWxsIGNvbXBvbmVudHNcbiAgX3JlYWR5VG9Vc2UoKSB7XG5cbiAgICBsZXQgc3RhdHVzID0gZmFsc2U7XG5cbiAgICBpZiAoIXRoaXMuX3J1bnRpbWVVUkwpIHRocm93IG5ldyBFcnJvcignVGhlIGxvYWRlciBuZWVkIHRoZSBydW50aW1lIHVybCBhZGRyZXNzJyk7XG4gICAgaWYgKCF0aGlzLl9tZXNzYWdlc0J1cykgdGhyb3cgbmV3IEVycm9yKCdUaGUgbG9hZGVyIG5lZWQgdGhlIG1lc3NhZ2VCdXMgY29tcG9uZW50Jyk7XG4gICAgaWYgKCF0aGlzLl9ydW50aW1lQ2F0YWxvZ3VlKSB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBsb2FkZXIgbmVlZCB0aGUgcnVudGltZUNhdGFsb2d1ZSBjb21wb25lbnQnKTtcbiAgICBpZiAoIXRoaXMuX3JlZ2lzdHJ5KSB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBsb2FkZXIgbmVlZCB0aGUgcmVnaXN0cnkgY29tcG9uZW50Jyk7XG4gICAgaWYgKCF0aGlzLl9ydW50aW1lRmFjdG9yeSkgdGhyb3cgbmV3IEVycm9yKCdUaGUgbG9hZGVyIG5lZWQgdGhlIHJ1bnRpbWUgZmFjdG9yeSBjb21wb25lbnQnKTtcblxuICAgIHN0YXR1cyA9IHRydWU7XG4gICAgcmV0dXJuIHN0YXR1cztcbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IExvYWRlcjtcbiIsIi8qKlxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxuKlxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qKi9cblxuaW1wb3J0ICdiYWJlbC1wb2x5ZmlsbCc7XG5cbi8vTWFpbiBkZXBlbmRlY2llc1xuaW1wb3J0IFJlZ2lzdHJ5IGZyb20gJy4uL3JlZ2lzdHJ5L1JlZ2lzdHJ5JztcbmltcG9ydCBJZGVudGl0eU1vZHVsZSBmcm9tICcuLi9pZGVudGl0eS9JZGVudGl0eU1vZHVsZSc7XG5pbXBvcnQgUG9saWN5RW5naW5lIGZyb20gJy4uL3BvbGljeS9Qb2xpY3lFbmdpbmUnO1xuaW1wb3J0IE1lc3NhZ2VCdXMgZnJvbSAnLi4vYnVzL01lc3NhZ2VCdXMnO1xuXG5pbXBvcnQgTG9hZGVyIGZyb20gJy4vTG9hZGVyJztcblxuLy8gaW1wb3J0IEdyYXBoQ29ubmVjdG9yIGZyb20gJy4uL2dyYXBoY29ubmVjdG9yL0dyYXBoQ29ubmVjdG9yJztcblxuaW1wb3J0IFN5bmNoZXJNYW5hZ2VyIGZyb20gJy4uL3N5bmNoZXIvU3luY2hlck1hbmFnZXInO1xuaW1wb3J0IFJ1bnRpbWVDb3JlQ3R4IGZyb20gJy4uL3BvbGljeS9jb250ZXh0L1J1bnRpbWVDb3JlQ3R4Jztcbi8qKlxuICogUnVudGltZSBVc2VyIEFnZW50IEludGVyZmFjZSB3aWxsIHByb2Nlc3MgYWxsIHRoZSBkZXBlbmRlY2llcyBvZiB0aGUgY29yZSBydW50aW1lO1xuICogQGF1dGhvciBWaXRvciBTaWx2YSBbdml0b3ItdC1zaWx2YUB0ZWxlY29tLnB0XVxuICogQHZlcnNpb24gMC40LjBcbiAqXG4gKiBAcHJvcGVydHkge3J1bnRpbWVGYWN0b3J5fSBydW50aW1lRmFjdG9yeSAtIFNwZWNpZmljIGltcGxlbWVudGF0aW9uIGZvciBhbGwgZW52aXJvbm1lbnRzO1xuICogQHByb3BlcnR5IHtSdW50aW1lQ2F0YWxvZ3VlfSBydW50aW1lQ2F0YWxvZ3VlIC0gQ2F0YWxvZ3VlIG9mIGNvbXBvbmVudHMgY2FuIGJlIGluc3RhbGxlZDtcbiAqIEBwcm9wZXJ0eSB7cnVudGltZVVSTH0gcnVudGltZVVSTCAtIFRoaXMgaWRlbnRpZnkgdGhlIGNvcmUgcnVudGltZSwgc2hvdWxkIGJlIHVuaXF1ZTtcbiAqIEBwcm9wZXJ0eSB7SWRlbnRpdHlNb2R1bGV9IGlkZW50aXR5TW9kdWxlIC0gSWRlbnRpdHkgTW9kdWxlO1xuICogQHByb3BlcnR5IHtQb2xpY3lFbmdpbmV9IHBvbGljeUVuZ2luZSAtIFBvbGljeSBFbmdpbmUgTW9kdWxlO1xuICogQHByb3BlcnR5IHtSZWdpc3RyeX0gcmVnaXN0cnkgLSBSZWdpc3RyeSBNb2R1bGU7XG4gKiBAcHJvcGVydHkge01lc3NhZ2VCdXN9IG1lc3NhZ2VCdXMgLSBNZXNzYWdlIEJ1cyBpcyB1c2VkIGxpa2UgYSByb3V0ZXIgdG8gcmVkaXJlY3QgdGhlIG1lc3NhZ2VzIGZyb20gb25lIGNvbXBvbmVudCB0byBvdGhlcihzKVxuICogQHByb3BlcnR5IHtHcmFwaENvbm5lY3Rvcn0gZ3JhcGhDb25uZWN0b3IgLSBHcmFwaCBDb25uZWN0b3IgaGFuZGxpbmcgR1VJRCBhbmQgY29udGFjdHNcbiAqL1xuY2xhc3MgUnVudGltZVVBIHtcblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIFJ1bnRpbWUgVXNlciBBZ2VudFxuICAgKiBAcGFyYW0ge3J1bnRpbWVGYWN0b3J5fSBydW50aW1lRmFjdG9yeSAtIFNwZWNpZmljIGltcGxlbWVudGF0aW9uIGZvciB0aGUgZW52aXJvbm1lbnQgd2hlcmUgdGhlIGNvcmUgcnVudGltZSB3aWxsIHJ1bjtcbiAgICogQHBhcmFtIHtkb21haW59IGRvbWFpblVSTCAtIHNwZWNpZnkgdGhlIGRvbWFpbiBiYXNlIGZvciB0aGUgcnVudGltZTtcbiAgICovXG4gIGNvbnN0cnVjdG9yKHJ1bnRpbWVGYWN0b3J5LCBkb21haW4pIHtcblxuICAgIGlmICghcnVudGltZUZhY3RvcnkpIHRocm93IG5ldyBFcnJvcignVGhlIHNhbmRib3ggZmFjdG9yeSBpcyBhIG5lZWRlZCBwYXJhbWV0ZXInKTtcbiAgICBpZiAoIWRvbWFpbikgdGhyb3cgbmV3IEVycm9yKCdZb3UgbmVlZCB0aGUgZG9tYWluIG9mIHJ1bnRpbWUnKTtcblxuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICAvLyBDb25maWd1cmF0aW9uIG9iamVjdCB3aXRoIGluZm9ybWF0aW9uIHJlbGF0ZWQgd2l0aCBzZXJ2ZXJzXG4gICAgX3RoaXMucnVudGltZUNvbmZpZ3VyYXRpb24gPSB7XG4gICAgICBkb21haW46IGRvbWFpbixcbiAgICAgIGNhdGFsb2d1ZVByZWZpeDogJ2NhdGFsb2d1ZScsXG4gICAgICByZWdpc3RyeVByZWZpeDogJ3JlZ2lzdHJ5JyxcbiAgICAgIG1zZ05vZGVQcmVmaXg6ICdtZ3Mtbm9kZSdcbiAgICB9O1xuXG4gICAgX3RoaXMucnVudGltZUZhY3RvcnkgPSBydW50aW1lRmFjdG9yeTtcbiAgICBfdGhpcy5ydW50aW1lQ2F0YWxvZ3VlID0gcnVudGltZUZhY3RvcnkuY3JlYXRlUnVudGltZUNhdGFsb2d1ZSgpO1xuICAgIF90aGlzLnBlcnNpc3RlbmNlTWFuYWdlciA9IHJ1bnRpbWVGYWN0b3J5LnBlcnNpc3RlbmNlTWFuYWdlcigpO1xuXG4gICAgLy8gUHJlcGFyZSB0aGUgbG9hZGVyIHRvIGxvYWQgdGhlIGh5cGVydGllcywgcHJvdG9zdHVicyBhbmQgaWRwcHJveHk7XG4gICAgX3RoaXMubG9hZGVyID0gbmV3IExvYWRlcihfdGhpcy5ydW50aW1lQ29uZmlndXJhdGlvbik7XG5cbiAgICAvLyBUT0RPOiBwb3N0IGFuZCByZXR1cm4gcmVnaXN0cnkvaHlwZXJ0eVJ1bnRpbWVJbnN0YW5jZSB0byBhbmQgZnJvbSBCYWNrLWVuZCBTZXJ2aWNlXG4gICAgLy8gdGhlIHJlc3BvbnNlIGlzIGxpa2U6IHJ1bnRpbWU6Ly9zcDEvMTIzXG5cbiAgICBsZXQgcnVudGltZVVSTCA9ICdydW50aW1lOi8vJyArIGRvbWFpbiArICcvJyArIE1hdGguZmxvb3IoKE1hdGgucmFuZG9tKCkgKiAxMDAwMCkgKyAxKTtcbiAgICBfdGhpcy5ydW50aW1lVVJMID0gcnVudGltZVVSTDtcbiAgICBfdGhpcy5kb21haW4gPSBkb21haW47XG5cbiAgICAvLyBUT0RPOiBjaGVjayBpZiBydW50aW1lIGNhdGFsb2d1ZSBuZWVkIHRoZSBydW50aW1lVVJMO1xuICAgIF90aGlzLnJ1bnRpbWVDYXRhbG9ndWUucnVudGltZVVSTCA9IHJ1bnRpbWVVUkw7XG5cbiAgICAvLyBJbnN0YW50aWF0ZSB0aGUgaWRlbnRpdHkgTW9kdWxlXG4gICAgX3RoaXMuaWRlbnRpdHlNb2R1bGUgPSBuZXcgSWRlbnRpdHlNb2R1bGUocnVudGltZVVSTCk7XG5cbiAgICAvLyBVc2UgdGhlIHNhbmRib3ggZmFjdG9yeSB0byBjcmVhdGUgYW4gQXBwU2FuZGJveDtcbiAgICAvLyBJbiB0aGUgZnV0dXJlIGNhbiBiZSBkZWNpZGVkIGJ5IHBvbGljeUVuZ2luZSBpZiB3ZSBuZWVkXG4gICAgLy8gY3JlYXRlIGEgQXBwU2FuZGJveCBvciBub3Q7XG4gICAgbGV0IGFwcFNhbmRib3ggPSBydW50aW1lRmFjdG9yeS5jcmVhdGVBcHBTYW5kYm94KCk7XG5cbiAgICAvLyBJbnN0YW50aWF0ZSB0aGUgUmVnaXN0cnkgTW9kdWxlXG4gICAgX3RoaXMucmVnaXN0cnkgPSBuZXcgUmVnaXN0cnkocnVudGltZVVSTCwgYXBwU2FuZGJveCwgX3RoaXMuaWRlbnRpdHlNb2R1bGUsIF90aGlzLnJ1bnRpbWVDYXRhbG9ndWUpO1xuXG4gICAgLy8gU2V0IHRoZSBsb2FkZXIgdG8gbG9hZCBIeXBlcnRpZXMsIFN0dWJzIGFuZCBJZHBQcm94aWVzXG4gICAgX3RoaXMucmVnaXN0cnkubG9hZGVyID0gX3RoaXMubG9hZGVyO1xuXG4gICAgLy8gSW5zdGFudGlhdGUgdGhlIE1lc3NhZ2UgQnVzXG4gICAgX3RoaXMubWVzc2FnZUJ1cyA9IG5ldyBNZXNzYWdlQnVzKF90aGlzLnJlZ2lzdHJ5KTtcblxuICAgIC8vIEluc3RhbnRpYXRlIHRoZSBQb2xpY3kgRW5naW5lXG4gICAgX3RoaXMucG9saWN5RW5naW5lID0gbmV3IFBvbGljeUVuZ2luZShuZXcgUnVudGltZUNvcmVDdHgoX3RoaXMuaWRlbnRpdHlNb2R1bGUsIF90aGlzLnJlZ2lzdHJ5LCBfdGhpcy5wZXJzaXN0ZW5jZU1hbmFnZXIpKTtcblxuICAgIF90aGlzLm1lc3NhZ2VCdXMucGlwZWxpbmUuaGFuZGxlcnMgPSBbXG5cbiAgICAgIC8vIFBvbGljeSBtZXNzYWdlIGF1dGhvcmlzZVxuICAgICAgZnVuY3Rpb24oY3R4KSB7XG4gICAgICAgIF90aGlzLnBvbGljeUVuZ2luZS5hdXRob3Jpc2UoY3R4Lm1zZykudGhlbihmdW5jdGlvbihjaGFuZ2VkTWdzKSB7XG4gICAgICAgICAgY3R4Lm1zZyA9IGNoYW5nZWRNZ3M7XG4gICAgICAgICAgY3R4Lm5leHQoKTtcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihyZWFzb24pO1xuICAgICAgICAgIGN0eC5mYWlsKHJlYXNvbik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIF07XG5cbiAgICAvLyBBZGQgdG8gQXBwIFNhbmRib3ggdGhlIGxpc3RlbmVyO1xuICAgIGFwcFNhbmRib3guYWRkTGlzdGVuZXIoJyonLCBmdW5jdGlvbihtc2cpIHtcbiAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTtcbiAgICB9KTtcblxuICAgIC8vIFJlZ2lzdGVyIG1lc3NhZ2VCdXMgb24gUmVnaXN0cnlcbiAgICBfdGhpcy5yZWdpc3RyeS5tZXNzYWdlQnVzID0gX3RoaXMubWVzc2FnZUJ1cztcblxuICAgIC8vIFJlZ2lzdGVyIHJlZ2lzdHJ5IG9uIElkZW50aXR5TW9kdWxlXG4gICAgX3RoaXMuaWRlbnRpdHlNb2R1bGUucmVnaXN0cnkgPSBfdGhpcy5yZWdpc3RyeTtcblxuICAgIC8vIFVzZSBzYW5kYm94IGZhY3RvcnkgdG8gdXNlIHNwZWNpZmljIG1ldGhvZHNcbiAgICAvLyBhbmQgc2V0IHRoZSBtZXNzYWdlIGJ1cyB0byB0aGUgZmFjdG9yeVxuICAgIHJ1bnRpbWVGYWN0b3J5Lm1lc3NhZ2VCdXMgPSBfdGhpcy5tZXNzYWdlQnVzO1xuXG4gICAgLy8gSW5zdGFuY2lhdGUgdGhlIFN5bmNoZXJNYW5hZ2VyO1xuICAgIF90aGlzLnN5bmNoZXJNYW5hZ2VyID0gbmV3IFN5bmNoZXJNYW5hZ2VyKF90aGlzLnJ1bnRpbWVVUkwsIF90aGlzLm1lc3NhZ2VCdXMsIF90aGlzLnJlZ2lzdHJ5LCBfdGhpcy5ydW50aW1lQ2F0YWxvZ3VlKTtcblxuICAgIC8vIFNldCBpbnRvIGxvYWRlciB0aGUgbmVlZGVkIGNvbXBvbmVudHM7XG4gICAgX3RoaXMubG9hZGVyLnJlZ2lzdHJ5ID0gX3RoaXMucmVnaXN0cnk7XG4gICAgX3RoaXMubG9hZGVyLnJ1bnRpbWVVUkwgPSBfdGhpcy5ydW50aW1lVVJMO1xuICAgIF90aGlzLmxvYWRlci5tZXNzYWdlQnVzID0gX3RoaXMubWVzc2FnZUJ1cztcbiAgICBfdGhpcy5sb2FkZXIucnVudGltZUNhdGFsb2d1ZSA9IF90aGlzLnJ1bnRpbWVDYXRhbG9ndWU7XG4gICAgX3RoaXMubG9hZGVyLnJ1bnRpbWVGYWN0b3J5ID0gX3RoaXMucnVudGltZUZhY3Rvcnk7XG5cbiAgICAvLyBJbnN0YW50aWF0ZSB0aGUgR3JhcGggQ29ubmVjdG9yXG4gICAgLy8gX3RoaXMuZ3JhcGhDb25uZWN0b3IgPSBuZXcgR3JhcGhDb25uZWN0b3IoX3RoaXMucnVudGltZVVSTCwgX3RoaXMubWVzc2FnZUJ1cyk7XG5cbiAgfVxuXG4gIC8qKlxuICAqIEFjY29tb2RhdGUgaW50ZXJvcGVyYWJpbGl0eSBpbiBIMkggYW5kIHByb3RvIG9uIHRoZSBmbHkgZm9yIG5ld2x5IGRpc2NvdmVyZWQgZGV2aWNlcyBpbiBNMk1cbiAgKiBAcGFyYW0gIHtDYXRhbG9ndWVEYXRhT2JqZWN0Lkh5cGVydHlEZXNjcmlwdG9yfSAgIGRlc2NyaXB0b3IgICAgZGVzY3JpcHRvclxuICAqL1xuICBkaXNjb3ZlckhpcGVydHkoZGVzY3JpcHRvcikge1xuICAgIC8vIEJvZHkuLi5cbiAgfVxuXG4gIC8qKlxuICAqIFJlZ2lzdGVyIEh5cGVydHkgZGVwbG95ZWQgYnkgdGhlIEFwcCB0aGF0IGlzIHBhc3NlZCBhcyBpbnB1dCBwYXJhbWV0ZXIuIFRvIGJlIHVzZWQgd2hlbiBBcHAgYW5kIEh5cGVydGllcyBhcmUgZnJvbSB0aGUgc2FtZSBkb21haW4gb3RoZXJ3aXNlIHRoZSBSdW50aW1lVUEgd2lsbCByYWlzZSBhbiBleGNlcHRpb24gYW5kIHRoZSBBcHAgaGFzIHRvIHVzZSB0aGUgbG9hZEh5cGVydHkoLi4pIGZ1bmN0aW9uLlxuICAqIEBwYXJhbSAge09iamVjdH0gT2JqZWN0ICAgICAgICAgICAgICAgICAgIGh5cGVydHlJbnN0YW5jZVxuICAqIEBwYXJhbSAge1VSTC5IeXBlcnR5Q2F0YWxvZ3VlVVJMfSAgICAgICAgIGRlc2NyaXB0b3IgICAgICBkZXNjcmlwdG9yXG4gICovXG4gIHJlZ2lzdGVySHlwZXJ0eShoeXBlcnR5SW5zdGFuY2UsIGRlc2NyaXB0b3IpIHtcbiAgICAvLyBCb2R5Li4uXG4gIH1cblxuICAvKipcbiAgKiBEZXBsb3kgSHlwZXJ0eSBmcm9tIENhdGFsb2d1ZSBVUkxcbiAgKiBAcGFyYW0gIHtVUkwuSHlwZXJ0eUNhdGFsb2d1ZVVSTH0gICAgaHlwZXJ0eSBoeXBlcnR5RGVzY3JpcHRvciB1cmw7XG4gICovXG4gIGxvYWRIeXBlcnR5KGh5cGVydHlEZXNjcmlwdG9yVVJMKSB7XG5cbiAgICBpZiAoIWh5cGVydHlEZXNjcmlwdG9yVVJMKSB0aHJvdyBuZXcgRXJyb3IoJ0h5cGVydHkgZGVzY3JpcHRvciB1cmwgcGFyYW1ldGVyIGlzIG5lZWRlZCcpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgdGhpcy5sb2FkZXIubG9hZEh5cGVydHkoaHlwZXJ0eURlc2NyaXB0b3JVUkwpXG4gICAgICAudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKHJlYXNvbikgPT4ge1xuICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgIH0pO1xuXG4gICAgfSk7XG5cbiAgfVxuXG4gIC8qKlxuICAqIERlcGxveSBTdHViIGZyb20gQ2F0YWxvZ3VlIFVSTCBvciBkb21haW4gdXJsXG4gICogQHBhcmFtICB7VVJMLlVSTH0gICAgIGRvbWFpbiAgICAgICAgICBkb21haW5cbiAgKi9cbiAgbG9hZFN0dWIocHJvdG9zdHViVVJMKSB7XG5cbiAgICBpZiAoIXByb3Rvc3R1YlVSTCkgdGhyb3cgbmV3IEVycm9yKCdQcm90b1N0dWIgZGVzY3JpcHRvciB1cmwgcGFyYW1ldGVyIGlzIG5lZWRlZCcpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgdGhpcy5sb2FkZXIubG9hZFN0dWIocHJvdG9zdHViVVJMKVxuICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChyZWFzb24pID0+IHtcbiAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICB9KTtcblxuICAgIH0pO1xuXG4gIH1cblxuICAvKipcbiAgKiBEZXBsb3kgaWRwUHJveHkgZnJvbSBDYXRhbG9ndWUgVVJMIG9yIGRvbWFpbiB1cmxcbiAgKiBAcGFyYW0gIHtVUkwuVVJMfSAgICAgZG9tYWluICAgICAgICAgIGRvbWFpblxuICAqL1xuICBsb2FkSWRwUHJveHkoaWRwUHJveHlVUkwpIHtcblxuICAgIGlmICghaWRwUHJveHlVUkwpIHRocm93IG5ldyBFcnJvcignVGhlIElEUCBQcm94eSBVUkwgaXMgYSBuZWVkZWQgcGFyYW1ldGVyLCBjb3VsZCBiZSBhIERPTUFJTiBvciBhIFVSTCcpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMubG9hZGVyLmxvYWRJZHBQcm94eShpZHBQcm94eVVSTClcbiAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgocmVhc29uKSA9PiB7XG4gICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGNsb3NlIGFsbCB0aGUgcnVudGltZTsgVW5yZWdpc3RlciBhbGwgaHlwZXJ0aWVzO1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPEJvb2xlYW4+fSByZXN1bHQgb2YgdGhlIGNsb3NlIG1ldGhvZCwgd2l0aCB0cnVlIG9yIGZhbHNlIHRvIHRoZSBvcGVyYXRpb24gc3VjY2VzcztcbiAgICovXG4gIGNsb3NlKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBjb25zb2xlLmluZm8oJ1VucmVnaXN0ZXIgYWxsIGh5cGVydGllcycpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgX3RoaXMucmVnaXN0cnkudW5yZWdpc3RlckFsbEh5cGVydGllcygpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgIGNvbnNvbGUuaW5mbygnQWxsIHRoZSBoeXBlcnRpZXMgYXJlIHVucmVnaXN0ZWQgd2l0aCBTdWNjZXNzOicsIHJlc3VsdCk7XG4gICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICB9KS5jYXRjaChmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHVucmVnaXN0ZXIgdGhlIGh5cGVydGllcycsIHJlYXNvbik7XG4gICAgICAgIHJlamVjdChmYWxzZSk7XG4gICAgICB9KTtcblxuICAgIH0pO1xuXG4gIH1cblxuICAvKipcbiAgKiBVc2VkIHRvIGNoZWNrIGZvciB1cGRhdGVzIGFib3V0IGNvbXBvbmVudHMgaGFuZGxlZCBpbiB0aGUgQ2F0YWxvZ3VlIGluY2x1ZGluZyBwcm90b2NvbCBzdHVicyBhbmQgSHlwZXJ0aWVzLiBjaGVjayByZWxhdGlvbnNoaXAgd2l0aCBsaWZlY3ljbGUgbWFuYWdlbWVudCBwcm92aWRlZCBieSBTZXJ2aWNlIFdvcmtlcnNcbiAgKiBAcGFyYW0gIHtDYXRhbG9ndWVVUkx9ICAgICAgIHVybCB1cmxcbiAgKi9cbiAgY2hlY2tGb3JVcGRhdGUodXJsKSB7XG4gICAgLy8gQm9keS4uLlxuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUnVudGltZVVBO1xuIiwiLyoqXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXG4qXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbioqL1xuY2xhc3MgT2JqZWN0QWxsb2NhdGlvbiB7XG4gIC8qIHByaXZhdGVcbiAgX3VybDogVVJMXG4gIF9idXM6IE1pbmlCdXNcbiAgKi9cblxuICAvKipcbiAgICogQ3JlYXRlIGFuIE9iamVjdCBBbGxvY2F0aW9uXG4gICAqIEBwYXJhbSAge1VSTC5VUkx9ICAgICAgdXJsIC0gdXJsIGZyb20gd2hvIGlzIHNlbmRpbmcgdGhlIG1lc3NhZ2VcbiAgICogQHBhcmFtICB7TWluaUJ1c30gICAgICBidXMgLSBNaW5pQnVzIHVzZWQgZm9yIGFkZHJlc3MgYWxsb2NhdGlvblxuICAgKi9cbiAgY29uc3RydWN0b3IodXJsLCBidXMpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuX3VybCA9IHVybDtcbiAgICBfdGhpcy5fYnVzID0gYnVzO1xuICB9XG5cbiAgLyoqXG4gICAqIGdldCB0aGUgVVJMIHZhbHVlXG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHVybCB2YWx1ZTtcbiAgICovXG4gIGdldCB1cmwoKSB7IHJldHVybiB0aGlzLl91cmw7IH1cblxuICAvKipcbiAgICogQXNrIGZvciBjcmVhdGlvbiBvZiBhIG51bWJlciBvZiBPYmplY3QgYWRkcmVzc2VzLCB0byB0aGUgZG9tYWluIG1lc3NhZ2Ugbm9kZS5cbiAgICogQHBhcmFtICB7RG9tYWlufSBkb21haW4gLSBEb21haW4gb2YgdGhlIG1lc3NhZ2Ugbm9kZS5cbiAgICogQHBhcmFtICB7bnVtYmVyfSBudW1iZXIgLSBOdW1iZXIgb2YgYWRkcmVzc2VzIHRvIHJlcXVlc3RcbiAgICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0VVJMPn0gIEEgbGlzdCBvZiBPYmplY3RVUkwnc1xuICAgKi9cbiAgY3JlYXRlKGRvbWFpbiwgc2NoZW1lLCBudW1iZXIpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy9GTE9XLU9VVDogbWVzc2FnZSBzZW50IHRvIG1zZy1ub2RlIE9iamVjdEFsbG9jYXRpb25NYW5hZ2VyIGNvbXBvbmVudFxuICAgIGxldCBtc2cgPSB7XG4gICAgICB0eXBlOiAnY3JlYXRlJywgZnJvbTogX3RoaXMuX3VybCwgdG86ICdkb21haW46Ly9tc2ctbm9kZS4nICsgZG9tYWluICsgJy9vYmplY3QtYWRkcmVzcy1hbGxvY2F0aW9uJyxcbiAgICAgIGJvZHk6IHsgc2NoZW1lOiBzY2hlbWUsIHZhbHVlOiB7IG51bWJlcjogbnVtYmVyIH0gfVxuICAgIH07XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShtc2csIChyZXBseSkgPT4ge1xuICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHtcbiAgICAgICAgICByZXNvbHZlKHJlcGx5LmJvZHkudmFsdWUuYWxsb2NhdGVkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QocmVwbHkuYm9keS5kZXNjKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgT2JqZWN0QWxsb2NhdGlvbjtcbiIsImltcG9ydCB7IGRpdmlkZVVSTCB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuXG5jbGFzcyBPYnNlcnZlck9iamVjdCB7XG5cbiAgY29uc3RydWN0b3IocGFyZW50LCB1cmwsIGNoaWxkcmVucykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICAgIF90aGlzLl91cmwgPSB1cmw7XG4gICAgX3RoaXMuX2NoaWxkcmVucyA9IGNoaWxkcmVucztcblxuICAgIF90aGlzLl9idXMgPSBwYXJlbnQuX2J1cztcbiAgICBfdGhpcy5fc3Vic2NyaXB0aW9ucyA9IHt9O1xuICB9XG5cbiAgYWRkU3Vic2NyaXB0aW9uKGh5cGVydHkpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuX3N1YnNjcmlwdGlvbnNbaHlwZXJ0eV0gPSBuZXcgU3Vic2NyaXB0aW9uKF90aGlzLl9idXMsIGh5cGVydHksIF90aGlzLl91cmwsIF90aGlzLl9jaGlsZHJlbnMsIGZhbHNlKTtcbiAgfVxuXG4gIHJlbW92ZVN1YnNjcmlwdGlvbihoeXBlcnR5KSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxldCBkb21haW4gPSBkaXZpZGVVUkwoaHlwZXJ0eSkuZG9tYWluO1xuICAgIGxldCBvYmpVUkxTdWJzY3JpcHRpb24gPSBfdGhpcy5fdXJsICsgJy9zdWJzY3JpcHRpb24nO1xuXG4gICAgbGV0IHN1YnNjcmlwdGlvbiA9IF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHldO1xuICAgIGlmIChzdWJzY3JpcHRpb24pIHtcbiAgICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCB0byByZW1vdGUgUmVwb3J0ZXJPYmplY3QgLT4gX29uUmVtb3RlVW5TdWJzY3JpYmVcbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiAndW5zdWJzY3JpYmUnLCBmcm9tOiBfdGhpcy5fcGFyZW50Ll91cmwsIHRvOiBvYmpVUkxTdWJzY3JpcHRpb24sXG4gICAgICAgIGJvZHk6IHsgcmVzb3VyY2U6IF90aGlzLl91cmwgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vVE9ETzogc2hvdWxkIEkgd2FpdCBmb3IgcmVzcG9uc2UgYmVmb3JlIHVuc3Vic2NyaWJlIG9uIG1zZy1ub2RlXG4gICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gbXNnLW5vZGUgU3Vic2NyaXB0aW9uTWFuYWdlciBjb21wb25lbnRcbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiAndW5zdWJzY3JpYmUnLCBmcm9tOiBfdGhpcy5fcGFyZW50Ll91cmwsIHRvOiAnZG9tYWluOi8vbXNnLW5vZGUuJyArIGRvbWFpbiArICcvc20nLFxuICAgICAgICBib2R5OiB7IHJlc291cmNlOiBfdGhpcy5fdXJsLCBjaGlsZHJlblJlc291cmNlczogX3RoaXMuX2NoaWxkcmVucyB9XG4gICAgICB9KTtcblxuICAgICAgc3Vic2NyaXB0aW9uLl9yZWxlYXNlTGlzdGVuZXJzKCk7XG4gICAgICBkZWxldGUgX3RoaXMuX3N1YnNjcmlwdGlvbnNbaHlwZXJ0eV07XG4gICAgfVxuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgT2JzZXJ2ZXJPYmplY3Q7XG4iLCJpbXBvcnQgeyBkaXZpZGVVUkwgfSBmcm9tICcuLi91dGlscy91dGlscyc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4vU3Vic2NyaXB0aW9uJztcblxuY2xhc3MgUmVwb3J0ZXJPYmplY3Qge1xuXG4gIGNvbnN0cnVjdG9yKHBhcmVudCwgb3duZXIsIHVybCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICAgIF90aGlzLl9vd25lciA9IG93bmVyO1xuICAgIF90aGlzLl91cmwgPSB1cmw7XG5cbiAgICBfdGhpcy5fYnVzID0gcGFyZW50Ll9idXM7XG5cbiAgICBfdGhpcy5fZG9tYWluID0gZGl2aWRlVVJMKG93bmVyKS5kb21haW47XG4gICAgX3RoaXMuX29ialN1YnNjcmlwdG9yVVJMID0gX3RoaXMuX3VybCArICcvc3Vic2NyaXB0aW9uJztcblxuICAgIF90aGlzLl9zdWJzY3JpcHRpb25zID0ge307XG4gICAgX3RoaXMuX2NoaWxkcmVucyA9IFtdO1xuICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycyA9IFtdO1xuXG4gICAgX3RoaXMuX2ZvcndhcmRzID0ge307XG5cbiAgICBfdGhpcy5fYWxsb2NhdGVMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIF9hbGxvY2F0ZUxpc3RlbmVycygpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy9hZGQgc3Vic2NyaXB0aW9uIGxpc3RlbmVyLi4uXG4gICAgX3RoaXMuX3N1YnNjcmlwdGlvbkxpc3RlbmVyID0gX3RoaXMuX2J1cy5hZGRMaXN0ZW5lcihfdGhpcy5fb2JqU3Vic2NyaXB0b3JVUkwsIChtc2cpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKF90aGlzLl9vYmpTdWJzY3JpcHRvclVSTCArICctUkNWOiAnLCBtc2cpO1xuICAgICAgc3dpdGNoIChtc2cudHlwZSkge1xuICAgICAgICBjYXNlICdzdWJzY3JpYmUnOiBfdGhpcy5fb25SZW1vdGVTdWJzY3JpYmUobXNnKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3Vuc3Vic2NyaWJlJzogX3RoaXMuX29uUmVtb3RlVW5TdWJzY3JpYmUobXNnKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3Jlc3BvbnNlJzogX3RoaXMuX29uUmVtb3RlUmVzcG9uc2UobXNnKTsgYnJlYWs7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBsZXQgY2hhbmdlVVJMID0gX3RoaXMuX3VybCArICcvY2hhbmdlcyc7XG4gICAgX3RoaXMuX2NoYW5nZUxpc3RlbmVyID0gX3RoaXMuX2J1cy5hZGRMaXN0ZW5lcihjaGFuZ2VVUkwsIChtc2cpID0+IHtcbiAgICAgIC8vVE9ETzogd2hhdCB0b2RvIGhlcmU/IFNhdmUgY2hhbmdlcz9cbiAgICAgIGNvbnNvbGUubG9nKCdTeW5jaGVyTWFuYWdlci0nICsgY2hhbmdlVVJMICsgJy1SQ1Y6ICcsIG1zZyk7XG4gICAgfSk7XG4gIH1cblxuICBfcmVsZWFzZUxpc3RlbmVycygpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuX3N1YnNjcmlwdGlvbkxpc3RlbmVyLnJlbW92ZSgpO1xuXG4gICAgX3RoaXMuX2NoYW5nZUxpc3RlbmVyLnJlbW92ZSgpO1xuXG4gICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzLmZvckVhY2goKGNsKSA9PiB7XG4gICAgICBjbC5yZW1vdmUoKTtcbiAgICB9KTtcblxuICAgIE9iamVjdC5rZXlzKF90aGlzLl9mb3J3YXJkcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBfdGhpcy5mb3J3YXJkVW5TdWJzY3JpYmUoa2V5KTtcbiAgICB9KTtcblxuICAgIC8vcmVtb3ZlIGFsbCBzdWJzY3JpcHRpb25zXG4gICAgT2JqZWN0LmtleXMoX3RoaXMuX3N1YnNjcmlwdGlvbnMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgX3RoaXMuX3N1YnNjcmlwdGlvbnNba2V5XS5fcmVsZWFzZUxpc3RlbmVycygpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgbGlzdGVuZXIgaW4gdGhlIG1zZy1ub2RlIGFuZCBpbiB0aGUgbG9jYWwgTWVzc2FnZUJ1cywgc28gdGhhdCBtZXNzYWdlcyBvbiB0aGlzIGFkZHJlc3MgYXJlIGZvcndhcmRlZCB0byB0aGUgcmVwb3J0ZXIgb2JqZWN0XG4gICAqIEBwYXJhbSAge3N0cmluZ30gYWRkcmVzcyAtIFVSTCB0byByZWdpc3RlciB0aGUgbGlzdGVuZXJzXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IFJldHVybiBQcm9taXNlIE9LIG9yIGVycm9yXG4gICAqL1xuICBmb3J3YXJkU3Vic2NyaWJlKGFkZHJlc3Nlcykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gdGhlIG1zZy1ub2RlIFN1YnNjcmlwdGlvbk1hbmFnZXIgY29tcG9uZW50XG4gICAgbGV0IG5vZGVTdWJzY3JpYmVNc2cgPSB7XG4gICAgICB0eXBlOiAnc3Vic2NyaWJlJywgZnJvbTogX3RoaXMuX3BhcmVudC5fdXJsLCB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyBfdGhpcy5fZG9tYWluICsgJy9zbScsXG4gICAgICBib2R5OiB7IHN1YnNjcmliZTogYWRkcmVzc2VzLCBzb3VyY2U6IF90aGlzLl9vd25lciB9XG4gICAgfTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG5vZGVTdWJzY3JpYmVNc2csIChyZXBseSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnZm9yd2FyZC1zdWJzY3JpYmUtcmVzcG9uc2UocmVwb3J0ZXIpOiAnLCByZXBseSk7XG4gICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkge1xuICAgICAgICAgIGxldCBuZXdGb3J3YXJkID0gX3RoaXMuX2J1cy5hZGRGb3J3YXJkKF90aGlzLl91cmwsIF90aGlzLl9vd25lcik7XG4gICAgICAgICAgX3RoaXMuX2ZvcndhcmRzW2FkZHJlc3Nlc1swXV0gPSBuZXdGb3J3YXJkO1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoJ0Vycm9yIG9uIG1zZy1ub2RlIHN1YnNjcmlwdGlvbjogJyArIHJlcGx5LmJvZHkuZGVzYyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFVuUmVnaXN0ZXIgYSBsaXN0ZW5lciBpbiB0aGUgbXNnLW5vZGUgYW5kIGluIHRoZSBsb2NhbCBNZXNzYWdlQnVzLCBzbyB0aGF0IG1lc3NhZ2VzIG9uIHRoaXMgYWRkcmVzcyBhcmUgcmVtb3ZlZCBmcm9tIGZvcndhcmRcbiAgICogQHBhcmFtICB7c3RyaW5nfSBhZGRyZXNzIC0gVVJMIHRvIHVuLXJlZ2lzdGVyIHRoZSBsaXN0ZW5lcnNcbiAgICovXG4gIGZvcndhcmRVblN1YnNjcmliZShhZGRyZXNzKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLl9mb3J3YXJkc1thZGRyZXNzXS5yZW1vdmUoKTtcbiAgICBkZWxldGUgX3RoaXMuX2ZvcndhcmRzW2FkZHJlc3NdO1xuXG4gICAgLy9GTE9XLU9VVDogbWVzc2FnZSBzZW50IHRvIHRoZSBtc2ctbm9kZSBTdWJzY3JpcHRpb25NYW5hZ2VyIGNvbXBvbmVudFxuICAgIGxldCBub2RlVW5TdWJzY3JpYmVNc2cgPSB7XG4gICAgICB0eXBlOiAndW5zdWJzY3JpYmUnLCBmcm9tOiBfdGhpcy5fcGFyZW50Ll91cmwsIHRvOiAnZG9tYWluOi8vbXNnLW5vZGUuJyArIF90aGlzLl9kb21haW4gKyAnL3NtJyxcbiAgICAgIGJvZHk6IHsgc3Vic2NyaWJlOiBbYWRkcmVzc10sIHNvdXJjZTogX3RoaXMuX293bmVyIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShub2RlVW5TdWJzY3JpYmVNc2cpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGxpc3RlbmVycyBmb3IgYSBsaXN0IG9mIGNoaWxkcmVucy4gUHVibGljIGNoYW5uZWxzIHVzZWQgdG8gdHJhbnNtaXQgbWVzc2FnZXMuXG4gICAqIEBwYXJhbSAge3N0cmluZ1tdfSBjaGlsZHJlbnMgLSBjaGFubmVscyB0byByZWdpc3RlclxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXR1cm4gUHJvbWlzZSBPSyBvciBlcnJvclxuICAgKi9cbiAgYWRkQ2hpbGRyZW5zKGNoaWxkcmVucykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaWYgKGNoaWxkcmVucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCBjaGlsZEJhc2VVUkwgPSBfdGhpcy5fdXJsICsgJy9jaGlsZHJlbi8nO1xuICAgICAgX3RoaXMuX2NoaWxkcmVucy5wdXNoKGNoaWxkcmVucyk7XG5cbiAgICAgIC8qXG4gICAgICBfdGhpcy5fY2hpbGRyZW5zLmZvckVhY2goKGNoaWxkKSA9PiB7XG4gICAgICAgIGxldCBjaGlsZElkID0gY2hpbGRCYXNlVVJMICsgY2hpbGQ7XG5cbiAgICAgICAgbGV0IHNlbGZGb3J3YXJkID0gX3RoaXMuX2J1cy5hZGRGb3J3YXJkKGNoaWxkSWQsIG93bmVyKTtcbiAgICAgICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzLnB1c2goc2VsZkZvcndhcmQpO1xuICAgICAgfSk7Ki9cblxuICAgICAgbGV0IHN1YnNjcmlwdGlvbnMgPSBbXTtcbiAgICAgIGNoaWxkcmVucy5mb3JFYWNoKChjaGlsZCkgPT4gc3Vic2NyaXB0aW9ucy5wdXNoKGNoaWxkQmFzZVVSTCArIGNoaWxkKSk7XG5cbiAgICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCB0byB0aGUgbXNnLW5vZGUgU3Vic2NyaXB0aW9uTWFuYWdlciBjb21wb25lbnRcbiAgICAgIGxldCBub2RlU3Vic2NyaWJlTXNnID0ge1xuICAgICAgICB0eXBlOiAnc3Vic2NyaWJlJywgZnJvbTogX3RoaXMuX3BhcmVudC5fdXJsLCB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyBfdGhpcy5fZG9tYWluICsgJy9zbScsXG4gICAgICAgIGJvZHk6IHsgc3Vic2NyaWJlOiBzdWJzY3JpcHRpb25zLCBzb3VyY2U6IF90aGlzLl9vd25lciB9XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG5vZGVTdWJzY3JpYmVNc2csIChyZXBseSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnbm9kZS1zdWJzY3JpYmUtcmVzcG9uc2UocmVwb3J0ZXIpOiAnLCByZXBseSk7XG4gICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkge1xuXG4gICAgICAgICAgLy9hZGQgY2hpbGRyZW4gbGlzdGVuZXJzIG9uIGxvY2FsIC4uLlxuICAgICAgICAgIHN1YnNjcmlwdGlvbnMuZm9yRWFjaCgoY2hpbGRVUkwpID0+IHtcbiAgICAgICAgICAgIGxldCBjaGlsZExpc3RlbmVyID0gX3RoaXMuX2J1cy5hZGRMaXN0ZW5lcihjaGlsZFVSTCwgKG1zZykgPT4ge1xuICAgICAgICAgICAgICAvL1RPRE86IHdoYXQgdG9kbyBoZXJlPyBTYXZlIGNoaWxkcmVucz9cbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1N5bmNoZXJNYW5hZ2VyLScgKyBjaGlsZFVSTCArICctUkNWOiAnLCBtc2cpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMucHVzaChjaGlsZExpc3RlbmVyKTtcblxuICAgICAgICAgICAgbGV0IHNlbGZGb3J3YXJkID0gX3RoaXMuX2J1cy5hZGRGb3J3YXJkKGNoaWxkVVJMLCBfdGhpcy5fb3duZXIpO1xuICAgICAgICAgICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzLnB1c2goc2VsZkZvcndhcmQpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlamVjdCgnRXJyb3Igb24gbXNnLW5vZGUgc3Vic2NyaXB0aW9uOiAnICsgcmVwbHkuYm9keS5kZXNjKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBkZWxldGUoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQgZG9tYWluID0gZGl2aWRlVVJMKF90aGlzLl9vd25lcikuZG9tYWluO1xuXG4gICAgLy9GTE9XLU9VVDogbWVzc2FnZSBzZW50IGRpcmVjdGx5IHRvIGFsbCBzdWJzY3JpYmVycyBvZiB0aGUgcmVwb3J0ZXJcbiAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHtcbiAgICAgIHR5cGU6ICdkZWxldGUnLCBmcm9tOiBfdGhpcy5fb2JqU3Vic2NyaXB0b3JVUkwsIHRvOiBfdGhpcy5fdXJsICsgJy9jaGFuZ2VzJ1xuICAgIH0pO1xuXG4gICAgLy9GTE9XLU9VVDogbWVzc2FnZSBzZW50IHRvIHRoZSBtc2ctbm9kZSBPYmplY3RBbGxvY2F0aW9uTWFuYWdlciBjb21wb25lbnRcbiAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHtcbiAgICAgIHR5cGU6ICdkZWxldGUnLCBmcm9tOiBfdGhpcy5fcGFyZW50Ll91cmwsIHRvOiAnZG9tYWluOi8vbXNnLW5vZGUuJyArIGRvbWFpbiArICcvb2JqZWN0LWFkZHJlc3MtYWxsb2NhdGlvbicsXG4gICAgICBib2R5OiB7IHJlc291cmNlOiBfdGhpcy5fdXJsLCBjaGlsZHJlblJlc291cmNlczogX3RoaXMuX2NoaWxkcmVucyB9XG4gICAgfSk7XG5cbiAgICBfdGhpcy5fcmVsZWFzZUxpc3RlbmVycygpO1xuICAgIGRlbGV0ZSBfdGhpcy5fcGFyZW50Ll9yZXBvcnRlcnNbX3RoaXMuX3VybF07XG4gIH1cblxuICBfb25SZW1vdGVSZXNwb25zZShtc2cpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7XG4gICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBfdGhpcy5fdXJsLFxuICAgICAgYm9keTogeyBjb2RlOiBtc2cuYm9keS5jb2RlLCBpZGVudGl0eTogbXNnLmJvZHkuaWRlbnRpdHksIHNvdXJjZTogbXNnLmZyb20gfVxuICAgIH0pO1xuICB9XG5cbiAgLy9GTE9XLUlOOiBtZXNzYWdlIHJlY2VpdmVkIGZyb20gU3luY2hlciAtPiBzdWJzY3JpYmVcbiAgX29uUmVtb3RlU3Vic2NyaWJlKG1zZykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGh5cGVydHlVUkwgPSBtc2cuYm9keS5zdWJzY3JpYmVyO1xuXG4gICAgLy92YWxpZGF0ZSBpZiBzdWJzY3JpcHRpb24gYWxyZWFkeSBleGlzdHM/XG4gICAgaWYgKF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHlVUkxdKSB7XG4gICAgICBsZXQgZXJyb3JNc2cgPSB7XG4gICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IGh5cGVydHlVUkwsXG4gICAgICAgIGJvZHk6IHsgY29kZTogNTAwLCBkZXNjOiAnU3Vic2NyaXB0aW9uIGZvciAoJyArIF90aGlzLl91cmwgKyAnIDogJyArICBoeXBlcnR5VVJMICsgJykgYWxyZWFkeSBleGlzdHMhJyB9XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKGVycm9yTXNnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvL2FzayB0byBzdWJzY3JpYmUgdG8gU3luY2hlcj8gKGRlcGVuZHMgb24gdGhlIG9wZXJhdGlvbiBtb2RlKVxuICAgIC8vVE9ETzogZ2V0IG1vZGUgZnJvbSBvYmplY3QhXG4gICAgbGV0IG1vZGUgPSAnc3ViL3B1Yic7XG5cbiAgICBpZiAobW9kZSA9PT0gJ3N1Yi9wdWInKSB7XG4gICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gbG9jYWwgaHlwZXJ0eSBhZGRyZXNzIFN5bmNoZXIgLT4gX29uRm9yd2FyZFxuICAgICAgbGV0IGZvcndhcmRNc2cgPSB7XG4gICAgICAgIHR5cGU6ICdmb3J3YXJkJywgZnJvbTogX3RoaXMuX3VybCwgdG86IF90aGlzLl9vd25lcixcbiAgICAgICAgYm9keTogeyB0eXBlOiBtc2cudHlwZSwgZnJvbTogaHlwZXJ0eVVSTCwgdG86IF90aGlzLl91cmwsIGlkZW50aXR5OiBtc2cuYm9keS5pZGVudGl0eSB9XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKGZvcndhcmRNc2csIChyZXBseSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnZm9yd2FyZC1yZXBseTogJywgcmVwbHkpO1xuICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHtcbiAgICAgICAgICBfdGhpcy5fc3Vic2NyaXB0aW9uc1toeXBlcnR5VVJMXSA9IG5ldyBTdWJzY3JpcHRpb24oX3RoaXMuX2J1cywgX3RoaXMuX293bmVyLCBfdGhpcy5fdXJsLCBfdGhpcy5fY2hpbGRyZW5zLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vRkxPVy1PVVQ6IHN1YnNjcmlwdGlvbiByZXNwb25zZSBzZW50IChmb3J3YXJkIGZyb20gaW50ZXJuYWwgSHlwZXJ0eSlcbiAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogbXNnLmZyb20sXG4gICAgICAgICAgYm9keTogcmVwbHkuYm9keVxuICAgICAgICB9KTtcblxuICAgICAgfSk7XG4gICAgfVxuXG4gIH1cblxuICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSByZW1vdGUgT2JzZXJ2ZXJPYmplY3QgLT4gcmVtb3ZlU3Vic2NyaXB0aW9uXG4gIF9vblJlbW90ZVVuU3Vic2NyaWJlKG1zZykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGh5cGVydHlVUkwgPSBtc2cuYm9keS5zdWJzY3JpYmVyO1xuXG4gICAgbGV0IHN1YnNjcmlwdGlvbiA9IF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHlVUkxdO1xuICAgIGlmIChzdWJzY3JpcHRpb24pIHtcbiAgICAgIHN1YnNjcmlwdGlvbi5fcmVsZWFzZUxpc3RlbmVycygpO1xuICAgICAgZGVsZXRlIF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHlVUkxdO1xuXG4gICAgICAvL1RPRE86IHNlbmQgdW4tc3Vic2NyaWJlIG1lc3NhZ2UgdG8gU3luY2hlcj8gKGRlcGVuZHMgb24gdGhlIG9wZXJhdGlvbiBtb2RlKVxuICAgIH1cblxuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVwb3J0ZXJPYmplY3Q7XG4iLCJjbGFzcyBTdWJzY3JpcHRpb24ge1xuXG4gIGNvbnN0cnVjdG9yKGJ1cywgb3duZXIsIHVybCwgY2hpbGRyZW5zLCBpc1JlcG9ydGVyKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQgY2hpbGRCYXNlVVJMID0gdXJsICsgJy9jaGlsZHJlbi8nO1xuICAgIGxldCBjaGFuZ2VVUkwgPSB1cmwgKyAnL2NoYW5nZXMnO1xuXG4gICAgLy9wcm9jZXNzIGRlbGV0ZSBtZXNzYWdlXG4gICAgX3RoaXMuX2RlbGV0ZUxpc3RlbmVyID0gYnVzLmFkZExpc3RlbmVyKGNoYW5nZVVSTCwgKG1zZykgPT4ge1xuICAgICAgaWYgKG1zZy50eXBlID09PSAnZGVsZXRlJykge1xuICAgICAgICBjb25zb2xlLmxvZygnU3Vic2NyaXB0aW9uLURFTEVURTogJywgbXNnKTtcblxuICAgICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gYWxsIHN1YnNjcmliZXJzXG4gICAgICAgIGxldCBkZWxldGVNZXNzYWdlVG9IeXBlcnR5ID0ge1xuICAgICAgICAgIHR5cGU6ICdkZWxldGUnLCBmcm9tOiBtc2cuZnJvbSwgdG86IG93bmVyLFxuICAgICAgICAgIGJvZHk6IHsgaWRlbnRpdHk6IG1zZy5ib2R5LmlkZW50aXR5LCByZXNvdXJjZTogdXJsIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvL3NlbmQgZGVsZXRlIHRvIGh5cGVydHlcbiAgICAgICAgYnVzLnBvc3RNZXNzYWdlKGRlbGV0ZU1lc3NhZ2VUb0h5cGVydHksIChyZXBseSkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdTdWJzY3JpcHRpb24tREVMRVRFLVJFUExZOiAnLCByZXBseSk7XG4gICAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7XG4gICAgICAgICAgICBfdGhpcy5fcmVsZWFzZUxpc3RlbmVycygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvL2FkZCBjaGFuZ2UgcHVibGlzaCBhZGRyZXNzIG9yIGZvcndhcmRcbiAgICBpZiAoaXNSZXBvcnRlcikge1xuICAgICAgX3RoaXMuX2NoYW5nZUxpc3RlbmVyID0gYnVzLmFkZFB1Ymxpc2goY2hhbmdlVVJMKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3RoaXMuX2NoYW5nZUxpc3RlbmVyID0gYnVzLmFkZEZvcndhcmQoY2hhbmdlVVJMLCBvd25lcik7XG4gICAgfVxuXG4gICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzID0gW107XG4gICAgY2hpbGRyZW5zLmZvckVhY2goKGNoaWxkKSA9PiB7XG4gICAgICBsZXQgY2hpbGRJZCA9IGNoaWxkQmFzZVVSTCArIGNoaWxkO1xuXG4gICAgICAvL2FkZCBjaGlsZHJlbiBwdWJsaXNoIGFkZHJlc3NcbiAgICAgIGxldCBjaGlsZHJlbkZvcndhcmQgPSBidXMuYWRkUHVibGlzaChjaGlsZElkKTtcbiAgICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycy5wdXNoKGNoaWxkcmVuRm9yd2FyZCk7XG5cbiAgICAgIC8vYWRkIHNlbGYgZm9yd2FyZCBpZiBhbiBvYnNlcnZlclxuICAgICAgaWYgKCFpc1JlcG9ydGVyKSB7XG4gICAgICAgIGxldCBzZWxmRm9yd2FyZCA9IGJ1cy5hZGRGb3J3YXJkKGNoaWxkSWQsIG93bmVyKTtcbiAgICAgICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzLnB1c2goc2VsZkZvcndhcmQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgX3JlbGVhc2VMaXN0ZW5lcnMoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLl9kZWxldGVMaXN0ZW5lci5yZW1vdmUoKTtcblxuICAgIF90aGlzLl9jaGFuZ2VMaXN0ZW5lci5yZW1vdmUoKTtcblxuICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycy5mb3JFYWNoKChmb3J3YXJkKSA9PiB7XG4gICAgICBmb3J3YXJkLnJlbW92ZSgpO1xuICAgIH0pO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3Vic2NyaXB0aW9uO1xuIiwiLyoqXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXG4qXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbioqL1xuaW1wb3J0IHsgZGl2aWRlVVJMIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IE9iamVjdEFsbG9jYXRpb24gZnJvbSAnLi9PYmplY3RBbGxvY2F0aW9uJztcbmltcG9ydCBSZXBvcnRlck9iamVjdCBmcm9tICcuL1JlcG9ydGVyT2JqZWN0JztcbmltcG9ydCBPYnNlcnZlck9iamVjdCBmcm9tICcuL09ic2VydmVyT2JqZWN0JztcbmltcG9ydCB0djQgZnJvbSAnLi4vdXRpbHMvdHY0JztcblxuaW1wb3J0IHtNZXNzYWdlRmFjdG9yeX0gZnJvbSAnc2VydmljZS1mcmFtZXdvcmsvZGlzdC9NZXNzYWdlRmFjdG9yeSc7XG5cbi8qKlxuICogQGF1dGhvciBtaWNhZWxwZWRyb3NhQGdtYWlsLmNvbVxuICogQ29yZSBTeW5jcm9uaXphdGlvbiBzeXN0ZW0uXG4gKi9cbmNsYXNzIFN5bmNoZXJNYW5hZ2VyIHtcbiAgLyogcHJpdmF0ZVxuICBfdXJsOiBVUkxcbiAgX2J1czogTWluaUJ1c1xuICBfcmVnaXN0cnk6IFJlZ2lzdHJ5XG4gIF9hbGxvY2F0b3I6IE9iamVjdEFsbG9jYXRpb25cblxuICBfcmVwb3J0ZXJzOiB7IE9iamVjdFVSTDogUmVwb3J0ZXJPYmplY3QgfVxuICBfb2JzZXJ2ZXJzOiB7IE9iamVjdFVSTDogT2JzZXJ2ZXJPYmplY3QgfVxuICAqL1xuXG4gIGNvbnN0cnVjdG9yKHJ1bnRpbWVVUkwsIGJ1cywgcmVnaXN0cnksIGNhdGFsb2csIGFsbG9jYXRvcikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5fYnVzID0gYnVzO1xuICAgIF90aGlzLl9yZWdpc3RyeSA9IHJlZ2lzdHJ5O1xuICAgIF90aGlzLl9jYXRhbG9nID0gY2F0YWxvZztcblxuICAgIC8vVE9ETzogdGhlc2Ugc2hvdWxkIGJlIHNhdmVkIGluIHBlcnNpc3RlbmNlIGVuZ2luZT9cbiAgICBfdGhpcy5fdXJsID0gcnVudGltZVVSTCArICcvc20nO1xuICAgIF90aGlzLl9vYmplY3RVUkwgPSBydW50aW1lVVJMICsgJy9vYmplY3QtYWxsb2NhdGlvbic7XG5cbiAgICBfdGhpcy5fcmVwb3J0ZXJzID0ge307XG4gICAgX3RoaXMuX29ic2VydmVycyA9IHt9O1xuXG4gICAgLy9UT0RPOiB0aGlzIHNob3VsZCBub3QgYmUgaGFyZGNvZGVkIVxuICAgIF90aGlzLl9kb21haW4gPSBkaXZpZGVVUkwocnVudGltZVVSTCkuZG9tYWluO1xuXG4gICAgX3RoaXMuX21mID0gbmV3IE1lc3NhZ2VGYWN0b3J5KGZhbHNlLCB7fSk7XG5cbiAgICBpZiAoYWxsb2NhdG9yKSB7XG4gICAgICBfdGhpcy5fYWxsb2NhdG9yID0gYWxsb2NhdG9yO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpcy5fYWxsb2NhdG9yID0gbmV3IE9iamVjdEFsbG9jYXRpb24oX3RoaXMuX29iamVjdFVSTCwgYnVzKTtcbiAgICB9XG5cbiAgICBidXMuYWRkTGlzdGVuZXIoX3RoaXMuX3VybCwgKG1zZykgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ1N5bmNoZXJNYW5hZ2VyLVJDVjogJywgbXNnKTtcbiAgICAgIHN3aXRjaCAobXNnLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnY3JlYXRlJzogX3RoaXMuX29uQ3JlYXRlKG1zZyk7IGJyZWFrO1xuICAgICAgICBjYXNlICdkZWxldGUnOiBfdGhpcy5fb25EZWxldGUobXNnKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3N1YnNjcmliZSc6IF90aGlzLl9vbkxvY2FsU3Vic2NyaWJlKG1zZyk7IGJyZWFrO1xuICAgICAgICBjYXNlICd1bnN1YnNjcmliZSc6IF90aGlzLl9vbkxvY2FsVW5TdWJzY3JpYmUobXNnKTsgYnJlYWs7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBnZXQgdXJsKCkgeyByZXR1cm4gdGhpcy5fdXJsOyB9XG5cbiAgLy9GTE9XLUlOOiBtZXNzYWdlIHJlY2VpdmVkIGZyb20gU3luY2hlciAtPiBjcmVhdGVcbiAgX29uQ3JlYXRlKG1zZykge1xuXG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQgb3duZXIgPSBtc2cuZnJvbTtcbiAgICBsZXQgZG9tYWluID0gZGl2aWRlVVJMKG1zZy5mcm9tKS5kb21haW47XG5cbiAgICBpZiAobXNnLmJvZHkucmVzb3VyY2UpIHtcbiAgICAgIF90aGlzLl9hdXRob3Jpc2UobXNnLCBtc2cuYm9keS5yZXNvdXJjZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy9nZXQgc2NoZW1hIGZyb20gY2F0YWxvZ3VlIGFuZCBwYXJzZSAtPiAoc2NoZW1lLCBjaGlsZHJlbilcbiAgICBfdGhpcy5fY2F0YWxvZy5nZXREYXRhU2NoZW1hRGVzY3JpcHRvcihtc2cuYm9keS5zY2hlbWEpLnRoZW4oKGRlc2NyaXB0b3IpID0+IHtcblxuICAgICAgbGV0IHByb3BlcnRpZXMgPSBkZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZS5wcm9wZXJ0aWVzO1xuICAgICAgbGV0IHNjaGVtZSA9IHByb3BlcnRpZXMuc2NoZW1lID8gcHJvcGVydGllcy5zY2hlbWUuY29uc3RhbnQgOiAncmVzb3VyY2UnO1xuICAgICAgbGV0IGNoaWxkcmVucyA9IHByb3BlcnRpZXMuY2hpbGRyZW4gPyBwcm9wZXJ0aWVzLmNoaWxkcmVuLmNvbnN0YW50IDogW107XG5cbiAgICAgIGNvbnNvbGUubG9nKCdTY2hlbWU6ICcsIHNjaGVtZSk7XG5cbiAgICAgIC8vIHNjaGVtYSB2YWxpZGF0aW9uXG4gICAgICBjb25zb2xlLmxvZygnUnVubmluZyBvYmplY3QgdmFsaWRhdGlvbi4uLicpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IG9iaiA9IG1zZy5ib2R5LnZhbHVlO1xuICAgICAgICBsZXQgc2NoZW1hID0gZGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlLnNvdXJjZUNvZGU7XG5cbiAgICAgICAgLy8gYWRkIHN1cHBvcnQgZm9yIHNjaGVtYSByZWZlcmVuY2luZyBpdHNlbGZcbiAgICAgICAgdHY0LmFkZFNjaGVtYShzY2hlbWEuaWQsIHNjaGVtYSk7XG5cbiAgICAgICAgLy8gdmFsaWRhdGVcbiAgICAgICAgbGV0IHJlc3VsdCA9IHR2NC52YWxpZGF0ZU11bHRpcGxlKG9iaiwgc2NoZW1hKTtcblxuICAgICAgICAvLyBkZWxldGUgZXJyb3Igc3RhY2tzIHRvIGltcHJvdmUgbG9nZ2luZ1xuICAgICAgICByZXN1bHQuZXJyb3JzLmZvckVhY2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgZGVsZXRlIGVycm9yLnN0YWNrO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBwcmludCBtb3JlIGRldGFpbHMgYWJvdXQgdmFsaWRhdGlvbiBpZiBpdCBmYWlscyBvciBzY2hlbWEgY29udGFpbnMgJHJlZnNcbiAgICAgICAgaWYgKCFyZXN1bHQudmFsaWQgfHwgKHJlc3VsdC5taXNzaW5nLmxlbmd0aCA+IDApKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdPYmplY3QgdmFsaWRhdGlvbiAnICsgKHJlc3VsdC52YWxpZCA/ICdzdWNjZWVkZWQsIGJ1dCBzY2hlbWEgY29udGFpbmVkIHJlZmVyZW5jZXM6JyA6ICdmYWlsZWQ6JyksIEpTT04uc3RyaW5naWZ5KHJlc3VsdCwgbnVsbCwgMikpO1xuICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ09iamVjdDonLCBKU09OLnN0cmluZ2lmeShvYmosIG51bGwsIDIpLCAnXFxyXFxuU2NoZW1hOicsIEpTT04uc3RyaW5naWZ5KHNjaGVtYSwgbnVsbCwgMikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdPYmplY3QgdmFsaWRhdGlvbiBzdWNjZWVkZWQnKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0Vycm9yIGR1cmluZyBvYmplY3QgdmFsaWRhdGlvbjonLCBlKTtcbiAgICAgIH1cblxuICAgICAgLy9yZXF1ZXN0IGFkZHJlc3MgYWxsb2NhdGlvbiBvZiBhIG5ldyBvYmplY3QgZnJvbSB0aGUgbXNnLW5vZGVcbiAgICAgIF90aGlzLl9hbGxvY2F0b3IuY3JlYXRlKGRvbWFpbiwgc2NoZW1lLCAxKS50aGVuKChhbGxvY2F0ZWQpID0+IHtcbiAgICAgICAgbGV0IG9ialVSTCA9IGFsbG9jYXRlZFswXTtcblxuICAgICAgICBjb25zb2xlLmxvZygnQUxMT0NBVE9SIENSRUFURTonLCBhbGxvY2F0ZWQpO1xuXG4gICAgICAgIGxldCBzdWJzY3JpcHRpb25VUkwgPSBvYmpVUkwgKyAnL3N1YnNjcmlwdGlvbic7XG5cbiAgICAgICAgY29uc29sZS5sb2coJ1N1YnNjcmlwdGlvbiBVUkwnLCBzdWJzY3JpcHRpb25VUkwpO1xuXG4gICAgICAgIC8vVG8gcmVnaXN0ZXIgdGhlIGRhdGFPYmplY3QgaW4gdGhlIHJ1bnRpbWVSZWdpc3RyeVxuICAgICAgICBjb25zb2xlLmluZm8oJ1JlZ2lzdGVyIE9iamVjdDogJywgbXNnLmJvZHkudmFsdWUubmFtZSwgbXNnLmJvZHkudmFsdWUuc2NoZW1hLCBvYmpVUkwsIG1zZy5ib2R5LnZhbHVlLnJlcG9ydGVyLCBtc2cuYm9keS52YWx1ZS5yZXNvdXJjZXMpO1xuICAgICAgICBfdGhpcy5fcmVnaXN0cnkucmVnaXN0ZXJEYXRhT2JqZWN0KG1zZy5ib2R5LnZhbHVlLm5hbWUsIG1zZy5ib2R5LnZhbHVlLnNjaGVtYSwgb2JqVVJMLCBtc2cuYm9keS52YWx1ZS5yZXBvcnRlciwgbXNnLmJvZHkudmFsdWUucmVzb3VyY2VzLCBtc2cuYm9keS5hdXRob3Jpc2UpLnRoZW4oZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdEYXRhT2JqZWN0IHN1Y2Nlc3NmdWxseSByZWdpc3RlcmVkJywgcmVzb2x2ZSk7XG5cbiAgICAgICAgICAvL2FsbCBPSyAtPiBjcmVhdGUgcmVwb3J0ZXIgYW5kIHJlZ2lzdGVyIGxpc3RlbmVyc1xuICAgICAgICAgIGxldCByZXBvcnRlciA9IG5ldyBSZXBvcnRlck9iamVjdChfdGhpcywgb3duZXIsIG9ialVSTCk7XG4gICAgICAgICAgcmVwb3J0ZXIuZm9yd2FyZFN1YnNjcmliZShbb2JqVVJMLHN1YnNjcmlwdGlvblVSTF0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgcmVwb3J0ZXIuYWRkQ2hpbGRyZW5zKGNoaWxkcmVucykudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgIF90aGlzLl9yZXBvcnRlcnNbb2JqVVJMXSA9IHJlcG9ydGVyO1xuXG4gICAgICAgICAgICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2UgcmVzcG9uc2UgdG8gU3luY2hlciAtPiBjcmVhdGVcbiAgICAgICAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogb3duZXIsXG4gICAgICAgICAgICAgICAgYm9keTogeyBjb2RlOiAyMDAsIHJlc291cmNlOiBvYmpVUkwsIGNoaWxkcmVuUmVzb3VyY2VzOiBjaGlsZHJlbnMgfVxuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAvL3NlbmQgY3JlYXRlIHRvIGFsbCBvYnNlcnZlcnMsIHJlc3BvbnNlcyB3aWxsIGJlIGRlbGl2ZXIgdG8gdGhlIEh5cGVydHkgb3duZXI/XG4gICAgICAgICAgICAgIC8vc2NoZWR1bGUgZm9yIG5leHQgY3ljbGUgbmVlZGVkLCBiZWNhdXNlIHRoZSBSZXBvcnRlciBzaG91bGQgYmUgYXZhaWxhYmxlLlxuICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAvL3dpbGwgaW52aXRlIG90aGVyIGh5cGVydGllc1xuICAgICAgICAgICAgICAgIF90aGlzLl9hdXRob3Jpc2UobXNnLCBvYmpVUkwpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICB9KTtcblxuICAgICAgfSk7XG4gICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xuICAgICAgLy9GTE9XLU9VVDogZXJyb3IgbWVzc2FnZSByZXNwb25zZSB0byBTeW5jaGVyIC0+IGNyZWF0ZVxuICAgICAgbGV0IHJlc3BvbnNlTXNnID0ge1xuICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBvd25lcixcbiAgICAgICAgYm9keTogeyBjb2RlOiA1MDAsIGRlc2M6IHJlYXNvbiB9XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHJlc3BvbnNlTXNnKTtcbiAgICB9KTtcbiAgfVxuXG4gIF9hdXRob3Jpc2UobXNnLCBvYmpVUkwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGxldCBvYmpTdWJzY3JpcHRvclVSTCA9IG9ialVSTCArICcvc3Vic2NyaXB0aW9uJztcblxuICAgIG1zZy5ib2R5LmF1dGhvcmlzZS5mb3JFYWNoKChoeXBlcnR5VVJMKSA9PiB7XG4gICAgICAvL0ZMT1ctT1VUOiBzZW5kIGludml0ZXMgdG8gbGlzdCBvZiByZW1vdGUgU3luY2hlciAtPiBfb25SZW1vdGVDcmVhdGUgLT4gb25Ob3RpZmljYXRpb25cbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiAnY3JlYXRlJywgZnJvbTogb2JqU3Vic2NyaXB0b3JVUkwsIHRvOiBoeXBlcnR5VVJMLFxuICAgICAgICBib2R5OiB7IGlkZW50aXR5OiBtc2cuYm9keS5pZGVudGl0eSwgc291cmNlOiBtc2cuZnJvbSwgdmFsdWU6IG1zZy5ib2R5LnZhbHVlLCBzY2hlbWE6IG1zZy5ib2R5LnNjaGVtYSB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIERhdGFPYmplY3RSZXBvcnRlciAtPiBkZWxldGVcbiAgX29uRGVsZXRlKG1zZykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgb2JqVVJMID0gbXNnLmJvZHkucmVzb3VyY2U7XG5cbiAgICBsZXQgb2JqZWN0ID0gX3RoaXMuX3JlcG9ydGVyc1tvYmpVUkxdO1xuICAgIGlmIChvYmplY3QpIHtcbiAgICAgIC8vVE9ETzogaXMgdGhlcmUgYW55IHBvbGljeSB2ZXJpZmljYXRpb24gYmVmb3JlIGRlbGV0ZT9cbiAgICAgIG9iamVjdC5kZWxldGUoKTtcblxuICAgICAgLy9UT0RPOiB1bnJlZ2lzdGVyIG9iamVjdD9cbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBtc2cuZnJvbSxcbiAgICAgICAgYm9keTogeyBjb2RlOiAyMDAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLy9GTE9XLUlOOiBtZXNzYWdlIHJlY2VpdmVkIGZyb20gbG9jYWwgU3luY2hlciAtPiBzdWJzY3JpYmVcbiAgX29uTG9jYWxTdWJzY3JpYmUobXNnKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxldCBoeXBlcnR5VVJMID0gbXNnLmZyb207XG4gICAgbGV0IG9ialVSTCA9IG1zZy5ib2R5LnJlc291cmNlO1xuICAgIGxldCBvYmpVUkxTdWJzY3JpcHRpb24gPSBvYmpVUkwgKyAnL3N1YnNjcmlwdGlvbic7XG4gICAgbGV0IGNoaWxkQmFzZVVSTCA9IG9ialVSTCArICcvY2hpbGRyZW4vJztcblxuICAgIGxldCBkb21haW4gPSBkaXZpZGVVUkwob2JqVVJMKS5kb21haW47XG5cbiAgICAvL2dldCBzY2hlbWEgZnJvbSBjYXRhbG9ndWUgYW5kIHBhcnNlIC0+IChjaGlsZHJlbilcbiAgICBfdGhpcy5fY2F0YWxvZy5nZXREYXRhU2NoZW1hRGVzY3JpcHRvcihtc2cuYm9keS5zY2hlbWEpLnRoZW4oKGRlc2NyaXB0b3IpID0+IHtcbiAgICAgIGxldCBwcm9wZXJ0aWVzID0gZGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlLnNvdXJjZUNvZGUucHJvcGVydGllcztcbiAgICAgIGxldCBjaGlsZHJlbnMgPSBwcm9wZXJ0aWVzLmNoaWxkcmVuID8gcHJvcGVydGllcy5jaGlsZHJlbi5jb25zdGFudCA6IFtdO1xuXG4gICAgICAvL2NoaWxkcmVuIGFkZHJlc3Nlc1xuICAgICAgbGV0IHN1YnNjcmlwdGlvbnMgPSBbXTtcbiAgICAgIHN1YnNjcmlwdGlvbnMucHVzaChvYmpVUkwgKyAnL2NoYW5nZXMnKTtcbiAgICAgIGNoaWxkcmVucy5mb3JFYWNoKChjaGlsZCkgPT4gc3Vic2NyaXB0aW9ucy5wdXNoKGNoaWxkQmFzZVVSTCArIGNoaWxkKSk7XG5cbiAgICAgIC8vRkxPVy1PVVQ6IHN1YnNjcmliZSBtZXNzYWdlIHRvIHRoZSBtc2ctbm9kZSwgcmVnaXN0ZXJpbmcgbGlzdGVuZXJzIG9uIHRoZSBicm9rZXJcbiAgICAgIGxldCBub2RlU3Vic2NyaWJlTXNnID0ge1xuICAgICAgICB0eXBlOiAnc3Vic2NyaWJlJywgZnJvbTogX3RoaXMuX3VybCwgdG86ICdkb21haW46Ly9tc2ctbm9kZS4nICsgZG9tYWluICsgJy9zbScsXG4gICAgICAgIGJvZHk6IHsgaWRlbnRpdHk6IG1zZy5ib2R5LmlkZW50aXR5LCBzdWJzY3JpYmU6IHN1YnNjcmlwdGlvbnMsIHNvdXJjZTogaHlwZXJ0eVVSTCB9XG4gICAgICB9O1xuXG4gICAgICAvL3N1YnNjcmliZSBpbiBtc2ctbm9kZVxuICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShub2RlU3Vic2NyaWJlTXNnLCAocmVwbHkpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ25vZGUtc3Vic2NyaWJlLXJlc3BvbnNlKG9ic2VydmVyKTogJywgcmVwbHkpO1xuICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHtcblxuICAgICAgICAgIC8vRkxPVy1PVVQ6IHJlcGx5IHdpdGggcHJvdmlzaW9uYWwgcmVzcG9uc2VcbiAgICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IGh5cGVydHlVUkwsXG4gICAgICAgICAgICBib2R5OiB7IGNvZGU6IDEwMCwgY2hpbGRyZW5SZXNvdXJjZXM6IGNoaWxkcmVucyB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvL0ZMT1ctT1VUOiBzdWJzY3JpYmUgbWVzc2FnZSB0byByZW1vdGUgUmVwb3J0ZXJPYmplY3QgLT4gX29uUmVtb3RlU3Vic2NyaWJlXG4gICAgICAgICAgbGV0IG9ialN1YnNjcmliZU1zZyA9IHtcbiAgICAgICAgICAgIHR5cGU6ICdzdWJzY3JpYmUnLCBmcm9tOiBfdGhpcy5fdXJsLCB0bzogb2JqVVJMU3Vic2NyaXB0aW9uLFxuICAgICAgICAgICAgYm9keTogeyBpZGVudGl0eTogbm9kZVN1YnNjcmliZU1zZy5ib2R5LmlkZW50aXR5LCBzdWJzY3JpYmVyOiBoeXBlcnR5VVJMIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgLy9zdWJzY3JpYmUgdG8gcmVwb3J0ZXIgU01cbiAgICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG9ialN1YnNjcmliZU1zZywgKHJlcGx5KSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygncmVwb3J0ZXItc3Vic2NyaWJlLXJlc3BvbnNlOiAnLCByZXBseSk7XG4gICAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHtcblxuICAgICAgICAgICAgICBsZXQgb2JzZXJ2ZXIgPSBfdGhpcy5fb2JzZXJ2ZXJzW29ialVSTF07XG4gICAgICAgICAgICAgIGlmICghb2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICBvYnNlcnZlciA9IG5ldyBPYnNlcnZlck9iamVjdChfdGhpcywgb2JqVVJMLCBjaGlsZHJlbnMpO1xuICAgICAgICAgICAgICAgIF90aGlzLl9vYnNlcnZlcnNbb2JqVVJMXSA9IG9ic2VydmVyO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy9yZWdpc3RlciBoeXBlcnR5IHN1YnNjcmlwdGlvblxuICAgICAgICAgICAgICBvYnNlcnZlci5hZGRTdWJzY3JpcHRpb24oaHlwZXJ0eVVSTCk7XG5cbiAgICAgICAgICAgICAgLy9mb3J3YXJkIHRvIGh5cGVydHk6XG4gICAgICAgICAgICAgIHJlcGx5LmlkID0gbXNnLmlkO1xuICAgICAgICAgICAgICByZXBseS5mcm9tID0gX3RoaXMuX3VybDtcbiAgICAgICAgICAgICAgcmVwbHkudG8gPSBoeXBlcnR5VVJMO1xuICAgICAgICAgICAgICB0aGlzLl9idXMucG9zdE1lc3NhZ2UocmVwbHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy9saXN0ZW5lciByZWplY3RlZFxuICAgICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogaHlwZXJ0eVVSTCxcbiAgICAgICAgICAgIGJvZHk6IHJlcGx5LmJvZHlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBsb2NhbCBEYXRhT2JqZWN0T2JzZXJ2ZXIgLT4gdW5zdWJzY3JpYmVcbiAgX29uTG9jYWxVblN1YnNjcmliZShtc2cpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IGh5cGVydHlVUkwgPSBtc2cuZnJvbTtcbiAgICBsZXQgb2JqVVJMID0gbXNnLmJvZHkucmVzb3VyY2U7XG5cbiAgICBsZXQgb2JzZXJ2ZXIgPSBfdGhpcy5fb2JzZXJ2ZXJzW29ialVSTF07XG4gICAgaWYgKG9ic2VydmVyKSB7XG4gICAgICAvL1RPRE86IGlzIHRoZXJlIGFueSBwb2xpY3kgdmVyaWZpY2F0aW9uIGJlZm9yZSBkZWxldGU/XG4gICAgICBvYnNlcnZlci5yZW1vdmVTdWJzY3JpcHRpb24oaHlwZXJ0eVVSTCk7XG5cbiAgICAgIC8vVE9ETzogZGVzdHJveSBvYmplY3QgaW4gdGhlIHJlZ2lzdHJ5P1xuICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7XG4gICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG1zZy5mcm9tLFxuICAgICAgICBib2R5OiB7IGNvZGU6IDIwMCB9XG4gICAgICB9KTtcblxuICAgICAgLy9UT0RPOiByZW1vdmUgT2JqZWN0IGlmIG5vIG1vcmUgc3Vic2NyaXB0aW9uP1xuICAgICAgLy9kZWxldGUgX3RoaXMuX29ic2VydmVyc1tvYmpVUkxdO1xuICAgIH1cbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFN5bmNoZXJNYW5hZ2VyO1xuIiwiLypcbiBBdXRob3I6IEdlcmFpbnQgTHVmZiBhbmQgb3RoZXJzXG4gWWVhcjogMjAxM1xuXG4gVGhpcyBjb2RlIGlzIHJlbGVhc2VkIGludG8gdGhlIFwicHVibGljIGRvbWFpblwiIGJ5IGl0cyBhdXRob3IocykuICBBbnlib2R5IG1heSB1c2UsIGFsdGVyIGFuZCBkaXN0cmlidXRlIHRoZSBjb2RlIHdpdGhvdXQgcmVzdHJpY3Rpb24uICBUaGUgYXV0aG9yIG1ha2VzIG5vIGd1YXJhbnRlZXMsIGFuZCB0YWtlcyBubyBsaWFiaWxpdHkgb2YgYW55IGtpbmQgZm9yIHVzZSBvZiB0aGlzIGNvZGUuXG5cbiBJZiB5b3UgZmluZCBhIGJ1ZyBvciBtYWtlIGFuIGltcHJvdmVtZW50LCBpdCB3b3VsZCBiZSBjb3VydGVvdXMgdG8gbGV0IHRoZSBhdXRob3Iga25vdywgYnV0IGl0IGlzIG5vdCBjb21wdWxzb3J5LlxuICovXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3Qva2V5cz9yZWRpcmVjdGxvY2FsZT1lbi1VUyZyZWRpcmVjdHNsdWc9SmF2YVNjcmlwdCUyRlJlZmVyZW5jZSUyRkdsb2JhbF9PYmplY3RzJTJGT2JqZWN0JTJGa2V5c1xuaWYgKCFPYmplY3Qua2V5cykge1xuICAgIE9iamVjdC5rZXlzID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxcbiAgICAgICAgICAgIGhhc0RvbnRFbnVtQnVnID0gISh7dG9TdHJpbmc6IG51bGx9KS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgndG9TdHJpbmcnKSxcbiAgICAgICAgICAgIGRvbnRFbnVtcyA9IFtcbiAgICAgICAgICAgICAgICAndG9TdHJpbmcnLFxuICAgICAgICAgICAgICAgICd0b0xvY2FsZVN0cmluZycsXG4gICAgICAgICAgICAgICAgJ3ZhbHVlT2YnLFxuICAgICAgICAgICAgICAgICdoYXNPd25Qcm9wZXJ0eScsXG4gICAgICAgICAgICAgICAgJ2lzUHJvdG90eXBlT2YnLFxuICAgICAgICAgICAgICAgICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG4gICAgICAgICAgICAgICAgJ2NvbnN0cnVjdG9yJ1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGRvbnRFbnVtc0xlbmd0aCA9IGRvbnRFbnVtcy5sZW5ndGg7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqICE9PSAnZnVuY3Rpb24nIHx8IG9iaiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5rZXlzIGNhbGxlZCBvbiBub24tb2JqZWN0Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHByb3ApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGhhc0RvbnRFbnVtQnVnKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkb250RW51bXNMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGRvbnRFbnVtc1tpXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGRvbnRFbnVtc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgIH0pKCk7XG59XG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvY3JlYXRlXG5pZiAoIU9iamVjdC5jcmVhdGUpIHtcbiAgICBPYmplY3QuY3JlYXRlID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gRigpIHtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobykge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ09iamVjdC5jcmVhdGUgaW1wbGVtZW50YXRpb24gb25seSBhY2NlcHRzIG9uZSBwYXJhbWV0ZXIuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBGLnByb3RvdHlwZSA9IG87XG4gICAgICAgICAgICByZXR1cm4gbmV3IEYoKTtcbiAgICAgICAgfTtcbiAgICB9KSgpO1xufVxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvaXNBcnJheT9yZWRpcmVjdGxvY2FsZT1lbi1VUyZyZWRpcmVjdHNsdWc9SmF2YVNjcmlwdCUyRlJlZmVyZW5jZSUyRkdsb2JhbF9PYmplY3RzJTJGQXJyYXklMkZpc0FycmF5XG5pZiAoIUFycmF5LmlzQXJyYXkpIHtcbiAgICBBcnJheS5pc0FycmF5ID0gZnVuY3Rpb24gKHZBcmcpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2QXJnKSA9PT0gXCJbb2JqZWN0IEFycmF5XVwiO1xuICAgIH07XG59XG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9pbmRleE9mP3JlZGlyZWN0bG9jYWxlPWVuLVVTJnJlZGlyZWN0c2x1Zz1KYXZhU2NyaXB0JTJGUmVmZXJlbmNlJTJGR2xvYmFsX09iamVjdHMlMkZBcnJheSUyRmluZGV4T2ZcbmlmICghQXJyYXkucHJvdG90eXBlLmluZGV4T2YpIHtcbiAgICBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIChzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgICAgaWYgKHRoaXMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdCA9IE9iamVjdCh0aGlzKTtcbiAgICAgICAgdmFyIGxlbiA9IHQubGVuZ3RoID4+PiAwO1xuXG4gICAgICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbiA9IDA7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgbiA9IE51bWJlcihhcmd1bWVudHNbMV0pO1xuICAgICAgICAgICAgaWYgKG4gIT09IG4pIHsgLy8gc2hvcnRjdXQgZm9yIHZlcmlmeWluZyBpZiBpdCdzIE5hTlxuICAgICAgICAgICAgICAgIG4gPSAwO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChuICE9PSAwICYmIG4gIT09IEluZmluaXR5ICYmIG4gIT09IC1JbmZpbml0eSkge1xuICAgICAgICAgICAgICAgIG4gPSAobiA+IDAgfHwgLTEpICogTWF0aC5mbG9vcihNYXRoLmFicyhuKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG4gPj0gbGVuKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGsgPSBuID49IDAgPyBuIDogTWF0aC5tYXgobGVuIC0gTWF0aC5hYnMobiksIDApO1xuICAgICAgICBmb3IgKDsgayA8IGxlbjsgaysrKSB7XG4gICAgICAgICAgICBpZiAoayBpbiB0ICYmIHRba10gPT09IHNlYXJjaEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfTtcbn1cblxuLy8gR3J1bmdleSBPYmplY3QuaXNGcm96ZW4gaGFja1xuaWYgKCFPYmplY3QuaXNGcm96ZW4pIHtcbiAgICBPYmplY3QuaXNGcm96ZW4gPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHZhciBrZXkgPSBcInR2NF90ZXN0X2Zyb3plbl9rZXlcIjtcbiAgICAgICAgd2hpbGUgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICBrZXkgKz0gTWF0aC5yYW5kb20oKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgb2JqW2tleV0gPSB0cnVlO1xuICAgICAgICAgICAgZGVsZXRlIG9ialtrZXldO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH07XG59XG4vLyBCYXNlZCBvbjogaHR0cHM6Ly9naXRodWIuY29tL2dlcmFpbnRsdWZmL3VyaS10ZW1wbGF0ZXMsIGJ1dCB3aXRoIGFsbCB0aGUgZGUtc3Vic3RpdHV0aW9uIHN0dWZmIHJlbW92ZWRcblxudmFyIHVyaVRlbXBsYXRlR2xvYmFsTW9kaWZpZXJzID0ge1xuICAgIFwiK1wiOiB0cnVlLFxuICAgIFwiI1wiOiB0cnVlLFxuICAgIFwiLlwiOiB0cnVlLFxuICAgIFwiL1wiOiB0cnVlLFxuICAgIFwiO1wiOiB0cnVlLFxuICAgIFwiP1wiOiB0cnVlLFxuICAgIFwiJlwiOiB0cnVlXG59O1xudmFyIHVyaVRlbXBsYXRlU3VmZmljZXMgPSB7XG4gICAgXCIqXCI6IHRydWVcbn07XG5cbmZ1bmN0aW9uIG5vdFJlYWxseVBlcmNlbnRFbmNvZGUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSShzdHJpbmcpLnJlcGxhY2UoLyUyNVswLTldWzAtOV0vZywgZnVuY3Rpb24gKGRvdWJsZUVuY29kZWQpIHtcbiAgICAgICAgcmV0dXJuIFwiJVwiICsgZG91YmxlRW5jb2RlZC5zdWJzdHJpbmcoMyk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHVyaVRlbXBsYXRlU3Vic3RpdHV0aW9uKHNwZWMpIHtcbiAgICB2YXIgbW9kaWZpZXIgPSBcIlwiO1xuICAgIGlmICh1cmlUZW1wbGF0ZUdsb2JhbE1vZGlmaWVyc1tzcGVjLmNoYXJBdCgwKV0pIHtcbiAgICAgICAgbW9kaWZpZXIgPSBzcGVjLmNoYXJBdCgwKTtcbiAgICAgICAgc3BlYyA9IHNwZWMuc3Vic3RyaW5nKDEpO1xuICAgIH1cbiAgICB2YXIgc2VwYXJhdG9yID0gXCJcIjtcbiAgICB2YXIgcHJlZml4ID0gXCJcIjtcbiAgICB2YXIgc2hvdWxkRXNjYXBlID0gdHJ1ZTtcbiAgICB2YXIgc2hvd1ZhcmlhYmxlcyA9IGZhbHNlO1xuICAgIHZhciB0cmltRW1wdHlTdHJpbmcgPSBmYWxzZTtcbiAgICBpZiAobW9kaWZpZXIgPT09ICcrJykge1xuICAgICAgICBzaG91bGRFc2NhcGUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKG1vZGlmaWVyID09PSBcIi5cIikge1xuICAgICAgICBwcmVmaXggPSBcIi5cIjtcbiAgICAgICAgc2VwYXJhdG9yID0gXCIuXCI7XG4gICAgfSBlbHNlIGlmIChtb2RpZmllciA9PT0gXCIvXCIpIHtcbiAgICAgICAgcHJlZml4ID0gXCIvXCI7XG4gICAgICAgIHNlcGFyYXRvciA9IFwiL1wiO1xuICAgIH0gZWxzZSBpZiAobW9kaWZpZXIgPT09ICcjJykge1xuICAgICAgICBwcmVmaXggPSBcIiNcIjtcbiAgICAgICAgc2hvdWxkRXNjYXBlID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChtb2RpZmllciA9PT0gJzsnKSB7XG4gICAgICAgIHByZWZpeCA9IFwiO1wiO1xuICAgICAgICBzZXBhcmF0b3IgPSBcIjtcIjtcbiAgICAgICAgc2hvd1ZhcmlhYmxlcyA9IHRydWU7XG4gICAgICAgIHRyaW1FbXB0eVN0cmluZyA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChtb2RpZmllciA9PT0gJz8nKSB7XG4gICAgICAgIHByZWZpeCA9IFwiP1wiO1xuICAgICAgICBzZXBhcmF0b3IgPSBcIiZcIjtcbiAgICAgICAgc2hvd1ZhcmlhYmxlcyA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChtb2RpZmllciA9PT0gJyYnKSB7XG4gICAgICAgIHByZWZpeCA9IFwiJlwiO1xuICAgICAgICBzZXBhcmF0b3IgPSBcIiZcIjtcbiAgICAgICAgc2hvd1ZhcmlhYmxlcyA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHZhck5hbWVzID0gW107XG4gICAgdmFyIHZhckxpc3QgPSBzcGVjLnNwbGl0KFwiLFwiKTtcbiAgICB2YXIgdmFyU3BlY3MgPSBbXTtcbiAgICB2YXIgdmFyU3BlY01hcCA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFyTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdmFyTmFtZSA9IHZhckxpc3RbaV07XG4gICAgICAgIHZhciB0cnVuY2F0ZSA9IG51bGw7XG4gICAgICAgIGlmICh2YXJOYW1lLmluZGV4T2YoXCI6XCIpICE9PSAtMSkge1xuICAgICAgICAgICAgdmFyIHBhcnRzID0gdmFyTmFtZS5zcGxpdChcIjpcIik7XG4gICAgICAgICAgICB2YXJOYW1lID0gcGFydHNbMF07XG4gICAgICAgICAgICB0cnVuY2F0ZSA9IHBhcnNlSW50KHBhcnRzWzFdLCAxMCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN1ZmZpY2VzID0ge307XG4gICAgICAgIHdoaWxlICh1cmlUZW1wbGF0ZVN1ZmZpY2VzW3Zhck5hbWUuY2hhckF0KHZhck5hbWUubGVuZ3RoIC0gMSldKSB7XG4gICAgICAgICAgICBzdWZmaWNlc1t2YXJOYW1lLmNoYXJBdCh2YXJOYW1lLmxlbmd0aCAtIDEpXSA9IHRydWU7XG4gICAgICAgICAgICB2YXJOYW1lID0gdmFyTmFtZS5zdWJzdHJpbmcoMCwgdmFyTmFtZS5sZW5ndGggLSAxKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmFyU3BlYyA9IHtcbiAgICAgICAgICAgIHRydW5jYXRlOiB0cnVuY2F0ZSxcbiAgICAgICAgICAgIG5hbWU6IHZhck5hbWUsXG4gICAgICAgICAgICBzdWZmaWNlczogc3VmZmljZXNcbiAgICAgICAgfTtcbiAgICAgICAgdmFyU3BlY3MucHVzaCh2YXJTcGVjKTtcbiAgICAgICAgdmFyU3BlY01hcFt2YXJOYW1lXSA9IHZhclNwZWM7XG4gICAgICAgIHZhck5hbWVzLnB1c2godmFyTmFtZSk7XG4gICAgfVxuICAgIHZhciBzdWJGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YWx1ZUZ1bmN0aW9uKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBcIlwiO1xuICAgICAgICB2YXIgc3RhcnRJbmRleCA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFyU3BlY3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciB2YXJTcGVjID0gdmFyU3BlY3NbaV07XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB2YWx1ZUZ1bmN0aW9uKHZhclNwZWMubmFtZSk7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCB8fCAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAwKSB8fCAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwKSkge1xuICAgICAgICAgICAgICAgIHN0YXJ0SW5kZXgrKztcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpID09PSBzdGFydEluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHByZWZpeDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IChzZXBhcmF0b3IgfHwgXCIsXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNob3dWYXJpYWJsZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHZhclNwZWMubmFtZSArIFwiPVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChqID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHZhclNwZWMuc3VmZmljZXNbJyonXSA/IChzZXBhcmF0b3IgfHwgXCIsXCIpIDogXCIsXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFyU3BlYy5zdWZmaWNlc1snKiddICYmIHNob3dWYXJpYWJsZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gdmFyU3BlYy5uYW1lICsgXCI9XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHNob3VsZEVzY2FwZSA/IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZVtqXSkucmVwbGFjZSgvIS9nLCBcIiUyMVwiKSA6IG5vdFJlYWxseVBlcmNlbnRFbmNvZGUodmFsdWVbal0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNob3dWYXJpYWJsZXMgJiYgIXZhclNwZWMuc3VmZmljZXNbJyonXSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gdmFyU3BlYy5uYW1lICsgXCI9XCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBmaXJzdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZmlyc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB2YXJTcGVjLnN1ZmZpY2VzWycqJ10gPyAoc2VwYXJhdG9yIHx8IFwiLFwiKSA6IFwiLFwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzaG91bGRFc2NhcGUgPyBlbmNvZGVVUklDb21wb25lbnQoa2V5KS5yZXBsYWNlKC8hL2csIFwiJTIxXCIpIDogbm90UmVhbGx5UGVyY2VudEVuY29kZShrZXkpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gdmFyU3BlYy5zdWZmaWNlc1snKiddID8gJz0nIDogXCIsXCI7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzaG91bGRFc2NhcGUgPyBlbmNvZGVVUklDb21wb25lbnQodmFsdWVba2V5XSkucmVwbGFjZSgvIS9nLCBcIiUyMVwiKSA6IG5vdFJlYWxseVBlcmNlbnRFbmNvZGUodmFsdWVba2V5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoc2hvd1ZhcmlhYmxlcykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gdmFyU3BlYy5uYW1lO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRyaW1FbXB0eVN0cmluZyB8fCB2YWx1ZSAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IFwiPVwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh2YXJTcGVjLnRydW5jYXRlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHJpbmcoMCwgdmFyU3BlYy50cnVuY2F0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzaG91bGRFc2NhcGUgPyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpLnJlcGxhY2UoLyEvZywgXCIlMjFcIikgOiBub3RSZWFsbHlQZXJjZW50RW5jb2RlKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgc3ViRnVuY3Rpb24udmFyTmFtZXMgPSB2YXJOYW1lcztcbiAgICByZXR1cm4ge1xuICAgICAgICBwcmVmaXg6IHByZWZpeCxcbiAgICAgICAgc3Vic3RpdHV0aW9uOiBzdWJGdW5jdGlvblxuICAgIH07XG59XG5cbmZ1bmN0aW9uIFVyaVRlbXBsYXRlKHRlbXBsYXRlKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFVyaVRlbXBsYXRlKSkge1xuICAgICAgICByZXR1cm4gbmV3IFVyaVRlbXBsYXRlKHRlbXBsYXRlKTtcbiAgICB9XG4gICAgdmFyIHBhcnRzID0gdGVtcGxhdGUuc3BsaXQoXCJ7XCIpO1xuICAgIHZhciB0ZXh0UGFydHMgPSBbcGFydHMuc2hpZnQoKV07XG4gICAgdmFyIHByZWZpeGVzID0gW107XG4gICAgdmFyIHN1YnN0aXR1dGlvbnMgPSBbXTtcbiAgICB2YXIgdmFyTmFtZXMgPSBbXTtcbiAgICB3aGlsZSAocGFydHMubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgcGFydCA9IHBhcnRzLnNoaWZ0KCk7XG4gICAgICAgIHZhciBzcGVjID0gcGFydC5zcGxpdChcIn1cIilbMF07XG4gICAgICAgIHZhciByZW1haW5kZXIgPSBwYXJ0LnN1YnN0cmluZyhzcGVjLmxlbmd0aCArIDEpO1xuICAgICAgICB2YXIgZnVuY3MgPSB1cmlUZW1wbGF0ZVN1YnN0aXR1dGlvbihzcGVjKTtcbiAgICAgICAgc3Vic3RpdHV0aW9ucy5wdXNoKGZ1bmNzLnN1YnN0aXR1dGlvbik7XG4gICAgICAgIHByZWZpeGVzLnB1c2goZnVuY3MucHJlZml4KTtcbiAgICAgICAgdGV4dFBhcnRzLnB1c2gocmVtYWluZGVyKTtcbiAgICAgICAgdmFyTmFtZXMgPSB2YXJOYW1lcy5jb25jYXQoZnVuY3Muc3Vic3RpdHV0aW9uLnZhck5hbWVzKTtcbiAgICB9XG4gICAgdGhpcy5maWxsID0gZnVuY3Rpb24gKHZhbHVlRnVuY3Rpb24pIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRleHRQYXJ0c1swXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJzdGl0dXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgc3Vic3RpdHV0aW9uID0gc3Vic3RpdHV0aW9uc1tpXTtcbiAgICAgICAgICAgIHJlc3VsdCArPSBzdWJzdGl0dXRpb24odmFsdWVGdW5jdGlvbik7XG4gICAgICAgICAgICByZXN1bHQgKz0gdGV4dFBhcnRzW2kgKyAxXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgdGhpcy52YXJOYW1lcyA9IHZhck5hbWVzO1xuICAgIHRoaXMudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbn1cblxuVXJpVGVtcGxhdGUucHJvdG90eXBlID0ge1xuICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRlbXBsYXRlO1xuICAgIH0sXG4gICAgZmlsbEZyb21PYmplY3Q6IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsbChmdW5jdGlvbiAodmFyTmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9ialt2YXJOYW1lXTtcbiAgICAgICAgfSk7XG4gICAgfVxufTtcbnZhciBWYWxpZGF0b3JDb250ZXh0ID0gZnVuY3Rpb24gVmFsaWRhdG9yQ29udGV4dChwYXJlbnQsIGNvbGxlY3RNdWx0aXBsZSwgZXJyb3JSZXBvcnRlciwgY2hlY2tSZWN1cnNpdmUsIHRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICB0aGlzLm1pc3NpbmcgPSBbXTtcbiAgICB0aGlzLm1pc3NpbmdNYXAgPSB7fTtcbiAgICB0aGlzLmZvcm1hdFZhbGlkYXRvcnMgPSBwYXJlbnQgPyBPYmplY3QuY3JlYXRlKHBhcmVudC5mb3JtYXRWYWxpZGF0b3JzKSA6IHt9O1xuICAgIHRoaXMuc2NoZW1hcyA9IHBhcmVudCA/IE9iamVjdC5jcmVhdGUocGFyZW50LnNjaGVtYXMpIDoge307XG4gICAgdGhpcy5jb2xsZWN0TXVsdGlwbGUgPSBjb2xsZWN0TXVsdGlwbGU7XG4gICAgdGhpcy5lcnJvcnMgPSBbXTtcbiAgICB0aGlzLmhhbmRsZUVycm9yID0gY29sbGVjdE11bHRpcGxlID8gdGhpcy5jb2xsZWN0RXJyb3IgOiB0aGlzLnJldHVybkVycm9yO1xuICAgIGlmIChjaGVja1JlY3Vyc2l2ZSkge1xuICAgICAgICB0aGlzLmNoZWNrUmVjdXJzaXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zY2FubmVkID0gW107XG4gICAgICAgIHRoaXMuc2Nhbm5lZEZyb3plbiA9IFtdO1xuICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzID0gW107XG4gICAgICAgIHRoaXMuc2Nhbm5lZEZyb3plblZhbGlkYXRpb25FcnJvcnMgPSBbXTtcbiAgICAgICAgdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5ID0gJ3R2NF92YWxpZGF0aW9uX2lkJztcbiAgICAgICAgdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5ID0gJ3R2NF92YWxpZGF0aW9uX2Vycm9yc19pZCc7XG4gICAgfVxuICAgIGlmICh0cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgIHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyA9IHRydWU7XG4gICAgICAgIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzID0ge307XG4gICAgICAgIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMgPSB7fTtcbiAgICB9XG4gICAgdGhpcy5lcnJvclJlcG9ydGVyID0gZXJyb3JSZXBvcnRlciB8fCBkZWZhdWx0RXJyb3JSZXBvcnRlcignZW4nKTtcbiAgICBpZiAodHlwZW9mIHRoaXMuZXJyb3JSZXBvcnRlciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkZWJ1ZycpO1xuICAgIH1cbiAgICB0aGlzLmRlZmluZWRLZXl3b3JkcyA9IHt9O1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHBhcmVudC5kZWZpbmVkS2V5d29yZHMpIHtcbiAgICAgICAgICAgIHRoaXMuZGVmaW5lZEtleXdvcmRzW2tleV0gPSBwYXJlbnQuZGVmaW5lZEtleXdvcmRzW2tleV0uc2xpY2UoMCk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUuZGVmaW5lS2V5d29yZCA9IGZ1bmN0aW9uIChrZXl3b3JkLCBrZXl3b3JkRnVuY3Rpb24pIHtcbiAgICB0aGlzLmRlZmluZWRLZXl3b3Jkc1trZXl3b3JkXSA9IHRoaXMuZGVmaW5lZEtleXdvcmRzW2tleXdvcmRdIHx8IFtdO1xuICAgIHRoaXMuZGVmaW5lZEtleXdvcmRzW2tleXdvcmRdLnB1c2goa2V5d29yZEZ1bmN0aW9uKTtcbn07XG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5jcmVhdGVFcnJvciA9IGZ1bmN0aW9uIChjb2RlLCBtZXNzYWdlUGFyYW1zLCBkYXRhUGF0aCwgc2NoZW1hUGF0aCwgc3ViRXJyb3JzLCBkYXRhLCBzY2hlbWEpIHtcbiAgICB2YXIgZXJyb3IgPSBuZXcgVmFsaWRhdGlvbkVycm9yKGNvZGUsIG1lc3NhZ2VQYXJhbXMsIGRhdGFQYXRoLCBzY2hlbWFQYXRoLCBzdWJFcnJvcnMpO1xuICAgIGVycm9yLm1lc3NhZ2UgPSB0aGlzLmVycm9yUmVwb3J0ZXIoZXJyb3IsIGRhdGEsIHNjaGVtYSk7XG4gICAgcmV0dXJuIGVycm9yO1xufTtcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnJldHVybkVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgcmV0dXJuIGVycm9yO1xufTtcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmNvbGxlY3RFcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgICB0aGlzLmVycm9ycy5wdXNoKGVycm9yKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUucHJlZml4RXJyb3JzID0gZnVuY3Rpb24gKHN0YXJ0SW5kZXgsIGRhdGFQYXRoLCBzY2hlbWFQYXRoKSB7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXg7IGkgPCB0aGlzLmVycm9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLmVycm9yc1tpXSA9IHRoaXMuZXJyb3JzW2ldLnByZWZpeFdpdGgoZGF0YVBhdGgsIHNjaGVtYVBhdGgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn07XG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5iYW5Vbmtub3duUHJvcGVydGllcyA9IGZ1bmN0aW9uIChkYXRhLCBzY2hlbWEpIHtcbiAgICBmb3IgKHZhciB1bmtub3duUGF0aCBpbiB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzKSB7XG4gICAgICAgIHZhciBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5VTktOT1dOX1BST1BFUlRZLCB7cGF0aDogdW5rbm93blBhdGh9LCB1bmtub3duUGF0aCwgXCJcIiwgbnVsbCwgZGF0YSwgc2NoZW1hKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUuYWRkRm9ybWF0ID0gZnVuY3Rpb24gKGZvcm1hdCwgdmFsaWRhdG9yKSB7XG4gICAgaWYgKHR5cGVvZiBmb3JtYXQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBmb3JtYXQpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkRm9ybWF0KGtleSwgZm9ybWF0W2tleV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB0aGlzLmZvcm1hdFZhbGlkYXRvcnNbZm9ybWF0XSA9IHZhbGlkYXRvcjtcbn07XG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5yZXNvbHZlUmVmcyA9IGZ1bmN0aW9uIChzY2hlbWEsIHVybEhpc3RvcnkpIHtcbiAgICBpZiAoc2NoZW1hWyckcmVmJ10gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cmxIaXN0b3J5ID0gdXJsSGlzdG9yeSB8fCB7fTtcbiAgICAgICAgaWYgKHVybEhpc3Rvcnlbc2NoZW1hWyckcmVmJ11dKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLkNJUkNVTEFSX1JFRkVSRU5DRSwge3VybHM6IE9iamVjdC5rZXlzKHVybEhpc3RvcnkpLmpvaW4oJywgJyl9LCAnJywgJycsIG51bGwsIHVuZGVmaW5lZCwgc2NoZW1hKTtcbiAgICAgICAgfVxuICAgICAgICB1cmxIaXN0b3J5W3NjaGVtYVsnJHJlZiddXSA9IHRydWU7XG4gICAgICAgIHNjaGVtYSA9IHRoaXMuZ2V0U2NoZW1hKHNjaGVtYVsnJHJlZiddLCB1cmxIaXN0b3J5KTtcbiAgICB9XG4gICAgcmV0dXJuIHNjaGVtYTtcbn07XG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5nZXRTY2hlbWEgPSBmdW5jdGlvbiAodXJsLCB1cmxIaXN0b3J5KSB7XG4gICAgdmFyIHNjaGVtYTtcbiAgICBpZiAodGhpcy5zY2hlbWFzW3VybF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzY2hlbWEgPSB0aGlzLnNjaGVtYXNbdXJsXTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZVJlZnMoc2NoZW1hLCB1cmxIaXN0b3J5KTtcbiAgICB9XG4gICAgdmFyIGJhc2VVcmwgPSB1cmw7XG4gICAgdmFyIGZyYWdtZW50ID0gXCJcIjtcbiAgICBpZiAodXJsLmluZGV4T2YoJyMnKSAhPT0gLTEpIHtcbiAgICAgICAgZnJhZ21lbnQgPSB1cmwuc3Vic3RyaW5nKHVybC5pbmRleE9mKFwiI1wiKSArIDEpO1xuICAgICAgICBiYXNlVXJsID0gdXJsLnN1YnN0cmluZygwLCB1cmwuaW5kZXhPZihcIiNcIikpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHRoaXMuc2NoZW1hc1tiYXNlVXJsXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgc2NoZW1hID0gdGhpcy5zY2hlbWFzW2Jhc2VVcmxdO1xuICAgICAgICB2YXIgcG9pbnRlclBhdGggPSBkZWNvZGVVUklDb21wb25lbnQoZnJhZ21lbnQpO1xuICAgICAgICBpZiAocG9pbnRlclBhdGggPT09IFwiXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlc29sdmVSZWZzKHNjaGVtYSwgdXJsSGlzdG9yeSk7XG4gICAgICAgIH0gZWxzZSBpZiAocG9pbnRlclBhdGguY2hhckF0KDApICE9PSBcIi9cIikge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGFydHMgPSBwb2ludGVyUGF0aC5zcGxpdChcIi9cIikuc2xpY2UoMSk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSBwYXJ0c1tpXS5yZXBsYWNlKC9+MS9nLCBcIi9cIikucmVwbGFjZSgvfjAvZywgXCJ+XCIpO1xuICAgICAgICAgICAgaWYgKHNjaGVtYVtjb21wb25lbnRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBzY2hlbWEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzY2hlbWEgPSBzY2hlbWFbY29tcG9uZW50XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NoZW1hICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlc29sdmVSZWZzKHNjaGVtYSwgdXJsSGlzdG9yeSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMubWlzc2luZ1tiYXNlVXJsXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMubWlzc2luZy5wdXNoKGJhc2VVcmwpO1xuICAgICAgICB0aGlzLm1pc3NpbmdbYmFzZVVybF0gPSBiYXNlVXJsO1xuICAgICAgICB0aGlzLm1pc3NpbmdNYXBbYmFzZVVybF0gPSBiYXNlVXJsO1xuICAgIH1cbn07XG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5zZWFyY2hTY2hlbWFzID0gZnVuY3Rpb24gKHNjaGVtYSwgdXJsKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hKSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjaGVtYS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5zZWFyY2hTY2hlbWFzKHNjaGVtYVtpXSwgdXJsKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc2NoZW1hICYmIHR5cGVvZiBzY2hlbWEgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWEuaWQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGlmIChpc1RydXN0ZWRVcmwodXJsLCBzY2hlbWEuaWQpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2NoZW1hc1tzY2hlbWEuaWRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2hlbWFzW3NjaGVtYS5pZF0gPSBzY2hlbWE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBzY2hlbWEpIHtcbiAgICAgICAgICAgIGlmIChrZXkgIT09IFwiZW51bVwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWFba2V5XSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlYXJjaFNjaGVtYXMoc2NoZW1hW2tleV0sIHVybCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09IFwiJHJlZlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB1cmkgPSBnZXREb2N1bWVudFVyaShzY2hlbWFba2V5XSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1cmkgJiYgdGhpcy5zY2hlbWFzW3VyaV0gPT09IHVuZGVmaW5lZCAmJiB0aGlzLm1pc3NpbmdNYXBbdXJpXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1pc3NpbmdNYXBbdXJpXSA9IHVyaTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5hZGRTY2hlbWEgPSBmdW5jdGlvbiAodXJsLCBzY2hlbWEpIHtcbiAgICAvL292ZXJsb2FkXG4gICAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnIHx8IHR5cGVvZiBzY2hlbWEgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdXJsID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdXJsLmlkID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgc2NoZW1hID0gdXJsO1xuICAgICAgICAgICAgdXJsID0gc2NoZW1hLmlkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh1cmwgPT09IGdldERvY3VtZW50VXJpKHVybCkgKyBcIiNcIikge1xuICAgICAgICAvLyBSZW1vdmUgZW1wdHkgZnJhZ21lbnRcbiAgICAgICAgdXJsID0gZ2V0RG9jdW1lbnRVcmkodXJsKTtcbiAgICB9XG4gICAgdGhpcy5zY2hlbWFzW3VybF0gPSBzY2hlbWE7XG4gICAgZGVsZXRlIHRoaXMubWlzc2luZ01hcFt1cmxdO1xuICAgIG5vcm1TY2hlbWEoc2NoZW1hLCB1cmwpO1xuICAgIHRoaXMuc2VhcmNoU2NoZW1hcyhzY2hlbWEsIHVybCk7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5nZXRTY2hlbWFNYXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG1hcCA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLnNjaGVtYXMpIHtcbiAgICAgICAgbWFwW2tleV0gPSB0aGlzLnNjaGVtYXNba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIG1hcDtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmdldFNjaGVtYVVyaXMgPSBmdW5jdGlvbiAoZmlsdGVyUmVnRXhwKSB7XG4gICAgdmFyIGxpc3QgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5zY2hlbWFzKSB7XG4gICAgICAgIGlmICghZmlsdGVyUmVnRXhwIHx8IGZpbHRlclJlZ0V4cC50ZXN0KGtleSkpIHtcbiAgICAgICAgICAgIGxpc3QucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsaXN0O1xufTtcblxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUuZ2V0TWlzc2luZ1VyaXMgPSBmdW5jdGlvbiAoZmlsdGVyUmVnRXhwKSB7XG4gICAgdmFyIGxpc3QgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5taXNzaW5nTWFwKSB7XG4gICAgICAgIGlmICghZmlsdGVyUmVnRXhwIHx8IGZpbHRlclJlZ0V4cC50ZXN0KGtleSkpIHtcbiAgICAgICAgICAgIGxpc3QucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsaXN0O1xufTtcblxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUuZHJvcFNjaGVtYXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5zY2hlbWFzID0ge307XG4gICAgdGhpcy5yZXNldCgpO1xufTtcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMubWlzc2luZyA9IFtdO1xuICAgIHRoaXMubWlzc2luZ01hcCA9IHt9O1xuICAgIHRoaXMuZXJyb3JzID0gW107XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUFsbCA9IGZ1bmN0aW9uIChkYXRhLCBzY2hlbWEsIGRhdGFQYXRoUGFydHMsIHNjaGVtYVBhdGhQYXJ0cywgZGF0YVBvaW50ZXJQYXRoKSB7XG4gICAgdmFyIHRvcExldmVsO1xuICAgIHNjaGVtYSA9IHRoaXMucmVzb2x2ZVJlZnMoc2NoZW1hKTtcbiAgICBpZiAoIXNjaGVtYSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2UgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIFZhbGlkYXRpb25FcnJvcikge1xuICAgICAgICB0aGlzLmVycm9ycy5wdXNoKHNjaGVtYSk7XG4gICAgICAgIHJldHVybiBzY2hlbWE7XG4gICAgfVxuXG4gICAgdmFyIHN0YXJ0RXJyb3JDb3VudCA9IHRoaXMuZXJyb3JzLmxlbmd0aDtcbiAgICB2YXIgZnJvemVuSW5kZXgsIHNjYW5uZWRGcm96ZW5TY2hlbWFJbmRleCA9IG51bGwsIHNjYW5uZWRTY2hlbWFzSW5kZXggPSBudWxsO1xuICAgIGlmICh0aGlzLmNoZWNrUmVjdXJzaXZlICYmIGRhdGEgJiYgdHlwZW9mIGRhdGEgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRvcExldmVsID0gIXRoaXMuc2Nhbm5lZC5sZW5ndGg7XG4gICAgICAgIGlmIChkYXRhW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV0pIHtcbiAgICAgICAgICAgIHZhciBzY2hlbWFJbmRleCA9IGRhdGFbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XS5pbmRleE9mKHNjaGVtYSk7XG4gICAgICAgICAgICBpZiAoc2NoZW1hSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSB0aGlzLmVycm9ycy5jb25jYXQoZGF0YVt0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXldW3NjaGVtYUluZGV4XSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKE9iamVjdC5pc0Zyb3plbihkYXRhKSkge1xuICAgICAgICAgICAgZnJvemVuSW5kZXggPSB0aGlzLnNjYW5uZWRGcm96ZW4uaW5kZXhPZihkYXRhKTtcbiAgICAgICAgICAgIGlmIChmcm96ZW5JbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICB2YXIgZnJvemVuU2NoZW1hSW5kZXggPSB0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzW2Zyb3plbkluZGV4XS5pbmRleE9mKHNjaGVtYSk7XG4gICAgICAgICAgICAgICAgaWYgKGZyb3plblNjaGVtYUluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLmNvbmNhdCh0aGlzLnNjYW5uZWRGcm96ZW5WYWxpZGF0aW9uRXJyb3JzW2Zyb3plbkluZGV4XVtmcm96ZW5TY2hlbWFJbmRleF0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zY2FubmVkLnB1c2goZGF0YSk7XG4gICAgICAgIGlmIChPYmplY3QuaXNGcm96ZW4oZGF0YSkpIHtcbiAgICAgICAgICAgIGlmIChmcm96ZW5JbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBmcm96ZW5JbmRleCA9IHRoaXMuc2Nhbm5lZEZyb3plbi5sZW5ndGg7XG4gICAgICAgICAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuLnB1c2goZGF0YSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hcy5wdXNoKFtdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNjYW5uZWRGcm96ZW5TY2hlbWFJbmRleCA9IHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXNbZnJvemVuSW5kZXhdLmxlbmd0aDtcbiAgICAgICAgICAgIHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXNbZnJvemVuSW5kZXhdW3NjYW5uZWRGcm96ZW5TY2hlbWFJbmRleF0gPSBzY2hlbWE7XG4gICAgICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW5WYWxpZGF0aW9uRXJyb3JzW2Zyb3plbkluZGV4XVtzY2FubmVkRnJvemVuU2NoZW1hSW5kZXhdID0gW107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWRhdGFbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkYXRhLCB0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRhdGEsIHRoaXMudmFsaWRhdGlvbkVycm9yc0tleSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9JRSA3Lzggd29ya2Fyb3VuZFxuICAgICAgICAgICAgICAgICAgICBkYXRhW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVt0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXldID0gW107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2Nhbm5lZFNjaGVtYXNJbmRleCA9IGRhdGFbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XS5sZW5ndGg7XG4gICAgICAgICAgICBkYXRhW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV1bc2Nhbm5lZFNjaGVtYXNJbmRleF0gPSBzY2hlbWE7XG4gICAgICAgICAgICBkYXRhW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV1bc2Nhbm5lZFNjaGVtYXNJbmRleF0gPSBbXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBlcnJvckNvdW50ID0gdGhpcy5lcnJvcnMubGVuZ3RoO1xuICAgIHZhciBlcnJvciA9IHRoaXMudmFsaWRhdGVCYXNpYyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZU51bWVyaWMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXG4gICAgICAgIHx8IHRoaXMudmFsaWRhdGVTdHJpbmcoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXG4gICAgICAgIHx8IHRoaXMudmFsaWRhdGVBcnJheShkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZU9iamVjdChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZUNvbWJpbmF0aW9ucyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZUh5cGVybWVkaWEoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXG4gICAgICAgIHx8IHRoaXMudmFsaWRhdGVGb3JtYXQoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXG4gICAgICAgIHx8IHRoaXMudmFsaWRhdGVEZWZpbmVkS2V5d29yZHMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXG4gICAgICAgIHx8IG51bGw7XG5cbiAgICBpZiAodG9wTGV2ZWwpIHtcbiAgICAgICAgd2hpbGUgKHRoaXMuc2Nhbm5lZC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gdGhpcy5zY2FubmVkLnBvcCgpO1xuICAgICAgICAgICAgZGVsZXRlIGl0ZW1bdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW4gPSBbXTtcbiAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hcyA9IFtdO1xuICAgIH1cblxuICAgIGlmIChlcnJvciB8fCBlcnJvckNvdW50ICE9PSB0aGlzLmVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgd2hpbGUgKChkYXRhUGF0aFBhcnRzICYmIGRhdGFQYXRoUGFydHMubGVuZ3RoKSB8fCAoc2NoZW1hUGF0aFBhcnRzICYmIHNjaGVtYVBhdGhQYXJ0cy5sZW5ndGgpKSB7XG4gICAgICAgICAgICB2YXIgZGF0YVBhcnQgPSAoZGF0YVBhdGhQYXJ0cyAmJiBkYXRhUGF0aFBhcnRzLmxlbmd0aCkgPyBcIlwiICsgZGF0YVBhdGhQYXJ0cy5wb3AoKSA6IG51bGw7XG4gICAgICAgICAgICB2YXIgc2NoZW1hUGFydCA9IChzY2hlbWFQYXRoUGFydHMgJiYgc2NoZW1hUGF0aFBhcnRzLmxlbmd0aCkgPyBcIlwiICsgc2NoZW1hUGF0aFBhcnRzLnBvcCgpIDogbnVsbDtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGVycm9yID0gZXJyb3IucHJlZml4V2l0aChkYXRhUGFydCwgc2NoZW1hUGFydCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnByZWZpeEVycm9ycyhlcnJvckNvdW50LCBkYXRhUGFydCwgc2NoZW1hUGFydCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2Nhbm5lZEZyb3plblNjaGVtYUluZGV4ICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuc2Nhbm5lZEZyb3plblZhbGlkYXRpb25FcnJvcnNbZnJvemVuSW5kZXhdW3NjYW5uZWRGcm96ZW5TY2hlbWFJbmRleF0gPSB0aGlzLmVycm9ycy5zbGljZShzdGFydEVycm9yQ291bnQpO1xuICAgIH0gZWxzZSBpZiAoc2Nhbm5lZFNjaGVtYXNJbmRleCAhPT0gbnVsbCkge1xuICAgICAgICBkYXRhW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV1bc2Nhbm5lZFNjaGVtYXNJbmRleF0gPSB0aGlzLmVycm9ycy5zbGljZShzdGFydEVycm9yQ291bnQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcbn07XG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIChkYXRhLCBzY2hlbWEpIHtcbiAgICBpZiAodHlwZW9mIHNjaGVtYS5mb3JtYXQgIT09ICdzdHJpbmcnIHx8ICF0aGlzLmZvcm1hdFZhbGlkYXRvcnNbc2NoZW1hLmZvcm1hdF0pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBlcnJvck1lc3NhZ2UgPSB0aGlzLmZvcm1hdFZhbGlkYXRvcnNbc2NoZW1hLmZvcm1hdF0uY2FsbChudWxsLCBkYXRhLCBzY2hlbWEpO1xuICAgIGlmICh0eXBlb2YgZXJyb3JNZXNzYWdlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgZXJyb3JNZXNzYWdlID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLkZPUk1BVF9DVVNUT00sIHttZXNzYWdlOiBlcnJvck1lc3NhZ2V9LCAnJywgJy9mb3JtYXQnLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xuICAgIH0gZWxzZSBpZiAoZXJyb3JNZXNzYWdlICYmIHR5cGVvZiBlcnJvck1lc3NhZ2UgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuRk9STUFUX0NVU1RPTSwge21lc3NhZ2U6IGVycm9yTWVzc2FnZS5tZXNzYWdlIHx8IFwiP1wifSwgZXJyb3JNZXNzYWdlLmRhdGFQYXRoIHx8ICcnLCBlcnJvck1lc3NhZ2Uuc2NoZW1hUGF0aCB8fCBcIi9mb3JtYXRcIiwgbnVsbCwgZGF0YSwgc2NoZW1hKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVEZWZpbmVkS2V5d29yZHMgPSBmdW5jdGlvbiAoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5kZWZpbmVkS2V5d29yZHMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWFba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciB2YWxpZGF0aW9uRnVuY3Rpb25zID0gdGhpcy5kZWZpbmVkS2V5d29yZHNba2V5XTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWxpZGF0aW9uRnVuY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgZnVuYyA9IHZhbGlkYXRpb25GdW5jdGlvbnNbaV07XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYyhkYXRhLCBzY2hlbWFba2V5XSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiByZXN1bHQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5LRVlXT1JEX0NVU1RPTSwge1xuICAgICAgICAgICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogcmVzdWx0XG4gICAgICAgICAgICAgICAgfSwgJycsICcnLCBudWxsLCBkYXRhLCBzY2hlbWEpLnByZWZpeFdpdGgobnVsbCwga2V5KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0ICYmIHR5cGVvZiByZXN1bHQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvZGUgPSByZXN1bHQuY29kZTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghRXJyb3JDb2Rlc1tjb2RlXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmRlZmluZWQgZXJyb3IgY29kZSAodXNlIGRlZmluZUVycm9yKTogJyArIGNvZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvZGUgPSBFcnJvckNvZGVzW2NvZGVdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvZGUgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGUgPSBFcnJvckNvZGVzLktFWVdPUkRfQ1VTVE9NO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZVBhcmFtcyA9ICh0eXBlb2YgcmVzdWx0Lm1lc3NhZ2UgPT09ICdvYmplY3QnKSA/IHJlc3VsdC5tZXNzYWdlIDoge1xuICAgICAgICAgICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogcmVzdWx0Lm1lc3NhZ2UgfHwgXCI/XCJcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHZhciBzY2hlbWFQYXRoID0gcmVzdWx0LnNjaGVtYVBhdGggfHwgKFwiL1wiICsga2V5LnJlcGxhY2UoL34vZywgJ34wJykucmVwbGFjZSgvXFwvL2csICd+MScpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihjb2RlLCBtZXNzYWdlUGFyYW1zLCByZXN1bHQuZGF0YVBhdGggfHwgbnVsbCwgc2NoZW1hUGF0aCwgbnVsbCwgZGF0YSwgc2NoZW1hKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG5cbmZ1bmN0aW9uIHJlY3Vyc2l2ZUNvbXBhcmUoQSwgQikge1xuICAgIGlmIChBID09PSBCKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoQSAmJiBCICYmIHR5cGVvZiBBID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBCID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KEEpICE9PSBBcnJheS5pc0FycmF5KEIpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShBKSkge1xuICAgICAgICAgICAgaWYgKEEubGVuZ3RoICE9PSBCLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgQS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICghcmVjdXJzaXZlQ29tcGFyZShBW2ldLCBCW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGtleTtcbiAgICAgICAgICAgIGZvciAoa2V5IGluIEEpIHtcbiAgICAgICAgICAgICAgICBpZiAoQltrZXldID09PSB1bmRlZmluZWQgJiYgQVtrZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoa2V5IGluIEIpIHtcbiAgICAgICAgICAgICAgICBpZiAoQVtrZXldID09PSB1bmRlZmluZWQgJiYgQltrZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoa2V5IGluIEEpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXJlY3Vyc2l2ZUNvbXBhcmUoQVtrZXldLCBCW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVCYXNpYyA9IGZ1bmN0aW9uIHZhbGlkYXRlQmFzaWMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZVR5cGUoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpKSB7XG4gICAgICAgIHJldHVybiBlcnJvci5wcmVmaXhXaXRoKG51bGwsIFwidHlwZVwiKTtcbiAgICB9XG4gICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUVudW0oZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpKSB7XG4gICAgICAgIHJldHVybiBlcnJvci5wcmVmaXhXaXRoKG51bGwsIFwidHlwZVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZVR5cGUgPSBmdW5jdGlvbiB2YWxpZGF0ZVR5cGUoZGF0YSwgc2NoZW1hKSB7XG4gICAgaWYgKHNjaGVtYS50eXBlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBkYXRhVHlwZSA9IHR5cGVvZiBkYXRhO1xuICAgIGlmIChkYXRhID09PSBudWxsKSB7XG4gICAgICAgIGRhdGFUeXBlID0gXCJudWxsXCI7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgIGRhdGFUeXBlID0gXCJhcnJheVwiO1xuICAgIH1cbiAgICB2YXIgYWxsb3dlZFR5cGVzID0gc2NoZW1hLnR5cGU7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFsbG93ZWRUeXBlcykpIHtcbiAgICAgICAgYWxsb3dlZFR5cGVzID0gW2FsbG93ZWRUeXBlc107XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbGxvd2VkVHlwZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHR5cGUgPSBhbGxvd2VkVHlwZXNbaV07XG4gICAgICAgIGlmICh0eXBlID09PSBkYXRhVHlwZSB8fCAodHlwZSA9PT0gXCJpbnRlZ2VyXCIgJiYgZGF0YVR5cGUgPT09IFwibnVtYmVyXCIgJiYgKGRhdGEgJSAxID09PSAwKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuSU5WQUxJRF9UWVBFLCB7XG4gICAgICAgIHR5cGU6IGRhdGFUeXBlLFxuICAgICAgICBleHBlY3RlZDogYWxsb3dlZFR5cGVzLmpvaW4oXCIvXCIpXG4gICAgfSwgJycsICcnLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xufTtcblxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVFbnVtID0gZnVuY3Rpb24gdmFsaWRhdGVFbnVtKGRhdGEsIHNjaGVtYSkge1xuICAgIGlmIChzY2hlbWFbXCJlbnVtXCJdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NoZW1hW1wiZW51bVwiXS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZW51bVZhbCA9IHNjaGVtYVtcImVudW1cIl1baV07XG4gICAgICAgIGlmIChyZWN1cnNpdmVDb21wYXJlKGRhdGEsIGVudW1WYWwpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLkVOVU1fTUlTTUFUQ0gsIHt2YWx1ZTogKHR5cGVvZiBKU09OICE9PSAndW5kZWZpbmVkJykgPyBKU09OLnN0cmluZ2lmeShkYXRhKSA6IGRhdGF9LCAnJywgJycsIG51bGwsIGRhdGEsIHNjaGVtYSk7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU51bWVyaWMgPSBmdW5jdGlvbiB2YWxpZGF0ZU51bWVyaWMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHtcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZU11bHRpcGxlT2YoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXG4gICAgICAgIHx8IHRoaXMudmFsaWRhdGVNaW5NYXgoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXG4gICAgICAgIHx8IHRoaXMudmFsaWRhdGVOYU4oZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXG4gICAgICAgIHx8IG51bGw7XG59O1xuXG52YXIgQ0xPU0VfRU5PVUdIX0xPVyA9IE1hdGgucG93KDIsIC01MSk7XG52YXIgQ0xPU0VfRU5PVUdIX0hJR0ggPSAxIC0gQ0xPU0VfRU5PVUdIX0xPVztcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlTXVsdGlwbGVPZiA9IGZ1bmN0aW9uIHZhbGlkYXRlTXVsdGlwbGVPZihkYXRhLCBzY2hlbWEpIHtcbiAgICB2YXIgbXVsdGlwbGVPZiA9IHNjaGVtYS5tdWx0aXBsZU9mIHx8IHNjaGVtYS5kaXZpc2libGVCeTtcbiAgICBpZiAobXVsdGlwbGVPZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdmFyIHJlbWFpbmRlciA9IChkYXRhIC8gbXVsdGlwbGVPZikgJSAxO1xuICAgICAgICBpZiAocmVtYWluZGVyID49IENMT1NFX0VOT1VHSF9MT1cgJiYgcmVtYWluZGVyIDwgQ0xPU0VfRU5PVUdIX0hJR0gpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuTlVNQkVSX01VTFRJUExFX09GLCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGRhdGEsXG4gICAgICAgICAgICAgICAgbXVsdGlwbGVPZjogbXVsdGlwbGVPZlxuICAgICAgICAgICAgfSwgJycsICcnLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVNaW5NYXggPSBmdW5jdGlvbiB2YWxpZGF0ZU1pbk1heChkYXRhLCBzY2hlbWEpIHtcbiAgICBpZiAodHlwZW9mIGRhdGEgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChzY2hlbWEubWluaW11bSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChkYXRhIDwgc2NoZW1hLm1pbmltdW0pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuTlVNQkVSX01JTklNVU0sIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogZGF0YSxcbiAgICAgICAgICAgICAgICBtaW5pbXVtOiBzY2hlbWEubWluaW11bVxuICAgICAgICAgICAgfSwgJycsICcvbWluaW11bScsIG51bGwsIGRhdGEsIHNjaGVtYSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjaGVtYS5leGNsdXNpdmVNaW5pbXVtICYmIGRhdGEgPT09IHNjaGVtYS5taW5pbXVtKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk5VTUJFUl9NSU5JTVVNX0VYQ0xVU0lWRSwge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhLFxuICAgICAgICAgICAgICAgIG1pbmltdW06IHNjaGVtYS5taW5pbXVtXG4gICAgICAgICAgICB9LCAnJywgJy9leGNsdXNpdmVNaW5pbXVtJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2NoZW1hLm1heGltdW0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoZGF0YSA+IHNjaGVtYS5tYXhpbXVtKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk5VTUJFUl9NQVhJTVVNLCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGRhdGEsXG4gICAgICAgICAgICAgICAgbWF4aW11bTogc2NoZW1hLm1heGltdW1cbiAgICAgICAgICAgIH0sICcnLCAnL21heGltdW0nLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzY2hlbWEuZXhjbHVzaXZlTWF4aW11bSAmJiBkYXRhID09PSBzY2hlbWEubWF4aW11bSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5OVU1CRVJfTUFYSU1VTV9FWENMVVNJVkUsIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogZGF0YSxcbiAgICAgICAgICAgICAgICBtYXhpbXVtOiBzY2hlbWEubWF4aW11bVxuICAgICAgICAgICAgfSwgJycsICcvZXhjbHVzaXZlTWF4aW11bScsIG51bGwsIGRhdGEsIHNjaGVtYSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU5hTiA9IGZ1bmN0aW9uIHZhbGlkYXRlTmFOKGRhdGEsIHNjaGVtYSkge1xuICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKGlzTmFOKGRhdGEpID09PSB0cnVlIHx8IGRhdGEgPT09IEluZmluaXR5IHx8IGRhdGEgPT09IC1JbmZpbml0eSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk5VTUJFUl9OT1RfQV9OVU1CRVIsIHt2YWx1ZTogZGF0YX0sICcnLCAnL3R5cGUnLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlU3RyaW5nID0gZnVuY3Rpb24gdmFsaWRhdGVTdHJpbmcoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHtcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZVN0cmluZ0xlbmd0aChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZVN0cmluZ1BhdHRlcm4oZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXG4gICAgICAgIHx8IG51bGw7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZVN0cmluZ0xlbmd0aCA9IGZ1bmN0aW9uIHZhbGlkYXRlU3RyaW5nTGVuZ3RoKGRhdGEsIHNjaGVtYSkge1xuICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKHNjaGVtYS5taW5MZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPCBzY2hlbWEubWluTGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLlNUUklOR19MRU5HVEhfU0hPUlQsIHtcbiAgICAgICAgICAgICAgICBsZW5ndGg6IGRhdGEubGVuZ3RoLFxuICAgICAgICAgICAgICAgIG1pbmltdW06IHNjaGVtYS5taW5MZW5ndGhcbiAgICAgICAgICAgIH0sICcnLCAnL21pbkxlbmd0aCcsIG51bGwsIGRhdGEsIHNjaGVtYSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNjaGVtYS5tYXhMZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPiBzY2hlbWEubWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLlNUUklOR19MRU5HVEhfTE9ORywge1xuICAgICAgICAgICAgICAgIGxlbmd0aDogZGF0YS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgbWF4aW11bTogc2NoZW1hLm1heExlbmd0aFxuICAgICAgICAgICAgfSwgJycsICcvbWF4TGVuZ3RoJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlU3RyaW5nUGF0dGVybiA9IGZ1bmN0aW9uIHZhbGlkYXRlU3RyaW5nUGF0dGVybihkYXRhLCBzY2hlbWEpIHtcbiAgICBpZiAodHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgfHwgKHR5cGVvZiBzY2hlbWEucGF0dGVybiAhPT0gXCJzdHJpbmdcIiAmJiAhKHNjaGVtYS5wYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwKSkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciByZWdleHA7XG4gICAgaWYgKHNjaGVtYS5wYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgIHJlZ2V4cCA9IHNjaGVtYS5wYXR0ZXJuO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIGJvZHksIGZsYWdzID0gJyc7XG4gICAgICAgIC8vIENoZWNrIGZvciByZWd1bGFyIGV4cHJlc3Npb24gbGl0ZXJhbHNcbiAgICAgICAgLy8gQHNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtNy44LjVcbiAgICAgICAgdmFyIGxpdGVyYWwgPSBzY2hlbWEucGF0dGVybi5tYXRjaCgvXlxcLyguKylcXC8oW2ltZ10qKSQvKTtcbiAgICAgICAgaWYgKGxpdGVyYWwpIHtcbiAgICAgICAgICAgIGJvZHkgPSBsaXRlcmFsWzFdO1xuICAgICAgICAgICAgZmxhZ3MgPSBsaXRlcmFsWzJdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYm9keSA9IHNjaGVtYS5wYXR0ZXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlZ2V4cCA9IG5ldyBSZWdFeHAoYm9keSwgZmxhZ3MpO1xuICAgIH1cbiAgICBpZiAoIXJlZ2V4cC50ZXN0KGRhdGEpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuU1RSSU5HX1BBVFRFUk4sIHtwYXR0ZXJuOiBzY2hlbWEucGF0dGVybn0sICcnLCAnL3BhdHRlcm4nLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQXJyYXkgPSBmdW5jdGlvbiB2YWxpZGF0ZUFycmF5KGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZUFycmF5TGVuZ3RoKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlQXJyYXlVbmlxdWVJdGVtcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZUFycmF5SXRlbXMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXG4gICAgICAgIHx8IG51bGw7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUFycmF5TGVuZ3RoID0gZnVuY3Rpb24gdmFsaWRhdGVBcnJheUxlbmd0aChkYXRhLCBzY2hlbWEpIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKHNjaGVtYS5taW5JdGVtcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCA8IHNjaGVtYS5taW5JdGVtcykge1xuICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuQVJSQVlfTEVOR1RIX1NIT1JULCB7XG4gICAgICAgICAgICAgICAgbGVuZ3RoOiBkYXRhLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBtaW5pbXVtOiBzY2hlbWEubWluSXRlbXNcbiAgICAgICAgICAgIH0sICcnLCAnL21pbkl0ZW1zJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2NoZW1hLm1heEl0ZW1zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoID4gc2NoZW1hLm1heEl0ZW1zKSB7XG4gICAgICAgICAgICBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5BUlJBWV9MRU5HVEhfTE9ORywge1xuICAgICAgICAgICAgICAgIGxlbmd0aDogZGF0YS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgbWF4aW11bTogc2NoZW1hLm1heEl0ZW1zXG4gICAgICAgICAgICB9LCAnJywgJy9tYXhJdGVtcycsIG51bGwsIGRhdGEsIHNjaGVtYSk7XG4gICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUFycmF5VW5pcXVlSXRlbXMgPSBmdW5jdGlvbiB2YWxpZGF0ZUFycmF5VW5pcXVlSXRlbXMoZGF0YSwgc2NoZW1hKSB7XG4gICAgaWYgKHNjaGVtYS51bmlxdWVJdGVtcykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSBpICsgMTsgaiA8IGRhdGEubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBpZiAocmVjdXJzaXZlQ29tcGFyZShkYXRhW2ldLCBkYXRhW2pdKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuQVJSQVlfVU5JUVVFLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaDE6IGksXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaDI6IGpcbiAgICAgICAgICAgICAgICAgICAgfSwgJycsICcvdW5pcXVlSXRlbXMnLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQXJyYXlJdGVtcyA9IGZ1bmN0aW9uIHZhbGlkYXRlQXJyYXlJdGVtcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkge1xuICAgIGlmIChzY2hlbWEuaXRlbXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGVycm9yLCBpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHNjaGVtYS5pdGVtcykpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpIDwgc2NoZW1hLml0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YVtpXSwgc2NoZW1hLml0ZW1zW2ldLCBbaV0sIFtcIml0ZW1zXCIsIGldLCBkYXRhUG9pbnRlclBhdGggKyBcIi9cIiArIGkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNjaGVtYS5hZGRpdGlvbmFsSXRlbXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hLmFkZGl0aW9uYWxJdGVtcyA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzY2hlbWEuYWRkaXRpb25hbEl0ZW1zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9ICh0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuQVJSQVlfQURESVRJT05BTF9JVEVNUywge30sICcvJyArIGksICcvYWRkaXRpb25hbEl0ZW1zJywgbnVsbCwgZGF0YSwgc2NoZW1hKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhW2ldLCBzY2hlbWEuYWRkaXRpb25hbEl0ZW1zLCBbaV0sIFtcImFkZGl0aW9uYWxJdGVtc1wiXSwgZGF0YVBvaW50ZXJQYXRoICsgXCIvXCIgKyBpKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YVtpXSwgc2NoZW1hLml0ZW1zLCBbaV0sIFtcIml0ZW1zXCJdLCBkYXRhUG9pbnRlclBhdGggKyBcIi9cIiArIGkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVPYmplY3QgPSBmdW5jdGlvbiB2YWxpZGF0ZU9iamVjdChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkge1xuICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gXCJvYmplY3RcIiB8fCBkYXRhID09PSBudWxsIHx8IEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnZhbGlkYXRlT2JqZWN0TWluTWF4UHJvcGVydGllcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZU9iamVjdFJlcXVpcmVkUHJvcGVydGllcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZU9iamVjdFByb3BlcnRpZXMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXG4gICAgICAgIHx8IHRoaXMudmFsaWRhdGVPYmplY3REZXBlbmRlbmNpZXMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXG4gICAgICAgIHx8IG51bGw7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdE1pbk1heFByb3BlcnRpZXMgPSBmdW5jdGlvbiB2YWxpZGF0ZU9iamVjdE1pbk1heFByb3BlcnRpZXMoZGF0YSwgc2NoZW1hKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKTtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKHNjaGVtYS5taW5Qcm9wZXJ0aWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGtleXMubGVuZ3RoIDwgc2NoZW1hLm1pblByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk9CSkVDVF9QUk9QRVJUSUVTX01JTklNVU0sIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUNvdW50OiBrZXlzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBtaW5pbXVtOiBzY2hlbWEubWluUHJvcGVydGllc1xuICAgICAgICAgICAgfSwgJycsICcvbWluUHJvcGVydGllcycsIG51bGwsIGRhdGEsIHNjaGVtYSk7XG4gICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNjaGVtYS5tYXhQcm9wZXJ0aWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGtleXMubGVuZ3RoID4gc2NoZW1hLm1heFByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk9CSkVDVF9QUk9QRVJUSUVTX01BWElNVU0sIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUNvdW50OiBrZXlzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBtYXhpbXVtOiBzY2hlbWEubWF4UHJvcGVydGllc1xuICAgICAgICAgICAgfSwgJycsICcvbWF4UHJvcGVydGllcycsIG51bGwsIGRhdGEsIHNjaGVtYSk7XG4gICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdFJlcXVpcmVkUHJvcGVydGllcyA9IGZ1bmN0aW9uIHZhbGlkYXRlT2JqZWN0UmVxdWlyZWRQcm9wZXJ0aWVzKGRhdGEsIHNjaGVtYSkge1xuICAgIGlmIChzY2hlbWEucmVxdWlyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjaGVtYS5yZXF1aXJlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGtleSA9IHNjaGVtYS5yZXF1aXJlZFtpXTtcbiAgICAgICAgICAgIGlmIChkYXRhW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5PQkpFQ1RfUkVRVUlSRUQsIHtrZXk6IGtleX0sICcnLCAnL3JlcXVpcmVkLycgKyBpLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVPYmplY3RQcm9wZXJ0aWVzID0gZnVuY3Rpb24gdmFsaWRhdGVPYmplY3RQcm9wZXJ0aWVzKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgIHZhciBrZXlQb2ludGVyUGF0aCA9IGRhdGFQb2ludGVyUGF0aCArIFwiL1wiICsga2V5LnJlcGxhY2UoL34vZywgJ34wJykucmVwbGFjZSgvXFwvL2csICd+MScpO1xuICAgICAgICB2YXIgZm91bmRNYXRjaCA9IGZhbHNlO1xuICAgICAgICBpZiAoc2NoZW1hLnByb3BlcnRpZXMgIT09IHVuZGVmaW5lZCAmJiBzY2hlbWEucHJvcGVydGllc1trZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGZvdW5kTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhW2tleV0sIHNjaGVtYS5wcm9wZXJ0aWVzW2tleV0sIFtrZXldLCBbXCJwcm9wZXJ0aWVzXCIsIGtleV0sIGtleVBvaW50ZXJQYXRoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NoZW1hLnBhdHRlcm5Qcm9wZXJ0aWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGZvciAodmFyIHBhdHRlcm5LZXkgaW4gc2NoZW1hLnBhdHRlcm5Qcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAocGF0dGVybktleSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlZ2V4cC50ZXN0KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm91bmRNYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YVtrZXldLCBzY2hlbWEucGF0dGVyblByb3BlcnRpZXNbcGF0dGVybktleV0sIFtrZXldLCBbXCJwYXR0ZXJuUHJvcGVydGllc1wiLCBwYXR0ZXJuS2V5XSwga2V5UG9pbnRlclBhdGgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFmb3VuZE1hdGNoKSB7XG4gICAgICAgICAgICBpZiAoc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzW2tleVBvaW50ZXJQYXRoXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzW2tleVBvaW50ZXJQYXRoXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWEuYWRkaXRpb25hbFByb3BlcnRpZXMgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5PQkpFQ1RfQURESVRJT05BTF9QUk9QRVJUSUVTLCB7a2V5OiBrZXl9LCAnJywgJy9hZGRpdGlvbmFsUHJvcGVydGllcycsIG51bGwsIGRhdGEsIHNjaGVtYSkucHJlZml4V2l0aChrZXksIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhW2tleV0sIHNjaGVtYS5hZGRpdGlvbmFsUHJvcGVydGllcywgW2tleV0sIFtcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCJdLCBrZXlQb2ludGVyUGF0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzICYmICF0aGlzLmtub3duUHJvcGVydHlQYXRoc1trZXlQb2ludGVyUGF0aF0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzW2tleVBvaW50ZXJQYXRoXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRoc1trZXlQb2ludGVyUGF0aF0gPSB0cnVlO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHNba2V5UG9pbnRlclBhdGhdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVPYmplY3REZXBlbmRlbmNpZXMgPSBmdW5jdGlvbiB2YWxpZGF0ZU9iamVjdERlcGVuZGVuY2llcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoc2NoZW1hLmRlcGVuZGVuY2llcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGZvciAodmFyIGRlcEtleSBpbiBzY2hlbWEuZGVwZW5kZW5jaWVzKSB7XG4gICAgICAgICAgICBpZiAoZGF0YVtkZXBLZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVwID0gc2NoZW1hLmRlcGVuZGVuY2llc1tkZXBLZXldO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZGVwID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhW2RlcF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuT0JKRUNUX0RFUEVOREVOQ1lfS0VZLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBkZXBLZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlzc2luZzogZGVwXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAnJywgJycsIG51bGwsIGRhdGEsIHNjaGVtYSkucHJlZml4V2l0aChudWxsLCBkZXBLZXkpLnByZWZpeFdpdGgobnVsbCwgXCJkZXBlbmRlbmNpZXNcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZGVwKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlcXVpcmVkS2V5ID0gZGVwW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFbcmVxdWlyZWRLZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5PQkpFQ1RfREVQRU5ERU5DWV9LRVksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBkZXBLZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pc3Npbmc6IHJlcXVpcmVkS2V5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgJycsICcvJyArIGksIG51bGwsIGRhdGEsIHNjaGVtYSkucHJlZml4V2l0aChudWxsLCBkZXBLZXkpLnByZWZpeFdpdGgobnVsbCwgXCJkZXBlbmRlbmNpZXNcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGEsIGRlcCwgW10sIFtcImRlcGVuZGVuY2llc1wiLCBkZXBLZXldLCBkYXRhUG9pbnRlclBhdGgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUNvbWJpbmF0aW9ucyA9IGZ1bmN0aW9uIHZhbGlkYXRlQ29tYmluYXRpb25zKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdGVBbGxPZihkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZUFueU9mKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlT25lT2YoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXG4gICAgICAgIHx8IHRoaXMudmFsaWRhdGVOb3QoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXG4gICAgICAgIHx8IG51bGw7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUFsbE9mID0gZnVuY3Rpb24gdmFsaWRhdGVBbGxPZihkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkge1xuICAgIGlmIChzY2hlbWEuYWxsT2YgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGVycm9yO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NoZW1hLmFsbE9mLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBzdWJTY2hlbWEgPSBzY2hlbWEuYWxsT2ZbaV07XG4gICAgICAgIGlmIChlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YSwgc3ViU2NoZW1hLCBbXSwgW1wiYWxsT2ZcIiwgaV0sIGRhdGFQb2ludGVyUGF0aCkpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQW55T2YgPSBmdW5jdGlvbiB2YWxpZGF0ZUFueU9mKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XG4gICAgaWYgKHNjaGVtYS5hbnlPZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgZXJyb3JzID0gW107XG4gICAgdmFyIHN0YXJ0RXJyb3JDb3VudCA9IHRoaXMuZXJyb3JzLmxlbmd0aDtcbiAgICB2YXIgb2xkVW5rbm93blByb3BlcnR5UGF0aHMsIG9sZEtub3duUHJvcGVydHlQYXRocztcbiAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzID0gdGhpcy51bmtub3duUHJvcGVydHlQYXRocztcbiAgICAgICAgb2xkS25vd25Qcm9wZXJ0eVBhdGhzID0gdGhpcy5rbm93blByb3BlcnR5UGF0aHM7XG4gICAgfVxuICAgIHZhciBlcnJvckF0RW5kID0gdHJ1ZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjaGVtYS5hbnlPZi5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzID0ge307XG4gICAgICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRocyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdWJTY2hlbWEgPSBzY2hlbWEuYW55T2ZbaV07XG5cbiAgICAgICAgdmFyIGVycm9yQ291bnQgPSB0aGlzLmVycm9ycy5sZW5ndGg7XG4gICAgICAgIHZhciBlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YSwgc3ViU2NoZW1hLCBbXSwgW1wiYW55T2ZcIiwgaV0sIGRhdGFQb2ludGVyUGF0aCk7XG5cbiAgICAgICAgaWYgKGVycm9yID09PSBudWxsICYmIGVycm9yQ291bnQgPT09IHRoaXMuZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSB0aGlzLmVycm9ycy5zbGljZSgwLCBzdGFydEVycm9yQ291bnQpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga25vd25LZXkgaW4gdGhpcy5rbm93blByb3BlcnR5UGF0aHMpIHtcbiAgICAgICAgICAgICAgICAgICAgb2xkS25vd25Qcm9wZXJ0eVBhdGhzW2tub3duS2V5XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBvbGRVbmtub3duUHJvcGVydHlQYXRoc1trbm93bktleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIHVua25vd25LZXkgaW4gdGhpcy51bmtub3duUHJvcGVydHlQYXRocykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW9sZEtub3duUHJvcGVydHlQYXRoc1t1bmtub3duS2V5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2xkVW5rbm93blByb3BlcnR5UGF0aHNbdW5rbm93bktleV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gY29udGludWUgbG9vcGluZyBzbyB3ZSBjYXRjaCBhbGwgdGhlIHByb3BlcnR5IGRlZmluaXRpb25zLCBidXQgd2UgZG9uJ3Qgd2FudCB0byByZXR1cm4gYW4gZXJyb3JcbiAgICAgICAgICAgICAgICBlcnJvckF0RW5kID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyb3IucHJlZml4V2l0aChudWxsLCBcIlwiICsgaSkucHJlZml4V2l0aChudWxsLCBcImFueU9mXCIpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMgPSBvbGRVbmtub3duUHJvcGVydHlQYXRocztcbiAgICAgICAgdGhpcy5rbm93blByb3BlcnR5UGF0aHMgPSBvbGRLbm93blByb3BlcnR5UGF0aHM7XG4gICAgfVxuICAgIGlmIChlcnJvckF0RW5kKSB7XG4gICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQodGhpcy5lcnJvcnMuc2xpY2Uoc3RhcnRFcnJvckNvdW50KSk7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuc2xpY2UoMCwgc3RhcnRFcnJvckNvdW50KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5BTllfT0ZfTUlTU0lORywge30sIFwiXCIsIFwiL2FueU9mXCIsIGVycm9ycywgZGF0YSwgc2NoZW1hKTtcbiAgICB9XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU9uZU9mID0gZnVuY3Rpb24gdmFsaWRhdGVPbmVPZihkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkge1xuICAgIGlmIChzY2hlbWEub25lT2YgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIHZhbGlkSW5kZXggPSBudWxsO1xuICAgIHZhciBlcnJvcnMgPSBbXTtcbiAgICB2YXIgc3RhcnRFcnJvckNvdW50ID0gdGhpcy5lcnJvcnMubGVuZ3RoO1xuICAgIHZhciBvbGRVbmtub3duUHJvcGVydHlQYXRocywgb2xkS25vd25Qcm9wZXJ0eVBhdGhzO1xuICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICAgICAgb2xkVW5rbm93blByb3BlcnR5UGF0aHMgPSB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzO1xuICAgICAgICBvbGRLbm93blByb3BlcnR5UGF0aHMgPSB0aGlzLmtub3duUHJvcGVydHlQYXRocztcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY2hlbWEub25lT2YubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykge1xuICAgICAgICAgICAgdGhpcy51bmtub3duUHJvcGVydHlQYXRocyA9IHt9O1xuICAgICAgICAgICAgdGhpcy5rbm93blByb3BlcnR5UGF0aHMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3ViU2NoZW1hID0gc2NoZW1hLm9uZU9mW2ldO1xuXG4gICAgICAgIHZhciBlcnJvckNvdW50ID0gdGhpcy5lcnJvcnMubGVuZ3RoO1xuICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGEsIHN1YlNjaGVtYSwgW10sIFtcIm9uZU9mXCIsIGldLCBkYXRhUG9pbnRlclBhdGgpO1xuXG4gICAgICAgIGlmIChlcnJvciA9PT0gbnVsbCAmJiBlcnJvckNvdW50ID09PSB0aGlzLmVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICh2YWxpZEluZGV4ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmFsaWRJbmRleCA9IGk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuc2xpY2UoMCwgc3RhcnRFcnJvckNvdW50KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk9ORV9PRl9NVUxUSVBMRSwge1xuICAgICAgICAgICAgICAgICAgICBpbmRleDE6IHZhbGlkSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIGluZGV4MjogaVxuICAgICAgICAgICAgICAgIH0sIFwiXCIsIFwiL29uZU9mXCIsIG51bGwsIGRhdGEsIHNjaGVtYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga25vd25LZXkgaW4gdGhpcy5rbm93blByb3BlcnR5UGF0aHMpIHtcbiAgICAgICAgICAgICAgICAgICAgb2xkS25vd25Qcm9wZXJ0eVBhdGhzW2tub3duS2V5XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBvbGRVbmtub3duUHJvcGVydHlQYXRoc1trbm93bktleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIHVua25vd25LZXkgaW4gdGhpcy51bmtub3duUHJvcGVydHlQYXRocykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW9sZEtub3duUHJvcGVydHlQYXRoc1t1bmtub3duS2V5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2xkVW5rbm93blByb3BlcnR5UGF0aHNbdW5rbm93bktleV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykge1xuICAgICAgICB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzID0gb2xkVW5rbm93blByb3BlcnR5UGF0aHM7XG4gICAgICAgIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzID0gb2xkS25vd25Qcm9wZXJ0eVBhdGhzO1xuICAgIH1cbiAgICBpZiAodmFsaWRJbmRleCA9PT0gbnVsbCkge1xuICAgICAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KHRoaXMuZXJyb3JzLnNsaWNlKHN0YXJ0RXJyb3JDb3VudCkpO1xuICAgICAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLnNsaWNlKDAsIHN0YXJ0RXJyb3JDb3VudCk7XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuT05FX09GX01JU1NJTkcsIHt9LCBcIlwiLCBcIi9vbmVPZlwiLCBlcnJvcnMsIGRhdGEsIHNjaGVtYSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5lcnJvcnMgPSB0aGlzLmVycm9ycy5zbGljZSgwLCBzdGFydEVycm9yQ291bnQpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlTm90ID0gZnVuY3Rpb24gdmFsaWRhdGVOb3QoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHtcbiAgICBpZiAoc2NoZW1hLm5vdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgb2xkRXJyb3JDb3VudCA9IHRoaXMuZXJyb3JzLmxlbmd0aDtcbiAgICB2YXIgb2xkVW5rbm93blByb3BlcnR5UGF0aHMsIG9sZEtub3duUHJvcGVydHlQYXRocztcbiAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzID0gdGhpcy51bmtub3duUHJvcGVydHlQYXRocztcbiAgICAgICAgb2xkS25vd25Qcm9wZXJ0eVBhdGhzID0gdGhpcy5rbm93blByb3BlcnR5UGF0aHM7XG4gICAgICAgIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMgPSB7fTtcbiAgICAgICAgdGhpcy5rbm93blByb3BlcnR5UGF0aHMgPSB7fTtcbiAgICB9XG4gICAgdmFyIGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhLCBzY2hlbWEubm90LCBudWxsLCBudWxsLCBkYXRhUG9pbnRlclBhdGgpO1xuICAgIHZhciBub3RFcnJvcnMgPSB0aGlzLmVycm9ycy5zbGljZShvbGRFcnJvckNvdW50KTtcbiAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLnNsaWNlKDAsIG9sZEVycm9yQ291bnQpO1xuICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICAgICAgdGhpcy51bmtub3duUHJvcGVydHlQYXRocyA9IG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzO1xuICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRocyA9IG9sZEtub3duUHJvcGVydHlQYXRocztcbiAgICB9XG4gICAgaWYgKGVycm9yID09PSBudWxsICYmIG5vdEVycm9ycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5OT1RfUEFTU0VELCB7fSwgXCJcIiwgXCIvbm90XCIsIG51bGwsIGRhdGEsIHNjaGVtYSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVIeXBlcm1lZGlhID0gZnVuY3Rpb24gdmFsaWRhdGVDb21iaW5hdGlvbnMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHtcbiAgICBpZiAoIXNjaGVtYS5saW5rcykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGVycm9yO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NoZW1hLmxpbmtzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBsZG8gPSBzY2hlbWEubGlua3NbaV07XG4gICAgICAgIGlmIChsZG8ucmVsID09PSBcImRlc2NyaWJlZGJ5XCIpIHtcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9IG5ldyBVcmlUZW1wbGF0ZShsZG8uaHJlZik7XG4gICAgICAgICAgICB2YXIgYWxsUHJlc2VudCA9IHRydWU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRlbXBsYXRlLnZhck5hbWVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEodGVtcGxhdGUudmFyTmFtZXNbal0gaW4gZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxsUHJlc2VudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWxsUHJlc2VudCkge1xuICAgICAgICAgICAgICAgIHZhciBzY2hlbWFVcmwgPSB0ZW1wbGF0ZS5maWxsRnJvbU9iamVjdChkYXRhKTtcbiAgICAgICAgICAgICAgICB2YXIgc3ViU2NoZW1hID0ge1wiJHJlZlwiOiBzY2hlbWFVcmx9O1xuICAgICAgICAgICAgICAgIGlmIChlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YSwgc3ViU2NoZW1hLCBbXSwgW1wibGlua3NcIiwgaV0sIGRhdGFQb2ludGVyUGF0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8vIHBhcnNlVVJJKCkgYW5kIHJlc29sdmVVcmwoKSBhcmUgZnJvbSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS8xMDg4ODUwXG4vLyAgIC0gIHJlbGVhc2VkIGFzIHB1YmxpYyBkb21haW4gYnkgYXV0aG9yIChcIllhZmZsZVwiKSAtIHNlZSBjb21tZW50cyBvbiBnaXN0XG5cbmZ1bmN0aW9uIHBhcnNlVVJJKHVybCkge1xuICAgIHZhciBtID0gU3RyaW5nKHVybCkucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpLm1hdGNoKC9eKFteOlxcLz8jXSs6KT8oXFwvXFwvKD86W146QF0qKD86OlteOkBdKik/QCk/KChbXjpcXC8/I10qKSg/OjooXFxkKikpPykpPyhbXj8jXSopKFxcP1teI10qKT8oI1tcXHNcXFNdKik/Lyk7XG4gICAgLy8gYXV0aG9yaXR5ID0gJy8vJyArIHVzZXIgKyAnOicgKyBwYXNzICdAJyArIGhvc3RuYW1lICsgJzonIHBvcnRcbiAgICByZXR1cm4gKG0gPyB7XG4gICAgICAgIGhyZWY6IG1bMF0gfHwgJycsXG4gICAgICAgIHByb3RvY29sOiBtWzFdIHx8ICcnLFxuICAgICAgICBhdXRob3JpdHk6IG1bMl0gfHwgJycsXG4gICAgICAgIGhvc3Q6IG1bM10gfHwgJycsXG4gICAgICAgIGhvc3RuYW1lOiBtWzRdIHx8ICcnLFxuICAgICAgICBwb3J0OiBtWzVdIHx8ICcnLFxuICAgICAgICBwYXRobmFtZTogbVs2XSB8fCAnJyxcbiAgICAgICAgc2VhcmNoOiBtWzddIHx8ICcnLFxuICAgICAgICBoYXNoOiBtWzhdIHx8ICcnXG4gICAgfSA6IG51bGwpO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlVXJsKGJhc2UsIGhyZWYpIHsvLyBSRkMgMzk4NlxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlRG90U2VnbWVudHMoaW5wdXQpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgICBpbnB1dC5yZXBsYWNlKC9eKFxcLlxcLj8oXFwvfCQpKSsvLCAnJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXC8oXFwuKFxcL3wkKSkrL2csICcvJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXC9cXC5cXC4kLywgJy8uLi8nKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcLz9bXlxcL10qL2csIGZ1bmN0aW9uIChwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHAgPT09ICcvLi4nKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5wb3AoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQucHVzaChwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG91dHB1dC5qb2luKCcnKS5yZXBsYWNlKC9eXFwvLywgaW5wdXQuY2hhckF0KDApID09PSAnLycgPyAnLycgOiAnJyk7XG4gICAgfVxuXG4gICAgaHJlZiA9IHBhcnNlVVJJKGhyZWYgfHwgJycpO1xuICAgIGJhc2UgPSBwYXJzZVVSSShiYXNlIHx8ICcnKTtcblxuICAgIHJldHVybiAhaHJlZiB8fCAhYmFzZSA/IG51bGwgOiAoaHJlZi5wcm90b2NvbCB8fCBiYXNlLnByb3RvY29sKSArXG4gICAgKGhyZWYucHJvdG9jb2wgfHwgaHJlZi5hdXRob3JpdHkgPyBocmVmLmF1dGhvcml0eSA6IGJhc2UuYXV0aG9yaXR5KSArXG4gICAgcmVtb3ZlRG90U2VnbWVudHMoaHJlZi5wcm90b2NvbCB8fCBocmVmLmF1dGhvcml0eSB8fCBocmVmLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nID8gaHJlZi5wYXRobmFtZSA6IChocmVmLnBhdGhuYW1lID8gKChiYXNlLmF1dGhvcml0eSAmJiAhYmFzZS5wYXRobmFtZSA/ICcvJyA6ICcnKSArIGJhc2UucGF0aG5hbWUuc2xpY2UoMCwgYmFzZS5wYXRobmFtZS5sYXN0SW5kZXhPZignLycpICsgMSkgKyBocmVmLnBhdGhuYW1lKSA6IGJhc2UucGF0aG5hbWUpKSArXG4gICAgKGhyZWYucHJvdG9jb2wgfHwgaHJlZi5hdXRob3JpdHkgfHwgaHJlZi5wYXRobmFtZSA/IGhyZWYuc2VhcmNoIDogKGhyZWYuc2VhcmNoIHx8IGJhc2Uuc2VhcmNoKSkgK1xuICAgIGhyZWYuaGFzaDtcbn1cblxuZnVuY3Rpb24gZ2V0RG9jdW1lbnRVcmkodXJpKSB7XG4gICAgcmV0dXJuIHVyaS5zcGxpdCgnIycpWzBdO1xufVxuXG5mdW5jdGlvbiBub3JtU2NoZW1hKHNjaGVtYSwgYmFzZVVyaSkge1xuICAgIGlmIChzY2hlbWEgJiYgdHlwZW9mIHNjaGVtYSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBpZiAoYmFzZVVyaSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBiYXNlVXJpID0gc2NoZW1hLmlkO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzY2hlbWEuaWQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGJhc2VVcmkgPSByZXNvbHZlVXJsKGJhc2VVcmksIHNjaGVtYS5pZCk7XG4gICAgICAgICAgICBzY2hlbWEuaWQgPSBiYXNlVXJpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNjaGVtYSkpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NoZW1hLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbm9ybVNjaGVtYShzY2hlbWFbaV0sIGJhc2VVcmkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWFbJyRyZWYnXSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHNjaGVtYVsnJHJlZiddID0gcmVzb2x2ZVVybChiYXNlVXJpLCBzY2hlbWFbJyRyZWYnXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gc2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleSAhPT0gXCJlbnVtXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9ybVNjaGVtYShzY2hlbWFba2V5XSwgYmFzZVVyaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0RXJyb3JSZXBvcnRlcihsYW5ndWFnZSkge1xuICAgIGxhbmd1YWdlID0gbGFuZ3VhZ2UgfHwgJ2VuJztcblxuICAgIHZhciBlcnJvck1lc3NhZ2VzID0gbGFuZ3VhZ2VzW2xhbmd1YWdlXTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgdmFyIG1lc3NhZ2VUZW1wbGF0ZSA9IGVycm9yTWVzc2FnZXNbZXJyb3IuY29kZV0gfHwgRXJyb3JNZXNzYWdlc0RlZmF1bHRbZXJyb3IuY29kZV07XG4gICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZVRlbXBsYXRlICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIFwiVW5rbm93biBlcnJvciBjb2RlIFwiICsgZXJyb3IuY29kZSArIFwiOiBcIiArIEpTT04uc3RyaW5naWZ5KGVycm9yLm1lc3NhZ2VQYXJhbXMpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtZXNzYWdlUGFyYW1zID0gZXJyb3IucGFyYW1zO1xuICAgICAgICAvLyBBZGFwdGVkIGZyb20gQ3JvY2tmb3JkJ3Mgc3VwcGxhbnQoKVxuICAgICAgICByZXR1cm4gbWVzc2FnZVRlbXBsYXRlLnJlcGxhY2UoL1xceyhbXnt9XSopXFx9L2csIGZ1bmN0aW9uICh3aG9sZSwgdmFyTmFtZSkge1xuICAgICAgICAgICAgdmFyIHN1YlZhbHVlID0gbWVzc2FnZVBhcmFtc1t2YXJOYW1lXTtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2Ygc3ViVmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBzdWJWYWx1ZSA9PT0gJ251bWJlcicgPyBzdWJWYWx1ZSA6IHdob2xlO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuXG52YXIgRXJyb3JDb2RlcyA9IHtcbiAgICBJTlZBTElEX1RZUEU6IDAsXG4gICAgRU5VTV9NSVNNQVRDSDogMSxcbiAgICBBTllfT0ZfTUlTU0lORzogMTAsXG4gICAgT05FX09GX01JU1NJTkc6IDExLFxuICAgIE9ORV9PRl9NVUxUSVBMRTogMTIsXG4gICAgTk9UX1BBU1NFRDogMTMsXG4gICAgLy8gTnVtZXJpYyBlcnJvcnNcbiAgICBOVU1CRVJfTVVMVElQTEVfT0Y6IDEwMCxcbiAgICBOVU1CRVJfTUlOSU1VTTogMTAxLFxuICAgIE5VTUJFUl9NSU5JTVVNX0VYQ0xVU0lWRTogMTAyLFxuICAgIE5VTUJFUl9NQVhJTVVNOiAxMDMsXG4gICAgTlVNQkVSX01BWElNVU1fRVhDTFVTSVZFOiAxMDQsXG4gICAgTlVNQkVSX05PVF9BX05VTUJFUjogMTA1LFxuICAgIC8vIFN0cmluZyBlcnJvcnNcbiAgICBTVFJJTkdfTEVOR1RIX1NIT1JUOiAyMDAsXG4gICAgU1RSSU5HX0xFTkdUSF9MT05HOiAyMDEsXG4gICAgU1RSSU5HX1BBVFRFUk46IDIwMixcbiAgICAvLyBPYmplY3QgZXJyb3JzXG4gICAgT0JKRUNUX1BST1BFUlRJRVNfTUlOSU1VTTogMzAwLFxuICAgIE9CSkVDVF9QUk9QRVJUSUVTX01BWElNVU06IDMwMSxcbiAgICBPQkpFQ1RfUkVRVUlSRUQ6IDMwMixcbiAgICBPQkpFQ1RfQURESVRJT05BTF9QUk9QRVJUSUVTOiAzMDMsXG4gICAgT0JKRUNUX0RFUEVOREVOQ1lfS0VZOiAzMDQsXG4gICAgLy8gQXJyYXkgZXJyb3JzXG4gICAgQVJSQVlfTEVOR1RIX1NIT1JUOiA0MDAsXG4gICAgQVJSQVlfTEVOR1RIX0xPTkc6IDQwMSxcbiAgICBBUlJBWV9VTklRVUU6IDQwMixcbiAgICBBUlJBWV9BRERJVElPTkFMX0lURU1TOiA0MDMsXG4gICAgLy8gQ3VzdG9tL3VzZXItZGVmaW5lZCBlcnJvcnNcbiAgICBGT1JNQVRfQ1VTVE9NOiA1MDAsXG4gICAgS0VZV09SRF9DVVNUT006IDUwMSxcbiAgICAvLyBTY2hlbWEgc3RydWN0dXJlXG4gICAgQ0lSQ1VMQVJfUkVGRVJFTkNFOiA2MDAsXG4gICAgLy8gTm9uLXN0YW5kYXJkIHZhbGlkYXRpb24gb3B0aW9uc1xuICAgIFVOS05PV05fUFJPUEVSVFk6IDEwMDBcbn07XG52YXIgRXJyb3JDb2RlTG9va3VwID0ge307XG5mb3IgKHZhciBrZXkgaW4gRXJyb3JDb2Rlcykge1xuICAgIEVycm9yQ29kZUxvb2t1cFtFcnJvckNvZGVzW2tleV1dID0ga2V5O1xufVxudmFyIEVycm9yTWVzc2FnZXNEZWZhdWx0ID0ge1xuICAgIElOVkFMSURfVFlQRTogXCJJbnZhbGlkIHR5cGU6IHt0eXBlfSAoZXhwZWN0ZWQge2V4cGVjdGVkfSlcIixcbiAgICBFTlVNX01JU01BVENIOiBcIk5vIGVudW0gbWF0Y2ggZm9yOiB7dmFsdWV9XCIsXG4gICAgQU5ZX09GX01JU1NJTkc6IFwiRGF0YSBkb2VzIG5vdCBtYXRjaCBhbnkgc2NoZW1hcyBmcm9tIFxcXCJhbnlPZlxcXCJcIixcbiAgICBPTkVfT0ZfTUlTU0lORzogXCJEYXRhIGRvZXMgbm90IG1hdGNoIGFueSBzY2hlbWFzIGZyb20gXFxcIm9uZU9mXFxcIlwiLFxuICAgIE9ORV9PRl9NVUxUSVBMRTogXCJEYXRhIGlzIHZhbGlkIGFnYWluc3QgbW9yZSB0aGFuIG9uZSBzY2hlbWEgZnJvbSBcXFwib25lT2ZcXFwiOiBpbmRpY2VzIHtpbmRleDF9IGFuZCB7aW5kZXgyfVwiLFxuICAgIE5PVF9QQVNTRUQ6IFwiRGF0YSBtYXRjaGVzIHNjaGVtYSBmcm9tIFxcXCJub3RcXFwiXCIsXG4gICAgLy8gTnVtZXJpYyBlcnJvcnNcbiAgICBOVU1CRVJfTVVMVElQTEVfT0Y6IFwiVmFsdWUge3ZhbHVlfSBpcyBub3QgYSBtdWx0aXBsZSBvZiB7bXVsdGlwbGVPZn1cIixcbiAgICBOVU1CRVJfTUlOSU1VTTogXCJWYWx1ZSB7dmFsdWV9IGlzIGxlc3MgdGhhbiBtaW5pbXVtIHttaW5pbXVtfVwiLFxuICAgIE5VTUJFUl9NSU5JTVVNX0VYQ0xVU0lWRTogXCJWYWx1ZSB7dmFsdWV9IGlzIGVxdWFsIHRvIGV4Y2x1c2l2ZSBtaW5pbXVtIHttaW5pbXVtfVwiLFxuICAgIE5VTUJFUl9NQVhJTVVNOiBcIlZhbHVlIHt2YWx1ZX0gaXMgZ3JlYXRlciB0aGFuIG1heGltdW0ge21heGltdW19XCIsXG4gICAgTlVNQkVSX01BWElNVU1fRVhDTFVTSVZFOiBcIlZhbHVlIHt2YWx1ZX0gaXMgZXF1YWwgdG8gZXhjbHVzaXZlIG1heGltdW0ge21heGltdW19XCIsXG4gICAgTlVNQkVSX05PVF9BX05VTUJFUjogXCJWYWx1ZSB7dmFsdWV9IGlzIG5vdCBhIHZhbGlkIG51bWJlclwiLFxuICAgIC8vIFN0cmluZyBlcnJvcnNcbiAgICBTVFJJTkdfTEVOR1RIX1NIT1JUOiBcIlN0cmluZyBpcyB0b28gc2hvcnQgKHtsZW5ndGh9IGNoYXJzKSwgbWluaW11bSB7bWluaW11bX1cIixcbiAgICBTVFJJTkdfTEVOR1RIX0xPTkc6IFwiU3RyaW5nIGlzIHRvbyBsb25nICh7bGVuZ3RofSBjaGFycyksIG1heGltdW0ge21heGltdW19XCIsXG4gICAgU1RSSU5HX1BBVFRFUk46IFwiU3RyaW5nIGRvZXMgbm90IG1hdGNoIHBhdHRlcm46IHtwYXR0ZXJufVwiLFxuICAgIC8vIE9iamVjdCBlcnJvcnNcbiAgICBPQkpFQ1RfUFJPUEVSVElFU19NSU5JTVVNOiBcIlRvbyBmZXcgcHJvcGVydGllcyBkZWZpbmVkICh7cHJvcGVydHlDb3VudH0pLCBtaW5pbXVtIHttaW5pbXVtfVwiLFxuICAgIE9CSkVDVF9QUk9QRVJUSUVTX01BWElNVU06IFwiVG9vIG1hbnkgcHJvcGVydGllcyBkZWZpbmVkICh7cHJvcGVydHlDb3VudH0pLCBtYXhpbXVtIHttYXhpbXVtfVwiLFxuICAgIE9CSkVDVF9SRVFVSVJFRDogXCJNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5OiB7a2V5fVwiLFxuICAgIE9CSkVDVF9BRERJVElPTkFMX1BST1BFUlRJRVM6IFwiQWRkaXRpb25hbCBwcm9wZXJ0aWVzIG5vdCBhbGxvd2VkXCIsXG4gICAgT0JKRUNUX0RFUEVOREVOQ1lfS0VZOiBcIkRlcGVuZGVuY3kgZmFpbGVkIC0ga2V5IG11c3QgZXhpc3Q6IHttaXNzaW5nfSAoZHVlIHRvIGtleToge2tleX0pXCIsXG4gICAgLy8gQXJyYXkgZXJyb3JzXG4gICAgQVJSQVlfTEVOR1RIX1NIT1JUOiBcIkFycmF5IGlzIHRvbyBzaG9ydCAoe2xlbmd0aH0pLCBtaW5pbXVtIHttaW5pbXVtfVwiLFxuICAgIEFSUkFZX0xFTkdUSF9MT05HOiBcIkFycmF5IGlzIHRvbyBsb25nICh7bGVuZ3RofSksIG1heGltdW0ge21heGltdW19XCIsXG4gICAgQVJSQVlfVU5JUVVFOiBcIkFycmF5IGl0ZW1zIGFyZSBub3QgdW5pcXVlIChpbmRpY2VzIHttYXRjaDF9IGFuZCB7bWF0Y2gyfSlcIixcbiAgICBBUlJBWV9BRERJVElPTkFMX0lURU1TOiBcIkFkZGl0aW9uYWwgaXRlbXMgbm90IGFsbG93ZWRcIixcbiAgICAvLyBGb3JtYXQgZXJyb3JzXG4gICAgRk9STUFUX0NVU1RPTTogXCJGb3JtYXQgdmFsaWRhdGlvbiBmYWlsZWQgKHttZXNzYWdlfSlcIixcbiAgICBLRVlXT1JEX0NVU1RPTTogXCJLZXl3b3JkIGZhaWxlZDoge2tleX0gKHttZXNzYWdlfSlcIixcbiAgICAvLyBTY2hlbWEgc3RydWN0dXJlXG4gICAgQ0lSQ1VMQVJfUkVGRVJFTkNFOiBcIkNpcmN1bGFyICRyZWZzOiB7dXJsc31cIixcbiAgICAvLyBOb24tc3RhbmRhcmQgdmFsaWRhdGlvbiBvcHRpb25zXG4gICAgVU5LTk9XTl9QUk9QRVJUWTogXCJVbmtub3duIHByb3BlcnR5IChub3QgaW4gc2NoZW1hKVwiXG59O1xuXG5mdW5jdGlvbiBWYWxpZGF0aW9uRXJyb3IoY29kZSwgcGFyYW1zLCBkYXRhUGF0aCwgc2NoZW1hUGF0aCwgc3ViRXJyb3JzKSB7XG4gICAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgICBpZiAoY29kZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGVycm9yIGNvZGUgc3VwcGxpZWQ6IFwiICsgc2NoZW1hUGF0aCk7XG4gICAgfVxuICAgIHRoaXMubWVzc2FnZSA9ICcnO1xuICAgIHRoaXMucGFyYW1zID0gcGFyYW1zO1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgdGhpcy5kYXRhUGF0aCA9IGRhdGFQYXRoIHx8IFwiXCI7XG4gICAgdGhpcy5zY2hlbWFQYXRoID0gc2NoZW1hUGF0aCB8fCBcIlwiO1xuICAgIHRoaXMuc3ViRXJyb3JzID0gc3ViRXJyb3JzIHx8IG51bGw7XG5cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKHRoaXMubWVzc2FnZSk7XG4gICAgdGhpcy5zdGFjayA9IGVyci5zdGFjayB8fCBlcnIuc3RhY2t0cmFjZTtcbiAgICBpZiAoIXRoaXMuc3RhY2spIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLnN0YWNrID0gZXJyLnN0YWNrIHx8IGVyci5zdGFja3RyYWNlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5WYWxpZGF0aW9uRXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuVmFsaWRhdGlvbkVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFZhbGlkYXRpb25FcnJvcjtcblZhbGlkYXRpb25FcnJvci5wcm90b3R5cGUubmFtZSA9ICdWYWxpZGF0aW9uRXJyb3InO1xuXG5WYWxpZGF0aW9uRXJyb3IucHJvdG90eXBlLnByZWZpeFdpdGggPSBmdW5jdGlvbiAoZGF0YVByZWZpeCwgc2NoZW1hUHJlZml4KSB7XG4gICAgaWYgKGRhdGFQcmVmaXggIT09IG51bGwpIHtcbiAgICAgICAgZGF0YVByZWZpeCA9IGRhdGFQcmVmaXgucmVwbGFjZSgvfi9nLCBcIn4wXCIpLnJlcGxhY2UoL1xcLy9nLCBcIn4xXCIpO1xuICAgICAgICB0aGlzLmRhdGFQYXRoID0gXCIvXCIgKyBkYXRhUHJlZml4ICsgdGhpcy5kYXRhUGF0aDtcbiAgICB9XG4gICAgaWYgKHNjaGVtYVByZWZpeCAhPT0gbnVsbCkge1xuICAgICAgICBzY2hlbWFQcmVmaXggPSBzY2hlbWFQcmVmaXgucmVwbGFjZSgvfi9nLCBcIn4wXCIpLnJlcGxhY2UoL1xcLy9nLCBcIn4xXCIpO1xuICAgICAgICB0aGlzLnNjaGVtYVBhdGggPSBcIi9cIiArIHNjaGVtYVByZWZpeCArIHRoaXMuc2NoZW1hUGF0aDtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3ViRXJyb3JzICE9PSBudWxsKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zdWJFcnJvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuc3ViRXJyb3JzW2ldLnByZWZpeFdpdGgoZGF0YVByZWZpeCwgc2NoZW1hUHJlZml4KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGlzVHJ1c3RlZFVybChiYXNlVXJsLCB0ZXN0VXJsKSB7XG4gICAgaWYgKHRlc3RVcmwuc3Vic3RyaW5nKDAsIGJhc2VVcmwubGVuZ3RoKSA9PT0gYmFzZVVybCkge1xuICAgICAgICB2YXIgcmVtYWluZGVyID0gdGVzdFVybC5zdWJzdHJpbmcoYmFzZVVybC5sZW5ndGgpO1xuICAgICAgICBpZiAoKHRlc3RVcmwubGVuZ3RoID4gMCAmJiB0ZXN0VXJsLmNoYXJBdChiYXNlVXJsLmxlbmd0aCAtIDEpID09PSBcIi9cIilcbiAgICAgICAgICAgIHx8IHJlbWFpbmRlci5jaGFyQXQoMCkgPT09IFwiI1wiXG4gICAgICAgICAgICB8fCByZW1haW5kZXIuY2hhckF0KDApID09PSBcIj9cIikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG52YXIgbGFuZ3VhZ2VzID0ge307XG5cbmZ1bmN0aW9uIGNyZWF0ZUFwaShsYW5ndWFnZSkge1xuICAgIHZhciBnbG9iYWxDb250ZXh0ID0gbmV3IFZhbGlkYXRvckNvbnRleHQoKTtcbiAgICB2YXIgY3VycmVudExhbmd1YWdlO1xuICAgIHZhciBjdXN0b21FcnJvclJlcG9ydGVyO1xuICAgIHZhciBhcGkgPSB7XG4gICAgICAgIHNldEVycm9yUmVwb3J0ZXI6IGZ1bmN0aW9uIChyZXBvcnRlcikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXBvcnRlciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sYW5ndWFnZShyZXBvcnRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXN0b21FcnJvclJlcG9ydGVyID0gcmVwb3J0ZXI7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgYWRkRm9ybWF0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBnbG9iYWxDb250ZXh0LmFkZEZvcm1hdC5hcHBseShnbG9iYWxDb250ZXh0LCBhcmd1bWVudHMpO1xuICAgICAgICB9LFxuICAgICAgICBsYW5ndWFnZTogZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgICAgICAgIGlmICghY29kZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50TGFuZ3VhZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWxhbmd1YWdlc1tjb2RlXSkge1xuICAgICAgICAgICAgICAgIGNvZGUgPSBjb2RlLnNwbGl0KCctJylbMF07IC8vIGZhbGwgYmFjayB0byBiYXNlIGxhbmd1YWdlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobGFuZ3VhZ2VzW2NvZGVdKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudExhbmd1YWdlID0gY29kZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29kZTsgLy8gc28geW91IGNhbiB0ZWxsIGlmIGZhbGwtYmFjayBoYXMgaGFwcGVuZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgYWRkTGFuZ3VhZ2U6IGZ1bmN0aW9uIChjb2RlLCBtZXNzYWdlTWFwKSB7XG4gICAgICAgICAgICB2YXIga2V5O1xuICAgICAgICAgICAgZm9yIChrZXkgaW4gRXJyb3JDb2Rlcykge1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlTWFwW2tleV0gJiYgIW1lc3NhZ2VNYXBbRXJyb3JDb2Rlc1trZXldXSkge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlTWFwW0Vycm9yQ29kZXNba2V5XV0gPSBtZXNzYWdlTWFwW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHJvb3RDb2RlID0gY29kZS5zcGxpdCgnLScpWzBdO1xuICAgICAgICAgICAgaWYgKCFsYW5ndWFnZXNbcm9vdENvZGVdKSB7IC8vIHVzZSBmb3IgYmFzZSBsYW5ndWFnZSBpZiBub3QgeWV0IGRlZmluZWRcbiAgICAgICAgICAgICAgICBsYW5ndWFnZXNbY29kZV0gPSBtZXNzYWdlTWFwO1xuICAgICAgICAgICAgICAgIGxhbmd1YWdlc1tyb290Q29kZV0gPSBtZXNzYWdlTWFwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsYW5ndWFnZXNbY29kZV0gPSBPYmplY3QuY3JlYXRlKGxhbmd1YWdlc1tyb290Q29kZV0pO1xuICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIG1lc3NhZ2VNYXApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBsYW5ndWFnZXNbcm9vdENvZGVdW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZXNbcm9vdENvZGVdW2tleV0gPSBtZXNzYWdlTWFwW2tleV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2VzW2NvZGVdW2tleV0gPSBtZXNzYWdlTWFwW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIGZyZXNoQXBpOiBmdW5jdGlvbiAobGFuZ3VhZ2UpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVBcGkoKTtcbiAgICAgICAgICAgIGlmIChsYW5ndWFnZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5sYW5ndWFnZShsYW5ndWFnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuICAgICAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKGRhdGEsIHNjaGVtYSwgY2hlY2tSZWN1cnNpdmUsIGJhblVua25vd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICB2YXIgZGVmID0gZGVmYXVsdEVycm9yUmVwb3J0ZXIoY3VycmVudExhbmd1YWdlKTtcbiAgICAgICAgICAgIHZhciBlcnJvclJlcG9ydGVyID0gY3VzdG9tRXJyb3JSZXBvcnRlciA/IGZ1bmN0aW9uIChlcnJvciwgZGF0YSwgc2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1c3RvbUVycm9yUmVwb3J0ZXIoZXJyb3IsIGRhdGEsIHNjaGVtYSkgfHwgZGVmKGVycm9yLCBkYXRhLCBzY2hlbWEpO1xuICAgICAgICAgICAgfSA6IGRlZjtcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gbmV3IFZhbGlkYXRvckNvbnRleHQoZ2xvYmFsQ29udGV4dCwgZmFsc2UsIGVycm9yUmVwb3J0ZXIsIGNoZWNrUmVjdXJzaXZlLCBiYW5Vbmtub3duUHJvcGVydGllcyk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNjaGVtYSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHNjaGVtYSA9IHtcIiRyZWZcIjogc2NoZW1hfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRleHQuYWRkU2NoZW1hKFwiXCIsIHNjaGVtYSk7XG4gICAgICAgICAgICB2YXIgZXJyb3IgPSBjb250ZXh0LnZhbGlkYXRlQWxsKGRhdGEsIHNjaGVtYSwgbnVsbCwgbnVsbCwgXCJcIik7XG4gICAgICAgICAgICBpZiAoIWVycm9yICYmIGJhblVua25vd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IgPSBjb250ZXh0LmJhblVua25vd25Qcm9wZXJ0aWVzKGRhdGEsIHNjaGVtYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVycm9yID0gZXJyb3I7XG4gICAgICAgICAgICB0aGlzLm1pc3NpbmcgPSBjb250ZXh0Lm1pc3Npbmc7XG4gICAgICAgICAgICB0aGlzLnZhbGlkID0gKGVycm9yID09PSBudWxsKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbGlkO1xuICAgICAgICB9LFxuICAgICAgICB2YWxpZGF0ZVJlc3VsdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZS5hcHBseShyZXN1bHQsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuICAgICAgICB2YWxpZGF0ZU11bHRpcGxlOiBmdW5jdGlvbiAoZGF0YSwgc2NoZW1hLCBjaGVja1JlY3Vyc2l2ZSwgYmFuVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIHZhciBkZWYgPSBkZWZhdWx0RXJyb3JSZXBvcnRlcihjdXJyZW50TGFuZ3VhZ2UpO1xuICAgICAgICAgICAgdmFyIGVycm9yUmVwb3J0ZXIgPSBjdXN0b21FcnJvclJlcG9ydGVyID8gZnVuY3Rpb24gKGVycm9yLCBkYXRhLCBzY2hlbWEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VzdG9tRXJyb3JSZXBvcnRlcihlcnJvciwgZGF0YSwgc2NoZW1hKSB8fCBkZWYoZXJyb3IsIGRhdGEsIHNjaGVtYSk7XG4gICAgICAgICAgICB9IDogZGVmO1xuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBuZXcgVmFsaWRhdG9yQ29udGV4dChnbG9iYWxDb250ZXh0LCB0cnVlLCBlcnJvclJlcG9ydGVyLCBjaGVja1JlY3Vyc2l2ZSwgYmFuVW5rbm93blByb3BlcnRpZXMpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWEgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBzY2hlbWEgPSB7XCIkcmVmXCI6IHNjaGVtYX07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250ZXh0LmFkZFNjaGVtYShcIlwiLCBzY2hlbWEpO1xuICAgICAgICAgICAgY29udGV4dC52YWxpZGF0ZUFsbChkYXRhLCBzY2hlbWEsIG51bGwsIG51bGwsIFwiXCIpO1xuICAgICAgICAgICAgaWYgKGJhblVua25vd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5iYW5Vbmtub3duUHJvcGVydGllcyhkYXRhLCBzY2hlbWEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgICAgICAgcmVzdWx0LmVycm9ycyA9IGNvbnRleHQuZXJyb3JzO1xuICAgICAgICAgICAgcmVzdWx0Lm1pc3NpbmcgPSBjb250ZXh0Lm1pc3Npbmc7XG4gICAgICAgICAgICByZXN1bHQudmFsaWQgPSAocmVzdWx0LmVycm9ycy5sZW5ndGggPT09IDApO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcbiAgICAgICAgYWRkU2NoZW1hOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsQ29udGV4dC5hZGRTY2hlbWEuYXBwbHkoZ2xvYmFsQ29udGV4dCwgYXJndW1lbnRzKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0U2NoZW1hOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsQ29udGV4dC5nZXRTY2hlbWEuYXBwbHkoZ2xvYmFsQ29udGV4dCwgYXJndW1lbnRzKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0U2NoZW1hTWFwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsQ29udGV4dC5nZXRTY2hlbWFNYXAuYXBwbHkoZ2xvYmFsQ29udGV4dCwgYXJndW1lbnRzKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0U2NoZW1hVXJpczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGdsb2JhbENvbnRleHQuZ2V0U2NoZW1hVXJpcy5hcHBseShnbG9iYWxDb250ZXh0LCBhcmd1bWVudHMpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRNaXNzaW5nVXJpczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGdsb2JhbENvbnRleHQuZ2V0TWlzc2luZ1VyaXMuYXBwbHkoZ2xvYmFsQ29udGV4dCwgYXJndW1lbnRzKTtcbiAgICAgICAgfSxcbiAgICAgICAgZHJvcFNjaGVtYXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGdsb2JhbENvbnRleHQuZHJvcFNjaGVtYXMuYXBwbHkoZ2xvYmFsQ29udGV4dCwgYXJndW1lbnRzKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVmaW5lS2V5d29yZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZ2xvYmFsQ29udGV4dC5kZWZpbmVLZXl3b3JkLmFwcGx5KGdsb2JhbENvbnRleHQsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0sXG4gICAgICAgIGRlZmluZUVycm9yOiBmdW5jdGlvbiAoY29kZU5hbWUsIGNvZGVOdW1iZXIsIGRlZmF1bHRNZXNzYWdlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvZGVOYW1lICE9PSAnc3RyaW5nJyB8fCAhL15bQS1aXSsoX1tBLVpdKykqJC8udGVzdChjb2RlTmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvZGUgbmFtZSBtdXN0IGJlIGEgc3RyaW5nIGluIFVQUEVSX0NBU0VfV0lUSF9VTkRFUlNDT1JFUycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb2RlTnVtYmVyICE9PSAnbnVtYmVyJyB8fCBjb2RlTnVtYmVyICUgMSAhPT0gMCB8fCBjb2RlTnVtYmVyIDwgMTAwMDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvZGUgbnVtYmVyIG11c3QgYmUgYW4gaW50ZWdlciA+IDEwMDAwJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIEVycm9yQ29kZXNbY29kZU5hbWVdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgYWxyZWFkeSBkZWZpbmVkOiAnICsgY29kZU5hbWUgKyAnIGFzICcgKyBFcnJvckNvZGVzW2NvZGVOYW1lXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIEVycm9yQ29kZUxvb2t1cFtjb2RlTnVtYmVyXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIGNvZGUgYWxyZWFkeSB1c2VkOiAnICsgRXJyb3JDb2RlTG9va3VwW2NvZGVOdW1iZXJdICsgJyBhcyAnICsgY29kZU51bWJlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBFcnJvckNvZGVzW2NvZGVOYW1lXSA9IGNvZGVOdW1iZXI7XG4gICAgICAgICAgICBFcnJvckNvZGVMb29rdXBbY29kZU51bWJlcl0gPSBjb2RlTmFtZTtcbiAgICAgICAgICAgIEVycm9yTWVzc2FnZXNEZWZhdWx0W2NvZGVOYW1lXSA9IEVycm9yTWVzc2FnZXNEZWZhdWx0W2NvZGVOdW1iZXJdID0gZGVmYXVsdE1lc3NhZ2U7XG4gICAgICAgICAgICBmb3IgKHZhciBsYW5nQ29kZSBpbiBsYW5ndWFnZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGFuZ3VhZ2UgPSBsYW5ndWFnZXNbbGFuZ0NvZGVdO1xuICAgICAgICAgICAgICAgIGlmIChsYW5ndWFnZVtjb2RlTmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2VbY29kZU51bWJlcl0gPSBsYW5ndWFnZVtjb2RlTnVtYmVyXSB8fCBsYW5ndWFnZVtjb2RlTmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXNldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZ2xvYmFsQ29udGV4dC5yZXNldCgpO1xuICAgICAgICAgICAgdGhpcy5lcnJvciA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLm1pc3NpbmcgPSBbXTtcbiAgICAgICAgICAgIHRoaXMudmFsaWQgPSB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBtaXNzaW5nOiBbXSxcbiAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgIHZhbGlkOiB0cnVlLFxuICAgICAgICBub3JtU2NoZW1hOiBub3JtU2NoZW1hLFxuICAgICAgICByZXNvbHZlVXJsOiByZXNvbHZlVXJsLFxuICAgICAgICBnZXREb2N1bWVudFVyaTogZ2V0RG9jdW1lbnRVcmksXG4gICAgICAgIGVycm9yQ29kZXM6IEVycm9yQ29kZXNcbiAgICB9O1xuICAgIGFwaS5sYW5ndWFnZShsYW5ndWFnZSB8fCAnZW4nKTtcbiAgICByZXR1cm4gYXBpO1xufVxuXG4vL2V4cG9ydCBmdW5jdGlvbiB2YWxpZGF0b3IoKSB7XG52YXIgdHY0ID0gY3JlYXRlQXBpKCk7XG50djQuYWRkTGFuZ3VhZ2UoJ2VuLWdiJywgRXJyb3JNZXNzYWdlc0RlZmF1bHQpO1xuXG4vL2xlZ2FjeSBwcm9wZXJ0eVxudHY0LnR2NCA9IHR2NDtcbi8vcmV0dXJuIHR2NDtcbmV4cG9ydCBkZWZhdWx0IHR2NDtcbi8vfSIsIi8qKlxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxuKlxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qKi9cbi8qKlxuICogU3VwcG9ydCBtb2R1bGUgd2l0aCBzb21lIGZ1bmN0aW9ucyB3aWxsIGJlIHVzZWZ1bFxuICogQG1vZHVsZSB1dGlsc1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYgZGl2aWRlVVJMXG4gKiBAdHlwZSBPYmplY3RcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0eXBlIFRoZSB0eXBlIG9mIFVSTFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRvbWFpbiBUaGUgZG9tYWluIG9mIFVSTFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGlkZW50aXR5IFRoZSBpZGVudGl0eSBvZiBVUkxcbiAqL1xuXG4vKipcbiAqIERpdmlkZSBhbiB1cmwgaW4gdHlwZSwgZG9tYWluIGFuZCBpZGVudGl0eVxuICogQHBhcmFtICB7VVJMLlVSTH0gdXJsIC0gdXJsIGFkZHJlc3NcbiAqIEByZXR1cm4ge2RpdmlkZVVSTH0gdGhlIHJlc3VsdCBvZiBkaXZpZGVVUkxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpdmlkZVVSTCh1cmwpIHtcblxuICBpZiAoIXVybCkgdGhyb3cgRXJyb3IoJ1VSTCBpcyBuZWVkZWQgdG8gc3BsaXQnKTtcblxuICAvLyBsZXQgcmUgPSAvKFthLXpBLVotXSopPzpcXC9cXC8oPzpcXC4pPyhbLWEtekEtWjAtOUA6JS5fXFwrfiM9XXsyLDI1Nn1cXC5bYS16XXsyLDZ9XFxiKSooXFwvW1xcL1xcZFxcd1xcLi1dKikqKD86W1xcP10pKiguKykqL2dpO1xuICBsZXQgcmUgPSAvKFthLXpBLVotXSopOlxcL1xcLyg/OlxcLik/KFstYS16QS1aMC05QDolLl9cXCt+Iz1dezIsMjU2fSkoWy1hLXpBLVowLTlAOiUuX1xcK34jPVxcL10qKS9naTtcbiAgbGV0IHN1YnN0ID0gJyQxLCQyLCQzJztcbiAgbGV0IHBhcnRzID0gdXJsLnJlcGxhY2UocmUsIHN1YnN0KS5zcGxpdCgnLCcpO1xuXG4gIC8vIElmIHRoZSB1cmwgaGFzIG5vIHByb3RvY29sLCB0aGUgZGVmYXVsdCBwcm90b2NvbCBzZXQgaXMgaHR0cHNcbiAgaWYgKHBhcnRzWzBdID09PSB1cmwpIHtcbiAgICBwYXJ0c1swXSA9ICdodHRwcyc7XG4gICAgcGFydHNbMV0gPSB1cmw7XG4gIH1cblxuICBsZXQgcmVzdWx0ID0ge1xuICAgIHR5cGU6IHBhcnRzWzBdLFxuICAgIGRvbWFpbjogcGFydHNbMV0sXG4gICAgaWRlbnRpdHk6IHBhcnRzWzJdXG4gIH07XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpdmlkZUVtYWlsKGVtYWlsKSB7XG4gIGxldCBpbmRleE9mQXQgPSBlbWFpbC5pbmRleE9mKCdAJyk7XG5cbiAgbGV0IHJlc3VsdCA9IHtcbiAgICB1c2VybmFtZTogZW1haWwuc3Vic3RyaW5nKDAsIGluZGV4T2ZBdCksXG4gICAgZG9tYWluOiBlbWFpbC5zdWJzdHJpbmcoaW5kZXhPZkF0ICsgMSwgZW1haWwubGVuZ3RoKVxuICB9O1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYW4gT2JqZWN0IGlzIGVtcHR5XG4gKiBAcGFyYW0gIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gYmUgY2hlY2tlZFxuICogQHJldHVybiB7Qm9vbGVhbn0gICAgICAgc3RhdHVzIG9mIE9iamVjdCwgZW1wdHkgb3Igbm90ICh0cnVlfGZhbHNlKTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVtcHR5T2JqZWN0KG9iamVjdCkge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqZWN0KS5sZW5ndGggPiAwID8gZmFsc2UgOiB0cnVlO1xufVxuXG4vKipcbiAqIE1ha2UgYSBDT1BZIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG4gKiBAcGFyYW0gIHtPYmplY3R9ICBvYmogLSBvYmplY3QgdG8gYmUgY2xvbmVkXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWVwQ2xvbmUob2JqKSB7XG4gIC8vVE9ETzogc2ltcGxlIGJ1dCBpbmVmZmljaWVudCBKU09OIGRlZXAgY2xvbmUuLi5cbiAgaWYgKG9iaikgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVQYXRoRnJvbVVSTCh1cmwpIHtcbiAgbGV0IHNwbGl0VVJMID0gdXJsLnNwbGl0KCcvJyk7XG4gIHJldHVybiBzcGxpdFVSTFswXSArICcvLycgKyBzcGxpdFVSTFsyXSArICcvJyArIHNwbGl0VVJMWzNdO1xufVxuXG4vKipcbiAqIE9idGFpbnMgdGhlIHVzZXIgVVJMIHRoYXQgY29ycmVzcG9uZHMgdG8gYSBnaXZlbiBlbWFpbFxuICogQHBhcmFtICB7c3RyaW5nfSB1c2VyRW1haWwgVGhlIHVzZXIgZW1haWxcbiAqIEByZXR1cm4ge1VSTC5VUkx9IHVzZXJVUkwgVGhlIHVzZXIgVVJMXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRVc2VyVVJMRnJvbUVtYWlsKHVzZXJFbWFpbCkge1xuICBsZXQgaW5kZXhPZkF0ID0gdXNlckVtYWlsLmluZGV4T2YoJ0AnKTtcbiAgcmV0dXJuICd1c2VyOi8vJyArIHVzZXJFbWFpbC5zdWJzdHJpbmcoaW5kZXhPZkF0ICsgMSwgdXNlckVtYWlsLmxlbmd0aCkgKyAnLycgKyB1c2VyRW1haWwuc3Vic3RyaW5nKDAsIGluZGV4T2ZBdCk7XG59XG5cbi8qKlxuICogT2J0YWlucyB0aGUgdXNlciBlbWFpbCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEgZ2l2ZW4gVVJMXG4gKiBAcGFyYW0gIHtVUkwuVVJMfSB1c2VyVVJMIFRoZSB1c2VyIFVSTFxuICogQHJldHVybiB7c3RyaW5nfSB1c2VyRW1haWwgVGhlIHVzZXIgZW1haWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFVzZXJFbWFpbEZyb21VUkwodXNlclVSTCkge1xuICBsZXQgdXJsID0gZGl2aWRlVVJMKHVzZXJVUkwpO1xuICByZXR1cm4gdXJsLmlkZW50aXR5LnJlcGxhY2UoJy8nLCAnJykgKyAnQCcgKyB1cmwuZG9tYWluOyAvLyBpZGVudGl0eSBmaWVsZCBoYXMgJy9leGFtcGxlSUQnIGluc3RlYWQgb2YgJ2V4YW1wbGVJRCdcbn1cblxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSB1c2VyIGlkZW50aWZpZXIgaXMgYWxyZWFkeSBpbiB0aGUgVVJMIGZvcm1hdCwgaWYgbm90LCBjb252ZXJ0IHRvIFVSTCBmb3JtYXRcbiAqIEBwYXJhbSAge3N0cmluZ30gICBpZGVudGlmaWVyICB1c2VyIGlkZW50aWZpZXJcbiAqIEByZXR1cm4ge3N0cmluZ30gICB1c2VyVVJMICAgIHRoZSB1c2VyIFVSTFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFRvVXNlclVSTChpZGVudGlmaWVyKSB7XG5cbiAgLy8gY2hlY2sgaWYgdGhlIGlkZW50aWZpZXIgaXMgYWxyZWFkeSBpbiB0aGUgdXJsIGZvcm1hdFxuICBpZiAoaWRlbnRpZmllci5zdWJzdHJpbmcoMCwgNykgPT09ICd1c2VyOi8vJykge1xuICAgIGxldCBkaXZpZGVkVVJMID0gZGl2aWRlVVJMKGlkZW50aWZpZXIpO1xuXG4gICAgLy9jaGVjayBpZiB0aGUgdXJsIGlzIHdlbGwgZm9ybWF0ZWRcbiAgICBpZiAoZGl2aWRlZFVSTC5kb21haW4gJiYgZGl2aWRlZFVSTC5pZGVudGl0eSkge1xuICAgICAgcmV0dXJuIGlkZW50aWZpZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93ICd1c2VyVVJMIHdpdGggd3JvbmcgZm9ybWF0JztcbiAgICB9XG5cbiAgLy9pZiBub3QsIGNvbnZlcnQgdGhlIHVzZXIgZW1haWwgdG8gVVJMIGZvcm1hdFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBnZXRVc2VyVVJMRnJvbUVtYWlsKGlkZW50aWZpZXIpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RhdGFPYmplY3RVUkwodXJsKSB7XG4gIGxldCBzY2hlbWFzVG9JZ25vcmUgPSBbJ2RvbWFpbi1pZHAnLCAncnVudGltZScsICdkb21haW4nLCAnaHlwZXJ0eSddO1xuICBsZXQgc3BsaXRVUkwgPSAodXJsKS5zcGxpdCgnOi8vJyk7XG4gIGxldCB1cmxTY2hlbWEgPSBzcGxpdFVSTFswXTtcblxuICByZXR1cm4gc2NoZW1hc1RvSWdub3JlLmluZGV4T2YodXJsU2NoZW1hKSA9PT0gLTE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQcmVmaXgob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdC5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIG9iamVjdC5rZXkgPyBvYmplY3Rba2V5XSArICcuJyA6ICcnO1xufVxuIl19

//# sourceMappingURL=Runtime.js.map
",
      "sourceCodeClassname": "Runtime",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 30001,
    "type": "Runtimes",
    "version": "0.1",
    "description": "Description of Runtime",
    "objectName": "Runtime",
    "configuration": {},
    "runtimeType": "browser",
    "hypertyCapabilities": {
      "mic": true,
      "camera": true,
      "sensor": false,
      "webrtc": true,
      "ortc": true
    },
    "protocolCapabilities": {
      "http": true,
      "https": true,
      "ws": true,
      "wss": true,
      "coap": false,
      "datachannel": false
    },
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  }
}