{
  "default": {
    "cguid": 1,
    "type": "ProtoStubs",
    "version": "0.1",
    "description": "Description of VertxProtoStub",
    "objectName": "VertxProtoStub",
    "sourcePackageURL": "/sourcePackage",
    "sourcePackage": {
      "sourceCode": "KGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09Im9iamVjdCImJnR5cGVvZiBtb2R1bGUhPT0idW5kZWZpbmVkIil7bW9kdWxlLmV4cG9ydHM9ZigpfWVsc2UgaWYodHlwZW9mIGRlZmluZT09PSJmdW5jdGlvbiImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT0idW5kZWZpbmVkIil7Zz13aW5kb3d9ZWxzZSBpZih0eXBlb2YgZ2xvYmFsIT09InVuZGVmaW5lZCIpe2c9Z2xvYmFsfWVsc2UgaWYodHlwZW9mIHNlbGYhPT0idW5kZWZpbmVkIil7Zz1zZWxmfWVsc2V7Zz10aGlzfWcuYWN0aXZhdGUgPSBmKCl9fSkoZnVuY3Rpb24oKXt2YXIgZGVmaW5lLG1vZHVsZSxleHBvcnRzO3JldHVybiAoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PSJmdW5jdGlvbiImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoIkNhbm5vdCBmaW5kIG1vZHVsZSAnIitvKyInIik7dGhyb3cgZi5jb2RlPSJNT0RVTEVfTk9UX0ZPVU5EIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PSJmdW5jdGlvbiImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTsKCmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGFjdGl2YXRlOwoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9Cgp2YXIgVmVydHhQcm90b1N0dWIgPSAoZnVuY3Rpb24gKCkgewogIC8qIHByaXZhdGUKICAgIF9jb250aW51b3VzT3BlbjogYm9vbGVhbgogICAgIF9ydW50aW1lUHJvdG9TdHViVVJMOiBzdHJpbmcKICAgIF9idXM6IE1pbmlCdXMKICAgIF9tc2dDYWxsYmFjazogKE1lc3NhZ2UpID0+IHZvaWQKICAgIF9jb25maWc6IHsgdXJsLCBydW50aW1lVVJMIH0KICAgICBfc29jazogKFdlYlNvY2tldCB8IFNvY2tKUykKICAgIF9yZU9wZW46IGJvb2xlYW4KICAqLwoKICAvKioKICAgKiBWZXJ0eCBQcm90b1N0dWIgY3JlYXRpb24KICAgKiBAcGFyYW0gIHtzdHJpbmd9IHJ1bnRpbWVQcm90b1N0dWJVUkwgLSBVUkwgdXNlZCBpbnRlcm5hbGx5IGZvciBtZXNzYWdlIGRlbGl2ZXJ5IHBvaW50LiBOb3QgdXNlZCBmb3IgTWVzc2FnZU5vZGUgZGVsaXZlci4KICAgKiBAcGFyYW0gIHtNaW5pQnVzfSBidXMgLSBNaW5pQnVzIHVzZWQgdG8gc2VuZC9yZWNlaXZlIG1lc3NhZ2VzLiBOb3JtYWxseSBjb25uZWN0ZWQgdG8gdGhlIE1lc3NhZ2VCdXMuCiAgICogQHBhcmFtICB7T2JqZWN0fSBjb25maWcgLSBNYW5kYXRvcnkgZmllbGRzIGFyZTogInVybCIgb2YgdGhlIE1lc3NhZ2VOb2RlIGFkZHJlc3MgYW5kICJydW50aW1lVVJMIi4KICAgKiBAcmV0dXJuIHtWZXJ0eFByb3RvU3R1Yn0KICAgKi8KCiAgZnVuY3Rpb24gVmVydHhQcm90b1N0dWIocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWZXJ0eFByb3RvU3R1Yik7CgogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICB0aGlzLl9pZCA9IDA7CiAgICB0aGlzLl9jb250aW51b3VzT3BlbiA9IHRydWU7CgogICAgdGhpcy5fcnVudGltZVByb3RvU3R1YlVSTCA9IHJ1bnRpbWVQcm90b1N0dWJVUkw7CiAgICB0aGlzLl9idXMgPSBidXM7CiAgICB0aGlzLl9jb25maWcgPSBjb25maWc7CgogICAgdGhpcy5fcnVudGltZVNlc3Npb25VUkwgPSBjb25maWcucnVudGltZVVSTDsKICAgIHRoaXMuX3JlT3BlbiA9IGZhbHNlOwoKICAgIGJ1cy5hZGRMaXN0ZW5lcignKicsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgX3RoaXMuX29wZW4oZnVuY3Rpb24gKCkgewogICAgICAgIGlmIChfdGhpcy5fZmlsdGVyKG1zZykpIHsKICAgICAgICAgIF90aGlzLl9zb2NrLnNlbmQoSlNPTi5zdHJpbmdpZnkobXNnKSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0pOwogIH0KCiAgLyoqCiAgICogR2V0IHRoZSBjb25maWd1cmF0aW9uIGZvciB0aGlzIFByb3RvU3R1YgogICAqIEByZXR1cm4ge09iamVjdH0gLSBNYW5kYXRvcnkgZmllbGRzIGFyZTogInVybCIgb2YgdGhlIE1lc3NhZ2VOb2RlIGFkZHJlc3MgYW5kICJydW50aW1lVVJMIi4KICAgKi8KCiAgX2NyZWF0ZUNsYXNzKFZlcnR4UHJvdG9TdHViLCBbewogICAga2V5OiAnY29ubmVjdCcsCgogICAgLyoqCiAgICAgKiBUcnkgdG8gb3BlbiB0aGUgY29ubmVjdGlvbiB0byB0aGUgTWVzc2FnZU5vZGUuIENvbm5lY3Rpb24gaXMgYXV0byBtYW5hZ2VkLCB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgdGhpcyBleHBsaWNpdGx5LgogICAgICogSG93ZXZlciwgaWYgImRpc2Nvbm5lY3QoKSIgaXMgY2FsbGVkLCBpdCdzIG5lY2Vzc2FyeSB0byBjYWxsIHRoaXMgdG8gZW5hYmxlIGNvbm5lY3Rpb25zIGFnYWluLgogICAgICogQSBzdGF0dXMgbWVzc2FnZSBpcyBzZW50IHRvICJydW50aW1lUHJvdG9TdHViVVJML3N0YXR1cyIsIGNvbnRhaW5pbmcgdGhlIHZhbHVlICJjb25uZWN0ZWQiIGlmIHN1Y2Nlc3NmdWwsIG9yICJkaXNjb25uZWN0ZWQiIGlmIHNvbWUgZXJyb3Igb2NjdXJzLgogICAgICovCiAgICB2YWx1ZTogZnVuY3Rpb24gY29ubmVjdCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIF90aGlzLl9jb250aW51b3VzT3BlbiA9IHRydWU7CiAgICAgIF90aGlzLl9vcGVuKGZ1bmN0aW9uICgpIHt9KTsKICAgIH0KCiAgICAvKioKICAgICAqIEl0IHdpbGwgZGlzY29ubmVjdCBhbmQgb3JkZXIgdG8gc3RheSBkaXNjb25uZWN0ZWQuIFJlY29ubmVjdGlvbiB0cmllcywgd2lsbCBub3QgYmUgYXR0ZW1wdGVkLCB1bmxlc3MgImNvbm5lY3QoKSIgaXMgY2FsbGVkLgogICAgICogQSBzdGF0dXMgbWVzc2FnZSBpcyBzZW50IHRvICJydW50aW1lUHJvdG9TdHViVVJML3N0YXR1cyIgd2l0aCB2YWx1ZSAiZGlzY29ubmVjdGVkIi4KICAgICAqLwogIH0sIHsKICAgIGtleTogJ2Rpc2Nvbm5lY3QnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2Nvbm5lY3QoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBfdGhpcy5fY29udGludW91c09wZW4gPSBmYWxzZTsKICAgICAgaWYgKF90aGlzLl9zb2NrKSB7CiAgICAgICAgX3RoaXMuX3NlbmRDbG9zZSgpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAnX3NlbmRPcGVuJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfc2VuZE9wZW4oY2FsbGJhY2spIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIF90aGlzLl9pZCsrOwogICAgICB2YXIgbXNnID0gewogICAgICAgIGlkOiBfdGhpcy5faWQsIHR5cGU6ICdvcGVuJywgZnJvbTogX3RoaXMuX3J1bnRpbWVTZXNzaW9uVVJMLCB0bzogJ21uOi9zZXNzaW9uJwogICAgICB9OwoKICAgICAgaWYgKF90aGlzLl9yZU9wZW4pIHsKICAgICAgICBtc2cudHlwZSA9ICdyZS1vcGVuJzsKICAgICAgfQoKICAgICAgLy9yZWdpc3RlciBhbmQgd2FpdCBmb3Igb3BlbiByZXBseS4uLgogICAgICB2YXIgaGFzUmVzcG9uc2UgPSBmYWxzZTsKICAgICAgX3RoaXMuX3Nlc3Npb25DYWxsYmFjayA9IGZ1bmN0aW9uIChyZXBseSkgewogICAgICAgIGlmIChyZXBseS50eXBlID09PSAncmVzcG9uc2UnICYgcmVwbHkuaWQgPT09IG1zZy5pZCkgewogICAgICAgICAgaGFzUmVzcG9uc2UgPSB0cnVlOwogICAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7CiAgICAgICAgICAgIGlmIChyZXBseS5ib2R5LnJ1bnRpbWVUb2tlbikgewogICAgICAgICAgICAgIC8vc2V0dXAgcnVudGltZVNlc3Npb24KICAgICAgICAgICAgICBfdGhpcy5fcmVPcGVuID0gdHJ1ZTsKICAgICAgICAgICAgICBfdGhpcy5fcnVudGltZVNlc3Npb25VUkwgPSBfdGhpcy5fY29uZmlnLnJ1bnRpbWVVUkwgKyAnLycgKyByZXBseS5ib2R5LnJ1bnRpbWVUb2tlbjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgX3RoaXMuX3NlbmRTdGF0dXMoJ2Nvbm5lY3RlZCcpOwogICAgICAgICAgICBjYWxsYmFjaygpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgX3RoaXMuX3NlbmRTdGF0dXMoJ2Rpc2Nvbm5lY3RlZCcsIHJlcGx5LmJvZHkuZGVzYyk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9OwoKICAgICAgX3RoaXMuX3NvY2suc2VuZChKU09OLnN0cmluZ2lmeShtc2cpKTsKICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYgKCFoYXNSZXNwb25zZSkgewogICAgICAgICAgLy9ubyByZXNwb25zZSBhZnRlciB4IHNlY29uZHMuLi4KICAgICAgICAgIF90aGlzLl9zZW5kU3RhdHVzKCdkaXNjb25uZWN0ZWQnLCAnVGltZW91dCBmcm9tIG1uOi9zZXNzaW9uJyk7CiAgICAgICAgfQogICAgICB9LCAzMDAwKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfc2VuZENsb3NlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfc2VuZENsb3NlKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgX3RoaXMuX2lkKys7CiAgICAgIHZhciBtc2cgPSB7CiAgICAgICAgaWQ6IF90aGlzLl9pZCwgdHlwZTogJ2Nsb3NlJywgZnJvbTogX3RoaXMuX3J1bnRpbWVTZXNzaW9uVVJMLCB0bzogJ21uOi9zZXNzaW9uJwogICAgICB9OwoKICAgICAgLy9pbnZhbGlkYXRlIHJ1bnRpbWVTZXNzaW9uCiAgICAgIF90aGlzLl9yZU9wZW4gPSBmYWxzZTsKICAgICAgX3RoaXMuX3J1bnRpbWVTZXNzaW9uVVJMID0gX3RoaXMuX2NvbmZpZy5fcnVudGltZVVSTDsKCiAgICAgIF90aGlzLl9zb2NrLnNlbmQoSlNPTi5zdHJpbmdpZnkobXNnKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX3NlbmRTdGF0dXMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9zZW5kU3RhdHVzKHZhbHVlLCByZWFzb24pIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBtc2cgPSB7CiAgICAgICAgdHlwZTogJ3VwZGF0ZScsCiAgICAgICAgZnJvbTogX3RoaXMuX3J1bnRpbWVQcm90b1N0dWJVUkwsCiAgICAgICAgdG86IF90aGlzLl9ydW50aW1lUHJvdG9TdHViVVJMICsgJy9zdGF0dXMnLAogICAgICAgIGJvZHk6IHsKICAgICAgICAgIHZhbHVlOiB2YWx1ZQogICAgICAgIH0KICAgICAgfTsKCiAgICAgIGlmIChyZWFzb24pIHsKICAgICAgICBtc2cuYm9keS5kZXNjID0gcmVhc29uOwogICAgICB9CgogICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG1zZyk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX3dhaXRSZWFkeScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3dhaXRSZWFkeShjYWxsYmFjaykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgaWYgKF90aGlzLl9zb2NrLnJlYWR5U3RhdGUgPT09IDEpIHsKICAgICAgICBjYWxsYmFjaygpOwogICAgICB9IGVsc2UgewogICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgX3RoaXMuX3dhaXRSZWFkeShjYWxsYmFjayk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICdfZmlsdGVyJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfZmlsdGVyKG1zZykgewogICAgICBpZiAobXNnLmJvZHkgJiYgbXNnLmJvZHkudmlhID09PSB0aGlzLl9ydW50aW1lUHJvdG9TdHViVVJMKSByZXR1cm4gZmFsc2U7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogIH0sIHsKICAgIGtleTogJ19kZWxpdmVyJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVsaXZlcihtc2cpIHsKICAgICAgaWYgKCFtc2cuYm9keSkgbXNnLmJvZHkgPSB7fTsKCiAgICAgIG1zZy5ib2R5LnZpYSA9IHRoaXMuX3J1bnRpbWVQcm90b1N0dWJVUkw7CiAgICAgIHRoaXMuX2J1cy5wb3N0TWVzc2FnZShtc2cpOwogICAgfQogIH0sIHsKICAgIGtleTogJ19vcGVuJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfb3BlbihjYWxsYmFjaykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgaWYgKCF0aGlzLl9jb250aW51b3VzT3BlbikgewogICAgICAgIC8vVE9ETzogc2VuZCBzdGF0dXMgKHNlbnQgbWVzc2FnZSBlcnJvciAtIGRpc2Nvbm5lY3RlZCkKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmICghX3RoaXMuX3NvY2spIHsKICAgICAgICBpZiAoX3RoaXMuX2NvbmZpZy51cmwuc3Vic3RyaW5nKDAsIDIpID09PSAnd3MnKSB7CiAgICAgICAgICBfdGhpcy5fc29jayA9IG5ldyBXZWJTb2NrZXQoX3RoaXMuX2NvbmZpZy51cmwpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBfdGhpcy5fc29jayA9IG5ldyBTb2NrSlMoX3RoaXMuX2NvbmZpZy51cmwpOwogICAgICAgIH0KCiAgICAgICAgX3RoaXMuX3NvY2sub25vcGVuID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgX3RoaXMuX3NlbmRPcGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgY2FsbGJhY2soKTsKICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIF90aGlzLl9zb2NrLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICB2YXIgbXNnID0gSlNPTi5wYXJzZShlLmRhdGEpOwogICAgICAgICAgaWYgKG1zZy5mcm9tID09PSAnbW46L3Nlc3Npb24nKSB7CiAgICAgICAgICAgIGlmIChfdGhpcy5fc2Vzc2lvbkNhbGxiYWNrKSB7CiAgICAgICAgICAgICAgX3RoaXMuX3Nlc3Npb25DYWxsYmFjayhtc2cpOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBfdGhpcy5fZGVsaXZlcihtc2cpOwogICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIF90aGlzLl9zb2NrLm9uY2xvc2UgPSBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICAgIHZhciByZWFzb24gPSB1bmRlZmluZWQ7CgogICAgICAgICAgLy9TZWUgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzY0NTUjc2VjdGlvbi03LjQKICAgICAgICAgIGlmIChldmVudC5jb2RlID09PSAxMDAwKSB7CiAgICAgICAgICAgIHJlYXNvbiA9ICdOb3JtYWwgY2xvc3VyZSwgbWVhbmluZyB0aGF0IHRoZSBwdXJwb3NlIGZvciB3aGljaCB0aGUgY29ubmVjdGlvbiB3YXMgZXN0YWJsaXNoZWQgaGFzIGJlZW4gZnVsZmlsbGVkLic7CiAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmNvZGUgPT09IDEwMDEpIHsKICAgICAgICAgICAgcmVhc29uID0gJ0FuIGVuZHBvaW50IGlzIFwnZ29pbmcgYXdheVwnLCBzdWNoIGFzIGEgc2VydmVyIGdvaW5nIGRvd24gb3IgYSBicm93c2VyIGhhdmluZyBuYXZpZ2F0ZWQgYXdheSBmcm9tIGEgcGFnZS4nOwogICAgICAgICAgfSBlbHNlIGlmIChldmVudC5jb2RlID09PSAxMDAyKSB7CiAgICAgICAgICAgIHJlYXNvbiA9ICdBbiBlbmRwb2ludCBpcyB0ZXJtaW5hdGluZyB0aGUgY29ubmVjdGlvbiBkdWUgdG8gYSBwcm90b2NvbCBlcnJvcic7CiAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmNvZGUgPT09IDEwMDMpIHsKICAgICAgICAgICAgcmVhc29uID0gJ0FuIGVuZHBvaW50IGlzIHRlcm1pbmF0aW5nIHRoZSBjb25uZWN0aW9uIGJlY2F1c2UgaXQgaGFzIHJlY2VpdmVkIGEgdHlwZSBvZiBkYXRhIGl0IGNhbm5vdCBhY2NlcHQgKGUuZy4sIGFuIGVuZHBvaW50IHRoYXQgdW5kZXJzdGFuZHMgb25seSB0ZXh0IGRhdGEgTUFZIHNlbmQgdGhpcyBpZiBpdCByZWNlaXZlcyBhIGJpbmFyeSBtZXNzYWdlKS4nOwogICAgICAgICAgfSBlbHNlIGlmIChldmVudC5jb2RlID09PSAxMDA0KSB7CiAgICAgICAgICAgIHJlYXNvbiA9ICdSZXNlcnZlZC4gVGhlIHNwZWNpZmljIG1lYW5pbmcgbWlnaHQgYmUgZGVmaW5lZCBpbiB0aGUgZnV0dXJlLic7CiAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmNvZGUgPT09IDEwMDUpIHsKICAgICAgICAgICAgcmVhc29uID0gJ05vIHN0YXR1cyBjb2RlIHdhcyBhY3R1YWxseSBwcmVzZW50Lic7CiAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmNvZGUgPT09IDEwMDYpIHsKICAgICAgICAgICAgcmVhc29uID0gJ1RoZSBjb25uZWN0aW9uIHdhcyBjbG9zZWQgYWJub3JtYWxseSwgZS5nLiwgd2l0aG91dCBzZW5kaW5nIG9yIHJlY2VpdmluZyBhIENsb3NlIGNvbnRyb2wgZnJhbWUnOwogICAgICAgICAgfSBlbHNlIGlmIChldmVudC5jb2RlID09PSAxMDA3KSB7CiAgICAgICAgICAgIHJlYXNvbiA9ICdBbiBlbmRwb2ludCBpcyB0ZXJtaW5hdGluZyB0aGUgY29ubmVjdGlvbiBiZWNhdXNlIGl0IGhhcyByZWNlaXZlZCBkYXRhIHdpdGhpbiBhIG1lc3NhZ2UgdGhhdCB3YXMgbm90IGNvbnNpc3RlbnQgd2l0aCB0aGUgdHlwZSBvZiB0aGUgbWVzc2FnZSAoZS5nLiwgbm9uLVVURi04IFtodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzNjI5XSBkYXRhIHdpdGhpbiBhIHRleHQgbWVzc2FnZSkuJzsKICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQuY29kZSA9PT0gMTAwOCkgewogICAgICAgICAgICByZWFzb24gPSAnQW4gZW5kcG9pbnQgaXMgdGVybWluYXRpbmcgdGhlIGNvbm5lY3Rpb24gYmVjYXVzZSBpdCBoYXMgcmVjZWl2ZWQgYSBtZXNzYWdlIHRoYXQgInZpb2xhdGVzIGl0cyBwb2xpY3kiLiBUaGlzIHJlYXNvbiBpcyBnaXZlbiBlaXRoZXIgaWYgdGhlcmUgaXMgbm8gb3RoZXIgc3V0aWJsZSByZWFzb24sIG9yIGlmIHRoZXJlIGlzIGEgbmVlZCB0byBoaWRlIHNwZWNpZmljIGRldGFpbHMgYWJvdXQgdGhlIHBvbGljeS4nOwogICAgICAgICAgfSBlbHNlIGlmIChldmVudC5jb2RlID09PSAxMDA5KSB7CiAgICAgICAgICAgIHJlYXNvbiA9ICdBbiBlbmRwb2ludCBpcyB0ZXJtaW5hdGluZyB0aGUgY29ubmVjdGlvbiBiZWNhdXNlIGl0IGhhcyByZWNlaXZlZCBhIG1lc3NhZ2UgdGhhdCBpcyB0b28gYmlnIGZvciBpdCB0byBwcm9jZXNzLic7CiAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmNvZGUgPT09IDEwMTApIHsKICAgICAgICAgICAgcmVhc29uID0gJ0FuIGVuZHBvaW50IChjbGllbnQpIGlzIHRlcm1pbmF0aW5nIHRoZSBjb25uZWN0aW9uIGJlY2F1c2UgaXQgaGFzIGV4cGVjdGVkIHRoZSBzZXJ2ZXIgdG8gbmVnb3RpYXRlIG9uZSBvciBtb3JlIGV4dGVuc2lvbiwgYnV0IHRoZSBzZXJ2ZXIgZGlkblwndCByZXR1cm4gdGhlbSBpbiB0aGUgcmVzcG9uc2UgbWVzc2FnZSBvZiB0aGUgV2ViU29ja2V0IGhhbmRzaGFrZS4gPGJyIC8+IFNwZWNpZmljYWxseSwgdGhlIGV4dGVuc2lvbnMgdGhhdCBhcmUgbmVlZGVkIGFyZTogJyArIGV2ZW50LnJlYXNvbjsKICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQuY29kZSA9PT0gMTAxMSkgewogICAgICAgICAgICByZWFzb24gPSAnQSBzZXJ2ZXIgaXMgdGVybWluYXRpbmcgdGhlIGNvbm5lY3Rpb24gYmVjYXVzZSBpdCBlbmNvdW50ZXJlZCBhbiB1bmV4cGVjdGVkIGNvbmRpdGlvbiB0aGF0IHByZXZlbnRlZCBpdCBmcm9tIGZ1bGZpbGxpbmcgdGhlIHJlcXVlc3QuJzsKICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQuY29kZSA9PT0gMTAxNSkgewogICAgICAgICAgICByZWFzb24gPSAnVGhlIGNvbm5lY3Rpb24gd2FzIGNsb3NlZCBkdWUgdG8gYSBmYWlsdXJlIHRvIHBlcmZvcm0gYSBUTFMgaGFuZHNoYWtlIChlLmcuLCB0aGUgc2VydmVyIGNlcnRpZmljYXRlIGNhblwndCBiZSB2ZXJpZmllZCkuJzsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlYXNvbiA9ICdVbmtub3duIHJlYXNvbic7CiAgICAgICAgICB9CgogICAgICAgICAgZGVsZXRlIF90aGlzLl9zb2NrOwogICAgICAgICAgX3RoaXMuX3NlbmRTdGF0dXMoJ2Rpc2Nvbm5lY3RlZCcsIHJlYXNvbik7CiAgICAgICAgfTsKICAgICAgfSBlbHNlIHsKICAgICAgICBfdGhpcy5fd2FpdFJlYWR5KGNhbGxiYWNrKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogJ2NvbmZpZycsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdydW50aW1lU2Vzc2lvbicsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3J1bnRpbWVTZXNzaW9uVVJMOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFZlcnR4UHJvdG9TdHViOwp9KSgpOwoKZnVuY3Rpb24gYWN0aXZhdGUodXJsLCBidXMsIGNvbmZpZykgewogIHJldHVybiB7CiAgICBuYW1lOiAnVmVydHhQcm90b1N0dWInLAogICAgaW5zdGFuY2U6IG5ldyBWZXJ0eFByb3RvU3R1Yih1cmwsIGJ1cywgY29uZmlnKQogIH07Cn0KCi8qKgoqIENhbGxiYWNrIHVzZWQgdG8gc2VuZCBtZXNzYWdlcwoqIEBjYWxsYmFjayBQb3N0TWVzc2FnZQoqIEBwYXJhbSB7TWVzc2FnZX0gbXNnIC0gTWVzc2FnZSB0byBzZW5kCiovCm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7fV19LHt9LFsxXSkoMSkKfSk7",
      "sourceCodeClassname": "VertxProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "configuration": {
      "url": "wss://msg-node.localhost:9090/ws"
    },
    "constraints": "",
    "hypertyCapabilities": "",
    "protocolCapabilities": "",
    "policies": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "IdpProxyProtoStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "IdpProxyProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 1,
    "type": "ProtoStubs",
    "version": "0.1",
    "description": "Description of IdpProxyProtoStub",
    "objectName": "IdpProxyProtoStub",
    "configuration": {},
    "constraints": "",
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "NodejsProtoStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "NodejsProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 1,
    "type": "ProtoStubs",
    "version": "0.1",
    "description": "Description of NodejsProtoStub",
    "objectName": "NodejsProtoStub",
    "configuration": {
      "url": "wss://msg-node.rethink.apizee.com/"
    },
    "constraints": "",
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  }
}